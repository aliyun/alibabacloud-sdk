/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('ens', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model BucketInfo {
  bucketAcl?: string(name='BucketAcl', example='private'),
  bucketName?: string(name='BucketName', description='This parameter is required.', example='bucket001'),
  comment?: string(name='Comment', example='this is a bucket'),
  createTime?: string(name='CreateTime', example='2011-12-01T12:27:13.000Z'),
  dataRedundancyType?: string(name='DataRedundancyType', example='LRS'),
  dispatcherType?: string(name='DispatcherType', example='global'),
  endpoint?: string(name='Endpoint', example='eos.aliyuncs.com'),
  ensRegionId?: string(name='EnsRegionId'),
  modifyTime?: string(name='ModifyTime', example='2011-12-01T12:27:13.000Z'),
  resourceType?: string(name='ResourceType', example='general'),
  storageClass?: string(name='StorageClass', example='Standard'),
}

model DataDisk {
  size?: long(name='Size', example='60'),
}

model HealthCheck {
  healthCheck?: string(name='HealthCheck'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort'),
  healthCheckConnectTimeout?: int32(name='HealthCheckConnectTimeout'),
  healthCheckDomain?: string(name='HealthCheckDomain'),
  healthCheckHttpCode?: string(name='HealthCheckHttpCode'),
  healthCheckInterval?: int32(name='HealthCheckInterval'),
  healthCheckMethod?: string(name='HealthCheckMethod'),
  healthCheckTimeout?: int32(name='HealthCheckTimeout'),
  healthCheckType?: string(name='HealthCheckType'),
  healthCheckURI?: string(name='HealthCheckURI'),
  healthyThreshold?: int32(name='HealthyThreshold'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold'),
}

model HttpConfig {
  cookie?: string(name='Cookie'),
  cookieTimeout?: int32(name='CookieTimeout', example='500'),
  idleTimeout?: int32(name='IdleTimeout'),
  requestTimeout?: int32(name='RequestTimeout'),
  scheduler?: string(name='Scheduler'),
  serverCertificateId?: string(name='ServerCertificateId'),
  stickySession?: string(name='StickySession', nullable=false),
  stickySessionType?: string(name='StickySessionType', example='insert'),
  XForwardedFor?: string(name='XForwardedFor', example='on'),
}

model InstanceActiveOpsGroup {
  instanceIds?: [ string ](name='InstanceIds'),
}

model InstanceActiveOpsTask {
  instanceActiveOpsTaskId?: string(name='InstanceActiveOpsTaskId'),
  instanceActiveOpsTaskStatus?: string(name='InstanceActiveOpsTaskStatus'),
}

model InstanceOperateResponse {
  code?: long(name='Code'),
  instanceId?: string(name='InstanceId'),
  message?: string(name='Message'),
}

model SecurityGroupRule {
  description?: string(name='Description'),
  destCidrIp?: string(name='DestCidrIp'),
  direction?: string(name='Direction'),
  ipProtocol?: string(name='IpProtocol'),
  policy?: string(name='Policy'),
  portRange?: string(name='PortRange'),
  sourceCidrIp?: string(name='SourceCidrIp'),
  sourcePortRange?: string(name='SourcePortRange'),
  priority?: int32(name='priority'),
}

model TagsInParams {
  tag?: [ 
    {
      key?: string(name='Key', description='This parameter is required.', example='test-key'),
      value?: string(name='Value', example='test-key-value'),
    }
  ](name='Tag'),
}

model TcpConfig {
  establishedTimeout?: int32(name='EstablishedTimeout'),
  persistenceTimeout?: int32(name='PersistenceTimeout'),
  scheduler?: string(name='Scheduler'),
}

model UdpCheck {
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort'),
  healthCheckConnectTimeout?: int32(name='HealthCheckConnectTimeout'),
  healthCheckInterval?: int32(name='HealthCheckInterval'),
  healthyThreshold?: int32(name='HealthyThreshold'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold'),
}

model UdpConfig {
  hashKey?: string(name='HashKey'),
  scheduler?: string(name='Scheduler'),
}

model AccosicateNetworkAclRequest {
  networkAclId?: string(name='NetworkAclId', description='The ID of the network ACL.

This parameter is required.', example='nacl-a2do9e413e0sp****'),
  resource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the associated resource.

This parameter is required.', example='n-5****'),
      resourceType?: string(name='ResourceType', description='The type of the associated resource. Set the value to **Network**.

Valid values of **N**: 0 to 29. You can associate a network ACL with at most 30 resources.

This parameter is required.', example='Network'),
    }
  ](name='Resource', description='The type of resource with which you want to associate the network ACL.

This parameter is required.'),
}

model AccosicateNetworkAclResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model AccosicateNetworkAclResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AccosicateNetworkAclResponseBody(name='body'),
}

/**
 * @summary Associates a network access control list (ACL) with a network.
 *
 * @param request AccosicateNetworkAclRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AccosicateNetworkAclResponse
 */
async function accosicateNetworkAclWithOptions(request: AccosicateNetworkAclRequest, runtime: Util.RuntimeOptions): AccosicateNetworkAclResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.networkAclId)) {
    query['NetworkAclId'] = request.networkAclId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AccosicateNetworkAcl',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Associates a network access control list (ACL) with a network.
 *
 * @param request AccosicateNetworkAclRequest
 * @return AccosicateNetworkAclResponse
 */
async function accosicateNetworkAcl(request: AccosicateNetworkAclRequest): AccosicateNetworkAclResponse {
  var runtime = new Util.RuntimeOptions{};
  return accosicateNetworkAclWithOptions(request, runtime);
}

model AddBackendServersRequest {
  backendServers?: [ 
    {
      ip?: string(name='Ip', description='The IP address of the backend server.', example='192.168.X.X'),
      port?: int32(name='Port', description='The backend port that is used by the ELB instance.', example='3309'),
      serverId?: string(name='ServerId', description='The ID of the backend server.

This parameter is required.', example='i-5uf6dwyzch3wly790****'),
      type?: string(name='Type', description='The type of the backend server. Valid values:

*   **ens**: ENS instance
*   **eni**: elastic network interface (ENI)', example='ens'),
      weight?: int32(name='Weight', description='The weight of the backend server. Default value: 100. Valid values: **0** to **100**.

>  The value 0 indicates that requests are not forwarded to the backend server.', example='100'),
    }
  ](name='BackendServers', description='The list of backend servers that you want to add to the Edge Load Balancer (ELB) instance. You can add up to 20 backend servers at a time.

>  Only Edge Node Service (ENS) instances that are in the running state can be added to the ELB instance as backend servers.

This parameter is required.'),
  loadBalancerId?: string(name='LoadBalancerId', description='The frontend port that is used by the Edge Load Balance (ELB) instance. Valid values: **1** to **65535**.

This parameter is required.', example='lb-5qzdmxefgrpxd7oz2mefonvtx'),
}

model AddBackendServersShrinkRequest {
  backendServersShrink?: string(name='BackendServers', description='The list of backend servers that you want to add to the Edge Load Balancer (ELB) instance. You can add up to 20 backend servers at a time.

>  Only Edge Node Service (ENS) instances that are in the running state can be added to the ELB instance as backend servers.

This parameter is required.'),
  loadBalancerId?: string(name='LoadBalancerId', description='The frontend port that is used by the Edge Load Balance (ELB) instance. Valid values: **1** to **65535**.

This parameter is required.', example='lb-5qzdmxefgrpxd7oz2mefonvtx'),
}

model AddBackendServersResponseBody = {
  backendServers?: {
    backendServer?: [ 
    {
      ip?: string(name='Ip', description='The IP address of the backend server.', example='192.168.0.1'),
      port?: int32(name='Port', description='The backend port that is used by the ELB instance.', example='0'),
      serverId?: string(name='ServerId', description='The ID of the instance that is used as the backend server.', example='i-5uf6hj58zvml4ali8****'),
      type?: string(name='Type', description='The type of the backend server. Valid values:

*   **ens**: ENS instance.
*   **eni**: ENI.', example='ens'),
      weight?: int32(name='Weight', description='The weight of the backend server. Default value: 100. Valid values: **0** to **100**.

>  The value 0 indicates that requests are not forwarded to the backend server.', example='100'),
    }
  ](name='BackendServer')
  }(name='BackendServers', description='The list of backend servers that you want to add. You can add at most 20 backend servers.

>  Only ENS instances that are in the running state can be attached to the ELB instance as backend servers.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AddBackendServersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddBackendServersResponseBody(name='body'),
}

/**
 * @summary Adds backend servers.
 *
 * @description *   You can call this operation up to 100 times per second.
 * *   You can call this operation up to 10 times per second per account.
 *
 * @param tmpReq AddBackendServersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddBackendServersResponse
 */
async function addBackendServersWithOptions(tmpReq: AddBackendServersRequest, runtime: Util.RuntimeOptions): AddBackendServersResponse {
  Util.validateModel(tmpReq);
  var request = new AddBackendServersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.backendServers)) {
    request.backendServersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.backendServers, 'BackendServers', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.backendServersShrink)) {
    query['BackendServers'] = request.backendServersShrink;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddBackendServers',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds backend servers.
 *
 * @description *   You can call this operation up to 100 times per second.
 * *   You can call this operation up to 10 times per second per account.
 *
 * @param request AddBackendServersRequest
 * @return AddBackendServersResponse
 */
async function addBackendServers(request: AddBackendServersRequest): AddBackendServersResponse {
  var runtime = new Util.RuntimeOptions{};
  return addBackendServersWithOptions(request, runtime);
}

model AddNetworkInterfaceToInstanceRequest {
  autoStart?: boolean(name='AutoStart', description='Specifies whether to specify the instance.', example='true'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='yourInstance ID'),
  networks?: string(name='Networks', description='The network. The value is a JSON string. Only IPv6 is supported. Sample code of an IPv6 network: [{ "ipType": "public", "ipAddressType": "ipv6" }]

This parameter is required.', example='[{"ipType": "public", "ipAddressType": "ipv6" }]'),
}

model AddNetworkInterfaceToInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AddNetworkInterfaceToInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddNetworkInterfaceToInstanceResponseBody(name='body'),
}

/**
 * @summary Adds an IPv6 network interface controller (NIC). A public IP address is automatically assigned at the same time.
 *
 * @description # [](#)Usage notes
 * *   You can call this operation up to 100 times per second.
 * *   You can call this operation up to 5 times per second per user.
 * *   Internal networks and IPv4 addresses are not supported.
 *
 * @param request AddNetworkInterfaceToInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddNetworkInterfaceToInstanceResponse
 */
async function addNetworkInterfaceToInstanceWithOptions(request: AddNetworkInterfaceToInstanceRequest, runtime: Util.RuntimeOptions): AddNetworkInterfaceToInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoStart)) {
    query['AutoStart'] = request.autoStart;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.networks)) {
    query['Networks'] = request.networks;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddNetworkInterfaceToInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds an IPv6 network interface controller (NIC). A public IP address is automatically assigned at the same time.
 *
 * @description # [](#)Usage notes
 * *   You can call this operation up to 100 times per second.
 * *   You can call this operation up to 5 times per second per user.
 * *   Internal networks and IPv4 addresses are not supported.
 *
 * @param request AddNetworkInterfaceToInstanceRequest
 * @return AddNetworkInterfaceToInstanceResponse
 */
async function addNetworkInterfaceToInstance(request: AddNetworkInterfaceToInstanceRequest): AddNetworkInterfaceToInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addNetworkInterfaceToInstanceWithOptions(request, runtime);
}

model AddSnatIpForSnatEntryRequest {
  snatEntryId?: string(name='SnatEntryId', description='The ID of the SNAT entry.

This parameter is required.', example='snat-5xkzf89dndkzh8yg9stzqz9m4'),
  snatIp?: string(name='SnatIp', description='The EIP specified in the SNAT entry.

This parameter is required.', example='219.152.82.144'),
}

model AddSnatIpForSnatEntryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CD1FFCC6-5E9E-5C31-A014-13D02737B0EA'),
}

model AddSnatIpForSnatEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddSnatIpForSnatEntryResponseBody(name='body'),
}

/**
 * @summary Adds an elastic IP address (EIP) to a Source Network Address Translation (SNAT) entry.
 *
 * @param request AddSnatIpForSnatEntryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddSnatIpForSnatEntryResponse
 */
async function addSnatIpForSnatEntryWithOptions(request: AddSnatIpForSnatEntryRequest, runtime: Util.RuntimeOptions): AddSnatIpForSnatEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.snatEntryId)) {
    query['SnatEntryId'] = request.snatEntryId;
  }
  if (!Util.isUnset(request.snatIp)) {
    query['SnatIp'] = request.snatIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddSnatIpForSnatEntry',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds an elastic IP address (EIP) to a Source Network Address Translation (SNAT) entry.
 *
 * @param request AddSnatIpForSnatEntryRequest
 * @return AddSnatIpForSnatEntryResponse
 */
async function addSnatIpForSnatEntry(request: AddSnatIpForSnatEntryRequest): AddSnatIpForSnatEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return addSnatIpForSnatEntryWithOptions(request, runtime);
}

model AssignPrivateIpAddressesRequest {
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.

This parameter is required.', example='eni-uf6533jbifugr5fo2j1w'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-5rllcjb3ol6duzjdnbm1ombn7'),
}

model AssignPrivateIpAddressesResponseBody = {
  assignedPrivateIpAddressesSet?: {
    networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-uf620pb4d19ljnu4a64m'),
    privateIpSet?: [ string ](name='PrivateIpSet', description='The assigned private IP addresses.'),
  }(name='AssignedPrivateIpAddressesSet', description='Details about the ENI and the secondary private IP addresses that are assigned to the ENI.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AssignPrivateIpAddressesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssignPrivateIpAddressesResponseBody(name='body'),
}

/**
 * @summary Assigns secondary private IP addresses to an elastic network interface (ENI).
 *
 * @param request AssignPrivateIpAddressesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AssignPrivateIpAddressesResponse
 */
async function assignPrivateIpAddressesWithOptions(request: AssignPrivateIpAddressesRequest, runtime: Util.RuntimeOptions): AssignPrivateIpAddressesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssignPrivateIpAddresses',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Assigns secondary private IP addresses to an elastic network interface (ENI).
 *
 * @param request AssignPrivateIpAddressesRequest
 * @return AssignPrivateIpAddressesResponse
 */
async function assignPrivateIpAddresses(request: AssignPrivateIpAddressesRequest): AssignPrivateIpAddressesResponse {
  var runtime = new Util.RuntimeOptions{};
  return assignPrivateIpAddressesWithOptions(request, runtime);
}

model AssociateEnsEipAddressRequest {
  allocationId?: string(name='AllocationId', description='The ID of the EIP that you want to associate.

This parameter is required.', example='eip-5sc1sgcrsrwgwdvx44hru3p63'),
  instanceId?: string(name='InstanceId', description='The ID of the cloud service with which the EIP is associated.

>  You can specify the ID of an Edge Load Balancer (ELB) instance ID.

This parameter is required.', example='lb-5saivuir6b1mupxjfbhmk1xkb'),
  instanceType?: string(name='InstanceType', description='The type of instance with which you want to associate the EIP. Valid values:

*   **Nat**: a NAT gateway.
*   **SlbInstance**: an ELB instance.
*   **NetworkInterface**: a secondary elastic network interface (ENI).
*   **NatSlbInstance**: If you want to associate multiple EIPs to an ELB instance, you need to set the parameter to this value.
*   **EnsInstance** (default): an ENS instance.', example='SlbInstance'),
  standby?: boolean(name='Standby', description='Specifies whether the EIP is a secondary EIP. Valid values:

*   true
*   false', example='true'),
}

model AssociateEnsEipAddressResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AssociateEnsEipAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssociateEnsEipAddressResponseBody(name='body'),
}

/**
 * @summary Associates an elastic IP address (EIP) with a cloud resource that is deployed in the same region.
 *
 * @param request AssociateEnsEipAddressRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AssociateEnsEipAddressResponse
 */
async function associateEnsEipAddressWithOptions(request: AssociateEnsEipAddressRequest, runtime: Util.RuntimeOptions): AssociateEnsEipAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationId)) {
    query['AllocationId'] = request.allocationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.standby)) {
    query['Standby'] = request.standby;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateEnsEipAddress',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Associates an elastic IP address (EIP) with a cloud resource that is deployed in the same region.
 *
 * @param request AssociateEnsEipAddressRequest
 * @return AssociateEnsEipAddressResponse
 */
async function associateEnsEipAddress(request: AssociateEnsEipAddressRequest): AssociateEnsEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateEnsEipAddressWithOptions(request, runtime);
}

model AssociateHaVipRequest {
  haVipId?: string(name='HaVipId', description='The ID of the HAVIP.

This parameter is required.', example='havip-5p14t****'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='i-50c4****'),
  instanceType?: string(name='InstanceType', description='The type of the instance to be associated with the HAVIP. Valid values:

*   EnsInstance (default): ENS instance.
*   NetworkInterface: ENI. If you want to associate the HAVIP with an ENI, this parameter is required.', example='EnsInstance'),
}

model AssociateHaVipResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model AssociateHaVipResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssociateHaVipResponseBody(name='body'),
}

/**
 * @summary Associates a high-availability virtual IP address (HAVIP) with an Edge Node Service (ENS) instance or elastic network interface (ENI).
 *
 * @description When you call this operation to associate an HAVIP, take note of the following items:
 * *   An HAVIP immediately takes effect after it is associated. You do not need to restart the ENS instance. However, you need to associate the HAVIP with the ENI of the ENS instance.
 * *   The HAVIP and ENS instance must belong to the same vSwitch.
 * *   The ENS instance must be in the Running or Stopped state.
 * *   The HAVIP must be in the Available or InUse state.
 * *   AssociateHaVip is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the DescribeHaVips operation to query the status of an HAVIP:
 *     *   If the HAVIP is in the Associating state, the HAVIP is being associated.
 *     <!---->
 *     *   If the HAVIP is in the InUse state, the HAVIP is associated.
 *
 * @param request AssociateHaVipRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AssociateHaVipResponse
 */
async function associateHaVipWithOptions(request: AssociateHaVipRequest, runtime: Util.RuntimeOptions): AssociateHaVipResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.haVipId)) {
    query['HaVipId'] = request.haVipId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateHaVip',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Associates a high-availability virtual IP address (HAVIP) with an Edge Node Service (ENS) instance or elastic network interface (ENI).
 *
 * @description When you call this operation to associate an HAVIP, take note of the following items:
 * *   An HAVIP immediately takes effect after it is associated. You do not need to restart the ENS instance. However, you need to associate the HAVIP with the ENI of the ENS instance.
 * *   The HAVIP and ENS instance must belong to the same vSwitch.
 * *   The ENS instance must be in the Running or Stopped state.
 * *   The HAVIP must be in the Available or InUse state.
 * *   AssociateHaVip is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the DescribeHaVips operation to query the status of an HAVIP:
 *     *   If the HAVIP is in the Associating state, the HAVIP is being associated.
 *     <!---->
 *     *   If the HAVIP is in the InUse state, the HAVIP is associated.
 *
 * @param request AssociateHaVipRequest
 * @return AssociateHaVipResponse
 */
async function associateHaVip(request: AssociateHaVipRequest): AssociateHaVipResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateHaVipWithOptions(request, runtime);
}

model AttachDiskRequest {
  deleteWithInstance?: string(name='DeleteWithInstance', description='Specifies whether the disk to be attached is released with the instance. Valid values:

*   true: The disk will be released when the ECS instance is released.
*   false: The disk will be retained when the ECS instance is released.
*   If you leave this parameter empty, the default value is used.', example='false'),
  diskId?: string(name='DiskId', description='The ID of the disk to be attached. The cloud disk and the instance must belong to the same node.

This parameter is required.', example='d-5saf13yy6sopmmg88mzsg****'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='i-5rr19av7tkpgi9os52ag1****'),
}

model AttachDiskResponseBody = {
  code?: int32(name='Code', description='The returned service code. 0 indicates that the request was successful.', example='0'),
  requestId?: string(name='RequestId', description='The request ID.', example='916777D9-42D3-5928-92CE-373B1874B674'),
}

model AttachDiskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachDiskResponseBody(name='body'),
}

/**
 * @summary Attaches a disk to an Edge Node Service (ENS) instance.
 *
 * @param request AttachDiskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AttachDiskResponse
 */
async function attachDiskWithOptions(request: AttachDiskRequest, runtime: Util.RuntimeOptions): AttachDiskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deleteWithInstance)) {
    query['DeleteWithInstance'] = request.deleteWithInstance;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachDisk',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Attaches a disk to an Edge Node Service (ENS) instance.
 *
 * @param request AttachDiskRequest
 * @return AttachDiskResponse
 */
async function attachDisk(request: AttachDiskRequest): AttachDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachDiskWithOptions(request, runtime);
}

model AttachEnsInstancesRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance. You can specify only one instance ID.

This parameter is required.', example='testInstacneId'),
  scripts?: string(name='Scripts', description='The command that you want to execute on the instance. The command must be encoded in Base64 or UTF-8.

This parameter is required.', example='wget d2dldCBodHRwOi8vYWxpYWNzLWs4cy1jbxxxx'),
}

model AttachEnsInstancesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C0003E8B-B930-4F59-ADC0-0E209A9012A8'),
}

model AttachEnsInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachEnsInstancesResponseBody(name='body'),
}

/**
 * @summary Adds an Edge Node Service (ENS) instance to Container Service for Kubernetes (ACK).
 *
 * @description # [](#)Usage notes
 * *   You can call this operation up to 10 times per second per account.
 * *   After you execute the command, the instance restarts loading.
 * *   Limits: The instance has at least two vCPUs and 4 GB memory. An image of CentOS 7.4 or later is required.
 *
 * @param request AttachEnsInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AttachEnsInstancesResponse
 */
async function attachEnsInstancesWithOptions(request: AttachEnsInstancesRequest, runtime: Util.RuntimeOptions): AttachEnsInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.scripts)) {
    query['Scripts'] = request.scripts;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachEnsInstances',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds an Edge Node Service (ENS) instance to Container Service for Kubernetes (ACK).
 *
 * @description # [](#)Usage notes
 * *   You can call this operation up to 10 times per second per account.
 * *   After you execute the command, the instance restarts loading.
 * *   Limits: The instance has at least two vCPUs and 4 GB memory. An image of CentOS 7.4 or later is required.
 *
 * @param request AttachEnsInstancesRequest
 * @return AttachEnsInstancesResponse
 */
async function attachEnsInstances(request: AttachEnsInstancesRequest): AttachEnsInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachEnsInstancesWithOptions(request, runtime);
}

model AttachInstanceSDGRequest {
  instanceIds?: [ string ](name='InstanceIds', description='The IDs of the instances.

This parameter is required.'),
  SDGId?: string(name='SDGId', description='The ID of the SDG.

This parameter is required.', example='sdg-xxxx'),
}

model AttachInstanceSDGShrinkRequest {
  instanceIdsShrink?: string(name='InstanceIds', description='The IDs of the instances.

This parameter is required.'),
  SDGId?: string(name='SDGId', description='The ID of the SDG.

This parameter is required.', example='sdg-xxxx'),
}

model AttachInstanceSDGResponseBody = {
  data?: {
    message?: string(name='Message', description='The response message. Success is returned for a successful request.', example='success'),
    result?: {
      failedCount?: long(name='FailedCount', description='The number of failed tasks.', example='0'),
      failedItems?: [ 
        {
          errMessage?: string(name='ErrMessage', description='The error message.', example='sdg not found'),
          instanceId?: string(name='InstanceId', description='The ID of the instance.', example='aic-xxxxx-0'),
        }
      ](name='FailedItems', description='Details about failed tasks.'),
      successCount?: long(name='SuccessCount', description='The number of successful tasks.', example='1'),
    }(name='Result', description='The execution result of the synchronization request.'),
    success?: boolean(name='Success', description='Indicates whether all tasks are successful. Valid values:

*   **true**: All tasks are successful.
*   **false**: Failed tasks exist.', example='true'),
  }(name='Data', description='The returned data object.'),
  requestId?: string(name='RequestId', description='The request ID.', example='C0003E8B-B930-4F59-ADC0-0E209A9012A8'),
}

model AttachInstanceSDGResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachInstanceSDGResponseBody(name='body'),
}

/**
 * @summary Attaches a shared data group (SDG) to the corresponding Android in Container (AIC) instance.
 *
 * @param tmpReq AttachInstanceSDGRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AttachInstanceSDGResponse
 */
async function attachInstanceSDGWithOptions(tmpReq: AttachInstanceSDGRequest, runtime: Util.RuntimeOptions): AttachInstanceSDGResponse {
  Util.validateModel(tmpReq);
  var request = new AttachInstanceSDGShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['InstanceIds'] = request.instanceIdsShrink;
  }
  if (!Util.isUnset(request.SDGId)) {
    query['SDGId'] = request.SDGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachInstanceSDG',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Attaches a shared data group (SDG) to the corresponding Android in Container (AIC) instance.
 *
 * @param request AttachInstanceSDGRequest
 * @return AttachInstanceSDGResponse
 */
async function attachInstanceSDG(request: AttachInstanceSDGRequest): AttachInstanceSDGResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachInstanceSDGWithOptions(request, runtime);
}

model AttachNetworkInterfaceRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance

This parameter is required.', example='i-5p67acfmxazb4p****'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.

This parameter is required.', example='eni-58z57orgmt6d1****'),
}

model AttachNetworkInterfaceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AttachNetworkInterfaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachNetworkInterfaceResponseBody(name='body'),
}

/**
 * @summary Attaches an Elastic Network Interface (ENI) to an Edge Node Service (ECS) instance.
 *
 * @description When you call this operation, take note of the following limits:
 * *   The ENI must be in the Available state.
 * *   An ENI can be attached to only one instance that is the same zone and the same Virtual Private Cloud (VPC).
 * *   The instance must be in the Stopped state.
 * *   A maximum of 10 ENIs can be attached to an instance.
 * *   This operation is an asynchronous operation. After you call this operation to attach an ENI, you can view the status of the ENI to check whether the ENI is attached.
 *
 * @param request AttachNetworkInterfaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AttachNetworkInterfaceResponse
 */
async function attachNetworkInterfaceWithOptions(request: AttachNetworkInterfaceRequest, runtime: Util.RuntimeOptions): AttachNetworkInterfaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachNetworkInterface',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Attaches an Elastic Network Interface (ENI) to an Edge Node Service (ECS) instance.
 *
 * @description When you call this operation, take note of the following limits:
 * *   The ENI must be in the Available state.
 * *   An ENI can be attached to only one instance that is the same zone and the same Virtual Private Cloud (VPC).
 * *   The instance must be in the Stopped state.
 * *   A maximum of 10 ENIs can be attached to an instance.
 * *   This operation is an asynchronous operation. After you call this operation to attach an ENI, you can view the status of the ENI to check whether the ENI is attached.
 *
 * @param request AttachNetworkInterfaceRequest
 * @return AttachNetworkInterfaceResponse
 */
async function attachNetworkInterface(request: AttachNetworkInterfaceRequest): AttachNetworkInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachNetworkInterfaceWithOptions(request, runtime);
}

model AuthorizeSecurityGroupRequest {
  ipProtocol?: string(name='IpProtocol', description='The transport layer protocol. The values of this parameter are case-sensitive. Valid values:

*   tcp
*   udp
*   icmp
*   gre
*   all: All protocols are supported.

This parameter is required.', example='all'),
  policy?: string(name='Policy', description='The action of security group rule N that determines whether to allow inbound access. Valid values:

*   accept: allows access.
*   drop: denies access and returns no responses.

Default value: accept.', example='accept'),
  portRange?: string(name='PortRange', description='The range of destination ports that correspond to the transport layer protocol for security group rule N. Valid values:

*   When the IpProtocol parameter is set to tcp or udp, the port number range is **1** to **65535**. The start port number and the end port number are separated by a forward slash (/). Correct example: **1/200**. Incorrect example: **200/1**.
*   When the IpProtocol parameter is set to icmp, the port number range is **-1/-1**, which indicates all ports.
*   When the IpProtocol parameter is set to gre, the port number range is **-1/-1**, which indicates all ports.
*   When the IpProtocol parameter is set to all, the port number range is **-1/-1**, which indicates all ports.

This parameter is required.', example='22/22'),
  priority?: int32(name='Priority', description='The priority of security group rule N. Valid values: **1** to **100**.

Default value: **1**.', example='1'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.

This parameter is required.', example='sg-bp67acfmxazb4ph***'),
  sourceCidrIp?: string(name='SourceCidrIp', description='The source IPv4 CIDR block. CIDR blocks and IPv4 addresses are supported.

This parameter is empty by default.

This parameter is required.', example='10.0.XX.XX/8'),
  sourcePortRange?: string(name='SourcePortRange', description='The range of port numbers that correspond to the transport layer protocol for the source security group. Valid values:

*   When the IpProtocol parameter is set to tcp or udp, the port number range is **1 to 65535**. The start port number and the end port number are separated by a forward slash (/). Correct example: **1/200**. Incorrect example: **200/1**.
*   When the IpProtocol parameter is set to icmp, the port number range is **-1/-1**, which indicates all ports.
*   When the IpProtocol parameter is set to gre, the port number range is **-1/-1**, which indicates all ports.
*   When the IpProtocol parameter is set to all, the port number range is **-1/-1**, which indicates all ports.', example='22/22'),
}

model AuthorizeSecurityGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AuthorizeSecurityGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AuthorizeSecurityGroupResponseBody(name='body'),
}

/**
 * @summary Creates an inbound security group rule. This operation allows or denies the inbound traffic from other devices to instances in the security group.
 *
 * @param request AuthorizeSecurityGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AuthorizeSecurityGroupResponse
 */
async function authorizeSecurityGroupWithOptions(request: AuthorizeSecurityGroupRequest, runtime: Util.RuntimeOptions): AuthorizeSecurityGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.portRange)) {
    query['PortRange'] = request.portRange;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.sourceCidrIp)) {
    query['SourceCidrIp'] = request.sourceCidrIp;
  }
  if (!Util.isUnset(request.sourcePortRange)) {
    query['SourcePortRange'] = request.sourcePortRange;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AuthorizeSecurityGroup',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates an inbound security group rule. This operation allows or denies the inbound traffic from other devices to instances in the security group.
 *
 * @param request AuthorizeSecurityGroupRequest
 * @return AuthorizeSecurityGroupResponse
 */
async function authorizeSecurityGroup(request: AuthorizeSecurityGroupRequest): AuthorizeSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return authorizeSecurityGroupWithOptions(request, runtime);
}

model AuthorizeSecurityGroupEgressRequest {
  destCidrIp?: string(name='DestCidrIp', description='The destination IP addresses. CIDR blocks and IPv4 addresses are supported.

This parameter is empty by default.

This parameter is required.', example='10.0.XX.XX/8'),
  ipProtocol?: string(name='IpProtocol', description='The transport layer protocol. The value of this parameter is case-sensitive. Valid values:

*   tcp
*   udp
*   icmp
*   gre
*   all: All protocols are supported.

This parameter is required.', example='all'),
  policy?: string(name='Policy', description='The action of the security group rule. Valid values:

*   accept: allows access. This is the default value.
*   drop: denies access and does not return responses.', example='accept'),
  portRange?: string(name='PortRange', description='The range of destination ports that correspond to the transport layer protocol for security group rule N. Valid values:

*   When the IpProtocol parameter is set to tcp or udp, the port number range is **1** to **65535**. The start port number and the end port number are separated by a forward slash (/). Correct example: **1/200**. Incorrect example: **200/1**.
*   When the IpProtocol parameter is set to icmp, the port number range is **-1/-1**, which indicates all ports.
*   When the IpProtocol parameter is set to gre, the port number range is **-1/-1**, which indicates all ports.
*   When the IpProtocol parameter is set to all, the port number range is **-1/-1**, which indicates all ports.

This parameter is required.', example='22/22'),
  priority?: int32(name='Priority', description='The priority of security group rule N. Valid values: **1 to 100**. Default value: **1**.', example='1'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.

This parameter is required.', example='sg-bp67acfmxazb4p****'),
  sourcePortRange?: string(name='SourcePortRange', description='The range of port numbers that correspond to the transport layer protocol for the source security group. Valid values:

*   When the IpProtocol parameter is set to tcp or udp, the port number range is **1** to **65535**. The start port number and the end port number are separated by a forward slash (/). Correct example: **1/200**. Incorrect example: **200/1**.
*   When the IpProtocol parameter is set to icmp, the port number range is **-1/-1**, which indicates all ports.
*   When the IpProtocol parameter is set to gre, the port number range is **-1/-1**, which indicates all ports.
*   When the IpProtocol parameter is set to all, the port number range is **-1/-1**, which indicates all ports.', example='22/22'),
}

model AuthorizeSecurityGroupEgressResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AuthorizeSecurityGroupEgressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AuthorizeSecurityGroupEgressResponseBody(name='body'),
}

/**
 * @summary Creates an outbound security group rule. This operation allows or denies the outbound traffic from the instances in the security group to other devices.
 *
 * @description In the security group-related API documents, outbound traffic refers to the traffic that is sent by the source device and received at the destination device.
 *
 * @param request AuthorizeSecurityGroupEgressRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AuthorizeSecurityGroupEgressResponse
 */
async function authorizeSecurityGroupEgressWithOptions(request: AuthorizeSecurityGroupEgressRequest, runtime: Util.RuntimeOptions): AuthorizeSecurityGroupEgressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destCidrIp)) {
    query['DestCidrIp'] = request.destCidrIp;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.portRange)) {
    query['PortRange'] = request.portRange;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.sourcePortRange)) {
    query['SourcePortRange'] = request.sourcePortRange;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AuthorizeSecurityGroupEgress',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates an outbound security group rule. This operation allows or denies the outbound traffic from the instances in the security group to other devices.
 *
 * @description In the security group-related API documents, outbound traffic refers to the traffic that is sent by the source device and received at the destination device.
 *
 * @param request AuthorizeSecurityGroupEgressRequest
 * @return AuthorizeSecurityGroupEgressResponse
 */
async function authorizeSecurityGroupEgress(request: AuthorizeSecurityGroupEgressRequest): AuthorizeSecurityGroupEgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return authorizeSecurityGroupEgressWithOptions(request, runtime);
}

model CleanDistDataRequest {
  appId?: string(name='AppId'),
  dataName?: string(name='DataName'),
  dataVersion?: string(name='DataVersion'),
  ensRegionId?: string(name='EnsRegionId'),
}

model CleanDistDataResponseBody = {
  requestId?: string(name='RequestId'),
}

model CleanDistDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CleanDistDataResponseBody(name='body'),
}

/**
 * @summary 清理分发数据
 *
 * @param request CleanDistDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CleanDistDataResponse
 */
async function cleanDistDataWithOptions(request: CleanDistDataRequest, runtime: Util.RuntimeOptions): CleanDistDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.dataName)) {
    query['DataName'] = request.dataName;
  }
  if (!Util.isUnset(request.dataVersion)) {
    query['DataVersion'] = request.dataVersion;
  }
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CleanDistData',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 清理分发数据
 *
 * @param request CleanDistDataRequest
 * @return CleanDistDataResponse
 */
async function cleanDistData(request: CleanDistDataRequest): CleanDistDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return cleanDistDataWithOptions(request, runtime);
}

model CopySDGRequest {
  destinationRegionIds?: [ string ](name='DestinationRegionIds', description='The destination nodes.

This parameter is required.'),
  SDGId?: string(name='SDGId', description='The ID of the SDG that you want to copy.

This parameter is required.', example='sdg-xxx'),
}

model CopySDGShrinkRequest {
  destinationRegionIdsShrink?: string(name='DestinationRegionIds', description='The destination nodes.

This parameter is required.'),
  SDGId?: string(name='SDGId', description='The ID of the SDG that you want to copy.

This parameter is required.', example='sdg-xxx'),
}

model CopySDGResponseBody = {
  data?: {
    message?: string(name='Message', description='The response message. Success is returned for a successful request.', example='success'),
    result?: {
      failedCount?: long(name='FailedCount', description='The number of failed nodes.', example='0'),
      failedItems?: [ 
        {
          destinationRegionId?: string(name='DestinationRegionId', description='The ID of the destination node.', example='cn-hangzhou-xxx'),
          errorMessage?: string(name='ErrorMessage', description='The error message.', example='region not found'),
        }
      ](name='FailedItems', description='Details of failed nodes.'),
      successCount?: long(name='SuccessCount', description='The number of successful nodes.', example='1'),
    }(name='Result', description='The execution result of the synchronization request.'),
    success?: boolean(name='Success', description='Indicates whether all tasks are successful. Valid values:

*   **true**: All tasks are successful.
*   **false**: Failed tasks exist.', example='true'),
  }(name='Data', description='The returned data object.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='XXX-XXX-XXX'),
}

model CopySDGResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CopySDGResponseBody(name='body'),
}

/**
 * @summary Copies a shared data group (SDG) across nodes.
 *
 * @param tmpReq CopySDGRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CopySDGResponse
 */
async function copySDGWithOptions(tmpReq: CopySDGRequest, runtime: Util.RuntimeOptions): CopySDGResponse {
  Util.validateModel(tmpReq);
  var request = new CopySDGShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.destinationRegionIds)) {
    request.destinationRegionIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.destinationRegionIds, 'DestinationRegionIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CopySDG',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Copies a shared data group (SDG) across nodes.
 *
 * @param request CopySDGRequest
 * @return CopySDGResponse
 */
async function copySDG(request: CopySDGRequest): CopySDGResponse {
  var runtime = new Util.RuntimeOptions{};
  return copySDGWithOptions(request, runtime);
}

model CopySnapshotRequest {
  destinationRegionIds?: [ string ](name='DestinationRegionIds', description='The IDs of destination nodes.

This parameter is required.'),
  destinationSnapshotDescription?: string(name='DestinationSnapshotDescription', description='The description of the snapshot. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='testDescription'),
  destinationSnapshotName?: string(name='DestinationSnapshotName', description='The name of the snapshot. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), and hyphens (-).', example='testSnapshotName'),
  snapshotId?: string(name='SnapshotId', description='The ID of the source snapshot.

This parameter is required.', example='sp-bp1c0doj0taqyzzl****'),
}

model CopySnapshotShrinkRequest {
  destinationRegionIdsShrink?: string(name='DestinationRegionIds', description='The IDs of destination nodes.

This parameter is required.'),
  destinationSnapshotDescription?: string(name='DestinationSnapshotDescription', description='The description of the snapshot. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='testDescription'),
  destinationSnapshotName?: string(name='DestinationSnapshotName', description='The name of the snapshot. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), and hyphens (-).', example='testSnapshotName'),
  snapshotId?: string(name='SnapshotId', description='The ID of the source snapshot.

This parameter is required.', example='sp-bp1c0doj0taqyzzl****'),
}

model CopySnapshotResponseBody = {
  allocationId?: [ 
    {
      ensRegionId?: string(name='EnsRegionId', description='The ID of the node.', example='cn-chengdu-telecom-4'),
      instanceId?: [ string ](name='InstanceId', description='The IDs of the instances.'),
    }
  ](name='AllocationId', description='The list of created snapshots.'),
  bizStatusCode?: string(name='BizStatusCode', description='The success status code.

*   **PartSuccess**: partially succeeded.
*   **AllSuccess**: all succeeded.', example='AllSuccess'),
  requestId?: string(name='RequestId', description='The request ID.', example='EA3758E0-8899-17D3-9526-5F62CF33A586'),
  unAllocationId?: [ 
    {
      ensRegionId?: string(name='EnsRegionId', description='The ID of the node.', example='cn-chengdu-26'),
    }
  ](name='UnAllocationId', description='The list of nodes that are not created.'),
}

model CopySnapshotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CopySnapshotResponseBody(name='body'),
}

/**
 * @summary Copies a snapshot across nodes.
 *
 * @param tmpReq CopySnapshotRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CopySnapshotResponse
 */
async function copySnapshotWithOptions(tmpReq: CopySnapshotRequest, runtime: Util.RuntimeOptions): CopySnapshotResponse {
  Util.validateModel(tmpReq);
  var request = new CopySnapshotShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.destinationRegionIds)) {
    request.destinationRegionIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.destinationRegionIds, 'DestinationRegionIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.destinationRegionIdsShrink)) {
    query['DestinationRegionIds'] = request.destinationRegionIdsShrink;
  }
  if (!Util.isUnset(request.destinationSnapshotDescription)) {
    query['DestinationSnapshotDescription'] = request.destinationSnapshotDescription;
  }
  if (!Util.isUnset(request.destinationSnapshotName)) {
    query['DestinationSnapshotName'] = request.destinationSnapshotName;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CopySnapshot',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Copies a snapshot across nodes.
 *
 * @param request CopySnapshotRequest
 * @return CopySnapshotResponse
 */
async function copySnapshot(request: CopySnapshotRequest): CopySnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return copySnapshotWithOptions(request, runtime);
}

model CreateARMServerInstancesRequest {
  amount?: int32(name='Amount', description='The number of instances to create. Valid values: **1** to **100**.

This parameter is required.', example='1'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal for the subscription. Valid values:

*   true
*   false (default)', example='false'),
  autoUseCoupon?: boolean(name='AutoUseCoupon', description='Specifies whether to use coupons. Valid values:

*   true
*   false (default)', example='true'),
  cidr?: string(name='Cidr'),
  ensRegionId?: string(name='EnsRegionId', description='The ID of the Edge Node Service (ENS) node.

This parameter is required.', example='cn-guiyang-12'),
  environmentVar?: string(name='EnvironmentVar', description='Set one or more environment variables during EAIS instance initialization.', example='[object Object]'),
  frequency?: int32(name='Frequency', description='The refresh rate. Unit: Hz. Valid values: 30 and 60.', example='30'),
  imageId?: string(name='ImageId', description='The ID of the image.

This parameter is required.', example='yourImage ID'),
  instanceType?: string(name='InstanceType', description='The specification of the Android in Container (AIC) instance. Examples:

*   aic.cf52r.c1.np
*   aic.cf52r.c2.np
*   aic.cf53r.c2.np
*   aic.cf52r.c4.np
*   aic.cf53r.c3.np
*   aic.cf52r.c3.np
*   aic.cf53r.c1.np
*   aic.cf53r.c5.np
*   aic.cf53r.c6
*   aic.cf53r.c4.np
*   aic.cf53r.c6.np
*   aic.cf53r.c7.np
*   aic.cf52m1r.c5.np
*   aic.cf53r.c8.np
*   aic.cf53r.c7
*   aic.cf52m1r.c2.np
*   aic.cf52m1r.c1.np
*   aic.cf52m1r.c3.np
*   aic.cf52m1r.c4.np
*   aic.cf52m1r.c6
*   ens.a6c2

This parameter is required.', example='aic.cf53r.c6.np'),
  keyPairName?: string(name='KeyPairName', description='The name of the key pair.', example='TestKeyPairName'),
  nameSpace?: string(name='NameSpace', description='The namespace.', example='pre'),
  payType?: string(name='PayType', description='The billing method. Set the value to **PrePaid**. PrePaid specifies the subscription billing method.

>  Only PrePaid is supported.

This parameter is required.', example='PrePaid'),
  period?: int32(name='Period', description='The subscription duration of the instance.

*   If you leave PeriodUnit empty, the instance is purchased on a monthly basis. Valid values: Day and Month.
*   If you set PeriodUnit to Day, you can set Period only to 3.
*   If you set PeriodUnit to Month, you can set Period to a value within the range of [1,9], or set the value to 12.

This parameter is required.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription duration.

*   If you leave PeriodUnit empty, the instance is purchased on a monthly basis. Valid values: Day and Month.
*   If you set PeriodUnit to Day, you can set Period only to 3.
*   If you set PeriodUnit to Month, you can set Period to a value within the range of [1,9], or set the value to 12.

This parameter is required.', example='Month'),
  resolution?: string(name='Resolution', description='The resolution. Examples:

*   1920\\\\*864
*   1080\\\\*1920
*   1920\\\\*1080
*   720\\\\*1280
*   2400\\\\*1080
*   1080\\\\*2400
*   1280\\\\*720
*   864\\\\*1920

This parameter is required.', example='720*1280'),
  serverName?: string(name='ServerName', description='The name of the service.', example='AIC-Server'),
  serverType?: string(name='ServerType', description='The specification of the ARM server. Examples:

*   cas.cf53r
*   cas.cf52r
*   cas.cf52m1r
*   cas.tg52g2
*   ens.afq-c2m3i.medium

This parameter is required.', example='cas.cf53r'),
}

model CreateARMServerInstancesResponseBody = {
  instanceIds?: [ string ](name='InstanceIds', description='The IDs of instances.'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='212630314490***'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model CreateARMServerInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateARMServerInstancesResponseBody(name='body'),
}

/**
 * @summary Creates an ARM server.
 *
 * @param request CreateARMServerInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateARMServerInstancesResponse
 */
async function createARMServerInstancesWithOptions(request: CreateARMServerInstancesRequest, runtime: Util.RuntimeOptions): CreateARMServerInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.autoUseCoupon)) {
    query['AutoUseCoupon'] = request.autoUseCoupon;
  }
  if (!Util.isUnset(request.cidr)) {
    query['Cidr'] = request.cidr;
  }
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.environmentVar)) {
    query['EnvironmentVar'] = request.environmentVar;
  }
  if (!Util.isUnset(request.frequency)) {
    query['Frequency'] = request.frequency;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  if (!Util.isUnset(request.nameSpace)) {
    query['NameSpace'] = request.nameSpace;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.resolution)) {
    query['Resolution'] = request.resolution;
  }
  if (!Util.isUnset(request.serverName)) {
    query['ServerName'] = request.serverName;
  }
  if (!Util.isUnset(request.serverType)) {
    query['ServerType'] = request.serverType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateARMServerInstances',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates an ARM server.
 *
 * @param request CreateARMServerInstancesRequest
 * @return CreateARMServerInstancesResponse
 */
async function createARMServerInstances(request: CreateARMServerInstancesRequest): CreateARMServerInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return createARMServerInstancesWithOptions(request, runtime);
}

model CreateApplicationRequest {
  template?: string(name='Template', description='The edge application template. The value must be a JSON string that contains the following information:

*   Basic information such as the name of the application
*   Information such as resource specifications and network security configurations
*   Service specifications
*   Required resources

This parameter is required.', example='{\\\\"appMetaData\\\\":{        \\\\"appName\\\\":\\\\"nginx\\\\",        \\\\"clusterName\\\\":\\\\"poc\\\\",        \\\\"appType\\\\":\\\\"Common\\\\",        \\\\"description\\\\":\\\\"test\\\\"    },    \\\\"resourceAttribute\\\\":{        \\\\"resourceType\\\\":\\\\"\\\\",        \\\\"instanceSpec\\\\":\\\\"ens.sn1.tiny\\\\",        \\\\"systemDiskSize\\\\":20,        \\\\"dataDiskSize\\\\":0,        \\\\"bandwithOut\\\\":10,        \\\\"areaLevel\\\\":\\\\"National\\\\",        \\\\"netSecurityStrategy\\\\":null,        \\\\"initConfig\\\\":null    },    \\\\"resourceSelector\\\\":[        {            \\\\"count\\\\":1        }    ],    \\\\"workload\\\\":[        {            \\\\"podCount\\\\":1,            \\\\"serviceConfig\\\\":null,            \\\\"name\\\\":\\\\"nginx\\\\",            \\\\"podSpec\\\\":{                \\\\"containers\\\\":[                    {                        \\\\"name\\\\":\\\\"android\\\\",                        \\\\"image\\\\":\\\\"edge-registry.alicdn.com/test/nginx\\\\"                    }                ]            },            \\\\"count\\\\":1        }    ]}'),
  timeout?: int32(name='Timeout', description='The timeout period for asynchronous processing. Unit: seconds. Default value: 1800.', example='1800'),
}

model CreateApplicationResponseBody = {
  appId?: string(name='AppId', description='The ID of the application. This is the unique identifier of the edge application.', example='d0639abf-789a-4527-b420-031d2cd9ad9b'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model CreateApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateApplicationResponseBody(name='body'),
}

/**
 * @summary Creates an edge application that allows you to manage Edge Node Service (ENS) nodes in containers, bare metal instances, and virtual machines.
 *
 * @param request CreateApplicationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateApplicationResponse
 */
async function createApplicationWithOptions(request: CreateApplicationRequest, runtime: Util.RuntimeOptions): CreateApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.template)) {
    query['Template'] = request.template;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateApplication',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates an edge application that allows you to manage Edge Node Service (ENS) nodes in containers, bare metal instances, and virtual machines.
 *
 * @param request CreateApplicationRequest
 * @return CreateApplicationResponse
 */
async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApplicationWithOptions(request, runtime);
}

model CreateClassicNetworkRequest {
  cidrBlock?: string(name='CidrBlock', description='The CIDR block of the network. You can use one of the following CIDR blocks or their subnets as the CIDR block of the network:

*   10.0.0.0/8 (default)
*   172.16.0.0/12
*   192.168.0.0/16

This parameter is required.', example='10.0.0.0/16'),
  description?: string(name='Description', description='The description of the network. The name must be 2 to 256 characters in length. It must start with a letter but cannot start with http:// or https://.', example='This is my vswitch.'),
  ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.

This parameter is required.', example='cn-chengdu-xxxx-4'),
  networkName?: string(name='NetworkName', description='The name of the network. The name must meet the following requirements:

*   The name must be 2 to 128 characters in length.
*   The name must start with a letter but cannot start with http:// or https://.
*   The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).', example='example'),
}

model CreateClassicNetworkResponseBody = {
  networkId?: string(name='NetworkId', description='The ID of the network.', example='n-5s9ayrxsd9hszrlt5fgv2****'),
  requestId?: string(name='RequestId', description='The request ID.', example='1A004E06-AC1B-5806-BA5E-41AB6B02DE83'),
}

model CreateClassicNetworkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateClassicNetworkResponseBody(name='body'),
}

/**
 * @summary Creates a classic network
 *
 * @param request CreateClassicNetworkRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateClassicNetworkResponse
 */
async function createClassicNetworkWithOptions(request: CreateClassicNetworkRequest, runtime: Util.RuntimeOptions): CreateClassicNetworkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cidrBlock)) {
    query['CidrBlock'] = request.cidrBlock;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.networkName)) {
    query['NetworkName'] = request.networkName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateClassicNetwork',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a classic network
 *
 * @param request CreateClassicNetworkRequest
 * @return CreateClassicNetworkResponse
 */
async function createClassicNetwork(request: CreateClassicNetworkRequest): CreateClassicNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return createClassicNetworkWithOptions(request, runtime);
}

model CreateClusterRequest {
  clusterVersion?: string(name='ClusterVersion', description='The version of the cluster.', example='1.18.8'),
  name?: string(name='Name', description='The name of the cluster.', example='mycluster-1'),
}

model CreateClusterResponseBody = {
  clusterId?: string(name='ClusterId', description='The ID of the instance.', example='c34b69b095f8241c5a91cc2252dceb976'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C0003E8B-B930-4F59-ADC0-0E209A9012A8'),
}

model CreateClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateClusterResponseBody(name='body'),
}

/**
 * @summary Creates a Container Service for Kubernetes (ACK) edge cluster.
 *
 * @description *   You can call this operation up to 10 times per second per account.
 * *   Creating a cluster is an asynchronous operation. After this operation returns the response, it takes 10 to 20 minutes to initialize the cluster. You can call the DescribeCluster operation to query the cluster status. After you create a cluster, you can call the DescribeClusterKubeConfig operation to obtain the cluster certificate.
 *
 * @param request CreateClusterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateClusterResponse
 */
async function createClusterWithOptions(request: CreateClusterRequest, runtime: Util.RuntimeOptions): CreateClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterVersion)) {
    query['ClusterVersion'] = request.clusterVersion;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCluster',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a Container Service for Kubernetes (ACK) edge cluster.
 *
 * @description *   You can call this operation up to 10 times per second per account.
 * *   Creating a cluster is an asynchronous operation. After this operation returns the response, it takes 10 to 20 minutes to initialize the cluster. You can call the DescribeCluster operation to query the cluster status. After you create a cluster, you can call the DescribeClusterKubeConfig operation to obtain the cluster certificate.
 *
 * @param request CreateClusterRequest
 * @return CreateClusterResponse
 */
async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createClusterWithOptions(request, runtime);
}

model CreateDiskRequest {
  category?: string(name='Category', description='The category of the disk. Valid values:

*   cloud_efficiency: ultra disk.
*   cloud_ssd: all-flash disk.

This parameter is required.', example='cloud_efficiency'),
  diskName?: string(name='DiskName', description='The name of the disk.', example='yourDiskName'),
  encrypted?: boolean(name='Encrypted', description='Specifies whether to encrypt the new system disk. Valid values:

*   **true**
*   **false** (default): no', example='false'),
  ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.

This parameter is required.', example='cn-chengdu-telecom'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Set the value to **PostPaid**.

This parameter is required.', example='PostPaid'),
  KMSKeyId?: string(name='KMSKeyId', description='The ID of the Key Management Service (KMS) key that is used by the cloud disk.

>  If you set the **Encrypted** parameter to **true**, the default service key is used when the **KMSKeyId** parameter is empty.', example='0e478b7a-4262-4802-b8cb-00d3fxxxxx'),
  size?: string(name='Size', description='The size of the disk. Unit: GiB.', example='20'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot that you want to use to create the disk.

The following limits apply to the **SnapshotId** and **Size** parameters:

*   If the size of the snapshot specified by **SnapshotId** is greater than the specified **Size** value, the size of the created disk is equal to the specified snapshot size.
*   If the size of the snapshot specified by **SnapshotId** is smaller than the specified **Size** value, the size of the created disk is equal to the specified **Size** value.', example='s-897654321****'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the instance. Valid values of N: **1** to **20**.

*   The key cannot start with `aliyun`, `acs:`, `http://`, or `https://`.
*   The key must be up to 64 characters in length.
*   The tag key cannot be an empty string.', example='pro'),
      value?: string(name='Value', description='The value of a tag that is attached to the topics you want to query. This parameter is not required. If you configure this parameter, you must also configure the **Key** parameter.**** If you include the Key and Value parameters in a request, this operation queries only the topics that use the specified tags. If you do not include these parameters in a request, this operation queries all topics that you can access.

*   Valid values of N: 1 to 20.
*   The value of this parameter can be an empty string.
*   The tag key can be up to 128 characters in length and cannot contain http:// or https://. The tag key cannot start with acs: or aliyun.', example='tagValue'),
    }
  ](name='Tag', description='The tags.

You can specify at most 20 tags.'),
}

model CreateDiskResponseBody = {
  instanceIds?: [ string ](name='InstanceIds', description='The IDs of the instances.'),
  orderId?: string(name='OrderId', description='The ID of the order. Multiple IDs are separated by commas (,).

>  This parameter is not returned for the pay-as-you-go billing method.', example='21127020370****'),
  requestId?: string(name='RequestId', description='The request ID.', example='7030AB96-57CF-1C68-9FEE-D60E547FD79C'),
}

model CreateDiskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDiskResponseBody(name='body'),
}

/**
 * @summary Creates a pay-as-you-go or subscription data disk.
 *
 * @param request CreateDiskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDiskResponse
 */
async function createDiskWithOptions(request: CreateDiskRequest, runtime: Util.RuntimeOptions): CreateDiskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.diskName)) {
    query['DiskName'] = request.diskName;
  }
  if (!Util.isUnset(request.encrypted)) {
    query['Encrypted'] = request.encrypted;
  }
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.KMSKeyId)) {
    query['KMSKeyId'] = request.KMSKeyId;
  }
  if (!Util.isUnset(request.size)) {
    query['Size'] = request.size;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDisk',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a pay-as-you-go or subscription data disk.
 *
 * @param request CreateDiskRequest
 * @return CreateDiskResponse
 */
async function createDisk(request: CreateDiskRequest): CreateDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDiskWithOptions(request, runtime);
}

model CreateEipInstanceRequest {
  bandwidth?: long(name='Bandwidth', description='The maximum bandwidth of the EIP. Default value: 5. Valid values: 5 to 10000. Unit: Mbit/s.', example='5'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='26C28756-2586-17AF-B802-0DC50D8FDEBB'),
  description?: string(name='Description', description='The description of the EIP.', example='yourDescription'),
  ensRegionId?: string(name='EnsRegionId', description='The ID of the Edge Node Service (ENS) node.

This parameter is required.', example='cn-suzhou-telecom'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the EIP. Set the value to **PostPaid**.

This parameter is required.', example='PostPaid'),
  internetChargeType?: string(name='InternetChargeType', description='The metering method of the EIP. Set the value to **95BandwidthByMonth**.

This parameter is required.', example='95BandwidthByMonth'),
  isp?: string(name='Isp', description='The Internet service provider. Valid values:

*   **cmcc**: China Mobile.
*   **unicom**: China Unicom.
*   **telecom**: China Telecom.', example='cmcc'),
  name?: string(name='Name', description='The name of the EIP.', example='EIP1'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the instance. Valid values of N: **1** to **20**.

*   The key cannot start with `aliyun`, `acs:`, `http://`, or `https://`.
*   The key must be up to 64 characters in length.
*   The tag key cannot be an empty string.', example='team'),
      value?: string(name='Value', description='The value of tag N that is added to the resource. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length. It cannot start with acs: or contain http:// or https://.', example='tagValue'),
    }
  ](name='Tag', description='The tags.'),
}

model CreateEipInstanceResponseBody = {
  allocationId?: string(name='AllocationId', description='The ID of the EIP.', example='eip-25877c70gddh****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9DB6123F-470D-510A-A9EB-EBA799340452'),
}

model CreateEipInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEipInstanceResponseBody(name='body'),
}

/**
 * @summary Applies for an elastic IP address (EIP).
 *
 * @description *   You can call this operation up to 5,000 times per second per account.
 * *   You can call this operation up to 50 times per second per user.
 *
 * @param request CreateEipInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateEipInstanceResponse
 */
async function createEipInstanceWithOptions(request: CreateEipInstanceRequest, runtime: Util.RuntimeOptions): CreateEipInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.isp)) {
    query['Isp'] = request.isp;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEipInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Applies for an elastic IP address (EIP).
 *
 * @description *   You can call this operation up to 5,000 times per second per account.
 * *   You can call this operation up to 50 times per second per user.
 *
 * @param request CreateEipInstanceRequest
 * @return CreateEipInstanceResponse
 */
async function createEipInstance(request: CreateEipInstanceRequest): CreateEipInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEipInstanceWithOptions(request, runtime);
}

model CreateEnsRouteEntryRequest {
  description?: string(name='Description', description='The description of the custom route entry.', example='example'),
  destinationCidrBlock?: string(name='DestinationCidrBlock', description='The destination CIDR block of the custom route entry. Make sure that the destination CIDR block meets the following requirements:

*   The destination CIDR block is not 100.64.0.0/10 or a subset of 100.64.0.0/10.
*   The destination CIDR block of the custom route entry is different from the destination CIDR blocks of other route entries in the same route table.
*   0.0.0.0/0 indicates the default CIDR block.

This parameter is required.', example='0.0.0.0/0'),
  nextHopId?: string(name='NextHopId', description='The ID of the next hop of the custom route entry.

This parameter is required.', example='i-5vb7leks9z4mxy1ay258'),
  nextHopType?: string(name='NextHopType', description='The next hop type of the custom route. Valid values:

*   Instance: an ENS instance.
*   HaVip: a high-availability virtual IP address (HAVIP).
*   NetworkPeer: VPC peering connection.', example='Instance'),
  routeEntryName?: string(name='RouteEntryName', description='The name of the custom route entry that you want to add. The name must be 1 to 128 characters in length. It cannot start with http:// or https://.', example='test'),
  routeTableId?: string(name='RouteTableId', description='The ID of the route table to which you want to add a custom route entry.

This parameter is required.', example='vtb-bp1cifr72dioje82lse2j'),
  sourceCidrBlock?: string(name='SourceCidrBlock', description='The new source CIDR block of the inbound or outbound traffic.', example='172.XXX.XXX.0/24'),
}

model CreateEnsRouteEntryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  routeEntryId?: string(name='RouteEntryId', description='The ID of the route.', example='rte-5vb5q8sk0lyoscx8539ds'),
}

model CreateEnsRouteEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEnsRouteEntryResponseBody(name='body'),
}

/**
 * @summary Creates a custom route entry.
 *
 * @param request CreateEnsRouteEntryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateEnsRouteEntryResponse
 */
async function createEnsRouteEntryWithOptions(request: CreateEnsRouteEntryRequest, runtime: Util.RuntimeOptions): CreateEnsRouteEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destinationCidrBlock)) {
    query['DestinationCidrBlock'] = request.destinationCidrBlock;
  }
  if (!Util.isUnset(request.nextHopId)) {
    query['NextHopId'] = request.nextHopId;
  }
  if (!Util.isUnset(request.nextHopType)) {
    query['NextHopType'] = request.nextHopType;
  }
  if (!Util.isUnset(request.routeEntryName)) {
    query['RouteEntryName'] = request.routeEntryName;
  }
  if (!Util.isUnset(request.routeTableId)) {
    query['RouteTableId'] = request.routeTableId;
  }
  if (!Util.isUnset(request.sourceCidrBlock)) {
    query['SourceCidrBlock'] = request.sourceCidrBlock;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEnsRouteEntry',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a custom route entry.
 *
 * @param request CreateEnsRouteEntryRequest
 * @return CreateEnsRouteEntryResponse
 */
async function createEnsRouteEntry(request: CreateEnsRouteEntryRequest): CreateEnsRouteEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEnsRouteEntryWithOptions(request, runtime);
}

model CreateEnsSaleControlRequest {
  aliUidAccount?: string(name='AliUidAccount'),
  commodityCode?: string(name='CommodityCode', description='This parameter is required.'),
  customAccount?: string(name='CustomAccount'),
  saleControls?: [ 
    {
      conditionControls?: [ 
        {
          conditionControlModuleCode?: string(name='ConditionControlModuleCode'),
          conditionControlModuleValue?: string(name='ConditionControlModuleValue'),
        }
      ](name='ConditionControls'),
      description?: string(name='Description'),
      moduleCode?: string(name='ModuleCode', description='This parameter is required.'),
      moduleValue?: {
        moduleMaxValue?: string(name='ModuleMaxValue'),
        moduleMinValue?: string(name='ModuleMinValue'),
        moduleValue?: [ string ](name='ModuleValue'),
      }(name='ModuleValue', description='This parameter is required.'),
      operator?: string(name='Operator', description='This parameter is required.'),
      orderType?: string(name='OrderType', description='This parameter is required.'),
    }
  ](name='SaleControls', description='This parameter is required.'),
}

model CreateEnsSaleControlShrinkRequest {
  aliUidAccount?: string(name='AliUidAccount'),
  commodityCode?: string(name='CommodityCode', description='This parameter is required.'),
  customAccount?: string(name='CustomAccount'),
  saleControlsShrink?: string(name='SaleControls', description='This parameter is required.'),
}

model CreateEnsSaleControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateEnsSaleControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEnsSaleControlResponseBody(name='body'),
}

/**
 * @summary 创建售卖约束
 *
 * @param tmpReq CreateEnsSaleControlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateEnsSaleControlResponse
 */
async function createEnsSaleControlWithOptions(tmpReq: CreateEnsSaleControlRequest, runtime: Util.RuntimeOptions): CreateEnsSaleControlResponse {
  Util.validateModel(tmpReq);
  var request = new CreateEnsSaleControlShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.saleControls)) {
    request.saleControlsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.saleControls, 'SaleControls', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.aliUidAccount)) {
    query['AliUidAccount'] = request.aliUidAccount;
  }
  if (!Util.isUnset(request.commodityCode)) {
    query['CommodityCode'] = request.commodityCode;
  }
  if (!Util.isUnset(request.customAccount)) {
    query['CustomAccount'] = request.customAccount;
  }
  if (!Util.isUnset(request.saleControlsShrink)) {
    query['SaleControls'] = request.saleControlsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEnsSaleControl',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建售卖约束
 *
 * @param request CreateEnsSaleControlRequest
 * @return CreateEnsSaleControlResponse
 */
async function createEnsSaleControl(request: CreateEnsSaleControlRequest): CreateEnsSaleControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEnsSaleControlWithOptions(request, runtime);
}

model CreateEnsServiceRequest {
  ensServiceId?: string(name='EnsServiceId', description='The ID of the resource that you want to obtain. You can specify only one ID in a request.

This parameter is required.', example='ens-20190806****'),
  orderType?: string(name='OrderType', description='The operation to perform after you preview the created edge service. Valid values:

*   **Buy**: create
*   **Upgrade**: change

This parameter is required.', example='Buy'),
}

model CreateEnsServiceResponseBody = {
  code?: int32(name='Code', description='The service code. 0 is returned for a successful request. An error code is returned for a failed request.', example='0'),
  requestId?: string(name='RequestId', description='The request ID.', example='9AF02B43-2D08-49D3-8AAF-65B9C792ED14'),
}

model CreateEnsServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEnsServiceResponseBody(name='body'),
}

/**
 * @summary Creates an edge service.
 *
 * @param request CreateEnsServiceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateEnsServiceResponse
 */
async function createEnsServiceWithOptions(request: CreateEnsServiceRequest, runtime: Util.RuntimeOptions): CreateEnsServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ensServiceId)) {
    query['EnsServiceId'] = request.ensServiceId;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEnsService',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates an edge service.
 *
 * @param request CreateEnsServiceRequest
 * @return CreateEnsServiceResponse
 */
async function createEnsService(request: CreateEnsServiceRequest): CreateEnsServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEnsServiceWithOptions(request, runtime);
}

model CreateEpnInstanceRequest {
  EPNInstanceName?: string(name='EPNInstanceName', description='The name of the EPN instance.', example='test EPNInstanceName'),
  EPNInstanceType?: string(name='EPNInstanceType', description='The type of the EPN instance. Set the value to **EdgeToEdge**.

This parameter is required.', example='EdgeToEdge'),
  internetChargeType?: string(name='InternetChargeType', description='The billing method for network usage. Valid values:

*   **BandwidthByDay**: Pay by daily peak bandwidth.
*   **95BandwidthByMonth**: Pay by monthly 95th percentile bandwidth.
*   **PayByBandwidth4thMonth**: Pay by monthly fourth peak bandwidth.
*   **PayByBandwidth**: Pay by fixed bandwidth.

You can specify only one metering method for network usage and cannot overwrite the existing metering method.

This parameter is required.', example='BandwidthByDay'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The maximum outbound public bandwidth. Unit: Mbit/s. Valid values: 1 to 100.

This parameter is required.', example='1'),
  networkingModel?: string(name='NetworkingModel', description='The networking mode. Valid values:

*   **SpeedUp**: intelligent acceleration network (Internet)
*   **Connection**: internal network
*   **SpeedUpAndConnection**: intelligent acceleration network and internal network

This parameter is required.', example='SpeedUp'),
}

model CreateEpnInstanceResponseBody = {
  EPNInstanceId?: string(name='EPNInstanceId', description='The ID of the EPN instance.', example='epn-xxxxx'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model CreateEpnInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEpnInstanceResponseBody(name='body'),
}

/**
 * @summary Creates an edge private network (EPN) instance.
 *
 * @param request CreateEpnInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateEpnInstanceResponse
 */
async function createEpnInstanceWithOptions(request: CreateEpnInstanceRequest, runtime: Util.RuntimeOptions): CreateEpnInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.EPNInstanceName)) {
    query['EPNInstanceName'] = request.EPNInstanceName;
  }
  if (!Util.isUnset(request.EPNInstanceType)) {
    query['EPNInstanceType'] = request.EPNInstanceType;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.internetMaxBandwidthOut)) {
    query['InternetMaxBandwidthOut'] = request.internetMaxBandwidthOut;
  }
  if (!Util.isUnset(request.networkingModel)) {
    query['NetworkingModel'] = request.networkingModel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEpnInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates an edge private network (EPN) instance.
 *
 * @param request CreateEpnInstanceRequest
 * @return CreateEpnInstanceResponse
 */
async function createEpnInstance(request: CreateEpnInstanceRequest): CreateEpnInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEpnInstanceWithOptions(request, runtime);
}

model CreateFileSystemRequest {
  orderDetails?: [ 
    {
      chargeType?: string(name='ChargeType', description='The billing method of the NAS file system. Valid values:

*   PrePaid: subscription. This billing method is not supported.
*   PostPaid: pay-as-you-go.

This parameter is required.', example='PostPaid'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.

This parameter is required.', example='cn-suzhou-telecom'),
      fileSystemName?: string(name='FileSystemName', description='The name of the file system. The name must be 1 to 80 characters in length and can contain letters, digits, hyphens (-), and underscores (_).

This parameter is required.', example='nasFile'),
      mountTargetDomain?: string(name='MountTargetDomain', description='The name of the mount target. The name must be 1 to 80 characters in length and can contain letters, digits, hyphens (-), and underscores (_).

This parameter is required.', example='nasMount'),
      networkId?: string(name='NetworkId', description='The ID of the VPC.

This parameter is required.', example='vpc-xxx'),
      orderType?: string(name='OrderType', description='The type of the order. Set the value to BUY.

This parameter is required.', example='BUY'),
      protocolType?: string(name='ProtocolType', description='The storage protocol. Set the value to nfs.

This parameter is required.', example='nfs'),
      storgeType?: string(name='StorgeType', description='The storage type. Valid values:

*   Capacity.
*   Performance.

This parameter is required.', example='capacity'),
    }
  ](name='OrderDetails', description='The information about the orders.

This parameter is required.'),
}

model CreateFileSystemShrinkRequest {
  orderDetailsShrink?: string(name='OrderDetails', description='The information about the orders.

This parameter is required.'),
}

model CreateFileSystemResponseBody = {
  allocationId?: [ string ](name='AllocationId', description='The information about the file system that was created.'),
  bizStatusCode?: string(name='BizStatusCode', description='The status code for successful operations. Valid values:

*   PartSuccess: The operation is partially successful.
*   AllSuccess: The operation is successful.', example='PartSuccess'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  unAllocationId?: [ string ](name='UnAllocationId', description='The information about the file system that failed to be created.'),
}

model CreateFileSystemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFileSystemResponseBody(name='body'),
}

/**
 * @summary Creates a NAS file system.
 *
 * @param tmpReq CreateFileSystemRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateFileSystemResponse
 */
async function createFileSystemWithOptions(tmpReq: CreateFileSystemRequest, runtime: Util.RuntimeOptions): CreateFileSystemResponse {
  Util.validateModel(tmpReq);
  var request = new CreateFileSystemShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.orderDetails)) {
    request.orderDetailsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.orderDetails, 'OrderDetails', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFileSystem',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a NAS file system.
 *
 * @param request CreateFileSystemRequest
 * @return CreateFileSystemResponse
 */
async function createFileSystem(request: CreateFileSystemRequest): CreateFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFileSystemWithOptions(request, runtime);
}

model CreateForwardEntryRequest {
  externalIp?: string(name='ExternalIp', description='The elastic IP address (EIP) that is used to access the Internet.

This parameter is required.', example='121.11.36.28'),
  externalPort?: string(name='ExternalPort', description='The external port or port range that is used for port forwarding.

*   Valid values: 1 to 65535.
*   To specify a port range, separate the first port and the last port with a forward slash (/), such as 10/20.
*   If you set ExternalPort to a port range, you must also set InternalPort to a port range. The number of ports in the port ranges must be the same. For example, if you set ExternalPort to 10/20, you can set InternalPort to 80/90.

This parameter is required.', example='22'),
  forwardEntryName?: string(name='ForwardEntryName', description='The name of the DNAT entry. The name must be 2 to 128 characters in length. The name cannot start with `http://` or `https://`.', example='test0'),
  healthCheckPort?: int32(name='HealthCheckPort', description='The probe port. The port must be within the internal port range. By default, this parameter is left empty.', example='80'),
  internalIp?: string(name='InternalIp', description='The private IP address of the instance that uses the DNAT entry for Internet communication.

This parameter is required.', example='10.0.0.13'),
  internalPort?: string(name='InternalPort', description='The internal port or port range that is used for port forwarding.

*   Valid values: 1 to 65535.
*   To specify a port range, separate the first port and the last port with a forward slash (/), such as 10/20.

This parameter is required.', example='22'),
  ipProtocol?: string(name='IpProtocol', description='The protocol. Valid values:

*   **TCP**: forwards TCP packets.
*   **UDP**: forwards UDP packets.
*   **Any** (default): forwards all packets.', example='Any'),
  natGatewayId?: string(name='NatGatewayId', description='The ID of the Network Address Translation (NAT) gateway.

This parameter is required.', example='nat-5t7nh1cfm6kxiszlttr383xpo'),
  standbyExternalIp?: string(name='StandbyExternalIp', description='The secondary EIP that is used to access the Internet. You need to select a secondary EIP that is bound to NAT. After the DNAT entry is created, the secondary EIP takes effect.', example='101.XXX.XXX.4'),
}

model CreateForwardEntryResponseBody = {
  forwardEntryId?: string(name='ForwardEntryId', description='The ID of the DNAT entry.', example='fwd-5tc07cw14metghn3siv4ak8do'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EF6D6FA4-DACA-5822-A981-81006271D263'),
}

model CreateForwardEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateForwardEntryResponseBody(name='body'),
}

/**
 * @summary Adds a Destination Network Address Translation (DNAT) entry to a DNAT table.
 *
 * @param request CreateForwardEntryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateForwardEntryResponse
 */
async function createForwardEntryWithOptions(request: CreateForwardEntryRequest, runtime: Util.RuntimeOptions): CreateForwardEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.externalIp)) {
    query['ExternalIp'] = request.externalIp;
  }
  if (!Util.isUnset(request.externalPort)) {
    query['ExternalPort'] = request.externalPort;
  }
  if (!Util.isUnset(request.forwardEntryName)) {
    query['ForwardEntryName'] = request.forwardEntryName;
  }
  if (!Util.isUnset(request.healthCheckPort)) {
    query['HealthCheckPort'] = request.healthCheckPort;
  }
  if (!Util.isUnset(request.internalIp)) {
    query['InternalIp'] = request.internalIp;
  }
  if (!Util.isUnset(request.internalPort)) {
    query['InternalPort'] = request.internalPort;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.standbyExternalIp)) {
    query['StandbyExternalIp'] = request.standbyExternalIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateForwardEntry',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds a Destination Network Address Translation (DNAT) entry to a DNAT table.
 *
 * @param request CreateForwardEntryRequest
 * @return CreateForwardEntryResponse
 */
async function createForwardEntry(request: CreateForwardEntryRequest): CreateForwardEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createForwardEntryWithOptions(request, runtime);
}

model CreateHaVipRequest {
  amount?: int32(name='Amount', example='6'),
  description?: string(name='Description', example='testDescription'),
  ipAddress?: string(name='IpAddress', example='120.24.243.91'),
  name?: string(name='Name', example='yourName'),
  vSwitchId?: string(name='VSwitchId', example='vsw-5****'),
}

model CreateHaVipResponseBody = {
  haVipIds?: [ string ](name='HaVipIds'),
  requestId?: string(name='RequestId', example='AAE90880-4970-4D81-A534-A6C0F3631F74'),
}

model CreateHaVipResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateHaVipResponseBody(name='body'),
}

/**
 * @summary 创建高可用VIP
 *
 * @param request CreateHaVipRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateHaVipResponse
 */
async function createHaVipWithOptions(request: CreateHaVipRequest, runtime: Util.RuntimeOptions): CreateHaVipResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ipAddress)) {
    query['IpAddress'] = request.ipAddress;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateHaVip',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建高可用VIP
 *
 * @param request CreateHaVipRequest
 * @return CreateHaVipResponse
 */
async function createHaVip(request: CreateHaVipRequest): CreateHaVipResponse {
  var runtime = new Util.RuntimeOptions{};
  return createHaVipWithOptions(request, runtime);
}

model CreateImageRequest {
  deleteAfterImageUpload?: string(name='DeleteAfterImageUpload', description='Specifies whether to automatically release the instance after the image is packaged and uploaded. Only image builders are supported. Default value: false. Valid values:

*   true: The image is released when the instance is released.
*   false: The image is retained when the instance is released.
*   If you leave this property empty, false is used by default.', example='false'),
  imageName?: string(name='ImageName', description='The name of the image. The name must be 2 to 128 characters in length. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-). It must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).

This parameter is required.', example='ImageName'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-5rr1bnyrc4tswr8cq3w6y****'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='s-bp67acfmxazb4p****'),
  targetOSSRegionId?: string(name='TargetOSSRegionId', description='The region of the target OSS where the image is to be stored.', example='cn-beijing'),
  withDataDisks?: boolean(name='WithDataDisks'),
}

model CreateImageResponseBody = {
  code?: int32(name='Code', description='The returned service code. 0 indicates that the request was successful.', example='0'),
  imageId?: string(name='ImageId', description='The ID of the image.', example='m-5xxgg'),
  requestId?: string(name='RequestId', description='The request ID.', example='8BEF0D72-9901-5D43-B7D3-8B42AC26C516'),
}

model CreateImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateImageResponseBody(name='body'),
}

/**
 * @summary Creates an image from an instance.
 *
 * @param request CreateImageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateImageResponse
 */
async function createImageWithOptions(request: CreateImageRequest, runtime: Util.RuntimeOptions): CreateImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deleteAfterImageUpload)) {
    query['DeleteAfterImageUpload'] = request.deleteAfterImageUpload;
  }
  if (!Util.isUnset(request.imageName)) {
    query['ImageName'] = request.imageName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  if (!Util.isUnset(request.targetOSSRegionId)) {
    query['TargetOSSRegionId'] = request.targetOSSRegionId;
  }
  if (!Util.isUnset(request.withDataDisks)) {
    query['WithDataDisks'] = request.withDataDisks;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateImage',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates an image from an instance.
 *
 * @param request CreateImageRequest
 * @return CreateImageResponse
 */
async function createImage(request: CreateImageRequest): CreateImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImageWithOptions(request, runtime);
}

model CreateInstanceRequest {
  dataDisk?: [
    {
      size?: string(name='Size', description='The capacity of the first data disk. Unit: GiB. The capacity is at least 20 GiB and is a multiple of 10 GiB.', example='50'),
    }
  ](name='DataDisk'),
  systemDisk?: {
    size?: string(name='Size', description='The size of the system disk. Unit: GiB. Valid values: **20** and **40**. The value cannot be smaller than the size of the image and must be a multiple of 10 GiB.', example='40'),
  }(name='SystemDisk'),
  autoRenew?: string(name='AutoRenew', description='Specifies whether to enable the auto-renewal feature. Valid values: **True** and **False**. Default value: False.', example='True'),
  autoRenewPeriod?: string(name='AutoRenewPeriod', description='The auto-renewal period for the instance. This parameter is required when the **AutoRenew** parameter is set to **True**. Valid values: **1** to **12**. Unit: months.', example='12'),
  ensRegionId?: string(name='EnsRegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou'),
  hostName?: string(name='HostName', description='The hostname of the Elastic Compute Service (ECS) instance. General naming rules: The hostname cannot start or end with a period (.) or hyphen (-). It cannot contain consecutive periods (.) or hyphens (-).

Naming rules for specific instances:

*   For Windows instances, the hostname must be **2** to **15** characters in length and cannot contain periods (.) or contain only digits. The hostname cannot contain periods (.) or contain only digits.
*   For instances that run one of other operating systems such as Linux, the hostname must be **2** to **64** characters in length. You can use periods (.) to separate the hostname into multiple segments. Each segment can contain letters, digits, and hyphens (-).', example='test-HostName'),
  imageId?: string(name='ImageId', description='The ID of the image file that you select when creating the instance.', example='yourImage ID'),
  instanceName?: string(name='InstanceName', description='The name of the instance. The name must conform to the following naming conventions:

*   The name must be **2** to **128** characters in length.
*   It must start with a letter but cannot start with http:// or https://.
*   The name can contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-).

If you do not specify this parameter, the instance ID is used as the instance name by default.', example='test:Instance_Name.1-2'),
  instanceType?: string(name='InstanceType', description='The type of the instance.

For more information, see [](~~66124~~).

This parameter is required.', example='ens.se1.tiny'),
  internetChargeType?: string(name='InternetChargeType', description='This parameter is required if you create the instance for the first time. The existing billing method is used by default if you have created an instance. Valid values:

*   **BandwidthByDay**: Pay by daily peak bandwidth.
*   **95BandwidthByMonth**: Pay by monthly 95th percentile bandwidth.', example='95BandwidthByMonth'),
  ipType?: string(name='IpType', description='The type of the IP address. Valid values:

*   **ipv4** (default)
*   **ipv6**
*   **ipv4Andipv6**', example='ipv4'),
  keyPairName?: string(name='KeyPairName', description='The name of the key pair. You can specify only one name.', example='TestKeyPairName'),
  ownerId?: long(name='OwnerId'),
  password?: string(name='Password', description='The password of the instance.

The password must be 8 to 30 characters in length and contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include: ``()`~!@#$%^&*-_+=|{}[]:;\\\\"<>,.?/``', example='yourPassword:1'),
  passwordInherit?: boolean(name='PasswordInherit', description='Specifies whether to use the preset password of the image. Valid values:

- **true**: The password preset in the image is used, and the **Password** parameter must be null. For secure access, make sure that the selected image has a password configured.

- **false**: does not use the password preset in the image.', example='false'),
  paymentType?: string(name='PaymentType', description='The billing method of the instance. Set the value to Subscription.', example='Subscription'),
  period?: string(name='Period', description='The subscription period of the instance. Valid values: **1** to **9** and **12**. Unit: months.

This parameter is required.', example='12'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The internal IP address. If this parameter is specified, you must specify the vSwitch ID. The vSwitch must be created first. Otherwise, an error is returned.', example='10.10.10.10'),
  publicIpIdentification?: boolean(name='PublicIpIdentification', description='Specifies whether a public IP address can be assigned to the specified instance. Valid values:

*   **true**
*   **false**', example='true'),
  quantity?: string(name='Quantity', description='The number of instances.

This parameter is required.', example='1'),
  uniqueSuffix?: boolean(name='UniqueSuffix', description='Specifies whether to automatically append sequential suffixes to the hostnames specified by the **HostName** parameter and instance names specified by the **InstanceName** parameter. The sequential suffixes range from **001** to **999**.

Examples: **LocalHost001** and **LocalHost002**, and **MyInstance001** and **MyInstance002**.

Default value: **false**.', example='false'),
  userData?: string(name='UserData', description='Custom data. The data starts with `#!`. The data can be at most 256 characters in length and 16 KB in size. Only custom scripts are supported and cannot be rendered by InstanceMetaData.

You can specify custom data. The data is encoded in Base64. The system does not encrypt your custom data when API requests are initiated. We recommend that you do not pass in confidential information such as passwords and private keys in plaintext. If you want to provide sensitive data such as passwords and private keys, encrypt the data and then encode it in Base64. The data is decrypted on the instance in the way it is encrypted.

For more information, see [User data formats](https://cloudinit.readthedocs.io/en/latest/topics/format.html).', example='#!/bin/sh  echo "Hello World.  The time is now $(date -R)!" | tee /home/output.txt'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='YourVSwitchId'),
}

model CreateInstanceResponseBody = {
  code?: int32(name='Code', description='The return code. A value of 0 indicates that the request is successful.

>  If you call this operation by using SDKs, the return value is of the integer type. If you call this operation by using common methods or HTTP requests, the return value is of the string type.', example='0'),
  instanceIds?: {
    instanceId?: [ string ](name='InstanceId')
  }(name='InstanceIds', description='The IDs of instances.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4A431388-2D4B-46F4-A96B-D4E6BD0688C1'),
}

model CreateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceResponseBody(name='body'),
}

/**
 * @summary Creates an instance.
 *
 * @description *   You can call this operation up to 10 times per second per account.
 * *   We recommend that you increase the request time because instance creation is an asynchronous operation. If the return code of the API operation is 0, it indicates that the request is successful, but does not indicate that the instance is created. If the request is successful, an instance ID is returned. You can check whether the instance is created based on the instance ID.
 * *   InvalidUserData.NotInWhiteList operation restriction: You can create an instance only if you are in the whitelist in which members have the purchase permissions. Otherwise, an error is returned.
 *
 * @param request CreateInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateInstanceResponse
 */
async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.autoRenewPeriod)) {
    query['AutoRenewPeriod'] = request.autoRenewPeriod;
  }
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.hostName)) {
    query['HostName'] = request.hostName;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.ipType)) {
    query['IpType'] = request.ipType;
  }
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.passwordInherit)) {
    query['PasswordInherit'] = request.passwordInherit;
  }
  if (!Util.isUnset(request.paymentType)) {
    query['PaymentType'] = request.paymentType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.publicIpIdentification)) {
    query['PublicIpIdentification'] = request.publicIpIdentification;
  }
  if (!Util.isUnset(request.quantity)) {
    query['Quantity'] = request.quantity;
  }
  if (!Util.isUnset(request.uniqueSuffix)) {
    query['UniqueSuffix'] = request.uniqueSuffix;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.dataDisk)) {
    query['DataDisk'] = request.dataDisk;
  }
  if (!Util.isUnset(request.systemDisk)) {
    query['SystemDisk'] = request.systemDisk;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates an instance.
 *
 * @description *   You can call this operation up to 10 times per second per account.
 * *   We recommend that you increase the request time because instance creation is an asynchronous operation. If the return code of the API operation is 0, it indicates that the request is successful, but does not indicate that the instance is created. If the request is successful, an instance ID is returned. You can check whether the instance is created based on the instance ID.
 * *   InvalidUserData.NotInWhiteList operation restriction: You can create an instance only if you are in the whitelist in which members have the purchase permissions. Otherwise, an error is returned.
 *
 * @param request CreateInstanceRequest
 * @return CreateInstanceResponse
 */
async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model CreateInstanceActiveOpsTaskRequest {
  instanceIds?: [ string ](name='InstanceIds'),
}

model CreateInstanceActiveOpsTaskShrinkRequest {
  instanceIdsShrink?: string(name='InstanceIds'),
}

model CreateInstanceActiveOpsTaskResponseBody = {
  instanceActiveOpsTask?: InstanceActiveOpsTask(name='InstanceActiveOpsTask'),
  requestId?: string(name='RequestId'),
}

model CreateInstanceActiveOpsTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceActiveOpsTaskResponseBody(name='body'),
}

/**
 * @summary 调用CreateInstanceOpsTask来针对一个实例或实例运维组发起运维任务
 *
 * @param tmpReq CreateInstanceActiveOpsTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateInstanceActiveOpsTaskResponse
 */
async function createInstanceActiveOpsTaskWithOptions(tmpReq: CreateInstanceActiveOpsTaskRequest, runtime: Util.RuntimeOptions): CreateInstanceActiveOpsTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateInstanceActiveOpsTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'simple');
  }
  var query = {};
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['InstanceIds'] = request.instanceIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstanceActiveOpsTask',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 调用CreateInstanceOpsTask来针对一个实例或实例运维组发起运维任务
 *
 * @param request CreateInstanceActiveOpsTaskRequest
 * @return CreateInstanceActiveOpsTaskResponse
 */
async function createInstanceActiveOpsTask(request: CreateInstanceActiveOpsTaskRequest): CreateInstanceActiveOpsTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceActiveOpsTaskWithOptions(request, runtime);
}

model CreateKeyPairRequest {
  keyPairName?: string(name='KeyPairName', description='The name of the key pair. The name must conform to the following naming conventions:

*   The name must be 2 to 128 characters in length, and can contain letters, digits, colons (:), underscores (_), and hyphens (-).
*   It must start with a letter but cannot start with `http://` or `https://`.

This parameter is required.', example='TestKeyPairName'),
}

model CreateKeyPairResponseBody = {
  keyPairFingerPrint?: string(name='KeyPairFingerPrint', description='The fingerprint of the key pair. The message-digest algorithm 5 (MD5) is used based on the public key fingerprint format defined in RFC 4716. For more information, see [RFC 4716](https://tools.ietf.org/html/rfc4716).', example='7880c1ad4687fdbf7a6da2131****'),
  keyPairId?: string(name='KeyPairId', description='The ID of the SSH key pair.', example='ssh-5lywanlkih1zo9yl8eg****'),
  keyPairName?: string(name='KeyPairName', description='The name of the key pair.', example='TestKeyPairName'),
  privateKeyBody?: string(name='PrivateKeyBody', description='The private key of the key pair. The private key is encoded with PEM in the PKCS#8 format.', example='-----BEGIN RSA PRIVATE KEY-----\\\\nMIIEogIBAAKCAQE****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateKeyPairResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateKeyPairResponseBody(name='body'),
}

/**
 * @summary Creates an SSH key pair.
 *
 * @description An SSH key pair consists of a public key and a private key. ENS stores the public key and returns the unencrypted private key that is PEM-encoded in the PKCS#8 format. You must securely lock away the private key.
 *
 * @param request CreateKeyPairRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateKeyPairResponse
 */
async function createKeyPairWithOptions(request: CreateKeyPairRequest, runtime: Util.RuntimeOptions): CreateKeyPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateKeyPair',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates an SSH key pair.
 *
 * @description An SSH key pair consists of a public key and a private key. ENS stores the public key and returns the unencrypted private key that is PEM-encoded in the PKCS#8 format. You must securely lock away the private key.
 *
 * @param request CreateKeyPairRequest
 * @return CreateKeyPairResponse
 */
async function createKeyPair(request: CreateKeyPairRequest): CreateKeyPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return createKeyPairWithOptions(request, runtime);
}

model CreateLoadBalancerRequest {
  clientToken?: string(name='ClientToken'),
  ensRegionId?: string(name='EnsRegionId', description='The ID of the Edge Node Service (ENS) node.

This parameter is required.', example='cn-chengdu-telecom'),
  loadBalancerName?: string(name='LoadBalancerName', description='The name of the ELB instance. The name must be 1 to 80 characters in length. If you leave this parameter empty, the system randomly allocates a name as the value of this parameter.

>  The value cannot start with `http://` or `https://`.', example='gcs-pre-websocket-eslb-telecom'),
  loadBalancerSpec?: string(name='LoadBalancerSpec', description='The specification of the ELB instance.

This parameter is required.', example='elb.s2.medium'),
  networkId?: string(name='NetworkId', description='The network ID of the created ELB instance.

This parameter is required.', example='n-5sax03dh2eyagujgsn7z9****'),
  payType?: string(name='PayType', description='The billing method of the cluster. Valid value: PostPaid. PostPaid specifies the pay-as-you-go billing method.

This parameter is required.', example='PostPaid'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which the internal-facing ELB instance belongs.

This parameter is required.', example='vsw-5s78haoys9oylle6ln71m****'),
}

model CreateLoadBalancerResponseBody = {
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ELB instance.', example='lb-5s7crik3yo3bp03gqrbp5****'),
  loadBalancerName?: string(name='LoadBalancerName', description='The name of the ELB instance.', example='gcs-pre-websocket-****'),
  networkId?: string(name='NetworkId', description='The ID of the network.', example='n-5sax03dh2eyagujgsn7z9****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1ECC937A-AE0E-4626-BE51-DED1D6D1C888'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which the ELB instance belongs.', example='vsw-5savh5ngxh8sbj14bu7n****'),
}

model CreateLoadBalancerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLoadBalancerResponseBody(name='body'),
}

/**
 * @summary Creates an Edge Load Balancer (ELB) instance.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 5 times per second per user.
 *
 * @param request CreateLoadBalancerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateLoadBalancerResponse
 */
async function createLoadBalancerWithOptions(request: CreateLoadBalancerRequest, runtime: Util.RuntimeOptions): CreateLoadBalancerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.loadBalancerName)) {
    query['LoadBalancerName'] = request.loadBalancerName;
  }
  if (!Util.isUnset(request.loadBalancerSpec)) {
    query['LoadBalancerSpec'] = request.loadBalancerSpec;
  }
  if (!Util.isUnset(request.networkId)) {
    query['NetworkId'] = request.networkId;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLoadBalancer',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates an Edge Load Balancer (ELB) instance.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 5 times per second per user.
 *
 * @param request CreateLoadBalancerRequest
 * @return CreateLoadBalancerResponse
 */
async function createLoadBalancer(request: CreateLoadBalancerRequest): CreateLoadBalancerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLoadBalancerWithOptions(request, runtime);
}

model CreateLoadBalancerHTTPListenerRequest {
  backendServerPort?: int32(name='BackendServerPort', description='The port used by the backend ELB server of the ELB instance. Valid values: **1** to **65535**.', example='8080'),
  description?: string(name='Description', description='The name of the listener. The value must be **1** to **80** characters in length.

>  The value cannot start with `http://` or `https://`.', example='Monitoring instructions'),
  forwardPort?: int32(name='ForwardPort', description='The listener port that is used to redirect HTTP requests to HTTPS.', example='0'),
  healthCheck?: string(name='HealthCheck', description='Specifies whether to enable the health check feature. Valid values:

*   **on**
*   **off** (default)

This parameter is required.', example='on'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='The backend port that is used for health checks. Valid values: **1** to **65535**.

>  This parameter takes effect only if you set HealthCheck to on.', example='30040'),
  healthCheckDomain?: string(name='HealthCheckDomain', description='The domain name that you want to use for health checks.

>  This parameter takes effect only if you set HealthCheck to on.', example='www.aliyundoc.com'),
  healthCheckHttpCode?: string(name='HealthCheckHttpCode', description='The HTTP status code for a successful health check. Valid values:

*   **http_2xx** (default)
*   **http_3xx**
*   **http_4xx**
*   **http_5xx**

>  This parameter takes effect only if you set HealthCheck to on.', example='http_2xx'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='The interval at which health checks are performed. Valid values: **1** to **50**. Default value: **2**. Unit: seconds.

>  This parameter takes effect only if you set HealthCheck to on.', example='2'),
  healthCheckMethod?: string(name='HealthCheckMethod', description='The health check method used in HTTP health checks. Valid values:

*   **head** (default)
*   **get**

>  This parameter takes effect only if you set HealthCheck to on.', example='head'),
  healthCheckTimeout?: int32(name='HealthCheckTimeout', description='The timeout period of a health check response. If a backend server does not respond within the specified timeout period, the server fails the health check.

*   Default value: 5.
*   Valid values: **1** to **300**.
*   Unit: seconds.

> 

*   This parameter takes effect only if the HealthCheck parameter is set to on.

*   If the value of HealthCheckTimeout is smaller than the value of HealthCheckInterval, the timeout period specified by HealthCheckTimeout becomes invalid, and the value of HealthCheckInterval is used as the timeout period.', example='5'),
  healthCheckURI?: string(name='HealthCheckURI', description='The URI used for health checks. The URI must be **1** to **80** characters in length.

> 

*   A URL must start with a forward slash (`/`) but cannot contain only forward slashes (`/`).

*   This parameter takes effect only if the HealthCheck parameter is set to on.', example='/checkpreload.htm'),
  healthyThreshold?: int32(name='HealthyThreshold', description='The number of consecutive successful health checks that must occur before an unhealthy and inaccessible backend server is declared healthy and accessible. Valid values: **2** to **10**. Default value: **3**.

>  This parameter takes effect only if you set HealthCheck to on.', example='3'),
  idleTimeout?: int32(name='IdleTimeout', description='The timeout period for idle connections. Default value: 15. Valid values: **1** to **60**. Unit: seconds.

>  If no request is received within the specified timeout period, ELB closes the connection. When a request is received, ELB creates a new connection.', example='15'),
  listenerForward?: string(name='ListenerForward', description='Specifies whether to enable HTTP-to-HTTPS redirection. Valid values:

*   **on**
*   **off** (default)', example='off'),
  listenerPort?: int32(name='ListenerPort', description='The listener port that is used by Edge Load Balancer (ELB) to receive requests and forward the requests to backend servers. Valid values: **1** to **65535**.

>  We recommend that you use port 80 for HTTP.

This parameter is required.', example='8080'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the Edge Load Balancer (ELB) instance.

This parameter is required.', example='lb-5s7crik3yo3bp03gqrbp5****'),
  requestTimeout?: int32(name='RequestTimeout', description='The timeout period of a request. Default value: 60. Valid values: **1** to **180**. Unit: seconds.

>  If no response is received from the backend server within the specified timeout period, ALB returns an HTTP 504 error code to the client.', example='60'),
  scheduler?: string(name='Scheduler', description='The routing algorithm. Valid values:

*   **wrr**: Backend servers with higher weights receive more requests than backend servers with lower weights. This is the default value.
*   **wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections on a backend server. If two backend servers have the same weight, the backend server that has fewer connections receives more requests.
*   **rr**: Requests are distributed to backend servers in sequence.
*   **sch**: consistent hashing that is based on source IP addresses. Requests from the same source IP address are distributed to the same backend server.
*   **qch**: consistent hashing that is based on QUIC connection IDs. Requests that contain the same QUIC connection ID are distributed to the same backend server.
*   **iqch**: consistent hashing that is based on specific three bytes of the iQUIC CIDs. Requests whose second to fourth bytes are the same are distributed to the same backend server.', example='wrr'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='The number of consecutive failed health checks that must occur before a healthy and accessible backend server is declared unhealthy and inaccessible. Valid values: **2** to **10**. Default value: **3**.

>  This parameter takes effect only if you set HealthCheck to on.', example='3'),
  XForwardedFor?: string(name='XForwardedFor', description='Specifies whether to use the X-Forwarded-For header to obtain the real IP address of the client. Valid values:

*   **on**
*   **off** (default)', example='off'),
}

model CreateLoadBalancerHTTPListenerResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateLoadBalancerHTTPListenerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLoadBalancerHTTPListenerResponseBody(name='body'),
}

/**
 * @summary Creates an HTTP listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request CreateLoadBalancerHTTPListenerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateLoadBalancerHTTPListenerResponse
 */
async function createLoadBalancerHTTPListenerWithOptions(request: CreateLoadBalancerHTTPListenerRequest, runtime: Util.RuntimeOptions): CreateLoadBalancerHTTPListenerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backendServerPort)) {
    query['BackendServerPort'] = request.backendServerPort;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.forwardPort)) {
    query['ForwardPort'] = request.forwardPort;
  }
  if (!Util.isUnset(request.healthCheck)) {
    query['HealthCheck'] = request.healthCheck;
  }
  if (!Util.isUnset(request.healthCheckConnectPort)) {
    query['HealthCheckConnectPort'] = request.healthCheckConnectPort;
  }
  if (!Util.isUnset(request.healthCheckDomain)) {
    query['HealthCheckDomain'] = request.healthCheckDomain;
  }
  if (!Util.isUnset(request.healthCheckHttpCode)) {
    query['HealthCheckHttpCode'] = request.healthCheckHttpCode;
  }
  if (!Util.isUnset(request.healthCheckInterval)) {
    query['HealthCheckInterval'] = request.healthCheckInterval;
  }
  if (!Util.isUnset(request.healthCheckMethod)) {
    query['HealthCheckMethod'] = request.healthCheckMethod;
  }
  if (!Util.isUnset(request.healthCheckTimeout)) {
    query['HealthCheckTimeout'] = request.healthCheckTimeout;
  }
  if (!Util.isUnset(request.healthCheckURI)) {
    query['HealthCheckURI'] = request.healthCheckURI;
  }
  if (!Util.isUnset(request.healthyThreshold)) {
    query['HealthyThreshold'] = request.healthyThreshold;
  }
  if (!Util.isUnset(request.idleTimeout)) {
    query['IdleTimeout'] = request.idleTimeout;
  }
  if (!Util.isUnset(request.listenerForward)) {
    query['ListenerForward'] = request.listenerForward;
  }
  if (!Util.isUnset(request.listenerPort)) {
    query['ListenerPort'] = request.listenerPort;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  if (!Util.isUnset(request.requestTimeout)) {
    query['RequestTimeout'] = request.requestTimeout;
  }
  if (!Util.isUnset(request.scheduler)) {
    query['Scheduler'] = request.scheduler;
  }
  if (!Util.isUnset(request.unhealthyThreshold)) {
    query['UnhealthyThreshold'] = request.unhealthyThreshold;
  }
  if (!Util.isUnset(request.XForwardedFor)) {
    query['XForwardedFor'] = request.XForwardedFor;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLoadBalancerHTTPListener',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates an HTTP listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request CreateLoadBalancerHTTPListenerRequest
 * @return CreateLoadBalancerHTTPListenerResponse
 */
async function createLoadBalancerHTTPListener(request: CreateLoadBalancerHTTPListenerRequest): CreateLoadBalancerHTTPListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLoadBalancerHTTPListenerWithOptions(request, runtime);
}

model CreateLoadBalancerHTTPSListenerRequest {
  backendServerPort?: int32(name='BackendServerPort', description='The listening port that is used by the backend instances. Valid values: 1 to 65535.', example='8080'),
  cookie?: string(name='Cookie', description='The cookie that is configured on the server. The cookie must be **1** to **200** characters in length and contain only ASCII characters and digits.

>  This parameter is required if you set StickySession to on and StickySessionType to server.', example='example'),
  cookieTimeout?: int32(name='CookieTimeout', description='The timeout period of a cookie. Valid values: **1** to **86400**. Unit: seconds.

>  This parameter is required if you set StickySession to on and StickySessionType to insert.', example='100'),
  description?: string(name='Description', description='The description of the listener. The description must be **1** to **80** characters in length.

>  The value cannot start with `http://` or `https://`.', example='https_80'),
  forwardPort?: int32(name='ForwardPort', description='The listener port that is used to redirect HTTP requests to HTTPS.', example='0'),
  healthCheck?: string(name='HealthCheck', description='Specifies whether to enable the health check feature. Valid values:

*   **on**
*   **off**

This parameter is required.', example='on'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='The port that is used for health checks. Valid values: **1** to **65535**. If you leave this parameter empty, the port specified by BackendServerPort is used for health checks.

>  This parameter takes effect only if you set HealthCheck to on.', example='11'),
  healthCheckDomain?: string(name='HealthCheckDomain', description='The domain name that you want to use for health checks.

>  This parameter takes effect only if you set HealthCheck to on.', example='example.com'),
  healthCheckHttpCode?: string(name='HealthCheckHttpCode', description='The HTTP status code for a successful health check. Valid values:

*   **http_2xx** (default)
*   **http_3xx**
*   **http_4xx**
*   **http_5xx**

>  This parameter takes effect only if you set HealthCheck to on.', example='http_2xx'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='The interval at which health checks are performed. Valid values: **1** to **50**. Default value: **2**. Unit: seconds.

>  This parameter takes effect only if you set HealthCheck to on.', example='2'),
  healthCheckMethod?: string(name='HealthCheckMethod', description='The health check method used by HTTP listeners. Valid values:

*   **head** (default): requests the head of the page.
*   **get**: requests the specified part of the page and returns the entity body.

>  This parameter takes effect only if you set HealthCheck to on.', example='head'),
  healthCheckTimeout?: int32(name='HealthCheckTimeout', description='The timeout period of a health check response. If a backend server does not respond within the specified timeout period, the server fails to pass the health check.

*   Default value: 5.
*   Valid values: **1** to **300**.
*   Unit: seconds.

> 

*   This parameter takes effect only if the HealthCheck parameter is set to on.

*   If the value of HealthCheckTimeout is smaller than the value of HealthCheckInterval, the timeout period specified by HealthCheckTimeout becomes invalid, and the value of HealthCheckInterval is used as the timeout period.', example='5'),
  healthCheckURI?: string(name='HealthCheckURI', description='The URI used for health checks. The URI must be **1** to **80** characters in length.

>  A URL must start with a forward slash (`/`) but cannot contain only forward slashes (`/`).', example='/checkpreload.htm'),
  healthyThreshold?: int32(name='HealthyThreshold', description='The number of consecutive successful health checks that must occur before an unhealthy and inaccessible backend server is declared healthy and accessible. Valid values: **2** to **10**. Default value: **3**.

>  This parameter takes effect only if you set HealthCheck to on.', example='3'),
  idleTimeout?: int32(name='IdleTimeout', description='The timeout period for idle connections. Default value: 15. Valid values: **1** to **60**. Unit: seconds.

>  If no request is received within the specified timeout period, ELB closes the connection. When another request is received, ELB establishes a new connection.', example='15'),
  listenerForward?: string(name='ListenerForward', description='Specifies whether to enable HTTP-to-HTTPS redirection. Valid values:

*   **on**
*   **off** (default)', example='off'),
  listenerPort?: int32(name='ListenerPort', description='The listening port that is used by Edge Load Balancer (ELB) to receive requests and forward the requests to backend servers. Valid values: **1** to **65535**.

>  We recommend that you use port 443 for HTTPS.

This parameter is required.', example='8080'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the Edge Load Balancer (ELB) instance.

This parameter is required.', example='lb-5s8w63yydi59w7klaikam****'),
  requestTimeout?: int32(name='RequestTimeout', description='The timeout period of requests. Default value: 60. Valid values: **1** to **180**. Unit: seconds.

>  If no response is received from the backend server within the specified timeout period, ELB returns an HTTP 504 error code to the client.', example='60'),
  scheduler?: string(name='Scheduler', description='The routing algorithm. Valid values:

*   **wrr** (default): Backend servers with higher weights receive more requests than backend servers with lower weights.
*   **wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections on a backend server. If two backend servers have the same weight, the backend server that has fewer connections receives more requests.
*   **rr**: Requests are distributed to backend servers in sequence.
*   **sch**: consistent hashing that is based on source IP addresses. Requests from the same source IP address are distributed to the same backend server.
*   **qch**: consistent hashing that is based on QUIC connection IDs. Requests that contain the same QUIC connection ID are distributed to the same backend server.
*   **iqch**: consistent hashing that is based on specific three bytes of the iQUIC CIDs. Requests whose second to fourth bytes are the same are distributed to the same backend server.', example='wrr'),
  serverCertificateId?: string(name='ServerCertificateId', description='The ID of the server certificate.

This parameter is required.', example='60276**'),
  stickySessionType?: string(name='StickySessionType', description='The method that is used to handle a cookie. Valid values:

*   **insert**: inserts a cookie. ELB inserts a session cookie (SERVERID) into the first HTTP or HTTPS response that is sent to a client. Subsequent requests to ELB carry this cookie, and ELB determines the destination servers of the requests based on the cookies.
*   **server**: rewrites a cookie. When ELB detects a user-defined cookie, it overwrites the original cookie with the user-defined cookie. The next request from the client carries the user-defined cookie, and the listener forwards this request to the recorded backend server.

>  This parameter is required if you set StickySession to on.', example='insert'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='The number of consecutive failed health checks that must occur before a healthy and accessible backend server is declared unhealthy and inaccessible. Valid values: **2** to **10**. Default value: **3**.

>  This parameter takes effect only if you set HealthCheck to on.', example='3'),
}

model CreateLoadBalancerHTTPSListenerResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateLoadBalancerHTTPSListenerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLoadBalancerHTTPSListenerResponseBody(name='body'),
}

/**
 * @summary Creates an HTTPS listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request CreateLoadBalancerHTTPSListenerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateLoadBalancerHTTPSListenerResponse
 */
async function createLoadBalancerHTTPSListenerWithOptions(request: CreateLoadBalancerHTTPSListenerRequest, runtime: Util.RuntimeOptions): CreateLoadBalancerHTTPSListenerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backendServerPort)) {
    query['BackendServerPort'] = request.backendServerPort;
  }
  if (!Util.isUnset(request.cookie)) {
    query['Cookie'] = request.cookie;
  }
  if (!Util.isUnset(request.cookieTimeout)) {
    query['CookieTimeout'] = request.cookieTimeout;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.forwardPort)) {
    query['ForwardPort'] = request.forwardPort;
  }
  if (!Util.isUnset(request.healthCheck)) {
    query['HealthCheck'] = request.healthCheck;
  }
  if (!Util.isUnset(request.healthCheckConnectPort)) {
    query['HealthCheckConnectPort'] = request.healthCheckConnectPort;
  }
  if (!Util.isUnset(request.healthCheckDomain)) {
    query['HealthCheckDomain'] = request.healthCheckDomain;
  }
  if (!Util.isUnset(request.healthCheckHttpCode)) {
    query['HealthCheckHttpCode'] = request.healthCheckHttpCode;
  }
  if (!Util.isUnset(request.healthCheckInterval)) {
    query['HealthCheckInterval'] = request.healthCheckInterval;
  }
  if (!Util.isUnset(request.healthCheckMethod)) {
    query['HealthCheckMethod'] = request.healthCheckMethod;
  }
  if (!Util.isUnset(request.healthCheckTimeout)) {
    query['HealthCheckTimeout'] = request.healthCheckTimeout;
  }
  if (!Util.isUnset(request.healthCheckURI)) {
    query['HealthCheckURI'] = request.healthCheckURI;
  }
  if (!Util.isUnset(request.healthyThreshold)) {
    query['HealthyThreshold'] = request.healthyThreshold;
  }
  if (!Util.isUnset(request.idleTimeout)) {
    query['IdleTimeout'] = request.idleTimeout;
  }
  if (!Util.isUnset(request.listenerForward)) {
    query['ListenerForward'] = request.listenerForward;
  }
  if (!Util.isUnset(request.listenerPort)) {
    query['ListenerPort'] = request.listenerPort;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  if (!Util.isUnset(request.requestTimeout)) {
    query['RequestTimeout'] = request.requestTimeout;
  }
  if (!Util.isUnset(request.scheduler)) {
    query['Scheduler'] = request.scheduler;
  }
  if (!Util.isUnset(request.serverCertificateId)) {
    query['ServerCertificateId'] = request.serverCertificateId;
  }
  if (!Util.isUnset(request.stickySessionType)) {
    query['StickySessionType'] = request.stickySessionType;
  }
  if (!Util.isUnset(request.unhealthyThreshold)) {
    query['UnhealthyThreshold'] = request.unhealthyThreshold;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLoadBalancerHTTPSListener',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates an HTTPS listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request CreateLoadBalancerHTTPSListenerRequest
 * @return CreateLoadBalancerHTTPSListenerResponse
 */
async function createLoadBalancerHTTPSListener(request: CreateLoadBalancerHTTPSListenerRequest): CreateLoadBalancerHTTPSListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLoadBalancerHTTPSListenerWithOptions(request, runtime);
}

model CreateLoadBalancerTCPListenerRequest {
  backendServerPort?: int32(name='BackendServerPort', description='The port used by the backend ELB server of the ELB instance. Valid values: **1** to **65535**.', example='8080'),
  description?: string(name='Description', description='The name of the listener. The value must be **1** to **80** characters in length.

>  The value cannot start with `http://` or `https://`.', example='example'),
  eipTransmit?: string(name='EipTransmit', description='Specifies whether to enable Elastic IP address (EIP) pass-through. Valid values:

*   **on**
*   **off** (default)', example='on'),
  establishedTimeout?: int32(name='EstablishedTimeout', description='The timeout period of a connection. Valid values: **10** to **900**. Default value: **900**. Unit: seconds.', example='500'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='The port that is used for health checks. Valid values: **1** to **65535**. If you leave this parameter empty, the port specified for BackendServerPort is used for health checks.', example='8080'),
  healthCheckConnectTimeout?: int32(name='HealthCheckConnectTimeout', description='The timeout period of a health check response. If a backend server does not respond within the specified timeout period, the server fails the health check.

*   Default value: 5.
*   Valid values: **1** to **300**.
*   Unit: seconds.

>  If the value of the HealthCheckConnectTimeout parameter is smaller than that of the HealthCheckInterval parameter, the timeout period specified by the HealthCheckConnectTimeout parameter is ignored and the period of time specified by the HealthCheckInterval parameter is used as the timeout period.', example='100'),
  healthCheckDomain?: string(name='HealthCheckDomain', description='The domain name that you want to use for health checks.', example='www.aliyundoc.com'),
  healthCheckHttpCode?: string(name='HealthCheckHttpCode', description='The HTTP status codes for a successful health check. Valid values:

*   **http_2xx** (default)
*   **http_3xx**.
*   **http_4xx**
*   **http_5xx**', example='http_2xx'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='The interval at which health checks are performed. Valid values: **1** to **50**. Default value: **2**. Unit: seconds.', example='3'),
  healthCheckType?: string(name='HealthCheckType', description='The type of health checks. Valid values:

*   **tcp** (default)
*   **http**', example='tcp'),
  healthCheckURI?: string(name='HealthCheckURI', description='The Uniform Resource Identifier (URI) that you want to use for health checks. The URI must be **1** to **80** characters in length.

>  The URL must start with `/` and contain characters other than `/`.', example='/checkpreload.htm'),
  healthyThreshold?: int32(name='HealthyThreshold', description='The number of consecutive successful health checks that must occur before an unhealthy and inaccessible backend server is declared healthy and accessible. Valid values: **2** to **10**. Default value: **3**.', example='4'),
  listenerPort?: int32(name='ListenerPort', description='The listener port that is used by Edge Load Balancer (ELB) to receive requests and forward the requests to backend servers. Valid values: **1** to **65535**.

This parameter is required.', example='80'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the Edge Load Balancer (ELB) instance.

This parameter is required.', example='lb-5ovkn1piwqmoqrfjdyhq4****'),
  persistenceTimeout?: int32(name='PersistenceTimeout', description='The timeout period of session persistence.

*   Default value: 0. If the default value is used, the system disables session persistence.
*   Valid values: **0** to **3600**.
*   Unit: seconds.', example='0'),
  scheduler?: string(name='Scheduler', description='The scheduling algorithm. Valid values:

*   **wrr** (default): Backend servers with higher weights receive more requests than backend servers with lower weights.
*   **wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections on a backend server. If two backend servers have the same weight, the backend server that has fewer connections receives more requests.
*   **rr**: Requests are distributed to backend servers in sequence.
*   **sch**: consistent hashing that is based on source IP addresses. Requests from the same source IP address are distributed to the same backend server.
*   **qch**: consistent hashing that is based on QUIC connection IDs. Requests that contain the same QUIC connection ID are distributed to the same backend server.
*   **iqch**: consistent hashing that is based on specific three bytes of the iQUIC CIDs. Requests whose second to fourth bytes are the same are distributed to the same backend server.', example='wrr'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='The number of consecutive failed health checks that must occur before a healthy and accessible backend server is declared unhealthy and inaccessible. Valid values: **2** to **10**. Default value: **3**.', example='4'),
}

model CreateLoadBalancerTCPListenerResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='06F00FBB-3D9E-4CCE-9D43-1A6946A75456'),
}

model CreateLoadBalancerTCPListenerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLoadBalancerTCPListenerResponseBody(name='body'),
}

/**
 * @summary Creates a Transmission Control Protocol (TCP) listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request CreateLoadBalancerTCPListenerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateLoadBalancerTCPListenerResponse
 */
async function createLoadBalancerTCPListenerWithOptions(request: CreateLoadBalancerTCPListenerRequest, runtime: Util.RuntimeOptions): CreateLoadBalancerTCPListenerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backendServerPort)) {
    query['BackendServerPort'] = request.backendServerPort;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.eipTransmit)) {
    query['EipTransmit'] = request.eipTransmit;
  }
  if (!Util.isUnset(request.establishedTimeout)) {
    query['EstablishedTimeout'] = request.establishedTimeout;
  }
  if (!Util.isUnset(request.healthCheckConnectPort)) {
    query['HealthCheckConnectPort'] = request.healthCheckConnectPort;
  }
  if (!Util.isUnset(request.healthCheckConnectTimeout)) {
    query['HealthCheckConnectTimeout'] = request.healthCheckConnectTimeout;
  }
  if (!Util.isUnset(request.healthCheckDomain)) {
    query['HealthCheckDomain'] = request.healthCheckDomain;
  }
  if (!Util.isUnset(request.healthCheckHttpCode)) {
    query['HealthCheckHttpCode'] = request.healthCheckHttpCode;
  }
  if (!Util.isUnset(request.healthCheckInterval)) {
    query['HealthCheckInterval'] = request.healthCheckInterval;
  }
  if (!Util.isUnset(request.healthCheckType)) {
    query['HealthCheckType'] = request.healthCheckType;
  }
  if (!Util.isUnset(request.healthCheckURI)) {
    query['HealthCheckURI'] = request.healthCheckURI;
  }
  if (!Util.isUnset(request.healthyThreshold)) {
    query['HealthyThreshold'] = request.healthyThreshold;
  }
  if (!Util.isUnset(request.listenerPort)) {
    query['ListenerPort'] = request.listenerPort;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  if (!Util.isUnset(request.persistenceTimeout)) {
    query['PersistenceTimeout'] = request.persistenceTimeout;
  }
  if (!Util.isUnset(request.scheduler)) {
    query['Scheduler'] = request.scheduler;
  }
  if (!Util.isUnset(request.unhealthyThreshold)) {
    query['UnhealthyThreshold'] = request.unhealthyThreshold;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLoadBalancerTCPListener',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a Transmission Control Protocol (TCP) listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request CreateLoadBalancerTCPListenerRequest
 * @return CreateLoadBalancerTCPListenerResponse
 */
async function createLoadBalancerTCPListener(request: CreateLoadBalancerTCPListenerRequest): CreateLoadBalancerTCPListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLoadBalancerTCPListenerWithOptions(request, runtime);
}

model CreateLoadBalancerUDPListenerRequest {
  backendServerPort?: int32(name='BackendServerPort', description='The port used by the backend ELB server of the ELB instance. Valid values: **1** to **65535**.', example='8080'),
  description?: string(name='Description', description='The name of the listener. The value must be **1** to **80** characters in length.

>  The value cannot start with `http://` or `https://`.', example='example'),
  eipTransmit?: string(name='EipTransmit', description='Specifies whether to enable Elastic IP address (EIP) pass-through. Valid values:

*   **on**
*   **off** (default)', example='on'),
  establishedTimeout?: int32(name='EstablishedTimeout', description='The timeout period of a connection. Valid values: **10** to **900**. Default value: **900**. Unit: seconds.', example='500'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='The port that is used for health checks. Valid values: **1** to **65535**. If you leave this parameter empty, the port specified by BackendServerPort is used for health checks.', example='8080'),
  healthCheckConnectTimeout?: int32(name='HealthCheckConnectTimeout', description='The timeout period for a health check response. If a backend server does not respond within the specified timeout period, the server fails the health check.

*   Default value: 5.
*   Valid values: **1** to **300**.
*   Unit: seconds.

>  If the value of the HealthCheckConnectTimeout parameter is smaller than that of the HealthCheckInterval parameter, the timeout period specified by the HealthCheckConnectTimeout parameter becomes invalid and the value of the HealthCheckInterval parameter is used as the timeout period.', example='100'),
  healthCheckExp?: string(name='HealthCheckExp', description='The response string for UDP listener health checks. The string can be up to 64 characters in length and can contain only letters and digits.', example='ok'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='The interval at which health checks are performed. Valid values: **1** to **50**. Default value: **2**. Unit: seconds.', example='3'),
  healthCheckReq?: string(name='HealthCheckReq', description='The request string for UDP listener health checks. The string can be up to 64 characters in length and can contain only letters and digits.', example='hello'),
  healthyThreshold?: int32(name='HealthyThreshold', description='The number of consecutive successful health checks that must occur before an unhealthy and inaccessible backend server is declared healthy and accessible. Valid values: **2** to **10**. Default value: **3**.', example='4'),
  listenerPort?: int32(name='ListenerPort', description='The listener port that is used by Edge Load Balancer (ELB) to receive requests and forward the requests to backend servers. Valid values: **1** to **65535**.

>  You cannot specify ports 250, 4789, or 4790 for UDP listeners. They are system reserved ports.

This parameter is required.', example='80'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the Edge Load Balancer (ELB) instance.

This parameter is required.', example='lb-5q73cv04zeyh43lh74lp4****'),
  scheduler?: string(name='Scheduler', description='The scheduling algorithm. Valid values:

*   **wrr**: Backend servers with higher weights receive more requests than backend servers with lower weights. This is the default value.
*   **wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections on a backend server. If two backend servers have the same weight, the backend server that has fewer connections receives more requests.
*   **rr**: Requests are distributed to backend servers in sequence.
*   **sch**: Consistent hashing that is based on source IP addresses. Requests from the same source IP address are distributed to the same backend server.
*   **qch**: Consistent hashing based on Quick UDP Internet Connection (QUIC) IDs. Requests that contain the same QUIC ID are scheduled to the same backend server.
*   **iqch**: Consistent hashing based on three specific bytes of iQUIC CID. Requests with the same second, third, and forth bytes are scheduled to the same backend server.', example='wrr'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='The number of consecutive failed health checks that must occur before a healthy and accessible backend server is declared unhealthy and inaccessible. Valid values: **2** to **10**. Default value: **3**.', example='4'),
}

model CreateLoadBalancerUDPListenerResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='06F00FBB-3D9E-4CCE-9D43-1A6946A75456'),
}

model CreateLoadBalancerUDPListenerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLoadBalancerUDPListenerResponseBody(name='body'),
}

/**
 * @summary Creates a User Datagram Protocol (UDP) listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request CreateLoadBalancerUDPListenerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateLoadBalancerUDPListenerResponse
 */
async function createLoadBalancerUDPListenerWithOptions(request: CreateLoadBalancerUDPListenerRequest, runtime: Util.RuntimeOptions): CreateLoadBalancerUDPListenerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backendServerPort)) {
    query['BackendServerPort'] = request.backendServerPort;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.eipTransmit)) {
    query['EipTransmit'] = request.eipTransmit;
  }
  if (!Util.isUnset(request.establishedTimeout)) {
    query['EstablishedTimeout'] = request.establishedTimeout;
  }
  if (!Util.isUnset(request.healthCheckConnectPort)) {
    query['HealthCheckConnectPort'] = request.healthCheckConnectPort;
  }
  if (!Util.isUnset(request.healthCheckConnectTimeout)) {
    query['HealthCheckConnectTimeout'] = request.healthCheckConnectTimeout;
  }
  if (!Util.isUnset(request.healthCheckExp)) {
    query['HealthCheckExp'] = request.healthCheckExp;
  }
  if (!Util.isUnset(request.healthCheckInterval)) {
    query['HealthCheckInterval'] = request.healthCheckInterval;
  }
  if (!Util.isUnset(request.healthCheckReq)) {
    query['HealthCheckReq'] = request.healthCheckReq;
  }
  if (!Util.isUnset(request.healthyThreshold)) {
    query['HealthyThreshold'] = request.healthyThreshold;
  }
  if (!Util.isUnset(request.listenerPort)) {
    query['ListenerPort'] = request.listenerPort;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  if (!Util.isUnset(request.scheduler)) {
    query['Scheduler'] = request.scheduler;
  }
  if (!Util.isUnset(request.unhealthyThreshold)) {
    query['UnhealthyThreshold'] = request.unhealthyThreshold;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLoadBalancerUDPListener',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a User Datagram Protocol (UDP) listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request CreateLoadBalancerUDPListenerRequest
 * @return CreateLoadBalancerUDPListenerResponse
 */
async function createLoadBalancerUDPListener(request: CreateLoadBalancerUDPListenerRequest): CreateLoadBalancerUDPListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLoadBalancerUDPListenerWithOptions(request, runtime);
}

model CreateMountTargetRequest {
  ensRegionId?: string(name='EnsRegionId', description='The ID of the region.

This parameter is required.', example='cn-beijing-cmcc'),
  fileSystemId?: string(name='FileSystemId', description='The ID of the file system.

This parameter is required.', example='c50f8*****'),
  mountTargetName?: string(name='MountTargetName', description='The name of the mount target.

This parameter is required.', example='TestMountPath'),
  netWorkId?: string(name='NetWorkId', description='The ID of the network.

This parameter is required.', example='n-*****'),
}

model CreateMountTargetResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='70EACC9C-D07A-4A34-ADA4-A3DC0DE3C83E'),
  status?: string(name='Status', description='The state of the mount target. Valid values:

*   active
*   inactive
*   pending
*   deleting', example='pending'),
}

model CreateMountTargetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMountTargetResponseBody(name='body'),
}

/**
 * @summary Creates a mount target.
 *
 * @description ## [](#)Precautions
 * After you call this operation, a mount target is not immediately created. Therefore, we recommend that you call the DescribeMountTargets operation to query the status of the mount target. If the mount target is in the Active state, you can then mount the file system. Otherwise, the file system may fail to be mounted.
 *
 * @param request CreateMountTargetRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateMountTargetResponse
 */
async function createMountTargetWithOptions(request: CreateMountTargetRequest, runtime: Util.RuntimeOptions): CreateMountTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.mountTargetName)) {
    query['MountTargetName'] = request.mountTargetName;
  }
  if (!Util.isUnset(request.netWorkId)) {
    query['NetWorkId'] = request.netWorkId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateMountTarget',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a mount target.
 *
 * @description ## [](#)Precautions
 * After you call this operation, a mount target is not immediately created. Therefore, we recommend that you call the DescribeMountTargets operation to query the status of the mount target. If the mount target is in the Active state, you can then mount the file system. Otherwise, the file system may fail to be mounted.
 *
 * @param request CreateMountTargetRequest
 * @return CreateMountTargetResponse
 */
async function createMountTarget(request: CreateMountTargetRequest): CreateMountTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMountTargetWithOptions(request, runtime);
}

model CreateNatGatewayRequest {
  ensRegionId?: string(name='EnsRegionId', description='The ID of the Edge Node Service (ENS) node.

This parameter is required.', example='cn-suzhou-telecom'),
  instanceBillingCycle?: string(name='InstanceBillingCycle'),
  instanceType?: string(name='InstanceType', description='The instance type of the NAT gateway. Set the value to **enat.default**.', example='enat.default'),
  name?: string(name='Name', description='The name of the NAT gateway. The name must be 1 to 128 characters in length. The name cannot start with `http://` or `https://`.', example='name'),
  networkId?: string(name='NetworkId', description='The ID of the network.

This parameter is required.', example='n-5qj7ykuxmjn7k96l090sp****'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the instance. Valid values of N: **1** to **20**.

*   The key cannot start with `aliyun`, `acs:`, `http://`, or `https://`.
*   The key must be up to 64 characters in length.
*   The tag key cannot be an empty string.', example='team'),
      value?: string(name='Value', description='The value of tag N that is added to the resource. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length. It cannot start with acs: or contain http:// or https://.', example='Deep'),
    }
  ](name='Tag', description='The tags.'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-5savh5ngxh8sbj14bu7n****'),
}

model CreateNatGatewayResponseBody = {
  natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.', example='nat-5t7nh1cfm6kxiszlttr38****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateNatGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNatGatewayResponseBody(name='body'),
}

/**
 * @summary Creates a network address translation (NAT) gateway.
 *
 * @param request CreateNatGatewayRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateNatGatewayResponse
 */
async function createNatGatewayWithOptions(request: CreateNatGatewayRequest, runtime: Util.RuntimeOptions): CreateNatGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.instanceBillingCycle)) {
    query['InstanceBillingCycle'] = request.instanceBillingCycle;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.networkId)) {
    query['NetworkId'] = request.networkId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNatGateway',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a network address translation (NAT) gateway.
 *
 * @param request CreateNatGatewayRequest
 * @return CreateNatGatewayResponse
 */
async function createNatGateway(request: CreateNatGatewayRequest): CreateNatGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNatGatewayWithOptions(request, runtime);
}

model CreateNetworkRequest {
  cidrBlock?: string(name='CidrBlock', description='The CIDR block of the network. You can use one of the following CIDR blocks or their subnets as the CIDR block of the network:

*   10.0.0.0/8 (default)
*   172.16.0.0/12
*   192.168.0.0/16

This parameter is required.', example='192.168.0.0/24'),
  description?: string(name='Description', description='The description of the network.

The description must be 2 to 256 characters in length. It must start with a letter but cannot start with http:// or https://.', example='this is my first network'),
  ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.

This parameter is required.', example='cn-beijing-telecom'),
  networkName?: string(name='NetworkName', description='The name of the network. The name must meet the following requirements:

*   The name must be 2 to 128 characters in length.
*   The name must start with a letter but cannot start with http:// or https://.
*   The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).', example='abc'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag that are to add to the instance. Valid values of N: **1** to **20**.

*   The key cannot start with `aliyun`, `acs:`, `http://`, or `https://`.
*   The key must be up to 64 characters in length.
*   The tag key cannot be an empty string.', example='key1'),
      value?: string(name='Value', description='The value of tag N that is added to the resource. You can specify up to 20 tag values. The tag value can be an empty string. The tag value can be up to 128 characters in length. It cannot start with acs: or contain http:// or https://.', example='tagValue'),
    }
  ](name='Tag', description='The resource tags.'),
}

model CreateNetworkResponseBody = {
  networkId?: string(name='NetworkId', description='The ID of the network.', example='n-5***'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateNetworkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNetworkResponseBody(name='body'),
}

/**
 * @summary Creates a virtual private cloud (VPC).
 *
 * @description *   You can call this operation up to 100 times per second.
 * *   You can call this operation up to 5 times per second per user.
 *
 * @param request CreateNetworkRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateNetworkResponse
 */
async function createNetworkWithOptions(request: CreateNetworkRequest, runtime: Util.RuntimeOptions): CreateNetworkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cidrBlock)) {
    query['CidrBlock'] = request.cidrBlock;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.networkName)) {
    query['NetworkName'] = request.networkName;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNetwork',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a virtual private cloud (VPC).
 *
 * @description *   You can call this operation up to 100 times per second.
 * *   You can call this operation up to 5 times per second per user.
 *
 * @param request CreateNetworkRequest
 * @return CreateNetworkResponse
 */
async function createNetwork(request: CreateNetworkRequest): CreateNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNetworkWithOptions(request, runtime);
}

model CreateNetworkAclRequest {
  description?: string(name='Description', description='The description of the network ACL.

The description must be 1 to 256 characters in length and cannot start with http:// or https://.', example='This is my NetworkAcl.'),
  networkAclName?: string(name='NetworkAclName', description='Enter a name for the network ACL.

The name must be 1 to 128 characters in length and cannot start with http:// or https://.', example='acl-1'),
}

model CreateNetworkAclResponseBody = {
  networkAclId?: string(name='NetworkAclId', description='The ID of the network ACL.', example='nacl-5p1fg655nh68xyz9i****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model CreateNetworkAclResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNetworkAclResponseBody(name='body'),
}

/**
 * @summary Creates a network access control list (ACL).
 *
 * @param request CreateNetworkAclRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateNetworkAclResponse
 */
async function createNetworkAclWithOptions(request: CreateNetworkAclRequest, runtime: Util.RuntimeOptions): CreateNetworkAclResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.networkAclName)) {
    query['NetworkAclName'] = request.networkAclName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNetworkAcl',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a network access control list (ACL).
 *
 * @param request CreateNetworkAclRequest
 * @return CreateNetworkAclResponse
 */
async function createNetworkAcl(request: CreateNetworkAclRequest): CreateNetworkAclResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNetworkAclWithOptions(request, runtime);
}

model CreateNetworkAclEntryRequest {
  cidrBlock?: string(name='CidrBlock', description='The source CIDR block.

This parameter is required.', example='10.0.0.0/24'),
  description?: string(name='Description', description='The description of the network ACL.

The description must be 1 to 256 characters in length and cannot start with http:// or https://.', example='This is my NetworkAcl.'),
  direction?: string(name='Direction', description='Specifies whether the ACL rule controls inbound or outbound access requests. Valid values:

*   **ingress**
*   **egress**

This parameter is required.', example='ingress'),
  networkAclEntryName?: string(name='NetworkAclEntryName', description='The name of the rule.

The name must be 1 to 128 characters in length and cannot start with http:// or https://.', example='acl-1'),
  networkAclId?: string(name='NetworkAclId', description='The ID of the network ACL.

This parameter is required.', example='nacl-bp1lhl0taikrbgnh****'),
  policy?: string(name='Policy', description='The action that is performed on network traffic that matches the rule. Valid values:

*   **accept**: allows network traffic.
*   **drop**: blocks network traffic.

This parameter is required.', example='accept'),
  portRange?: string(name='PortRange', description='The port range.

*   If you set **Protocol** to **all** or **icmp**, set this parameter to -1/-1, which specifies all ports.
*   If you set **Protocol** to **tcp** or **udp**, the port can be **1 to 65535**. You can set this parameter to **1/200** or **80/80**, which specifies ports 1 to 200 or port 80.

This parameter is required.', example='-1/-1'),
  priority?: int32(name='Priority', description='The priority of the rule. Valid values: **1 to 100**. Default value: **1**.

This parameter is required.', example='1'),
  protocol?: string(name='Protocol', description='The protocol. Valid values:

*   **icmp**: ICMP
*   **tcp**: TCP
*   **udp**: UDP
*   **all**: all protocols

This parameter is required.', example='all'),
}

model CreateNetworkAclEntryResponseBody = {
  networkAclEntryId?: string(name='NetworkAclEntryId', description='The ID of the network ACL.', example='nae-5****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model CreateNetworkAclEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNetworkAclEntryResponseBody(name='body'),
}

/**
 * @summary Creates a network access control list (ACL) rule.
 *
 * @param request CreateNetworkAclEntryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateNetworkAclEntryResponse
 */
async function createNetworkAclEntryWithOptions(request: CreateNetworkAclEntryRequest, runtime: Util.RuntimeOptions): CreateNetworkAclEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cidrBlock)) {
    query['CidrBlock'] = request.cidrBlock;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.networkAclEntryName)) {
    query['NetworkAclEntryName'] = request.networkAclEntryName;
  }
  if (!Util.isUnset(request.networkAclId)) {
    query['NetworkAclId'] = request.networkAclId;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.portRange)) {
    query['PortRange'] = request.portRange;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.protocol)) {
    query['Protocol'] = request.protocol;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNetworkAclEntry',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a network access control list (ACL) rule.
 *
 * @param request CreateNetworkAclEntryRequest
 * @return CreateNetworkAclEntryResponse
 */
async function createNetworkAclEntry(request: CreateNetworkAclEntryRequest): CreateNetworkAclEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNetworkAclEntryWithOptions(request, runtime);
}

model CreateNetworkInterfaceRequest {
  description?: string(name='Description', example='example'),
  name?: string(name='Name', example='name'),
  securityGroupIds?: [ string ](name='SecurityGroupIds', description='This parameter is required.'),
  vSwitchId?: string(name='VSwitchId', example='vsw-5****'),
}

model CreateNetworkInterfaceShrinkRequest {
  description?: string(name='Description', example='example'),
  name?: string(name='Name', example='name'),
  securityGroupIdsShrink?: string(name='SecurityGroupIds', description='This parameter is required.'),
  vSwitchId?: string(name='VSwitchId', example='vsw-5****'),
}

model CreateNetworkInterfaceResponseBody = {
  networkInterfaceIds?: [ string ](name='NetworkInterfaceIds'),
  requestId?: string(name='RequestId', example='F3B261DD-3858-4D3C-877D-303ADF374600'),
}

model CreateNetworkInterfaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNetworkInterfaceResponseBody(name='body'),
}

/**
 * @summary 创建弹性网卡
 *
 * @param tmpReq CreateNetworkInterfaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateNetworkInterfaceResponse
 */
async function createNetworkInterfaceWithOptions(tmpReq: CreateNetworkInterfaceRequest, runtime: Util.RuntimeOptions): CreateNetworkInterfaceResponse {
  Util.validateModel(tmpReq);
  var request = new CreateNetworkInterfaceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.securityGroupIds)) {
    request.securityGroupIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.securityGroupIds, 'SecurityGroupIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.securityGroupIdsShrink)) {
    query['SecurityGroupIds'] = request.securityGroupIdsShrink;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNetworkInterface',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建弹性网卡
 *
 * @param request CreateNetworkInterfaceRequest
 * @return CreateNetworkInterfaceResponse
 */
async function createNetworkInterface(request: CreateNetworkInterfaceRequest): CreateNetworkInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNetworkInterfaceWithOptions(request, runtime);
}

model CreateSDGRequest {
  description?: string(name='Description', description='The description of the SDG.

>  We recommend that you specify this parameter in details for subsequent queries.', example='Testing SDGs'),
  fromSDGId?: string(name='FromSDGId', description='The ID of the SDG from which you want to create an SDG.

> 

*   The first time you create an SDG, the **FromSDGId** parameter is empty.

*   If the value of the **FromSDGId** parameter is invalid or does not correspond to an original disk, an error is reported.

*   If the value of the **FromSDGId** parameter is not empty, you have created an SDG, and the operation is performed on the existing SDG.', example='sdg-xxxxx'),
  instanceId?: string(name='InstanceId', description='The ID of the AIC instance. You can call the [DescribeARMServerInstances](~~DescribeARMServerInstances~~) operation to query the ID.

This parameter is required.', example='aic-xxxx'),
  size?: string(name='Size', description='The maximum capacity of the SDG. Unit: GB.

> 

*   To save costs, we recommend that you specify this parameter based on your business requirements.

*   The first time that you create an SDG, the **Size** parameter is required.

*   When the amount of data increases, you can pass a new **Size** parameter for resizing. If the value of the new **Size** parameter is greater than the value of the old **Size** parameter, the disk size of the SDG is increased to the size that is specified by the new **Size** parameter. If the value of the new **Size** parameter is empty or smaller than that of the old **Size** parameter, no operation is performed.', example='20'),
}

model CreateSDGResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  SDGId?: string(name='SDGId', description='The ID of the generated SDG.', example='sdg-xxxx'),
}

model CreateSDGResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSDGResponseBody(name='body'),
}

/**
 * @summary Creates a shared data group (SDG) on an Android in Container (AIC) instance.
 *
 * @description A SDG can be regarded as a data partition image of a virtual device. You can save a data partition of a virtual device as an SDG. A created SDG can be deployed in data partitions of other virtual devices to achieve rapid data distribution and application. The procedure for calling SDG-related API operations:
 * *   Call the [CreateSDG](~~CreateSDG~~) operation to create an SDG, which is bound to AIC Instance A (InstanceId). After you create the SDG, a blank cloud disk (also known as an original cloud disk) is attached to Device A (InstanceId).
 * *   Install applications on and deliver files to AIC Instance A (InstanceId).
 * *   Call the [SaveSDG](~~SaveSDG~~) operation to save the data disk of AIC instance A as SDG A.
 * *   Call the [DeploySDG](~~DeploySDG~~) operation to deploy SDG A to AIC Instance B. This operattion is executed asynchronously. You can call the [DescribeARMServerInstances](~~DescribeARMServerInstances~~) operation to query the status of AIC Instance B. If the status of AIC Instance B changes to success, AIC insance B is available, and AIC Instances A and B have the same applications running.
 *
 * @param request CreateSDGRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSDGResponse
 */
async function createSDGWithOptions(request: CreateSDGRequest, runtime: Util.RuntimeOptions): CreateSDGResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSDG',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a shared data group (SDG) on an Android in Container (AIC) instance.
 *
 * @description A SDG can be regarded as a data partition image of a virtual device. You can save a data partition of a virtual device as an SDG. A created SDG can be deployed in data partitions of other virtual devices to achieve rapid data distribution and application. The procedure for calling SDG-related API operations:
 * *   Call the [CreateSDG](~~CreateSDG~~) operation to create an SDG, which is bound to AIC Instance A (InstanceId). After you create the SDG, a blank cloud disk (also known as an original cloud disk) is attached to Device A (InstanceId).
 * *   Install applications on and deliver files to AIC Instance A (InstanceId).
 * *   Call the [SaveSDG](~~SaveSDG~~) operation to save the data disk of AIC instance A as SDG A.
 * *   Call the [DeploySDG](~~DeploySDG~~) operation to deploy SDG A to AIC Instance B. This operattion is executed asynchronously. You can call the [DescribeARMServerInstances](~~DescribeARMServerInstances~~) operation to query the status of AIC Instance B. If the status of AIC Instance B changes to success, AIC insance B is available, and AIC Instances A and B have the same applications running.
 *
 * @param request CreateSDGRequest
 * @return CreateSDGResponse
 */
async function createSDG(request: CreateSDGRequest): CreateSDGResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSDGWithOptions(request, runtime);
}

model CreateSecurityGroupRequest {
  description?: string(name='Description', description='The description. The description must be 2 to 256 characters in length. It must start with a letter but cannot start with http:// or https://.', example='testDescription'),
  permissions?: [ 
    {
      description?: string(name='Description', description='The description of the SDG.

>  We recommend that you specify this parameter in details for subsequent queries.', example='testDescription'),
      destCidrIp?: string(name='DestCidrIp', description='The destination IPv4 CIDR block. IPv4 CIDR blocks and IPv4 addresses are supported.

This parameter is used to support quintuple rules. For more information, see [Security group quintuple rules](https://help.aliyun.com/document_detail/97439.html).', example='0.0.0.0/0'),
      direction?: string(name='Direction', description='The direction in which the security group rule is applied.

This parameter is required.', example='ingress'),
      ipProtocol?: string(name='IpProtocol', description='The protocol. The values of this parameter are case-insensitive. Valid values:

*   TCP.
*   UDP.
*   ICMP.
*   ICMPv6.
*   GRE.
*   ALL: All protocols are supported.

This parameter is required.', example='TCP'),
      policy?: string(name='Policy', description='The action of the security group rule. Valid values:

*   accept: allows inbound access.
*   drop: denies inbound access and returns no responses. In this case, the request times out or the connection cannot be established.

Default value: accept.

This parameter is required.', example='Accept'),
      portRange?: string(name='PortRange', description='The range of destination port numbers for the protocols specified in the security group rule. Valid values:

*   If you set IpProtocol to TCP or UDP, the port number range is 1 to 65535. Specify a port range in the format of \\\\<Start port number>/\\\\<End port number>. Example: 1/200.
*   If you set IpProtocol to ICMP, the port number range is -1/-1.
*   If you set IpProtocol to GRE, the port number range is -1/-1.
*   If you set IpProtocol to ALL, the port number range is -1/-1, which indicates all port numbers.

This parameter is required.', example='80/80'),
      priority?: int32(name='Priority', description='The priority of the security group rule. A smaller value specifies a higher priority. Valid values: 1 to 100.

Default value: 1.

This parameter is required.', example='1'),
      sourceCidrIp?: string(name='SourceCidrIp', description='The source IPv4 CIDR block. IPv4 CIDR blocks and IPv4 addresses are supported.

This parameter is used to support quintuple rules. For more information, see [Security group quintuple rules](https://help.aliyun.com/document_detail/97439.html).', example='0.0.0.0/0'),
      sourcePortRange?: string(name='SourcePortRange', description='The range of source port numbers for the protocols specified in the security group rule. Valid values:

*   If you set IpProtocol to TCP or UDP, the port number range is 1 to 65535. Specify a port number range in the format of \\\\<Start port number>/\\\\<End port number>. Example: 1/200.
*   If you set IpProtocol to ICMP, the port number range is -1/-1.
*   If you set IpProtocol to GRE, the port number range is -1/-1.
*   If you set IpProtocol to ALL, the port number range is -1/-1, which indicates all port numbers.

This parameter is used to support quintuple rules. For more information, see [Security group quintuple rules](https://help.aliyun.com/document_detail/97439.html).', example='22/22'),
    }
  ](name='Permissions', description='Schema of Response'),
  securityGroupName?: string(name='SecurityGroupName', description='The name of the security group. The name must be 2 to 128 characters in length and can contain letters, digits, colons (:), underscores (_), and hyphens (-). It must start with a letter but cannot start with http:// or https://. It can contain letters, digits, colons (:), underscores (_), and hyphens (-). By default, this parameter is empty.', example='Dcdn1:2_3-4'),
}

model CreateSecurityGroupShrinkRequest {
  description?: string(name='Description', description='The description. The description must be 2 to 256 characters in length. It must start with a letter but cannot start with http:// or https://.', example='testDescription'),
  permissionsShrink?: string(name='Permissions', description='Schema of Response'),
  securityGroupName?: string(name='SecurityGroupName', description='The name of the security group. The name must be 2 to 128 characters in length and can contain letters, digits, colons (:), underscores (_), and hyphens (-). It must start with a letter but cannot start with http:// or https://. It can contain letters, digits, colons (:), underscores (_), and hyphens (-). By default, this parameter is empty.', example='Dcdn1:2_3-4'),
}

model CreateSecurityGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='760bad53276431c499e30dc36f6b26be'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-bp1fg655nh68xyz9i***'),
}

model CreateSecurityGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSecurityGroupResponseBody(name='body'),
}

/**
 * @summary Creates a security group.
 *
 * @param tmpReq CreateSecurityGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSecurityGroupResponse
 */
async function createSecurityGroupWithOptions(tmpReq: CreateSecurityGroupRequest, runtime: Util.RuntimeOptions): CreateSecurityGroupResponse {
  Util.validateModel(tmpReq);
  var request = new CreateSecurityGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.permissions)) {
    request.permissionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.permissions, 'Permissions', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.permissionsShrink)) {
    query['Permissions'] = request.permissionsShrink;
  }
  if (!Util.isUnset(request.securityGroupName)) {
    query['SecurityGroupName'] = request.securityGroupName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSecurityGroup',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a security group.
 *
 * @param request CreateSecurityGroupRequest
 * @return CreateSecurityGroupResponse
 */
async function createSecurityGroup(request: CreateSecurityGroupRequest): CreateSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSecurityGroupWithOptions(request, runtime);
}

model CreateSnapshotRequest {
  description?: string(name='Description', description='The description of the snapshot. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.

By default, this parameter is left empty.', example='testDescription'),
  diskId?: string(name='DiskId', description='The ID of the cloud disk.

This parameter is required.', example='d-bp1s5fnvk4gn2tws0****'),
  ensRegionId?: string(name='EnsRegionId', description='The ID of the ENS node. You can query the node ID by calling the [DescribeEnsRegions](~~DescribeEnsRegions~~) operation.

This parameter is required.', example='cn-shenzhen-3'),
  snapshotName?: string(name='SnapshotName', description='The name of the snapshot. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), and hyphens (-).', example='testSnapshotName'),
}

model CreateSnapshotResponseBody = {
  orderId?: string(name='OrderId', description='The ID of the order.', example='21969183547****'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  snapShotId?: [ string ](name='SnapShotId', description='The IDs of the snapshots.', example='s-bp17441ohwka0yuh****'),
}

model CreateSnapshotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSnapshotResponseBody(name='body'),
}

/**
 * @summary Creates a snapshot.
 *
 * @param request CreateSnapshotRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSnapshotResponse
 */
async function createSnapshotWithOptions(request: CreateSnapshotRequest, runtime: Util.RuntimeOptions): CreateSnapshotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.snapshotName)) {
    query['SnapshotName'] = request.snapshotName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSnapshot',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a snapshot.
 *
 * @param request CreateSnapshotRequest
 * @return CreateSnapshotResponse
 */
async function createSnapshot(request: CreateSnapshotRequest): CreateSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSnapshotWithOptions(request, runtime);
}

model CreateSnatEntryRequest {
  eipAffinity?: boolean(name='EipAffinity', description='Specifies whether to enable EIP affinity. Valid values:

*   **0**: no
*   **1**: yes

**

**Description** After you enable EIP affinity, if multiple EIPs are associated with an SNAT entry, each client uses one EIP to access the Internet. If EIP affinity is disabled, each client uses a random EIP to access the Internet.', example='false'),
  idleTimeout?: int32(name='IdleTimeout', description='The timeout period for idle connections. Valid values: **1** to **86400**. Unit: seconds.', example='15'),
  ispAffinity?: boolean(name='IspAffinity', description='Whether to enable operator affinity. Value taking:

- false:Do not open.
- true:Open.', example='true'),
  natGatewayId?: string(name='NatGatewayId', description='The ID of the Network Address Translation (NAT) gateway.

This parameter is required.', example='nat-5tawjw5j7sgd2deujxuk0****'),
  snatEntryName?: string(name='SnatEntryName', description='The name of the SNAT entry. The name must be 1 to 128 characters in length. The name cannot start with `http://` or `https://`.', example='test0'),
  snatIp?: string(name='SnatIp', description='The elastic IP address (EIP) in the SNAT entry. Separate multiple EIPs with commas (,).

This parameter is required.', example='120.XXX.XXX.71'),
  sourceCIDR?: string(name='SourceCIDR', description='The CIDR block. You can specify the CIDR block of a network, a vSwitch, or an instance. You can also specify a custom CIDR block. All instances within the CIDR block can access the Internet or external networks by using SNAT.

>  If you specify **SourceVSwitchId** and **SourceCIDR**, **SourceVSwitchId** does not take effect. The value that you specified for **SourceCIDR** takes precedence.', example='10.0.0.0/24'),
  sourceNetworkId?: string(name='SourceNetworkId', description='The ID of the network. This parameter specifies that all ENS instances in the network can use the SNAT entry to access the Internet.

>  If you specify **SourceNetworkId** and **SourceVSwitchId** or **SourceCIDR**, **SourceNetworkId** does not take effect. The value that you specified for **SourceCIDR** takes precedence. Priority: **SourceCIDR** > **SourceVSwitchId** > **SourceNetworkId**.', example='n-2zeuphj08tt7q3brd****'),
  sourceVSwitchId?: string(name='SourceVSwitchId', description='The ID of the vSwitch that you need to access over the Internet. This parameter specifies that Edge Node Service (ENS) instances in the vSwitch can use the SNAT entry to access the Internet.

>  If you specify **SourceVSwitchId** and **SourceCIDR**, **SourceVSwitchId** does not take effect. The value that you specified for **SourceCIDR** takes precedence.', example='vsw-bp1hwx7gi495q260p****'),
  standbySnatIp?: string(name='StandbySnatIp', description='The secondary EIP in the SNAT entry. Separate multiple secondary EIPs with commas (,).', example='101.XXX.XXX.7'),
}

model CreateSnatEntryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='018EED6A-69CA-58C8-A345-498927D5D34E'),
  snatEntryId?: string(name='SnatEntryId', description='The ID of the SNAT entry.', example='snat-5tc08qfj5ecblfdn2rqr9****'),
}

model CreateSnatEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSnatEntryResponseBody(name='body'),
}

/**
 * @summary Adds a source network address translation (SNAT) entry to a specified SNAT table.
 *
 * @param request CreateSnatEntryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSnatEntryResponse
 */
async function createSnatEntryWithOptions(request: CreateSnatEntryRequest, runtime: Util.RuntimeOptions): CreateSnatEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eipAffinity)) {
    query['EipAffinity'] = request.eipAffinity;
  }
  if (!Util.isUnset(request.idleTimeout)) {
    query['IdleTimeout'] = request.idleTimeout;
  }
  if (!Util.isUnset(request.ispAffinity)) {
    query['IspAffinity'] = request.ispAffinity;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.snatEntryName)) {
    query['SnatEntryName'] = request.snatEntryName;
  }
  if (!Util.isUnset(request.snatIp)) {
    query['SnatIp'] = request.snatIp;
  }
  if (!Util.isUnset(request.sourceCIDR)) {
    query['SourceCIDR'] = request.sourceCIDR;
  }
  if (!Util.isUnset(request.sourceNetworkId)) {
    query['SourceNetworkId'] = request.sourceNetworkId;
  }
  if (!Util.isUnset(request.sourceVSwitchId)) {
    query['SourceVSwitchId'] = request.sourceVSwitchId;
  }
  if (!Util.isUnset(request.standbySnatIp)) {
    query['StandbySnatIp'] = request.standbySnatIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSnatEntry',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds a source network address translation (SNAT) entry to a specified SNAT table.
 *
 * @param request CreateSnatEntryRequest
 * @return CreateSnatEntryResponse
 */
async function createSnatEntry(request: CreateSnatEntryRequest): CreateSnatEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSnatEntryWithOptions(request, runtime);
}

model CreateStorageGatewayRequest {
  orderDetails?: [ 
    {
      description?: string(name='Description', description='The description of the gateway. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='testDescription'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the node.

This parameter is required.', example='cn-shenzhen-3'),
      gatewayName?: string(name='GatewayName', description='The name of the gateway. The name must be 2 to 128 characters in length. The name must start with a letter and cannot start with `http://` or `https://`. The name can contain letters, digits, colons (.), underscores (_), and hyphens (-).', example='testGatewayName'),
      gatewayType?: string(name='GatewayType', description='The type of the gateway. Set this parameter to **1**. **1** indicates iSCSI.

This parameter is required.', example='1'),
      vpcId?: string(name='VpcId', description='The ID of the VPC.

This parameter is required.', example='n-123'),
    }
  ](name='OrderDetails', description='The array of orders.

This parameter is required.'),
}

model CreateStorageGatewayShrinkRequest {
  orderDetailsShrink?: string(name='OrderDetails', description='The array of orders.

This parameter is required.'),
}

model CreateStorageGatewayResponseBody = {
  allocationId?: [ 
    {
      ensRegionId?: string(name='EnsRegionId', description='The ID of the node.', example='cn-chengdu-telecom-4'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='e426409223'),
    }
  ](name='AllocationId', description='The list of created nodes.'),
  bizStatusCode?: string(name='BizStatusCode', description='The success status code.

*   **PartSuccess**: partially succeeded.
*   **AllSuccess**: all succeeded.', example='AllSuccess'),
  requestId?: string(name='RequestId', description='The request ID.', example='EA3758E0-8899-17D3-9526-5F62CF33A586'),
  unAllocationId?: [ 
    {
      ensRegionId?: string(name='EnsRegionId', description='The ID of the node.', example='cn-chengdu-26'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='e426409258'),
    }
  ](name='UnAllocationId', description='The list of nodes that are not created.'),
}

model CreateStorageGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateStorageGatewayResponseBody(name='body'),
}

/**
 * @summary Creates a storage gateway.
 *
 * @param tmpReq CreateStorageGatewayRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateStorageGatewayResponse
 */
async function createStorageGatewayWithOptions(tmpReq: CreateStorageGatewayRequest, runtime: Util.RuntimeOptions): CreateStorageGatewayResponse {
  Util.validateModel(tmpReq);
  var request = new CreateStorageGatewayShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.orderDetails)) {
    request.orderDetailsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.orderDetails, 'OrderDetails', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.orderDetailsShrink)) {
    query['OrderDetails'] = request.orderDetailsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateStorageGateway',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a storage gateway.
 *
 * @param request CreateStorageGatewayRequest
 * @return CreateStorageGatewayResponse
 */
async function createStorageGateway(request: CreateStorageGatewayRequest): CreateStorageGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return createStorageGatewayWithOptions(request, runtime);
}

model CreateStorageVolumeRequest {
  authPassword?: string(name='AuthPassword', description='The password of the CHAP protocol.', example='Password'),
  authProtocol?: string(name='AuthProtocol', description='The authentication protocol. Set the value to **CHAP**.', example='CHAP'),
  authUser?: string(name='AuthUser', description='The username of the CHAP protocol.', example='User'),
  description?: string(name='Description', description='The description of the volume. The description must be 2 to 128 characters in length. The description cannot start with `http://` or `https://`.', example='testDescription'),
  ensRegionId?: string(name='EnsRegionId', description='The ID of the node.

This parameter is required.', example='cn-shenzhen-3'),
  gatewayId?: string(name='GatewayId', description='The ID of the gateway.

This parameter is required.', example='sgw-****'),
  isAuth?: string(name='IsAuth', description='Specifies whether to enable authentication. Valid values:

*   **1**: enable authentication.
*   **0** (default): disable authentication.', example='0'),
  isEnable?: string(name='IsEnable', description='Specifies whether to enable the volume. Valid values:

*   **1** (default): enable the volume.
*   **0**: disable the volume.', example='1'),
  storageId?: string(name='StorageId', description='The ID of the storage medium.

This parameter is required.', example='si-****'),
  volumeName?: string(name='VolumeName', description='The name of the volume. The name must be 2 to 128 characters in length. The name cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).', example='testVolumeName'),
}

model CreateStorageVolumeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='7030AB96-57CF-1C68-9FEE-D60E547FD79C'),
  volumeId?: [ string ](name='VolumeId', description='An array of volume IDs.'),
}

model CreateStorageVolumeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateStorageVolumeResponseBody(name='body'),
}

/**
 * @summary Creates a storage volume.
 *
 * @param request CreateStorageVolumeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateStorageVolumeResponse
 */
async function createStorageVolumeWithOptions(request: CreateStorageVolumeRequest, runtime: Util.RuntimeOptions): CreateStorageVolumeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authPassword)) {
    query['AuthPassword'] = request.authPassword;
  }
  if (!Util.isUnset(request.authProtocol)) {
    query['AuthProtocol'] = request.authProtocol;
  }
  if (!Util.isUnset(request.authUser)) {
    query['AuthUser'] = request.authUser;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.isAuth)) {
    query['IsAuth'] = request.isAuth;
  }
  if (!Util.isUnset(request.isEnable)) {
    query['IsEnable'] = request.isEnable;
  }
  if (!Util.isUnset(request.storageId)) {
    query['StorageId'] = request.storageId;
  }
  if (!Util.isUnset(request.volumeName)) {
    query['VolumeName'] = request.volumeName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateStorageVolume',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a storage volume.
 *
 * @param request CreateStorageVolumeRequest
 * @return CreateStorageVolumeResponse
 */
async function createStorageVolume(request: CreateStorageVolumeRequest): CreateStorageVolumeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createStorageVolumeWithOptions(request, runtime);
}

model CreateVSwitchRequest {
  cidrBlock?: string(name='CidrBlock', description='The CIDR block of the vSwitch. Take note of the following limits:

*   The subnet mask must be 16 to 29 bits in length.
*   The CIDR block of the vSwitch must fall within the CIDR block of the VPC to which the vSwitch belongs.
*   The CIDR block of the vSwitch cannot be the same as the destination CIDR block in a route entry of the VPC. However, it can be a subset of the destination CIDR block.

This parameter is required.', example='172.16.0.0/24'),
  description?: string(name='Description', description='The description of the vSwitch.

The description must be 2 to 256 characters in length. It must start with a letter but cannot start with http:// or https://.', example='This is my vswitch.'),
  ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.

This parameter is required.', example='cn-xian-unicom'),
  networkId?: string(name='NetworkId', description='The ID of the network to which the vSwitch that you want to create belongs.', example='n-257gqcdfvx6n****'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag that are to add to the instance. Valid values of N: **1** to **20**.

*   The key cannot start with `aliyun`, `acs:`, `http://`, or `https://`.
*   The key must be up to 64 characters in length.
*   The tag key cannot be an empty string.', example='team'),
      value?: string(name='Value', description='The value of tag N that is added to the resource. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length. It cannot start with acs: or contain http:// or https://.', example='Deep'),
    }
  ](name='Tag', description='The tags.'),
  vSwitchName?: string(name='VSwitchName', description='The name of the vSwitch. The name must meet the following requirements:

*   The name must be 2 to 128 characters in length.
*   The name must start with a letter and cannot start with http:// or https://. It can contain letters, digits, colons (:), underscores (_), and hyphens (-).

Default value: null.', example='test'),
}

model CreateVSwitchResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-5****'),
}

model CreateVSwitchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVSwitchResponseBody(name='body'),
}

/**
 * @summary A vSwitch is created.
 *
 * @param request CreateVSwitchRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateVSwitchResponse
 */
async function createVSwitchWithOptions(request: CreateVSwitchRequest, runtime: Util.RuntimeOptions): CreateVSwitchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cidrBlock)) {
    query['CidrBlock'] = request.cidrBlock;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.networkId)) {
    query['NetworkId'] = request.networkId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vSwitchName)) {
    query['VSwitchName'] = request.vSwitchName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVSwitch',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary A vSwitch is created.
 *
 * @param request CreateVSwitchRequest
 * @return CreateVSwitchResponse
 */
async function createVSwitch(request: CreateVSwitchRequest): CreateVSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVSwitchWithOptions(request, runtime);
}

model DeleteApplicationRequest {
  appId?: string(name='AppId', description='The ID of the application. To obtain the application ID, call the ListApplication operation.

This parameter is required.', example='d0639abf-789a-4527-b420-031d2cd9ad9b'),
  timeout?: int32(name='Timeout', description='The timeout period for the asynchronous release. Unit: seconds. Default value: 300.', example='1800'),
}

model DeleteApplicationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='AAE90880-4970-4D81-A534-A6C0F3631F74'),
}

model DeleteApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteApplicationResponseBody(name='body'),
}

/**
 * @summary Releases all containers and resource instances related to a specific application in an asynchronous manner.
 *
 * @param request DeleteApplicationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteApplicationResponse
 */
async function deleteApplicationWithOptions(request: DeleteApplicationRequest, runtime: Util.RuntimeOptions): DeleteApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteApplication',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Releases all containers and resource instances related to a specific application in an asynchronous manner.
 *
 * @param request DeleteApplicationRequest
 * @return DeleteApplicationResponse
 */
async function deleteApplication(request: DeleteApplicationRequest): DeleteApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApplicationWithOptions(request, runtime);
}

model DeleteBucketRequest {
  bucketName?: string(name='BucketName', description='The name of the bucket that you want to delete. You can delete only one bucket at a time.

This parameter is required.', example='test'),
}

model DeleteBucketResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='2180AB96-57CF-1C68-9FEE-D60E547FD79C'),
}

model DeleteBucketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteBucketResponseBody(name='body'),
}

/**
 * @summary Deletes a bucket.
 *
 * @description *   Only the Alibaba Cloud Account ID owner of a bucket can delete the bucket from the account.
 * *   You cannot delete buckets that store objects. You can only delete empty buckets.
 *
 * @param request DeleteBucketRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteBucketResponse
 */
async function deleteBucketWithOptions(request: DeleteBucketRequest, runtime: Util.RuntimeOptions): DeleteBucketResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBucket',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a bucket.
 *
 * @description *   Only the Alibaba Cloud Account ID owner of a bucket can delete the bucket from the account.
 * *   You cannot delete buckets that store objects. You can only delete empty buckets.
 *
 * @param request DeleteBucketRequest
 * @return DeleteBucketResponse
 */
async function deleteBucket(request: DeleteBucketRequest): DeleteBucketResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBucketWithOptions(request, runtime);
}

model DeleteBucketLifecycleRequest {
  bucketName?: string(name='BucketName', description='The name of the bucket.

This parameter is required.', example='test'),
  ruleId?: string(name='RuleId', description='The ID of the rule. If this parameter is not specified, all rules are removed.', example='1'),
}

model DeleteBucketLifecycleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C6583E8B-B930-4F59-ADC0-0E209A45E860'),
}

model DeleteBucketLifecycleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteBucketLifecycleResponseBody(name='body'),
}

/**
 * @summary Deletes the lifecycle rules for objects in a bucket.
 *
 * @param request DeleteBucketLifecycleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteBucketLifecycleResponse
 */
async function deleteBucketLifecycleWithOptions(request: DeleteBucketLifecycleRequest, runtime: Util.RuntimeOptions): DeleteBucketLifecycleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBucketLifecycle',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes the lifecycle rules for objects in a bucket.
 *
 * @param request DeleteBucketLifecycleRequest
 * @return DeleteBucketLifecycleResponse
 */
async function deleteBucketLifecycle(request: DeleteBucketLifecycleRequest): DeleteBucketLifecycleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBucketLifecycleWithOptions(request, runtime);
}

model DeleteDiskRequest {
  diskId?: string(name='DiskId', description='The ID of the disk.

This parameter is required.', example='d-5va95bg6i5f44kgkeuazyfcxm'),
}

model DeleteDiskResponseBody = {
  code?: int32(name='Code', description='The returned service code. 0 indicates that the request was successful.', example='0'),
  requestId?: string(name='RequestId', description='The request ID.', example='3ABEEB76-1976-55AB-B884-3D65CA6A4743'),
}

model DeleteDiskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDiskResponseBody(name='body'),
}

/**
 * @summary Deletes a disk.
 *
 * @description When you release a disk, the disk must be in the Available state.
 *
 * @param request DeleteDiskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDiskResponse
 */
async function deleteDiskWithOptions(request: DeleteDiskRequest, runtime: Util.RuntimeOptions): DeleteDiskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDisk',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a disk.
 *
 * @description When you release a disk, the disk must be in the Available state.
 *
 * @param request DeleteDiskRequest
 * @return DeleteDiskResponse
 */
async function deleteDisk(request: DeleteDiskRequest): DeleteDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDiskWithOptions(request, runtime);
}

model DeleteEipRequest {
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='i-5sg1owx0g4ojy66ab2tez77r2'),
}

model DeleteEipResponseBody = {
  requestId?: string(name='RequestId', example='9341CDC2-D6AC-5992-86C8-D5774CFCC708'),
}

model DeleteEipResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEipResponseBody(name='body'),
}

/**
 * @summary 调用DeleteEip删除后付费的弹性公网EIP实例。
 *
 * @param request DeleteEipRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteEipResponse
 */
async function deleteEipWithOptions(request: DeleteEipRequest, runtime: Util.RuntimeOptions): DeleteEipResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEip',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 调用DeleteEip删除后付费的弹性公网EIP实例。
 *
 * @param request DeleteEipRequest
 * @return DeleteEipResponse
 */
async function deleteEip(request: DeleteEipRequest): DeleteEipResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEipWithOptions(request, runtime);
}

model DeleteEnsRouteEntryRequest {
  routeEntryId?: string(name='RouteEntryId', description='The ID of the route that you want to delete.

This parameter is required.', example='rte-8vbmb2890wiret5maqq25'),
}

model DeleteEnsRouteEntryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteEnsRouteEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEnsRouteEntryResponseBody(name='body'),
}

/**
 * @summary Deletes a custom route entry.
 *
 * @param request DeleteEnsRouteEntryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteEnsRouteEntryResponse
 */
async function deleteEnsRouteEntryWithOptions(request: DeleteEnsRouteEntryRequest, runtime: Util.RuntimeOptions): DeleteEnsRouteEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.routeEntryId)) {
    query['RouteEntryId'] = request.routeEntryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEnsRouteEntry',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a custom route entry.
 *
 * @param request DeleteEnsRouteEntryRequest
 * @return DeleteEnsRouteEntryResponse
 */
async function deleteEnsRouteEntry(request: DeleteEnsRouteEntryRequest): DeleteEnsRouteEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEnsRouteEntryWithOptions(request, runtime);
}

model DeleteEnsSaleConditionControlRequest {
  aliUidAccount?: string(name='AliUidAccount'),
  commodityCode?: string(name='CommodityCode', description='This parameter is required.'),
  customAccount?: string(name='CustomAccount'),
  saleControls?: [ 
    {
      conditionControls?: [ 
        {
          conditionControlModuleCode?: string(name='ConditionControlModuleCode', description='This parameter is required.'),
          conditionControlModuleValue?: string(name='ConditionControlModuleValue', description='This parameter is required.'),
        }
      ](name='ConditionControls', description='This parameter is required.'),
      moduleCode?: string(name='ModuleCode', description='This parameter is required.'),
      orderType?: string(name='OrderType', description='This parameter is required.'),
    }
  ](name='SaleControls', description='This parameter is required.'),
}

model DeleteEnsSaleConditionControlShrinkRequest {
  aliUidAccount?: string(name='AliUidAccount'),
  commodityCode?: string(name='CommodityCode', description='This parameter is required.'),
  customAccount?: string(name='CustomAccount'),
  saleControlsShrink?: string(name='SaleControls', description='This parameter is required.'),
}

model DeleteEnsSaleConditionControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteEnsSaleConditionControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEnsSaleConditionControlResponseBody(name='body'),
}

/**
 * @summary 删除售卖约束的条件约束
 *
 * @param tmpReq DeleteEnsSaleConditionControlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteEnsSaleConditionControlResponse
 */
async function deleteEnsSaleConditionControlWithOptions(tmpReq: DeleteEnsSaleConditionControlRequest, runtime: Util.RuntimeOptions): DeleteEnsSaleConditionControlResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteEnsSaleConditionControlShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.saleControls)) {
    request.saleControlsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.saleControls, 'SaleControls', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.aliUidAccount)) {
    query['AliUidAccount'] = request.aliUidAccount;
  }
  if (!Util.isUnset(request.commodityCode)) {
    query['CommodityCode'] = request.commodityCode;
  }
  if (!Util.isUnset(request.customAccount)) {
    query['CustomAccount'] = request.customAccount;
  }
  if (!Util.isUnset(request.saleControlsShrink)) {
    query['SaleControls'] = request.saleControlsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEnsSaleConditionControl',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除售卖约束的条件约束
 *
 * @param request DeleteEnsSaleConditionControlRequest
 * @return DeleteEnsSaleConditionControlResponse
 */
async function deleteEnsSaleConditionControl(request: DeleteEnsSaleConditionControlRequest): DeleteEnsSaleConditionControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEnsSaleConditionControlWithOptions(request, runtime);
}

model DeleteEnsSaleControlRequest {
  aliUidAccount?: string(name='AliUidAccount'),
  commodityCode?: string(name='CommodityCode', description='This parameter is required.'),
  customAccount?: string(name='CustomAccount'),
  saleControls?: [ 
    {
      moduleCode?: string(name='ModuleCode', description='This parameter is required.'),
      orderType?: string(name='OrderType', description='This parameter is required.'),
    }
  ](name='SaleControls', description='This parameter is required.'),
}

model DeleteEnsSaleControlShrinkRequest {
  aliUidAccount?: string(name='AliUidAccount'),
  commodityCode?: string(name='CommodityCode', description='This parameter is required.'),
  customAccount?: string(name='CustomAccount'),
  saleControlsShrink?: string(name='SaleControls', description='This parameter is required.'),
}

model DeleteEnsSaleControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteEnsSaleControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEnsSaleControlResponseBody(name='body'),
}

/**
 * @summary 删除售卖约束基础约束
 *
 * @param tmpReq DeleteEnsSaleControlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteEnsSaleControlResponse
 */
async function deleteEnsSaleControlWithOptions(tmpReq: DeleteEnsSaleControlRequest, runtime: Util.RuntimeOptions): DeleteEnsSaleControlResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteEnsSaleControlShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.saleControls)) {
    request.saleControlsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.saleControls, 'SaleControls', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.aliUidAccount)) {
    query['AliUidAccount'] = request.aliUidAccount;
  }
  if (!Util.isUnset(request.commodityCode)) {
    query['CommodityCode'] = request.commodityCode;
  }
  if (!Util.isUnset(request.customAccount)) {
    query['CustomAccount'] = request.customAccount;
  }
  if (!Util.isUnset(request.saleControlsShrink)) {
    query['SaleControls'] = request.saleControlsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEnsSaleControl',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除售卖约束基础约束
 *
 * @param request DeleteEnsSaleControlRequest
 * @return DeleteEnsSaleControlResponse
 */
async function deleteEnsSaleControl(request: DeleteEnsSaleControlRequest): DeleteEnsSaleControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEnsSaleControlWithOptions(request, runtime);
}

model DeleteEpnInstanceRequest {
  EPNInstanceId?: string(name='EPNInstanceId', description='The ID of the EPN instance.

This parameter is required.', example='epn-****'),
}

model DeleteEpnInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteEpnInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEpnInstanceResponseBody(name='body'),
}

/**
 * @summary Deletes an edge private network (EPN) instance.
 *
 * @description You can delete an EPN instance only when the instance group information is empty.
 *
 * @param request DeleteEpnInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteEpnInstanceResponse
 */
async function deleteEpnInstanceWithOptions(request: DeleteEpnInstanceRequest, runtime: Util.RuntimeOptions): DeleteEpnInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.EPNInstanceId)) {
    query['EPNInstanceId'] = request.EPNInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEpnInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes an edge private network (EPN) instance.
 *
 * @description You can delete an EPN instance only when the instance group information is empty.
 *
 * @param request DeleteEpnInstanceRequest
 * @return DeleteEpnInstanceResponse
 */
async function deleteEpnInstance(request: DeleteEpnInstanceRequest): DeleteEpnInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEpnInstanceWithOptions(request, runtime);
}

model DeleteFileSystemRequest {
  ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.

This parameter is required.', example='cn-chengdu-telecom-4'),
  fileSystemId?: string(name='FileSystemId', description='The ID of the file system that you want to delete.

This parameter is required.', example='e42640****'),
}

model DeleteFileSystemResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model DeleteFileSystemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFileSystemResponseBody(name='body'),
}

/**
 * @summary Deletes a File Storage NAS file system.
 *
 * @param request DeleteFileSystemRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteFileSystemResponse
 */
async function deleteFileSystemWithOptions(request: DeleteFileSystemRequest, runtime: Util.RuntimeOptions): DeleteFileSystemResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFileSystem',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a File Storage NAS file system.
 *
 * @param request DeleteFileSystemRequest
 * @return DeleteFileSystemResponse
 */
async function deleteFileSystem(request: DeleteFileSystemRequest): DeleteFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFileSystemWithOptions(request, runtime);
}

model DeleteForwardEntryRequest {
  forwardEntryId?: string(name='ForwardEntryId', description='The ID of the DNAT entry that you want to delete.

This parameter is required.', example='fwd-5tfk8qgepr9ijjkqxt8do****'),
}

model DeleteForwardEntryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteForwardEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteForwardEntryResponseBody(name='body'),
}

/**
 * @summary Deletes a Destination Network Address Translation (DNAT) entry from a specified DNAT table.
 *
 * @param request DeleteForwardEntryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteForwardEntryResponse
 */
async function deleteForwardEntryWithOptions(request: DeleteForwardEntryRequest, runtime: Util.RuntimeOptions): DeleteForwardEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.forwardEntryId)) {
    query['ForwardEntryId'] = request.forwardEntryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteForwardEntry',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a Destination Network Address Translation (DNAT) entry from a specified DNAT table.
 *
 * @param request DeleteForwardEntryRequest
 * @return DeleteForwardEntryResponse
 */
async function deleteForwardEntry(request: DeleteForwardEntryRequest): DeleteForwardEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteForwardEntryWithOptions(request, runtime);
}

model DeleteHaVipsRequest {
  haVipIds?: [ string ](name='HaVipIds', description='This parameter is required.'),
}

model DeleteHaVipsShrinkRequest {
  haVipIdsShrink?: string(name='HaVipIds', description='This parameter is required.'),
}

model DeleteHaVipsResponseBody = {
  requestId?: string(name='RequestId', example='6666C5A5-75ED-422E-A022-7121FA18C968'),
}

model DeleteHaVipsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteHaVipsResponseBody(name='body'),
}

/**
 * @summary 删除高可用VIP实例
 *
 * @param tmpReq DeleteHaVipsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteHaVipsResponse
 */
async function deleteHaVipsWithOptions(tmpReq: DeleteHaVipsRequest, runtime: Util.RuntimeOptions): DeleteHaVipsResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteHaVipsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.haVipIds)) {
    request.haVipIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.haVipIds, 'HaVipIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.haVipIdsShrink)) {
    query['HaVipIds'] = request.haVipIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteHaVips',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除高可用VIP实例
 *
 * @param request DeleteHaVipsRequest
 * @return DeleteHaVipsResponse
 */
async function deleteHaVips(request: DeleteHaVipsRequest): DeleteHaVipsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHaVipsWithOptions(request, runtime);
}

model DeleteImageRequest {
  imageId?: string(name='ImageId', description='The ID of the image. You can specify only one image ID.

You can delete only custom images that you created.

This parameter is required.', example='m-5taesrgwpo9zqj9cjqu792****'),
}

model DeleteImageResponseBody = {
  code?: int32(name='Code', description='The returned service code. A value of 0 indicates that the operation was successful.', example='0'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0D94920B-0349-5097-A57F-31876405F2E5'),
}

model DeleteImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteImageResponseBody(name='body'),
}

/**
 * @summary Deletes a custom image.
 *
 * @param request DeleteImageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteImageResponse
 */
async function deleteImageWithOptions(request: DeleteImageRequest, runtime: Util.RuntimeOptions): DeleteImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteImage',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a custom image.
 *
 * @param request DeleteImageRequest
 * @return DeleteImageResponse
 */
async function deleteImage(request: DeleteImageRequest): DeleteImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteImageWithOptions(request, runtime);
}

model DeleteKeyPairsRequest {
  keyPairId?: string(name='KeyPairId', description='The ID of the SSH key pair.', example='ssh-5lywanlkih1zo9yl8eg****'),
  keyPairName?: string(name='KeyPairName', description='The name of the key pair. The name must conform to the following naming conventions:

*   The name must be 2 to 128 characters in length.
*   The name must start with a letter and cannot start with `http://` or `https://`.
*   The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).

Before you delete a key pair, you can call the DescribeKeyPairs operation to query existing key pairs.', example='TestKeyPairName'),
}

model DeleteKeyPairsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteKeyPairsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteKeyPairsResponseBody(name='body'),
}

/**
 * @summary Deletes SSH key pairs.
 *
 * @description *   After you delete an SSH key pair, you can no longer query the key pair by calling the DescribeKeyPairs operation.
 * *   If you delete an SSH key pair that is bound to an Edge Node Service (ENS) instance, ENS no longer stores the SSH key pair. However, you can still use the key pair to access the instance. When you call the DescribeInstance operation to query instance information, no other information but the name of the key pair (**KeyPairName**) is returned.
 *
 * @param request DeleteKeyPairsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteKeyPairsResponse
 */
async function deleteKeyPairsWithOptions(request: DeleteKeyPairsRequest, runtime: Util.RuntimeOptions): DeleteKeyPairsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyPairId)) {
    query['KeyPairId'] = request.keyPairId;
  }
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteKeyPairs',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes SSH key pairs.
 *
 * @description *   After you delete an SSH key pair, you can no longer query the key pair by calling the DescribeKeyPairs operation.
 * *   If you delete an SSH key pair that is bound to an Edge Node Service (ENS) instance, ENS no longer stores the SSH key pair. However, you can still use the key pair to access the instance. When you call the DescribeInstance operation to query instance information, no other information but the name of the key pair (**KeyPairName**) is returned.
 *
 * @param request DeleteKeyPairsRequest
 * @return DeleteKeyPairsResponse
 */
async function deleteKeyPairs(request: DeleteKeyPairsRequest): DeleteKeyPairsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteKeyPairsWithOptions(request, runtime);
}

model DeleteLoadBalancerListenerRequest {
  listenerPort?: int32(name='ListenerPort', description='The frontend port that is used by the Edge Load Balance (ELB) instance. Valid values: **1** to **65535**.

This parameter is required.', example='8080'),
  listenerProtocol?: string(name='ListenerProtocol', description='The frontend protocol that is used by the ELB instance.

>  This parameter is required if the same port is used by listeners that use different protocols.

Valid values:

*   tcp
*   udp
*   http
*   https', example='tcp'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ELB instance.

This parameter is required.', example='lb-5snthcyu1x10g7tywj7iu****'),
}

model DeleteLoadBalancerListenerResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteLoadBalancerListenerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLoadBalancerListenerResponseBody(name='body'),
}

/**
 * @summary Deletes a listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request DeleteLoadBalancerListenerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteLoadBalancerListenerResponse
 */
async function deleteLoadBalancerListenerWithOptions(request: DeleteLoadBalancerListenerRequest, runtime: Util.RuntimeOptions): DeleteLoadBalancerListenerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.listenerPort)) {
    query['ListenerPort'] = request.listenerPort;
  }
  if (!Util.isUnset(request.listenerProtocol)) {
    query['ListenerProtocol'] = request.listenerProtocol;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLoadBalancerListener',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request DeleteLoadBalancerListenerRequest
 * @return DeleteLoadBalancerListenerResponse
 */
async function deleteLoadBalancerListener(request: DeleteLoadBalancerListenerRequest): DeleteLoadBalancerListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLoadBalancerListenerWithOptions(request, runtime);
}

model DeleteMountTargetRequest {
  ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.

This parameter is required.', example='cn-beijing-cmcc'),
  fileSystemId?: string(name='FileSystemId', description='The ID of the file system.

This parameter is required.', example='c50f8*****'),
  mountTargetName?: string(name='MountTargetName', description='The name of the mount target.

This parameter is required.', example='TestMountPath'),
}

model DeleteMountTargetResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model DeleteMountTargetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMountTargetResponseBody(name='body'),
}

/**
 * @summary Deletes a mount target.
 *
 * @description After you delete a mount target, the mount target cannot be restored. Proceed with caution.
 *
 * @param request DeleteMountTargetRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteMountTargetResponse
 */
async function deleteMountTargetWithOptions(request: DeleteMountTargetRequest, runtime: Util.RuntimeOptions): DeleteMountTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.mountTargetName)) {
    query['MountTargetName'] = request.mountTargetName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMountTarget',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a mount target.
 *
 * @description After you delete a mount target, the mount target cannot be restored. Proceed with caution.
 *
 * @param request DeleteMountTargetRequest
 * @return DeleteMountTargetResponse
 */
async function deleteMountTarget(request: DeleteMountTargetRequest): DeleteMountTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMountTargetWithOptions(request, runtime);
}

model DeleteNatGatewayRequest {
  forceDelete?: boolean(name='ForceDelete', description='Specifies whether to forcefully delete the VPC. Valid values:

- **true**: yes
- **false** (default): no

You can forcefully delete a VPC in the following scenarios:

- Only an IPv4 gateway and routes that point to the IPv4 gateway exist in the VPC.
- Only an IPv6 gateway and routes that point to the IPv6 gateway exist in the VPC.', example='true'),
  natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway that you want to delete.

This parameter is required.', example='nat-5t7nh1cfm6kxiszlttr38****'),
}

model DeleteNatGatewayResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteNatGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNatGatewayResponseBody(name='body'),
}

/**
 * @summary Deletes an Internet network address translation (NAT) gateway.
 *
 * @param request DeleteNatGatewayRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteNatGatewayResponse
 */
async function deleteNatGatewayWithOptions(request: DeleteNatGatewayRequest, runtime: Util.RuntimeOptions): DeleteNatGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.forceDelete)) {
    query['ForceDelete'] = request.forceDelete;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNatGateway',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes an Internet network address translation (NAT) gateway.
 *
 * @param request DeleteNatGatewayRequest
 * @return DeleteNatGatewayResponse
 */
async function deleteNatGateway(request: DeleteNatGatewayRequest): DeleteNatGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNatGatewayWithOptions(request, runtime);
}

model DeleteNetworkRequest {
  networkId?: string(name='NetworkId', description='The ID of the network.

This parameter is required.', example='n-5***'),
}

model DeleteNetworkResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteNetworkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNetworkResponseBody(name='body'),
}

/**
 * @summary Deletes a virtual private cloud (VPC).
 *
 * @param request DeleteNetworkRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteNetworkResponse
 */
async function deleteNetworkWithOptions(request: DeleteNetworkRequest, runtime: Util.RuntimeOptions): DeleteNetworkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.networkId)) {
    query['NetworkId'] = request.networkId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNetwork',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a virtual private cloud (VPC).
 *
 * @param request DeleteNetworkRequest
 * @return DeleteNetworkResponse
 */
async function deleteNetwork(request: DeleteNetworkRequest): DeleteNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNetworkWithOptions(request, runtime);
}

model DeleteNetworkAclRequest {
  networkAclId?: string(name='NetworkAclId', description='The ID of the network ACL.

This parameter is required.', example='nacl-bp1lhl0taikrbgnh****'),
}

model DeleteNetworkAclResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DeleteNetworkAclResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNetworkAclResponseBody(name='body'),
}

/**
 * @summary Deletes a network access control list (ACL).
 *
 * @param request DeleteNetworkAclRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteNetworkAclResponse
 */
async function deleteNetworkAclWithOptions(request: DeleteNetworkAclRequest, runtime: Util.RuntimeOptions): DeleteNetworkAclResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.networkAclId)) {
    query['NetworkAclId'] = request.networkAclId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNetworkAcl',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a network access control list (ACL).
 *
 * @param request DeleteNetworkAclRequest
 * @return DeleteNetworkAclResponse
 */
async function deleteNetworkAcl(request: DeleteNetworkAclRequest): DeleteNetworkAclResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNetworkAclWithOptions(request, runtime);
}

model DeleteNetworkAclEntryRequest {
  networkAclEntryId?: string(name='NetworkAclEntryId', description='The ID of the network ACL for which you want to delete a rule.', example='nae-5****'),
}

model DeleteNetworkAclEntryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DeleteNetworkAclEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNetworkAclEntryResponseBody(name='body'),
}

/**
 * @summary Deletes a network access control list (ACL) rule.
 *
 * @param request DeleteNetworkAclEntryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteNetworkAclEntryResponse
 */
async function deleteNetworkAclEntryWithOptions(request: DeleteNetworkAclEntryRequest, runtime: Util.RuntimeOptions): DeleteNetworkAclEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.networkAclEntryId)) {
    query['NetworkAclEntryId'] = request.networkAclEntryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNetworkAclEntry',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a network access control list (ACL) rule.
 *
 * @param request DeleteNetworkAclEntryRequest
 * @return DeleteNetworkAclEntryResponse
 */
async function deleteNetworkAclEntry(request: DeleteNetworkAclEntryRequest): DeleteNetworkAclEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNetworkAclEntryWithOptions(request, runtime);
}

model DeleteNetworkInterfacesRequest {
  networkInterfaceIds?: [ string ](name='NetworkInterfaceIds', description='This parameter is required.'),
}

model DeleteNetworkInterfacesShrinkRequest {
  networkInterfaceIdsShrink?: string(name='NetworkInterfaceIds', description='This parameter is required.'),
}

model DeleteNetworkInterfacesResponseBody = {
  requestId?: string(name='RequestId', example='125B04C7-3D0D-4245-AF96-14E3758E3F06'),
}

model DeleteNetworkInterfacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNetworkInterfacesResponseBody(name='body'),
}

/**
 * @summary 删除弹性网卡
 *
 * @param tmpReq DeleteNetworkInterfacesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteNetworkInterfacesResponse
 */
async function deleteNetworkInterfacesWithOptions(tmpReq: DeleteNetworkInterfacesRequest, runtime: Util.RuntimeOptions): DeleteNetworkInterfacesResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteNetworkInterfacesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.networkInterfaceIds)) {
    request.networkInterfaceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.networkInterfaceIds, 'NetworkInterfaceIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.networkInterfaceIdsShrink)) {
    query['NetworkInterfaceIds'] = request.networkInterfaceIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNetworkInterfaces',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除弹性网卡
 *
 * @param request DeleteNetworkInterfacesRequest
 * @return DeleteNetworkInterfacesResponse
 */
async function deleteNetworkInterfaces(request: DeleteNetworkInterfacesRequest): DeleteNetworkInterfacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNetworkInterfacesWithOptions(request, runtime);
}

model DeleteObjectRequest {
  bucketName?: string(name='BucketName', description='The name of the bucket.

This parameter is required.', example='tets'),
  objectKey?: string(name='ObjectKey', description='The name of the file.

This parameter is required.', example='image5'),
}

model DeleteObjectResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A5626B44-0189-443E-9816-D951F596CC89'),
}

model DeleteObjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteObjectResponseBody(name='body'),
}

/**
 * @summary Deletes an object.
 *
 * @param request DeleteObjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteObjectResponse
 */
async function deleteObjectWithOptions(request: DeleteObjectRequest, runtime: Util.RuntimeOptions): DeleteObjectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  if (!Util.isUnset(request.objectKey)) {
    query['ObjectKey'] = request.objectKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteObject',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes an object.
 *
 * @param request DeleteObjectRequest
 * @return DeleteObjectResponse
 */
async function deleteObject(request: DeleteObjectRequest): DeleteObjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteObjectWithOptions(request, runtime);
}

model DeleteSDGRequest {
  SDGId?: [ string ](name='SDGId', description='The IDs of the SDGs that you want to delete.

This parameter is required.'),
}

model DeleteSDGShrinkRequest {
  SDGIdShrink?: string(name='SDGId', description='The IDs of the SDGs that you want to delete.

This parameter is required.'),
}

model DeleteSDGResponseBody = {
  data?: {
    message?: string(name='Message', description='The response message. Success is returned for a successful request.', example='success'),
    result?: {
      failedCount?: long(name='FailedCount', description='The number of failed tasks.', example='0'),
      failedItems?: [ 
        {
          errMessage?: string(name='ErrMessage', description='The error message.', example='sdg not found'),
          item?: {
            sdgId?: string(name='SdgId', description='The ID of the shared data group (SDG).', example='sdg-dfet5vvvgy'),
          }(name='Item', description='Description'),
        }
      ](name='FailedItems', description='Details about the failed tasks.'),
      successCount?: long(name='SuccessCount', description='The number of successful tasks.', example='1'),
    }(name='Result', description='The execution result of the synchronization request.'),
    success?: boolean(name='Success', description='Indicates whether all tasks are successful. Valid values:

*   true: All tasks are successful.
*   false: Failed tasks exist.', example='true'),
  }(name='Data', description='The returned data object.'),
  requestId?: string(name='RequestId', description='The request ID.', example='86A6D421-A0C7-4C01-8648-47377CA6A2CE'),
}

model DeleteSDGResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSDGResponseBody(name='body'),
}

/**
 * @summary Deletes a shared data group (SDG).
 *
 * @description If all the SDGs corresponding to the original disk are deleted, the original disk is automatically cleared.
 *
 * @param tmpReq DeleteSDGRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSDGResponse
 */
async function deleteSDGWithOptions(tmpReq: DeleteSDGRequest, runtime: Util.RuntimeOptions): DeleteSDGResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteSDGShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.SDGId)) {
    request.SDGIdShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.SDGId, 'SDGId', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.SDGIdShrink)) {
    query['SDGId'] = request.SDGIdShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSDG',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a shared data group (SDG).
 *
 * @description If all the SDGs corresponding to the original disk are deleted, the original disk is automatically cleared.
 *
 * @param request DeleteSDGRequest
 * @return DeleteSDGResponse
 */
async function deleteSDG(request: DeleteSDGRequest): DeleteSDGResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSDGWithOptions(request, runtime);
}

model DeleteSecurityGroupRequest {
  securityGroupId?: string(name='SecurityGroupId', description='The security group ID of the instance.

This parameter is required.', example='sg-bp67acfmxazb4ph***'),
}

model DeleteSecurityGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteSecurityGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSecurityGroupResponseBody(name='body'),
}

/**
 * @summary Deletes a security group.
 *
 * @description Before you delete a security group, make sure that no instances exist in the security group.
 *
 * @param request DeleteSecurityGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSecurityGroupResponse
 */
async function deleteSecurityGroupWithOptions(request: DeleteSecurityGroupRequest, runtime: Util.RuntimeOptions): DeleteSecurityGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSecurityGroup',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a security group.
 *
 * @description Before you delete a security group, make sure that no instances exist in the security group.
 *
 * @param request DeleteSecurityGroupRequest
 * @return DeleteSecurityGroupResponse
 */
async function deleteSecurityGroup(request: DeleteSecurityGroupRequest): DeleteSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSecurityGroupWithOptions(request, runtime);
}

model DeleteSnapshotRequest {
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.

This parameter is required.', example='sp-bp1c0doj0taqyzzl****'),
}

model DeleteSnapshotResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteSnapshotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSnapshotResponseBody(name='body'),
}

/**
 * @summary Deletes a snapshot.
 *
 * @param request DeleteSnapshotRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSnapshotResponse
 */
async function deleteSnapshotWithOptions(request: DeleteSnapshotRequest, runtime: Util.RuntimeOptions): DeleteSnapshotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSnapshot',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a snapshot.
 *
 * @param request DeleteSnapshotRequest
 * @return DeleteSnapshotResponse
 */
async function deleteSnapshot(request: DeleteSnapshotRequest): DeleteSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSnapshotWithOptions(request, runtime);
}

model DeleteSnatEntryRequest {
  snatEntryId?: string(name='SnatEntryId', description='The ID of the SNAT entry that you want to delete.

This parameter is required.', example='snat-5tfi6f8gds82mjmlofeym****'),
}

model DeleteSnatEntryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteSnatEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSnatEntryResponseBody(name='body'),
}

/**
 * @summary Deletes a source network address translation (SNAT) entry from a specified SNAT table.
 *
 * @param request DeleteSnatEntryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSnatEntryResponse
 */
async function deleteSnatEntryWithOptions(request: DeleteSnatEntryRequest, runtime: Util.RuntimeOptions): DeleteSnatEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.snatEntryId)) {
    query['SnatEntryId'] = request.snatEntryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSnatEntry',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a source network address translation (SNAT) entry from a specified SNAT table.
 *
 * @param request DeleteSnatEntryRequest
 * @return DeleteSnatEntryResponse
 */
async function deleteSnatEntry(request: DeleteSnatEntryRequest): DeleteSnatEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSnatEntryWithOptions(request, runtime);
}

model DeleteSnatIpForSnatEntryRequest {
  snatEntryId?: string(name='SnatEntryId', description='The ID of the SNAT entry.

This parameter is required.', example='snat-5tfi6f8gds82mjmlofeym****'),
  snatIp?: string(name='SnatIp', description='The EIP that you want to delete from the SNAT entry.

This parameter is required.', example='120.72.56.71'),
}

model DeleteSnatIpForSnatEntryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DeleteSnatIpForSnatEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSnatIpForSnatEntryResponseBody(name='body'),
}

/**
 * @summary Deletes an elastic IP address (EIP) from a source network address translation (SNAT) entry.
 *
 * @param request DeleteSnatIpForSnatEntryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSnatIpForSnatEntryResponse
 */
async function deleteSnatIpForSnatEntryWithOptions(request: DeleteSnatIpForSnatEntryRequest, runtime: Util.RuntimeOptions): DeleteSnatIpForSnatEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.snatEntryId)) {
    query['SnatEntryId'] = request.snatEntryId;
  }
  if (!Util.isUnset(request.snatIp)) {
    query['SnatIp'] = request.snatIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSnatIpForSnatEntry',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes an elastic IP address (EIP) from a source network address translation (SNAT) entry.
 *
 * @param request DeleteSnatIpForSnatEntryRequest
 * @return DeleteSnatIpForSnatEntryResponse
 */
async function deleteSnatIpForSnatEntry(request: DeleteSnatIpForSnatEntryRequest): DeleteSnatIpForSnatEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSnatIpForSnatEntryWithOptions(request, runtime);
}

model DeleteStorageGatewayRequest {
  gatewayId?: string(name='GatewayId', description='The ID of the gateway.

This parameter is required.', example='sgw-****'),
}

model DeleteStorageGatewayResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='853D6E71-E087-1557-B65C-32BFBEE5CD97'),
}

model DeleteStorageGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteStorageGatewayResponseBody(name='body'),
}

/**
 * @summary Deletes a storage gateway.
 *
 * @param request DeleteStorageGatewayRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteStorageGatewayResponse
 */
async function deleteStorageGatewayWithOptions(request: DeleteStorageGatewayRequest, runtime: Util.RuntimeOptions): DeleteStorageGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteStorageGateway',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a storage gateway.
 *
 * @param request DeleteStorageGatewayRequest
 * @return DeleteStorageGatewayResponse
 */
async function deleteStorageGateway(request: DeleteStorageGatewayRequest): DeleteStorageGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteStorageGatewayWithOptions(request, runtime);
}

model DeleteStorageVolumeRequest {
  volumeId?: string(name='VolumeId', description='The ID of the volume.

This parameter is required.', example='sv-***'),
}

model DeleteStorageVolumeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='853D6E71-E087-1557-B65C-32BFBEE5CD97'),
}

model DeleteStorageVolumeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteStorageVolumeResponseBody(name='body'),
}

/**
 * @summary Deletes a storage volume.
 *
 * @param request DeleteStorageVolumeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteStorageVolumeResponse
 */
async function deleteStorageVolumeWithOptions(request: DeleteStorageVolumeRequest, runtime: Util.RuntimeOptions): DeleteStorageVolumeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.volumeId)) {
    query['VolumeId'] = request.volumeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteStorageVolume',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a storage volume.
 *
 * @param request DeleteStorageVolumeRequest
 * @return DeleteStorageVolumeResponse
 */
async function deleteStorageVolume(request: DeleteStorageVolumeRequest): DeleteStorageVolumeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteStorageVolumeWithOptions(request, runtime);
}

model DeleteVSwitchRequest {
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.

This parameter is required.', example='vsw-5m9xhl****'),
}

model DeleteVSwitchResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DeleteVSwitchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVSwitchResponseBody(name='body'),
}

/**
 * @summary Deletes a vSwitch.
 *
 * @description Before you delete a vSwitch, make sure that no instances exist in the vSwitch.
 *
 * @param request DeleteVSwitchRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteVSwitchResponse
 */
async function deleteVSwitchWithOptions(request: DeleteVSwitchRequest, runtime: Util.RuntimeOptions): DeleteVSwitchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVSwitch',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a vSwitch.
 *
 * @description Before you delete a vSwitch, make sure that no instances exist in the vSwitch.
 *
 * @param request DeleteVSwitchRequest
 * @return DeleteVSwitchResponse
 */
async function deleteVSwitch(request: DeleteVSwitchRequest): DeleteVSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVSwitchWithOptions(request, runtime);
}

model DeployInstanceSDGRequest {
  deploymentType?: string(name='DeploymentType', description='The deployment type of the SDG. shared: shared read/write splitting deployment. The content of the SDG is read-only, and data updates are written to the local storage of the instance.', example='shared'),
  instanceIds?: [ string ](name='InstanceIds', description='The IDs of the instances. The value is a JSON array that consists of up to 100 IDs.

This parameter is required.'),
  SDGId?: string(name='SDGId', description='The ID of the SDG.

This parameter is required.', example='sdg-xxxx'),
}

model DeployInstanceSDGShrinkRequest {
  deploymentType?: string(name='DeploymentType', description='The deployment type of the SDG. shared: shared read/write splitting deployment. The content of the SDG is read-only, and data updates are written to the local storage of the instance.', example='shared'),
  instanceIdsShrink?: string(name='InstanceIds', description='The IDs of the instances. The value is a JSON array that consists of up to 100 IDs.

This parameter is required.'),
  SDGId?: string(name='SDGId', description='The ID of the SDG.

This parameter is required.', example='sdg-xxxx'),
}

model DeployInstanceSDGResponseBody = {
  data?: {
    message?: string(name='Message', description='The response message. Success is returned for a successful request.', example='success'),
    result?: {
      failedCount?: long(name='FailedCount', description='The number of failed tasks.', example='0'),
      failedItems?: [ 
        {
          errMessage?: string(name='ErrMessage', description='The error message that is returned.', example='sdg not found'),
          instanceId?: string(name='InstanceId', description='The ID of the instance.', example='aic-xxxxx-0'),
        }
      ](name='FailedItems', description='Details about the failed tasks.'),
      successCount?: long(name='SuccessCount', description='The number of successful tasks.', example='1'),
    }(name='Result', description='The execution result of the synchronization request.'),
    success?: boolean(name='Success', description='Indicates whether all tasks are successful. Valid values:

*   true: All tasks are successful.
*   false: Failed tasks exist.', example='true'),
  }(name='Data', description='The returned data object.'),
  requestId?: string(name='RequestId', description='The request ID.', example='125B04C7-3D0D-4245-AF96-14E3758E3F06'),
}

model DeployInstanceSDGResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeployInstanceSDGResponseBody(name='body'),
}

/**
 * @summary Deploys a shared data group (SDG) to compute instances.
 *
 * @param tmpReq DeployInstanceSDGRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeployInstanceSDGResponse
 */
async function deployInstanceSDGWithOptions(tmpReq: DeployInstanceSDGRequest, runtime: Util.RuntimeOptions): DeployInstanceSDGResponse {
  Util.validateModel(tmpReq);
  var request = new DeployInstanceSDGShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.deploymentType)) {
    query['DeploymentType'] = request.deploymentType;
  }
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['InstanceIds'] = request.instanceIdsShrink;
  }
  if (!Util.isUnset(request.SDGId)) {
    query['SDGId'] = request.SDGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeployInstanceSDG',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deploys a shared data group (SDG) to compute instances.
 *
 * @param request DeployInstanceSDGRequest
 * @return DeployInstanceSDGResponse
 */
async function deployInstanceSDG(request: DeployInstanceSDGRequest): DeployInstanceSDGResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployInstanceSDGWithOptions(request, runtime);
}

model DeploySDGRequest {
  deploymentType?: string(name='DeploymentType', description='The SDG deployment type. Valid values:

*   common (default): read/write deployment. Data updates are written to disks.
*   overlay: read/write splitting deployment. Content in SDGs is read-only. Data updates are written to the local storage of the instance.', example='common'),
  instanceIds?: [ string ](name='InstanceIds', description='The IDs of instances on which you want to deploy SDGs. You can deploy SDGs on a maximum of 100 instances at a time.

This parameter is required.'),
  SDGId?: string(name='SDGId', description='The SDG ID. This parameter is used to create a disk, which is attached to an instance.

This parameter is required.', example='sdg-xxxxx'),
}

model DeploySDGShrinkRequest {
  deploymentType?: string(name='DeploymentType', description='The SDG deployment type. Valid values:

*   common (default): read/write deployment. Data updates are written to disks.
*   overlay: read/write splitting deployment. Content in SDGs is read-only. Data updates are written to the local storage of the instance.', example='common'),
  instanceIdsShrink?: string(name='InstanceIds', description='The IDs of instances on which you want to deploy SDGs. You can deploy SDGs on a maximum of 100 instances at a time.

This parameter is required.'),
  SDGId?: string(name='SDGId', description='The SDG ID. This parameter is used to create a disk, which is attached to an instance.

This parameter is required.', example='sdg-xxxxx'),
}

model DeploySDGResponseBody = {
  data?: {
    message?: string(name='Message', description='The response message. Success is returned for a successful request.', example='success'),
    result?: {
      failedCount?: long(name='FailedCount', description='The number of failed tasks.', example='0'),
      failedItems?: [ 
        {
          errMessage?: string(name='ErrMessage', description='The error message.', example='sdg not found'),
          instanceId?: string(name='InstanceId', description='The ID of the instance.', example='aic-xxxxx-0'),
        }
      ](name='FailedItems', description='Details of failed tasks.'),
      successCount?: long(name='SuccessCount', description='The number of successful tasks.', example='1'),
    }(name='Result', description='The task result.'),
    success?: boolean(name='Success', description='Indicates whether all tasks are successful. Valid values:

*   true: All tasks are successful.
*   false: Failed tasks exist.', example='true'),
  }(name='Data', description='The returned data object.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A331CA96-3948-4BD2-B067-F6174F5C17EA'),
}

model DeploySDGResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeploySDGResponseBody(name='body'),
}

/**
 * @summary Deploys shared data groups (SDGs).
 *
 * @param tmpReq DeploySDGRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeploySDGResponse
 */
async function deploySDGWithOptions(tmpReq: DeploySDGRequest, runtime: Util.RuntimeOptions): DeploySDGResponse {
  Util.validateModel(tmpReq);
  var request = new DeploySDGShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeploySDG',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deploys shared data groups (SDGs).
 *
 * @param request DeploySDGRequest
 * @return DeploySDGResponse
 */
async function deploySDG(request: DeploySDGRequest): DeploySDGResponse {
  var runtime = new Util.RuntimeOptions{};
  return deploySDGWithOptions(request, runtime);
}

model DescribeAICImagesRequest {
  description?: string(name='Description', description='The description of the image.', example='Test operation of console'),
  imageId?: string(name='ImageId', description='The image ID of the AIC instance.', example='m-ad0ddaddc2d54adeaa09b7c0f1e****'),
  imageType?: string(name='ImageType', description='The type of the image. Valid values:

*   **public**: public image
*   **private**: custom image', example='public'),
  imageUrl?: string(name='ImageUrl', description='The URL of the AIC image repository.', example='****.alibaba-inc.com/aic/socimage:test'),
  maxDate?: string(name='MaxDate', description='The end of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.', example='2022-02-02'),
  minDate?: string(name='MinDate', description='The beginning of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.', example='2022-01-02'),
  pageNumber?: string(name='PageNumber', description='The page number. Pages start from page **1**. Default value: **1**.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page. The maximum value is **100**. Default value: **10**.', example='10'),
  status?: string(name='Status', description='The status of the image. Valid values:

*   **verifying**
*   **disable**
*   **available**', example='available'),
}

model DescribeAICImagesResponseBody = {
  images?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the image was created.', example='2022-09-22 10:54:34'),
      description?: string(name='Description', description='The description of the image.', example='Test operation of console'),
      imageId?: string(name='ImageId', description='The image ID of the AIC instance.', example='m-ad0ddaddc2d54adeaa09b7c0f1e****'),
      imageUrl?: string(name='ImageUrl', description='The URL of the AIC image repository.', example='****.alibaba-inc.com/aic/socimage:test'),
      status?: string(name='Status', description='The status of the image. **Available** is returned for this parameter. Available indicates that the image is available.', example='available'),
      user?: string(name='User', description='The username of the image repository.', example='user'),
    }
  ](name='Images', description='The information about the images.'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.

Default value: 10.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='72DC6C0A-D9A8-5345-A2BE-FE354CC728A0'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeAICImagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAICImagesResponseBody(name='body'),
}

/**
 * @summary Queries information about images of the Android in Container (AIC) instance.
 *
 * @param request DescribeAICImagesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAICImagesResponse
 */
async function describeAICImagesWithOptions(request: DescribeAICImagesRequest, runtime: Util.RuntimeOptions): DescribeAICImagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.imageType)) {
    query['ImageType'] = request.imageType;
  }
  if (!Util.isUnset(request.imageUrl)) {
    query['ImageUrl'] = request.imageUrl;
  }
  if (!Util.isUnset(request.maxDate)) {
    query['MaxDate'] = request.maxDate;
  }
  if (!Util.isUnset(request.minDate)) {
    query['MinDate'] = request.minDate;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAICImages',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries information about images of the Android in Container (AIC) instance.
 *
 * @param request DescribeAICImagesRequest
 * @return DescribeAICImagesResponse
 */
async function describeAICImages(request: DescribeAICImagesRequest): DescribeAICImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAICImagesWithOptions(request, runtime);
}

model DescribeARMServerInstancesRequest {
  AICSpecs?: [ string ](name='AICSpecs', description='The container specifications.'),
  describeAICInstances?: boolean(name='DescribeAICInstances', description='Spcifies whether the result contains the container information. Valid values:

*   **true**
*   **false**', example='true'),
  ensRegionIds?: [ string ](name='EnsRegionIds', description='The IDs of the Edge Node Service (ENS) nodes.'),
  maxDate?: string(name='MaxDate', description='The end of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.', example='2006-01-03'),
  minDate?: string(name='MinDate', description='The beginning of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.', example='2006-01-02'),
  name?: string(name='Name', description='The name of the server.', example='Server-Name'),
  namespace?: string(name='Namespace', description='The namespace.', example='default'),
  orderByParams?: string(name='OrderByParams', description='The sorting order of the results to return. Valid values: ServerIdSort, ServerNameSort, ExpireTimeSort, CreationTimeSort, and EnsRegionIdSort.

asc: ascending order. desc: descending order.', example='{"ServerIdSort":"desc","ServerNameSort":"desc","ExpireTimeSort":"asc","CreationTimeSort":"asc","EnsRegionIdSort":"asc"}'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page **1**.

Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. The maximum value is **100**.

Default value: **10**.', example='10'),
  serverIds?: [ string ](name='ServerIds', description='The IDs of the ARM servers.'),
  serverSpecs?: [ string ](name='ServerSpecs', description='The server specifications.'),
  states?: [ string ](name='States', description='The operation statuses.'),
}

model DescribeARMServerInstancesShrinkRequest {
  AICSpecsShrink?: string(name='AICSpecs', description='The container specifications.'),
  describeAICInstances?: boolean(name='DescribeAICInstances', description='Spcifies whether the result contains the container information. Valid values:

*   **true**
*   **false**', example='true'),
  ensRegionIdsShrink?: string(name='EnsRegionIds', description='The IDs of the Edge Node Service (ENS) nodes.'),
  maxDate?: string(name='MaxDate', description='The end of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.', example='2006-01-03'),
  minDate?: string(name='MinDate', description='The beginning of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.', example='2006-01-02'),
  name?: string(name='Name', description='The name of the server.', example='Server-Name'),
  namespace?: string(name='Namespace', description='The namespace.', example='default'),
  orderByParams?: string(name='OrderByParams', description='The sorting order of the results to return. Valid values: ServerIdSort, ServerNameSort, ExpireTimeSort, CreationTimeSort, and EnsRegionIdSort.

asc: ascending order. desc: descending order.', example='{"ServerIdSort":"desc","ServerNameSort":"desc","ExpireTimeSort":"asc","CreationTimeSort":"asc","EnsRegionIdSort":"asc"}'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page **1**.

Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. The maximum value is **100**.

Default value: **10**.', example='10'),
  serverIdsShrink?: string(name='ServerIds', description='The IDs of the ARM servers.'),
  serverSpecsShrink?: string(name='ServerSpecs', description='The server specifications.'),
  statesShrink?: string(name='States', description='The operation statuses.'),
}

model DescribeARMServerInstancesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  servers?: [ 
    {
      AICInstances?: [ 
        {
          frequency?: long(name='Frequency', description='The refresh rate of the AIC instance. Unit: Hz.', example='120'),
          imageId?: string(name='ImageId', description='The ID of the AIC image.', example='m-****'),
          instanceId?: string(name='InstanceId', description='The ID of the AIC instance.', example='aic-instance****'),
          latestAction?: string(name='LatestAction', description='The operation that was most recently performed.', example='ServerCreate'),
          name?: string(name='Name', description='The name of the container.', example='AIC-Name'),
          networkAttributes?: {
            ipAddress?: string(name='IpAddress', description='The IP address of the AIC instance.', example='192.168.XX.XX'),
            networkId?: string(name='NetworkId', description='The network ID of the AIC instance.', example='n-*****'),
            vSwitchId?: string(name='VSwitchId', description='The vSwitch ID of the AIC instance.', example='vsw-****'),
          }(name='NetworkAttributes', description='The network attributes of the AIC instance.'),
          resolution?: string(name='Resolution', description='The resolution of the AIC instance.', example='1920*1080'),
          sdgDeployInfo?: {
            SDGId?: string(name='SDGId', description='The ID of the SDG.', example='sdg-xxxxx'),
            status?: string(name='Status', description='The deployment status of the SDG. Valid values:

*   **sdg_deploying**
*   **failed**
*   **success**', example='success'),
          }(name='SdgDeployInfo', description='The information about the shared data group (SDG) that is deployed on the AIC instance.'),
          spec?: string(name='Spec', description='The specification of the AIC instance.', example='aic.cf53r.c2.np'),
          state?: string(name='State', description='The operation status of the AIC instance. Valid values:

*   **success**
*   **failed**
*   **creating**
*   **releasing**
*   **rebooting**
*   **reseting**', example='success'),
          status?: string(name='Status', description='The running status of the AIC instance. Valid values:

*   **running**
*   **pending**
*   **terminating**', example='running'),
        }
      ](name='AICInstances', description='The information about the AIC instances.'),
      creationTime?: string(name='CreationTime', description='The time when the instance was created.', example='2022-05-07 11:59:09'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the ENS node.', example='cn-hanghzou-27'),
      expiredTime?: string(name='ExpiredTime', description='The time when the instance expires.', example='2027-05-07 11:59:09'),
      latestAction?: string(name='LatestAction', description='The operation that was most recently performed.', example='ServerCreate'),
      name?: string(name='Name', description='The name of the server.', example='Server-Name'),
      namespace?: string(name='Namespace', description='The namespace of the cluster to which the server belongs.', example='default'),
      payType?: string(name='PayType', description='The billing method.', example='prepay'),
      serverId?: string(name='ServerId', description='The ID of the server.', example='cas-******'),
      specName?: string(name='SpecName', description='The server specification.', example='cas.cf53r'),
      state?: string(name='State', description='The operation status of the server. Valid values:

*   **success**
*   **failed**
*   **creating**
*   **releasing**
*   **rebooting**
*   **upgrading**', example='success'),
      status?: string(name='Status', description='The running status of the server. Valid values:

*   **running**
*   **stopping**
*   **down**
*   **starting**', example='running'),
    }
  ](name='Servers', description='The information about the servers and the AIC instances.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model DescribeARMServerInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeARMServerInstancesResponseBody(name='body'),
}

/**
 * @summary Queries information about ARM servers and Android in Container (AIC) instances.
 *
 * @param tmpReq DescribeARMServerInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeARMServerInstancesResponse
 */
async function describeARMServerInstancesWithOptions(tmpReq: DescribeARMServerInstancesRequest, runtime: Util.RuntimeOptions): DescribeARMServerInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeARMServerInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.AICSpecs)) {
    request.AICSpecsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.AICSpecs, 'AICSpecs', 'json');
  }
  if (!Util.isUnset(tmpReq.ensRegionIds)) {
    request.ensRegionIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ensRegionIds, 'EnsRegionIds', 'json');
  }
  if (!Util.isUnset(tmpReq.serverIds)) {
    request.serverIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.serverIds, 'ServerIds', 'json');
  }
  if (!Util.isUnset(tmpReq.serverSpecs)) {
    request.serverSpecsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.serverSpecs, 'ServerSpecs', 'json');
  }
  if (!Util.isUnset(tmpReq.states)) {
    request.statesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.states, 'States', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeARMServerInstances',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries information about ARM servers and Android in Container (AIC) instances.
 *
 * @param request DescribeARMServerInstancesRequest
 * @return DescribeARMServerInstancesResponse
 */
async function describeARMServerInstances(request: DescribeARMServerInstancesRequest): DescribeARMServerInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeARMServerInstancesWithOptions(request, runtime);
}

model DescribeApplicationRequest {
  appId?: string(name='AppId', description='The ID of the application. You can call the ListApplications operation to obtain the application ID.

This parameter is required.', example='a2bac6f4-75dc-455e-8389-2dc8e47526d3'),
  appVersions?: string(name='AppVersions', description='The version number of the application. Separate multiple version numbers with commas (,). If you want to query data of all versions of applications, specify All for this parameter. By default, only data of applications in the stable versions are queried.', example='v1,v2'),
  level?: string(name='Level', description='The region level by which edge resources of the application are collected. The value is of the enumeration type. Valid values:

*   National: Chinese mainland
*   Big: area
*   Middle: province
*   Small: city
*   RegionId: edge node

Default value: National.', example='National'),
  outDetailStatParams?: string(name='OutDetailStatParams', description='Specifies whether to return other information about the application, such as statistics on resource instances and pods. The value must be a JSON string. By default, all information is returned.', example='{\\\\"appInfo\\\\":true,\\\\"detailStat\\\\": true, \\\\"appVersionStat\\\\": true, \\\\"districtStat\\\\":true ,\\\\"instanceStat\\\\": true, \\\\"podCountStat\\\\": true}'),
  resourceSelector?: string(name='ResourceSelector', description='The resource filter.', example='[{\\\\"regionCode\\\\": \\\\"cn-wuxi-telecom_unicom_cmcc-3\\\\",    \\\\"ispCode\\\\": \\\\"telecom\\\\",    \\\\"count\\\\": 2	},{    \\\\"regionCode\\\\": \\\\"cn-shanghai-cmcc\\\\",    \\\\"count\\\\": 4	}]'),
}

model DescribeApplicationResponseBody = {
  application?: string(name='Application', description='The returned application information.', example='{
    "AppMetaData":{
        "AppId":"b0b27670-87d5-4c40-9ea8-adeeec2986ce",
        "AppName":"asp-yz",
        "ClusterName":"poc",
        "AppStableVersion":"0825",
        "AppType":"Scheduler",
        "Description":"Daily testing CPU environment",
        "CreateTime":"2020-08-25 16:36:16"
    },
    "AppStatus":{
        "Phase":"RUNNING",
        "StatusDescrip":"{\\\\"status\\\\":\\\\"UPDATE_SUCCESS\\\\",\\\\"step\\\\":\\\\"DONE\\\\",\\\\"descrip\\\\":\\\\"delVersion success\\\\",\\\\"start_time\\\\":\\\\"2021-08-18 14:46:45\\\\"}",
        "UpdateTime":"2021-08-18 14:46:45"
    },
    "ResourceAttribute":{
        "ResourceType":"Ens",
        "ResourceAgent":"Linux",
        "InstanceSpec":"ens.sn1.large",
        "SystemDiskSize":40,
        "DataDiskSize":0,
        "BandwithOut":10,
        "SchedulingStrategy":"Disperse",
        "AreaLevel":"RegionId",
        "IpType":"PublicIP"
    },
    "WorkloadAttribute":[
        {
            "Name":"andorid",
            "PodCount":7,
            "ServiceConfig":{
                "PortsBindConfig":{
                    "NetServiceContainer":"aspserver-android",
                    "Ports":[
                        {
                            "Protocol":"TCP",
                            "BindType":"PassThrough",
                            "StartNodePorts":"5000-5000",
                            "ContainerPorts":"5000-5000"
                        },
                        {
                            "Protocol":"UDP",
                            "BindType":"PassThrough",
                            "StartNodePorts":"4001-4010",
                            "ContainerPorts":"4001-4010"
                        }
                    ]
                },
                "ServiceContainerName":"android"
            }
        },
        {
            "Name":"aic-manager",
            "PodCount":1,
            "ServiceConfig":null
        }
    ],
    "DetailStat":{
        "Level":"Small",
        "InstanceTotalCount":1,
        "InstanceRunningCount":0,
        "PodCountStat":[
            {
                "Name":"andorid",
                "RunningCount":7,
                "ProducedCount":7,
                "Devices":null
            },
            {
                "Name":"aic-manager",
                "RunningCount":1,
                "ProducedCount":1,
                "Devices":null
            }
        ],
        "AppVersionStat":[
            {
                "AppVersion":"08102",
                "Descrip":"White Screen Test 2",
                "CreateTime":"2021-08-10 11:20:04",
                "InstanceTotalCount":1,
                "InstanceRunningCount":0,
                "PodCountStat":[
                    {
                        "Name":"andorid",
                        "RunningCount":7,
                        "ProducedCount":7,
                        "Devices":null
                    },
                    {
                        "Name":"aic-manager",
                        "RunningCount":1,
                        "ProducedCount":1,
                        "Devices":null
                    }
                ],
                "DistrictStat":[
                    {
                        "AreaCode":"310100",
                        "AreaName":"East China,,",
                        "RegionCode":"310100",
                        "RegionName":"",
                        "IspCode":"telecom",
                        "RegionIds":[
                            "cn-shanghai-telecom-2"
                        ],
                        "InstanceTotalCount":1,
                        "InstanceRunningCount":0,
                        "PodCountStat":[
                            {
                                "Name":"andorid",
                                "RunningCount":7,
                                "ProducedCount":7,
                                "Devices":null
                            },
                            {
                                "Name":"aic-manager",
                                "RunningCount":1,
                                "ProducedCount":1,
                                "Devices":null
                            }
                        ],
                        "InstanceStat":[
                            {
                                "InstanceId":"i-xxxxxxx",
                                "PublicIps":[
                                    {
                                        "PublicIp":"101.227.7.12",
                                        "Isp":"telecom"
                                    }
                                ],
                                "InternalIps":[
                                    {
                                        "Ip":"10.0.1.4"
                                    }
                                ],
                                "RegionId":"cn-shanghai-telecom-2",
                                "NcName":"",
                                "InstanceStatus":"",
                                "CreateTime":"2020-09-12 22:33:08",
                                "PodCountStat":[
                                    {
                                        "Name":"andorid",
                                        "RunningCount":7,
                                        "ProducedCount":7,
                                        "Devices":[
                                            {
                                                "Name":"asp-yz-andorid-08102-zjzmcyaw-0",
                                                "Status":"Running",
                                                "Ports":null
                                            },
                                            {
                                                "Name":"asp-yz-andorid-08102-zjzmcyaw-1",
                                                "Status":"Running",
                                                "Ports":null
                                            },
                                            {
                                                "Name":"asp-yz-andorid-08102-zjzmcyaw-2",
                                                "Status":"Running",
                                                "Ports":null
                                            },
                                            {
                                                "Name":"asp-yz-andorid-08102-zjzmcyaw-3",
                                                "Status":"Running",
                                                "Ports":null
                                            },
                                            {
                                                "Name":"asp-yz-andorid-08102-zjzmcyaw-4",
                                                "Status":"Running",
                                                "Ports":null
                                            },
                                            {
                                                "Name":"asp-yz-andorid-08102-zjzmcyaw-5",
                                                "Status":"Running",
                                                "Ports":null
                                            },
                                            {
                                                "Name":"asp-yz-andorid-08102-zjzmcyaw-6",
                                                "Status":"Running",
                                                "Ports":null
                                            }
                                        ]
                                    },
                                    {
                                        "Name":"aic-manager",
                                        "RunningCount":1,
                                        "ProducedCount":1,
                                        "Devices":[
                                            {
                                                "Name":"asp-yz-aic-manager-08102-zjzmcyaw-0",
                                                "Status":"Running",
                                                "Ports":null
                                            }
                                        ]
                                    }
                                ],
                                "AppVersionDescrip":""
                            }
                        ]
                    }
                ]
            }
        ]
    }
}'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApplicationResponseBody(name='body'),
}

/**
 * @summary Queries the basic properties, resources, and container status of an application.
 *
 * @param request DescribeApplicationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeApplicationResponse
 */
async function describeApplicationWithOptions(request: DescribeApplicationRequest, runtime: Util.RuntimeOptions): DescribeApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appVersions)) {
    query['AppVersions'] = request.appVersions;
  }
  if (!Util.isUnset(request.level)) {
    query['Level'] = request.level;
  }
  if (!Util.isUnset(request.outDetailStatParams)) {
    query['OutDetailStatParams'] = request.outDetailStatParams;
  }
  if (!Util.isUnset(request.resourceSelector)) {
    query['ResourceSelector'] = request.resourceSelector;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApplication',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the basic properties, resources, and container status of an application.
 *
 * @param request DescribeApplicationRequest
 * @return DescribeApplicationResponse
 */
async function describeApplication(request: DescribeApplicationRequest): DescribeApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApplicationWithOptions(request, runtime);
}

model DescribeAvailableResourceResponseBody = {
  code?: int32(name='Code', description='The returned service code. 0 indicates that the request was successful.', example='0'),
  images?: {
    image?: [ 
    {
      imageId?: string(name='ImageId', description='The ID of the image.', example='centos_6_08_64_20G_alibase_20171208'),
      imageName?: string(name='ImageName', description='The name of the image.', example='centos_6_08_64_20G_alibase_****'),
    }
  ](name='Image')
  }(name='Images', description='The details of the images.'),
  requestId?: string(name='RequestId', description='The ID of the request. This is a common parameter. Each request has a unique ID. You can use this ID to troubleshoot issues.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  supportResources?: {
    supportResource?: [ 
    {
      dataDiskSize?: string(name='DataDiskSize', description='The size of the data disk. Unit: GB.', example='500'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.', example='cn-beijing-cmcc'),
      instanceSpec?: string(name='InstanceSpec', description='The specifications of the resource plan.', example='ens.sn1.stiny'),
      supportResourcesCount?: string(name='SupportResourcesCount', description='The number of resources that you can purchase.', example='9'),
      systemDiskSize?: string(name='SystemDiskSize', description='The size of the system disk. Unit: GiB.', example='20'),
    }
  ](name='SupportResource')
  }(name='SupportResources', description='The specifications of resources that you can purchase.'),
}

model DescribeAvailableResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAvailableResourceResponseBody(name='body'),
}

/**
 * @summary Queries the resources that can be created.
 *
 * @param request DescribeAvailableResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAvailableResourceResponse
 */
async function describeAvailableResourceWithOptions(runtime: Util.RuntimeOptions): DescribeAvailableResourceResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeAvailableResource',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the resources that can be created.
 *
 * @return DescribeAvailableResourceResponse
 */
async function describeAvailableResource(): DescribeAvailableResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableResourceWithOptions(runtime);
}

model DescribeAvailableResourceInfoResponseBody = {
  images?: {
    image?: [ 
    {
      imageId?: string(name='ImageId', description='The ID of the image.', example='centos_6_08_64_20G_a****'),
      imageName?: string(name='ImageName', description='The name of the image.', example='centos_6_08_64_20G_a****'),
      imageSize?: int32(name='ImageSize', description='The size of the image. Unit: GB.', example='20'),
    }
  ](name='Image')
  }(name='Images', description='The information about the image.'),
  requestId?: string(name='RequestId', description='The request ID.', example='8629F679-B51D-4194-A1CC-5D8F504C362B'),
  supportResources?: {
    supportResource?: [ 
    {
      bandwidthTypes?: {
        bandwidthType?: [ string ](name='BandwidthType')
      }(name='BandwidthTypes', description='Bandwidth billing method.'),
      dataDiskMaxSize?: int32(name='DataDiskMaxSize', description='The maximum capacity of a data disk. Unit: GB.', example='200'),
      dataDiskMinSize?: int32(name='DataDiskMinSize', description='The minimum data disk size. Unit: GiB.', example='100'),
      ensRegionIds?: {
        ensRegionId?: [ string ](name='EnsRegionId')
      }(name='EnsRegionIds', description='node ID'),
      ensRegionIdsExtends?: {
        ensRegionId?: [ 
        {
          area?: string(name='Area', description='The region.', example='EastChina'),
          enName?: string(name='EnName', description='The name. This parameter is empty by default.', example='EnName'),
          ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.', example='cn-chengdu-telecom-4'),
          isp?: string(name='Isp', description='The information about the Internet service provider (ISP).', example='unicom'),
          name?: string(name='Name', description='The name of the edge node.', example='Taizhou Telecom, China Unicom, and China Mobile'),
          province?: string(name='Province', description='The province.', example='Zhejiang Province'),
        }
      ](name='EnsRegionId')
      }(name='EnsRegionIdsExtends', description='The supplementary information about the edge nodes.'),
      instanceSpeces?: {
        instanceSpec?: [ string ](name='InstanceSpec')
      }(name='InstanceSpeces'),
      isp?: {
        isp?: [ string ](name='Isp')
      }(name='Isp', description='Operator'),
      systemDiskMaxSize?: int32(name='SystemDiskMaxSize', description='The maximum size of the system disk. Unit: GiB.', example='100'),
      systemDiskMinSize?: int32(name='SystemDiskMinSize', description='The minimum capacity of a system disk. Unit: GB.', example='20'),
    }
  ](name='SupportResource')
  }(name='SupportResources', description='The specifications of resources that you can purchase.'),
}

model DescribeAvailableResourceInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAvailableResourceInfoResponseBody(name='body'),
}

/**
 * @summary Queries the specifications of resources that you can purchase when you create an instance.
 *
 * @param request DescribeAvailableResourceInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAvailableResourceInfoResponse
 */
async function describeAvailableResourceInfoWithOptions(runtime: Util.RuntimeOptions): DescribeAvailableResourceInfoResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeAvailableResourceInfo',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the specifications of resources that you can purchase when you create an instance.
 *
 * @return DescribeAvailableResourceInfoResponse
 */
async function describeAvailableResourceInfo(): DescribeAvailableResourceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableResourceInfoWithOptions(runtime);
}

model DescribeBandWithdChargeTypeResponseBody = {
  bandWithTypeInfo?: string(name='BandWithTypeInfo', description='The information about the metering method.', example='{ "BandWidthName": "Monthly peak bandwidth of 95", 			"BandWidthType": "95BandwidthByMonth" 		}'),
  chargeContractType?: string(name='ChargeContractType', description='The metering type.

*   ChargeByUnified: unified metering.
*   ChargeByGrade: differential metering.', example='ChargeByGrade'),
  chargeCycleInfo?: string(name='ChargeCycleInfo', description='The metering cycle. Currently, this parameter is empty in the response.', example='{null}'),
  code?: int32(name='Code', description='The returned service code. A value of 0 indicates that the operation was successful.', example='0'),
  requestId?: string(name='RequestId', description='The request ID.', example='791049FD-49CE-4667-BD6C-F23094DEDA7A'),
}

model DescribeBandWithdChargeTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBandWithdChargeTypeResponseBody(name='body'),
}

/**
 * @summary Queries available bandwidth metering methods.
 *
 * @param request DescribeBandWithdChargeTypeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeBandWithdChargeTypeResponse
 */
async function describeBandWithdChargeTypeWithOptions(runtime: Util.RuntimeOptions): DescribeBandWithdChargeTypeResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeBandWithdChargeType',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries available bandwidth metering methods.
 *
 * @return DescribeBandWithdChargeTypeResponse
 */
async function describeBandWithdChargeType(): DescribeBandWithdChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBandWithdChargeTypeWithOptions(runtime);
}

model DescribeBandwitdhByInternetChargeTypeRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query.

*   Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
*   If the value of the seconds place is not 00, the start time is automatically set to the next minute.

This parameter is required.', example='2022-01-18T09:39:54Z'),
  ensRegionId?: string(name='EnsRegionId', description='The region ID of the instance.', example='cn-hangzhou-cbn-2'),
  isp?: string(name='Isp', description='The Internet service provider (ISP). Valid values:

*   cmcc: China Mobile
*   telecom: China Telecom
*   unicom: China Unicom
*   multiCarrier: multi-line ISP', example='unicom'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.

*   Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
*   If the value of the seconds place is not 00, the start time is automatically set to the next minute.

This parameter is required.', example='2021-11-15T16:00:00Z'),
}

model DescribeBandwitdhByInternetChargeTypeResponseBody = {
  bandwidthValue?: long(name='BandwidthValue', description='The bandwidth. Unit: bit/s.', example='123'),
  internetChargeType?: string(name='InternetChargeType', description='The metering method. Valid values:

*   BandwidthByDay: Pay by daily peak bandwidth
*   95BandwidthByMonth: Pay by monthly 95th percentile bandwidth
*   PayByBandwidth4thMonth: Pay by monthly fourth peak bandwidth
*   PayByBandwidth: Pay by fixed bandwidth

You can specify only one metering method for network usage and cannot overwrite the existing metering method.', example='95BandwidthByMonth'),
  requestId?: string(name='RequestId', description='The ID of the request. This parameter is a common parameter. Each request has a unique ID. You can use the ID to troubleshoot issues.', example='08027633-8501-5A36-B90D-F7C38B5EC75D'),
  timeStamp?: string(name='TimeStamp', description='The timestamp. The time follows the ISO 8601 standard. The time is displayed in UTC. Example: 2016-10-20T04:00:00Z.', example='2019-10-12T05:45:00Z'),
}

model DescribeBandwitdhByInternetChargeTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBandwitdhByInternetChargeTypeResponseBody(name='body'),
}

/**
 * @summary Queries the metering method for the bandwidth.
 *
 * @param request DescribeBandwitdhByInternetChargeTypeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeBandwitdhByInternetChargeTypeResponse
 */
async function describeBandwitdhByInternetChargeTypeWithOptions(request: DescribeBandwitdhByInternetChargeTypeRequest, runtime: Util.RuntimeOptions): DescribeBandwitdhByInternetChargeTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.isp)) {
    query['Isp'] = request.isp;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBandwitdhByInternetChargeType',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the metering method for the bandwidth.
 *
 * @param request DescribeBandwitdhByInternetChargeTypeRequest
 * @return DescribeBandwitdhByInternetChargeTypeResponse
 */
async function describeBandwitdhByInternetChargeType(request: DescribeBandwitdhByInternetChargeTypeRequest): DescribeBandwitdhByInternetChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBandwitdhByInternetChargeTypeWithOptions(request, runtime);
}

model DescribeCloudDiskAvailableResourceInfoResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0AE4F26E-7527-569F-A987-E3CF269A3C11'),
  supportResources?: {
    supportResource?: [ 
    {
      ability?: {
        ability?: [ string ](name='Ability')
      }(name='Ability', description='Node product capability.'),
      canBuyCount?: long(name='CanBuyCount', description='The number of disks that you can purchase.', example='2'),
      category?: string(name='Category', description='The type of the disk.

*   cloud_efficiency:ultra disk.
*   cloud_ssd:all-flash disk.
*   local_hdd:local HDD.
*   local_ssd:local SSD.', example='cloud_ssd'),
      defaultDiskSize?: long(name='DefaultDiskSize', description='The default size of the disk. Unit: GiB.', example='20'),
      diskMaxSize?: long(name='DiskMaxSize', description='The maximum size of the disk. Unit: GiB.', example='80'),
      diskMinSize?: long(name='DiskMinSize', description='The minimum size of the disk size. Unit: GiB.', example='20'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.', example='cn-beijing-cmcc'),
      ensRegionName?: string(name='EnsRegionName', description='The name of the task node.', example='Beijing Mobile'),
    }
  ](name='SupportResource')
  }(name='SupportResources', description='The specifications of resources that you can purchase.'),
}

model DescribeCloudDiskAvailableResourceInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCloudDiskAvailableResourceInfoResponseBody(name='body'),
}

/**
 * @summary Queries the available resources in a region.
 *
 * @param request DescribeCloudDiskAvailableResourceInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeCloudDiskAvailableResourceInfoResponse
 */
async function describeCloudDiskAvailableResourceInfoWithOptions(runtime: Util.RuntimeOptions): DescribeCloudDiskAvailableResourceInfoResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeCloudDiskAvailableResourceInfo',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the available resources in a region.
 *
 * @return DescribeCloudDiskAvailableResourceInfoResponse
 */
async function describeCloudDiskAvailableResourceInfo(): DescribeCloudDiskAvailableResourceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudDiskAvailableResourceInfoWithOptions(runtime);
}

model DescribeCloudDiskTypesRequest {
  ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.', example='cn-chongqing-cmcc'),
  ensRegionIds?: [ string ](name='EnsRegionIds', description='The edge nodes.'),
}

model DescribeCloudDiskTypesShrinkRequest {
  ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.', example='cn-chongqing-cmcc'),
  ensRegionIdsShrink?: string(name='EnsRegionIds', description='The edge nodes.'),
}

model DescribeCloudDiskTypesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='77990CEE-B714-5702-BDE6-943F702277DD'),
  supportResources?: {
    supportResource?: [ 
    {
      category?: string(name='Category', description='The category of the disk.

*   cloud_efficiency: ultra disk.
*   cloud_ssd: all-flash disk.
*   local_hdd: local HDD.
*   local_ssd: local SSD.', example='cloud_efficiency'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.', example='cn-guangzhou-10'),
    }
  ](name='SupportResource')
  }(name='SupportResources', description='The specifications of resources that you can purchase.'),
}

model DescribeCloudDiskTypesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCloudDiskTypesResponseBody(name='body'),
}

/**
 * @summary The specifications of available resources are queried when you create a disk.
 *
 * @param tmpReq DescribeCloudDiskTypesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeCloudDiskTypesResponse
 */
async function describeCloudDiskTypesWithOptions(tmpReq: DescribeCloudDiskTypesRequest, runtime: Util.RuntimeOptions): DescribeCloudDiskTypesResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeCloudDiskTypesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ensRegionIds)) {
    request.ensRegionIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ensRegionIds, 'EnsRegionIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCloudDiskTypes',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary The specifications of available resources are queried when you create a disk.
 *
 * @param request DescribeCloudDiskTypesRequest
 * @return DescribeCloudDiskTypesResponse
 */
async function describeCloudDiskTypes(request: DescribeCloudDiskTypesRequest): DescribeCloudDiskTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudDiskTypesWithOptions(request, runtime);
}

model DescribeClusterRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='c8f0377146d104687ac562eef9403****'),
}

model DescribeClusterResponseBody = {
  clusters?: [ 
    {
      clusterId?: string(name='ClusterId', description='The cluster ID.', example='c8f0377146d104687ac562eef9403****'),
      currentVersion?: string(name='CurrentVersion', description='The version of the cluster.', example='1.18.8'),
      name?: string(name='Name', description='The cluster name.', example='vc-a622bb**'),
      nextVersion?: string(name='NextVersion', description='The next version of the cluster.', example='1.20.8'),
      status?: string(name='Status', description='The health status of the instance.

Valid values:

*   healthy
*   unhealthy', example='healthy'),
    }
  ](name='Clusters', description='An array that consists of the information about clusters.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DescribeClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeClusterResponseBody(name='body'),
}

/**
 * @summary Queries Container Service for Kubernetes (ACK) edge clusters.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 *
 * @param request DescribeClusterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeClusterResponse
 */
async function describeClusterWithOptions(request: DescribeClusterRequest, runtime: Util.RuntimeOptions): DescribeClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCluster',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries Container Service for Kubernetes (ACK) edge clusters.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 *
 * @param request DescribeClusterRequest
 * @return DescribeClusterResponse
 */
async function describeCluster(request: DescribeClusterRequest): DescribeClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterWithOptions(request, runtime);
}

model DescribeClusterKubeConfigRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='c8f0377146d104687ac562eef9403****'),
}

model DescribeClusterKubeConfigResponseBody = {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='c8f0377146d104687ac562eef9403****'),
  kubeconfig?: string(name='Kubeconfig', description='The cluster certificate.', example='apiVersion: v1
clusters:
- cluster:
    certificate-authority-data:***
    server: https://****:6443
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: "2580306074811*****"
  name: 258*******
kind: Config
users:
- name: "2580306074811*****"
  user:
    client-certificate-data:***
    client-key-data: ***'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeClusterKubeConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeClusterKubeConfigResponseBody(name='body'),
}

/**
 * @summary Queries the certificate of a Container Service for Kubernetes (ACK) edge cluster.
 *
 * @description *   The maximum number of times that each user can call this operation per second is 100.
 *
 * @param request DescribeClusterKubeConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeClusterKubeConfigResponse
 */
async function describeClusterKubeConfigWithOptions(request: DescribeClusterKubeConfigRequest, runtime: Util.RuntimeOptions): DescribeClusterKubeConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterKubeConfig',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the certificate of a Container Service for Kubernetes (ACK) edge cluster.
 *
 * @description *   The maximum number of times that each user can call this operation per second is 100.
 *
 * @param request DescribeClusterKubeConfigRequest
 * @return DescribeClusterKubeConfigResponse
 */
async function describeClusterKubeConfig(request: DescribeClusterKubeConfigRequest): DescribeClusterKubeConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterKubeConfigWithOptions(request, runtime);
}

model DescribeCreatePrePaidInstanceResultRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance. You can call the CreateIntance operation to create an instance.

This parameter is required.', example='i-6ecpqvkicnchxccozrp****'),
}

model DescribeCreatePrePaidInstanceResultResponseBody = {
  instanceCreateResult?: {
    instanceCreateStatus?: string(name='InstanceCreateStatus', description='The status of the instance creation.

*   Accepted
*   Creating
*   Failed
*   Successed', example='Successed'),
    instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-6ecpqvkicnchxccozrpxxxx'),
  }(name='InstanceCreateResult', description='Returned results of creating an instance.'),
  requestId?: string(name='RequestId', description='The request ID.', example='AAE90880-4970-4D81-A534-A6C0F3631F74'),
}

model DescribeCreatePrePaidInstanceResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCreatePrePaidInstanceResultResponseBody(name='body'),
}

/**
 * @summary Queries the results of creating an instance.
 *
 * @param request DescribeCreatePrePaidInstanceResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeCreatePrePaidInstanceResultResponse
 */
async function describeCreatePrePaidInstanceResultWithOptions(request: DescribeCreatePrePaidInstanceResultRequest, runtime: Util.RuntimeOptions): DescribeCreatePrePaidInstanceResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCreatePrePaidInstanceResult',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the results of creating an instance.
 *
 * @param request DescribeCreatePrePaidInstanceResultRequest
 * @return DescribeCreatePrePaidInstanceResultResponse
 */
async function describeCreatePrePaidInstanceResult(request: DescribeCreatePrePaidInstanceResultRequest): DescribeCreatePrePaidInstanceResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCreatePrePaidInstanceResultWithOptions(request, runtime);
}

model DescribeDataDistResultRequest {
  appId?: string(name='AppId', description='The ID of the application.

This parameter is required.', example='e76f8985-7965-41fc-925b-9648bb6bf650'),
  dataNames?: string(name='DataNames', description='The name of the data file. Separate multiple names with commas (,). By default, all data files are queried.', example='cloudgame-shanghai/deploy_app/20220215/1644895216305ACG_M21B-ota-1.1.2-D-0215.0628_V1_0002-pre-weiduan.zip'),
  dataVersions?: string(name='DataVersions', description='The version number of the data file. Separate multiple numbers with commas (,). By default, all versions of data files are queried.', example='4885'),
  ensRegionIds?: [ string ](name='EnsRegionIds', description='The IDs of the ENS nodes.'),
  instanceIds?: string(name='InstanceIds', description='The IDs of ENS instances. Separate multiple IDs with commas (,). By default, all instances are queried.', example='i-7ecpqvkicnchxccozrp,i-6ecpqvkicnchxccozrp'),
  maxDate?: string(name='MaxDate', description='The end of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.', example='2022-02-01'),
  minDate?: string(name='MinDate', description='The beginning of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.', example='2022-01-02'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. This parameter is optional if you want to return the distribution status of all data files.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. This parameter is optional if you want to return the distribution status of all data files.', example='10'),
}

model DescribeDataDistResultShrinkRequest {
  appId?: string(name='AppId', description='The ID of the application.

This parameter is required.', example='e76f8985-7965-41fc-925b-9648bb6bf650'),
  dataNames?: string(name='DataNames', description='The name of the data file. Separate multiple names with commas (,). By default, all data files are queried.', example='cloudgame-shanghai/deploy_app/20220215/1644895216305ACG_M21B-ota-1.1.2-D-0215.0628_V1_0002-pre-weiduan.zip'),
  dataVersions?: string(name='DataVersions', description='The version number of the data file. Separate multiple numbers with commas (,). By default, all versions of data files are queried.', example='4885'),
  ensRegionIdsShrink?: string(name='EnsRegionIds', description='The IDs of the ENS nodes.'),
  instanceIds?: string(name='InstanceIds', description='The IDs of ENS instances. Separate multiple IDs with commas (,). By default, all instances are queried.', example='i-7ecpqvkicnchxccozrp,i-6ecpqvkicnchxccozrp'),
  maxDate?: string(name='MaxDate', description='The end of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.', example='2022-02-01'),
  minDate?: string(name='MinDate', description='The beginning of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.', example='2022-01-02'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. This parameter is optional if you want to return the distribution status of all data files.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. This parameter is optional if you want to return the distribution status of all data files.', example='10'),
}

model DescribeDataDistResultResponseBody = {
  distResults?: {
    distResult?: [ 
    {
      name?: string(name='Name', description='The name of the data file.', example='gcs-prod-websocket-eip-unicom'),
      statusStats?: {
        statusStat?: [ 
        {
          instanceCount?: string(name='InstanceCount', description='The number of associated edge instances.', example='10'),
          instances?: {
            instance?: [ 
            {
              instanceId?: string(name='InstanceId', description='The ID of the instance', example='i-5qzje8f5un1wmi341m2yetaxv'),
              startTime?: string(name='StartTime', description='The start time of the distribution. The time is displayed in UTC.', example='2021-11-19T07:24:52Z'),
              statusDescrip?: string(name='StatusDescrip', description='The description of the distribution status.', example='SUCCESS'),
              updateTime?: string(name='UpdateTime', description='The time when the distribution status was last updated. The time is displayed in UTC.', example='2021-10-11T02:38:19Z'),
            }
          ](name='Instance')
          }(name='Instances', description='The distribution status of the edge instance.'),
          status?: string(name='Status', description='The distribution status. The value is of the enumeration type. Valid values:

*   SUCCESS: The distribution is successful.
*   FAILED: The distribution failed.
*   DISTING: The data is being distributed.
*   POD_RESTARTING: The idle pod is being restarted.
*   DELETED: The data is cleared or removed.', example='SUCCESS'),
        }
      ](name='StatusStat')
      }(name='StatusStats', description='The distribution status statistics.'),
      version?: string(name='Version', description='The version number of the data file.', example='standard'),
    }
  ](name='DistResult')
  }(name='DistResults', description='The distribution status of data files on edge instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='50373E71-7710-4620-8AAB-133CCE49451C'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='49'),
}

model DescribeDataDistResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDataDistResultResponseBody(name='body'),
}

/**
 * @summary Queries the distribution status of data files on edge instances of an application.
 *
 * @param tmpReq DescribeDataDistResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDataDistResultResponse
 */
async function describeDataDistResultWithOptions(tmpReq: DescribeDataDistResultRequest, runtime: Util.RuntimeOptions): DescribeDataDistResultResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeDataDistResultShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ensRegionIds)) {
    request.ensRegionIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ensRegionIds, 'EnsRegionIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.dataNames)) {
    query['DataNames'] = request.dataNames;
  }
  if (!Util.isUnset(request.dataVersions)) {
    query['DataVersions'] = request.dataVersions;
  }
  if (!Util.isUnset(request.ensRegionIdsShrink)) {
    query['EnsRegionIds'] = request.ensRegionIdsShrink;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.maxDate)) {
    query['MaxDate'] = request.maxDate;
  }
  if (!Util.isUnset(request.minDate)) {
    query['MinDate'] = request.minDate;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDataDistResult',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the distribution status of data files on edge instances of an application.
 *
 * @param request DescribeDataDistResultRequest
 * @return DescribeDataDistResultResponse
 */
async function describeDataDistResult(request: DescribeDataDistResultRequest): DescribeDataDistResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataDistResultWithOptions(request, runtime);
}

model DescribeDataDownloadURLRequest {
  appId?: string(name='AppId', description='The ID of the application.

This parameter is required.', example='474bdef0-d149-4695-abfb-52912d9143f0'),
  dataName?: string(name='DataName', description='The name of the data file.

This parameter is required.', example='mirror_file/pk-1642597182026-878199448832413.tar'),
  dataVersion?: string(name='DataVersion', description='The version number of the data file.

This parameter is required.', example='7895'),
  expireTimeout?: long(name='ExpireTimeout', description='This parameter is reserved.', example='600'),
  serverFilterStrategy?: string(name='ServerFilterStrategy', description='The condition that you want to use to filter file servers. You can specify multiple canary release policies. By default, all resources are queried.', example='{\\\\"name\\\\": \\\\"ScheduleToRegionId\\\\",\\\\"parameters\\\\":{\\\\"operator\\\\": \\\\"In\\\\",\\\\"values\\\\": [\\\\"cn-shijiazhuang-telecom_unicom_cmcc\\\\"]}}'),
}

model DescribeDataDownloadURLResponseBody = {
  code?: long(name='Code', description='The HTTP status code.', example='0'),
  data?: {
    expireTime?: string(name='ExpireTime', description='The time when the data file expires. The time is displayed in UTC.', example='2021-12-10T03:36:27Z'),
    serverList?: [ 
      {
        host?: string(name='Host', description='The host address of the file server.', example='1.1.1.1:8080'),
        regionId?: string(name='RegionId', description='The ID of the Edge Node Service (ENS) node.', example='cn-chenzhou-5'),
      }
    ](name='ServerList', description='The file servers.'),
    url?: string(name='Url', description='The download URL of the data file.', example='/file/1450088842124331/97a32f2a-aa2c-436a-b19c-05b20d258618/f0313053530fc727f81b7d03fad93cd2/e4c2e8edac362acab7123654b9e73432?ak=edgepaas-innerapi-daily&ts=1611229454&sign=Yycbax%2F4OsTgm6BLoxR6lPs5gKE%3D'),
  }(name='Data', description='The download URLs of data files.'),
  message?: string(name='Message', description='The response message. Success is returned for a successful request.', example='Success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeDataDownloadURLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDataDownloadURLResponseBody(name='body'),
}

/**
 * @summary Queries the download URLs of application data on file servers and returns the file servers on which data is pushed.
 *
 * @param request DescribeDataDownloadURLRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDataDownloadURLResponse
 */
async function describeDataDownloadURLWithOptions(request: DescribeDataDownloadURLRequest, runtime: Util.RuntimeOptions): DescribeDataDownloadURLResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDataDownloadURL',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the download URLs of application data on file servers and returns the file servers on which data is pushed.
 *
 * @param request DescribeDataDownloadURLRequest
 * @return DescribeDataDownloadURLResponse
 */
async function describeDataDownloadURL(request: DescribeDataDownloadURLRequest): DescribeDataDownloadURLResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataDownloadURLWithOptions(request, runtime);
}

model DescribeDataPushResultRequest {
  appId?: string(name='AppId', description='The ID of the application.

This parameter is required.', example='e76f8985-7965-41fc-925b-9648bb6bf650'),
  dataNames?: string(name='DataNames', description='The name of the data file. Separate multiple names with commas (,). By default, all data files are queried.', example='159828628258496/mirror_file/game-2553efe7-7bf8-40fb-a6e7-09c9c00a992a.tar'),
  dataVersions?: string(name='DataVersions', description='The version number of the data file. Separate multiple numbers with commas (,). By default, all versions of data files are queried.', example='90396'),
  maxDate?: string(name='MaxDate', description='The end of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.', example='2022-02-20'),
  minDate?: string(name='MinDate', description='The beginning of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.', example='2022-02-15'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. This parameter is optional if you want to return the push status of all data files.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. This parameter is optional if you want to return the push status of all data files.', example='10'),
  regionIds?: string(name='RegionIds', description='The IDs of ENS nodes. Separate multiple IDs with commas (,). By default, all ENS nodes are queried.', example='cn-wuhan-telecom_unicom_cmcc-2,cn-jiaozuo-2'),
}

model DescribeDataPushResultResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  pushResults?: {
    pushResult?: [ 
    {
      name?: string(name='Name', description='The name of the data file.', example='gcs-pre-websocket-eip-telecom'),
      statusStatS?: {
        statusStat?: [ 
        {
          regionIdCount?: int32(name='RegionIdCount', description='The total number of ENS nodes.', example='2'),
          regionIds?: {
            regionId?: [ 
            {
              regionId?: string(name='RegionId', description='The ID of the ENS node.', example='cn-wuxi-5'),
              startTime?: string(name='StartTime', description='The start time of the push operation. The time is displayed in UTC.', example='2021-12-28T16:00:00Z'),
              statusDescrip?: string(name='StatusDescrip', description='The description of the status.', example='Success'),
              updateTime?: string(name='UpdateTime', description='The time when the status was last updated. The time is displayed in UTC.', example='2021-12-07T02:37:10Z'),
            }
          ](name='RegionId')
          }(name='RegionIds', description='The push status of data files on the ENS node.'),
          status?: string(name='Status', description='The push status. The value is of the enumeration type. Valid values: SUCCESS FAILED PUSHING', example='FAILED'),
        }
      ](name='StatusStat')
      }(name='StatusStatS', description='The push status of data files.'),
      version?: string(name='Version', description='The version number of the data file.', example='standard'),
    }
  ](name='PushResult')
  }(name='PushResults', description='The push results of data files.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='6'),
}

model DescribeDataPushResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDataPushResultResponseBody(name='body'),
}

/**
 * @summary Queries the push status of application data files on Edge Node Service (ENS) nodes.
 *
 * @param request DescribeDataPushResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDataPushResultResponse
 */
async function describeDataPushResultWithOptions(request: DescribeDataPushResultRequest, runtime: Util.RuntimeOptions): DescribeDataPushResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.dataNames)) {
    query['DataNames'] = request.dataNames;
  }
  if (!Util.isUnset(request.dataVersions)) {
    query['DataVersions'] = request.dataVersions;
  }
  if (!Util.isUnset(request.maxDate)) {
    query['MaxDate'] = request.maxDate;
  }
  if (!Util.isUnset(request.minDate)) {
    query['MinDate'] = request.minDate;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionIds)) {
    query['RegionIds'] = request.regionIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDataPushResult',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the push status of application data files on Edge Node Service (ENS) nodes.
 *
 * @param request DescribeDataPushResultRequest
 * @return DescribeDataPushResultResponse
 */
async function describeDataPushResult(request: DescribeDataPushResultRequest): DescribeDataPushResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataPushResultWithOptions(request, runtime);
}

model DescribeDeviceServiceRequest {
  appId?: string(name='AppId', description='The ID of the application.', example='a2bac6f4-75dc-455e-8389-2dc8e47526d3'),
  ensRegionId?: string(name='EnsRegionId', description='This parameter does not take effect.', example='cn-chongqing-10'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-5sg1owx0g4ojy66ab2tez77r2'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='2661b1dd-3453-418d-8182-bb34f79e8d3c'),
  regionId?: string(name='RegionId', description='The ID of the Edge Node Service (ENS) node.', example='cn-chongqing-11'),
  serviceId?: string(name='ServiceId', description='Service ID', example='s-cxxxxx'),
}

model DescribeDeviceServiceResponseBody = {
  appMetaData?: {
    appId?: string(name='AppId', description='The ID of the application.', example='97a32f2a-aa2c-436a-b19c-05b20d258618'),
    appName?: string(name='AppName', description='The name of the application.', example='iotx-api-admin'),
    appStableVersion?: string(name='AppStableVersion', description='The stable version number of the application.', example='v1'),
    appType?: string(name='AppType', description='The type of the application. The value is of the enumeration type. Valid values:

*   Common
*   Scheduler', example='Common'),
    clusterName?: string(name='ClusterName', description='The name of the application cluster.', example='poc'),
    createTime?: string(name='CreateTime', description='The time when the application was created.', example='2022-03-03T03:42:11'),
    description?: string(name='Description', description='The description of the application.', example='test application'),
  }(name='AppMetaData', description='The basic properties of the application.'),
  appStatus?: {
    phase?: string(name='Phase', description='The status of the application. The value is of the enumeration type. Valid values:

Three intermediate states:

*   CREATING
*   UPDATING
*   DELETING

Four final states:

*   CREATE_FAILED
*   UPDATE_FAILED
*   DELETE_FAILED
*   RUNNING', example='CREATING'),
    statusDescrip?: string(name='StatusDescrip', description='The description of the application status.', example='Creating in progress'),
    updateTime?: string(name='UpdateTime', description='The time when the status was last updated.', example='2021-01-26T05:04Z'),
  }(name='AppStatus', description='The status information of the application.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3A535110-3EE3-5EC5-B1ED-10B7067A1FC8'),
  resourceDetailInfos?: [ 
    {
      deviceName?: string(name='DeviceName', description='The name of the device.', example='5JhF100NEgdBcpNren32'),
      ID?: string(name='ID', description='The ID of the cloud device.', example='h-uf6009zoaexs5pefypbo'),
      IP?: string(name='IP', description='The IP address.', example='120.27.219.219'),
      ISP?: string(name='ISP', description='The Internet service provider (ISP).', example='cmcc'),
      imageID?: string(name='ImageID', description='The ID of the image.', example='m-2ze40oyhjorpyw61k7be'),
      mac?: string(name='Mac', description='The media access control (MAC) address of the device.', example='AA:BB:77:88:99:03'),
      regionID?: string(name='RegionID', description='The ID of the ENS node.', example='cn-jiaozuo-2'),
      server?: string(name='Server', description='The server name of the ENS node.', example='ens-nc2'),
      status?: string(name='Status', description='The status of the device.', example='Running'),
      type?: string(name='Type', description='The type of the device.', example='ens.ac6.large'),
    }
  ](name='ResourceDetailInfos', description='The information about the devices.'),
  resourceInfos?: [ 
    {
      appVersion?: string(name='AppVersion', description='The version of the application.', example='v1'),
      areaCode?: string(name='AreaCode', description='The area code.', example='410800'),
      areaName?: string(name='AreaName', description='The region name.', example='Jiaozuo City, Henan Province, Central China'),
      createTime?: string(name='CreateTime', description='The time when the application was created.', example='2019-10-02T08:26Z'),
      deviceInfos?: [ 
        {
          name?: string(name='Name', description='The name of the device.', example='test-api'),
          network?: [ 
            {
              containerPorts?: string(name='ContainerPorts', description='The port of the container.', example='10000-10010'),
              externalIp?: string(name='ExternalIp', description='The public IP address.', example='39.105.62.120'),
              hostPorts?: string(name='HostPorts', description='The port range.', example='80-8080'),
              protocol?: string(name='Protocol', description='The protocol of the gateway. The value is of the enumeration type. Valid values:

*   TCP
*   UDP', example='TCP'),
            }
          ](name='Network', description='The network information.'),
          status?: string(name='Status', description='The status.', example='Running'),
        }
      ](name='DeviceInfos', description='The information about the devices.'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-5s9boobrmh5000kv4jmi0oeai'),
      instanceStatus?: string(name='InstanceStatus', description='The status of the instance.', example='Running'),
      internalIps?: [ 
        {
          ip?: string(name='Ip', description='The internal IP address.', example='10.0.2.3'),
        }
      ](name='InternalIps', description='The internal IP addresses.'),
      publicIps?: [ 
        {
          ip?: string(name='Ip', description='The public IP address.', example='122.13.173.137'),
        }
      ](name='PublicIps', description='The public IP addresses.'),
      regionCode?: string(name='RegionCode', description='The ID of the region.', example='cn-jiaozuo-2'),
      regionId?: string(name='RegionId', description='The ID of the ENS node.', example='cn-jiaozuo-2'),
      regionName?: string(name='RegionName', description='The name of the region.', example='China Jiaozuo-2'),
    }
  ](name='ResourceInfos', description='The information about the instances.'),
}

model DescribeDeviceServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDeviceServiceResponseBody(name='body'),
}

/**
 * @summary Queries the properties of instances and virtual devices in a specific edge application.
 *
 * @param request DescribeDeviceServiceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDeviceServiceResponse
 */
async function describeDeviceServiceWithOptions(request: DescribeDeviceServiceRequest, runtime: Util.RuntimeOptions): DescribeDeviceServiceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDeviceService',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the properties of instances and virtual devices in a specific edge application.
 *
 * @param request DescribeDeviceServiceRequest
 * @return DescribeDeviceServiceResponse
 */
async function describeDeviceService(request: DescribeDeviceServiceRequest): DescribeDeviceServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeviceServiceWithOptions(request, runtime);
}

model DescribeDiskIopsListRequest {
  diskId?: string(name='DiskId', description='The ID of the disk. Format: d-\\\\*\\\\*\\\\*\\\\*\\\\*\\\\*\\\\*\\\\*\\\\*\\\\*\\\\*.

This parameter is required.', example='d-5tzm9wnhzlhjzcbtxo465****'),
  endTime?: string(name='EndTime', description='The beginning of the time range to query. Specify the time in the format of yyyy-MM-dd HH:mm:ss. The time range specified by the StartTime and EndTime parameters cannot exceed one day for a query.

This parameter is required.', example='2023-12-14 23:59:59'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the format of yyyy-MM-dd HH:mm:ss.

This parameter is required.', example='2023-12-14 00:00:00'),
}

model DescribeDiskIopsListResponseBody = {
  diskIopsList?: [ 
    {
      bizTime?: string(name='BizTime', description='The business time . The time is displayed in the yyyy-MM-dd HH:mm:ss.', example='2023-12-14 00:00:00'),
      diskId?: string(name='DiskId', description='The ID of the disk.', example='d-5tzm9wnhzlhjzcbtxo465****'),
      readBytes?: long(name='ReadBytes', description='The read throughput. Unit: bytes.', example='10054'),
      readLatency?: long(name='ReadLatency', description='The read latency. Unit: ms.', example='15646532'),
      readOps?: long(name='ReadOps', description='The read IOPS.', example='4'),
      regionId?: string(name='RegionId', description='The ID of the node.', example='cn-hangzhou-3'),
      writeBytes?: long(name='WriteBytes', description='The write throughput. Unit: bytes.', example='0'),
      writeLatency?: long(name='WriteLatency', description='The write latency. Unit: microseconds.', example='0'),
      writeOps?: long(name='WriteOps', description='The write IOPS.', example='0'),
    }
  ](name='DiskIopsList', description='The IOPS monitoring data of the cloud disk.'),
  requestId?: string(name='RequestId', description='Id of the request', example='A7814CAB-DB4E-140A-9D6F-7C8210C1DAC3'),
}

model DescribeDiskIopsListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDiskIopsListResponseBody(name='body'),
}

/**
 * @summary Queries the disk IOPS monitoring data.
 *
 * @param request DescribeDiskIopsListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDiskIopsListResponse
 */
async function describeDiskIopsListWithOptions(request: DescribeDiskIopsListRequest, runtime: Util.RuntimeOptions): DescribeDiskIopsListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiskIopsList',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the disk IOPS monitoring data.
 *
 * @param request DescribeDiskIopsListRequest
 * @return DescribeDiskIopsListResponse
 */
async function describeDiskIopsList(request: DescribeDiskIopsListRequest): DescribeDiskIopsListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiskIopsListWithOptions(request, runtime);
}

model DescribeDisksRequest {
  category?: string(name='Category', description='The category of the disk.

*   cloud_efficiency: ultra disk.
*   cloud_ssd: all-flash disk.
*   local_hdd: local HDD.
*   local_ssd: local SSD.', example='local_ssd'),
  diskChargeType?: string(name='DiskChargeType', description='The billing method.

*   prePay: subscription.
*   postpay: pay-as-you-go.', example='prepay'),
  diskId?: string(name='DiskId', description='The ID of the disk.', example='d-5soak1gqa507lyfzvz0xo****'),
  diskIds?: string(name='DiskIds', description='The ID of the disk.', example='[\\\\"d-wz99njena32z90ki****\\\\"]'),
  diskName?: string(name='DiskName', description='The name of the disk.', example='DiskName'),
  diskType?: string(name='DiskType', description='The purchase method of the disk. Valid values:

*   ServiceDisk: The disk is purchased when ENS is activated.
*   ResoureDisk: The disk is purchased when the instance is created.
*   PostPayDisk: The disk is separately purchased.', example='PostPayDisk'),
  ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.', example='cn-kunming-telecom'),
  ensRegionIds?: string(name='EnsRegionIds', description='The node information.', example='["cn-suzhou-telecom","cn-chengdu-telecom"]'),
  instanceId?: string(name='InstanceId', description='The ID of the instance to which the disk is attached.', example='i-5t77rb0yoz79m28ku60sx****'),
  orderByParams?: string(name='OrderByParams', description='The order in which you want to sort the returned data. Example: {"EnsRegionId":"desc"}. By default, the nodes are sorted by IDs in descending order.', example='{ "DiskNameSort":"desc","EnsRegionIdSort":"asc" }'),
  pageNumber?: string(name='PageNumber', description='The number of the page to return. Pages start from page **1**.

Default value: **1**.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Maximum value: **50**.

Default value: **10**.', example='10'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='s-897654321****'),
  status?: string(name='Status', description='The status of the disk. Valid values:

*   In-use: The disk is in use.
*   Available: The disk can be attached.
*   Attaching: The disk is being attached.
*   Detaching: The disk is being detached.
*   Creating: The disk is being created.
*   ReIniting: The disk is being reset.
*   Deleting: The disk is being released.
*   Deleted: The disk is released.
*   Expiring: The disk is about to expire.', example='Available'),
  type?: string(name='Type', description='The type of the disk. Valid values:

*   system: system disk.
*   data: data disk.', example='system'),
}

model DescribeDisksResponseBody = {
  code?: int32(name='Code', description='The returned service code. 0 indicates that the request was successful.', example='0'),
  disks?: {
    disks?: [ 
    {
      category?: string(name='Category', description='The category of the disk.

*   cloud_efficiency: ultra disk.
*   cloud_ssd: all-flash disk.
*   local_hdd: local HDD.
*   local_ssd: local SSD.', example='local_ssd'),
      creationTime?: string(name='CreationTime', description='The time when the disk was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2021-11-11T14:34:55+08:00'),
      deleteWithInstance?: boolean(name='DeleteWithInstance', description='Specifies whether the disk to be attached is released with the instance. Valid values:

*   true: The disk will be released when the ECS instance is released.
*   false: The disk will be retained when the ECS instance is released.
*   If you leave this parameter empty, the default value is used.', example='false'),
      description?: string(name='Description', description='The namespace description.', example='disk-description'),
      diskChargeType?: string(name='DiskChargeType', description='The billing method of the cloud disk or local disk. Valid values:

*   **prepaid**: subscription.
*   **postpaid**: pay-as-you-go.', example='prepaid'),
      diskId?: string(name='DiskId', description='The ID of the disk.', example='d-5svum1dx1w4a4spr54lgr****'),
      diskName?: string(name='DiskName', description='The name of the disk.', example='fvt-ecs-5cf0****'),
      encrypted?: boolean(name='Encrypted', description='Indicates whether the cloud disk is encrypted. Valid values:

*   **true**
*   **false**', example='False'),
      encryptedKeyId?: string(name='EncryptedKeyId', description='The ID of the Key Management Service (KMS) key that is used for the cloud disk.', example='05467897a-4262-4802-b8cb-00d3fb40****'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.', example='cn-guangzhou-10'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-5t77rb0yoz79m28ku60sx****'),
      instanceName?: string(name='InstanceName', description='The name of the instance.', example='Edge Prod Environment Streaming Machine -1063'),
      portable?: boolean(name='Portable', description='Indicates whether the cloud disk or local disk is removable. Valid values:

*   true: The disk is removable. A removable disk can independently exist and can be attached to or detached from an instance within the same zone.
*   false: The disk is not removable. A disk that is not removable cannot independently exist or be attached to or detached from an instance within the same zone.

If disks are of the following categories or types, the **Portable** value is **false** and the disks have the same lifecycle as their attached instances:

*   Local HDDs
*   Local SSDs
*   Data disks that use the subscription billing method', example='true'),
      serialId?: string(name='SerialId', description='The serial number.', example='123'),
      size?: int32(name='Size', description='The size of the disk. Unit: MiB.', example='20'),
      snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='s-bp67acfmxazb4p****'),
      status?: string(name='Status', description='The status of the disk. Valid values:

*   In-use: The disk is in use.
*   Available: The disk can be attached.
*   Attaching: The disk is being attached.
*   Detaching: The disk is being detached.
*   Creating: The disk is being created.
*   ReIniting: The disk is being reset.', example='Available'),
      type?: string(name='Type', description='The type of the cloud disk or local disk. Valid values:

*   1: system disk.
*   2: data disk.', example='1'),
    }
  ](name='Disks')
  }(name='Disks', description='The information about the disks.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Maximum value: **50**. Default value: **10**.', example='50'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  totalCount?: int32(name='TotalCount', description='The total number of returned pages.', example='13'),
}

model DescribeDisksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDisksResponseBody(name='body'),
}

/**
 * @summary Queries the information about one or more disks.
 *
 * @param request DescribeDisksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDisksResponse
 */
async function describeDisksWithOptions(request: DescribeDisksRequest, runtime: Util.RuntimeOptions): DescribeDisksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.diskChargeType)) {
    query['DiskChargeType'] = request.diskChargeType;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.diskIds)) {
    query['DiskIds'] = request.diskIds;
  }
  if (!Util.isUnset(request.diskName)) {
    query['DiskName'] = request.diskName;
  }
  if (!Util.isUnset(request.diskType)) {
    query['DiskType'] = request.diskType;
  }
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.ensRegionIds)) {
    query['EnsRegionIds'] = request.ensRegionIds;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.orderByParams)) {
    query['OrderByParams'] = request.orderByParams;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDisks',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about one or more disks.
 *
 * @param request DescribeDisksRequest
 * @return DescribeDisksResponse
 */
async function describeDisks(request: DescribeDisksRequest): DescribeDisksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDisksWithOptions(request, runtime);
}

model DescribeElbAvailableResourceInfoResponseBody = {
  elbAvailableResourceInfo?: [ 
    {
      ability?: [ string ](name='Ability'),
      area?: string(name='Area', description='The ID of the region.', example='SouthEast'),
      canBuyCount?: string(name='CanBuyCount', description='The number of resources that you can purchase.', example='1'),
      enName?: string(name='EnName', description='The name of the node.', example='cn-guangdong-10'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the Edge Node Service (ENS) node.', example='cn-guangdong-10'),
      loadBalancerSpec?: [ string ](name='LoadBalancerSpec', description='The specifications of the ELB instances.'),
      name?: string(name='Name', description='The Chinese name of the node.', example='test'),
      province?: string(name='Province', description='The province where the node is deployed.', example='Shanghai'),
    }
  ](name='ElbAvailableResourceInfo', description='The information about resources.'),
  requestId?: string(name='RequestId', description='The ID of the request. This parameter is a common parameter. Each request has a unique ID. You can use the ID to troubleshoot issues.', example='25AAD194-4A37-51CF-B1CA-1E86FDAC23A6'),
}

model DescribeElbAvailableResourceInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeElbAvailableResourceInfoResponseBody(name='body'),
}

/**
 * @summary Queries the specifications of resources that you can purchase when you create an instance.
 *
 * @param request DescribeElbAvailableResourceInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeElbAvailableResourceInfoResponse
 */
async function describeElbAvailableResourceInfoWithOptions(runtime: Util.RuntimeOptions): DescribeElbAvailableResourceInfoResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeElbAvailableResourceInfo',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the specifications of resources that you can purchase when you create an instance.
 *
 * @return DescribeElbAvailableResourceInfoResponse
 */
async function describeElbAvailableResourceInfo(): DescribeElbAvailableResourceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeElbAvailableResourceInfoWithOptions(runtime);
}

model DescribeEnsCommodityCodeRequest {
  commodityCode?: string(name='CommodityCode'),
}

model DescribeEnsCommodityCodeResponseBody = {
  commodityCodeInfo?: [ 
    {
      commodityCode?: string(name='CommodityCode'),
      commodityName?: string(name='CommodityName'),
    }
  ](name='CommodityCodeInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeEnsCommodityCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEnsCommodityCodeResponseBody(name='body'),
}

/**
 * @summary 描述商品code
 *
 * @param request DescribeEnsCommodityCodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEnsCommodityCodeResponse
 */
async function describeEnsCommodityCodeWithOptions(request: DescribeEnsCommodityCodeRequest, runtime: Util.RuntimeOptions): DescribeEnsCommodityCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commodityCode)) {
    query['CommodityCode'] = request.commodityCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEnsCommodityCode',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 描述商品code
 *
 * @param request DescribeEnsCommodityCodeRequest
 * @return DescribeEnsCommodityCodeResponse
 */
async function describeEnsCommodityCode(request: DescribeEnsCommodityCodeRequest): DescribeEnsCommodityCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnsCommodityCodeWithOptions(request, runtime);
}

model DescribeEnsCommodityModuleCodeRequest {
  commodityCode?: string(name='CommodityCode'),
  moduleCode?: string(name='ModuleCode'),
}

model DescribeEnsCommodityModuleCodeResponseBody = {
  commodityCodesInfo?: [ 
    {
      commodityCode?: string(name='CommodityCode'),
      moduleCodesInfo?: [ 
        {
          moduleCode?: string(name='ModuleCode'),
          moduleName?: string(name='ModuleName'),
        }
      ](name='ModuleCodesInfo'),
    }
  ](name='CommodityCodesInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeEnsCommodityModuleCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEnsCommodityModuleCodeResponseBody(name='body'),
}

/**
 * @summary 获取模块code
 *
 * @param request DescribeEnsCommodityModuleCodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEnsCommodityModuleCodeResponse
 */
async function describeEnsCommodityModuleCodeWithOptions(request: DescribeEnsCommodityModuleCodeRequest, runtime: Util.RuntimeOptions): DescribeEnsCommodityModuleCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commodityCode)) {
    query['CommodityCode'] = request.commodityCode;
  }
  if (!Util.isUnset(request.moduleCode)) {
    query['ModuleCode'] = request.moduleCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEnsCommodityModuleCode',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取模块code
 *
 * @param request DescribeEnsCommodityModuleCodeRequest
 * @return DescribeEnsCommodityModuleCodeResponse
 */
async function describeEnsCommodityModuleCode(request: DescribeEnsCommodityModuleCodeRequest): DescribeEnsCommodityModuleCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnsCommodityModuleCodeWithOptions(request, runtime);
}

model DescribeEnsEipAddressesRequest {
  allocationId?: string(name='AllocationId', description='The ID of the EIP that you want to query. You can specify up to 50 EIP IDs. Separate multiple IDs with commas (,).', example='eip-5q9uwkd9bznjpxz8hr6cirnjk'),
  associatedInstanceId?: string(name='AssociatedInstanceId', description='The ID of the instance with which you want to associate the EIP.', example='lb-5t18quoohsrc3xkf86spmnu77'),
  associatedInstanceType?: string(name='AssociatedInstanceType', description='The type of the instance with which you want to associate the EIP. Valid values:

*   **EnsInstance**: ENS instance in a VPC
*   **SlbInstance**: Edge Load Balancer (ELB) instance', example='SlbInstance'),
  eipAddress?: string(name='EipAddress', description='The EIP that you want to query. You can specify up to 50 EIPs. Separate multiple EIPs with commas (,).', example='192.168.0.1'),
  eipName?: string(name='EipName', description='The name of the EIP.', example='test'),
  ensRegionId?: string(name='EnsRegionId', description='The ID of the Edge Node Service (ENS) node.', example='cn-chengdu-telecom'),
  ensRegionIds?: [ string ](name='EnsRegionIds'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: 100. Default value: 10.', example='50'),
  standby?: string(name='Standby', description='Specifies whether the EIP is a secondary EIP. Valid values:

*   **true**
*   **false**', example='true'),
}

model DescribeEnsEipAddressesResponseBody = {
  eipAddresses?: {
    eipAddress?: [ 
    {
      allocationId?: string(name='AllocationId', description='The ID of the EIP.', example='eip-5sainglpw7qfem3icir4s****'),
      allocationTime?: string(name='AllocationTime', description='The time when the EIP was created.', example='1624885274000'),
      bandwidth?: int32(name='Bandwidth', description='The peak bandwidth of the EIP. Default value: 5. Valid values: **5** to **10000**. Unit: Mbit/s.', example='50'),
      chargeType?: string(name='ChargeType', description='The billing method of the EIP. Valid values:

*   **PrePaid**: subscription.
*   **PostPaid**: pay-as-you-go', example='PostPaid'),
      description?: string(name='Description', description='The description of the EIP.', example='example'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the ENS node.', example='cn-xian-telecom'),
      instanceId?: string(name='InstanceId', description='The ID of the instance that is associated with the EIP.', example='lb-5sc3kum2e0sz34wbqrws9****'),
      instanceType?: string(name='InstanceType', description='The type of the instance that is associated with the EIP. Valid values:

*   **EnsInstance**: ENS instance in a VPC
*   **SlbInstance**: SLB instance', example='SlbInstance'),
      internetChargeType?: string(name='InternetChargeType', description='The metering method of the EIP.

*   **95BandwidthByMonth**: Pay by monthly 95th percentile bandwidth
*   **PayByBandwidth**: Pay by bandwidth', example='95BandwidthByMonth'),
      ipAddress?: string(name='IpAddress', description='The EIP.', example='10.10.10'),
      ipStatus?: string(name='IpStatus', description='The running status of the EIP. This parameter is returned if the EIP is a secondary EIP. Valid values:

*   **Stopped**
*   **Running**
*   **Starting**
*   **Stopping**', example='Stopped'),
      isp?: string(name='Isp', description='The Internet service provider (ISP). Valid values:

*   **cmcc**: China Mobile
*   **unicom**: China Unicom
*   **telecom**: China Telecom', example='cmcc'),
      name?: string(name='Name', description='The name of the EIP.', example='test'),
      standby?: boolean(name='Standby', description='Indicates whether the EIP is a secondary EIP.', example='true'),
      status?: string(name='Status', description='The status of the EIP. Valid values:

*   **Associating**
*   **Unassociating**
*   **InUse**
*   **Available**', example='Available'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          tagKey?: string(name='TagKey', deprecated=true),
          tagValue?: string(name='TagValue', deprecated=true),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
    }
  ](name='EipAddress')
  }(name='EipAddresses', description='Details about the EIP.'),
  pageNumber?: int32(name='PageNumber', description='The page number. Valid values: an integer that is greater than 0. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Valid values: **10** to **100**.', example='50'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8629F679-B51D-4194-A1CC-5D8F504C362B'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='7'),
}

model DescribeEnsEipAddressesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEnsEipAddressesResponseBody(name='body'),
}

/**
 * @summary Queries elastic IP addresses (EIPs).
 *
 * @param request DescribeEnsEipAddressesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEnsEipAddressesResponse
 */
async function describeEnsEipAddressesWithOptions(request: DescribeEnsEipAddressesRequest, runtime: Util.RuntimeOptions): DescribeEnsEipAddressesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationId)) {
    query['AllocationId'] = request.allocationId;
  }
  if (!Util.isUnset(request.associatedInstanceId)) {
    query['AssociatedInstanceId'] = request.associatedInstanceId;
  }
  if (!Util.isUnset(request.associatedInstanceType)) {
    query['AssociatedInstanceType'] = request.associatedInstanceType;
  }
  if (!Util.isUnset(request.eipAddress)) {
    query['EipAddress'] = request.eipAddress;
  }
  if (!Util.isUnset(request.eipName)) {
    query['EipName'] = request.eipName;
  }
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.ensRegionIds)) {
    query['EnsRegionIds'] = request.ensRegionIds;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.standby)) {
    query['Standby'] = request.standby;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEnsEipAddresses',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries elastic IP addresses (EIPs).
 *
 * @param request DescribeEnsEipAddressesRequest
 * @return DescribeEnsEipAddressesResponse
 */
async function describeEnsEipAddresses(request: DescribeEnsEipAddressesRequest): DescribeEnsEipAddressesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnsEipAddressesWithOptions(request, runtime);
}

model DescribeEnsNetDistrictRequest {
  netDistrictCode?: string(name='NetDistrictCode', description='The code of the region.

If you do not specify this parameter, only nodes in the regions of the level that is specified by the NetLevelCode parameter are queried.

If you specify this parameter, only nodes in the regions of the level that is specified by this parameter are queried.', example='100106'),
  netLevelCode?: string(name='NetLevelCode', description='The level of the region.

*   **Big**: area
*   **Middle**: province
*   **Small**: city

This parameter is required.', example='Big'),
}

model DescribeEnsNetDistrictResponseBody = {
  code?: int32(name='Code', description='The returned service code. A value of 0 indicates that the operation was successful.', example='0'),
  ensNetDistricts?: {
    ensNetDistrict?: [ 
    {
      ensRegionIdCount?: string(name='EnsRegionIdCount', description='The number of nodes in the region.', example='2'),
      netDistrictCode?: string(name='NetDistrictCode', description='The code of the region.', example='100106'),
      netDistrictEnName?: string(name='NetDistrictEnName', description='The name of the region.', example='southWest'),
      netDistrictFatherCode?: string(name='NetDistrictFatherCode', description='The parent code of the region.', example='100000'),
      netDistrictLevel?: string(name='NetDistrictLevel', description='The level of the region.

*   **Big**: area
*   **Middle**: province
*   **Small**: city', example='Big'),
      netDistrictName?: string(name='NetDistrictName', description='The name of the region.', example='southwest China'),
    }
  ](name='EnsNetDistrict')
  }(name='EnsNetDistricts', description='The information about the regions.'),
  requestId?: string(name='RequestId', description='The request ID.', example='F3B261DD-3858-4D3C-877D-303ADF374600'),
}

model DescribeEnsNetDistrictResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEnsNetDistrictResponseBody(name='body'),
}

/**
 * @summary Queries regions in which ENS resources can be created.
 *
 * @param request DescribeEnsNetDistrictRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEnsNetDistrictResponse
 */
async function describeEnsNetDistrictWithOptions(request: DescribeEnsNetDistrictRequest, runtime: Util.RuntimeOptions): DescribeEnsNetDistrictResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.netDistrictCode)) {
    query['NetDistrictCode'] = request.netDistrictCode;
  }
  if (!Util.isUnset(request.netLevelCode)) {
    query['NetLevelCode'] = request.netLevelCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEnsNetDistrict',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries regions in which ENS resources can be created.
 *
 * @param request DescribeEnsNetDistrictRequest
 * @return DescribeEnsNetDistrictResponse
 */
async function describeEnsNetDistrict(request: DescribeEnsNetDistrictRequest): DescribeEnsNetDistrictResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnsNetDistrictWithOptions(request, runtime);
}

model DescribeEnsNetLevelResponseBody = {
  code?: int32(name='Code', description='The returned service code. A value of 0 indicates that the operation was successful.', example='0'),
  ensNetLevels?: {
    ensNetLevel?: [ 
    {
      ensNetLevelCode?: string(name='EnsNetLevelCode', description='The network level. Valid values:

*   Big: greater area.
*   Middle: province.
*   Small: city.', example='Big'),
    }
  ](name='EnsNetLevel')
  }(name='EnsNetLevels', description='The network levels.'),
  requestId?: string(name='RequestId', description='The request ID.', example='86A6D421-A0C7-4C01-8648-47377CA6A2CE'),
}

model DescribeEnsNetLevelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEnsNetLevelResponseBody(name='body'),
}

/**
 * @summary Queries the supported network levels.
 *
 * @param request DescribeEnsNetLevelRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEnsNetLevelResponse
 */
async function describeEnsNetLevelWithOptions(runtime: Util.RuntimeOptions): DescribeEnsNetLevelResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeEnsNetLevel',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the supported network levels.
 *
 * @return DescribeEnsNetLevelResponse
 */
async function describeEnsNetLevel(): DescribeEnsNetLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnsNetLevelWithOptions(runtime);
}

model DescribeEnsNetSaleDistrictRequest {
  netDistrictCode?: string(name='NetDistrictCode', description='The region code.

*   If you do not specify this parameter, only nodes under the area level that is specified by NetLevelCode are queried.
*   If you specify this parameter, only child nodes in the area that is specified by NetDistrictCode are queried.', example='100105'),
  netLevelCode?: string(name='NetLevelCode', description='The network level. Valid values:

*   **Big**: area
*   **Middle**: province
*   **Small**: city

This parameter is required.', example='Big'),
}

model DescribeEnsNetSaleDistrictResponseBody = {
  code?: int32(name='Code', description='The returned service code. A value of 0 indicates that the operation was successful.', example='0'),
  ensNetDistricts?: {
    ensNetDistrict?: [ 
    {
      ensRegionIdCount?: string(name='EnsRegionIdCount', description='The information about the ISP.', example='{                         "count":2,                         "name":"telecommunication",                         "code":"telecom",                         "country":"cn"                     }'),
      instanceCount?: string(name='InstanceCount', description='The information about the instance.', example='{                         "count":2,                         "code":"multiCarrier"                     }'),
      netDistrictCode?: string(name='NetDistrictCode', description='The region code.', example='100101'),
      netDistrictEnName?: string(name='NetDistrictEnName', description='The name of the region.', example='northEast'),
      netDistrictFatherCode?: string(name='NetDistrictFatherCode', description='The parent code of the region.', example='100000'),
      netDistrictLevel?: string(name='NetDistrictLevel', description='The region level. Valid values:

*   **Big**: area
*   **Middle**: province
*   **Small**: city', example='Big'),
      netDistrictName?: string(name='NetDistrictName', description='The Chinese name of the region.', example='Northeast China'),
    }
  ](name='EnsNetDistrict')
  }(name='EnsNetDistricts', description='The information about the ISPs in the area.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1707B55C-A12F-43EF-BC66-14FFDB9253C3'),
}

model DescribeEnsNetSaleDistrictResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEnsNetSaleDistrictResponseBody(name='body'),
}

/**
 * @summary Queries the information about ISPs and number of ISPs in an area.
 *
 * @param request DescribeEnsNetSaleDistrictRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEnsNetSaleDistrictResponse
 */
async function describeEnsNetSaleDistrictWithOptions(request: DescribeEnsNetSaleDistrictRequest, runtime: Util.RuntimeOptions): DescribeEnsNetSaleDistrictResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.netDistrictCode)) {
    query['NetDistrictCode'] = request.netDistrictCode;
  }
  if (!Util.isUnset(request.netLevelCode)) {
    query['NetLevelCode'] = request.netLevelCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEnsNetSaleDistrict',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about ISPs and number of ISPs in an area.
 *
 * @param request DescribeEnsNetSaleDistrictRequest
 * @return DescribeEnsNetSaleDistrictResponse
 */
async function describeEnsNetSaleDistrict(request: DescribeEnsNetSaleDistrictRequest): DescribeEnsNetSaleDistrictResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnsNetSaleDistrictWithOptions(request, runtime);
}

model DescribeEnsRegionIdIpv6InfoRequest {
  ensRegionId?: string(name='EnsRegionId', description='The ID of the node. You can specify only one node ID in a call.

This parameter is required.', example='cn-chengdu-xxxx-4'),
}

model DescribeEnsRegionIdIpv6InfoResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='3703C4AC-9396-458C-8F25-1D701334D309'),
  supportIpv6Info?: {
    ensRegionId?: string(name='EnsRegionId', description='The ID of the node.', example='cn-chengdu-xxxx-4'),
    supportIpv6?: boolean(name='SupportIpv6', description='Specifies whether IPv6 is supported. Valid values:

*   true
*   false', example='true'),
  }(name='SupportIpv6Info', description='IPv6 support information.'),
}

model DescribeEnsRegionIdIpv6InfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEnsRegionIdIpv6InfoResponseBody(name='body'),
}

/**
 * @summary Queries whether a node supports IPv6.
 *
 * @param request DescribeEnsRegionIdIpv6InfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEnsRegionIdIpv6InfoResponse
 */
async function describeEnsRegionIdIpv6InfoWithOptions(request: DescribeEnsRegionIdIpv6InfoRequest, runtime: Util.RuntimeOptions): DescribeEnsRegionIdIpv6InfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEnsRegionIdIpv6Info',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries whether a node supports IPv6.
 *
 * @param request DescribeEnsRegionIdIpv6InfoRequest
 * @return DescribeEnsRegionIdIpv6InfoResponse
 */
async function describeEnsRegionIdIpv6Info(request: DescribeEnsRegionIdIpv6InfoRequest): DescribeEnsRegionIdIpv6InfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnsRegionIdIpv6InfoWithOptions(request, runtime);
}

model DescribeEnsRegionIdResourceRequest {
  endTime?: string(name='EndTime', description='The end time of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2020-06-16T06:33:15'),
  isp?: string(name='Isp', description='The Internet service provider (ISP). Valid values:

*   cmcc: China Mobile
*   telecom: China Telecom
*   unicom: China Unicom
*   multiCarrier: multi-line ISP', example='cmcc'),
  orderByParams?: string(name='OrderByParams', description='The order in which the resources to return are sorted. Valid values:

*   InstanceCount: desc
*   Area: asc
*   InternetBandwidth: asc', example='InstanceCount: desc'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page **1**. Default value: **1**.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page. Maximum value: **100**. Default value: **10**.', example='10'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2020-06-16T06:33:15Z'),
}

model DescribeEnsRegionIdResourceResponseBody = {
  ensRegionIdResources?: {
    ensRegionIdResource?: [ 
    {
      area?: string(name='Area', description='The region. Set the value to West.', example='West'),
      areaCode?: string(name='AreaCode', description='The code of the region.', example='300100'),
      bizDate?: string(name='BizDate', description='The date when the transaction was processed.', example='2019-10-30'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the node.', example='cn-hangzhou-telecom'),
      ensRegionIdName?: string(name='EnsRegionIdName', description='The name of the node.', example='Nanjing Mobile'),
      instanceCount?: int32(name='InstanceCount', description='The number of instances.', example='10'),
      internetBandwidth?: long(name='InternetBandwidth', description='The public bandwidth of the instance. Unit: Bits/s.', example='100'),
      isp?: string(name='Isp', description='The ISP. Valid values:

*   cmcc: China Mobile
*   unicom: China Unicom
*   telecom: China Telecom
*   multiCarrier: multi-line ISP', example='cmcc'),
      VCpu?: int32(name='VCpu', description='The number of vCPUs.', example='10'),
    }
  ](name='EnsRegionIdResource')
  }(name='EnsRegionIdResources', description='The returned data. For more information, see EnsRegionIdResources in sample JSON responses.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='476600B1-C9E2-4245-A26F-DC7EA8071425'),
  totalCount?: int32(name='TotalCount', description='The total number of queried nodes.', example='58'),
}

model DescribeEnsRegionIdResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEnsRegionIdResourceResponseBody(name='body'),
}

/**
 * @summary Queries node resources.
 *
 * @description ****
 *
 * @param request DescribeEnsRegionIdResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEnsRegionIdResourceResponse
 */
async function describeEnsRegionIdResourceWithOptions(request: DescribeEnsRegionIdResourceRequest, runtime: Util.RuntimeOptions): DescribeEnsRegionIdResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.isp)) {
    query['Isp'] = request.isp;
  }
  if (!Util.isUnset(request.orderByParams)) {
    query['OrderByParams'] = request.orderByParams;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEnsRegionIdResource',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries node resources.
 *
 * @description ****
 *
 * @param request DescribeEnsRegionIdResourceRequest
 * @return DescribeEnsRegionIdResourceResponse
 */
async function describeEnsRegionIdResource(request: DescribeEnsRegionIdResourceRequest): DescribeEnsRegionIdResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnsRegionIdResourceWithOptions(request, runtime);
}

model DescribeEnsRegionsRequest {
  ensRegionId?: string(name='EnsRegionId', description='The ID of the node.

By default, all available node IDs are returned.', example='cn-dalian-unicom'),
}

model DescribeEnsRegionsResponseBody = {
  code?: int32(name='Code', description='The service code. 0 is returned for a successful request. An error code is returned for a failed request.', example='0'),
  ensRegions?: {
    ensRegions?: [ 
    {
      area?: string(name='Area', description='The code of the region.', example='NorthEastChina'),
      enName?: string(name='EnName', description='The name of the node.', example='NorthChina'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the node.', example='cn-dalian-unicom'),
      name?: string(name='Name', description='The name of the node.', example='Dalian Unicom'),
      province?: string(name='Province', description='The province where the node is deployed.', example='Liaoning Province'),
    }
  ](name='EnsRegions')
  }(name='EnsRegions', description='The information about the regions.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeEnsRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEnsRegionsResponseBody(name='body'),
}

/**
 * @summary Queries the Edge Node Service (ENS) nodes that you can use.
 *
 * @param request DescribeEnsRegionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEnsRegionsResponse
 */
async function describeEnsRegionsWithOptions(request: DescribeEnsRegionsRequest, runtime: Util.RuntimeOptions): DescribeEnsRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEnsRegions',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the Edge Node Service (ENS) nodes that you can use.
 *
 * @param request DescribeEnsRegionsRequest
 * @return DescribeEnsRegionsResponse
 */
async function describeEnsRegions(request: DescribeEnsRegionsRequest): DescribeEnsRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnsRegionsWithOptions(request, runtime);
}

model DescribeEnsResourceUsageRequest {
  expiredEndTime?: string(name='ExpiredEndTime', description='The end of the time range to query. Format: yyyy-MM-dd or yyyy-MM-dd HH:mm:ss.', example='2018-06-15T09:07:23Z'),
  expiredStartTime?: string(name='ExpiredStartTime', description='The beginning of the time range to query. Format: yyyy-MM-dd or yyyy-MM-dd HH:mm:ss.', example='2018-06-15T09:07:23Z'),
}

model DescribeEnsResourceUsageResponseBody = {
  ensResourceUsage?: [ 
    {
      computeResourceCount?: int32(name='ComputeResourceCount', description='The number of edge services. This parameter is available only when you set the ServiceType parameter to 2.', example='2'),
      cpuSum?: long(name='CpuSum', description='The CPU usage. Unit: cores.', example='2'),
      diskCount?: int32(name='DiskCount', description='The number of data disks.', example='4'),
      downCount?: int32(name='DownCount', description='The number of stopped VMs.', example='7'),
      expiredCount?: int32(name='ExpiredCount', description='The number of expired VM instances.', example='1'),
      expiringCount?: int32(name='ExpiringCount', description='The number of VM instances that are about to expire.', example='0'),
      gpuSum?: long(name='GpuSum', description='The number of GPUs.', example='6'),
      instanceCount?: int32(name='InstanceCount', description='The number of instances.', example='2'),
      runningCount?: int32(name='RunningCount', description='The number of running instances.', example='19'),
      serviceType?: string(name='ServiceType', description='The type of the service. Valid values:

*   1: subscription instance.
*   2: edge service instance.
*   3: pay-as-you-go instance.', example='1'),
      storageSum?: long(name='StorageSum', description='The total disk size.', example='5000'),
    }
  ](name='EnsResourceUsage', description='The resource usage data.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E	 Request ID.'),
}

model DescribeEnsResourceUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEnsResourceUsageResponseBody(name='body'),
}

/**
 * @summary Queries the usage summary of ENS virtual machines (VMs), disks, and networks.
 *
 * @param request DescribeEnsResourceUsageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEnsResourceUsageResponse
 */
async function describeEnsResourceUsageWithOptions(request: DescribeEnsResourceUsageRequest, runtime: Util.RuntimeOptions): DescribeEnsResourceUsageResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEnsResourceUsage',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the usage summary of ENS virtual machines (VMs), disks, and networks.
 *
 * @param request DescribeEnsResourceUsageRequest
 * @return DescribeEnsResourceUsageResponse
 */
async function describeEnsResourceUsage(request: DescribeEnsResourceUsageRequest): DescribeEnsResourceUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnsResourceUsageWithOptions(request, runtime);
}

model DescribeEnsRouteEntryListRequest {
  destinationCidrBlock?: string(name='DestinationCidrBlock', description='The destination Classless Inter-Domain Routing (CIDR) block of the route entry.', example='11.0.0.0/16'),
  nextHopId?: string(name='NextHopId', description='The ID of the next hop.', example='i-2zecshuv3axtr2gc4noa'),
  nextHopType?: string(name='NextHopType', description='The type of next hop of the custom route entry. Valid values:

*   Instance (default): an ENS instance.
*   HaVip: a high-availability virtual IP address (HAVIP).
*   NetworkPeer: VPC peering connection.', example='Instance'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page. Valid values: integers that are greater than 0. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Valid values: 10 to 100.', example='10'),
  routeEntryId?: string(name='RouteEntryId', description='The ID of the route that you want to query.', example='rte-8vbdw66evgv44u2u7v3hx'),
  routeEntryName?: string(name='RouteEntryName', description='The name of the route.', example='test0'),
  routeEntryType?: string(name='RouteEntryType', description='The route type. Valid values:

*   Custom: custom route
*   System: system route', example='Custom'),
  routeTableId?: string(name='RouteTableId', description='The ID of the route table that you want to query.', example='vtb-hp3wdhynneo7fsclox8hs'),
}

model DescribeEnsRouteEntryListResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  routeEntrys?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the entry was created. The time is displayed in UTC.', example='2023-02-16T03:50:05Z'),
      description?: string(name='Description', description='Enter a description for the route.', example='test'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', description='The destination CIDR block of the route.', example='101.0.45.0/24'),
      nextHops?: [ 
        {
          nextHopId?: string(name='NextHopId', description='The ID of the next hop.', example='i-bp1111yup9991890woxq'),
          nextHopName?: string(name='NextHopName', description='The instance ID of the next hop.', example='testInstance'),
          nextHopType?: string(name='NextHopType', description='The type of the next hop. Valid values:', example='Instance'),
        }
      ](name='NextHops', description='The information about the next hop.'),
      routeEntryId?: string(name='RouteEntryId', description='The ID of the route.', example='rte-2zeksx7h436f5unk349m1'),
      routeEntryName?: string(name='RouteEntryName', description='The name of the route.', example='test0'),
      routeTableId?: string(name='RouteTableId', description='The ID of the route table.', example='vtb-uf62p9o5cn35fi8xgurnm'),
      sourceCidrBlock?: string(name='SourceCidrBlock', description='The new source CIDR block of the inbound or outbound traffic.', example='10.XXX.XXX.0/24'),
      status?: string(name='Status', description='The status of the route entry. Valid values:', example='Available'),
      type?: string(name='Type', description='The type of the route entry.', example='Custom'),
    }
  ](name='RouteEntrys', description='The information about the routes.'),
  totalCount?: int32(name='TotalCount', description='The number of returned entries.', example='7'),
}

model DescribeEnsRouteEntryListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEnsRouteEntryListResponseBody(name='body'),
}

/**
 * @summary Queries route entries.
 *
 * @param request DescribeEnsRouteEntryListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEnsRouteEntryListResponse
 */
async function describeEnsRouteEntryListWithOptions(request: DescribeEnsRouteEntryListRequest, runtime: Util.RuntimeOptions): DescribeEnsRouteEntryListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationCidrBlock)) {
    query['DestinationCidrBlock'] = request.destinationCidrBlock;
  }
  if (!Util.isUnset(request.nextHopId)) {
    query['NextHopId'] = request.nextHopId;
  }
  if (!Util.isUnset(request.nextHopType)) {
    query['NextHopType'] = request.nextHopType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.routeEntryId)) {
    query['RouteEntryId'] = request.routeEntryId;
  }
  if (!Util.isUnset(request.routeEntryName)) {
    query['RouteEntryName'] = request.routeEntryName;
  }
  if (!Util.isUnset(request.routeEntryType)) {
    query['RouteEntryType'] = request.routeEntryType;
  }
  if (!Util.isUnset(request.routeTableId)) {
    query['RouteTableId'] = request.routeTableId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEnsRouteEntryList',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries route entries.
 *
 * @param request DescribeEnsRouteEntryListRequest
 * @return DescribeEnsRouteEntryListResponse
 */
async function describeEnsRouteEntryList(request: DescribeEnsRouteEntryListRequest): DescribeEnsRouteEntryListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnsRouteEntryListWithOptions(request, runtime);
}

model DescribeEnsRouteTablesRequest {
  associateType?: string(name='AssociateType', description='The type of the route table. Valid values:

*   **VSwitch** (default): vSwitch route table
*   **Gateway**: gateway route table', example='Gateway'),
  ensRegionId?: string(name='EnsRegionId', description='The ID of the ENS node.', example='cn-xian-unicom'),
  ensRegionIds?: [ string ](name='EnsRegionIds', description='The IDs of edge nodes. You can specify 1 to 100 IDs.'),
  networkId?: string(name='NetworkId', description='The ID of the network.', example='n-257gqcdfvx6n****'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='30'),
  routeTableId?: string(name='RouteTableId', description='The ID of the route table.', example='vtb-5p1cifr72di****'),
  routeTableName?: string(name='RouteTableName', description='The name of the route table that you want to query.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-).', example='tftest-nat04'),
  type?: string(name='Type', description='The type of the NAT.

*   Empty: symmetric NAT.
*   FullCone: full cone NAT.', example='FullCone'),
}

model DescribeEnsRouteTablesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC51ACB0-460D-5CA0-BA2D-E1F3B5547AE9'),
  routeTables?: [ 
    {
      associateType?: string(name='AssociateType', description='The type of the route table. Valid values:

*   **VSwitch** (default): vSwitch route table
*   **Gateway**: gateway route table', example='VSwitch'),
      creationTime?: string(name='CreationTime', description='The time when the route table was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2024-03-08T08:35:18Z'),
      description?: string(name='Description', description='The description of the network.

The description must be 2 to 256 characters in length. It must start with a letter but cannot start with http:// or https://.', example='test'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.', example='cn-beijing-15'),
      isDefaultGatewayRouteTable?: boolean(name='IsDefaultGatewayRouteTable', description='Is the gateway routing table the default.', example='false'),
      networkId?: string(name='NetworkId', description='The ID of the network.', example='n-5v9lufsezl4g****'),
      routeTableId?: string(name='RouteTableId', description='The ID of the route table.', example='rt-5xde2bit9****'),
      routeTableName?: string(name='RouteTableName', description='The name of the route table that you want to query.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-).', example='test-tf-vtb7'),
      status?: string(name='Status', description='The status. Valid values:

*   Available: The route table is available.', example='Available'),
      type?: string(name='Type', description='The type of the route table. Examples:

*   Custom: custom route table.
*   System: system route table.', example='System'),
      vSwitchIds?: [ string ](name='VSwitchIds', description='The vSwitches that are associated with the route table.'),
    }
  ](name='RouteTables', description='The information about the route tables.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='10'),
}

model DescribeEnsRouteTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEnsRouteTablesResponseBody(name='body'),
}

/**
 * @summary Queries route tables.
 *
 * @param request DescribeEnsRouteTablesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEnsRouteTablesResponse
 */
async function describeEnsRouteTablesWithOptions(request: DescribeEnsRouteTablesRequest, runtime: Util.RuntimeOptions): DescribeEnsRouteTablesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.associateType)) {
    query['AssociateType'] = request.associateType;
  }
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.ensRegionIds)) {
    query['EnsRegionIds'] = request.ensRegionIds;
  }
  if (!Util.isUnset(request.networkId)) {
    query['NetworkId'] = request.networkId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.routeTableId)) {
    query['RouteTableId'] = request.routeTableId;
  }
  if (!Util.isUnset(request.routeTableName)) {
    query['RouteTableName'] = request.routeTableName;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEnsRouteTables',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries route tables.
 *
 * @param request DescribeEnsRouteTablesRequest
 * @return DescribeEnsRouteTablesResponse
 */
async function describeEnsRouteTables(request: DescribeEnsRouteTablesRequest): DescribeEnsRouteTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnsRouteTablesWithOptions(request, runtime);
}

model DescribeEnsSaleControlRequest {
  aliUidAccount?: string(name='AliUidAccount'),
  commodityCode?: string(name='CommodityCode', description='This parameter is required.'),
  customAccount?: string(name='CustomAccount'),
  moduleCode?: string(name='ModuleCode'),
  orderType?: string(name='OrderType'),
}

model DescribeEnsSaleControlResponseBody = {
  requestId?: string(name='RequestId'),
  saleControl?: [ 
    {
      commodityCode?: string(name='CommodityCode'),
      orderType?: string(name='OrderType'),
      saleControlItems?: [ 
        {
          moduleCode?: string(name='ModuleCode'),
          saleControlItem?: {
            basicSaleControl?: {
              description?: string(name='Description'),
              moduleValue?: {
                moduleMaxValue?: string(name='ModuleMaxValue'),
                moduleMinValue?: string(name='ModuleMinValue'),
                moduleValue?: [ string ](name='ModuleValue'),
              }(name='ModuleValue'),
              operator?: string(name='Operator'),
            }(name='BasicSaleControl'),
            conditionSaleControl?: [ 
              {
                conditionControl?: {
                  conditionControlModuleCode?: string(name='ConditionControlModuleCode'),
                  conditionControlModuleValue?: string(name='ConditionControlModuleValue'),
                }(name='ConditionControl'),
                description?: string(name='Description'),
                moduleValue?: {
                  moduleMaxValue?: string(name='ModuleMaxValue'),
                  moduleMinValue?: string(name='ModuleMinValue'),
                  moduleValue?: [ string ](name='ModuleValue'),
                }(name='ModuleValue'),
                operator?: string(name='Operator'),
              }
            ](name='ConditionSaleControl'),
          }(name='SaleControlItem'),
        }
      ](name='SaleControlItems'),
    }
  ](name='SaleControl'),
}

model DescribeEnsSaleControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEnsSaleControlResponseBody(name='body'),
}

/**
 * @summary 展示配置的售卖约束信息
 *
 * @param request DescribeEnsSaleControlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEnsSaleControlResponse
 */
async function describeEnsSaleControlWithOptions(request: DescribeEnsSaleControlRequest, runtime: Util.RuntimeOptions): DescribeEnsSaleControlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUidAccount)) {
    query['AliUidAccount'] = request.aliUidAccount;
  }
  if (!Util.isUnset(request.commodityCode)) {
    query['CommodityCode'] = request.commodityCode;
  }
  if (!Util.isUnset(request.customAccount)) {
    query['CustomAccount'] = request.customAccount;
  }
  if (!Util.isUnset(request.moduleCode)) {
    query['ModuleCode'] = request.moduleCode;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEnsSaleControl',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 展示配置的售卖约束信息
 *
 * @param request DescribeEnsSaleControlRequest
 * @return DescribeEnsSaleControlResponse
 */
async function describeEnsSaleControl(request: DescribeEnsSaleControlRequest): DescribeEnsSaleControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnsSaleControlWithOptions(request, runtime);
}

model DescribeEnsSaleControlAvailableResourceRequest {
  commodityCode?: string(name='CommodityCode', description='This parameter is required.'),
  customAccount?: string(name='CustomAccount'),
  orderType?: string(name='OrderType'),
}

model DescribeEnsSaleControlAvailableResourceResponseBody = {
  requestId?: string(name='RequestId'),
  saleControlAvailableResource?: [ 
    {
      availableDiskType?: [ 
        {
          diskName?: string(name='DiskName'),
          diskType?: string(name='DiskType'),
        }
      ](name='AvailableDiskType'),
      availableRegion?: [ 
        {
          area?: string(name='Area'),
          city?: string(name='City'),
          country?: string(name='Country'),
          ensRegionId?: string(name='EnsRegionId'),
          ensRegionName?: string(name='EnsRegionName'),
          isp?: string(name='Isp'),
          province?: string(name='Province'),
        }
      ](name='AvailableRegion'),
      availableSpec?: [ 
        {
          cores?: string(name='Cores'),
          memory?: string(name='Memory'),
          specName?: string(name='SpecName'),
          specValue?: string(name='SpecValue'),
        }
      ](name='AvailableSpec'),
      availableStorageType?: {
        availableDefaultStorageType?: [ 
          {
            storageName?: string(name='StorageName'),
            storageType?: string(name='StorageType'),
          }
        ](name='AvailableDefaultStorageType'),
        availableSpecialStorageType?: [[ 
          {
            storageType?: string(name='StorageType'),
            storageName?: string(name='StorageName'),
            ensRegionId?: string(name='EnsRegionId'),
          }
        ]        ](name='AvailableSpecialStorageType'),
      }(name='AvailableStorageType'),
      commodityCode?: string(name='CommodityCode'),
      orderType?: string(name='OrderType'),
    }
  ](name='SaleControlAvailableResource'),
}

model DescribeEnsSaleControlAvailableResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEnsSaleControlAvailableResourceResponseBody(name='body'),
}

/**
 * @summary 获取可用资源
 *
 * @param request DescribeEnsSaleControlAvailableResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEnsSaleControlAvailableResourceResponse
 */
async function describeEnsSaleControlAvailableResourceWithOptions(request: DescribeEnsSaleControlAvailableResourceRequest, runtime: Util.RuntimeOptions): DescribeEnsSaleControlAvailableResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commodityCode)) {
    query['CommodityCode'] = request.commodityCode;
  }
  if (!Util.isUnset(request.customAccount)) {
    query['CustomAccount'] = request.customAccount;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEnsSaleControlAvailableResource',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取可用资源
 *
 * @param request DescribeEnsSaleControlAvailableResourceRequest
 * @return DescribeEnsSaleControlAvailableResourceResponse
 */
async function describeEnsSaleControlAvailableResource(request: DescribeEnsSaleControlAvailableResourceRequest): DescribeEnsSaleControlAvailableResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnsSaleControlAvailableResourceWithOptions(request, runtime);
}

model DescribeEnsSaleControlStockRequest {
  aliUidAccount?: string(name='AliUidAccount'),
  commodityCode?: string(name='CommodityCode', description='This parameter is required.'),
  customAccount?: string(name='CustomAccount'),
  moduleCode?: string(name='ModuleCode'),
  orderType?: string(name='OrderType'),
}

model DescribeEnsSaleControlStockResponseBody = {
  requestId?: string(name='RequestId'),
  saleControl?: [ 
    {
      commodityCode?: string(name='CommodityCode'),
      orderType?: string(name='OrderType'),
      saleControlItems?: [ 
        {
          moduleCode?: string(name='ModuleCode'),
          saleControlItem?: {
            basicSaleControl?: {
              moduleValue?: {
                moduleMaxValue?: string(name='ModuleMaxValue'),
                moduleMinValue?: string(name='ModuleMinValue'),
              }(name='ModuleValue'),
              stockValue?: string(name='StockValue'),
            }(name='BasicSaleControl'),
            conditionSaleControl?: [ 
              {
                conditionControl?: {
                  conditionControlModuleCode?: string(name='ConditionControlModuleCode'),
                  conditionControlModuleValue?: string(name='ConditionControlModuleValue'),
                }(name='ConditionControl'),
                moduleValue?: {
                  moduleMaxValue?: string(name='ModuleMaxValue'),
                  moduleMinValue?: string(name='ModuleMinValue'),
                }(name='ModuleValue'),
                stockValue?: string(name='StockValue'),
              }
            ](name='ConditionSaleControl'),
          }(name='SaleControlItem'),
        }
      ](name='SaleControlItems'),
    }
  ](name='SaleControl'),
}

model DescribeEnsSaleControlStockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEnsSaleControlStockResponseBody(name='body'),
}

/**
 * @summary 获取售卖约束库存
 *
 * @param request DescribeEnsSaleControlStockRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEnsSaleControlStockResponse
 */
async function describeEnsSaleControlStockWithOptions(request: DescribeEnsSaleControlStockRequest, runtime: Util.RuntimeOptions): DescribeEnsSaleControlStockResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUidAccount)) {
    query['AliUidAccount'] = request.aliUidAccount;
  }
  if (!Util.isUnset(request.commodityCode)) {
    query['CommodityCode'] = request.commodityCode;
  }
  if (!Util.isUnset(request.customAccount)) {
    query['CustomAccount'] = request.customAccount;
  }
  if (!Util.isUnset(request.moduleCode)) {
    query['ModuleCode'] = request.moduleCode;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEnsSaleControlStock',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取售卖约束库存
 *
 * @param request DescribeEnsSaleControlStockRequest
 * @return DescribeEnsSaleControlStockResponse
 */
async function describeEnsSaleControlStock(request: DescribeEnsSaleControlStockRequest): DescribeEnsSaleControlStockResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnsSaleControlStockWithOptions(request, runtime);
}

model DescribeEpnBandWidthDataRequest {
  EPNInstanceId?: string(name='EPNInstanceId', description='The ID of the EPN instance.', example='epn-20200825134537VyK81T'),
  endTime?: string(name='EndTime', description='The end of the time range to query.

*   Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
*   If the value of the seconds place is not 00, the start time is automatically set to the next minute.

This parameter is required.', example='2021-12-16T16:00:00Z'),
  ensRegionId?: string(name='EnsRegionId', description='The ID of the Edge Node Service (ENS) node.', example='cn-beijing-cmcc'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-5sg1owx0g4ojy66ab2tez77r2'),
  isp?: string(name='Isp', description='The Internet service provider (ISP). Valid values:

*   cmcc: China Mobile
*   telecom: China Telecom
*   unicom: China Unicom
*   multiCarrier: multi-line ISP', example='cmcc'),
  networkingModel?: string(name='NetworkingModel', description='The networking mode. Valid values:

*   **SpeedUp**: intelligent acceleration network (Internet)
*   **Connection**: internal network
*   **SpeedUpAndConnection**: intelligent acceleration network and internal network', example='SpeedUp'),
  period?: string(name='Period', description='The precision of the monitoring data that you want to obtain. Valid values: 300, 1200, 3600, and 14400. Default value: 300. Unit: seconds.

This parameter is required.', example='300'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.

*   Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
*   If the value of the seconds place is not 00, the start time is automatically set to the next minute.

This parameter is required.', example='2021-12-15T16:00:00Z'),
}

model DescribeEpnBandWidthDataResponseBody = {
  monitorData?: {
    bandWidthMonitorData?: [ 
      {
        downBandWidth?: long(name='DownBandWidth', description='The outbound bandwidth. Unit: bit/s.', example='0'),
        internetRX?: long(name='InternetRX', description='The Internet traffic to the instance. Unit: bytes.', example='0'),
        internetTX?: long(name='InternetTX', description='The Internet traffic from the instance. Unit: bytes.', example='0'),
        timeStamp?: string(name='TimeStamp', description='The timestamp when the monitoring data was queried. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-10-12T05:45:00Z'),
        upBandWidth?: long(name='UpBandWidth', description='The inbound bandwidth. Unit: bit/s.', example='0'),
      }
    ](name='BandWidthMonitorData', description='The bandwidth data.'),
    maxDownBandWidth?: long(name='MaxDownBandWidth', description='The maximum outbound bandwidth within the queried time range. Unit: bit/s.', example='16817468'),
    maxUpBandWidth?: long(name='MaxUpBandWidth', description='The maximum inbound bandwidth within the queried time range. Unit: bit/s.', example='231008'),
  }(name='MonitorData', description='The monitoring data of the instance.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1D289DAA-F6DA-5FC4-AE47-F5C8B6277BFC'),
}

model DescribeEpnBandWidthDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEpnBandWidthDataResponseBody(name='body'),
}

/**
 * @summary Queries the EPN bandwidth usage.
 *
 * @param request DescribeEpnBandWidthDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEpnBandWidthDataResponse
 */
async function describeEpnBandWidthDataWithOptions(request: DescribeEpnBandWidthDataRequest, runtime: Util.RuntimeOptions): DescribeEpnBandWidthDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.EPNInstanceId)) {
    query['EPNInstanceId'] = request.EPNInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.isp)) {
    query['Isp'] = request.isp;
  }
  if (!Util.isUnset(request.networkingModel)) {
    query['NetworkingModel'] = request.networkingModel;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEpnBandWidthData',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the EPN bandwidth usage.
 *
 * @param request DescribeEpnBandWidthDataRequest
 * @return DescribeEpnBandWidthDataResponse
 */
async function describeEpnBandWidthData(request: DescribeEpnBandWidthDataRequest): DescribeEpnBandWidthDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEpnBandWidthDataWithOptions(request, runtime);
}

model DescribeEpnBandwitdhByInternetChargeTypeRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query.

*   Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
*   If the value of the seconds place is not 00, the start time is automatically set to the next minute.

This parameter is required.', example='2021-12-06T15:59:59Z'),
  ensRegionId?: string(name='EnsRegionId', description='The ID of the Edge Node Service (ENS) node.', example='cn-changsha-unicom'),
  isp?: string(name='Isp', description='The Internet service provider (ISP). Valid values:

*   cmcc: China Mobile
*   telecom: China Telecom
*   unicom: China Unicom
*   multiCarrier: multi-line ISP', example='telecom'),
  networkingModel?: string(name='NetworkingModel', description='The networking mode. Valid values:

*   **SpeedUp**: intelligent acceleration network (Internet)
*   **Connection**: internal network
*   **SpeedUpAndConnection**: intelligent acceleration network and internal network', example='Connection'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.

*   Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
*   If the value of the seconds place is not 00, the start time is automatically set to the next minute.

This parameter is required.', example='2021-12-02T16:00:00Z'),
}

model DescribeEpnBandwitdhByInternetChargeTypeResponseBody = {
  bandwidthValue?: long(name='BandwidthValue', description='The bandwidth. Unit: bit/s.', example='123'),
  internetChargeType?: string(name='InternetChargeType', description='The metering method. Valid values:

*   BandwidthByDay: Pay by daily peak bandwidth
*   95BandwidthByMonth: Pay by monthly 95th percentile bandwidth
*   PayByBandwidth4thMonth: Pay by monthly fourth peak bandwidth
*   PayByBandwidth: Pay by fixed bandwidth

You can specify only one metering method for network usage and cannot overwrite the existing metering method.', example='BandwidthByDay'),
  requestId?: string(name='RequestId', description='The request ID.', example='216BCED0-E055-5DDB-8E06-4084A62A4A44'),
  timeStamp?: string(name='TimeStamp', description='The timestamp when the monitoring data was queried. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-10-12T05:45:00Z'),
}

model DescribeEpnBandwitdhByInternetChargeTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEpnBandwitdhByInternetChargeTypeResponseBody(name='body'),
}

/**
 * @summary Queries the metering method of the EPN bandwidth within a time period.
 *
 * @param request DescribeEpnBandwitdhByInternetChargeTypeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEpnBandwitdhByInternetChargeTypeResponse
 */
async function describeEpnBandwitdhByInternetChargeTypeWithOptions(request: DescribeEpnBandwitdhByInternetChargeTypeRequest, runtime: Util.RuntimeOptions): DescribeEpnBandwitdhByInternetChargeTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.isp)) {
    query['Isp'] = request.isp;
  }
  if (!Util.isUnset(request.networkingModel)) {
    query['NetworkingModel'] = request.networkingModel;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEpnBandwitdhByInternetChargeType',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the metering method of the EPN bandwidth within a time period.
 *
 * @param request DescribeEpnBandwitdhByInternetChargeTypeRequest
 * @return DescribeEpnBandwitdhByInternetChargeTypeResponse
 */
async function describeEpnBandwitdhByInternetChargeType(request: DescribeEpnBandwitdhByInternetChargeTypeRequest): DescribeEpnBandwitdhByInternetChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEpnBandwitdhByInternetChargeTypeWithOptions(request, runtime);
}

model DescribeEpnInstanceAttributeRequest {
  EPNInstanceId?: string(name='EPNInstanceId', description='The ID of the EPN instance.

This parameter is required.', example='epn-xxxx'),
}

model DescribeEpnInstanceAttributeResponseBody = {
  confVersions?: [ 
    {
      confVersion?: string(name='ConfVersion', description='The version number.', example='2017-10-11'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the node.', example='cn-chengdu-telecom'),
    }
  ](name='ConfVersions', description='The information about the EPN configurations.'),
  EPNInstanceId?: string(name='EPNInstanceId', description='The ID of the EPN instance.', example='epn-xxxx'),
  EPNInstanceName?: string(name='EPNInstanceName', description='The name of the EPN instance.', example='epn-test'),
  instances?: [ 
    {
      ensRegionId?: string(name='EnsRegionId', description='The ID of the node.', example='cn-chengdu-telecom-4'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='epn-xxx'),
      instanceName?: string(name='InstanceName', description='The name of the instance.', example='epn-test'),
      isp?: string(name='Isp', description='The ISP. Valid values:

*   cmcc: China Mobile
*   unicom: China Unicom
*   telecom: China Telecom', example='cmcc'),
      privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address.', example='192.168.1.12'),
      publicIpAddress?: string(name='PublicIpAddress', description='The public IP address.', example='20.3.XX.XX'),
      status?: string(name='Status', description='The status of the instance. Valid values:

*   Running
*   Stopped
*   Expired', example='Running'),
    }
  ](name='Instances', description='The information about the instance.'),
  networkingModel?: string(name='NetworkingModel', description='The networking mode. Valid values:

*   SpeedUp: intelligent acceleration network (Internet)
*   Connection: internal network
*   SpeedUpAndConnection: intelligent acceleration network and internal network', example='SpeedUp'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  vSwitches?: [ 
    {
      cidrBlock?: string(name='CidrBlock', description='The CIDR block.', example='10.0.0.1/24'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the node.', example='cn-chengdu-telecom-4'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vs-xxxx'),
      vSwitchName?: string(name='VSwitchName', description='The name of the vSwitch.', example='vs-test'),
    }
  ](name='VSwitches', description='Details of the vSwitch.'),
}

model DescribeEpnInstanceAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEpnInstanceAttributeResponseBody(name='body'),
}

/**
 * @summary Queries networking information about an EPN instance.
 *
 * @description In internal networking mode, the value of Instances is empty in the response. In public networking mode, the value of VSwitches is empty in the response.
 *
 * @param request DescribeEpnInstanceAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEpnInstanceAttributeResponse
 */
async function describeEpnInstanceAttributeWithOptions(request: DescribeEpnInstanceAttributeRequest, runtime: Util.RuntimeOptions): DescribeEpnInstanceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.EPNInstanceId)) {
    query['EPNInstanceId'] = request.EPNInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEpnInstanceAttribute',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries networking information about an EPN instance.
 *
 * @description In internal networking mode, the value of Instances is empty in the response. In public networking mode, the value of VSwitches is empty in the response.
 *
 * @param request DescribeEpnInstanceAttributeRequest
 * @return DescribeEpnInstanceAttributeResponse
 */
async function describeEpnInstanceAttribute(request: DescribeEpnInstanceAttributeRequest): DescribeEpnInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEpnInstanceAttributeWithOptions(request, runtime);
}

model DescribeEpnInstancesRequest {
  EPNInstanceId?: string(name='EPNInstanceId', description='The version number.', example='2017-11-10'),
  EPNInstanceName?: string(name='EPNInstanceName', description='The name of the EPN instance.', example='testEPNInstanceName'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: **1 to 50**. Default value: **10**.', example='10'),
}

model DescribeEpnInstancesResponseBody = {
  EPNInstances?: {
    EPNInstance?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the instance was created. The time is displayed in UTC.', example='2019-11-01T06:08:46Z'),
      EPNInstanceId?: string(name='EPNInstanceId', description='The ID of the EPN instance.', example='epn****'),
      EPNInstanceName?: string(name='EPNInstanceName', description='The name of the EPN instance.', example='ens_test_epn'),
      EPNInstanceType?: string(name='EPNInstanceType', description='Set the value to EdgeToEdge.', example='EdgeToEdge'),
      endTime?: string(name='EndTime', description='The end of the time range during which the data was queried. The time is displayed in UTC.', example='2019-11-01T06:08:46Z'),
      internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The inbound bandwidth. Unit: Mbit/s.', example='40'),
      modifyTime?: string(name='ModifyTime', description='The time when the instance was last modified. The time is displayed in UTC.', example='2019-11-01T06:08:46Z'),
      networkingModel?: string(name='NetworkingModel', description='The networking mode. Valid values:

*   SpeedUp: intelligent acceleration network (Internet)
*   Connection: internal network
*   SpeedUpAndConnection: intelligent acceleration network and internal network', example='SpeedUp'),
      startTime?: string(name='StartTime', description='The beginning of the time range during which the data was queried. The time is displayed in UTC.', example='2019-11-01T06:08:46Z'),
      status?: string(name='Status', description='The status of the instance. Valid values:

*   Running
*   Excuting
*   Stopped', example='Running'),
    }
  ](name='EPNInstance')
  }(name='EPNInstances', description='Details of EPN instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='40'),
  requestId?: string(name='RequestId', description='The request ID.', example='A1707FC0-430C-423A-B624-284046B20399'),
  totalCount?: int32(name='TotalCount', description='The total number of pages returned.', example='1'),
}

model DescribeEpnInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEpnInstancesResponseBody(name='body'),
}

/**
 * @summary Queries EPN instances.
 *
 * @param request DescribeEpnInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEpnInstancesResponse
 */
async function describeEpnInstancesWithOptions(request: DescribeEpnInstancesRequest, runtime: Util.RuntimeOptions): DescribeEpnInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.EPNInstanceId)) {
    query['EPNInstanceId'] = request.EPNInstanceId;
  }
  if (!Util.isUnset(request.EPNInstanceName)) {
    query['EPNInstanceName'] = request.EPNInstanceName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEpnInstances',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries EPN instances.
 *
 * @param request DescribeEpnInstancesRequest
 * @return DescribeEpnInstancesResponse
 */
async function describeEpnInstances(request: DescribeEpnInstancesRequest): DescribeEpnInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEpnInstancesWithOptions(request, runtime);
}

model DescribeEpnMeasurementDataRequest {
  endDate?: string(name='EndDate', description='The end of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2022-01-30T16:00:00Z'),
  startDate?: string(name='StartDate', description='The beginning of the time range to query. Specify the time in the yyyy-mm-ddthh:mm:ssz format. The time must be in UTC.

This parameter is required.', example='2021-09-30T16:00:00Z'),
}

model DescribeEpnMeasurementDataResponseBody = {
  measurementDatas?: {
    measurementData?: [ 
    {
      bandWidthFeeDatas?: {
        bandWidthFeeData?: [ 
        {
          costCode?: string(name='CostCode', description='The code of the billable item.', example='cn-cmcc-1'),
          costName?: string(name='CostName', description='The name of the billable item.', example='Beijing, Shanghai, and Guangzhou Mobile'),
          costType?: string(name='CostType', description='Metering method

*   SpeedUp: bandwidth of intelligent acceleration
*   IntranetConnection: internal bandwidth', example='SpeedUp'),
          costVal?: int32(name='CostVal', description='The value of the billable item.', example='16486'),
          ispLine?: string(name='IspLine', description='This parameter is unavailable.', example='This parameter is not currently in use.'),
        }
      ](name='BandWidthFeeData')
      }(name='BandWidthFeeDatas', description='The bandwidth data returned.'),
      chargeModel?: string(name='ChargeModel', description='The metering method. Valid values:

*   ChargeByUnified: unified metering.
*   ChargeByGrade: differential metering.', example='ChargeByGrade'),
      costCycle?: string(name='CostCycle', description='The metering cycle.', example='2019-07-30'),
      costEndTime?: string(name='CostEndTime', description='The end time of the metering cycle.', example='2019-07-30T16:00:00Z'),
      costStartTime?: string(name='CostStartTime', description='The start time of the metering cycle.', example='2019-07-29T16:00:00Z'),
    }
  ](name='MeasurementData')
  }(name='MeasurementDatas', description='The metering data returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='A6328C33-6304-5291-8641-0A00A99D0DD0'),
}

model DescribeEpnMeasurementDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEpnMeasurementDataResponseBody(name='body'),
}

/**
 * @summary Queries the metering data of the edge private network (EPN).
 *
 * @param request DescribeEpnMeasurementDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEpnMeasurementDataResponse
 */
async function describeEpnMeasurementDataWithOptions(request: DescribeEpnMeasurementDataRequest, runtime: Util.RuntimeOptions): DescribeEpnMeasurementDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEpnMeasurementData',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the metering data of the edge private network (EPN).
 *
 * @param request DescribeEpnMeasurementDataRequest
 * @return DescribeEpnMeasurementDataResponse
 */
async function describeEpnMeasurementData(request: DescribeEpnMeasurementDataRequest): DescribeEpnMeasurementDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEpnMeasurementDataWithOptions(request, runtime);
}

model DescribeExportImageInfoRequest {
  imageId?: string(name='ImageId', description='The ID of the image.', example='m-xxxxx'),
  imageName?: string(name='ImageName', description='The name of the image.', example='testImageName'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page **1**. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10'),
}

model DescribeExportImageInfoResponseBody = {
  images?: {
    image?: [ 
    {
      architecture?: string(name='Architecture', description='The architecture of the image. Example: **x86_64**.', example='x86_64'),
      creationTime?: string(name='CreationTime', description='The time when the image was created.', example='2017-12-08T12:10:03Z'),
      exportedImageURL?: string(name='ExportedImageURL', description='The URL of the exported image.', example='https://user_defined_bucket.oss-cn-beijing.aliyuncs.com/m-xxxxxxxxx1.qcow2'),
      imageExportStatus?: string(name='ImageExportStatus', description='The export status of the image. Valid values:

*   Exporting
*   Exported
*   ExportError
*   Unexported', example='Exported'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='m-xxxxxxxxx1'),
      imageName?: string(name='ImageName', description='The name of the image.', example='m-xxxxxxxxx1'),
      imageOwnerAlias?: string(name='ImageOwnerAlias', description='The source of the image. Valid values:

*   system: public image
*   self: custom image', example='system'),
      platform?: string(name='Platform', description='The OS.', example='centos'),
    }
  ](name='Image')
  }(name='Images', description='The returned result. For more information, see the Images parameter described in the JSON-formatted sample success response.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='13'),
}

model DescribeExportImageInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExportImageInfoResponseBody(name='body'),
}

/**
 * @summary Queries the export result of an image.
 *
 * @description *   You can call this operation to query information about all custom images in your account. The information include the image properties, image export status, and the Object Storage Service (OSS) download links.
 * *   Empty strings are returned for images that are not exported.
 * *   The download links may become invalid if you delete objects in OSS.
 *
 * @param request DescribeExportImageInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeExportImageInfoResponse
 */
async function describeExportImageInfoWithOptions(request: DescribeExportImageInfoRequest, runtime: Util.RuntimeOptions): DescribeExportImageInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.imageName)) {
    query['ImageName'] = request.imageName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExportImageInfo',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the export result of an image.
 *
 * @description *   You can call this operation to query information about all custom images in your account. The information include the image properties, image export status, and the Object Storage Service (OSS) download links.
 * *   Empty strings are returned for images that are not exported.
 * *   The download links may become invalid if you delete objects in OSS.
 *
 * @param request DescribeExportImageInfoRequest
 * @return DescribeExportImageInfoResponse
 */
async function describeExportImageInfo(request: DescribeExportImageInfoRequest): DescribeExportImageInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExportImageInfoWithOptions(request, runtime);
}

model DescribeExportImageStatusRequest {
  imageId?: string(name='ImageId', description='The ID of the image.

This parameter is required.', example='centos_6_08_64_20G_alibase_****'),
}

model DescribeExportImageStatusResponseBody = {
  imageExportStatus?: string(name='ImageExportStatus', description='The export status of the image. Valid values:

*   Exporting
*   Exported
*   ExportError
*   Unexported', example='Exporting'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='14BBB3A0-3DBE-54F5-AEC8-01D3F6B1EBE2'),
}

model DescribeExportImageStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExportImageStatusResponseBody(name='body'),
}

/**
 * @summary Queries the export status of an image.
 *
 * @param request DescribeExportImageStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeExportImageStatusResponse
 */
async function describeExportImageStatusWithOptions(request: DescribeExportImageStatusRequest, runtime: Util.RuntimeOptions): DescribeExportImageStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExportImageStatus',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the export status of an image.
 *
 * @param request DescribeExportImageStatusRequest
 * @return DescribeExportImageStatusResponse
 */
async function describeExportImageStatus(request: DescribeExportImageStatusRequest): DescribeExportImageStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExportImageStatusWithOptions(request, runtime);
}

model DescribeFileSystemsRequest {
  ensRegionId?: string(name='EnsRegionId', description='The ID of the region.', example='cn-beijing-cmcc'),
  fileSystemId?: string(name='FileSystemId', description='The ID of the file system.', example='c50f8*****'),
  fileSystemName?: string(name='FileSystemName', description='The name of the file system.', example='FileSystem1'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page **1**. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **100**. Default value: **10**.', example='10'),
}

model DescribeFileSystemsResponseBody = {
  fileSystems?: [ 
    {
      capacity?: long(name='Capacity', description='The capacity of the file system. Unit: MiB.', example='100000'),
      creationTime?: string(name='CreationTime', description='The time when the file system was created.', example='2022-08-31 12:00:00'),
      description?: string(name='Description'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the region.', example='cn-beijing-cmcc'),
      fileSystemId?: string(name='FileSystemId', description='The ID of the file system.', example='c50f8*****'),
      fileSystemName?: string(name='FileSystemName', description='The name of the file system.', example='FileSystem1'),
      meteredSize?: long(name='MeteredSize', description='The storage usage of the file system. The value of this parameter is the maximum storage usage of the file system over the last hour. Unit: bytes.', example='102400'),
      mountTargets?: [ 
        {
          mountTargetDomain?: string(name='MountTargetDomain', description='The path of the mount target.', example='*.*.*.*:/${FileSystemName}/{MountTargetName}'),
          mountTargetName?: string(name='MountTargetName', description='The name of the mount target.', example='target1'),
          netWorkId?: string(name='NetWorkId', description='The ID of the network.', example='n-****'),
          status?: string(name='Status', description='The status of the mount target. Valid values:

*   active: The mount target is available.
*   inactive: The mount target is unavailable.
*   pending: The task is running.
*   deleting: The mount target is being deleted.', example='active'),
        }
      ](name='MountTargets', description='The information about mount targets.'),
      payType?: string(name='PayType', description='The billing method. PostPaid is returned. PostPaid indicates the pay-as-you-go billing method.', example='PostPaid'),
      protocolType?: string(name='ProtocolType', description='The protocol type of the file system. Valid values:

*   NFS: Network File System (NFS)
*   SMB: Server Message Block (SMB)', example='NFS'),
      status?: string(name='Status', description='The status of the file system. Valid values:

*   pending: The file system is being created or modified.
*   running: The file system is available. Before you create a mount target for the file system, make sure that the file system is in the running state.
*   stopped: The file system is unavailable.
*   extending: The file system is being scaled out.
*   stopping: The file system is being disabled.
*   deleting: The file system is being deleted.', example='running'),
      storageType?: string(name='StorageType', description='The storage type. Valid values:

*   capacity: Capacity NAS file systems
*   performance: Performance NAS file systems', example='capacity'),
    }
  ](name='FileSystems', description='The information about the file systems.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='2'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='762DD527-358B-1E48-8005-CCE3ED4EB9E0'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeFileSystemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFileSystemsResponseBody(name='body'),
}

/**
 * @summary Queries the information about file systems.
 *
 * @param request DescribeFileSystemsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeFileSystemsResponse
 */
async function describeFileSystemsWithOptions(request: DescribeFileSystemsRequest, runtime: Util.RuntimeOptions): DescribeFileSystemsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFileSystems',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about file systems.
 *
 * @param request DescribeFileSystemsRequest
 * @return DescribeFileSystemsResponse
 */
async function describeFileSystems(request: DescribeFileSystemsRequest): DescribeFileSystemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFileSystemsWithOptions(request, runtime);
}

model DescribeForwardTableEntriesRequest {
  externalIp?: string(name='ExternalIp', description='The EIP in the DNAT entry. The public IP address is used to access the Internet.', example='36.XXX.XXX.72'),
  forwardEntryId?: string(name='ForwardEntryId', description='The ID of the DNAT entry.', example='fwd-5tfi6f0rutmd00xrhkag7****'),
  forwardEntryName?: string(name='ForwardEntryName', description='The name of the DNAT entry.', example='test0'),
  internalIp?: string(name='InternalIp', description='The private IP address of the instance that uses the DNAT entry for Internet communication.', example='10.XXX.XXX.50'),
  ipProtocol?: string(name='IpProtocol', description='The protocol. Valid values:

*   **TCP**: forwards TCP packets.
*   **UDP**: forwards UDP packets.
*   **Any**: forwards all packets.', example='TCP'),
  natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.

This parameter is required.', example='nat-5t7nh1cfm6kxiszlttr38****'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page **1**.

Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **100**.

Default value: **10**.', example='10'),
}

model DescribeForwardTableEntriesResponseBody = {
  forwardTableEntries?: [ 
    {
      externalIp?: string(name='ExternalIp', description='The EIP in the DNAT entry. The public IP address is used to access the Internet.', example='120.XXX.XXX.70'),
      externalPort?: string(name='ExternalPort', description='The external port or port range that is used in port forwarding.', example='22'),
      forwardEntryId?: string(name='ForwardEntryId', description='The ID of the DNAT entry.', example='fwd-5tf66679oi2uoxcvlg0g2****'),
      forwardEntryName?: string(name='ForwardEntryName', description='The name of the DNAT entry.', example='test0'),
      healthCheckPort?: string(name='HealthCheckPort', description='The probe port of DNAT.', example='80'),
      internalIp?: string(name='InternalIp', description='The private IP address of the instance that uses the DNAT entry for Internet communication.', example='10.XXX.XXX.3'),
      internalPort?: string(name='InternalPort', description='The internal port or port range that is used for port forwarding.', example='22'),
      ipProtocol?: string(name='IpProtocol', description='The protocol. Valid values:

*   **TCP**: forwards TCP packets.
*   **UDP**: forwards UDP packets.
*   **Any**: forwards all packets.', example='Any'),
      natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.', example='nat-5tawjw5j7sgd2deujxuk0****'),
      standbyExternalIp?: string(name='StandbyExternalIp', description='The secondary EIP that is used to access the Internet.', example='101.XXX.XXX.7'),
      standbyStatus?: string(name='StandbyStatus', description='The status of the secondary EIP. Valid values:

*   Running
*   Stopping
*   Stopped
*   Starting', example='Stopped'),
      status?: string(name='Status', description='The status of the DNAT entry. Valid values:

*   Pending: The DNAT entry is being created or modified.
*   Available: The DNAT entry is available.
*   Deleting: The DNAT entry is being deleted.', example='Available'),
    }
  ](name='ForwardTableEntries', description='Details of DNAT entries.'),
  pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='100'),
}

model DescribeForwardTableEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeForwardTableEntriesResponseBody(name='body'),
}

/**
 * @summary Queries Destination Network Address Translation (DNAT) entries that you created.
 *
 * @param request DescribeForwardTableEntriesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeForwardTableEntriesResponse
 */
async function describeForwardTableEntriesWithOptions(request: DescribeForwardTableEntriesRequest, runtime: Util.RuntimeOptions): DescribeForwardTableEntriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.externalIp)) {
    query['ExternalIp'] = request.externalIp;
  }
  if (!Util.isUnset(request.forwardEntryId)) {
    query['ForwardEntryId'] = request.forwardEntryId;
  }
  if (!Util.isUnset(request.forwardEntryName)) {
    query['ForwardEntryName'] = request.forwardEntryName;
  }
  if (!Util.isUnset(request.internalIp)) {
    query['InternalIp'] = request.internalIp;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeForwardTableEntries',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries Destination Network Address Translation (DNAT) entries that you created.
 *
 * @param request DescribeForwardTableEntriesRequest
 * @return DescribeForwardTableEntriesResponse
 */
async function describeForwardTableEntries(request: DescribeForwardTableEntriesRequest): DescribeForwardTableEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeForwardTableEntriesWithOptions(request, runtime);
}

model DescribeHaVipsRequest {
  ensRegionId?: string(name='EnsRegionId', description='The ID of the region.', example='cn-beijing-cmcc'),
  ensRegionIds?: [ string ](name='EnsRegionIds'),
  haVipAddress?: string(name='HaVipAddress', description='The IP address of the HAVIP.', example='10.5.XX.XX'),
  haVipId?: string(name='HaVipId', description='The ID of the HAVIP.', example='havip-5p14t****'),
  name?: string(name='Name', description='The name of the HAVIP.', example='test'),
  networkId?: string(name='NetworkId', description='The ID of the network.', example='n-57gqcdfvx6n****'),
  pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
  status?: string(name='Status', description='The status of the HAVIP. Valid values:

*   Creating
*   Available
*   InUse
*   Deleting', example='Available'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-5****'),
}

model DescribeHaVipsResponseBody = {
  haVips?: [ 
    {
      associatedEipAddresses?: [ 
        {
          eip?: string(name='Eip', description='The EIP.', example='47.XX.XX.40'),
          eipId?: string(name='EipId', description='The ID of the EIP.', example='eip-5p1wz****'),
        }
      ](name='AssociatedEipAddresses', description='The elastic IP addresses (EIPs) that are associated with the HAVIP.'),
      associatedInstances?: [ 
        {
          creationTime?: string(name='CreationTime', description='The time when the instance was created.', example='2023-01-05T07:09:28Z'),
          instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-51p****'),
          instanceType?: string(name='InstanceType', description='The type of the instance that is associated with the HAVIP. Valid values:

*   EnsInstance: ENS instance
*   NetworkInterface: elastic network interface (ENI)', example='EnsInstance'),
          ipAddress?: string(name='IpAddress', description='The private IP address of the instance that is associated with the HAVIP. Valid values:', example='192.XX.XX.9'),
          status?: string(name='Status', description='The association status of the HAVIP. Valid values:

*   Associating
*   InUse
*   Unassociating', example='InUse'),
        }
      ](name='AssociatedInstances', description='The information about instances that are associated with the HAVIP.'),
      creationTime?: string(name='CreationTime', description='The time when the HAVIP was created.', example='2023-03-29T11:17:38Z'),
      description?: string(name='Description', description='The description of the HAVIP.', example='test'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the region.', example='cn-guiyang-14'),
      haVipId?: string(name='HaVipId', description='The ID of the HAVIP.', example='havip-52y28****'),
      ipAddress?: string(name='IpAddress', description='The IP address of the HAVIP.', example='192.XX.XX.5'),
      name?: string(name='Name', description='The name of the HAVIP.', example='test'),
      networkId?: string(name='NetworkId', description='The ID of the network.', example='n-5wtkyrk****'),
      status?: string(name='Status', description='The status of the HAVIP. Valid values:

*   Creating
*   Available
*   InUse
*   Deleting', example='Available'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-5yc8d****'),
    }
  ](name='HaVips', description='Details of the HAVIPs.'),
  pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='AAE90880-4970-4D81-A534-A6C0F3631F74'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='49'),
}

model DescribeHaVipsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHaVipsResponseBody(name='body'),
}

/**
 * @summary Queries high-availability virtual IP addresses (HAVIPs).
 *
 * @param request DescribeHaVipsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeHaVipsResponse
 */
async function describeHaVipsWithOptions(request: DescribeHaVipsRequest, runtime: Util.RuntimeOptions): DescribeHaVipsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHaVips',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries high-availability virtual IP addresses (HAVIPs).
 *
 * @param request DescribeHaVipsRequest
 * @return DescribeHaVipsResponse
 */
async function describeHaVips(request: DescribeHaVipsRequest): DescribeHaVipsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHaVipsWithOptions(request, runtime);
}

model DescribeImageInfosRequest {
  osType?: string(name='OsType', description='The operating system (OS). You can specify only one OS in a request. If you do not specify a value for this parameter, images for all supported OSs are queried. Valid values:

*   linux
*   windows', example='linux'),
}

model DescribeImageInfosResponseBody = {
  code?: int32(name='Code', description='The HTTP status code that is returned.', example='0'),
  images?: {
    image?: [ 
    {
      computeType?: string(name='ComputeType', description='The computing type of the image. Valid values:

*   ens_vm: x86 computing.
*   arm_vm: ARM computing.
*   bare_metal: x86 bare machine.
*   pcfarm: heterogeneous computing.', example='ens_vm'),
      description?: string(name='Description', description='The description of the image.', example='centos_6_08_64_20G_alibase_2017****'),
      diskDeviceMappings?: {
        diskDeviceMapping?: [ 
        {
          format?: string(name='Format', description='The format of the image.', example='The format of the image.
raw
qcow2'),
          size?: string(name='Size', description='The size of the image. Unit: GB.', example='100'),
          type?: string(name='Type', description='The type of the disk. Valid values: System and Data.', example='Data'),
          imageId?: string(name='imageId', description='The ID of the image.', example='i-test'),
        }
      ](name='DiskDeviceMapping')
      }(name='DiskDeviceMappings', description='The mappings between disks and snapshots in the image.'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='centos_6_08_64_20G_alibase_2017****'),
      imageSize?: string(name='ImageSize', description='The size of the image. Unit: GiB.', example='20'),
      imageVersion?: string(name='ImageVersion', description='The version of the image.', example='6.8'),
      OSName?: string(name='OSName', description='The type of the image. Valid values: **centos**, **debian**, **ubuntu**, and **windows**.', example='centos'),
      OSType?: string(name='OSType', description='The type of the operating system.', example='linux'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-shenzhen'),
    }
  ](name='Image')
  }(name='Images', description='The information about images.'),
  requestId?: string(name='RequestId', description='The request ID.', example='5568A08C-10A9-47F3-902F-647298B463FB'),
}

model DescribeImageInfosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeImageInfosResponseBody(name='body'),
}

/**
 * @summary Queries available images.
 *
 * @param request DescribeImageInfosRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeImageInfosResponse
 */
async function describeImageInfosWithOptions(request: DescribeImageInfosRequest, runtime: Util.RuntimeOptions): DescribeImageInfosResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.osType)) {
    query['OsType'] = request.osType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageInfos',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries available images.
 *
 * @param request DescribeImageInfosRequest
 * @return DescribeImageInfosResponse
 */
async function describeImageInfos(request: DescribeImageInfosRequest): DescribeImageInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageInfosWithOptions(request, runtime);
}

model DescribeImageSharePermissionRequest {
  aliyunId?: long(name='AliyunId', description='The ID of the Alibaba Cloud account.', example='171710408091****'),
  imageId?: string(name='ImageId', description='The ID of the image.

This parameter is required.', example='m-5s7qotzavwbrnzaqh4unm****'),
  pageNumber?: string(name='PageNumber', description='The page number. Pages start from page **1**.

Default value: **1**.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Maximum value: **100**.

Default value: **10**', example='10'),
}

model DescribeImageSharePermissionResponseBody = {
  accounts?: {
    account?: [ 
    {
      aliyunUid?: string(name='AliyunUid'),
    }
  ](name='Account')
  }(name='Accounts', description='The account information.'),
  imageId?: string(name='ImageId', description='The ID of the image.', example='m-5qkf6jv9a0tzd5ipwx5fi****'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='100'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A44EE357-6174-5E37-A801-48F5790F9ACE'),
  totalCount?: int32(name='TotalCount', description='The total number of Alibaba Cloud accounts with which you share the image.', example='2'),
}

model DescribeImageSharePermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeImageSharePermissionResponseBody(name='body'),
}

/**
 * @summary Queries the accounts with which you share an image specified by the ImageId parameter.
 *
 * @param request DescribeImageSharePermissionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeImageSharePermissionResponse
 */
async function describeImageSharePermissionWithOptions(request: DescribeImageSharePermissionRequest, runtime: Util.RuntimeOptions): DescribeImageSharePermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunId)) {
    query['AliyunId'] = request.aliyunId;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageSharePermission',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the accounts with which you share an image specified by the ImageId parameter.
 *
 * @param request DescribeImageSharePermissionRequest
 * @return DescribeImageSharePermissionResponse
 */
async function describeImageSharePermission(request: DescribeImageSharePermissionRequest): DescribeImageSharePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageSharePermissionWithOptions(request, runtime);
}

model DescribeImagesRequest {
  ensRegionId?: string(name='EnsRegionId', description='The ID of the Edge Node Service (ENS) node.', example='cn-dalian-unicom'),
  imageId?: string(name='ImageId', description='The ID of the image. You can specify only one image ID.

Custom images and public images are supported.', example='m-5qm2r6xo7njrpdkx04q1o****'),
  imageName?: string(name='ImageName', description='The name of the custom image. The name must be 2 to 128 characters in length The name must start with a letter and cannot start with `acs:` or `aliyun`. The name cannot contain `http://` or `https://`. The name can contain letters, digits, periods (.), colons (:), underscores (_), and hyphens (-).

By default, this parameter is left empty, which indicates that the original name is retained.', example='centos_6_08_64_20G_a****'),
  pageNumber?: string(name='PageNumber', description='The page number. Pages start from page **1**.

Default value: **1**.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page. Maximum value: **50**.

Default value: **10**.', example='50'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='mock-clone_snapshot_id'),
  status?: string(name='Status', description='This parameter is unavailable.', example='This parameter is not currently in use.'),
}

model DescribeImagesResponseBody = {
  code?: int32(name='Code', description='The returned service code. 0 indicates that the request was successful.', example='0'),
  images?: {
    image?: [ 
    {
      architecture?: string(name='Architecture', description='The architecture of the image. Example: **x86_64**.', example='x86_64'),
      creationTime?: string(name='CreationTime', description='The time when the image was created. The time follows the ISO 8601 standard.', example='2017-12-08T12:10:03Z'),
      diskDeviceMappings?: {
        diskDeviceMapping?: [ 
        {
          format?: string(name='Format', description='The format of the image.', example='The format of the image.
raw
qcow2'),
          size?: string(name='Size', description='The size of the disk. Unit: GiB.', example='100'),
          type?: string(name='Type', description='The type of the disk. Valid values:

*   system: system disk.
*   data: data disk.', example='Data'),
          imageId?: string(name='imageId', description='The ID of image.', example='i-test'),
        }
      ](name='DiskDeviceMapping')
      }(name='DiskDeviceMappings', description='The mappings between the disk and the snapshot in the image.'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='centos_6_08_64_20G_alibase_2017****'),
      imageName?: string(name='ImageName', description='The name of the image.', example='Ubuntu_16.04'),
      imageOwnerAlias?: string(name='ImageOwnerAlias', description='The source of the image. Valid values:

*   system: Alibaba Cloud public images
*   self: your custom images
*   others: shared images from other Alibaba Cloud accounts, or community images published by other Alibaba Cloud accounts', example='system'),
      imageSize?: string(name='ImageSize', description='The size of the image. Unit: GiB.', example='40'),
      platform?: string(name='Platform', description='The operating system type of the image. Valid values:

*   Linux
*   Windows', example='centos'),
      regionId?: string(name='RegionId', description='The ID of the Edge Node Service (ENS) node.', example='cn-qingdao'),
      snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='mock-clone_snapshot_id'),
    }
  ](name='Image')
  }(name='Images', description='The information about images.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8331AA01-C16D-5481-BB47-D19CEBAA811E'),
  totalCount?: int32(name='TotalCount', description='The total number of images.', example='4'),
}

model DescribeImagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeImagesResponseBody(name='body'),
}

/**
 * @summary Queries available images.
 *
 * @param request DescribeImagesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeImagesResponse
 */
async function describeImagesWithOptions(request: DescribeImagesRequest, runtime: Util.RuntimeOptions): DescribeImagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.imageName)) {
    query['ImageName'] = request.imageName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImages',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries available images.
 *
 * @param request DescribeImagesRequest
 * @return DescribeImagesResponse
 */
async function describeImages(request: DescribeImagesRequest): DescribeImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImagesWithOptions(request, runtime);
}

model DescribeInstanceAutoRenewAttributeRequest {
  instanceIds?: string(name='InstanceIds', description='The ID of an instance. Separate multiple IDs with semicolons (;).

This parameter is required.', example='i-5ci7l7k1m9m2zmhp4iw3o****'),
  ownerId?: long(name='OwnerId'),
}

model DescribeInstanceAutoRenewAttributeResponseBody = {
  code?: int32(name='Code', description='The returned service code. A value of 0 indicates that the operation was successful.', example='0'),
  instanceRenewAttributes?: {
    instanceRenewAttribute?: [ 
    {
      autoRenewal?: boolean(name='AutoRenewal', description='The renewal type of the instance.

*   **true**: enables auto-renewal.
*   **false**: disables auto-renewal.', example='false'),
      duration?: string(name='Duration', description='The unit of the auto-renewal period.', example='0'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-5ci7l7k1m9m2zmhp4iw3o****'),
    }
  ](name='InstanceRenewAttribute')
  }(name='InstanceRenewAttributes', description='The renewal status of the instance.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4DD66F05-3116-4BAA-B588-52EB2E7F431D'),
}

model DescribeInstanceAutoRenewAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceAutoRenewAttributeResponseBody(name='body'),
}

/**
 * @summary You can call this operation to query whether auto-renewal is enabled for an instance.
 *
 * @param request DescribeInstanceAutoRenewAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInstanceAutoRenewAttributeResponse
 */
async function describeInstanceAutoRenewAttributeWithOptions(request: DescribeInstanceAutoRenewAttributeRequest, runtime: Util.RuntimeOptions): DescribeInstanceAutoRenewAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceAutoRenewAttribute',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary You can call this operation to query whether auto-renewal is enabled for an instance.
 *
 * @param request DescribeInstanceAutoRenewAttributeRequest
 * @return DescribeInstanceAutoRenewAttributeResponse
 */
async function describeInstanceAutoRenewAttribute(request: DescribeInstanceAutoRenewAttributeRequest): DescribeInstanceAutoRenewAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAutoRenewAttributeWithOptions(request, runtime);
}

model DescribeInstanceBandwidthDetailRequest {
  endTime?: string(name='EndTime', description='This parameter is required.', example='2024-01-11 30:00:00'),
  ensRegionId?: string(name='EnsRegionId', example='cn-beijing-cmcc'),
  instanceId?: string(name='InstanceId', example='i-6ecpqvkicnchxccozrpxxxx'),
  instanceType?: string(name='InstanceType', example='vm'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  serviceType?: string(name='ServiceType', example='vm'),
  startTime?: string(name='StartTime', description='This parameter is required.', example='2024-01-11 00:00:00'),
}

model DescribeInstanceBandwidthDetailResponseBody = {
  bandwidths?: [ 
    {
      aliUid?: long(name='AliUid', example='1972653484384661'),
      bizTime?: string(name='BizTime', example='2024-01-11 00:00:00'),
      ensRegionId?: string(name='EnsRegionId', example='cn-yichang-2'),
      flowType?: int32(name='FlowType', example='1'),
      instanceId?: string(name='InstanceId', example='i-6ecpqvkicnchxccozrpxxxx'),
      instanceType?: string(name='InstanceType', example='vm'),
      ip?: string(name='Ip', example='203.107.***'),
      isp?: string(name='Isp', example='cmcc'),
      rxBw?: long(name='RxBw', example='43795230'),
      serviceType?: string(name='ServiceType', example='vm'),
      txBw?: long(name='TxBw', example='25415638'),
    }
  ](name='Bandwidths'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='C0003E8B-B930-4F59-ADC0-0E209A9012A8'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeInstanceBandwidthDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceBandwidthDetailResponseBody(name='body'),
}

/**
 * @summary 查询实例5分钟粒度带宽明细
 *
 * @param request DescribeInstanceBandwidthDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInstanceBandwidthDetailResponse
 */
async function describeInstanceBandwidthDetailWithOptions(request: DescribeInstanceBandwidthDetailRequest, runtime: Util.RuntimeOptions): DescribeInstanceBandwidthDetailResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceBandwidthDetail',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询实例5分钟粒度带宽明细
 *
 * @param request DescribeInstanceBandwidthDetailRequest
 * @return DescribeInstanceBandwidthDetailResponse
 */
async function describeInstanceBandwidthDetail(request: DescribeInstanceBandwidthDetailRequest): DescribeInstanceBandwidthDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceBandwidthDetailWithOptions(request, runtime);
}

model DescribeInstanceBootConfigurationRequest {
  bootSet?: string(name='BootSet', example='legacy'),
  bootType?: string(name='BootType', example='pxe'),
  diskSet?: string(name='DiskSet', example='on'),
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='i-****'),
}

model DescribeInstanceBootConfigurationResponseBody = {
  instances?: {
    bootSet?: string(name='BootSet', example='legacy'),
    bootType?: string(name='BootType', example='disk'),
    diskSet?: string(name='DiskSet', example='off'),
    instanceId?: string(name='InstanceId', example='i-****'),
  }(name='Instances', description='Schema of Response'),
  requestId?: string(name='RequestId', description='Id of the request', example='F3B261DD-3858-4D3C-877D-303ADF374600'),
}

model DescribeInstanceBootConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceBootConfigurationResponseBody(name='body'),
}

/**
 * @summary 修改启动配置，只支持异构实例(PCFarm裸金属)。
 *
 * @param request DescribeInstanceBootConfigurationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInstanceBootConfigurationResponse
 */
async function describeInstanceBootConfigurationWithOptions(request: DescribeInstanceBootConfigurationRequest, runtime: Util.RuntimeOptions): DescribeInstanceBootConfigurationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bootSet)) {
    query['BootSet'] = request.bootSet;
  }
  if (!Util.isUnset(request.bootType)) {
    query['BootType'] = request.bootType;
  }
  if (!Util.isUnset(request.diskSet)) {
    query['DiskSet'] = request.diskSet;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceBootConfiguration',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改启动配置，只支持异构实例(PCFarm裸金属)。
 *
 * @param request DescribeInstanceBootConfigurationRequest
 * @return DescribeInstanceBootConfigurationResponse
 */
async function describeInstanceBootConfiguration(request: DescribeInstanceBootConfigurationRequest): DescribeInstanceBootConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceBootConfigurationWithOptions(request, runtime);
}

model DescribeInstanceMonitorDataRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. If the value of the seconds place is not 00, the start time is automatically set to the next minute.', example='2019-10-30T08:00:00Z'),
  instanceId?: string(name='InstanceId', description='The ID of the instance. You can specify only one instance ID.', example='yourInstance ID'),
  period?: string(name='Period', description='The precision of the monitoring data that you want to obtain. Valid values: 60, 300, 1200, 3600, and 14400. Default value: 60. Unit: seconds.', example='60'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. If the value of the seconds place is not 00, the start time is automatically set to the next minute.', example='2019-10-29T23:00:00Z'),
}

model DescribeInstanceMonitorDataResponseBody = {
  code?: int32(name='Code', description='The returned service code. A value of 0 indicates that the operation was successful.', example='0'),
  monitorData?: {
    instanceMonitorData?: [ 
    {
      CPU?: string(name='CPU', description='The vCPU usage of the instance, which is raw data. For example, a value of 0.02 indicates that the usage is 2%.', example='0.02'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='yourInstance ID'),
      memory?: string(name='Memory', description='This parameter is not yet supported.', example='Not currently supported'),
    }
  ](name='InstanceMonitorData')
  }(name='MonitorData', description='The set of InstanceMonitorDataType data.'),
  requestId?: string(name='RequestId', description='The request ID.', example='C8B26B44-0189-443E-9816-D951F59623A9'),
}

model DescribeInstanceMonitorDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceMonitorDataResponseBody(name='body'),
}

/**
 * @summary Queries the vCPU and memory usage of an instance.
 *
 * @param request DescribeInstanceMonitorDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInstanceMonitorDataResponse
 */
async function describeInstanceMonitorDataWithOptions(request: DescribeInstanceMonitorDataRequest, runtime: Util.RuntimeOptions): DescribeInstanceMonitorDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceMonitorData',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the vCPU and memory usage of an instance.
 *
 * @param request DescribeInstanceMonitorDataRequest
 * @return DescribeInstanceMonitorDataResponse
 */
async function describeInstanceMonitorData(request: DescribeInstanceMonitorDataRequest): DescribeInstanceMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceMonitorDataWithOptions(request, runtime);
}

model DescribeInstanceSDGStatusRequest {
  instanceId?: string(name='InstanceId', description='The ID of the AIC instance.

This parameter is required.', example='aic-xxxxx'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  SDGIds?: [ string ](name='SDGIds', description='The IDs of SDGs that you want to query. By default, all SDGs are queried.'),
  status?: string(name='Status', description='The deployment status of the SDG.', example='success'),
}

model DescribeInstanceSDGStatusShrinkRequest {
  instanceId?: string(name='InstanceId', description='The ID of the AIC instance.

This parameter is required.', example='aic-xxxxx'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  SDGIdsShrink?: string(name='SDGIds', description='The IDs of SDGs that you want to query. By default, all SDGs are queried.'),
  status?: string(name='Status', description='The deployment status of the SDG.', example='success'),
}

model DescribeInstanceSDGStatusResponseBody = {
  deploymentStatus?: [ 
    {
      ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.', example='cn-guangzhou-26'),
      instanceId?: string(name='InstanceId', description='The ID of the AIC instance.', example='aic-xxxx'),
      mountType?: string(name='MountType', description='The deployment type of the SDG.', example='shared'),
      phase?: string(name='Phase', description='Deployment Phase', example='attach'),
      SDGId?: string(name='SDGId', description='The ID of the SDG.', example='sdg-xxxxxxx'),
      status?: string(name='Status', description='The deployment status of the SDG.', example='success'),
      updateTime?: string(name='UpdateTime', description='The time when the status was last updated.', example='2023-02-17T02:44:31Z'),
    }
  ](name='DeploymentStatus', description='The deployment information of the SDGs.'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return. Pages start from page 1. Default value: 1', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='C0003E8B-B930-4F59-ADC0-0E209A9012A8'),
  totalCount?: string(name='TotalCount', description='The total number of queried deployment records.', example='1'),
}

model DescribeInstanceSDGStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceSDGStatusResponseBody(name='body'),
}

/**
 * @summary Queries shared data groups (SDGs) that are mounted to an Android in Container (AIC) instance.
 *
 * @param tmpReq DescribeInstanceSDGStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInstanceSDGStatusResponse
 */
async function describeInstanceSDGStatusWithOptions(tmpReq: DescribeInstanceSDGStatusRequest, runtime: Util.RuntimeOptions): DescribeInstanceSDGStatusResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeInstanceSDGStatusShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.SDGIds)) {
    request.SDGIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.SDGIds, 'SDGIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceSDGStatus',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries shared data groups (SDGs) that are mounted to an Android in Container (AIC) instance.
 *
 * @param request DescribeInstanceSDGStatusRequest
 * @return DescribeInstanceSDGStatusResponse
 */
async function describeInstanceSDGStatus(request: DescribeInstanceSDGStatusRequest): DescribeInstanceSDGStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceSDGStatusWithOptions(request, runtime);
}

model DescribeInstanceSpecResponseBody = {
  bandwidthLimit?: int32(name='BandwidthLimit', description='The bandwidth limit for a single instance. Unit: Mbit/s.', example='0'),
  code?: int32(name='Code', description='The returned service code. A value of 0 indicates that the operation was successful.', example='0'),
  dataDiskMaxSize?: int32(name='DataDiskMaxSize', description='The maximum capacity of a data disk. Unit: GB.', example='20015'),
  dataDiskMinSize?: int32(name='DataDiskMinSize', description='The minimum capacity of a data disk. Unit: GB.', example='0'),
  instanceSpecs?: {
    instanceSpec?: [ 
    {
      core?: string(name='Core', description='The number of CPU cores.', example='1'),
      displayName?: string(name='DisplayName', description='The display name of the instance type.', example='Computational 1C2G'),
      instanceType?: string(name='InstanceType', description='The type of the instance.', example='ens.sn1.stiny'),
      memory?: string(name='Memory', description='The memory size. Unit: MB.', example='2048'),
    }
  ](name='InstanceSpec')
  }(name='InstanceSpecs', description='The information about instance specifications.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1ECC937A-AE0E-4626-BE51-DED1D6D1C888'),
  systemDiskMaxSize?: int32(name='SystemDiskMaxSize', description='The maximum capacity of the system disk. Unit: GiB.', example='80'),
}

model DescribeInstanceSpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceSpecResponseBody(name='body'),
}

/**
 * @summary Queries the instance specifications that you can purchase.
 *
 * @param request DescribeInstanceSpecRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInstanceSpecResponse
 */
async function describeInstanceSpecWithOptions(runtime: Util.RuntimeOptions): DescribeInstanceSpecResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeInstanceSpec',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the instance specifications that you can purchase.
 *
 * @return DescribeInstanceSpecResponse
 */
async function describeInstanceSpec(): DescribeInstanceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceSpecWithOptions(runtime);
}

model DescribeInstanceTypesResponseBody = {
  code?: int32(name='Code', description='The status code. If the request is successful, 0 is returned. If the request fails, a non-zero error code is returned.', example='0'),
  instanceTypes?: {
    instanceType?: [ 
    {
      cpuCoreCount?: int32(name='CpuCoreCount', description='The number of vCPUs.', example='2'),
      instanceTypeId?: string(name='InstanceTypeId', description='This parameter is unavailable.', example='This parameter is not needed temporarily.'),
      instanceTypeName?: string(name='InstanceTypeName', description='The name of the instance type.', example='ens.xxx.small'),
      memorySize?: int32(name='MemorySize', description='The memory size. Unit: MB.', example='8192'),
    }
  ](name='InstanceType')
  }(name='InstanceTypes', description='Details about the instance types.'),
  requestId?: string(name='RequestId', description='The request ID.', example='D452D190-BADF-5D09-910D-599B96D42AAA'),
}

model DescribeInstanceTypesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceTypesResponseBody(name='body'),
}

/**
 * @summary Queries the specifications of instance types.
 *
 * @param request DescribeInstanceTypesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInstanceTypesResponse
 */
async function describeInstanceTypesWithOptions(runtime: Util.RuntimeOptions): DescribeInstanceTypesResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeInstanceTypes',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the specifications of instance types.
 *
 * @return DescribeInstanceTypesResponse
 */
async function describeInstanceTypes(): DescribeInstanceTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceTypesWithOptions(runtime);
}

model DescribeInstanceVncUrlRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance

This parameter is required.', example='i-5bp1hzoinajzkh91h****'),
}

model DescribeInstanceVncUrlResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  vncUrl?: string(name='VncUrl', description='The URL of the VNC management terminal.', example='wss%3A%2F%2Fhz01-vncproxy.aliyun.com%2Fwebsockify%2F%3Fs%3DDvh%252FIA%252BYc73gWO48cBx2gBxUDVzaAnSKr74pq30mzqUYgeUMcB%252FbkNixDxdEA996'),
}

model DescribeInstanceVncUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceVncUrlResponseBody(name='body'),
}

/**
 * @summary Queries the Virtual Network Computing (VNC) URL of an Edge Node Service (ENS) instance.
 *
 * @param request DescribeInstanceVncUrlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInstanceVncUrlResponse
 */
async function describeInstanceVncUrlWithOptions(request: DescribeInstanceVncUrlRequest, runtime: Util.RuntimeOptions): DescribeInstanceVncUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceVncUrl',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the Virtual Network Computing (VNC) URL of an Edge Node Service (ENS) instance.
 *
 * @param request DescribeInstanceVncUrlRequest
 * @return DescribeInstanceVncUrlResponse
 */
async function describeInstanceVncUrl(request: DescribeInstanceVncUrlRequest): DescribeInstanceVncUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceVncUrlWithOptions(request, runtime);
}

model DescribeInstancesRequest {
  ensRegionId?: string(name='EnsRegionId', description='The region ID.', example='cn-beijing-cmcc'),
  ensRegionIds?: string(name='EnsRegionIds', description='The IDs of the regions. The value is a JSON array that consists of up to 100 IDs. Separate multiple IDs with commas (,).', example='["cn-suzhou-telecom","cn-chengdu-telecom"]'),
  ensServiceId?: string(name='EnsServiceId', description='The ID of the edge service. You can use the ID to query information about the instances that are created in the edge service.', example='ens-20190730202316s****'),
  imageId?: string(name='ImageId', description='The ID of the image.', example='centos_6_08_64_20G_alibase_****'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-5iqczfxps7csjrxeca****'),
  instanceIds?: string(name='InstanceIds', description='The IDs of the instances. The value is a JSON array that consists of up to 100 IDs. Separate IDs with commas (,).', example='["i-5iqczfxps7csjrxeca07****", "i-5iqczfxps7csjrxeca07****"]]'),
  instanceName?: string(name='InstanceName', description='The name of the instance.', example='TestName'),
  instanceResourceType?: string(name='InstanceResourceType', description='The condition that you want to use to filter instances by category. Valid values:

*   EnsInstance: ENS instances that you purchase.
*   EnsService: ENS instances that belong to edge services.
*   BuildMachine: ENS instances that are configured with image builders.
*   EnsPostPaidInstance: Pay-as-you-go ENS instances that you purchase.', example='EnsService'),
  instanceType?: string(name='InstanceType', description='The instance type.', example='ens.se1.tiny'),
  intranetIp?: string(name='IntranetIp', description='The internal IP address of the instance.', example='47.100.XX.XX'),
  networkId?: string(name='NetworkId', description='The ID of the network.', example='n-2zeuphj08tt7q3brd****'),
  orderByParams?: string(name='OrderByParams', description='The method that you want to use to sort instances. The value of this parameter is in the JSON format.

You can sort instances by name, expiration time, node ID, or creation time. You can specify one or more methods.', example='{"InstanceNameSort":"asc","ExpireTimeSort":"asc","CreationTimeSort":"desc"}}'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page **1**.

Default value: **1**.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. The maximum value is **100**.

Default value: **10**.', example='10'),
  searchKey?: string(name='SearchKey', description='The keyword that you use to query the logs of the service. You can specify the values of parameters such as **ip**, **InstanceName**, and **InstanceId** as the keyword.', example='Joshua'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-5kyicq2kfcapxrdds6tar7jqb'),
  serviceStatus?: [ string ](name='ServiceStatus', description='The status of the service. Valid values.'),
  status?: string(name='Status', description='The status of the instance. Valid values:

*   Running
*   Stopped
*   Expired', example='Running'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of the tag that are to add to the instance. Valid values: 1 to 20.', example='tag'),
      value?: string(name='Value', description='The tag value of the instance. Valid values: 1 to 20.', example='2'),
    }
  ](name='Tags', description='The tags that are added to the resource. This operation does not return tag information. You can call this operation in combination with the tag-related operations.'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-2zeh0r1pabwtg6wcs****'),
}

model DescribeInstancesShrinkRequest {
  ensRegionId?: string(name='EnsRegionId', description='The region ID.', example='cn-beijing-cmcc'),
  ensRegionIds?: string(name='EnsRegionIds', description='The IDs of the regions. The value is a JSON array that consists of up to 100 IDs. Separate multiple IDs with commas (,).', example='["cn-suzhou-telecom","cn-chengdu-telecom"]'),
  ensServiceId?: string(name='EnsServiceId', description='The ID of the edge service. You can use the ID to query information about the instances that are created in the edge service.', example='ens-20190730202316s****'),
  imageId?: string(name='ImageId', description='The ID of the image.', example='centos_6_08_64_20G_alibase_****'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-5iqczfxps7csjrxeca****'),
  instanceIds?: string(name='InstanceIds', description='The IDs of the instances. The value is a JSON array that consists of up to 100 IDs. Separate IDs with commas (,).', example='["i-5iqczfxps7csjrxeca07****", "i-5iqczfxps7csjrxeca07****"]]'),
  instanceName?: string(name='InstanceName', description='The name of the instance.', example='TestName'),
  instanceResourceType?: string(name='InstanceResourceType', description='The condition that you want to use to filter instances by category. Valid values:

*   EnsInstance: ENS instances that you purchase.
*   EnsService: ENS instances that belong to edge services.
*   BuildMachine: ENS instances that are configured with image builders.
*   EnsPostPaidInstance: Pay-as-you-go ENS instances that you purchase.', example='EnsService'),
  instanceType?: string(name='InstanceType', description='The instance type.', example='ens.se1.tiny'),
  intranetIp?: string(name='IntranetIp', description='The internal IP address of the instance.', example='47.100.XX.XX'),
  networkId?: string(name='NetworkId', description='The ID of the network.', example='n-2zeuphj08tt7q3brd****'),
  orderByParams?: string(name='OrderByParams', description='The method that you want to use to sort instances. The value of this parameter is in the JSON format.

You can sort instances by name, expiration time, node ID, or creation time. You can specify one or more methods.', example='{"InstanceNameSort":"asc","ExpireTimeSort":"asc","CreationTimeSort":"desc"}}'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page **1**.

Default value: **1**.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. The maximum value is **100**.

Default value: **10**.', example='10'),
  searchKey?: string(name='SearchKey', description='The keyword that you use to query the logs of the service. You can specify the values of parameters such as **ip**, **InstanceName**, and **InstanceId** as the keyword.', example='Joshua'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-5kyicq2kfcapxrdds6tar7jqb'),
  serviceStatusShrink?: string(name='ServiceStatus', description='The status of the service. Valid values.'),
  status?: string(name='Status', description='The status of the instance. Valid values:

*   Running
*   Stopped
*   Expired', example='Running'),
  tagsShrink?: string(name='Tags', description='The tags that are added to the resource. This operation does not return tag information. You can call this operation in combination with the tag-related operations.'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-2zeh0r1pabwtg6wcs****'),
}

model DescribeInstancesResponseBody = {
  code?: int32(name='Code', description='The returned service code. 0 indicates that the request was successful.', example='0'),
  instances?: {
    instance?: [ 
    {
      autoReleaseTime?: string(name='AutoReleaseTime', description='The automatic release time of the instance.', example='2023-06-28T14:38:52Z'),
      cpu?: string(name='Cpu', description='The number of vCPUs.', example='2'),
      creationTime?: string(name='CreationTime', description='The time when the instance was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-07-26T06:40:43Z'),
      dataDisk?: {
        dataDisk?: [ 
        {
          category?: string(name='Category', description='The category of the cloud disk or local disk. Valid values:

*   **file**: local disk.
*   **pangu**: ultra disk.
*   **local_hdd**: local HDD.', example='file'),
          diskId?: string(name='DiskId', description='The ID of the disk.', example='d-5ip4c2dhmas0vjd5u1r****'),
          diskName?: string(name='DiskName', description='The name of the disk.', example='DiskName'),
          diskSize?: int32(name='DiskSize', description='The size of the disk. Unit: GiB.', example='100'),
          encryptKeyId?: string(name='EncryptKeyId', description='The KMS key ID used by the cloud drive.', example='0e478b7a-4262-4802-b8cb-00d3fxxxxx'),
          encrypted?: boolean(name='Encrypted', description='Specifies whether to encrypt the new system disk. Valid values:

*   **true**
*   **false** (default): no', example='true'),
          size?: int32(name='Size', description='The size of the disk. Unit: MiB.', example='51200'),
          deviceType?: string(name='device_type', description='The extended field of the disk category. Valid values:

*   **file**: local disk.
*   **pangu**: ultra disk.
*   **local_hdd**: local HDD.', example='pangu'),
          diskType?: string(name='disk_type', description='The type of the cloud disk or local disk. Valid values:

**system**: system disk. **data**: data disk.', example='system'),
          name?: string(name='name', description='The name of the disk.', example='name'),
          storage?: int32(name='storage', description='The size of the disk. Unit: MiB.', example='20480'),
          uuid?: string(name='uuid', description='The UUID of the disk.', example='d-5itef1wtxj961mbff8xe9****'),
        }
      ](name='DataDisk')
      }(name='DataDisk', description='Details of the data disk.'),
      disk?: int32(name='Disk', description='The total size of the disk. Unit: MiB.', example='71680'),
      ensRegionId?: string(name='EnsRegionId', description='The region ID of the instance.', example='cn-hangzhou-telecom'),
      expiredTime?: string(name='ExpiredTime', description='The expiration time. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2119-07-13T02:38:57Z'),
      hostName?: string(name='HostName', description='The hostname of the instance.

*   The hostname cannot start or end with a period (.) or hyphen (-). It cannot contain consecutive periods (.) or hyphens (-).
*   For a Windows instance, the hostname must be 2 to 15 characters in length and can contain letters, digits, and hyphens (-). The hostname cannot contain periods (.) or contain only digits.
*   For an instance that runs another operating system such as Linux, the hostname must be 2 to 64 characters in length. You can use periods (.) to separate the hostname into multiple segments. Each segment can contain letters, digits, and hyphens (-).', example='testHostName'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='m-****'),
      innerIpAddress?: {
        ipAddress?: [ string ](name='IpAddress')
      }(name='InnerIpAddress', description='The private IP addresses of the instances.'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-instanc****'),
      instanceName?: string(name='InstanceName', description='The name of the instance.', example='i-5itef0f28t17bcdw9deu6meub'),
      instanceResourceType?: string(name='InstanceResourceType', description='The category of the instance. Valid values:

*   EnsInstance: ENS instances that you purchase.
*   EnsService: ENS instances that belong to edge services.
*   BuildMachine: ENS instances that are configured with image builders.
*   EnsPostPaidInstance: pay-as-you-go ENS instances that you purchase.', example='EnsService'),
      instanceTypeFamily?: string(name='InstanceTypeFamily', description='The instance family. Valid values:

*   x86_vm: x86-based computing instance.
*   x86_pm: x86-based physical machine.
*   x86_bmi: x86-based bare metal instance.
*   x86_bm: bare metal instance with the SmartNIC.
*   pc_bmi: heterogeneous bare metal instance.
*   pc_vm: heterogeneous virtual machine.
*   arm_bmi: Arm-based computing instance.', example='x86_vm'),
      internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', description='The maximum outbound bandwidth. Unit: Mbit/s.', example='40'),
      internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The minimum inbound bandwidth. Unit: Mbit/s.', example='100'),
      keyPairName?: string(name='KeyPairName', description='The name of the SSH key pair.', example='terraform-example'),
      memory?: int32(name='Memory', description='The memory size. Unit: MB.', example='2048'),
      networkAttributes?: {
        networkId?: string(name='NetworkId', description='The ID of the network.', example='n-2zeuphj08tt7q3brd****'),
        privateIpAddress?: {
          ipAddress?: [ string ](name='IpAddress')
        }(name='PrivateIpAddress', description='Details of the private IP addresses.'),
        vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-2zeh0r1pabwtg6wcs****'),
      }(name='NetworkAttributes', description='Details of the network.'),
      networkInterfaces?: {
        networkInterfaces?: [ 
        {
          ipv6Sets?: {
            ipv6Set?: [ 
            {
              ipv6Address?: string(name='Ipv6Address', description='IPv6 addresses N of the ENI. You can specify multiple IPv6 addresses. Valid values of N: 1 to 100.', example='2408:4005:396:3200:****:6609:821e:df7a'),
            }
          ](name='Ipv6Set')
          }(name='Ipv6Sets', description='The IPv6 addresses of the ENI. This parameter has a value only when `AdditionalAttributes.N` is set to `NETWORK_PRIMARY_ENI_IP`.'),
          macAddress?: string(name='MacAddress', description='The MAC address of the ENI.', example='00:16:3e:4f:5f:ca'),
          networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-0wlonoy6jo8532gfzuama****'),
          primaryIpAddress?: string(name='PrimaryIpAddress', description='The primary IP address of the ENI.', example='***************'),
          privateIpSets?: {
            privateIpSet?: [ 
            {
              primary?: boolean(name='Primary', description='Indicates whether the IP address is the primary private IP address. Valid values:

*   true
*   false', example='true'),
              privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address.

>  This parameter is available only if ScheduleAreaLevel is set to Region and cannot be configured if ScheduleAreaLevel is set to other values. Otherwise, an error occurs. If you specify a private IP address, the number of instances must be 1. The private IP address takes effect only when the private IP address and the vSwitch ID are not empty.', example='10.75.66.***'),
            }
          ](name='PrivateIpSet')
          }(name='PrivateIpSets', description='The private IP addresses of the ENI.'),
          type?: string(name='Type', description='The type of the disk. Valid values:

*   system: system disk.
*   data: data disk.', example='Secondary'),
        }
      ](name='NetworkInterfaces')
      }(name='NetworkInterfaces', description='The ENI attached to the instance.'),
      OSName?: string(name='OSName', description='The name of the image.', example='centos 6.8 x86_64'),
      privateIpAddresses?: {
        privateIpAddress?: [ 
        {
          gateWay?: string(name='GateWay', description='The gateway.', example='119.147.xx.xx'),
          ip?: string(name='Ip', description='The IP address.', example='119.147.xx.xx'),
          isp?: string(name='Isp', description='The ISP.', example='cmcc'),
        }
      ](name='PrivateIpAddress')
      }(name='PrivateIpAddresses', description='Details of the private IP addresses.'),
      publicIpAddress?: {
        ipAddress?: [ string ](name='IpAddress')
      }(name='PublicIpAddress', description='The public IP addresses of the instances.'),
      publicIpAddresses?: {
        publicIpAddress?: [ 
        {
          gateWay?: string(name='GateWay', description='The gateway.', example='119.147.xx.xx'),
          ip?: string(name='Ip', description='The IP address.', example='119.147.xx.xx'),
          isp?: string(name='Isp', description='The Internet service provider (ISP).', example='unicom'),
        }
      ](name='PublicIpAddress')
      }(name='PublicIpAddresses', description='Details of the public IP addresses.'),
      securityGroupIds?: {
        securityGroupId?: [ string ](name='SecurityGroupId')
      }(name='SecurityGroupIds', description='The IDs of the security groups.'),
      serviceStatus?: string(name='ServiceStatus', description='The ID of your Alibaba Cloud account.', example='Deleting'),
      specName?: string(name='SpecName', description='The instance type.', example='ens.sn1.stiny'),
      spotStrategy?: string(name='SpotStrategy', description='The bidding policy of the preemptible instance.', example='NoSpot'),
      status?: string(name='Status', description='The status of the instance. Valid values:

*   Running
*   Expired
*   Stopped', example='Running'),
      systemDisk?: {
        category?: string(name='Category', description='The category of the cloud disk or local disk. Valid values:

*   **file**: local disk.
*   **pangu**: ultra disk.
*   **local_hdd**: local HDD.', example='file'),
        diskId?: string(name='DiskId', description='The ID of the disk.', example='d-5ip4c2dhmas0rn7rt0p9****'),
        diskName?: string(name='DiskName', description='The name of the disk.', example='DiskName'),
        size?: int32(name='Size', description='The size of the disk. Unit: MiB.', example='51200'),
        deviceType?: string(name='device_type', description='The extended field of the disk category. Valid values:

*   **file**: local disk.
*   **pangu**: ultra disk.
*   **local_hdd**: local HDD.', example='pangu'),
        diskType?: string(name='disk_type', description='The type of the cloud disk or local disk. Valid values:

*   **system**: system disk.
*   **data**: data disk.', example='system'),
        name?: string(name='name', description='The name of the disk.', example='DiskName'),
        storage?: int32(name='storage', description='The size of the disk. Unit: MiB.', example='20480'),
        uuid?: string(name='uuid', description='The UUID of the disk.', example='d-5ip4c2dhmas0rn7rt0p96****'),
      }(name='SystemDisk', description='Details of the system disk.'),
      tags?: {
        tags?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key.', example='key1'),
          tagValue?: string(name='TagValue', description='The tag value.', example='value1'),
        }
      ](name='Tags')
      }(name='Tags', description='The tags of the instance.

>  This operation does not return tag information. You can call this operation in combination with the tag-related operations.'),
    }
  ](name='Instance')
  }(name='Instances', description='The returned instance information. It is an array that consists of InstanceAttributesType data.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='60'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model DescribeInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstancesResponseBody(name='body'),
}

/**
 * @summary You can call this operation to view the details of one or more instances.
 *
 * @description *   You can call this operation up to 800 times per second per account.
 * *   You can call this operation up to 100 times per second per user.
 * *   You can specify multiple request parameters to be queried. Specified parameters are evaluated by using the AND operator. Only the specified parameters are included in the filter conditions. However, if InstanceIds is set to an empty JSON array, it is regarded as a valid filter condition and an empty result is returned.
 *
 * @param tmpReq DescribeInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInstancesResponse
 */
async function describeInstancesWithOptions(tmpReq: DescribeInstancesRequest, runtime: Util.RuntimeOptions): DescribeInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.serviceStatus)) {
    request.serviceStatusShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.serviceStatus, 'ServiceStatus', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.ensRegionIds)) {
    query['EnsRegionIds'] = request.ensRegionIds;
  }
  if (!Util.isUnset(request.ensServiceId)) {
    query['EnsServiceId'] = request.ensServiceId;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.instanceResourceType)) {
    query['InstanceResourceType'] = request.instanceResourceType;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.intranetIp)) {
    query['IntranetIp'] = request.intranetIp;
  }
  if (!Util.isUnset(request.networkId)) {
    query['NetworkId'] = request.networkId;
  }
  if (!Util.isUnset(request.orderByParams)) {
    query['OrderByParams'] = request.orderByParams;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchKey)) {
    query['SearchKey'] = request.searchKey;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.serviceStatusShrink)) {
    query['ServiceStatus'] = request.serviceStatusShrink;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstances',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary You can call this operation to view the details of one or more instances.
 *
 * @description *   You can call this operation up to 800 times per second per account.
 * *   You can call this operation up to 100 times per second per user.
 * *   You can specify multiple request parameters to be queried. Specified parameters are evaluated by using the AND operator. Only the specified parameters are included in the filter conditions. However, if InstanceIds is set to an empty JSON array, it is regarded as a valid filter condition and an empty result is returned.
 *
 * @param request DescribeInstancesRequest
 * @return DescribeInstancesResponse
 */
async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancesWithOptions(request, runtime);
}

model DescribeKeyPairsRequest {
  keyPairId?: string(name='KeyPairId', description='The ID of the key pair.', example='ssh-50cynkq42sgj4ej1tn78t4***'),
  keyPairName?: string(name='KeyPairName', description='The name of the key pair. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain the following characters:

*   Digits
*   :
*   _
*   *

You can specify only one name. By default, all key pairs are queried.', example='TestKeyPairName'),
  pageNumber?: string(name='PageNumber', description='The page number of the returned page. Valid values: integers that are greater than 0. Default value: 1.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page. Valid values: integers that are greater than 0. Default value: 10.', example='10'),
}

model DescribeKeyPairsResponseBody = {
  keyPairs?: {
    keyPair?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the key pair was created. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='2020-04-26T15:38:27Z'),
      keyPairFingerPrint?: string(name='KeyPairFingerPrint', description='The fingerprint of the key pair.', example='fdaf8ff7a756ef843814fc****'),
      keyPairId?: string(name='KeyPairId', description='The ID of the key pair.', example='ssh-50cynkq42sgj4ej1tn78t4***'),
      keyPairName?: string(name='KeyPairName', description='The name of the SSH key pair.', example='TestKeyPairName'),
    }
  ](name='KeyPair')
  }(name='KeyPairs', description='Details about the key pairs.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='37B52F33-6879-49D0-A39B-22966B01449E'),
  totalCount?: int32(name='TotalCount', description='The total number of key pairs.', example='7'),
}

model DescribeKeyPairsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeKeyPairsResponseBody(name='body'),
}

/**
 * @summary Queries one or more key pairs.
 *
 * @param request DescribeKeyPairsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeKeyPairsResponse
 */
async function describeKeyPairsWithOptions(request: DescribeKeyPairsRequest, runtime: Util.RuntimeOptions): DescribeKeyPairsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyPairId)) {
    query['KeyPairId'] = request.keyPairId;
  }
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeKeyPairs',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries one or more key pairs.
 *
 * @param request DescribeKeyPairsRequest
 * @return DescribeKeyPairsResponse
 */
async function describeKeyPairs(request: DescribeKeyPairsRequest): DescribeKeyPairsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeKeyPairsWithOptions(request, runtime);
}

model DescribeLoadBalancerAttributeRequest {
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ELB instance.

This parameter is required.', example='lb-5rcvo1n1t3hykfhhjwjgq****'),
}

model DescribeLoadBalancerAttributeResponseBody = {
  address?: string(name='Address', description='The IP address that the Edge Load Balancer (ELB) instance uses to provide services.', example='192.168XX.XX'),
  addressIPVersion?: string(name='AddressIPVersion', description='The IP version of the ELB instance. Valid values: ipv4 and ipv6.', example='ipv4'),
  backendServers?: [ 
    {
      ip?: string(name='Ip', description='The IP address of the backend server.', example='192.168.XX.XX'),
      port?: string(name='Port', description='The port that is used by the backend server.', example='0'),
      serverId?: string(name='ServerId', description='The ID of the backend server.', example='i-5vb5h5njxiuhn48a****'),
      type?: string(name='Type', description='The type of backend server.', example='ens'),
      weight?: int32(name='Weight', description='The weight of the backend server.', example='100'),
    }
  ](name='BackendServers', description='The list of backend servers.'),
  bandwidth?: int32(name='Bandwidth', description='The peak bandwidth of the ELB. The default value is -1, which indicates that the bandwidth is unlimited.', example='-1'),
  createTime?: string(name='CreateTime', description='The time when the ELB instance was created. The time is displayed in UTC.', example='2019-05-21T12:22:00Z'),
  endTime?: string(name='EndTime', description='The time when the ELB instance was disabled.', example='2020-05-21T12:22:00Z'),
  ensRegionId?: string(name='EnsRegionId', description='The ID of the ENS node.', example='cn-chengdu-telecom'),
  listenerPorts?: [ string ](name='ListenerPorts', description='The frontend ports that are used by the ELB instance.'),
  listenerPortsAndProtocols?: [ 
    {
      backendServerPort?: int32(name='BackendServerPort', description='The backend port that is used by the ELB instance. Valid values: **1** to **65535**.', example='6000'),
      description?: string(name='Description', description='The description of the listener.', example='test'),
      forwardPort?: int32(name='ForwardPort', description='The destination listening port to which requests are forwarded.', example='0'),
      listenerForward?: string(name='ListenerForward', description='Indicates whether the listener is enabled.', example='off'),
      listenerPort?: int32(name='ListenerPort', description='The listener port of the instance.', example='8080'),
      listenerProtocol?: string(name='ListenerProtocol', description='The listener protocol of the instance.', example='tcp'),
    }
  ](name='ListenerPortsAndProtocols', description='The frontend ports and protocols that are used by the ELB instance.'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ELB instance.', example='lb-5rcvo1n1t3hykfhhjwjgqp****'),
  loadBalancerName?: string(name='LoadBalancerName', description='The name of the ELB instance.', example='example'),
  loadBalancerSpec?: string(name='LoadBalancerSpec', description='The specifications of the ELB instance.', example='elb.s2.medium'),
  loadBalancerStatus?: string(name='LoadBalancerStatus', description='The status of the ELB instance. Valid values:

*   **Active** (default): The listener for the instance can forward the received traffic based on the rule.
*   **InActive**: The listener for the instance does not forward the received traffic.', example='Active'),
  networkId?: string(name='NetworkId', description='The ID of the network.', example='n-5rwbi3g9zvgxcsiufwhw8****'),
  payType?: string(name='PayType', description='The billing method. Valid values:

*   **PrePaid**: subscription.
*   **PostPaid**: pay-as-you-go. Only this billing method is supported.', example='PostPaid'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-5s78m2pdr9osa0j64bn78****'),
}

model DescribeLoadBalancerAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLoadBalancerAttributeResponseBody(name='body'),
}

/**
 * @summary Queries detailed information about an Edge Load Balancer (ELB) instance.
 *
 * @description *   You can call this operation up to 100 times per second.
 * *   You can call this operation up to 10 times per second per account.
 *
 * @param request DescribeLoadBalancerAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeLoadBalancerAttributeResponse
 */
async function describeLoadBalancerAttributeWithOptions(request: DescribeLoadBalancerAttributeRequest, runtime: Util.RuntimeOptions): DescribeLoadBalancerAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLoadBalancerAttribute',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries detailed information about an Edge Load Balancer (ELB) instance.
 *
 * @description *   You can call this operation up to 100 times per second.
 * *   You can call this operation up to 10 times per second per account.
 *
 * @param request DescribeLoadBalancerAttributeRequest
 * @return DescribeLoadBalancerAttributeResponse
 */
async function describeLoadBalancerAttribute(request: DescribeLoadBalancerAttributeRequest): DescribeLoadBalancerAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLoadBalancerAttributeWithOptions(request, runtime);
}

model DescribeLoadBalancerHTTPListenerAttributeRequest {
  listenerPort?: int32(name='ListenerPort', description='The listener port that you want to query. Valid values: **1 to 65535**.

This parameter is required.', example='8080'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ELB instance.

This parameter is required.', example='lb-5snthcyu1x10g7tywj7iu****'),
}

model DescribeLoadBalancerHTTPListenerAttributeResponseBody = {
  backendServerPort?: int32(name='BackendServerPort', description='The backend port that is used by the ELB instance. Valid values: **1** to **65535**.', example='8080'),
  bandwidth?: int32(name='Bandwidth', description='The peak bandwidth of the Edge Load Balancer (ELB) instance. The default value is -1, which indicates that the bandwidth is not limited.', example='-1'),
  description?: string(name='Description', description='The description of the listener. The description must be **1** to **80** characters in length.

>  The value cannot start with `http://` or `https://`.', example='abc'),
  forwardPort?: int32(name='ForwardPort', description='The listener port that is used to redirect HTTP requests to HTTPS.', example='10002'),
  healthCheck?: string(name='HealthCheck', description='Indicates whether the health check feature is enabled. Valid values:

*   **on**
*   **off**', example='on'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='The port that is used for health checks. Valid values: **1** to **65535**. If you leave this parameter empty, the port specified by BackendServerPort is used for health checks.

>  This parameter is returned only if you set HealthCheck to on.', example='5000'),
  healthCheckDomain?: string(name='HealthCheckDomain', description='The domain name that is used for health checks.

>  This parameter is returned only if you set HealthCheck to on.', example='www.example.com'),
  healthCheckHttpCode?: string(name='HealthCheckHttpCode', description='The HTTP status codes for a successful health check. Valid values:

*   **http_2xx** (default)
*   **http_3xx**.
*   **http_4xx**
*   **http_5xx**

>  This parameter is returned only if you set HealthCheck to on.', example='http_2xx'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='The interval at which health checks are performed. Valid values: **1** to **50**. Unit: seconds.

>  This parameter is returned only if you set HealthCheck to on.', example='5'),
  healthCheckMethod?: string(name='HealthCheckMethod', description='The health check method used in HTTP health checks. Valid values:

*   **head**: requests the head of the page.
*   **get**: requests the specified part of the page and returns the entity body.

>  This parameter is returned only if you set HealthCheck to on.', example='head'),
  healthCheckTimeout?: int32(name='HealthCheckTimeout', description='The timeout period of a health check response. If a backend server does not respond within the specified timeout period, the server fails the health check.

*   Default value: 5.
*   Valid values: **1** to **300**.
*   Unit: seconds.

> 

*   This parameter takes effect only if the HealthCheck parameter is set to on.

*   If the value of HealthCheckTimeout is smaller than the value of HealthCheckInterval, the timeout period specified by HealthCheckTimeout becomes invalid, and the value of HealthCheckInterval is used as the timeout period.', example='10'),
  healthCheckURI?: string(name='HealthCheckURI', description='The URI used for health checks. The URI must be **1** to **80** characters in length.

> 

*   A URL must start with a forward slash (`/`) but cannot contain only forward slashes (`/`).

*   This parameter takes effect only if the HealthCheck parameter is set to on.', example='/checkpreload.htm'),
  healthyThreshold?: int32(name='HealthyThreshold', description='The number of consecutive successful health checks that must occur before an unhealthy and inaccessible backend server is declared healthy and accessible. Valid values: **2** to **10**.

>  This parameter is returned only if you set HealthCheck to on.', example='3'),
  idleTimeout?: int32(name='IdleTimeout', description='The timeout period for idle connections. Default value: 15. Valid values: **1** to **60**. Unit: seconds.

>  If no request is received within the specified timeout period, ELB closes the connection. When another request is received, ELB establishes a new connection.', example='15'),
  listenerForward?: string(name='ListenerForward', description='Indicates whether HTTP-to-HTTPS redirection is enabled. Valid values:

*   **on**: HTTP-to-HTTPS redirection is enabled.
*   **off** (default)', example='off'),
  listenerPort?: int32(name='ListenerPort', description='The listener port.', example='80'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  requestTimeout?: int32(name='RequestTimeout', description='The timeout period of requests. Default value: 60. Valid values: **1** to **180**. Unit: seconds.

>  If no response is received from the backend server within the specified timeout period, ELB returns an HTTP 504 error code to the client.', example='60'),
  scheduler?: string(name='Scheduler', description='The routing algorithm. Valid values:

*   **wrr**: Backend servers with higher weights receive more requests than those with lower weights.
*   **wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections to a backend server. If two backend servers have the same weight, the backend server that has fewer connections receives more requests.
*   **rr**: Requests are distributed to backend servers in sequence.
*   **sch**: consistent hashing that is based on source IP addresses. Requests from the same source IP address are distributed to the same backend server.
*   **qch**: consistent hashing that is based on QUIC connection IDs. Requests that contain the same QUIC connection ID are distributed to the same backend server.
*   **iqch**: consistent hashing that is based on specific three bytes of the iQUIC CIDs. Requests whose second to fourth bytes are the same are distributed to the same backend server.', example='wrr'),
  serverCertificateId?: string(name='ServerCertificateId', description='The ID of the server certificate.', example='6027667'),
  status?: string(name='Status', description='The status of the listener. Valid values:

*   **Running**
*   **Stopped**
*   **Starting**
*   **Configuring**
*   **Stopping**', example='Running'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='The number of consecutive failed health checks that must occur before a healthy and accessible backend server is declared unhealthy and inaccessible. Valid values: **2** to **10**.

>  This parameter is returned only if you set HealthCheck to on.', example='3'),
  XForwardedFor?: string(name='XForwardedFor', description='Indicates whether the X-Forwarded-For header is used to obtain the real IP address of the client. Valid values:

*   **on** (default)
*   **off**', example='on'),
}

model DescribeLoadBalancerHTTPListenerAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLoadBalancerHTTPListenerAttributeResponseBody(name='body'),
}

/**
 * @summary Queries the configuration of an HTTP listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request DescribeLoadBalancerHTTPListenerAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeLoadBalancerHTTPListenerAttributeResponse
 */
async function describeLoadBalancerHTTPListenerAttributeWithOptions(request: DescribeLoadBalancerHTTPListenerAttributeRequest, runtime: Util.RuntimeOptions): DescribeLoadBalancerHTTPListenerAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.listenerPort)) {
    query['ListenerPort'] = request.listenerPort;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLoadBalancerHTTPListenerAttribute',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the configuration of an HTTP listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request DescribeLoadBalancerHTTPListenerAttributeRequest
 * @return DescribeLoadBalancerHTTPListenerAttributeResponse
 */
async function describeLoadBalancerHTTPListenerAttribute(request: DescribeLoadBalancerHTTPListenerAttributeRequest): DescribeLoadBalancerHTTPListenerAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLoadBalancerHTTPListenerAttributeWithOptions(request, runtime);
}

model DescribeLoadBalancerHTTPSListenerAttributeRequest {
  listenerPort?: int32(name='ListenerPort', description='The listening port that you want to query. Valid values: **1** to **65535**.

This parameter is required.', example='443'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ELB instance.

This parameter is required.', example='lb-5qoxu2rsr0ytanpn4r3i****'),
}

model DescribeLoadBalancerHTTPSListenerAttributeResponseBody = {
  backendServerPort?: int32(name='BackendServerPort', description='The backend port that is used by the ELB instance. Valid values: **1** to **65535**.', example='8080'),
  bandwidth?: int32(name='Bandwidth', description='The peak bandwidth of the Edge Load Balancer (ELB). The default value is -1, which indicates that the bandwidth is not limited.', example='50'),
  description?: string(name='Description', description='The description of the listener. The description must be **1** to **80** characters in length.', example='abc'),
  forwardPort?: int32(name='ForwardPort', description='The listener port that is used to redirect HTTP requests to HTTPS.', example='0'),
  healthCheck?: string(name='HealthCheck', description='Indicates whether the health check feature is enabled. Valid values:

*   **on**
*   **off**', example='on'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='The port that is used for health checks. Valid values: **1** to **65535**. If an empty string is returned for this parameter, the port specified by BackendServerPort is used for health checks.

>  This parameter is returned only if the HealthCheck parameter is set to on.', example='9902'),
  healthCheckDomain?: string(name='HealthCheckDomain', description='The domain name that is used for health checks.

>  This parameter is returned only if the HealthCheck parameter is set to on.', example='www.test.com'),
  healthCheckHttpCode?: string(name='HealthCheckHttpCode', description='The HTTP status code for a successful health check. Valid values:

*   **http_2xx** (default)
*   **http_3xx**.
*   **http_4xx**
*   **http_5xx**

>  This parameter is returned only if the HealthCheck parameter is set to on.', example='http_2xx'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='The interval at which health checks are performed. Valid values: **1** to **50**. Unit: seconds.

>  This parameter is returned only if the HealthCheck parameter is set to on.', example='5'),
  healthCheckMethod?: string(name='HealthCheckMethod', description='The health check method used in HTTP health checks. Valid values:

*   **head**: requests the head of the page.
*   **get**: requests the specified part of the page and returns the entity body.

>  This parameter is returned only if the HealthCheck parameter is set to on.', example='head'),
  healthCheckTimeout?: int32(name='HealthCheckTimeout', description='The timeout period of a health check response. If a backend server does not respond within the specified timeout period, the server fails the health check.

*   Default value: 5.
*   Valid values: **1** to **300**.
*   Unit: seconds.

> 

*   This parameter takes effect only if the HealthCheck parameter is set to on.

*   If the value of HealthCheckTimeout is smaller than the value of HealthCheckInterval, the timeout period specified by HealthCheckTimeout becomes invalid, and the value of HealthCheckInterval is used as the timeout period.', example='5'),
  healthCheckURI?: string(name='HealthCheckURI', description='The URI that is used for health checks. The URI must be **1** to **80** characters in length.

*   The URL must start with `/` and contain characters other than `/`.
*   This parameter is returned only if the HealthCheck parameter is set to on.', example='/checkpreload.htm'),
  healthyThreshold?: int32(name='HealthyThreshold', description='The number of consecutive successful health checks that must occur before an unhealthy and inaccessible backend server is declared healthy and accessible. Valid values: **2** to **10**.

>  This parameter is returned only if the HealthCheck parameter is set to on.', example='3'),
  idleTimeout?: int32(name='IdleTimeout', description='The timeout period for idle connections. Default value: 15. Valid values: **1** to **60**. Unit: seconds.

>  If no request is received within the specified timeout period, ELB closes the connection. When another request is received, CLB establishes a new connection.', example='15'),
  listenerForward?: string(name='ListenerForward', description='Indicates whether HTTP-to-HTTPS redirection is enabled. Valid values:

*   on
*   off', example='off'),
  listenerPort?: int32(name='ListenerPort', description='The frontend port that is used by the ELB instance. Valid values: **1** to **65535**.', example='8080'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  requestTimeout?: int32(name='RequestTimeout', description='The timeout period of requests. Default value: 60. Valid values: **1** to **180**. Unit: seconds.

>  If no response is received from the backend server within the specified timeout period, ELB returns an HTTP 504 error code to the client.', example='60'),
  scheduler?: string(name='Scheduler', description='The routing algorithm. Valid values:

*   **wrr**: Backend servers with higher weights receive more requests than those with lower weights.
*   **wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections to a backend server. If two backend servers have the same weight, the backend server that has fewer connections receives more requests.
*   **rr**: Requests are distributed to backend servers in sequence.
*   **sch**: consistent hashing that is based on source IP addresses. Requests from the same source IP address are distributed to the same backend server.
*   **qch**: consistent hashing that is based on QUIC connection IDs. Requests that contain the same QUIC connection ID are distributed to the same backend server.
*   **iqch**: consistent hashing that is based on specific three bytes of the iQUIC CIDs. Requests whose second to fourth bytes are the same are distributed to the same backend server.', example='wrr'),
  serverCertificateId?: string(name='ServerCertificateId', description='The ID of the server certificate.', example='60276**'),
  status?: string(name='Status', description='The status of the listener. Valid values:

*   **Running**
*   **Stopped**
*   **Starting**
*   **Configuring**
*   **Stopping**', example='Running'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='The number of consecutive failed health checks that must occur before a healthy and accessible backend server is declared unhealthy and inaccessible. Valid values: **2** to **10**.

>  This parameter is returned only if the HealthCheck parameter is set to on.', example='3'),
}

model DescribeLoadBalancerHTTPSListenerAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLoadBalancerHTTPSListenerAttributeResponseBody(name='body'),
}

/**
 * @summary Queries the configurations of an HTTPS listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request DescribeLoadBalancerHTTPSListenerAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeLoadBalancerHTTPSListenerAttributeResponse
 */
async function describeLoadBalancerHTTPSListenerAttributeWithOptions(request: DescribeLoadBalancerHTTPSListenerAttributeRequest, runtime: Util.RuntimeOptions): DescribeLoadBalancerHTTPSListenerAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.listenerPort)) {
    query['ListenerPort'] = request.listenerPort;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLoadBalancerHTTPSListenerAttribute',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the configurations of an HTTPS listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request DescribeLoadBalancerHTTPSListenerAttributeRequest
 * @return DescribeLoadBalancerHTTPSListenerAttributeResponse
 */
async function describeLoadBalancerHTTPSListenerAttribute(request: DescribeLoadBalancerHTTPSListenerAttributeRequest): DescribeLoadBalancerHTTPSListenerAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLoadBalancerHTTPSListenerAttributeWithOptions(request, runtime);
}

model DescribeLoadBalancerListenMonitorRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query.

This parameter is required.', example='2024-01-30 08:00:00'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ELB instance.

This parameter is required.', example='lb-5q73cv04zeyh43lh74lp4****'),
  proto?: string(name='Proto', description='The network protocol, such as tcp or udp.', example='tcp'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.

This parameter is required.', example='2024-01-15 16:00:00'),
  VPort?: string(name='VPort', description='The virtual IP address (VIP) port of the ELB instance.

This parameter is required.', example='80'),
}

model DescribeLoadBalancerListenMonitorResponseBody = {
  loadBalancerMonitorListenData?: [ 
    {
      actConns?: string(name='ActConns', description='The number of active connections.', example='80285'),
      bizTime?: string(name='BizTime', description='The business time.', example='2024-01-15 16:03:00'),
      conns?: string(name='Conns', description='The number of new connections.', example='37150'),
      dropConns?: string(name='DropConns', description='The number of dropped connections.', example='10'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the node to which the ELB instance belongs.', example='cn-dongguan-9'),
      inActConns?: string(name='InActConns', description='The number of inactive connections.', example='16322'),
      inBytes?: string(name='InBytes', description='The inbound traffic.', example='67532'),
      inDropBytes?: string(name='InDropBytes', description='The dropped inbound traffic.', example='324'),
      inDropPkts?: string(name='InDropPkts', description='The number of dropped inbound packets.', example='27'),
      inPkts?: string(name='InPkts', description='The number of inbound packets.', example='12'),
      inValidRsNum?: string(name='InValidRsNum', description='The number of unavailable servers that are attached to the monitored ELB instance.', example='0'),
      loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ELB instance.', example='lb-5q73cv04zeyh43lh74lp4****'),
      outBytes?: string(name='OutBytes', description='The outbound traffic.', example='5155487'),
      outDropBytes?: string(name='OutDropBytes', description='The dropped outbound traffic.', example='0'),
      outDropPkts?: string(name='OutDropPkts', description='The number of dropped outbound packets.', example='76'),
      outPkts?: string(name='OutPkts', description='The number of outbound packets.', example='34'),
      proto?: string(name='Proto', description='The network protocol.', example='tcp'),
      VPort?: string(name='VPort', description='The VIP port of the ELB instance.', example='80'),
      validRsNum?: string(name='ValidRsNum', description='The number of available servers that are attached to the monitored ELB instance.', example='2'),
      vip?: string(name='Vip', description='The VIP of the instance.', example='10.8.*.*'),
      vni?: string(name='Vni', description='The ID of the tunnel.', example='53284'),
    }
  ](name='LoadBalancerMonitorListenData', description='The TCP/UDP monitoring data of the ELB instance.'),
  requestId?: string(name='RequestId', description='Id of the request.', example='C0003E8B-B930-4F59-ADC0-0E209A9012A8'),
}

model DescribeLoadBalancerListenMonitorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLoadBalancerListenMonitorResponseBody(name='body'),
}

/**
 * @summary Queries monitoring data of an edge load balancer (ELB) instance.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request DescribeLoadBalancerListenMonitorRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeLoadBalancerListenMonitorResponse
 */
async function describeLoadBalancerListenMonitorWithOptions(request: DescribeLoadBalancerListenMonitorRequest, runtime: Util.RuntimeOptions): DescribeLoadBalancerListenMonitorResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLoadBalancerListenMonitor',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries monitoring data of an edge load balancer (ELB) instance.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request DescribeLoadBalancerListenMonitorRequest
 * @return DescribeLoadBalancerListenMonitorResponse
 */
async function describeLoadBalancerListenMonitor(request: DescribeLoadBalancerListenMonitorRequest): DescribeLoadBalancerListenMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLoadBalancerListenMonitorWithOptions(request, runtime);
}

model DescribeLoadBalancerListenersRequest {
  description?: string(name='Description', description='The description of the image.', example='test'),
  listenerPort?: int32(name='ListenerPort', description='The listener port.', example='80'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ELB instance.

This parameter is required.', example='lb-5s7crik3yo3p5****'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
}

model DescribeLoadBalancerListenersResponseBody = {
  listeners?: {
    listener?: [ 
    {
      backendServerPort?: int32(name='BackendServerPort', description='The backend port that is used by the ELB instance. Valid values: **1** to **65535**.', example='3306'),
      createTime?: string(name='CreateTime', description='The timestamp when the listener was created.', example='2022-08-15T08:42:57Z'),
      description?: string(name='Description', description='The description of the listener.', example='test'),
      forwardPort?: string(name='ForwardPort', description='The listener port that is used for HTTP-to-HTTPS redirection.', example='443'),
      listenerForward?: string(name='ListenerForward', description='Indicates whether HTTP-to-HTTPS redirection is enabled for the listener. Valid values:

*   **on**
*   **off**', example='off'),
      listenerPort?: string(name='ListenerPort', description='The listening port.', example='8080'),
      loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ELB instance.', example='lb-51a5fhou****'),
      protocol?: string(name='Protocol', description='The network transmission protocol that is used by the listener.

*   **tcp**
*   **udp**
*   **http**
*   **https**', example='tcp'),
      status?: string(name='Status', description='The status of the listener. Valid values:

*   **running**
*   **stopped**', example='running'),
    }
  ](name='Listener')
  }(name='Listeners', description='The listeners of the ELB instance.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F3B261DD-3858-4D3C-877D-303ADF374600'),
  totalCount?: int32(name='TotalCount', description='The total number of entries.', example='49'),
}

model DescribeLoadBalancerListenersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLoadBalancerListenersResponseBody(name='body'),
}

/**
 * @summary Queries listeners of Edge Load Balancer (ELB) instances.
 *
 * @param request DescribeLoadBalancerListenersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeLoadBalancerListenersResponse
 */
async function describeLoadBalancerListenersWithOptions(request: DescribeLoadBalancerListenersRequest, runtime: Util.RuntimeOptions): DescribeLoadBalancerListenersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.listenerPort)) {
    query['ListenerPort'] = request.listenerPort;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLoadBalancerListeners',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries listeners of Edge Load Balancer (ELB) instances.
 *
 * @param request DescribeLoadBalancerListenersRequest
 * @return DescribeLoadBalancerListenersResponse
 */
async function describeLoadBalancerListeners(request: DescribeLoadBalancerListenersRequest): DescribeLoadBalancerListenersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLoadBalancerListenersWithOptions(request, runtime);
}

model DescribeLoadBalancerSpecRequest {
  loadBalancerSpec?: string(name='LoadBalancerSpec', description='The specifications of the ELB instance.', example='elb.s2.small'),
}

model DescribeLoadBalancerSpecResponseBody = {
  loadBalancerSpecs?: [ 
    {
      displayName?: string(name='DisplayName', description='The display name of the instance type.', example='elb.s1.small'),
      loadBalancerSpec?: string(name='LoadBalancerSpec', description='The specifications of the ELB instance.', example='elb.s1.small'),
    }
  ](name='LoadBalancerSpecs', description='The specifications. Valid values:'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='10'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: 100. Default value: 10.', example='100'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='7'),
}

model DescribeLoadBalancerSpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLoadBalancerSpecResponseBody(name='body'),
}

/**
 * @summary Queries the specifications of an Edge Load Balancer (ELB) instance.
 *
 * @param request DescribeLoadBalancerSpecRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeLoadBalancerSpecResponse
 */
async function describeLoadBalancerSpecWithOptions(request: DescribeLoadBalancerSpecRequest, runtime: Util.RuntimeOptions): DescribeLoadBalancerSpecResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLoadBalancerSpec',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the specifications of an Edge Load Balancer (ELB) instance.
 *
 * @param request DescribeLoadBalancerSpecRequest
 * @return DescribeLoadBalancerSpecResponse
 */
async function describeLoadBalancerSpec(request: DescribeLoadBalancerSpecRequest): DescribeLoadBalancerSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLoadBalancerSpecWithOptions(request, runtime);
}

model DescribeLoadBalancerTCPListenerAttributeRequest {
  listenerPort?: int32(name='ListenerPort', description='The frontend port that is used by the Edge Load Balance (ELB) instance. Valid values: **1** to **65535**.

This parameter is required.', example='80'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ELB instance.

This parameter is required.', example='lb-5snthcyu1x10g7tywj7iu****'),
}

model DescribeLoadBalancerTCPListenerAttributeResponseBody = {
  backendServerPort?: int32(name='BackendServerPort', description='The backend port that is used by the ELB instance. Valid values: **1** to **65535**.', example='8080'),
  bandwidth?: int32(name='Bandwidth', description='The maximum bandwidth of the elastic IP address (EIP). Default value: 5. Valid values: **5** to **10000**. Unit: Mbit/s.', example='5'),
  description?: string(name='Description', description='The description of the listener.', example='example'),
  eipTransmit?: string(name='EipTransmit', description='Indicates whether EIP pass-through is enabled. Valid values:

*   **on**
*   **off** (default)', example='on'),
  establishedTimeout?: int32(name='EstablishedTimeout', description='The timeout period of a connection. Valid values: **10** to **900**. Unit: seconds.', example='500'),
  healthCheck?: string(name='HealthCheck', description='Indicates whether the health check feature is enabled. Valid values:

*   **on**
*   **off**', example='on'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='The port that is used for health checks. Valid values: **1** to **65535**. If an empty string is returned for this parameter, the port specified by BackendServerPort is used for health checks.

>  This parameter is returned only if you set HealthCheck to on.', example='8000'),
  healthCheckConnectTimeout?: int32(name='HealthCheckConnectTimeout', description='The timeout period of a health check response. If a backend server does not respond within the specified timeout period, the server fails to pass the health check.

*   Default value: 5.
*   Valid values: **1** to **300**.
*   Unit: seconds.

> 

*   This parameter is returned only if you set HealthCheck to on.

*   If the value of the HealthCheckConnectTimeout parameter is smaller than that of the HealthCheckInterval parameter, the timeout period specified by the HealthCheckConnectTimeout parameter becomes invalid and the value of the HealthCheckInterval parameter is used as the timeout period.', example='100'),
  healthCheckDomain?: string(name='HealthCheckDomain', description='The domain name that is used for health checks.

>  This parameter is returned only if you set HealthCheck to on.', example='example.com'),
  healthCheckHttpCode?: string(name='HealthCheckHttpCode', description='The HTTP status codes for a successful health check. Valid values:

*   **http_2xx** (default)
*   **http_3xx**
*   **http_4xx**
*   **http_5xx**

>  This parameter is returned only if you set HealthCheck to on.', example='http_2xx'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='The interval at which health checks are performed. Valid values: **1** to **50**. Unit: seconds.', example='5'),
  healthCheckType?: string(name='HealthCheckType', description='The type of health checks. Valid values:

*   **tcp** (default)
*   **http**', example='tcp'),
  healthCheckURI?: string(name='HealthCheckURI', description='The Uniform Resource Identifier (URI) that is used for health checks. The URI must be **1** to **80** characters in length.

> 

*   The URL must start with a forward slash (`/`) and contain characters other than forward slashes (`/`).

*   This parameter is returned only if you set HealthCheck to on.', example='/example/index.html'),
  healthyThreshold?: int32(name='HealthyThreshold', description='The number of consecutive successful health checks that must occur before an unhealthy and inaccessible backend server is declared healthy and accessible. Valid values: **2** to **10**.

>  This parameter is returned only if you set HealthCheck to on.', example='4'),
  listenerPort?: int32(name='ListenerPort', description='The frontend port that is used by the ELB instance.', example='80'),
  persistenceTimeout?: int32(name='PersistenceTimeout', description='The timeout period of session persistence.

*   Default value: 0. If the default value is used, the system disables session persistence.
*   Valid values: **0** to **3600**.
*   Unit: seconds.', example='0'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  scheduler?: string(name='Scheduler', description='The routing algorithm. Valid values:

*   **wrr**: Backend servers with higher weights receive more requests than those with lower weights.
*   **wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections to a backend server. If two backend servers have the same weight, the backend server that has fewer connections receives more requests.
*   **rr**: Requests are distributed to backend servers in sequence.
*   **sch**: consistent hashing that is based on source IP addresses. Requests from the same source IP address are distributed to the same backend server.
*   **qch**: consistent hashing that is based on QUIC connection IDs. Requests that contain the same QUIC connection ID are distributed to the same backend server.
*   **iqch**: consistent hashing that is based on specific three bytes of the iQUIC CIDs. Requests whose second to fourth bytes are the same are distributed to the same backend server.', example='wrr'),
  status?: string(name='Status', description='The status of the listener. Valid values:

*   **Running**
*   **Stopped**
*   **Starting**
*   **Configuring**
*   **Stopping**', example='Stopped'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='The number of consecutive failed health checks that must occur before a healthy and accessible backend server is declared unhealthy and inaccessible. Valid values: **2** to **10**.

>  This parameter is returned only if you set HealthCheck to on.', example='4'),
}

model DescribeLoadBalancerTCPListenerAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLoadBalancerTCPListenerAttributeResponseBody(name='body'),
}

/**
 * @summary Queries the configurations of a Transmission Control Protocol (TCP) listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request DescribeLoadBalancerTCPListenerAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeLoadBalancerTCPListenerAttributeResponse
 */
async function describeLoadBalancerTCPListenerAttributeWithOptions(request: DescribeLoadBalancerTCPListenerAttributeRequest, runtime: Util.RuntimeOptions): DescribeLoadBalancerTCPListenerAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.listenerPort)) {
    query['ListenerPort'] = request.listenerPort;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLoadBalancerTCPListenerAttribute',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the configurations of a Transmission Control Protocol (TCP) listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request DescribeLoadBalancerTCPListenerAttributeRequest
 * @return DescribeLoadBalancerTCPListenerAttributeResponse
 */
async function describeLoadBalancerTCPListenerAttribute(request: DescribeLoadBalancerTCPListenerAttributeRequest): DescribeLoadBalancerTCPListenerAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLoadBalancerTCPListenerAttributeWithOptions(request, runtime);
}

model DescribeLoadBalancerUDPListenerAttributeRequest {
  listenerPort?: int32(name='ListenerPort', description='The listening port that you want to query. Valid values: **1** to **65535**.

This parameter is required.', example='80'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ELB instance.

This parameter is required.', example='lb-5pzipr2fszqtl2xf64uy5****'),
}

model DescribeLoadBalancerUDPListenerAttributeResponseBody = {
  backendServerPort?: int32(name='BackendServerPort', description='The port used by the backend ELB server of the ELB instance. Valid values: **1** to **65535**.', example='8080'),
  bandwidth?: int32(name='Bandwidth', description='The peak bandwidth of the Edge Load Balancer (ELB) instance. The default value is -1, which indicates that the bandwidth is not limited.', example='5'),
  description?: string(name='Description', description='The name of the listener.', example='example'),
  eipTransmit?: string(name='EipTransmit', description='Indicates whether EIP pass-through is enabled. Valid values:

*   **on**
*   **off** (default)', example='on'),
  establishedTimeout?: int32(name='EstablishedTimeout', description='The timeout period of a connection. Valid values: **10** to **900**. Unit: seconds.', example='500'),
  healthCheck?: string(name='HealthCheck', description='Specifies whether to enable the health check feature. Valid values:

*   **on**
*   **off**', example='on'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='The port that is used for health checks. Valid values: **1** to **65535**. If you leave this parameter empty, the port specified by BackendServerPort is used for health checks.', example='8000'),
  healthCheckConnectTimeout?: int32(name='HealthCheckConnectTimeout', description='The timeout period for a health check response. If a backend server does not respond within the specified timeout period, the server fails the health check.

*   Default value: 5.
*   Valid values: **1** to **300**.
*   Unit: seconds.

> 

*   This parameter takes effect only if the HealthCheck parameter is set to on.

*   If the value of the HealthCheckTimeout property is smaller than the value of the HealthCheckInterval property, the timeout period specified by the HealthCheckTimeout property becomes invalid and the value of the HealthCheckInterval property is used as the timeout period.', example='100'),
  healthCheckExp?: string(name='HealthCheckExp', description='The response string for UDP listener health checks. The string can be up to 64 characters in length and can contain only letters and digits.', example='ok'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='The interval at which health checks are performed. Valid values: **1** to **50**. Unit: seconds.

>  This parameter takes effect only if you set HealthCheck to on.', example='5'),
  healthCheckReq?: string(name='HealthCheckReq', description='The request string for UDP listener health checks. The string can be up to 64 characters in length and can contain only letters and digits.', example='hello'),
  healthyThreshold?: int32(name='HealthyThreshold', description='The number of consecutive successful health checks that must occur before an unhealthy and inaccessible backend server is declared healthy and accessible. Valid values: **2** to **10**.

>  This parameter takes effect only if you set HealthCheck to on.', example='4'),
  listenerPort?: int32(name='ListenerPort', description='The listener port.', example='80'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5D7597CF-1630-54EC-A945-624A33F2E7E8'),
  scheduler?: string(name='Scheduler', description='The routing algorithm. Valid values:

*   **wrr**: Backend servers with higher weights receive more requests than those with lower weights.
*   **wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections to a backend server. If two backend servers have the same weight, the backend server that has fewer connections receives more requests.
*   **rr**: Requests are distributed to backend servers in sequence.
*   **sch**: consistent hashing that is based on source IP addresses. Requests from the same source IP address are distributed to the same backend server.
*   **qch**: consistent hashing that is based on QUIC connection IDs. Requests that contain the same QUIC connection ID are distributed to the same backend server.
*   **iqch**: consistent hashing that is based on specific three bytes of the iQUIC CIDs. Requests whose second to fourth bytes are the same are distributed to the same backend server.', example='wrr'),
  status?: string(name='Status', description='The status of the listener. Valid values:

*   **Running**
*   **Stopped**
*   **Starting**
*   **Configuring**
*   **Stopping**', example='Stopped'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='The number of consecutive failed health checks that must occur before a healthy and accessible backend server is declared unhealthy and inaccessible. Valid values: **2** to **10**.

>  This parameter takes effect only if you set HealthCheck to on.', example='4'),
}

model DescribeLoadBalancerUDPListenerAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLoadBalancerUDPListenerAttributeResponseBody(name='body'),
}

/**
 * @summary Queries the configuration of a User Datagram Protocol (UDP) listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request DescribeLoadBalancerUDPListenerAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeLoadBalancerUDPListenerAttributeResponse
 */
async function describeLoadBalancerUDPListenerAttributeWithOptions(request: DescribeLoadBalancerUDPListenerAttributeRequest, runtime: Util.RuntimeOptions): DescribeLoadBalancerUDPListenerAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.listenerPort)) {
    query['ListenerPort'] = request.listenerPort;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLoadBalancerUDPListenerAttribute',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the configuration of a User Datagram Protocol (UDP) listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request DescribeLoadBalancerUDPListenerAttributeRequest
 * @return DescribeLoadBalancerUDPListenerAttributeResponse
 */
async function describeLoadBalancerUDPListenerAttribute(request: DescribeLoadBalancerUDPListenerAttributeRequest): DescribeLoadBalancerUDPListenerAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLoadBalancerUDPListenerAttributeWithOptions(request, runtime);
}

model DescribeLoadBalancersRequest {
  address?: string(name='Address', description='The IP address that the ELB instance uses to provide services.', example='10.0.XX.XX'),
  ensRegionId?: string(name='EnsRegionId', description='The ID of the Edge Node Service (ENS) node.', example='cn-guangzhou-10'),
  ensRegionIds?: [ string ](name='EnsRegionIds', description='The IDs of the Edge Node Service (ENS) nodes.'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ELB instance.', example='lb-5q73cv04zeyh43lh74lp4****'),
  loadBalancerName?: string(name='LoadBalancerName', description='The name of the ELB instance.', example='example'),
  loadBalancerStatus?: string(name='LoadBalancerStatus', description='The status of the listener for the ELB instance. Valid values:

*   **Active**: The listener for the instance can forward the received traffic based on forwarding rules.
*   **InActive**: The listener for the instance does not forward the received traffic.', example='InActive'),
  networkId?: string(name='NetworkId', description='The ID of the network.', example='n-5s9ayrxsd9hszrlt5fgv2****'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10. Valid values: **10** to **100**.', example='100'),
  serverId?: string(name='ServerId', description='The ID of the backend server.', example='i-5f67ffjc004wwz0t****'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-5sy773iy25rulsmgskmba****'),
}

model DescribeLoadBalancersResponseBody = {
  loadBalancers?: {
    loadBalancer?: [ 
    {
      address?: string(name='Address', description='The IP address that the ELB instance uses to provide services.', example='10.10.XX.XX'),
      addressIPVersion?: string(name='AddressIPVersion', description='The IP version. Valid values: ipv4 and ipv6.', example='ipv4'),
      createTime?: string(name='CreateTime', description='The time when the ELB instance was created. The time is displayed in UTC.', example='2021-05-06T11:13:41Z'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the ENS node.', example='cn-wuhan-telecom'),
      loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ELB instance.', example='lb-5snthcyu1x10g7tywj7iu****'),
      loadBalancerName?: string(name='LoadBalancerName', description='The name of the ELB instance.', example='example'),
      loadBalancerStatus?: string(name='LoadBalancerStatus', description='The status of the listener for the ELB instance. Valid values:

*   **Active**: The listener for the instance can forward the received traffic based on forwarding rules.
*   **InActive**: The listener for the instance does not forward the received traffic.', example='InActive'),
      networkId?: string(name='NetworkId', description='The ID of the network.', example='n-5rz0rj1caexauilpsjx0w****'),
      payType?: string(name='PayType', description='The billing method. Valid values:

*   **PrePaid**: subscription.
*   **PostPaid**: pay-as-you-go. Only this billing method is supported.', example='PostPaid'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-5rllcjb3ol6duzjdnbm1om****'),
    }
  ](name='LoadBalancer')
  }(name='LoadBalancers', description='An array of ELB instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10. Valid values: **10** to **100**.', example='100'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='6'),
}

model DescribeLoadBalancersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLoadBalancersResponseBody(name='body'),
}

/**
 * @summary Queries the Edge Load Balance (ELB) instances that you have created.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request DescribeLoadBalancersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeLoadBalancersResponse
 */
async function describeLoadBalancersWithOptions(request: DescribeLoadBalancersRequest, runtime: Util.RuntimeOptions): DescribeLoadBalancersResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLoadBalancers',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the Edge Load Balance (ELB) instances that you have created.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request DescribeLoadBalancersRequest
 * @return DescribeLoadBalancersResponse
 */
async function describeLoadBalancers(request: DescribeLoadBalancersRequest): DescribeLoadBalancersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLoadBalancersWithOptions(request, runtime);
}

model DescribeMeasurementDataRequest {
  endDate?: string(name='EndDate', description='The end of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2019-08-30T00:00:00Z'),
  startDate?: string(name='StartDate', description='The beginning of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2019-06-01T00:00:00Z'),
}

model DescribeMeasurementDataResponseBody = {
  measurementDatas?: {
    measurementData?: [ 
    {
      bandWidthFeeDatas?: {
        bandWidthFeeData?: [ 
        {
          costCode?: string(name='CostCode', description='The code of the bandwidth plan.', example='cn-cmcc-1'),
          costName?: string(name='CostName', description='The name of the bandwidth plan.', example='Beijing, Shanghai, and Guangzhou Mobile'),
          costVal?: int32(name='CostVal', description='The bandwidth consumption. Unit: bit/second.', example='16486'),
        }
      ](name='BandWidthFeeData')
      }(name='BandWidthFeeDatas', description='The bandwidth data returned.'),
      chargeModel?: string(name='ChargeModel', description='The metering method. Valid values:

*   ChargeByUnified: unified metering.
*   ChargeByGrade: differential metering.', example='ChargeByGrade'),
      costCycle?: string(name='CostCycle', description='The metering cycle.', example='2019-07-30'),
      costEndTime?: string(name='CostEndTime', description='The end time of the metering cycle.', example='2019-07-30T16:00:00Z'),
      costStartTime?: string(name='CostStartTime', description='The start time of the metering cycle.', example='2019-07-29T16:00:00Z'),
      resourceFeeData?: {
        memory?: int32(name='Memory', description='The memory size. Unit: GB.', example='24'),
        storage?: int32(name='Storage', description='The storage capacity. Unit: GB.', example='60'),
        vcpu?: int32(name='Vcpu', description='The number of vCPUs.', example='12'),
      }(name='ResourceFeeData', description='The information about computing resources.'),
      resourceFeeDataDetails?: {
        resourceFeeDataDetail?: [ 
        {
          costCode?: string(name='CostCode', description='The code of the resource.', example='vCPU'),
          costName?: string(name='CostName', description='The name of the resource.', example='vCPU'),
          costVal?: int32(name='CostVal', description='The consumption of the resource.

*   Memory unit: GB.
*   CPU unit: vCPU.
*   Storage unit: GB.', example='55'),
          resourceType?: string(name='ResourceType', description='The type of the resource.', example='vCPU'),
        }
      ](name='ResourceFeeDataDetail')
      }(name='ResourceFeeDataDetails', description='Details of the computing resources.'),
    }
  ](name='MeasurementData')
  }(name='MeasurementDatas', description='The metering data returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='125B04C7-3D0D-4245-AF96-14E3758E3F06'),
}

model DescribeMeasurementDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMeasurementDataResponseBody(name='body'),
}

/**
 * @summary Queries the metering data of the user.
 *
 * @param request DescribeMeasurementDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeMeasurementDataResponse
 */
async function describeMeasurementDataWithOptions(request: DescribeMeasurementDataRequest, runtime: Util.RuntimeOptions): DescribeMeasurementDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMeasurementData',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the metering data of the user.
 *
 * @param request DescribeMeasurementDataRequest
 * @return DescribeMeasurementDataResponse
 */
async function describeMeasurementData(request: DescribeMeasurementDataRequest): DescribeMeasurementDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMeasurementDataWithOptions(request, runtime);
}

model DescribeMountTargetsRequest {
  ensRegionId?: string(name='EnsRegionId', description='The ID of the region.

This parameter is required.', example='cn-beijing-cmcc'),
  fileSystemId?: string(name='FileSystemId', description='The ID of the file system.

This parameter is required.', example='c50f8*****'),
  mountTargetName?: string(name='MountTargetName', description='The name of the mount target.', example='TestMountPath'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. The maximum value is 100. Default value: 10.', example='10'),
}

model DescribeMountTargetsResponseBody = {
  mountTargets?: [ 
    {
      ensRegionId?: string(name='EnsRegionId', description='The ID of the region.', example='cn-beijing-cmcc'),
      fileSystemId?: string(name='FileSystemId', description='The ID of the file system.', example='c50f8*****'),
      mountTargetDomain?: string(name='MountTargetDomain', description='The path of the mount target.', example='LB:/fileSystemName/mountTargetName'),
      mountTargetName?: string(name='MountTargetName', description='The name of the mount target.', example='TestMountPath'),
      netWorkId?: string(name='NetWorkId', description='The ID of the network.', example='n-***'),
      status?: string(name='Status', description='The state of the mount target. Valid values:

*   active: The mount target is available.
*   inactive: The mount target is unavailable.
*   pending: A task is being queued for the mount target.
*   deleting: The mount target is being deleted.', example='active'),
    }
  ](name='MountTargets', description='The information about mount targets.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='2'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='762DD527-358B-1E48-8005-CCE3ED4EB9E0'),
  totalCount?: int32(name='TotalCount', description='The total number of mount targets.', example='1'),
}

model DescribeMountTargetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMountTargetsResponseBody(name='body'),
}

/**
 * @summary Queries the information about mount targets.
 *
 * @param request DescribeMountTargetsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeMountTargetsResponse
 */
async function describeMountTargetsWithOptions(request: DescribeMountTargetsRequest, runtime: Util.RuntimeOptions): DescribeMountTargetsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.mountTargetName)) {
    query['MountTargetName'] = request.mountTargetName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMountTargets',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about mount targets.
 *
 * @param request DescribeMountTargetsRequest
 * @return DescribeMountTargetsResponse
 */
async function describeMountTargets(request: DescribeMountTargetsRequest): DescribeMountTargetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMountTargetsWithOptions(request, runtime);
}

model DescribeNCInformationRequest {
  ensRegionId?: string(name='EnsRegionId'),
  resourceId?: string(name='ResourceId'),
}

model DescribeNCInformationResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  data?: [ 
    {
      cpu?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Cpu'),
      gpu?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Gpu'),
      hdd?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Hdd'),
      info?: {
        ip?: string(name='Ip'),
        name?: string(name='Name'),
        tag?: [ string ](name='Tag'),
        uuid?: string(name='Uuid'),
      }(name='Info'),
      memory?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Memory'),
      nvme?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Nvme'),
      online?: boolean(name='Online'),
      region?: string(name='Region'),
      ssd?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Ssd'),
      virtual?: string(name='Virtual'),
    }
  ](name='Data'),
  desc?: string(name='Desc'),
  msg?: string(name='Msg'),
  pager?: {
    page?: long(name='Page'),
    size?: long(name='Size'),
    total?: long(name='Total'),
  }(name='Pager'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeNCInformationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNCInformationResponseBody(name='body'),
}

/**
 * @summary 根据筛选条件获取指定NC属性和资源量信息
 *
 * @param request DescribeNCInformationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeNCInformationResponse
 */
async function describeNCInformationWithOptions(request: DescribeNCInformationRequest, runtime: Util.RuntimeOptions): DescribeNCInformationResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNCInformation',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 根据筛选条件获取指定NC属性和资源量信息
 *
 * @param request DescribeNCInformationRequest
 * @return DescribeNCInformationResponse
 */
async function describeNCInformation(request: DescribeNCInformationRequest): DescribeNCInformationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNCInformationWithOptions(request, runtime);
}

model DescribeNatGatewaysRequest {
  ensRegionId?: string(name='EnsRegionId', description='The ID of the Edge Node Service (ENS) node.', example='cn-wuxi-9'),
  ensRegionIds?: [ string ](name='EnsRegionIds', description='The node information.'),
  name?: string(name='Name', description='The name of the NAT gateway.', example='test0'),
  natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.', example='nat-5t7nh1cfm6kxiszlttr38****'),
  natGatewayIds?: [ string ](name='NatGatewayIds', description='The IDs of NAT Gateways.'),
  networkId?: string(name='NetworkId', description='The ID of the network.', example='n-2zeuphj08tt7q3brd****'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page **1**.

Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. The maximum value is **100**.

Default value: **10**.', example='10'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-5rllcjb3ol6duzjdnbm1o****'),
}

model DescribeNatGatewaysResponseBody = {
  natGateways?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the NAT gateway was created. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2021-11-22T07:03:32Z'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the ENS node.', example='cn-xiangyang-5'),
      ipLists?: [ 
        {
          allocationId?: string(name='AllocationId', description='The ID of the instance.', example='eip-50g****'),
          ipAddress?: string(name='IpAddress', description='The IP address of the EIP associated with the NAT gateway.', example='8.XX.XX.162'),
          usingStatus?: string(name='UsingStatus', description='The association between the EIP and the Internet NAT gateway. Valid values:

*   **UsedByForwardTable**: The EIP is specified in a DNAT entry.
*   **UsedBySnatTable**: The EIP is specified in an SNAT entry.
*   **UsedByForwardSnatTable**: The EIP is specified in both an SNAT entry and a DNAT entry.
*   **Idle**: The EIP is not specified in a DNAT or SNAT entry.', example='Idle'),
        }
      ](name='IpLists', description='The list of elastic IP addresses (EIPs) that are associated with the Internet NAT gateway.'),
      name?: string(name='Name', description='The name of the NAT gateway.', example='test0'),
      natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.', example='nat-5t7nh1cfm6kxiszlttr38****'),
      networkId?: string(name='NetworkId', description='The ID of the network.', example='n-5s2ml1olj0kzaws9n1yrj****'),
      spec?: string(name='Spec', description='The type of the NAT gateway.', example='enat.default'),
      status?: string(name='Status', description='The status of the SNAT entry.

*   Pending: The SNAT entry is being created or modified.
*   Available: The SNAT entry is available.
*   Deleting: The SNAT entry is being deleted.', example='Available'),
      tags?: [ 
        {
          key?: string(name='Key'),
          tagKey?: string(name='TagKey', deprecated=true),
          tagValue?: string(name='TagValue', deprecated=true),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-5szpp1os9m55myirbflfw****'),
    }
  ](name='NatGateways', description='The details of the NAT gateways.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2818A8F4-5E2B-5611-8732-5ACF7B677059'),
  totalCount?: int32(name='TotalCount', description='The number of NAT gateways that are returned.', example='49'),
}

model DescribeNatGatewaysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNatGatewaysResponseBody(name='body'),
}

/**
 * @summary Queries created Network Address Translation (NAT) gateways.
 *
 * @param request DescribeNatGatewaysRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeNatGatewaysResponse
 */
async function describeNatGatewaysWithOptions(request: DescribeNatGatewaysRequest, runtime: Util.RuntimeOptions): DescribeNatGatewaysResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNatGateways',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries created Network Address Translation (NAT) gateways.
 *
 * @param request DescribeNatGatewaysRequest
 * @return DescribeNatGatewaysResponse
 */
async function describeNatGateways(request: DescribeNatGatewaysRequest): DescribeNatGatewaysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNatGatewaysWithOptions(request, runtime);
}

model DescribeNetworkAclsRequest {
  networkAclId?: string(name='NetworkAclId', description='The ID of the network ACL.', example='nacl-bp1lhl0taikrbgnh****'),
  networkAclName?: string(name='NetworkAclName', description='The name of the network ACL.', example='acl-1'),
  pageNumber?: string(name='PageNumber', description='The page number. Pages start from page **1**. Default value: **1**.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10'),
  resourceId?: string(name='ResourceId', description='The ID of the associated instance.', example='n-5****'),
}

model DescribeNetworkAclsResponseBody = {
  networkAcls?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the network ACL was created. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.', example='2019-11-01T06:08:46Z'),
      description?: string(name='Description', description='The description of the network ACL.', example='This is my NetworkAcl.'),
      egressAclEntries?: [ 
        {
          cidrBlock?: string(name='CidrBlock', description='The destination CIDR block.', example='10.0.0.0/24'),
          description?: string(name='Description', description='The description of the outbound rule.', example='This is EgressAclEntries.'),
          networkAclEntryId?: string(name='NetworkAclEntryId', description='The ID of the outbound rule.', example='nae-a2d447uw4tillfvgb****'),
          networkAclEntryName?: string(name='NetworkAclEntryName', description='The name of the outbound rule.', example='acl-2'),
          policy?: string(name='Policy', description='The action that is performed on network traffic that matches the rule. Valid values:

*   **accept**: allows the network traffic.
*   **drop**: blocks the network traffic.', example='accept'),
          portRange?: string(name='PortRange', description='The destination port range of the outbound rule.

*   If **Protocol** of the outbound rule is set to **all** or **icmp** the port range is **-1/-1**, which indicates all ports.
*   If **Protocol** of the outbound rule is set to **tcp** or **udp**, the port range is in the following format: **1/200** or **80/80**. 1/200 indicates port 1 to port 200. 80/80 indicates port 80. Valid values for a port: **1 to 65535**.', example='-1/-1'),
          priority?: int32(name='Priority', description='The priority of the rule. Valid values: **1 to 100**. Default value: **1**.', example='1'),
          protocol?: string(name='Protocol', description='The protocol type. Valid values:

*   **icmp**: ICMP.
*   **tcp**: TCP.
*   **udp**: UDP.
*   **all**: all protocols.', example='all'),
          type?: string(name='Type', description='The type of the rule. Valid values:

*   **system**: The rule is created by the system.
*   **custom**: The rule is created by a user.', example='system'),
        }
      ](name='EgressAclEntries', description='Details of the outbound rules.'),
      ingressAclEntries?: [ 
        {
          cidrBlock?: string(name='CidrBlock', description='The source CIDR block.', example='10.0.0.0/24'),
          description?: string(name='Description', description='The description of the inbound rule.', example='This is IngressAclEntries.'),
          networkAclEntryId?: string(name='NetworkAclEntryId', description='The ID of the inbound rule.', example='nae-5dk86arlydmezasw****'),
          networkAclEntryName?: string(name='NetworkAclEntryName', description='The name of the inbound rule.', example='acl-3'),
          policy?: string(name='Policy', description='The action that is performed on network traffic that matches the rule. Valid values:

*   **accept**: allows the network traffic.
*   **drop**: blocks the network traffic.', example='accept'),
          portRange?: string(name='PortRange', description='The destination port range of the inbound rule.

*   If **Protocol** of the inbound rule is set to **all** or **icmp**, the port range is **-1/-1**, which indicates all ports.
*   If **Protocol** of the inbound rule is set to **tcp** or **udp**, the port range is in the following format: **1/200** or **80/80**. 1/200 indicates port 1 to port 200. 80/80 indicates port 80. Valid values for a port: **1 to 65535**.', example='-1/-1'),
          priority?: int32(name='Priority', description='The priority of the rule. Valid values: **1 to 100**. Default value: **1**.', example='1'),
          protocol?: string(name='Protocol', description='The protocol type. Valid values:

*   **icmp**: ICMP.
*   **tcp**: TCP.
*   **udp**: UDP.
*   **all**: all protocols.', example='all'),
          type?: string(name='Type', description='The type of the rule. Valid values:

*   **system**: The rule is created by the system.
*   **custom**: The rule is created by a user.', example='system'),
        }
      ](name='IngressAclEntries', description='Details of the inbound rules.'),
      networkAclId?: string(name='NetworkAclId', description='The ID of the network ACL.', example='nacl-a2do9e413e0spxscd****'),
      networkAclName?: string(name='NetworkAclName', description='The name of the network ACL.', example='acl-8'),
      resources?: [ 
        {
          ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.', example='cn-fuzhou-telecom'),
          resourceId?: string(name='ResourceId', description='The ID of the associated resource.', example='n-****'),
          resourceType?: string(name='ResourceType', description='The type of the associated resource.', example='Network'),
          status?: string(name='Status', description='The association status of the resource. Valid values:

*   **BINDED**: The resource is associated with the network ACL.
*   **BINDING**: The resource is being associated with the network ACL.
*   **UNBINDING**: The resource is being disassociated from the network ACL.', example='BINDING'),
        }
      ](name='Resources', description='Details of the associated resources.'),
      status?: string(name='Status', description='The status of the network ACL. Valid values:

*   **Available**: The network ACL is available.
*   **Modifying**: The network ACL is being configured.', example='Available'),
    }
  ](name='NetworkAcls', description='Details of the network ACLs.'),
  pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page.', example='2'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A1707FC0-430C-423A-B624-284046B20399'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='3'),
}

model DescribeNetworkAclsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNetworkAclsResponseBody(name='body'),
}

/**
 * @summary Queries network access control lists (ACLs).
 *
 * @param request DescribeNetworkAclsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeNetworkAclsResponse
 */
async function describeNetworkAclsWithOptions(request: DescribeNetworkAclsRequest, runtime: Util.RuntimeOptions): DescribeNetworkAclsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNetworkAcls',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries network access control lists (ACLs).
 *
 * @param request DescribeNetworkAclsRequest
 * @return DescribeNetworkAclsResponse
 */
async function describeNetworkAcls(request: DescribeNetworkAclsRequest): DescribeNetworkAclsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkAclsWithOptions(request, runtime);
}

model DescribeNetworkAttributeRequest {
  networkId?: string(name='NetworkId', description='The ID of the network.

This parameter is required.', example='n-****'),
}

model DescribeNetworkAttributeResponseBody = {
  cidrBlock?: string(name='CidrBlock', description='The IPv4 CIDR block of the network.', example='10.0.0.0/24'),
  cloudResources?: {
    cloudResourceSetType?: [ 
    {
      resourceCount?: int32(name='ResourceCount', description='The number of resources in the network.', example='3'),
      resourceType?: string(name='ResourceType', description='The resource type. VSwitch.', example='VSwitch'),
    }
  ](name='CloudResourceSetType')
  }(name='CloudResources', description='The list of resources in the network.'),
  createdTime?: string(name='CreatedTime', description='The time when the network was created. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2019-06-01T00:00:00Z'),
  description?: string(name='Description', description='The description of the network.', example='abc'),
  ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.', example='cn-beijing'),
  gatewayRouteTableId?: string(name='GatewayRouteTableId', description='The ID of the gateway route table associated with the IPv6 gateway.

>  This parameter is available only when the IPv6 gateway is associated with a gateway route table.', example='rt-539***tbs'),
  haVipIds?: {
    haVipId?: [ string ](name='HaVipId')
  }(name='HaVipIds', description='List of HaVipIds.'),
  instanceIds?: {
    instanceId?: [ string ](name='InstanceId')
  }(name='InstanceIds', description='The instance IDs.'),
  loadBalancerIds?: {
    loadBalancerId?: [ string ](name='LoadBalancerId')
  }(name='LoadBalancerIds', description='List of ELB instances.'),
  natGatewayIds?: {
    natGatewayId?: [ string ](name='NatGatewayId')
  }(name='NatGatewayIds', description='List of NAT Gateways.'),
  networkAclId?: string(name='NetworkAclId', description='The ID of the network access control list (ACL).', example='nacl-a2do9e413e0sp****'),
  networkId?: string(name='NetworkId', description='The ID of the network.', example='n-5***'),
  networkInterfaceIds?: {
    networkInterfaceId?: [ string ](name='NetworkInterfaceId')
  }(name='NetworkInterfaceIds', description='A list of multicast source IDs.'),
  networkName?: string(name='NetworkName', description='The name of the network.', example='abc'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  routeTableId?: string(name='RouteTableId', description='The ID of the route table that you want to query.', example='rt-539***fpu'),
  routeTableIds?: {
    routeTableId?: [ string ](name='RouteTableId')
  }(name='RouteTableIds', description='List of routing table IDs.'),
  routerTableId?: string(name='RouterTableId', description='The ID of the route table.', example='rtb-5***'),
  status?: string(name='Status', description='The status of the network. Valid values:

*   Pending
*   Available', example='Available'),
  vSwitchIds?: {
    vSwitchId?: [ string ](name='VSwitchId')
  }(name='VSwitchIds', description='The list of vSwitches in the network.'),
}

model DescribeNetworkAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNetworkAttributeResponseBody(name='body'),
}

/**
 * @summary Queries the configuration of a specified network.
 *
 * @description *   You can call this operation up to 100 times per second.
 * *   You can call this operation up to 10 times per second per account.
 *
 * @param request DescribeNetworkAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeNetworkAttributeResponse
 */
async function describeNetworkAttributeWithOptions(request: DescribeNetworkAttributeRequest, runtime: Util.RuntimeOptions): DescribeNetworkAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.networkId)) {
    query['NetworkId'] = request.networkId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNetworkAttribute',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the configuration of a specified network.
 *
 * @description *   You can call this operation up to 100 times per second.
 * *   You can call this operation up to 10 times per second per account.
 *
 * @param request DescribeNetworkAttributeRequest
 * @return DescribeNetworkAttributeResponse
 */
async function describeNetworkAttribute(request: DescribeNetworkAttributeRequest): DescribeNetworkAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkAttributeWithOptions(request, runtime);
}

model DescribeNetworkInterfacesRequest {
  ensRegionId?: string(name='EnsRegionId', description='The region ID of the instance.', example='cn-tianjin-cmcc'),
  ensRegionIds?: [ string ](name='EnsRegionIds', description='The node information.'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-5t7z99n32gplriv'),
  ipv6Address?: [ string ](name='Ipv6Address', description='IPv6 addresses N of the ENI. You can specify multiple IPv6 addresses. Valid values of N: 1 to 100.'),
  networkId?: string(name='NetworkId', description='The ID of the network.', example='n-2zeuphj08tt7q3brd****'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-58z57orgmt6d1****'),
  networkInterfaceIds?: [ string ](name='NetworkInterfaceIds', description='A list of multicast source IDs.'),
  networkInterfaceName?: string(name='NetworkInterfaceName', description='The name of the ENI.', example='test-01'),
  pageNumber?: string(name='PageNumber', description='The page number of the returned page. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Maximum value: 100. Default value: 50.', example='50'),
  primaryIpAddress?: string(name='PrimaryIpAddress', description='The primary IP address of the ENI.', example='***'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which the secondary ENI belongs. To query the details of secondary ENIs based on the ID of a security group, specify this parameter.', example='sg-5p1fg655nh68xyz9i***'),
  status?: string(name='Status', description='The status of the ENI. Valid values:

*   Available: The ENI is available.
*   Attaching: The ENI is being attached to an instance.
*   InUse: The ENI is attached to an instance.
*   Detaching: The ENI is being detached from an instance.
*   Deleting: The ENI is being deleted.

This parameter is empty by default, which indicates that ENIs in all states are queried.', example='Available'),
  type?: string(name='Type', description='The type of the ENI. Valid values:

*   Primary: the primary ENI.
*   Secondary: the secondary ENI.

This parameter is empty by default, which indicates that both primary and secondary ENIs are queried.', example='Secondary'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-12345'),
}

model DescribeNetworkInterfacesResponseBody = {
  networkInterfaceSets?: {
    networkInterfaceSet?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the ENI was created. Specify the time in the ISO 8601 standard in the yyyy-MM-ddThh:mmZ format. The time is displayed in UTC.', example='2022-02-22T03:53:25Z'),
      description?: string(name='Description', description='The description of ENI.', example='test-description'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.', example='id-jakarta-1'),
      instanceId?: string(name='InstanceId', description='The ID of the instance to which the ENI is bound.', example='i-5siavnr3'),
      ipv6Sets?: {
        ipv6Set?: [ 
        {
          ipv6Address?: string(name='Ipv6Address', description='The IPv6 address of the ENI.', example='2605:340:cdb1:XXXX:XXXX:XXXX:XXXX:e2d6'),
        }
      ](name='Ipv6Set')
      }(name='Ipv6Sets', description='The IPv6 addresses of the ENIs.'),
      macAddress?: string(name='MacAddress', description='The MAC address of the ENI.', example='00:16:3e:08:60:0a'),
      networkId?: string(name='NetworkId', description='The ID of the network.', example='n-5w0qd03adw****'),
      networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-uf686a5'),
      networkInterfaceName?: string(name='NetworkInterfaceName', description='The ENI name.', example='primaryTest'),
      primaryIp?: string(name='PrimaryIp', description='The private IP address of the server.', example='12.23.3.4'),
      primaryIpType?: string(name='PrimaryIpType', description='The primary private IP address. Valid values:

*   **Public**: public IP address.
*   **Private**: internal IP address.', example='private'),
      privateIpSets?: {
        privateIpSet?: [ 
        {
          primary?: boolean(name='Primary', description='Specifies whether the private IP address is the primary private IP address. Valid values:

*   true
*   false', example='true'),
          privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address.', example='192.168.0.130'),
        }
      ](name='PrivateIpSet')
      }(name='PrivateIpSets', description='Details about the private IP address.'),
      securityGroupIds?: {
        securityGroup?: [ string ](name='SecurityGroup')
      }(name='SecurityGroupIds', description='The ID of the security group.'),
      status?: string(name='Status', description='The status of the ENI. Valid values:

*   Available: The ENI is available.
*   Attaching: The ENI is being attached to an instance.
*   InUse: The ENI is attached to an instance.
*   Detaching: The ENI is being detached from an instance.
*   Deleting: The ENI is being deleted.', example='In_use'),
      type?: string(name='Type', description='The type of the ENI. Valid values:

*   Primary
*   Secondary', example='Primary'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-5rqswx1trlsj9'),
    }
  ](name='NetworkInterfaceSet')
  }(name='NetworkInterfaceSets', description='Details about the ENIs.'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page **1**. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Maximum value: **50**. Default value: **10**.', example='50'),
  requestId?: string(name='RequestId', description='The request ID.', example='708AF9CE-FF92-5DF9-93F8-B7754AB1061A'),
  totalCount?: int32(name='TotalCount', description='The total number of entries in the list.', example='49'),
}

model DescribeNetworkInterfacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNetworkInterfacesResponseBody(name='body'),
}

/**
 * @summary Queries Elastic Network Interfaces (ENIs).
 *
 * @param request DescribeNetworkInterfacesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeNetworkInterfacesResponse
 */
async function describeNetworkInterfacesWithOptions(request: DescribeNetworkInterfacesRequest, runtime: Util.RuntimeOptions): DescribeNetworkInterfacesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.ensRegionIds)) {
    query['EnsRegionIds'] = request.ensRegionIds;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ipv6Address)) {
    query['Ipv6Address'] = request.ipv6Address;
  }
  if (!Util.isUnset(request.networkId)) {
    query['NetworkId'] = request.networkId;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.networkInterfaceIds)) {
    query['NetworkInterfaceIds'] = request.networkInterfaceIds;
  }
  if (!Util.isUnset(request.networkInterfaceName)) {
    query['NetworkInterfaceName'] = request.networkInterfaceName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.primaryIpAddress)) {
    query['PrimaryIpAddress'] = request.primaryIpAddress;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNetworkInterfaces',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries Elastic Network Interfaces (ENIs).
 *
 * @param request DescribeNetworkInterfacesRequest
 * @return DescribeNetworkInterfacesResponse
 */
async function describeNetworkInterfaces(request: DescribeNetworkInterfacesRequest): DescribeNetworkInterfacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkInterfacesWithOptions(request, runtime);
}

model DescribeNetworksRequest {
  ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.', example='cn-beijing-telecom'),
  ensRegionIds?: [ string ](name='EnsRegionIds', description='The IDs of edge nodes. You can specify 1 to 100 IDs.'),
  networkId?: string(name='NetworkId', description='The ID of the network.', example='n-5***'),
  networkIds?: [ string ](name='NetworkIds', description='The IDs of VPCs You can specify 1 to 100 IDs.'),
  networkName?: string(name='NetworkName', description='The name of the network.', example='example'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: **1 to 50**. Default value: **10**.', example='10'),
}

model DescribeNetworksResponseBody = {
  networks?: {
    network?: [ 
    {
      cidrBlock?: string(name='CidrBlock', description='The IPv4 CIDR block of the network.', example='10.0.xx.xx/24'),
      createdTime?: string(name='CreatedTime', description='The timestamp when the instance was created. Unit: milliseconds.', example='2020-06-16T06:33:15Z'),
      description?: string(name='Description', description='The description of the network.', example='exampleDescription'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.', example='cn-beijing'),
      gatewayRouteTableId?: string(name='GatewayRouteTableId', description='The ID of the gateway route table associated with the IPv6 gateway.

>  This parameter is available only when the IPv6 gateway is associated with a gateway route table.', example='rt-5*****tbs'),
      networkAclId?: string(name='NetworkAclId', description='The ID of the network access control list (ACL).', example='nacl-a2do9e413e0spxscd****'),
      networkId?: string(name='NetworkId', description='The ID of the network.', example='n-5***'),
      networkName?: string(name='NetworkName', description='The name of the network.', example='example'),
      routeTableId?: string(name='RouteTableId', description='The ID of the route table.', example='rt-5*****pks'),
      routeTableIds?: {
        routeTableId?: [ string ](name='RouteTableId')
      }(name='RouteTableIds', description='The IDs of the route tables.'),
      routerTableId?: string(name='RouterTableId', description='The route table ID.', example='rtb-5**'),
      status?: string(name='Status', description='The status of the network. Valid values:

*   Pending
*   Available', example='Available'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          tagKey?: string(name='TagKey', deprecated=true),
          tagValue?: string(name='TagValue', deprecated=true),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      vSwitchIds?: {
        vSwitchId?: [ string ](name='VSwitchId')
      }(name='VSwitchIds', description='The list of vSwitches in the network.'),
    }
  ](name='Network')
  }(name='Networks', description='The VPCs.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='2'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of entries in the list.', example='3'),
}

model DescribeNetworksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNetworksResponseBody(name='body'),
}

/**
 * @summary Query the network list.
 *
 * @description *   You can call this operation up to 100 times per second.
 * *   You can call this operation up to 10 times per second per account.
 *
 * @param request DescribeNetworksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeNetworksResponse
 */
async function describeNetworksWithOptions(request: DescribeNetworksRequest, runtime: Util.RuntimeOptions): DescribeNetworksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.ensRegionIds)) {
    query['EnsRegionIds'] = request.ensRegionIds;
  }
  if (!Util.isUnset(request.networkId)) {
    query['NetworkId'] = request.networkId;
  }
  if (!Util.isUnset(request.networkIds)) {
    query['NetworkIds'] = request.networkIds;
  }
  if (!Util.isUnset(request.networkName)) {
    query['NetworkName'] = request.networkName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNetworks',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query the network list.
 *
 * @description *   You can call this operation up to 100 times per second.
 * *   You can call this operation up to 10 times per second per account.
 *
 * @param request DescribeNetworksRequest
 * @return DescribeNetworksResponse
 */
async function describeNetworks(request: DescribeNetworksRequest): DescribeNetworksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworksWithOptions(request, runtime);
}

model DescribePrePaidInstanceStockRequest {
  dataDiskSize?: int32(name='DataDiskSize', description='The size of the data disk. Unit: GB.

This parameter is required.', example='20'),
  ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.

This parameter is required.', example='cn-suzhou-telecom'),
  instanceSpec?: string(name='InstanceSpec', description='The specification of the instance.

This parameter is required.', example='ens.sn1.stiny'),
  systemDiskSize?: int32(name='SystemDiskSize', description='The size of the system disk. Unit: GB.

This parameter is required.', example='100'),
}

model DescribePrePaidInstanceStockResponseBody = {
  avaliableCount?: int32(name='AvaliableCount', description='The number of resources that you can purchase.', example='84'),
  cores?: int32(name='Cores', description='The number of CPU cores.', example='1'),
  dataDiskSize?: int32(name='DataDiskSize', description='The size of the data disk.', example='20'),
  ensRegionId?: string(name='EnsRegionId', description='The ID of the node.', example='cn-suzhou-telecom'),
  instanceSpec?: string(name='InstanceSpec', description='The specification of the instance.', example='ens.sn1.stiny'),
  memory?: int32(name='Memory', description='The memory size. Unit: GB.', example='2048'),
  requestId?: string(name='RequestId', description='The request ID.', example='007833C8-E819-4122-B636-0D48D7BF6DFB'),
  resourceGap?: string(name='ResourceGap', description='The reason why resources are insufficient.', example='StockNotEnough'),
  systemDiskSize?: int32(name='SystemDiskSize', description='The size of the system disk.', example='20'),
}

model DescribePrePaidInstanceStockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePrePaidInstanceStockResponseBody(name='body'),
}

/**
 * @summary The specifications of resources that can be purchased in subscription billing mode are queried.
 *
 * @param request DescribePrePaidInstanceStockRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePrePaidInstanceStockResponse
 */
async function describePrePaidInstanceStockWithOptions(request: DescribePrePaidInstanceStockRequest, runtime: Util.RuntimeOptions): DescribePrePaidInstanceStockResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataDiskSize)) {
    query['DataDiskSize'] = request.dataDiskSize;
  }
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.instanceSpec)) {
    query['InstanceSpec'] = request.instanceSpec;
  }
  if (!Util.isUnset(request.systemDiskSize)) {
    query['SystemDiskSize'] = request.systemDiskSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePrePaidInstanceStock',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary The specifications of resources that can be purchased in subscription billing mode are queried.
 *
 * @param request DescribePrePaidInstanceStockRequest
 * @return DescribePrePaidInstanceStockResponse
 */
async function describePrePaidInstanceStock(request: DescribePrePaidInstanceStockRequest): DescribePrePaidInstanceStockResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePrePaidInstanceStockWithOptions(request, runtime);
}

model DescribePriceRequest {
  dataDisk?: [
    {
      size?: int32(name='Size', description='The size of the data disk. Unit: GB. If you specify this parameter, this parameter takes precedence over the Size property in DataDisks.', example='50'),
    }
  ](name='DataDisk'),
  systemDisk?: {
    size?: int32(name='Size', description='The size of the system disk. Unit: GB.

This parameter is required.', example='20'),
  }(name='SystemDisk'),
  dataDisks?: [ 
    {
      category?: string(name='Category', description='The category of the disk.', example='cloud_efficiency'),
      size?: long(name='Size', description='The size of the data disk. Unit: GB.', example='50'),
    }
  ](name='DataDisks', description='If you leave DataDisk.1.Size empty, the value that you specified for this parameter is used.'),
  ensRegionId?: string(name='EnsRegionId', description='The ID of the ENS node.

This parameter is required.', example='cn-shanghai-unicom'),
  instanceType?: string(name='InstanceType', description='The specifications of instances.

This parameter is required.', example='ens.sn1.tiny'),
  internetChargeType?: string(name='InternetChargeType', description='The bandwidth metering method of the instance. Valid values:

*   BandwidthByDay: Pay by daily peak bandwidth
*   95BandwidthByMonth: Pay by monthly 95th percentile bandwidth
*   PayByBandwidth4thMonth: Pay by monthly fourth peak bandwidth
*   PayByBandwidth: Pay by fixed bandwidth

This parameter is required.', example='95BandwidthByMonth'),
  period?: int32(name='Period', description='The subscription duration of the instance.

*   If you leave the PeriodUnit parameter empty, the instance is purchased on a monthly basis. Valid values: Day and Month.
*   If you set PeriodUnit to Day, you can set Period only to 3.
*   If you set PeriodUnit to Month, you can set Period to a number from 1 to 9, or set Period to 12.

This parameter is required.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The billing cycle of the ENS instance. Valid values:

*   Month (default):
*   Day', example='Month'),
  quantity?: int32(name='Quantity', description='The number of instances.

This parameter is required.', example='1'),
}

model DescribePriceShrinkRequest {
  dataDisk?: [
    {
      size?: int32(name='Size', description='The size of the data disk. Unit: GB. If you specify this parameter, this parameter takes precedence over the Size property in DataDisks.', example='50'),
    }
  ](name='DataDisk'),
  systemDisk?: {
    size?: int32(name='Size', description='The size of the system disk. Unit: GB.

This parameter is required.', example='20'),
  }(name='SystemDisk'),
  dataDisksShrink?: string(name='DataDisks', description='If you leave DataDisk.1.Size empty, the value that you specified for this parameter is used.'),
  ensRegionId?: string(name='EnsRegionId', description='The ID of the ENS node.

This parameter is required.', example='cn-shanghai-unicom'),
  instanceType?: string(name='InstanceType', description='The specifications of instances.

This parameter is required.', example='ens.sn1.tiny'),
  internetChargeType?: string(name='InternetChargeType', description='The bandwidth metering method of the instance. Valid values:

*   BandwidthByDay: Pay by daily peak bandwidth
*   95BandwidthByMonth: Pay by monthly 95th percentile bandwidth
*   PayByBandwidth4thMonth: Pay by monthly fourth peak bandwidth
*   PayByBandwidth: Pay by fixed bandwidth

This parameter is required.', example='95BandwidthByMonth'),
  period?: int32(name='Period', description='The subscription duration of the instance.

*   If you leave the PeriodUnit parameter empty, the instance is purchased on a monthly basis. Valid values: Day and Month.
*   If you set PeriodUnit to Day, you can set Period only to 3.
*   If you set PeriodUnit to Month, you can set Period to a number from 1 to 9, or set Period to 12.

This parameter is required.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The billing cycle of the ENS instance. Valid values:

*   Month (default):
*   Day', example='Month'),
  quantity?: int32(name='Quantity', description='The number of instances.

This parameter is required.', example='1'),
}

model DescribePriceResponseBody = {
  priceInfo?: {
    price?: {
      currency?: string(name='Currency', description='The type of currency.

*   USD: US dollar
*   JPY: Japanese Yen', example='USD'),
      discountPrice?: float(name='DiscountPrice', description='The discount.', example='1'),
      originalPrice?: float(name='OriginalPrice', description='The original price.', example='16125.00'),
      tradePrice?: float(name='TradePrice', description='The final price.', example='126.75'),
    }(name='Price', description='The price.'),
  }(name='PriceInfo', description='The price information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='694EB8FF-446C-5B1E-8146-9629E492551F'),
}

model DescribePriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePriceResponseBody(name='body'),
}

/**
 * @summary Queries the most recent price of an Edge Node Service (ENS) instance.
 *
 * @param tmpReq DescribePriceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePriceResponse
 */
async function describePriceWithOptions(tmpReq: DescribePriceRequest, runtime: Util.RuntimeOptions): DescribePriceResponse {
  Util.validateModel(tmpReq);
  var request = new DescribePriceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dataDisks)) {
    request.dataDisksShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataDisks, 'DataDisks', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.dataDisksShrink)) {
    query['DataDisks'] = request.dataDisksShrink;
  }
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.quantity)) {
    query['Quantity'] = request.quantity;
  }
  if (!Util.isUnset(request.dataDisk)) {
    query['DataDisk'] = request.dataDisk;
  }
  if (!Util.isUnset(request.systemDisk)) {
    query['SystemDisk'] = request.systemDisk;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePrice',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the most recent price of an Edge Node Service (ENS) instance.
 *
 * @param request DescribePriceRequest
 * @return DescribePriceResponse
 */
async function describePrice(request: DescribePriceRequest): DescribePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePriceWithOptions(request, runtime);
}

model DescribeRegionIspsRequest {
  ensRegionId?: string(name='EnsRegionId', description='The ID of the node. You can specify only one node ID in a call.', example='cn-dalian-unicom'),
}

model DescribeRegionIspsResponseBody = {
  isps?: [ 
    {
      code?: string(name='Code', description='The code of the ISP.', example='cmcc'),
      name?: string(name='Name', description='The name of the ISP.', example='move'),
    }
  ](name='Isps', description='The list of ISPs.'),
  requestId?: string(name='RequestId', description='The request ID.', example='DC90CC7E-23B6-5A90-9097-A17CE4A161C4'),
}

model DescribeRegionIspsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionIspsResponseBody(name='body'),
}

/**
 * @summary Queries information about the Internet service providers (ISPs) of edge nodes.
 *
 * @param request DescribeRegionIspsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRegionIspsResponse
 */
async function describeRegionIspsWithOptions(request: DescribeRegionIspsRequest, runtime: Util.RuntimeOptions): DescribeRegionIspsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegionIsps',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries information about the Internet service providers (ISPs) of edge nodes.
 *
 * @param request DescribeRegionIspsRequest
 * @return DescribeRegionIspsResponse
 */
async function describeRegionIsps(request: DescribeRegionIspsRequest): DescribeRegionIspsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionIspsWithOptions(request, runtime);
}

model DescribeRegionResourceRequest {
  ensRegionId?: string(name='EnsRegionId'),
  ispType?: string(name='IspType'),
}

model DescribeRegionResourceResponseBody = {
  data?: [ 
    {
      areaCode?: string(name='AreaCode'),
      areaName?: string(name='AreaName'),
      armCard?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='ArmCard'),
      attributes?: [ string ](name='Attributes'),
      bandwidth?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Bandwidth'),
      blockStorage?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='BlockStorage'),
      countryCode?: string(name='CountryCode'),
      countryName?: string(name='CountryName'),
      cpu?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Cpu'),
      gpu?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Gpu'),
      hdd?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Hdd'),
      houseId?: string(name='HouseId'),
      ipv4s?: [ 
        {
          display?: string(name='Display'),
          isp?: string(name='Isp'),
          oversellRatio?: long(name='OversellRatio'),
          remain?: long(name='Remain'),
          reserveDisable?: boolean(name='ReserveDisable'),
          reserveDisableTotal?: long(name='ReserveDisableTotal'),
          reserved?: long(name='Reserved'),
          statusDisable?: boolean(name='StatusDisable'),
          statusDisableTotal?: long(name='StatusDisableTotal'),
          total?: long(name='Total'),
          type?: string(name='Type'),
          used?: long(name='Used'),
          usedRatio?: long(name='UsedRatio'),
          vlan?: string(name='Vlan'),
        }
      ](name='Ipv4s'),
      ipv6s?: [ 
        {
          display?: string(name='Display'),
          isp?: string(name='Isp'),
          oversellRatio?: long(name='OversellRatio'),
          remain?: long(name='Remain'),
          reserveDisable?: boolean(name='ReserveDisable'),
          reserveDisableTotal?: long(name='ReserveDisableTotal'),
          reserved?: long(name='Reserved'),
          statusDisable?: boolean(name='StatusDisable'),
          statusDisableTotal?: long(name='StatusDisableTotal'),
          total?: long(name='Total'),
          type?: string(name='Type'),
          used?: long(name='Used'),
          usedRatio?: long(name='UsedRatio'),
          vlan?: string(name='Vlan'),
        }
      ](name='Ipv6s'),
      ispTypes?: [ string ](name='IspTypes'),
      memory?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Memory'),
      name?: string(name='Name'),
      nvme?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Nvme'),
      ossStorage?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='OssStorage'),
      pangu?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Pangu'),
      pcfarmNum?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='PcfarmNum'),
      poc?: boolean(name='Poc'),
      provinceCode?: string(name='ProvinceCode'),
      provinceName?: string(name='ProvinceName'),
      reserveDisable?: boolean(name='ReserveDisable'),
      ssd?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Ssd'),
      statusDisable?: boolean(name='StatusDisable'),
      type?: string(name='Type'),
      uuid?: string(name='Uuid'),
      virtual?: string(name='Virtual'),
    }
  ](name='Data'),
  desc?: string(name='Desc'),
  msg?: string(name='Msg'),
  pager?: {
    page?: long(name='Page'),
    size?: long(name='Size'),
    total?: long(name='Total'),
  }(name='Pager'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionResourceResponseBody(name='body'),
}

/**
 * @summary 获取区域节点资源量信息
 *
 * @param request DescribeRegionResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRegionResourceResponse
 */
async function describeRegionResourceWithOptions(request: DescribeRegionResourceRequest, runtime: Util.RuntimeOptions): DescribeRegionResourceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegionResource',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取区域节点资源量信息
 *
 * @param request DescribeRegionResourceRequest
 * @return DescribeRegionResourceResponse
 */
async function describeRegionResource(request: DescribeRegionResourceRequest): DescribeRegionResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionResourceWithOptions(request, runtime);
}

model DescribeReservedResourceResponseBody = {
  code?: int32(name='Code', description='The returned service code. 0 indicates that the request was successful.', example='0'),
  images?: {
    image?: [ 
    {
      imageId?: string(name='ImageId', description='The ID of the image.', example='centos_6_08_64_20G_alibase_****'),
      imageName?: string(name='ImageName', description='The name of the image.', example='centos_6_08_64_20G_alibase_****'),
    }
  ](name='Image')
  }(name='Images', description='The information about the image.'),
  requestId?: string(name='RequestId', description='The request ID.', example='6666C5A5-75ED-422E-A022-7121FA18C968'),
  supportResources?: {
    supportResource?: [ 
    {
      dataDiskSizes?: {
        dataDiskSize?: [ string ](name='DataDiskSize')
      }(name='DataDiskSizes', description='The sizes of data disks.'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the node.', example='cn-beijing-cmcc'),
      instanceSpec?: string(name='InstanceSpec', description='The specifications of instances.', example='ens.sn1.stiny'),
      supportResourcesCount?: string(name='SupportResourcesCount', description='The number of resources that you can purchase.', example='9'),
      systemDiskSizes?: {
        systemDiskSize?: [ string ](name='SystemDiskSize')
      }(name='SystemDiskSizes', description='The sizes of system disks.'),
    }
  ](name='SupportResource')
  }(name='SupportResources', description='The resources.'),
}

model DescribeReservedResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeReservedResourceResponseBody(name='body'),
}

/**
 * @summary Queries the specifications of resources that you can purchase.
 *
 * @param request DescribeReservedResourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeReservedResourceResponse
 */
async function describeReservedResourceWithOptions(runtime: Util.RuntimeOptions): DescribeReservedResourceResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeReservedResource',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the specifications of resources that you can purchase.
 *
 * @return DescribeReservedResourceResponse
 */
async function describeReservedResource(): DescribeReservedResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeReservedResourceWithOptions(runtime);
}

model DescribeResourceTimelineRequest {
  beginTime?: string(name='BeginTime'),
  endTime?: string(name='EndTime'),
  uuid?: string(name='Uuid'),
}

model DescribeResourceTimelineResponseBody = {
  availableEvents?: [ 
    {
      name?: string(name='Name'),
      occurrenceTime?: string(name='OccurrenceTime'),
      reason?: string(name='Reason'),
      type?: string(name='Type'),
    }
  ](name='AvailableEvents'),
  bizEvents?: [ 
    {
      name?: string(name='Name'),
      occurrenceTime?: string(name='OccurrenceTime'),
      reason?: string(name='Reason'),
      type?: string(name='Type'),
    }
  ](name='BizEvents'),
  desc?: string(name='Desc'),
  inventoryEvents?: [ 
    {
      name?: string(name='Name'),
      occurrenceTime?: string(name='OccurrenceTime'),
      reason?: string(name='Reason'),
      type?: string(name='Type'),
    }
  ](name='InventoryEvents'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  reserveEvents?: [ 
    {
      name?: string(name='Name'),
      occurrenceTime?: string(name='OccurrenceTime'),
      reason?: string(name='Reason'),
      type?: string(name='Type'),
    }
  ](name='ReserveEvents'),
}

model DescribeResourceTimelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeResourceTimelineResponseBody(name='body'),
}

/**
 * @summary 获取资源状态变化时间线
 *
 * @param request DescribeResourceTimelineRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeResourceTimelineResponse
 */
async function describeResourceTimelineWithOptions(request: DescribeResourceTimelineRequest, runtime: Util.RuntimeOptions): DescribeResourceTimelineResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourceTimeline',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取资源状态变化时间线
 *
 * @param request DescribeResourceTimelineRequest
 * @return DescribeResourceTimelineResponse
 */
async function describeResourceTimeline(request: DescribeResourceTimelineRequest): DescribeResourceTimelineResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceTimelineWithOptions(request, runtime);
}

model DescribeSDGRequest {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.

Default value: 10', example='10'),
  SDGIds?: [ string ](name='SDGIds', description='The IDs of SDGs that you want to query. By default, all SDGs are queried.'),
}

model DescribeSDGShrinkRequest {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.

Default value: 10', example='10'),
  SDGIdsShrink?: string(name='SDGIds', description='The IDs of SDGs that you want to query. By default, all SDGs are queried.'),
}

model DescribeSDGResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='F3B261DD-3858-4D3C-877D-303ADF374600'),
  SDGs?: [ 
    {
      avaliableRegionIds?: [ 
        {
          creationTime?: string(name='CreationTime', description='The time when the SDG was created on the node.', example='2023-02-27 15:13:26'),
          regionId?: string(name='RegionId', description='The ID of the node.', example='cn-hangzhou-26'),
          snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='sp-517qu0tgznrg622he7nf4wd7n'),
          status?: string(name='Status', description='The status of the SDG on the node. Valid values:

*   **sdg_making**
*   **sdg_saving**
*   **sdg_copying**
*   **failed**
*   **success**', example='success'),
        }
      ](name='AvaliableRegionIds', description='SDGs that have snapshots.'),
      creationInstanceId?: string(name='CreationInstanceId', description='The ID of the instance on which the SDG is created.', example='aic-5x20dyeos****'),
      creationRegionId?: string(name='CreationRegionId', description='The ID of the node on which the SDG is created.', example='cn-hangzhou-26'),
      creationTime?: string(name='CreationTime', description='The time when the first SDG in the node was created.', example='2023-02-27 15:07:21'),
      description?: string(name='Description', description='The description of the SDG.', example='Testing SDGs'),
      parentSDGId?: string(name='ParentSDGId', description='The ID of the source SDG from which you want to create an SDG. The value of this parameter is the value of the **FromSDGId** parameter that you need to specify when you call the [CreateSDG](https://help.aliyun.com/document_detail/608128.html) operation.', example='sdg-xxxxx'),
      preloadInfos?: [ 
        {
          creationTime?: string(name='CreationTime', description='The time when the SDG was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2023-02-16T06:18:40Z'),
          namespace?: string(name='Namespace', description='The namespace.', example='test-20000'),
          redundantNum?: int32(name='RedundantNum', description='The number of redundant replicas to quickly respond to shared mounts.', example='2'),
          regionId?: string(name='RegionId', description='The ID of the node.', example='cn-hangzhou'),
          updateTime?: string(name='UpdateTime', description='The time when the status was last updated.', example='2021-01-22T08:17Z'),
        }
      ](name='PreloadInfos', description='The preload information.'),
      SDGId?: string(name='SDGId', description='The ID of the SDG.', example='sdg-30e1fdba7196bc****'),
      size?: long(name='Size', description='The size of the SDG. Unit: GB.', example='20'),
      status?: string(name='Status', description='The status of the SDG creation. Valid values:

*   **sdg_making**
*   **sdg_saving**
*   **failed**
*   **success**', example='success'),
      updateTime?: string(name='UpdateTime', description='The time when the SDG was last updated.', example='2023-02-27 16:04:39'),
    }
  ](name='SDGs', description='The information about the SDGs.'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='49'),
}

model DescribeSDGResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSDGResponseBody(name='body'),
}

/**
 * @summary Queries basic information about shared data groups (SDGs), including node preload information.
 *
 * @param tmpReq DescribeSDGRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSDGResponse
 */
async function describeSDGWithOptions(tmpReq: DescribeSDGRequest, runtime: Util.RuntimeOptions): DescribeSDGResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeSDGShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.SDGIds)) {
    request.SDGIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.SDGIds, 'SDGIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.SDGIdsShrink)) {
    query['SDGIds'] = request.SDGIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSDG',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries basic information about shared data groups (SDGs), including node preload information.
 *
 * @param request DescribeSDGRequest
 * @return DescribeSDGResponse
 */
async function describeSDG(request: DescribeSDGRequest): DescribeSDGResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSDGWithOptions(request, runtime);
}

model DescribeSDGDeploymentStatusRequest {
  deploymentType?: string(name='DeploymentType', description='The deployment type.', example='shared'),
  instanceIds?: [ string ](name='InstanceIds', description='IDs of Android in Container (AIC) instances.'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page **1**. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='10'),
  regionIds?: [ string ](name='RegionIds', description='The IDs of the nodes.'),
  SDGId?: string(name='SDGId', description='The ID of the SDG.

This parameter is required.', example='sdg-xxxx'),
  status?: string(name='Status', description='The deployment status of the SDG.', example='success'),
}

model DescribeSDGDeploymentStatusShrinkRequest {
  deploymentType?: string(name='DeploymentType', description='The deployment type.', example='shared'),
  instanceIdsShrink?: string(name='InstanceIds', description='IDs of Android in Container (AIC) instances.'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page **1**. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='10'),
  regionIdsShrink?: string(name='RegionIds', description='The IDs of the nodes.'),
  SDGId?: string(name='SDGId', description='The ID of the SDG.

This parameter is required.', example='sdg-xxxx'),
  status?: string(name='Status', description='The deployment status of the SDG.', example='success'),
}

model DescribeSDGDeploymentStatusResponseBody = {
  deploymentStatus?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the AIC instance.', example='aic-xxxx'),
      mountType?: string(name='MountType', description='The deployment type.

Valid values:

*   overlay: read/write splitting.
*   common: common deployment.', example='overlay'),
      phase?: string(name='Phase', description='The deployment phase of the SDG.', example='attach'),
      regionId?: string(name='RegionId', description='The ID of the edge node.', example='cn-hangzhou'),
      status?: string(name='Status', description='The deployment status of the SDG.

Valid values:

*   sdg_deploying
*   success
*   failed', example='success'),
      updateTime?: string(name='UpdateTime', description='The time when the status was last updated.', example='2023-02-17T02:44:31Z'),
    }
  ](name='DeploymentStatus', description='The list of SDG deployment information.'),
  pageNumber?: long(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='68B85217-03B8-5141-9216-EA4D7C496B9A'),
  totalCount?: long(name='TotalCount', description='The total number of queried deployment records.', example='100'),
}

model DescribeSDGDeploymentStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSDGDeploymentStatusResponseBody(name='body'),
}

/**
 * @summary Queries the deployment status of the shared data group (SDG).
 *
 * @param tmpReq DescribeSDGDeploymentStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSDGDeploymentStatusResponse
 */
async function describeSDGDeploymentStatusWithOptions(tmpReq: DescribeSDGDeploymentStatusRequest, runtime: Util.RuntimeOptions): DescribeSDGDeploymentStatusResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeSDGDeploymentStatusShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'json');
  }
  if (!Util.isUnset(tmpReq.regionIds)) {
    request.regionIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.regionIds, 'RegionIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.deploymentType)) {
    query['DeploymentType'] = request.deploymentType;
  }
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['InstanceIds'] = request.instanceIdsShrink;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionIdsShrink)) {
    query['RegionIds'] = request.regionIdsShrink;
  }
  if (!Util.isUnset(request.SDGId)) {
    query['SDGId'] = request.SDGId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSDGDeploymentStatus',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the deployment status of the shared data group (SDG).
 *
 * @param request DescribeSDGDeploymentStatusRequest
 * @return DescribeSDGDeploymentStatusResponse
 */
async function describeSDGDeploymentStatus(request: DescribeSDGDeploymentStatusRequest): DescribeSDGDeploymentStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSDGDeploymentStatusWithOptions(request, runtime);
}

model DescribeSDGsRequest {
  instanceIds?: [ string ](name='InstanceIds', description='The AIC instance ID to be queried.'),
  SDGIds?: [ string ](name='SDGIds', description='The IDs of SDGs that you want to query. By default, all SDGs are queried.'),
}

model DescribeSDGsShrinkRequest {
  instanceIdsShrink?: string(name='InstanceIds', description='The AIC instance ID to be queried.'),
  SDGIdsShrink?: string(name='SDGIds', description='The IDs of SDGs that you want to query. By default, all SDGs are queried.'),
}

model DescribeSDGsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='3703C4AC-9396-458C-8F25-1D701334D309'),
  SDGs?: [ 
    {
      avaliableRegionIds?: [ 
        {
          creationTime?: string(name='CreationTime', description='The time when the SDG was created on the node.', example='2023-02-27 15:13:26'),
          regionId?: string(name='RegionId', description='The ID of the edge node.', example='cn-hangzhou-26'),
          snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='mock-clone_snapshot_id'),
          status?: string(name='Status', description='The status of the SDG on the node. Valid values:

*   **sdg_making**
*   **sdg_saving**
*   **sdg_copying**
*   **failed**
*   **success**', example='success'),
        }
      ](name='AvaliableRegionIds', description='The IDs of available edge nodes.'),
      creationInstanceId?: string(name='CreationInstanceId', description='The ID of the instance on which the SDG is created.', example='aic-5x20dyeos****'),
      creationRegionId?: string(name='CreationRegionId', description='The ID of the node on which the SDG is created.', example='cn-hangzhou-26'),
      creationTime?: string(name='CreationTime', description='The time when the SDG was first created.', example='2023-02-27 15:07:21'),
      deployedInstanceIds?: [ 
        {
          creationTime?: string(name='CreationTime', description='The time when the SDG was deployed on the instance.', example='2023-02-27 16:48:43'),
          deploymentType?: string(name='DeploymentType', description='The deployment type of the SDG. Valid values:

*   common: common deployment.
*   overlay: read/write splitting deployment.', example='overlay'),
          instanceId?: string(name='InstanceId', description='The ID of the instance.', example='aic-5x20dyeos****'),
          status?: string(name='Status', description='The deployment status. Valid values:

*   **sdg_deploying**
*   **failed**
*   **success**', example='sdg_deploying'),
        }
      ](name='DeployedInstanceIds', description='The deployment information.'),
      description?: string(name='Description', description='The description of the SDG.', example='Testing SDGs'),
      parentSDGId?: string(name='ParentSDGId', description='The ID of the source SDG from which you want to create an SDG. The value of this parameter is the value of the **FromSDGId** parameter that you need to specify when you call the [CreateSDG](https://help.aliyun.com/document_detail/608128.html) operation.', example='sdg-xxxxx'),
      SDGId?: string(name='SDGId', description='The ID of the SDG.', example='sdg-30e1fdba7196bc****'),
      size?: long(name='Size', description='The size of the SDG. Unit: GB.', example='20'),
      status?: string(name='Status', description='The status of the SDG creation. Valid values:

*   **sdg_making**
*   **sdg_saving**
*   **failed**
*   **success**', example='success'),
      updateTime?: string(name='UpdateTime', description='The time when the SDG was last updated.', example='2023-02-27 16:04:39'),
    }
  ](name='SDGs', description='The information about the SDGs.'),
}

model DescribeSDGsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSDGsResponseBody(name='body'),
}

/**
 * @summary Queries information about created shared data groups (SDGs).
 *
 * @param tmpReq DescribeSDGsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSDGsResponse
 */
async function describeSDGsWithOptions(tmpReq: DescribeSDGsRequest, runtime: Util.RuntimeOptions): DescribeSDGsResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeSDGsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'json');
  }
  if (!Util.isUnset(tmpReq.SDGIds)) {
    request.SDGIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.SDGIds, 'SDGIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['InstanceIds'] = request.instanceIdsShrink;
  }
  if (!Util.isUnset(request.SDGIdsShrink)) {
    query['SDGIds'] = request.SDGIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSDGs',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries information about created shared data groups (SDGs).
 *
 * @param request DescribeSDGsRequest
 * @return DescribeSDGsResponse
 */
async function describeSDGs(request: DescribeSDGsRequest): DescribeSDGsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSDGsWithOptions(request, runtime);
}

model DescribeSecondaryPublicIpAddressesRequest {
  ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.', example='cn-hangzhou-44'),
  ensRegionIds?: [ string ](name='EnsRegionIds'),
  isp?: string(name='Isp', description='The Internet service provider. Valid values:

*   cmcc: China Mobile.
*   unicom: China Unicom.
*   telecom: China Telecom.', example='unicom'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 100. Default value: 10.', example='50'),
  secondaryPublicIpAddress?: string(name='SecondaryPublicIpAddress', description='The secondary IP address.', example='12.XXX.XXX.4'),
  secondaryPublicIpId?: string(name='SecondaryPublicIpId', description='The ID of the secondary public IP address.', example='spi-5wys0pio93c9f9ukzj2f2fwyr'),
}

model DescribeSecondaryPublicIpAddressesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number returned.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='50'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  secondaryPublicIpAddresses?: [ 
    {
      cidrMask?: int32(name='CidrMask', description='The subnet mask of the CIDR block.', example='24'),
      creationTime?: string(name='CreationTime', description='The time when the secondary public IP address was created. The time is displayed in UTC.', example='2023-07-25T09:43:49Z'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.', example='cn-beijing-15'),
      gateway?: string(name='Gateway', description='The gateway.', example='12.XXX.XXX.1'),
      ipVersion?: string(name='IpVersion', description='The version of the IP address. Valid values:

*   **ipv4**
*   **ipv6**', example='ipv4'),
      isp?: string(name='Isp', description='The Internet service provider. Valid values:

*   cmcc: China Mobile.
*   unicom: China Unicom.
*   telecom: China Telecom.', example='telecom'),
      secondaryPublicIpAddress?: string(name='SecondaryPublicIpAddress', description='The secondary public IP address.', example='12.XXX.XXX.4'),
      secondaryPublicIpId?: string(name='SecondaryPublicIpId', description='The ID of the secondary public IP address.', example='spi-5wys0pio93c9f9ukzj2f2fwyr'),
    }
  ](name='SecondaryPublicIpAddresses', description='The array of returned secondary IP addresses.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='13'),
}

model DescribeSecondaryPublicIpAddressesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSecondaryPublicIpAddressesResponseBody(name='body'),
}

/**
 * @summary Queries created secondary public IP addresses.
 *
 * @param request DescribeSecondaryPublicIpAddressesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSecondaryPublicIpAddressesResponse
 */
async function describeSecondaryPublicIpAddressesWithOptions(request: DescribeSecondaryPublicIpAddressesRequest, runtime: Util.RuntimeOptions): DescribeSecondaryPublicIpAddressesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.ensRegionIds)) {
    query['EnsRegionIds'] = request.ensRegionIds;
  }
  if (!Util.isUnset(request.isp)) {
    query['Isp'] = request.isp;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.secondaryPublicIpAddress)) {
    query['SecondaryPublicIpAddress'] = request.secondaryPublicIpAddress;
  }
  if (!Util.isUnset(request.secondaryPublicIpId)) {
    query['SecondaryPublicIpId'] = request.secondaryPublicIpId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecondaryPublicIpAddresses',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries created secondary public IP addresses.
 *
 * @param request DescribeSecondaryPublicIpAddressesRequest
 * @return DescribeSecondaryPublicIpAddressesResponse
 */
async function describeSecondaryPublicIpAddresses(request: DescribeSecondaryPublicIpAddressesRequest): DescribeSecondaryPublicIpAddressesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecondaryPublicIpAddressesWithOptions(request, runtime);
}

model DescribeSecurityGroupAttributeRequest {
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.

This parameter is required.', example='sg-bp67acfmxazb4ph***'),
}

model DescribeSecurityGroupAttributeResponseBody = {
  description?: string(name='Description', description='The description of the security group.', example='testDescription1'),
  permissions?: {
    permission?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time at which the security group rule was created. The time is displayed in UTC.', example='2018-12-12T07:28:38Z'),
      description?: string(name='Description', description='The description.', example='testDescription1'),
      destCidrIp?: string(name='DestCidrIp', description='The range of destination IP addresses for outbound access control.', example='0.0.0.0/0'),
      direction?: string(name='Direction', description='The direction in which the security group rule is applied.', example='ingress'),
      ipProtocol?: string(name='IpProtocol', description='The transport layer protocol.', example='TCP'),
      policy?: string(name='Policy', description='The policy.', example='Accept'),
      portRange?: string(name='PortRange', description='The source port range.', example='80/80'),
      priority?: int32(name='Priority', description='The priority of the rule.', example='1'),
      sourceCidrIp?: string(name='SourceCidrIp', description='The range of source IP addresses for inbound access control.', example='0.0.0.0/0'),
      sourcePortRange?: string(name='SourcePortRange', description='The source port number range for the security group.', example='22/22'),
    }
  ](name='Permission')
  }(name='Permissions', description='Details about the rules.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the destination security group.', example='sg-bp1gxw6bznjjvhu3****'),
  securityGroupName?: string(name='SecurityGroupName', description='The name of the destination security group.', example='testSecurityGroupName2'),
}

model DescribeSecurityGroupAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSecurityGroupAttributeResponseBody(name='body'),
}

/**
 * @summary Queries the rules of a security group.
 *
 * @param request DescribeSecurityGroupAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSecurityGroupAttributeResponse
 */
async function describeSecurityGroupAttributeWithOptions(request: DescribeSecurityGroupAttributeRequest, runtime: Util.RuntimeOptions): DescribeSecurityGroupAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityGroupAttribute',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the rules of a security group.
 *
 * @param request DescribeSecurityGroupAttributeRequest
 * @return DescribeSecurityGroupAttributeResponse
 */
async function describeSecurityGroupAttribute(request: DescribeSecurityGroupAttributeRequest): DescribeSecurityGroupAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityGroupAttributeWithOptions(request, runtime);
}

model DescribeSecurityGroupsRequest {
  pageNumber?: int32(name='PageNumber', description='The page number.

*   Pages start from page 1.
*   Default value: 1', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.

*   Maximum value: 50.
*   Default value: 10', example='10'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-bp67acfmxazb4ph***'),
  securityGroupName?: string(name='SecurityGroupName', description='The name of the security group.', example='DocTest'),
}

model DescribeSecurityGroupsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  securityGroups?: {
    securityGroup?: [ 
    {
      creationTime?: string(name='CreationTime', description='The creation time. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2019-11-01T06:08:46Z'),
      description?: string(name='Description', description='The description of the security group.', example='TestDescription'),
      instanceCount?: int32(name='InstanceCount', description='The number of associated instances.', example='5'),
      instanceIds?: {
        instanceId?: [ string ](name='InstanceId')
      }(name='InstanceIds', description='The list of instance IDs.'),
      networkInterfaceIds?: {
        networkInterfaceId?: [ string ](name='NetworkInterfaceId')
      }(name='NetworkInterfaceIds', description='The IDs of ENIs.'),
      securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-bp67acfmxazb4ph***'),
      securityGroupName?: string(name='SecurityGroupName', description='The name of the security group.', example='DocTest'),
    }
  ](name='SecurityGroup')
  }(name='SecurityGroups', description='Details about security groups.'),
  totalCount?: int32(name='TotalCount', description='The total number of returned pages.', example='49'),
}

model DescribeSecurityGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSecurityGroupsResponseBody(name='body'),
}

/**
 * @summary Queries details about created security groups.
 *
 * @param request DescribeSecurityGroupsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSecurityGroupsResponse
 */
async function describeSecurityGroupsWithOptions(request: DescribeSecurityGroupsRequest, runtime: Util.RuntimeOptions): DescribeSecurityGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.securityGroupName)) {
    query['SecurityGroupName'] = request.securityGroupName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityGroups',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries details about created security groups.
 *
 * @param request DescribeSecurityGroupsRequest
 * @return DescribeSecurityGroupsResponse
 */
async function describeSecurityGroups(request: DescribeSecurityGroupsRequest): DescribeSecurityGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityGroupsWithOptions(request, runtime);
}

model DescribeSelfImagesRequest {
  imageId?: string(name='ImageId', description='The ID of the image. Fuzzy search is supported.', example='centos_6_08_64_20G_a****'),
  imageName?: string(name='ImageName', description='The name of the image. Fuzzy search is supported.', example='centos_6_08_64_20G_a****'),
  pageNumber?: int32(name='PageNumber', description='The page number to return. Pages start from page **1**. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.

Default value: 10.', example='10'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='sp-5xg63dmojc1oaa3pk****'),
}

model DescribeSelfImagesResponseBody = {
  code?: int32(name='Code', description='The HTTP status code that is returned.', example='0'),
  images?: {
    image?: [ 
    {
      architecture?: string(name='Architecture', description='The image architecture. Valid values:

*   i386
*   x86_64', example='x86_64'),
      computeType?: string(name='ComputeType', description='Computing type. ens_vm/ens: x86 computing. bare_metal: x86 bare machine or x86 bare metal. arm_vm: ARM computing. arm_bare_metal: ARM bare machine or ARM bare metal. pcfarm: heterogeneous computing.', example='ens_vm'),
      creationTime?: string(name='CreationTime', description='The image creation time. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2017-12-08T12:10:03Z'),
      diskDeviceMappings?: {
        diskDeviceMapping?: [ 
        {
          format?: string(name='Format', description='The format of the image.', example='The format of the image.
raw
qcow2'),
          size?: string(name='Size', description='The size of the disk. Unit: GiB.', example='100'),
          type?: string(name='Type', description='The type of the disk. Valid values:

*   system: system disk.
*   data: data disk.', example='Data'),
          imageId?: string(name='imageId', description='The ID of image.', example='i-test'),
        }
      ](name='DiskDeviceMapping')
      }(name='DiskDeviceMappings', description='The mappings between the disk and the snapshot in the image.'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='centos_6_08_64_20G_a****'),
      imageName?: string(name='ImageName', description='The name of the image.', example='centos_6_08_64_20G_a****'),
      imageOwnerAlias?: string(name='ImageOwnerAlias', description='The source of the image. Valid values:

*   **others**: a custom image that is shared by other Alibaba Cloud accounts.
*   **self**: your own custom image.', example='system'),
      imageSize?: string(name='ImageSize', description='The size of the image. Unit: GiB.', example='20'),
      imageStorageSize?: string(name='ImageStorageSize', description='The size of the image storage.', example='400'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-5iqczfxps7csjrxeca****'),
      osVersion?: string(name='OsVersion', description='The operating system version.', example='7.2'),
      platform?: string(name='Platform', description='The platform.

*   centos
*   ubuntu
*   alios
*   debian
*   rhel
*   windows', example='centos'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-shenzhen'),
      snapshotId?: string(name='SnapshotId', description='The snapshot ID.', example='sp-5yt3bdedxzdz6t6uuw****'),
      status?: string(name='Status', description='The state of the image.

*   Creating.
*   Packing.
*   Uploading.
*   Pack_failed.
*   Upload_failed.
*   Available: Only images in the Available state can be used and operated.
*   Unavailable.
*   Copying.', example='Creating'),
    }
  ](name='Image')
  }(name='Images', description='The image information.'),
  pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page. Maximum value: 50. Default value: 10.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='A8B8EB73-B4FD-4262-8EF6-680DF39C9BA0'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeSelfImagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSelfImagesResponseBody(name='body'),
}

/**
 * @summary Queries custom images.
 *
 * @param request DescribeSelfImagesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSelfImagesResponse
 */
async function describeSelfImagesWithOptions(request: DescribeSelfImagesRequest, runtime: Util.RuntimeOptions): DescribeSelfImagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.imageName)) {
    query['ImageName'] = request.imageName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSelfImages',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries custom images.
 *
 * @param request DescribeSelfImagesRequest
 * @return DescribeSelfImagesResponse
 */
async function describeSelfImages(request: DescribeSelfImagesRequest): DescribeSelfImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSelfImagesWithOptions(request, runtime);
}

model DescribeServcieScheduleRequest {
  appId?: string(name='AppId', description='The ID of the application.

This parameter is required.', example='474bdef0-d149-4695-abfb-52912d91****'),
  podConfigName?: string(name='PodConfigName', description='This parameter does not take effect.', example='android'),
  uuid?: string(name='Uuid', description='The unique ID of the device.

This parameter is required.', example='hdm_f022bf160dc69e2d8eb421e508eb****'),
}

model DescribeServcieScheduleResponseBody = {
  index?: int32(name='Index', description='The index number of the scheduled virtual device (pod).', example='2'),
  instanceId?: string(name='InstanceId', description='The ID of the scheduled instance.', example='i-5myukg7hnpbto7m024002****'),
  instanceIp?: string(name='InstanceIp', description='The ID of the scheduled instance.', example='120.26.XX.XX'),
  instancePort?: int32(name='InstancePort', description='The start port of the scheduled instance.', example='3306'),
  podAbstractInfo?: {
    containerService?: boolean(name='ContainerService', description='The name of the container service.', example='android'),
    containerStatuses?: {
      containerStatus?: [ 
      {
        containerId?: string(name='ContainerId', description='The ID of the container.', example='container_e79_1638372147094_158091_02_000001'),
        name?: string(name='Name', description='The name of the container.', example='nginx'),
      }
    ](name='ContainerStatus')
    }(name='ContainerStatuses', description='The information about the container.'),
    name?: boolean(name='Name', description='The name of the pod.', example='gcs-prod-websocket-eip-telecom'),
    namespace?: boolean(name='Namespace', description='The name of the namespace.', example='default-aliyun'),
    resourceScope?: boolean(name='ResourceScope', description='The pod scope.', example='FDN'),
    status?: boolean(name='Status', description='The status of the pod.', example='RUNNING'),
  }(name='PodAbstractInfo', description='The summary information about the scheduled virtual device.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  requestRepeated?: boolean(name='RequestRepeated', description='Indicates whether the request is repeated.', example='false'),
  tcpPorts?: string(name='TcpPorts', description='The TCP port range of the scheduled instance or container. The value is in the ${from}-$-{to} format. Example: 80-88.', example='80-88'),
}

model DescribeServcieScheduleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServcieScheduleResponseBody(name='body'),
}

/**
 * @summary You can call the DescribeServcieSchedule to query the real-time status of the instance device or container that is being occupied by the UUID.
 *
 * @param request DescribeServcieScheduleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeServcieScheduleResponse
 */
async function describeServcieScheduleWithOptions(request: DescribeServcieScheduleRequest, runtime: Util.RuntimeOptions): DescribeServcieScheduleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.podConfigName)) {
    query['PodConfigName'] = request.podConfigName;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeServcieSchedule',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary You can call the DescribeServcieSchedule to query the real-time status of the instance device or container that is being occupied by the UUID.
 *
 * @param request DescribeServcieScheduleRequest
 * @return DescribeServcieScheduleResponse
 */
async function describeServcieSchedule(request: DescribeServcieScheduleRequest): DescribeServcieScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeServcieScheduleWithOptions(request, runtime);
}

model DescribeServerLoadBalancerListenMonitorRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query. The maximum range between StartTime and EndTime is 24 hours.

This parameter is required.', example='2024-05-16 16:00:00'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ELB instance.

This parameter is required.', example='lb-5rcvo1n1t3hykfhhjwjgqp****'),
  proto?: string(name='Proto', description='The request protocol, such as http, https, or tcp.', example='tcp'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format.

This parameter is required.', example='2024-05-16 15:00:00'),
  VPort?: string(name='VPort', description='The virtual IP address (VIP) port, such as 80, 8080, or 443.', example='80'),
}

model DescribeServerLoadBalancerListenMonitorResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='125B04C7-3D0D-4245-AF96-14E3758E3F06'),
  serverLoadBalancerMonitorData?: [ 
    {
      acc?: int32(name='Acc', description='The total number of requests.', example='20'),
      bizTime?: string(name='BizTime', description='The business time of the log. Logs are collected every minute.', example='2024-05-16 15:00:00'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the node to which the ELB instance belongs.', example='cn-fuzhou-7'),
      loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ELB instance.', example='lb-5rcvo1n1t3hykfhhjwjgqp****'),
      loadBalancerName?: string(name='LoadBalancerName', description='The name of the ELB instance.', example='esk-edge-service-lb-8377****'),
      loadBalancerSpec?: string(name='LoadBalancerSpec', description='The specification of the ELB instance.', example='elb.s2.medium'),
      proto?: string(name='Proto', description='The request protocol, such as http, https, or tcp.', example='tcp'),
      reqs2xx?: int32(name='Reqs2xx', description='The number of requests with HTTP 2xx status code returned.', example='10'),
      reqs3xx?: int32(name='Reqs3xx', description='The number of requests with HTTP 3xx status code returned.', example='0'),
      reqs4xx?: int32(name='Reqs4xx', description='The number of requests with HTTP 4xx status code returned.', example='0'),
      reqs5xx?: int32(name='Reqs5xx', description='The number of requests with HTTP 5xx status code returned.', example='10'),
      rtAvg?: int32(name='RtAvg', description='The average response time. Unit: milliseconds.', example='1037'),
      vip?: string(name='Vip', description='The VIP of the instance.', example='10.0****'),
      vni?: int32(name='Vni', description='The ID of the tunnel.', example='52497'),
      vport?: int32(name='Vport', description='The VIP port, such as 80, 8080, or 443.', example='80'),
    }
  ](name='ServerLoadBalancerMonitorData', description='The array of the monitoring data.'),
}

model DescribeServerLoadBalancerListenMonitorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServerLoadBalancerListenMonitorResponseBody(name='body'),
}

/**
 * @summary Queries the monitoring data of an edge load balancer (ELB) instance based on the listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request DescribeServerLoadBalancerListenMonitorRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeServerLoadBalancerListenMonitorResponse
 */
async function describeServerLoadBalancerListenMonitorWithOptions(request: DescribeServerLoadBalancerListenMonitorRequest, runtime: Util.RuntimeOptions): DescribeServerLoadBalancerListenMonitorResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeServerLoadBalancerListenMonitor',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the monitoring data of an edge load balancer (ELB) instance based on the listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request DescribeServerLoadBalancerListenMonitorRequest
 * @return DescribeServerLoadBalancerListenMonitorResponse
 */
async function describeServerLoadBalancerListenMonitor(request: DescribeServerLoadBalancerListenMonitorRequest): DescribeServerLoadBalancerListenMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeServerLoadBalancerListenMonitorWithOptions(request, runtime);
}

model DescribeServerLoadBalancerMonitorRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query. The maximum range between StartTime and EndTime is 24 hours.

This parameter is required.', example='2024-09-15 17:00:00'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ELB instance.

This parameter is required.', example='lb-5sc1s9zrui8lpb8u7cl4f****'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format.

This parameter is required.', example='2024-09-15 16:00:00'),
}

model DescribeServerLoadBalancerMonitorResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='AAE90880-4970-4D81-A534-A6C0F3631F74'),
  serverLoadBalancerMonitorData?: [ 
    {
      acc?: int32(name='Acc', description='The total number of requests.', example='30'),
      bizTime?: string(name='BizTime', description='The business time of the log. Logs are collected every minute.', example='2024-09-15 16:00:00'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the node to which the ELB instance belongs.', example='cn-wuxi-10'),
      loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ELB instance.', example='lb-5sc1s9zrui8lpb8u7cl4f****'),
      loadBalancerName?: string(name='LoadBalancerName', description='The name of the ELB instance.', example='esk-edge-service-lb-a34****'),
      loadBalancerSpec?: string(name='LoadBalancerSpec', description='The specification of the ELB instance.', example='elb.s2.medium'),
      reqs2xx?: int32(name='Reqs2xx', description='The number of requests with HTTP 2xx status code returned.', example='25'),
      reqs3xx?: int32(name='Reqs3xx', description='The number of requests with HTTP 3xx status code returned.', example='0'),
      reqs4xx?: int32(name='Reqs4xx', description='The number of requests with HTTP 4xx status code returned.', example='5'),
      reqs5xx?: int32(name='Reqs5xx', description='The number of requests with HTTP 5xx status code returned.', example='0'),
      rtAvg?: int32(name='RtAvg', description='The average response time. Unit: milliseconds.', example='1404'),
      vip?: string(name='Vip', description='The virtual IP address (VIP) of the instance.', example='10.0****'),
      vni?: int32(name='Vni', description='The ID of the tunnel.', example='3018'),
    }
  ](name='ServerLoadBalancerMonitorData', description='The array of the monitoring data.'),
}

model DescribeServerLoadBalancerMonitorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServerLoadBalancerMonitorResponseBody(name='body'),
}

/**
 * @summary Queries the request monitoring data of an edge load balancer (ELB) instance.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request DescribeServerLoadBalancerMonitorRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeServerLoadBalancerMonitorResponse
 */
async function describeServerLoadBalancerMonitorWithOptions(request: DescribeServerLoadBalancerMonitorRequest, runtime: Util.RuntimeOptions): DescribeServerLoadBalancerMonitorResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeServerLoadBalancerMonitor',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the request monitoring data of an edge load balancer (ELB) instance.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request DescribeServerLoadBalancerMonitorRequest
 * @return DescribeServerLoadBalancerMonitorResponse
 */
async function describeServerLoadBalancerMonitor(request: DescribeServerLoadBalancerMonitorRequest): DescribeServerLoadBalancerMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeServerLoadBalancerMonitorWithOptions(request, runtime);
}

model DescribeSnapshotsRequest {
  diskId?: string(name='DiskId', description='The ID of the disk.', example='d-bp67acfmxazb4p****'),
  ensRegionId?: string(name='EnsRegionId', description='The region ID of the disk. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/25609.html) operation to query the most recent list of regions.', example='cn-hangzhou'),
  ensRegionIds?: string(name='EnsRegionIds', description='The node information.', example='["cn-suzhou-telecom","cn-chengdu-telecom"]'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp67acfmxazb4p****'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot. The value can be a JSON array that consists of up to 100 snapshot IDs. Separate the snapshot IDs with commas (,).', example='sp-bp67acfmxazb4p****'),
  snapshotName?: string(name='SnapshotName', description='The name of the snapshot. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), and hyphens (-).', example='testSnapshotName'),
}

model DescribeSnapshotsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='9635ED2E-3103-1606-84D4-9F8E816B19F9'),
  snapshots?: [ 
    {
      creationTime?: string(name='CreationTime', description='The creation time. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2020-08-20T14:52:28Z'),
      description?: string(name='Description', description='The description of the snapshot.', example='testDescription'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.', example='cn-beijing-15'),
      size?: string(name='Size', description='The capacity of the disk. Unit: MiB.', example='40'),
      snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='s-bp67acfmxazb4p****'),
      snapshotName?: string(name='SnapshotName', description='The name of the snapshot. This parameter is returned only if a snapshot name was specified when the snapshot was created.', example='testSnapshotName'),
      sourceDiskCategory?: string(name='SourceDiskCategory', description='The type of the disk. Valid value:

*   cloud_efficiency: ultra disk
*   cloud_ssd: all-flash disk
*   local_hdd: local HDD
*   local_ssd: local SSD', example='cloud_efficiency'),
      sourceDiskId?: string(name='SourceDiskId', description='The ID of the source disk. This parameter is retained even after the source disk for which the snapshot was created is released.', example='d-bp67acfmxazb4ph****'),
      sourceDiskType?: string(name='SourceDiskType', description='The type of the disk. Valid value:

*   1: system disk
*   2: data disk', example='1'),
      sourceEnsRegionId?: string(name='SourceEnsRegionId', description='The ID of the source edge node.', example='cn-hangzhou-27'),
      sourceSnapshotId?: string(name='SourceSnapshotId', description='The ID of the source snapshot.', example='s-bpdfer893jfkdqe****'),
      status?: string(name='Status', description='The status of the snapshot. Valid value:

*   creating: The snapshot is being created.
*   Available: The snapshot is available.
*   deleting: The snapshot is being deleted.
*   error: An error occurred on the snapshot.', example='available'),
    }
  ](name='Snapshots', description='The information about the snapshots.'),
  totalCount?: int32(name='TotalCount', description='The total number of snapshots.', example='1'),
}

model DescribeSnapshotsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSnapshotsResponseBody(name='body'),
}

/**
 * @summary Queries information about snapshots.
 *
 * @param request DescribeSnapshotsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSnapshotsResponse
 */
async function describeSnapshotsWithOptions(request: DescribeSnapshotsRequest, runtime: Util.RuntimeOptions): DescribeSnapshotsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.ensRegionIds)) {
    query['EnsRegionIds'] = request.ensRegionIds;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  if (!Util.isUnset(request.snapshotName)) {
    query['SnapshotName'] = request.snapshotName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSnapshots',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries information about snapshots.
 *
 * @param request DescribeSnapshotsRequest
 * @return DescribeSnapshotsResponse
 */
async function describeSnapshots(request: DescribeSnapshotsRequest): DescribeSnapshotsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotsWithOptions(request, runtime);
}

model DescribeSnatAttributeRequest {
  snatEntryId?: string(name='SnatEntryId', description='The ID of the SNAT entry.

This parameter is required.', example='snat-5tc08qfj5ecblfdn2rqr9****'),
}

model DescribeSnatAttributeResponseBody = {
  creationTime?: string(name='CreationTime', description='The time when the entry was created. The time is displayed in UTC.', example='2020-04-26T15:38:27Z'),
  destCIDR?: string(name='DestCIDR', description='The destination CIDR block. The rule takes effect only on requests that access the destination CIDR block.', example='101.10. XX.XX/24'),
  eipAffinity?: boolean(name='EipAffinity', description='Specifies whether to enable EIP affinity. Valid values:

*   **0**: no
*   **1**: yes

**

**Description** After you enable EIP affinity, if multiple EIPs are associated with an SNAT entry, each client uses one EIP to access the Internet. If EIP affinity is disabled, each client uses a random EIP to access the Internet.', example='false'),
  idleTimeout?: int32(name='IdleTimeout', description='The timeout period. Unit: seconds.', example='10'),
  ispAffinity?: boolean(name='IspAffinity', description='Whether to enable operator affinity. Value taking:
- false:Do not open.
- true:Open.', example='true'),
  natGatewayId?: string(name='NatGatewayId', description='The ID of the Network Address Translation (NAT) gateway.', example='nat-5t7nh1cfm6kxiszlttr38****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  snatEntryId?: string(name='SnatEntryId', description='The ID of the SNAT entry.', example='snat-5tfi6f8gds82mjmlofeym****'),
  snatEntryName?: string(name='SnatEntryName', description='The name of the SNAT entry.', example='test0'),
  snatIp?: string(name='SnatIp', description='The EIP specified in the SNAT entry. Multiple EIPs are separated by commas (,).', example='120.72.XX.XX'),
  snatIps?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the IP address was created. The time is displayed in UTC.', example='2020-04-26T15:38:27Z'),
      ip?: string(name='Ip', description='The IP address.', example='203.132.XX.XX'),
      status?: string(name='Status', description='The status of the IP address.

*   Running
*   Stopping
*   Stopped
*   Starting
*   Releasing', example='Running'),
    }
  ](name='SnatIps', description='The information about the EIP specified in the SNAT entry.'),
  sourceCIDR?: string(name='SourceCIDR', description='The source CIDR block specified in the SNAT entry.', example='10.0.XX.XX/24'),
  standbySnatIp?: string(name='StandbySnatIp', description='The secondary EIP specified in the SNAT entry. Multiple secondary EIPs are separated by commas (,).', example='101.23. XX.XX'),
  standbyStatus?: string(name='StandbyStatus', description='The status of the secondary EIP.

*   Running
*   Stopping
*   Stopped
*   Starting', example='Stopped'),
  status?: string(name='Status', description='The status of the SNAT entry.

*   Pending: The SNAT entry is being created or modified.
*   Available: The SNAT entry is available.
*   Deleting: The SNAT entry is being deleted.', example='Available'),
  type?: string(name='Type', description='The type of the NAT.

*   Empty: symmetric NAT.
*   FullCone: full cone NAT.', example='FullCone'),
}

model DescribeSnatAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSnatAttributeResponseBody(name='body'),
}

/**
 * @summary Queries the details of a specific source network address translation (SNAT) entry.
 *
 * @param request DescribeSnatAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSnatAttributeResponse
 */
async function describeSnatAttributeWithOptions(request: DescribeSnatAttributeRequest, runtime: Util.RuntimeOptions): DescribeSnatAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.snatEntryId)) {
    query['SnatEntryId'] = request.snatEntryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSnatAttribute',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details of a specific source network address translation (SNAT) entry.
 *
 * @param request DescribeSnatAttributeRequest
 * @return DescribeSnatAttributeResponse
 */
async function describeSnatAttribute(request: DescribeSnatAttributeRequest): DescribeSnatAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnatAttributeWithOptions(request, runtime);
}

model DescribeSnatTableEntriesRequest {
  natGatewayId?: string(name='NatGatewayId', description='The ID of the Network Address Translation (NAT) gateway.

This parameter is required.', example='nat-5tawjw5j7sgd2deujxuk0****'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page **1**.

Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. The maximum value is **100**.

Default value: **10**.', example='10'),
  snatEntryId?: string(name='SnatEntryId', description='The ID of the SNAT entry.', example='snat-5tfjp36fsrb36zs36faj0****'),
  snatEntryName?: string(name='SnatEntryName', description='The name of the SNAT entry.', example='test0'),
  snatIp?: string(name='SnatIp', description='The elastic IP address (EIP) specified in the SNAT entry.', example='58.XXXX.XXX.29'),
  snatIps?: [ string ](name='SnatIps', description='The information about the EIP specified in the SNAT entry.'),
  sourceCIDR?: string(name='SourceCIDR', description='The source CIDR block specified in the SNAT entry.', example='10.1.0.50/32'),
}

model DescribeSnatTableEntriesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  snatTableEntries?: [ 
    {
      eipAffinity?: boolean(name='EipAffinity', description='Specifies whether to enable EIP affinity. Valid values:

*   **0**: no
*   **1**: yes

**

**Description** After you enable EIP affinity, if multiple EIPs are associated with an SNAT entry, each client uses one EIP to access the Internet. If EIP affinity is disabled, each client uses a random EIP to access the Internet.', example='false'),
      idleTimeout?: int32(name='IdleTimeout', description='The timeout period for idle connections. Valid values: **1** to **86400**. Unit: seconds.', example='900'),
      ispAffinity?: boolean(name='IspAffinity', description='Whether to enable operator affinity. Value taking:

- false:Do not open.

- true:Open.', example='true'),
      natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.', example='nat-5t7nh1cfm6kxiszlttr38****'),
      snatEntryId?: string(name='SnatEntryId', description='The ID of the SNAT entry.', example='snat-5tfjp3537mi6iokl59g5c****'),
      snatEntryName?: string(name='SnatEntryName', description='The name of the SNAT entry.', example='test0'),
      snatIp?: string(name='SnatIp', description='The EIP specified in the SNAT entry.', example='120.XXX.XXX.71'),
      sourceCIDR?: string(name='SourceCIDR', description='The source CIDR block specified in the SNAT entry.', example='10.0.0.13/32'),
      standbySnatIp?: string(name='StandbySnatIp', description='The secondary EIP. Multiple EIPs are separated by commas (,).', example='101.XXX.XXX.7'),
      standbyStatus?: string(name='StandbyStatus', description='The status of the secondary EIP. Valid values:

*   Running
*   Stopping
*   Stopped
*   Starting', example='Stopped'),
      status?: string(name='Status', description='The status of the SNAT entry. Valid values:

*   Pending: The SNAT entry is being created or modified.
*   Available: The SNAT entry is available.
*   Deleting: The SNAT entry is being deleted.', example='Available'),
    }
  ](name='SnatTableEntries', description='The details of the SNAT entries.'),
  totalCount?: int32(name='TotalCount', description='The number of SNAT entries that are returned.', example='7'),
}

model DescribeSnatTableEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSnatTableEntriesResponseBody(name='body'),
}

/**
 * @summary Queries source network address translation (SNAT) entries.
 *
 * @param request DescribeSnatTableEntriesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSnatTableEntriesResponse
 */
async function describeSnatTableEntriesWithOptions(request: DescribeSnatTableEntriesRequest, runtime: Util.RuntimeOptions): DescribeSnatTableEntriesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSnatTableEntries',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries source network address translation (SNAT) entries.
 *
 * @param request DescribeSnatTableEntriesRequest
 * @return DescribeSnatTableEntriesResponse
 */
async function describeSnatTableEntries(request: DescribeSnatTableEntriesRequest): DescribeSnatTableEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnatTableEntriesWithOptions(request, runtime);
}

model DescribeStorageGatewayRequest {
  ensRegionId?: string(name='EnsRegionId', description='The ID of the node.', example='cn-beijing-cmcc'),
  gatewayId?: string(name='GatewayId', description='The ID of the gateway.', example='sgw-****'),
  gatewayType?: string(name='GatewayType', description='The type of the gateway. Set this parameter to **1**. **1** indicates iSCSI.', example='1'),
  pageNumber?: string(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='n-***'),
}

model DescribeStorageGatewayResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.

Default value: 10.', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='6666C5A5-75ED-422E-A022-7121FA18C968'),
  storageGateways?: [ 
    {
      cidrBlock?: string(name='CidrBlock', description='The internal CIDR block.', example='192.168.2.0/24'),
      creationTime?: string(name='CreationTime', description='The time when the storage gateway was created. The time is displayed in UTC.', example='2024-05-14T03:07:47Z'),
      description?: string(name='Description', description='The description of the storage gateway.', example='testDescription'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the node.', example='cn-beijing-cmcc'),
      serviceIp?: string(name='ServiceIp', description='The IP address of the service.', example='*.*.*.*'),
      status?: string(name='Status', description='The status of the storage gateway. Valid values:

*   creating
*   available
*   deleting
*   deleted', example='available'),
      storageGatewayId?: string(name='StorageGatewayId', description='The ID of the storage gateway.', example='sgw-***'),
      storageGatewayName?: string(name='StorageGatewayName', description='The name of the storage gateway.', example='testGateway'),
      storageGatewayType?: int32(name='StorageGatewayType', description='The type of the storage gateway. Default value: 1, which indicates iSCSI.', example='1'),
      vpcId?: string(name='VpcId', description='The ID of the VPC.', example='n-***'),
    }
  ](name='StorageGateways', description='The list information.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='16'),
}

model DescribeStorageGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeStorageGatewayResponseBody(name='body'),
}

/**
 * @summary Queries storage gateways.
 *
 * @param request DescribeStorageGatewayRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeStorageGatewayResponse
 */
async function describeStorageGatewayWithOptions(request: DescribeStorageGatewayRequest, runtime: Util.RuntimeOptions): DescribeStorageGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.gatewayType)) {
    query['GatewayType'] = request.gatewayType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStorageGateway',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries storage gateways.
 *
 * @param request DescribeStorageGatewayRequest
 * @return DescribeStorageGatewayResponse
 */
async function describeStorageGateway(request: DescribeStorageGatewayRequest): DescribeStorageGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStorageGatewayWithOptions(request, runtime);
}

model DescribeStorageVolumeRequest {
  ensRegionId?: string(name='EnsRegionId', description='The ID of the node.', example='cn-shenzhen-3'),
  gatewayId?: string(name='GatewayId', description='The ID of the gateway.', example='sgw-****'),
  isEnable?: int32(name='IsEnable', description='Specifies whether to enable the volume. Valid values:

*   **1** (default): enables the volume.
*   **0**: disables the volume.', example='1'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  storageId?: string(name='StorageId', description='The ID of the storage medium.', example='d-***'),
  volumeId?: string(name='VolumeId', description='The ID of the volume.', example='sv-***'),
}

model DescribeStorageVolumeResponseBody = {
  pageNumber?: string(name='PageNumber', description='The page number. Default value: **1**.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AAE90880-4970-4D81-A534-A6C0F3631F74'),
  storageVolumes?: [ 
    {
      authProtocol?: string(name='AuthProtocol', description='The authentication protocol. The value is set to **CHAP**.', example='CHAP'),
      creationTime?: string(name='CreationTime', description='The time when the volume was created. The time is displayed in UTC.', example='2024-03-14T09:35:32Z'),
      description?: string(name='Description', description='The description of the volume.', example='testDescription'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the node.', example='cn-shenzhen-3'),
      isAuth?: int32(name='IsAuth', description='Indicates whether authentication is enabled. Valid values:

*   **1**: Authentication is enabled.
*   **0** (default): Authentication is disabled.', example='0'),
      isEnable?: int32(name='IsEnable', description='Indicates whether the volume is enabled. Valid values:

*   **1** (default): The volume is enabled.
*   **0**: The volume is disabled.', example='1'),
      status?: string(name='Status', description='The status of the volume. Valid values:

*   creating
*   available
*   deleting
*   deleted', example='available'),
      storageGatewayId?: string(name='StorageGatewayId', description='The ID of the storage gateway.', example='sgw-***'),
      storageId?: string(name='StorageId', description='The ID of the storage medium.', example='d-***'),
      storageVolumeId?: string(name='StorageVolumeId', description='The ID of the volume.', example='sv-***'),
      storageVolumeName?: string(name='StorageVolumeName', description='The name of the volume.', example='testVolumeName'),
      targetName?: string(name='TargetName', description='The destination of the volume.', example='iqn.*.*.*:*'),
    }
  ](name='StorageVolumes', description='The list of returned results.'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='15'),
}

model DescribeStorageVolumeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeStorageVolumeResponseBody(name='body'),
}

/**
 * @summary Queries volumes.
 *
 * @param request DescribeStorageVolumeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeStorageVolumeResponse
 */
async function describeStorageVolumeWithOptions(request: DescribeStorageVolumeRequest, runtime: Util.RuntimeOptions): DescribeStorageVolumeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.isEnable)) {
    query['IsEnable'] = request.isEnable;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.storageId)) {
    query['StorageId'] = request.storageId;
  }
  if (!Util.isUnset(request.volumeId)) {
    query['VolumeId'] = request.volumeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStorageVolume',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries volumes.
 *
 * @param request DescribeStorageVolumeRequest
 * @return DescribeStorageVolumeResponse
 */
async function describeStorageVolume(request: DescribeStorageVolumeRequest): DescribeStorageVolumeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStorageVolumeWithOptions(request, runtime);
}

model DescribeUserBandWidthDataRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query.

*   Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
*   If the value of the seconds place is not 00, the start time is automatically set to the next minute.

This parameter is required.', example='2019-05-21T12:22:00Z'),
  ensRegionId?: string(name='EnsRegionId', description='The ID of the node. You can specify only one node ID. By default, all nodes are queried.', example='cn-taiyuan-telecom'),
  instanceId?: string(name='InstanceId', description='The ID of the instance for which you want to query the data. You can specify only one instance ID. By default, all instances are queried.', example='i-5inkeimcipxk26yqtzm4q****'),
  isp?: string(name='Isp', description='The Internet service provider (ISP). Valid values:

*   cmcc: China Mobile
*   telecom: China Telecom
*   unicom: China Unicom
*   multiCarrier: multi-line ISP', example='cmcc'),
  period?: string(name='Period', description='The precision of the monitoring data that you want to obtain. Valid values: 300, 1200, 3600, and 14400. Default value: 300. Unit: seconds.

This parameter is required.', example='300'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.

*   Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
*   If the value of the seconds place is not 00, the start time is automatically set to the next minute.

This parameter is required.', example='2019-05-21T10:22:00Z'),
}

model DescribeUserBandWidthDataResponseBody = {
  code?: int32(name='Code', description='The returned service code. 0 indicates that the request was successful.', example='0'),
  monitorData?: {
    bandWidthMonitorData?: [ 
      {
        downBandWidth?: long(name='DownBandWidth', description='The outbound bandwidth. Unit: bit/s.', example='0'),
        internetRX?: long(name='InternetRX', description='The Internet traffic to the instance. Unit: bytes.', example='0'),
        internetTX?: long(name='InternetTX', description='The Internet traffic from the instance. Unit: bytes.', example='0'),
        timeStamp?: string(name='TimeStamp', description='The timestamp when the monitoring data was queried. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-10-12T05:45:00Z'),
        upBandWidth?: long(name='UpBandWidth', description='The inbound bandwidth. Unit: bit/s.', example='0'),
      }
    ](name='BandWidthMonitorData', description='The bandwidth data.'),
    maxDownBandWidth?: string(name='MaxDownBandWidth', description='The maximum outbound bandwidth within the queried time range. Unit: bit/s.', example='16817468'),
    maxUpBandWidth?: string(name='MaxUpBandWidth', description='The maximum inbound bandwidth within the queried time range. Unit: bit/s.', example='231008'),
  }(name='MonitorData', description='The monitoring data.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='50373E71-7710-4620-8AAB-133CCE49451C'),
}

model DescribeUserBandWidthDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUserBandWidthDataResponseBody(name='body'),
}

/**
 * @summary Queries the bandwidth that you use within a specified period of time.
 *
 * @param request DescribeUserBandWidthDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeUserBandWidthDataResponse
 */
async function describeUserBandWidthDataWithOptions(request: DescribeUserBandWidthDataRequest, runtime: Util.RuntimeOptions): DescribeUserBandWidthDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.isp)) {
    query['Isp'] = request.isp;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserBandWidthData',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the bandwidth that you use within a specified period of time.
 *
 * @param request DescribeUserBandWidthDataRequest
 * @return DescribeUserBandWidthDataResponse
 */
async function describeUserBandWidthData(request: DescribeUserBandWidthDataRequest): DescribeUserBandWidthDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserBandWidthDataWithOptions(request, runtime);
}

model DescribeVSwitchAttributesRequest {
  vSwitchId?: string(name='VSwitchId', description='This parameter is required.', example='vsw-5****'),
}

model DescribeVSwitchAttributesResponseBody = {
  availableIpAddressCount?: long(name='AvailableIpAddressCount', example='253'),
  cidrBlock?: string(name='CidrBlock', example='10.0.0.0/24'),
  createdTime?: string(name='CreatedTime', example='2019-06-01T00:00:00Z'),
  description?: string(name='Description', example='This is my vswitch.'),
  ensRegionId?: string(name='EnsRegionId', example='cn-xian-unicom'),
  haVipIds?: {
    haVipId?: [ string ](name='HaVipId')
  }(name='HaVipIds'),
  instanceIds?: {
    instanceId?: [ string ](name='InstanceId')
  }(name='InstanceIds'),
  loadBalancerIds?: {
    loadBalancerId?: [ string ](name='LoadBalancerId')
  }(name='LoadBalancerIds'),
  natGatewayIds?: {
    natGatewayId?: [ string ](name='NatGatewayId')
  }(name='NatGatewayIds'),
  networkId?: string(name='NetworkId', example='n-257gqcdfvx6n****'),
  networkInterfaceIds?: {
    networkInterfaceId?: [ string ](name='NetworkInterfaceId')
  }(name='NetworkInterfaceIds'),
  requestId?: string(name='RequestId', example='C0003****2A8'),
  status?: string(name='Status', example='Available'),
  vSwitchId?: string(name='VSwitchId', example='vsw-5****'),
  vSwitchName?: string(name='VSwitchName', example='Test-switch'),
}

model DescribeVSwitchAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVSwitchAttributesResponseBody(name='body'),
}

/**
 * @summary 调用DescribeVSwitchAttributes接口查询指定交换机的配置信息。
 *
 * @param request DescribeVSwitchAttributesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVSwitchAttributesResponse
 */
async function describeVSwitchAttributesWithOptions(request: DescribeVSwitchAttributesRequest, runtime: Util.RuntimeOptions): DescribeVSwitchAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVSwitchAttributes',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 调用DescribeVSwitchAttributes接口查询指定交换机的配置信息。
 *
 * @param request DescribeVSwitchAttributesRequest
 * @return DescribeVSwitchAttributesResponse
 */
async function describeVSwitchAttributes(request: DescribeVSwitchAttributesRequest): DescribeVSwitchAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVSwitchAttributesWithOptions(request, runtime);
}

model DescribeVSwitchesRequest {
  ensRegionId?: string(name='EnsRegionId', description='The ID of the ENS node.', example='cn-xian-unicom'),
  ensRegionIds?: [ string ](name='EnsRegionIds', description='The node information.'),
  networkId?: string(name='NetworkId', description='The ID of the VPC to which the vSwitch belongs.', example='vpc-25cdvfeq58pl****'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-5m9xhlq8oh***'),
  vSwitchIds?: [ string ](name='VSwitchIds', description='The list of vSwitches in the network.'),
  vSwitchName?: string(name='VSwitchName', description='The name of the vSwitch.', example='testVSwitchName'),
}

model DescribeVSwitchesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='2'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='3'),
  vSwitches?: {
    vSwitch?: [ 
    {
      cidrBlock?: string(name='CidrBlock', description='The IPv4 CIDR block of the vSwitch.', example='10.21.224.0/22'),
      createdTime?: string(name='CreatedTime', description='The time when the VPC was created. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2020-06-16T06:33:15Z'),
      description?: string(name='Description', description='The description of the vSwitch.', example='VSwitchDescription'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the ENS node.', example='cn-xian-unicom'),
      freeIpCount?: long(name='FreeIpCount', description='The number of available IP addresses.', example='1024'),
      networkId?: string(name='NetworkId', description='The ID of the virtual private cloud (VPC).', example='vpc-25cdvfeq58pl****'),
      status?: string(name='Status', description='The status of the vSwitch. Valid values:

*   Pending
*   Available', example='Pending'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          tagKey?: string(name='TagKey', deprecated=true),
          tagValue?: string(name='TagValue', deprecated=true),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-5m9xhlq8oh***'),
      vSwitchName?: string(name='VSwitchName', description='The name of the vSwitch.', example='testVSwitchName'),
    }
  ](name='VSwitch')
  }(name='VSwitches', description='The information about the vSwitches. For more information, see the array of vSwitches in the response examples in the JSON format.'),
}

model DescribeVSwitchesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVSwitchesResponseBody(name='body'),
}

/**
 * @summary Queries information about available vSwitches.
 *
 * @param request DescribeVSwitchesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVSwitchesResponse
 */
async function describeVSwitchesWithOptions(request: DescribeVSwitchesRequest, runtime: Util.RuntimeOptions): DescribeVSwitchesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.ensRegionIds)) {
    query['EnsRegionIds'] = request.ensRegionIds;
  }
  if (!Util.isUnset(request.networkId)) {
    query['NetworkId'] = request.networkId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vSwitchIds)) {
    query['VSwitchIds'] = request.vSwitchIds;
  }
  if (!Util.isUnset(request.vSwitchName)) {
    query['VSwitchName'] = request.vSwitchName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVSwitches',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries information about available vSwitches.
 *
 * @param request DescribeVSwitchesRequest
 * @return DescribeVSwitchesResponse
 */
async function describeVSwitches(request: DescribeVSwitchesRequest): DescribeVSwitchesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVSwitchesWithOptions(request, runtime);
}

model DetachDiskRequest {
  diskId?: string(name='DiskId', description='The ID of the disk.

This parameter is required.', example='d-5r7v69e0bejrnzger09w7****'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='i-5inkeimcipxk26yqtzm4q****'),
}

model DetachDiskResponseBody = {
  code?: int32(name='Code', description='The returned service code. 0 indicates that the request was successful.', example='0'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DetachDiskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachDiskResponseBody(name='body'),
}

/**
 * @summary Detaches a pay-as-you-go disk from an Edge Node Service (ENS) instance. You cannot call this operation to detach a disk that is created together with an instance.
 *
 * @param request DetachDiskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetachDiskResponse
 */
async function detachDiskWithOptions(request: DetachDiskRequest, runtime: Util.RuntimeOptions): DetachDiskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachDisk',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Detaches a pay-as-you-go disk from an Edge Node Service (ENS) instance. You cannot call this operation to detach a disk that is created together with an instance.
 *
 * @param request DetachDiskRequest
 * @return DetachDiskResponse
 */
async function detachDisk(request: DetachDiskRequest): DetachDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachDiskWithOptions(request, runtime);
}

model DetachInstanceSDGRequest {
  instanceIds?: [ string ](name='InstanceIds', description='The IDs of the instances.

This parameter is required.'),
  SDGId?: string(name='SDGId', description='The ID of the SDG.

This parameter is required.', example='sdg-xxxxx'),
}

model DetachInstanceSDGShrinkRequest {
  instanceIdsShrink?: string(name='InstanceIds', description='The IDs of the instances.

This parameter is required.'),
  SDGId?: string(name='SDGId', description='The ID of the SDG.

This parameter is required.', example='sdg-xxxxx'),
}

model DetachInstanceSDGResponseBody = {
  data?: {
    message?: string(name='Message', description='The response message. Success is returned for a successful request.', example='success'),
    result?: {
      failedCount?: long(name='FailedCount', description='The number of failed tasks.', example='0'),
      failedItems?: [ 
        {
          errMessage?: string(name='ErrMessage', description='The error message.', example='sdg not found'),
          instanceId?: string(name='InstanceId', description='The ID of the instance.', example='aic-xxxxx-0'),
        }
      ](name='FailedItems', description='Details about failed tasks.'),
      successCount?: string(name='SuccessCount', description='The number of successful tasks.', example='1'),
    }(name='Result', description='The execution result of the synchronization request.'),
    success?: boolean(name='Success', description='Indicates whether all tasks are successful. Valid values:

*   true: All tasks are successful.
*   false: Failed tasks exist.', example='true'),
  }(name='Data', description='The returned data object.'),
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DetachInstanceSDGResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachInstanceSDGResponseBody(name='body'),
}

/**
 * @summary Detaches a shared data group (SDG).
 *
 * @param tmpReq DetachInstanceSDGRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetachInstanceSDGResponse
 */
async function detachInstanceSDGWithOptions(tmpReq: DetachInstanceSDGRequest, runtime: Util.RuntimeOptions): DetachInstanceSDGResponse {
  Util.validateModel(tmpReq);
  var request = new DetachInstanceSDGShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['InstanceIds'] = request.instanceIdsShrink;
  }
  if (!Util.isUnset(request.SDGId)) {
    query['SDGId'] = request.SDGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachInstanceSDG',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Detaches a shared data group (SDG).
 *
 * @param request DetachInstanceSDGRequest
 * @return DetachInstanceSDGResponse
 */
async function detachInstanceSDG(request: DetachInstanceSDGRequest): DetachInstanceSDGResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachInstanceSDGWithOptions(request, runtime);
}

model DetachNetworkInterfaceRequest {
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.

This parameter is required.', example='eni-58z57orgmt6d1****'),
}

model DetachNetworkInterfaceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='BE1B8ECF-9507-4C78-B197-5DE9FED344AF'),
}

model DetachNetworkInterfaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachNetworkInterfaceResponseBody(name='body'),
}

/**
 * @summary Detach an elastic network interface (ENI) from an instance.
 *
 * @description Before you call this operation, take note of the following items:
 * *   You cannot detach a primary ENI from an instance.
 * *   The ENI must be in the InUse state.
 * *   The instances are in the Stopped state.
 * *   This operation is an asynchronous operation. After this operation is called to detach an ENI, you can check the state of the ENI to determine whether the ENI is detached.
 *
 * @param request DetachNetworkInterfaceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetachNetworkInterfaceResponse
 */
async function detachNetworkInterfaceWithOptions(request: DetachNetworkInterfaceRequest, runtime: Util.RuntimeOptions): DetachNetworkInterfaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachNetworkInterface',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Detach an elastic network interface (ENI) from an instance.
 *
 * @description Before you call this operation, take note of the following items:
 * *   You cannot detach a primary ENI from an instance.
 * *   The ENI must be in the InUse state.
 * *   The instances are in the Stopped state.
 * *   This operation is an asynchronous operation. After this operation is called to detach an ENI, you can check the state of the ENI to determine whether the ENI is detached.
 *
 * @param request DetachNetworkInterfaceRequest
 * @return DetachNetworkInterfaceResponse
 */
async function detachNetworkInterface(request: DetachNetworkInterfaceRequest): DetachNetworkInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachNetworkInterfaceWithOptions(request, runtime);
}

model DistApplicationDataRequest {
  appId?: string(name='AppId', description='The ID of the application. To obtain the application ID, call the ListApplications operation.

This parameter is required.', example='e76f8985-7965-41fc-925b-9648bb6bf650'),
  data?: string(name='Data', description='The list of data files that you want to distribute. The value must be a JSON string.

This parameter is required.', example='[{\\\\"name\\\\":\\\\"app01\\\\",        \\\\"version\\\\":\\\\"1.0\\\\",        \\\\"destPath\\\\":\\\\"/root/installed\\\\",        \\\\"decompress\\\\":true,        \\\\"targetDirName\\\\":\\\\"target01\\\\",        \\\\"fileMode\\\\":755,        \\\\"timeout\\\\":1000    },    {        \\\\"name\\\\":\\\\"app02\\\\",        \\\\"version\\\\":\\\\"1.1\\\\",        \\\\"destPath\\\\":\\\\"/tmp/test.txt\\\\",        \\\\"decompress\\\\":false    }]'),
  distStrategy?: string(name='DistStrategy', description='The canary release policy. The value must be a JSON string. You can specify multiple distribution policies. By default, all data files are distributed.', example='{\\\\"name\\\\":\\\\"ScheduleToAllByMatchExpressions\\\\",\\\\"parameters\\\\":{\\\\"match_expressions\\\\":[{\\\\"key\\\\":\\\\"region_id\\\\",\\\\"operator\\\\":\\\\"In\\\\",\\\\"values\\\\":[\\\\"cn-wuhan-telecom_unicom_cmcc-2\\\\"]}]}}'),
}

model DistApplicationDataResponseBody = {
  distInstanceIds?: {
    distInstanceId?: [ string ](name='DistInstanceId')
  }(name='DistInstanceIds', description='The list of ENS instance IDs.'),
  distInstanceTotalCount?: int32(name='DistInstanceTotalCount', description='The total number of ENS instance IDs.', example='2'),
  distResults?: {
    distResult?: [ 
    {
      name?: string(name='Name', description='The name of the data file.', example='gcs-prod-websocket-eip-unicom'),
      resultCode?: int32(name='ResultCode', description='The error code. The value is of the enumerated data type.', example='400'),
      resultDescrip?: string(name='ResultDescrip', description='The description of the distribution result.', example='Success'),
      version?: string(name='Version', description='The version number of the data file.', example='standard'),
    }
  ](name='DistResult')
  }(name='DistResults', description='The distribution result of the data file.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DistApplicationDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DistApplicationDataResponseBody(name='body'),
}

/**
 * @summary Distributes pushed data to the Edge Node Service (ENS) instances of the application. You can specify multiple canary release policies, decompress files, and restart containers.
 *
 * @param request DistApplicationDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DistApplicationDataResponse
 */
async function distApplicationDataWithOptions(request: DistApplicationDataRequest, runtime: Util.RuntimeOptions): DistApplicationDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.data)) {
    query['Data'] = request.data;
  }
  if (!Util.isUnset(request.distStrategy)) {
    query['DistStrategy'] = request.distStrategy;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DistApplicationData',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Distributes pushed data to the Edge Node Service (ENS) instances of the application. You can specify multiple canary release policies, decompress files, and restart containers.
 *
 * @param request DistApplicationDataRequest
 * @return DistApplicationDataResponse
 */
async function distApplicationData(request: DistApplicationDataRequest): DistApplicationDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return distApplicationDataWithOptions(request, runtime);
}

model ExportBillDetailDataRequest {
  endDate?: string(name='EndDate', description='The end of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2020-08-30T00:00:00Z'),
  startDate?: string(name='StartDate', description='The beginning of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2020-06-01T00:00:00Z'),
}

model ExportBillDetailDataResponseBody = {
  filePath?: string(name='FilePath', description='The download path of the exported file.', example='http://test-oss.com/image_01.jpeg'),
  requestId?: string(name='RequestId', description='The ID of the request. This parameter is a common parameter. Each request has a unique ID. You can use the ID to troubleshoot issues.', example='BEA05990-B90D-594F-8C8E-650AEEB94C5D'),
}

model ExportBillDetailDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportBillDetailDataResponseBody(name='body'),
}

/**
 * @summary Exports billing details within a specific time range.
 *
 * @param request ExportBillDetailDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExportBillDetailDataResponse
 */
async function exportBillDetailDataWithOptions(request: ExportBillDetailDataRequest, runtime: Util.RuntimeOptions): ExportBillDetailDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportBillDetailData',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Exports billing details within a specific time range.
 *
 * @param request ExportBillDetailDataRequest
 * @return ExportBillDetailDataResponse
 */
async function exportBillDetailData(request: ExportBillDetailDataRequest): ExportBillDetailDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportBillDetailDataWithOptions(request, runtime);
}

model ExportImageRequest {
  imageId?: string(name='ImageId', description='The ID of the image.

This parameter is required.', example='m-5ragaz3s74b7go8ks7jp9****'),
  OSSBucket?: string(name='OSSBucket', description='The OSS bucket to which you want to export the image.

This parameter is required.', example='whxyl****'),
  OSSPrefix?: string(name='OSSPrefix', description='The prefix of the object as which you want to store the image in the OSS bucket. The prefix must be 1 to 30 characters in length and can contain digits and letters.'),
  OSSRegionId?: string(name='OSSRegionId', description='The region ID.

This parameter is required.', example='cn-beijing'),
  roleName?: string(name='RoleName', description='The name of the Resource Access Management (RAM) role.', example='AliyunMNSLoggingRole'),
}

model ExportImageResponseBody = {
  exportedImageURL?: string(name='ExportedImageURL', description='The URL that points to the exported image.', example='http://oss.url'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='43A426AD-3F2E-5DD9-9C08-D4DBDCA48D85'),
}

model ExportImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportImageResponseBody(name='body'),
}

/**
 * @summary Exports a custom image to an Object Storage Service (OSS) bucket in the same region.
 *
 * @param request ExportImageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExportImageResponse
 */
async function exportImageWithOptions(request: ExportImageRequest, runtime: Util.RuntimeOptions): ExportImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.OSSBucket)) {
    query['OSSBucket'] = request.OSSBucket;
  }
  if (!Util.isUnset(request.OSSPrefix)) {
    query['OSSPrefix'] = request.OSSPrefix;
  }
  if (!Util.isUnset(request.OSSRegionId)) {
    query['OSSRegionId'] = request.OSSRegionId;
  }
  if (!Util.isUnset(request.roleName)) {
    query['RoleName'] = request.roleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportImage',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Exports a custom image to an Object Storage Service (OSS) bucket in the same region.
 *
 * @param request ExportImageRequest
 * @return ExportImageResponse
 */
async function exportImage(request: ExportImageRequest): ExportImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportImageWithOptions(request, runtime);
}

model ExportMeasurementDataRequest {
  endDate?: string(name='EndDate', description='The end of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2021-10-30T16:00:00Z'),
  startDate?: string(name='StartDate', description='The beginning of the time range to query. Specify the time in the yyyy-mm-ddthh:mm:ssz format. The time must be in UTC.

This parameter is required.', example='2019-06-01T00:00:00Z'),
}

model ExportMeasurementDataResponseBody = {
  filePath?: string(name='FilePath', description='The download path of the exported file.', example='http://test-oss.com/image_01.jpeg'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C0003E8B-B930-4F59-ADC0-0E209A9012A8'),
}

model ExportMeasurementDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportMeasurementDataResponseBody(name='body'),
}

/**
 * @summary Exports the metering data within a specific time range.
 *
 * @param request ExportMeasurementDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExportMeasurementDataResponse
 */
async function exportMeasurementDataWithOptions(request: ExportMeasurementDataRequest, runtime: Util.RuntimeOptions): ExportMeasurementDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportMeasurementData',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Exports the metering data within a specific time range.
 *
 * @param request ExportMeasurementDataRequest
 * @return ExportMeasurementDataResponse
 */
async function exportMeasurementData(request: ExportMeasurementDataRequest): ExportMeasurementDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportMeasurementDataWithOptions(request, runtime);
}

model GetBucketAclRequest {
  bucketName?: string(name='BucketName', description='The name of the bucket.

This parameter is required.', example='test'),
}

model GetBucketAclResponseBody = {
  bucketAcl?: string(name='BucketAcl', description='The ACL of the bucket.', example='private'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5C881388-2D4B-46F4-A96B-D4E6BD0886A2'),
}

model GetBucketAclResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBucketAclResponseBody(name='body'),
}

/**
 * @summary Queries the access control list (ACL) of a bucket.
 *
 * @param request GetBucketAclRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetBucketAclResponse
 */
async function getBucketAclWithOptions(request: GetBucketAclRequest, runtime: Util.RuntimeOptions): GetBucketAclResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetBucketAcl',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the access control list (ACL) of a bucket.
 *
 * @param request GetBucketAclRequest
 * @return GetBucketAclResponse
 */
async function getBucketAcl(request: GetBucketAclRequest): GetBucketAclResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBucketAclWithOptions(request, runtime);
}

model GetBucketInfoRequest {
  bucketName?: string(name='BucketName', description='The name of the bucket.

This parameter is required.', example='test'),
}

model GetBucketInfoResponseBody = {
  bucketInfo?: {
    bucketAcl?: string(name='BucketAcl', description='The ACL of the bucket.

*   **public-read-write**
*   **public-read**
*   **private** (default)', example='private'),
    bucketName?: string(name='BucketName', description='The name of the bucket.', example='test'),
    comment?: string(name='Comment', description='The remarks.', example='das'),
    createTime?: string(name='CreateTime', description='The time when the bucket was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-10-12T05:45:00Z'),
    logicalBucketType?: string(name='LogicalBucketType', description='Single-node storage. Set the value to sink.', example='sink'),
    modifyTime?: string(name='ModifyTime', description='The time when the bucket was modified. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-10-12T06:45:00Z'),
  }(name='BucketInfo', description='The list of bucket information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C5831388-2D4B-46F4-A96B-D4E6BD06E7521'),
}

model GetBucketInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBucketInfoResponseBody(name='body'),
}

/**
 * @summary Queries the detailed information about a bucket.
 *
 * @param request GetBucketInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetBucketInfoResponse
 */
async function getBucketInfoWithOptions(request: GetBucketInfoRequest, runtime: Util.RuntimeOptions): GetBucketInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetBucketInfo',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the detailed information about a bucket.
 *
 * @param request GetBucketInfoRequest
 * @return GetBucketInfoResponse
 */
async function getBucketInfo(request: GetBucketInfoRequest): GetBucketInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBucketInfoWithOptions(request, runtime);
}

model GetBucketLifecycleRequest {
  bucketName?: string(name='BucketName', description='The name of the bucket.

This parameter is required.', example='tese'),
  ruleId?: string(name='RuleId', description='The ID of the rule that you want to query. If this parameter is not specified, all rules are returned.', example='1'),
}

model GetBucketLifecycleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A2583E8B-B930-4F59-ADC0-0E209A90C46E'),
  rule?: [ 
    {
      expiration?: {
        createdBeforeDate?: string(name='CreatedBeforeDate', description='The expiration date.', example='yyy-MM-DDThh:mm:ssZ'),
        days?: string(name='Days', description='The validity period, in days.', example='5'),
      }(name='Expiration', description='The expiration time.'),
      ID?: string(name='ID', description='The unique ID of the rule.', example='1'),
      prefix?: string(name='Prefix', description='The prefix that is applied to the rule.', example='image'),
      status?: string(name='Status', description='The status of the rule. Valid values:

*   **Enabled**: The rule is periodically executed.
*   **Disabled**: The rule is ignored.', example='Enabled'),
    }
  ](name='Rule', description='The detailed information about the rule.'),
}

model GetBucketLifecycleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBucketLifecycleResponseBody(name='body'),
}

/**
 * @summary Queries lifecycle rules.
 *
 * @param request GetBucketLifecycleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetBucketLifecycleResponse
 */
async function getBucketLifecycleWithOptions(request: GetBucketLifecycleRequest, runtime: Util.RuntimeOptions): GetBucketLifecycleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetBucketLifecycle',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries lifecycle rules.
 *
 * @param request GetBucketLifecycleRequest
 * @return GetBucketLifecycleResponse
 */
async function getBucketLifecycle(request: GetBucketLifecycleRequest): GetBucketLifecycleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBucketLifecycleWithOptions(request, runtime);
}

model GetOssStorageAndAccByBucketsRequest {
  bucketList?: string(name='BucketList', description='The information about the bucket.', example='my-bucket'),
}

model GetOssStorageAndAccByBucketsResponseBody = {
  bucketList?: [ 
    {
      acc?: long(name='Acc', description='The number of times that the bucket is accessed.', example='1000'),
      bucket?: string(name='Bucket', description='The name of the bucket.', example='my-bucket'),
      storageUsageByte?: long(name='StorageUsageByte', description='The storage usage of the bucket. Unit: bytes.', example='1024'),
    }
  ](name='BucketList', description='The information about the bucket.'),
  requestId?: string(name='RequestId', description='The request ID.', example='112F4860-F1B2-58DD-8FC0-75F19DA1C4BF'),
}

model GetOssStorageAndAccByBucketsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOssStorageAndAccByBucketsResponseBody(name='body'),
}

/**
 * @summary Queries the storage usage in the previous billing cycle and the cumulative number of calls in this month.
 *
 * @param request GetOssStorageAndAccByBucketsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOssStorageAndAccByBucketsResponse
 */
async function getOssStorageAndAccByBucketsWithOptions(request: GetOssStorageAndAccByBucketsRequest, runtime: Util.RuntimeOptions): GetOssStorageAndAccByBucketsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOssStorageAndAccByBuckets',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the storage usage in the previous billing cycle and the cumulative number of calls in this month.
 *
 * @param request GetOssStorageAndAccByBucketsRequest
 * @return GetOssStorageAndAccByBucketsResponse
 */
async function getOssStorageAndAccByBuckets(request: GetOssStorageAndAccByBucketsRequest): GetOssStorageAndAccByBucketsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOssStorageAndAccByBucketsWithOptions(request, runtime);
}

model GetOssUsageDataRequest {
  bucket?: string(name='Bucket', description='The name of the logical Object Storage Service (OSS) bucket.', example='ens-sink-bucketzyp1656903494'),
  endTime?: string(name='EndTime', description='The end of the time range to query. The time must be in UTC. Format: 2010-01-21T09:50:23Z.

This parameter is required.', example='2022-01-12T00:00:00Z'),
  period?: string(name='Period', description='The aggregation granularity. Unit: minutes.

Default value: 5. Valid values: 5 to 1440.', example='10'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. The time must be in UTC. Format: 2010-01-21T09:50:23Z.

This parameter is required.', example='2022-01-11T00:00:00Z'),
}

model GetOssUsageDataResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='2A8CCD48-14F9-0309-B957-7B1D74A8119D'),
  usageList?: [ 
    {
      lanRxBw?: long(name='LanRxBw', description='The inbound bandwidth over the internal network. Unit: bit/s.', example='37865147'),
      lanTxBw?: long(name='LanTxBw', description='The outbound bandwidth over the internal network. Unit: bit/s.', example='22012187890'),
      point?: long(name='Point', description='The number of time points within a day.', example='144'),
      pointTs?: string(name='PointTs', description='The point in time, in UTC. Format: 2010-01-21T09:50:23Z.', example='2022-01-12T00:00:00Z'),
      storageUsageByte?: long(name='StorageUsageByte', description='The storage usage. Unit: bytes.', example='85462146217'),
      wanRxBw?: long(name='WanRxBw', description='The outbound bandwidth over the Internet. Unit: bit/s.', example='542155715'),
      wanTxBw?: long(name='WanTxBw', description='The outbound bandwidth over the Internet. Unit: bit/s.', example='547126175217'),
    }
  ](name='UsageList', description='The array of usage data.'),
}

model GetOssUsageDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOssUsageDataResponseBody(name='body'),
}

/**
 * @summary Queries the storage and bandwidth usage within a specific time range.
 *
 * @description The query and aggregation granularity of bandwidth and storage usage cannot exceed one day. Data aggregation is to collect the maximum values of usage data within a period of time.
 *
 * @param request GetOssUsageDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOssUsageDataResponse
 */
async function getOssUsageDataWithOptions(request: GetOssUsageDataRequest, runtime: Util.RuntimeOptions): GetOssUsageDataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOssUsageData',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the storage and bandwidth usage within a specific time range.
 *
 * @description The query and aggregation granularity of bandwidth and storage usage cannot exceed one day. Data aggregation is to collect the maximum values of usage data within a period of time.
 *
 * @param request GetOssUsageDataRequest
 * @return GetOssUsageDataResponse
 */
async function getOssUsageData(request: GetOssUsageDataRequest): GetOssUsageDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOssUsageDataWithOptions(request, runtime);
}

model ImportImageRequest {
  architecture?: string(name='Architecture', description='This parameter is required.', example='x86_64'),
  computeType?: string(name='ComputeType', description='This parameter is required.', example='ens_vm'),
  diskDeviceMapping?: [ 
    {
      OSSBucket?: string(name='OSSBucket', example='www-cn'),
      OSSObject?: string(name='OSSObject', example='image-bucket'),
      OSSRegion?: string(name='OSSRegion', example='cn-beijing'),
    }
  ](name='DiskDeviceMapping'),
  imageFormat?: string(name='ImageFormat', description='This parameter is required.', example='qcow2'),
  imageName?: string(name='ImageName', description='This parameter is required.'),
  OSSBucket?: string(name='OSSBucket', example='tmp-hybrid'),
  OSSObject?: string(name='OSSObject', example='image-test'),
  OSSRegion?: string(name='OSSRegion', example='cn-beijing'),
  OSType?: string(name='OSType', description='This parameter is required.', example='linux'),
  OSVersion?: string(name='OSVersion', example='6.8'),
  platform?: string(name='Platform', description='This parameter is required.', example='centos'),
  targetOSSRegionId?: string(name='TargetOSSRegionId', example='cn-beijing'),
}

model ImportImageShrinkRequest {
  architecture?: string(name='Architecture', description='This parameter is required.', example='x86_64'),
  computeType?: string(name='ComputeType', description='This parameter is required.', example='ens_vm'),
  diskDeviceMappingShrink?: string(name='DiskDeviceMapping'),
  imageFormat?: string(name='ImageFormat', description='This parameter is required.', example='qcow2'),
  imageName?: string(name='ImageName', description='This parameter is required.'),
  OSSBucket?: string(name='OSSBucket', example='tmp-hybrid'),
  OSSObject?: string(name='OSSObject', example='image-test'),
  OSSRegion?: string(name='OSSRegion', example='cn-beijing'),
  OSType?: string(name='OSType', description='This parameter is required.', example='linux'),
  OSVersion?: string(name='OSVersion', example='6.8'),
  platform?: string(name='Platform', description='This parameter is required.', example='centos'),
  targetOSSRegionId?: string(name='TargetOSSRegionId', example='cn-beijing'),
}

model ImportImageResponseBody = {
  imageId?: string(name='ImageId', example='m-5wn1dh*******b48f440ntvad'),
  requestId?: string(name='RequestId', description='Id of the request', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model ImportImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportImageResponseBody(name='body'),
}

/**
 * @summary 调用ImportImage导入一份您的镜像文件到云服务器。
 *
 * @param tmpReq ImportImageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ImportImageResponse
 */
async function importImageWithOptions(tmpReq: ImportImageRequest, runtime: Util.RuntimeOptions): ImportImageResponse {
  Util.validateModel(tmpReq);
  var request = new ImportImageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.diskDeviceMapping)) {
    request.diskDeviceMappingShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.diskDeviceMapping, 'DiskDeviceMapping', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.architecture)) {
    query['Architecture'] = request.architecture;
  }
  if (!Util.isUnset(request.computeType)) {
    query['ComputeType'] = request.computeType;
  }
  if (!Util.isUnset(request.diskDeviceMappingShrink)) {
    query['DiskDeviceMapping'] = request.diskDeviceMappingShrink;
  }
  if (!Util.isUnset(request.imageFormat)) {
    query['ImageFormat'] = request.imageFormat;
  }
  if (!Util.isUnset(request.imageName)) {
    query['ImageName'] = request.imageName;
  }
  if (!Util.isUnset(request.OSSBucket)) {
    query['OSSBucket'] = request.OSSBucket;
  }
  if (!Util.isUnset(request.OSSObject)) {
    query['OSSObject'] = request.OSSObject;
  }
  if (!Util.isUnset(request.OSSRegion)) {
    query['OSSRegion'] = request.OSSRegion;
  }
  if (!Util.isUnset(request.OSType)) {
    query['OSType'] = request.OSType;
  }
  if (!Util.isUnset(request.OSVersion)) {
    query['OSVersion'] = request.OSVersion;
  }
  if (!Util.isUnset(request.platform)) {
    query['Platform'] = request.platform;
  }
  if (!Util.isUnset(request.targetOSSRegionId)) {
    query['TargetOSSRegionId'] = request.targetOSSRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportImage',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 调用ImportImage导入一份您的镜像文件到云服务器。
 *
 * @param request ImportImageRequest
 * @return ImportImageResponse
 */
async function importImage(request: ImportImageRequest): ImportImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return importImageWithOptions(request, runtime);
}

model ImportKeyPairRequest {
  keyPairName?: string(name='KeyPairName', description='The name of the key pair. The name must conform to the following naming conventions:

*   The name must be 2 to 128 characters in length.
*   The name must start with a letter but cannot start with `http://` or `https://`.
*   The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).

You can specify the name of only one key pair.

This parameter is required.', example='TestKeyPairName'),
  publicKeyBody?: string(name='PublicKeyBody', description='The public key of the key pair. You can specify only one public key.

This parameter is required.', example='ssh-rsa AAAAB****'),
}

model ImportKeyPairResponseBody = {
  keyPairFingerPrint?: string(name='KeyPairFingerPrint', description='The fingerprint of the key pair. The message-digest algorithm 5 (MD5) is used based on the public key fingerprint format defined in RFC 4716.', example='fdaf8ff7a756ef843814fc****'),
  keyPairName?: string(name='KeyPairName', description='The name of the key pair.', example='TestKeyPairName'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ImportKeyPairResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportKeyPairResponseBody(name='body'),
}

/**
 * @summary Imports the public key of a Rivest–Shamir–Adleman (RSA)-encrypted key pair that is generated by a third-party tool.
 *
 * @description *   After the key pair is imported, ENS stores the public key. You must securely store the private key.
 * *   The key pair can be only in the ssh-rsa format.
 *
 * @param request ImportKeyPairRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ImportKeyPairResponse
 */
async function importKeyPairWithOptions(request: ImportKeyPairRequest, runtime: Util.RuntimeOptions): ImportKeyPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  if (!Util.isUnset(request.publicKeyBody)) {
    query['PublicKeyBody'] = request.publicKeyBody;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportKeyPair',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Imports the public key of a Rivest–Shamir–Adleman (RSA)-encrypted key pair that is generated by a third-party tool.
 *
 * @description *   After the key pair is imported, ENS stores the public key. You must securely store the private key.
 * *   The key pair can be only in the ssh-rsa format.
 *
 * @param request ImportKeyPairRequest
 * @return ImportKeyPairResponse
 */
async function importKeyPair(request: ImportKeyPairRequest): ImportKeyPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return importKeyPairWithOptions(request, runtime);
}

model JoinPublicIpsToEpnInstanceRequest {
  EPNInstanceId?: string(name='EPNInstanceId', description='The ID of the EPN instance.

This parameter is required.', example='epn-xxxx'),
  instanceInfos?: string(name='InstanceInfos', description='The information about the public IP address that you want to add to the EPN instance.

This parameter is required.', example='InstanceInfos=[{"PublicIpAddress":"2.230.XX.XX"},{"PublicIpAddress":"2.230.XX.XX"}]'),
}

model JoinPublicIpsToEpnInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model JoinPublicIpsToEpnInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: JoinPublicIpsToEpnInstanceResponseBody(name='body'),
}

/**
 * @summary Assigns public IP addresses to an EPN instance.
 *
 * @param request JoinPublicIpsToEpnInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return JoinPublicIpsToEpnInstanceResponse
 */
async function joinPublicIpsToEpnInstanceWithOptions(request: JoinPublicIpsToEpnInstanceRequest, runtime: Util.RuntimeOptions): JoinPublicIpsToEpnInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.EPNInstanceId)) {
    query['EPNInstanceId'] = request.EPNInstanceId;
  }
  if (!Util.isUnset(request.instanceInfos)) {
    query['InstanceInfos'] = request.instanceInfos;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'JoinPublicIpsToEpnInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Assigns public IP addresses to an EPN instance.
 *
 * @param request JoinPublicIpsToEpnInstanceRequest
 * @return JoinPublicIpsToEpnInstanceResponse
 */
async function joinPublicIpsToEpnInstance(request: JoinPublicIpsToEpnInstanceRequest): JoinPublicIpsToEpnInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return joinPublicIpsToEpnInstanceWithOptions(request, runtime);
}

model JoinSecurityGroupRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp67acfmxazb4ph***'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-58z57orgmt6d1****'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.

This parameter is required.', example='sg-bp67acfmxazb4ph***'),
}

model JoinSecurityGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model JoinSecurityGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: JoinSecurityGroupResponseBody(name='body'),
}

/**
 * @summary Adds an Edge Node Service (ENS) instance to a specified security group.
 *
 * @description Before you call this operation to add an instance to a security group, make sure that the instance is in the Stopped or Running state.
 *
 * @param request JoinSecurityGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return JoinSecurityGroupResponse
 */
async function joinSecurityGroupWithOptions(request: JoinSecurityGroupRequest, runtime: Util.RuntimeOptions): JoinSecurityGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'JoinSecurityGroup',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds an Edge Node Service (ENS) instance to a specified security group.
 *
 * @description Before you call this operation to add an instance to a security group, make sure that the instance is in the Stopped or Running state.
 *
 * @param request JoinSecurityGroupRequest
 * @return JoinSecurityGroupResponse
 */
async function joinSecurityGroup(request: JoinSecurityGroupRequest): JoinSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return joinSecurityGroupWithOptions(request, runtime);
}

model JoinVSwitchesToEpnInstanceRequest {
  EPNInstanceId?: string(name='EPNInstanceId', description='The ID of the edge network instance.

This parameter is required.', example='epn-xxxx'),
  vSwitchesInfo?: string(name='VSwitchesInfo', description='The information about the internal networking to which you want to add the edge network instance.

This parameter is required.', example='[{"VSwitchId":"vs-ixxxx"},{"VSwitchId":"vs-ixxxx"}]'),
}

model JoinVSwitchesToEpnInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model JoinVSwitchesToEpnInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: JoinVSwitchesToEpnInstanceResponseBody(name='body'),
}

/**
 * @summary For internal connections, instances that are associated with a vSwitch automatically take effect. For public connections such as intelligent acceleration, you need to manually add the instances.
 *
 * @param request JoinVSwitchesToEpnInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return JoinVSwitchesToEpnInstanceResponse
 */
async function joinVSwitchesToEpnInstanceWithOptions(request: JoinVSwitchesToEpnInstanceRequest, runtime: Util.RuntimeOptions): JoinVSwitchesToEpnInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.EPNInstanceId)) {
    query['EPNInstanceId'] = request.EPNInstanceId;
  }
  if (!Util.isUnset(request.vSwitchesInfo)) {
    query['VSwitchesInfo'] = request.vSwitchesInfo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'JoinVSwitchesToEpnInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary For internal connections, instances that are associated with a vSwitch automatically take effect. For public connections such as intelligent acceleration, you need to manually add the instances.
 *
 * @param request JoinVSwitchesToEpnInstanceRequest
 * @return JoinVSwitchesToEpnInstanceResponse
 */
async function joinVSwitchesToEpnInstance(request: JoinVSwitchesToEpnInstanceRequest): JoinVSwitchesToEpnInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return joinVSwitchesToEpnInstanceWithOptions(request, runtime);
}

model LeaveSecurityGroupRequest {
  instanceId?: string(name='InstanceId', description='The instance ID.', example='i-bp67acfmxazb4p****'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-58z57orgmt6d1****'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.

This parameter is required.', example='sg-bp67acfmxazb4p****'),
}

model LeaveSecurityGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model LeaveSecurityGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LeaveSecurityGroupResponseBody(name='body'),
}

/**
 * @summary Removes an instance from a security group.
 *
 * @description Before you remove an instance from a security group, the instance must be in the Stopped or Running state.
 *
 * @param request LeaveSecurityGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return LeaveSecurityGroupResponse
 */
async function leaveSecurityGroupWithOptions(request: LeaveSecurityGroupRequest, runtime: Util.RuntimeOptions): LeaveSecurityGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'LeaveSecurityGroup',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Removes an instance from a security group.
 *
 * @description Before you remove an instance from a security group, the instance must be in the Stopped or Running state.
 *
 * @param request LeaveSecurityGroupRequest
 * @return LeaveSecurityGroupResponse
 */
async function leaveSecurityGroup(request: LeaveSecurityGroupRequest): LeaveSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return leaveSecurityGroupWithOptions(request, runtime);
}

model ListApplicationsRequest {
  appVersions?: string(name='AppVersions', description='The version number of the application. Separate multiple version numbers with commas (,). If you want to query data of all versions of applications, specify All for this parameter. By default, only data of applications in the stable versions are queried.', example='v1,v2'),
  clusterNames?: string(name='ClusterNames', description='The name of the application cluster. Separate multiple names with commas (,). If you want to query applications of all clusters in your account, specify All for this parameter. Default value: All.', example='poc,pre'),
  level?: string(name='Level', description='The region level by which edge resources of the application are collected. The value is of the enumeration type. Valid values:

*   National: Chinese mainland
*   Big: area
*   Middle: province
*   Small: city
*   RegionId: edge node

Default value: National.', example='National'),
  maxDate?: string(name='MaxDate', description='The end of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.', example='2022-02-20'),
  minDate?: string(name='MinDate', description='The beginning of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.', example='2022-02-15'),
  outAppInfoParams?: string(name='OutAppInfoParams', description='Specifies whether to return other information about the application, such as statistics on resource instances and pods. The value must be a JSON string. By default, all information is returned.', example='{\\\\"appInfo\\\\":true,\\\\"detailStat\\\\": true, \\\\"appVersionStat\\\\": true, \\\\"districtStat\\\\":true ,\\\\"instanceStat\\\\": true, \\\\"podCountStat\\\\": true}'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. This parameter is optional if you want to return all information about the applications.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. This parameter is optional if you want to return all information about the applications.', example='10'),
}

model ListApplicationsResponseBody = {
  applications?: {
    application?: [ 
    {
      appList?: {
        app?: [ 
        {
          appId?: string(name='AppId', description='The ID of the application.', example='e76f8985-7965-41fc-925b-9648bb6bf650'),
          appInfo?: string(name='AppInfo', description='The information about the application, such as the resource specification, parameter configuration, and resources.', example='{
    "AppStatus":{
        "Phase":"RUNNING",
        "StatusDescrip":"{\\\\"status\\\\":\\\\"UPDATE_SUCCESS\\\\",\\\\"step\\\\":\\\\"DONE\\\\",\\\\"descrip\\\\":\\\\"update to version:1022 success\\\\",\\\\"start_time\\\\":\\\\"2022-03-01 16:18:22\\\\"}",
        "UpdateTime":"2022-03-01 16:18:22",
        "OrderStatus":null
    },
    "ResourceAttribute":{
        "NetSecurityInfo":null,
        "InitConfig":null,
        "InventoryType":"Ens",
        "InstanceSpec":"ens.gi6s-c12g1.large",
        "SystemDiskSize":100,
        "DataDiskSize":0,
        "BandwithOut":5000,
        "SchedulingStrategy":"Disperse",
        "ImageId":"m-5or73kzkuxytv7hh6wxr6yc5q",
        "ResourceType":"Linux",
        "AreaLevel":"National",
        "IpType":"PublicIP"
    },
    "WorkloadAttribute":[
        {
            "Name":"andorid",
            "Count":15,
            "ServiceConfig":{
                "PortsBindConfig":{
                    "NetServiceContainer":"uravi-service",
                    "Ports":[
                        {
                            "Protocol":"TCP",
                            "BindType":"Mapping",
                            "StartNodePorts":"31000-31009",
                            "ContainerPorts":"4440-4449"
                        },
                        {
                            "Protocol":"TCP",
                            "BindType":"PassThrough",
                            "StartNodePorts":"59000-59000",
                            "ContainerPorts":"59000-59000"
                        },
                        {
                            "Protocol":"UDP",
                            "BindType":"PassThrough",
                            "StartNodePorts":"40001-40010",
                            "ContainerPorts":"40001-40010"
                        }
                    ]
                },
                "ServiceContainerName":"android"
            }
        },
        {
            "Name":"coturn",
            "Count":1,
            "ServiceConfig":{
                "PortsBindConfig":{
                    "NetServiceContainer":"coturn",
                    "Ports":[
                        {
                            "Protocol":"TCP",
                            "BindType":"PassThrough",
                            "StartNodePorts":"3478-3478",
                            "ContainerPorts":"3478-3478"
                        },
                        {
                            "Protocol":"UDP",
                            "BindType":"PassThrough",
                            "StartNodePorts":"3478-3478",
                            "ContainerPorts":"3478-3478"
                        }
                    ]
                },
                "ServiceContainerName":"coturn"
            }
        },
        {
            "Name":"aic-manager",
            "Count":1,
            "ServiceConfig":null
        }
    ]
}'),
        }
      ](name='App')
      }(name='AppList', description='Details about the application.'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='ay-ads-hz-h'),
    }
  ](name='Application')
  }(name='Applications', description='Details about applications.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='50373E71-7710-4620-8AAB-133CCE49451C'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='49'),
}

model ListApplicationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApplicationsResponseBody(name='body'),
}

/**
 * @summary Queries the created applications.
 *
 * @param request ListApplicationsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListApplicationsResponse
 */
async function listApplicationsWithOptions(request: ListApplicationsRequest, runtime: Util.RuntimeOptions): ListApplicationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appVersions)) {
    query['AppVersions'] = request.appVersions;
  }
  if (!Util.isUnset(request.clusterNames)) {
    query['ClusterNames'] = request.clusterNames;
  }
  if (!Util.isUnset(request.level)) {
    query['Level'] = request.level;
  }
  if (!Util.isUnset(request.maxDate)) {
    query['MaxDate'] = request.maxDate;
  }
  if (!Util.isUnset(request.minDate)) {
    query['MinDate'] = request.minDate;
  }
  if (!Util.isUnset(request.outAppInfoParams)) {
    query['OutAppInfoParams'] = request.outAppInfoParams;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListApplications',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the created applications.
 *
 * @param request ListApplicationsRequest
 * @return ListApplicationsResponse
 */
async function listApplications(request: ListApplicationsRequest): ListApplicationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApplicationsWithOptions(request, runtime);
}

model ListBucketsRequest {
  pageNumber?: string(name='PageNumber', description='The page number. Pages start from page 1.', example='1'),
  pageSize?: string(name='PageSize', description='The maximum number of returned buckets. You can leave this parameter empty. The default value is 10. The value cannot be greater than 100.', example='5'),
  prefix?: string(name='Prefix', description='The prefix that returned bucket names must contain. If this parameter is not specified, prefix information will not be used as a filter.', example='image'),
}

model ListBucketsResponseBody = {
  bucketInfos?: [ 
    {
      bucketAcl?: string(name='BucketAcl', description='The access control list (ACL) of the bucket.

*   **public-read-write**
*   **public-read**
*   **private** (default)', example='private'),
      bucketName?: string(name='BucketName', description='The name of the bucket.', example='test'),
      comment?: string(name='Comment', description='The remarks.', example='numb'),
      createTime?: string(name='CreateTime', description='The time when the bucket was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-10-12T05:45:00Z'),
      ensRegionId?: string(name='EnsRegionId', description='The ID of the region where the node is located.', example='cn-dalian-unicom'),
      logicalBucketType?: string(name='LogicalBucketType', description='The type of the single-node storage. Set the value to sink.', example='sink'),
      modifyTime?: string(name='ModifyTime', description='The time when the bucket was modified. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-10-12T06:45:00Z'),
    }
  ](name='BucketInfos', description='The list of bucket information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='435769C7-AA6F-4DC5-B3DB-A3DC0DE7E853'),
  totalCount?: long(name='TotalCount', description='The total number of buckets that match the conditions.', example='1'),
}

model ListBucketsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBucketsResponseBody(name='body'),
}

/**
 * @summary Queries all buckets of a user.
 *
 * @param request ListBucketsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListBucketsResponse
 */
async function listBucketsWithOptions(request: ListBucketsRequest, runtime: Util.RuntimeOptions): ListBucketsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.prefix)) {
    query['Prefix'] = request.prefix;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListBuckets',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries all buckets of a user.
 *
 * @param request ListBucketsRequest
 * @return ListBucketsResponse
 */
async function listBuckets(request: ListBucketsRequest): ListBucketsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBucketsWithOptions(request, runtime);
}

model ListObjectsRequest {
  bucketName?: string(name='BucketName', description='The name of the bucket.

This parameter is required.', example='test'),
  continuationToken?: string(name='ContinuationToken', description='The token used in this list operation. If the number of objects exceeds the value of MaxKeys, the NextContinuationToken is included in the response as the token for the next list operation.', example='test1.txt'),
  encodingType?: string(name='EncodingType', description='The encoding type of the object names in the response. Only URL encoding is supported.', example='url'),
  marker?: string(name='Marker', description='The position from which the list operation starts. If this parameter is specified, objects whose names are alphabetically greater than value of Marker are returned. The Marker parameter is used to list the returned objects by page, and its value must be smaller than 1,024 bytes in length.

Even if the value specified for Marker does not exist in the list during a conditional query, the list starts from the object whose name is alphabetically greater than the value of Marker.', example='a'),
  maxKeys?: long(name='MaxKeys', description='The maximum number of objects to return. Valid values: 0 to 1000. Default value: 100.', example='100'),
  prefix?: string(name='Prefix', description='The prefix that must be included in the names of objects you want to list. If you specify a prefix to query objects, the returned object names contain the prefix.

The value of the parameter must be less than 1,000 bytes in length.', example='b'),
  startAfter?: string(name='StartAfter', description='The position from which the list operation starts. If this parameter is specified, objects whose names are alphabetically greater than the value of StartAfter are returned. The StartAfter parameter is used to list the returned objects by page, and its value must be less than 1,000 bytes in length. Even if the value specified for StartAfter does not exist in the list during a conditional query, the list starts from the object whose name is alphabetically greater than the value of StartAfter.', example='b'),
}

model ListObjectsResponseBody = {
  bucketName?: string(name='BucketName', description='The name of the bucket.', example='test'),
  commonPrefixes?: [ string ](name='CommonPrefixes', description='If the delimiter parameter is specified in the request, the response contains CommonPrefixes. Objects whose names contain the same string from the prefix to the next occurrence of the delimiter are grouped as a single result element in CommonPrefixes.'),
  contents?: [ 
    {
      ETag?: string(name='ETag', description='The entity tag (ETag). When an object is created, an ETag is created to identify the content of the object.

*   For an object that is created by calling the PutObject operation, the ETag value of the object is the MD5 hash of the object content.
*   For an object that is not created by calling the PutObject operation, the ETag value of the object is the UUID of the object content.
*   The ETag of an object can be used to check whether the object content is modified. However, we recommend that you use the MD5 hash of an object rather than the ETag value of the object to verify data integrity.', example='5B3C1A2E053D763E1B002CC607C5****'),
      key?: string(name='Key', description='The name of the object.', example='ceshi.txt1617853706546'),
      lastModified?: string(name='LastModified', description='The time when the object was last modified.', example='2021-04-08T03:48:47.488Z'),
      size?: long(name='Size', description='The size of the returned object. Unit: bytes.', example='15'),
    }
  ](name='Contents', description='The list of object metadata.'),
  continuationToken?: string(name='ContinuationToken', description='The token used in this list operation.', example='test1.txt'),
  delimiter?: string(name='Delimiter', description='The character used to group objects by name.', example='/'),
  encodingType?: string(name='EncodingType', description='The encoding type of the object names in the response.', example='N/A'),
  isTruncated?: boolean(name='IsTruncated', description='Indicates whether the listed objects are truncated. Valid values:

*   **false**
*   **true**', example='true'),
  keyCount?: long(name='KeyCount', description='The number of keys returned for this request.', example='10'),
  marker?: string(name='Marker', description='The position from which the list operation starts.', example='ceshi.txt1617853707991'),
  maxKeys?: long(name='MaxKeys', description='The maximum number of objects returned.', example='10'),
  nextContinuationToken?: string(name='NextContinuationToken', description='The token used in the next list operation.', example='CgJiYw--'),
  nextMarker?: string(name='NextMarker', description='The position from which the next list operation starts.', example='ceshi.txt1617853707991'),
  prefix?: string(name='Prefix', description='The prefix contained in the names of returned objects.', example='b'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4833C4AC-9396-458C-8F25-1D701334E560'),
}

model ListObjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListObjectsResponseBody(name='body'),
}

/**
 * @summary Queries the information about all objects in a bucket.
 *
 * @param request ListObjectsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListObjectsResponse
 */
async function listObjectsWithOptions(request: ListObjectsRequest, runtime: Util.RuntimeOptions): ListObjectsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  if (!Util.isUnset(request.continuationToken)) {
    query['ContinuationToken'] = request.continuationToken;
  }
  if (!Util.isUnset(request.encodingType)) {
    query['EncodingType'] = request.encodingType;
  }
  if (!Util.isUnset(request.marker)) {
    query['Marker'] = request.marker;
  }
  if (!Util.isUnset(request.maxKeys)) {
    query['MaxKeys'] = request.maxKeys;
  }
  if (!Util.isUnset(request.prefix)) {
    query['Prefix'] = request.prefix;
  }
  if (!Util.isUnset(request.startAfter)) {
    query['StartAfter'] = request.startAfter;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListObjects',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about all objects in a bucket.
 *
 * @param request ListObjectsRequest
 * @return ListObjectsResponse
 */
async function listObjects(request: ListObjectsRequest): ListObjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listObjectsWithOptions(request, runtime);
}

model ListProductAbilitiesResponseBody = {
  productAbilities?: [ string ](name='ProductAbilities'),
  requestId?: string(name='RequestId', example='xxxxx-75ED-422E-A022-7121FA18C968'),
}

model ListProductAbilitiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProductAbilitiesResponseBody(name='body'),
}

/**
 * @summary 获取所有产品能力
 *
 * @param request ListProductAbilitiesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProductAbilitiesResponse
 */
async function listProductAbilitiesWithOptions(runtime: Util.RuntimeOptions): ListProductAbilitiesResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListProductAbilities',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取所有产品能力
 *
 * @return ListProductAbilitiesResponse
 */
async function listProductAbilities(): ListProductAbilitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProductAbilitiesWithOptions(runtime);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', description='The token of the first page to query.', example='153ba0bbb2be03f84eb48b699f0a4123'),
  resourceId?: [ string ](name='ResourceId', description='The IDs of resources. Valid values of N: 1 to 50.'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Set the value to instance.

This parameter is required.', example='instance'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the instance. Valid values of N: **1** to **20**.

*   The key cannot start with `aliyun`, `acs:`, `http://`, or `https://`.
*   The key must be up to 64 characters in length.
*   The tag key cannot be an empty string.', example='team'),
      value?: string(name='Value', description='The value of a tag that is attached to the topics you want to query. This parameter is not required. If you configure this parameter, you must also configure the **Key** parameter.**** If you include the Key and Value parameters in a request, this operation queries only the topics that use the specified tags. If you do not include these parameters in a request, this operation queries all topics that you can access.

*   Valid values of N: 1 to 20.
*   The value of this parameter can be an empty string.
*   The tag key can be up to 128 characters in length and cannot contain http:// or https://. The tag key cannot start with acs: or aliyun.', example='tagValue'),
    }
  ](name='Tag', description='The tags.'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The token of the first page to query.', example='abcfeg368547ccdef'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C78D9B61-69D8-5655-A312-A15DA5EA5D5E'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the associated resources.', example='i-5zy93g7z1hnkdmav84joxyzgn'),
      resourceType?: string(name='ResourceType', description='The type of the resource.', example='instance'),
      tagKey?: string(name='TagKey', description='The tag key of the instance.', example='test_tag_key-2'),
      tagValue?: string(name='TagValue', description='The value of the tag.', example='CLUSTER'),
    }
  ](name='TagResources', description='The tags that are added to specified one or more resources.'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
 * @summary Queries tags that are added to Edge Node Service (ENS) instances.
 *
 * @param request ListTagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTagResourcesResponse
 */
async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries tags that are added to Edge Node Service (ENS) instances.
 *
 * @param request ListTagResourcesRequest
 * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ModifyEnsEipAddressAttributeRequest {
  allocationId?: string(name='AllocationId', description='The ID of the EIP.

This parameter is required.', example='eip-5sw5dxzgi6umq4uexxkt8wpma'),
  bandwidth?: int32(name='Bandwidth', description='The peak bandwidth of the EIP. Default value: 5. Valid values: **5** to **10000**. Unit: Mbit/s.', example='50'),
  description?: string(name='Description', description='The new description of the EIP. The description must be 2 to 256 characters in length and cannot start with http:// or https://.', example='abc'),
  name?: string(name='Name', description='The new name of the EIP. The name must be 2 to 128 characters in length and cannot start with http:// or https://.', example='test-api-modify'),
}

model ModifyEnsEipAddressAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyEnsEipAddressAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyEnsEipAddressAttributeResponseBody(name='body'),
}

/**
 * @summary Modifies the name, description, and peak bandwidth of a specified elastic IP address (EIP).
 *
 * @param request ModifyEnsEipAddressAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyEnsEipAddressAttributeResponse
 */
async function modifyEnsEipAddressAttributeWithOptions(request: ModifyEnsEipAddressAttributeRequest, runtime: Util.RuntimeOptions): ModifyEnsEipAddressAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationId)) {
    query['AllocationId'] = request.allocationId;
  }
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyEnsEipAddressAttribute',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the name, description, and peak bandwidth of a specified elastic IP address (EIP).
 *
 * @param request ModifyEnsEipAddressAttributeRequest
 * @return ModifyEnsEipAddressAttributeResponse
 */
async function modifyEnsEipAddressAttribute(request: ModifyEnsEipAddressAttributeRequest): ModifyEnsEipAddressAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyEnsEipAddressAttributeWithOptions(request, runtime);
}

model ModifyEnsRouteEntryRequest {
  description?: string(name='Description', example='test'),
  routeEntryId?: string(name='RouteEntryId', description='This parameter is required.', example='rte-5****'),
  routeEntryName?: string(name='RouteEntryName', example='test'),
}

model ModifyEnsRouteEntryResponseBody = {
  requestId?: string(name='RequestId', example='C0003E8B-B930-4F59-ADC0-0E209A9012A8'),
}

model ModifyEnsRouteEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyEnsRouteEntryResponseBody(name='body'),
}

/**
 * @summary 调用ModifyEnsRouteEntry接口修改自定义路由条目名称、描述。
 *
 * @param request ModifyEnsRouteEntryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyEnsRouteEntryResponse
 */
async function modifyEnsRouteEntryWithOptions(request: ModifyEnsRouteEntryRequest, runtime: Util.RuntimeOptions): ModifyEnsRouteEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.routeEntryId)) {
    query['RouteEntryId'] = request.routeEntryId;
  }
  if (!Util.isUnset(request.routeEntryName)) {
    query['RouteEntryName'] = request.routeEntryName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyEnsRouteEntry',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 调用ModifyEnsRouteEntry接口修改自定义路由条目名称、描述。
 *
 * @param request ModifyEnsRouteEntryRequest
 * @return ModifyEnsRouteEntryResponse
 */
async function modifyEnsRouteEntry(request: ModifyEnsRouteEntryRequest): ModifyEnsRouteEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyEnsRouteEntryWithOptions(request, runtime);
}

model ModifyEpnInstanceRequest {
  EPNInstanceId?: string(name='EPNInstanceId', description='The ID of the EPN instance.

This parameter is required.', example='epn-****'),
  EPNInstanceName?: string(name='EPNInstanceName', description='The name of the EPN instance.', example='ens_test_epn'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The maximum outbound public bandwidth. Unit: Mbit/s. Valid values: 1 Mbit/s to 100 Mbit/s.', example='10'),
  networkingModel?: string(name='NetworkingModel', description='The networking mode. Valid values:

*   **SpeedUp**: Intelligent acceleration network (Internet).
*   **Connection**: Internal network.
*   **SpeedUpAndConnection**: Intelligent acceleration network and internal network.

>  The internal network supports only **Connection** and **SpeedUpAndConnection**.', example='SpeedUp'),
}

model ModifyEpnInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyEpnInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyEpnInstanceResponseBody(name='body'),
}

/**
 * @summary Modifies an Edge Private Network (EPN) instance.
 *
 * @param request ModifyEpnInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyEpnInstanceResponse
 */
async function modifyEpnInstanceWithOptions(request: ModifyEpnInstanceRequest, runtime: Util.RuntimeOptions): ModifyEpnInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.EPNInstanceId)) {
    query['EPNInstanceId'] = request.EPNInstanceId;
  }
  if (!Util.isUnset(request.EPNInstanceName)) {
    query['EPNInstanceName'] = request.EPNInstanceName;
  }
  if (!Util.isUnset(request.internetMaxBandwidthOut)) {
    query['InternetMaxBandwidthOut'] = request.internetMaxBandwidthOut;
  }
  if (!Util.isUnset(request.networkingModel)) {
    query['NetworkingModel'] = request.networkingModel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyEpnInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies an Edge Private Network (EPN) instance.
 *
 * @param request ModifyEpnInstanceRequest
 * @return ModifyEpnInstanceResponse
 */
async function modifyEpnInstance(request: ModifyEpnInstanceRequest): ModifyEpnInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyEpnInstanceWithOptions(request, runtime);
}

model ModifyFileSystemRequest {
  description?: string(name='Description', description='The description of the file system.

This parameter is required.', example='fileSystemTest'),
  ensRegionId?: string(name='EnsRegionId', description='The ID of the edge node.

This parameter is required.', example='cn-beijing-cmcc'),
  fileSystemId?: string(name='FileSystemId', description='The ID of the file system.

This parameter is required.', example='c50f8*****'),
}

model ModifyFileSystemResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model ModifyFileSystemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyFileSystemResponseBody(name='body'),
}

/**
 * @summary Modifies the description of a NAS file system.
 *
 * @param request ModifyFileSystemRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyFileSystemResponse
 */
async function modifyFileSystemWithOptions(request: ModifyFileSystemRequest, runtime: Util.RuntimeOptions): ModifyFileSystemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyFileSystem',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the description of a NAS file system.
 *
 * @param request ModifyFileSystemRequest
 * @return ModifyFileSystemResponse
 */
async function modifyFileSystem(request: ModifyFileSystemRequest): ModifyFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyFileSystemWithOptions(request, runtime);
}

model ModifyForwardEntryRequest {
  externalIp?: string(name='ExternalIp', description='The elastic IP address (EIP) that is used to access the Internet.', example='121.XXX.XXX.28'),
  externalPort?: string(name='ExternalPort', description='The external port or port range that is used for port forwarding.

*   Valid values: 1 to 65535.
*   To specify a port range, separate the first port and the last port with a forward slash (/), such as 10/20.
*   If you set ExternalPort to a port range, you must also set InternalPort to a port range. The number of ports in the port ranges must be the same. For example, if you set ExternalPort to 10/20, you can set InternalPort to 80/90.', example='22'),
  forwardEntryId?: string(name='ForwardEntryId', description='The ID of the DNAT entry.

This parameter is required.', example='dnat-5tfjp3537mi6iokl59g5c****'),
  forwardEntryName?: string(name='ForwardEntryName', description='The name of the DNAT entry. The name must be 2 to 128 characters in length. It cannot start with `http://` or `https://`.', example='test0'),
  healthCheckPort?: int32(name='HealthCheckPort', description='The probe port. The port must be within the internal port range. By default, this parameter is left empty.', example='80'),
  internalIp?: string(name='InternalIp', description='The private IP address of the instance that uses the DNAT entry for Internet communication.', example='10.XXX.XXX.50'),
  internalPort?: string(name='InternalPort', description='The internal port or port range that is used for port forwarding.

*   Valid values: 1 to 65535.
*   To specify a port range, separate the first port and the last port with a forward slash (/), such as 10/20.', example='22'),
  ipProtocol?: string(name='IpProtocol', description='The protocol. Valid values:

*   **TCP**: forwards TCP packets.
*   **UDP**: forwards UDP packets.
*   **Any** (default): forwards all packets.', example='Any'),
}

model ModifyForwardEntryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyForwardEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyForwardEntryResponseBody(name='body'),
}

/**
 * @summary Modifies a Destination Network Address Translation (DNAT) rule.
 *
 * @param request ModifyForwardEntryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyForwardEntryResponse
 */
async function modifyForwardEntryWithOptions(request: ModifyForwardEntryRequest, runtime: Util.RuntimeOptions): ModifyForwardEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.externalIp)) {
    query['ExternalIp'] = request.externalIp;
  }
  if (!Util.isUnset(request.externalPort)) {
    query['ExternalPort'] = request.externalPort;
  }
  if (!Util.isUnset(request.forwardEntryId)) {
    query['ForwardEntryId'] = request.forwardEntryId;
  }
  if (!Util.isUnset(request.forwardEntryName)) {
    query['ForwardEntryName'] = request.forwardEntryName;
  }
  if (!Util.isUnset(request.healthCheckPort)) {
    query['HealthCheckPort'] = request.healthCheckPort;
  }
  if (!Util.isUnset(request.internalIp)) {
    query['InternalIp'] = request.internalIp;
  }
  if (!Util.isUnset(request.internalPort)) {
    query['InternalPort'] = request.internalPort;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyForwardEntry',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies a Destination Network Address Translation (DNAT) rule.
 *
 * @param request ModifyForwardEntryRequest
 * @return ModifyForwardEntryResponse
 */
async function modifyForwardEntry(request: ModifyForwardEntryRequest): ModifyForwardEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyForwardEntryWithOptions(request, runtime);
}

model ModifyHaVipAttributeRequest {
  haVipId?: string(name='HaVipId', description='The ID of the HAVIP that you want to modify.

This parameter is required.', example='havip-52y28****'),
  name?: string(name='Name', description='The name of the HAVIP. The name must be 1 to 128 characters in length and cannot start with http:// or https://.', example='test'),
}

model ModifyHaVipAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F3B261DD-3858-4D3C-877D-303ADF374600'),
}

model ModifyHaVipAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyHaVipAttributeResponseBody(name='body'),
}

/**
 * @summary Modifies the name of a high-availability virtual IP address (HAVIP).
 *
 * @param request ModifyHaVipAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyHaVipAttributeResponse
 */
async function modifyHaVipAttributeWithOptions(request: ModifyHaVipAttributeRequest, runtime: Util.RuntimeOptions): ModifyHaVipAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.haVipId)) {
    query['HaVipId'] = request.haVipId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyHaVipAttribute',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the name of a high-availability virtual IP address (HAVIP).
 *
 * @param request ModifyHaVipAttributeRequest
 * @return ModifyHaVipAttributeResponse
 */
async function modifyHaVipAttribute(request: ModifyHaVipAttributeRequest): ModifyHaVipAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyHaVipAttributeWithOptions(request, runtime);
}

model ModifyImageAttributeRequest {
  imageId?: string(name='ImageId', description='The ID of the image.

This parameter is required.', example='m-5t4xwkfkbs0uxv0kymdb6uip7'),
  imageName?: string(name='ImageName', description='The name of the image.

This parameter is required.', example='Image Name'),
}

model ModifyImageAttributeResponseBody = {
  code?: int32(name='Code', description='The service code. 0 is returned for a successful request. An error code is returned for a failed request.', example='0'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AC66B8F3-0B0A-5FB1-9EA2-DC03B2CD5B04'),
}

model ModifyImageAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyImageAttributeResponseBody(name='body'),
}

/**
 * @summary Modifies the image attributes.
 *
 * @param request ModifyImageAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyImageAttributeResponse
 */
async function modifyImageAttributeWithOptions(request: ModifyImageAttributeRequest, runtime: Util.RuntimeOptions): ModifyImageAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.imageName)) {
    query['ImageName'] = request.imageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyImageAttribute',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the image attributes.
 *
 * @param request ModifyImageAttributeRequest
 * @return ModifyImageAttributeResponse
 */
async function modifyImageAttribute(request: ModifyImageAttributeRequest): ModifyImageAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyImageAttributeWithOptions(request, runtime);
}

model ModifyImageSharePermissionRequest {
  addAccounts?: string(name='AddAccounts', description='The ID of the Alibaba Cloud account with which you want to share the image. You can specify multiple Alibaba Cloud IDs. Separate multiple IDs with commas (,).', example='1122334455**'),
  imageId?: string(name='ImageId', description='The ID of the image. You can specify only one image ID. Custom images and public images are supported.

This parameter is required.', example='m-5s7qotzavwbrnzaqh4unm****'),
  removeAccounts?: string(name='RemoveAccounts', description='The ID of the Alibaba Cloud account from which you want to unshare the image. You can specify only one Alibaba Cloud account ID.', example='113355**'),
}

model ModifyImageSharePermissionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='701B3BB9-9190-544D-90D1-328B0527380C'),
}

model ModifyImageSharePermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyImageSharePermissionResponseBody(name='body'),
}

/**
 * @summary Shares or unshares an image.
 *
 * @param request ModifyImageSharePermissionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyImageSharePermissionResponse
 */
async function modifyImageSharePermissionWithOptions(request: ModifyImageSharePermissionRequest, runtime: Util.RuntimeOptions): ModifyImageSharePermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addAccounts)) {
    query['AddAccounts'] = request.addAccounts;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.removeAccounts)) {
    query['RemoveAccounts'] = request.removeAccounts;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyImageSharePermission',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Shares or unshares an image.
 *
 * @param request ModifyImageSharePermissionRequest
 * @return ModifyImageSharePermissionResponse
 */
async function modifyImageSharePermission(request: ModifyImageSharePermissionRequest): ModifyImageSharePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyImageSharePermissionWithOptions(request, runtime);
}

model ModifyInstanceAttributeRequest {
  hostName?: string(name='HostName', description='The hostname of the Elastic Compute Service (ECS) instance. The value can be 2 to 64 characters in length. You can use periods (.) to separate the value into multiple segments. Each segment can contain letters, digits, hyphens (-), and periods. Consecutive periods or hyphens are not allowed. The name cannot start or end with a period (.) or a hyphen (-).', example='testHostName'),
  instanceId?: string(name='InstanceId', description='The ID of the instance for which you want to modify attributes. You can specify only one ID.

This parameter is required.', example='i-instanc****'),
  instanceName?: string(name='InstanceName', description='The name of the instance.

The name must be 2 to 128 characters in length. It must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).', example='i-instanceidname'),
  password?: string(name='Password', description='The password of the instance.', example='yourPassword'),
  userData?: string(name='UserData', description='The user data of the instance. User data must be encoded in Base64.

The size of your UserData cannot exceed 16 KB. We recommend that you do not pass in confidential information such as passwords and private keys in the plaintext format. If you must pass in confidential information, we recommend that you encrypt and Base64-encode the information before you pass it in. Then you can decode and decrypt the information in the same way within the instance.', example='/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgK****'),
}

model ModifyInstanceAttributeResponseBody = {
  code?: int32(name='Code', description='The returned service code. 0 indicates that the request was successful.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyInstanceAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceAttributeResponseBody(name='body'),
}

/**
 * @summary Changes the attributes of an instance, such as the name and the password.
 *
 * @description *   If an instance is in the Starting state, you cannot reset the password of the instance.
 * *   When the instance is in the Running state, you cannot change the password of the instance.
 * *   After resetting the password, you must Restart the instance in the ECS console or call the RebootInstance operation to validate the modifications. The restart operation within the instance does not validate the modifications.
 *
 * @param request ModifyInstanceAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyInstanceAttributeResponse
 */
async function modifyInstanceAttributeWithOptions(request: ModifyInstanceAttributeRequest, runtime: Util.RuntimeOptions): ModifyInstanceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.hostName)) {
    query['HostName'] = request.hostName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceAttribute',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Changes the attributes of an instance, such as the name and the password.
 *
 * @description *   If an instance is in the Starting state, you cannot reset the password of the instance.
 * *   When the instance is in the Running state, you cannot change the password of the instance.
 * *   After resetting the password, you must Restart the instance in the ECS console or call the RebootInstance operation to validate the modifications. The restart operation within the instance does not validate the modifications.
 *
 * @param request ModifyInstanceAttributeRequest
 * @return ModifyInstanceAttributeResponse
 */
async function modifyInstanceAttribute(request: ModifyInstanceAttributeRequest): ModifyInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAttributeWithOptions(request, runtime);
}

model ModifyInstanceAutoRenewAttributeRequest {
  autoRenew?: string(name='AutoRenew', description='Specifies whether to enable the auto-renewal feature. Valid values: **True and False**. Default value: False.

This parameter is required.', example='false'),
  duration?: string(name='Duration', description='The auto-renewal period of the instance. Unit: months. Valid values: 1 to 9 and 12. This parameter is required if the AutoRenew parameter is set to true.', example='12'),
  instanceIds?: string(name='InstanceIds', description='The IDs of the instances. Separate IDs with semicolons (;).

This parameter is required.', example='instance-test'),
  ownerId?: string(name='OwnerId'),
  renewalStatus?: string(name='RenewalStatus', description='Specifies whether to renew the instance. The **RenewalStatus** parameter has a higher priority than the **AutoRenew** parameter. If you do not specify **RenewalStatus**, the **AutoRenew** parameter is used by default.

*   AutoRenewal: Auto-renewal is enabled for the instance.
*   Normal: Auto-renewal is disabled for the instance.
*   NotRenewal: The instance is not renewed.

The system no longer sends an expiration notification but sends only a renewal notification three days before the instance expires. To renew the instance, you can change the value of this parameter from NotRenewal to Normal and then manually renew the instance, or change the value of this parameter from NotRenewal to AutoRenewal.', example='Normal'),
}

model ModifyInstanceAutoRenewAttributeResponseBody = {
  code?: int32(name='Code', description='The returned service code. 0 indicates that the request was successful.', example='0'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4DD66F05-3116-4BAA-B588-52EB2E7F431D'),
}

model ModifyInstanceAutoRenewAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceAutoRenewAttributeResponseBody(name='body'),
}

/**
 * @summary Configures auto-renewal for instances.
 *
 * @param request ModifyInstanceAutoRenewAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyInstanceAutoRenewAttributeResponse
 */
async function modifyInstanceAutoRenewAttributeWithOptions(request: ModifyInstanceAutoRenewAttributeRequest, runtime: Util.RuntimeOptions): ModifyInstanceAutoRenewAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.renewalStatus)) {
    query['RenewalStatus'] = request.renewalStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceAutoRenewAttribute',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Configures auto-renewal for instances.
 *
 * @param request ModifyInstanceAutoRenewAttributeRequest
 * @return ModifyInstanceAutoRenewAttributeResponse
 */
async function modifyInstanceAutoRenewAttribute(request: ModifyInstanceAutoRenewAttributeRequest): ModifyInstanceAutoRenewAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAutoRenewAttributeWithOptions(request, runtime);
}

model ModifyInstanceBootConfigurationRequest {
  bootSet?: string(name='BootSet', example='legacy'),
  bootType?: string(name='BootType', description='This parameter is required.', example='pxe'),
  diskSet?: string(name='DiskSet', example='on'),
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='i-instance****'),
}

model ModifyInstanceBootConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='6666C5A5-75ED-422E-A022-7121FA18C968'),
}

model ModifyInstanceBootConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceBootConfigurationResponseBody(name='body'),
}

/**
 * @summary 修改启动配置，只支持异构实例(PCFarm裸金属)。
 *
 * @param request ModifyInstanceBootConfigurationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyInstanceBootConfigurationResponse
 */
async function modifyInstanceBootConfigurationWithOptions(request: ModifyInstanceBootConfigurationRequest, runtime: Util.RuntimeOptions): ModifyInstanceBootConfigurationResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceBootConfiguration',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改启动配置，只支持异构实例(PCFarm裸金属)。
 *
 * @param request ModifyInstanceBootConfigurationRequest
 * @return ModifyInstanceBootConfigurationResponse
 */
async function modifyInstanceBootConfiguration(request: ModifyInstanceBootConfigurationRequest): ModifyInstanceBootConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceBootConfigurationWithOptions(request, runtime);
}

model ModifyInstanceChargeTypeRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable auto-payment when you change the billing method from pay-as-you-go to subscription. Valid values:

true: enables auto-payment. Make sure that your account has sufficient balance.

false (default): does not enable auto-payment. The order is generated but not paid.', example='false'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal when you change the billing method from pay-as-you-go to subscription. Valid values:

true: enables auto-renewal for the instance.

false', example='false'),
  includeDataDisks?: boolean(name='IncludeDataDisks', description='Specifies whether to change the billing method of all data disks that are created with the instance to subscription when you change the billing method of the instance from pay-as-you-go to subscription. Valid values:

true

false (default)', example='true'),
  instanceChargeType?: string(name='InstanceChargeType', description='The new billing method. Valid values:

PrePaid

PostPaid (default)

This parameter is required.', example='PostPaid'),
  instanceIds?: [ string ](name='InstanceIds', description='The IDs of the instances.

This parameter is required.'),
  period?: string(name='Period', description='The subscription duration. This parameter is required if you set the InstanceChargeType parameter to PrePaid. Valid values:

If the PeriodUnit parameter is set to Day, Period can only be set to 3.

If PeriodUnit is Month, Period can be set to 1 to 9 or 12.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription duration. This parameter is required if you set the InstanceChargeType parameter to PrePaid. Valid values:

Month

Day', example='Month'),
}

model ModifyInstanceChargeTypeShrinkRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable auto-payment when you change the billing method from pay-as-you-go to subscription. Valid values:

true: enables auto-payment. Make sure that your account has sufficient balance.

false (default): does not enable auto-payment. The order is generated but not paid.', example='false'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal when you change the billing method from pay-as-you-go to subscription. Valid values:

true: enables auto-renewal for the instance.

false', example='false'),
  includeDataDisks?: boolean(name='IncludeDataDisks', description='Specifies whether to change the billing method of all data disks that are created with the instance to subscription when you change the billing method of the instance from pay-as-you-go to subscription. Valid values:

true

false (default)', example='true'),
  instanceChargeType?: string(name='InstanceChargeType', description='The new billing method. Valid values:

PrePaid

PostPaid (default)

This parameter is required.', example='PostPaid'),
  instanceIdsShrink?: string(name='InstanceIds', description='The IDs of the instances.

This parameter is required.'),
  period?: string(name='Period', description='The subscription duration. This parameter is required if you set the InstanceChargeType parameter to PrePaid. Valid values:

If the PeriodUnit parameter is set to Day, Period can only be set to 3.

If PeriodUnit is Month, Period can be set to 1 to 9 or 12.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription duration. This parameter is required if you set the InstanceChargeType parameter to PrePaid. Valid values:

Month

Day', example='Month'),
}

model ModifyInstanceChargeTypeResponseBody = {
  instanceIds?: [ string ](name='InstanceIds', description='The IDs of the instances.'),
  orderId?: long(name='OrderId', description='The ID of the order.', example='21522202681****'),
  requestId?: string(name='RequestId', description='The request ID.', example='E2CE5821-7A18-5F7B-A18A-1C751B933D2A'),
}

model ModifyInstanceChargeTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceChargeTypeResponseBody(name='body'),
}

/**
 * @summary Changes the billing method of Edge Node Service (ENS) instances. You can switch between the pay-as-you-go and subscription billing methods for instances. You can also change the billing method for disks that you created with pay-as-you-go instances to subscription.
 *
 * @description Before you call this operation, make sure that you fully understand the billing methods and pricing of ENS.
 * The instances must be in the Running or Stopped state, and you have no overdue payments for them.
 *
 * @param tmpReq ModifyInstanceChargeTypeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyInstanceChargeTypeResponse
 */
async function modifyInstanceChargeTypeWithOptions(tmpReq: ModifyInstanceChargeTypeRequest, runtime: Util.RuntimeOptions): ModifyInstanceChargeTypeResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyInstanceChargeTypeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.includeDataDisks)) {
    query['IncludeDataDisks'] = request.includeDataDisks;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['InstanceIds'] = request.instanceIdsShrink;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceChargeType',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Changes the billing method of Edge Node Service (ENS) instances. You can switch between the pay-as-you-go and subscription billing methods for instances. You can also change the billing method for disks that you created with pay-as-you-go instances to subscription.
 *
 * @description Before you call this operation, make sure that you fully understand the billing methods and pricing of ENS.
 * The instances must be in the Running or Stopped state, and you have no overdue payments for them.
 *
 * @param request ModifyInstanceChargeTypeRequest
 * @return ModifyInstanceChargeTypeResponse
 */
async function modifyInstanceChargeType(request: ModifyInstanceChargeTypeRequest): ModifyInstanceChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceChargeTypeWithOptions(request, runtime);
}

model ModifyLoadBalancerAttributeRequest {
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ELB instance.

This parameter is required.', example='lb-5q73cv04zeyh43lh74lp4gtm8'),
  loadBalancerName?: string(name='LoadBalancerName', description='The name of the ELB instance. The name must be **2** to **128** characters in length.

>  The value cannot start with `http://` or `https://`.

This parameter is required.', example='test'),
}

model ModifyLoadBalancerAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyLoadBalancerAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyLoadBalancerAttributeResponseBody(name='body'),
}

/**
 * @summary Modifies the information about an Edge Load Balancer (ELB) instance.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request ModifyLoadBalancerAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyLoadBalancerAttributeResponse
 */
async function modifyLoadBalancerAttributeWithOptions(request: ModifyLoadBalancerAttributeRequest, runtime: Util.RuntimeOptions): ModifyLoadBalancerAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  if (!Util.isUnset(request.loadBalancerName)) {
    query['LoadBalancerName'] = request.loadBalancerName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyLoadBalancerAttribute',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the information about an Edge Load Balancer (ELB) instance.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request ModifyLoadBalancerAttributeRequest
 * @return ModifyLoadBalancerAttributeResponse
 */
async function modifyLoadBalancerAttribute(request: ModifyLoadBalancerAttributeRequest): ModifyLoadBalancerAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLoadBalancerAttributeWithOptions(request, runtime);
}

model ModifyNetworkAttributeRequest {
  description?: string(name='Description', description='The description of the network.

The description must be 2 to 256 characters in length. It must start with a letter but cannot start with http:// or https://.', example='this is my first network'),
  networkId?: string(name='NetworkId', description='The ID of the network.

This parameter is required.', example='n-****'),
  networkName?: string(name='NetworkName', description='The name of the network. The name must meet the following requirements:

*   The name must be 2 to 128 characters in length
*   It must start with a letter but cannot start with http:// or https://.
*   The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).', example='abc'),
}

model ModifyNetworkAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyNetworkAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNetworkAttributeResponseBody(name='body'),
}

/**
 * @summary Modifies the network information.
 *
 * @description *   You can call this operation up to 100 times per second.
 * *   You can call this operation up to 5 times per second per user.
 *
 * @param request ModifyNetworkAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyNetworkAttributeResponse
 */
async function modifyNetworkAttributeWithOptions(request: ModifyNetworkAttributeRequest, runtime: Util.RuntimeOptions): ModifyNetworkAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.networkId)) {
    query['NetworkId'] = request.networkId;
  }
  if (!Util.isUnset(request.networkName)) {
    query['NetworkName'] = request.networkName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNetworkAttribute',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the network information.
 *
 * @description *   You can call this operation up to 100 times per second.
 * *   You can call this operation up to 5 times per second per user.
 *
 * @param request ModifyNetworkAttributeRequest
 * @return ModifyNetworkAttributeResponse
 */
async function modifyNetworkAttribute(request: ModifyNetworkAttributeRequest): ModifyNetworkAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNetworkAttributeWithOptions(request, runtime);
}

model ModifyNetworkInterfaceAttributeRequest {
  description?: string(name='Description', description='The description. The description must be 1 to 256 characters in length and cannot start with http:// or https://.', example='testDescription'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.

This parameter is required.', example='eni-5f6533jbifugr5fo***'),
  networkInterfaceName?: string(name='NetworkInterfaceName', description='The name of the ENI. The name must be 1 to 128 characters in length, The name cannot start with http:// or https://.', example='test-01'),
}

model ModifyNetworkInterfaceAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyNetworkInterfaceAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNetworkInterfaceAttributeResponseBody(name='body'),
}

/**
 * @summary Modifies the attributes of an elastic network interface (ENI), such as its name and description.
 *
 * @param request ModifyNetworkInterfaceAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyNetworkInterfaceAttributeResponse
 */
async function modifyNetworkInterfaceAttributeWithOptions(request: ModifyNetworkInterfaceAttributeRequest, runtime: Util.RuntimeOptions): ModifyNetworkInterfaceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.networkInterfaceName)) {
    query['NetworkInterfaceName'] = request.networkInterfaceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNetworkInterfaceAttribute',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the attributes of an elastic network interface (ENI), such as its name and description.
 *
 * @param request ModifyNetworkInterfaceAttributeRequest
 * @return ModifyNetworkInterfaceAttributeResponse
 */
async function modifyNetworkInterfaceAttribute(request: ModifyNetworkInterfaceAttributeRequest): ModifyNetworkInterfaceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNetworkInterfaceAttributeWithOptions(request, runtime);
}

model ModifyPrepayInstanceSpecRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance that you want to upgrade or downgrade.', example='i-bp67acfmxazb4p****'),
  instanceType?: string(name='InstanceType', description='The updated configuration.', example='ens.sn1.tiny'),
}

model ModifyPrepayInstanceSpecResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='FD94C8E8-128E-525C-A0C3-60E063B70330'),
}

model ModifyPrepayInstanceSpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPrepayInstanceSpecResponseBody(name='body'),
}

/**
 * @summary Upgrades or downgrades the instance type of a subscription Edge Node Service (ENS) instance. The new instance type takes effect for the remaining lifecycle of the instance.
 *
 * @param request ModifyPrepayInstanceSpecRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyPrepayInstanceSpecResponse
 */
async function modifyPrepayInstanceSpecWithOptions(request: ModifyPrepayInstanceSpecRequest, runtime: Util.RuntimeOptions): ModifyPrepayInstanceSpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPrepayInstanceSpec',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Upgrades or downgrades the instance type of a subscription Edge Node Service (ENS) instance. The new instance type takes effect for the remaining lifecycle of the instance.
 *
 * @param request ModifyPrepayInstanceSpecRequest
 * @return ModifyPrepayInstanceSpecResponse
 */
async function modifyPrepayInstanceSpec(request: ModifyPrepayInstanceSpecRequest): ModifyPrepayInstanceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPrepayInstanceSpecWithOptions(request, runtime);
}

model ModifySecurityGroupAttributeRequest {
  description?: string(name='Description', description='The description of the security group.', example='testDescription'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.

This parameter is required.', example='sg-bp67acfmxazb4p****'),
  securityGroupName?: string(name='SecurityGroupName', description='The name of the security group. The name of a bucket must meet the following requirements:

*   The name must be 2 to 128 characters in length.
*   The name must start with a letter but cannot start with http:// or https://.
*   The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).', example='example'),
}

model ModifySecurityGroupAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifySecurityGroupAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySecurityGroupAttributeResponseBody(name='body'),
}

/**
 * @summary Modifies the information about a security group.
 *
 * @description *   You can call this operation up to 100 times per second.
 * *   You can call this operation up to 5 times per second per user.
 *
 * @param request ModifySecurityGroupAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifySecurityGroupAttributeResponse
 */
async function modifySecurityGroupAttributeWithOptions(request: ModifySecurityGroupAttributeRequest, runtime: Util.RuntimeOptions): ModifySecurityGroupAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.securityGroupName)) {
    query['SecurityGroupName'] = request.securityGroupName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySecurityGroupAttribute',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the information about a security group.
 *
 * @description *   You can call this operation up to 100 times per second.
 * *   You can call this operation up to 5 times per second per user.
 *
 * @param request ModifySecurityGroupAttributeRequest
 * @return ModifySecurityGroupAttributeResponse
 */
async function modifySecurityGroupAttribute(request: ModifySecurityGroupAttributeRequest): ModifySecurityGroupAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityGroupAttributeWithOptions(request, runtime);
}

model ModifySnapshotAttributeRequest {
  description?: string(name='Description', description='The description of the snapshot. The description must be 2 to 256 characters in length. It cannot start with `http://` or `https://`.', example='testDescription'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.

This parameter is required.', example='sp-bp199lyny9bb47pa****'),
  snapshotName?: string(name='SnapshotName', description='The name of the snapshot. The name must be 2 to 128 characters in length. It must start with a letter but cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), and hyphens (-).

The name cannot start with **auto** because snapshots whose names start with auto are recognized as automatic snapshots.', example='testSnapshotName'),
}

model ModifySnapshotAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifySnapshotAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySnapshotAttributeResponseBody(name='body'),
}

/**
 * @summary Modifies the information about a snapshot.
 *
 * @param request ModifySnapshotAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifySnapshotAttributeResponse
 */
async function modifySnapshotAttributeWithOptions(request: ModifySnapshotAttributeRequest, runtime: Util.RuntimeOptions): ModifySnapshotAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  if (!Util.isUnset(request.snapshotName)) {
    query['SnapshotName'] = request.snapshotName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySnapshotAttribute',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the information about a snapshot.
 *
 * @param request ModifySnapshotAttributeRequest
 * @return ModifySnapshotAttributeResponse
 */
async function modifySnapshotAttribute(request: ModifySnapshotAttributeRequest): ModifySnapshotAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySnapshotAttributeWithOptions(request, runtime);
}

model ModifySnatEntryRequest {
  eipAffinity?: boolean(name='EipAffinity'),
  ispAffinity?: boolean(name='IspAffinity', example='true'),
  snatEntryId?: string(name='SnatEntryId', description='This parameter is required.', example='snat-5tfjp36fsrb36zs36faj0****'),
  snatEntryName?: string(name='SnatEntryName', example='test0'),
  snatIp?: string(name='SnatIp'),
}

model ModifySnatEntryResponseBody = {
  requestId?: string(name='RequestId', example='125B04C7-3D0D-4245-AF96-14E3758E3F06'),
}

model ModifySnatEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySnatEntryResponseBody(name='body'),
}

/**
 * @summary 修改snat规则
 *
 * @param request ModifySnatEntryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifySnatEntryResponse
 */
async function modifySnatEntryWithOptions(request: ModifySnatEntryRequest, runtime: Util.RuntimeOptions): ModifySnatEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eipAffinity)) {
    query['EipAffinity'] = request.eipAffinity;
  }
  if (!Util.isUnset(request.ispAffinity)) {
    query['IspAffinity'] = request.ispAffinity;
  }
  if (!Util.isUnset(request.snatEntryId)) {
    query['SnatEntryId'] = request.snatEntryId;
  }
  if (!Util.isUnset(request.snatEntryName)) {
    query['SnatEntryName'] = request.snatEntryName;
  }
  if (!Util.isUnset(request.snatIp)) {
    query['SnatIp'] = request.snatIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySnatEntry',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改snat规则
 *
 * @param request ModifySnatEntryRequest
 * @return ModifySnatEntryResponse
 */
async function modifySnatEntry(request: ModifySnatEntryRequest): ModifySnatEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySnatEntryWithOptions(request, runtime);
}

model ModifyVSwitchAttributeRequest {
  description?: string(name='Description', description='The description of the vSwitch.

*   The description must be 2 to 256 characters in length.
*   The description cannot start with http:// or https://.', example='this is my first network'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.

This parameter is required.', example='n-****'),
  vSwitchName?: string(name='VSwitchName', description='The name of the vSwitch.

*   The name must be 2 to 128 characters in length.
*   The name must start with a letter and cannot start with http:// or https://.', example='Test-switch'),
}

model ModifyVSwitchAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyVSwitchAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVSwitchAttributeResponseBody(name='body'),
}

/**
 * @summary Modifies information about a vSwitch.
 *
 * @description *   You can call this operation up to 100 times per second.
 * *   You can call this operation up to 5 times per second per user.
 *
 * @param request ModifyVSwitchAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyVSwitchAttributeResponse
 */
async function modifyVSwitchAttributeWithOptions(request: ModifyVSwitchAttributeRequest, runtime: Util.RuntimeOptions): ModifyVSwitchAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vSwitchName)) {
    query['VSwitchName'] = request.vSwitchName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVSwitchAttribute',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies information about a vSwitch.
 *
 * @description *   You can call this operation up to 100 times per second.
 * *   You can call this operation up to 5 times per second per user.
 *
 * @param request ModifyVSwitchAttributeRequest
 * @return ModifyVSwitchAttributeResponse
 */
async function modifyVSwitchAttribute(request: ModifyVSwitchAttributeRequest): ModifyVSwitchAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVSwitchAttributeWithOptions(request, runtime);
}

model MountInstanceSDGRequest {
  instanceIds?: [ string ](name='InstanceIds', description='The IDs of the instances.

This parameter is required.'),
  SDGId?: string(name='SDGId', description='The ID of the SDG.

This parameter is required.', example='sdg-xxxx'),
}

model MountInstanceSDGShrinkRequest {
  instanceIdsShrink?: string(name='InstanceIds', description='The IDs of the instances.

This parameter is required.'),
  SDGId?: string(name='SDGId', description='The ID of the SDG.

This parameter is required.', example='sdg-xxxx'),
}

model MountInstanceSDGResponseBody = {
  data?: {
    message?: string(name='Message', description='The response message. Success is returned for a successful request.', example='success'),
    result?: {
      failedCount?: long(name='FailedCount', description='The number of failed tasks.', example='0'),
      failedItems?: [ 
        {
          errMessage?: string(name='ErrMessage', description='The error message.', example='sdg not found'),
          instanceId?: string(name='InstanceId', description='The ID of the instance.', example='aic-xxxxx-0'),
        }
      ](name='FailedItems', description='Details about failed tasks.'),
      successCount?: long(name='SuccessCount', description='The number of successful tasks.', example='1'),
    }(name='Result', description='The execution result of the synchronization request.'),
    success?: boolean(name='Success', description='Indicates whether all tasks are successful. Valid values:

*   **true**: All tasks are successful.
*   **false**: Failed tasks exist.', example='true'),
  }(name='Data', description='The returned data object.'),
  requestId?: string(name='RequestId', description='The request ID.', example='F3B261DD-3858-4D3C-877D-303ADF374600'),
}

model MountInstanceSDGResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MountInstanceSDGResponseBody(name='body'),
}

/**
 * @summary Deploys the SDG that has been attached to instances on the corresponding Android in Container (AIC) instance.
 *
 * @param tmpReq MountInstanceSDGRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return MountInstanceSDGResponse
 */
async function mountInstanceSDGWithOptions(tmpReq: MountInstanceSDGRequest, runtime: Util.RuntimeOptions): MountInstanceSDGResponse {
  Util.validateModel(tmpReq);
  var request = new MountInstanceSDGShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['InstanceIds'] = request.instanceIdsShrink;
  }
  if (!Util.isUnset(request.SDGId)) {
    query['SDGId'] = request.SDGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MountInstanceSDG',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deploys the SDG that has been attached to instances on the corresponding Android in Container (AIC) instance.
 *
 * @param request MountInstanceSDGRequest
 * @return MountInstanceSDGResponse
 */
async function mountInstanceSDG(request: MountInstanceSDGRequest): MountInstanceSDGResponse {
  var runtime = new Util.RuntimeOptions{};
  return mountInstanceSDGWithOptions(request, runtime);
}

model PreloadRegionSDGRequest {
  destinationRegionIds?: [ string ](name='DestinationRegionIds', description='The IDs of the destination nodes.

This parameter is required.'),
  namespaces?: [ string ](name='Namespaces', description='The namespaces.'),
  redundantNum?: int32(name='RedundantNum', description='The number of redundant replicas to support rapid deployment.

This parameter is required.', example='2'),
  SDGId?: string(name='SDGId', description='The ID of the SDG for which data is preloaded.

This parameter is required.', example='sdg-xxxx'),
}

model PreloadRegionSDGShrinkRequest {
  destinationRegionIdsShrink?: string(name='DestinationRegionIds', description='The IDs of the destination nodes.

This parameter is required.'),
  namespacesShrink?: string(name='Namespaces', description='The namespaces.'),
  redundantNum?: int32(name='RedundantNum', description='The number of redundant replicas to support rapid deployment.

This parameter is required.', example='2'),
  SDGId?: string(name='SDGId', description='The ID of the SDG for which data is preloaded.

This parameter is required.', example='sdg-xxxx'),
}

model PreloadRegionSDGResponseBody = {
  data?: {
    message?: string(name='Message', description='The message returned.', example='success'),
    result?: {
      failedCount?: long(name='FailedCount', description='The number of failed tasks.', example='0'),
      failedItems?: [ 
        {
          destinationRegionId?: string(name='DestinationRegionId', description='The ID of the destination node.', example='cn-hangzhou-xxx'),
          errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='region not found'),
        }
      ](name='FailedItems', description='Details about failed tasks.'),
      successCount?: long(name='SuccessCount', description='The number of successful tasks.', example='1'),
    }(name='Result', description='The execution result of the synchronization request.'),
    success?: boolean(name='Success', description='Indicates whether all tasks are successful. Valid values:

*   true: All tasks are successful.
*   false: Failed tasks exist.', example='true'),
  }(name='Data', description='The returned data object.'),
  requestId?: string(name='RequestId', description='The request ID.', example='C0003E8B-B930-4F59-ADC0-0E209A9012A8'),
}

model PreloadRegionSDGResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PreloadRegionSDGResponseBody(name='body'),
}

/**
 * @summary Preloads a shared data group (SDG).
 *
 * @param tmpReq PreloadRegionSDGRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PreloadRegionSDGResponse
 */
async function preloadRegionSDGWithOptions(tmpReq: PreloadRegionSDGRequest, runtime: Util.RuntimeOptions): PreloadRegionSDGResponse {
  Util.validateModel(tmpReq);
  var request = new PreloadRegionSDGShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.destinationRegionIds)) {
    request.destinationRegionIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.destinationRegionIds, 'DestinationRegionIds', 'json');
  }
  if (!Util.isUnset(tmpReq.namespaces)) {
    request.namespacesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.namespaces, 'Namespaces', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.destinationRegionIdsShrink)) {
    query['DestinationRegionIds'] = request.destinationRegionIdsShrink;
  }
  if (!Util.isUnset(request.namespacesShrink)) {
    query['Namespaces'] = request.namespacesShrink;
  }
  if (!Util.isUnset(request.redundantNum)) {
    query['RedundantNum'] = request.redundantNum;
  }
  if (!Util.isUnset(request.SDGId)) {
    query['SDGId'] = request.SDGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PreloadRegionSDG',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Preloads a shared data group (SDG).
 *
 * @param request PreloadRegionSDGRequest
 * @return PreloadRegionSDGResponse
 */
async function preloadRegionSDG(request: PreloadRegionSDGRequest): PreloadRegionSDGResponse {
  var runtime = new Util.RuntimeOptions{};
  return preloadRegionSDGWithOptions(request, runtime);
}

model PrepareUploadRequest {
  bucketName?: string(name='BucketName', description='The name of the bucket.

This parameter is required.', example='test'),
  clientIp?: string(name='ClientIp', description='The specified IP address. This parameter is applicable to scenarios where the user IP address is inconsistent with the operation calling IP address, such as the scenario where the server obtains authorization and sends the authorization to the client.', example='180.166.XX.XXX'),
}

model PrepareUploadResponseBody = {
  bucketName?: string(name='BucketName', description='The name of the bucket. This parameter is available only when the OSS SDK is used.', example='test-xxxxxx'),
  endpoint?: string(name='Endpoint', description='The endpoint. This parameter is available only when the OSS SDK is used.', example='eos.aliyuncs.com'),
  requestId?: string(name='RequestId', description='The request ID.', example='6666C5A5-75ED-422E-A022-7121FA18C968'),
}

model PrepareUploadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PrepareUploadResponseBody(name='body'),
}

/**
 * @summary Prepares the upload and obtains the location of the bucket.
 *
 * @param request PrepareUploadRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PrepareUploadResponse
 */
async function prepareUploadWithOptions(request: PrepareUploadRequest, runtime: Util.RuntimeOptions): PrepareUploadResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  if (!Util.isUnset(request.clientIp)) {
    query['ClientIp'] = request.clientIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PrepareUpload',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Prepares the upload and obtains the location of the bucket.
 *
 * @param request PrepareUploadRequest
 * @return PrepareUploadResponse
 */
async function prepareUpload(request: PrepareUploadRequest): PrepareUploadResponse {
  var runtime = new Util.RuntimeOptions{};
  return prepareUploadWithOptions(request, runtime);
}

model PushApplicationDataRequest {
  appId?: string(name='AppId', description='The ID of the application.

This parameter is required.', example='e76f8985-7965-41fc-925b-9648bb6bf650'),
  data?: string(name='Data', description='The data files that you want to push. The value must be a JSON string.

This parameter is required.', example='[{\\\\"name\\\\":\\\\"app01\\\\",       \\\\"version\\\\":\\\\"1.0\\\\",       \\\\"size\\\\":100,\\\\"archiveType\\\\":\\\\"tar.gz\\\\",       \\\\"md5\\\\":\\\\"\\\\",       \\\\"url\\\\":\\\\"http://xxxx\\\\",\\\\"timeout\\\\": 1000   },    {       \\\\"name\\\\":\\\\"app02\\\\",       \\\\"version\\\\":\\\\"1.1\\\\",       \\\\"size\\\\":10,\\\\"archiveType\\\\":\\\\"zip\\\\",       \\\\"md5\\\\":\\\\"xxxx\\\\",       \\\\"url\\\\":\\\\"http://xxxxxx\\\\",\\\\"timeout\\\\": 1000   }]'),
  pushStrategy?: string(name='PushStrategy', description='The push policy in the canary release environment. The value must be a JSON string. You can specify multiple push policies. By default, all data files are pushed.', example='{\\\\"name\\\\": \\\\"ScheduleToRegionId\\\\",  \\\\"parameters\\\\":{      \\\\"operator\\\\": \\\\"In\\\\",       \\\\"values\\\\": [\\\\"cn-chegndu-telecom-4\\\\", \\\\"cn-shanghai-cmcc-4\\\\"]  }}'),
  timeout?: int32(name='Timeout', description='This parameter does not take effect.', example='1800'),
}

model PushApplicationDataResponseBody = {
  pushResults?: {
    pushResult?: [ 
    {
      name?: string(name='Name', description='The name of the data file.', example='gcs-pre-websocket-eip-telecom'),
      resultCode?: int32(name='ResultCode', description='The push result. The value is of the enumeration type. Valid values:

*   0: The push operation is successful.
*   100: The push operation has been performed and the file is pushed.
*   200: The push operation has been performed and the file is being pushed to specific file servers.
*   300: The push operation failed. You must trigger the push operation again. The ResultDescrip parameter indicates the error description.', example='100'),
      resultDescrip?: string(name='ResultDescrip', description='The description of the push status.', example='success'),
      version?: string(name='Version', description='The version number of the data file.', example='standard'),
    }
  ](name='PushResult')
  }(name='PushResults', description='The push results of data files.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model PushApplicationDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushApplicationDataResponseBody(name='body'),
}

/**
 * @summary Pushes the business or service data of an application to file servers.
 *
 * @param request PushApplicationDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PushApplicationDataResponse
 */
async function pushApplicationDataWithOptions(request: PushApplicationDataRequest, runtime: Util.RuntimeOptions): PushApplicationDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.data)) {
    query['Data'] = request.data;
  }
  if (!Util.isUnset(request.pushStrategy)) {
    query['PushStrategy'] = request.pushStrategy;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PushApplicationData',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Pushes the business or service data of an application to file servers.
 *
 * @param request PushApplicationDataRequest
 * @return PushApplicationDataResponse
 */
async function pushApplicationData(request: PushApplicationDataRequest): PushApplicationDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushApplicationDataWithOptions(request, runtime);
}

model PutBucketRequest {
  bucketAcl?: string(name='BucketAcl'),
  bucketName?: string(name='BucketName', description='This parameter is required.'),
  comment?: string(name='Comment'),
  dispatchScope?: string(name='DispatchScope'),
  ensRegionId?: string(name='EnsRegionId'),
  logicalBucketType?: string(name='LogicalBucketType'),
}

model PutBucketResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='85123E71-7710-4620-8AAB-133CCE49EC83'),
}

model PutBucketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutBucketResponseBody(name='body'),
}

/**
 * @summary Creates an Edge Object Storage (EOS) bucket.
 *
 * @param request PutBucketRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutBucketResponse
 */
async function putBucketWithOptions(request: PutBucketRequest, runtime: Util.RuntimeOptions): PutBucketResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bucketAcl)) {
    query['BucketAcl'] = request.bucketAcl;
  }
  if (!Util.isUnset(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.dispatchScope)) {
    query['DispatchScope'] = request.dispatchScope;
  }
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.logicalBucketType)) {
    query['LogicalBucketType'] = request.logicalBucketType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PutBucket',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates an Edge Object Storage (EOS) bucket.
 *
 * @param request PutBucketRequest
 * @return PutBucketResponse
 */
async function putBucket(request: PutBucketRequest): PutBucketResponse {
  var runtime = new Util.RuntimeOptions{};
  return putBucketWithOptions(request, runtime);
}

model PutBucketAclRequest {
  bucketAcl?: string(name='BucketAcl', description='The access control list (ACL) of the bucket.

*   **public-read-write**
*   **public-read**
*   **private** (default)

This parameter is required.', example='private'),
  bucketName?: string(name='BucketName', description='The name of the bucket.

This parameter is required.', example='test'),
}

model PutBucketAclResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C0066F05-3116-4BAA-B588-52EB2E7F5D23'),
}

model PutBucketAclResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutBucketAclResponseBody(name='body'),
}

/**
 * @summary Modifies the access control list (ACL) of a bucket.
 *
 * @param request PutBucketAclRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutBucketAclResponse
 */
async function putBucketAclWithOptions(request: PutBucketAclRequest, runtime: Util.RuntimeOptions): PutBucketAclResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bucketAcl)) {
    query['BucketAcl'] = request.bucketAcl;
  }
  if (!Util.isUnset(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PutBucketAcl',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the access control list (ACL) of a bucket.
 *
 * @param request PutBucketAclRequest
 * @return PutBucketAclResponse
 */
async function putBucketAcl(request: PutBucketAclRequest): PutBucketAclResponse {
  var runtime = new Util.RuntimeOptions{};
  return putBucketAclWithOptions(request, runtime);
}

model PutBucketLifecycleRequest {
  allowSameActionOverlap?: string(name='AllowSameActionOverlap', description='Specifies whether to allow overlapped prefixes. Valid values:

*   **true**
*   **false** (default)', example='false'),
  bucketName?: string(name='BucketName', description='The name of the bucket.

This parameter is required.', example='test'),
  createdBeforeDate?: string(name='CreatedBeforeDate', description='The expiration time. EOS executes a lifecycle rule for objects that were last updated before the expiration time.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

>  ExpirationDays and CreateBeforeDate are mutually exclusive.', example='2023-10-12T05:45:00Z'),
  expirationDays?: long(name='ExpirationDays', description='The number of days from when the objects were last modified to when the lifecycle rule takes effect. The value must be a positive integer that is greater than 0.

>  ExpirationDays and CreateBeforeDate are mutually exclusive.', example='5'),
  prefix?: string(name='Prefix', description='The prefix of a object name. The prefix must be unique.

*   If you specify a prefix, the rule applies only to objects in the bucket that match the prefix.
*   If you do not specify a prefix, the rule applies to all objects in the bucket.', example='image'),
  ruleId?: string(name='RuleId', description='The unique ID of the rule. The ID of a lifecycle rule can be up to 255 bytes in length.

*   You do not need to configure this parameter when you create a rule. The system automatically generates a unique ID.
*   When you update a rule, you need to specify this parameter. Make sure that the rule specified by RuleId exists. Otherwise, an error occurs.', example='1'),
  status?: string(name='Status', description='The status of the rule. Valid values:

*   **Enabled**
*   **Disabled**

This parameter is required.', example='Enabled'),
}

model PutBucketLifecycleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='62373E71-5521-4620-8AAB-133CCE49357A'),
  ruleId?: string(name='RuleId', description='The ID of the rule.', example='b8f93xxxxx4881xxxxxc71d991'),
}

model PutBucketLifecycleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutBucketLifecycleResponseBody(name='body'),
}

/**
 * @summary Configures lifecycle rules for objects.
 *
 * @description *   You can configure up to 1,000 rules.
 * *   If an object meets multiple rules, the rule that has the earliest expiration time prevails.
 *
 * @param request PutBucketLifecycleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutBucketLifecycleResponse
 */
async function putBucketLifecycleWithOptions(request: PutBucketLifecycleRequest, runtime: Util.RuntimeOptions): PutBucketLifecycleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allowSameActionOverlap)) {
    query['AllowSameActionOverlap'] = request.allowSameActionOverlap;
  }
  if (!Util.isUnset(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  if (!Util.isUnset(request.createdBeforeDate)) {
    query['CreatedBeforeDate'] = request.createdBeforeDate;
  }
  if (!Util.isUnset(request.expirationDays)) {
    query['ExpirationDays'] = request.expirationDays;
  }
  if (!Util.isUnset(request.prefix)) {
    query['Prefix'] = request.prefix;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PutBucketLifecycle',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Configures lifecycle rules for objects.
 *
 * @description *   You can configure up to 1,000 rules.
 * *   If an object meets multiple rules, the rule that has the earliest expiration time prevails.
 *
 * @param request PutBucketLifecycleRequest
 * @return PutBucketLifecycleResponse
 */
async function putBucketLifecycle(request: PutBucketLifecycleRequest): PutBucketLifecycleResponse {
  var runtime = new Util.RuntimeOptions{};
  return putBucketLifecycleWithOptions(request, runtime);
}

model ReInitDiskRequest {
  diskId?: string(name='DiskId', description='The ID of the disk to be initialized. You can initialize only one disk at a time.

This parameter is required.', example='d-5r7v69e0bejrnzger09w71yjv'),
  imageId?: string(name='ImageId', description='The ID of the image to use to create the instance.

This parameter is required.', example='m-5rz3i231o531s4p4ozanxmgx7'),
}

model ReInitDiskResponseBody = {
  code?: int32(name='Code', description='The returned service code. A value of 0 indicates that the operation was successful.', example='0'),
  requestId?: string(name='RequestId', description='The request ID.', example='4DD66F05-3116-4BAA-B588-52EB2E7F431D'),
}

model ReInitDiskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReInitDiskResponseBody(name='body'),
}

/**
 * @summary Initializes a disk.
 *
 * @param request ReInitDiskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReInitDiskResponse
 */
async function reInitDiskWithOptions(request: ReInitDiskRequest, runtime: Util.RuntimeOptions): ReInitDiskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReInitDisk',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Initializes a disk.
 *
 * @param request ReInitDiskRequest
 * @return ReInitDiskResponse
 */
async function reInitDisk(request: ReInitDiskRequest): ReInitDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return reInitDiskWithOptions(request, runtime);
}

model RebootAICInstanceRequest {
  instanceId?: string(name='InstanceId', description='The ID of the AIC instance.', example='aic-instance****'),
  instanceIds?: [ string ](name='InstanceIds', description='The IDs of the AIC instance groups.'),
  serverId?: string(name='ServerId', description='The ID of the server.', example='cas-instance****'),
}

model RebootAICInstanceShrinkRequest {
  instanceId?: string(name='InstanceId', description='The ID of the AIC instance.', example='aic-instance****'),
  instanceIdsShrink?: string(name='InstanceIds', description='The IDs of the AIC instance groups.'),
  serverId?: string(name='ServerId', description='The ID of the server.', example='cas-instance****'),
}

model RebootAICInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model RebootAICInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RebootAICInstanceResponseBody(name='body'),
}

/**
 * @summary Restarts an Android in Container (AIC) instance.
 *
 * @param tmpReq RebootAICInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RebootAICInstanceResponse
 */
async function rebootAICInstanceWithOptions(tmpReq: RebootAICInstanceRequest, runtime: Util.RuntimeOptions): RebootAICInstanceResponse {
  Util.validateModel(tmpReq);
  var request = new RebootAICInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RebootAICInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Restarts an Android in Container (AIC) instance.
 *
 * @param request RebootAICInstanceRequest
 * @return RebootAICInstanceResponse
 */
async function rebootAICInstance(request: RebootAICInstanceRequest): RebootAICInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootAICInstanceWithOptions(request, runtime);
}

model RebootARMServerInstanceRequest {
  serverId?: string(name='ServerId', description='The ID of the server.', example='yourInstance ID'),
}

model RebootARMServerInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model RebootARMServerInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RebootARMServerInstanceResponseBody(name='body'),
}

/**
 * @summary Reboots an Android in Container (AIC) server.
 *
 * @param request RebootARMServerInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RebootARMServerInstanceResponse
 */
async function rebootARMServerInstanceWithOptions(request: RebootARMServerInstanceRequest, runtime: Util.RuntimeOptions): RebootARMServerInstanceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RebootARMServerInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Reboots an Android in Container (AIC) server.
 *
 * @param request RebootARMServerInstanceRequest
 * @return RebootARMServerInstanceResponse
 */
async function rebootARMServerInstance(request: RebootARMServerInstanceRequest): RebootARMServerInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootARMServerInstanceWithOptions(request, runtime);
}

model RebootInstanceRequest {
  forceStop?: string(name='ForceStop', description='Indicates whether to stop the instance forcibly before you reboot it. Default value: false. Valid values:

*   **true**
*   **false**', example='true'),
  instanceId?: string(name='InstanceId', description='The ID of the instance that you want to reboot. You can specify only one instance ID.

This parameter is required.', example='i-instanceid****'),
}

model RebootInstanceResponseBody = {
  code?: int32(name='Code', description='The returned service code. 0 indicates that the request was successful.', example='0'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model RebootInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RebootInstanceResponseBody(name='body'),
}

/**
 * @summary Reboots an instance.
 *
 * @description *   Only instances that are in the Running state can be restarted.
 * *   If the operation is successful, the status of the instance becomes Starting.
 *
 * @param request RebootInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RebootInstanceResponse
 */
async function rebootInstanceWithOptions(request: RebootInstanceRequest, runtime: Util.RuntimeOptions): RebootInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.forceStop)) {
    query['ForceStop'] = request.forceStop;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RebootInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Reboots an instance.
 *
 * @description *   Only instances that are in the Running state can be restarted.
 * *   If the operation is successful, the status of the instance becomes Starting.
 *
 * @param request RebootInstanceRequest
 * @return RebootInstanceResponse
 */
async function rebootInstance(request: RebootInstanceRequest): RebootInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootInstanceWithOptions(request, runtime);
}

model RebootInstancesRequest {
  instanceIds?: [ string ](name='InstanceIds'),
}

model RebootInstancesShrinkRequest {
  instanceIdsShrink?: string(name='InstanceIds'),
}

model RebootInstancesResponseBody = {
  instanceResponses?: [
    InstanceOperateResponse
  ](name='InstanceResponses'),
  requestId?: string(name='RequestId'),
}

model RebootInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RebootInstancesResponseBody(name='body'),
}

/**
 * @summary 选择批量实例进行重启操作
 *
 * @param tmpReq RebootInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RebootInstancesResponse
 */
async function rebootInstancesWithOptions(tmpReq: RebootInstancesRequest, runtime: Util.RuntimeOptions): RebootInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new RebootInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'simple');
  }
  var query = {};
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['InstanceIds'] = request.instanceIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RebootInstances',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 选择批量实例进行重启操作
 *
 * @param request RebootInstancesRequest
 * @return RebootInstancesResponse
 */
async function rebootInstances(request: RebootInstancesRequest): RebootInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootInstancesWithOptions(request, runtime);
}

model RecoverAICInstanceRequest {
  serverId?: string(name='ServerId', description='The ID of the server.

This parameter is required.', example='cas-instance****'),
}

model RecoverAICInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model RecoverAICInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecoverAICInstanceResponseBody(name='body'),
}

/**
 * @summary Recovers an Android in Container (AIC) instance on the server.
 *
 * @param request RecoverAICInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RecoverAICInstanceResponse
 */
async function recoverAICInstanceWithOptions(request: RecoverAICInstanceRequest, runtime: Util.RuntimeOptions): RecoverAICInstanceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RecoverAICInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Recovers an Android in Container (AIC) instance on the server.
 *
 * @param request RecoverAICInstanceRequest
 * @return RecoverAICInstanceResponse
 */
async function recoverAICInstance(request: RecoverAICInstanceRequest): RecoverAICInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return recoverAICInstanceWithOptions(request, runtime);
}

model ReinitInstanceRequest {
  imageId?: string(name='ImageId', description='The ID of the image file that is used to reset the instance.

This parameter is required.', example='m-5wn1dhz5syoo9b48f440ntvad'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='i-5vn4n3y4laeb2ii9zxxltlvzi', nullable=false),
  password?: string(name='Password', description='The password of the instance.

It must be 8 to 30 characters in length. It must include at least three of the following characters types: uppercase letters, lowercase letters, digits, and special characters. The following special character are supported: `()\\\\"~! @#$%^&*-_+={}[]:;\\\\"<>,.?/`', example='***'),
}

model ReinitInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C46C79B7-0C31-5947-9D86-82207661EADA'),
}

model ReinitInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReinitInstanceResponseBody(name='body'),
}

/**
 * @summary Resets an instance based on specific parameters.
 *
 * @param request ReinitInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReinitInstanceResponse
 */
async function reinitInstanceWithOptions(request: ReinitInstanceRequest, runtime: Util.RuntimeOptions): ReinitInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.imageId)) {
    body['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.password)) {
    body['Password'] = request.password;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ReinitInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Resets an instance based on specific parameters.
 *
 * @param request ReinitInstanceRequest
 * @return ReinitInstanceResponse
 */
async function reinitInstance(request: ReinitInstanceRequest): ReinitInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return reinitInstanceWithOptions(request, runtime);
}

model ReinitInstancesRequest {
  imageId?: string(name='ImageId'),
  instanceIds?: [ string ](name='InstanceIds'),
  password?: string(name='Password'),
}

model ReinitInstancesShrinkRequest {
  imageId?: string(name='ImageId'),
  instanceIdsShrink?: string(name='InstanceIds'),
  password?: string(name='Password'),
}

model ReinitInstancesResponseBody = {
  instanceResponses?: [
    InstanceOperateResponse
  ](name='InstanceResponses'),
  requestId?: string(name='RequestId'),
}

model ReinitInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReinitInstancesResponseBody(name='body'),
}

/**
 * @summary 选择批量实例进行重置操作
 *
 * @param tmpReq ReinitInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReinitInstancesResponse
 */
async function reinitInstancesWithOptions(tmpReq: ReinitInstancesRequest, runtime: Util.RuntimeOptions): ReinitInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new ReinitInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'simple');
  }
  var query = {};
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['InstanceIds'] = request.instanceIdsShrink;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReinitInstances',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 选择批量实例进行重置操作
 *
 * @param request ReinitInstancesRequest
 * @return ReinitInstancesResponse
 */
async function reinitInstances(request: ReinitInstancesRequest): ReinitInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return reinitInstancesWithOptions(request, runtime);
}

model ReleaseAICInstanceRequest {
  serverId?: string(name='ServerId', description='The ID of the server.

This parameter is required.', example='cas-instance****'),
}

model ReleaseAICInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ReleaseAICInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseAICInstanceResponseBody(name='body'),
}

/**
 * @summary Releases an Android in Container (AIC) instance from the server.
 *
 * @param request ReleaseAICInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReleaseAICInstanceResponse
 */
async function releaseAICInstanceWithOptions(request: ReleaseAICInstanceRequest, runtime: Util.RuntimeOptions): ReleaseAICInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseAICInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Releases an Android in Container (AIC) instance from the server.
 *
 * @param request ReleaseAICInstanceRequest
 * @return ReleaseAICInstanceResponse
 */
async function releaseAICInstance(request: ReleaseAICInstanceRequest): ReleaseAICInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseAICInstanceWithOptions(request, runtime);
}

model ReleaseARMServerInstanceRequest {
  instanceId?: string(name='InstanceId', description='The ID of the server.

This parameter is required.', example='yourInstance ID'),
}

model ReleaseARMServerInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='DCAE84DF-4187-5CC5-B819-37BCD2B83BD3'),
}

model ReleaseARMServerInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseARMServerInstanceResponseBody(name='body'),
}

/**
 * @summary Releases an ARM server.
 *
 * @param request ReleaseARMServerInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReleaseARMServerInstanceResponse
 */
async function releaseARMServerInstanceWithOptions(request: ReleaseARMServerInstanceRequest, runtime: Util.RuntimeOptions): ReleaseARMServerInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseARMServerInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Releases an ARM server.
 *
 * @param request ReleaseARMServerInstanceRequest
 * @return ReleaseARMServerInstanceResponse
 */
async function releaseARMServerInstance(request: ReleaseARMServerInstanceRequest): ReleaseARMServerInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseARMServerInstanceWithOptions(request, runtime);
}

model ReleaseInstanceRequest {
  instanceId?: string(name='InstanceId', description='The ID of the EIP.

This parameter is required.', example='eip-****'),
}

model ReleaseInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  resourceType?: string(name='ResourceType', description='The type of the resource.

Valid values:

*   instance
*   eip
*   disk
*   network
*   natgateway
*   vswitch', example='eip'),
}

model ReleaseInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseInstanceResponseBody(name='body'),
}

/**
 * @summary Releases an instance. You can call this operation to release only Elastic IP Addresses (EIPs), Edge Load Balancer (ELB) instances, and cloud disk-based instances. We recommend that you call service-specific operations to release or unsubscribe from instances.
 *
 * @description *   You can call this operation up to 10,000 times per second per account.
 * *   The maximum number of times that each user can call this operation per second is 50.
 *
 * @param request ReleaseInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReleaseInstanceResponse
 */
async function releaseInstanceWithOptions(request: ReleaseInstanceRequest, runtime: Util.RuntimeOptions): ReleaseInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Releases an instance. You can call this operation to release only Elastic IP Addresses (EIPs), Edge Load Balancer (ELB) instances, and cloud disk-based instances. We recommend that you call service-specific operations to release or unsubscribe from instances.
 *
 * @description *   You can call this operation up to 10,000 times per second per account.
 * *   The maximum number of times that each user can call this operation per second is 50.
 *
 * @param request ReleaseInstanceRequest
 * @return ReleaseInstanceResponse
 */
async function releaseInstance(request: ReleaseInstanceRequest): ReleaseInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstanceWithOptions(request, runtime);
}

model ReleasePostPaidInstanceRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance to be deleted. You can specify only one instance ID.

This parameter is required.', example='i-instance****'),
}

model ReleasePostPaidInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C0003E8B-B930-4F59-ADC0-0E209A9012A8'),
}

model ReleasePostPaidInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleasePostPaidInstanceResponseBody(name='body'),
}

/**
 * @summary Deletes a pay-as-you-go instance.
 *
 * @param request ReleasePostPaidInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReleasePostPaidInstanceResponse
 */
async function releasePostPaidInstanceWithOptions(request: ReleasePostPaidInstanceRequest, runtime: Util.RuntimeOptions): ReleasePostPaidInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleasePostPaidInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a pay-as-you-go instance.
 *
 * @param request ReleasePostPaidInstanceRequest
 * @return ReleasePostPaidInstanceResponse
 */
async function releasePostPaidInstance(request: ReleasePostPaidInstanceRequest): ReleasePostPaidInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return releasePostPaidInstanceWithOptions(request, runtime);
}

model ReleasePrePaidInstanceRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance to be deleted. You can specify only one instance ID.

This parameter is required.', example='i-instance****'),
}

model ReleasePrePaidInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C0003E8B-B930-4F59-ADC0-0E209A9012A8'),
}

model ReleasePrePaidInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleasePrePaidInstanceResponseBody(name='body'),
}

/**
 * @summary Call ReleasePrePaidInstance to delete a subscription instance.
 *
 * @param request ReleasePrePaidInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReleasePrePaidInstanceResponse
 */
async function releasePrePaidInstanceWithOptions(request: ReleasePrePaidInstanceRequest, runtime: Util.RuntimeOptions): ReleasePrePaidInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleasePrePaidInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Call ReleasePrePaidInstance to delete a subscription instance.
 *
 * @param request ReleasePrePaidInstanceRequest
 * @return ReleasePrePaidInstanceResponse
 */
async function releasePrePaidInstance(request: ReleasePrePaidInstanceRequest): ReleasePrePaidInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return releasePrePaidInstanceWithOptions(request, runtime);
}

model RemoveBackendServersRequest {
  backendServers?: [ 
    {
      ip?: string(name='Ip', description='The IP address of the backend server.', example='192.XXX.X.X'),
      port?: int32(name='Port', description='The backend port that is used by the Edge Load Balancer (ELB) instance.', example='0'),
      serverId?: string(name='ServerId', description='The instance ID of the backend server.

This parameter is required.', example='i-5uf68ts0fqexe1a4n****'),
      type?: string(name='Type', description='The type of backend server. Valid values:

*   **ens**: an Edge Node Service (ENS) instance.
*   **eni**: an Elastic Network Interface (ENI).', example='ens'),
      weight?: int32(name='Weight', description='The weight of the backend server.', example='100'),
    }
  ](name='BackendServers', description='The list of backend servers that you want to remove. You can remove up to 20 backend servers at a time.

This parameter is required.'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the Edge Load Balancer (ELB) instance.

This parameter is required.', example='lb-5ovkn1piwqmoqrfjdyhq4****'),
}

model RemoveBackendServersShrinkRequest {
  backendServersShrink?: string(name='BackendServers', description='The list of backend servers that you want to remove. You can remove up to 20 backend servers at a time.

This parameter is required.'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the Edge Load Balancer (ELB) instance.

This parameter is required.', example='lb-5ovkn1piwqmoqrfjdyhq4****'),
}

model RemoveBackendServersResponseBody = {
  backendServers?: {
    backendServer?: [ 
    {
      ip?: string(name='Ip', description='The IP address of the backend server.', example='192.1XX.X.X'),
      port?: int32(name='Port', description='The backend port that is used by the ELB instance.', example='0'),
      serverId?: string(name='ServerId', description='The instance ID of the backend server.', example='i-5vb5h5njxiuhn48a****'),
      type?: string(name='Type', description='The type of the backend server. Valid values:

*   **ens**: an ENS instance.
*   **eni**: an ENI.', example='ens'),
      weight?: int32(name='Weight', description='The weight of the backend server.

>  The value 0 indicates that requests are not forwarded to the backend server.', example='50'),
    }
  ](name='BackendServer')
  }(name='BackendServers', description='The list of backend servers that you want to add to the SLB instance.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model RemoveBackendServersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveBackendServersResponseBody(name='body'),
}

/**
 * @summary Removes backend servers.
 *
 * @description *   You can call this operation up to 100 times per second.
 * *   You can call this operation up to 10 times per second per account.
 *
 * @param tmpReq RemoveBackendServersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveBackendServersResponse
 */
async function removeBackendServersWithOptions(tmpReq: RemoveBackendServersRequest, runtime: Util.RuntimeOptions): RemoveBackendServersResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveBackendServersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.backendServers)) {
    request.backendServersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.backendServers, 'BackendServers', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.backendServersShrink)) {
    query['BackendServers'] = request.backendServersShrink;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveBackendServers',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Removes backend servers.
 *
 * @description *   You can call this operation up to 100 times per second.
 * *   You can call this operation up to 10 times per second per account.
 *
 * @param request RemoveBackendServersRequest
 * @return RemoveBackendServersResponse
 */
async function removeBackendServers(request: RemoveBackendServersRequest): RemoveBackendServersResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeBackendServersWithOptions(request, runtime);
}

model RemoveInstanceSDGRequest {
  instanceIds?: [ string ](name='InstanceIds', description='The IDs of the instances. The value is a JSON array that consists of up to 100 IDs.

This parameter is required.'),
}

model RemoveInstanceSDGShrinkRequest {
  instanceIdsShrink?: string(name='InstanceIds', description='The IDs of the instances. The value is a JSON array that consists of up to 100 IDs.

This parameter is required.'),
}

model RemoveInstanceSDGResponseBody = {
  code?: int32(name='Code', description='The returned service code. 0 indicates that the request was successful.', example='0'),
  data?: {
    message?: string(name='Message', description='The response message. Success is returned for a successful request.', example='success'),
    result?: {
      failedCount?: long(name='FailedCount', description='The number of failed tasks.', example='0'),
      failedItems?: [ 
        {
          errMessage?: string(name='ErrMessage', description='The error message that is returned.', example='sdg not found'),
          instanceId?: string(name='InstanceId', description='The ID of the instance.', example='aic-xxxxx-0'),
        }
      ](name='FailedItems', description='Details about the failed tasks.'),
      successCount?: long(name='SuccessCount', description='The number of successful tasks.', example='1'),
    }(name='Result', description='The execution result of the synchronization request.'),
    success?: boolean(name='Success', description='Indicates whether all tasks are successful. Valid values:

*   **true**: All tasks are successful.
*   **false**: Failed tasks exist.', example='true'),
  }(name='Data', description='The returned data object.'),
  requestId?: string(name='RequestId', description='The request ID.', example='125B04C7-3D0D-4245-AF96-14E3758E3F06'),
}

model RemoveInstanceSDGResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveInstanceSDGResponseBody(name='body'),
}

/**
 * @summary Removes a shared data group (SDG) that is attached to the compute instance.
 *
 * @param tmpReq RemoveInstanceSDGRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveInstanceSDGResponse
 */
async function removeInstanceSDGWithOptions(tmpReq: RemoveInstanceSDGRequest, runtime: Util.RuntimeOptions): RemoveInstanceSDGResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveInstanceSDGShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['InstanceIds'] = request.instanceIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveInstanceSDG',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Removes a shared data group (SDG) that is attached to the compute instance.
 *
 * @param request RemoveInstanceSDGRequest
 * @return RemoveInstanceSDGResponse
 */
async function removeInstanceSDG(request: RemoveInstanceSDGRequest): RemoveInstanceSDGResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeInstanceSDGWithOptions(request, runtime);
}

model RemovePublicIpsFromEpnInstanceRequest {
  EPNInstanceId?: string(name='EPNInstanceId', description='The ID of the EPN instance.

This parameter is required.', example='epn-xxxx'),
  instanceInfos?: string(name='InstanceInfos', description='The information about the public IP addresses that you want to delete.

This parameter is required.', example='[{"PublicIpAddress":"2.230.XX.XX"},{"PublicIpAddress":"2.230.XX.XX"}]'),
}

model RemovePublicIpsFromEpnInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E	 Request ID.'),
}

model RemovePublicIpsFromEpnInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemovePublicIpsFromEpnInstanceResponseBody(name='body'),
}

/**
 * @summary Removes IP addresses from an edge private network (EPN) instance.
 *
 * @param request RemovePublicIpsFromEpnInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemovePublicIpsFromEpnInstanceResponse
 */
async function removePublicIpsFromEpnInstanceWithOptions(request: RemovePublicIpsFromEpnInstanceRequest, runtime: Util.RuntimeOptions): RemovePublicIpsFromEpnInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.EPNInstanceId)) {
    query['EPNInstanceId'] = request.EPNInstanceId;
  }
  if (!Util.isUnset(request.instanceInfos)) {
    query['InstanceInfos'] = request.instanceInfos;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemovePublicIpsFromEpnInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Removes IP addresses from an edge private network (EPN) instance.
 *
 * @param request RemovePublicIpsFromEpnInstanceRequest
 * @return RemovePublicIpsFromEpnInstanceResponse
 */
async function removePublicIpsFromEpnInstance(request: RemovePublicIpsFromEpnInstanceRequest): RemovePublicIpsFromEpnInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return removePublicIpsFromEpnInstanceWithOptions(request, runtime);
}

model RemoveSDGRequest {
  instanceIds?: [ string ](name='InstanceIds', description='IDs of Android in Container (AIC) instances.

This parameter is required.'),
}

model RemoveSDGShrinkRequest {
  instanceIdsShrink?: string(name='InstanceIds', description='IDs of Android in Container (AIC) instances.

This parameter is required.'),
}

model RemoveSDGResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6666C5A5-75ED-422E-A022-7121FA18C968'),
}

model RemoveSDGResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveSDGResponseBody(name='body'),
}

/**
 * @summary Removes shared data groups (SDGs) that are deployed on instances.
 *
 * @param tmpReq RemoveSDGRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveSDGResponse
 */
async function removeSDGWithOptions(tmpReq: RemoveSDGRequest, runtime: Util.RuntimeOptions): RemoveSDGResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveSDGShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveSDG',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Removes shared data groups (SDGs) that are deployed on instances.
 *
 * @param request RemoveSDGRequest
 * @return RemoveSDGResponse
 */
async function removeSDG(request: RemoveSDGRequest): RemoveSDGResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeSDGWithOptions(request, runtime);
}

model RemoveVSwitchesFromEpnInstanceRequest {
  EPNInstanceId?: string(name='EPNInstanceId', description='The ID of theEPN instance.

This parameter is required.', example='epn-****'),
  vSwitchesInfo?: string(name='VSwitchesInfo', description='The internal networking information that you want to delete.

This parameter is required.', example='VSwitchesInfo=[{"VSwitchId":"vs-ixxxx"},{"VSwitchId":"vs-ixxxx"}]'),
}

model RemoveVSwitchesFromEpnInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model RemoveVSwitchesFromEpnInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveVSwitchesFromEpnInstanceResponseBody(name='body'),
}

/**
 * @summary Deletes the networking information. This operation is applicable only for instances that reside in the internal network.
 *
 * @param request RemoveVSwitchesFromEpnInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RemoveVSwitchesFromEpnInstanceResponse
 */
async function removeVSwitchesFromEpnInstanceWithOptions(request: RemoveVSwitchesFromEpnInstanceRequest, runtime: Util.RuntimeOptions): RemoveVSwitchesFromEpnInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.EPNInstanceId)) {
    query['EPNInstanceId'] = request.EPNInstanceId;
  }
  if (!Util.isUnset(request.vSwitchesInfo)) {
    query['VSwitchesInfo'] = request.vSwitchesInfo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveVSwitchesFromEpnInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes the networking information. This operation is applicable only for instances that reside in the internal network.
 *
 * @param request RemoveVSwitchesFromEpnInstanceRequest
 * @return RemoveVSwitchesFromEpnInstanceResponse
 */
async function removeVSwitchesFromEpnInstance(request: RemoveVSwitchesFromEpnInstanceRequest): RemoveVSwitchesFromEpnInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeVSwitchesFromEpnInstanceWithOptions(request, runtime);
}

model RenewARMServerInstanceRequest {
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal for the premium bandwidth plan. Valid values:

*   **true**.
*   **false** (default).', example='true'),
  instanceId?: string(name='InstanceId', description='The ID of the instance that you want to renew.

This parameter is required.', example='yourInstance ID'),
  period?: int32(name='Period', description='The renewal period. By default, instances are renewed on a monthly basis. Valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, and 12.

This parameter is required.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the renewal period. Valid values:

*   Month (default)
*   Year

This parameter is required.', example='Month'),
}

model RenewARMServerInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='370E61E0-6E6E-50FE-9259-EE706C55ABF1'),
}

model RenewARMServerInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenewARMServerInstanceResponseBody(name='body'),
}

/**
 * @summary Renews a subscription Android in Container (AIC) instance.
 *
 * @param request RenewARMServerInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RenewARMServerInstanceResponse
 */
async function renewARMServerInstanceWithOptions(request: RenewARMServerInstanceRequest, runtime: Util.RuntimeOptions): RenewARMServerInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenewARMServerInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Renews a subscription Android in Container (AIC) instance.
 *
 * @param request RenewARMServerInstanceRequest
 * @return RenewARMServerInstanceResponse
 */
async function renewARMServerInstance(request: RenewARMServerInstanceRequest): RenewARMServerInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewARMServerInstanceWithOptions(request, runtime);
}

model RenewInstanceRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='i-56789acfmxazb4p****'),
  period?: long(name='Period', description='The renewal duration of the subscription instance.

This parameter is required.', example='1'),
}

model RenewInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request. This parameter is a common parameter. Each request has a unique ID. You can use the ID to troubleshoot issues.', example='86A6D421-A0C7-4C01-8648-47377CA6A2CE'),
}

model RenewInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenewInstanceResponseBody(name='body'),
}

/**
 * @summary Renews a subscription instance.
 *
 * @param request RenewInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RenewInstanceResponse
 */
async function renewInstanceWithOptions(request: RenewInstanceRequest, runtime: Util.RuntimeOptions): RenewInstanceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenewInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Renews a subscription instance.
 *
 * @param request RenewInstanceRequest
 * @return RenewInstanceResponse
 */
async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewInstanceWithOptions(request, runtime);
}

model RescaleApplicationRequest {
  appId?: string(name='AppId', description='The ID of the application. You can query the application ID by calling the ListApplications operation.

This parameter is required.', example='474bdef0-d149-4695-abfb-52912d9143f0'),
  rescaleLevel?: string(name='RescaleLevel', description='The level of resource scaling. The value must be of the enumerated data type. Valid values:

*   AreaIspCode (default): scales resources based on the Internet service provider (ISP).
*   RegionId: scales resources based on the edge node.
*   InstanceId: scales resources based on the instance ID. Resource scale-out specifies resource hosting and scale-in specifies resource release.', example='RegionId'),
  rescaleType?: string(name='RescaleType', description='The scaling operation. The value must be of the enumerated data type. Valid values:

*   Add: adds new resources.
*   Del: releases resources.

This parameter is required.', example='Add'),
  resourceSelector?: string(name='ResourceSelector', description='The required resources. The value must be a JSON string.

This parameter is required.', example='[{\\\\"regionCode\\\\": \\\\"cn-wuxi-telecom_unicom_cmcc-3\\\\",    \\\\"ispCode\\\\": \\\\"telecom\\\\",    \\\\"count\\\\": 2	},{    \\\\"regionCode\\\\": \\\\"cn-shanghai-cmcc\\\\",    \\\\"count\\\\": 4	}]'),
  timeout?: int32(name='Timeout', description='The timeout period for asynchronous scaling. Unit: seconds. Default value: 300.', example='1800'),
  toAppVersion?: string(name='ToAppVersion', description='The version number of the application deployment package. By default, the stable version number is used. This parameter takes effect only when you perform resource scale-out.', example='v2'),
}

model RescaleApplicationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='AAE90880-4970-4D81-A534-A6C0F3631F74'),
}

model RescaleApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RescaleApplicationResponseBody(name='body'),
}

/**
 * @summary Scales resources in an asynchronous manner and deploys or releases the container.
 *
 * @param request RescaleApplicationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RescaleApplicationResponse
 */
async function rescaleApplicationWithOptions(request: RescaleApplicationRequest, runtime: Util.RuntimeOptions): RescaleApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.rescaleLevel)) {
    query['RescaleLevel'] = request.rescaleLevel;
  }
  if (!Util.isUnset(request.rescaleType)) {
    query['RescaleType'] = request.rescaleType;
  }
  if (!Util.isUnset(request.resourceSelector)) {
    query['ResourceSelector'] = request.resourceSelector;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  if (!Util.isUnset(request.toAppVersion)) {
    query['ToAppVersion'] = request.toAppVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RescaleApplication',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Scales resources in an asynchronous manner and deploys or releases the container.
 *
 * @param request RescaleApplicationRequest
 * @return RescaleApplicationResponse
 */
async function rescaleApplication(request: RescaleApplicationRequest): RescaleApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return rescaleApplicationWithOptions(request, runtime);
}

model RescaleDeviceServiceRequest {
  appId?: string(name='AppId', description='The ID of the application.', example='7aedc50b-b1cb-4a7c-9e3d-4cf3c9ee55a4'),
  imageId?: string(name='ImageId', description='The ID of the image.', example='m-5rynw9g1ow1e928lb83bqmbnf'),
  ipType?: int32(name='IpType', description='The type of the network. The value must be of the enumerated data type. Valid values:

*   **1** (default): Internet
*   **2**: internal network', example='1'),
  rescaleLevel?: string(name='RescaleLevel', description='The region level of the scale-out. Set the value to RegionId. RegionId specifies that resource scale-out is performed based on the ID of the edge node.

This parameter is required.', example='RegionId'),
  rescaleType?: string(name='RescaleType', description='The scaling operation. Set the value to Add to add new resources.

This parameter is required.', example='Add'),
  resourceInfo?: string(name='ResourceInfo', description='The information about the resource specification template. The value must be a JSON string.', example='{\\\\"imageId\\\\":\\\\"m-5s4z4c10avgwvwtn33gl2vgob\\\\",\\\\"ipType\\\\":2,\\\\"specName\\\\":\\\\"ens.pfb-c3m7.medium\\\\"}'),
  resourceSelector?: string(name='ResourceSelector', description='The required resources. The value must be a JSON string.

This parameter is required.', example='[{\\\\"regionCode\\\\": \\\\"cn-wuxi-telecom_unicom_cmcc-3\\\\",    \\\\"ispCode\\\\": \\\\"telecom\\\\",    \\\\"count\\\\": 2	},{    \\\\"regionCode\\\\": \\\\"cn-shanghai-cmcc\\\\",    \\\\"count\\\\": 4	}]'),
  resourceSpec?: string(name='ResourceSpec', description='The resource specification.', example='ens.a6e.large'),
  serviceId?: string(name='ServiceId', description='The ID of the service.', example='service-01c6dd6e93f040698566'),
  timeout?: long(name='Timeout', description='The timeout period for asynchronous scale-out. Unit: seconds. Default value: 300.', example='1800'),
}

model RescaleDeviceServiceResponseBody = {
  deviceIds?: [ string ](name='DeviceIds', description='The IDs of the devices.'),
  orderId?: string(name='OrderId', description='The ID of the order.', example='b3b5bb9a-4e0b-4cac-8ebf-e5e015726723'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3F3F3570-E721-53F6-853F-37B7725AC6CB'),
  resourceDetailInfos?: [ 
    {
      ID?: string(name='ID', description='The ID of the device.', example='h-uf6009zoa6hdbjyqxcn1'),
      IP?: string(name='IP', description='The IP address of the device.', example='10.152.196.36'),
      ISP?: string(name='ISP', description='The Internet service provider (ISP) to which the device belongs.', example='telecom'),
      mac?: string(name='Mac', description='The media access control (MAC) address of the device.', example='24:0B:88:04:71:E0'),
      regionID?: string(name='RegionID', description='The ID of the edge node to which the device belongs.', example='cn-chongqing-1'),
      server?: string(name='Server', description='The name of the server on which the device is deployed.', example='ens-nc2'),
      status?: string(name='Status', description='The status of the device.', example='Running'),
      type?: string(name='Type', description='The type of the instance.', example='ens.ac6.large'),
    }
  ](name='ResourceDetailInfos', description='The key properties of the device.'),
}

model RescaleDeviceServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RescaleDeviceServiceResponseBody(name='body'),
}

/**
 * @summary Scales out a bare metal device.
 *
 * @param request RescaleDeviceServiceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RescaleDeviceServiceResponse
 */
async function rescaleDeviceServiceWithOptions(request: RescaleDeviceServiceRequest, runtime: Util.RuntimeOptions): RescaleDeviceServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.ipType)) {
    query['IpType'] = request.ipType;
  }
  if (!Util.isUnset(request.rescaleLevel)) {
    query['RescaleLevel'] = request.rescaleLevel;
  }
  if (!Util.isUnset(request.rescaleType)) {
    query['RescaleType'] = request.rescaleType;
  }
  if (!Util.isUnset(request.resourceSpec)) {
    query['ResourceSpec'] = request.resourceSpec;
  }
  if (!Util.isUnset(request.serviceId)) {
    query['ServiceId'] = request.serviceId;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.resourceInfo)) {
    body['ResourceInfo'] = request.resourceInfo;
  }
  if (!Util.isUnset(request.resourceSelector)) {
    body['ResourceSelector'] = request.resourceSelector;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RescaleDeviceService',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Scales out a bare metal device.
 *
 * @param request RescaleDeviceServiceRequest
 * @return RescaleDeviceServiceResponse
 */
async function rescaleDeviceService(request: RescaleDeviceServiceRequest): RescaleDeviceServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return rescaleDeviceServiceWithOptions(request, runtime);
}

model ResetAICInstanceRequest {
  instanceId?: string(name='InstanceId', description='The ID of the AIC instance.', example='aic-instance****'),
  serverId?: string(name='ServerId', description='The ID of the server.', example='cas-instance****'),
}

model ResetAICInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ResetAICInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetAICInstanceResponseBody(name='body'),
}

/**
 * @summary Resets an Android in Container (AIC) instance.
 *
 * @param request ResetAICInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ResetAICInstanceResponse
 */
async function resetAICInstanceWithOptions(request: ResetAICInstanceRequest, runtime: Util.RuntimeOptions): ResetAICInstanceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetAICInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Resets an Android in Container (AIC) instance.
 *
 * @param request ResetAICInstanceRequest
 * @return ResetAICInstanceResponse
 */
async function resetAICInstance(request: ResetAICInstanceRequest): ResetAICInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAICInstanceWithOptions(request, runtime);
}

model ResetDiskRequest {
  diskId?: string(name='DiskId', description='The ID of the disk that you want to roll back.

This parameter is required.', example='d-bp199lyny9b3****'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot that you want to use to roll back the disk.

This parameter is required.', example='sp-bp199lyny9b3****'),
}

model ResetDiskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C0003E8B-B930-4F59-ADC0-0E209A9012A8'),
}

model ResetDiskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetDiskResponseBody(name='body'),
}

/**
 * @summary Rolls back a disk by using a snapshot.
 *
 * @description When you call this operation, take note of the following items:
 * *   The disk must be in the In Use (In_Use) or Unattached (Available) state.
 * *   The instance to which the disk is attached must be in the Stopped (Stopped) state. You can call the [StopInstance](~~StopInstance~~) operation to stop an instance.
 * *   The specified snapshot must be created from the disk specified by the DiskId parameter.
 * *   If the response contains `{"OperationLocks": {"LockReason" : "security"}}` when you query information about an ENS instance by calling the [DescribeInstances](~~DescribeInstances~~) operation, the instance is locked for security reasons and no operations are allowed on the instance.
 *
 * @param request ResetDiskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ResetDiskResponse
 */
async function resetDiskWithOptions(request: ResetDiskRequest, runtime: Util.RuntimeOptions): ResetDiskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetDisk',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Rolls back a disk by using a snapshot.
 *
 * @description When you call this operation, take note of the following items:
 * *   The disk must be in the In Use (In_Use) or Unattached (Available) state.
 * *   The instance to which the disk is attached must be in the Stopped (Stopped) state. You can call the [StopInstance](~~StopInstance~~) operation to stop an instance.
 * *   The specified snapshot must be created from the disk specified by the DiskId parameter.
 * *   If the response contains `{"OperationLocks": {"LockReason" : "security"}}` when you query information about an ENS instance by calling the [DescribeInstances](~~DescribeInstances~~) operation, the instance is locked for security reasons and no operations are allowed on the instance.
 *
 * @param request ResetDiskRequest
 * @return ResetDiskResponse
 */
async function resetDisk(request: ResetDiskRequest): ResetDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetDiskWithOptions(request, runtime);
}

model ResizeDiskRequest {
  diskId?: string(name='DiskId', description='The ID of the disk that you want to resize.

This parameter is required.', example='d-5tzm9wnhzlhjzcbtxo465****'),
  newSize?: string(name='NewSize', description='The size of the disk that you want to resize. Unit: GiB.

This parameter is required.', example='100'),
}

model ResizeDiskResponseBody = {
  orderId?: string(name='OrderId', description='The order ID.', example='21522202681****'),
  requestId?: string(name='RequestId', description='The request ID.', example='689412F2-8402-181E-8C87-1EF62331DCC4'),
}

model ResizeDiskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResizeDiskResponseBody(name='body'),
}

/**
 * @summary Resizes a pay-as-you-go disk that you purchase.
 *
 * @param request ResizeDiskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ResizeDiskResponse
 */
async function resizeDiskWithOptions(request: ResizeDiskRequest, runtime: Util.RuntimeOptions): ResizeDiskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.newSize)) {
    query['NewSize'] = request.newSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResizeDisk',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Resizes a pay-as-you-go disk that you purchase.
 *
 * @param request ResizeDiskRequest
 * @return ResizeDiskResponse
 */
async function resizeDisk(request: ResizeDiskRequest): ResizeDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return resizeDiskWithOptions(request, runtime);
}

model RevokeSecurityGroupRequest {
  ipProtocol?: string(name='IpProtocol', description='The transport layer protocol. The value of this parameter is case-sensitive. Valid values:

*   tcp
*   udp
*   icmp
*   gre
*   all: all protocols.

This parameter is required.', example='all'),
  policy?: string(name='Policy', description='The authorization policy. Valid values:

*   accept: allows access. This is the default value.
*   drop: denies access and does not return responses.', example='accept'),
  portRange?: string(name='PortRange', description='The range of destination ports that correspond to the transport layer protocol for the security group rule. Valid values:

*   When the IpProtocol parameter is set to tcp or udp, the port number range is **1** to **65535**. The start port number and the end port number are separated by a forward slash (/). Correct example: **1/200**. Incorrect example: **200/1**.
*   When the IpProtocol parameter is set to icmp, the port number range is **-1/-1**, which indicates all ports.
*   When the IpProtocol parameter is set to gre, the port number range is **-1/-1**, which indicates all ports.
*   When the IpProtocol parameter is set to all, the port number range is **-1/-1**, which indicates all ports.

This parameter is required.', example='22/22'),
  priority?: int32(name='Priority', description='The priority of the security group rule. Valid values: **1** to **100**. Default value: **1**.', example='1'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.

This parameter is required.', example='sg-bp67acfmxazb4p****'),
  sourceCidrIp?: string(name='SourceCidrIp', description='The source CIDR block. CIDR blocks and IPv4 addresses are supported. Default value: 0.0.XX.XX/0.

This parameter is required.', example='10.0.XX.XX/8'),
  sourcePortRange?: string(name='SourcePortRange', description='The range of source ports that correspond to the transport layer protocol for the security group rule. Valid values:

*   When the IpProtocol parameter is set to tcp or udp, the port number range is **1** to **65535**. The start port number and the end port number are separated by a forward slash (/). Correct example: **1/200**. Incorrect example: **200/1**.
*   When the IpProtocol parameter is set to icmp, the port number range is **-1/-1**, which indicates all ports.
*   When the IpProtocol parameter is set to gre, the port number range is **-1/-1**, which indicates all ports.
*   When the IpProtocol parameter is set to all, the port number range is **-1/-1**, which indicates all ports.', example='22/22'),
}

model RevokeSecurityGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model RevokeSecurityGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeSecurityGroupResponseBody(name='body'),
}

/**
 * @summary Deletes an inbound security group rule. After the rule is deleted, the access control implemented by the rule is removed.
 *
 * @description *   In the security group-related API documents, inbound traffic refers to the traffic sent by the source and received by the destination.
 * *   You can determine an inbound security group rule by specifying one of the following groups of parameters. You cannot determine a security group rule by specifying only one parameter.
 * *   You can specify one or more of the following parameters to remove access control for a CIDR block: IpProtocol, PortRange, Policy, and SourceCidrIp.
 *
 * @param request RevokeSecurityGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RevokeSecurityGroupResponse
 */
async function revokeSecurityGroupWithOptions(request: RevokeSecurityGroupRequest, runtime: Util.RuntimeOptions): RevokeSecurityGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.portRange)) {
    query['PortRange'] = request.portRange;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.sourceCidrIp)) {
    query['SourceCidrIp'] = request.sourceCidrIp;
  }
  if (!Util.isUnset(request.sourcePortRange)) {
    query['SourcePortRange'] = request.sourcePortRange;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeSecurityGroup',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes an inbound security group rule. After the rule is deleted, the access control implemented by the rule is removed.
 *
 * @description *   In the security group-related API documents, inbound traffic refers to the traffic sent by the source and received by the destination.
 * *   You can determine an inbound security group rule by specifying one of the following groups of parameters. You cannot determine a security group rule by specifying only one parameter.
 * *   You can specify one or more of the following parameters to remove access control for a CIDR block: IpProtocol, PortRange, Policy, and SourceCidrIp.
 *
 * @param request RevokeSecurityGroupRequest
 * @return RevokeSecurityGroupResponse
 */
async function revokeSecurityGroup(request: RevokeSecurityGroupRequest): RevokeSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeSecurityGroupWithOptions(request, runtime);
}

model RevokeSecurityGroupEgressRequest {
  destCidrIp?: string(name='DestCidrIp', description='The destination IP addresses. CIDR blocks and IPv4 addresses are supported.

By default, this parameter is empty.

This parameter is required.', example='10.0.0.0/8'),
  ipProtocol?: string(name='IpProtocol', description='The transport layer protocol. The value of this parameter is case-sensitive. Valid values:

*   tcp
*   udp
*   icmp
*   gre
*   all: All protocols are supported.

This parameter is required.', example='all'),
  policy?: string(name='Policy', description='The action of the security group rule. Valid values:

*   **accept**: allows access.
*   **drop**: denies access and returns no responses.

Default value: **accept**.', example='accept'),
  portRange?: string(name='PortRange', description='The range of destination ports that correspond to the transport layer protocol for the security group rule. Valid values:

*   If you set the IpProtocol parameter to tcp or udp, the port number ranges from **1** to **65535**. The start port number and the end port number are separated by a forward slash (/). Correct example: **1/200**. Incorrect example: **200/1**.
*   When the IpProtocol parameter is set to icmp, the port number range is **-1/-1**, which indicates all ports.
*   When the IpProtocol parameter is set to gre, the port number range is **-1/-1**, which indicates all ports.
*   When the IpProtocol parameter is set to all, the port number range is **-1/-1**, which indicates all ports.

This parameter is required.', example='22/22'),
  priority?: int32(name='Priority', description='The priority of the security group rule. Valid values: **1** to **100**. A smaller value indicates a higher priority.

Default value: **1**.', example='1'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.

This parameter is required.', example='sg-bp67acfmxazb4ph***'),
  sourcePortRange?: string(name='SourcePortRange', description='The range of port numbers that correspond to the transport layer protocol for the source security group. Valid values:

*   If you set the IpProtocol parameter to tcp or udp, the port number ranges from **1** to **65535**. The start port number and the end port number are separated by a forward slash (/). Correct example: **1/200**. Incorrect example: **200/1**.
*   When the IpProtocol parameter is set to icmp, the port number range is **-1/-1**, which indicates all ports.
*   When the IpProtocol parameter is set to gre, the port number range is **-1/-1**, which indicates all ports.
*   When the IpProtocol parameter is set to all, the port number range is **-1/-1**, which indicates all ports.', example='22/22'),
}

model RevokeSecurityGroupEgressResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model RevokeSecurityGroupEgressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeSecurityGroupEgressResponseBody(name='body'),
}

/**
 * @summary Deletes an outbound security group rule. After the rule is deleted, the access control implemented by the rule is removed.
 *
 * @description >  In the security group-related API documents, outbound traffic refers to the traffic sent by the source and received by the destination.
 *
 * @param request RevokeSecurityGroupEgressRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RevokeSecurityGroupEgressResponse
 */
async function revokeSecurityGroupEgressWithOptions(request: RevokeSecurityGroupEgressRequest, runtime: Util.RuntimeOptions): RevokeSecurityGroupEgressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destCidrIp)) {
    query['DestCidrIp'] = request.destCidrIp;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.portRange)) {
    query['PortRange'] = request.portRange;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.sourcePortRange)) {
    query['SourcePortRange'] = request.sourcePortRange;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeSecurityGroupEgress',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes an outbound security group rule. After the rule is deleted, the access control implemented by the rule is removed.
 *
 * @description >  In the security group-related API documents, outbound traffic refers to the traffic sent by the source and received by the destination.
 *
 * @param request RevokeSecurityGroupEgressRequest
 * @return RevokeSecurityGroupEgressResponse
 */
async function revokeSecurityGroupEgress(request: RevokeSecurityGroupEgressRequest): RevokeSecurityGroupEgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeSecurityGroupEgressWithOptions(request, runtime);
}

model RollbackApplicationRequest {
  appId?: string(name='AppId', description='The ID of the application.

This parameter is required.', example='474bdef0-d149-4695-abfb-52912d91****'),
  fromAppVersion?: string(name='FromAppVersion', description='The current version number.

This parameter is required.', example='v2-1'),
  timeout?: int32(name='Timeout', description='The timeout period of the asynchronous rollback operation. Unit: seconds. Default value: 300.', example='1800'),
  toAppVersion?: string(name='ToAppVersion', description='The target version number. By default, the system automatically rolls back the container version to the previous version.', example='v2'),
}

model RollbackApplicationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C0003E8B-B930-4F59-ADC0-0E209A9012A8'),
}

model RollbackApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RollbackApplicationResponseBody(name='body'),
}

/**
 * @summary Rolls back the container version of a specific application.
 *
 * @param request RollbackApplicationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RollbackApplicationResponse
 */
async function rollbackApplicationWithOptions(request: RollbackApplicationRequest, runtime: Util.RuntimeOptions): RollbackApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.fromAppVersion)) {
    query['FromAppVersion'] = request.fromAppVersion;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  if (!Util.isUnset(request.toAppVersion)) {
    query['ToAppVersion'] = request.toAppVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RollbackApplication',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Rolls back the container version of a specific application.
 *
 * @param request RollbackApplicationRequest
 * @return RollbackApplicationResponse
 */
async function rollbackApplication(request: RollbackApplicationRequest): RollbackApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return rollbackApplicationWithOptions(request, runtime);
}

model RunInstancesRequest {
  amount?: long(name='Amount', description='The number of instances that you want to create. Valid values: 1 to 100.

This parameter is required.', example='1'),
  autoReleaseTime?: string(name='AutoReleaseTime', description='The time when to automatically release the pay-as-you-go instance. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time must be in Coordinated Universal Time (UTC).

*   If the value of `ss` is not `00`, the start time is automatically rounded down to the nearest minute based on the value of `mm`.
*   The specified time must be at least one hour later than the current time.

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2023-06-28T14:38:52Z'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal for the premium bandwidth plan. Examples:

*   **true**.
*   **false** (default).

>  This parameter is not available when InstanceChargeType is set to PostPaid.', example='true'),
  autoUseCoupon?: string(name='AutoUseCoupon', description='Specifies whether to use coupons. Default value: true.', example='true'),
  billingCycle?: string(name='BillingCycle', description='The billing cycle of computing resources of the instance. Only pay-as-you-go instances are supported. Valid values:

*   **Day**.
*   **Month**.', example='Day'),
  carrier?: string(name='Carrier', description='The Internet service provider (ISP).

>  This parameter is not available if ScheduleAreaLevel is set to Region and is required if ScheduleAreaLevel is set to other values.', example='telecom'),
  dataDisk?: [ 
    {
      category?: string(name='Category', description='The category of the disk. Examples:

*   **cloud_efficiency**: ultra disk.
*   **cloud_ssd**: all-flash disk.
*   **local_hdd**: local HDD.
*   **local_ssd**: local SSD.', example='cloud_efficiency'),
      encrypted?: boolean(name='Encrypted', description='Specifies whether to encrypt the disk. Valid values:

*   true.
*   false (default).', example='false'),
      KMSKeyId?: string(name='KMSKeyId', description='The ID of the Key Management Service (KMS) key that is used for the disk. Valid values:

*   true.
*   false (default).

>  If you set the Encrypted parameter to true, the default service key is used when the KMSKeyId parameter is empty.', example='false'),
      size?: long(name='Size', description='The size of a data disk. Unit: GiB.', example='20'),
    }
  ](name='DataDisk', description='The specifications of data disks.'),
  ensRegionId?: string(name='EnsRegionId', description='The ID of the node.

>  This parameter is required if ScheduleAreaLevel is set to Region and is not available if ScheduleAreaLevel is set to other values.', example='cn-foshan-telecom'),
  hostName?: string(name='HostName', description='The name of the host.', example='test-HostName'),
  imageId?: string(name='ImageId', description='The ID of the image. For ARM PCB-based server instances, leave this parameter empty. For other instances, this parameter is required.', example='m-5si16wo6simkt267p8b7hcmy3'),
  instanceChargeStrategy?: string(name='InstanceChargeStrategy', description='The billing policy of the instance. Valid values:

*   **instance**: Bills are generated based on instances.
*   If you do not specify this parameter, bills are generated based on users.', example='instance'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Examples:

*   **PrePaid**: subscription.
*   **PostPaid**: pay-as-you-go.

This parameter is required.', example='PostPaid'),
  instanceName?: string(name='InstanceName', description='The name of the instance. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-).

The default value of this parameter is the value of the InstanceId parameter.', example='TestName'),
  instanceType?: string(name='InstanceType', description='The instance type.

This parameter is required.', example='ens.sn1.small'),
  internetChargeType?: string(name='InternetChargeType', description='The bandwidth billing method. Valid values:

*   **BandwidthByDay**: pay by daily peak bandwidth
*   **95BandwidthByMonth**: pay by monthly 95th percentile bandwidth

>  This parameter is required if you purchase an ENS instance for the first time. The value that you specified is used as the default value for subsequent purchases.', example='BandwidthByDay'),
  internetMaxBandwidthOut?: long(name='InternetMaxBandwidthOut', description='The maximum public bandwidth. If the value of this parameter is greater than 0, a public IP address is assigned to the instance.

This parameter is required.', example='1'),
  ipType?: string(name='IpType', description='The type of the IP address. Valid values:

*   **ipv4** (default).
*   **ipv6**.
*   **ipv4Andipv6** (single stack).
*   **ipv4Withipv6** (dual stack).', example='ipv4'),
  keyPairName?: string(name='KeyPairName', description='The name of the key pair.

>  You need to specify at least one of **Password**, **KeyPairName**, and **PasswordInherit**.', example='wx2-jumpserver'),
  netDistrictCode?: string(name='NetDistrictCode', description='The code of the region.

>  This parameter is not available if ScheduleAreaLevel is set to Region and is required if ScheduleAreaLevel is set to other values.', example='350000'),
  netWorkId?: string(name='NetWorkId', description='The ID of the network.

>  This parameter is available only if ScheduleAreaLevel is set to Region and cannot be configured if ScheduleAreaLevel is set to other values. Otherwise, an error occurs.', example='net-id'),
  password?: string(name='Password', description='The password that is used to connect to the instance.

>  You need to specify at least one of **Password**, **KeyPairName**, and **PasswordInherit**.', example='testPassword'),
  passwordInherit?: boolean(name='PasswordInherit', description='Specifies whether to use the preset password of the image. Valid values:

*   **true**
*   **false**

>  You need to specify at least one of **Password**, **KeyPairName**, and **PasswordInherit**.', example='false'),
  period?: long(name='Period', description='The unit of the subscription period.

*   If **PeriodUnit** is set to **Day**, **Period** can only be set to **3**.
*   If **PeriodUnit** is **Month**, **Period** can be set to **1 to 9** or **12**.', example='1-9,12'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription period. Valid values:

*   **Month** (default).
*   **Day**.', example='Month'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address.

>  This parameter is available only if ScheduleAreaLevel is set to Region and cannot be configured if ScheduleAreaLevel is set to other values. Otherwise, an error occurs. If you specify a private IP address, the number of instances must be 1. The private IP address takes effect only when the private IP address and the vSwitch ID are not empty.', example='10.0.0.120'),
  publicIpIdentification?: boolean(name='PublicIpIdentification', description='Specifies whether to enable public IP address identification. Valid values: true and false. Default value: false.', example='true'),
  scheduleAreaLevel?: string(name='ScheduleAreaLevel', description='The scheduling level. This parameter specifies area-level scheduling or node-level scheduling. Valid values:

*   **Big**: greater area
*   **Middle**: province
*   **Small**: city
*   **Region**: node

This parameter is required.', example='Region'),
  schedulingPriceStrategy?: string(name='SchedulingPriceStrategy', description='The scheduling price policy. Examples:

*   **PriceHighPriority**: The high price prevails.
*   **PriceLowPriority**: The low price prevails.', example='PriceHighPriority'),
  schedulingStrategy?: string(name='SchedulingStrategy', description='The scheduling policy of the taint. Valid values:

*   **Concentrate**
*   **Disperse**

>  If ScheduleAreaLevel is set to Region, set this parameter to **Concentrate**. If ScheduleAreaLevel is set to other values, set this parameter to Concentrate or Disperse based on your business requirements.', example='concentrate'),
  securityId?: string(name='SecurityId', description='The ID of security group.', example='sg-test'),
  spotDuration?: int32(name='SpotDuration', description='The protection period of the preemptible instance. Unit: hours. Default value: 1. Valid values:

*   1: After a preemptible instance is created, Alibaba Cloud ensures that the instance is not automatically released within 1 hour. After the 1-hour protection period ends, the system compares the bid price with the market price and checks the resource inventory to determine whether to retain or release the instance.
*   0: After a preemptible instance is created, Alibaba Cloud does not ensure that the instance runs for 1 hour. The system compares the bid price with the market price and checks the resource inventory to determine whether to retain or release the instance.

Alibaba Cloud sends an ECS system event to notify you 5 minutes before the instance is released. Preemptible instances are billed by second. We recommend that you specify an appropriate protection period based on your business requirements.', example='2'),
  spotStrategy?: string(name='SpotStrategy', description='The bidding policy for the pay-as-you-go instance. This parameter is valid only when the `InstanceChargeType` parameter is set to `PostPaid`. Valid values:

*   NoSpot: The elastic container instances are pay-as-you-go instances.
*   SpotAsPriceGo: The instance is a preemptible instance for which the market price at the time of purchase is automatically used as the bidding price.

Default value: NoSpot.', example='SpotAsPriceGo'),
  systemDisk?: {
    category?: string(name='Category', description='The category of the system disk.', example='local_ssd'),
    size?: long(name='Size', description='The size of the system disk. Unit: GiB.', example='50'),
  }(name='SystemDisk', description='The specification of the system disk.'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='team'),
      value?: string(name='Value', description='The value of the tag.', example='tagValue'),
    }
  ](name='Tag', description='The tags.'),
  uniqueSuffix?: boolean(name='UniqueSuffix', description='Specifies whether to append sequential suffixes to the hostname specified by the **HostName** parameter and to the instance name specified by the **InstanceName** parameter. The sequential suffixes range from 001 to 999.', example='True'),
  userData?: string(name='UserData', description='The custom data. The maximum data size is 16 KB. You can specify **UserData**. **UserData** must be Base64-encoded.', example='ZWtest'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.

>  This parameter is available only if ScheduleAreaLevel is set to Region and cannot be configured if ScheduleAreaLevel is set to other values. Otherwise, an error occurs.', example='vsw-5sagnw7m613oulalkd10nv0ob'),
}

model RunInstancesShrinkRequest {
  amount?: long(name='Amount', description='The number of instances that you want to create. Valid values: 1 to 100.

This parameter is required.', example='1'),
  autoReleaseTime?: string(name='AutoReleaseTime', description='The time when to automatically release the pay-as-you-go instance. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time must be in Coordinated Universal Time (UTC).

*   If the value of `ss` is not `00`, the start time is automatically rounded down to the nearest minute based on the value of `mm`.
*   The specified time must be at least one hour later than the current time.

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2023-06-28T14:38:52Z'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal for the premium bandwidth plan. Examples:

*   **true**.
*   **false** (default).

>  This parameter is not available when InstanceChargeType is set to PostPaid.', example='true'),
  autoUseCoupon?: string(name='AutoUseCoupon', description='Specifies whether to use coupons. Default value: true.', example='true'),
  billingCycle?: string(name='BillingCycle', description='The billing cycle of computing resources of the instance. Only pay-as-you-go instances are supported. Valid values:

*   **Day**.
*   **Month**.', example='Day'),
  carrier?: string(name='Carrier', description='The Internet service provider (ISP).

>  This parameter is not available if ScheduleAreaLevel is set to Region and is required if ScheduleAreaLevel is set to other values.', example='telecom'),
  dataDiskShrink?: string(name='DataDisk', description='The specifications of data disks.'),
  ensRegionId?: string(name='EnsRegionId', description='The ID of the node.

>  This parameter is required if ScheduleAreaLevel is set to Region and is not available if ScheduleAreaLevel is set to other values.', example='cn-foshan-telecom'),
  hostName?: string(name='HostName', description='The name of the host.', example='test-HostName'),
  imageId?: string(name='ImageId', description='The ID of the image. For ARM PCB-based server instances, leave this parameter empty. For other instances, this parameter is required.', example='m-5si16wo6simkt267p8b7hcmy3'),
  instanceChargeStrategy?: string(name='InstanceChargeStrategy', description='The billing policy of the instance. Valid values:

*   **instance**: Bills are generated based on instances.
*   If you do not specify this parameter, bills are generated based on users.', example='instance'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Examples:

*   **PrePaid**: subscription.
*   **PostPaid**: pay-as-you-go.

This parameter is required.', example='PostPaid'),
  instanceName?: string(name='InstanceName', description='The name of the instance. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-).

The default value of this parameter is the value of the InstanceId parameter.', example='TestName'),
  instanceType?: string(name='InstanceType', description='The instance type.

This parameter is required.', example='ens.sn1.small'),
  internetChargeType?: string(name='InternetChargeType', description='The bandwidth billing method. Valid values:

*   **BandwidthByDay**: pay by daily peak bandwidth
*   **95BandwidthByMonth**: pay by monthly 95th percentile bandwidth

>  This parameter is required if you purchase an ENS instance for the first time. The value that you specified is used as the default value for subsequent purchases.', example='BandwidthByDay'),
  internetMaxBandwidthOut?: long(name='InternetMaxBandwidthOut', description='The maximum public bandwidth. If the value of this parameter is greater than 0, a public IP address is assigned to the instance.

This parameter is required.', example='1'),
  ipType?: string(name='IpType', description='The type of the IP address. Valid values:

*   **ipv4** (default).
*   **ipv6**.
*   **ipv4Andipv6** (single stack).
*   **ipv4Withipv6** (dual stack).', example='ipv4'),
  keyPairName?: string(name='KeyPairName', description='The name of the key pair.

>  You need to specify at least one of **Password**, **KeyPairName**, and **PasswordInherit**.', example='wx2-jumpserver'),
  netDistrictCode?: string(name='NetDistrictCode', description='The code of the region.

>  This parameter is not available if ScheduleAreaLevel is set to Region and is required if ScheduleAreaLevel is set to other values.', example='350000'),
  netWorkId?: string(name='NetWorkId', description='The ID of the network.

>  This parameter is available only if ScheduleAreaLevel is set to Region and cannot be configured if ScheduleAreaLevel is set to other values. Otherwise, an error occurs.', example='net-id'),
  password?: string(name='Password', description='The password that is used to connect to the instance.

>  You need to specify at least one of **Password**, **KeyPairName**, and **PasswordInherit**.', example='testPassword'),
  passwordInherit?: boolean(name='PasswordInherit', description='Specifies whether to use the preset password of the image. Valid values:

*   **true**
*   **false**

>  You need to specify at least one of **Password**, **KeyPairName**, and **PasswordInherit**.', example='false'),
  period?: long(name='Period', description='The unit of the subscription period.

*   If **PeriodUnit** is set to **Day**, **Period** can only be set to **3**.
*   If **PeriodUnit** is **Month**, **Period** can be set to **1 to 9** or **12**.', example='1-9,12'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription period. Valid values:

*   **Month** (default).
*   **Day**.', example='Month'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address.

>  This parameter is available only if ScheduleAreaLevel is set to Region and cannot be configured if ScheduleAreaLevel is set to other values. Otherwise, an error occurs. If you specify a private IP address, the number of instances must be 1. The private IP address takes effect only when the private IP address and the vSwitch ID are not empty.', example='10.0.0.120'),
  publicIpIdentification?: boolean(name='PublicIpIdentification', description='Specifies whether to enable public IP address identification. Valid values: true and false. Default value: false.', example='true'),
  scheduleAreaLevel?: string(name='ScheduleAreaLevel', description='The scheduling level. This parameter specifies area-level scheduling or node-level scheduling. Valid values:

*   **Big**: greater area
*   **Middle**: province
*   **Small**: city
*   **Region**: node

This parameter is required.', example='Region'),
  schedulingPriceStrategy?: string(name='SchedulingPriceStrategy', description='The scheduling price policy. Examples:

*   **PriceHighPriority**: The high price prevails.
*   **PriceLowPriority**: The low price prevails.', example='PriceHighPriority'),
  schedulingStrategy?: string(name='SchedulingStrategy', description='The scheduling policy of the taint. Valid values:

*   **Concentrate**
*   **Disperse**

>  If ScheduleAreaLevel is set to Region, set this parameter to **Concentrate**. If ScheduleAreaLevel is set to other values, set this parameter to Concentrate or Disperse based on your business requirements.', example='concentrate'),
  securityId?: string(name='SecurityId', description='The ID of security group.', example='sg-test'),
  spotDuration?: int32(name='SpotDuration', description='The protection period of the preemptible instance. Unit: hours. Default value: 1. Valid values:

*   1: After a preemptible instance is created, Alibaba Cloud ensures that the instance is not automatically released within 1 hour. After the 1-hour protection period ends, the system compares the bid price with the market price and checks the resource inventory to determine whether to retain or release the instance.
*   0: After a preemptible instance is created, Alibaba Cloud does not ensure that the instance runs for 1 hour. The system compares the bid price with the market price and checks the resource inventory to determine whether to retain or release the instance.

Alibaba Cloud sends an ECS system event to notify you 5 minutes before the instance is released. Preemptible instances are billed by second. We recommend that you specify an appropriate protection period based on your business requirements.', example='2'),
  spotStrategy?: string(name='SpotStrategy', description='The bidding policy for the pay-as-you-go instance. This parameter is valid only when the `InstanceChargeType` parameter is set to `PostPaid`. Valid values:

*   NoSpot: The elastic container instances are pay-as-you-go instances.
*   SpotAsPriceGo: The instance is a preemptible instance for which the market price at the time of purchase is automatically used as the bidding price.

Default value: NoSpot.', example='SpotAsPriceGo'),
  systemDiskShrink?: string(name='SystemDisk', description='The specification of the system disk.'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='team'),
      value?: string(name='Value', description='The value of the tag.', example='tagValue'),
    }
  ](name='Tag', description='The tags.'),
  uniqueSuffix?: boolean(name='UniqueSuffix', description='Specifies whether to append sequential suffixes to the hostname specified by the **HostName** parameter and to the instance name specified by the **InstanceName** parameter. The sequential suffixes range from 001 to 999.', example='True'),
  userData?: string(name='UserData', description='The custom data. The maximum data size is 16 KB. You can specify **UserData**. **UserData** must be Base64-encoded.', example='ZWtest'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.

>  This parameter is available only if ScheduleAreaLevel is set to Region and cannot be configured if ScheduleAreaLevel is set to other values. Otherwise, an error occurs.', example='vsw-5sagnw7m613oulalkd10nv0ob'),
}

model RunInstancesResponseBody = {
  instanceIds?: [ string ](name='InstanceIds', description='The IDs of instances.'),
  orderId?: string(name='OrderId', description='The order ID.', example='213177957850399'),
  requestId?: string(name='RequestId', description='The request ID.', example='91E4AFBE-4E35-5D2A-A886-BB477C9953D2'),
}

model RunInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunInstancesResponseBody(name='body'),
}

/**
 * @summary Purchases instances.
 *
 * @param tmpReq RunInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunInstancesResponse
 */
async function runInstancesWithOptions(tmpReq: RunInstancesRequest, runtime: Util.RuntimeOptions): RunInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new RunInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dataDisk)) {
    request.dataDiskShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataDisk, 'DataDisk', 'json');
  }
  if (!Util.isUnset(tmpReq.systemDisk)) {
    request.systemDiskShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.systemDisk, 'SystemDisk', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.autoReleaseTime)) {
    query['AutoReleaseTime'] = request.autoReleaseTime;
  }
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.autoUseCoupon)) {
    query['AutoUseCoupon'] = request.autoUseCoupon;
  }
  if (!Util.isUnset(request.billingCycle)) {
    query['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.carrier)) {
    query['Carrier'] = request.carrier;
  }
  if (!Util.isUnset(request.dataDiskShrink)) {
    query['DataDisk'] = request.dataDiskShrink;
  }
  if (!Util.isUnset(request.ensRegionId)) {
    query['EnsRegionId'] = request.ensRegionId;
  }
  if (!Util.isUnset(request.hostName)) {
    query['HostName'] = request.hostName;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.instanceChargeStrategy)) {
    query['InstanceChargeStrategy'] = request.instanceChargeStrategy;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.internetMaxBandwidthOut)) {
    query['InternetMaxBandwidthOut'] = request.internetMaxBandwidthOut;
  }
  if (!Util.isUnset(request.ipType)) {
    query['IpType'] = request.ipType;
  }
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  if (!Util.isUnset(request.netDistrictCode)) {
    query['NetDistrictCode'] = request.netDistrictCode;
  }
  if (!Util.isUnset(request.netWorkId)) {
    query['NetWorkId'] = request.netWorkId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.passwordInherit)) {
    query['PasswordInherit'] = request.passwordInherit;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.publicIpIdentification)) {
    query['PublicIpIdentification'] = request.publicIpIdentification;
  }
  if (!Util.isUnset(request.scheduleAreaLevel)) {
    query['ScheduleAreaLevel'] = request.scheduleAreaLevel;
  }
  if (!Util.isUnset(request.schedulingPriceStrategy)) {
    query['SchedulingPriceStrategy'] = request.schedulingPriceStrategy;
  }
  if (!Util.isUnset(request.schedulingStrategy)) {
    query['SchedulingStrategy'] = request.schedulingStrategy;
  }
  if (!Util.isUnset(request.securityId)) {
    query['SecurityId'] = request.securityId;
  }
  if (!Util.isUnset(request.spotDuration)) {
    query['SpotDuration'] = request.spotDuration;
  }
  if (!Util.isUnset(request.spotStrategy)) {
    query['SpotStrategy'] = request.spotStrategy;
  }
  if (!Util.isUnset(request.systemDiskShrink)) {
    query['SystemDisk'] = request.systemDiskShrink;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.uniqueSuffix)) {
    query['UniqueSuffix'] = request.uniqueSuffix;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RunInstances',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Purchases instances.
 *
 * @param request RunInstancesRequest
 * @return RunInstancesResponse
 */
async function runInstances(request: RunInstancesRequest): RunInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return runInstancesWithOptions(request, runtime);
}

model RunServiceScheduleRequest {
  appId?: string(name='AppId', description='The ID of the application.

This parameter is required.', example='474bdef0-d149-4695-abfb-52912d9143f0'),
  clientIp?: string(name='ClientIp', description='The IP address of the client.

This parameter is required.', example='180.166.45.146'),
  directorys?: string(name='Directorys', description='The directory to which the data file is mounted. The value must be a full path and cannot be \\\\"/../\\\\". Example: ["/data/app01", "/data/user"]. Specify the relative path of the virtual device for this parameter. For example, specify /data for this parameter when the actual path of the virtual device is /data/{input path}.', example='[\\\\"/data/app01\\\\", \\\\"/data/user\\\\"]'),
  podConfigName?: string(name='PodConfigName', description='The parameter does not take effect.', example='android'),
  preLockedTimeout?: int32(name='PreLockedTimeout', description='The maximum duration for locking an idle device. Unit: seconds. This parameter takes effect only if you set ServiceAction to PreSchedule. Default value: 300.', example='300'),
  scheduleStrategy?: string(name='ScheduleStrategy', description='The scheduling policy of the device. The value must be a JSON string.', example='{\\\\"selectLevel\\\\": \\\\"RegionId\\\\", \\\\"values\\\\": [\\\\"cn-chengdu-telecom-2\\\\"]  }'),
  serviceAction?: string(name='ServiceAction', description='The scheduling operation. The value must be of the enumeration type. Valid values:

Container scenario:

*   Start: selects and activates an idle cloud device.
*   Stop: stops and releases the cloud device.
*   Console: performs the scheduling operation when the device is in the scheduling state.

Bare metal instance or virtual machine scenario:

*   PreSchedule: locks a virtual machine instance for scheduling.
*   Confirm: confirms the scheduling operation.
*   Cancel: cancels the scheduling operation.
*   Console: performs the scheduling operation when the device is in the scheduling state.

This parameter is required.', example='Start'),
  serviceCommands?: string(name='ServiceCommands', description='The service commands. The value must be a JSON string.', example='[{\\\\"containerName\\\\": \\\\"android\\\\",       \\\\"commands\\\\":[\\\\"cat /tmp/token.json\\\\"]    },    {      \\\\"commands\\\\":[\\\\"ls -l /data/data\\\\"]    }]'),
  uuid?: string(name='Uuid', description='The UUID of the device.

This parameter is required.', example='hdm_d4f1059a8e1afc0956bd71b497faa433'),
}

model RunServiceScheduleResponseBody = {
  commandResults?: {
    commandResult?: [ 
    {
      command?: string(name='Command', description='The command.', example='ls -l /data'),
      containerName?: string(name='ContainerName', description='The name of the container.', example='android'),
      resultMsg?: string(name='ResultMsg', description='The execution result of the command.', example='success'),
    }
  ](name='CommandResult')
  }(name='CommandResults', description='The execution results of the commands.'),
  index?: int32(name='Index', description='The index number of the scheduled virtual device (pod).', example='1'),
  instanceId?: string(name='InstanceId', description='The ID of the scheduled instance.', example='i-5qvji3mom4ec013dyygmtxlkj'),
  instanceIp?: string(name='InstanceIp', description='The IP address of the scheduled instance.', example='172.16.246.11'),
  instancePort?: int32(name='InstancePort', description='The start port of the scheduled instance.', example='1024'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  requestRepeated?: string(name='RequestRepeated', description='Indicates whether the request is repeated. This parameter is not returned if ServcieAction is set to Console.', example='false'),
  tcpPorts?: boolean(name='TcpPorts', description='The TCP port range of the scheduled instance or container. The value is in the ${from}-$-{to} format. Example: 80-88.', example='"80-88"'),
}

model RunServiceScheduleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunServiceScheduleResponseBody(name='body'),
}

/**
 * @summary Schedules the nearest idle resources including instances and pods for your device based on the user ID and IP address and initializes the virtual environment.
 *
 * @param request RunServiceScheduleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunServiceScheduleResponse
 */
async function runServiceScheduleWithOptions(request: RunServiceScheduleRequest, runtime: Util.RuntimeOptions): RunServiceScheduleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.clientIp)) {
    query['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.directorys)) {
    query['Directorys'] = request.directorys;
  }
  if (!Util.isUnset(request.podConfigName)) {
    query['PodConfigName'] = request.podConfigName;
  }
  if (!Util.isUnset(request.preLockedTimeout)) {
    query['PreLockedTimeout'] = request.preLockedTimeout;
  }
  if (!Util.isUnset(request.scheduleStrategy)) {
    query['ScheduleStrategy'] = request.scheduleStrategy;
  }
  if (!Util.isUnset(request.serviceAction)) {
    query['ServiceAction'] = request.serviceAction;
  }
  if (!Util.isUnset(request.serviceCommands)) {
    query['ServiceCommands'] = request.serviceCommands;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RunServiceSchedule',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Schedules the nearest idle resources including instances and pods for your device based on the user ID and IP address and initializes the virtual environment.
 *
 * @param request RunServiceScheduleRequest
 * @return RunServiceScheduleResponse
 */
async function runServiceSchedule(request: RunServiceScheduleRequest): RunServiceScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return runServiceScheduleWithOptions(request, runtime);
}

model SaveSDGRequest {
  SDGId?: string(name='SDGId', description='The ID of the SDG to be saved.', example='sdg-xxxx'),
}

model SaveSDGResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C0003E8B-B930-4F59-ADC0-0E209A9012A8'),
}

model SaveSDGResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveSDGResponseBody(name='body'),
}

/**
 * @summary Saves the disk of a specific device as a shared data group (SDG).
 *
 * @param request SaveSDGRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SaveSDGResponse
 */
async function saveSDGWithOptions(request: SaveSDGRequest, runtime: Util.RuntimeOptions): SaveSDGResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SaveSDG',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Saves the disk of a specific device as a shared data group (SDG).
 *
 * @param request SaveSDGRequest
 * @return SaveSDGResponse
 */
async function saveSDG(request: SaveSDGRequest): SaveSDGResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveSDGWithOptions(request, runtime);
}

model SetBackendServersRequest {
  backendServers?: [ 
    {
      serverId?: string(name='ServerId', description='The ID of the instance that you want to use as the backend server.

This parameter is required.', example='i-5ze0o05xccvbljtn****'),
      type?: string(name='Type', description='The type of the backend server. Valid values:

*   **ens**: ENS instance.
*   **eni**: Elastic Network Interface (ENI) instance.', example='ens'),
      weight?: int32(name='Weight', description='The weight of the backend server. Default value: 100. Valid values: **0** to **100**.

>  The value 0 indicates that requests are not forwarded to the backend server.

This parameter is required.', example='20'),
    }
  ](name='BackendServers', description='The list of backend servers that you want to add. You can modify at most 20 backend servers.

This parameter is required.'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the Edge Load Balancer (ELB) instance.

This parameter is required.', example='lb-5s7crik3yo3bp03gqrbp5****'),
}

model SetBackendServersShrinkRequest {
  backendServersShrink?: string(name='BackendServers', description='The list of backend servers that you want to add. You can modify at most 20 backend servers.

This parameter is required.'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the Edge Load Balancer (ELB) instance.

This parameter is required.', example='lb-5s7crik3yo3bp03gqrbp5****'),
}

model SetBackendServersResponseBody = {
  backendServers?: {
    backendServer?: [ 
    {
      ip?: string(name='Ip', description='The IP address of the backend server.', example='192.168.0.1'),
      port?: int32(name='Port', description='The backend port that is used by the ELB instance.', example='0'),
      serverId?: string(name='ServerId', description='The ID of the instance that you want to use as the backend server.', example='i-5uf6hj58zvml4ali8****'),
      type?: string(name='Type', description='The type of the backend server. Valid values:

*   **ens**: ENS instance.
*   **eni**: ENI instance.', example='ens'),
      weight?: int32(name='Weight', description='The weight of the backend server. Default value: 100. Valid values: **0** to **100**.

>  The value 0 indicates that requests are not forwarded to the backend server.', example='100'),
    }
  ](name='BackendServer')
  }(name='BackendServers', description='The backend servers.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model SetBackendServersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetBackendServersResponseBody(name='body'),
}

/**
 * @summary Sets the weights of backend servers.
 *
 * @description *   You can call this operation up to 100 times per second.
 * *   You can call this operation up to 10 times per second per account.
 *
 * @param tmpReq SetBackendServersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetBackendServersResponse
 */
async function setBackendServersWithOptions(tmpReq: SetBackendServersRequest, runtime: Util.RuntimeOptions): SetBackendServersResponse {
  Util.validateModel(tmpReq);
  var request = new SetBackendServersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.backendServers)) {
    request.backendServersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.backendServers, 'BackendServers', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.backendServersShrink)) {
    query['BackendServers'] = request.backendServersShrink;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetBackendServers',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Sets the weights of backend servers.
 *
 * @description *   You can call this operation up to 100 times per second.
 * *   You can call this operation up to 10 times per second per account.
 *
 * @param request SetBackendServersRequest
 * @return SetBackendServersResponse
 */
async function setBackendServers(request: SetBackendServersRequest): SetBackendServersResponse {
  var runtime = new Util.RuntimeOptions{};
  return setBackendServersWithOptions(request, runtime);
}

model SetLoadBalancerHTTPListenerAttributeRequest {
  description?: string(name='Description', description='The name of the listener. The value must be **1** to **80** characters in length.

>  The value cannot start with `http://` or `https://`.', example='http_8080'),
  healthCheck?: string(name='HealthCheck', description='Specifies whether to enable the health check feature. Valid values:

*   **on**
*   **off**', example='on'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='The port that is used for health checks. Valid values: **1** to **65535**. If you leave this parameter empty, the port specified by BackendServerPort is used for health checks.

>  This parameter takes effect only if you set HealthCheck to on.', example='65500'),
  healthCheckDomain?: string(name='HealthCheckDomain', description='The domain name that is used for health checks.

>  This parameter takes effect only if you set HealthCheck to on.', example='www.aliyundoc.com'),
  healthCheckHttpCode?: string(name='HealthCheckHttpCode', description='The HTTP status code for a successful health check. Valid values:

*   **http_2xx** (default)
*   **http_3xx**.
*   **http_4xx**
*   **http_5xx**

>  This parameter takes effect only if you set HealthCheck to on.', example='http_2xx'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='The interval at which health checks are performed. Valid values: **1** to **50**. Unit: seconds.

>  This parameter takes effect only if you set HealthCheck to on.', example='2'),
  healthCheckMethod?: string(name='HealthCheckMethod', description='The HTTP request method for health checks. Valid values:

*   **head**
*   **get**

>  This parameter takes effect only if the HealthCheck parameter is set to on.', example='head'),
  healthCheckTimeout?: int32(name='HealthCheckTimeout', description='The timeout period of a health check response. If a backend server does not respond within the specified timeout period, the server fails to pass the health check.

*   Default value: 5.
*   Valid values: **1** to **300**.
*   Unit: seconds.

> 

*   This parameter takes effect only if the HealthCheck parameter is set to on.

*   If the value of HealthCheckTimeout is smaller than the value of HealthCheckInterval, the timeout period specified by HealthCheckTimeout becomes invalid, and the value of HealthCheckInterval is used as the timeout period.', example='5'),
  healthCheckURI?: string(name='HealthCheckURI', description='The URI used for health checks. The URI must be **1** to **80** characters in length.

> 

*   A URL must start with a forward slash (`/`) but cannot contain only forward slashes (`/`).

*   This parameter takes effect only if the HealthCheck parameter is set to on.', example='/checkpreload.htm'),
  healthyThreshold?: int32(name='HealthyThreshold', description='The number of consecutive successful health checks that must occur before an unhealthy and inaccessible backend server is declared healthy and accessible. Valid values: **2** to **10**.

>  This parameter takes effect only if you set HealthCheck to on.', example='3'),
  idleTimeout?: int32(name='IdleTimeout', description='The timeout period for idle connections. Default value: 15. Valid values: **1** to **60**. Unit: seconds.

>  If no request is received within the specified timeout period, ELB closes the connection. When another request is received, CLB establishes a new connection.', example='15'),
  listenerPort?: int32(name='ListenerPort', description='The listener port whose attributes are to be modified. Valid values: **1** to **65535**.

This parameter is required.', example='8080'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the Edge Load Balancer (ELB) instance.

This parameter is required.', example='lb-5snthcyu1x10g7tywj7iu****'),
  requestTimeout?: int32(name='RequestTimeout', description='The timeout period of requests. Default value: 60. Valid values: **1** to **180**. Unit: seconds.

>  If no response is received from the backend server within the specified timeout period, ELB returns an HTTP 504 error code to the client.', example='60'),
  scheduler?: string(name='Scheduler', description='The scheduling algorithm. Valid values:

*   **wrr**: Backend servers with higher weights receive more requests than those with lower weights.
*   **wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections on a backend server. If two backend servers have the same weight, the backend server that has fewer connections receives more requests.
*   **rr**: Requests are distributed to backend servers in sequence.
*   **sch**: Consistent hashing that is based on source IP addresses. Requests from the same source IP address are distributed to the same backend server.
*   **qch**: Consistent hashing based on Quick UDP Internet Connection (QUIC) IDs. Requests that contain the same QUIC ID are scheduled to the same backend server.
*   **iqch**: Consistent hashing based on three specific bytes of iQUIC CID. Requests with the same second, third, and forth bytes are scheduled to the same backend server.', example='wrr'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='The number of consecutive failed health checks that must occur before a healthy and accessible backend server is declared unhealthy and inaccessible. Valid values: **2** to **10**.

>  This parameter takes effect only if you set HealthCheck to on.', example='3'),
  XForwardedFor?: string(name='XForwardedFor', description='Specifies whether to use the X-Forwarded-For header to obtain the real IP address of the client. Valid values:

*   **on** (default)
*   **off**', example='on'),
}

model SetLoadBalancerHTTPListenerAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model SetLoadBalancerHTTPListenerAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetLoadBalancerHTTPListenerAttributeResponseBody(name='body'),
}

/**
 * @summary Modifies the configurations of an HTTP listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request SetLoadBalancerHTTPListenerAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetLoadBalancerHTTPListenerAttributeResponse
 */
async function setLoadBalancerHTTPListenerAttributeWithOptions(request: SetLoadBalancerHTTPListenerAttributeRequest, runtime: Util.RuntimeOptions): SetLoadBalancerHTTPListenerAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.healthCheck)) {
    query['HealthCheck'] = request.healthCheck;
  }
  if (!Util.isUnset(request.healthCheckConnectPort)) {
    query['HealthCheckConnectPort'] = request.healthCheckConnectPort;
  }
  if (!Util.isUnset(request.healthCheckDomain)) {
    query['HealthCheckDomain'] = request.healthCheckDomain;
  }
  if (!Util.isUnset(request.healthCheckHttpCode)) {
    query['HealthCheckHttpCode'] = request.healthCheckHttpCode;
  }
  if (!Util.isUnset(request.healthCheckInterval)) {
    query['HealthCheckInterval'] = request.healthCheckInterval;
  }
  if (!Util.isUnset(request.healthCheckMethod)) {
    query['HealthCheckMethod'] = request.healthCheckMethod;
  }
  if (!Util.isUnset(request.healthCheckTimeout)) {
    query['HealthCheckTimeout'] = request.healthCheckTimeout;
  }
  if (!Util.isUnset(request.healthCheckURI)) {
    query['HealthCheckURI'] = request.healthCheckURI;
  }
  if (!Util.isUnset(request.healthyThreshold)) {
    query['HealthyThreshold'] = request.healthyThreshold;
  }
  if (!Util.isUnset(request.idleTimeout)) {
    query['IdleTimeout'] = request.idleTimeout;
  }
  if (!Util.isUnset(request.listenerPort)) {
    query['ListenerPort'] = request.listenerPort;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  if (!Util.isUnset(request.requestTimeout)) {
    query['RequestTimeout'] = request.requestTimeout;
  }
  if (!Util.isUnset(request.scheduler)) {
    query['Scheduler'] = request.scheduler;
  }
  if (!Util.isUnset(request.unhealthyThreshold)) {
    query['UnhealthyThreshold'] = request.unhealthyThreshold;
  }
  if (!Util.isUnset(request.XForwardedFor)) {
    query['XForwardedFor'] = request.XForwardedFor;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetLoadBalancerHTTPListenerAttribute',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configurations of an HTTP listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request SetLoadBalancerHTTPListenerAttributeRequest
 * @return SetLoadBalancerHTTPListenerAttributeResponse
 */
async function setLoadBalancerHTTPListenerAttribute(request: SetLoadBalancerHTTPListenerAttributeRequest): SetLoadBalancerHTTPListenerAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return setLoadBalancerHTTPListenerAttributeWithOptions(request, runtime);
}

model SetLoadBalancerHTTPSListenerAttributeRequest {
  description?: string(name='Description', description='The name of the listener. The value must be **1** to **80** characters in length.

>  The value cannot start with `http://` or `https://`.', example='Monitoring instructions'),
  healthCheck?: string(name='HealthCheck', description='Specifies whether to enable the health check feature. Valid values:

*   **on**
*   **off**', example='on'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='The port that is used for health checks. Valid values: **1** to **65535**. If you leave this parameter empty, the port specified by BackendServerPort is used for health checks.

>  This parameter takes effect only if you set HealthCheck to on.', example='7001'),
  healthCheckDomain?: string(name='HealthCheckDomain', description='The domain name that you want to use for health checks.

>  This parameter takes effect only if you set HealthCheck to on.', example='www.example.com'),
  healthCheckHttpCode?: string(name='HealthCheckHttpCode', description='The HTTP status code for a successful health check. Valid values:

*   **http_2xx** (default)
*   **http_3xx**.
*   **http_4xx**
*   **http_5xx**

>  This parameter takes effect only if you set HealthCheck to on.', example='http_2xx'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='The interval at which health checks are performed. Valid values: **1** to **50**. Unit: seconds.

>  This parameter takes effect only if you set HealthCheck to on.', example='2'),
  healthCheckMethod?: string(name='HealthCheckMethod', description='The health check method used in HTTP health checks. Valid values:

*   **head** (default): requests the head of the page.
*   **get**: requests the specified part of the page and returns the entity body.

>  This parameter takes effect only if you set HealthCheck to on.', example='get'),
  healthCheckTimeout?: int32(name='HealthCheckTimeout', description='The timeout period of a health check response. If the backend ENS does not respond within the specified time, the health check fails.

*   Default value: 5.
*   Valid values: **1** to **300**.
*   Unit: seconds.

> 

*   This parameter takes effect only if the HealthCheck parameter is set to on.

*   If the value of the HealthCheckTimeout property is smaller than the value of the HealthCheckInterval property, the timeout period specified by the HealthCheckTimeout property becomes invalid and the value of the HealthCheckInterval property is used as the timeout period.', example='9'),
  healthCheckURI?: string(name='HealthCheckURI', description='The URI used for health checks. The URI must be **1** to **80** characters in length.

> 

*   A URL must start with a forward slash (`/`) but cannot contain only forward slashes (`/`).

*   This parameter takes effect only if the HealthCheck parameter is set to on.', example='/checkpreload.htm'),
  healthyThreshold?: int32(name='HealthyThreshold', description='The number of consecutive successful health checks that must occur before an unhealthy and inaccessible backend server is declared healthy and accessible. Valid values: **2** to **10**.

>  This parameter takes effect only if you set HealthCheck to on.', example='3'),
  idleTimeout?: int32(name='IdleTimeout', description='The timeout period for idle connections. Default value: 15. Valid values: **1** to **60**. Unit: seconds.

>  If no request is received within the specified timeout period, ELB closes the connection. When another request is received, ELB establishes a new connection.', example='15'),
  listenerPort?: int32(name='ListenerPort', description='The listener port whose attributes are to be modified. Valid values: **1** to **65535**.

This parameter is required.', example='10002'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the Edge Load Balancer (ELB) instance.

This parameter is required.', example='lb-5snthcyu1x10g7tywj7iu****'),
  requestTimeout?: int32(name='RequestTimeout', description='The timeout period of requests. Default value: 60. Valid values: **1** to **180**. Unit: seconds.

>  If no response is received from the backend server within the specified timeout period, ELB returns an HTTP 504 error code to the client.', example='60'),
  scheduler?: string(name='Scheduler', description='The routing algorithm. Valid values:

*   **wrr**: Backend servers with higher weights receive more requests than those with lower weights.
*   **wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections to a backend server. If two backend servers have the same weight, the backend server that has fewer connections receives more requests.
*   **rr**: Requests are distributed to backend servers in sequence.
*   **sch**: consistent hashing that is based on source IP addresses. Requests from the same source IP address are distributed to the same backend server.
*   **qch**: consistent hashing that is based on QUIC connection IDs. Requests that contain the same QUIC connection ID are distributed to the same backend server.
*   **iqch**: consistent hashing that is based on specific three bytes of the iQUIC CIDs. Requests whose second to fourth bytes are the same are distributed to the same backend server.', example='wrr'),
  serverCertificateId?: string(name='ServerCertificateId', description='The ID of the server certificate.', example='6027667'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='The number of consecutive failed health checks that must occur before a healthy and accessible backend server is declared unhealthy and inaccessible. Valid values: **2** to **10**.

>  This parameter takes effect only if you set HealthCheck to on.', example='3'),
}

model SetLoadBalancerHTTPSListenerAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model SetLoadBalancerHTTPSListenerAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetLoadBalancerHTTPSListenerAttributeResponseBody(name='body'),
}

/**
 * @summary Modifies the configurations of an HTTPS listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request SetLoadBalancerHTTPSListenerAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetLoadBalancerHTTPSListenerAttributeResponse
 */
async function setLoadBalancerHTTPSListenerAttributeWithOptions(request: SetLoadBalancerHTTPSListenerAttributeRequest, runtime: Util.RuntimeOptions): SetLoadBalancerHTTPSListenerAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.healthCheck)) {
    query['HealthCheck'] = request.healthCheck;
  }
  if (!Util.isUnset(request.healthCheckConnectPort)) {
    query['HealthCheckConnectPort'] = request.healthCheckConnectPort;
  }
  if (!Util.isUnset(request.healthCheckDomain)) {
    query['HealthCheckDomain'] = request.healthCheckDomain;
  }
  if (!Util.isUnset(request.healthCheckHttpCode)) {
    query['HealthCheckHttpCode'] = request.healthCheckHttpCode;
  }
  if (!Util.isUnset(request.healthCheckInterval)) {
    query['HealthCheckInterval'] = request.healthCheckInterval;
  }
  if (!Util.isUnset(request.healthCheckMethod)) {
    query['HealthCheckMethod'] = request.healthCheckMethod;
  }
  if (!Util.isUnset(request.healthCheckTimeout)) {
    query['HealthCheckTimeout'] = request.healthCheckTimeout;
  }
  if (!Util.isUnset(request.healthCheckURI)) {
    query['HealthCheckURI'] = request.healthCheckURI;
  }
  if (!Util.isUnset(request.healthyThreshold)) {
    query['HealthyThreshold'] = request.healthyThreshold;
  }
  if (!Util.isUnset(request.idleTimeout)) {
    query['IdleTimeout'] = request.idleTimeout;
  }
  if (!Util.isUnset(request.listenerPort)) {
    query['ListenerPort'] = request.listenerPort;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  if (!Util.isUnset(request.requestTimeout)) {
    query['RequestTimeout'] = request.requestTimeout;
  }
  if (!Util.isUnset(request.scheduler)) {
    query['Scheduler'] = request.scheduler;
  }
  if (!Util.isUnset(request.serverCertificateId)) {
    query['ServerCertificateId'] = request.serverCertificateId;
  }
  if (!Util.isUnset(request.unhealthyThreshold)) {
    query['UnhealthyThreshold'] = request.unhealthyThreshold;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetLoadBalancerHTTPSListenerAttribute',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configurations of an HTTPS listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request SetLoadBalancerHTTPSListenerAttributeRequest
 * @return SetLoadBalancerHTTPSListenerAttributeResponse
 */
async function setLoadBalancerHTTPSListenerAttribute(request: SetLoadBalancerHTTPSListenerAttributeRequest): SetLoadBalancerHTTPSListenerAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return setLoadBalancerHTTPSListenerAttributeWithOptions(request, runtime);
}

model SetLoadBalancerStatusRequest {
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ELB instance.

This parameter is required.', example='lb-5t18quoohsrc3xkf86spmnu77'),
  loadBalancerStatus?: string(name='LoadBalancerStatus', description='The status of the listener after the modification. Valid values:

*   **Active**: The listener for the instance can forward the received traffic based on forwarding rules.
*   **InActive**: The listener for the instance does not forward the received traffic.

This parameter is required.', example='Active'),
}

model SetLoadBalancerStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model SetLoadBalancerStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetLoadBalancerStatusResponseBody(name='body'),
}

/**
 * @summary Modifies the status of the listener for an Edge Load Balancer (ELB) instance.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request SetLoadBalancerStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetLoadBalancerStatusResponse
 */
async function setLoadBalancerStatusWithOptions(request: SetLoadBalancerStatusRequest, runtime: Util.RuntimeOptions): SetLoadBalancerStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  if (!Util.isUnset(request.loadBalancerStatus)) {
    query['LoadBalancerStatus'] = request.loadBalancerStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetLoadBalancerStatus',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the status of the listener for an Edge Load Balancer (ELB) instance.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request SetLoadBalancerStatusRequest
 * @return SetLoadBalancerStatusResponse
 */
async function setLoadBalancerStatus(request: SetLoadBalancerStatusRequest): SetLoadBalancerStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setLoadBalancerStatusWithOptions(request, runtime);
}

model SetLoadBalancerTCPListenerAttributeRequest {
  description?: string(name='Description', description='The description of the listener. The description must be **1** to **80** characters in length.

>  The value cannot start with `http://` or `https://`.', example='example'),
  eipTransmit?: string(name='EipTransmit', description='Specifies whether to enable Elastic IP address (EIP) pass-through. Valid values:

*   **on**
*   **off** (default)', example='on'),
  establishedTimeout?: int32(name='EstablishedTimeout', description='The timeout period of a connection. Valid values: **10** to **900**. Unit: seconds.', example='500'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='The port that is used for health checks. Valid values: **1** to **65535**. If you leave this parameter empty, the port specified by BackendServerPort is used for health checks.', example='8000'),
  healthCheckConnectTimeout?: int32(name='HealthCheckConnectTimeout', description='The timeout period for a health check response. If the value of HealthCheckTimeout is smaller than the value of HealthCheckInterval, the timeout period specified by HealthCheckTimeout becomes invalid, and the value of HealthCheckInterval is used as the timeout period.

*   Default value: 5.
*   Valid values: **1** to **300**.
*   Unit: seconds.

>  If the value of the HealthCheckConnectTimeout parameter is smaller than that of the HealthCheckInterval parameter, the timeout period specified by the HealthCheckConnectTimeout parameter is ignored and the period of time specified by the HealthCheckInterval parameter is used as the timeout period.', example='100'),
  healthCheckDomain?: string(name='HealthCheckDomain', description='The domain name that you want to use for health checks.', example='www.aliyundoc.com'),
  healthCheckHttpCode?: string(name='HealthCheckHttpCode', description='The HTTP status code for a successful health check. Valid values:

*   **http_2xx** (default)
*   **http_3xx**.
*   **http_4xx**
*   **http_5xx**', example='http_2xx'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='The interval at which health checks are performed. Valid values: **1** to **50**. Unit: seconds.', example='5'),
  healthCheckType?: string(name='HealthCheckType', description='The type of health checks. Valid values:

*   **tcp** (default)
*   **http**', example='tcp'),
  healthCheckURI?: string(name='HealthCheckURI', description='The Uniform Resource Identifier (URI) that you want to use for health checks. The URI must be **1** to **80** characters in length.

>  The URL must start with `/` and contain characters other than `/`.', example='/aliyundoc/index.html'),
  healthyThreshold?: int32(name='HealthyThreshold', description='The number of consecutive successful health checks that must occur before an unhealthy and inaccessible backend server is declared healthy and accessible. Valid values: **2** to **10**.', example='4'),
  listenerPort?: int32(name='ListenerPort', description='The listener port whose attributes are to be modified. Valid values: **1** to **65535**.

This parameter is required.', example='80'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the Edge Load Balancer (ELB) instance.

This parameter is required.', example='lb-5snthcyu1x10g7tywj7iu****'),
  persistenceTimeout?: int32(name='PersistenceTimeout', description='The timeout period of session persistence.

*   Default value: 0. If the default value is used, the system disables session persistence.
*   Valid values: **0** to **3600**.
*   Unit: seconds.', example='0'),
  scheduler?: string(name='Scheduler', description='The routing algorithm. Valid values:

*   **wrr**: Backend servers with higher weights receive more requests than those with lower weights.
*   **wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections to a backend server. If two backend servers have the same weight, the backend server that has fewer connections receives more requests.
*   **rr**: Requests are distributed to backend servers in sequence.
*   **sch**: consistent hashing that is based on source IP addresses. Requests from the same source IP address are distributed to the same backend server.
*   **qch**: consistent hashing that is based on QUIC connection IDs. Requests that contain the same QUIC connection ID are distributed to the same backend server.
*   **iqch**: consistent hashing that is based on specific three bytes of the iQUIC CIDs. Requests whose second to fourth bytes are the same are distributed to the same backend server.', example='wrr'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='The number of consecutive failed health checks that must occur before a healthy and accessible backend server is declared unhealthy and inaccessible. Valid values: **2** to **10**.', example='4'),
}

model SetLoadBalancerTCPListenerAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='06F00FBB-3D9E-4CCE-9D43-1A6946A75456'),
}

model SetLoadBalancerTCPListenerAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetLoadBalancerTCPListenerAttributeResponseBody(name='body'),
}

/**
 * @summary Modifies the configurations of a TCP listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request SetLoadBalancerTCPListenerAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetLoadBalancerTCPListenerAttributeResponse
 */
async function setLoadBalancerTCPListenerAttributeWithOptions(request: SetLoadBalancerTCPListenerAttributeRequest, runtime: Util.RuntimeOptions): SetLoadBalancerTCPListenerAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.eipTransmit)) {
    query['EipTransmit'] = request.eipTransmit;
  }
  if (!Util.isUnset(request.establishedTimeout)) {
    query['EstablishedTimeout'] = request.establishedTimeout;
  }
  if (!Util.isUnset(request.healthCheckConnectPort)) {
    query['HealthCheckConnectPort'] = request.healthCheckConnectPort;
  }
  if (!Util.isUnset(request.healthCheckConnectTimeout)) {
    query['HealthCheckConnectTimeout'] = request.healthCheckConnectTimeout;
  }
  if (!Util.isUnset(request.healthCheckDomain)) {
    query['HealthCheckDomain'] = request.healthCheckDomain;
  }
  if (!Util.isUnset(request.healthCheckHttpCode)) {
    query['HealthCheckHttpCode'] = request.healthCheckHttpCode;
  }
  if (!Util.isUnset(request.healthCheckInterval)) {
    query['HealthCheckInterval'] = request.healthCheckInterval;
  }
  if (!Util.isUnset(request.healthCheckType)) {
    query['HealthCheckType'] = request.healthCheckType;
  }
  if (!Util.isUnset(request.healthCheckURI)) {
    query['HealthCheckURI'] = request.healthCheckURI;
  }
  if (!Util.isUnset(request.healthyThreshold)) {
    query['HealthyThreshold'] = request.healthyThreshold;
  }
  if (!Util.isUnset(request.listenerPort)) {
    query['ListenerPort'] = request.listenerPort;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  if (!Util.isUnset(request.persistenceTimeout)) {
    query['PersistenceTimeout'] = request.persistenceTimeout;
  }
  if (!Util.isUnset(request.scheduler)) {
    query['Scheduler'] = request.scheduler;
  }
  if (!Util.isUnset(request.unhealthyThreshold)) {
    query['UnhealthyThreshold'] = request.unhealthyThreshold;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetLoadBalancerTCPListenerAttribute',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configurations of a TCP listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request SetLoadBalancerTCPListenerAttributeRequest
 * @return SetLoadBalancerTCPListenerAttributeResponse
 */
async function setLoadBalancerTCPListenerAttribute(request: SetLoadBalancerTCPListenerAttributeRequest): SetLoadBalancerTCPListenerAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return setLoadBalancerTCPListenerAttributeWithOptions(request, runtime);
}

model SetLoadBalancerUDPListenerAttributeRequest {
  description?: string(name='Description', description='The name of the listener. The valuemust be **1** to **80** characters in length.

>  The value cannot start with `http://` or `https://`.', example='example'),
  eipTransmit?: string(name='EipTransmit', description='Specifies whether to enable Elastic IP address (EIP) pass-through. Valid values:

*   **on**
*   **off** (default)', example='on'),
  establishedTimeout?: int32(name='EstablishedTimeout', description='The timeout period of a connection. Valid values: **10** to **900**. Default value: **900**. Unit: seconds.', example='500'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='The port that is used for health checks. Valid values: **1** to **65535**. If you leave this parameter empty, the port specified for BackendServerPort is used for health checks.', example='8080'),
  healthCheckConnectTimeout?: int32(name='HealthCheckConnectTimeout', description='The timeout period of a health check response. If the backend ENS does not respond within the specified time, the health check fails.

*   Default value: 5.
*   Valid values: **1** to **300**.
*   Unit: seconds.

>  If the value of the HealthCheckTimeout property is smaller than the value of the HealthCheckInterval property, the timeout period specified by the HealthCheckTimeout property becomes invalid and the value of the HealthCheckInterval property is used as the timeout period.', example='100'),
  healthCheckExp?: string(name='HealthCheckExp', description='The response string for UDP listener health checks. The string can be up to 64 characters in length and can contain only letters and digits.', example='ok'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='The interval at which health checks are performed. Valid values: **1** to **50**. Unit: seconds.', example='5'),
  healthCheckReq?: string(name='HealthCheckReq', description='The request string for UDP listener health checks. The string can be up to 64 characters in length and can contain only letters and digits.', example='hello'),
  healthyThreshold?: int32(name='HealthyThreshold', description='The number of consecutive successful health checks that must occur before an unhealthy and inaccessible backend server is declared healthy and accessible. Valid values: **2** to **10**.', example='4'),
  listenerPort?: int32(name='ListenerPort', description='The listener port whose attributes are to be modified. Valid values: **1** to **65535**.

This parameter is required.', example='80'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the Edge Load Balancer (ELB) instance.

This parameter is required.', example='lb-5pzipr2fszqtl2xf64uy5****'),
  scheduler?: string(name='Scheduler', description='The routing algorithm. Valid values:

*   **wrr**: Backend servers with higher weights receive more requests than those with lower weights.
*   **wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections on a backend server. If two backend servers have the same weight, the backend server that has fewer connections receives more requests.
*   **rr**: Requests are distributed to backend servers in sequence.
*   **sch**: consistent hashing that is based on source IP addresses. Requests from the same source IP address are distributed to the same backend server.
*   **qch**: consistent hashing that is based on QUIC connection IDs. Requests that contain the same QUIC connection ID are distributed to the same backend server.
*   **iqch**: consistent hashing that is based on specific three bytes of the iQUIC CIDs. Requests whose second to fourth bytes are the same are distributed to the same backend server.', example='wrr'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='The number of consecutive failed health checks that must occur before a healthy and accessible backend server is declared unhealthy and inaccessible. Valid values: **2** to **10**.', example='4'),
}

model SetLoadBalancerUDPListenerAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='06F00FBB-3D9E-4CCE-9D43-1A6946A75456'),
}

model SetLoadBalancerUDPListenerAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetLoadBalancerUDPListenerAttributeResponseBody(name='body'),
}

/**
 * @summary Modifies the configurations of a UDP listener.
 *
 * @description *   You can call this operation up to 100 times per second.
 * *   You can call this operation up to 10 times per second per account.
 *
 * @param request SetLoadBalancerUDPListenerAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetLoadBalancerUDPListenerAttributeResponse
 */
async function setLoadBalancerUDPListenerAttributeWithOptions(request: SetLoadBalancerUDPListenerAttributeRequest, runtime: Util.RuntimeOptions): SetLoadBalancerUDPListenerAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.eipTransmit)) {
    query['EipTransmit'] = request.eipTransmit;
  }
  if (!Util.isUnset(request.establishedTimeout)) {
    query['EstablishedTimeout'] = request.establishedTimeout;
  }
  if (!Util.isUnset(request.healthCheckConnectPort)) {
    query['HealthCheckConnectPort'] = request.healthCheckConnectPort;
  }
  if (!Util.isUnset(request.healthCheckConnectTimeout)) {
    query['HealthCheckConnectTimeout'] = request.healthCheckConnectTimeout;
  }
  if (!Util.isUnset(request.healthCheckExp)) {
    query['HealthCheckExp'] = request.healthCheckExp;
  }
  if (!Util.isUnset(request.healthCheckInterval)) {
    query['HealthCheckInterval'] = request.healthCheckInterval;
  }
  if (!Util.isUnset(request.healthCheckReq)) {
    query['HealthCheckReq'] = request.healthCheckReq;
  }
  if (!Util.isUnset(request.healthyThreshold)) {
    query['HealthyThreshold'] = request.healthyThreshold;
  }
  if (!Util.isUnset(request.listenerPort)) {
    query['ListenerPort'] = request.listenerPort;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  if (!Util.isUnset(request.scheduler)) {
    query['Scheduler'] = request.scheduler;
  }
  if (!Util.isUnset(request.unhealthyThreshold)) {
    query['UnhealthyThreshold'] = request.unhealthyThreshold;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetLoadBalancerUDPListenerAttribute',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configurations of a UDP listener.
 *
 * @description *   You can call this operation up to 100 times per second.
 * *   You can call this operation up to 10 times per second per account.
 *
 * @param request SetLoadBalancerUDPListenerAttributeRequest
 * @return SetLoadBalancerUDPListenerAttributeResponse
 */
async function setLoadBalancerUDPListenerAttribute(request: SetLoadBalancerUDPListenerAttributeRequest): SetLoadBalancerUDPListenerAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return setLoadBalancerUDPListenerAttributeWithOptions(request, runtime);
}

model StartEpnInstanceRequest {
  EPNInstanceId?: string(name='EPNInstanceId', description='The ID of the EPN instance.

This parameter is required.', example='epn-****'),
}

model StartEpnInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model StartEpnInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartEpnInstanceResponseBody(name='body'),
}

/**
 * @summary Starts an edge network instance.
 *
 * @param request StartEpnInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartEpnInstanceResponse
 */
async function startEpnInstanceWithOptions(request: StartEpnInstanceRequest, runtime: Util.RuntimeOptions): StartEpnInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.EPNInstanceId)) {
    query['EPNInstanceId'] = request.EPNInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartEpnInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Starts an edge network instance.
 *
 * @param request StartEpnInstanceRequest
 * @return StartEpnInstanceResponse
 */
async function startEpnInstance(request: StartEpnInstanceRequest): StartEpnInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startEpnInstanceWithOptions(request, runtime);
}

model StartInstanceRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance. You can start only one instance.

This parameter is required.', example='i-instance****'),
}

model StartInstanceResponseBody = {
  code?: int32(name='Code', description='The returned service code. 0 indicates that the request was successful.', example='0'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model StartInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartInstanceResponseBody(name='body'),
}

/**
 * @summary Starts an instance.
 *
 * @description *   You can call the operation only when the instance is in the Stopped state.
 * *   If the operation is successful, the status of the instance becomes Starting.
 *
 * @param request StartInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartInstanceResponse
 */
async function startInstanceWithOptions(request: StartInstanceRequest, runtime: Util.RuntimeOptions): StartInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Starts an instance.
 *
 * @description *   You can call the operation only when the instance is in the Stopped state.
 * *   If the operation is successful, the status of the instance becomes Starting.
 *
 * @param request StartInstanceRequest
 * @return StartInstanceResponse
 */
async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startInstanceWithOptions(request, runtime);
}

model StartInstancesRequest {
  instanceIds?: [ string ](name='InstanceIds'),
}

model StartInstancesShrinkRequest {
  instanceIdsShrink?: string(name='InstanceIds'),
}

model StartInstancesResponseBody = {
  instanceResponses?: [
    InstanceOperateResponse
  ](name='InstanceResponses'),
  requestId?: string(name='RequestId'),
}

model StartInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartInstancesResponseBody(name='body'),
}

/**
 * @summary 选择批量实例进行启动操作
 *
 * @param tmpReq StartInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartInstancesResponse
 */
async function startInstancesWithOptions(tmpReq: StartInstancesRequest, runtime: Util.RuntimeOptions): StartInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new StartInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'simple');
  }
  var query = {};
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['InstanceIds'] = request.instanceIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartInstances',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 选择批量实例进行启动操作
 *
 * @param request StartInstancesRequest
 * @return StartInstancesResponse
 */
async function startInstances(request: StartInstancesRequest): StartInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return startInstancesWithOptions(request, runtime);
}

model StartLoadBalancerListenerRequest {
  listenerPort?: int32(name='ListenerPort', description='The listener port to be enabled. Valid values: **1** to **65535**.

This parameter is required.', example='8080'),
  listenerProtocol?: string(name='ListenerProtocol', description='The frontend protocol that is used by the ELB instance. Valid values:

*   tcp
*   udp
*   http
*   https

>  This parameter is required if the same port is used by listeners that use different protocols.', example='tcp'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ELB instance.

This parameter is required.', example='lb-5saivuir6b1mupxjfbhmk****'),
}

model StartLoadBalancerListenerResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model StartLoadBalancerListenerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartLoadBalancerListenerResponseBody(name='body'),
}

/**
 * @summary Enables a listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request StartLoadBalancerListenerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartLoadBalancerListenerResponse
 */
async function startLoadBalancerListenerWithOptions(request: StartLoadBalancerListenerRequest, runtime: Util.RuntimeOptions): StartLoadBalancerListenerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.listenerPort)) {
    query['ListenerPort'] = request.listenerPort;
  }
  if (!Util.isUnset(request.listenerProtocol)) {
    query['ListenerProtocol'] = request.listenerProtocol;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartLoadBalancerListener',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Enables a listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request StartLoadBalancerListenerRequest
 * @return StartLoadBalancerListenerResponse
 */
async function startLoadBalancerListener(request: StartLoadBalancerListenerRequest): StartLoadBalancerListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  return startLoadBalancerListenerWithOptions(request, runtime);
}

model StartSnatIpForSnatEntryRequest {
  snatEntryId?: string(name='SnatEntryId', description='The ID of the SNAT entry.

This parameter is required.', example='snat-5tfi6f8gds82mjmlofeym****'),
  snatIp?: string(name='SnatIp', description='The EIP specified in the SNAT entry.

This parameter is required.', example='219.152.82.143'),
}

model StartSnatIpForSnatEntryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='85BBD491-CE05-5BDA-979E-843FE52B74CF'),
}

model StartSnatIpForSnatEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartSnatIpForSnatEntryResponseBody(name='body'),
}

/**
 * @summary Starts the elastic IP address (EIP) specified in a source network address translation (SNAT) entry.
 *
 * @param request StartSnatIpForSnatEntryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartSnatIpForSnatEntryResponse
 */
async function startSnatIpForSnatEntryWithOptions(request: StartSnatIpForSnatEntryRequest, runtime: Util.RuntimeOptions): StartSnatIpForSnatEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.snatEntryId)) {
    query['SnatEntryId'] = request.snatEntryId;
  }
  if (!Util.isUnset(request.snatIp)) {
    query['SnatIp'] = request.snatIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartSnatIpForSnatEntry',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Starts the elastic IP address (EIP) specified in a source network address translation (SNAT) entry.
 *
 * @param request StartSnatIpForSnatEntryRequest
 * @return StartSnatIpForSnatEntryResponse
 */
async function startSnatIpForSnatEntry(request: StartSnatIpForSnatEntryRequest): StartSnatIpForSnatEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return startSnatIpForSnatEntryWithOptions(request, runtime);
}

model StopEpnInstanceRequest {
  EPNInstanceId?: string(name='EPNInstanceId', description='The ID of the EPN instance.

This parameter is required.', example='epn-20201014152822q2S9tQ'),
}

model StopEpnInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model StopEpnInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopEpnInstanceResponseBody(name='body'),
}

/**
 * @summary Stops an EPN instance.
 *
 * @param request StopEpnInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopEpnInstanceResponse
 */
async function stopEpnInstanceWithOptions(request: StopEpnInstanceRequest, runtime: Util.RuntimeOptions): StopEpnInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.EPNInstanceId)) {
    query['EPNInstanceId'] = request.EPNInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopEpnInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Stops an EPN instance.
 *
 * @param request StopEpnInstanceRequest
 * @return StopEpnInstanceResponse
 */
async function stopEpnInstance(request: StopEpnInstanceRequest): StopEpnInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopEpnInstanceWithOptions(request, runtime);
}

model StopInstanceRequest {
  forceStop?: string(name='ForceStop', description='Specifies whether to forcibly stop the servers.

*   **true**: forcibly stops the instance.
*   **false**: normally stops the servers. This is the default value.', example='true'),
  instanceId?: string(name='InstanceId', description='The ID of the instance that you want to stop. You can specify only one instance ID.

This parameter is required.', example='i-instanceid****'),
}

model StopInstanceResponseBody = {
  code?: int32(name='Code', description='The returned service code. 0 indicates that the request was successful.', example='0'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model StopInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopInstanceResponseBody(name='body'),
}

/**
 * @summary Stops an instance.
 *
 * @description *   You can call this operation to stop instances that are only in the Running state.
 * *   If the call is successful, the state of the instance becomes Stopping.
 * *   Once the instance is stopped, the state of the instance becomes Stopped.
 * *   Force stop is supported, which is equivalent to power-off. Data that is not written to disks on the instance may be lost.
 *
 * @param request StopInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopInstanceResponse
 */
async function stopInstanceWithOptions(request: StopInstanceRequest, runtime: Util.RuntimeOptions): StopInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.forceStop)) {
    query['ForceStop'] = request.forceStop;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopInstance',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Stops an instance.
 *
 * @description *   You can call this operation to stop instances that are only in the Running state.
 * *   If the call is successful, the state of the instance becomes Stopping.
 * *   Once the instance is stopped, the state of the instance becomes Stopped.
 * *   Force stop is supported, which is equivalent to power-off. Data that is not written to disks on the instance may be lost.
 *
 * @param request StopInstanceRequest
 * @return StopInstanceResponse
 */
async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInstanceWithOptions(request, runtime);
}

model StopInstancesRequest {
  instanceIds?: [ string ](name='InstanceIds'),
}

model StopInstancesShrinkRequest {
  instanceIdsShrink?: string(name='InstanceIds'),
}

model StopInstancesResponseBody = {
  instanceResponses?: [
    InstanceOperateResponse
  ](name='InstanceResponses'),
  requestId?: string(name='RequestId'),
}

model StopInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopInstancesResponseBody(name='body'),
}

/**
 * @summary 选择批量实例进行停止操作
 *
 * @param tmpReq StopInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopInstancesResponse
 */
async function stopInstancesWithOptions(tmpReq: StopInstancesRequest, runtime: Util.RuntimeOptions): StopInstancesResponse {
  Util.validateModel(tmpReq);
  var request = new StopInstancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'simple');
  }
  var query = {};
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['InstanceIds'] = request.instanceIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopInstances',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 选择批量实例进行停止操作
 *
 * @param request StopInstancesRequest
 * @return StopInstancesResponse
 */
async function stopInstances(request: StopInstancesRequest): StopInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInstancesWithOptions(request, runtime);
}

model StopLoadBalancerListenerRequest {
  listenerPort?: int32(name='ListenerPort', description='The listener port that you want to disable. Valid values: **1** to **65535**.

This parameter is required.', example='8080'),
  listenerProtocol?: string(name='ListenerProtocol', description='The frontend protocol that is used by the ELB instance.

>  This parameter is required if the same port is used by listeners that use different protocols.', example='tcp'),
  loadBalancerId?: string(name='LoadBalancerId', description='The ID of the ELB instance.

This parameter is required.', example='lb-5sc1s9zrui8lpb8u7cl4f****'),
}

model StopLoadBalancerListenerResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model StopLoadBalancerListenerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopLoadBalancerListenerResponseBody(name='body'),
}

/**
 * @summary Disables a listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request StopLoadBalancerListenerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopLoadBalancerListenerResponse
 */
async function stopLoadBalancerListenerWithOptions(request: StopLoadBalancerListenerRequest, runtime: Util.RuntimeOptions): StopLoadBalancerListenerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.listenerPort)) {
    query['ListenerPort'] = request.listenerPort;
  }
  if (!Util.isUnset(request.listenerProtocol)) {
    query['ListenerProtocol'] = request.listenerProtocol;
  }
  if (!Util.isUnset(request.loadBalancerId)) {
    query['LoadBalancerId'] = request.loadBalancerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopLoadBalancerListener',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Disables a listener.
 *
 * @description *   You can call this operation up to 100 times per second per account.
 * *   You can call this operation up to 10 times per second per user.
 *
 * @param request StopLoadBalancerListenerRequest
 * @return StopLoadBalancerListenerResponse
 */
async function stopLoadBalancerListener(request: StopLoadBalancerListenerRequest): StopLoadBalancerListenerResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopLoadBalancerListenerWithOptions(request, runtime);
}

model StopSnatIpForSnatEntryRequest {
  snatEntryId?: string(name='SnatEntryId', description='The ID of the SNAT entry.

This parameter is required.', example='snat-5tfi6f8gds82mjmlofeym****'),
  snatIp?: string(name='SnatIp', description='The EIP specified in the SNAT entry.

This parameter is required.', example='221.178.103.143'),
}

model StopSnatIpForSnatEntryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9A415CB9-7591-566F-924B-32709578756B'),
}

model StopSnatIpForSnatEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopSnatIpForSnatEntryResponseBody(name='body'),
}

/**
 * @summary Disables an elastic IP address (EIP) in a source network address translation (SNAT) entry.
 *
 * @param request StopSnatIpForSnatEntryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopSnatIpForSnatEntryResponse
 */
async function stopSnatIpForSnatEntryWithOptions(request: StopSnatIpForSnatEntryRequest, runtime: Util.RuntimeOptions): StopSnatIpForSnatEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.snatEntryId)) {
    query['SnatEntryId'] = request.snatEntryId;
  }
  if (!Util.isUnset(request.snatIp)) {
    query['SnatIp'] = request.snatIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopSnatIpForSnatEntry',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Disables an elastic IP address (EIP) in a source network address translation (SNAT) entry.
 *
 * @param request StopSnatIpForSnatEntryRequest
 * @return StopSnatIpForSnatEntryResponse
 */
async function stopSnatIpForSnatEntry(request: StopSnatIpForSnatEntryRequest): StopSnatIpForSnatEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopSnatIpForSnatEntryWithOptions(request, runtime);
}

model TagResourcesRequest {
  resourceId?: [ string ](name='ResourceId', description='The resource IDs. You can add up to 50 resource IDs in a call.

This parameter is required.'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Set the value to instance.

This parameter is required.', example='instance'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N that is added to the resource. Valid values of N: 1 to 20. The tag value cannot be an empty string. The tag value can be up to 128 characters in length. It cannot start with aliyun or acs: and cannot contain http:// or https://.

This parameter is required.', example='team'),
      value?: string(name='Value', description='The value of tag N that is added to the resource. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length. It cannot start with acs: or contain http:// or https://.

This parameter is required.', example='Deep'),
    }
  ](name='Tag', description='The tag that is bound to the instance.

This parameter is required.'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C50C391C-533A-55D3-AC97-5D9333DE288F'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
 * @summary Creates and adds tags to specific Edge Node Service (ENS) resources.
 *
 * @description Before you add tags to a resource, Alibaba Cloud checks the number of existing tags on the resource. If the number exceeds the upper limit, an error message is returned. Only instance resources, such as virtual machines and bare machines, are supported.
 *
 * @param request TagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TagResourcesResponse
 */
async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates and adds tags to specific Edge Node Service (ENS) resources.
 *
 * @description Before you add tags to a resource, Alibaba Cloud checks the number of existing tags on the resource. If the number exceeds the upper limit, an error message is returned. Only instance resources, such as virtual machines and bare machines, are supported.
 *
 * @param request TagResourcesRequest
 * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UnAssociateEnsEipAddressRequest {
  allocationId?: string(name='AllocationId', description='The ID of the EIP.

This parameter is required.', example='eip-5sqa431nx3vee8heqxfxp****'),
  force?: boolean(name='Force', description='Specifies whether to forcefully release the instance if it is in the Running status. Valid values:

*   true. If you set the Force parameter to true, temporary data in the memory and storage of the instance is erased and cannot be restored after you call the operation, which is similar to the effect of a power-off action.
*   false (default)', example='false'),
}

model UnAssociateEnsEipAddressResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4A431388-2D4B-46F4-A96B-D4E6BD0688C1'),
}

model UnAssociateEnsEipAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnAssociateEnsEipAddressResponseBody(name='body'),
}

/**
 * @summary Disassociates an elastic IP address (EIP) from an instance.
 *
 * @param request UnAssociateEnsEipAddressRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UnAssociateEnsEipAddressResponse
 */
async function unAssociateEnsEipAddressWithOptions(request: UnAssociateEnsEipAddressRequest, runtime: Util.RuntimeOptions): UnAssociateEnsEipAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationId)) {
    query['AllocationId'] = request.allocationId;
  }
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnAssociateEnsEipAddress',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Disassociates an elastic IP address (EIP) from an instance.
 *
 * @param request UnAssociateEnsEipAddressRequest
 * @return UnAssociateEnsEipAddressResponse
 */
async function unAssociateEnsEipAddress(request: UnAssociateEnsEipAddressRequest): UnAssociateEnsEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return unAssociateEnsEipAddressWithOptions(request, runtime);
}

model UnassignPrivateIpAddressesRequest {
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.

This parameter is required.', example='eni-f8z57orgmt6d144t****'),
  privateIpAddress?: [ string ](name='PrivateIpAddress', description='The secondary private IP addresses to unassign.

This parameter is required.'),
}

model UnassignPrivateIpAddressesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1ECC937A-AE0E-4626-BE51-DED1D6D1C888'),
}

model UnassignPrivateIpAddressesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnassignPrivateIpAddressesResponseBody(name='body'),
}

/**
 * @summary Unassigns secondary private IP addresses from an elastic network interface (ENI).
 *
 * @param request UnassignPrivateIpAddressesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UnassignPrivateIpAddressesResponse
 */
async function unassignPrivateIpAddressesWithOptions(request: UnassignPrivateIpAddressesRequest, runtime: Util.RuntimeOptions): UnassignPrivateIpAddressesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnassignPrivateIpAddresses',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Unassigns secondary private IP addresses from an elastic network interface (ENI).
 *
 * @param request UnassignPrivateIpAddressesRequest
 * @return UnassignPrivateIpAddressesResponse
 */
async function unassignPrivateIpAddresses(request: UnassignPrivateIpAddressesRequest): UnassignPrivateIpAddressesResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassignPrivateIpAddressesWithOptions(request, runtime);
}

model UnassociateHaVipRequest {
  haVipId?: string(name='HaVipId', description='The ID of the HAVIP that you want to disassociate.

This parameter is required.', example='havip-5p14t****'),
  instanceId?: string(name='InstanceId', description='The ID of the ENS instance or ENI that you want to disassociate from the HAVIP.

This parameter is required.', example='i-5ecpqvk****'),
}

model UnassociateHaVipResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C0003E8B-B930-4F59-ADC0-0E209A9012A8'),
}

model UnassociateHaVipResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnassociateHaVipResponseBody(name='body'),
}

/**
 * @summary Disassociates a high-availability virtual IP address (HAVIP) from an Edge Node Service (ENS) instance or Elastic Network Interface (ENI).
 *
 * @param request UnassociateHaVipRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UnassociateHaVipResponse
 */
async function unassociateHaVipWithOptions(request: UnassociateHaVipRequest, runtime: Util.RuntimeOptions): UnassociateHaVipResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.haVipId)) {
    query['HaVipId'] = request.haVipId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnassociateHaVip',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Disassociates a high-availability virtual IP address (HAVIP) from an Edge Node Service (ENS) instance or Elastic Network Interface (ENI).
 *
 * @param request UnassociateHaVipRequest
 * @return UnassociateHaVipResponse
 */
async function unassociateHaVip(request: UnassociateHaVipRequest): UnassociateHaVipResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassociateHaVipWithOptions(request, runtime);
}

model UnassociateNetworkAclRequest {
  networkAclId?: string(name='NetworkAclId', description='The ID of the network ACL that you want to disassociate from a resource.

This parameter is required.', example='nacl-a2do9e413e0sp****'),
  resource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the resource that you want to disassociate.

This parameter is required.', example='n-5***'),
      resourceType?: string(name='ResourceType', description='The type of the resource that you want to disassociate. Valid values:

*   Network

This parameter is required.', example='Network'),
    }
  ](name='Resource', description='Resources that you want to disassociate. Valid values of **N**: 0 to 29. A maximum of 30 resources can be unbound.

This parameter is required.'),
}

model UnassociateNetworkAclResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model UnassociateNetworkAclResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnassociateNetworkAclResponseBody(name='body'),
}

/**
 * @summary Disassociates a network access control list (ACL) from a network.
 *
 * @param request UnassociateNetworkAclRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UnassociateNetworkAclResponse
 */
async function unassociateNetworkAclWithOptions(request: UnassociateNetworkAclRequest, runtime: Util.RuntimeOptions): UnassociateNetworkAclResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.networkAclId)) {
    query['NetworkAclId'] = request.networkAclId;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnassociateNetworkAcl',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Disassociates a network access control list (ACL) from a network.
 *
 * @param request UnassociateNetworkAclRequest
 * @return UnassociateNetworkAclResponse
 */
async function unassociateNetworkAcl(request: UnassociateNetworkAclRequest): UnassociateNetworkAclResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassociateNetworkAclWithOptions(request, runtime);
}

model UnloadRegionSDGRequest {
  destinationRegionIds?: [ string ](name='DestinationRegionIds', description='The destination nodes.

This parameter is required.'),
  namespaces?: [ string ](name='Namespaces', description='The namespaces.'),
  SDGId?: string(name='SDGId', description='Deletes the shared data group (SDG) ID of the preloaded data.

This parameter is required.', example='sdg-xxxx'),
}

model UnloadRegionSDGShrinkRequest {
  destinationRegionIdsShrink?: string(name='DestinationRegionIds', description='The destination nodes.

This parameter is required.'),
  namespacesShrink?: string(name='Namespaces', description='The namespaces.'),
  SDGId?: string(name='SDGId', description='Deletes the shared data group (SDG) ID of the preloaded data.

This parameter is required.', example='sdg-xxxx'),
}

model UnloadRegionSDGResponseBody = {
  data?: {
    message?: string(name='Message', description='The response message. Success is returned for a successful request.', example='success'),
    result?: {
      failedCount?: long(name='FailedCount', description='The number of failed tasks.', example='0'),
      failedItems?: [ 
        {
          destinationRegionId?: string(name='DestinationRegionId', description='The ID of the destination node.', example='cn-hangzhou-xxx'),
          errorMessage?: string(name='ErrorMessage', description='The error message that is returned.', example='region not found'),
        }
      ](name='FailedItems', description='Details about failed tasks.'),
      successCount?: long(name='SuccessCount', description='The number of successful tasks.', example='1'),
    }(name='Result', description='The execution result of the synchronization request.'),
    success?: boolean(name='Success', description='Indicates whether all tasks are successful. Valid values:

*   true: All tasks are successful.
*   false: Failed tasks exist.', example='true'),
  }(name='Data', description='The returned data object.'),
  requestId?: string(name='RequestId', description='The request ID.', example='125B04C7-3D0D-4245-AF96-14E3758E3F06'),
}

model UnloadRegionSDGResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnloadRegionSDGResponseBody(name='body'),
}

/**
 * @summary Deletes preloaded data.
 *
 * @param tmpReq UnloadRegionSDGRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UnloadRegionSDGResponse
 */
async function unloadRegionSDGWithOptions(tmpReq: UnloadRegionSDGRequest, runtime: Util.RuntimeOptions): UnloadRegionSDGResponse {
  Util.validateModel(tmpReq);
  var request = new UnloadRegionSDGShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.destinationRegionIds)) {
    request.destinationRegionIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.destinationRegionIds, 'DestinationRegionIds', 'json');
  }
  if (!Util.isUnset(tmpReq.namespaces)) {
    request.namespacesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.namespaces, 'Namespaces', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.destinationRegionIdsShrink)) {
    query['DestinationRegionIds'] = request.destinationRegionIdsShrink;
  }
  if (!Util.isUnset(request.namespacesShrink)) {
    query['Namespaces'] = request.namespacesShrink;
  }
  if (!Util.isUnset(request.SDGId)) {
    query['SDGId'] = request.SDGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnloadRegionSDG',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes preloaded data.
 *
 * @param request UnloadRegionSDGRequest
 * @return UnloadRegionSDGResponse
 */
async function unloadRegionSDG(request: UnloadRegionSDGRequest): UnloadRegionSDGResponse {
  var runtime = new Util.RuntimeOptions{};
  return unloadRegionSDGWithOptions(request, runtime);
}

model UnmountInstanceSDGRequest {
  instanceIds?: [ string ](name='InstanceIds', description='The IDs of the instances.

This parameter is required.'),
  SDGId?: string(name='SDGId', description='The ID of the SDG.

This parameter is required.', example='sdg-xxxx'),
}

model UnmountInstanceSDGShrinkRequest {
  instanceIdsShrink?: string(name='InstanceIds', description='The IDs of the instances.

This parameter is required.'),
  SDGId?: string(name='SDGId', description='The ID of the SDG.

This parameter is required.', example='sdg-xxxx'),
}

model UnmountInstanceSDGResponseBody = {
  data?: {
    message?: string(name='Message', description='The response message. Success is returned for a successful request.', example='success'),
    result?: {
      failedCount?: long(name='FailedCount', description='The number of failed tasks.', example='0'),
      failedItems?: [ 
        {
          errMessage?: string(name='ErrMessage', description='The error message.', example='sdg not found'),
          instanceId?: string(name='InstanceId', description='The ID of the instance.', example='aic-xxxxx-0'),
        }
      ](name='FailedItems', description='Details about failed tasks.'),
      successCount?: long(name='SuccessCount', description='The number of successful tasks.', example='1'),
    }(name='Result', description='The execution result of the synchronization request.'),
    success?: boolean(name='Success', description='Indicates whether all tasks are successful. Valid values:

*   true: All tasks are successful.
*   false: Failed tasks exist.', example='true'),
  }(name='Data', description='The returned data object.'),
  requestId?: string(name='RequestId', description='The request ID.', example='125B04C7-3D0D-4245-AF96-14E3758E3F06'),
}

model UnmountInstanceSDGResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnmountInstanceSDGResponseBody(name='body'),
}

/**
 * @summary Unmounts a shared data group (SDG) from instances.
 *
 * @param tmpReq UnmountInstanceSDGRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UnmountInstanceSDGResponse
 */
async function unmountInstanceSDGWithOptions(tmpReq: UnmountInstanceSDGRequest, runtime: Util.RuntimeOptions): UnmountInstanceSDGResponse {
  Util.validateModel(tmpReq);
  var request = new UnmountInstanceSDGShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['InstanceIds'] = request.instanceIdsShrink;
  }
  if (!Util.isUnset(request.SDGId)) {
    query['SDGId'] = request.SDGId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnmountInstanceSDG',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Unmounts a shared data group (SDG) from instances.
 *
 * @param request UnmountInstanceSDGRequest
 * @return UnmountInstanceSDGResponse
 */
async function unmountInstanceSDG(request: UnmountInstanceSDGRequest): UnmountInstanceSDGResponse {
  var runtime = new Util.RuntimeOptions{};
  return unmountInstanceSDGWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to remove all tags from the resource. This parameter takes effect only if you do not specify TagKey.N. Valid values:

*   **true**
*   **false** (default)', example='true'),
  resourceId?: [ string ](name='ResourceId', description='The resource IDs. You can specify up to 50 resource IDs.

This parameter is required.'),
  resourceType?: string(name='ResourceType', description='The type of the resource.

Valid values:

*   instance
*   eip
*   disk
*   network
*   natgateway
*   vswitch

This parameter is required.', example='instance'),
  tagKey?: [ string ](name='TagKey', description='The keys of the tags. Valid values of N: 1 to 20.'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='6AB7715D-8B97-5E81-854B-2429F8C7DEF2'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

/**
 * @summary Removes tags from resources.
 *
 * @param request UntagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UntagResourcesResponse
 */
async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Removes tags from resources.
 *
 * @param request UntagResourcesRequest
 * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateEnsSaleControlRequest {
  aliUidAccount?: string(name='AliUidAccount'),
  commodityCode?: string(name='CommodityCode', description='This parameter is required.'),
  customAccount?: string(name='CustomAccount'),
  saleControls?: [ 
    {
      conditionControls?: [ 
        {
          conditionControlModuleCode?: string(name='ConditionControlModuleCode'),
          conditionControlModuleValue?: string(name='ConditionControlModuleValue'),
        }
      ](name='ConditionControls'),
      description?: string(name='Description'),
      moduleCode?: string(name='ModuleCode', description='This parameter is required.'),
      moduleValue?: {
        moduleMaxValue?: string(name='ModuleMaxValue'),
        moduleMinValue?: string(name='ModuleMinValue'),
        moduleValue?: [ string ](name='ModuleValue'),
      }(name='ModuleValue', description='This parameter is required.'),
      operator?: string(name='Operator', description='This parameter is required.'),
      orderType?: string(name='OrderType', description='This parameter is required.'),
    }
  ](name='SaleControls', description='This parameter is required.'),
}

model UpdateEnsSaleControlShrinkRequest {
  aliUidAccount?: string(name='AliUidAccount'),
  commodityCode?: string(name='CommodityCode', description='This parameter is required.'),
  customAccount?: string(name='CustomAccount'),
  saleControlsShrink?: string(name='SaleControls', description='This parameter is required.'),
}

model UpdateEnsSaleControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateEnsSaleControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEnsSaleControlResponseBody(name='body'),
}

/**
 * @summary 修改售卖约束
 *
 * @param tmpReq UpdateEnsSaleControlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateEnsSaleControlResponse
 */
async function updateEnsSaleControlWithOptions(tmpReq: UpdateEnsSaleControlRequest, runtime: Util.RuntimeOptions): UpdateEnsSaleControlResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateEnsSaleControlShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.saleControls)) {
    request.saleControlsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.saleControls, 'SaleControls', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.aliUidAccount)) {
    query['AliUidAccount'] = request.aliUidAccount;
  }
  if (!Util.isUnset(request.commodityCode)) {
    query['CommodityCode'] = request.commodityCode;
  }
  if (!Util.isUnset(request.customAccount)) {
    query['CustomAccount'] = request.customAccount;
  }
  if (!Util.isUnset(request.saleControlsShrink)) {
    query['SaleControls'] = request.saleControlsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEnsSaleControl',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改售卖约束
 *
 * @param request UpdateEnsSaleControlRequest
 * @return UpdateEnsSaleControlResponse
 */
async function updateEnsSaleControl(request: UpdateEnsSaleControlRequest): UpdateEnsSaleControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEnsSaleControlWithOptions(request, runtime);
}

model UpgradeAICInstanceImageRequest {
  imageId?: string(name='ImageId', description='The ID of the AIC image.

This parameter is required.', example='m-****'),
  serverIds?: [ string ](name='ServerIds', description='The IDs of the servers.

This parameter is required.'),
  timeout?: int32(name='Timeout', description='The timeout period of the update. Unit: seconds.', example='1800'),
}

model UpgradeAICInstanceImageShrinkRequest {
  imageId?: string(name='ImageId', description='The ID of the AIC image.

This parameter is required.', example='m-****'),
  serverIdsShrink?: string(name='ServerIds', description='The IDs of the servers.

This parameter is required.'),
  timeout?: int32(name='Timeout', description='The timeout period of the update. Unit: seconds.', example='1800'),
}

model UpgradeAICInstanceImageResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model UpgradeAICInstanceImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeAICInstanceImageResponseBody(name='body'),
}

/**
 * @summary Updates the image of an Android in Container (AIC) instance.
 *
 * @param tmpReq UpgradeAICInstanceImageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpgradeAICInstanceImageResponse
 */
async function upgradeAICInstanceImageWithOptions(tmpReq: UpgradeAICInstanceImageRequest, runtime: Util.RuntimeOptions): UpgradeAICInstanceImageResponse {
  Util.validateModel(tmpReq);
  var request = new UpgradeAICInstanceImageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.serverIds)) {
    request.serverIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.serverIds, 'ServerIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeAICInstanceImage',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the image of an Android in Container (AIC) instance.
 *
 * @param request UpgradeAICInstanceImageRequest
 * @return UpgradeAICInstanceImageResponse
 */
async function upgradeAICInstanceImage(request: UpgradeAICInstanceImageRequest): UpgradeAICInstanceImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeAICInstanceImageWithOptions(request, runtime);
}

model UpgradeApplicationRequest {
  appId?: string(name='AppId', description='The ID of the application.

This parameter is required.', example='a2bac6f4-75dc-455e-8389-2dc8e47526d3'),
  template?: string(name='Template', description='The information template for phased update. The value must be a JSON string and contain the following information:

*   Version range that you want to update
*   Configuration information of the target version
*   Canary release policy for resources
*   Intelligent upgrade policy that contains information such as the time window and resource usage limit

This parameter is required.', example='{\\\\"fromAppVersions\\\\":{        \\\\"operator\\\\":\\\\"In\\\\",        \\\\"values\\\\":[            \\\\"v1\\\\",            \\\\"v2\\\\"        ]    },    \\\\"toAppVersion\\\\":\\\\"v3\\\\",    \\\\"descrip\\\\":\\\\"xxx\\\\",    \\\\"workload\\\\":[        {            \\\\"name\\\\":\\\\"nginx\\\\",            \\\\"podSpec\\\\":{            }        }    ],    \\\\"upgradeStrategy\\\\":{        \\\\"name\\\\":\\\\"ScheduleToISP\\\\",        \\\\"parameters\\\\":{            \\\\"operator\\\\":\\\\"In\\\\",            \\\\"values\\\\":[                \\\\"telecom\\\\"            ]        }    },    \\\\"autoUpgradeStrategy\\\\":{        \\\\"name\\\\":\\\\"AdjustToPodUsage\\\\",        \\\\"checkInterval\\\\":600,        \\\\"startTime\\\\":\\\\"2021-02-19 00:00:00\\\\",        \\\\"startHourPoint\\\\":\\\\"0\\\\",        \\\\"endHourPoint\\\\":\\\\"8\\\\",        \\\\"endTime\\\\":\\\\"2021-02-19 08:00:00\\\\",        \\\\"level\\\\":\\\\"RegionId\\\\",        \\\\"rules\\\\":[            {                \\\\"regionCodes\\\\":[                    \\\\"cn-wuxi-telecom_unicom_cmcc\\\\",                    \\\\"cn-shijiazhuang-telecom_unicom_cmcc\\\\"                ],                \\\\"usageRatioLimit\\\\":{                    \\\\"maxPodUsageRatio\\\\":50                },                \\\\"maxUpgradingRatio\\\\":50            },            {                \\\\"regionCodes\\\\":[                    \\\\"cn-wuhan-telecom_unicom_cmcc\\\\"                ],                \\\\"usageRatioLimit\\\\":{                    \\\\"maxPodUsageRatio\\\\":30                },                \\\\"maxUpgradingRatio\\\\":20            },            {                \\\\"regionCodes\\\\":[                    \\\\"All\\\\"                ],                \\\\"usageRatioLimit\\\\":{                    \\\\"maxPodUsageRatio\\\\":20                },                \\\\"maxUpgradingRatio\\\\":50,                \\\\"maxUpgradingCount\\\\":2            }        ]    }}'),
  timeout?: int32(name='Timeout', description='The timeout period for asynchronous upgrade. Unit: seconds. Default value: 300.', example='1800'),
}

model UpgradeApplicationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  taskId?: string(name='TaskId', description='The task ID. You can use the task ID to query the upgrade progress or status.', example='6f24a774-6bd5-4026-bb7d-deffb1dad875'),
}

model UpgradeApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeApplicationResponseBody(name='body'),
}

/**
 * @summary Updates the container in an asynchronous manner. You can configure multiple canary release policies.
 *
 * @param request UpgradeApplicationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpgradeApplicationResponse
 */
async function upgradeApplicationWithOptions(request: UpgradeApplicationRequest, runtime: Util.RuntimeOptions): UpgradeApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.template)) {
    query['Template'] = request.template;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeApplication',
    version = '2017-11-10',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the container in an asynchronous manner. You can configure multiple canary release policies.
 *
 * @param request UpgradeApplicationRequest
 * @return UpgradeApplicationResponse
 */
async function upgradeApplication(request: UpgradeApplicationRequest): UpgradeApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeApplicationWithOptions(request, runtime);
}

