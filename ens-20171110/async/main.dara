/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Ens';
  @version = '2017-11-10';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model BucketInfo {
  bucketAcl?: string(name='BucketAcl', description='Bucket读写权限类型： public-read-write：公共读写 public-read：公共读 private：私有（默认值）', example='private'),
  bucketName: string(name='BucketName', description='Bucket名称。 3~50 个字符，只允许小写字母、数字、短横线（-），且不能以短横线开头或结尾。', example='bucket001'),
  comment?: string(name='Comment', description='备注。 1-128个字符或汉字，UTF-8编码。', example='this is a bucket'),
  createTime?: string(name='CreateTime', description='Bucket创建时间。 （格式：yyyy-mm-ddThh:mm:ss.timezone, 例如 2011-12-01T12:27:13.000Z）', example='2011-12-01T12:27:13.000Z'),
  dataRedundancyType?: string(name='DataRedundancyType', description='指定Bucket的数据容灾类型。 取值范围： LRS（默认值）。本地冗余LRS ZRS 同城冗余ZRS采用多可用区（AZ）机制。', example='LRS'),
  dispatcherType?: string(name='DispatcherType', description='Bucket的调度类型： node：节点(同城) area：区域(多城市) global：全局(全国)', example='global'),
  endpoint?: string(name='Endpoint', description='访问域名，边缘存储取值： eos.aliyuncs.com', example='eos.aliyuncs.com'),
  ensRegionId?: string(name='EnsRegionId', description='节点区域id，如果为空表示全局'),
  modifyTime?: string(name='ModifyTime', description='Bucket修改时间。 （格式：yyyy-mm-ddThh:mm:ss.timezone, 例如 2011-12-01T12:27:13.000Z）', example='2011-12-01T12:27:13.000Z'),
  resourceType?: string(name='ResourceType', description='指定Bucket的资源类型。 取值范围： general：通用 national-network：国网', example='general'),
  storageClass?: string(name='StorageClass', description='Bucket存储类型，支持Standard', example='Standard'),
}

model DataDisk {
  size?: long(name='Size', description='数据盘', example='60'),
}

model HealthCheck {
  healthCheck?: string(name='HealthCheck', description='是否开启健康检查。  取值：on | off。'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='健康检查的后端服务器的端口。  取值： 1~65535。    说明 在HealthCheck值为on时才会有效。', minimum=1, maximum=65535),
  healthCheckConnectTimeout?: int32(name='HealthCheckConnectTimeout', description='每次健康检查响应的最大超时时间。  取值：1~300（秒）。  默认值：5。', minimum=1, maximum=300),
  healthCheckDomain?: string(name='HealthCheckDomain', description='用于健康检查的域名，取值：  $_ip： 后端服务器的私网IP。当指定了IP或该参数未指定时，负载均衡会使用各后端服务器的私网IP当做健康检查使用的域名。是否要支持？ domain：域名长度为1-80字符，只能包含字母、数字、点号（.）和连字符（-）。   说明 在HealthCheck值为on时才会有效。'),
  healthCheckHttpCode?: string(name='HealthCheckHttpCode', description='健康检查正常的HTTP状态码，多个状态码用逗号分隔。  默认值为http_2xx。  取值：http_2xx | http_3xx | http_4xx | http_5xx。   说明 在HealthCheck值为on时才会有效。'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='健康检查的时间间隔。  取值： 1~50（秒）。   说明 在HealthCheck值为on时才会有效。', minimum=1, maximum=50),
  healthCheckMethod?: string(name='HealthCheckMethod', description='健康检查的method'),
  healthCheckTimeout?: int32(name='HealthCheckTimeout', description='接收来自运行状况检查的响应需要等待的时间。如果后端ECS在指定的时间内没有正确响应，则判定为健康检查失败。在HealthCheck值为on时才会有效。  取值：1~300（秒）。   说明 如果HealthCHeckTimeout的值小于HealthCheckInterval的值，则HealthCHeckTimeout无效，超时时间为HealthCheckInterval的值。', minimum=1, maximum=300),
  healthCheckType?: string(name='HealthCheckType', description='健康检查类型。  取值：tcp（默认值） | http。'),
  healthCheckURI?: string(name='HealthCheckURI', description='用于健康检查的URI。  长度限制为1~80，只能使用字母、数字和”-/.%?#&amp;“这些字符。 URL不能只为”/“，但必须以”/“开头。    说明 在HealthCheck值为on时才会有效。'),
  healthyThreshold?: int32(name='HealthyThreshold', description='健康检查连续成功多少次后，将后端服务器的健康检查状态由fail判定为success。  取值：2~10。    说明 在HealthCheck值为on时才会有效。', minimum=2, maximum=10),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='健康检查连续失败多少次后，将后端服务器的健康检查状态由success判定为fail。  取值：2~10。   说明 在HealthCheck值为on时才会有效。', minimum=2, maximum=10),
}

model HttpConfig {
  cookie?: string(name='Cookie', description='服务器上配置的Cookie。 长度为1-200，只能包含ASCII英文字母和数字字符，不能包含逗号、分号或空格，也不能以$开头。 说明 当StickySession为on且StickySessionType为server时，该参数必选。'),
  cookieTimeout?: int32(name='CookieTimeout', description='Cookie超时时间。  取值：1~86400（秒）。   说明 当StickySession为on且StickySessionType为insert时，该参数必选。', example='500', minimum=1, maximum=86400),
  idleTimeout?: int32(name='IdleTimeout', description='指定连接空闲超时时间，取值范围为1~60秒，默认值为15秒。  在超时时间内一直没有访问请求，负载均衡会暂时中断当前连接，直到一下次请求来临时重新建立新的连接。', minimum=1, maximum=60),
  requestTimeout?: int32(name='RequestTimeout', description='指定请求超时时间，取值范围为1~180秒，默认值为60秒。  在超时时间内后端服务器一直没有响应，负载均衡将放弃等待，给客户端返回 HTTP 504 错误码。', minimum=1, maximum=180),
  scheduler?: string(name='Scheduler', description='调度算法。取值：  wrr（默认值）：权重值越高的后端服务器，被轮询到的次数（概率）也越高。 wlc：除了根据每台后端服务器设定的权重值来进行轮询，同时还考虑后端服务器的实际负载（即连接数）。当权重值相同时，当前连接数越小的后端服务器被轮询到的次数（概率）也越高。 rr：按照访问顺序依次将外部请求依序分发到后端服务器。'),
  serverCertificateId?: string(name='ServerCertificateId', description='服务器证书的ID。'),
  stickySession?: string(name='StickySession', description='是否开启会话保持。  取值：on | off。'),
  stickySessionType?: string(name='StickySessionType', description='cookie的处理方式。取值：  insert：植入Cookie。  客户端第一次访问时，负载均衡会在返回请求中植入Cookie（即在HTTP/HTTPS响应报文中插入SERVERID），下次客户端携带此Cookie访问，负载均衡服务会将请求定向转发给之前记录到的后端服务器上。  server：重写Cookie。  负载均衡发现用户自定义了Cookie，将会对原来的Cookie进行重写，下次客户端携带新的Cookie访问，负载均衡服务会将请求定向转发给之前记录到的后端服务器。   说明 当StickySession的值为on时，必须指定该参数。', example='insert'),
  xForwardedFor?: string(name='XForwardedFor', description='是否开启通过X-Forwarded-For头字段获取来访者真实 IP。  取值为on。', example='on'),
}

model InstanceActiveOpsGroup {
  instanceIds?: [ string ](name='InstanceIds', description='the instance list of instance active group'),
}

model InstanceActiveOpsTask {
  instanceActiveOpsTaskId?: string(name='InstanceActiveOpsTaskId', description='instance active ops task id'),
  instanceActiveOpsTaskStatus?: string(name='InstanceActiveOpsTaskStatus', description='the status of instance active ops task'),
}

model InstanceOperateResponse {
  code?: long(name='Code', description='code'),
  instanceId?: string(name='InstanceId', description='instance id'),
  message?: string(name='Message', description='message'),
}

model SecurityGroupRule {
  description?: string(name='Description', description='描述'),
  destCidrIp?: string(name='DestCidrIp', description='目标网段'),
  direction?: string(name='Direction', description='方向'),
  ipProtocol?: string(name='IpProtocol', description='协议'),
  policy?: string(name='Policy', description='授权策略'),
  portRange?: string(name='PortRange', description='目的端口'),
  sourceCidrIp?: string(name='SourceCidrIp', description='源网段'),
  sourcePortRange?: string(name='SourcePortRange', description='源端口'),
  priority?: int32(name='priority', description='优先级', minimum=1, maximum=100),
}

model TcpConfig {
  establishedTimeout?: int32(name='EstablishedTimeout', description='连接超时时间。取值：10~900（秒）。', minimum=10, maximum=900),
  persistenceTimeout?: int32(name='PersistenceTimeout', description='会话保持的超时时间。取值：0~3600（秒）。默认值：0，表示关闭会话保持。', minimum=0, maximum=3600),
  scheduler?: string(name='Scheduler', description='调度算法。取值：wrr（默认值）：权重值越高的后端服务器，被轮询到的次数（概率）也越高。wlc：除了根据每台后端服务器设定的权重值来进行轮询，同时还考虑后端服务器的实际负载（即连接数）。当权重值相同时，当前连接数越小的后端服务器被轮询到的次数（概率）也越高。rr：按照访问顺序依次将外部请求依序分发到后端服务器。sch：基于源IP地址的一致性hash，相同的源地址会调度到相同的后端服务器。'),
}

model UdpCheck {
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='健康检查使用的端口。取值：1-65535  不设置此参数时，表示使用后端服务端口（BackendServerPort）。', minimum=1, maximum=65535),
  healthCheckConnectTimeout?: int32(name='HealthCheckConnectTimeout', description='接收来自运行状况检查的响应需要等待的时间。  如果后端ENS在指定的时间内没有正确响应，则判定为健康检查失败。  取值：1-300（秒）。默认为5秒', minimum=1, maximum=300),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='健康检查的时间间隔。  取值：1-50（秒）。', minimum=1, maximum=50),
  healthyThreshold?: int32(name='HealthyThreshold', description='健康检查连续成功多少次后，将后端服务器的健康检查状态由fail判定为success。  取值：2-10。', minimum=2, maximum=10),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='健康检查连续失败多少次后，将后端服务器的健康检查状态由success判定为fail。  取值：2-10。', minimum=2, maximum=10),
}

model UdpConfig {
  hashKey?: string(name='HashKey', description='hash key'),
  scheduler?: string(name='Scheduler', description='调度算法。取值：  wrr（默认值）：权重值越高的后端服务器，被轮询到的次数（概率）也越高。 wlc：除了根据每台后端服务器设定的权重值来进行轮询，同时还考虑后端服务器的实际负载（即连接数）。当权重值相同时，当前连接数越小的后端服务器被轮询到的次数（概率）也越高。 rr：按照访问顺序依次将外部请求依序分发到后端服务器。 sch：基于源IP地址的一致性hash，相同的源地址会调度到相同的后端服务器。'),
}

model AccosicateNetworkAclRequest {
  networkAclId: string(name='NetworkAclId', example='nacl-a2do9e413e0sp****', position='Query'),
  resource: [ 
    {
      resourceId: string(name='ResourceId', example='n-5****'),
      resourceType: string(name='ResourceType', example='Network'),
    }
  ](name='Resource', position='Query'),
}

model AccosicateNetworkAclResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model AccosicateNetworkAclResponse = {
  headers: map[string]string(name='headers'),
  body: AccosicateNetworkAclResponseBody(name='body'),
}

async function accosicateNetworkAcl(request: AccosicateNetworkAclRequest): AccosicateNetworkAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AccosicateNetworkAcl', 'POST', '/', 'json', false, 'json', request);
}

model AddBackendServersRequest {
  backendServers: [ 
    {
      ip?: string(name='Ip', example='192.168.0.1'),
      port?: int32(name='Port', description='端口', example='3309', minimum=0, maximum=65535),
      serverId: string(name='ServerId', example='i-5uf6dwyzch3wly790****'),
      type?: string(name='Type', description='后端服务器类型。  ens：ENS实例（默认）', example='ens'),
      weight?: int32(name='Weight', description='后端服务器的权重。  取值：0~100  默认值为100，如果值为0，则不会将请求转发给该后端服务器。', example='100', minimum=0, maximum=100),
    }
  ](name='BackendServers', shrink='json', position='Query'),
  loadBalancerId: string(name='LoadBalancerId', example='lb-5qzdmxefgrpxd7oz2mefonvtx', position='Query'),
}

model AddBackendServersResponseBody = {
  backendServers?: {
    backendServer?: [ 
    {
      ip?: string(name='Ip', example='192.168.0.1'),
      port?: int32(name='Port', example='0'),
      serverId?: string(name='ServerId', example='i-5uf6hj58zvml4ali8****'),
      type?: string(name='Type', example='ens'),
      weight?: int32(name='Weight', example='100'),
    }
  ](name='BackendServer')
  }(name='BackendServers'),
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AddBackendServersResponse = {
  headers: map[string]string(name='headers'),
  body: AddBackendServersResponseBody(name='body'),
}

async function addBackendServers(request: AddBackendServersRequest): AddBackendServersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddBackendServers', 'POST', '/', 'json', false, 'json', request);
}

model AddDeviceInternetPortRequest {
  ISP?: string(name='ISP', example='telecom', position='Query'),
  instanceId: string(name='InstanceId', description='实例ID', example='i-5saiou41t6ude2ia56ri902ke', position='Query'),
  internalIp: string(name='InternalIp', example='10.0.0.50', position='Query'),
  internalPort?: string(name='InternalPort', example='12022/12022', position='Query'),
  natType: string(name='NatType', example='DNAT', position='Query'),
  regionId: string(name='RegionId', example='cn-wuxi-5', position='Query'),
}

model AddDeviceInternetPortResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='0F9185F6-B6FA-514C-9E05-FFD5F0D7D156'),
  ruleIds?: [ string ](name='RuleIds', description='RuleIds'),
}

model AddDeviceInternetPortResponse = {
  headers: map[string]string(name='headers'),
  body: AddDeviceInternetPortResponseBody(name='body'),
}

async function addDeviceInternetPort(request: AddDeviceInternetPortRequest): AddDeviceInternetPortResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDeviceInternetPort', 'GET', '/', 'json', false, 'json', request);
}

model AddNetworkInterfaceToInstanceRequest {
  autoStart?: boolean(name='AutoStart', example='true', position='Query'),
  instanceId: string(name='InstanceId', example='yourInstance ID', position='Query'),
  networks: string(name='Networks', example='[{"ipType": "public", "ipAddressType": "ipv6" }]', position='Query'),
}

model AddNetworkInterfaceToInstanceResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AddNetworkInterfaceToInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: AddNetworkInterfaceToInstanceResponseBody(name='body'),
}

async function addNetworkInterfaceToInstance(request: AddNetworkInterfaceToInstanceRequest): AddNetworkInterfaceToInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddNetworkInterfaceToInstance', 'POST', '/', 'json', false, 'json', request);
}

model AssignPrivateIpAddressesRequest {
  networkInterfaceId: string(name='NetworkInterfaceId', example='eni-uf6533jbifugr5fo2j1w', position='Query'),
  vSwitchId?: string(name='VSwitchId', example='vsw-5rllcjb3ol6duzjdnbm1ombn7', position='Query'),
}

model AssignPrivateIpAddressesResponseBody = {
  assignedPrivateIpAddressesSet?: {
    networkInterfaceId?: string(name='NetworkInterfaceId', example='eni-uf620pb4d19ljnu4a64m'),
    privateIpSet?: [ string ](name='PrivateIpSet'),
  }(name='AssignedPrivateIpAddressesSet'),
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AssignPrivateIpAddressesResponse = {
  headers: map[string]string(name='headers'),
  body: AssignPrivateIpAddressesResponseBody(name='body'),
}

async function assignPrivateIpAddresses(request: AssignPrivateIpAddressesRequest): AssignPrivateIpAddressesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssignPrivateIpAddresses', 'POST', '/', 'json', false, 'json', request);
}

model AssociateEnsEipAddressRequest {
  allocationId: string(name='AllocationId', example='eip-5sc1sgcrsrwgwdvx44hru3p63', position='Query'),
  instanceId: string(name='InstanceId', example='lb-5saivuir6b1mupxjfbhmk1xkb', position='Query'),
  instanceType?: string(name='InstanceType', example='SlbInstance', position='Query'),
}

model AssociateEnsEipAddressResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AssociateEnsEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateEnsEipAddressResponseBody(name='body'),
}

async function associateEnsEipAddress(request: AssociateEnsEipAddressRequest): AssociateEnsEipAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateEnsEipAddress', 'POST', '/', 'json', false, 'json', request);
}

model AttachDiskRequest {
  deleteWithInstance?: string(name='DeleteWithInstance', example='False', position='Query'),
  diskId: string(name='DiskId', example='d-5saf13yy6sopmmg88mzsgovj5', position='Query'),
  instanceId: string(name='InstanceId', example='i-5rr19av7tkpgi9os52ag1enu1', position='Query'),
}

model AttachDiskResponseBody = {
  code?: int32(name='Code', example='0'),
  requestId?: string(name='RequestId', example='916777D9-42D3-5928-92CE-373B1874B674'),
}

model AttachDiskResponse = {
  headers: map[string]string(name='headers'),
  body: AttachDiskResponseBody(name='body'),
}

async function attachDisk(request: AttachDiskRequest): AttachDiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachDisk', 'POST', '/', 'json', false, 'json', request);
}

model AttachEnsInstancesRequest {
  instanceId: string(name='InstanceId', example='testInstacneId', position='Query'),
  scripts: string(name='Scripts', example='wget d2dldCBodHRwOi8vYWxpYWNzLWs4cy1jbxxxx', position='Query'),
}

model AttachEnsInstancesResponseBody = {
  requestId?: string(name='RequestId', example='C0003E8B-B930-4F59-ADC0-0E209A9012A8'),
}

model AttachEnsInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: AttachEnsInstancesResponseBody(name='body'),
}

async function attachEnsInstances(request: AttachEnsInstancesRequest): AttachEnsInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachEnsInstances', 'POST', '/', 'json', false, 'json', request);
}

model AuthorizeSecurityGroupRequest {
  ipProtocol: string(name='IpProtocol', example='all', position='Query'),
  policy?: string(name='Policy', example='accept', position='Query'),
  portRange: string(name='PortRange', example='22/22', position='Query'),
  priority?: int32(name='Priority', example='1', minimum=1, maximum=100, position='Query'),
  securityGroupId: string(name='SecurityGroupId', example='sg-bp67acfmxazb4ph***', position='Query'),
  sourceCidrIp: string(name='SourceCidrIp', example='10.0.XX.XX/8', position='Query'),
  sourcePortRange?: string(name='SourcePortRange', example='22/22', position='Query'),
  version: string(name='Version', description='2017-11-10', example='2017-11-10', position='Query'),
}

model AuthorizeSecurityGroupResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AuthorizeSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AuthorizeSecurityGroupResponseBody(name='body'),
}

async function authorizeSecurityGroup(request: AuthorizeSecurityGroupRequest): AuthorizeSecurityGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuthorizeSecurityGroup', 'POST', '/', 'json', false, 'json', request);
}

model AuthorizeSecurityGroupEgressRequest {
  destCidrIp: string(name='DestCidrIp', example='10.0.XX.XX/8', position='Query'),
  ipProtocol: string(name='IpProtocol', example='all', position='Query'),
  policy?: string(name='Policy', example='accept', position='Query'),
  portRange: string(name='PortRange', example='22/22', position='Query'),
  priority?: int32(name='Priority', example='1', minimum=1, maximum=100, position='Query'),
  securityGroupId: string(name='SecurityGroupId', example='sg-bp67acfmxazb4p****', position='Query'),
  sourcePortRange?: string(name='SourcePortRange', example='22/22', position='Query'),
  version: string(name='Version', description='2017-11-10', example='2017-11-10', position='Query'),
}

model AuthorizeSecurityGroupEgressResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AuthorizeSecurityGroupEgressResponse = {
  headers: map[string]string(name='headers'),
  body: AuthorizeSecurityGroupEgressResponseBody(name='body'),
}

async function authorizeSecurityGroupEgress(request: AuthorizeSecurityGroupEgressRequest): AuthorizeSecurityGroupEgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuthorizeSecurityGroupEgress', 'POST', '/', 'json', false, 'json', request);
}

model CreateARMServerInstancesRequest {
  amount: int32(name='Amount', description='数量，最大支持10', example='1', minimum=1, maximum=10, position='Query'),
  autoRenew?: boolean(name='AutoRenew', description='是否自动续费，默认为false。', example='false', position='Query'),
  ensRegionId: string(name='EnsRegionId', description='ENS节点ID。', example='cn-guiyang-12', position='Query'),
  frequency?: int32(name='Frequency', example='30', position='Query'),
  imageId: string(name='ImageId', description='镜像ID。', example='yourImage ID', position='Query'),
  instanceType: string(name='InstanceType', description='AIC容器实例规格。', example='aic.cf53r.c6.np', position='Query'),
  keyPairName?: string(name='KeyPairName', description='keypair名称', example='TestKeyPairName', position='Query'),
  payType: string(name='PayType', description='付费类型。PrePaid（目前只支持此种）：包年包月', example='PrePaid', position='Query'),
  period: int32(name='Period', description='购买周期。', example='1', position='Query'),
  periodUnit: string(name='PeriodUnit', description='Month（默认）：按月计费的价格单位。', example='Month', position='Query'),
  resolution?: string(name='Resolution', description='分辨率。目前取值
1920*1080
1280*720
1080*1920
720*1280', example='720*1280', position='Query'),
  serverType: string(name='ServerType', description='服务器规格。', example='cas.cf53r', position='Query'),
}

model CreateARMServerInstancesResponseBody = {
  instanceIds?: [ string ](name='InstanceIds'),
  orderId?: string(name='OrderId', example='212630314490***'),
  requestId?: string(name='RequestId', description='Id of the request', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model CreateARMServerInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateARMServerInstancesResponseBody(name='body'),
}

async function createARMServerInstances(request: CreateARMServerInstancesRequest): CreateARMServerInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateARMServerInstances', 'POST', '/', 'json', false, 'json', request);
}

model CreateApplicationRequest {
  template: string(name='Template', position='Query'),
  timeout?: int32(name='Timeout', example='1800', position='Query'),
}

model CreateApplicationResponseBody = {
  appId?: string(name='AppId', example='d0639abf-789a-4527-b420-031d2cd9ad9b'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model CreateApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateApplicationResponseBody(name='body'),
}

async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApplication', 'POST', '/', 'json', false, 'json', request);
}

model CreateClassicNetworkRequest {
  cidrBlock: string(name='CidrBlock', example='10.0.0.0/16', position='Query'),
  description?: string(name='Description', example='This is my vswitch.', position='Query'),
  ensRegionId: string(name='EnsRegionId', example='cn-chengdu-xxxx-4', position='Query'),
  networkName?: string(name='NetworkName', example='example', position='Query'),
}

model CreateClassicNetworkResponseBody = {
  networkId?: string(name='NetworkId', example='n-5s9ayrxsd9hszrlt5fgv2****'),
  requestId?: string(name='RequestId', description='Id of the request', example='1A004E06-AC1B-5806-BA5E-41AB6B02DE83'),
}

model CreateClassicNetworkResponse = {
  headers: map[string]string(name='headers'),
  body: CreateClassicNetworkResponseBody(name='body'),
}

async function createClassicNetwork(request: CreateClassicNetworkRequest): CreateClassicNetworkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateClassicNetwork', 'POST', '/', 'json', false, 'json', request);
}

model CreateDiskRequest {
  category: string(name='Category', description='磁盘种类 高效云盘:cloud_efficiency 全闪云盘:cloud_ssd', example='cloud_efficiency', position='Query'),
  ensRegionId: string(name='EnsRegionId', description='节点ID', example='cn-chengdu-telecom', position='Query'),
  instanceChargeType: string(name='InstanceChargeType', description='实例付费方式，取值 PrePaid:预付费，包年包月 PostPaid:按量付费。目前只支持：PostPaid', example='PostPaid', position='Query'),
  size: string(name='Size', description='磁盘大小,单位GB', example='20', position='Query'),
}

model CreateDiskResponseBody = {
  instanceIds?: [ string ](name='InstanceIds', description='实列ID集合'),
  orderId?: string(name='OrderId', description='订单id,多个以逗号分割，可以直接跳转到收银行台 只有预付费返回订单号，后付费不返回', example='211456，32124'),
  requestId?: string(name='RequestId', description='请求唯一ID', example='7030AB96-57CF-1C68-9FEE-D60E547FD79C'),
}

model CreateDiskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDiskResponseBody(name='body'),
}

async function createDisk(request: CreateDiskRequest): CreateDiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDisk', 'POST', '/', 'json', false, 'json', request);
}

model CreateEipInstanceRequest {
  bandwidth?: long(name='Bandwidth', description='EIP的带宽峰值', example='5', minimum=5, maximum=10000, position='Query'),
  ensRegionId: string(name='EnsRegionId', description='ENS节点ID', example='cn-suzhou-telecom', position='Query'),
  instanceChargeType: string(name='InstanceChargeType', description='EIP的计费方式，取值：  PrePaid：包年包月。 PostPaid（默认值）：按量计费。 当InstanceChargeType取值为PostPaid时，InternetChargeType不能为PayByBandwidth', example='PostPaid', position='Query'),
  internetChargeType: string(name='InternetChargeType', description='EIP的计量方式，取值：  PayByBandwidth（默认值）：按带宽计费。 取值：95BandwidthByMonth：月95。', example='95BandwidthByMonth', position='Query'),
  isp?: string(name='Isp', description='运营商信息', example='cmcc', position='Query'),
  name?: string(name='Name', description='EIP实例名称。', example='EIP1', position='Query'),
}

model CreateEipInstanceResponseBody = {
  allocationId?: string(name='AllocationId', description='EIP的ID。', example='eip-25877c70gddh****'),
  requestId?: string(name='RequestId', description='Id of the request', example='9DB6123F-470D-510A-A9EB-EBA799340452'),
}

model CreateEipInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEipInstanceResponseBody(name='body'),
}

async function createEipInstance(request: CreateEipInstanceRequest): CreateEipInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEipInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateEnsRouteEntryRequest {
  description?: string(name='Description', description='自定义路由条目的描述信息。', example='example', minLength=2, maxLength=256, position='Query'),
  destinationCidrBlock: string(name='DestinationCidrBlock', description='自定义路由条目的目标网段。', example='0.0.0.0/0', position='Query'),
  nextHopId: string(name='NextHopId', description='自定义路由条目的下一跳实例的ID。', example='i-5vb7leks9z4mxy1ay258', position='Query'),
  nextHopType?: string(name='NextHopType', description='自定义路由条目的下一跳的类型', example='Instance', position='Query'),
  routeEntryName?: string(name='RouteEntryName', description='要创建的自定义路由条目的名称。', example='test', minLength=2, maxLength=128, position='Query'),
  routeTableId: string(name='RouteTableId', description='要创建自定义路由条目的路由表ID。', example='vtb-bp1cifr72dioje82lse2j', position='Query'),
}

model CreateEnsRouteEntryResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  routeEntryId?: string(name='RouteEntryId', description='路由条目id。', example='rte-5vb5q8sk0lyoscx8539ds'),
}

model CreateEnsRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEnsRouteEntryResponseBody(name='body'),
}

async function createEnsRouteEntry(request: CreateEnsRouteEntryRequest): CreateEnsRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEnsRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model CreateEnsServiceRequest {
  ensServiceId: string(name='EnsServiceId', example='ens-20190806****', position='Query'),
  orderType: string(name='OrderType', example='Buy', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model CreateEnsServiceResponseBody = {
  code?: int32(name='Code', example='0'),
  requestId?: string(name='RequestId', example='9AF02B43-2D08-49D3-8AAF-65B9C792ED14'),
}

model CreateEnsServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEnsServiceResponseBody(name='body'),
}

async function createEnsService(request: CreateEnsServiceRequest): CreateEnsServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEnsService', 'POST', '/', 'json', false, 'json', request);
}

model CreateEpnInstanceRequest {
  EPNInstanceName?: string(name='EPNInstanceName', example='test EPNInstanceName', position='Query'),
  EPNInstanceType: string(name='EPNInstanceType', example='EdgeToEdge', position='Query'),
  internetChargeType: string(name='InternetChargeType', example='BandwidthByDay', position='Query'),
  internetMaxBandwidthOut: int32(name='InternetMaxBandwidthOut', example='1', position='Query'),
  networkingModel: string(name='NetworkingModel', example='SpeedUp', position='Query'),
}

model CreateEpnInstanceResponseBody = {
  EPNInstanceId?: string(name='EPNInstanceId', example='epn-xxxxx'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model CreateEpnInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEpnInstanceResponseBody(name='body'),
}

async function createEpnInstance(request: CreateEpnInstanceRequest): CreateEpnInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEpnInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateFileSystemRequest {
  orderDetails: [ 
    {
      chargeType: string(name='ChargeType', example='PostPaid'),
      ensRegionId: string(name='EnsRegionId', example='cn-suzhou-telecom'),
      fileSystemName: string(name='FileSystemName', example='nasFile'),
      mountTargetDomain: string(name='MountTargetDomain', example='nasMount'),
      networkId: string(name='NetworkId', example='vpc-xxx'),
      orderType: string(name='OrderType', description='BUY。', example='BUY'),
      protocolType: string(name='ProtocolType', example='nfs'),
      storgeType: string(name='StorgeType', example='capacity'),
    }
  ](name='OrderDetails', shrink='json', position='Query'),
}

model CreateFileSystemResponseBody = {
  allocationId?: [ string ](name='AllocationId'),
  bizStatusCode?: string(name='BizStatusCode', example='PartSuccess'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  unAllocationId?: [ string ](name='UnAllocationId'),
}

model CreateFileSystemResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFileSystemResponseBody(name='body'),
}

async function createFileSystem(request: CreateFileSystemRequest): CreateFileSystemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFileSystem', 'GET', '/', 'json', false, 'json', request);
}

model CreateForwardEntryRequest {
  externalIp: string(name='ExternalIp', example='121.11.36.28', position='Query'),
  externalPort: string(name='ExternalPort', example='22', position='Query'),
  forwardEntryName?: string(name='ForwardEntryName', example='test0', maxLength=128, position='Query'),
  healthCheckPort?: int32(name='HealthCheckPort', minimum=1, maximum=65535, position='Query'),
  internalIp: string(name='InternalIp', example='10.0.0.13', position='Query'),
  internalPort: string(name='InternalPort', example='22', position='Query'),
  ipProtocol?: string(name='IpProtocol', example='Any', position='Query'),
  natGatewayId: string(name='NatGatewayId', example='nat-5t7nh1cfm6kxiszlttr383xpo', position='Query'),
}

model CreateForwardEntryResponseBody = {
  forwardEntryId?: string(name='ForwardEntryId', example='fwd-5tc07cw14metghn3siv4ak8do'),
  requestId?: string(name='RequestId', description='Id of the request', example='EF6D6FA4-DACA-5822-A981-81006271D263'),
}

model CreateForwardEntryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateForwardEntryResponseBody(name='body'),
}

async function createForwardEntry(request: CreateForwardEntryRequest): CreateForwardEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateForwardEntry', 'POST', '/', 'json', false, 'json', request);
}

model CreateImageRequest {
  deleteAfterImageUpload?: string(name='DeleteAfterImageUpload', example='false', position='Query'),
  imageName: string(name='ImageName', position='Query'),
  instanceId: string(name='InstanceId', example='i-5rr1bnyrc4tswr8cq3w6y1fjw', position='Query'),
  product?: string(name='product', example='DAILY_FORECAST_15D', position='Query'),
}

model CreateImageResponseBody = {
  code?: int32(name='Code', example='0'),
  imageId?: string(name='ImageId', description='镜像ID', example='m-5xxgg'),
  requestId?: string(name='RequestId', example='8BEF0D72-9901-5D43-B7D3-8B42AC26C516'),
}

model CreateImageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateImageResponseBody(name='body'),
}

async function createImage(request: CreateImageRequest): CreateImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateImage', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  dataDisk?: [
    {
      size?: string(name='Size', example='50'),
    }
  ](name='DataDisk', position='Query'),
  systemDisk?: {
    size?: string(name='Size', example='40'),
  }(name='SystemDisk', position='Query'),
  autoRenew?: string(name='AutoRenew', example='True', position='Query'),
  autoRenewPeriod?: string(name='AutoRenewPeriod', example='12', position='Query'),
  ensRegionId: string(name='EnsRegionId', example='cn-hangzhou', position='Query'),
  hostName?: string(name='HostName', example='test-HostName', position='Query'),
  imageId?: string(name='ImageId', example='yourImage ID', position='Query'),
  instanceName?: string(name='InstanceName', example='test：Instance_Name.1-2', position='Query'),
  instanceType: string(name='InstanceType', example='ens.se1.tiny', position='Query'),
  internetChargeType?: string(name='InternetChargeType', example='95BandwidthByMonth', position='Query'),
  ipType?: string(name='IpType', example='ipv4', position='Query'),
  keyPairName?: string(name='KeyPairName', example='TestKeyPairName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  password?: string(name='Password', example='yourPassword:1', position='Query'),
  passwordInherit?: boolean(name='PasswordInherit', description='是否使用镜像预设的密码。使用该参数时，Password参数必须为空，同时您需要确保使用的镜像已经设置了密码。', example='false', position='Query'),
  paymentType?: string(name='PaymentType', example='Subscription', position='Query'),
  period: string(name='Period', example='12', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', example='10.10.10.10', position='Query'),
  publicIpIdentification?: boolean(name='PublicIpIdentification', example='true', position='Query'),
  quantity: string(name='Quantity', example='1', position='Query'),
  uniqueSuffix?: boolean(name='UniqueSuffix', example='false', position='Query'),
  userData?: string(name='UserData', example='#!/bin/sh  echo "Hello World.  The time is now $(date -R)!" | tee /home/output.txt', position='Query'),
  vSwitchId?: string(name='VSwitchId', example='YourVSwitchId', position='Query'),
}

model CreateInstanceResponseBody = {
  code?: int32(name='Code', example='0'),
  instanceIds?: {
    instanceId?: [ string ](name='InstanceId')
  }(name='InstanceIds'),
  requestId?: string(name='RequestId', example='4A431388-2D4B-46F4-A96B-D4E6BD0688C1'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstanceActiveOpsTaskRequest {
  instanceIds?: [ string ](name='InstanceIds', shrink='simple', position='Query'),
}

model CreateInstanceActiveOpsTaskResponseBody = {
  instanceActiveOpsTask?: InstanceActiveOpsTask(name='InstanceActiveOpsTask'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateInstanceActiveOpsTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceActiveOpsTaskResponseBody(name='body'),
}

async function createInstanceActiveOpsTask(request: CreateInstanceActiveOpsTaskRequest): CreateInstanceActiveOpsTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstanceActiveOpsTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateKeyPairRequest {
  keyPairName: string(name='KeyPairName', example='TestKeyPairName', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model CreateKeyPairResponseBody = {
  keyPairFingerPrint?: string(name='KeyPairFingerPrint', example='7880c1ad4687fdbf7a6da2131****'),
  keyPairId?: string(name='KeyPairId', example='ssh-5lywanlkih1zo9yl8eg****'),
  keyPairName?: string(name='KeyPairName', example='TestKeyPairName'),
  privateKeyBody?: string(name='PrivateKeyBody', example='-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQE****'),
  requestId?: string(name='RequestId'),
}

model CreateKeyPairResponse = {
  headers: map[string]string(name='headers'),
  body: CreateKeyPairResponseBody(name='body'),
}

async function createKeyPair(request: CreateKeyPairRequest): CreateKeyPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateKeyPair', 'POST', '/', 'json', false, 'json', request);
}

model CreateLoadBalancerRequest {
  ensRegionId: string(name='EnsRegionId', description='ENS节点ID。', example='cn-chengdu-telecom', position='Query'),
  loadBalancerName?: string(name='LoadBalancerName', description='负载均衡实例的名称。', example='gcs-pre-websocket-eslb-telecom', position='Query'),
  loadBalancerSpec: string(name='LoadBalancerSpec', description='负载均衡实例的名称。', example='elb.s2.medium', position='Query'),
  networkId: string(name='NetworkId', description='要创建的ELB实例的网络ID', example='n-5sax03dh2eyagujgsn7z9****', position='Query'),
  payType: string(name='PayType', description='付费类型。PostPaid（目前只支持此种）：按量付费', example='PostPaid', position='Query'),
  vSwitchId: string(name='VSwitchId', description='专有网络实例的所属的交换机ID。', example='vsw-5s78haoys9oylle6ln71m****', position='Query'),
}

model CreateLoadBalancerResponseBody = {
  loadBalancerId?: string(name='LoadBalancerId', example='lb-5s7crik3yo3bp03gqrbp5****'),
  loadBalancerName?: string(name='LoadBalancerName', example='gcs-pre-websocket-****'),
  networkId?: string(name='NetworkId', example='n-5sax03dh2eyagujgsn7z9****'),
  requestId?: string(name='RequestId', example='1ECC937A-AE0E-4626-BE51-DED1D6D1C888'),
  vSwitchId?: string(name='VSwitchId', example='vsw-5savh5ngxh8sbj14bu7n****'),
}

model CreateLoadBalancerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLoadBalancerResponseBody(name='body'),
}

async function createLoadBalancer(request: CreateLoadBalancerRequest): CreateLoadBalancerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLoadBalancer', 'POST', '/', 'json', false, 'json', request);
}

model CreateLoadBalancerHTTPListenerRequest {
  description?: string(name='Description', description='设置监听的描述信息。  长度限制为1-80个字符，允许包含字母、数字、“-”、“/”、“.”和“_”等字符。支持中文描述。', example='监听说明', minLength=1, maxLength=80, position='Query'),
  forwardPort?: int32(name='ForwardPort', description='HTTP至HTTPS的监听转发端口。', example='0', minimum=0, maximum=65535, position='Query'),
  healthCheck: string(name='HealthCheck', description='是否开启健康检查。  取值：on | off。', example='on', position='Query'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='健康检查的后端服务器的端口。  取值： 1~65535。    说明 在HealthCheck值为on时才会有效。', example='30040', minimum=1, maximum=65535, position='Query'),
  healthCheckDomain?: string(name='HealthCheckDomain', description='用于健康检查的域名，取值：  $_ip： 后端服务器的私网IP。当指定了IP或该参数未指定时，负载均衡会使用各后端服务器的私网IP当做健康检查使用的域名。是否要支持？ domain：域名长度为1-80字符，只能包含字母、数字、点号（.）和连字符（-）。   说明 在HealthCheck值为on时才会有效。', example='www.aliyundoc.com', minLength=1, maxLength=80, position='Query'),
  healthCheckHttpCode?: string(name='HealthCheckHttpCode', description='健康检查正常的HTTP状态码，多个状态码用逗号分隔。  默认值为http_2xx。  取值：http_2xx | http_3xx | http_4xx | http_5xx。   说明 在HealthCheck值为on时才会有效。', example='http_2xx', position='Query'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='健康检查的时间间隔。  取值： 1~50（秒）。   说明 在HealthCheck值为on时才会有效。', example='2', minimum=1, maximum=50, position='Query'),
  healthCheckMethod?: string(name='HealthCheckMethod', example='head', position='Query'),
  healthCheckTimeout?: int32(name='HealthCheckTimeout', description='接收来自运行状况检查的响应需要等待的时间。如果后端ECS在指定的时间内没有正确响应，则判定为健康检查失败。在HealthCheck值为on时才会有效。  取值：1~300（秒）。   说明 如果HealthCHeckTimeout的值小于HealthCheckInterval的值，则HealthCHeckTimeout无效，超时时间为HealthCheckInterval的值。', example='5', minimum=1, maximum=300, position='Query'),
  healthCheckURI?: string(name='HealthCheckURI', description='用于健康检查的URI。  长度限制为1~80，只能使用字母、数字和”-/.%?#&amp;“这些字符。 URL不能只为”/“，但必须以”/“开头。    说明 在HealthCheck值为on时才会有效。', example='/checkpreload.htm', minLength=1, maxLength=80, position='Query'),
  healthyThreshold?: int32(name='HealthyThreshold', description='健康检查连续成功多少次后，将后端服务器的健康检查状态由fail判定为success。  取值：2~10。    说明 在HealthCheck值为on时才会有效。', example='3', minimum=2, maximum=10, position='Query'),
  idleTimeout?: int32(name='IdleTimeout', description='指定连接空闲超时时间，取值范围为1~60秒，默认值为15秒。  在超时时间内一直没有访问请求，负载均衡会暂时中断当前连接，直到一下次请求来临时重新建立新的连接。', example='15', minimum=1, maximum=60, position='Query'),
  listenerForward?: string(name='ListenerForward', description='是否开启HTTP至HTTPS的转发。取值：on | off。', example='off', position='Query'),
  listenerPort: int32(name='ListenerPort', description='负载均衡实例前端使用的端口。  取值：1-65535。', example='8080', minimum=1, maximum=65535, position='Query'),
  loadBalancerId: string(name='LoadBalancerId', description='负载均衡实例的ID。', example='lb-5s7crik3yo3bp03gqrbp5****', position='Query'),
  requestTimeout?: int32(name='RequestTimeout', description='指定请求超时时间，取值范围为1~180秒，默认值为60秒。  在超时时间内后端服务器一直没有响应，负载均衡将放弃等待，给客户端返回 HTTP 504 错误码。', example='60', minimum=1, maximum=180, position='Query'),
  scheduler?: string(name='Scheduler', description='调度算法。取值：  wrr（默认值）：权重值越高的后端服务器，被轮询到的次数（概率）也越高。 wlc：除了根据每台后端服务器设定的权重值来进行轮询，同时还考虑后端服务器的实际负载（即连接数）。当权重值相同时，当前连接数越小的后端服务器被轮询到的次数（概率）也越高。 rr：按照访问顺序依次将外部请求依序分发到后端服务器。', example='wrr', position='Query'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='健康检查连续失败多少次后，将后端服务器的健康检查状态由success判定为fail。  取值：2~10。   说明 在HealthCheck值为on时才会有效。', example='3', minimum=2, maximum=10, position='Query'),
  xForwardedFor?: string(name='XForwardedFor', description='是否开启通过X-Forwarded-For头字段获取来访者真实 IP。  取值为on。', example='off', position='Query'),
}

model CreateLoadBalancerHTTPListenerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateLoadBalancerHTTPListenerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLoadBalancerHTTPListenerResponseBody(name='body'),
}

async function createLoadBalancerHTTPListener(request: CreateLoadBalancerHTTPListenerRequest): CreateLoadBalancerHTTPListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLoadBalancerHTTPListener', 'POST', '/', 'json', false, 'json', request);
}

model CreateLoadBalancerHTTPSListenerRequest {
  cookie?: string(name='Cookie', description='服务器上配置的Cookie。 长度为1-200，只能包含ASCII英文字母和数字字符，不能包含逗号、分号或空格，也不能以$开头。 说明 当StickySession为on且StickySessionType为server时，该参数必选。', example='example', position='Query'),
  cookieTimeout?: int32(name='CookieTimeout', description='Cookie超时时间。  取值：1~86400（秒）。   说明 当StickySession为on且StickySessionType为insert时，该参数必选。', example='100', minimum=1, maximum=86400, position='Query'),
  description?: string(name='Description', description='设置监听的描述信息。  长度限制为1-80个字符，允许包含字母、数字、“-”、“/”、“.”和“_”等字符。支持中文描述。', example='监听说明', minLength=1, maxLength=80, position='Query'),
  forwardPort?: int32(name='ForwardPort', description='HTTP至HTTPS的监听转发端口。', example='0', minimum=1, maximum=65535, position='Query'),
  healthCheck: string(name='HealthCheck', description='是否开启健康检查。  取值：on | off。', example='on', position='Query'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='健康检查的后端服务器的端口。  取值： 1~65535。    说明 在HealthCheck值为on时才会有效。', example='11', minimum=1, maximum=65535, position='Query'),
  healthCheckDomain?: string(name='HealthCheckDomain', description='用于健康检查的域名，取值：  $_ip： 后端服务器的私网IP。当指定了IP或该参数未指定时，负载均衡会使用各后端服务器的私网IP当做健康检查使用的域名。是否要支持？ domain：域名长度为1-80字符，只能包含字母、数字、点号（.）和连字符（-）。   说明 在HealthCheck值为on时才会有效。', example='example.com', minLength=1, maxLength=80, position='Query'),
  healthCheckHttpCode?: string(name='HealthCheckHttpCode', description='健康检查正常的HTTP状态码，多个状态码用逗号分隔。  默认值为http_2xx。  取值：http_2xx | http_3xx | http_4xx | http_5xx。   说明 在HealthCheck值为on时才会有效。', example='http_2xx', position='Query'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='健康检查的时间间隔。  取值： 1~50（秒）。   说明 在HealthCheck值为on时才会有效。', example='2', minimum=1, maximum=50, position='Query'),
  healthCheckMethod?: string(name='HealthCheckMethod', example='head', position='Query'),
  healthCheckTimeout?: int32(name='HealthCheckTimeout', description='接收来自运行状况检查的响应需要等待的时间。如果后端ECS在指定的时间内没有正确响应，则判定为健康检查失败。在HealthCheck值为on时才会有效。  取值：1~300（秒）。   说明 如果HealthCHeckTimeout的值小于HealthCheckInterval的值，则HealthCHeckTimeout无效，超时时间为HealthCheckInterval的值。', example='5', minimum=1, maximum=300, position='Query'),
  healthCheckURI?: string(name='HealthCheckURI', description='用于健康检查的URI。  长度限制为1~80，只能使用字母、数字和”-/.%?#&amp;“这些字符。 URL不能只为”/“，但必须以”/“开头。    说明 在HealthCheck值为on时才会有效。', example='/checkpreload.htm', minLength=1, maxLength=80, position='Query'),
  healthyThreshold?: int32(name='HealthyThreshold', description='健康检查连续成功多少次后，将后端服务器的健康检查状态由fail判定为success。  取值：2~10。    说明 在HealthCheck值为on时才会有效。', example='3', minimum=2, maximum=10, position='Query'),
  idleTimeout?: int32(name='IdleTimeout', description='指定连接空闲超时时间，取值范围为1~60秒，默认值为15秒。  在超时时间内一直没有访问请求，负载均衡会暂时中断当前连接，直到一下次请求来临时重新建立新的连接。', example='15', minimum=1, maximum=60, position='Query'),
  listenerForward?: string(name='ListenerForward', description='是否开启HTTP至HTTPS的转发。取值：on | off。', example='off', position='Query'),
  listenerPort: int32(name='ListenerPort', description='负载均衡实例前端使用的端口。  取值：1-65535。', example='8080', minimum=1, maximum=65535, position='Query'),
  loadBalancerId: string(name='LoadBalancerId', description='负载均衡实例的ID。', example='lb-5s8w63yydi59w7klaikam****', position='Query'),
  requestTimeout?: int32(name='RequestTimeout', description='指定请求超时时间，取值范围为1~180秒，默认值为60秒。  在超时时间内后端服务器一直没有响应，负载均衡将放弃等待，给客户端返回 HTTP 504 错误码。', example='60', minimum=1, maximum=180, position='Query'),
  scheduler?: string(name='Scheduler', description='调度算法。取值：  wrr（默认值）：权重值越高的后端服务器，被轮询到的次数（概率）也越高。 wlc：除了根据每台后端服务器设定的权重值来进行轮询，同时还考虑后端服务器的实际负载（即连接数）。当权重值相同时，当前连接数越小的后端服务器被轮询到的次数（概率）也越高。 rr：按照访问顺序依次将外部请求依序分发到后端服务器。', example='wrr', position='Query'),
  serverCertificateId: string(name='ServerCertificateId', description='服务器证书的ID。', example='6027667', position='Query'),
  stickySessionType?: string(name='StickySessionType', description='cookie的处理方式。取值：  insert：植入Cookie。  客户端第一次访问时，负载均衡会在返回请求中植入Cookie（即在HTTP/HTTPS响应报文中插入SERVERID），下次客户端携带此Cookie访问，负载均衡服务会将请求定向转发给之前记录到的后端服务器上。  server：重写Cookie。  负载均衡发现用户自定义了Cookie，将会对原来的Cookie进行重写，下次客户端携带新的Cookie访问，负载均衡服务会将请求定向转发给之前记录到的后端服务器。   说明 当StickySession的值为on时，必须指定该参数。', example='insert', position='Query'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='健康检查连续失败多少次后，将后端服务器的健康检查状态由success判定为fail。  取值：2~10。   说明 在HealthCheck值为on时才会有效。', example='3', minimum=2, maximum=10, position='Query'),
}

model CreateLoadBalancerHTTPSListenerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateLoadBalancerHTTPSListenerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLoadBalancerHTTPSListenerResponseBody(name='body'),
}

async function createLoadBalancerHTTPSListener(request: CreateLoadBalancerHTTPSListenerRequest): CreateLoadBalancerHTTPSListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLoadBalancerHTTPSListener', 'POST', '/', 'json', false, 'json', request);
}

model CreateLoadBalancerTCPListenerRequest {
  backendServerPort?: int32(name='BackendServerPort', description='负载均衡实例后端使用的端口，取值：1~65535', example='8080', minimum=1, maximum=65535, position='Query'),
  description?: string(name='Description', description='设置监听的描述信息。  长度限制为1-80个字符，允许包含字母、数字、“-”、“/”、“.”和“_”等字符。支持中文描述。', example='example', minLength=1, maxLength=80, position='Query'),
  eipTransmit?: string(name='EipTransmit', example='on', position='Query'),
  establishedTimeout?: int32(name='EstablishedTimeout', description='连接超时时间。  取值：10~900（秒）。', example='500', minimum=10, maximum=900, position='Query'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='健康检查使用的端口。  取值：1~65535。  不设置此参数时，表示使用后端服务端口（BackendServerPort）。', example='8080', minimum=1, maximum=65535, position='Query'),
  healthCheckConnectTimeout?: int32(name='HealthCheckConnectTimeout', description='每次健康检查响应的最大超时时间。  取值：1~300（秒）。  默认值：5。', example='100', minimum=1, maximum=300, position='Query'),
  healthCheckDomain?: string(name='HealthCheckDomain', description='用于健康检查的域名', example='www.aliyundoc.com', minLength=1, maxLength=80, position='Query'),
  healthCheckHttpCode?: string(name='HealthCheckHttpCode', description='健康检查正常的HTTP状态码，多个状态码用逗号（,）分割。  取值：http_2xx（默认值） | http_3xx | http_4xx | http_5xx。', example='http_2xx', position='Query'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='健康检查的时间间隔。  取值：1~50（秒）。', example='3', minimum=1, maximum=50, position='Query'),
  healthCheckType?: string(name='HealthCheckType', description='健康检查类型。  取值：tcp（默认值） | http。', example='tcp', position='Query'),
  healthCheckURI?: string(name='HealthCheckURI', description='用于健康检查的URI。长度限制为1~80，只能使用字母、数字、短横线（-）、正斜杠（/）、点号（.）、百分号（%）、#和&amp;这些字符。 URL不能只为/，但必须以/开头。  当TCP监听需要使用HTTP健康检查时可配置此参数，如不配置则按TCP健康检查。', example='/checkpreload.htm', minLength=1, maxLength=80, position='Query'),
  healthyThreshold?: int32(name='HealthyThreshold', description='健康检查连续成功多少次后，将后端服务器的健康检查状态由fail判定为success。  取值： 2~10。', example='4', minimum=2, maximum=10, position='Query'),
  listenerPort: int32(name='ListenerPort', description='负载均衡实例前端使用的端口。  取值：1-65535。', example='80', minimum=1, maximum=65535, position='Query'),
  loadBalancerId: string(name='LoadBalancerId', description='负载均衡实例的ID。', example='lb-5ovkn1piwqmoqrfjdyhq4****', position='Query'),
  persistenceTimeout?: int32(name='PersistenceTimeout', description='会话保持的超时时间。  取值：0~3600（秒）。  默认值：0，表示关闭会话保持。', example='0', minimum=0, maximum=3600, position='Query'),
  scheduler?: string(name='Scheduler', description='度算法。取值：  wrr（默认值）：权重值越高的后端服务器，被轮询到的次数（概率）也越高。 wlc：除了根据每台后端服务器设定的权重值来进行轮询，同时还考虑后端服务器的实际负载（即连接数）。当权重值相同时，当前连接数越小的后端服务器被轮询到的次数（概率）也越高。 rr：按照访问顺序依次将外部请求依序分发到后端服务器。 sch：基于源IP地址的一致性hash，相同的源地址会调度到相同的后端服务器。', example='wrr', position='Query'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='健康检查连续失败多少次后，将后端服务器的健康检查状态由success判定为fail。  取值：2~10。', example='4', minimum=2, maximum=10, position='Query'),
}

model CreateLoadBalancerTCPListenerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='06F00FBB-3D9E-4CCE-9D43-1A6946A75456'),
}

model CreateLoadBalancerTCPListenerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLoadBalancerTCPListenerResponseBody(name='body'),
}

async function createLoadBalancerTCPListener(request: CreateLoadBalancerTCPListenerRequest): CreateLoadBalancerTCPListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLoadBalancerTCPListener', 'POST', '/', 'json', false, 'json', request);
}

model CreateLoadBalancerUDPListenerRequest {
  backendServerPort?: int32(name='BackendServerPort', description='负载均衡实例后端使用的端口，取值：1~65535', example='8080', minimum=1, maximum=65535, position='Query'),
  description?: string(name='Description', description='设置监听的描述信息。  长度限制为1-80个字符，允许包含字母、数字、“-”、“/”、“.”和“_”等字符。支持中文描述。', example='example', minLength=1, maxLength=80, position='Query'),
  eipTransmit?: string(name='EipTransmit', example='on', position='Query'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='健康检查使用的端口。取值：1-65535  不设置此参数时，表示使用后端服务端口（BackendServerPort）', example='8080', minimum=1, maximum=65535, position='Query'),
  healthCheckConnectTimeout?: int32(name='HealthCheckConnectTimeout', description='接收来自运行状况检查的响应需要等待的时间。  如果后端ENS在指定的时间内没有正确响应，则判定为健康检查失败。  取值：1-300（秒）。默认为5秒', example='100', minimum=1, maximum=300, position='Query'),
  healthCheckExp?: string(name='HealthCheckExp', description='UDP监听健康检查的响应串，只允许包含字母、数字，最大长度限制为64个字符。', example='ok', maxLength=64, position='Query'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='健康检查的时间间隔。  取值：1-50（秒）。', example='3', minimum=1, maximum=50, position='Query'),
  healthCheckReq?: string(name='HealthCheckReq', description='UDP监听健康检查的请求串，只允许包含字母、数字，最大长度限制为64个字符。', example='hello', maxLength=64, position='Query'),
  healthyThreshold?: int32(name='HealthyThreshold', description='健康检查连续成功多少次后，将后端服务器的健康检查状态由fail判定为success。  取值：2-10。', example='4', minimum=2, maximum=10, position='Query'),
  listenerPort: int32(name='ListenerPort', description='负载均衡实例前端使用的端口。  取值：1-65535。', example='80', minimum=1, maximum=65535, position='Query'),
  loadBalancerId: string(name='LoadBalancerId', description='负载均衡实例的ID。', example='lb-5q73cv04zeyh43lh74lp4****', position='Query'),
  scheduler?: string(name='Scheduler', description='调度算法。取值：  wrr（默认值）：权重值越高的后端服务器，被轮询到的次数（概率）也越高。 wlc：除了根据每台后端服务器设定的权重值来进行轮询，同时还考虑后端服务器的实际负载（即连接数）。当权重值相同时，当前连接数越小的后端服务器被轮询到的次数（概率）也越高。 rr：按照访问顺序依次将外部请求依序分发到后端服务器。 sch：基于源IP地址的一致性hash，相同的源地址会调度到相同的后端服务器。', example='wrr', position='Query'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='健康检查连续失败多少次后，将后端服务器的健康检查状态由success判定为fail。  取值：2-10。', example='4', minimum=2, maximum=10, position='Query'),
}

model CreateLoadBalancerUDPListenerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='06F00FBB-3D9E-4CCE-9D43-1A6946A75456'),
}

model CreateLoadBalancerUDPListenerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLoadBalancerUDPListenerResponseBody(name='body'),
}

async function createLoadBalancerUDPListener(request: CreateLoadBalancerUDPListenerRequest): CreateLoadBalancerUDPListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLoadBalancerUDPListener', 'POST', '/', 'json', false, 'json', request);
}

model CreateMountTargetRequest {
  ensRegionId: string(name='EnsRegionId', description='地域ID。', example='cn-beijing-cmcc', position='Query'),
  fileSystemId: string(name='FileSystemId', description='文件系统ID。', example='c50f8*****', position='Query'),
  mountTargetName: string(name='MountTargetName', description='挂载点名称。', example='TestMountPath', position='Query'),
  netWorkId: string(name='NetWorkId', description='网络ID。', example='n-*****', position='Query'),
}

model CreateMountTargetResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='70EACC9C-D07A-4A34-ADA4-A3DC0DE3C83E'),
  status?: string(name='Status', example='pending'),
}

model CreateMountTargetResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMountTargetResponseBody(name='body'),
}

async function createMountTarget(request: CreateMountTargetRequest): CreateMountTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMountTarget', 'POST', '/', 'json', false, 'json', request);
}

model CreateNatGatewayRequest {
  ensRegionId: string(name='EnsRegionId', example='cn-suzhou-telecom', position='Query'),
  instanceType?: string(name='InstanceType', example='enat.default', position='Query'),
  name?: string(name='Name', example='name', minLength=1, maxLength=128, position='Query'),
  networkId: string(name='NetworkId', example='n-5qj7ykuxmjn7k96l090sp****', position='Query'),
  vSwitchId: string(name='VSwitchId', example='vsw-5savh5ngxh8sbj14bu7n****', position='Query'),
}

model CreateNatGatewayResponseBody = {
  natGatewayId?: string(name='NatGatewayId', example='nat-5t7nh1cfm6kxiszlttr38****'),
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateNatGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNatGatewayResponseBody(name='body'),
}

async function createNatGateway(request: CreateNatGatewayRequest): CreateNatGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNatGateway', 'POST', '/', 'json', false, 'json', request);
}

model CreateNetworkRequest {
  cidrBlock: string(name='CidrBlock', example='192.168.0.0/24', position='Query'),
  description?: string(name='Description', example='this is my first network', minLength=2, maxLength=256, position='Query'),
  ensRegionId: string(name='EnsRegionId', example='cn-beijing-telecom', position='Query'),
  networkName?: string(name='NetworkName', example='abc', minLength=2, maxLength=128, position='Query'),
}

model CreateNetworkResponseBody = {
  networkId?: string(name='NetworkId', example='n-5***'),
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateNetworkResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNetworkResponseBody(name='body'),
}

async function createNetwork(request: CreateNetworkRequest): CreateNetworkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNetwork', 'POST', '/', 'json', false, 'json', request);
}

model CreateNetworkAclRequest {
  description?: string(name='Description', example='This is my NetworkAcl.', position='Query'),
  networkAclName?: string(name='NetworkAclName', example='acl-1', position='Query'),
}

model CreateNetworkAclResponseBody = {
  networkAclId?: string(name='NetworkAclId', example='String	nacl-5p1fg655nh68xyz9i****'),
  requestId?: string(name='RequestId', description='Id of the request', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model CreateNetworkAclResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNetworkAclResponseBody(name='body'),
}

async function createNetworkAcl(request: CreateNetworkAclRequest): CreateNetworkAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNetworkAcl', 'POST', '/', 'json', false, 'json', request);
}

model CreateNetworkAclEntryRequest {
  cidrBlock: string(name='CidrBlock', example='10.0.0.0/24', position='Query'),
  description?: string(name='Description', example='This is my NetworkAcl.', maxLength=256, position='Query'),
  direction: string(name='Direction', example='ingress', position='Query'),
  networkAclEntryName?: string(name='NetworkAclEntryName', example='acl-1', maxLength=128, position='Query'),
  networkAclId: string(name='NetworkAclId', example='nacl-bp1lhl0taikrbgnh****', position='Query'),
  policy: string(name='Policy', example='accept', position='Query'),
  portRange: string(name='PortRange', example='-1/-1', position='Query'),
  priority: int32(name='Priority', example='1', minimum=1, maximum=100, position='Query'),
  protocol: string(name='Protocol', example='all', position='Query'),
}

model CreateNetworkAclEntryResponseBody = {
  networkAclEntryId?: string(name='NetworkAclEntryId', example='nae-5****'),
  requestId?: string(name='RequestId', description='Id of the request', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model CreateNetworkAclEntryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNetworkAclEntryResponseBody(name='body'),
}

async function createNetworkAclEntry(request: CreateNetworkAclEntryRequest): CreateNetworkAclEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNetworkAclEntry', 'POST', '/', 'json', false, 'json', request);
}

model CreateSecurityGroupRequest {
  description?: string(name='Description', example='testDescription', position='Query'),
  securityGroupName?: string(name='SecurityGroupName', example='Dcdn1:2_3-4', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model CreateSecurityGroupResponseBody = {
  requestId?: string(name='RequestId', example='760bad53276431c499e30dc36f6b26be'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-bp1fg655nh68xyz9i***'),
}

model CreateSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSecurityGroupResponseBody(name='body'),
}

async function createSecurityGroup(request: CreateSecurityGroupRequest): CreateSecurityGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSecurityGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateSnatEntryRequest {
  natGatewayId: string(name='NatGatewayId', example='nat-5tawjw5j7sgd2deujxuk0****', position='Query'),
  snatEntryName?: string(name='SnatEntryName', example='test0', position='Query'),
  snatIp: string(name='SnatIp', example='120.XXX.XXX.71', position='Query'),
  sourceCIDR?: string(name='SourceCIDR', example='10.0.0.0/24', position='Query'),
  sourceNetworkId?: string(name='SourceNetworkId', example='n-2zeuphj08tt7q3brd****', position='Query'),
  sourceVSwitchId?: string(name='SourceVSwitchId', example='vsw-bp1hwx7gi495q260p****', position='Query'),
}

model CreateSnatEntryResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='018EED6A-69CA-58C8-A345-498927D5D34E'),
  snatEntryId?: string(name='SnatEntryId', example='snat-5tc08qfj5ecblfdn2rqr9****'),
}

model CreateSnatEntryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSnatEntryResponseBody(name='body'),
}

async function createSnatEntry(request: CreateSnatEntryRequest): CreateSnatEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSnatEntry', 'POST', '/', 'json', false, 'json', request);
}

model CreateVSwitchRequest {
  cidrBlock: string(name='CidrBlock', example='172.16.0.0/24', position='Query'),
  description?: string(name='Description', example='This is my vswitch.', position='Query'),
  ensRegionId: string(name='EnsRegionId', example='cn-xian-unicom', position='Query'),
  networkId?: string(name='NetworkId', example='n-257gqcdfvx6n****', position='Query'),
  vSwitchName?: string(name='VSwitchName', position='Query'),
}

model CreateVSwitchResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  vSwitchId?: string(name='VSwitchId', example='vsw-5****'),
}

model CreateVSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVSwitchResponseBody(name='body'),
}

async function createVSwitch(request: CreateVSwitchRequest): CreateVSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVSwitch', 'POST', '/', 'json', false, 'json', request);
}

model DeleteApplicationRequest {
  appId: string(name='AppId', example='d0639abf-789a-4527-b420-031d2cd9ad9b', position='Query'),
  timeout?: int32(name='Timeout', example='1800', position='Query'),
}

model DeleteApplicationResponseBody = {
  requestId?: string(name='RequestId', example='AAE90880-4970-4D81-A534-A6C0F3631F74'),
}

model DeleteApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteApplicationResponseBody(name='body'),
}

async function deleteApplication(request: DeleteApplicationRequest): DeleteApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApplication', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDeviceInternetPortRequest {
  instanceId: string(name='InstanceId', description='InstanceId', example='i-5scdmgpdegymqyugf85q66l1a', position='Query'),
  natType: string(name='NatType', description='NatType', example='DNAT', position='Query'),
  ruleId: string(name='RuleId', description='RuleId', example='snat-5rfzxah5gzfo869fl6epvon3y', position='Query'),
}

model DeleteDeviceInternetPortResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='51F57D60-7946-5EE1-A973-A3CCCCF2EF5B'),
  ruleIds?: [ string ](name='RuleIds', description='RuleIds'),
}

model DeleteDeviceInternetPortResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceInternetPortResponseBody(name='body'),
}

async function deleteDeviceInternetPort(request: DeleteDeviceInternetPortRequest): DeleteDeviceInternetPortResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDeviceInternetPort', 'GET', '/', 'json', false, 'json', request);
}

model DeleteEnsRouteEntryRequest {
  routeEntryId: string(name='RouteEntryId', description='要删除的路由条目ID。', example='rte-8vbmb2890wiret5maqq25', position='Query'),
}

model DeleteEnsRouteEntryResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteEnsRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEnsRouteEntryResponseBody(name='body'),
}

async function deleteEnsRouteEntry(request: DeleteEnsRouteEntryRequest): DeleteEnsRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEnsRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEpnInstanceRequest {
  EPNInstanceId: string(name='EPNInstanceId', example='epn-****', position='Query'),
}

model DeleteEpnInstanceResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteEpnInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEpnInstanceResponseBody(name='body'),
}

async function deleteEpnInstance(request: DeleteEpnInstanceRequest): DeleteEpnInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEpnInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFileSystemRequest {
  ensRegionId: string(name='EnsRegionId', example='cn-chengdu-telecom-4', position='Query'),
  fileSystemId: string(name='FileSystemId', example='e42640****', position='Query'),
}

model DeleteFileSystemResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model DeleteFileSystemResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFileSystemResponseBody(name='body'),
}

async function deleteFileSystem(request: DeleteFileSystemRequest): DeleteFileSystemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFileSystem', 'GET', '/', 'json', false, 'json', request);
}

model DeleteForwardEntryRequest {
  forwardEntryId: string(name='ForwardEntryId', example='fwd-5tfk8qgepr9ijjkqxt8do****', position='Query'),
}

model DeleteForwardEntryResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteForwardEntryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteForwardEntryResponseBody(name='body'),
}

async function deleteForwardEntry(request: DeleteForwardEntryRequest): DeleteForwardEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteForwardEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeleteImageRequest {
  imageId: string(name='ImageId', example='m-5taesrgwpo9zqj9cjqu7920xxx', position='Query'),
}

model DeleteImageResponseBody = {
  code?: int32(name='Code', example='0'),
  requestId?: string(name='RequestId', example='0D94920B-0349-5097-A57F-31876405F2E5'),
}

model DeleteImageResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteImageResponseBody(name='body'),
}

async function deleteImage(request: DeleteImageRequest): DeleteImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteImage', 'POST', '/', 'json', false, 'json', request);
}

model DeleteKeyPairsRequest {
  keyPairName: string(name='KeyPairName', example='TestKeyPairName', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model DeleteKeyPairsResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteKeyPairsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteKeyPairsResponseBody(name='body'),
}

async function deleteKeyPairs(request: DeleteKeyPairsRequest): DeleteKeyPairsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteKeyPairs', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLoadBalancerListenerRequest {
  listenerPort: int32(name='ListenerPort', example='8080', minimum=1, maximum=65535, position='Query'),
  listenerProtocol?: string(name='ListenerProtocol', example='tcp', position='Query'),
  loadBalancerId: string(name='LoadBalancerId', example='lb-5snthcyu1x10g7tywj7iu****', position='Query'),
}

model DeleteLoadBalancerListenerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteLoadBalancerListenerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLoadBalancerListenerResponseBody(name='body'),
}

async function deleteLoadBalancerListener(request: DeleteLoadBalancerListenerRequest): DeleteLoadBalancerListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLoadBalancerListener', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMountTargetRequest {
  ensRegionId: string(name='EnsRegionId', description='地域ID。', example='cn-beijing-cmcc', position='Query'),
  fileSystemId: string(name='FileSystemId', description='文件系统ID。', example='c50f8*****', position='Query'),
  mountTargetName: string(name='MountTargetName', description='挂载点名称。', example='TestMountPath', position='Query'),
}

model DeleteMountTargetResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model DeleteMountTargetResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMountTargetResponseBody(name='body'),
}

async function deleteMountTarget(request: DeleteMountTargetRequest): DeleteMountTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMountTarget', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNatGatewayRequest {
  natGatewayId: string(name='NatGatewayId', example='nat-5t7nh1cfm6kxiszlttr38****', position='Query'),
}

model DeleteNatGatewayResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteNatGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNatGatewayResponseBody(name='body'),
}

async function deleteNatGateway(request: DeleteNatGatewayRequest): DeleteNatGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNatGateway', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNetworkRequest {
  networkId: string(name='NetworkId', example='n-5***', position='Query'),
}

model DeleteNetworkResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteNetworkResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNetworkResponseBody(name='body'),
}

async function deleteNetwork(request: DeleteNetworkRequest): DeleteNetworkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNetwork', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNetworkAclRequest {
  networkAclId: string(name='NetworkAclId', example='nacl-bp1lhl0taikrbgnh****', position='Query'),
}

model DeleteNetworkAclResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DeleteNetworkAclResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNetworkAclResponseBody(name='body'),
}

async function deleteNetworkAcl(request: DeleteNetworkAclRequest): DeleteNetworkAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNetworkAcl', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNetworkAclEntryRequest {
  networkAclEntryId?: string(name='NetworkAclEntryId', example='nae-5****', position='Query'),
}

model DeleteNetworkAclEntryResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DeleteNetworkAclEntryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNetworkAclEntryResponseBody(name='body'),
}

async function deleteNetworkAclEntry(request: DeleteNetworkAclEntryRequest): DeleteNetworkAclEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNetworkAclEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSecurityGroupRequest {
  securityGroupId: string(name='SecurityGroupId', example='sg-bp67acfmxazb4ph***', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model DeleteSecurityGroupResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSecurityGroupResponseBody(name='body'),
}

async function deleteSecurityGroup(request: DeleteSecurityGroupRequest): DeleteSecurityGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSecurityGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSnatEntryRequest {
  snatEntryId: string(name='SnatEntryId', example='snat-5tfi6f8gds82mjmlofeym****', position='Query'),
}

model DeleteSnatEntryResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteSnatEntryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSnatEntryResponseBody(name='body'),
}

async function deleteSnatEntry(request: DeleteSnatEntryRequest): DeleteSnatEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSnatEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVSwitchRequest {
  vSwitchId: string(name='VSwitchId', example='vsw-5m9xhl****', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model DeleteVSwitchResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model DeleteVSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVSwitchResponseBody(name='body'),
}

async function deleteVSwitch(request: DeleteVSwitchRequest): DeleteVSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVSwitch', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAICImagesRequest {
  imageId?: string(name='ImageId', example='m-ad0ddaddc2d54adeaa09b7c0f1e****', position='Query'),
  imageUrl?: string(name='ImageUrl', example='****.alibaba-inc.com/aic/socimage:test', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='10', position='Query'),
}

model DescribeAICImagesResponseBody = {
  images?: [ 
    {
      creationTime?: string(name='CreationTime', example='2022-09-22 10:54:34'),
      imageId?: string(name='ImageId', example='m-ad0ddaddc2d54adeaa09b7c0f1e****'),
      imageUrl?: string(name='ImageUrl', example='****.alibaba-inc.com/aic/socimage:test'),
      status?: string(name='Status', example='available'),
      user?: string(name='User', example='user'),
    }
  ](name='Images'),
  requestId?: string(name='RequestId', description='Id of the request', example='72DC6C0A-D9A8-5345-A2BE-FE354CC728A0'),
}

model DescribeAICImagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAICImagesResponseBody(name='body'),
}

async function describeAICImages(request: DescribeAICImagesRequest): DescribeAICImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAICImages', 'POST', '/', 'json', false, 'json', request);
}

model DescribeARMServerInstancesRequest {
  ensRegionIds?: [ string ](name='EnsRegionIds', shrink='json', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  serverIds?: [ string ](name='ServerIds', shrink='json', position='Query'),
}

model DescribeARMServerInstancesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  servers?: [ 
    {
      AICInstances?: [ 
        {
          frequency?: long(name='Frequency', example='120'),
          imageId?: string(name='ImageId', example='m-****'),
          instanceId?: string(name='InstanceId', example='aic-instance****'),
          networkAttributes?: {
            ipAddress?: string(name='IpAddress', example='192.168.1.1'),
            networkId?: string(name='NetworkId', example='n-*****'),
            vSwitchId?: string(name='VSwitchId', example='vsw-****'),
          }(name='NetworkAttributes'),
          resolution?: string(name='Resolution', example='1920*1080'),
          spec?: string(name='Spec', example='aic.cf53r.c2.np'),
          state?: string(name='State', example='running'),
          status?: string(name='Status', example='success'),
        }
      ](name='AICInstances'),
      creationTime?: string(name='CreationTime', example='2022-05-07 11:59:09'),
      ensRegionId?: string(name='EnsRegionId', example='cn-hanghzou-27'),
      expiredTime?: string(name='ExpiredTime', example='String	2027-05-07 11:59:09'),
      serverId?: string(name='ServerId', example='cas-******'),
      specName?: string(name='SpecName', example='cas.cf53r'),
      state?: string(name='State', example='success'),
      status?: string(name='Status', example='running'),
    }
  ](name='Servers'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeARMServerInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeARMServerInstancesResponseBody(name='body'),
}

async function describeARMServerInstances(request: DescribeARMServerInstancesRequest): DescribeARMServerInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeARMServerInstances', 'GET', '/', 'json', false, 'json', request);
}

model DescribeApplicationRequest {
  appId: string(name='AppId', example='a2bac6f4-75dc-455e-8389-2dc8e47526d3', position='Query'),
  appVersions?: string(name='AppVersions', example='v1,v2', position='Query'),
  level?: string(name='Level', example='National', position='Query'),
  outDetailStatParams?: string(name='OutDetailStatParams', example='{\\"appInfo\\":true,\\"detailStat\\": true, \\"appVersionStat\\": true, \\"districtStat\\":true ,\\"instanceStat\\": true, \\"podCountStat\\": true}', position='Query'),
}

model DescribeApplicationResponseBody = {
  application?: string(name='Application'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApplicationResponseBody(name='body'),
}

async function describeApplication(request: DescribeApplicationRequest): DescribeApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApplication', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApplicationResourceSummaryRequest {
  level?: string(name='Level', example='National', position='Query'),
  resourceType?: string(name='ResourceType', example='BareMetal-Arm', position='Query'),
}

model DescribeApplicationResourceSummaryResponseBody = {
  applicationResource?: string(name='ApplicationResource', example='{
    "Level":"RegionId",
    "Summary":[
        {
            "InstanceType":"ens.a6e.large",
            "SystemDiskMaxSize":20480,
            "DataDiskMaxSize":0,
            "BandwidthOutLimit":100,
            "InstanceTotalMaxCount":0,
            "InstanceTotalCount":4,
            "InstanceCountStat":[
                {
                    "AreaCode":"330100",
                    "AreaName":"",
                    "IspCode":"cmcc",
                    "RegionIds":[
                        "cn-hangzhou-cmcc-7"
                    ],
                    "InstanceMaxCount":0,
                    "InstanceCount":4
                }
            ]
        }
    ]
}'),
  requestId?: string(name='RequestId', example='50373E71-7710-4620-8AAB-133CCE49451C'),
}

model DescribeApplicationResourceSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApplicationResourceSummaryResponseBody(name='body'),
}

async function describeApplicationResourceSummary(request: DescribeApplicationResourceSummaryRequest): DescribeApplicationResourceSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApplicationResourceSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAvailableResourceRequest {
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model DescribeAvailableResourceResponseBody = {
  code?: int32(name='Code', example='0'),
  images?: {
    image?: [ 
    {
      imageId?: string(name='ImageId', example='centos_6_08_64_20G_alibase_20171208'),
      imageName?: string(name='ImageName', example='centos_6_08_64_20G_alibase_****'),
    }
  ](name='Image')
  }(name='Images'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  supportResources?: {
    supportResource?: [ 
    {
      dataDiskSize?: string(name='DataDiskSize', example='500'),
      ensRegionId?: string(name='EnsRegionId', example='cn-beijing-cmcc'),
      instanceSpec?: string(name='InstanceSpec', example='ens.sn1.stiny'),
      supportResourcesCount?: string(name='SupportResourcesCount', example='9'),
      systemDiskSize?: string(name='SystemDiskSize', example='20'),
    }
  ](name='SupportResource')
  }(name='SupportResources'),
}

model DescribeAvailableResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableResourceResponseBody(name='body'),
}

async function describeAvailableResource(request: DescribeAvailableResourceRequest): DescribeAvailableResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvailableResource', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAvailableResourceInfoRequest {
}

model DescribeAvailableResourceInfoResponseBody = {
  images?: {
    image?: [ 
    {
      imageId?: string(name='ImageId', example='centos_6_08_64_20G_a****'),
      imageName?: string(name='ImageName', example='centos_6_08_64_20G_a****'),
      imageSize?: int32(name='ImageSize', example='20'),
    }
  ](name='Image')
  }(name='Images'),
  requestId?: string(name='RequestId', example='8629F679-B51D-4194-A1CC-5D8F504C362B'),
  supportResources?: {
    supportResource?: [ 
    {
      bandwidthTypes?: {
        bandwidthType?: [ string ](name='BandwidthType')
      }(name='BandwidthTypes'),
      dataDiskMaxSize?: int32(name='DataDiskMaxSize', example='200'),
      dataDiskMinSize?: int32(name='DataDiskMinSize', example='100'),
      ensRegionIds?: {
        ensRegionId?: [ string ](name='EnsRegionId')
      }(name='EnsRegionIds'),
      ensRegionIdsExtends?: {
        ensRegionId?: [ 
        {
          area?: string(name='Area', example='EastChina'),
          enName?: string(name='EnName', example='EnName'),
          ensRegionId?: string(name='EnsRegionId', example='cn-chengdu-telecom-4'),
          name?: string(name='Name'),
          province?: string(name='Province'),
        }
      ](name='EnsRegionId')
      }(name='EnsRegionIdsExtends'),
      instanceSpeces?: {
        instanceSpec?: [ string ](name='InstanceSpec')
      }(name='InstanceSpeces'),
      systemDiskMaxSize?: int32(name='SystemDiskMaxSize', example='100'),
      systemDiskMinSize?: int32(name='SystemDiskMinSize', example='20'),
    }
  ](name='SupportResource')
  }(name='SupportResources'),
}

model DescribeAvailableResourceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableResourceInfoResponseBody(name='body'),
}

async function describeAvailableResourceInfo(request: DescribeAvailableResourceInfoRequest): DescribeAvailableResourceInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvailableResourceInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBandWithdChargeTypeRequest {
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model DescribeBandWithdChargeTypeResponseBody = {
  bandWithTypeInfo?: string(name='BandWithTypeInfo'),
  chargeContractType?: string(name='ChargeContractType', example='ChargeByGrade'),
  chargeCycleInfo?: string(name='ChargeCycleInfo', example='{null}'),
  code?: int32(name='Code', example='0'),
  requestId?: string(name='RequestId', example='791049FD-49CE-4667-BD6C-F23094DEDA7A'),
}

model DescribeBandWithdChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBandWithdChargeTypeResponseBody(name='body'),
}

async function describeBandWithdChargeType(request: DescribeBandWithdChargeTypeRequest): DescribeBandWithdChargeTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBandWithdChargeType', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBandwitdhByInternetChargeTypeRequest {
  endTime: string(name='EndTime', example='2022-01-18T09:39:54Z', position='Query'),
  ensRegionId?: string(name='EnsRegionId', example='cn-hangzhou-cbn-2', position='Query'),
  isp?: string(name='Isp', example='unicom', position='Query'),
  startTime: string(name='StartTime', example='2021-11-15T16:00:00Z', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model DescribeBandwitdhByInternetChargeTypeResponseBody = {
  bandwidthValue?: long(name='BandwidthValue', example='123'),
  internetChargeType?: string(name='InternetChargeType', example='95BandwidthByMonth'),
  requestId?: string(name='RequestId', example='08027633-8501-5A36-B90D-F7C38B5EC75D'),
  timeStamp?: string(name='TimeStamp', example='2019-10-12T05:45:00Z'),
}

model DescribeBandwitdhByInternetChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBandwitdhByInternetChargeTypeResponseBody(name='body'),
}

async function describeBandwitdhByInternetChargeType(request: DescribeBandwitdhByInternetChargeTypeRequest): DescribeBandwitdhByInternetChargeTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBandwitdhByInternetChargeType', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCloudDiskAvailableResourceInfoRequest {
}

model DescribeCloudDiskAvailableResourceInfoResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='0AE4F26E-7527-569F-A987-E3CF269A3C11'),
  supportResources?: {
    supportResource?: [ 
    {
      canBuyCount?: long(name='CanBuyCount', example='2'),
      category?: string(name='Category', example='cloud_ssd'),
      defaultDiskSize?: long(name='DefaultDiskSize', example='20'),
      diskMaxSize?: long(name='DiskMaxSize', example='80'),
      diskMinSize?: long(name='DiskMinSize', example='20'),
      ensRegionId?: string(name='EnsRegionId', example='cn-beijing-cmcc'),
      ensRegionName?: string(name='EnsRegionName'),
    }
  ](name='SupportResource')
  }(name='SupportResources'),
}

model DescribeCloudDiskAvailableResourceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCloudDiskAvailableResourceInfoResponseBody(name='body'),
}

async function describeCloudDiskAvailableResourceInfo(request: DescribeCloudDiskAvailableResourceInfoRequest): DescribeCloudDiskAvailableResourceInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudDiskAvailableResourceInfo', 'GET', '/', 'json', false, 'json', request);
}

model DescribeCloudDiskTypesRequest {
  ensRegionId?: string(name='EnsRegionId', description='A short description of struct', example='cn-chongqing-cmcc', position='Query'),
}

model DescribeCloudDiskTypesResponseBody = {
  requestId?: string(name='RequestId', example='77990CEE-B714-5702-BDE6-943F702277DD'),
  supportResources?: {
    supportResource?: [ 
    {
      category?: string(name='Category', example='cloud_efficiency'),
      ensRegionId?: string(name='EnsRegionId', example='cn-guangzhou-10'),
    }
  ](name='SupportResource')
  }(name='SupportResources'),
}

model DescribeCloudDiskTypesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCloudDiskTypesResponseBody(name='body'),
}

async function describeCloudDiskTypes(request: DescribeCloudDiskTypesRequest): DescribeCloudDiskTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudDiskTypes', 'GET', '/', 'json', false, 'json', request);
}

model DescribeCreatePrePaidInstanceResultRequest {
  instanceId: string(name='InstanceId', example='i-6ecpqvkicnchxccozrp****', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model DescribeCreatePrePaidInstanceResultResponseBody = {
  instanceCreateResult?: {
    instanceCreateStatus?: string(name='InstanceCreateStatus', example='Successed'),
    instanceId?: string(name='InstanceId', example='i-6ecpqvkicnchxccozrpxxxx'),
  }(name='InstanceCreateResult'),
  requestId?: string(name='RequestId', example='AAE90880-4970-4D81-A534-A6C0F3631F74'),
}

model DescribeCreatePrePaidInstanceResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCreatePrePaidInstanceResultResponseBody(name='body'),
}

async function describeCreatePrePaidInstanceResult(request: DescribeCreatePrePaidInstanceResultRequest): DescribeCreatePrePaidInstanceResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCreatePrePaidInstanceResult', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataDistResultRequest {
  appId: string(name='AppId', example='e76f8985-7965-41fc-925b-9648bb6bf650', position='Query'),
  dataNames?: string(name='DataNames', example='cloudgame-shanghai/deploy_app/20220215/1644895216305ACG_M21B-ota-1.1.2-D-0215.0628_V1_0002-pre-weiduan.zip', position='Query'),
  dataVersions?: string(name='DataVersions', example='4885', position='Query'),
  instanceIds?: string(name='InstanceIds', example='i-7ecpqvkicnchxccozrp,i-6ecpqvkicnchxccozrp', position='Query'),
  maxDate?: string(name='MaxDate', example='2022-02-01', position='Query'),
  minDate?: string(name='MinDate', example='2022-01-02', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model DescribeDataDistResultResponseBody = {
  distResults?: {
    distResult?: [ 
    {
      name?: string(name='Name', example='gcs-prod-websocket-eip-unicom'),
      statusStats?: {
        statusStat?: [ 
        {
          instanceCount?: string(name='InstanceCount', example='10'),
          instances?: {
            instance?: [ 
            {
              instanceId?: string(name='InstanceId', example='i-5qzje8f5un1wmi341m2yetaxv'),
              startTime?: string(name='StartTime', example='2021-11-19T07:24:52Z'),
              statusDescrip?: string(name='StatusDescrip'),
              updateTime?: string(name='UpdateTime', example='2021-10-11T02:38:19Z'),
            }
          ](name='Instance')
          }(name='Instances'),
          status?: string(name='Status', example='SUCCESS'),
        }
      ](name='StatusStat')
      }(name='StatusStats'),
      version?: string(name='Version', example='standard'),
    }
  ](name='DistResult')
  }(name='DistResults'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='50373E71-7710-4620-8AAB-133CCE49451C'),
  totalCount?: int32(name='TotalCount', example='49'),
}

model DescribeDataDistResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataDistResultResponseBody(name='body'),
}

async function describeDataDistResult(request: DescribeDataDistResultRequest): DescribeDataDistResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataDistResult', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataDownloadURLRequest {
  appId: string(name='AppId', example='474bdef0-d149-4695-abfb-52912d9143f0', position='Query'),
  dataName: string(name='DataName', example='mirror_file/pk-1642597182026-878199448832413.tar', position='Query'),
  dataVersion: string(name='DataVersion', example='7895', position='Query'),
  expireTimeout?: long(name='ExpireTimeout', example='600', position='Query'),
  serverFilterStrategy?: string(name='ServerFilterStrategy', example='{\\"name\\": \\"ScheduleToRegionId\\",\\"parameters\\":{\\"operator\\": \\"In\\",\\"values\\": [\\"cn-shijiazhuang-telecom_unicom_cmcc\\"]}}', position='Query'),
}

model DescribeDataDownloadURLResponseBody = {
  code?: long(name='Code', example='0'),
  data?: {
    expireTime?: string(name='ExpireTime', example='2021-12-10T03:36:27Z'),
    serverList?: [ 
      {
        host?: string(name='Host', example='1.1.1.1:8080'),
        regionId?: string(name='RegionId', example='cn-chenzhou-5'),
      }
    ](name='ServerList'),
    url?: string(name='Url', example='/file/1450088842124331/97a32f2a-aa2c-436a-b19c-05b20d258618/f0313053530fc727f81b7d03fad93cd2/e4c2e8edac362acab7123654b9e73432?ak=edgepaas-innerapi-daily&ts=1611229454&sign=Yycbax%2F4OsTgm6BLoxR6lPs5gKE%3D'),
  }(name='Data'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeDataDownloadURLResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataDownloadURLResponseBody(name='body'),
}

async function describeDataDownloadURL(request: DescribeDataDownloadURLRequest): DescribeDataDownloadURLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataDownloadURL', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDataPushResultRequest {
  appId: string(name='AppId', example='e76f8985-7965-41fc-925b-9648bb6bf650', position='Query'),
  dataNames?: string(name='DataNames', example='159828628258496/mirror_file/game-2553efe7-7bf8-40fb-a6e7-09c9c00a992a.tar', position='Query'),
  dataVersions?: string(name='DataVersions', example='90396', position='Query'),
  maxDate?: string(name='MaxDate', example='2022-02-20', position='Query'),
  minDate?: string(name='MinDate', example='2022-02-15', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionIds?: string(name='RegionIds', example='cn-wuhan-telecom_unicom_cmcc-2,cn-jiaozuo-2', position='Query'),
}

model DescribeDataPushResultResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  pushResults?: {
    pushResult?: [ 
    {
      name?: string(name='Name', example='gcs-pre-websocket-eip-telecom'),
      statusStatS?: {
        statusStat?: [ 
        {
          regionIdCount?: int32(name='RegionIdCount', example='2'),
          regionIds?: {
            regionId?: [ 
            {
              regionId?: string(name='RegionId', example='cn-wuxi-5'),
              startTime?: string(name='StartTime', example='2021-12-28T16:00:00Z'),
              statusDescrip?: string(name='StatusDescrip', example='Success'),
              updateTime?: string(name='UpdateTime', example='2021-12-07T02:37:10Z'),
            }
          ](name='RegionId')
          }(name='RegionIds'),
          status?: string(name='Status', example='FAILED'),
        }
      ](name='StatusStat')
      }(name='StatusStatS'),
      version?: string(name='Version', example='standard'),
    }
  ](name='PushResult')
  }(name='PushResults'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  totalCount?: int32(name='TotalCount', example='6'),
}

model DescribeDataPushResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataPushResultResponseBody(name='body'),
}

async function describeDataPushResult(request: DescribeDataPushResultRequest): DescribeDataPushResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataPushResult', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeviceServiceRequest {
  appId?: string(name='AppId', example='a2bac6f4-75dc-455e-8389-2dc8e47526d3', position='Query'),
  ensRegionId?: string(name='EnsRegionId', example='cn-chongqing-10', position='Query'),
  instanceId?: string(name='InstanceId', example='i-5sg1owx0g4ojy66ab2tez77r2', position='Query'),
  orderId?: string(name='OrderId', example='2661b1dd-3453-418d-8182-bb34f79e8d3c', position='Query'),
  regionId?: string(name='RegionId', example='cn-chongqing-11', position='Query'),
  serviceId?: string(name='ServiceId', description='Service ID', example='s-cxxxxx', position='Query'),
}

model DescribeDeviceServiceResponseBody = {
  appMetaData?: {
    appId?: string(name='AppId', example='97a32f2a-aa2c-436a-b19c-05b20d258618'),
    appName?: string(name='AppName', example='iotx-api-admin'),
    appStableVersion?: string(name='AppStableVersion', example='v1'),
    appType?: string(name='AppType', example='Common'),
    clusterName?: string(name='ClusterName', example='poc'),
    createTime?: string(name='CreateTime', example='2022-03-03T03:42:11'),
    description?: string(name='Description'),
  }(name='AppMetaData'),
  appStatus?: {
    phase?: string(name='Phase', example='CREATING'),
    statusDescrip?: string(name='StatusDescrip'),
    updateTime?: string(name='UpdateTime', example='2021-01-26T05:04Z'),
  }(name='AppStatus'),
  requestId?: string(name='RequestId', description='Id of the request', example='3A535110-3EE3-5EC5-B1ED-10B7067A1FC8'),
  resourceDetailInfos?: [ 
    {
      deviceName?: string(name='DeviceName', example='5JhF100NEgdBcpNren32'),
      id?: string(name='ID', example='h-uf6009zoaexs5pefypbo'),
      ip?: string(name='IP', example='120.27.219.219'),
      ISP?: string(name='ISP', example='cmcc'),
      imageID?: string(name='ImageID', example='m-2ze40oyhjorpyw61k7be'),
      mac?: string(name='Mac', example='AA:BB:77:88:99:03'),
      regionID?: string(name='RegionID', example='cn-jiaozuo-2'),
      server?: string(name='Server', example='ens-nc2'),
      status?: string(name='Status', example='Running'),
      type?: string(name='Type', example='ens.ac6.large'),
    }
  ](name='ResourceDetailInfos'),
  resourceInfos?: [ 
    {
      appVersion?: string(name='AppVersion', example='v1'),
      areaCode?: string(name='AreaCode', example='410800'),
      areaName?: string(name='AreaName'),
      createTime?: string(name='CreateTime', example='2019-10-02T08:26Z'),
      deviceInfos?: [ 
        {
          name?: string(name='Name', example='test-api'),
          network?: [ 
            {
              containerPorts?: string(name='ContainerPorts', example='10000-10010'),
              externalIp?: string(name='ExternalIp', example='39.105.62.120'),
              hostPorts?: string(name='HostPorts', example='80-8080'),
              protocol?: string(name='Protocol', example='TCP'),
            }
          ](name='Network'),
          status?: string(name='Status', example='Running'),
        }
      ](name='DeviceInfos'),
      instanceId?: string(name='InstanceId', example='i-5s9boobrmh5000kv4jmi0oeai'),
      instanceStatus?: string(name='InstanceStatus', example='Running'),
      internalIps?: [ 
        {
          ip?: string(name='Ip', example='10.0.2.3'),
        }
      ](name='InternalIps'),
      publicIps?: [ 
        {
          ip?: string(name='Ip', example='122.13.173.137'),
        }
      ](name='PublicIps'),
      regionCode?: string(name='RegionCode', example='cn-jiaozuo-2'),
      regionId?: string(name='RegionId', example='cn-jiaozuo-2'),
      regionName?: string(name='RegionName'),
    }
  ](name='ResourceInfos'),
}

model DescribeDeviceServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeviceServiceResponseBody(name='body'),
}

async function describeDeviceService(request: DescribeDeviceServiceRequest): DescribeDeviceServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeviceService', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDisksRequest {
  category?: string(name='Category', example='local_ssd', position='Query'),
  diskChargeType?: string(name='DiskChargeType', example='prepay', position='Query'),
  diskId?: string(name='DiskId', example='d-5soak1gqa507lyfzvz0xoy9ko', position='Query'),
  diskIds?: string(name='DiskIds', example='[\\"d-wz99njena32z90kiy7sp\\"]', position='Query'),
  diskName?: string(name='DiskName', example='DiskName', position='Query'),
  diskType?: string(name='DiskType', example='PostPayDisk', position='Query'),
  ensRegionId?: string(name='EnsRegionId', example='cn-kunming-telecom', position='Query'),
  ensRegionIds?: string(name='EnsRegionIds', example='["cn-suzhou-telecom","cn-chengdu-telecom"]', position='Query'),
  orderByParams?: string(name='OrderByParams', example='{"EnsRegionId":"desc"}', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='10', position='Query'),
  status?: string(name='Status', example='Available', position='Query'),
  type?: string(name='Type', example='system', position='Query'),
}

model DescribeDisksResponseBody = {
  code?: int32(name='Code', example='0'),
  disks?: {
    disks?: [ 
    {
      category?: string(name='Category', example='local_ssd'),
      creationTime?: string(name='CreationTime', example='2021-11-11T14:34:55+08:00'),
      diskChargeType?: string(name='DiskChargeType', example='prepaid'),
      diskId?: string(name='DiskId', example='d-5svum1dx1w4a4spr54lgrnoaa'),
      diskName?: string(name='DiskName', example='fvt-ecs-5cf009f6'),
      ensRegionId?: string(name='EnsRegionId', example='cn-guangzhou-10'),
      instanceId?: string(name='InstanceId', example='i-5t77rb0yoz79m28ku60sxuhn4'),
      instanceName?: string(name='InstanceName'),
      portable?: boolean(name='Portable', example='true'),
      size?: int32(name='Size', example='20'),
      status?: string(name='Status', example='Available'),
      type?: string(name='Type', example='1'),
    }
  ](name='Disks')
  }(name='Disks'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='50'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  totalCount?: int32(name='TotalCount', example='13'),
}

model DescribeDisksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDisksResponseBody(name='body'),
}

async function describeDisks(request: DescribeDisksRequest): DescribeDisksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDisks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEipAddressesRequest {
  eips?: string(name='Eips', example='[\\"eip-5rd9i3pftfgbavl4y1b7hm4a3\\"]', position='Query'),
  ensRegionId: string(name='EnsRegionId', example='cn-nanjing-cmcc', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model DescribeEipAddressesResponseBody = {
  eipAddresses?: {
    eipAddress?: [ 
    {
      eip?: string(name='Eip', example='203.107.44.241'),
      instanceIdInternetIp?: string(name='InstanceIdInternetIp', example='203.107.44.242'),
    }
  ](name='EipAddress')
  }(name='EipAddresses'),
  requestId?: string(name='RequestId', example='CCFD3F24-44AF-5508-B18D-5100BFC68602'),
}

model DescribeEipAddressesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEipAddressesResponseBody(name='body'),
}

async function describeEipAddresses(request: DescribeEipAddressesRequest): DescribeEipAddressesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEipAddresses', 'POST', '/', 'json', false, 'json', request);
}

model DescribeElbAvailableResourceInfoRequest {
}

model DescribeElbAvailableResourceInfoResponseBody = {
  elbAvailableResourceInfo?: [ 
    {
      area?: string(name='Area', example='SouthEast'),
      canBuyCount?: string(name='CanBuyCount', example='1'),
      enName?: string(name='EnName', example='cn-guangdong-10'),
      ensRegionId?: string(name='EnsRegionId', example='cn-guangdong-10'),
      loadBalancerSpec?: [ string ](name='LoadBalancerSpec'),
      name?: string(name='Name', example='test'),
      province?: string(name='Province', example='Shanghai'),
    }
  ](name='ElbAvailableResourceInfo'),
  requestId?: string(name='RequestId', example='25AAD194-4A37-51CF-B1CA-1E86FDAC23A6'),
}

model DescribeElbAvailableResourceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeElbAvailableResourceInfoResponseBody(name='body'),
}

async function describeElbAvailableResourceInfo(request: DescribeElbAvailableResourceInfoRequest): DescribeElbAvailableResourceInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeElbAvailableResourceInfo', 'GET', '/', 'json', false, 'json', request);
}

model DescribeEnsEipAddressesRequest {
  allocationId?: string(name='AllocationId', description='要查询的EIP实例的ID。  最多支持输入50个EIP实例ID，实例ID之间用逗号（,）分隔。', example='eip-5q9uwkd9bznjpxz8hr6cirnjk', position='Query'),
  associatedInstanceId?: string(name='AssociatedInstanceId', example='lb-5t18quoohsrc3xkf86spmnu77', position='Query'),
  associatedInstanceType?: string(name='AssociatedInstanceType', example='SlbInstance', position='Query'),
  eipAddress?: string(name='EipAddress', description='要查询的EIP的IP地址。  最多支持输入50个EIP的IP地址，IP地址之间用逗号（,）分隔。', example='192.168.0.1', position='Query'),
  ensRegionId?: string(name='EnsRegionId', description='ENS节点ID', example='cn-chengdu-telecom', position='Query'),
  pageNumber?: int32(name='PageNumber', description='列表的页码，默认值为1。', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='分页查询时每页的行数，最大值为100，默认值为10。', example='50', maximum=100, position='Query'),
}

model DescribeEnsEipAddressesResponseBody = {
  eipAddresses?: {
    eipAddress?: [ 
    {
      allocationId?: string(name='AllocationId', example='eip-5sainglpw7qfem3icir4s****'),
      allocationTime?: string(name='AllocationTime', example='1624885274000'),
      bandwidth?: int32(name='Bandwidth', example='50'),
      chargeType?: string(name='ChargeType', example='PostPaid'),
      description?: string(name='Description', example='example'),
      ensRegionId?: string(name='EnsRegionId', example='cn-xian-telecom'),
      instanceId?: string(name='InstanceId', example='lb-5sc3kum2e0sz34wbqrws9****'),
      instanceType?: string(name='InstanceType', example='SlbInstance'),
      internetChargeType?: string(name='InternetChargeType', example='95BandwidthByMonth'),
      ipAddress?: string(name='IpAddress', example='10.10.10'),
      isp?: string(name='Isp', example='cmcc'),
      name?: string(name='Name', example='test'),
      status?: string(name='Status', example='Available'),
    }
  ](name='EipAddress')
  }(name='EipAddresses'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='50'),
  requestId?: string(name='RequestId', description='Id of the request', example='8629F679-B51D-4194-A1CC-5D8F504C362B'),
  totalCount?: int32(name='TotalCount', example='7'),
}

model DescribeEnsEipAddressesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEnsEipAddressesResponseBody(name='body'),
}

async function describeEnsEipAddresses(request: DescribeEnsEipAddressesRequest): DescribeEnsEipAddressesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEnsEipAddresses', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEnsNetDistrictRequest {
  netDistrictCode?: string(name='NetDistrictCode', example='100106', position='Query'),
  netLevelCode: string(name='NetLevelCode', example='Big', position='Query'),
  version: string(name='Version', example='2017-07-10', position='Query'),
}

model DescribeEnsNetDistrictResponseBody = {
  code?: int32(name='Code', example='0'),
  ensNetDistricts?: {
    ensNetDistrict?: [ 
    {
      ensRegionIdCount?: string(name='EnsRegionIdCount', example='2'),
      netDistrictCode?: string(name='NetDistrictCode', example='100106'),
      netDistrictEnName?: string(name='NetDistrictEnName', example='southWest'),
      netDistrictFatherCode?: string(name='NetDistrictFatherCode', example='100000'),
      netDistrictLevel?: string(name='NetDistrictLevel', example='Big'),
      netDistrictName?: string(name='NetDistrictName'),
    }
  ](name='EnsNetDistrict')
  }(name='EnsNetDistricts'),
  requestId?: string(name='RequestId', example='F3B261DD-3858-4D3C-877D-303ADF374600'),
}

model DescribeEnsNetDistrictResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEnsNetDistrictResponseBody(name='body'),
}

async function describeEnsNetDistrict(request: DescribeEnsNetDistrictRequest): DescribeEnsNetDistrictResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEnsNetDistrict', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEnsNetLevelRequest {
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model DescribeEnsNetLevelResponseBody = {
  code?: int32(name='Code', example='0'),
  ensNetLevels?: {
    ensNetLevel?: [ 
    {
      ensNetLevelCode?: string(name='EnsNetLevelCode', example='Big'),
    }
  ](name='EnsNetLevel')
  }(name='EnsNetLevels'),
  requestId?: string(name='RequestId', example='86A6D421-A0C7-4C01-8648-47377CA6A2CE'),
}

model DescribeEnsNetLevelResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEnsNetLevelResponseBody(name='body'),
}

async function describeEnsNetLevel(request: DescribeEnsNetLevelRequest): DescribeEnsNetLevelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEnsNetLevel', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEnsNetSaleDistrictRequest {
  netDistrictCode?: string(name='NetDistrictCode', example='100105', position='Query'),
  netLevelCode: string(name='NetLevelCode', example='Big', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model DescribeEnsNetSaleDistrictResponseBody = {
  code?: int32(name='Code', example='0'),
  ensNetDistricts?: {
    ensNetDistrict?: [ 
    {
      ensRegionIdCount?: string(name='EnsRegionIdCount'),
      instanceCount?: string(name='InstanceCount', example='{                         "count":2,                         "code":"multiCarrier"                     }'),
      netDistrictCode?: string(name='NetDistrictCode', example='100101'),
      netDistrictEnName?: string(name='NetDistrictEnName', example='northEast'),
      netDistrictFatherCode?: string(name='NetDistrictFatherCode', example='100000'),
      netDistrictLevel?: string(name='NetDistrictLevel', example='Big'),
      netDistrictName?: string(name='NetDistrictName'),
    }
  ](name='EnsNetDistrict')
  }(name='EnsNetDistricts'),
  requestId?: string(name='RequestId', example='1707B55C-A12F-43EF-BC66-14FFDB9253C3'),
}

model DescribeEnsNetSaleDistrictResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEnsNetSaleDistrictResponseBody(name='body'),
}

async function describeEnsNetSaleDistrict(request: DescribeEnsNetSaleDistrictRequest): DescribeEnsNetSaleDistrictResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEnsNetSaleDistrict', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEnsRegionIdIpv6InfoRequest {
  ensRegionId: string(name='EnsRegionId', example='cn-chengdu-xxxx-4', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model DescribeEnsRegionIdIpv6InfoResponseBody = {
  requestId?: string(name='RequestId', example='3703C4AC-9396-458C-8F25-1D701334D309'),
  supportIpv6Info?: {
    ensRegionId?: string(name='EnsRegionId', example='cn-chengdu-xxxx-4'),
    supportIpv6?: boolean(name='SupportIpv6', example='true'),
  }(name='SupportIpv6Info'),
}

model DescribeEnsRegionIdIpv6InfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEnsRegionIdIpv6InfoResponseBody(name='body'),
}

async function describeEnsRegionIdIpv6Info(request: DescribeEnsRegionIdIpv6InfoRequest): DescribeEnsRegionIdIpv6InfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEnsRegionIdIpv6Info', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEnsRegionIdResourceRequest {
  endTime: string(name='EndTime', example='2020-06-16T06:33:15', position='Query'),
  isp?: string(name='Isp', example='cmcc', position='Query'),
  orderByParams?: string(name='OrderByParams', example='InstanceCount：desc', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: string(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  startTime: string(name='StartTime', example='2020-06-16T06:33:15Z', position='Query'),
}

model DescribeEnsRegionIdResourceResponseBody = {
  ensRegionIdResources?: {
    ensRegionIdResource?: [ 
    {
      area?: string(name='Area', example='West'),
      areaCode?: string(name='AreaCode', example='300100'),
      bizDate?: string(name='BizDate', example='2019-10-30'),
      ensRegionId?: string(name='EnsRegionId', example='cn-hangzhou-telecom'),
      ensRegionIdName?: string(name='EnsRegionIdName'),
      instanceCount?: int32(name='InstanceCount', example='10'),
      internetBandwidth?: long(name='InternetBandwidth', example='100'),
      isp?: string(name='Isp', example='cmcc'),
      vCpu?: int32(name='VCpu', example='10'),
    }
  ](name='EnsRegionIdResource')
  }(name='EnsRegionIdResources'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='476600B1-C9E2-4245-A26F-DC7EA8071425'),
  totalCount?: int32(name='TotalCount', example='58'),
}

model DescribeEnsRegionIdResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEnsRegionIdResourceResponseBody(name='body'),
}

/**
  * ****
  *
 */
async function describeEnsRegionIdResource(request: DescribeEnsRegionIdResourceRequest): DescribeEnsRegionIdResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEnsRegionIdResource', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEnsRegionsRequest {
  ensRegionId?: string(name='EnsRegionId', example='cn-dalian-unicom', position='Query'),
}

model DescribeEnsRegionsResponseBody = {
  code?: int32(name='Code', example='0'),
  ensRegions?: {
    ensRegions?: [ 
    {
      area?: string(name='Area', example='NorthEastChina'),
      enName?: string(name='EnName', example='NorthChina'),
      ensRegionId?: string(name='EnsRegionId', example='cn-dalian-unicom'),
      name?: string(name='Name'),
      province?: string(name='Province'),
    }
  ](name='EnsRegions')
  }(name='EnsRegions'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeEnsRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEnsRegionsResponseBody(name='body'),
}

async function describeEnsRegions(request: DescribeEnsRegionsRequest): DescribeEnsRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEnsRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEnsResourceUsageRequest {
  expiredEndTime?: string(name='ExpiredEndTime', description='vm实例使用结束时间查询结束范围，，格式： yyyy-MM-dd或yyyy-MM-dd HH:mm:ss', example='2018-06-15T09:07:23Z', position='Query'),
  expiredStartTime?: string(name='ExpiredStartTime', description='vm实例使用结束时间查询开始范围，格式： yyyy-MM-dd或yyyy-MM-dd HH:mm:ss', example='2018-06-15T09:07:23Z', position='Query'),
}

model DescribeEnsResourceUsageResponseBody = {
  ensResourceUsage?: [ 
    {
      computeResourceCount?: int32(name='ComputeResourceCount', example='2'),
      cpuSum?: long(name='CpuSum', example='2'),
      diskCount?: int32(name='DiskCount', example='4'),
      downCount?: int32(name='DownCount', example='7'),
      expiredCount?: int32(name='ExpiredCount', example='1'),
      expiringCount?: int32(name='ExpiringCount', example='0'),
      gpuSum?: long(name='GpuSum', example='6'),
      instanceCount?: int32(name='InstanceCount', example='2'),
      runningCount?: int32(name='RunningCount', example='19'),
      serviceType?: string(name='ServiceType', example='1'),
      storageSum?: long(name='StorageSum', example='5000'),
    }
  ](name='EnsResourceUsage'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeEnsResourceUsageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEnsResourceUsageResponseBody(name='body'),
}

async function describeEnsResourceUsage(request: DescribeEnsResourceUsageRequest): DescribeEnsResourceUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEnsResourceUsage', 'GET', '/', 'json', false, 'json', request);
}

model DescribeEnsRouteEntryListRequest {
  destinationCidrBlock?: string(name='DestinationCidrBlock', description='路由条目的目标网段', example='11.0.0.0/16', position='Query'),
  nextHopId?: string(name='NextHopId', description='下一跳实例ID。', example='i-2zecshuv3axtr2gc4noa', position='Query'),
  nextHopType?: string(name='NextHopType', description='下一跳类型', example='Instance', position='Query'),
  pageNumber?: int32(name='PageNumber', description='列表的页码，默认值为1。', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='分页查询时每页的行数，最大值为100，默认值为10。', example='10', maximum=100, position='Query'),
  routeEntryId?: string(name='RouteEntryId', description='要查询的路由条目的ID。', example='rte-8vbdw66evgv44u2u7v3hx', position='Query'),
  routeEntryName?: string(name='RouteEntryName', description='路由条目的名称。', example='test0', position='Query'),
  routeEntryType?: string(name='RouteEntryType', description='路由条目的类型', example='Custom', position='Query'),
  routeTableId: string(name='RouteTableId', description='要查询的路由表的ID。', example='vtb-hp3wdhynneo7fsclox8hs', position='Query'),
}

model DescribeEnsRouteEntryListResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  routeEntrys?: [ 
    {
      description?: string(name='Description', description='路由条目的描述信息。'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', description='路由条目的目标网段。', example='101.0.45.0/24'),
      nextHops?: [ 
        {
          nextHopId?: string(name='NextHopId', description='下一跳实例ID。', example='i-bp1111yup9991890woxq'),
          nextHopType?: string(name='NextHopType', description='下一跳类型', example='Instance'),
        }
      ](name='NextHops', description='下一跳'),
      routeEntryId?: string(name='RouteEntryId', description='路由条目的ID。', example='rte-2zeksx7h436f5unk349m1'),
      routeEntryName?: string(name='RouteEntryName', description='路由条目的名称。', example='test0'),
      routeTableId?: string(name='RouteTableId', description='路由表ID。', example='vtb-uf62p9o5cn35fi8xgurnm'),
      status?: string(name='Status', description='路由条目的状态', example='Available'),
      type?: string(name='Type', description='路由条目的类型', example='Custom'),
    }
  ](name='RouteEntrys', description='路由条目信息。'),
  totalCount?: int32(name='TotalCount', example='7'),
}

model DescribeEnsRouteEntryListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEnsRouteEntryListResponseBody(name='body'),
}

async function describeEnsRouteEntryList(request: DescribeEnsRouteEntryListRequest): DescribeEnsRouteEntryListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEnsRouteEntryList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEpnBandWidthDataRequest {
  EPNInstanceId?: string(name='EPNInstanceId', example='epn-20200825134537VyK81T', position='Query'),
  endTime: string(name='EndTime', example='2021-12-16T16:00:00Z', position='Query'),
  ensRegionId?: string(name='EnsRegionId', example='cn-beijing-cmcc', position='Query'),
  instanceId?: string(name='InstanceId', example='i-5sg1owx0g4ojy66ab2tez77r2', position='Query'),
  isp?: string(name='Isp', example='cmcc', position='Query'),
  networkingModel?: string(name='NetworkingModel', example='SpeedUp', position='Query'),
  period: string(name='Period', example='300', position='Query'),
  startTime: string(name='StartTime', example='2021-12-15T16:00:00Z', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model DescribeEpnBandWidthDataResponseBody = {
  monitorData?: {
    bandWidthMonitorData?: [ 
      {
        downBandWidth?: long(name='DownBandWidth', example='0'),
        internetRX?: long(name='InternetRX', example='0'),
        internetTX?: long(name='InternetTX', example='0'),
        timeStamp?: string(name='TimeStamp', example='2019-10-12T05:45:00Z'),
        upBandWidth?: long(name='UpBandWidth', example='0'),
      }
    ](name='BandWidthMonitorData'),
    maxDownBandWidth?: long(name='MaxDownBandWidth', example='16817468'),
    maxUpBandWidth?: long(name='MaxUpBandWidth', example='231008'),
  }(name='MonitorData'),
  requestId?: string(name='RequestId', example='1D289DAA-F6DA-5FC4-AE47-F5C8B6277BFC'),
}

model DescribeEpnBandWidthDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEpnBandWidthDataResponseBody(name='body'),
}

async function describeEpnBandWidthData(request: DescribeEpnBandWidthDataRequest): DescribeEpnBandWidthDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEpnBandWidthData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEpnBandwitdhByInternetChargeTypeRequest {
  endTime: string(name='EndTime', example='2021-12-06T15:59:59Z', position='Query'),
  ensRegionId?: string(name='EnsRegionId', example='cn-changsha-unicom', position='Query'),
  isp?: string(name='Isp', example='telecom', position='Query'),
  networkingModel?: string(name='NetworkingModel', example='Connection', position='Query'),
  startTime: string(name='StartTime', example='2021-12-02T16:00:00Z', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model DescribeEpnBandwitdhByInternetChargeTypeResponseBody = {
  bandwidthValue?: long(name='BandwidthValue', example='123'),
  internetChargeType?: string(name='InternetChargeType', example='BandwidthByDay'),
  requestId?: string(name='RequestId', example='216BCED0-E055-5DDB-8E06-4084A62A4A44'),
  timeStamp?: string(name='TimeStamp', example='2019-10-12T05:45:00Z'),
}

model DescribeEpnBandwitdhByInternetChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEpnBandwitdhByInternetChargeTypeResponseBody(name='body'),
}

async function describeEpnBandwitdhByInternetChargeType(request: DescribeEpnBandwitdhByInternetChargeTypeRequest): DescribeEpnBandwitdhByInternetChargeTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEpnBandwitdhByInternetChargeType', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEpnInstanceAttributeRequest {
  EPNInstanceId: string(name='EPNInstanceId', example='epn-xxxx', position='Query'),
}

model DescribeEpnInstanceAttributeResponseBody = {
  confVersions?: [ 
    {
      confVersion?: string(name='ConfVersion', example='2017-10-11'),
      ensRegionId?: string(name='EnsRegionId', example='cn-chengdu-telecom'),
    }
  ](name='ConfVersions'),
  EPNInstanceId?: string(name='EPNInstanceId', example='epn-xxxx'),
  EPNInstanceName?: string(name='EPNInstanceName', example='epn-test'),
  instances?: [ 
    {
      ensRegionId?: string(name='EnsRegionId', example='cn-chengdu-telecom-4'),
      instanceId?: string(name='InstanceId', example='epn-xxx'),
      instanceName?: string(name='InstanceName', example='epn-test'),
      isp?: string(name='Isp', example='cmcc'),
      privateIpAddress?: string(name='PrivateIpAddress', example='192.168.1.12'),
      publicIpAddress?: string(name='PublicIpAddress', example='20.3.XX.XX'),
      status?: string(name='Status', example='Running'),
    }
  ](name='Instances'),
  networkingModel?: string(name='NetworkingModel', example='SpeedUp'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  vSwitches?: [ 
    {
      cidrBlock?: string(name='CidrBlock', example='10.0.0.1/24'),
      ensRegionId?: string(name='EnsRegionId', example='cn-chengdu-telecom-4'),
      vSwitchId?: string(name='VSwitchId', example='vs-xxxx'),
      vSwitchName?: string(name='VSwitchName', example='vs-test'),
    }
  ](name='VSwitches'),
}

model DescribeEpnInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEpnInstanceAttributeResponseBody(name='body'),
}

async function describeEpnInstanceAttribute(request: DescribeEpnInstanceAttributeRequest): DescribeEpnInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEpnInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEpnInstancesRequest {
  EPNInstanceId?: string(name='EPNInstanceId', example='2017-11-10', position='Query'),
  EPNInstanceName?: string(name='EPNInstanceName', example='testEPNInstanceName', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model DescribeEpnInstancesResponseBody = {
  EPNInstances?: {
    EPNInstance?: [ 
    {
      creationTime?: string(name='CreationTime', example='2019-11-01T06:08:46Z'),
      EPNInstanceId?: string(name='EPNInstanceId', example='epn****'),
      EPNInstanceName?: string(name='EPNInstanceName', example='ens_test_epn'),
      EPNInstanceType?: string(name='EPNInstanceType', example='EdgeToEdge'),
      endTime?: string(name='EndTime', example='2019-11-01T06:08:46Z'),
      internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', example='40'),
      modifyTime?: string(name='ModifyTime', example='2019-11-01T06:08:46Z'),
      networkingModel?: string(name='NetworkingModel', example='SpeedUp'),
      startTime?: string(name='StartTime', example='2019-11-01T06:08:46Z'),
      status?: string(name='Status', example='Running'),
    }
  ](name='EPNInstance')
  }(name='EPNInstances'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='40'),
  requestId?: string(name='RequestId', example='A1707FC0-430C-423A-B624-284046B20399'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeEpnInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEpnInstancesResponseBody(name='body'),
}

async function describeEpnInstances(request: DescribeEpnInstancesRequest): DescribeEpnInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEpnInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEpnMeasurementDataRequest {
  endDate: string(name='EndDate', example='2022-01-30T16:00:00Z', position='Query'),
  startDate: string(name='StartDate', example='2021-09-30T16:00:00Z', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model DescribeEpnMeasurementDataResponseBody = {
  measurementDatas?: {
    measurementData?: [ 
    {
      bandWidthFeeDatas?: {
        bandWidthFeeData?: [ 
        {
          costCode?: string(name='CostCode', example='cn-cmcc-1'),
          costName?: string(name='CostName'),
          costType?: string(name='CostType', example='SpeedUp'),
          costVal?: int32(name='CostVal', example='16486'),
          ispLine?: string(name='IspLine'),
        }
      ](name='BandWidthFeeData')
      }(name='BandWidthFeeDatas'),
      chargeModel?: string(name='ChargeModel', example='ChargeByGrade'),
      costCycle?: string(name='CostCycle', example='2019-07-30'),
      costEndTime?: string(name='CostEndTime', example='2019-07-30T16:00:00Z'),
      costStartTime?: string(name='CostStartTime', example='2019-07-29T16:00:00Z'),
    }
  ](name='MeasurementData')
  }(name='MeasurementDatas'),
  requestId?: string(name='RequestId', example='A6328C33-6304-5291-8641-0A00A99D0DD0'),
}

model DescribeEpnMeasurementDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEpnMeasurementDataResponseBody(name='body'),
}

async function describeEpnMeasurementData(request: DescribeEpnMeasurementDataRequest): DescribeEpnMeasurementDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEpnMeasurementData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExportImageInfoRequest {
  imageId?: string(name='ImageId', example='m-xxxxx', position='Query'),
  imageName?: string(name='ImageName', example='testImageName', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', maximum=50, position='Query'),
}

model DescribeExportImageInfoResponseBody = {
  images?: {
    image?: [ 
    {
      architecture?: string(name='Architecture', example='x86_64'),
      creationTime?: string(name='CreationTime', example='2017-12-08T12:10:03Z'),
      exportedImageURL?: string(name='ExportedImageURL', example='https://user_defined_bucket.oss-cn-beijing.aliyuncs.com/m-xxxxxxxxx1.qcow2'),
      imageExportStatus?: string(name='ImageExportStatus', example='Exported'),
      imageId?: string(name='ImageId', example='m-xxxxxxxxx1'),
      imageName?: string(name='ImageName', example='m-xxxxxxxxx1'),
      imageOwnerAlias?: string(name='ImageOwnerAlias', example='system'),
      platform?: string(name='Platform', example='centos'),
    }
  ](name='Image')
  }(name='Images'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', example='13'),
}

model DescribeExportImageInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExportImageInfoResponseBody(name='body'),
}

async function describeExportImageInfo(request: DescribeExportImageInfoRequest): DescribeExportImageInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExportImageInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExportImageStatusRequest {
  imageId: string(name='ImageId', example='centos_6_08_64_20G_alibase_****', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model DescribeExportImageStatusResponseBody = {
  imageExportStatus?: string(name='ImageExportStatus', example='Exporting'),
  requestId?: string(name='RequestId', example='14BBB3A0-3DBE-54F5-AEC8-01D3F6B1EBE2'),
}

model DescribeExportImageStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExportImageStatusResponseBody(name='body'),
}

async function describeExportImageStatus(request: DescribeExportImageStatusRequest): DescribeExportImageStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExportImageStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFileSystemsRequest {
  ensRegionId?: string(name='EnsRegionId', description='地域ID。', example='cn-beijing-cmcc', position='Query'),
  fileSystemId?: string(name='FileSystemId', description='文件系统ID。', example='c50f8*****', position='Query'),
  fileSystemName?: string(name='FileSystemName', description='文件系统名称。
参与挂载点路径，创建后不允许修改。
LB:/fileSystemName/mountTargetName', example='FileSystem1', position='Query'),
  pageNumber?: int32(name='PageNumber', description='页码，起始值为1。
默认值：1。', example='1', minimum=1, maximum=100, position='Query'),
  pageSize?: int32(name='PageSize', description='每页行数，最大值为100行。
默认值：10。', example='10', minimum=1, maximum=100, position='Query'),
}

model DescribeFileSystemsResponseBody = {
  fileSystems?: [ 
    {
      capacity?: long(name='Capacity', description='容量。
单位：GIB。', example='100000'),
      creationTime?: string(name='CreationTime', description='文件系统创建时间。', example='2022-08-31 12:00:00'),
      ensRegionId?: string(name='EnsRegionId', description='地域ID。', example='cn-beijing-cmcc'),
      fileSystemId?: string(name='FileSystemId', description='文件系统ID。', example='c50f8*****'),
      fileSystemName?: string(name='FileSystemName', description='文件系统名称。', example='FileSystem1'),
      meteredSize?: long(name='MeteredSize', description='文件系统的使用量。
非实时使用量，为上一小时最大使用量，单位：Byte。', example='102400'),
      mountTargets?: [ 
        {
          mountTargetDomain?: string(name='MountTargetDomain', description='挂载点路径。', example='*.*.*.*:/${FileSystemName}/{MountTargetName}'),
          mountTargetName?: string(name='MountTargetName', description='挂载点名称。', example='target1'),
          netWorkId?: string(name='NetWorkId', description='网络ID。', example='n-****'),
          status?: string(name='Status', description='挂载点状态。
包括：
active：可用
inactive：不可用
pending：任务处理中
deleting：删除中', example='active'),
        }
      ](name='MountTargets', description='挂载点信息集合'),
      payType?: string(name='PayType', description='付费类型
PostPaid：后付费', example='PostPaid'),
      protocolType?: string(name='ProtocolType', description='文件系统协议类型。
包括：
nfs：nfs文件协议
smb：smb文件协议', example='NFS'),
      status?: string(name='Status', description='文件系统状态
pending：当前文件系统正在处理任务中。
running：当前文件系统可用，当状态为running时才可以进行后续操作（例如：创建挂载点等）。
stopped：当前文件系统不可用。
extending：当前文件系统扩容中。
stopping：当前文件系统停机中。
deleting：当前文件系统删除中。', example='running'),
      storageType?: string(name='StorageType', description='存储类型
capacity：容量型', example='capacity'),
    }
  ](name='FileSystems', description='文件系统信息集合。'),
  pageNumber?: int32(name='PageNumber', description='页码。', example='1'),
  pageSize?: int32(name='PageSize', description='单页行数。', example='2'),
  requestId?: string(name='RequestId', example='762DD527-358B-1E48-8005-CCE3ED4EB9E0'),
  totalCount?: int32(name='TotalCount', description='总数。', example='1'),
}

model DescribeFileSystemsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFileSystemsResponseBody(name='body'),
}

async function describeFileSystems(request: DescribeFileSystemsRequest): DescribeFileSystemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFileSystems', 'GET', '/', 'json', false, 'json', request);
}

model DescribeForwardTableEntriesRequest {
  externalIp?: string(name='ExternalIp', example='36.XXX.XXX.72', position='Query'),
  forwardEntryId?: string(name='ForwardEntryId', example='fwd-5tfi6f0rutmd00xrhkag7****', position='Query'),
  forwardEntryName?: string(name='ForwardEntryName', example='test0', position='Query'),
  internalIp?: string(name='InternalIp', example='10.XXX.XXX.50', position='Query'),
  ipProtocol?: string(name='IpProtocol', example='TCP', position='Query'),
  natGatewayId: string(name='NatGatewayId', example='nat-5t7nh1cfm6kxiszlttr38****', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model DescribeForwardTableEntriesResponseBody = {
  forwardTableEntries?: [ 
    {
      externalIp?: string(name='ExternalIp', example='120.XXX.XXX.70'),
      externalPort?: string(name='ExternalPort', example='22'),
      forwardEntryId?: string(name='ForwardEntryId', example='fwd-5tf66679oi2uoxcvlg0g2****'),
      forwardEntryName?: string(name='ForwardEntryName', example='test0'),
      healthCheckPort?: string(name='HealthCheckPort', example='80'),
      internalIp?: string(name='InternalIp', example='10.XXX.XXX.3'),
      internalPort?: string(name='InternalPort', example='22'),
      ipProtocol?: string(name='IpProtocol', example='Any'),
      natGatewayId?: string(name='NatGatewayId', example='nat-5tawjw5j7sgd2deujxuk0****'),
      status?: string(name='Status', example='Available'),
    }
  ](name='ForwardTableEntries'),
  pageNumber?: string(name='PageNumber', example='1'),
  pageSize?: string(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: string(name='TotalCount', example='100'),
}

model DescribeForwardTableEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeForwardTableEntriesResponseBody(name='body'),
}

async function describeForwardTableEntries(request: DescribeForwardTableEntriesRequest): DescribeForwardTableEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeForwardTableEntries', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageInfosRequest {
  osType?: string(name='OsType', example='linux', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model DescribeImageInfosResponseBody = {
  code?: int32(name='Code', example='0'),
  images?: {
    image?: [ 
    {
      description?: string(name='Description', example='centos_6_08_64_20G_alibase_2017****'),
      imageId?: string(name='ImageId', example='centos_6_08_64_20G_alibase_2017****'),
      imageSize?: string(name='ImageSize', example='20'),
      imageVersion?: string(name='ImageVersion', example='6.8'),
      OSName?: string(name='OSName', example='centos'),
      OSType?: string(name='OSType', example='linux'),
    }
  ](name='Image')
  }(name='Images'),
  requestId?: string(name='RequestId', example='5568A08C-10A9-47F3-902F-647298B463FB'),
}

model DescribeImageInfosResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageInfosResponseBody(name='body'),
}

async function describeImageInfos(request: DescribeImageInfosRequest): DescribeImageInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageInfos', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImageSharePermissionRequest {
  aliyunId?: long(name='AliyunId', example='1717104080918005', position='Query'),
  imageId: string(name='ImageId', example='m-5s7qotzavwbrnzaqh4unm7lt7', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='10', maximum=100, position='Query'),
}

model DescribeImageSharePermissionResponseBody = {
  accounts?: {
    account?: [ string ](name='Account')
  }(name='Accounts'),
  imageId?: string(name='ImageId', example='m-5qkf6jv9a0tzd5ipwx5fi8u1c'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='100'),
  requestId?: string(name='RequestId', example='A44EE357-6174-5E37-A801-48F5790F9ACE'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeImageSharePermissionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageSharePermissionResponseBody(name='body'),
}

async function describeImageSharePermission(request: DescribeImageSharePermissionRequest): DescribeImageSharePermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageSharePermission', 'POST', '/', 'json', false, 'json', request);
}

model DescribeImagesRequest {
  ensRegionId?: string(name='EnsRegionId', example='cn-dalian-unicom', position='Query'),
  imageId?: string(name='ImageId', example='m-5qm2r6xo7njrpdkx04q1oxb4z', position='Query'),
  imageName?: string(name='ImageName', example='centos_6_08_64_20G_a****', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='50', position='Query'),
  status?: string(name='Status', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
  product?: string(name='product', position='Query'),
}

model DescribeImagesResponseBody = {
  code?: int32(name='Code', example='0'),
  images?: {
    image?: [ 
    {
      architecture?: string(name='Architecture', example='x86_64'),
      creationTime?: string(name='CreationTime', example='2017-12-08T12:10:03Z'),
      imageId?: string(name='ImageId', example='centos_6_08_64_20G_alibase_20171208'),
      imageName?: string(name='ImageName', example='Ubuntu_16.04'),
      imageOwnerAlias?: string(name='ImageOwnerAlias', example='system'),
      imageSize?: string(name='ImageSize', example='40'),
      platform?: string(name='Platform', example='centos'),
    }
  ](name='Image')
  }(name='Images'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='8331AA01-C16D-5481-BB47-D19CEBAA811E'),
  totalCount?: int32(name='TotalCount', example='4'),
}

model DescribeImagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImagesResponseBody(name='body'),
}

async function describeImages(request: DescribeImagesRequest): DescribeImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImages', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceAutoRenewAttributeRequest {
  instanceIds: string(name='InstanceIds', example='i-5ci7l7k1m9m2zmhp4iw3o****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model DescribeInstanceAutoRenewAttributeResponseBody = {
  code?: int32(name='Code', example='0'),
  instanceRenewAttributes?: {
    instanceRenewAttribute?: [ 
    {
      autoRenewal?: boolean(name='AutoRenewal', example='false'),
      duration?: string(name='Duration', example='0'),
      instanceId?: string(name='InstanceId', example='i-5ci7l7k1m9m2zmhp4iw3o****'),
    }
  ](name='InstanceRenewAttribute')
  }(name='InstanceRenewAttributes'),
  requestId?: string(name='RequestId', example='4DD66F05-3116-4BAA-B588-52EB2E7F431D'),
}

model DescribeInstanceAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceAutoRenewAttributeResponseBody(name='body'),
}

async function describeInstanceAutoRenewAttribute(request: DescribeInstanceAutoRenewAttributeRequest): DescribeInstanceAutoRenewAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceAutoRenewAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceMonitorDataRequest {
  endTime?: string(name='EndTime', example='2019-10-30T08:00:00Z', position='Query'),
  instanceId?: string(name='InstanceId', example='yourInstance ID', position='Query'),
  period?: string(name='Period', example='60', position='Query'),
  startTime?: string(name='StartTime', example='2019-10-29T23:00:00Z', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model DescribeInstanceMonitorDataResponseBody = {
  code?: int32(name='Code', example='0'),
  monitorData?: {
    instanceMonitorData?: [ 
    {
      CPU?: string(name='CPU', example='0.02'),
      instanceId?: string(name='InstanceId', example='yourInstance ID'),
      memory?: string(name='Memory'),
    }
  ](name='InstanceMonitorData')
  }(name='MonitorData'),
  requestId?: string(name='RequestId', example='C8B26B44-0189-443E-9816-D951F59623A9'),
}

model DescribeInstanceMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceMonitorDataResponseBody(name='body'),
}

async function describeInstanceMonitorData(request: DescribeInstanceMonitorDataRequest): DescribeInstanceMonitorDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceMonitorData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceSpecRequest {
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model DescribeInstanceSpecResponseBody = {
  bandwidthLimit?: int32(name='BandwidthLimit', example='0'),
  code?: int32(name='Code', example='0'),
  dataDiskMaxSize?: int32(name='DataDiskMaxSize', example='20015'),
  dataDiskMinSize?: int32(name='DataDiskMinSize', example='0'),
  instanceSpecs?: {
    instanceSpec?: [ 
    {
      core?: string(name='Core', example='1'),
      displayName?: string(name='DisplayName'),
      instanceType?: string(name='InstanceType', example='ens.sn1.stiny'),
      memory?: string(name='Memory', example='2048'),
    }
  ](name='InstanceSpec')
  }(name='InstanceSpecs'),
  requestId?: string(name='RequestId', example='1ECC937A-AE0E-4626-BE51-DED1D6D1C888'),
  systemDiskMaxSize?: int32(name='SystemDiskMaxSize', example='80'),
}

model DescribeInstanceSpecResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceSpecResponseBody(name='body'),
}

async function describeInstanceSpec(request: DescribeInstanceSpecRequest): DescribeInstanceSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceSpec', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceTypesRequest {
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model DescribeInstanceTypesResponseBody = {
  code?: int32(name='Code', example='0'),
  instanceTypes?: {
    instanceType?: [ 
    {
      cpuCoreCount?: int32(name='CpuCoreCount', example='2'),
      instanceTypeId?: string(name='InstanceTypeId'),
      instanceTypeName?: string(name='InstanceTypeName', example='ens.xxx.small'),
      memorySize?: int32(name='MemorySize', example='8192'),
    }
  ](name='InstanceType')
  }(name='InstanceTypes'),
  requestId?: string(name='RequestId', example='D452D190-BADF-5D09-910D-599B96D42AAA'),
}

model DescribeInstanceTypesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceTypesResponseBody(name='body'),
}

async function describeInstanceTypes(request: DescribeInstanceTypesRequest): DescribeInstanceTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceTypes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceVncUrlRequest {
  instanceId: string(name='InstanceId', description='实例ID。', example='i-5bp1hzoinajzkh91h****', position='Query'),
}

model DescribeInstanceVncUrlResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  vncUrl?: string(name='VncUrl', description='管理终端Url。', example='wss%3A%2F%2Fhz01-vncproxy.aliyun.com%2Fwebsockify%2F%3Fs%3DDvh%252FIA%252BYc73gWO48cBx2gBxUDVzaAnSKr74pq30mzqUYgeUMcB%252FbkNixDxdEA996'),
}

model DescribeInstanceVncUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceVncUrlResponseBody(name='body'),
}

async function describeInstanceVncUrl(request: DescribeInstanceVncUrlRequest): DescribeInstanceVncUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceVncUrl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstancesRequest {
  ensRegionId?: string(name='EnsRegionId', example='cn-beijing-cmcc', position='Query'),
  ensRegionIds?: string(name='EnsRegionIds', example='["cn-suzhou-telecom","cn-chengdu-telecom"]', position='Query'),
  ensServiceId?: string(name='EnsServiceId', example='ens-20190730202316s****', position='Query'),
  imageId?: string(name='ImageId', example='centos_6_08_64_20G_alibase_****', position='Query'),
  instanceId?: string(name='InstanceId', example='i-5iqczfxps7csjrxeca****', position='Query'),
  instanceIds?: string(name='InstanceIds', example='["i-5iqczfxps7csjrxeca07****", "i-5iqczfxps7csjrxeca07****"]]', position='Query'),
  instanceName?: string(name='InstanceName', example='TestName', position='Query'),
  instanceResourceType?: string(name='InstanceResourceType', example='EnsService', position='Query'),
  intranetIp?: string(name='IntranetIp', position='Query'),
  networkId?: string(name='NetworkId', example='n-2zeuphj08tt7q3brd****', position='Query'),
  orderByParams?: string(name='OrderByParams', example='{"InstanceNameSort":"asc","ExpireTimeSort":"asc","CreationTimeSort":"desc"}}', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: string(name='PageSize', example='10', position='Query'),
  searchKey?: string(name='SearchKey', example='Joshua', position='Query'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-5kyicq2kfcapxrdds6tar7jqb', position='Query'),
  status?: string(name='Status', example='Running', position='Query'),
  vSwitchId?: string(name='VSwitchId', example='vsw-2zeh0r1pabwtg6wcs****', position='Query'),
}

model DescribeInstancesResponseBody = {
  code?: int32(name='Code', example='0'),
  instances?: {
    instance?: [ 
    {
      cpu?: string(name='Cpu', example='2'),
      creationTime?: string(name='CreationTime', example='2019-07-26T06:40:43Z'),
      dataDisk?: {
        dataDisk?: [ 
        {
          category?: string(name='Category', example='file'),
          diskId?: string(name='DiskId', example='d-5ip4c2dhmas0vjd5u1r****'),
          diskName?: string(name='DiskName', example='DiskName'),
          size?: int32(name='Size', example='51200'),
          deviceType?: string(name='device_type', example='pangu'),
          diskType?: string(name='disk_type', example='system'),
          name?: string(name='name', example='name'),
          storage?: int32(name='storage', example='20480'),
          uuid?: string(name='uuid', description='UUID。', example='d-5itef1wtxj961mbff8xe9****'),
        }
      ](name='DataDisk')
      }(name='DataDisk'),
      disk?: int32(name='Disk', example='71680'),
      ensRegionId?: string(name='EnsRegionId', example='cn-hangzhou-telecom'),
      expiredTime?: string(name='ExpiredTime', example='2119-07-13T02:38:57Z'),
      hostName?: string(name='HostName', example='testHostName'),
      imageId?: string(name='ImageId', example='m-****'),
      innerIpAddress?: {
        ipAddress?: [ string ](name='IpAddress')
      }(name='InnerIpAddress'),
      instanceId?: string(name='InstanceId', example='i-instanc****'),
      instanceName?: string(name='InstanceName', example='i-5itef0f28t17bcdw9deu6meub'),
      instanceResourceType?: string(name='InstanceResourceType', example='EnsService'),
      instanceTypeFamily?: string(name='InstanceTypeFamily'),
      internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', example='40'),
      internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', example='100'),
      memory?: int32(name='Memory', example='2048'),
      networkAttributes?: {
        networkId?: string(name='NetworkId', example='n-2zeuphj08tt7q3brd****'),
        privateIpAddress?: {
          ipAddress?: [ string ](name='IpAddress')
        }(name='PrivateIpAddress'),
        vSwitchId?: string(name='VSwitchId', example='vsw-2zeh0r1pabwtg6wcs****'),
      }(name='NetworkAttributes', description='Schema of Response'),
      OSName?: string(name='OSName', example='centos 6.8 x86_64'),
      privateIpAddresses?: {
        privateIpAddress?: [ 
        {
          gateWay?: string(name='GateWay', example='119.147.xx.xx'),
          ip?: string(name='Ip', example='119.147.xx.xx'),
          isp?: string(name='Isp', example='cmcc'),
        }
      ](name='PrivateIpAddress')
      }(name='PrivateIpAddresses'),
      publicIpAddress?: {
        ipAddress?: [ string ](name='IpAddress')
      }(name='PublicIpAddress'),
      publicIpAddresses?: {
        publicIpAddress?: [ 
        {
          gateWay?: string(name='GateWay', example='119.147.xx.xx'),
          ip?: string(name='Ip', example='119.147.xx.xx'),
          isp?: string(name='Isp', example='unicom'),
        }
      ](name='PublicIpAddress')
      }(name='PublicIpAddresses'),
      securityGroupIds?: {
        securityGroupId?: [ string ](name='SecurityGroupId')
      }(name='SecurityGroupIds'),
      specName?: string(name='SpecName', example='ens.sn1.stiny'),
      status?: string(name='Status', example='Running'),
      systemDisk?: {
        category?: string(name='Category', example='file'),
        diskId?: string(name='DiskId', example='d-5ip4c2dhmas0rn7rt0p9****'),
        diskName?: string(name='DiskName', example='DiskName'),
        size?: int32(name='Size', example='51200'),
        deviceType?: string(name='device_type', example='pangu'),
        diskType?: string(name='disk_type', example='system'),
        name?: string(name='name', example='DiskName'),
        storage?: int32(name='storage', example='20480'),
        uuid?: string(name='uuid', description='UUID。', example='d-5ip4c2dhmas0rn7rt0p96****'),
      }(name='SystemDisk', description='Schema of Response'),
    }
  ](name='Instance')
  }(name='Instances'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='60'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstancesResponseBody(name='body'),
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeKeyPairsRequest {
  keyPairName?: string(name='KeyPairName', example='TestKeyPairName', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='10', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model DescribeKeyPairsResponseBody = {
  keyPairs?: {
    keyPair?: [ 
    {
      creationTime?: string(name='CreationTime', example='2020-04-26T15:38:27Z'),
      keyPairFingerPrint?: string(name='KeyPairFingerPrint', example='fdaf8ff7a756ef843814fc****'),
      keyPairName?: string(name='KeyPairName', example='TestKeyPairName'),
    }
  ](name='KeyPair')
  }(name='KeyPairs'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='37B52F33-6879-49D0-A39B-22966B01449E'),
  totalCount?: int32(name='TotalCount', example='7'),
}

model DescribeKeyPairsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeKeyPairsResponseBody(name='body'),
}

async function describeKeyPairs(request: DescribeKeyPairsRequest): DescribeKeyPairsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeKeyPairs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLoadBalancerAttributeRequest {
  loadBalancerId: string(name='LoadBalancerId', example='lb-5rcvo1n1t3hykfhhjwjgq****', position='Query'),
}

model DescribeLoadBalancerAttributeResponseBody = {
  address?: string(name='Address', example='192.168.0.1'),
  addressIPVersion?: string(name='AddressIPVersion', example='ipv4'),
  backendServers?: [ 
    {
      ip?: string(name='Ip', example='192.168.0.5'),
      port?: string(name='Port', example='0'),
      serverId?: string(name='ServerId', example='i-5vb5h5njxiuhn48a****'),
      type?: string(name='Type', example='ens'),
      weight?: int32(name='Weight', example='100'),
    }
  ](name='BackendServers'),
  bandwidth?: int32(name='Bandwidth', example='2000'),
  createTime?: string(name='CreateTime', example='2019-05-21T12:22:00Z'),
  endTime?: string(name='EndTime', example='2020-05-21T12:22:00Z'),
  ensRegionId?: string(name='EnsRegionId', example='cn-chengdu-telecom'),
  listenerPorts?: [ string ](name='ListenerPorts'),
  listenerPortsAndProtocols?: [ 
    {
      description?: string(name='Description', example='test'),
      forwardPort?: int32(name='ForwardPort', example='0'),
      listenerForward?: string(name='ListenerForward', example='off'),
      listenerPort?: int32(name='ListenerPort', example='8080'),
      listenerProtocol?: string(name='ListenerProtocol', example='tcp'),
    }
  ](name='ListenerPortsAndProtocols'),
  loadBalancerId?: string(name='LoadBalancerId', example='lb-5rcvo1n1t3hykfhhjwjgqp****'),
  loadBalancerName?: string(name='LoadBalancerName', example='example'),
  loadBalancerSpec?: string(name='LoadBalancerSpec', example='elb.s2.medium'),
  loadBalancerStatus?: string(name='LoadBalancerStatus', example='Active'),
  networkId?: string(name='NetworkId', example='n-5rwbi3g9zvgxcsiufwhw8****'),
  payType?: string(name='PayType', example='PostPaid'),
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  vSwitchId?: string(name='VSwitchId', example='vsw-5s78m2pdr9osa0j64bn78****'),
}

model DescribeLoadBalancerAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLoadBalancerAttributeResponseBody(name='body'),
}

async function describeLoadBalancerAttribute(request: DescribeLoadBalancerAttributeRequest): DescribeLoadBalancerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLoadBalancerAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLoadBalancerHTTPListenerAttributeRequest {
  listenerPort: int32(name='ListenerPort', example='8080', minimum=0, maximum=65535, position='Query'),
  loadBalancerId: string(name='LoadBalancerId', example='lb-5snthcyu1x10g7tywj7iu****', position='Query'),
}

model DescribeLoadBalancerHTTPListenerAttributeResponseBody = {
  bandwidth?: int32(name='Bandwidth', example='50'),
  description?: string(name='Description', example='abc'),
  forwardPort?: int32(name='ForwardPort', example='10002'),
  healthCheck?: string(name='HealthCheck', example='on'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', example='5000'),
  healthCheckDomain?: string(name='HealthCheckDomain', example='www.example.com'),
  healthCheckHttpCode?: string(name='HealthCheckHttpCode', example='http_2xx'),
  healthCheckInterval?: int32(name='HealthCheckInterval', example='5'),
  healthCheckMethod?: string(name='HealthCheckMethod', example='head'),
  healthCheckTimeout?: int32(name='HealthCheckTimeout', example='10'),
  healthCheckURI?: string(name='HealthCheckURI', example='/checkpreload.htm'),
  healthyThreshold?: int32(name='HealthyThreshold', example='3'),
  idleTimeout?: int32(name='IdleTimeout', example='15'),
  listenerForward?: string(name='ListenerForward', example='off'),
  listenerPort?: int32(name='ListenerPort', example='8080'),
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  requestTimeout?: int32(name='RequestTimeout', example='60'),
  scheduler?: string(name='Scheduler', example='wrr'),
  serverCertificateId?: string(name='ServerCertificateId', example='6027667'),
  status?: string(name='Status', example='Running'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', example='3'),
}

model DescribeLoadBalancerHTTPListenerAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLoadBalancerHTTPListenerAttributeResponseBody(name='body'),
}

async function describeLoadBalancerHTTPListenerAttribute(request: DescribeLoadBalancerHTTPListenerAttributeRequest): DescribeLoadBalancerHTTPListenerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLoadBalancerHTTPListenerAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLoadBalancerHTTPSListenerAttributeRequest {
  listenerPort: int32(name='ListenerPort', example='8080', minimum=0, maximum=65535, position='Query'),
  loadBalancerId: string(name='LoadBalancerId', example='lb-5qoxu2rsr0ytanpn4r3i****', position='Query'),
}

model DescribeLoadBalancerHTTPSListenerAttributeResponseBody = {
  bandwidth?: int32(name='Bandwidth', example='50'),
  description?: string(name='Description', example='abc'),
  forwardPort?: int32(name='ForwardPort', example='0'),
  healthCheck?: string(name='HealthCheck', example='on'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', example='9902'),
  healthCheckDomain?: string(name='HealthCheckDomain', example='www.test.com'),
  healthCheckHttpCode?: string(name='HealthCheckHttpCode', example='http_2xx'),
  healthCheckInterval?: int32(name='HealthCheckInterval', example='5'),
  healthCheckMethod?: string(name='HealthCheckMethod', example='head'),
  healthCheckTimeout?: int32(name='HealthCheckTimeout', example='5'),
  healthCheckURI?: string(name='HealthCheckURI', example='/checkpreload.htm'),
  healthyThreshold?: int32(name='HealthyThreshold', example='3'),
  idleTimeout?: int32(name='IdleTimeout', example='15'),
  listenerForward?: string(name='ListenerForward', example='off'),
  listenerPort?: int32(name='ListenerPort', example='8080'),
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  requestTimeout?: int32(name='RequestTimeout', example='60'),
  scheduler?: string(name='Scheduler', example='wrr'),
  serverCertificateId?: string(name='ServerCertificateId', example='6027667'),
  status?: string(name='Status', example='Running'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', example='3'),
}

model DescribeLoadBalancerHTTPSListenerAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLoadBalancerHTTPSListenerAttributeResponseBody(name='body'),
}

async function describeLoadBalancerHTTPSListenerAttribute(request: DescribeLoadBalancerHTTPSListenerAttributeRequest): DescribeLoadBalancerHTTPSListenerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLoadBalancerHTTPSListenerAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLoadBalancerSpecRequest {
  loadBalancerSpec?: string(name='LoadBalancerSpec', example='elb.s2.small', position='Query'),
}

model DescribeLoadBalancerSpecResponseBody = {
  loadBalancerSpecs?: [ 
    {
      displayName?: string(name='DisplayName', example='elb.s1.small'),
      loadBalancerSpec?: string(name='LoadBalancerSpec', example='elb.s1.small'),
    }
  ](name='LoadBalancerSpecs'),
  pageNumber?: int32(name='PageNumber', example='10'),
  pageSize?: int32(name='PageSize', example='100'),
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', example='7'),
}

model DescribeLoadBalancerSpecResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLoadBalancerSpecResponseBody(name='body'),
}

async function describeLoadBalancerSpec(request: DescribeLoadBalancerSpecRequest): DescribeLoadBalancerSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLoadBalancerSpec', 'GET', '/', 'json', false, 'json', request);
}

model DescribeLoadBalancerTCPListenerAttributeRequest {
  listenerPort: int32(name='ListenerPort', example='80', minimum=0, maximum=65535, position='Query'),
  loadBalancerId: string(name='LoadBalancerId', example='lb-5snthcyu1x10g7tywj7iu****', position='Query'),
}

model DescribeLoadBalancerTCPListenerAttributeResponseBody = {
  backendServerPort?: int32(name='BackendServerPort', example='8080'),
  bandwidth?: int32(name='Bandwidth', example='5'),
  description?: string(name='Description', example='example'),
  eipTransmit?: string(name='EipTransmit', example='on'),
  establishedTimeout?: int32(name='EstablishedTimeout', example='500'),
  healthCheck?: string(name='HealthCheck', example='on'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', example='8000'),
  healthCheckConnectTimeout?: int32(name='HealthCheckConnectTimeout', example='100'),
  healthCheckDomain?: string(name='HealthCheckDomain', example='example.com'),
  healthCheckHttpCode?: string(name='HealthCheckHttpCode', example='http_2xx'),
  healthCheckInterval?: int32(name='HealthCheckInterval', example='5'),
  healthCheckType?: string(name='HealthCheckType', example='tcp'),
  healthCheckURI?: string(name='HealthCheckURI', example='/example/index.html'),
  healthyThreshold?: int32(name='HealthyThreshold', example='4'),
  listenerPort?: int32(name='ListenerPort', example='80'),
  persistenceTimeout?: int32(name='PersistenceTimeout', example='0'),
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  scheduler?: string(name='Scheduler', example='wrr'),
  status?: string(name='Status', example='Stopped'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', example='4'),
}

model DescribeLoadBalancerTCPListenerAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLoadBalancerTCPListenerAttributeResponseBody(name='body'),
}

async function describeLoadBalancerTCPListenerAttribute(request: DescribeLoadBalancerTCPListenerAttributeRequest): DescribeLoadBalancerTCPListenerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLoadBalancerTCPListenerAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLoadBalancerUDPListenerAttributeRequest {
  listenerPort: int32(name='ListenerPort', example='80', minimum=0, maximum=65535, position='Query'),
  loadBalancerId: string(name='LoadBalancerId', example='lb-5pzipr2fszqtl2xf64uy5****', position='Query'),
}

model DescribeLoadBalancerUDPListenerAttributeResponseBody = {
  backendServerPort?: int32(name='BackendServerPort', example='8080'),
  bandwidth?: int32(name='Bandwidth', example='5'),
  description?: string(name='Description', example='example'),
  eipTransmit?: string(name='EipTransmit', example='on'),
  healthCheck?: string(name='HealthCheck', example='on'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', example='8000'),
  healthCheckConnectTimeout?: int32(name='HealthCheckConnectTimeout', example='100'),
  healthCheckExp?: string(name='HealthCheckExp', example='ok'),
  healthCheckInterval?: int32(name='HealthCheckInterval', example='5'),
  healthCheckReq?: string(name='HealthCheckReq', example='hello'),
  healthyThreshold?: int32(name='HealthyThreshold', example='4'),
  listenerPort?: int32(name='ListenerPort', example='80'),
  requestId?: string(name='RequestId', description='Id of the request', example='5D7597CF-1630-54EC-A945-624A33F2E7E8'),
  scheduler?: string(name='Scheduler', example='wrr'),
  status?: string(name='Status', example='Stopped'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', example='4'),
}

model DescribeLoadBalancerUDPListenerAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLoadBalancerUDPListenerAttributeResponseBody(name='body'),
}

async function describeLoadBalancerUDPListenerAttribute(request: DescribeLoadBalancerUDPListenerAttributeRequest): DescribeLoadBalancerUDPListenerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLoadBalancerUDPListenerAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLoadBalancersRequest {
  address?: string(name='Address', example='10.0.0.8', position='Query'),
  ensRegionId?: string(name='EnsRegionId', example='cn-guangzhou-10', position='Query'),
  loadBalancerId?: string(name='LoadBalancerId', example='lb-5q73cv04zeyh43lh74lp4****', position='Query'),
  loadBalancerName?: string(name='LoadBalancerName', example='example', minLength=2, maxLength=128, position='Query'),
  loadBalancerStatus?: string(name='LoadBalancerStatus', example='InActive', position='Query'),
  networkId?: string(name='NetworkId', example='n-5s9ayrxsd9hszrlt5fgv2****', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='100', minimum=1, maximum=100, position='Query'),
  serverId?: string(name='ServerId', example='i-5f67ffjc004wwz0t****', position='Query'),
  vSwitchId?: string(name='VSwitchId', example='vsw-5sy773iy25rulsmgskmba****', position='Query'),
}

model DescribeLoadBalancersResponseBody = {
  loadBalancers?: {
    loadBalancer?: [ 
    {
      address?: string(name='Address', example='10.10.10.10'),
      addressIPVersion?: string(name='AddressIPVersion', example='ipv4'),
      createTime?: string(name='CreateTime', example='2021-05-06T11:13:41Z'),
      ensRegionId?: string(name='EnsRegionId', example='cn-wuhan-telecom'),
      loadBalancerId?: string(name='LoadBalancerId', example='lb-5snthcyu1x10g7tywj7iu****'),
      loadBalancerName?: string(name='LoadBalancerName', example='example'),
      loadBalancerStatus?: string(name='LoadBalancerStatus', example='InActive'),
      networkId?: string(name='NetworkId', example='n-5rz0rj1caexauilpsjx0w****'),
      payType?: string(name='PayType', example='PostPaid'),
      vSwitchId?: string(name='VSwitchId', example='vsw-5rllcjb3ol6duzjdnbm1om****'),
    }
  ](name='LoadBalancer')
  }(name='LoadBalancers'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='100'),
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', example='6'),
}

model DescribeLoadBalancersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLoadBalancersResponseBody(name='body'),
}

async function describeLoadBalancers(request: DescribeLoadBalancersRequest): DescribeLoadBalancersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLoadBalancers', 'GET', '/', 'json', false, 'json', request);
}

model DescribeMeasurementDataRequest {
  endDate: string(name='EndDate', example='2019-08-30T00:00:00Z', position='Query'),
  startDate: string(name='StartDate', example='2019-06-01T00:00:00Z', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model DescribeMeasurementDataResponseBody = {
  measurementDatas?: {
    measurementData?: [ 
    {
      bandWidthFeeDatas?: {
        bandWidthFeeData?: [ 
        {
          costCode?: string(name='CostCode', example='cn-cmcc-1'),
          costName?: string(name='CostName'),
          costVal?: int32(name='CostVal', example='16486'),
        }
      ](name='BandWidthFeeData')
      }(name='BandWidthFeeDatas'),
      chargeModel?: string(name='ChargeModel', example='ChargeByGrade'),
      costCycle?: string(name='CostCycle', example='2019-07-30'),
      costEndTime?: string(name='CostEndTime', example='2019-07-30T16:00:00Z'),
      costStartTime?: string(name='CostStartTime', example='2019-07-29T16:00:00Z'),
      resourceFeeData?: {
        memory?: int32(name='Memory', example='24'),
        storage?: int32(name='Storage', example='60'),
        vcpu?: int32(name='Vcpu', example='12'),
      }(name='ResourceFeeData'),
      resourceFeeDataDetails?: {
        resourceFeeDataDetail?: [ 
        {
          costCode?: string(name='CostCode', example='vCPU'),
          costName?: string(name='CostName', example='vCPU'),
          costVal?: int32(name='CostVal', example='55'),
          resourceType?: string(name='ResourceType', example='vCPU'),
        }
      ](name='ResourceFeeDataDetail')
      }(name='ResourceFeeDataDetails'),
    }
  ](name='MeasurementData')
  }(name='MeasurementDatas'),
  requestId?: string(name='RequestId', example='125B04C7-3D0D-4245-AF96-14E3758E3F06'),
}

model DescribeMeasurementDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMeasurementDataResponseBody(name='body'),
}

async function describeMeasurementData(request: DescribeMeasurementDataRequest): DescribeMeasurementDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMeasurementData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMountTargetsRequest {
  ensRegionId: string(name='EnsRegionId', description='地域ID。', example='cn-beijing-cmcc', position='Query'),
  fileSystemId: string(name='FileSystemId', description='文件系统ID。', example='c50f8*****', position='Query'),
  mountTargetName?: string(name='MountTargetName', description='挂载点名称。', example='TestMountPath', position='Query'),
  pageNumber?: int32(name='PageNumber', description='页码，起始值为1。
默认值：1。', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='每页行数，最大值为100行。
默认值：10。', example='10', minimum=1, maximum=100, position='Query'),
}

model DescribeMountTargetsResponseBody = {
  mountTargets?: [ 
    {
      ensRegionId?: string(name='EnsRegionId', description='地域ID。', example='cn-beijing-cmcc'),
      fileSystemId?: string(name='FileSystemId', description='文件系统ID。', example='c50f8*****'),
      mountTargetDomain?: string(name='MountTargetDomain', description='挂载点路径。
LB:/fileSystemName/mountTargetName', example='LB:/fileSystemName/mountTargetName'),
      mountTargetName?: string(name='MountTargetName', description='挂载点名称', example='TestMountPath'),
      netWorkId?: string(name='NetWorkId', description='网络ID。
n-***', example='n-***'),
      status?: string(name='Status', description='状态。
包括：
active：可用
inactive：不可用
pending：任务排队中
deleting：删除中', example='active'),
    }
  ](name='MountTargets', description='挂载点信息集合。'),
  pageNumber?: int32(name='PageNumber', description='页码。', example='1'),
  pageSize?: int32(name='PageSize', description='单页行数。', example='2'),
  requestId?: string(name='RequestId', description='请求ID', example='762DD527-358B-1E48-8005-CCE3ED4EB9E0'),
  totalCount?: int32(name='TotalCount', description='总数。', example='1'),
}

model DescribeMountTargetsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMountTargetsResponseBody(name='body'),
}

async function describeMountTargets(request: DescribeMountTargetsRequest): DescribeMountTargetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMountTargets', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNCInformationRequest {
  ensRegionId?: string(name='EnsRegionId', position='Query'),
  resourceId?: string(name='ResourceId', position='Query'),
}

model DescribeNCInformationResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  data?: [ 
    {
      cpu?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Cpu'),
      gpu?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Gpu'),
      hdd?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Hdd'),
      info?: {
        ip?: string(name='Ip'),
        name?: string(name='Name'),
        tag?: [ string ](name='Tag'),
        uuid?: string(name='Uuid'),
      }(name='Info'),
      memory?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Memory'),
      nvme?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Nvme'),
      online?: boolean(name='Online'),
      region?: string(name='Region'),
      ssd?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Ssd'),
      virtual?: string(name='Virtual'),
    }
  ](name='Data'),
  desc?: string(name='Desc'),
  msg?: string(name='Msg'),
  pager?: {
    page?: long(name='Page'),
    size?: long(name='Size'),
    total?: long(name='Total'),
  }(name='Pager'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeNCInformationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNCInformationResponseBody(name='body'),
}

async function describeNCInformation(request: DescribeNCInformationRequest): DescribeNCInformationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNCInformation', 'GET', '/', 'json', false, 'json', request);
}

model DescribeNatGatewaysRequest {
  ensRegionId?: string(name='EnsRegionId', example='cn-wuxi-9', position='Query'),
  name?: string(name='Name', example='test0', position='Query'),
  natGatewayId?: string(name='NatGatewayId', example='nat-5t7nh1cfm6kxiszlttr38****', position='Query'),
  networkId?: string(name='NetworkId', example='n-2zeuphj08tt7q3brd****', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  vSwitchId?: string(name='VSwitchId', example='vsw-5rllcjb3ol6duzjdnbm1o****', position='Query'),
}

model DescribeNatGatewaysResponseBody = {
  natGateways?: [ 
    {
      creationTime?: string(name='CreationTime', example='2021-11-22T07:03:32Z'),
      ensRegionId?: string(name='EnsRegionId', example='cn-xiangyang-5'),
      name?: string(name='Name', example='test0'),
      natGatewayId?: string(name='NatGatewayId', example='nat-5t7nh1cfm6kxiszlttr38****'),
      networkId?: string(name='NetworkId', example='n-5s2ml1olj0kzaws9n1yrj****'),
      spec?: string(name='Spec', example='enat.default'),
      vSwitchId?: string(name='VSwitchId', example='vsw-5szpp1os9m55myirbflfw****'),
    }
  ](name='NatGateways'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='2818A8F4-5E2B-5611-8732-5ACF7B677059'),
  totalCount?: int32(name='TotalCount', example='49'),
}

model DescribeNatGatewaysResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNatGatewaysResponseBody(name='body'),
}

async function describeNatGateways(request: DescribeNatGatewaysRequest): DescribeNatGatewaysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNatGateways', 'GET', '/', 'json', false, 'json', request);
}

model DescribeNetworkAclsRequest {
  networkAclId?: string(name='NetworkAclId', example='nacl-bp1lhl0taikrbgnh****', position='Query'),
  networkAclName?: string(name='NetworkAclName', example='acl-1', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='10', position='Query'),
  resourceId?: string(name='ResourceId', example='n-5****', position='Query'),
}

model DescribeNetworkAclsResponseBody = {
  networkAcls?: [ 
    {
      creationTime?: string(name='CreationTime', example='2019-11-01T06:08:46Z'),
      description?: string(name='Description', example='This is my NetworkAcl.'),
      egressAclEntries?: [ 
        {
          cidrBlock?: string(name='CidrBlock', example='10.0.0.0/24'),
          description?: string(name='Description', example='This is EgressAclEntries.'),
          networkAclEntryId?: string(name='NetworkAclEntryId', example='nae-a2d447uw4tillfvgb****'),
          networkAclEntryName?: string(name='NetworkAclEntryName', example='acl-2'),
          policy?: string(name='Policy', example='accept'),
          portRange?: string(name='PortRange', example='-1/-1'),
          priority?: int32(name='Priority', example='1'),
          protocol?: string(name='Protocol', example='all'),
          type?: string(name='Type', example='system'),
        }
      ](name='EgressAclEntries'),
      ingressAclEntries?: [ 
        {
          cidrBlock?: string(name='CidrBlock', example='10.0.0.0/24'),
          description?: string(name='Description', example='This is IngressAclEntries.'),
          networkAclEntryId?: string(name='NetworkAclEntryId', example='nae-5dk86arlydmezasw****'),
          networkAclEntryName?: string(name='NetworkAclEntryName', example='acl-3'),
          policy?: string(name='Policy', example='accept'),
          portRange?: string(name='PortRange', example='-1/-1'),
          priority?: int32(name='Priority', example='1'),
          protocol?: string(name='Protocol', example='all'),
          type?: string(name='Type', example='system'),
        }
      ](name='IngressAclEntries'),
      networkAclId?: string(name='NetworkAclId', example='nacl-a2do9e413e0spxscd****'),
      networkAclName?: string(name='NetworkAclName', example='acl-8'),
      resources?: [ 
        {
          ensRegionId?: string(name='EnsRegionId', example='cn-fuzhou-telecom'),
          resourceId?: string(name='ResourceId', example='n-****'),
          resourceType?: string(name='ResourceType', example='Network'),
          status?: string(name='Status', example='BINDING'),
        }
      ](name='Resources'),
      status?: string(name='Status', example='Available'),
    }
  ](name='NetworkAcls'),
  pageNumber?: string(name='PageNumber', example='1'),
  pageSize?: string(name='PageSize', example='2'),
  requestId?: string(name='RequestId', example='A1707FC0-430C-423A-B624-284046B20399'),
  totalCount?: string(name='TotalCount', example='3'),
}

model DescribeNetworkAclsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNetworkAclsResponseBody(name='body'),
}

async function describeNetworkAcls(request: DescribeNetworkAclsRequest): DescribeNetworkAclsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNetworkAcls', 'GET', '/', 'json', false, 'json', request);
}

model DescribeNetworkAttributeRequest {
  networkId: string(name='NetworkId', example='n-****', position='Query'),
}

model DescribeNetworkAttributeResponseBody = {
  cidrBlock?: string(name='CidrBlock', example='10.0.0.0/24'),
  cloudResources?: {
    cloudResourceSetType?: [ 
    {
      resourceCount?: int32(name='ResourceCount', example='3'),
      resourceType?: string(name='ResourceType', example='VSwitch'),
    }
  ](name='CloudResourceSetType')
  }(name='CloudResources'),
  createdTime?: string(name='CreatedTime', example='2019-06-01T00:00:00Z'),
  description?: string(name='Description', example='abc'),
  ensRegionId?: string(name='EnsRegionId', example='cn-beijing'),
  networkAclId?: string(name='NetworkAclId'),
  networkId?: string(name='NetworkId', example='n-5***'),
  networkName?: string(name='NetworkName', example='abc'),
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  routerTableId?: string(name='RouterTableId', example='rtb-5***'),
  status?: string(name='Status', example='Available'),
  vSwitchIds?: {
    vSwitchId?: [ string ](name='VSwitchId')
  }(name='VSwitchIds'),
}

model DescribeNetworkAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNetworkAttributeResponseBody(name='body'),
}

async function describeNetworkAttribute(request: DescribeNetworkAttributeRequest): DescribeNetworkAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNetworkAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNetworkInterfacesRequest {
  ensRegionId?: string(name='EnsRegionId', example='cn-tianjin-cmcc', position='Query'),
  instanceId?: string(name='InstanceId', example='i-5t7z99n32gplriv', position='Query'),
  pageNumber?: string(name='PageNumber', example='1', position='Query'),
  pageSize?: string(name='PageSize', example='50', maximum=100, position='Query'),
  primaryIpAddress?: string(name='PrimaryIpAddress', example='***', position='Query'),
  vSwitchId?: string(name='VSwitchId', example='vsw-12345', position='Query'),
}

model DescribeNetworkInterfacesResponseBody = {
  networkInterfaceSets?: {
    networkInterfaceSet?: [ 
    {
      creationTime?: string(name='CreationTime', example='2022-02-22T03:53:25Z'),
      ensRegionId?: string(name='EnsRegionId', example='id-jakarta-1'),
      instanceId?: string(name='InstanceId', example='i-5siavnr3'),
      macAddress?: string(name='MacAddress', example='00:16:3e:08:60:0a'),
      networkInterfaceId?: string(name='NetworkInterfaceId', example='eni-uf686a5'),
      primaryIp?: string(name='PrimaryIp', example='12.23.3.4'),
      primaryIpType?: string(name='PrimaryIpType', example='private'),
      privateIpSets?: {
        privateIpSet?: [ 
        {
          primary?: boolean(name='Primary', example='true'),
          privateIpAddress?: string(name='PrivateIpAddress', example='192.168.0.130'),
        }
      ](name='PrivateIpSet')
      }(name='PrivateIpSets'),
      status?: string(name='Status', example='In_use'),
      vSwitchId?: string(name='VSwitchId', example='vsw-5rqswx1trlsj9'),
    }
  ](name='NetworkInterfaceSet')
  }(name='NetworkInterfaceSets'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='50'),
  requestId?: string(name='RequestId', example='708AF9CE-FF92-5DF9-93F8-B7754AB1061A'),
  totalCount?: int32(name='TotalCount', example='49'),
}

model DescribeNetworkInterfacesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNetworkInterfacesResponseBody(name='body'),
}

async function describeNetworkInterfaces(request: DescribeNetworkInterfacesRequest): DescribeNetworkInterfacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNetworkInterfaces', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNetworksRequest {
  ensRegionId?: string(name='EnsRegionId', example='cn-beijing-telecom', position='Query'),
  networkId?: string(name='NetworkId', example='n-5***', position='Query'),
  networkName?: string(name='NetworkName', example='example', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model DescribeNetworksResponseBody = {
  networks?: {
    network?: [ 
    {
      cidrBlock?: string(name='CidrBlock', example='10.0.xx.xx/24'),
      createdTime?: string(name='CreatedTime', example='2020-06-16T06:33:15Z'),
      description?: string(name='Description', example='exampleDescription'),
      ensRegionId?: string(name='EnsRegionId', example='cn-beijing'),
      networkAclId?: string(name='NetworkAclId'),
      networkId?: string(name='NetworkId', example='n-5***'),
      networkName?: string(name='NetworkName', example='example'),
      routerTableId?: string(name='RouterTableId', example='rtb-5**'),
      status?: string(name='Status', example='Available'),
      vSwitchIds?: {
        vSwitchId?: [ string ](name='VSwitchId')
      }(name='VSwitchIds'),
    }
  ](name='Network')
  }(name='Networks'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='2'),
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', example='3'),
}

model DescribeNetworksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNetworksResponseBody(name='body'),
}

async function describeNetworks(request: DescribeNetworksRequest): DescribeNetworksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNetworks', 'POST', '/', 'json', false, 'json', request);
}

model DescribePrePaidInstanceStockRequest {
  dataDiskSize: int32(name='DataDiskSize', example='20', position='Query'),
  ensRegionId: string(name='EnsRegionId', example='cn-suzhou-telecom', position='Query'),
  instanceSpec: string(name='InstanceSpec', example='ens.sn1.stiny', position='Query'),
  systemDiskSize: int32(name='SystemDiskSize', example='100', minimum=20, position='Query'),
}

model DescribePrePaidInstanceStockResponseBody = {
  avaliableCount?: int32(name='AvaliableCount', example='84'),
  cores?: int32(name='Cores', example='1'),
  dataDiskSize?: int32(name='DataDiskSize', example='20'),
  ensRegionId?: string(name='EnsRegionId', example='cn-suzhou-telecom'),
  instanceSpec?: string(name='InstanceSpec', example='ens.sn1.stiny'),
  memory?: int32(name='Memory', example='2048'),
  requestId?: string(name='RequestId', example='007833C8-E819-4122-B636-0D48D7BF6DFB'),
  resourceGap?: string(name='ResourceGap'),
  systemDiskSize?: int32(name='SystemDiskSize', example='20'),
}

model DescribePrePaidInstanceStockResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePrePaidInstanceStockResponseBody(name='body'),
}

async function describePrePaidInstanceStock(request: DescribePrePaidInstanceStockRequest): DescribePrePaidInstanceStockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePrePaidInstanceStock', 'POST', '/', 'json', false, 'json', request);
}

model DescribePriceRequest {
  dataDisk?: [
    {
      size?: int32(name='Size', description='数据盘大小，单位GB。如果此字段不为空，则以此段为准。', example='50'),
    }
  ](name='DataDisk', position='Query'),
  systemDisk?: {
    size: int32(name='Size', description='系统盘大小，单位：GB', example='20'),
  }(name='SystemDisk', position='Query'),
  dataDisks?: [ 
    {
      category?: string(name='Category', description='磁盘类型', example='cloud_efficiency'),
      size?: long(name='Size', example='50', minimum=20),
    }
  ](name='DataDisks', description='如果DataDisk.1.Size为空且此字段不为空时的则以此字段为准', shrink='json', position='Query'),
  ensRegionId: string(name='EnsRegionId', description='节点ID。', example='cn-shanghai-unicom', position='Query'),
  instanceType: string(name='InstanceType', description='实列规格。', example='ens.sn1.tiny', position='Query'),
  internetChargeType: string(name='InternetChargeType', description='带宽计费方式', example='95BandwidthByMonth', position='Query'),
  period: int32(name='Period', description='购买资源的时长，如果不指定PeriodUnit，则默认按月购买。目前只支持按Days和Month。如果PeriodUnit=Day时，Period仅可以3。如果PeriodUnit=Monthc时，则Period可以为1-9,12。', example='1', minimum=1, maximum=12, position='Query'),
  periodUnit?: string(name='PeriodUnit', description='查询云服务器ENS不同计费周期的价格。取值范围：
Month（默认）：按月计费的价格单位。
Day：按天计费的价格单位。', example='Month', position='Query'),
  quantity: int32(name='Quantity', description='数量。', example='1', position='Query'),
}

model DescribePriceResponseBody = {
  priceInfo?: {
    price?: {
      currency?: string(name='Currency', example='USD'),
      discountPrice?: float(name='DiscountPrice', example='1'),
      originalPrice?: float(name='OriginalPrice', example='16125.00'),
      tradePrice?: float(name='TradePrice', example='126.75'),
    }(name='Price'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId', example='694EB8FF-446C-5B1E-8146-9629E492551F'),
}

model DescribePriceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePriceResponseBody(name='body'),
}

async function describePrice(request: DescribePriceRequest): DescribePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePrice', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionIspsRequest {
  ensRegionId?: string(name='EnsRegionId', example='cn-dalian-unicom', position='Query'),
}

model DescribeRegionIspsResponseBody = {
  isps?: [ 
    {
      code?: string(name='Code', example='cmcc'),
      name?: string(name='Name'),
    }
  ](name='Isps'),
  requestId?: string(name='RequestId', description='Id of the request', example='DC90CC7E-23B6-5A90-9097-A17CE4A161C4'),
}

model DescribeRegionIspsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionIspsResponseBody(name='body'),
}

async function describeRegionIsps(request: DescribeRegionIspsRequest): DescribeRegionIspsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegionIsps', 'GET', '/', 'json', false, 'json', request);
}

model DescribeRegionResourceRequest {
  ensRegionId?: string(name='EnsRegionId', position='Query'),
  ispType?: string(name='IspType', position='Query'),
}

model DescribeRegionResourceResponseBody = {
  data?: [ 
    {
      areaCode?: string(name='AreaCode'),
      areaName?: string(name='AreaName'),
      armCard?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='ArmCard'),
      attributes?: [ string ](name='Attributes'),
      bandwidth?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Bandwidth'),
      blockStorage?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='BlockStorage'),
      countryCode?: string(name='CountryCode'),
      countryName?: string(name='CountryName'),
      cpu?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Cpu'),
      gpu?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Gpu'),
      hdd?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Hdd'),
      houseId?: string(name='HouseId'),
      ipv4s?: [ 
        {
          display?: string(name='Display'),
          isp?: string(name='Isp'),
          oversellRatio?: long(name='OversellRatio'),
          remain?: long(name='Remain'),
          reserveDisable?: boolean(name='ReserveDisable'),
          reserveDisableTotal?: long(name='ReserveDisableTotal'),
          reserved?: long(name='Reserved'),
          statusDisable?: boolean(name='StatusDisable'),
          statusDisableTotal?: long(name='StatusDisableTotal'),
          total?: long(name='Total'),
          type?: string(name='Type'),
          used?: long(name='Used'),
          usedRatio?: long(name='UsedRatio'),
          vlan?: string(name='Vlan'),
        }
      ](name='Ipv4s'),
      ipv6s?: [ 
        {
          display?: string(name='Display'),
          isp?: string(name='Isp'),
          oversellRatio?: long(name='OversellRatio'),
          remain?: long(name='Remain'),
          reserveDisable?: boolean(name='ReserveDisable'),
          reserveDisableTotal?: long(name='ReserveDisableTotal'),
          reserved?: long(name='Reserved'),
          statusDisable?: boolean(name='StatusDisable'),
          statusDisableTotal?: long(name='StatusDisableTotal'),
          total?: long(name='Total'),
          type?: string(name='Type'),
          used?: long(name='Used'),
          usedRatio?: long(name='UsedRatio'),
          vlan?: string(name='Vlan'),
        }
      ](name='Ipv6s'),
      ispTypes?: [ string ](name='IspTypes'),
      memory?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Memory'),
      name?: string(name='Name'),
      nvme?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Nvme'),
      ossStorage?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='OssStorage'),
      pangu?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Pangu'),
      pcfarmNum?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='PcfarmNum'),
      poc?: boolean(name='Poc'),
      provinceCode?: string(name='ProvinceCode'),
      provinceName?: string(name='ProvinceName'),
      reserveDisable?: boolean(name='ReserveDisable'),
      ssd?: {
        display?: boolean(name='Display'),
        oversellRatio?: long(name='OversellRatio'),
        remain?: long(name='Remain'),
        reserveDisable?: boolean(name='ReserveDisable'),
        reserveDisableTotal?: long(name='ReserveDisableTotal'),
        reserved?: long(name='Reserved'),
        statusDisable?: boolean(name='StatusDisable'),
        statusDisableTotal?: long(name='StatusDisableTotal'),
        total?: long(name='Total'),
        type?: string(name='Type'),
        used?: long(name='Used'),
        usedRatio?: long(name='UsedRatio'),
      }(name='Ssd'),
      statusDisable?: boolean(name='StatusDisable'),
      type?: string(name='Type'),
      uuid?: string(name='Uuid'),
      virtual?: string(name='Virtual'),
    }
  ](name='Data'),
  desc?: string(name='Desc'),
  msg?: string(name='Msg'),
  pager?: {
    page?: long(name='Page'),
    size?: long(name='Size'),
    total?: long(name='Total'),
  }(name='Pager'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionResourceResponseBody(name='body'),
}

async function describeRegionResource(request: DescribeRegionResourceRequest): DescribeRegionResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegionResource', 'GET', '/', 'json', false, 'json', request);
}

model DescribeReservedResourceRequest {
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model DescribeReservedResourceResponseBody = {
  code?: int32(name='Code', example='0'),
  images?: {
    image?: [ 
    {
      imageId?: string(name='ImageId', example='centos_6_08_64_20G_alibase_****'),
      imageName?: string(name='ImageName', example='centos_6_08_64_20G_alibase_****'),
    }
  ](name='Image')
  }(name='Images'),
  requestId?: string(name='RequestId', example='6666C5A5-75ED-422E-A022-7121FA18C968'),
  supportResources?: {
    supportResource?: [ 
    {
      dataDiskSizes?: {
        dataDiskSize?: [ string ](name='DataDiskSize')
      }(name='DataDiskSizes'),
      ensRegionId?: string(name='EnsRegionId', example='cn-beijing-cmcc'),
      instanceSpec?: string(name='InstanceSpec', example='ens.sn1.stiny'),
      supportResourcesCount?: string(name='SupportResourcesCount', example='9'),
      systemDiskSizes?: {
        systemDiskSize?: [ string ](name='SystemDiskSize')
      }(name='SystemDiskSizes'),
    }
  ](name='SupportResource')
  }(name='SupportResources'),
}

model DescribeReservedResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeReservedResourceResponseBody(name='body'),
}

async function describeReservedResource(request: DescribeReservedResourceRequest): DescribeReservedResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeReservedResource', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResourceTimelineRequest {
  beginTime?: string(name='BeginTime', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  uuid?: string(name='Uuid', position='Query'),
}

model DescribeResourceTimelineResponseBody = {
  availableEvents?: [ 
    {
      name?: string(name='Name'),
      occurrenceTime?: string(name='OccurrenceTime'),
      reason?: string(name='Reason'),
      type?: string(name='Type'),
    }
  ](name='AvailableEvents'),
  bizEvents?: [ 
    {
      name?: string(name='Name'),
      occurrenceTime?: string(name='OccurrenceTime'),
      reason?: string(name='Reason'),
      type?: string(name='Type'),
    }
  ](name='BizEvents'),
  desc?: string(name='Desc'),
  inventoryEvents?: [ 
    {
      name?: string(name='Name'),
      occurrenceTime?: string(name='OccurrenceTime'),
      reason?: string(name='Reason'),
      type?: string(name='Type'),
    }
  ](name='InventoryEvents'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId', description='Id of the request'),
  reserveEvents?: [ 
    {
      name?: string(name='Name'),
      occurrenceTime?: string(name='OccurrenceTime'),
      reason?: string(name='Reason'),
      type?: string(name='Type'),
    }
  ](name='ReserveEvents'),
}

model DescribeResourceTimelineResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceTimelineResponseBody(name='body'),
}

async function describeResourceTimeline(request: DescribeResourceTimelineRequest): DescribeResourceTimelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourceTimeline', 'GET', '/', 'json', false, 'json', request);
}

model DescribeSecurityGroupAttributeRequest {
  securityGroupId: string(name='SecurityGroupId', example='sg-bp67acfmxazb4ph***', position='Query'),
}

model DescribeSecurityGroupAttributeResponseBody = {
  description?: string(name='Description', example='testDescription1'),
  permissions?: {
    permission?: [ 
    {
      creationTime?: string(name='CreationTime', example='2018-12-12T07:28:38Z'),
      description?: string(name='Description', example='testDescription1'),
      destCidrIp?: string(name='DestCidrIp', example='0.0.0.0/0'),
      direction?: string(name='Direction', example='ingress'),
      ipProtocol?: string(name='IpProtocol', example='TCP'),
      policy?: string(name='Policy', example='Accept'),
      portRange?: string(name='PortRange', example='80/80'),
      priority?: int32(name='Priority', example='1'),
      sourceCidrIp?: string(name='SourceCidrIp', example='0.0.0.0/0'),
      sourcePortRange?: string(name='SourcePortRange', example='22/22'),
    }
  ](name='Permission')
  }(name='Permissions'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-bp1gxw6bznjjvhu3****'),
  securityGroupName?: string(name='SecurityGroupName', example='testSecurityGroupName2'),
}

model DescribeSecurityGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityGroupAttributeResponseBody(name='body'),
}

async function describeSecurityGroupAttribute(request: DescribeSecurityGroupAttributeRequest): DescribeSecurityGroupAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityGroupAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecurityGroupsRequest {
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-bp67acfmxazb4ph***', position='Query'),
  securityGroupName?: string(name='SecurityGroupName', example='DocTest', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model DescribeSecurityGroupsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  securityGroups?: {
    securityGroup?: [ 
    {
      creationTime?: string(name='CreationTime', example='2019-11-01T06:08:46Z'),
      description?: string(name='Description', example='TestDescription'),
      instanceCount?: int32(name='InstanceCount', example='5'),
      securityGroupId?: string(name='SecurityGroupId', example='sg-bp67acfmxazb4ph***'),
      securityGroupName?: string(name='SecurityGroupName', example='DocTest'),
    }
  ](name='SecurityGroup')
  }(name='SecurityGroups'),
  totalCount?: int32(name='TotalCount', example='49'),
}

model DescribeSecurityGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityGroupsResponseBody(name='body'),
}

async function describeSecurityGroups(request: DescribeSecurityGroupsRequest): DescribeSecurityGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSelfImagesRequest {
  imageId?: string(name='ImageId', description='镜像ID,支持模糊查询。', position='Query'),
  imageName?: string(name='ImageName', description='镜像名称，支持模糊查询。', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model DescribeSelfImagesResponseBody = {
  code?: int32(name='Code'),
  images?: {
    image?: [ 
    {
      architecture?: string(name='Architecture'),
      creationTime?: string(name='CreationTime'),
      imageId?: string(name='ImageId'),
      imageName?: string(name='ImageName'),
      imageOwnerAlias?: string(name='ImageOwnerAlias'),
      imageSize?: string(name='ImageSize'),
      instanceId?: string(name='InstanceId'),
      osVersion?: string(name='OsVersion'),
      platform?: string(name='Platform'),
      status?: string(name='Status'),
    }
  ](name='Image')
  }(name='Images'),
  requestId?: string(name='RequestId'),
}

model DescribeSelfImagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSelfImagesResponseBody(name='body'),
}

async function describeSelfImages(request: DescribeSelfImagesRequest): DescribeSelfImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSelfImages', 'POST', '/', 'json', false, 'json', request);
}

model DescribeServcieScheduleRequest {
  appId: string(name='AppId', example='474bdef0-d149-4695-abfb-52912d9143f0', position='Query'),
  podConfigName?: string(name='PodConfigName', example='android', position='Query'),
  uuid: string(name='Uuid', example='hdm_f022bf160dc69e2d8eb421e508eb9170', position='Query'),
}

model DescribeServcieScheduleResponseBody = {
  index?: int32(name='Index', example='2'),
  instanceId?: string(name='InstanceId', example='i-5myukg7hnpbto7m024002w8qd'),
  instanceIp?: string(name='InstanceIp', example='120.26.79.96'),
  instancePort?: int32(name='InstancePort', example='3306'),
  podAbstractInfo?: {
    containerService?: boolean(name='ContainerService', example='android'),
    containerStatuses?: {
      containerStatus?: [ 
      {
        containerId?: string(name='ContainerId', example='container_e79_1638372147094_158091_02_000001'),
        name?: string(name='Name', example='nginx'),
      }
    ](name='ContainerStatus')
    }(name='ContainerStatuses'),
    name?: boolean(name='Name', example='gcs-prod-websocket-eip-telecom'),
    namespace?: boolean(name='Namespace', example='default-aliyun'),
    resourceScope?: boolean(name='ResourceScope', example='FDN'),
    status?: boolean(name='Status', example='RUNNING'),
  }(name='PodAbstractInfo'),
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
  requestRepeated?: boolean(name='RequestRepeated', example='false'),
  tcpPorts?: string(name='TcpPorts', example='80-88'),
}

model DescribeServcieScheduleResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServcieScheduleResponseBody(name='body'),
}

async function describeServcieSchedule(request: DescribeServcieScheduleRequest): DescribeServcieScheduleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeServcieSchedule', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSnatTableEntriesRequest {
  natGatewayId: string(name='NatGatewayId', example='nat-5tawjw5j7sgd2deujxuk0****', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  snatEntryId?: string(name='SnatEntryId', example='snat-5tfjp36fsrb36zs36faj0****', position='Query'),
  snatEntryName?: string(name='SnatEntryName', example='test0', maxLength=128, position='Query'),
  snatIp?: string(name='SnatIp', example='58.XXXX.XXX.29', position='Query'),
  sourceCIDR?: string(name='SourceCIDR', example='10.1.0.50/32', position='Query'),
}

model DescribeSnatTableEntriesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  snatTableEntries?: [ 
    {
      natGatewayId?: string(name='NatGatewayId', example='nat-5t7nh1cfm6kxiszlttr38****'),
      snatEntryId?: string(name='SnatEntryId', example='snat-5tfjp3537mi6iokl59g5c****'),
      snatEntryName?: string(name='SnatEntryName', example='test0'),
      snatIp?: string(name='SnatIp', example='120.XXX.XXX.71'),
      sourceCIDR?: string(name='SourceCIDR', example='10.0.0.13/32'),
      status?: string(name='Status', example='Available'),
    }
  ](name='SnatTableEntries'),
  totalCount?: int32(name='TotalCount', example='7'),
}

model DescribeSnatTableEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSnatTableEntriesResponseBody(name='body'),
}

async function describeSnatTableEntries(request: DescribeSnatTableEntriesRequest): DescribeSnatTableEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSnatTableEntries', 'GET', '/', 'json', false, 'json', request);
}

model DescribeUserBandWidthDataRequest {
  endTime: string(name='EndTime', example='2019-05-21T12:22:00Z', position='Query'),
  ensRegionId?: string(name='EnsRegionId', example='cn-taiyuan-telecom', position='Query'),
  instanceId?: string(name='InstanceId', example='i-5inkeimcipxk26yqtzm4q****', position='Query'),
  isp?: string(name='Isp', example='cmcc', position='Query'),
  period: string(name='Period', example='300', position='Query'),
  startTime: string(name='StartTime', example='2019-05-21T10:22:00Z', position='Query'),
}

model DescribeUserBandWidthDataResponseBody = {
  code?: int32(name='Code', example='0'),
  monitorData?: {
    bandWidthMonitorData?: [ 
      {
        downBandWidth?: long(name='DownBandWidth', example='0'),
        internetRX?: long(name='InternetRX', example='0'),
        internetTX?: long(name='InternetTX', example='0'),
        timeStamp?: string(name='TimeStamp', example='2019-10-12T05:45:00Z'),
        upBandWidth?: long(name='UpBandWidth', example='0'),
      }
    ](name='BandWidthMonitorData'),
    maxDownBandWidth?: string(name='MaxDownBandWidth', example='16817468'),
    maxUpBandWidth?: string(name='MaxUpBandWidth', example='231008'),
  }(name='MonitorData'),
  requestId?: string(name='RequestId', example='50373E71-7710-4620-8AAB-133CCE49451C'),
}

model DescribeUserBandWidthDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserBandWidthDataResponseBody(name='body'),
}

async function describeUserBandWidthData(request: DescribeUserBandWidthDataRequest): DescribeUserBandWidthDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserBandWidthData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVSwitchesRequest {
  ensRegionId?: string(name='EnsRegionId', example='cn-xian-unicom', position='Query'),
  networkId?: string(name='NetworkId', example='vpc-25cdvfeq58pl****', position='Query'),
  orderByParams?: string(name='OrderByParams', example='{"EnsRegionId":"desc"}', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', maximum=50, position='Query'),
  vSwitchId?: string(name='VSwitchId', example='vsw-5m9xhlq8oh***', position='Query'),
  vSwitchName?: string(name='VSwitchName', example='testVSwitchName', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model DescribeVSwitchesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='2'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', example='3'),
  vSwitches?: {
    vSwitch?: [ 
    {
      cidrBlock?: string(name='CidrBlock', example='10.21.224.0/22'),
      createdTime?: string(name='CreatedTime', example='2020-06-16T06:33:15Z'),
      description?: string(name='Description', example='VSwitchDescription'),
      ensRegionId?: string(name='EnsRegionId', example='cn-xian-unicom'),
      freeIpCount?: long(name='FreeIpCount', example='1024'),
      networkId?: string(name='NetworkId', example='vpc-25cdvfeq58pl****'),
      status?: string(name='Status', example='Pending'),
      vSwitchId?: string(name='VSwitchId', example='vsw-5m9xhlq8oh***'),
      vSwitchName?: string(name='VSwitchName', example='testVSwitchName'),
    }
  ](name='VSwitch')
  }(name='VSwitches'),
}

model DescribeVSwitchesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVSwitchesResponseBody(name='body'),
}

async function describeVSwitches(request: DescribeVSwitchesRequest): DescribeVSwitchesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVSwitches', 'POST', '/', 'json', false, 'json', request);
}

model DetachDiskRequest {
  diskId: string(name='DiskId', example='d-5r7v69e0bejrnzger09w71yjv', position='Query'),
  instanceId: string(name='InstanceId', example='i-5inkeimcipxk26yqtzm4q****', position='Query'),
}

model DetachDiskResponseBody = {
  code?: int32(name='Code', example='0'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DetachDiskResponse = {
  headers: map[string]string(name='headers'),
  body: DetachDiskResponseBody(name='body'),
}

async function detachDisk(request: DetachDiskRequest): DetachDiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachDisk', 'POST', '/', 'json', false, 'json', request);
}

model DistApplicationDataRequest {
  appId: string(name='AppId', example='e76f8985-7965-41fc-925b-9648bb6bf650', position='Query'),
  data: string(name='Data', example='[{\\"name\\":\\"app01\\",        \\"version\\":\\"1.0\\",        \\"destPath\\":\\"/root/installed\\",        \\"decompress\\":true,        \\"targetDirName\\":\\"target01\\",        \\"fileMode\\":755,        \\"timeout\\":1000    },    {        \\"name\\":\\"app02\\",        \\"version\\":\\"1.1\\",        \\"destPath\\":\\"/tmp/test.txt\\",        \\"decompress\\":false    }]', position='Query'),
  distStrategy?: string(name='DistStrategy', example='{\\"name\\":\\"ScheduleToAllByMatchExpressions\\",\\"parameters\\":{\\"match_expressions\\":[{\\"key\\":\\"region_id\\",\\"operator\\":\\"In\\",\\"values\\":[\\"cn-wuhan-telecom_unicom_cmcc-2\\"]}]}}', position='Query'),
}

model DistApplicationDataResponseBody = {
  distInstanceIds?: {
    distInstanceId?: [ string ](name='DistInstanceId')
  }(name='DistInstanceIds'),
  distInstanceTotalCount?: int32(name='DistInstanceTotalCount', example='2'),
  distResults?: {
    distResult?: [ 
    {
      name?: string(name='Name', example='gcs-prod-websocket-eip-unicom'),
      resultCode?: int32(name='ResultCode', example='400'),
      resultDescrip?: string(name='ResultDescrip', example='Success'),
      version?: string(name='Version', example='standard'),
    }
  ](name='DistResult')
  }(name='DistResults'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DistApplicationDataResponse = {
  headers: map[string]string(name='headers'),
  body: DistApplicationDataResponseBody(name='body'),
}

async function distApplicationData(request: DistApplicationDataRequest): DistApplicationDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DistApplicationData', 'POST', '/', 'json', false, 'json', request);
}

model ExportBillDetailDataRequest {
  endDate: string(name='EndDate', description='结束时间UTC格式', example='2020-08-30T00:00:00Z', position='Query'),
  startDate: string(name='StartDate', description='开始时间，UTC格式', example='2020-06-01T00:00:00Z', position='Query'),
}

model ExportBillDetailDataResponseBody = {
  filePath?: string(name='FilePath', description='文件下载地址', example='http://test-oss.com/image_01.jpeg'),
  requestId?: string(name='RequestId', description='请求ID，公共字段', example='BEA05990-B90D-594F-8C8E-650AEEB94C5D'),
}

model ExportBillDetailDataResponse = {
  headers: map[string]string(name='headers'),
  body: ExportBillDetailDataResponseBody(name='body'),
}

async function exportBillDetailData(request: ExportBillDetailDataRequest): ExportBillDetailDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportBillDetailData', 'POST', '/', 'json', false, 'json', request);
}

model ExportImageRequest {
  imageId: string(name='ImageId', example='m-5ragaz3s74b7go8ks7jp9rch1', position='Query'),
  OSSBucket: string(name='OSSBucket', example='whxyl', position='Query'),
  OSSPrefix?: string(name='OSSPrefix', example='dataCenter/9724208/', position='Query'),
  OSSRegionId: string(name='OSSRegionId', example='cn-beijing', position='Query'),
  roleName?: string(name='RoleName', example='AliyunMNSLoggingRole', position='Query'),
}

model ExportImageResponseBody = {
  exportedImageURL?: string(name='ExportedImageURL', example='http://oss.url'),
  requestId?: string(name='RequestId', example='43A426AD-3F2E-5DD9-9C08-D4DBDCA48D85'),
}

model ExportImageResponse = {
  headers: map[string]string(name='headers'),
  body: ExportImageResponseBody(name='body'),
}

async function exportImage(request: ExportImageRequest): ExportImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportImage', 'POST', '/', 'json', false, 'json', request);
}

model ExportMeasurementDataRequest {
  endDate: string(name='EndDate', description='结束时间，UTC格式', example='2021-10-30T16:00:00Z', position='Query'),
  startDate: string(name='StartDate', description='开始时间，UTC格式', example='2019-06-01T00:00:00Z', position='Query'),
}

model ExportMeasurementDataResponseBody = {
  filePath?: string(name='FilePath', description='文件下载地址', example='http://test-oss.com/image_01.jpeg'),
  requestId?: string(name='RequestId', description='请求ID，公共字段', example='C0003E8B-B930-4F59-ADC0-0E209A9012A8'),
}

model ExportMeasurementDataResponse = {
  headers: map[string]string(name='headers'),
  body: ExportMeasurementDataResponseBody(name='body'),
}

async function exportMeasurementData(request: ExportMeasurementDataRequest): ExportMeasurementDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportMeasurementData', 'POST', '/', 'json', false, 'json', request);
}

model GetDeviceInternetPortRequest {
  instanceId: string(name='InstanceId', description='A short description of struct', example='i-5s6xbnx9srb3vm6tp9hg9o64e', position='Query'),
  natType: string(name='NatType', example='DNAT', position='Query'),
  ruleId?: string(name='RuleId', example='snat-5ref5fc1l1xgqnpjzrtw1hw5a', position='Query'),
}

model GetDeviceInternetPortResponseBody = {
  instanceId?: string(name='InstanceId', description='InstanceId', example='i-5sadvk2xnylvra9kyejcnevi6'),
  networkInfo?: [ 
    {
      externalIp?: string(name='ExternalIp', example='39.105.62.120'),
      externalPort?: string(name='ExternalPort', example='20'),
      ISP?: string(name='ISP', example='cmcc'),
      internalIp?: string(name='InternalIp', example='10.0.0.49'),
      internalPort?: string(name='InternalPort', example='2020/2025'),
      status?: string(name='Status', example='Running'),
    }
  ](name='NetworkInfo'),
  requestId?: string(name='RequestId', description='Id of the request', example='36311833-83FC-57C3-A7DD-768F61F65555'),
}

model GetDeviceInternetPortResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceInternetPortResponseBody(name='body'),
}

async function getDeviceInternetPort(request: GetDeviceInternetPortRequest): GetDeviceInternetPortResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceInternetPort', 'GET', '/', 'json', false, 'json', request);
}

model GetOssStorageAndAccByBucketsRequest {
  bucketList?: string(name='BucketList', position='Query'),
}

model GetOssStorageAndAccByBucketsResponseBody = {
  bucketList?: [ 
    {
      acc?: long(name='Acc'),
      bucket?: string(name='Bucket'),
      storageUsageByte?: long(name='StorageUsageByte'),
    }
  ](name='BucketList'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetOssStorageAndAccByBucketsResponse = {
  headers: map[string]string(name='headers'),
  body: GetOssStorageAndAccByBucketsResponseBody(name='body'),
}

async function getOssStorageAndAccByBuckets(request: GetOssStorageAndAccByBucketsRequest): GetOssStorageAndAccByBucketsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOssStorageAndAccByBuckets', 'GET', '/', 'json', false, 'json', request);
}

model ImportKeyPairRequest {
  keyPairName: string(name='KeyPairName', example='TestKeyPairName', position='Query'),
  publicKeyBody: string(name='PublicKeyBody', example='ssh-rsa AAAAB****', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model ImportKeyPairResponseBody = {
  keyPairFingerPrint?: string(name='KeyPairFingerPrint', example='fdaf8ff7a756ef843814fc****'),
  keyPairName?: string(name='KeyPairName', example='TestKeyPairName'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ImportKeyPairResponse = {
  headers: map[string]string(name='headers'),
  body: ImportKeyPairResponseBody(name='body'),
}

async function importKeyPair(request: ImportKeyPairRequest): ImportKeyPairResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportKeyPair', 'POST', '/', 'json', false, 'json', request);
}

model JoinPublicIpsToEpnInstanceRequest {
  EPNInstanceId: string(name='EPNInstanceId', example='epn-xxxx', position='Query'),
  instanceInfos: string(name='InstanceInfos', example='InstanceInfos=[{"PublicIpAddress":"2.230.XX.XX"},{"PublicIpAddress":"2.230.XX.XX"}]', position='Query'),
}

model JoinPublicIpsToEpnInstanceResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model JoinPublicIpsToEpnInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: JoinPublicIpsToEpnInstanceResponseBody(name='body'),
}

async function joinPublicIpsToEpnInstance(request: JoinPublicIpsToEpnInstanceRequest): JoinPublicIpsToEpnInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'JoinPublicIpsToEpnInstance', 'POST', '/', 'json', false, 'json', request);
}

model JoinSecurityGroupRequest {
  instanceId: string(name='InstanceId', example='i-bp67acfmxazb4ph***', position='Query'),
  securityGroupId: string(name='SecurityGroupId', example='sg-bp67acfmxazb4ph***', position='Query'),
}

model JoinSecurityGroupResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model JoinSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: JoinSecurityGroupResponseBody(name='body'),
}

async function joinSecurityGroup(request: JoinSecurityGroupRequest): JoinSecurityGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'JoinSecurityGroup', 'POST', '/', 'json', false, 'json', request);
}

model JoinVSwitchesToEpnInstanceRequest {
  EPNInstanceId: string(name='EPNInstanceId', example='epn-xxxx', position='Query'),
  vSwitchesInfo: string(name='VSwitchesInfo', example='[{"VSwitchId":"vs-ixxxx"},{"VSwitchId":"vs-ixxxx"}]', position='Query'),
}

model JoinVSwitchesToEpnInstanceResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model JoinVSwitchesToEpnInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: JoinVSwitchesToEpnInstanceResponseBody(name='body'),
}

async function joinVSwitchesToEpnInstance(request: JoinVSwitchesToEpnInstanceRequest): JoinVSwitchesToEpnInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'JoinVSwitchesToEpnInstance', 'POST', '/', 'json', false, 'json', request);
}

model LeaveSecurityGroupRequest {
  instanceId: string(name='InstanceId', example='i-bp67acfmxazb4p****', position='Query'),
  securityGroupId: string(name='SecurityGroupId', example='sg-bp67acfmxazb4p****', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model LeaveSecurityGroupResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model LeaveSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: LeaveSecurityGroupResponseBody(name='body'),
}

async function leaveSecurityGroup(request: LeaveSecurityGroupRequest): LeaveSecurityGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LeaveSecurityGroup', 'POST', '/', 'json', false, 'json', request);
}

model ListApplicationsRequest {
  appVersions?: string(name='AppVersions', example='v1,v2', position='Query'),
  clusterNames?: string(name='ClusterNames', example='poc,pre', position='Query'),
  level?: string(name='Level', example='National', position='Query'),
  maxDate?: string(name='MaxDate', example='2022-02-20', position='Query'),
  minDate?: string(name='MinDate', example='2022-02-15', position='Query'),
  outAppInfoParams?: string(name='OutAppInfoParams', example='{\\"appInfo\\":true,\\"detailStat\\": true, \\"appVersionStat\\": true, \\"districtStat\\":true ,\\"instanceStat\\": true, \\"podCountStat\\": true}', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model ListApplicationsResponseBody = {
  applications?: {
    application?: [ 
    {
      appList?: {
        app?: [ 
        {
          appId?: string(name='AppId', example='e76f8985-7965-41fc-925b-9648bb6bf650'),
          appInfo?: string(name='AppInfo', example='{
    "AppStatus":{
        "Phase":"RUNNING",
        "StatusDescrip":"{\\"status\\":\\"UPDATE_SUCCESS\\",\\"step\\":\\"DONE\\",\\"descrip\\":\\"update to version:1022 success\\",\\"start_time\\":\\"2022-03-01 16:18:22\\"}",
        "UpdateTime":"2022-03-01 16:18:22",
        "OrderStatus":null
    },
    "ResourceAttribute":{
        "NetSecurityInfo":null,
        "InitConfig":null,
        "InventoryType":"Ens",
        "InstanceSpec":"ens.gi6s-c12g1.large",
        "SystemDiskSize":100,
        "DataDiskSize":0,
        "BandwithOut":5000,
        "SchedulingStrategy":"Disperse",
        "ImageId":"m-5or73kzkuxytv7hh6wxr6yc5q",
        "ResourceType":"Linux",
        "AreaLevel":"National",
        "IpType":"PublicIP"
    },
    "WorkloadAttribute":[
        {
            "Name":"andorid",
            "Count":15,
            "ServiceConfig":{
                "PortsBindConfig":{
                    "NetServiceContainer":"uravi-service",
                    "Ports":[
                        {
                            "Protocol":"TCP",
                            "BindType":"Mapping",
                            "StartNodePorts":"31000-31009",
                            "ContainerPorts":"4440-4449"
                        },
                        {
                            "Protocol":"TCP",
                            "BindType":"PassThrough",
                            "StartNodePorts":"59000-59000",
                            "ContainerPorts":"59000-59000"
                        },
                        {
                            "Protocol":"UDP",
                            "BindType":"PassThrough",
                            "StartNodePorts":"40001-40010",
                            "ContainerPorts":"40001-40010"
                        }
                    ]
                },
                "ServiceContainerName":"android"
            }
        },
        {
            "Name":"coturn",
            "Count":1,
            "ServiceConfig":{
                "PortsBindConfig":{
                    "NetServiceContainer":"coturn",
                    "Ports":[
                        {
                            "Protocol":"TCP",
                            "BindType":"PassThrough",
                            "StartNodePorts":"3478-3478",
                            "ContainerPorts":"3478-3478"
                        },
                        {
                            "Protocol":"UDP",
                            "BindType":"PassThrough",
                            "StartNodePorts":"3478-3478",
                            "ContainerPorts":"3478-3478"
                        }
                    ]
                },
                "ServiceContainerName":"coturn"
            }
        },
        {
            "Name":"aic-manager",
            "Count":1,
            "ServiceConfig":null
        }
    ]
}'),
        }
      ](name='App')
      }(name='AppList'),
      clusterName?: string(name='ClusterName', example='ay-ads-hz-h'),
    }
  ](name='Application')
  }(name='Applications'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='50373E71-7710-4620-8AAB-133CCE49451C'),
  totalCount?: int32(name='TotalCount', example='49'),
}

model ListApplicationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListApplicationsResponseBody(name='body'),
}

async function listApplications(request: ListApplicationsRequest): ListApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplications', 'POST', '/', 'json', false, 'json', request);
}

model ModifyEnsEipAddressAttributeRequest {
  allocationId: string(name='AllocationId', example='eip-5sw5dxzgi6umq4uexxkt8wpma', position='Query'),
  bandwidth?: int32(name='Bandwidth', example='50', minimum=1, maximum=10000, position='Query'),
  description?: string(name='Description', example='abc', minLength=2, maxLength=256, position='Query'),
  name?: string(name='Name', example='test-api-modify', minLength=2, maxLength=128, position='Query'),
}

model ModifyEnsEipAddressAttributeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyEnsEipAddressAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyEnsEipAddressAttributeResponseBody(name='body'),
}

async function modifyEnsEipAddressAttribute(request: ModifyEnsEipAddressAttributeRequest): ModifyEnsEipAddressAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyEnsEipAddressAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyEpnInstanceRequest {
  EPNInstanceId: string(name='EPNInstanceId', example='epn-****', position='Query'),
  EPNInstanceName?: string(name='EPNInstanceName', example='ens_test_epn', position='Query'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', example='10', position='Query'),
  networkingModel?: string(name='NetworkingModel', example='SpeedUp', position='Query'),
}

model ModifyEpnInstanceResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyEpnInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyEpnInstanceResponseBody(name='body'),
}

async function modifyEpnInstance(request: ModifyEpnInstanceRequest): ModifyEpnInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyEpnInstance', 'POST', '/', 'json', false, 'json', request);
}

model ModifyFileSystemRequest {
  description: string(name='Description', description='文件系统描述符。', example='fileSystemTest', position='Query'),
  ensRegionId: string(name='EnsRegionId', example='cn-beijing-cmcc', position='Query'),
  fileSystemId: string(name='FileSystemId', description='文件系统ID。', example='c50f8*****', position='Query'),
}

model ModifyFileSystemResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model ModifyFileSystemResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyFileSystemResponseBody(name='body'),
}

async function modifyFileSystem(request: ModifyFileSystemRequest): ModifyFileSystemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyFileSystem', 'POST', '/', 'json', false, 'json', request);
}

model ModifyForwardEntryRequest {
  forwardEntryId: string(name='ForwardEntryId', example='dnat-5tfjp3537mi6iokl59g5c****', position='Query'),
  forwardEntryName?: string(name='ForwardEntryName', example='test0', maxLength=128, position='Query'),
  healthCheckPort?: int32(name='HealthCheckPort', example='80', minimum=0, maximum=65535, position='Query'),
}

model ModifyForwardEntryResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyForwardEntryResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyForwardEntryResponseBody(name='body'),
}

async function modifyForwardEntry(request: ModifyForwardEntryRequest): ModifyForwardEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyForwardEntry', 'POST', '/', 'json', false, 'json', request);
}

model ModifyImageAttributeRequest {
  imageId: string(name='ImageId', example='m-5t4xwkfkbs0uxv0kymdb6uip7', position='Query'),
  imageName: string(name='ImageName', position='Query'),
  version: string(name='Version', description='2017-11-10', example='2017-11-10', position='Query'),
  product?: string(name='product', position='Query'),
}

model ModifyImageAttributeResponseBody = {
  code?: int32(name='Code', example='0'),
  requestId?: string(name='RequestId', example='AC66B8F3-0B0A-5FB1-9EA2-DC03B2CD5B04'),
}

model ModifyImageAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyImageAttributeResponseBody(name='body'),
}

async function modifyImageAttribute(request: ModifyImageAttributeRequest): ModifyImageAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyImageAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyImageSharePermissionRequest {
  addAccounts?: string(name='AddAccounts', example='112233445566', position='Query'),
  imageId: string(name='ImageId', example='m-5s7qotzavwbrnzaqh4unm7lt7', position='Query'),
  removeAccounts?: string(name='RemoveAccounts', example='11335577', position='Query'),
}

model ModifyImageSharePermissionResponseBody = {
  requestId?: string(name='RequestId', example='701B3BB9-9190-544D-90D1-328B0527380C'),
}

model ModifyImageSharePermissionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyImageSharePermissionResponseBody(name='body'),
}

async function modifyImageSharePermission(request: ModifyImageSharePermissionRequest): ModifyImageSharePermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyImageSharePermission', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceAttributeRequest {
  hostName?: string(name='HostName', position='Query'),
  instanceId: string(name='InstanceId', example='i-instanc****', position='Query'),
  instanceName?: string(name='InstanceName', example='i-instanceidname', position='Query'),
  password?: string(name='Password', example='yourPassword', position='Query'),
  userData?: string(name='UserData', position='Query'),
}

model ModifyInstanceAttributeResponseBody = {
  code?: int32(name='Code', example='200'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceAttributeResponseBody(name='body'),
}

async function modifyInstanceAttribute(request: ModifyInstanceAttributeRequest): ModifyInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceAutoRenewAttributeRequest {
  autoRenew: string(name='AutoRenew', example='false', position='Query'),
  duration?: string(name='Duration', example='12', position='Query'),
  instanceIds: string(name='InstanceIds', example='instance-test', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  renewalStatus?: string(name='RenewalStatus', example='Normal', position='Query'),
}

model ModifyInstanceAutoRenewAttributeResponseBody = {
  code?: int32(name='Code', example='0'),
  requestId?: string(name='RequestId', example='4DD66F05-3116-4BAA-B588-52EB2E7F431D'),
}

model ModifyInstanceAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceAutoRenewAttributeResponseBody(name='body'),
}

async function modifyInstanceAutoRenewAttribute(request: ModifyInstanceAutoRenewAttributeRequest): ModifyInstanceAutoRenewAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceAutoRenewAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyLoadBalancerAttributeRequest {
  loadBalancerId: string(name='LoadBalancerId', example='lb-5q73cv04zeyh43lh74lp4gtm8', position='Query'),
  loadBalancerName: string(name='LoadBalancerName', example='test', minLength=2, maxLength=128, position='Query'),
}

model ModifyLoadBalancerAttributeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyLoadBalancerAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLoadBalancerAttributeResponseBody(name='body'),
}

async function modifyLoadBalancerAttribute(request: ModifyLoadBalancerAttributeRequest): ModifyLoadBalancerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyLoadBalancerAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyNetworkAttributeRequest {
  description?: string(name='Description', example='this is my first network', minLength=2, maxLength=256, position='Query'),
  networkId: string(name='NetworkId', example='n-****', position='Query'),
  networkName?: string(name='NetworkName', example='abc', minLength=2, maxLength=128, position='Query'),
}

model ModifyNetworkAttributeResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyNetworkAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyNetworkAttributeResponseBody(name='body'),
}

async function modifyNetworkAttribute(request: ModifyNetworkAttributeRequest): ModifyNetworkAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNetworkAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPrepayInstanceSpecRequest {
  instanceId?: string(name='InstanceId', description='变配实例id', example='i-bp67acfmxazb4p****', position='Query'),
  instanceType?: string(name='InstanceType', description='更新的配置', example='ens.sn1.tiny', position='Query'),
}

model ModifyPrepayInstanceSpecResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='FD94C8E8-128E-525C-A0C3-60E063B70330'),
}

model ModifyPrepayInstanceSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPrepayInstanceSpecResponseBody(name='body'),
}

async function modifyPrepayInstanceSpec(request: ModifyPrepayInstanceSpecRequest): ModifyPrepayInstanceSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPrepayInstanceSpec', 'POST', '/', 'json', false, 'json', request);
}

model ModifySecurityGroupAttributeRequest {
  description?: string(name='Description', example='testDescription', minLength=2, maxLength=256, position='Query'),
  securityGroupId: string(name='SecurityGroupId', example='sg-bp67acfmxazb4p****', position='Query'),
  securityGroupName?: string(name='SecurityGroupName', example='example', minLength=2, maxLength=128, position='Query'),
}

model ModifySecurityGroupAttributeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifySecurityGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityGroupAttributeResponseBody(name='body'),
}

async function modifySecurityGroupAttribute(request: ModifySecurityGroupAttributeRequest): ModifySecurityGroupAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySecurityGroupAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVSwitchAttributeRequest {
  description?: string(name='Description', example='this is my first network', minLength=2, maxLength=256, position='Query'),
  vSwitchId: string(name='VSwitchId', example='n-****', position='Query'),
  vSwitchName?: string(name='VSwitchName', example='Test-switch', minLength=2, maxLength=128, position='Query'),
}

model ModifyVSwitchAttributeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyVSwitchAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVSwitchAttributeResponseBody(name='body'),
}

async function modifyVSwitchAttribute(request: ModifyVSwitchAttributeRequest): ModifyVSwitchAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVSwitchAttribute', 'POST', '/', 'json', false, 'json', request);
}

model PreCreateEnsServiceRequest {
  bandwidthType: string(name='BandwidthType', example='95BandwidthByMonth', position='Query'),
  buyResourcesDetail: string(name='BuyResourcesDetail', position='Query'),
  dataDiskSize?: string(name='DataDiskSize', example='100', position='Query'),
  ensServiceName: string(name='EnsServiceName', example='testName', position='Query'),
  imageId: string(name='ImageId', example='centos_6_09_64_20G_alibase_****', position='Query'),
  instanceBandwithdLimit: string(name='InstanceBandwithdLimit', example='40', position='Query'),
  instanceSpec: string(name='InstanceSpec', example='ens.sn1.stiny', position='Query'),
  keyPairName?: string(name='KeyPairName', example='TestKeyPairName', position='Query'),
  netLevel: string(name='NetLevel', example='Big', position='Query'),
  password?: string(name='Password', example='testPassword123', position='Query'),
  schedulingPriceStrategy?: string(name='SchedulingPriceStrategy', example='PriceLowPriority', position='Query'),
  schedulingStrategy: string(name='SchedulingStrategy', example='Disperse', position='Query'),
  systemDiskSize: string(name='SystemDiskSize', example='100', position='Query'),
  userData?: string(name='UserData', example='#!/bin/sh  echo "Hello World.  The time is now $(date -R)!" | tee /root/output.txt', position='Query'),
}

model PreCreateEnsServiceResponseBody = {
  buyResourcesDetail?: string(name='BuyResourcesDetail'),
  code?: int32(name='Code', example='0'),
  ensServiceId?: string(name='EnsServiceId', example='ens-20190806****'),
  netLevel?: string(name='NetLevel', example='Small'),
  requestId?: string(name='RequestId', example='9AF02B43-2D08-49D3-8AAF-65B9C792ED14'),
}

model PreCreateEnsServiceResponse = {
  headers: map[string]string(name='headers'),
  body: PreCreateEnsServiceResponseBody(name='body'),
}

async function preCreateEnsService(request: PreCreateEnsServiceRequest): PreCreateEnsServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PreCreateEnsService', 'POST', '/', 'json', false, 'json', request);
}

model PushApplicationDataRequest {
  appId: string(name='AppId', example='e76f8985-7965-41fc-925b-9648bb6bf650', position='Query'),
  data: string(name='Data', example='[{\\"name\\":\\"app01\\",       \\"version\\":\\"1.0\\",       \\"size\\":100,\\"archiveType\\":\\"tar.gz\\",       \\"md5\\":\\"\\",       \\"url\\":\\"http://xxxx\\",\\"timeout\\": 1000   },    {       \\"name\\":\\"app02\\",       \\"version\\":\\"1.1\\",       \\"size\\":10,\\"archiveType\\":\\"zip\\",       \\"md5\\":\\"xxxx\\",       \\"url\\":\\"http://xxxxxx\\",\\"timeout\\": 1000   }]', position='Query'),
  pushStrategy?: string(name='PushStrategy', example='{\\"name\\": \\"ScheduleToRegionId\\",  \\"parameters\\":{      \\"operator\\": \\"In\\",       \\"values\\": [\\"cn-chegndu-telecom-4\\", \\"cn-shanghai-cmcc-4\\"]  }}', position='Query'),
  timeout?: int32(name='Timeout', example='1800', position='Query'),
}

model PushApplicationDataResponseBody = {
  pushResults?: {
    pushResult?: [ 
    {
      name?: string(name='Name', example='gcs-pre-websocket-eip-telecom'),
      resultCode?: int32(name='ResultCode', example='100'),
      resultDescrip?: string(name='ResultDescrip'),
      version?: string(name='Version', example='standard'),
    }
  ](name='PushResult')
  }(name='PushResults'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model PushApplicationDataResponse = {
  headers: map[string]string(name='headers'),
  body: PushApplicationDataResponseBody(name='body'),
}

async function pushApplicationData(request: PushApplicationDataRequest): PushApplicationDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PushApplicationData', 'POST', '/', 'json', false, 'json', request);
}

model ReInitDiskRequest {
  diskId: string(name='DiskId', example='d-5r7v69e0bejrnzger09w71yjv', position='Query'),
  imageId: string(name='ImageId', example='m-5rz3i231o531s4p4ozanxmgx7', position='Query'),
  version: string(name='Version', description='2017-11-10', example='2017-11-10', position='Query'),
}

model ReInitDiskResponseBody = {
  code?: int32(name='Code', example='0'),
  requestId?: string(name='RequestId', example='4DD66F05-3116-4BAA-B588-52EB2E7F431D'),
}

model ReInitDiskResponse = {
  headers: map[string]string(name='headers'),
  body: ReInitDiskResponseBody(name='body'),
}

async function reInitDisk(request: ReInitDiskRequest): ReInitDiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReInitDisk', 'POST', '/', 'json', false, 'json', request);
}

model RebootAICInstanceRequest {
  instanceId?: string(name='InstanceId', example='aic-instance****', position='Query'),
  serverId?: string(name='ServerId', example='cas-instance****', position='Query'),
}

model RebootAICInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model RebootAICInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RebootAICInstanceResponseBody(name='body'),
}

async function rebootAICInstance(request: RebootAICInstanceRequest): RebootAICInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebootAICInstance', 'GET', '/', 'json', false, 'json', request);
}

model RebootARMServerInstanceRequest {
  serverId?: string(name='ServerId', example='cas-instance****', position='Query'),
}

model RebootARMServerInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model RebootARMServerInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RebootARMServerInstanceResponseBody(name='body'),
}

async function rebootARMServerInstance(request: RebootARMServerInstanceRequest): RebootARMServerInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebootARMServerInstance', 'GET', '/', 'json', false, 'json', request);
}

model RebootInstanceRequest {
  forceStop?: string(name='ForceStop', example='true', position='Query'),
  instanceId: string(name='InstanceId', example='i-instanceid****', position='Query'),
}

model RebootInstanceResponseBody = {
  code?: int32(name='Code', example='0'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model RebootInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RebootInstanceResponseBody(name='body'),
}

async function rebootInstance(request: RebootInstanceRequest): RebootInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebootInstance', 'POST', '/', 'json', false, 'json', request);
}

model RebootInstancesRequest {
  instanceIds?: [ string ](name='InstanceIds', shrink='simple', position='Query'),
}

model RebootInstancesResponseBody = {
  instanceResponses?: [
    InstanceOperateResponse
  ](name='InstanceResponses'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RebootInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: RebootInstancesResponseBody(name='body'),
}

async function rebootInstances(request: RebootInstancesRequest): RebootInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebootInstances', 'POST', '/', 'json', false, 'json', request);
}

model ReinitInstanceRequest {
  imageId: string(name='ImageId', position='Body'),
  instanceId: string(name='InstanceId', position='Body'),
  password?: string(name='Password', position='Body'),
}

model ReinitInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ReinitInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ReinitInstanceResponseBody(name='body'),
}

async function reinitInstance(request: ReinitInstanceRequest): ReinitInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReinitInstance', 'POST', '/', 'json', true, 'form', request);
}

model ReinitInstancesRequest {
  imageId?: string(name='ImageId', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', shrink='simple', position='Query'),
  password?: string(name='Password', position='Query'),
}

model ReinitInstancesResponseBody = {
  instanceResponses?: [
    InstanceOperateResponse
  ](name='InstanceResponses'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ReinitInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ReinitInstancesResponseBody(name='body'),
}

async function reinitInstances(request: ReinitInstancesRequest): ReinitInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReinitInstances', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseARMServerInstanceRequest {
  instanceId: string(name='InstanceId', description='AIC实例ID.', example='yourInstance ID', position='Query'),
}

model ReleaseARMServerInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='DCAE84DF-4187-5CC5-B819-37BCD2B83BD3'),
}

model ReleaseARMServerInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseARMServerInstanceResponseBody(name='body'),
}

async function releaseARMServerInstance(request: ReleaseARMServerInstanceRequest): ReleaseARMServerInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseARMServerInstance', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseInstanceRequest {
  instanceId: string(name='InstanceId', description='实例id', example='eip-****', position='Query'),
}

model ReleaseInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model ReleaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseInstanceResponseBody(name='body'),
}

async function releaseInstance(request: ReleaseInstanceRequest): ReleaseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseInstance', 'POST', '/', 'json', false, 'json', request);
}

model ReleasePostPaidInstanceRequest {
  instanceId: string(name='InstanceId', example='i-instance****', position='Query'),
}

model ReleasePostPaidInstanceResponseBody = {
  requestId?: string(name='RequestId', example='C0003E8B-B930-4F59-ADC0-0E209A9012A8'),
}

model ReleasePostPaidInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ReleasePostPaidInstanceResponseBody(name='body'),
}

async function releasePostPaidInstance(request: ReleasePostPaidInstanceRequest): ReleasePostPaidInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleasePostPaidInstance', 'POST', '/', 'json', false, 'json', request);
}

model ReleasePrePaidInstanceRequest {
  instanceId: string(name='InstanceId', example='i-instance****', position='Query'),
}

model ReleasePrePaidInstanceResponseBody = {
  requestId?: string(name='RequestId', example='C0003E8B-B930-4F59-ADC0-0E209A9012A8'),
}

model ReleasePrePaidInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ReleasePrePaidInstanceResponseBody(name='body'),
}

async function releasePrePaidInstance(request: ReleasePrePaidInstanceRequest): ReleasePrePaidInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleasePrePaidInstance', 'POST', '/', 'json', false, 'json', request);
}

model RemoveBackendServersRequest {
  backendServers: [ 
    {
      ip?: string(name='Ip', example='192.168.0.1'),
      port?: int32(name='Port', description='端口', example='0', minimum=0, maximum=65535),
      serverId: string(name='ServerId', example='i-5uf68ts0fqexe1a4n****'),
      type?: string(name='Type', description='后端服务器类型。  ens：ENS实例（默认）', example='ens'),
      weight?: int32(name='Weight', description='后端服务器的权重。  取值：0~100  默认值为100，如果值为0，则不会将请求转发给该后端服务器。', example='100', minimum=0, maximum=100),
    }
  ](name='BackendServers', shrink='json', position='Query'),
  loadBalancerId: string(name='LoadBalancerId', example='lb-5ovkn1piwqmoqrfjdyhq4****', position='Query'),
}

model RemoveBackendServersResponseBody = {
  backendServers?: {
    backendServer?: [ 
    {
      ip?: string(name='Ip', example='192.168.0.1'),
      port?: int32(name='Port', example='0'),
      serverId?: string(name='ServerId', example='i-5vb5h5njxiuhn48a****'),
      type?: string(name='Type', example='ens'),
      weight?: int32(name='Weight', example='50'),
    }
  ](name='BackendServer')
  }(name='BackendServers'),
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model RemoveBackendServersResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveBackendServersResponseBody(name='body'),
}

async function removeBackendServers(request: RemoveBackendServersRequest): RemoveBackendServersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveBackendServers', 'POST', '/', 'json', false, 'json', request);
}

model RemovePublicIpsFromEpnInstanceRequest {
  EPNInstanceId: string(name='EPNInstanceId', example='epn-xxxx', position='Query'),
  instanceInfos: string(name='InstanceInfos', example='[{"PublicIpAddress":"2.230.XX.XX"},{"PublicIpAddress":"2.230.XX.XX"}]', position='Query'),
}

model RemovePublicIpsFromEpnInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemovePublicIpsFromEpnInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RemovePublicIpsFromEpnInstanceResponseBody(name='body'),
}

async function removePublicIpsFromEpnInstance(request: RemovePublicIpsFromEpnInstanceRequest): RemovePublicIpsFromEpnInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemovePublicIpsFromEpnInstance', 'POST', '/', 'json', false, 'json', request);
}

model RemoveVSwitchesFromEpnInstanceRequest {
  EPNInstanceId: string(name='EPNInstanceId', example='epn-****', position='Query'),
  vSwitchesInfo: string(name='VSwitchesInfo', example='VSwitchesInfo=[{"VSwitchId":"vs-ixxxx"},{"VSwitchId":"vs-ixxxx"}]', position='Query'),
}

model RemoveVSwitchesFromEpnInstanceResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model RemoveVSwitchesFromEpnInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveVSwitchesFromEpnInstanceResponseBody(name='body'),
}

async function removeVSwitchesFromEpnInstance(request: RemoveVSwitchesFromEpnInstanceRequest): RemoveVSwitchesFromEpnInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveVSwitchesFromEpnInstance', 'POST', '/', 'json', false, 'json', request);
}

model RenewARMServerInstanceRequest {
  instanceId: string(name='InstanceId', example='yourInstance ID', position='Query'),
  period: int32(name='Period', example='1', position='Query'),
  periodUnit: string(name='PeriodUnit', example='Month', position='Query'),
}

model RenewARMServerInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='370E61E0-6E6E-50FE-9259-EE706C55ABF1'),
}

model RenewARMServerInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RenewARMServerInstanceResponseBody(name='body'),
}

async function renewARMServerInstance(request: RenewARMServerInstanceRequest): RenewARMServerInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewARMServerInstance', 'POST', '/', 'json', false, 'json', request);
}

model RenewInstanceRequest {
  instanceId: string(name='InstanceId', description='需要续费的实例ID。', example='i-56789acfmxazb4p****', position='Query'),
  period: long(name='Period', description='包年包月续费时长。', example='1', position='Query'),
}

model RenewInstanceResponseBody = {
  requestId?: string(name='RequestId', example='86A6D421-A0C7-4C01-8648-47377CA6A2CE'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RenewInstanceResponseBody(name='body'),
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewInstance', 'GET', '/', 'json', false, 'json', request);
}

model RescaleApplicationRequest {
  appId: string(name='AppId', example='474bdef0-d149-4695-abfb-52912d9143f0', position='Query'),
  rescaleLevel?: string(name='RescaleLevel', example='RegionId', position='Query'),
  rescaleType: string(name='RescaleType', example='Add', position='Query'),
  resourceSelector: string(name='ResourceSelector', example='[{\\"regionCode\\": \\"cn-wuxi-telecom_unicom_cmcc-3\\",    \\"ispCode\\": \\"telecom\\",    \\"count\\": 2	},{    \\"regionCode\\": \\"cn-shanghai-cmcc\\",    \\"count\\": 4	}]', position='Query'),
  timeout?: int32(name='Timeout', example='1800', position='Query'),
  toAppVersion?: string(name='ToAppVersion', example='v2', position='Query'),
}

model RescaleApplicationResponseBody = {
  requestId?: string(name='RequestId', example='AAE90880-4970-4D81-A534-A6C0F3631F74'),
}

model RescaleApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: RescaleApplicationResponseBody(name='body'),
}

async function rescaleApplication(request: RescaleApplicationRequest): RescaleApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RescaleApplication', 'POST', '/', 'json', false, 'json', request);
}

model RescaleDeviceServiceRequest {
  appId?: string(name='AppId', example='7aedc50b-b1cb-4a7c-9e3d-4cf3c9ee55a4', position='Query'),
  imageId?: string(name='ImageId', example='m-5rynw9g1ow1e928lb83bqmbnf', position='Query'),
  ipType?: int32(name='IpType', example='1', position='Query'),
  rescaleLevel: string(name='RescaleLevel', example='RegionId', position='Query'),
  rescaleType: string(name='RescaleType', example='Add', position='Query'),
  resourceInfo?: string(name='ResourceInfo', example='{\\"imageId\\":\\"m-5s4z4c10avgwvwtn33gl2vgob\\",\\"ipType\\":2,\\"specName\\":\\"ens.pfb-c3m7.medium\\"}', position='Body'),
  resourceSelector: string(name='ResourceSelector', example='[{\\"regionCode\\": \\"cn-wuxi-telecom_unicom_cmcc-3\\",    \\"ispCode\\": \\"telecom\\",    \\"count\\": 2	},{    \\"regionCode\\": \\"cn-shanghai-cmcc\\",    \\"count\\": 4	}]', position='Body'),
  resourceSpec?: string(name='ResourceSpec', example='ens.a6e.large', position='Query'),
  serviceId?: string(name='ServiceId', example='service-01c6dd6e93f040698566', position='Query'),
  timeout?: long(name='Timeout', example='1800', position='Query'),
}

model RescaleDeviceServiceResponseBody = {
  deviceIds?: [ string ](name='DeviceIds'),
  orderId?: string(name='OrderId', example='b3b5bb9a-4e0b-4cac-8ebf-e5e015726723'),
  requestId?: string(name='RequestId', description='Id of the request', example='3F3F3570-E721-53F6-853F-37B7725AC6CB'),
  resourceDetailInfos?: [ 
    {
      id?: string(name='ID', example='h-uf6009zoa6hdbjyqxcn1'),
      ip?: string(name='IP', example='10.152.196.36'),
      ISP?: string(name='ISP', example='telecom'),
      mac?: string(name='Mac', example='24:0B:88:04:71:E0'),
      regionID?: string(name='RegionID', example='cn-chongqing-1'),
      server?: string(name='Server', example='ens-nc2'),
      status?: string(name='Status', example='Running'),
      type?: string(name='Type', example='ens.ac6.large'),
    }
  ](name='ResourceDetailInfos'),
}

model RescaleDeviceServiceResponse = {
  headers: map[string]string(name='headers'),
  body: RescaleDeviceServiceResponseBody(name='body'),
}

async function rescaleDeviceService(request: RescaleDeviceServiceRequest): RescaleDeviceServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RescaleDeviceService', 'POST', '/', 'json', true, 'form', request);
}

model ResetAICInstanceRequest {
  instanceId?: string(name='InstanceId', example='aic-instance****', position='Query'),
  serverId?: string(name='ServerId', example='cas-instance****', position='Query'),
}

model ResetAICInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ResetAICInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAICInstanceResponseBody(name='body'),
}

async function resetAICInstance(request: ResetAICInstanceRequest): ResetAICInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAICInstance', 'GET', '/', 'json', false, 'json', request);
}

model ResetDeviceInstanceRequest {
  appId: string(name='AppId', description='A short description of struct', example='d0639abf-789a-4527-b420-031d2cd9ad9b', position='Query'),
  imageId: string(name='ImageId', example='m-5si16wo6simkt267p8b7hcmy3', position='Query'),
  instanceId: string(name='InstanceId', example='i-5sfdblzjqf3zvjnr7oh0bhhj2', position='Query'),
}

model ResetDeviceInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='60C0D889-9C80-5D68-8645-6A55C58E72CF'),
}

model ResetDeviceInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ResetDeviceInstanceResponseBody(name='body'),
}

async function resetDeviceInstance(request: ResetDeviceInstanceRequest): ResetDeviceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetDeviceInstance', 'GET', '/', 'json', false, 'json', request);
}

model ResizeDiskRequest {
  diskId: string(name='DiskId', example='d-5tzm9wnhzlhjzcbtxo465****', position='Query'),
  newSize: string(name='NewSize', example='100', position='Query'),
}

model ResizeDiskResponseBody = {
  orderId?: string(name='OrderId', example='21522202681****'),
  requestId?: string(name='RequestId', description='Id of the request', example='689412F2-8402-181E-8C87-1EF62331DCC4'),
}

model ResizeDiskResponse = {
  headers: map[string]string(name='headers'),
  body: ResizeDiskResponseBody(name='body'),
}

async function resizeDisk(request: ResizeDiskRequest): ResizeDiskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResizeDisk', 'POST', '/', 'json', false, 'json', request);
}

model RestartDeviceInstanceRequest {
  appId: string(name='AppId', description='App ID', example='f829265e-2f6f-4088-a4be-c1fb95ab45f9', position='Query'),
  instanceId: string(name='InstanceId', description='Instance ID', example='i-5slvdwcxf6ch81nl4r7p04j5q', position='Query'),
}

model RestartDeviceInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='388AA3AE-CE49-5FF4-8CF5-A03D2BBA1C9A'),
}

model RestartDeviceInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RestartDeviceInstanceResponseBody(name='body'),
}

async function restartDeviceInstance(request: RestartDeviceInstanceRequest): RestartDeviceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartDeviceInstance', 'GET', '/', 'json', false, 'json', request);
}

model RevokeSecurityGroupRequest {
  ipProtocol: string(name='IpProtocol', example='all', position='Query'),
  policy?: string(name='Policy', example='accept', position='Query'),
  portRange: string(name='PortRange', example='22/22', position='Query'),
  priority?: int32(name='Priority', example='1', minimum=1, maximum=100, position='Query'),
  securityGroupId: string(name='SecurityGroupId', example='sg-bp67acfmxazb4p****', position='Query'),
  sourceCidrIp: string(name='SourceCidrIp', example='10.0.XX.XX/8', position='Query'),
  sourcePortRange?: string(name='SourcePortRange', example='22/22', position='Query'),
  version: string(name='Version', description='2017-11-10', example='2017-11-10', position='Query'),
}

model RevokeSecurityGroupResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model RevokeSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeSecurityGroupResponseBody(name='body'),
}

async function revokeSecurityGroup(request: RevokeSecurityGroupRequest): RevokeSecurityGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeSecurityGroup', 'POST', '/', 'json', false, 'json', request);
}

model RevokeSecurityGroupEgressRequest {
  destCidrIp: string(name='DestCidrIp', example='10.0.0.0/8', position='Query'),
  ipProtocol: string(name='IpProtocol', example='all', position='Query'),
  policy?: string(name='Policy', example='accept', position='Query'),
  portRange: string(name='PortRange', example='22/22', position='Query'),
  priority?: int32(name='Priority', example='1', minimum=1, maximum=100, position='Query'),
  securityGroupId: string(name='SecurityGroupId', example='sg-bp67acfmxazb4ph***', position='Query'),
  sourcePortRange?: string(name='SourcePortRange', example='22/22', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model RevokeSecurityGroupEgressResponseBody = {
  requestId?: string(name='RequestId', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model RevokeSecurityGroupEgressResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeSecurityGroupEgressResponseBody(name='body'),
}

async function revokeSecurityGroupEgress(request: RevokeSecurityGroupEgressRequest): RevokeSecurityGroupEgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeSecurityGroupEgress', 'POST', '/', 'json', false, 'json', request);
}

model RollbackApplicationRequest {
  appId: string(name='AppId', example='474bdef0-d149-4695-abfb-52912d9143f0', position='Query'),
  fromAppVersion: string(name='FromAppVersion', example='v2-1', position='Query'),
  timeout?: int32(name='Timeout', example='1800', position='Query'),
  toAppVersion?: string(name='ToAppVersion', example='v2', position='Query'),
}

model RollbackApplicationResponseBody = {
  requestId?: string(name='RequestId', example='C0003E8B-B930-4F59-ADC0-0E209A9012A8'),
}

model RollbackApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: RollbackApplicationResponseBody(name='body'),
}

async function rollbackApplication(request: RollbackApplicationRequest): RollbackApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RollbackApplication', 'POST', '/', 'json', false, 'json', request);
}

model RunInstancesRequest {
  amount: long(name='Amount', description='数量', example='1', minimum=1, maximum=100, position='Query'),
  autoRenew?: boolean(name='AutoRenew', description='是否自动续费，默认为false', example='true', position='Query'),
  carrier?: string(name='Carrier', description='运营商', example='telecom', position='Query'),
  dataDisk?: [ 
    {
      category?: string(name='Category', example='cloud_efficiency'),
      size?: long(name='Size', example='20'),
    }
  ](name='DataDisk', description='数据盘规格', shrink='json', position='Query'),
  ensRegionId?: string(name='EnsRegionId', description='节点id', example='cn-foshan-telecom', position='Query'),
  hostName?: string(name='HostName', description='主机名称', example='test-HostName', position='Query'),
  imageId?: string(name='ImageId', description='镜像id', example='m-5si16wo6simkt267p8b7hcmy3', position='Query'),
  instanceChargeType: string(name='InstanceChargeType', description='实例付费方式，PrePaid:预付费，包年包月 PostPaid:按量付费', example='PostPaid', position='Query'),
  instanceName?: string(name='InstanceName', description='实例名称。长度为2~128个字符，必须以大小字母或中文开头，不能以http://和https://开头。可以包含中文、英文、数字、半角冒号（:）、下划线（_）、点号（.）或者连字符（-）。默认值为实例的InstanceId', example='TestName', position='Query'),
  instanceType: string(name='InstanceType', description='实例规格', example='ens.sn1.small', position='Query'),
  internetChargeType?: string(name='InternetChargeType', description='带宽计费方式', example='BandwidthByDay：日峰值带宽 95BandwidthByMonth：月95峰值带宽', position='Query'),
  internetMaxBandwidthOut: long(name='InternetMaxBandwidthOut', description='公网最大带宽，如果参数InternetMaxBandwidthOut的值大于0，则自动为实例分配公网IP。', example='1', position='Query'),
  keyPairName?: string(name='KeyPairName', description='密钥对名称', example='wx2-jumpserver', position='Query'),
  netDistrictCode?: string(name='NetDistrictCode', description='地区code', example='350000', position='Query'),
  netWorkId?: string(name='NetWorkId', description='网络id', example='net-id', position='Query'),
  password?: string(name='Password', description='实例密码', example='testPassword', position='Query'),
  period?: long(name='Period', description='购买资源的时长，单位为：月', example='1-9，12', position='Query'),
  periodUnit?: string(name='PeriodUnit', description='查询云服务器ENS不同计费周期的价格。取值范围：
Month（默认）：按月计费的价格单位。
Day：按天计费的价格单位。', example='Month', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', description='私网ip', example='10.0.0.120', position='Query'),
  publicIpIdentification?: boolean(name='PublicIpIdentification', example='true', position='Query'),
  scheduleAreaLevel: string(name='ScheduleAreaLevel', description='调度层级', example='Region', position='Query'),
  schedulingPriceStrategy?: string(name='SchedulingPriceStrategy', description='调度价格策略', example='PriceHighPriority：优先高价 PriceLowPriority：优先低价', position='Query'),
  schedulingStrategy?: string(name='SchedulingStrategy', description='调度策略', example='concentrate', position='Query'),
  securityId?: string(name='SecurityId', description='安全组id', example='sg-test', position='Query'),
  systemDisk?: {
    size?: long(name='Size', example='50'),
  }(name='SystemDisk', description='系统盘规格', shrink='json', position='Query'),
  uniqueSuffix?: boolean(name='UniqueSuffix', description='是否为HostName和InstanceName添加有序后缀，有序后缀从001开始递增，最大不能超过999', example='True', position='Query'),
  userData?: string(name='UserData', description='用户自定义数据，最大支持16KB 您可传入UserData信息。UserData以Base64的方式编码', example='ZWtest', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='交换机id', example='vsw-5sagnw7m613oulalkd10nv0ob', position='Query'),
}

model RunInstancesResponseBody = {
  instanceIds?: [ string ](name='InstanceIds'),
  orderId?: string(name='OrderId', example='213177957850399'),
  requestId?: string(name='RequestId', example='91E4AFBE-4E35-5D2A-A886-BB477C9953D2'),
}

model RunInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: RunInstancesResponseBody(name='body'),
}

async function runInstances(request: RunInstancesRequest): RunInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunInstances', 'POST', '/', 'json', false, 'json', request);
}

model RunServiceScheduleRequest {
  appId: string(name='AppId', example='474bdef0-d149-4695-abfb-52912d9143f0', position='Query'),
  clientIp: string(name='ClientIp', example='180.166.45.146', position='Query'),
  directorys?: string(name='Directorys', example='[\\"/data/app01\\", \\"/data/user\\"]', position='Query'),
  podConfigName?: string(name='PodConfigName', example='android', position='Query'),
  preLockedTimeout?: int32(name='PreLockedTimeout', example='300', position='Query'),
  scheduleStrategy?: string(name='ScheduleStrategy', example='{\\"selectLevel\\": \\"RegionId\\", \\"values\\": [\\"cn-chengdu-telecom-2\\"]  }', position='Query'),
  serviceAction: string(name='ServiceAction', example='Start', position='Query'),
  serviceCommands?: string(name='ServiceCommands', example='[{\\"containerName\\": \\"android\\",       \\"commands\\":[\\"cat /tmp/token.json\\"]    },    {      \\"commands\\":[\\"ls -l /data/data\\"]    }]', position='Query'),
  uuid: string(name='Uuid', example='hdm_d4f1059a8e1afc0956bd71b497faa433', position='Query'),
}

model RunServiceScheduleResponseBody = {
  commandResults?: {
    commandResult?: [ 
    {
      command?: string(name='Command', example='ls -l /data'),
      containerName?: string(name='ContainerName', example='android'),
      resultMsg?: string(name='ResultMsg', example='success'),
    }
  ](name='CommandResult')
  }(name='CommandResults'),
  index?: int32(name='Index', example='1'),
  instanceId?: string(name='InstanceId', example='i-5qvji3mom4ec013dyygmtxlkj'),
  instanceIp?: string(name='InstanceIp', example='172.16.246.11'),
  instancePort?: int32(name='InstancePort', example='1024'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  requestRepeated?: string(name='RequestRepeated', example='false'),
  tcpPorts?: boolean(name='TcpPorts', example='"80-88"'),
}

model RunServiceScheduleResponse = {
  headers: map[string]string(name='headers'),
  body: RunServiceScheduleResponseBody(name='body'),
}

async function runServiceSchedule(request: RunServiceScheduleRequest): RunServiceScheduleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunServiceSchedule', 'POST', '/', 'json', false, 'json', request);
}

model SetBackendServersRequest {
  backendServers: [ 
    {
      serverId: string(name='ServerId', example='i-5ze0o05xccvbljtn****'),
      type?: string(name='Type', description='后端服务器类型。  ens：ENS实例（默认）', example='ens'),
      weight: int32(name='Weight', description='后端服务器的权重。  取值：0~100  默认值为100，如果值为0，则不会将请求转发给该后端服务器。', example='20', minimum=0, maximum=100),
    }
  ](name='BackendServers', shrink='json', position='Query'),
  loadBalancerId: string(name='LoadBalancerId', example='lb-5s7crik3yo3bp03gqrbp5****', position='Query'),
}

model SetBackendServersResponseBody = {
  backendServers?: {
    backendServer?: [ 
    {
      ip?: string(name='Ip', example='192.168.0.1'),
      port?: int32(name='Port', example='0'),
      serverId?: string(name='ServerId', example='i-5uf6hj58zvml4ali8****'),
      type?: string(name='Type', example='ens'),
      weight?: int32(name='Weight', example='100'),
    }
  ](name='BackendServer')
  }(name='BackendServers'),
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model SetBackendServersResponse = {
  headers: map[string]string(name='headers'),
  body: SetBackendServersResponseBody(name='body'),
}

async function setBackendServers(request: SetBackendServersRequest): SetBackendServersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetBackendServers', 'POST', '/', 'json', false, 'json', request);
}

model SetLoadBalancerHTTPListenerAttributeRequest {
  description?: string(name='Description', description='设置监听的描述信息。  长度限制为1-80个字符，允许包含字母、数字、“-”、“/”、“.”和“_”等字符。支持中文描述。', example='监听说明', minLength=1, maxLength=80, position='Query'),
  healthCheck?: string(name='HealthCheck', description='是否开启健康检查。  取值：on | off。', example='on', position='Query'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='健康检查的后端服务器的端口。  取值： 1~65535。    说明 在HealthCheck值为on时才会有效。', example='65500', minimum=1, maximum=65535, position='Query'),
  healthCheckDomain?: string(name='HealthCheckDomain', description='用于健康检查的域名，取值：  $_ip： 后端服务器的私网IP。当指定了IP或该参数未指定时，负载均衡会使用各后端服务器的私网IP当做健康检查使用的域名。是否要支持？ domain：域名长度为1-80字符，只能包含字母、数字、点号（.）和连字符（-）。   说明 在HealthCheck值为on时才会有效。', example='www.aliyundoc.com', minLength=1, maxLength=80, position='Query'),
  healthCheckHttpCode?: string(name='HealthCheckHttpCode', description='健康检查正常的HTTP状态码，多个状态码用逗号分隔。  默认值为http_2xx。  取值：http_2xx | http_3xx | http_4xx | http_5xx。   说明 在HealthCheck值为on时才会有效。', example='http_2xx', position='Query'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='健康检查的时间间隔。  取值： 1~50（秒）。   说明 在HealthCheck值为on时才会有效。', example='2', minimum=1, maximum=50, position='Query'),
  healthCheckMethod?: string(name='HealthCheckMethod', example='head', position='Query'),
  healthCheckTimeout?: int32(name='HealthCheckTimeout', description='接收来自运行状况检查的响应需要等待的时间。如果后端ECS在指定的时间内没有正确响应，则判定为健康检查失败。在HealthCheck值为on时才会有效。  取值：1~300（秒）。   说明 如果HealthCHeckTimeout的值小于HealthCheckInterval的值，则HealthCHeckTimeout无效，超时时间为HealthCheckInterval的值。', example='5', minimum=1, maximum=300, position='Query'),
  healthCheckURI?: string(name='HealthCheckURI', description='用于健康检查的URI。  长度限制为1~80，只能使用字母、数字和”-/.%?#&amp;“这些字符。 URL不能只为”/“，但必须以”/“开头。    说明 在HealthCheck值为on时才会有效。', example='/checkpreload.htm', minLength=1, maxLength=80, position='Query'),
  healthyThreshold?: int32(name='HealthyThreshold', description='健康检查连续成功多少次后，将后端服务器的健康检查状态由fail判定为success。  取值：2~10。    说明 在HealthCheck值为on时才会有效。', example='3', minimum=2, maximum=10, position='Query'),
  idleTimeout?: int32(name='IdleTimeout', description='指定连接空闲超时时间，取值范围为1~60秒，默认值为15秒。  在超时时间内一直没有访问请求，负载均衡会暂时中断当前连接，直到一下次请求来临时重新建立新的连接。', example='15', minimum=1, maximum=60, position='Query'),
  listenerPort: int32(name='ListenerPort', description='负载均衡实例前端使用的端口。  取值：1-65535。', example='8080', minimum=1, maximum=65535, position='Query'),
  loadBalancerId: string(name='LoadBalancerId', description='负载均衡实例的ID。', example='lb-5snthcyu1x10g7tywj7iu****', position='Query'),
  requestTimeout?: int32(name='RequestTimeout', description='指定请求超时时间，取值范围为1~180秒，默认值为60秒。  在超时时间内后端服务器一直没有响应，负载均衡将放弃等待，给客户端返回 HTTP 504 错误码。', example='60', minimum=1, maximum=180, position='Query'),
  scheduler?: string(name='Scheduler', description='调度算法。取值：  wrr（默认值）：权重值越高的后端服务器，被轮询到的次数（概率）也越高。 wlc：除了根据每台后端服务器设定的权重值来进行轮询，同时还考虑后端服务器的实际负载（即连接数）。当权重值相同时，当前连接数越小的后端服务器被轮询到的次数（概率）也越高。 rr：按照访问顺序依次将外部请求依序分发到后端服务器。', example='wrr', position='Query'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='健康检查连续失败多少次后，将后端服务器的健康检查状态由success判定为fail。  取值：2~10。   说明 在HealthCheck值为on时才会有效。', example='3', minimum=2, maximum=10, position='Query'),
}

model SetLoadBalancerHTTPListenerAttributeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model SetLoadBalancerHTTPListenerAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: SetLoadBalancerHTTPListenerAttributeResponseBody(name='body'),
}

async function setLoadBalancerHTTPListenerAttribute(request: SetLoadBalancerHTTPListenerAttributeRequest): SetLoadBalancerHTTPListenerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetLoadBalancerHTTPListenerAttribute', 'POST', '/', 'json', false, 'json', request);
}

model SetLoadBalancerHTTPSListenerAttributeRequest {
  description?: string(name='Description', description='设置监听的描述信息。  长度限制为1-80个字符，允许包含字母、数字、“-”、“/”、“.”和“_”等字符。支持中文描述。', example='监听说明', minLength=1, maxLength=80, position='Query'),
  healthCheck?: string(name='HealthCheck', description='是否开启健康检查。  取值：on | off。', example='on', position='Query'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='健康检查的后端服务器的端口。  取值： 1~65535。    说明 在HealthCheck值为on时才会有效。', example='7001', minimum=1, maximum=65535, position='Query'),
  healthCheckDomain?: string(name='HealthCheckDomain', description='用于健康检查的域名，取值：  $_ip： 后端服务器的私网IP。当指定了IP或该参数未指定时，负载均衡会使用各后端服务器的私网IP当做健康检查使用的域名。是否要支持？ domain：域名长度为1-80字符，只能包含字母、数字、点号（.）和连字符（-）。   说明 在HealthCheck值为on时才会有效。', example='www.example.com', minLength=1, maxLength=80, position='Query'),
  healthCheckHttpCode?: string(name='HealthCheckHttpCode', description='健康检查正常的HTTP状态码，多个状态码用逗号分隔。  默认值为http_2xx。  取值：http_2xx | http_3xx | http_4xx | http_5xx。   说明 在HealthCheck值为on时才会有效。', example='http_2xx', position='Query'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='健康检查的时间间隔。  取值： 1~50（秒）。   说明 在HealthCheck值为on时才会有效。', example='2', minimum=1, maximum=50, position='Query'),
  healthCheckMethod?: string(name='HealthCheckMethod', example='get', position='Query'),
  healthCheckTimeout?: int32(name='HealthCheckTimeout', description='接收来自运行状况检查的响应需要等待的时间。如果后端ECS在指定的时间内没有正确响应，则判定为健康检查失败。在HealthCheck值为on时才会有效。  取值：1~300（秒）。   说明 如果HealthCHeckTimeout的值小于HealthCheckInterval的值，则HealthCHeckTimeout无效，超时时间为HealthCheckInterval的值。', example='9', minimum=1, maximum=300, position='Query'),
  healthCheckURI?: string(name='HealthCheckURI', description='用于健康检查的URI。  长度限制为1~80，只能使用字母、数字和”-/.%?#&amp;“这些字符。 URL不能只为”/“，但必须以”/“开头。    说明 在HealthCheck值为on时才会有效。', example='/checkpreload.htm', minLength=1, maxLength=80, position='Query'),
  healthyThreshold?: int32(name='HealthyThreshold', description='健康检查连续成功多少次后，将后端服务器的健康检查状态由fail判定为success。  取值：2~10。    说明 在HealthCheck值为on时才会有效。', example='3', minimum=2, maximum=10, position='Query'),
  idleTimeout?: int32(name='IdleTimeout', description='指定连接空闲超时时间，取值范围为1~60秒，默认值为15秒。  在超时时间内一直没有访问请求，负载均衡会暂时中断当前连接，直到一下次请求来临时重新建立新的连接。', example='15', minimum=1, maximum=60, position='Query'),
  listenerPort: int32(name='ListenerPort', description='负载均衡实例前端使用的端口。  取值：1-65535。', example='10002', minimum=1, maximum=65535, position='Query'),
  loadBalancerId: string(name='LoadBalancerId', description='负载均衡实例的ID。', example='lb-5snthcyu1x10g7tywj7iu****', position='Query'),
  requestTimeout?: int32(name='RequestTimeout', description='指定请求超时时间，取值范围为1~180秒，默认值为60秒。  在超时时间内后端服务器一直没有响应，负载均衡将放弃等待，给客户端返回 HTTP 504 错误码。', example='60', minimum=1, maximum=180, position='Query'),
  scheduler?: string(name='Scheduler', description='调度算法。取值：  wrr（默认值）：权重值越高的后端服务器，被轮询到的次数（概率）也越高。 wlc：除了根据每台后端服务器设定的权重值来进行轮询，同时还考虑后端服务器的实际负载（即连接数）。当权重值相同时，当前连接数越小的后端服务器被轮询到的次数（概率）也越高。 rr：按照访问顺序依次将外部请求依序分发到后端服务器。', example='wrr', position='Query'),
  serverCertificateId?: string(name='ServerCertificateId', description='服务器证书的ID。', example='6027667', position='Query'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='健康检查连续失败多少次后，将后端服务器的健康检查状态由success判定为fail。  取值：2~10。   说明 在HealthCheck值为on时才会有效。', example='3', minimum=2, maximum=10, position='Query'),
}

model SetLoadBalancerHTTPSListenerAttributeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model SetLoadBalancerHTTPSListenerAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: SetLoadBalancerHTTPSListenerAttributeResponseBody(name='body'),
}

async function setLoadBalancerHTTPSListenerAttribute(request: SetLoadBalancerHTTPSListenerAttributeRequest): SetLoadBalancerHTTPSListenerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetLoadBalancerHTTPSListenerAttribute', 'POST', '/', 'json', false, 'json', request);
}

model SetLoadBalancerStatusRequest {
  loadBalancerId: string(name='LoadBalancerId', example='lb-5t18quoohsrc3xkf86spmnu77', position='Query'),
  loadBalancerStatus: string(name='LoadBalancerStatus', example='Active', position='Query'),
}

model SetLoadBalancerStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model SetLoadBalancerStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SetLoadBalancerStatusResponseBody(name='body'),
}

async function setLoadBalancerStatus(request: SetLoadBalancerStatusRequest): SetLoadBalancerStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetLoadBalancerStatus', 'POST', '/', 'json', false, 'json', request);
}

model SetLoadBalancerTCPListenerAttributeRequest {
  description?: string(name='Description', description='设置监听的描述信息。  长度限制为1-80个字符，允许包含字母、数字、“-”、“/”、“.”和“_”等字符。支持中文描述。', example='example', minLength=1, maxLength=80, position='Query'),
  eipTransmit?: string(name='EipTransmit', example='on', position='Query'),
  establishedTimeout?: int32(name='EstablishedTimeout', description='连接超时时间。  取值：10~900（秒）。', example='500', minimum=10, maximum=900, position='Query'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='健康检查使用的端口。  取值：1~65535。  不设置此参数时，表示使用后端服务端口（BackendServerPort）。', example='8000', minimum=1, maximum=65535, position='Query'),
  healthCheckConnectTimeout?: int32(name='HealthCheckConnectTimeout', description='每次健康检查响应的最大超时时间。  取值：1~300（秒）。  默认值：5。', example='100', minimum=1, maximum=300, position='Query'),
  healthCheckDomain?: string(name='HealthCheckDomain', description='用于健康检查的域名', example='www.aliyundoc.com', minLength=1, maxLength=80, position='Query'),
  healthCheckHttpCode?: string(name='HealthCheckHttpCode', description='健康检查正常的HTTP状态码，多个状态码用逗号（,）分割。  取值：http_2xx（默认值） | http_3xx | http_4xx | http_5xx。', example='http_2xx', position='Query'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='健康检查的时间间隔。  取值：1~50（秒）。', example='5', minimum=1, maximum=50, position='Query'),
  healthCheckType?: string(name='HealthCheckType', description='健康检查类型。  取值：tcp（默认值） | http。', example='tcp', position='Query'),
  healthCheckURI?: string(name='HealthCheckURI', description='用于健康检查的URI。长度限制为1~80，只能使用字母、数字、短横线（-）、正斜杠（/）、点号（.）、百分号（%）、#和&amp;这些字符。 URL不能只为/，但必须以/开头。  当TCP监听需要使用HTTP健康检查时可配置此参数，如不配置则按TCP健康检查。', example='/aliyundoc/index.html', minLength=1, maxLength=80, position='Query'),
  healthyThreshold?: int32(name='HealthyThreshold', description='健康检查连续成功多少次后，将后端服务器的健康检查状态由fail判定为success。  取值： 2~10。', example='4', minimum=2, maximum=10, position='Query'),
  listenerPort: int32(name='ListenerPort', description='负载均衡实例前端使用的端口。  取值：1-65535。', example='80', minimum=1, maximum=65535, position='Query'),
  loadBalancerId: string(name='LoadBalancerId', description='负载均衡实例的ID。', example='lb-5snthcyu1x10g7tywj7iu****', position='Query'),
  persistenceTimeout?: int32(name='PersistenceTimeout', description='会话保持的超时时间。  取值：0~3600（秒）。  默认值：0，表示关闭会话保持。', example='0', minimum=0, maximum=3600, position='Query'),
  scheduler?: string(name='Scheduler', description='度算法。取值：  wrr（默认值）：权重值越高的后端服务器，被轮询到的次数（概率）也越高。 wlc：除了根据每台后端服务器设定的权重值来进行轮询，同时还考虑后端服务器的实际负载（即连接数）。当权重值相同时，当前连接数越小的后端服务器被轮询到的次数（概率）也越高。 rr：按照访问顺序依次将外部请求依序分发到后端服务器。 sch：基于源IP地址的一致性hash，相同的源地址会调度到相同的后端服务器。', example='wrr', position='Query'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='健康检查连续失败多少次后，将后端服务器的健康检查状态由success判定为fail。  取值：2~10。', example='4', minimum=2, maximum=10, position='Query'),
}

model SetLoadBalancerTCPListenerAttributeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='06F00FBB-3D9E-4CCE-9D43-1A6946A75456'),
}

model SetLoadBalancerTCPListenerAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: SetLoadBalancerTCPListenerAttributeResponseBody(name='body'),
}

async function setLoadBalancerTCPListenerAttribute(request: SetLoadBalancerTCPListenerAttributeRequest): SetLoadBalancerTCPListenerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetLoadBalancerTCPListenerAttribute', 'POST', '/', 'json', false, 'json', request);
}

model SetLoadBalancerUDPListenerAttributeRequest {
  description?: string(name='Description', description='设置监听的描述信息。  长度限制为1-80个字符，允许包含字母、数字、“-”、“/”、“.”和“_”等字符。支持中文描述。', example='example', minLength=1, maxLength=80, position='Query'),
  eipTransmit?: string(name='EipTransmit', example='on', position='Query'),
  healthCheckConnectPort?: int32(name='HealthCheckConnectPort', description='健康检查使用的端口。取值：1-65535  不设置此参数时，表示使用后端服务端口（BackendServerPort）', example='8080', minimum=1, maximum=65535, position='Query'),
  healthCheckConnectTimeout?: int32(name='HealthCheckConnectTimeout', description='接收来自运行状况检查的响应需要等待的时间。  如果后端ENS在指定的时间内没有正确响应，则判定为健康检查失败。  取值：1-300（秒）。默认为5秒', example='100', minimum=1, maximum=300, position='Query'),
  healthCheckExp?: string(name='HealthCheckExp', description='UDP监听健康检查的响应串，只允许包含字母、数字，最大长度限制为64个字符。', example='ok', maxLength=64, position='Query'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='健康检查的时间间隔。  取值：1-50（秒）。', example='5', minimum=1, maximum=50, position='Query'),
  healthCheckReq?: string(name='HealthCheckReq', description='UDP监听健康检查的请求串，只允许包含字母、数字，最大长度限制为64个字符。', example='hello', maxLength=64, position='Query'),
  healthyThreshold?: int32(name='HealthyThreshold', description='健康检查连续成功多少次后，将后端服务器的健康检查状态由fail判定为success。  取值：2-10。', example='4', minimum=2, maximum=10, position='Query'),
  listenerPort: int32(name='ListenerPort', description='负载均衡实例前端使用的端口。  取值：1-65535。', example='80', minimum=1, maximum=65535, position='Query'),
  loadBalancerId: string(name='LoadBalancerId', description='负载均衡实例的ID。', example='lb-5pzipr2fszqtl2xf64uy5****', position='Query'),
  scheduler?: string(name='Scheduler', description='调度算法。取值：  wrr（默认值）：权重值越高的后端服务器，被轮询到的次数（概率）也越高。 wlc：除了根据每台后端服务器设定的权重值来进行轮询，同时还考虑后端服务器的实际负载（即连接数）。当权重值相同时，当前连接数越小的后端服务器被轮询到的次数（概率）也越高。 rr：按照访问顺序依次将外部请求依序分发到后端服务器。 sch：基于源IP地址的一致性hash，相同的源地址会调度到相同的后端服务器。', example='wrr', position='Query'),
  unhealthyThreshold?: int32(name='UnhealthyThreshold', description='健康检查连续失败多少次后，将后端服务器的健康检查状态由success判定为fail。  取值：2-10。', example='4', minimum=2, maximum=10, position='Query'),
}

model SetLoadBalancerUDPListenerAttributeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='06F00FBB-3D9E-4CCE-9D43-1A6946A75456'),
}

model SetLoadBalancerUDPListenerAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: SetLoadBalancerUDPListenerAttributeResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function setLoadBalancerUDPListenerAttribute(request: SetLoadBalancerUDPListenerAttributeRequest): SetLoadBalancerUDPListenerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetLoadBalancerUDPListenerAttribute', 'POST', '/', 'json', false, 'json', request);
}

model StartEpnInstanceRequest {
  EPNInstanceId: string(name='EPNInstanceId', example='epn-****', position='Query'),
}

model StartEpnInstanceResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model StartEpnInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StartEpnInstanceResponseBody(name='body'),
}

async function startEpnInstance(request: StartEpnInstanceRequest): StartEpnInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartEpnInstance', 'POST', '/', 'json', false, 'json', request);
}

model StartInstanceRequest {
  instanceId: string(name='InstanceId', example='i-instance****', position='Query'),
}

model StartInstanceResponseBody = {
  code?: int32(name='Code', example='0'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model StartInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StartInstanceResponseBody(name='body'),
}

async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartInstance', 'POST', '/', 'json', false, 'json', request);
}

model StartInstancesRequest {
  instanceIds?: [ string ](name='InstanceIds', shrink='simple', position='Query'),
}

model StartInstancesResponseBody = {
  instanceResponses?: [
    InstanceOperateResponse
  ](name='InstanceResponses'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StartInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: StartInstancesResponseBody(name='body'),
}

async function startInstances(request: StartInstancesRequest): StartInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartInstances', 'POST', '/', 'json', false, 'json', request);
}

model StartLoadBalancerListenerRequest {
  listenerPort: int32(name='ListenerPort', example='8080', minimum=0, maximum=65535, position='Query'),
  listenerProtocol?: string(name='ListenerProtocol', example='tcp', position='Query'),
  loadBalancerId: string(name='LoadBalancerId', example='lb-5saivuir6b1mupxjfbhmk****', position='Query'),
}

model StartLoadBalancerListenerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model StartLoadBalancerListenerResponse = {
  headers: map[string]string(name='headers'),
  body: StartLoadBalancerListenerResponseBody(name='body'),
}

async function startLoadBalancerListener(request: StartLoadBalancerListenerRequest): StartLoadBalancerListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartLoadBalancerListener', 'POST', '/', 'json', false, 'json', request);
}

model StopEpnInstanceRequest {
  EPNInstanceId: string(name='EPNInstanceId', example='epn-20201014152822q2S9tQ', position='Query'),
}

model StopEpnInstanceResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model StopEpnInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StopEpnInstanceResponseBody(name='body'),
}

async function stopEpnInstance(request: StopEpnInstanceRequest): StopEpnInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopEpnInstance', 'POST', '/', 'json', false, 'json', request);
}

model StopInstanceRequest {
  forceStop?: string(name='ForceStop', example='true', position='Query'),
  instanceId: string(name='InstanceId', example='i-instanceid****', position='Query'),
  version: string(name='Version', example='2017-11-10', position='Query'),
}

model StopInstanceResponseBody = {
  code?: int32(name='Code', example='0'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model StopInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StopInstanceResponseBody(name='body'),
}

async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopInstance', 'POST', '/', 'json', false, 'json', request);
}

model StopInstancesRequest {
  instanceIds?: [ string ](name='InstanceIds', shrink='simple', position='Query'),
}

model StopInstancesResponseBody = {
  instanceResponses?: [
    InstanceOperateResponse
  ](name='InstanceResponses'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StopInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: StopInstancesResponseBody(name='body'),
}

async function stopInstances(request: StopInstancesRequest): StopInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopInstances', 'POST', '/', 'json', false, 'json', request);
}

model StopLoadBalancerListenerRequest {
  listenerPort: int32(name='ListenerPort', example='8080', minimum=0, maximum=65535, position='Query'),
  listenerProtocol?: string(name='ListenerProtocol', example='tcp', position='Query'),
  loadBalancerId: string(name='LoadBalancerId', example='lb-5sc1s9zrui8lpb8u7cl4f****', position='Query'),
}

model StopLoadBalancerListenerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model StopLoadBalancerListenerResponse = {
  headers: map[string]string(name='headers'),
  body: StopLoadBalancerListenerResponseBody(name='body'),
}

async function stopLoadBalancerListener(request: StopLoadBalancerListenerRequest): StopLoadBalancerListenerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopLoadBalancerListener', 'POST', '/', 'json', false, 'json', request);
}

model UnAssociateEnsEipAddressRequest {
  allocationId: string(name='AllocationId', example='eip-5sqa431nx3vee8heqxfxp4e4r', position='Query'),
}

model UnAssociateEnsEipAddressResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='4A431388-2D4B-46F4-A96B-D4E6BD0688C1'),
}

model UnAssociateEnsEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: UnAssociateEnsEipAddressResponseBody(name='body'),
}

async function unAssociateEnsEipAddress(request: UnAssociateEnsEipAddressRequest): UnAssociateEnsEipAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnAssociateEnsEipAddress', 'POST', '/', 'json', false, 'json', request);
}

model UnassignPrivateIpAddressesRequest {
  networkInterfaceId: string(name='NetworkInterfaceId', example='eni-f8z57orgmt6d144t20dw', position='Query'),
  privateIpAddress: [ string ](name='PrivateIpAddress', position='Query'),
}

model UnassignPrivateIpAddressesResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='1ECC937A-AE0E-4626-BE51-DED1D6D1C888'),
}

model UnassignPrivateIpAddressesResponse = {
  headers: map[string]string(name='headers'),
  body: UnassignPrivateIpAddressesResponseBody(name='body'),
}

async function unassignPrivateIpAddresses(request: UnassignPrivateIpAddressesRequest): UnassignPrivateIpAddressesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassignPrivateIpAddresses', 'POST', '/', 'json', false, 'json', request);
}

model UnassociateNetworkAclRequest {
  networkAclId: string(name='NetworkAclId', example='nacl-a2do9e413e0sp****', position='Query'),
  resource: [ 
    {
      resourceId: string(name='ResourceId', example='n-5***'),
      resourceType: string(name='ResourceType', example='Network'),
    }
  ](name='Resource', position='Query'),
}

model UnassociateNetworkAclResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model UnassociateNetworkAclResponse = {
  headers: map[string]string(name='headers'),
  body: UnassociateNetworkAclResponseBody(name='body'),
}

async function unassociateNetworkAcl(request: UnassociateNetworkAclRequest): UnassociateNetworkAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassociateNetworkAcl', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeAICInstanceImageRequest {
  imageId?: string(name='ImageId', example='m-****', position='Query'),
  serverIds?: [ string ](name='ServerIds', shrink='json', position='Query'),
  timeout?: int32(name='Timeout', example='1800', position='Query'),
}

model UpgradeAICInstanceImageResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model UpgradeAICInstanceImageResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeAICInstanceImageResponseBody(name='body'),
}

async function upgradeAICInstanceImage(request: UpgradeAICInstanceImageRequest): UpgradeAICInstanceImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeAICInstanceImage', 'GET', '/', 'json', false, 'json', request);
}

model UpgradeApplicationRequest {
  appId: string(name='AppId', example='a2bac6f4-75dc-455e-8389-2dc8e47526d3', position='Query'),
  template: string(name='Template', example='{\\"fromAppVersions\\":{        \\"operator\\":\\"In\\",        \\"values\\":[            \\"v1\\",            \\"v2\\"        ]    },    \\"toAppVersion\\":\\"v3\\",    \\"descrip\\":\\"xxx\\",    \\"workload\\":[        {            \\"name\\":\\"nginx\\",            \\"podSpec\\":{            }        }    ],    \\"upgradeStrategy\\":{        \\"name\\":\\"ScheduleToISP\\",        \\"parameters\\":{            \\"operator\\":\\"In\\",            \\"values\\":[                \\"telecom\\"            ]        }    },    \\"autoUpgradeStrategy\\":{        \\"name\\":\\"AdjustToPodUsage\\",        \\"checkInterval\\":600,        \\"startTime\\":\\"2021-02-19 00:00:00\\",        \\"startHourPoint\\":\\"0\\",        \\"endHourPoint\\":\\"8\\",        \\"endTime\\":\\"2021-02-19 08:00:00\\",        \\"level\\":\\"RegionId\\",        \\"rules\\":[            {                \\"regionCodes\\":[                    \\"cn-wuxi-telecom_unicom_cmcc\\",                    \\"cn-shijiazhuang-telecom_unicom_cmcc\\"                ],                \\"usageRatioLimit\\":{                    \\"maxPodUsageRatio\\":50                },                \\"maxUpgradingRatio\\":50            },            {                \\"regionCodes\\":[                    \\"cn-wuhan-telecom_unicom_cmcc\\"                ],                \\"usageRatioLimit\\":{                    \\"maxPodUsageRatio\\":30                },                \\"maxUpgradingRatio\\":20            },            {                \\"regionCodes\\":[                    \\"All\\"                ],                \\"usageRatioLimit\\":{                    \\"maxPodUsageRatio\\":20                },                \\"maxUpgradingRatio\\":50,                \\"maxUpgradingCount\\":2            }        ]    }}', position='Query'),
  timeout?: int32(name='Timeout', example='1800', position='Query'),
}

model UpgradeApplicationResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model UpgradeApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeApplicationResponseBody(name='body'),
}

async function upgradeApplication(request: UpgradeApplicationRequest): UpgradeApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeApplication', 'POST', '/', 'json', false, 'json', request);
}

