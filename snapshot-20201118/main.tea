/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('snapshot', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model GetSnapshotBlockRequest {
  clientToken?: string(name='ClientToken', description='幂等参数'),
  blockIndex?: string(name='BlockIndex', description='待读取的数据块索引，从零开始。从 ListChangedBlocks 或者 ListSnapshotBlocks 返回'),
  blockToken?: string(name='BlockToken', description='待读取的数据块Token，从零开始。从 ListChangedBlocks 或者 ListSnapshotBlocks 返回'),
  snapshotId?: string(name='SnapshotId', description='待读取数据的快照名称'),
}

model GetSnapshotBlockResponse = {
  headers: map[string]string(name='headers'),
  body: readable(name='body'),
}

async function getSnapshotBlock(request: GetSnapshotBlockRequest): GetSnapshotBlockResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getSnapshotBlockWithOptions(request, headers, runtime);
}

async function getSnapshotBlockWithOptions(request: GetSnapshotBlockRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSnapshotBlockResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    query.ClientToken = request.clientToken;
  }
  if (!Util.isUnset(request.blockIndex)) {
    query.BlockIndex = request.blockIndex;
  }
  if (!Util.isUnset(request.blockToken)) {
    query.BlockToken = request.blockToken;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query.SnapshotId = request.snapshotId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var res = new GetSnapshotBlockResponse{};
  var tmp = doROARequest('GetSnapshotBlock', '2020-11-18', 'HTTPS', 'GET', 'AK', `/snapshots/block`, 'binary', req, runtime);
  if (!Util.isUnset(tmp.body)) {
    var respBody = Util.assertAsReadable(tmp.body);
    res.body = respBody;
  }
  if (!Util.isUnset(tmp.headers)) {
    var respHeaders = Util.assertAsMap(tmp.headers);
    res.headers = Util.stringifyMapValue(respHeaders);
  }
  return res;
}

model ListChangedBlocksRequest {
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
  clientToken?: string(name='ClientToken'),
  firstSnapshotId?: string(name='FirstSnapshotId'),
  secondSnapshotId?: string(name='SecondSnapshotId'),
  startingBlockIndex?: long(name='StartingBlockIndex'),
}

model ListChangedBlocksResponseBody = {
  nextToken?: string(name='NextToken'),
  expiryTime?: long(name='ExpiryTime'),
  blockSize?: int32(name='BlockSize'),
  volumeSize?: int32(name='VolumeSize'),
  changedBlocks?: [ 
    {
      firstBlockToken?: string(name='FirstBlockToken'),
      blockIndex?: long(name='BlockIndex'),
      secondBlockToken?: string(name='SecondBlockToken'),
    }
  ](name='ChangedBlocks'),
}

model ListChangedBlocksResponse = {
  headers: map[string]string(name='headers'),
  body: ListChangedBlocksResponseBody(name='body'),
}

async function listChangedBlocks(request: ListChangedBlocksRequest): ListChangedBlocksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listChangedBlocksWithOptions(request, headers, runtime);
}

async function listChangedBlocksWithOptions(request: ListChangedBlocksRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListChangedBlocksResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.nextToken)) {
    query.NextToken = request.nextToken;
  }
  if (!Util.isUnset(request.maxResults)) {
    query.MaxResults = request.maxResults;
  }
  if (!Util.isUnset(request.clientToken)) {
    query.ClientToken = request.clientToken;
  }
  if (!Util.isUnset(request.firstSnapshotId)) {
    query.FirstSnapshotId = request.firstSnapshotId;
  }
  if (!Util.isUnset(request.secondSnapshotId)) {
    query.SecondSnapshotId = request.secondSnapshotId;
  }
  if (!Util.isUnset(request.startingBlockIndex)) {
    query.StartingBlockIndex = request.startingBlockIndex;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListChangedBlocks', '2020-11-18', 'HTTPS', 'GET', 'AK', `/snapshots/changedblocks`, 'json', req, runtime);
}

model ListSnapshotBlocksRequest {
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
  clientToken?: string(name='ClientToken'),
  snapshotId?: string(name='SnapshotId'),
  startingBlockIndex?: long(name='StartingBlockIndex'),
}

model ListSnapshotBlocksResponseBody = {
  nextToken?: string(name='NextToken'),
  expiryTime?: long(name='ExpiryTime'),
  blockSize?: int32(name='BlockSize'),
  volumeSize?: int32(name='VolumeSize'),
  blocks?: [ 
    {
      blockIndex?: long(name='BlockIndex'),
      blockToken?: string(name='BlockToken'),
    }
  ](name='Blocks'),
}

model ListSnapshotBlocksResponse = {
  headers: map[string]string(name='headers'),
  body: ListSnapshotBlocksResponseBody(name='body'),
}

async function listSnapshotBlocks(request: ListSnapshotBlocksRequest): ListSnapshotBlocksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSnapshotBlocksWithOptions(request, headers, runtime);
}

async function listSnapshotBlocksWithOptions(request: ListSnapshotBlocksRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSnapshotBlocksResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.nextToken)) {
    query.NextToken = request.nextToken;
  }
  if (!Util.isUnset(request.maxResults)) {
    query.MaxResults = request.maxResults;
  }
  if (!Util.isUnset(request.clientToken)) {
    query.ClientToken = request.clientToken;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query.SnapshotId = request.snapshotId;
  }
  if (!Util.isUnset(request.startingBlockIndex)) {
    query.StartingBlockIndex = request.startingBlockIndex;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('ListSnapshotBlocks', '2020-11-18', 'HTTPS', 'GET', 'AK', `/snapshots/listblocks`, 'json', req, runtime);
}

