/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'avatar';
  @version = '2022-01-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CancelVideoTaskRequest {
  app: {
    appId: string(name='AppId', example='12131231'),
  }(name='App', shrink='json', position='Query'),
  taskUuid: string(name='TaskUuid', example='xxxx-xxxx-xxxx', position='Query'),
  tenantId: long(name='TenantId', example='xxxxx', position='Query'),
}

model CancelVideoTaskResponseBody = {
  code?: string(name='Code', description='Id of the request', example='502'),
  data?: {
    failReason?: string(name='FailReason'),
    isCancel?: boolean(name='IsCancel', example='true'),
    taskUuid?: string(name='TaskUuid', example='xxxx-xxxx-xxxx'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='xxxx-xxxx-xxxx'),
  success?: boolean(name='Success', example='true'),
}

model CancelVideoTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CancelVideoTaskResponseBody(name='body'),
}

async function cancelVideoTask(request: CancelVideoTaskRequest): CancelVideoTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelVideoTask', 'POST', '/', 'json', false, 'json', request);
}

model CloseTimedResetOperateRequest {
  instanceId: string(name='InstanceId', example='avatar_operation_public_cn-7pp2****802', position='Query'),
  tenantId: long(name='TenantId', example='xxxxx', position='Query'),
}

model CloseTimedResetOperateResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    instanceId?: string(name='InstanceId', example='avatar_operation_public_cn-7pp2****802'),
    tenantId?: long(name='TenantId', example='xxxxx'),
  }(name='Data'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', description='Id of the request', example='4C8BF3A5-948F-1F89-AACD-D18DEF52D1XX'),
  success?: boolean(name='Success', example='true'),
}

model CloseTimedResetOperateResponse = {
  headers: map[string]string(name='headers'),
  body: CloseTimedResetOperateResponseBody(name='body'),
}

async function closeTimedResetOperate(request: CloseTimedResetOperateRequest): CloseTimedResetOperateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloseTimedResetOperate', 'POST', '/', 'json', false, 'json', request);
}

model DuplexDecisionRequest {
  appId: string(name='AppId', example='12131231', position='Query'),
  bizRequestId: string(name='BizRequestId', example='xxxxxxxxxx', position='Query'),
  callTime: int32(name='CallTime', example='1', position='Query'),
  customKeywords?: [ string ](name='CustomKeywords', shrink='json', position='Query'),
  dialogContext?: {
    curUtteranceIdx?: int32(name='CurUtteranceIdx', example='1'),
    histories?: [ 
      {
        robot?: string(name='Robot'),
        user?: string(name='User'),
      }
    ](name='Histories'),
  }(name='DialogContext', shrink='json', position='Query'),
  dialogStatus: string(name='DialogStatus', example='ROBOTTALK', position='Query'),
  interruptType?: int32(name='InterruptType', example='1', position='Query'),
  sessionId: string(name='SessionId', example='xxxxxxxxxx', position='Query'),
  tenantId: long(name='TenantId', example='xxxxx', position='Query'),
  text: string(name='Text', position='Query'),
}

model DuplexDecisionResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    actionType?: string(name='ActionType', example='UNDERTAKE'),
    grabType?: string(name='GrabType', example='GRAB'),
    outputText?: string(name='OutputText'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
  success?: string(name='Success', example='true'),
}

model DuplexDecisionResponse = {
  headers: map[string]string(name='headers'),
  body: DuplexDecisionResponseBody(name='body'),
}

async function duplexDecision(request: DuplexDecisionRequest): DuplexDecisionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DuplexDecision', 'POST', '/', 'json', false, 'json', request);
}

model GetVideoTaskInfoRequest {
  app: {
    appId: string(name='AppId', example='12131231'),
  }(name='App', shrink='json', position='Query'),
  taskUuid: string(name='TaskUuid', example='xxxx-xxxx-xxx', position='Query'),
  tenantId: long(name='TenantId', example='xxxxxx', position='Query'),
}

model GetVideoTaskInfoResponseBody = {
  code?: string(name='Code', example='502'),
  data?: {
    process?: string(name='Process', example='99'),
    status?: string(name='Status', example='1'),
    taskResult?: {
      failCode?: string(name='FailCode'),
      failReason?: string(name='FailReason'),
      subtitlesUrl?: string(name='SubtitlesUrl', example='xxx/xxx/xxx.ass'),
      videoUrl?: string(name='VideoUrl', example='xxx/xxxx/xx.mp4'),
      wordSubtitlesUrl?: string(name='WordSubtitlesUrl'),
    }(name='TaskResult'),
    taskUuid?: string(name='TaskUuid', example='xxxx-xxx-xx-xx'),
    type?: string(name='Type', example='1'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='xxx-xxx-xxx-xx'),
  success?: boolean(name='Success', example='true'),
}

model GetVideoTaskInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetVideoTaskInfoResponseBody(name='body'),
}

async function getVideoTaskInfo(request: GetVideoTaskInfoRequest): GetVideoTaskInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVideoTaskInfo', 'GET', '/', 'json', false, 'json', request);
}

model LicenseAuthRequest {
  appId: string(name='AppId', example='dsdsf1', position='Query'),
  license: string(name='License', example='FqTyXFrIqbIGnb_oqIvszv1wffODnpCDNDvOc6xNXbAhak1AwsfrCo2cSrPFAhHEitOb9VEG', position='Query'),
  tenantId: long(name='TenantId', example='9185', position='Query'),
}

model LicenseAuthResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    token?: string(name='Token', example='vHOgG+IbVrm0QXTzVB/O4GJJLEAWr67gl7NGWowHjioMKIh2yc9PNu21S7t8mjuVo3Z'),
  }(name='Data'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', description='Id of the request', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
  success?: boolean(name='Success', example='true'),
}

model LicenseAuthResponse = {
  headers: map[string]string(name='headers'),
  body: LicenseAuthResponseBody(name='body'),
}

async function licenseAuth(request: LicenseAuthRequest): LicenseAuthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LicenseAuth', 'POST', '/', 'json', false, 'json', request);
}

model QueryRunningInstanceRequest {
  app: {
    appId: string(name='AppId', example='ALIPUB5748B17121450'),
  }(name='App', shrink='json', position='Query'),
  sessionId?: string(name='SessionId', example='76898bd3b90b4a65b1c078d8824a2e9c', position='Query'),
  tenantId: long(name='TenantId', example='9185', position='Query'),
}

model QueryRunningInstanceResponseBody = {
  code?: string(name='Code', description='Id of the request', example='0'),
  data?: [ 
    {
      channel?: {
        appId?: string(name='AppId', example='ONEX7E28C7C221854'),
        channelId?: string(name='ChannelId', example='108293819'),
        expiredTime?: string(name='ExpiredTime', example='2022-01-04T16:00Z'),
        gslb?: [ string ](name='Gslb'),
        nonce?: string(name='Nonce', example='CK-9b5c335b9ae75879441ee7b363886418'),
        token?: string(name='Token', example='e59f61b2482b4d0562ab542da3f824f7'),
        type?: string(name='Type', example='6'),
        userId?: string(name='UserId', example='userId'),
        userInfoInChannel?: string(name='UserInfoInChannel'),
      }(name='Channel'),
      sessionId?: string(name='SessionId', example='4f63f9e9788449f9adc88d9438c8dec3'),
      user?: {
        userId?: string(name='UserId', example='23423'),
        userName?: string(name='UserName'),
      }(name='User'),
    }
  ](name='Data'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
  success?: boolean(name='Success', example='True'),
}

model QueryRunningInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRunningInstanceResponseBody(name='body'),
}

async function queryRunningInstance(request: QueryRunningInstanceRequest): QueryRunningInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRunningInstance', 'POST', '/', 'json', false, 'json', request);
}

model QueryTimedResetOperateStatusRequest {
  instanceId: string(name='InstanceId', example='avatar_operation_public_cn-7pp2****802', position='Query'),
  tenantId: long(name='TenantId', example='xxxxx', position='Query'),
}

model QueryTimedResetOperateStatusResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    instanceId?: string(name='InstanceId', example='avatar_operation_public_cn-7pp2****802'),
    status?: long(name='Status', example='10'),
    statusStr?: string(name='StatusStr'),
    tenantId?: string(name='TenantId', example='xxxxx'),
  }(name='Data'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', description='Id of the request', example='74d42913-f13c-47ac-a8ac-8610685688eb'),
  success?: boolean(name='Success', example='true'),
}

model QueryTimedResetOperateStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTimedResetOperateStatusResponseBody(name='body'),
}

async function queryTimedResetOperateStatus(request: QueryTimedResetOperateStatusRequest): QueryTimedResetOperateStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTimedResetOperateStatus', 'POST', '/', 'json', false, 'json', request);
}

model SendMessageRequest {
  sessionId?: string(name='SessionId', example='76898bd3b90b4a65b1c078d8824a2e9c', position='Query'),
  tenantId?: long(name='TenantId', example='5615', position='Query'),
  textRequest?: {
    commandType?: string(name='CommandType'),
    id?: string(name='Id', example='0000001000586737'),
    speechText?: string(name='SpeechText'),
    interrupt?: boolean(name='interrupt', example='false'),
  }(name='TextRequest', shrink='json', position='Query'),
  VAMLRequest?: {
    code?: string(name='Code', example='VAML_REQUEST'),
    vaml?: string(name='Vaml'),
  }(name='VAMLRequest', shrink='json', position='Query'),
}

model SendMessageResponseBody = {
  code?: string(name='Code', description='Id of the request', example='QUERY_ACCOUNT_INFO_ERROR'),
  data?: {
    requestId?: string(name='RequestId', example='0A466686-8F3A-55A6-93D8-A0225DC965C0'),
    sessionId?: string(name='SessionId', example='9929391f61ef9e1c0000000000000006'),
  }(name='Data'),
  message?: string(name='Message', example='operation success.'),
  success?: boolean(name='Success', example='True'),
}

model SendMessageResponse = {
  headers: map[string]string(name='headers'),
  body: SendMessageResponseBody(name='body'),
}

async function sendMessage(request: SendMessageRequest): SendMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendMessage', 'POST', '/', 'json', false, 'json', request);
}

model StartInstanceRequest {
  app?: {
    appId?: string(name='AppId', example='ALIPUB5748B17121450'),
  }(name='App', shrink='json', position='Query'),
  channel?: {
    reqConfig?: map[string]any(name='ReqConfig'),
    type?: string(name='Type', example='RTMP'),
  }(name='Channel', shrink='json', position='Query'),
  commandRequest?: {
    alphaSwitch?: boolean(name='AlphaSwitch'),
  }(name='CommandRequest', shrink='json', position='Query'),
  tenantId?: long(name='TenantId', example='9185', position='Query'),
  user?: {
    userId?: string(name='UserId', example='23423'),
    userName?: string(name='UserName'),
  }(name='User', shrink='json', position='Query'),
}

model StartInstanceResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    channel?: {
      appId?: string(name='AppId', example='ONEX7E28C7C221854'),
      channelId?: string(name='ChannelId', example='108293819'),
      expiredTime?: string(name='ExpiredTime', example='2022-01-04T16:00Z'),
      gslb?: [ string ](name='Gslb'),
      nonce?: string(name='Nonce', example='CK-9b5c335b9ae75879441ee7b363886418'),
      token?: string(name='Token', example='e59f61b2482b4d0562ab542da3f824f7'),
      type?: string(name='Type', example='6'),
      userId?: string(name='UserId', example='userId'),
      userInfoInChannel?: string(name='UserInfoInChannel'),
    }(name='Channel'),
    requestId?: string(name='RequestId', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
    sessionId?: string(name='SessionId', example='4f63f9e9788449f9adc88d9438c8dec3'),
    token?: string(name='Token', example='879441ee7b363886418'),
  }(name='Data'),
  message?: string(name='Message', example='operation success.'),
  success?: boolean(name='Success', example='True'),
}

model StartInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StartInstanceResponseBody(name='body'),
}

async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartInstance', 'POST', '/', 'json', false, 'json', request);
}

model StartTimedResetOperateRequest {
  instanceId: string(name='InstanceId', example='avatar_operation_public_cn-7pp2****802', position='Query'),
  tenantId: long(name='TenantId', example='xxxxxx', position='Query'),
}

model StartTimedResetOperateResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    instanceId?: string(name='InstanceId', example='avatar_operation_public_cn-7pp2****802'),
    tenantId?: long(name='TenantId', example='xxxxxx'),
  }(name='Data'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', description='Id of the request', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
  success?: boolean(name='Success', example='true'),
}

model StartTimedResetOperateResponse = {
  headers: map[string]string(name='headers'),
  body: StartTimedResetOperateResponseBody(name='body'),
}

async function startTimedResetOperate(request: StartTimedResetOperateRequest): StartTimedResetOperateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartTimedResetOperate', 'POST', '/', 'json', false, 'json', request);
}

model StopInstanceRequest {
  sessionId?: string(name='SessionId', example='9adb569b-f66b-4e92-8b9d-62aa626f8318', position='Query'),
  tenantId?: long(name='TenantId', example='234234', position='Query'),
}

model StopInstanceResponseBody = {
  code?: string(name='Code', description='Id of the request', example='success'),
  data?: {
    requestId?: string(name='RequestId', example='210f07d216386696072501427d3fdb'),
    sessionId?: string(name='SessionId', example='6296cc143d2c42899dae6eff19e8ac28'),
  }(name='Data'),
  message?: string(name='Message', example='The specified parameter PageSize should be lower or equal to 300.'),
  success?: boolean(name='Success', example='True'),
}

model StopInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StopInstanceResponseBody(name='body'),
}

async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopInstance', 'POST', '/', 'json', false, 'json', request);
}

model SubmitTextTo2DAvatarVideoTaskRequest {
  app: {
    appId: string(name='AppId', example='12131231'),
  }(name='App', shrink='json', position='Query'),
  audioInfo?: {
    pitchRate?: int32(name='PitchRate', minimum=-500, maximum=500),
    speechRate?: int32(name='SpeechRate', minimum=-500, maximum=500),
    voice?: string(name='Voice'),
    volume?: int32(name='Volume', minimum=0, maximum=100),
  }(name='AudioInfo', shrink='json', position='Query'),
  avatarInfo?: {
    code?: string(name='Code'),
  }(name='AvatarInfo', shrink='json', position='Query'),
  tenantId: long(name='TenantId', example='xxxxx', position='Query'),
  text: string(name='Text', position='Query'),
  title: string(name='Title', position='Query'),
  videoInfo: {
    backgroundImageUrl?: string(name='BackgroundImageUrl'),
    isAlpha: boolean(name='IsAlpha', example='false'),
    isSubtitles: boolean(name='IsSubtitles', example='true'),
  }(name='VideoInfo', shrink='json', position='Query'),
}

model SubmitTextTo2DAvatarVideoTaskResponseBody = {
  code?: string(name='Code', description='Id of the request', example='502'),
  data?: {
    taskUuid?: string(name='TaskUuid', example='xxxx-xxx-xxx'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
  success?: boolean(name='Success', example='true'),
}

model SubmitTextTo2DAvatarVideoTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitTextTo2DAvatarVideoTaskResponseBody(name='body'),
}

async function submitTextTo2DAvatarVideoTask(request: SubmitTextTo2DAvatarVideoTaskRequest): SubmitTextTo2DAvatarVideoTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitTextTo2DAvatarVideoTask', 'POST', '/', 'json', false, 'json', request);
}

model SubmitTextTo3DAvatarVideoTaskRequest {
  app: {
    appId: string(name='AppId', example='12131231'),
  }(name='App', shrink='json', position='Query'),
  avatarInfo?: {
    angle?: int32(name='Angle'),
    code?: string(name='Code'),
    locate?: int32(name='Locate'),
  }(name='AvatarInfo', shrink='json', position='Query'),
  tenantId: long(name='TenantId', example='xxxx', position='Query'),
  text: string(name='Text', position='Query'),
  title: string(name='Title', position='Query'),
  videoInfo?: {
    alphaFormat?: int32(name='AlphaFormat'),
    backgroundImageUrl?: string(name='BackgroundImageUrl'),
    isAlpha?: boolean(name='IsAlpha', example='false'),
    isSubtitles?: boolean(name='IsSubtitles', example='true'),
    resolution: int32(name='Resolution', example='1'),
  }(name='VideoInfo', shrink='json', position='Query'),
}

model SubmitTextTo3DAvatarVideoTaskResponseBody = {
  code?: string(name='Code', example='502'),
  data?: {
    taskUuid?: string(name='TaskUuid', example='xxxxxx-xxxxx-xxxxx'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
  success?: boolean(name='Success', example='false'),
}

model SubmitTextTo3DAvatarVideoTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitTextTo3DAvatarVideoTaskResponseBody(name='body'),
}

async function submitTextTo3DAvatarVideoTask(request: SubmitTextTo3DAvatarVideoTaskRequest): SubmitTextTo3DAvatarVideoTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitTextTo3DAvatarVideoTask', 'POST', '/', 'json', false, 'json', request);
}

model SubmitTextToSignVideoTaskRequest {
  app?: {
    appId?: string(name='AppId', example='xxxxxxxxx', minLength=1, maxLength=64),
  }(name='App', shrink='json', position='Query'),
  tenantId?: long(name='TenantId', example='12345', position='Query'),
  text?: string(name='Text', minLength=1, maxLength=4096, position='Query'),
  title?: string(name='Title', minLength=1, maxLength=128, position='Query'),
  videoInfo?: {
    isAlpha?: boolean(name='IsAlpha', example='false'),
    isSubtitles?: boolean(name='IsSubtitles', example='true'),
    resolution?: int32(name='Resolution', example='4'),
  }(name='VideoInfo', shrink='json', position='Query'),
}

model SubmitTextToSignVideoTaskResponseBody = {
  code?: string(name='Code', example='401'),
  data?: {
    taskUuid?: string(name='TaskUuid', example='22e733b3-6e19-405d-8782-1af7c072caXX'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='4C8BF3A5-948F-1F89-AACD-D18DEF52D1XX'),
  success?: string(name='Success', example='false'),
}

model SubmitTextToSignVideoTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitTextToSignVideoTaskResponseBody(name='body'),
}

async function submitTextToSignVideoTask(request: SubmitTextToSignVideoTaskRequest): SubmitTextToSignVideoTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitTextToSignVideoTask', 'POST', '/', 'json', false, 'json', request);
}

