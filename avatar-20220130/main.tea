/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('avatar', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CancelVideoTaskRequest {
  app?: {
    appId?: string(name='AppId', example='12131231'),
  }(name='App'),
  taskUuid?: string(name='TaskUuid', example='xxxx-xxxx-xxxx'),
  tenantId?: long(name='TenantId', example='xxxxx'),
}

model CancelVideoTaskShrinkRequest {
  appShrink?: string(name='App'),
  taskUuid?: string(name='TaskUuid', example='xxxx-xxxx-xxxx'),
  tenantId?: long(name='TenantId', example='xxxxx'),
}

model CancelVideoTaskResponseBody = {
  code?: string(name='Code', example='502'),
  data?: {
    failReason?: string(name='FailReason'),
    isCancel?: boolean(name='IsCancel', example='true'),
    taskUuid?: string(name='TaskUuid', example='xxxx-xxxx-xxxx'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='xxxx-xxxx-xxxx'),
  success?: boolean(name='Success', example='true'),
}

model CancelVideoTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelVideoTaskResponseBody(name='body'),
}

async function cancelVideoTaskWithOptions(tmpReq: CancelVideoTaskRequest, runtime: Util.RuntimeOptions): CancelVideoTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CancelVideoTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.app)) {
    request.appShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.app, 'App', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appShrink)) {
    query['App'] = request.appShrink;
  }
  if (!Util.isUnset(request.taskUuid)) {
    query['TaskUuid'] = request.taskUuid;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelVideoTask',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelVideoTask(request: CancelVideoTaskRequest): CancelVideoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelVideoTaskWithOptions(request, runtime);
}

model CloseTimedResetOperateRequest {
  instanceId?: string(name='InstanceId', example='avatar_operation_public_cn-7pp2****802'),
  tenantId?: long(name='TenantId', example='xxxxx'),
}

model CloseTimedResetOperateResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    instanceId?: string(name='InstanceId', example='avatar_operation_public_cn-7pp2****802'),
    tenantId?: long(name='TenantId', example='xxxxx'),
  }(name='Data'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', description='Id of the request', example='4C8BF3A5-948F-1F89-AACD-D18DEF52D1XX'),
  success?: boolean(name='Success', example='true'),
}

model CloseTimedResetOperateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloseTimedResetOperateResponseBody(name='body'),
}

async function closeTimedResetOperateWithOptions(request: CloseTimedResetOperateRequest, runtime: Util.RuntimeOptions): CloseTimedResetOperateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CloseTimedResetOperate',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function closeTimedResetOperate(request: CloseTimedResetOperateRequest): CloseTimedResetOperateResponse {
  var runtime = new Util.RuntimeOptions{};
  return closeTimedResetOperateWithOptions(request, runtime);
}

model DuplexDecisionRequest {
  appId?: string(name='AppId', example='12131231'),
  bizRequestId?: string(name='BizRequestId', example='xxxxxxxxxx'),
  callTime?: int32(name='CallTime', example='1'),
  customKeywords?: [ string ](name='CustomKeywords'),
  dialogContext?: {
    curUtteranceIdx?: int32(name='CurUtteranceIdx', example='1'),
    histories?: [ 
      {
        robot?: string(name='Robot'),
        user?: string(name='User'),
      }
    ](name='Histories'),
  }(name='DialogContext'),
  dialogStatus?: string(name='DialogStatus', example='ROBOTTALK'),
  interruptType?: int32(name='InterruptType', example='1'),
  sessionId?: string(name='SessionId', example='xxxxxxxxxx'),
  tenantId?: long(name='TenantId', example='xxxxx'),
  text?: string(name='Text'),
}

model DuplexDecisionShrinkRequest {
  appId?: string(name='AppId', example='12131231'),
  bizRequestId?: string(name='BizRequestId', example='xxxxxxxxxx'),
  callTime?: int32(name='CallTime', example='1'),
  customKeywordsShrink?: string(name='CustomKeywords'),
  dialogContextShrink?: string(name='DialogContext'),
  dialogStatus?: string(name='DialogStatus', example='ROBOTTALK'),
  interruptType?: int32(name='InterruptType', example='1'),
  sessionId?: string(name='SessionId', example='xxxxxxxxxx'),
  tenantId?: long(name='TenantId', example='xxxxx'),
  text?: string(name='Text'),
}

model DuplexDecisionResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    actionType?: string(name='ActionType', example='UNDERTAKE'),
    grabType?: string(name='GrabType', example='GRAB'),
    outputText?: string(name='OutputText'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
  success?: string(name='Success', example='true'),
}

model DuplexDecisionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DuplexDecisionResponseBody(name='body'),
}

async function duplexDecisionWithOptions(tmpReq: DuplexDecisionRequest, runtime: Util.RuntimeOptions): DuplexDecisionResponse {
  Util.validateModel(tmpReq);
  var request = new DuplexDecisionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.customKeywords)) {
    request.customKeywordsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.customKeywords, 'CustomKeywords', 'json');
  }
  if (!Util.isUnset(tmpReq.dialogContext)) {
    request.dialogContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dialogContext, 'DialogContext', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.bizRequestId)) {
    query['BizRequestId'] = request.bizRequestId;
  }
  if (!Util.isUnset(request.callTime)) {
    query['CallTime'] = request.callTime;
  }
  if (!Util.isUnset(request.customKeywordsShrink)) {
    query['CustomKeywords'] = request.customKeywordsShrink;
  }
  if (!Util.isUnset(request.dialogContextShrink)) {
    query['DialogContext'] = request.dialogContextShrink;
  }
  if (!Util.isUnset(request.dialogStatus)) {
    query['DialogStatus'] = request.dialogStatus;
  }
  if (!Util.isUnset(request.interruptType)) {
    query['InterruptType'] = request.interruptType;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.text)) {
    query['Text'] = request.text;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DuplexDecision',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function duplexDecision(request: DuplexDecisionRequest): DuplexDecisionResponse {
  var runtime = new Util.RuntimeOptions{};
  return duplexDecisionWithOptions(request, runtime);
}

model GetVideoTaskInfoRequest {
  app?: {
    appId?: string(name='AppId', example='12131231'),
  }(name='App'),
  taskUuid?: string(name='TaskUuid', example='xxxx-xxxx-xxx'),
  tenantId?: long(name='TenantId', example='xxxxxx'),
}

model GetVideoTaskInfoShrinkRequest {
  appShrink?: string(name='App'),
  taskUuid?: string(name='TaskUuid', example='xxxx-xxxx-xxx'),
  tenantId?: long(name='TenantId', example='xxxxxx'),
}

model GetVideoTaskInfoResponseBody = {
  code?: string(name='Code', example='502'),
  data?: {
    process?: string(name='Process', example='99'),
    status?: string(name='Status', example='1'),
    taskResult?: {
      failCode?: string(name='FailCode'),
      failReason?: string(name='FailReason'),
      subtitlesUrl?: string(name='SubtitlesUrl', example='xxx/xxx/xxx.ass'),
      videoUrl?: string(name='VideoUrl', example='xxx/xxxx/xx.mp4'),
      wordSubtitlesUrl?: string(name='WordSubtitlesUrl'),
    }(name='TaskResult'),
    taskUuid?: string(name='TaskUuid', example='xxxx-xxx-xx-xx'),
    type?: string(name='Type', example='1'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='xxx-xxx-xxx-xx'),
  success?: boolean(name='Success', example='true'),
}

model GetVideoTaskInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVideoTaskInfoResponseBody(name='body'),
}

async function getVideoTaskInfoWithOptions(tmpReq: GetVideoTaskInfoRequest, runtime: Util.RuntimeOptions): GetVideoTaskInfoResponse {
  Util.validateModel(tmpReq);
  var request = new GetVideoTaskInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.app)) {
    request.appShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.app, 'App', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetVideoTaskInfo',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getVideoTaskInfo(request: GetVideoTaskInfoRequest): GetVideoTaskInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVideoTaskInfoWithOptions(request, runtime);
}

model QueryRunningInstanceRequest {
  app?: {
    appId?: string(name='AppId', example='ALIPUB5748B17121450'),
  }(name='App'),
  sessionId?: string(name='SessionId', example='76898bd3b90b4a65b1c078d8824a2e9c'),
  tenantId?: long(name='TenantId', example='9185'),
}

model QueryRunningInstanceShrinkRequest {
  appShrink?: string(name='App'),
  sessionId?: string(name='SessionId', example='76898bd3b90b4a65b1c078d8824a2e9c'),
  tenantId?: long(name='TenantId', example='9185'),
}

model QueryRunningInstanceResponseBody = {
  code?: string(name='Code', example='0'),
  data?: [ 
    {
      channel?: {
        appId?: string(name='AppId', example='ONEX7E28C7C221854'),
        channelId?: string(name='ChannelId', example='108293819'),
        expiredTime?: string(name='ExpiredTime', example='2022-01-04T16:00Z'),
        gslb?: [ string ](name='Gslb'),
        nonce?: string(name='Nonce', example='CK-9b5c335b9ae75879441ee7b363886418'),
        token?: string(name='Token', example='e59f61b2482b4d0562ab542da3f824f7'),
        type?: string(name='Type', example='6'),
        userId?: string(name='UserId', example='userId'),
        userInfoInChannel?: string(name='UserInfoInChannel'),
      }(name='Channel'),
      sessionId?: string(name='SessionId', example='4f63f9e9788449f9adc88d9438c8dec3'),
      user?: {
        userId?: string(name='UserId', example='23423'),
        userName?: string(name='UserName'),
      }(name='User'),
    }
  ](name='Data'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
  success?: boolean(name='Success', example='True'),
}

model QueryRunningInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRunningInstanceResponseBody(name='body'),
}

async function queryRunningInstanceWithOptions(tmpReq: QueryRunningInstanceRequest, runtime: Util.RuntimeOptions): QueryRunningInstanceResponse {
  Util.validateModel(tmpReq);
  var request = new QueryRunningInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.app)) {
    request.appShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.app, 'App', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appShrink)) {
    query['App'] = request.appShrink;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryRunningInstance',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRunningInstance(request: QueryRunningInstanceRequest): QueryRunningInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRunningInstanceWithOptions(request, runtime);
}

model QueryTimedResetOperateStatusRequest {
  instanceId?: string(name='InstanceId', example='avatar_operation_public_cn-7pp2****802'),
  tenantId?: long(name='TenantId', example='xxxxx'),
}

model QueryTimedResetOperateStatusResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    instanceId?: string(name='InstanceId', example='avatar_operation_public_cn-7pp2****802'),
    status?: long(name='Status', example='10'),
    statusStr?: string(name='StatusStr'),
    tenantId?: string(name='TenantId', example='xxxxx'),
  }(name='Data'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', description='Id of the request', example='74d42913-f13c-47ac-a8ac-8610685688eb'),
  success?: boolean(name='Success', example='true'),
}

model QueryTimedResetOperateStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTimedResetOperateStatusResponseBody(name='body'),
}

async function queryTimedResetOperateStatusWithOptions(request: QueryTimedResetOperateStatusRequest, runtime: Util.RuntimeOptions): QueryTimedResetOperateStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTimedResetOperateStatus',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTimedResetOperateStatus(request: QueryTimedResetOperateStatusRequest): QueryTimedResetOperateStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTimedResetOperateStatusWithOptions(request, runtime);
}

model SendMessageRequest {
  sessionId?: string(name='SessionId', example='76898bd3b90b4a65b1c078d8824a2e9c'),
  tenantId?: long(name='TenantId', example='5615'),
  textRequest?: {
    commandType?: string(name='CommandType'),
    id?: string(name='Id', example='0000001000586737'),
    speechText?: string(name='SpeechText'),
    interrupt?: boolean(name='interrupt', example='false'),
  }(name='TextRequest'),
  VAMLRequest?: {
    code?: string(name='Code', example='VAML_REQUEST'),
    vaml?: string(name='Vaml'),
  }(name='VAMLRequest'),
}

model SendMessageShrinkRequest {
  sessionId?: string(name='SessionId', example='76898bd3b90b4a65b1c078d8824a2e9c'),
  tenantId?: long(name='TenantId', example='5615'),
  textRequestShrink?: string(name='TextRequest'),
  VAMLRequestShrink?: string(name='VAMLRequest'),
}

model SendMessageResponseBody = {
  code?: string(name='Code', description='Id of the request', example='QUERY_ACCOUNT_INFO_ERROR'),
  data?: {
    requestId?: string(name='RequestId', example='0A466686-8F3A-55A6-93D8-A0225DC965C0'),
    sessionId?: string(name='SessionId', example='9929391f61ef9e1c0000000000000006'),
  }(name='Data'),
  message?: string(name='Message', example='operation success.'),
  success?: boolean(name='Success', example='True'),
}

model SendMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendMessageResponseBody(name='body'),
}

async function sendMessageWithOptions(tmpReq: SendMessageRequest, runtime: Util.RuntimeOptions): SendMessageResponse {
  Util.validateModel(tmpReq);
  var request = new SendMessageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.textRequest)) {
    request.textRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.textRequest, 'TextRequest', 'json');
  }
  if (!Util.isUnset(tmpReq.VAMLRequest)) {
    request.VAMLRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.VAMLRequest, 'VAMLRequest', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.textRequestShrink)) {
    query['TextRequest'] = request.textRequestShrink;
  }
  if (!Util.isUnset(request.VAMLRequestShrink)) {
    query['VAMLRequest'] = request.VAMLRequestShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SendMessage',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendMessage(request: SendMessageRequest): SendMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendMessageWithOptions(request, runtime);
}

model StartInstanceRequest {
  app?: {
    appId?: string(name='AppId', example='ALIPUB5748B17121450'),
  }(name='App'),
  channel?: {
    reqConfig?: map[string]any(name='ReqConfig'),
    type?: string(name='Type', example='RTMP'),
  }(name='Channel'),
  commandRequest?: {
    alphaSwitch?: boolean(name='AlphaSwitch'),
  }(name='CommandRequest'),
  tenantId?: long(name='TenantId', example='9185'),
  user?: {
    userId?: string(name='UserId', example='23423'),
    userName?: string(name='UserName'),
  }(name='User'),
}

model StartInstanceShrinkRequest {
  appShrink?: string(name='App'),
  channelShrink?: string(name='Channel'),
  commandRequestShrink?: string(name='CommandRequest'),
  tenantId?: long(name='TenantId', example='9185'),
  userShrink?: string(name='User'),
}

model StartInstanceResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    channel?: {
      appId?: string(name='AppId', example='ONEX7E28C7C221854'),
      channelId?: string(name='ChannelId', example='108293819'),
      expiredTime?: string(name='ExpiredTime', example='2022-01-04T16:00Z'),
      gslb?: [ string ](name='Gslb'),
      nonce?: string(name='Nonce', example='CK-9b5c335b9ae75879441ee7b363886418'),
      token?: string(name='Token', example='e59f61b2482b4d0562ab542da3f824f7'),
      type?: string(name='Type', example='6'),
      userId?: string(name='UserId', example='userId'),
      userInfoInChannel?: string(name='UserInfoInChannel'),
    }(name='Channel'),
    requestId?: string(name='RequestId', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
    sessionId?: string(name='SessionId', example='4f63f9e9788449f9adc88d9438c8dec3'),
    token?: string(name='Token', example='879441ee7b363886418'),
  }(name='Data'),
  message?: string(name='Message', example='operation success.'),
  success?: boolean(name='Success', example='True'),
}

model StartInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartInstanceResponseBody(name='body'),
}

async function startInstanceWithOptions(tmpReq: StartInstanceRequest, runtime: Util.RuntimeOptions): StartInstanceResponse {
  Util.validateModel(tmpReq);
  var request = new StartInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.app)) {
    request.appShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.app, 'App', 'json');
  }
  if (!Util.isUnset(tmpReq.channel)) {
    request.channelShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.channel, 'Channel', 'json');
  }
  if (!Util.isUnset(tmpReq.commandRequest)) {
    request.commandRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.commandRequest, 'CommandRequest', 'json');
  }
  if (!Util.isUnset(tmpReq.user)) {
    request.userShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.user, 'User', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appShrink)) {
    query['App'] = request.appShrink;
  }
  if (!Util.isUnset(request.channelShrink)) {
    query['Channel'] = request.channelShrink;
  }
  if (!Util.isUnset(request.commandRequestShrink)) {
    query['CommandRequest'] = request.commandRequestShrink;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.userShrink)) {
    query['User'] = request.userShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartInstance',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startInstanceWithOptions(request, runtime);
}

model StartTimedResetOperateRequest {
  instanceId?: string(name='InstanceId', example='avatar_operation_public_cn-7pp2****802'),
  tenantId?: long(name='TenantId', example='xxxxxx'),
}

model StartTimedResetOperateResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    instanceId?: string(name='InstanceId', example='avatar_operation_public_cn-7pp2****802'),
    tenantId?: long(name='TenantId', example='xxxxxx'),
  }(name='Data'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', description='Id of the request', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
  success?: boolean(name='Success', example='true'),
}

model StartTimedResetOperateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartTimedResetOperateResponseBody(name='body'),
}

async function startTimedResetOperateWithOptions(request: StartTimedResetOperateRequest, runtime: Util.RuntimeOptions): StartTimedResetOperateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartTimedResetOperate',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startTimedResetOperate(request: StartTimedResetOperateRequest): StartTimedResetOperateResponse {
  var runtime = new Util.RuntimeOptions{};
  return startTimedResetOperateWithOptions(request, runtime);
}

model StopInstanceRequest {
  sessionId?: string(name='SessionId', example='9adb569b-f66b-4e92-8b9d-62aa626f8318'),
  tenantId?: long(name='TenantId', example='234234'),
}

model StopInstanceResponseBody = {
  code?: string(name='Code', description='Id of the request', example='success'),
  data?: {
    requestId?: string(name='RequestId', example='210f07d216386696072501427d3fdb'),
    sessionId?: string(name='SessionId', example='6296cc143d2c42899dae6eff19e8ac28'),
  }(name='Data'),
  message?: string(name='Message', example='The specified parameter PageSize should be lower or equal to 300.'),
  success?: boolean(name='Success', example='True'),
}

model StopInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopInstanceResponseBody(name='body'),
}

async function stopInstanceWithOptions(request: StopInstanceRequest, runtime: Util.RuntimeOptions): StopInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopInstance',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInstanceWithOptions(request, runtime);
}

model SubmitTextTo2DAvatarVideoTaskRequest {
  app?: {
    appId?: string(name='AppId', example='12131231'),
  }(name='App'),
  audioInfo?: {
    pitchRate?: int32(name='PitchRate'),
    speechRate?: int32(name='SpeechRate'),
    voice?: string(name='Voice'),
    volume?: int32(name='Volume'),
  }(name='AudioInfo'),
  avatarInfo?: {
    code?: string(name='Code'),
  }(name='AvatarInfo'),
  tenantId?: long(name='TenantId', example='xxxxx'),
  text?: string(name='Text'),
  title?: string(name='Title'),
  videoInfo?: {
    backgroundImageUrl?: string(name='BackgroundImageUrl'),
    isAlpha?: boolean(name='IsAlpha', example='false'),
    isSubtitles?: boolean(name='IsSubtitles', example='true'),
  }(name='VideoInfo'),
}

model SubmitTextTo2DAvatarVideoTaskShrinkRequest {
  appShrink?: string(name='App'),
  audioInfoShrink?: string(name='AudioInfo'),
  avatarInfoShrink?: string(name='AvatarInfo'),
  tenantId?: long(name='TenantId', example='xxxxx'),
  text?: string(name='Text'),
  title?: string(name='Title'),
  videoInfoShrink?: string(name='VideoInfo'),
}

model SubmitTextTo2DAvatarVideoTaskResponseBody = {
  code?: string(name='Code', example='502'),
  data?: {
    taskUuid?: string(name='TaskUuid', example='xxxx-xxx-xxx'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
  success?: boolean(name='Success', example='true'),
}

model SubmitTextTo2DAvatarVideoTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitTextTo2DAvatarVideoTaskResponseBody(name='body'),
}

async function submitTextTo2DAvatarVideoTaskWithOptions(tmpReq: SubmitTextTo2DAvatarVideoTaskRequest, runtime: Util.RuntimeOptions): SubmitTextTo2DAvatarVideoTaskResponse {
  Util.validateModel(tmpReq);
  var request = new SubmitTextTo2DAvatarVideoTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.app)) {
    request.appShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.app, 'App', 'json');
  }
  if (!Util.isUnset(tmpReq.audioInfo)) {
    request.audioInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.audioInfo, 'AudioInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.avatarInfo)) {
    request.avatarInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.avatarInfo, 'AvatarInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.videoInfo)) {
    request.videoInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.videoInfo, 'VideoInfo', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appShrink)) {
    query['App'] = request.appShrink;
  }
  if (!Util.isUnset(request.audioInfoShrink)) {
    query['AudioInfo'] = request.audioInfoShrink;
  }
  if (!Util.isUnset(request.avatarInfoShrink)) {
    query['AvatarInfo'] = request.avatarInfoShrink;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.text)) {
    query['Text'] = request.text;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  if (!Util.isUnset(request.videoInfoShrink)) {
    query['VideoInfo'] = request.videoInfoShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitTextTo2DAvatarVideoTask',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitTextTo2DAvatarVideoTask(request: SubmitTextTo2DAvatarVideoTaskRequest): SubmitTextTo2DAvatarVideoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitTextTo2DAvatarVideoTaskWithOptions(request, runtime);
}

model SubmitTextTo3DAvatarVideoTaskRequest {
  app?: {
    appId?: string(name='AppId', example='12131231'),
  }(name='App'),
  avatarInfo?: {
    angle?: int32(name='Angle'),
    code?: string(name='Code'),
    locate?: int32(name='Locate'),
  }(name='AvatarInfo'),
  tenantId?: long(name='TenantId', example='xxxx'),
  text?: string(name='Text'),
  title?: string(name='Title'),
  videoInfo?: {
    alphaFormat?: int32(name='AlphaFormat'),
    backgroundImageUrl?: string(name='BackgroundImageUrl'),
    isAlpha?: boolean(name='IsAlpha', example='false'),
    isSubtitles?: boolean(name='IsSubtitles', example='true'),
    resolution?: int32(name='Resolution', example='1'),
  }(name='VideoInfo'),
}

model SubmitTextTo3DAvatarVideoTaskShrinkRequest {
  appShrink?: string(name='App'),
  avatarInfoShrink?: string(name='AvatarInfo'),
  tenantId?: long(name='TenantId', example='xxxx'),
  text?: string(name='Text'),
  title?: string(name='Title'),
  videoInfoShrink?: string(name='VideoInfo'),
}

model SubmitTextTo3DAvatarVideoTaskResponseBody = {
  code?: string(name='Code', example='502'),
  data?: {
    taskUuid?: string(name='TaskUuid', example='xxxxxx-xxxxx-xxxxx'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
  success?: boolean(name='Success', example='false'),
}

model SubmitTextTo3DAvatarVideoTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitTextTo3DAvatarVideoTaskResponseBody(name='body'),
}

async function submitTextTo3DAvatarVideoTaskWithOptions(tmpReq: SubmitTextTo3DAvatarVideoTaskRequest, runtime: Util.RuntimeOptions): SubmitTextTo3DAvatarVideoTaskResponse {
  Util.validateModel(tmpReq);
  var request = new SubmitTextTo3DAvatarVideoTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.app)) {
    request.appShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.app, 'App', 'json');
  }
  if (!Util.isUnset(tmpReq.avatarInfo)) {
    request.avatarInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.avatarInfo, 'AvatarInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.videoInfo)) {
    request.videoInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.videoInfo, 'VideoInfo', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appShrink)) {
    query['App'] = request.appShrink;
  }
  if (!Util.isUnset(request.avatarInfoShrink)) {
    query['AvatarInfo'] = request.avatarInfoShrink;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.text)) {
    query['Text'] = request.text;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  if (!Util.isUnset(request.videoInfoShrink)) {
    query['VideoInfo'] = request.videoInfoShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitTextTo3DAvatarVideoTask',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitTextTo3DAvatarVideoTask(request: SubmitTextTo3DAvatarVideoTaskRequest): SubmitTextTo3DAvatarVideoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitTextTo3DAvatarVideoTaskWithOptions(request, runtime);
}

model SubmitTextToSignVideoTaskRequest {
  app?: {
    appId?: string(name='AppId', example='xxxxxxxxx'),
  }(name='App'),
  tenantId?: long(name='TenantId', example='12345'),
  text?: string(name='Text'),
  title?: string(name='Title'),
  videoInfo?: {
    isAlpha?: boolean(name='IsAlpha', example='false'),
    isSubtitles?: boolean(name='IsSubtitles', example='true'),
    resolution?: int32(name='Resolution', example='4'),
  }(name='VideoInfo'),
}

model SubmitTextToSignVideoTaskShrinkRequest {
  appShrink?: string(name='App'),
  tenantId?: long(name='TenantId', example='12345'),
  text?: string(name='Text'),
  title?: string(name='Title'),
  videoInfoShrink?: string(name='VideoInfo'),
}

model SubmitTextToSignVideoTaskResponseBody = {
  code?: string(name='Code', example='401'),
  data?: {
    taskUuid?: string(name='TaskUuid', example='22e733b3-6e19-405d-8782-1af7c072caXX'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='4C8BF3A5-948F-1F89-AACD-D18DEF52D1XX'),
  success?: string(name='Success', example='false'),
}

model SubmitTextToSignVideoTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitTextToSignVideoTaskResponseBody(name='body'),
}

async function submitTextToSignVideoTaskWithOptions(tmpReq: SubmitTextToSignVideoTaskRequest, runtime: Util.RuntimeOptions): SubmitTextToSignVideoTaskResponse {
  Util.validateModel(tmpReq);
  var request = new SubmitTextToSignVideoTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.app)) {
    request.appShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.app, 'App', 'json');
  }
  if (!Util.isUnset(tmpReq.videoInfo)) {
    request.videoInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.videoInfo, 'VideoInfo', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appShrink)) {
    query['App'] = request.appShrink;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.text)) {
    query['Text'] = request.text;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  if (!Util.isUnset(request.videoInfoShrink)) {
    query['VideoInfo'] = request.videoInfoShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitTextToSignVideoTask',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitTextToSignVideoTask(request: SubmitTextToSignVideoTaskRequest): SubmitTextToSignVideoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitTextToSignVideoTaskWithOptions(request, runtime);
}

