/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('avatar', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model QueryRunningInstanceRequest {
  app?: {
    appId?: string(name='AppId'),
  }(name='App'),
  tenantId?: long(name='TenantId'),
}

model QueryRunningInstanceShrinkRequest {
  appShrink?: string(name='App'),
  tenantId?: long(name='TenantId'),
}

model QueryRunningInstanceResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      channel?: {
        appId?: string(name='AppId'),
        channelId?: string(name='ChannelId'),
        expiredTime?: string(name='ExpiredTime'),
        gslb?: [ string ](name='Gslb'),
        nonce?: string(name='Nonce'),
        token?: string(name='Token'),
        type?: string(name='Type'),
        userId?: string(name='UserId'),
        userInfoInChannel?: string(name='UserInfoInChannel'),
      }(name='Channel'),
      sessionId?: string(name='SessionId'),
      user?: {
        userId?: string(name='UserId'),
        userName?: string(name='UserName'),
      }(name='User'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryRunningInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRunningInstanceResponseBody(name='body'),
}

async function queryRunningInstanceWithOptions(tmpReq: QueryRunningInstanceRequest, runtime: Util.RuntimeOptions): QueryRunningInstanceResponse {
  Util.validateModel(tmpReq);
  var request = new QueryRunningInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.app)) {
    request.appShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.app, 'App', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appShrink)) {
    query['App'] = request.appShrink;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryRunningInstance',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRunningInstance(request: QueryRunningInstanceRequest): QueryRunningInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRunningInstanceWithOptions(request, runtime);
}

model SendMessageRequest {
  sessionId?: string(name='SessionId'),
  tenantId?: long(name='TenantId'),
  textRequest?: {
    commandType?: string(name='CommandType'),
    id?: string(name='Id'),
    speechText?: string(name='SpeechText'),
    interrupt?: boolean(name='interrupt'),
  }(name='TextRequest'),
  VAMLRequest?: {
    code?: string(name='Code'),
    vaml?: string(name='Vaml'),
  }(name='VAMLRequest'),
}

model SendMessageShrinkRequest {
  sessionId?: string(name='SessionId'),
  tenantId?: long(name='TenantId'),
  textRequestShrink?: string(name='TextRequest'),
  VAMLRequestShrink?: string(name='VAMLRequest'),
}

model SendMessageResponseBody = {
  code?: string(name='Code'),
  data?: {
    requestId?: string(name='RequestId'),
    sessionId?: string(name='SessionId'),
  }(name='Data'),
  message?: string(name='Message'),
  success?: boolean(name='Success'),
}

model SendMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendMessageResponseBody(name='body'),
}

async function sendMessageWithOptions(tmpReq: SendMessageRequest, runtime: Util.RuntimeOptions): SendMessageResponse {
  Util.validateModel(tmpReq);
  var request = new SendMessageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.textRequest)) {
    request.textRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.textRequest, 'TextRequest', 'json');
  }
  if (!Util.isUnset(tmpReq.VAMLRequest)) {
    request.VAMLRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.VAMLRequest, 'VAMLRequest', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.textRequestShrink)) {
    query['TextRequest'] = request.textRequestShrink;
  }
  if (!Util.isUnset(request.VAMLRequestShrink)) {
    query['VAMLRequest'] = request.VAMLRequestShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SendMessage',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendMessage(request: SendMessageRequest): SendMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendMessageWithOptions(request, runtime);
}

model StartInstanceRequest {
  app?: {
    appId?: string(name='AppId'),
  }(name='App'),
  channel?: {
    reqConfig?: map[string]any(name='ReqConfig'),
    type?: string(name='Type'),
  }(name='Channel'),
  tenantId?: long(name='TenantId'),
  user?: {
    userId?: string(name='UserId'),
    userName?: string(name='UserName'),
  }(name='User'),
}

model StartInstanceShrinkRequest {
  appShrink?: string(name='App'),
  channelShrink?: string(name='Channel'),
  tenantId?: long(name='TenantId'),
  userShrink?: string(name='User'),
}

model StartInstanceResponseBody = {
  code?: string(name='Code'),
  data?: {
    channel?: {
      appId?: string(name='AppId'),
      channelId?: string(name='ChannelId'),
      expiredTime?: string(name='ExpiredTime'),
      gslb?: [ string ](name='Gslb'),
      nonce?: string(name='Nonce'),
      token?: string(name='Token'),
      type?: string(name='Type'),
      userId?: string(name='UserId'),
      userInfoInChannel?: string(name='UserInfoInChannel'),
    }(name='Channel'),
    requestId?: string(name='RequestId'),
    sessionId?: string(name='SessionId'),
  }(name='Data'),
  message?: string(name='Message'),
  success?: boolean(name='Success'),
}

model StartInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartInstanceResponseBody(name='body'),
}

async function startInstanceWithOptions(tmpReq: StartInstanceRequest, runtime: Util.RuntimeOptions): StartInstanceResponse {
  Util.validateModel(tmpReq);
  var request = new StartInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.app)) {
    request.appShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.app, 'App', 'json');
  }
  if (!Util.isUnset(tmpReq.channel)) {
    request.channelShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.channel, 'Channel', 'json');
  }
  if (!Util.isUnset(tmpReq.user)) {
    request.userShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.user, 'User', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appShrink)) {
    query['App'] = request.appShrink;
  }
  if (!Util.isUnset(request.channelShrink)) {
    query['Channel'] = request.channelShrink;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.userShrink)) {
    query['User'] = request.userShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartInstance',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startInstanceWithOptions(request, runtime);
}

model StopInstanceRequest {
  sessionId?: string(name='SessionId'),
  tenantId?: long(name='TenantId'),
}

model StopInstanceResponseBody = {
  code?: string(name='Code'),
  data?: {
    requestId?: string(name='RequestId'),
    sessionId?: string(name='SessionId'),
  }(name='Data'),
  message?: string(name='Message'),
  success?: boolean(name='Success'),
}

model StopInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopInstanceResponseBody(name='body'),
}

async function stopInstanceWithOptions(request: StopInstanceRequest, runtime: Util.RuntimeOptions): StopInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopInstance',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInstanceWithOptions(request, runtime);
}

