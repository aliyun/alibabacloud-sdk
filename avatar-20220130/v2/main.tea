/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('avatar', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CancelVideoTaskRequest {
  app?: {
    appId?: string(name='AppId', description='This parameter is required.', example='12131231'),
  }(name='App', description='This parameter is required.'),
  taskUuid?: string(name='TaskUuid', description='This parameter is required.', example='xxxx-xxxx-xxxx'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='xxxxx'),
}

model CancelVideoTaskShrinkRequest {
  appShrink?: string(name='App', description='This parameter is required.'),
  taskUuid?: string(name='TaskUuid', description='This parameter is required.', example='xxxx-xxxx-xxxx'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='xxxxx'),
}

model CancelVideoTaskResponseBody = {
  code?: string(name='Code', example='502'),
  data?: {
    failReason?: string(name='FailReason', example='这里是取消失败原因'),
    isCancel?: boolean(name='IsCancel', example='true'),
    taskUuid?: string(name='TaskUuid', example='xxxx-xxxx-xxxx'),
  }(name='Data'),
  message?: string(name='Message', example='这是一个错误'),
  requestId?: string(name='RequestId', example='xxxx-xxxx-xxxx'),
  success?: boolean(name='Success', example='true'),
}

model CancelVideoTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelVideoTaskResponseBody(name='body'),
}

/**
 * @summary 取消视频合成任务
 *
 * @param tmpReq CancelVideoTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CancelVideoTaskResponse
 */
@context("cancelVideoTaskWithContext")
async function cancelVideoTaskWithOptions(tmpReq: CancelVideoTaskRequest, runtime: $RuntimeOptions): CancelVideoTaskResponse {
  tmpReq.validate();
  var request = new CancelVideoTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.app)) {
    request.appShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.app, 'App', 'json');
  }
  var query = {};
  if (!$isNull(request.appShrink)) {
    query['App'] = request.appShrink;
  }
  if (!$isNull(request.taskUuid)) {
    query['TaskUuid'] = request.taskUuid;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CancelVideoTask',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 取消视频合成任务
 *
 * @param request CancelVideoTaskRequest
 * @return CancelVideoTaskResponse
 */
async function cancelVideoTask(request: CancelVideoTaskRequest): CancelVideoTaskResponse {
  var runtime = new $RuntimeOptions{};
  return cancelVideoTaskWithOptions(request, runtime);
}

model ClientAuthRequest {
  appId?: string(name='AppId', description='This parameter is required.', example='dsdsf1'),
  deviceId?: string(name='DeviceId', description='This parameter is required.', example='xxxxxx'),
  deviceInfo?: string(name='DeviceInfo', example='{"xxxx":"xxxxxxxxxxx"}'),
  deviceType?: string(name='DeviceType', description='This parameter is required.', example='largeScreen'),
  license?: string(name='License', description='This parameter is required.', example='FqTyXFrIqbIGnb_oqIvszv1wffODnpCDNDvOc6xNXbAhak1AwsfrCo2cSrPFAhHEitOb9VEG'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='9185'),
}

model ClientAuthResponseBody = {
  code?: string(name='Code', example='10010001'),
  message?: string(name='Message', example='无权限操作'),
  requestId?: string(name='RequestId', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
  success?: boolean(name='Success', example='true'),
}

model ClientAuthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ClientAuthResponseBody(name='body'),
}

/**
 * @summary 端渲染认证
 *
 * @param request ClientAuthRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ClientAuthResponse
 */
@context("clientAuthWithContext")
async function clientAuthWithOptions(request: ClientAuthRequest, runtime: $RuntimeOptions): ClientAuthResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!$isNull(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!$isNull(request.deviceInfo)) {
    query['DeviceInfo'] = request.deviceInfo;
  }
  if (!$isNull(request.deviceType)) {
    query['DeviceType'] = request.deviceType;
  }
  if (!$isNull(request.license)) {
    query['License'] = request.license;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ClientAuth',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 端渲染认证
 *
 * @param request ClientAuthRequest
 * @return ClientAuthResponse
 */
async function clientAuth(request: ClientAuthRequest): ClientAuthResponse {
  var runtime = new $RuntimeOptions{};
  return clientAuthWithOptions(request, runtime);
}

model ClientStartRequest {
  appId?: string(name='AppId', description='This parameter is required.', example='dsdsf1'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='9185'),
}

model ClientStartResponseBody = {
  code?: string(name='Code', example='10010002'),
  data?: {
    imToken?: string(name='ImToken', example='xxxxxxxxxx'),
  }(name='Data'),
  message?: string(name='Message', example='这是一个错误'),
  requestId?: string(name='RequestId', example='4C8BF3A5-948F-1F89-AACD-D18DEF52D1XX'),
  success?: boolean(name='Success', example='true'),
}

model ClientStartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ClientStartResponseBody(name='body'),
}

/**
 * @summary 端渲染开始工作
 *
 * @param request ClientStartRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ClientStartResponse
 */
@context("clientStartWithContext")
async function clientStartWithOptions(request: ClientStartRequest, runtime: $RuntimeOptions): ClientStartResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ClientStart',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 端渲染开始工作
 *
 * @param request ClientStartRequest
 * @return ClientStartResponse
 */
async function clientStart(request: ClientStartRequest): ClientStartResponse {
  var runtime = new $RuntimeOptions{};
  return clientStartWithOptions(request, runtime);
}

model ClientUnbindDeviceRequest {
  deviceId?: string(name='DeviceId', example='dsdsf1'),
  tenantId?: long(name='TenantId', example='9185'),
}

model ClientUnbindDeviceResponseBody = {
  code?: string(name='Code', example='10010001'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
  success?: boolean(name='Success', example='true'),
}

model ClientUnbindDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ClientUnbindDeviceResponseBody(name='body'),
}

/**
 * @summary 端渲染解绑设备
 *
 * @param request ClientUnbindDeviceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ClientUnbindDeviceResponse
 */
@context("clientUnbindDeviceWithContext")
async function clientUnbindDeviceWithOptions(request: ClientUnbindDeviceRequest, runtime: $RuntimeOptions): ClientUnbindDeviceResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ClientUnbindDevice',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 端渲染解绑设备
 *
 * @param request ClientUnbindDeviceRequest
 * @return ClientUnbindDeviceResponse
 */
async function clientUnbindDevice(request: ClientUnbindDeviceRequest): ClientUnbindDeviceResponse {
  var runtime = new $RuntimeOptions{};
  return clientUnbindDeviceWithOptions(request, runtime);
}

model CloseTimedResetOperateRequest {
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='avatar_operation_public_cn-7pp2****802'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='xxxxx'),
}

model CloseTimedResetOperateResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    instanceId?: string(name='InstanceId', example='avatar_operation_public_cn-7pp2****802'),
    tenantId?: long(name='TenantId', example='xxxxx'),
  }(name='Data'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', description='Id of the request', example='4C8BF3A5-948F-1F89-AACD-D18DEF52D1XX'),
  success?: boolean(name='Success', example='true'),
}

model CloseTimedResetOperateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloseTimedResetOperateResponseBody(name='body'),
}

/**
 * @summary 停复机关机操作
 *
 * @param request CloseTimedResetOperateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CloseTimedResetOperateResponse
 */
@context("closeTimedResetOperateWithContext")
async function closeTimedResetOperateWithOptions(request: CloseTimedResetOperateRequest, runtime: $RuntimeOptions): CloseTimedResetOperateResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CloseTimedResetOperate',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 停复机关机操作
 *
 * @param request CloseTimedResetOperateRequest
 * @return CloseTimedResetOperateResponse
 */
async function closeTimedResetOperate(request: CloseTimedResetOperateRequest): CloseTimedResetOperateResponse {
  var runtime = new $RuntimeOptions{};
  return closeTimedResetOperateWithOptions(request, runtime);
}

model ConfirmAvatar2dTrainRequest {
  code?: string(name='Code', description='This parameter is required.', example='CH_2d_xxxxxx'),
  confirm?: string(name='Confirm', description='This parameter is required.', example='ACCEPT'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='xxxxx'),
}

model ConfirmAvatar2dTrainResponseBody = {
  code?: string(name='Code', example='10010001'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
  success?: boolean(name='Success', example='false'),
}

model ConfirmAvatar2dTrainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfirmAvatar2dTrainResponseBody(name='body'),
}

/**
 * @summary 客户确认2d形象训练
 *
 * @param request ConfirmAvatar2dTrainRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ConfirmAvatar2dTrainResponse
 */
@context("confirmAvatar2dTrainWithContext")
async function confirmAvatar2dTrainWithOptions(request: ConfirmAvatar2dTrainRequest, runtime: $RuntimeOptions): ConfirmAvatar2dTrainResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.code)) {
    query['Code'] = request.code;
  }
  if (!$isNull(request.confirm)) {
    query['Confirm'] = request.confirm;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ConfirmAvatar2dTrain',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 客户确认2d形象训练
 *
 * @param request ConfirmAvatar2dTrainRequest
 * @return ConfirmAvatar2dTrainResponse
 */
async function confirmAvatar2dTrain(request: ConfirmAvatar2dTrainRequest): ConfirmAvatar2dTrainResponse {
  var runtime = new $RuntimeOptions{};
  return confirmAvatar2dTrainWithOptions(request, runtime);
}

model Create2dAvatarRequest {
  callback?: boolean(name='Callback', example='false'),
  description?: string(name='Description'),
  image?: string(name='Image', example='https://virtual-human-assets.oss-cn-beijing.aliyuncs.com/2d_assets/xxx/xxx/xxx.png?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
  name?: string(name='Name', description='This parameter is required.'),
  orientation?: int32(name='Orientation', description='This parameter is required.', example='1'),
  portrait?: string(name='Portrait', description='This parameter is required.', example='https://virtual-human-assets.oss-cn-beijing.aliyuncs.com/2d_assets/xxx/xxx/xxx.png?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='9185'),
  transparent?: boolean(name='Transparent', description='This parameter is required.', example='true'),
  video?: string(name='Video', description='This parameter is required.', example='https://virtual-human-assets.oss-cn-beijing.aliyuncs.com/2d_assets/xxx/xxx/xxx.mov?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
}

model Create2dAvatarResponseBody = {
  code?: string(name='Code', example='10010001'),
  data?: {
    code?: string(name='Code', example='CH_2d_xxxxxx'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='0A466686-8F3A-55A6-93D8-A0225DC965C0'),
  success?: boolean(name='Success', example='false'),
}

model Create2dAvatarResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Create2dAvatarResponseBody(name='body'),
}

/**
 * @summary 提交一个创建2d人物的任务
 *
 * @param request Create2dAvatarRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return Create2dAvatarResponse
 */
@context("create2dAvatarWithContext")
async function create2dAvatarWithOptions(request: Create2dAvatarRequest, runtime: $RuntimeOptions): Create2dAvatarResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.callback)) {
    query['Callback'] = request.callback;
  }
  if (!$isNull(request.description)) {
    query['Description'] = request.description;
  }
  if (!$isNull(request.image)) {
    query['Image'] = request.image;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.orientation)) {
    query['Orientation'] = request.orientation;
  }
  if (!$isNull(request.portrait)) {
    query['Portrait'] = request.portrait;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  if (!$isNull(request.transparent)) {
    query['Transparent'] = request.transparent;
  }
  if (!$isNull(request.video)) {
    query['Video'] = request.video;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'Create2dAvatar',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交一个创建2d人物的任务
 *
 * @param request Create2dAvatarRequest
 * @return Create2dAvatarResponse
 */
async function create2dAvatar(request: Create2dAvatarRequest): Create2dAvatarResponse {
  var runtime = new $RuntimeOptions{};
  return create2dAvatarWithOptions(request, runtime);
}

model DeleteAvatarRequest {
  code?: string(name='Code', description='This parameter is required.', example='CH_2d_xxxxxx'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='9185'),
}

model DeleteAvatarResponseBody = {
  code?: string(name='Code', example='10050008'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
  success?: boolean(name='Success', example='false'),
}

model DeleteAvatarResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAvatarResponseBody(name='body'),
}

/**
 * @summary 删除数字人人物
 *
 * @param request DeleteAvatarRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAvatarResponse
 */
@context("deleteAvatarWithContext")
async function deleteAvatarWithOptions(request: DeleteAvatarRequest, runtime: $RuntimeOptions): DeleteAvatarResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.code)) {
    query['Code'] = request.code;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteAvatar',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除数字人人物
 *
 * @param request DeleteAvatarRequest
 * @return DeleteAvatarResponse
 */
async function deleteAvatar(request: DeleteAvatarRequest): DeleteAvatarResponse {
  var runtime = new $RuntimeOptions{};
  return deleteAvatarWithOptions(request, runtime);
}

model DuplexDecisionRequest {
  appId?: string(name='AppId', description='This parameter is required.', example='12131231'),
  bizRequestId?: string(name='BizRequestId', description='This parameter is required.', example='xxxxxxxxxx'),
  callTime?: int32(name='CallTime', description='This parameter is required.', example='1'),
  customKeywords?: [ string ](name='CustomKeywords'),
  dialogContext?: {
    curUtteranceIdx?: int32(name='CurUtteranceIdx', example='1'),
    histories?: [ 
      {
        robot?: string(name='Robot'),
        user?: string(name='User'),
      }
    ](name='Histories'),
  }(name='DialogContext'),
  dialogStatus?: string(name='DialogStatus', description='This parameter is required.', example='ROBOTTALK'),
  interruptType?: int32(name='InterruptType', example='1'),
  sessionId?: string(name='SessionId', description='This parameter is required.', example='xxxxxxxxxx'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='xxxxx'),
  text?: string(name='Text', description='This parameter is required.'),
}

model DuplexDecisionShrinkRequest {
  appId?: string(name='AppId', description='This parameter is required.', example='12131231'),
  bizRequestId?: string(name='BizRequestId', description='This parameter is required.', example='xxxxxxxxxx'),
  callTime?: int32(name='CallTime', description='This parameter is required.', example='1'),
  customKeywordsShrink?: string(name='CustomKeywords'),
  dialogContextShrink?: string(name='DialogContext'),
  dialogStatus?: string(name='DialogStatus', description='This parameter is required.', example='ROBOTTALK'),
  interruptType?: int32(name='InterruptType', example='1'),
  sessionId?: string(name='SessionId', description='This parameter is required.', example='xxxxxxxxxx'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='xxxxx'),
  text?: string(name='Text', description='This parameter is required.'),
}

model DuplexDecisionResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    actionType?: string(name='ActionType', example='UNDERTAKE'),
    grabType?: string(name='GrabType', example='GRAB'),
    outputText?: string(name='OutputText'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
  success?: string(name='Success', example='true'),
}

model DuplexDecisionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DuplexDecisionResponseBody(name='body'),
}

/**
 * @summary 语音双工决策接口API
 *
 * @param tmpReq DuplexDecisionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DuplexDecisionResponse
 */
@context("duplexDecisionWithContext")
async function duplexDecisionWithOptions(tmpReq: DuplexDecisionRequest, runtime: $RuntimeOptions): DuplexDecisionResponse {
  tmpReq.validate();
  var request = new DuplexDecisionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.customKeywords)) {
    request.customKeywordsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.customKeywords, 'CustomKeywords', 'json');
  }
  if (!$isNull(tmpReq.dialogContext)) {
    request.dialogContextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dialogContext, 'DialogContext', 'json');
  }
  var query = {};
  if (!$isNull(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!$isNull(request.bizRequestId)) {
    query['BizRequestId'] = request.bizRequestId;
  }
  if (!$isNull(request.callTime)) {
    query['CallTime'] = request.callTime;
  }
  if (!$isNull(request.customKeywordsShrink)) {
    query['CustomKeywords'] = request.customKeywordsShrink;
  }
  if (!$isNull(request.dialogContextShrink)) {
    query['DialogContext'] = request.dialogContextShrink;
  }
  if (!$isNull(request.dialogStatus)) {
    query['DialogStatus'] = request.dialogStatus;
  }
  if (!$isNull(request.interruptType)) {
    query['InterruptType'] = request.interruptType;
  }
  if (!$isNull(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  if (!$isNull(request.text)) {
    query['Text'] = request.text;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DuplexDecision',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 语音双工决策接口API
 *
 * @param request DuplexDecisionRequest
 * @return DuplexDecisionResponse
 */
async function duplexDecision(request: DuplexDecisionRequest): DuplexDecisionResponse {
  var runtime = new $RuntimeOptions{};
  return duplexDecisionWithOptions(request, runtime);
}

model GetVideoTaskInfoRequest {
  app?: {
    appId?: string(name='AppId', description='This parameter is required.', example='12131231'),
  }(name='App', description='This parameter is required.'),
  taskUuid?: string(name='TaskUuid', description='This parameter is required.', example='xxxx-xxxx-xxx'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='xxxxxx'),
}

model GetVideoTaskInfoShrinkRequest {
  appShrink?: string(name='App', description='This parameter is required.'),
  taskUuid?: string(name='TaskUuid', description='This parameter is required.', example='xxxx-xxxx-xxx'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='xxxxxx'),
}

model GetVideoTaskInfoResponseBody = {
  code?: string(name='Code', example='502'),
  data?: {
    process?: string(name='Process', example='99'),
    status?: string(name='Status', example='1'),
    taskResult?: {
      alphaUrl?: string(name='AlphaUrl'),
      attachmentUrl?: string(name='AttachmentUrl'),
      failCode?: string(name='FailCode', example='20002'),
      failReason?: string(name='FailReason'),
      previewPic?: string(name='PreviewPic'),
      subtitlesUrl?: string(name='SubtitlesUrl', example='xxx/xxx/xxx.ass'),
      videoDuration?: int32(name='VideoDuration'),
      videoUrl?: string(name='VideoUrl', example='xxx/xxxx/xx.mp4'),
      wordSubtitlesUrl?: string(name='WordSubtitlesUrl', description='字粒度的时间戳文件，特定任务支持', example='xxx/xxx/xxx.ass'),
    }(name='TaskResult'),
    taskUuid?: string(name='TaskUuid', example='xxxx-xxx-xx-xx'),
    type?: string(name='Type', example='1'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='xxx-xxx-xxx-xx'),
  success?: boolean(name='Success', example='true'),
}

model GetVideoTaskInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVideoTaskInfoResponseBody(name='body'),
}

/**
 * @summary 获取一个数字人离线视频生成任务的详情
 *
 * @param tmpReq GetVideoTaskInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetVideoTaskInfoResponse
 */
@context("getVideoTaskInfoWithContext")
async function getVideoTaskInfoWithOptions(tmpReq: GetVideoTaskInfoRequest, runtime: $RuntimeOptions): GetVideoTaskInfoResponse {
  tmpReq.validate();
  var request = new GetVideoTaskInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.app)) {
    request.appShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.app, 'App', 'json');
  }
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetVideoTaskInfo',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取一个数字人离线视频生成任务的详情
 *
 * @param request GetVideoTaskInfoRequest
 * @return GetVideoTaskInfoResponse
 */
async function getVideoTaskInfo(request: GetVideoTaskInfoRequest): GetVideoTaskInfoResponse {
  var runtime = new $RuntimeOptions{};
  return getVideoTaskInfoWithOptions(request, runtime);
}

model LicenseAuthRequest {
  appId?: string(name='AppId', description='This parameter is required.', example='dsdsf1'),
  license?: string(name='License', description='This parameter is required.', example='FqTyXFrIqbIGnb_oqIvszv1wffODnpCDNDvOc6xNXbAhak1AwsfrCo2cSrPFAhHEitOb9VEG'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='9185'),
}

model LicenseAuthResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    token?: string(name='Token', example='vHOgG+IbVrm0QXTzVB/O4GJJLEAWr67gl7NGWowHjioMKIh2yc9PNu21S7t8mjuVo3Z'),
  }(name='Data'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
  success?: boolean(name='Success', example='true'),
}

model LicenseAuthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LicenseAuthResponseBody(name='body'),
}

/**
 * @summary 端渲染license鉴权验证
 *
 * @param request LicenseAuthRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return LicenseAuthResponse
 */
@context("licenseAuthWithContext")
async function licenseAuthWithOptions(request: LicenseAuthRequest, runtime: $RuntimeOptions): LicenseAuthResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!$isNull(request.license)) {
    query['License'] = request.license;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'LicenseAuth',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 端渲染license鉴权验证
 *
 * @param request LicenseAuthRequest
 * @return LicenseAuthResponse
 */
async function licenseAuth(request: LicenseAuthRequest): LicenseAuthResponse {
  var runtime = new $RuntimeOptions{};
  return licenseAuthWithOptions(request, runtime);
}

model QueryAvatarRequest {
  code?: string(name='Code', description='This parameter is required.', example='CH_2d_xxxxxx'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='9185'),
}

model QueryAvatarResponseBody = {
  code?: string(name='Code', example='10050008'),
  data?: {
    allLocateImages?: map[string]any(name='AllLocateImages'),
    avatarType?: string(name='AvatarType', example='0'),
    description?: string(name='Description'),
    image?: string(name='Image', example='https://virtual-human-assets.oss-cn-beijing.aliyuncs.com/2d_assets/xxx/xxx/xxx.png?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
    makeFailReason?: string(name='MakeFailReason'),
    makeStage?: string(name='MakeStage'),
    makeStatus?: string(name='MakeStatus'),
    modelType?: string(name='ModelType', example='2d'),
    name?: string(name='Name'),
    portrait?: string(name='Portrait', example='https://virtual-human-assets.oss-cn-beijing.aliyuncs.com/2d_assets/xxx/xxx/xxx.png?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
    preview?: string(name='Preview'),
    supportedResolutions?: {
      offline?: [ 
        {
          desc?: string(name='Desc'),
          height?: int32(name='Height', example='1920'),
          width?: int32(name='Width', example='1080'),
        }
      ](name='Offline'),
      online?: [ 
        {
          desc?: string(name='Desc'),
          height?: int32(name='Height', example='1920'),
          width?: int32(name='Width', example='1080'),
        }
      ](name='Online'),
    }(name='SupportedResolutions'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='4C8BF3A5-948F-1F89-AACD-D18DEF52D1XX'),
  success?: boolean(name='Success', example='true'),
}

model QueryAvatarResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAvatarResponseBody(name='body'),
}

/**
 * @summary 资产服务-根据人物code查询人物详情
 *
 * @param request QueryAvatarRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryAvatarResponse
 */
@context("queryAvatarWithContext")
async function queryAvatarWithOptions(request: QueryAvatarRequest, runtime: $RuntimeOptions): QueryAvatarResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.code)) {
    query['Code'] = request.code;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryAvatar',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 资产服务-根据人物code查询人物详情
 *
 * @param request QueryAvatarRequest
 * @return QueryAvatarResponse
 */
async function queryAvatar(request: QueryAvatarRequest): QueryAvatarResponse {
  var runtime = new $RuntimeOptions{};
  return queryAvatarWithOptions(request, runtime);
}

model QueryAvatarListRequest {
  modelType?: string(name='ModelType', description='This parameter is required.', example='2d'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='9185'),
}

model QueryAvatarListResponseBody = {
  code?: string(name='Code', example='10050008'),
  data?: {
    list?: [ 
      {
        avatarType?: string(name='AvatarType', example='0'),
        code?: string(name='Code', example='CH_2d_37AsLhUrBxacjHP0'),
        description?: string(name='Description'),
        image?: string(name='Image', example='https://virtual-human-assets.oss-cn-beijing.aliyuncs.com/2d_assets/xxx/xxx/xxx.png?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
        makeFailReason?: string(name='MakeFailReason'),
        makeStage?: string(name='MakeStage'),
        makeStatus?: string(name='MakeStatus'),
        modelType?: string(name='ModelType', example='2d'),
        name?: string(name='Name'),
        portrait?: string(name='Portrait', example='https://virtual-human-assets.oss-cn-beijing.aliyuncs.com/2d_assets/xxx/xxx/xxx.png?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
        preview?: string(name='Preview'),
        supportedResolutions?: {
          offline?: [ 
            {
              desc?: string(name='Desc'),
              height?: int32(name='Height', example='1920'),
              width?: int32(name='Width', example='1080'),
            }
          ](name='Offline'),
          online?: [ 
            {
              desc?: string(name='Desc'),
              height?: int32(name='Height', example='1920'),
              width?: int32(name='Width', example='1080'),
            }
          ](name='Online'),
        }(name='SupportedResolutions'),
      }
    ](name='List'),
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='4'),
    totalPage?: int32(name='TotalPage', example='1'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
  success?: boolean(name='Success', example='true'),
}

model QueryAvatarListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAvatarListResponseBody(name='body'),
}

/**
 * @summary 资产服务-查询人物列表
 *
 * @param request QueryAvatarListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryAvatarListResponse
 */
@context("queryAvatarListWithContext")
async function queryAvatarListWithOptions(request: QueryAvatarListRequest, runtime: $RuntimeOptions): QueryAvatarListResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.modelType)) {
    query['ModelType'] = request.modelType;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryAvatarList',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 资产服务-查询人物列表
 *
 * @param request QueryAvatarListRequest
 * @return QueryAvatarListResponse
 */
async function queryAvatarList(request: QueryAvatarListRequest): QueryAvatarListResponse {
  var runtime = new $RuntimeOptions{};
  return queryAvatarListWithOptions(request, runtime);
}

model QueryRunningInstanceRequest {
  app?: {
    appId?: string(name='AppId', description='This parameter is required.', example='ALIPUB5748B17121450'),
  }(name='App', description='This parameter is required.'),
  sessionId?: string(name='SessionId', example='76898bd3b90b4a65b1c078d8824a2e9c'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='9185'),
}

model QueryRunningInstanceShrinkRequest {
  appShrink?: string(name='App', description='This parameter is required.'),
  sessionId?: string(name='SessionId', example='76898bd3b90b4a65b1c078d8824a2e9c'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='9185'),
}

model QueryRunningInstanceResponseBody = {
  code?: string(name='Code', example='0'),
  data?: [ 
    {
      channel?: {
        appId?: string(name='AppId', example='ONEX7E28C7C221854'),
        channelId?: string(name='ChannelId', example='108293819'),
        expiredTime?: string(name='ExpiredTime', example='2022-01-04T16:00Z'),
        gslb?: [ string ](name='Gslb'),
        nonce?: string(name='Nonce', example='CK-9b5c335b9ae75879441ee7b363886418'),
        token?: string(name='Token', example='e59f61b2482b4d0562ab542da3f824f7'),
        type?: string(name='Type', example='6'),
        userId?: string(name='UserId', example='userId'),
        userInfoInChannel?: string(name='UserInfoInChannel'),
      }(name='Channel'),
      sessionId?: string(name='SessionId', example='4f63f9e9788449f9adc88d9438c8dec3'),
      token?: string(name='Token'),
      user?: {
        userId?: string(name='UserId', example='23423'),
        userName?: string(name='UserName'),
      }(name='User'),
    }
  ](name='Data'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
  success?: boolean(name='Success', example='True'),
}

model QueryRunningInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryRunningInstanceResponseBody(name='body'),
}

/**
 * @summary 查询运行中instance列表，同时支持指定sessionId查询运行实例，查询列表时最多返回100条
 *
 * @param tmpReq QueryRunningInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryRunningInstanceResponse
 */
@context("queryRunningInstanceWithContext")
async function queryRunningInstanceWithOptions(tmpReq: QueryRunningInstanceRequest, runtime: $RuntimeOptions): QueryRunningInstanceResponse {
  tmpReq.validate();
  var request = new QueryRunningInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.app)) {
    request.appShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.app, 'App', 'json');
  }
  var query = {};
  if (!$isNull(request.appShrink)) {
    query['App'] = request.appShrink;
  }
  if (!$isNull(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryRunningInstance',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询运行中instance列表，同时支持指定sessionId查询运行实例，查询列表时最多返回100条
 *
 * @param request QueryRunningInstanceRequest
 * @return QueryRunningInstanceResponse
 */
async function queryRunningInstance(request: QueryRunningInstanceRequest): QueryRunningInstanceResponse {
  var runtime = new $RuntimeOptions{};
  return queryRunningInstanceWithOptions(request, runtime);
}

model QueryTimedResetOperateStatusRequest {
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='avatar_operation_public_cn-7pp2****802'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='xxxxx'),
}

model QueryTimedResetOperateStatusResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    instanceId?: string(name='InstanceId', example='avatar_operation_public_cn-7pp2****802'),
    status?: long(name='Status', example='10'),
    statusStr?: string(name='StatusStr'),
    tenantId?: string(name='TenantId', example='xxxxx'),
  }(name='Data'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', description='Id of the request', example='74d42913-f13c-47ac-a8ac-8610685688eb'),
  success?: boolean(name='Success', example='true'),
}

model QueryTimedResetOperateStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTimedResetOperateStatusResponseBody(name='body'),
}

/**
 * @summary 定时停复机实例开关机状态查询接口
 *
 * @param request QueryTimedResetOperateStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryTimedResetOperateStatusResponse
 */
@context("queryTimedResetOperateStatusWithContext")
async function queryTimedResetOperateStatusWithOptions(request: QueryTimedResetOperateStatusRequest, runtime: $RuntimeOptions): QueryTimedResetOperateStatusResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryTimedResetOperateStatus',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 定时停复机实例开关机状态查询接口
 *
 * @param request QueryTimedResetOperateStatusRequest
 * @return QueryTimedResetOperateStatusResponse
 */
async function queryTimedResetOperateStatus(request: QueryTimedResetOperateStatusRequest): QueryTimedResetOperateStatusResponse {
  var runtime = new $RuntimeOptions{};
  return queryTimedResetOperateStatusWithOptions(request, runtime);
}

model QueryVideoTaskInfoRequest {
  app?: {
    appId?: string(name='AppId', description='This parameter is required.', example='xxxxxxxxxx'),
  }(name='App', description='This parameter is required.'),
  orderById?: string(name='OrderById', example='desc'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  status?: int32(name='Status', example='3'),
  taskUuid?: string(name='TaskUuid', example='xxxx-xxxx-xxx'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='xxxxxx'),
  title?: string(name='Title'),
  type?: int32(name='Type', example='1'),
}

model QueryVideoTaskInfoShrinkRequest {
  appShrink?: string(name='App', description='This parameter is required.'),
  orderById?: string(name='OrderById', example='desc'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  status?: int32(name='Status', example='3'),
  taskUuid?: string(name='TaskUuid', example='xxxx-xxxx-xxx'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='xxxxxx'),
  title?: string(name='Title'),
  type?: int32(name='Type', example='1'),
}

model QueryVideoTaskInfoResponseBody = {
  code?: string(name='Code', example='10010001'),
  data?: {
    list?: [ 
      {
        status?: int32(name='Status', example='3'),
        taskResult?: {
          alphaUrl?: string(name='AlphaUrl'),
          attachmentUrl?: string(name='AttachmentUrl'),
          failCode?: string(name='FailCode', example='10001001'),
          failReason?: string(name='FailReason'),
          previewPic?: string(name='PreviewPic'),
          subtitlesUrl?: string(name='SubtitlesUrl', example='xxx/xxx/xxx.ass'),
          videoDuration?: int32(name='VideoDuration', example='1111'),
          videoUrl?: string(name='VideoUrl', example='xxx/xxxx/xx.mp4'),
          wordSubtitlesUrl?: string(name='WordSubtitlesUrl', example='xxx/xxx/xxx.ass'),
        }(name='TaskResult'),
        taskUuid?: string(name='TaskUuid', example='789c45a5-2dca-4cd2-8fa7-f70a77e335ad'),
        title?: string(name='Title'),
        type?: int32(name='Type', example='1'),
      }
    ](name='List'),
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='10'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='0A466686-8F3A-55A6-93D8-A0225DC965C0'),
  success?: boolean(name='Success', example='true'),
}

model QueryVideoTaskInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryVideoTaskInfoResponseBody(name='body'),
}

/**
 * @summary 分页查询视频合成任务
 *
 * @param tmpReq QueryVideoTaskInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryVideoTaskInfoResponse
 */
@context("queryVideoTaskInfoWithContext")
async function queryVideoTaskInfoWithOptions(tmpReq: QueryVideoTaskInfoRequest, runtime: $RuntimeOptions): QueryVideoTaskInfoResponse {
  tmpReq.validate();
  var request = new QueryVideoTaskInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.app)) {
    request.appShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.app, 'App', 'json');
  }
  var query = {};
  if (!$isNull(request.appShrink)) {
    query['App'] = request.appShrink;
  }
  if (!$isNull(request.orderById)) {
    query['OrderById'] = request.orderById;
  }
  if (!$isNull(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.status)) {
    query['Status'] = request.status;
  }
  if (!$isNull(request.taskUuid)) {
    query['TaskUuid'] = request.taskUuid;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  if (!$isNull(request.title)) {
    query['Title'] = request.title;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryVideoTaskInfo',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 分页查询视频合成任务
 *
 * @param request QueryVideoTaskInfoRequest
 * @return QueryVideoTaskInfoResponse
 */
async function queryVideoTaskInfo(request: QueryVideoTaskInfoRequest): QueryVideoTaskInfoResponse {
  var runtime = new $RuntimeOptions{};
  return queryVideoTaskInfoWithOptions(request, runtime);
}

model Render3dAvatarRequest {
  appId?: string(name='AppId', description='This parameter is required.', example='dsdsf1'),
  code?: string(name='Code', description='This parameter is required.', example='CH_2d_xxxxxx'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='9185'),
}

model Render3dAvatarResponseBody = {
  code?: string(name='Code', example='10010001'),
  data?: {
    renderData?: string(name='RenderData', example='{"xxxx":"xxxxxxxx"}'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='4C8BF3A5-948F-1F89-AACD-D18DEF52D1XX'),
  success?: boolean(name='Success', example='true'),
}

model Render3dAvatarResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Render3dAvatarResponseBody(name='body'),
}

/**
 * @summary 3d人物渲染信息
 *
 * @param request Render3dAvatarRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return Render3dAvatarResponse
 */
@context("render3dAvatarWithContext")
async function render3dAvatarWithOptions(request: Render3dAvatarRequest, runtime: $RuntimeOptions): Render3dAvatarResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!$isNull(request.code)) {
    query['Code'] = request.code;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'Render3dAvatar',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 3d人物渲染信息
 *
 * @param request Render3dAvatarRequest
 * @return Render3dAvatarResponse
 */
async function render3dAvatar(request: Render3dAvatarRequest): Render3dAvatarResponse {
  var runtime = new $RuntimeOptions{};
  return render3dAvatarWithOptions(request, runtime);
}

model SendCommandRequest {
  code?: string(name='Code', description='This parameter is required.', example='INTERRUPT'),
  content?: map[string]any(name='Content', example='{}'),
  feedback?: boolean(name='Feedback', example='false'),
  sessionId?: string(name='SessionId', description='This parameter is required.', example='5615'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='76898bd3b90b4a65b1c078d8824a2e9c'),
  uniqueCode?: string(name='UniqueCode', description='This parameter is required.', example='0000001000586737'),
}

model SendCommandShrinkRequest {
  code?: string(name='Code', description='This parameter is required.', example='INTERRUPT'),
  contentShrink?: string(name='Content', example='{}'),
  feedback?: boolean(name='Feedback', example='false'),
  sessionId?: string(name='SessionId', description='This parameter is required.', example='5615'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='76898bd3b90b4a65b1c078d8824a2e9c'),
  uniqueCode?: string(name='UniqueCode', description='This parameter is required.', example='0000001000586737'),
}

model SendCommandResponseBody = {
  code?: string(name='Code', example='10010001'),
  data?: {
    sessionId?: string(name='SessionId', example='9929391f61ef9e1c0000000000000006'),
    uniqueCode?: string(name='UniqueCode', example='0000001000586737'),
  }(name='Data'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', description='Id of the request', example='0A466686-8F3A-55A6-93D8-A0225DC965C0'),
  success?: boolean(name='Success', example='true'),
}

model SendCommandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendCommandResponseBody(name='body'),
}

/**
 * @summary 发送指令
 *
 * @param tmpReq SendCommandRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SendCommandResponse
 */
@context("sendCommandWithContext")
async function sendCommandWithOptions(tmpReq: SendCommandRequest, runtime: $RuntimeOptions): SendCommandResponse {
  tmpReq.validate();
  var request = new SendCommandShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.content)) {
    request.contentShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.content, 'Content', 'json');
  }
  var query = {};
  if (!$isNull(request.code)) {
    query['Code'] = request.code;
  }
  if (!$isNull(request.contentShrink)) {
    query['Content'] = request.contentShrink;
  }
  if (!$isNull(request.feedback)) {
    query['Feedback'] = request.feedback;
  }
  if (!$isNull(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  if (!$isNull(request.uniqueCode)) {
    query['UniqueCode'] = request.uniqueCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SendCommand',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发送指令
 *
 * @param request SendCommandRequest
 * @return SendCommandResponse
 */
async function sendCommand(request: SendCommandRequest): SendCommandResponse {
  var runtime = new $RuntimeOptions{};
  return sendCommandWithOptions(request, runtime);
}

model SendMessageRequest {
  feedback?: boolean(name='Feedback', example='false'),
  sessionId?: string(name='SessionId', example='76898bd3b90b4a65b1c078d8824a2e9c'),
  streamExtension?: {
    index?: int32(name='Index'),
    isStream?: boolean(name='IsStream'),
    position?: string(name='Position'),
  }(name='StreamExtension'),
  tenantId?: long(name='TenantId', example='5615'),
  textRequest?: {
    commandType?: string(name='CommandType'),
    id?: string(name='Id', example='0000001000586737'),
    speechText?: string(name='SpeechText'),
    interrupt?: boolean(name='interrupt', example='false'),
  }(name='TextRequest'),
  VAMLRequest?: {
    code?: string(name='Code', example='VAML_REQUEST'),
    vaml?: string(name='Vaml'),
  }(name='VAMLRequest'),
}

model SendMessageShrinkRequest {
  feedback?: boolean(name='Feedback', example='false'),
  sessionId?: string(name='SessionId', example='76898bd3b90b4a65b1c078d8824a2e9c'),
  streamExtensionShrink?: string(name='StreamExtension'),
  tenantId?: long(name='TenantId', example='5615'),
  textRequestShrink?: string(name='TextRequest'),
  VAMLRequestShrink?: string(name='VAMLRequest'),
}

model SendMessageResponseBody = {
  code?: string(name='Code', description='Id of the request', example='QUERY_ACCOUNT_INFO_ERROR'),
  data?: {
    requestId?: string(name='RequestId', example='0A466686-8F3A-55A6-93D8-A0225DC965C0'),
    sessionId?: string(name='SessionId', example='9929391f61ef9e1c0000000000000006'),
  }(name='Data'),
  message?: string(name='Message', example='operation success.'),
  success?: boolean(name='Success', example='True'),
}

model SendMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendMessageResponseBody(name='body'),
}

/**
 * @summary 驱动一路流
 *
 * @param tmpReq SendMessageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SendMessageResponse
 */
@context("sendMessageWithContext")
async function sendMessageWithOptions(tmpReq: SendMessageRequest, runtime: $RuntimeOptions): SendMessageResponse {
  tmpReq.validate();
  var request = new SendMessageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.streamExtension)) {
    request.streamExtensionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.streamExtension, 'StreamExtension', 'json');
  }
  if (!$isNull(tmpReq.textRequest)) {
    request.textRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.textRequest, 'TextRequest', 'json');
  }
  if (!$isNull(tmpReq.VAMLRequest)) {
    request.VAMLRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.VAMLRequest, 'VAMLRequest', 'json');
  }
  var query = {};
  if (!$isNull(request.feedback)) {
    query['Feedback'] = request.feedback;
  }
  if (!$isNull(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!$isNull(request.streamExtensionShrink)) {
    query['StreamExtension'] = request.streamExtensionShrink;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  if (!$isNull(request.textRequestShrink)) {
    query['TextRequest'] = request.textRequestShrink;
  }
  if (!$isNull(request.VAMLRequestShrink)) {
    query['VAMLRequest'] = request.VAMLRequestShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SendMessage',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 驱动一路流
 *
 * @param request SendMessageRequest
 * @return SendMessageResponse
 */
async function sendMessage(request: SendMessageRequest): SendMessageResponse {
  var runtime = new $RuntimeOptions{};
  return sendMessageWithOptions(request, runtime);
}

model SendTextRequest {
  feedback?: boolean(name='Feedback', example='false'),
  interrupt?: boolean(name='Interrupt', example='true'),
  sessionId?: string(name='SessionId', description='This parameter is required.', example='5615'),
  streamExtension?: {
    index?: int32(name='Index', example='0'),
    isStream?: boolean(name='IsStream', example='true'),
    position?: string(name='Position', example='start'),
  }(name='StreamExtension'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='76898bd3b90b4a65b1c078d8824a2e9c'),
  text?: string(name='Text', description='This parameter is required.'),
  uniqueCode?: string(name='UniqueCode', description='This parameter is required.', example='0000001000586737'),
}

model SendTextShrinkRequest {
  feedback?: boolean(name='Feedback', example='false'),
  interrupt?: boolean(name='Interrupt', example='true'),
  sessionId?: string(name='SessionId', description='This parameter is required.', example='5615'),
  streamExtensionShrink?: string(name='StreamExtension'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='76898bd3b90b4a65b1c078d8824a2e9c'),
  text?: string(name='Text', description='This parameter is required.'),
  uniqueCode?: string(name='UniqueCode', description='This parameter is required.', example='0000001000586737'),
}

model SendTextResponseBody = {
  code?: string(name='Code', example='10010001'),
  data?: {
    sessionId?: string(name='SessionId', example='9929391f61ef9e1c0000000000000006'),
    uniqueCode?: string(name='UniqueCode', example='0000001000586737'),
  }(name='Data'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', description='Id of the request', example='0A466686-8F3A-55A6-93D8-A0225DC965C0'),
  success?: boolean(name='Success', example='true'),
}

model SendTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendTextResponseBody(name='body'),
}

/**
 * @summary 发送播报文本
 *
 * @param tmpReq SendTextRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SendTextResponse
 */
@context("sendTextWithContext")
async function sendTextWithOptions(tmpReq: SendTextRequest, runtime: $RuntimeOptions): SendTextResponse {
  tmpReq.validate();
  var request = new SendTextShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.streamExtension)) {
    request.streamExtensionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.streamExtension, 'StreamExtension', 'json');
  }
  var query = {};
  if (!$isNull(request.feedback)) {
    query['Feedback'] = request.feedback;
  }
  if (!$isNull(request.interrupt)) {
    query['Interrupt'] = request.interrupt;
  }
  if (!$isNull(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!$isNull(request.streamExtensionShrink)) {
    query['StreamExtension'] = request.streamExtensionShrink;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  if (!$isNull(request.text)) {
    query['Text'] = request.text;
  }
  if (!$isNull(request.uniqueCode)) {
    query['UniqueCode'] = request.uniqueCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SendText',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发送播报文本
 *
 * @param request SendTextRequest
 * @return SendTextResponse
 */
async function sendText(request: SendTextRequest): SendTextResponse {
  var runtime = new $RuntimeOptions{};
  return sendTextWithOptions(request, runtime);
}

model SendVamlRequest {
  sessionId?: string(name='SessionId', description='This parameter is required.', example='76898bd3b90b4a65b1c078d8824a2e9c'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='5615'),
  vaml?: string(name='Vaml', description='This parameter is required.'),
}

model SendVamlResponseBody = {
  code?: string(name='Code', example='10010001'),
  data?: {
    sessionId?: string(name='SessionId', example='76898bd3b90b4a65b1c078d8824a2e9c'),
    uniqueCode?: string(name='UniqueCode', example='0000001000586737'),
  }(name='Data'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', description='Id of the request', example='0A466686-8F3A-55A6-93D8-A0225DC965C0'),
  success?: boolean(name='Success', example='true'),
}

model SendVamlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendVamlResponseBody(name='body'),
}

/**
 * @summary 发送vaml报表内容
 *
 * @param request SendVamlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SendVamlResponse
 */
@context("sendVamlWithContext")
async function sendVamlWithOptions(request: SendVamlRequest, runtime: $RuntimeOptions): SendVamlResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  if (!$isNull(request.vaml)) {
    query['Vaml'] = request.vaml;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SendVaml',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发送vaml报表内容
 *
 * @param request SendVamlRequest
 * @return SendVamlResponse
 */
async function sendVaml(request: SendVamlRequest): SendVamlResponse {
  var runtime = new $RuntimeOptions{};
  return sendVamlWithOptions(request, runtime);
}

model StartInstanceRequest {
  app?: {
    appId?: string(name='AppId', example='ALIPUB5748B17121450'),
  }(name='App'),
  bizId?: string(name='BizId'),
  channel?: {
    reqConfig?: map[string]any(name='ReqConfig'),
    type?: string(name='Type', example='RTMP'),
  }(name='Channel'),
  commandRequest?: {
    alphaSwitch?: boolean(name='AlphaSwitch'),
    backGroundImageUrl?: string(name='BackGroundImageUrl'),
    locate?: int32(name='Locate'),
  }(name='CommandRequest'),
  tenantId?: long(name='TenantId', example='9185'),
  textRequest?: {
    pitchRate?: int32(name='PitchRate'),
    speechRate?: int32(name='SpeechRate'),
    voice?: string(name='Voice'),
    volume?: int32(name='Volume'),
  }(name='TextRequest'),
  user?: {
    userId?: string(name='UserId', example='23423'),
    userName?: string(name='UserName'),
  }(name='User'),
}

model StartInstanceShrinkRequest {
  appShrink?: string(name='App'),
  bizId?: string(name='BizId'),
  channelShrink?: string(name='Channel'),
  commandRequestShrink?: string(name='CommandRequest'),
  tenantId?: long(name='TenantId', example='9185'),
  textRequestShrink?: string(name='TextRequest'),
  userShrink?: string(name='User'),
}

model StartInstanceResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    channel?: {
      appId?: string(name='AppId', example='ONEX7E28C7C221854'),
      channelId?: string(name='ChannelId', example='108293819'),
      expiredTime?: string(name='ExpiredTime'),
      gslb?: [ string ](name='Gslb'),
      nonce?: string(name='Nonce', example='CK-9b5c335b9ae75879441ee7b363886418'),
      token?: string(name='Token', example='e59f61b2482b4d0562ab542da3f824f7'),
      type?: string(name='Type', example='6'),
      userId?: string(name='UserId', example='userId'),
      userInfoInChannel?: string(name='UserInfoInChannel'),
    }(name='Channel'),
    requestId?: string(name='RequestId'),
    sessionId?: string(name='SessionId', example='4f63f9e9788449f9adc88d9438c8dec3'),
    token?: string(name='Token', example='879441ee7b363886418'),
  }(name='Data'),
  message?: string(name='Message'),
  success?: boolean(name='Success', example='True'),
}

model StartInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartInstanceResponseBody(name='body'),
}

/**
 * @summary 启动一路流
 *
 * @param tmpReq StartInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartInstanceResponse
 */
@context("startInstanceWithContext")
async function startInstanceWithOptions(tmpReq: StartInstanceRequest, runtime: $RuntimeOptions): StartInstanceResponse {
  tmpReq.validate();
  var request = new StartInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.app)) {
    request.appShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.app, 'App', 'json');
  }
  if (!$isNull(tmpReq.channel)) {
    request.channelShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.channel, 'Channel', 'json');
  }
  if (!$isNull(tmpReq.commandRequest)) {
    request.commandRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.commandRequest, 'CommandRequest', 'json');
  }
  if (!$isNull(tmpReq.textRequest)) {
    request.textRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.textRequest, 'TextRequest', 'json');
  }
  if (!$isNull(tmpReq.user)) {
    request.userShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.user, 'User', 'json');
  }
  var query = {};
  if (!$isNull(request.appShrink)) {
    query['App'] = request.appShrink;
  }
  if (!$isNull(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!$isNull(request.channelShrink)) {
    query['Channel'] = request.channelShrink;
  }
  if (!$isNull(request.commandRequestShrink)) {
    query['CommandRequest'] = request.commandRequestShrink;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  if (!$isNull(request.textRequestShrink)) {
    query['TextRequest'] = request.textRequestShrink;
  }
  if (!$isNull(request.userShrink)) {
    query['User'] = request.userShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'StartInstance',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 启动一路流
 *
 * @param request StartInstanceRequest
 * @return StartInstanceResponse
 */
async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  var runtime = new $RuntimeOptions{};
  return startInstanceWithOptions(request, runtime);
}

model StartTimedResetOperateRequest {
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='avatar_operation_public_cn-7pp2****802'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='xxxxxx'),
}

model StartTimedResetOperateResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    instanceId?: string(name='InstanceId'),
    tenantId?: long(name='TenantId', example='xxxxxx'),
  }(name='Data'),
  message?: string(name='Message', example='operation success.'),
  requestId?: string(name='RequestId', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
  success?: boolean(name='Success', example='true'),
}

model StartTimedResetOperateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartTimedResetOperateResponseBody(name='body'),
}

/**
 * @summary 停复机开机操作
 *
 * @param request StartTimedResetOperateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartTimedResetOperateResponse
 */
@context("startTimedResetOperateWithContext")
async function startTimedResetOperateWithOptions(request: StartTimedResetOperateRequest, runtime: $RuntimeOptions): StartTimedResetOperateResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'StartTimedResetOperate',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 停复机开机操作
 *
 * @param request StartTimedResetOperateRequest
 * @return StartTimedResetOperateResponse
 */
async function startTimedResetOperate(request: StartTimedResetOperateRequest): StartTimedResetOperateResponse {
  var runtime = new $RuntimeOptions{};
  return startTimedResetOperateWithOptions(request, runtime);
}

model StopInstanceRequest {
  sessionId?: string(name='SessionId', example='9adb569b-f66b-4e92-8b9d-62aa626f8318'),
  tenantId?: long(name='TenantId', example='234234'),
}

model StopInstanceResponseBody = {
  code?: string(name='Code'),
  data?: {
    requestId?: string(name='RequestId'),
    sessionId?: string(name='SessionId', example='6296cc143d2c42899dae6eff19e8ac28'),
  }(name='Data'),
  message?: string(name='Message'),
  success?: boolean(name='Success', example='True'),
}

model StopInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopInstanceResponseBody(name='body'),
}

/**
 * @summary 关闭一路流
 *
 * @param request StopInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopInstanceResponse
 */
@context("stopInstanceWithContext")
async function stopInstanceWithOptions(request: StopInstanceRequest, runtime: $RuntimeOptions): StopInstanceResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'StopInstance',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 关闭一路流
 *
 * @param request StopInstanceRequest
 * @return StopInstanceResponse
 */
async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  var runtime = new $RuntimeOptions{};
  return stopInstanceWithOptions(request, runtime);
}

model SubmitAudioTo2DAvatarVideoTaskRequest {
  app?: {
    appId?: string(name='AppId', description='This parameter is required.', example='3dt4sh3948'),
  }(name='App', description='This parameter is required.'),
  audioInfo?: {
    sampleRate?: int32(name='SampleRate'),
  }(name='AudioInfo'),
  avatarInfo?: {
    code?: string(name='Code', example='CH_2d_xxxxxxx'),
    height?: int32(name='Height'),
    width?: int32(name='Width'),
    x?: int32(name='X'),
    y?: int32(name='Y'),
  }(name='AvatarInfo'),
  callback?: boolean(name='Callback'),
  callbackParams?: string(name='CallbackParams'),
  extParams?: string(name='ExtParams'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='20516'),
  title?: string(name='Title', description='This parameter is required.'),
  url?: string(name='Url', description='This parameter is required.'),
  videoInfo?: {
    alphaFormat?: int32(name='AlphaFormat', example='1'),
    backgroundImageUrl?: string(name='BackgroundImageUrl'),
    isAlpha?: boolean(name='IsAlpha', example='false'),
    resolution?: int32(name='Resolution', example='3'),
  }(name='VideoInfo'),
}

model SubmitAudioTo2DAvatarVideoTaskShrinkRequest {
  appShrink?: string(name='App', description='This parameter is required.'),
  audioInfoShrink?: string(name='AudioInfo'),
  avatarInfoShrink?: string(name='AvatarInfo'),
  callback?: boolean(name='Callback'),
  callbackParams?: string(name='CallbackParams'),
  extParams?: string(name='ExtParams'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='20516'),
  title?: string(name='Title', description='This parameter is required.'),
  url?: string(name='Url', description='This parameter is required.'),
  videoInfoShrink?: string(name='VideoInfo'),
}

model SubmitAudioTo2DAvatarVideoTaskResponseBody = {
  code?: string(name='Code', example='10050008'),
  data?: {
    taskUuid?: string(name='TaskUuid', example='xxxx-xxx-xx-xx'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='4C8BF3A5-948F-1F89-AACD-D18DEF52D1XX'),
  success?: boolean(name='Success', example='true'),
}

model SubmitAudioTo2DAvatarVideoTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitAudioTo2DAvatarVideoTaskResponseBody(name='body'),
}

/**
 * @summary 提交一个音频转2D数字人播报视频生成的任务
 *
 * @param tmpReq SubmitAudioTo2DAvatarVideoTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitAudioTo2DAvatarVideoTaskResponse
 */
@context("submitAudioTo2DAvatarVideoTaskWithContext")
async function submitAudioTo2DAvatarVideoTaskWithOptions(tmpReq: SubmitAudioTo2DAvatarVideoTaskRequest, runtime: $RuntimeOptions): SubmitAudioTo2DAvatarVideoTaskResponse {
  tmpReq.validate();
  var request = new SubmitAudioTo2DAvatarVideoTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.app)) {
    request.appShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.app, 'App', 'json');
  }
  if (!$isNull(tmpReq.audioInfo)) {
    request.audioInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.audioInfo, 'AudioInfo', 'json');
  }
  if (!$isNull(tmpReq.avatarInfo)) {
    request.avatarInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.avatarInfo, 'AvatarInfo', 'json');
  }
  if (!$isNull(tmpReq.videoInfo)) {
    request.videoInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.videoInfo, 'VideoInfo', 'json');
  }
  var query = {};
  if (!$isNull(request.appShrink)) {
    query['App'] = request.appShrink;
  }
  if (!$isNull(request.audioInfoShrink)) {
    query['AudioInfo'] = request.audioInfoShrink;
  }
  if (!$isNull(request.avatarInfoShrink)) {
    query['AvatarInfo'] = request.avatarInfoShrink;
  }
  if (!$isNull(request.callback)) {
    query['Callback'] = request.callback;
  }
  if (!$isNull(request.callbackParams)) {
    query['CallbackParams'] = request.callbackParams;
  }
  if (!$isNull(request.extParams)) {
    query['ExtParams'] = request.extParams;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  if (!$isNull(request.title)) {
    query['Title'] = request.title;
  }
  if (!$isNull(request.url)) {
    query['Url'] = request.url;
  }
  if (!$isNull(request.videoInfoShrink)) {
    query['VideoInfo'] = request.videoInfoShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SubmitAudioTo2DAvatarVideoTask',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交一个音频转2D数字人播报视频生成的任务
 *
 * @param request SubmitAudioTo2DAvatarVideoTaskRequest
 * @return SubmitAudioTo2DAvatarVideoTaskResponse
 */
async function submitAudioTo2DAvatarVideoTask(request: SubmitAudioTo2DAvatarVideoTaskRequest): SubmitAudioTo2DAvatarVideoTaskResponse {
  var runtime = new $RuntimeOptions{};
  return submitAudioTo2DAvatarVideoTaskWithOptions(request, runtime);
}

model SubmitAudioTo3DAvatarVideoTaskRequest {
  app?: {
    appId?: string(name='AppId', description='This parameter is required.', example='12131231'),
  }(name='App', description='This parameter is required.'),
  audioInfo?: {
    sampleRate?: int32(name='SampleRate'),
  }(name='AudioInfo'),
  avatarInfo?: {
    angle?: int32(name='Angle', example='0'),
    code?: string(name='Code', example='CH_xxxxxxx'),
    industryCode?: string(name='IndustryCode'),
    locate?: int32(name='Locate', example='0'),
  }(name='AvatarInfo'),
  callback?: boolean(name='Callback'),
  callbackParams?: string(name='CallbackParams'),
  extParams?: string(name='ExtParams'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='xxxx'),
  title?: string(name='Title', description='This parameter is required.'),
  url?: string(name='Url', description='This parameter is required.'),
  videoInfo?: {
    alphaFormat?: int32(name='AlphaFormat', example='1'),
    backgroundImageUrl?: string(name='BackgroundImageUrl'),
    isAlpha?: boolean(name='IsAlpha', example='false'),
    resolution?: int32(name='Resolution', example='1'),
  }(name='VideoInfo'),
}

model SubmitAudioTo3DAvatarVideoTaskShrinkRequest {
  appShrink?: string(name='App', description='This parameter is required.'),
  audioInfoShrink?: string(name='AudioInfo'),
  avatarInfoShrink?: string(name='AvatarInfo'),
  callback?: boolean(name='Callback'),
  callbackParams?: string(name='CallbackParams'),
  extParams?: string(name='ExtParams'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='xxxx'),
  title?: string(name='Title', description='This parameter is required.'),
  url?: string(name='Url', description='This parameter is required.'),
  videoInfoShrink?: string(name='VideoInfo'),
}

model SubmitAudioTo3DAvatarVideoTaskResponseBody = {
  code?: string(name='Code', example='10050008'),
  data?: {
    taskUuid?: string(name='TaskUuid', example='xxxx-xxx-xx-xx'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
  success?: boolean(name='Success', example='true'),
}

model SubmitAudioTo3DAvatarVideoTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitAudioTo3DAvatarVideoTaskResponseBody(name='body'),
}

/**
 * @summary 提交一个音频转3D数字人播报视频生成的任务
 *
 * @param tmpReq SubmitAudioTo3DAvatarVideoTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitAudioTo3DAvatarVideoTaskResponse
 */
@context("submitAudioTo3DAvatarVideoTaskWithContext")
async function submitAudioTo3DAvatarVideoTaskWithOptions(tmpReq: SubmitAudioTo3DAvatarVideoTaskRequest, runtime: $RuntimeOptions): SubmitAudioTo3DAvatarVideoTaskResponse {
  tmpReq.validate();
  var request = new SubmitAudioTo3DAvatarVideoTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.app)) {
    request.appShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.app, 'App', 'json');
  }
  if (!$isNull(tmpReq.audioInfo)) {
    request.audioInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.audioInfo, 'AudioInfo', 'json');
  }
  if (!$isNull(tmpReq.avatarInfo)) {
    request.avatarInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.avatarInfo, 'AvatarInfo', 'json');
  }
  if (!$isNull(tmpReq.videoInfo)) {
    request.videoInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.videoInfo, 'VideoInfo', 'json');
  }
  var query = {};
  if (!$isNull(request.appShrink)) {
    query['App'] = request.appShrink;
  }
  if (!$isNull(request.audioInfoShrink)) {
    query['AudioInfo'] = request.audioInfoShrink;
  }
  if (!$isNull(request.avatarInfoShrink)) {
    query['AvatarInfo'] = request.avatarInfoShrink;
  }
  if (!$isNull(request.callback)) {
    query['Callback'] = request.callback;
  }
  if (!$isNull(request.callbackParams)) {
    query['CallbackParams'] = request.callbackParams;
  }
  if (!$isNull(request.extParams)) {
    query['ExtParams'] = request.extParams;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  if (!$isNull(request.title)) {
    query['Title'] = request.title;
  }
  if (!$isNull(request.url)) {
    query['Url'] = request.url;
  }
  if (!$isNull(request.videoInfoShrink)) {
    query['VideoInfo'] = request.videoInfoShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SubmitAudioTo3DAvatarVideoTask',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交一个音频转3D数字人播报视频生成的任务
 *
 * @param request SubmitAudioTo3DAvatarVideoTaskRequest
 * @return SubmitAudioTo3DAvatarVideoTaskResponse
 */
async function submitAudioTo3DAvatarVideoTask(request: SubmitAudioTo3DAvatarVideoTaskRequest): SubmitAudioTo3DAvatarVideoTaskResponse {
  var runtime = new $RuntimeOptions{};
  return submitAudioTo3DAvatarVideoTaskWithOptions(request, runtime);
}

model SubmitAvatarVideoTaskRequest {
  app?: {
    appId?: string(name='AppId', description='This parameter is required.', example='3d95xx946a'),
  }(name='App', description='This parameter is required.'),
  callback?: boolean(name='Callback', example='false'),
  callbackParams?: string(name='CallbackParams', example='{
      "xxx": "xxx"
}'),
  extParams?: string(name='ExtParams', example='{
      "xxx": "xxx"
}'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='xxx'),
  title?: string(name='Title', description='This parameter is required.'),
  videoParams?: string(name='VideoParams', description='This parameter is required.'),
}

model SubmitAvatarVideoTaskShrinkRequest {
  appShrink?: string(name='App', description='This parameter is required.'),
  callback?: boolean(name='Callback', example='false'),
  callbackParams?: string(name='CallbackParams', example='{
      "xxx": "xxx"
}'),
  extParams?: string(name='ExtParams', example='{
      "xxx": "xxx"
}'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='xxx'),
  title?: string(name='Title', description='This parameter is required.'),
  videoParams?: string(name='VideoParams', description='This parameter is required.'),
}

model SubmitAvatarVideoTaskResponseBody = {
  code?: string(name='Code', example='10050008'),
  data?: {
    taskUuid?: string(name='TaskUuid', example='xxxxxx-xxxxx-xxxxx'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
  success?: boolean(name='Success', example='true'),
}

model SubmitAvatarVideoTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitAvatarVideoTaskResponseBody(name='body'),
}

/**
 * @summary 提交一个数字人播报视频生成的任务
 *
 * @param tmpReq SubmitAvatarVideoTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitAvatarVideoTaskResponse
 */
@context("submitAvatarVideoTaskWithContext")
async function submitAvatarVideoTaskWithOptions(tmpReq: SubmitAvatarVideoTaskRequest, runtime: $RuntimeOptions): SubmitAvatarVideoTaskResponse {
  tmpReq.validate();
  var request = new SubmitAvatarVideoTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.app)) {
    request.appShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.app, 'App', 'json');
  }
  var query = {};
  if (!$isNull(request.appShrink)) {
    query['App'] = request.appShrink;
  }
  if (!$isNull(request.callback)) {
    query['Callback'] = request.callback;
  }
  if (!$isNull(request.callbackParams)) {
    query['CallbackParams'] = request.callbackParams;
  }
  if (!$isNull(request.extParams)) {
    query['ExtParams'] = request.extParams;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  if (!$isNull(request.title)) {
    query['Title'] = request.title;
  }
  if (!$isNull(request.videoParams)) {
    query['VideoParams'] = request.videoParams;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SubmitAvatarVideoTask',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交一个数字人播报视频生成的任务
 *
 * @param request SubmitAvatarVideoTaskRequest
 * @return SubmitAvatarVideoTaskResponse
 */
async function submitAvatarVideoTask(request: SubmitAvatarVideoTaskRequest): SubmitAvatarVideoTaskResponse {
  var runtime = new $RuntimeOptions{};
  return submitAvatarVideoTaskWithOptions(request, runtime);
}

model SubmitTextTo2DAvatarVideoTaskRequest {
  app?: {
    appId?: string(name='AppId', description='This parameter is required.', example='12131231'),
  }(name='App', description='This parameter is required.'),
  audioInfo?: {
    pitchRate?: int32(name='PitchRate', example='0'),
    sampleRate?: int32(name='SampleRate'),
    speechRate?: int32(name='SpeechRate', example='0'),
    voice?: string(name='Voice', example='guijie'),
    volume?: int32(name='Volume', example='50'),
  }(name='AudioInfo'),
  avatarInfo?: {
    code?: string(name='Code', example='CH_xxxxx'),
    height?: int32(name='Height'),
    width?: int32(name='Width'),
    x?: int32(name='X'),
    y?: int32(name='Y'),
  }(name='AvatarInfo'),
  callback?: boolean(name='Callback'),
  callbackParams?: string(name='CallbackParams'),
  extParams?: string(name='ExtParams'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='xxxxx'),
  text?: string(name='Text', description='This parameter is required.'),
  title?: string(name='Title', description='This parameter is required.'),
  videoInfo?: {
    alphaFormat?: int32(name='AlphaFormat'),
    backgroundImageUrl?: string(name='BackgroundImageUrl'),
    isAlpha?: boolean(name='IsAlpha', example='false'),
    isSubtitles?: boolean(name='IsSubtitles', example='true', deprecated=true),
    resolution?: int32(name='Resolution'),
    subtitleEmbedded?: boolean(name='SubtitleEmbedded'),
    subtitleStyle?: {
      color?: string(name='Color'),
      name?: string(name='Name'),
      outlineColor?: string(name='OutlineColor'),
      size?: int32(name='Size'),
      y?: int32(name='Y'),
    }(name='SubtitleStyle'),
  }(name='VideoInfo'),
}

model SubmitTextTo2DAvatarVideoTaskShrinkRequest {
  appShrink?: string(name='App', description='This parameter is required.'),
  audioInfoShrink?: string(name='AudioInfo'),
  avatarInfoShrink?: string(name='AvatarInfo'),
  callback?: boolean(name='Callback'),
  callbackParams?: string(name='CallbackParams'),
  extParams?: string(name='ExtParams'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='xxxxx'),
  text?: string(name='Text', description='This parameter is required.'),
  title?: string(name='Title', description='This parameter is required.'),
  videoInfoShrink?: string(name='VideoInfo'),
}

model SubmitTextTo2DAvatarVideoTaskResponseBody = {
  code?: string(name='Code'),
  data?: {
    taskUuid?: string(name='TaskUuid', example='xxxx-xxx-xxx'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
  success?: boolean(name='Success'),
}

model SubmitTextTo2DAvatarVideoTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitTextTo2DAvatarVideoTaskResponseBody(name='body'),
}

/**
 * @summary 提交一个文本转2D数字人播报视频生成的任务
 *
 * @param tmpReq SubmitTextTo2DAvatarVideoTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitTextTo2DAvatarVideoTaskResponse
 */
@context("submitTextTo2DAvatarVideoTaskWithContext")
async function submitTextTo2DAvatarVideoTaskWithOptions(tmpReq: SubmitTextTo2DAvatarVideoTaskRequest, runtime: $RuntimeOptions): SubmitTextTo2DAvatarVideoTaskResponse {
  tmpReq.validate();
  var request = new SubmitTextTo2DAvatarVideoTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.app)) {
    request.appShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.app, 'App', 'json');
  }
  if (!$isNull(tmpReq.audioInfo)) {
    request.audioInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.audioInfo, 'AudioInfo', 'json');
  }
  if (!$isNull(tmpReq.avatarInfo)) {
    request.avatarInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.avatarInfo, 'AvatarInfo', 'json');
  }
  if (!$isNull(tmpReq.videoInfo)) {
    request.videoInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.videoInfo, 'VideoInfo', 'json');
  }
  var query = {};
  if (!$isNull(request.appShrink)) {
    query['App'] = request.appShrink;
  }
  if (!$isNull(request.audioInfoShrink)) {
    query['AudioInfo'] = request.audioInfoShrink;
  }
  if (!$isNull(request.avatarInfoShrink)) {
    query['AvatarInfo'] = request.avatarInfoShrink;
  }
  if (!$isNull(request.callback)) {
    query['Callback'] = request.callback;
  }
  if (!$isNull(request.callbackParams)) {
    query['CallbackParams'] = request.callbackParams;
  }
  if (!$isNull(request.extParams)) {
    query['ExtParams'] = request.extParams;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  if (!$isNull(request.text)) {
    query['Text'] = request.text;
  }
  if (!$isNull(request.title)) {
    query['Title'] = request.title;
  }
  if (!$isNull(request.videoInfoShrink)) {
    query['VideoInfo'] = request.videoInfoShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SubmitTextTo2DAvatarVideoTask',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交一个文本转2D数字人播报视频生成的任务
 *
 * @param request SubmitTextTo2DAvatarVideoTaskRequest
 * @return SubmitTextTo2DAvatarVideoTaskResponse
 */
async function submitTextTo2DAvatarVideoTask(request: SubmitTextTo2DAvatarVideoTaskRequest): SubmitTextTo2DAvatarVideoTaskResponse {
  var runtime = new $RuntimeOptions{};
  return submitTextTo2DAvatarVideoTaskWithOptions(request, runtime);
}

model SubmitTextTo3DAvatarVideoTaskRequest {
  app?: {
    appId?: string(name='AppId', description='This parameter is required.', example='12131231'),
  }(name='App', description='This parameter is required.'),
  audioInfo?: {
    pitchRate?: int32(name='PitchRate'),
    sampleRate?: int32(name='SampleRate'),
    speechRate?: int32(name='SpeechRate'),
    voice?: string(name='Voice'),
    volume?: int32(name='Volume'),
  }(name='AudioInfo'),
  avatarInfo?: {
    angle?: int32(name='Angle', example='0'),
    code?: string(name='Code', example='CH_xxxxxxx'),
    industryCode?: string(name='IndustryCode'),
    locate?: int32(name='Locate', example='0'),
  }(name='AvatarInfo'),
  callback?: boolean(name='Callback'),
  callbackParams?: string(name='CallbackParams'),
  extParams?: string(name='ExtParams'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='xxxx'),
  text?: string(name='Text', description='This parameter is required.'),
  title?: string(name='Title', description='This parameter is required.'),
  videoInfo?: {
    alphaFormat?: int32(name='AlphaFormat', example='1'),
    backgroundImageUrl?: string(name='BackgroundImageUrl'),
    isAlpha?: boolean(name='IsAlpha', example='false'),
    isSubtitles?: boolean(name='IsSubtitles', example='true', deprecated=true),
    resolution?: int32(name='Resolution', description='This parameter is required.', example='1'),
    subtitleEmbedded?: boolean(name='SubtitleEmbedded'),
    subtitleStyle?: {
      color?: string(name='Color'),
      name?: string(name='Name'),
      outlineColor?: string(name='OutlineColor'),
      size?: int32(name='Size'),
      y?: int32(name='Y'),
    }(name='SubtitleStyle'),
  }(name='VideoInfo'),
}

model SubmitTextTo3DAvatarVideoTaskShrinkRequest {
  appShrink?: string(name='App', description='This parameter is required.'),
  audioInfoShrink?: string(name='AudioInfo'),
  avatarInfoShrink?: string(name='AvatarInfo'),
  callback?: boolean(name='Callback'),
  callbackParams?: string(name='CallbackParams'),
  extParams?: string(name='ExtParams'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='xxxx'),
  text?: string(name='Text', description='This parameter is required.'),
  title?: string(name='Title', description='This parameter is required.'),
  videoInfoShrink?: string(name='VideoInfo'),
}

model SubmitTextTo3DAvatarVideoTaskResponseBody = {
  code?: string(name='Code', example='502'),
  data?: {
    taskUuid?: string(name='TaskUuid', example='xxxxxx-xxxxx-xxxxx'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
  success?: boolean(name='Success', example='false'),
}

model SubmitTextTo3DAvatarVideoTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitTextTo3DAvatarVideoTaskResponseBody(name='body'),
}

/**
 * @summary 提交一个文本转3D数字人播报视频生成的任务
 *
 * @param tmpReq SubmitTextTo3DAvatarVideoTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitTextTo3DAvatarVideoTaskResponse
 */
@context("submitTextTo3DAvatarVideoTaskWithContext")
async function submitTextTo3DAvatarVideoTaskWithOptions(tmpReq: SubmitTextTo3DAvatarVideoTaskRequest, runtime: $RuntimeOptions): SubmitTextTo3DAvatarVideoTaskResponse {
  tmpReq.validate();
  var request = new SubmitTextTo3DAvatarVideoTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.app)) {
    request.appShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.app, 'App', 'json');
  }
  if (!$isNull(tmpReq.audioInfo)) {
    request.audioInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.audioInfo, 'AudioInfo', 'json');
  }
  if (!$isNull(tmpReq.avatarInfo)) {
    request.avatarInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.avatarInfo, 'AvatarInfo', 'json');
  }
  if (!$isNull(tmpReq.videoInfo)) {
    request.videoInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.videoInfo, 'VideoInfo', 'json');
  }
  var query = {};
  if (!$isNull(request.appShrink)) {
    query['App'] = request.appShrink;
  }
  if (!$isNull(request.audioInfoShrink)) {
    query['AudioInfo'] = request.audioInfoShrink;
  }
  if (!$isNull(request.avatarInfoShrink)) {
    query['AvatarInfo'] = request.avatarInfoShrink;
  }
  if (!$isNull(request.callback)) {
    query['Callback'] = request.callback;
  }
  if (!$isNull(request.callbackParams)) {
    query['CallbackParams'] = request.callbackParams;
  }
  if (!$isNull(request.extParams)) {
    query['ExtParams'] = request.extParams;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  if (!$isNull(request.text)) {
    query['Text'] = request.text;
  }
  if (!$isNull(request.title)) {
    query['Title'] = request.title;
  }
  if (!$isNull(request.videoInfoShrink)) {
    query['VideoInfo'] = request.videoInfoShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SubmitTextTo3DAvatarVideoTask',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提交一个文本转3D数字人播报视频生成的任务
 *
 * @param request SubmitTextTo3DAvatarVideoTaskRequest
 * @return SubmitTextTo3DAvatarVideoTaskResponse
 */
async function submitTextTo3DAvatarVideoTask(request: SubmitTextTo3DAvatarVideoTaskRequest): SubmitTextTo3DAvatarVideoTaskResponse {
  var runtime = new $RuntimeOptions{};
  return submitTextTo3DAvatarVideoTaskWithOptions(request, runtime);
}

model Update2dAvatarRequest {
  callback?: boolean(name='Callback', example='false'),
  code?: string(name='Code', description='This parameter is required.', example='CH_2d_xxxxxx'),
  description?: string(name='Description'),
  image?: string(name='Image', example='https://virtual-human-assets.oss-cn-beijing.aliyuncs.com/2d_assets/xxx/xxx/xxx.png?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
  name?: string(name='Name'),
  orientation?: int32(name='Orientation', example='1'),
  portrait?: string(name='Portrait', example='https://virtual-human-assets.oss-cn-beijing.aliyuncs.com/2d_assets/xxx/xxx/xxx.png?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
  tenantId?: long(name='TenantId', description='This parameter is required.', example='9185'),
  transparent?: boolean(name='Transparent', example='true'),
  video?: string(name='Video', example='https://virtual-human-assets.oss-cn-beijing.aliyuncs.com/2d_assets/xxx/xxx/xxx.mov?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
}

model Update2dAvatarResponseBody = {
  code?: string(name='Code', example='10010001'),
  data?: {
    code?: string(name='Code', example='CH_2d_xxxxxx'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='13E0445E-CA7F-5DD3-9B0F-D4B39E0180F7'),
  success?: boolean(name='Success', example='false'),
}

model Update2dAvatarResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Update2dAvatarResponseBody(name='body'),
}

/**
 * @summary 修改创建2d人物的任务
 *
 * @param request Update2dAvatarRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return Update2dAvatarResponse
 */
@context("update2dAvatarWithContext")
async function update2dAvatarWithOptions(request: Update2dAvatarRequest, runtime: $RuntimeOptions): Update2dAvatarResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.callback)) {
    query['Callback'] = request.callback;
  }
  if (!$isNull(request.code)) {
    query['Code'] = request.code;
  }
  if (!$isNull(request.description)) {
    query['Description'] = request.description;
  }
  if (!$isNull(request.image)) {
    query['Image'] = request.image;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.orientation)) {
    query['Orientation'] = request.orientation;
  }
  if (!$isNull(request.portrait)) {
    query['Portrait'] = request.portrait;
  }
  if (!$isNull(request.tenantId)) {
    query['TenantId'] = request.tenantId;
  }
  if (!$isNull(request.transparent)) {
    query['Transparent'] = request.transparent;
  }
  if (!$isNull(request.video)) {
    query['Video'] = request.video;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'Update2dAvatar',
    version = '2022-01-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改创建2d人物的任务
 *
 * @param request Update2dAvatarRequest
 * @return Update2dAvatarResponse
 */
async function update2dAvatar(request: Update2dAvatarRequest): Update2dAvatarResponse {
  var runtime = new $RuntimeOptions{};
  return update2dAvatarWithOptions(request, runtime);
}

