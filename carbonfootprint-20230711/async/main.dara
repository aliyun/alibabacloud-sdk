/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'CarbonFootprint';
  @version = '2023-07-11';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AllowRequest {
}

model AllowResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='A009DA1A-46BD-5C72-A713-EEB82249120D'),
}

model AllowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllowResponseBody(name='body'),
}

async function allow(request: AllowRequest): AllowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Allow', 'POST', '/', 'json', false, 'json', request);
}

model GetSummaryDataRequest {
  endTime?: string(name='EndTime', example='2023-02-01 23:59:59', position='Query'),
  group?: string(name='Group', example='productCode', position='Query'),
  startTime?: string(name='StartTime', example='2023-01-01 00:00:00', position='Query'),
}

model GetSummaryDataResponseBody = {
  data?: {
    lastMonthConsumptionConversion?: string(name='LastMonthConsumptionConversion', example='301.83'),
    lastYearConsumptionConversion?: string(name='LastYearConsumptionConversion', example='1074.53'),
    lastYearConsumptionConversionSum?: string(name='LastYearConsumptionConversionSum', example='2844.58'),
    latestDataTime?: string(name='LatestDataTime', example='2023-06-01 00:00:00'),
    thisMonthConsumptionConversion?: string(name='ThisMonthConsumptionConversion', example='193.47'),
    thisYearConsumptionConversion?: string(name='ThisYearConsumptionConversion', example='1621.06'),
    totalCarbonConsumptionConversion?: string(name='TotalCarbonConsumptionConversion', example='1621.06'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request', example='88FC75E3-BFFD-50B3-988D-C08E6B795CFD'),
}

model GetSummaryDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSummaryDataResponseBody(name='body'),
}

async function getSummaryData(request: GetSummaryDataRequest): GetSummaryDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSummaryData', 'POST', '/', 'json', false, 'json', request);
}

model QueryCarbonTrackRequest {
  endTime?: string(name='EndTime', example='2023-02-01 23:59:59', position='Query'),
  group?: string(name='Group', example='productCode', position='Query'),
  startTime?: string(name='StartTime', example='2023-01-01 00:00:00', position='Query'),
}

model QueryCarbonTrackResponseBody = {
  data?: [ 
    {
      productCode?: string(name='ProductCode', example='ecs'),
      quotaValue?: double(name='QuotaValue', example='1.23'),
      region?: string(name='Region', example='cn-beijing'),
      statisticsDate?: long(name='StatisticsDate', example='1672502400000'),
      subUid?: string(name='SubUid', example='251538859557084260'),
      uid?: string(name='Uid', example='1665635164411336'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='B9AA726D-92A2-5F37-8D42-6C0AA3C67C0F'),
}

model QueryCarbonTrackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCarbonTrackResponseBody(name='body'),
}

async function queryCarbonTrack(request: QueryCarbonTrackRequest): QueryCarbonTrackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCarbonTrack', 'POST', '/', 'json', false, 'json', request);
}

model QueryMultiAccountCarbonTrackRequest {
  endTime?: string(name='EndTime', example='2023-10', position='Query'),
  startTime?: string(name='StartTime', example='2023-01', position='Query'),
}

model QueryMultiAccountCarbonTrackResponseBody = {
  data?: [ 
    {
      carbonActualEmission?: string(name='CarbonActualEmission', example='0.0650967'),
      month?: string(name='Month', example='2023-01'),
      productCode?: string(name='ProductCode', example='ecs'),
      region?: string(name='Region', example='cn-beijing'),
      uid?: string(name='Uid', example='1665635164411336'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', description='Id of the request', example='49857457-0425-545D-A7A2-9632B43BE2CE'),
}

model QueryMultiAccountCarbonTrackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMultiAccountCarbonTrackResponseBody(name='body'),
}

async function queryMultiAccountCarbonTrack(request: QueryMultiAccountCarbonTrackRequest): QueryMultiAccountCarbonTrackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMultiAccountCarbonTrack', 'GET', '/', 'json', false, 'json', request);
}

model VerifyRequest {
}

model VerifyResponseBody = {
  data?: {
    allowedUids?: [ string ](name='AllowedUids'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='49857457-0425-545D-A7A2-9632B43BE2CE'),
}

model VerifyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifyResponseBody(name='body'),
}

async function verify(request: VerifyRequest): VerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Verify', 'POST', '/', 'json', false, 'json', request);
}

