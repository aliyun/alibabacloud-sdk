/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('carbonfootprint', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AllowResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='A009DA1A-46BD-5C72-A713-EEB82249120D'),
}

model AllowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllowResponseBody(name='body'),
}

async function allowWithOptions(runtime: Util.RuntimeOptions): AllowResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'Allow',
    version = '2023-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function allow(): AllowResponse {
  var runtime = new Util.RuntimeOptions{};
  return allowWithOptions(runtime);
}

model GetSummaryDataRequest {
  endTime?: string(name='EndTime', example='2023-02-01 23:59:59'),
  group?: string(name='Group', example='productCode'),
  startTime?: string(name='StartTime', example='2023-01-01 00:00:00'),
}

model GetSummaryDataResponseBody = {
  data?: {
    lastMonthConsumptionConversion?: string(name='LastMonthConsumptionConversion', example='301.83'),
    lastYearConsumptionConversion?: string(name='LastYearConsumptionConversion', example='1074.53'),
    lastYearConsumptionConversionSum?: string(name='LastYearConsumptionConversionSum', example='2844.58'),
    latestDataTime?: string(name='LatestDataTime', example='2023-06-01 00:00:00'),
    thisMonthConsumptionConversion?: string(name='ThisMonthConsumptionConversion', example='193.47'),
    thisYearConsumptionConversion?: string(name='ThisYearConsumptionConversion', example='1621.06'),
    totalCarbonConsumptionConversion?: string(name='TotalCarbonConsumptionConversion', example='1621.06'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request', example='88FC75E3-BFFD-50B3-988D-C08E6B795CFD'),
}

model GetSummaryDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSummaryDataResponseBody(name='body'),
}

async function getSummaryDataWithOptions(request: GetSummaryDataRequest, runtime: Util.RuntimeOptions): GetSummaryDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSummaryData',
    version = '2023-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSummaryData(request: GetSummaryDataRequest): GetSummaryDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSummaryDataWithOptions(request, runtime);
}

model QueryCarbonTrackRequest {
  endTime?: string(name='EndTime', example='2023-02-01 23:59:59'),
  group?: string(name='Group', example='productCode'),
  startTime?: string(name='StartTime', example='2023-01-01 00:00:00'),
}

model QueryCarbonTrackResponseBody = {
  data?: [ 
    {
      productCode?: string(name='ProductCode', example='ecs'),
      quotaValue?: double(name='QuotaValue', example='1.23'),
      region?: string(name='Region', example='cn-beijing'),
      statisticsDate?: long(name='StatisticsDate', example='1672502400000'),
      subUid?: string(name='SubUid', example='251538859557084260'),
      uid?: string(name='Uid', example='1665635164411336'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='B9AA726D-92A2-5F37-8D42-6C0AA3C67C0F'),
}

model QueryCarbonTrackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCarbonTrackResponseBody(name='body'),
}

async function queryCarbonTrackWithOptions(request: QueryCarbonTrackRequest, runtime: Util.RuntimeOptions): QueryCarbonTrackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryCarbonTrack',
    version = '2023-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCarbonTrack(request: QueryCarbonTrackRequest): QueryCarbonTrackResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCarbonTrackWithOptions(request, runtime);
}

model VerifyResponseBody = {
  data?: {
    allowedUids?: [ string ](name='AllowedUids'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='49857457-0425-545D-A7A2-9632B43BE2CE'),
}

model VerifyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifyResponseBody(name='body'),
}

async function verifyWithOptions(runtime: Util.RuntimeOptions): VerifyResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'Verify',
    version = '2023-07-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function verify(): VerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyWithOptions(runtime);
}

