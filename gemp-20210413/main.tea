/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('gemp', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddProblemServiceGroupRequest {
  problemId?: long(name='problemId', description='故障ID'),
  serviceGroupIds?: [ long ](name='serviceGroupIds', description='应急协同组'),
}

model AddProblemServiceGroupResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model AddProblemServiceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddProblemServiceGroupResponseBody(name='body'),
}

async function addProblemServiceGroup(request: AddProblemServiceGroupRequest): AddProblemServiceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addProblemServiceGroupWithOptions(request, headers, runtime);
}

async function addProblemServiceGroupWithOptions(request: AddProblemServiceGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddProblemServiceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }
  if (!Util.isUnset(request.serviceGroupIds)) {
    body.serviceGroupIds = request.serviceGroupIds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('AddProblemServiceGroup', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/addServiceGroup`, 'json', req, runtime);
}

model CancelProblemRequest {
  cancelReason?: long(name='cancelReason', description='取消原因'),
  cancelReasonDescription?: string(name='cancelReasonDescription', description='取消原因描述'),
  clientToken?: string(name='clientToken', description='幂等校验token'),
  problemId?: long(name='problemId', description='故障id'),
  problemNotifyType?: long(name='problemNotifyType', description='PROBLEM_NOTIFY	通告类型 PROBLEM_NOTIFY：故障通告 PROBLEM_UPDATE：故障更新 PROBLEM_UPGRADE：故障升级 PROBLEM_DEGRADE：故障降级 PROBLEM_RECOVER：故障恢复 PROBLEM_REISSUE： 故障补发 PROBLEM_CANCEL：故障取消'),
}

model CancelProblemResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model CancelProblemResponse = {
  headers: map[string]string(name='headers'),
  body: CancelProblemResponseBody(name='body'),
}

async function cancelProblem(request: CancelProblemRequest): CancelProblemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cancelProblemWithOptions(request, headers, runtime);
}

async function cancelProblemWithOptions(request: CancelProblemRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelProblemResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.cancelReason)) {
    body.cancelReason = request.cancelReason;
  }
  if (!Util.isUnset(request.cancelReasonDescription)) {
    body.cancelReasonDescription = request.cancelReasonDescription;
  }
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }
  if (!Util.isUnset(request.problemNotifyType)) {
    body.problemNotifyType = request.problemNotifyType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CancelProblem', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/cancel`, 'json', req, runtime);
}

model CheckWebhookRequest {
  clientToken?: string(name='clientToken', description='幂等校验token'),
  webhook?: string(name='webhook', description='webook地址'),
  webhookType?: string(name='webhookType', description='webhook地址类型 企业微信WEIXIN_GROUP 钉钉群 DING_GROUP 飞书 FEISHU_GROUP'),
}

model CheckWebhookResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model CheckWebhookResponse = {
  headers: map[string]string(name='headers'),
  body: CheckWebhookResponseBody(name='body'),
}

async function checkWebhook(request: CheckWebhookRequest): CheckWebhookResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return checkWebhookWithOptions(request, headers, runtime);
}

async function checkWebhookWithOptions(request: CheckWebhookRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CheckWebhookResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.webhook)) {
    body.webhook = request.webhook;
  }
  if (!Util.isUnset(request.webhookType)) {
    body.webhookType = request.webhookType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CheckWebhook', '2021-04-13', 'HTTPS', 'POST', 'AK', `/services/check/webhook`, 'json', req, runtime);
}

model ConfirmIntegrationConfigRequest {
  clientToken?: string(name='clientToken', description='幂等id'),
  integrationConfigId?: long(name='integrationConfigId'),
}

model ConfirmIntegrationConfigResponseBody = {
  requestId?: string(name='requestId'),
}

model ConfirmIntegrationConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ConfirmIntegrationConfigResponseBody(name='body'),
}

async function confirmIntegrationConfig(request: ConfirmIntegrationConfigRequest): ConfirmIntegrationConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return confirmIntegrationConfigWithOptions(request, headers, runtime);
}

async function confirmIntegrationConfigWithOptions(request: ConfirmIntegrationConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ConfirmIntegrationConfigResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.integrationConfigId)) {
    body.integrationConfigId = request.integrationConfigId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ConfirmIntegrationConfig', '2021-04-13', 'HTTPS', 'POST', 'AK', `/integrationConfig/confirm`, 'json', req, runtime);
}

model CreateEscalationPlanRequest {
  clientToken?: string(name='clientToken', description='clientToken'),
  escalationPlanDescription?: string(name='escalationPlanDescription', description='升级计划描述'),
  escalationPlanName?: string(name='escalationPlanName', description='升级计划名称'),
  escalationPlanRules?: [ 
    {
      escalationPlanConditions?: [ 
        {
          effection?: string(name='effection', description='影响等级'),
          level?: string(name='level', description='事件等级'),
        }
      ](name='escalationPlanConditions', description='升级条件'),
      escalationPlanStrategies?: [ 
        {
          noticeChannels?: [ string ](name='noticeChannels', description='升级通知策略'),
          noticeObjects?: [ long ](name='noticeObjects', description='升级通知对象id列表'),
          noticeTime?: string(name='noticeTime', description='通知时间'),
        }
      ](name='escalationPlanStrategies', description='升级策略'),
      escalationPlanType?: string(name='escalationPlanType', description='升级类型'),
    }
  ](name='escalationPlanRules', description='升级计划规则列表'),
  escalationPlanScopeObjects?: [ 
    {
      scope?: string(name='scope', description='范围对象类型'),
      scopeObjectId?: long(name='scopeObjectId', description='范围对象id'),
    }
  ](name='escalationPlanScopeObjects', description='升级计划范围对象列表'),
}

model CreateEscalationPlanResponseBody = {
  data?: {
    escalationPlanId?: long(name='escalationPlanId', description='升级计划id'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model CreateEscalationPlanResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEscalationPlanResponseBody(name='body'),
}

async function createEscalationPlan(request: CreateEscalationPlanRequest): CreateEscalationPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createEscalationPlanWithOptions(request, headers, runtime);
}

async function createEscalationPlanWithOptions(request: CreateEscalationPlanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateEscalationPlanResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.escalationPlanDescription)) {
    body.escalationPlanDescription = request.escalationPlanDescription;
  }
  if (!Util.isUnset(request.escalationPlanName)) {
    body.escalationPlanName = request.escalationPlanName;
  }
  if (!Util.isUnset(request.escalationPlanRules)) {
    body.escalationPlanRules = request.escalationPlanRules;
  }
  if (!Util.isUnset(request.escalationPlanScopeObjects)) {
    body.escalationPlanScopeObjects = request.escalationPlanScopeObjects;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateEscalationPlan', '2021-04-13', 'HTTPS', 'POST', 'AK', `/escalationPlan/create`, 'json', req, runtime);
}

model CreateIncidentRequest {
  assignUserId?: long(name='assignUserId', description='分派的用户ID'),
  channels?: [ string ](name='channels', description='通知渠道     SMS 短信   EMAIL 邮件   PHONE  电话  WEIXIN_GROUP企微群 DING_GROUP 钉钉群'),
  clientToken?: string(name='clientToken', description='幂等UUID'),
  effect?: string(name='effect', description='影响等级 高：HIGH 低 LOW'),
  incidentDescription?: string(name='incidentDescription', description='事件描述'),
  incidentLevel?: string(name='incidentLevel', description='P1	事件级别 P1 P2 P3 P4'),
  incidentTitle?: string(name='incidentTitle', description='事件标题'),
  relatedServiceId?: long(name='relatedServiceId', description='关联服务ID'),
  serviceGroupId?: long(name='serviceGroupId', description='服务组Id'),
}

model CreateIncidentResponseBody = {
  data?: {
    incidentId?: long(name='incidentId', description='事件主健Id'),
  }(name='data', description='Id of the request'),
  requestId?: string(name='requestId', description='requestId'),
}

model CreateIncidentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIncidentResponseBody(name='body'),
}

async function createIncident(request: CreateIncidentRequest): CreateIncidentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createIncidentWithOptions(request, headers, runtime);
}

async function createIncidentWithOptions(request: CreateIncidentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateIncidentResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.assignUserId)) {
    body.assignUserId = request.assignUserId;
  }
  if (!Util.isUnset(request.channels)) {
    body.channels = request.channels;
  }
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.effect)) {
    body.effect = request.effect;
  }
  if (!Util.isUnset(request.incidentDescription)) {
    body.incidentDescription = request.incidentDescription;
  }
  if (!Util.isUnset(request.incidentLevel)) {
    body.incidentLevel = request.incidentLevel;
  }
  if (!Util.isUnset(request.incidentTitle)) {
    body.incidentTitle = request.incidentTitle;
  }
  if (!Util.isUnset(request.relatedServiceId)) {
    body.relatedServiceId = request.relatedServiceId;
  }
  if (!Util.isUnset(request.serviceGroupId)) {
    body.serviceGroupId = request.serviceGroupId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateIncident', '2021-04-13', 'HTTPS', 'POST', 'AK', `/incident/manualSave`, 'json', req, runtime);
}

model CreateIncidentSubtotalRequest {
  clientToken?: string(name='clientToken', description='幂等校验Id'),
  description?: string(name='description', description='描述'),
  incidentId?: long(name='incidentId', description='事件id'),
}

model CreateIncidentSubtotalResponseBody = {
  data?: {
    subtotalId?: long(name='subtotalId', description='小计Id'),
  }(name='data'),
  requestId?: string(name='requestId', description='requestId'),
}

model CreateIncidentSubtotalResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIncidentSubtotalResponseBody(name='body'),
}

async function createIncidentSubtotal(request: CreateIncidentSubtotalRequest): CreateIncidentSubtotalResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createIncidentSubtotalWithOptions(request, headers, runtime);
}

async function createIncidentSubtotalWithOptions(request: CreateIncidentSubtotalRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateIncidentSubtotalResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    body.description = request.description;
  }
  if (!Util.isUnset(request.incidentId)) {
    body.incidentId = request.incidentId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateIncidentSubtotal', '2021-04-13', 'HTTPS', 'POST', 'AK', `/incident/save/subtotal`, 'json', req, runtime);
}

model CreateIntegrationConfigRequest {
  clientToken?: string(name='clientToken'),
  monitorSourceId?: long(name='monitorSourceId'),
}

model CreateIntegrationConfigResponseBody = {
  data?: {
    integrationConfigId?: long(name='integrationConfigId', description='集成配置id'),
  }(name='data'),
  requestId?: string(name='requestId'),
}

model CreateIntegrationConfigResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIntegrationConfigResponseBody(name='body'),
}

async function createIntegrationConfig(request: CreateIntegrationConfigRequest): CreateIntegrationConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createIntegrationConfigWithOptions(request, headers, runtime);
}

async function createIntegrationConfigWithOptions(request: CreateIntegrationConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateIntegrationConfigResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.monitorSourceId)) {
    body.monitorSourceId = request.monitorSourceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateIntegrationConfig', '2021-04-13', 'HTTPS', 'POST', 'AK', `/integrationConfig/create`, 'json', req, runtime);
}

model CreateProblemRequest {
  affectServiceIds?: [ long ](name='affectServiceIds', description='影响服务列表'),
  clientToken?: string(name='clientToken', description='幂等校验Id'),
  discoverTime?: string(name='discoverTime', description='发现时间 (XXXX-XX-XX 00:00:00)'),
  incidentId?: long(name='incidentId', description='事件id'),
  mainHandlerId?: long(name='mainHandlerId', description='主要处理人'),
  preliminaryReason?: string(name='preliminaryReason', description='初步原因'),
  problemLevel?: string(name='problemLevel', description='故障等级 1=P1 2=P2 3=P3 4=P4'),
  problemName?: string(name='problemName', description='故障名称'),
  problemNotifyType?: string(name='problemNotifyType', description='通告类型'),
  problemStatus?: string(name='problemStatus', description='故障状态  HANDLING 处理中 RECOVERED 已恢复  REPLAYING 复盘中  REPLAYED 已复盘 CANCEL 已取消'),
  progressSummary?: string(name='progressSummary', description='进展摘要'),
  recoveryTime?: string(name='recoveryTime', description='恢复时间'),
  relatedServiceId?: long(name='relatedServiceId', description='所属服务'),
  serviceGroupIds?: [ long ](name='serviceGroupIds', description='应急协同组'),
}

model CreateProblemResponseBody = {
  data?: {
    problemId?: long(name='problemId', description='故障Id'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model CreateProblemResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProblemResponseBody(name='body'),
}

async function createProblem(request: CreateProblemRequest): CreateProblemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createProblemWithOptions(request, headers, runtime);
}

async function createProblemWithOptions(request: CreateProblemRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateProblemResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.affectServiceIds)) {
    body.affectServiceIds = request.affectServiceIds;
  }
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.discoverTime)) {
    body.discoverTime = request.discoverTime;
  }
  if (!Util.isUnset(request.incidentId)) {
    body.incidentId = request.incidentId;
  }
  if (!Util.isUnset(request.mainHandlerId)) {
    body.mainHandlerId = request.mainHandlerId;
  }
  if (!Util.isUnset(request.preliminaryReason)) {
    body.preliminaryReason = request.preliminaryReason;
  }
  if (!Util.isUnset(request.problemLevel)) {
    body.problemLevel = request.problemLevel;
  }
  if (!Util.isUnset(request.problemName)) {
    body.problemName = request.problemName;
  }
  if (!Util.isUnset(request.problemNotifyType)) {
    body.problemNotifyType = request.problemNotifyType;
  }
  if (!Util.isUnset(request.problemStatus)) {
    body.problemStatus = request.problemStatus;
  }
  if (!Util.isUnset(request.progressSummary)) {
    body.progressSummary = request.progressSummary;
  }
  if (!Util.isUnset(request.recoveryTime)) {
    body.recoveryTime = request.recoveryTime;
  }
  if (!Util.isUnset(request.relatedServiceId)) {
    body.relatedServiceId = request.relatedServiceId;
  }
  if (!Util.isUnset(request.serviceGroupIds)) {
    body.serviceGroupIds = request.serviceGroupIds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateProblem', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/upgrade`, 'json', req, runtime);
}

model CreateProblemEffectionServiceRequest {
  clientToken?: string(name='clientToken', description='clientToken'),
  description?: string(name='description', description='影响描述'),
  level?: string(name='level', description='影响等级'),
  pictureUrl?: [ string ](name='pictureUrl', description='图片地址'),
  problemId?: long(name='problemId', description='故障id'),
  serviceId?: long(name='serviceId', description='影响服务id'),
  status?: string(name='status', description='影响状态 0 未恢复 1已恢复'),
}

model CreateProblemEffectionServiceResponseBody = {
  data?: {
    effectionServiceId?: long(name='effectionServiceId', description='影响服务id'),
  }(name='data'),
  requestId?: string(name='requestId'),
}

model CreateProblemEffectionServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProblemEffectionServiceResponseBody(name='body'),
}

async function createProblemEffectionService(request: CreateProblemEffectionServiceRequest): CreateProblemEffectionServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createProblemEffectionServiceWithOptions(request, headers, runtime);
}

async function createProblemEffectionServiceWithOptions(request: CreateProblemEffectionServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateProblemEffectionServiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    body.description = request.description;
  }
  if (!Util.isUnset(request.level)) {
    body.level = request.level;
  }
  if (!Util.isUnset(request.pictureUrl)) {
    body.pictureUrl = request.pictureUrl;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }
  if (!Util.isUnset(request.serviceId)) {
    body.serviceId = request.serviceId;
  }
  if (!Util.isUnset(request.status)) {
    body.status = request.status;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateProblemEffectionService', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/process/effectionService/create`, 'json', req, runtime);
}

model CreateProblemMeasureRequest {
  checkStandard?: string(name='checkStandard', description='验收标准'),
  checkUserId?: long(name='checkUserId', description='验收人id'),
  clientToken?: string(name='clientToken', description='幂等校验token'),
  content?: string(name='content', description='措施内容'),
  directorId?: long(name='directorId', description='负责人id'),
  planFinishTime?: string(name='planFinishTime', description='计划完成时间'),
  problemId?: long(name='problemId', description='故障Id'),
  stalkerId?: long(name='stalkerId', description='跟踪人id'),
  status?: string(name='status', description='状态 IMPROVED 改进 2 未改进UNIMPROVED'),
  type?: int32(name='type', description='措施类型'),
}

model CreateProblemMeasureResponseBody = {
  data?: {
    measureId?: long(name='measureId', description='故障措施Id'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model CreateProblemMeasureResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProblemMeasureResponseBody(name='body'),
}

async function createProblemMeasure(request: CreateProblemMeasureRequest): CreateProblemMeasureResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createProblemMeasureWithOptions(request, headers, runtime);
}

async function createProblemMeasureWithOptions(request: CreateProblemMeasureRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateProblemMeasureResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.checkStandard)) {
    body.checkStandard = request.checkStandard;
  }
  if (!Util.isUnset(request.checkUserId)) {
    body.checkUserId = request.checkUserId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.content)) {
    body.content = request.content;
  }
  if (!Util.isUnset(request.directorId)) {
    body.directorId = request.directorId;
  }
  if (!Util.isUnset(request.planFinishTime)) {
    body.planFinishTime = request.planFinishTime;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }
  if (!Util.isUnset(request.stalkerId)) {
    body.stalkerId = request.stalkerId;
  }
  if (!Util.isUnset(request.status)) {
    body.status = request.status;
  }
  if (!Util.isUnset(request.type)) {
    body.type = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateProblemMeasure', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/improvement/measure/save`, 'json', req, runtime);
}

model CreateProblemSubtotalRequest {
  clientToken?: string(name='clientToken', description='幂等校验token'),
  description?: string(name='description', description='小计文本'),
  problemId?: long(name='problemId', description='故障Id'),
}

model CreateProblemSubtotalResponseBody = {
  data?: {
    subtotalId?: long(name='subtotalId', description='小计id'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model CreateProblemSubtotalResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProblemSubtotalResponseBody(name='body'),
}

async function createProblemSubtotal(request: CreateProblemSubtotalRequest): CreateProblemSubtotalResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createProblemSubtotalWithOptions(request, headers, runtime);
}

async function createProblemSubtotalWithOptions(request: CreateProblemSubtotalRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateProblemSubtotalResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    body.description = request.description;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateProblemSubtotal', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/save/subtotal`, 'json', req, runtime);
}

model CreateProblemTimelineRequest {
  clientToken?: string(name='clientToken', description='clientToken'),
  content?: string(name='content', description='节点内容'),
  keyNode?: string(name='keyNode', description='关键节点 码表:PROBLEM_KEY_NODE (逗号分隔)'),
  problemId?: long(name='problemId', description='故障id'),
  time?: string(name='time', description='发生时间'),
}

model CreateProblemTimelineResponseBody = {
  data?: {
    problemTimelineId?: long(name='problemTimelineId', description='故障事件线id'),
  }(name='data', description='Object'),
  requestId?: string(name='requestId', description='id of the request'),
}

model CreateProblemTimelineResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProblemTimelineResponseBody(name='body'),
}

async function createProblemTimeline(request: CreateProblemTimelineRequest): CreateProblemTimelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createProblemTimelineWithOptions(request, headers, runtime);
}

async function createProblemTimelineWithOptions(request: CreateProblemTimelineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateProblemTimelineResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.content)) {
    body.content = request.content;
  }
  if (!Util.isUnset(request.keyNode)) {
    body.keyNode = request.keyNode;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }
  if (!Util.isUnset(request.time)) {
    body.time = request.time;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateProblemTimeline', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/process/timeline/create`, 'json', req, runtime);
}

model CreateProblemTimelinesRequest {
  clientToken?: string(name='clientToken', description='clientToken'),
  problemId?: long(name='problemId', description='故障id'),
  timelineNodes?: string(name='timelineNodes', description='时间线节点'),
}

model CreateProblemTimelinesResponseBody = {
  data?: {
    problemTimelineIds?: [ long ](name='problemTimelineIds'),
  }(name='data'),
  requestId?: string(name='requestId'),
}

model CreateProblemTimelinesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProblemTimelinesResponseBody(name='body'),
}

async function createProblemTimelines(request: CreateProblemTimelinesRequest): CreateProblemTimelinesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createProblemTimelinesWithOptions(request, headers, runtime);
}

async function createProblemTimelinesWithOptions(request: CreateProblemTimelinesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateProblemTimelinesResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }
  if (!Util.isUnset(request.timelineNodes)) {
    body.timelineNodes = request.timelineNodes;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateProblemTimelines', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/process/timeline/batchCreate`, 'json', req, runtime);
}

model CreateRouteRuleRequest {
  assignObjectId?: long(name='assignObjectId', description='事件分派对象ID（服务组ID 或用户ID）'),
  assignObjectType?: string(name='assignObjectType', description='事件分派对象类型 SERVICEGROUP服务组 USER 单个用户'),
  clientToken?: string(name='clientToken', description='幂等号'),
  effection?: string(name='effection', description='影响程度 LOW-一般 HIGH-严重'),
  enableStatus?: string(name='enableStatus', description='启用状态'),
  incidentLevel?: string(name='incidentLevel', description='事件级别 P1 P2 P3 P4'),
  matchCount?: int32(name='matchCount', description='命中次数'),
  notifyChannels?: [ string ](name='notifyChannels', description='通知渠道。 SMS 短信  EMAIL 邮件  PHONE电话  WEIXIN_GROUP 企微群 DING_GROUP钉钉群'),
  relatedServiceId?: long(name='relatedServiceId', description='关联服务ID'),
  routeChildRules?: [ 
    {
      conditions?: [ 
        {
          key?: string(name='key', description='字段名称'),
          operationSymbol?: string(name='operationSymbol', description='操作符号：notContain 不包含；contain 包含；equals 等于；notEquals 不等于；'),
          value?: string(name='value', description='字段值'),
        }
      ](name='conditions', description='条件'),
      monitorSourceId?: long(name='monitorSourceId', description='监控源ID'),
    }
  ](name='routeChildRules', description='子规则'),
  routeType?: string(name='routeType', description='路由类型：INCIDENT 触发事件 ALERT仅触发报警'),
  ruleName?: bytes(name='ruleName', description='规则名称'),
  timeWindow?: long(name='timeWindow', description='时间窗口'),
  timeWindowUnit?: string(name='timeWindowUnit', description='时间窗口单位 MINUTE  分钟  SECOND 秒'),
}

model CreateRouteRuleResponseBody = {
  data?: {
    routeRuleId?: long(name='routeRuleId', description='规则ID'),
  }(name='data', description='结果'),
  requestId?: string(name='requestId', description='请求'),
}

model CreateRouteRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRouteRuleResponseBody(name='body'),
}

async function createRouteRule(request: CreateRouteRuleRequest): CreateRouteRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createRouteRuleWithOptions(request, headers, runtime);
}

async function createRouteRuleWithOptions(request: CreateRouteRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateRouteRuleResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.assignObjectId)) {
    body.assignObjectId = request.assignObjectId;
  }
  if (!Util.isUnset(request.assignObjectType)) {
    body.assignObjectType = request.assignObjectType;
  }
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.effection)) {
    body.effection = request.effection;
  }
  if (!Util.isUnset(request.enableStatus)) {
    body.enableStatus = request.enableStatus;
  }
  if (!Util.isUnset(request.incidentLevel)) {
    body.incidentLevel = request.incidentLevel;
  }
  if (!Util.isUnset(request.matchCount)) {
    body.matchCount = request.matchCount;
  }
  if (!Util.isUnset(request.notifyChannels)) {
    body.notifyChannels = request.notifyChannels;
  }
  if (!Util.isUnset(request.relatedServiceId)) {
    body.relatedServiceId = request.relatedServiceId;
  }
  if (!Util.isUnset(request.routeChildRules)) {
    body.routeChildRules = request.routeChildRules;
  }
  if (!Util.isUnset(request.routeType)) {
    body.routeType = request.routeType;
  }
  if (!Util.isUnset(request.ruleName)) {
    body.ruleName = request.ruleName;
  }
  if (!Util.isUnset(request.timeWindow)) {
    body.timeWindow = request.timeWindow;
  }
  if (!Util.isUnset(request.timeWindowUnit)) {
    body.timeWindowUnit = request.timeWindowUnit;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateRouteRule', '2021-04-13', 'HTTPS', 'POST', 'AK', `/routeRule/save`, 'json', req, runtime);
}

model CreateServiceRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  serviceDescription?: string(name='serviceDescription', description='服务描述'),
  serviceName?: string(name='serviceName', description='服务名称'),
}

model CreateServiceResponseBody = {
  data?: {
    serviceId?: long(name='serviceId', description='服务ID'),
  }(name='data', description='服务ID'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model CreateServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceResponseBody(name='body'),
}

async function createService(request: CreateServiceRequest): CreateServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createServiceWithOptions(request, headers, runtime);
}

async function createServiceWithOptions(request: CreateServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateServiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.serviceDescription)) {
    body.serviceDescription = request.serviceDescription;
  }
  if (!Util.isUnset(request.serviceName)) {
    body.serviceName = request.serviceName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateService', '2021-04-13', 'HTTPS', 'POST', 'AK', `/services/save`, 'json', req, runtime);
}

model CreateServiceGroupRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  enableWebhook?: string(name='enableWebhook', description='ENABLE 启用 DISABLE 禁用'),
  serviceGroupDescription?: string(name='serviceGroupDescription', description='服务描述'),
  serviceGroupName?: string(name='serviceGroupName', description='服务小组名称'),
  userIds?: [ long ](name='userIds', description='小组人员用户ID'),
  webhookLink?: string(name='webhookLink', description='webhookLink'),
  webhookType?: string(name='webhookType', description='WEIXIN_GROUP微信 DING_GROUP钉钉 FEISHU_GROUP飞书'),
}

model CreateServiceGroupResponseBody = {
  data?: {
    serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
  }(name='data', description='服务组ID'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model CreateServiceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceGroupResponseBody(name='body'),
}

async function createServiceGroup(request: CreateServiceGroupRequest): CreateServiceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createServiceGroupWithOptions(request, headers, runtime);
}

async function createServiceGroupWithOptions(request: CreateServiceGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateServiceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.enableWebhook)) {
    body.enableWebhook = request.enableWebhook;
  }
  if (!Util.isUnset(request.serviceGroupDescription)) {
    body.serviceGroupDescription = request.serviceGroupDescription;
  }
  if (!Util.isUnset(request.serviceGroupName)) {
    body.serviceGroupName = request.serviceGroupName;
  }
  if (!Util.isUnset(request.userIds)) {
    body.userIds = request.userIds;
  }
  if (!Util.isUnset(request.webhookLink)) {
    body.webhookLink = request.webhookLink;
  }
  if (!Util.isUnset(request.webhookType)) {
    body.webhookType = request.webhookType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateServiceGroup', '2021-04-13', 'HTTPS', 'POST', 'AK', `/services/group/insert`, 'json', req, runtime);
}

model CreateServiceGroupSchedulingRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  fastScheduling?: {
    dutyPlan?: string(name='dutyPlan', description='值班方案 dutyPlan FAST_CHOICE 快速选择   CUSTOM  自定义'),
    schedulingUsers?: [ 
      {
        schedulingOrder?: long(name='schedulingOrder', description='排班顺序'),
        schedulingUserId?: long(name='schedulingUserId', description='轮班用户ID'),
      }
    ](name='schedulingUsers', description='快速轮班用户'),
    singleDuration?: int32(name='singleDuration', description='每人排班时长'),
    singleDurationUnit?: string(name='singleDurationUnit', description='每人排班时常单位 HOUR 小时 DAY  天'),
  }(name='fastScheduling', description='快速排班'),
  fineScheduling?: {
    period?: int32(name='period', description='循环周期'),
    periodUnit?: string(name='periodUnit', description='循环周期单位 HOUR 小时 DAY  天'),
    schedulingFineShifts?: [ 
      {
        cycleOrder?: int32(name='cycleOrder', description='循环次序'),
        schedulingEndTime?: string(name='schedulingEndTime', description='排班结束时间'),
        schedulingOrder?: int32(name='schedulingOrder', description='排班顺序'),
        schedulingStartTime?: string(name='schedulingStartTime', description='排班开始时间'),
        schedulingUserId?: long(name='schedulingUserId', description='排班用户ID'),
        shiftName?: string(name='shiftName', description='班次名称'),
        skipOneDay?: boolean(name='skipOneDay', description='是否跨天'),
      }
    ](name='schedulingFineShifts', description='精细排班信息表'),
    schedulingTemplateFineShifts?: [ 
      {
        schedulingEndTime?: string(name='schedulingEndTime', description='排班结束时间'),
        schedulingOrder?: long(name='schedulingOrder', description='排班顺序'),
        schedulingStartTime?: string(name='schedulingStartTime', description='排班开始时间'),
        schedulingUserId?: long(name='schedulingUserId', description='用户ID'),
        schedulingUserName?: string(name='schedulingUserName', description='用户名字'),
        skipOneDay?: boolean(name='skipOneDay', description='是否跨天'),
      }
    ](name='schedulingTemplateFineShifts', description='精细排班模版'),
    shiftType?: string(name='shiftType', description='班次类型 MORNING_NIGHT 早晚班 MORNING_NOON_NIGHT 早中晚班 CUSTOM 自定义'),
  }(name='fineScheduling', description='精细排班'),
  schedulingWay?: string(name='schedulingWay', description='排班方式 FAST 快速排班 FINE  精细排班'),
  serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
}

model CreateServiceGroupSchedulingResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model CreateServiceGroupSchedulingResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceGroupSchedulingResponseBody(name='body'),
}

async function createServiceGroupScheduling(request: CreateServiceGroupSchedulingRequest): CreateServiceGroupSchedulingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createServiceGroupSchedulingWithOptions(request, headers, runtime);
}

async function createServiceGroupSchedulingWithOptions(request: CreateServiceGroupSchedulingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateServiceGroupSchedulingResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.fastScheduling)) {
    body.fastScheduling = request.fastScheduling;
  }
  if (!Util.isUnset(request.fineScheduling)) {
    body.fineScheduling = request.fineScheduling;
  }
  if (!Util.isUnset(request.schedulingWay)) {
    body.schedulingWay = request.schedulingWay;
  }
  if (!Util.isUnset(request.serviceGroupId)) {
    body.serviceGroupId = request.serviceGroupId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateServiceGroupScheduling', '2021-04-13', 'HTTPS', 'POST', 'AK', `/services/group/scheduling/save`, 'json', req, runtime);
}

model CreateSubscriptionRequest {
  clientToken?: string(name='clientToken', description='幂等参数'),
  endTime?: string(name='endTime', description='结束时间'),
  expiredType?: long(name='expiredType', description='订阅时效'),
  notifyObjectList?: [ 
    {
      notifyObjectId?: long(name='notifyObjectId', description='通知对象id'),
    }
  ](name='notifyObjectList', description='通知对象列表'),
  notifyObjectType?: long(name='notifyObjectType', description='通知对象类型'),
  notifyStrategyList?: [ 
    {
      channels?: string(name='channels', description='渠道，多个逗号分隔'),
      instanceType?: long(name='instanceType', description='订阅实例类型，事件、报警、故障'),
      periodChannel?: {
        nonWorkday?: string(name='nonWorkday', description='非工作时段'),
        workday?: string(name='workday', description='工作时段'),
      }(name='periodChannel', description='分时段渠道'),
      strategies?: [ 
        {
          conditions?: [ 
            {
              action?: string(name='action', description='时间动作'),
              effection?: string(name='effection', description='影响范围'),
              level?: string(name='level', description='等级'),
              problemNotifyType?: string(name='problemNotifyType', description='故障通知类型'),
            }
          ](name='conditions', description='通知策略条件'),
        }
      ](name='strategies', description='条件。json格式，包含多个条件，比如级别、影响程度 kv格式'),
    }
  ](name='notifyStrategyList', description='通知策略列表'),
  period?: string(name='period', description='时间段'),
  scope?: long(name='scope', description='订阅范围类型'),
  scopeObjectList?: [ 
    {
      scopeObjectId?: long(name='scopeObjectId', description='订阅范围对象id'),
    }
  ](name='scopeObjectList', description='订阅范围列表'),
  startTime?: string(name='startTime', description='开始时间'),
  subscriptionTitle?: string(name='subscriptionTitle', description='通知订阅名称'),
}

model CreateSubscriptionResponseBody = {
  data?: {
    subscriptionId?: long(name='subscriptionId', description='订阅id'),
  }(name='data'),
  requestId?: string(name='requestId', description='request id'),
}

model CreateSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSubscriptionResponseBody(name='body'),
}

async function createSubscription(request: CreateSubscriptionRequest): CreateSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createSubscriptionWithOptions(request, headers, runtime);
}

async function createSubscriptionWithOptions(request: CreateSubscriptionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSubscriptionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.endTime)) {
    body.endTime = request.endTime;
  }
  if (!Util.isUnset(request.expiredType)) {
    body.expiredType = request.expiredType;
  }
  if (!Util.isUnset(request.notifyObjectList)) {
    body.notifyObjectList = request.notifyObjectList;
  }
  if (!Util.isUnset(request.notifyObjectType)) {
    body.notifyObjectType = request.notifyObjectType;
  }
  if (!Util.isUnset(request.notifyStrategyList)) {
    body.notifyStrategyList = request.notifyStrategyList;
  }
  if (!Util.isUnset(request.period)) {
    body.period = request.period;
  }
  if (!Util.isUnset(request.scope)) {
    body.scope = request.scope;
  }
  if (!Util.isUnset(request.scopeObjectList)) {
    body.scopeObjectList = request.scopeObjectList;
  }
  if (!Util.isUnset(request.startTime)) {
    body.startTime = request.startTime;
  }
  if (!Util.isUnset(request.subscriptionTitle)) {
    body.subscriptionTitle = request.subscriptionTitle;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateSubscription', '2021-04-13', 'HTTPS', 'POST', 'AK', `/notify/subscription/create`, 'json', req, runtime);
}

model CreateTenantApplicationRequest {
  channel?: string(name='channel', description='应用协同渠道'),
  clientToken?: string(name='clientToken', description='幂等标识'),
}

model CreateTenantApplicationResponseBody = {
  data?: {
    openUrl?: string(name='openUrl', description='开通url'),
    progress?: string(name='progress', description='开通进度状态'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='id of the req'),
}

model CreateTenantApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTenantApplicationResponseBody(name='body'),
}

async function createTenantApplication(request: CreateTenantApplicationRequest): CreateTenantApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createTenantApplicationWithOptions(request, headers, runtime);
}

async function createTenantApplicationWithOptions(request: CreateTenantApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTenantApplicationResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.channel)) {
    body.channel = request.channel;
  }
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateTenantApplication', '2021-04-13', 'HTTPS', 'POST', 'AK', `/mobileApp/create`, 'json', req, runtime);
}

model CreateUserRequest {
  clientToken?: string(name='clientToken'),
  email?: string(name='email'),
  phone?: string(name='phone'),
  ramId?: long(name='ramId'),
  username?: string(name='username'),
}

model CreateUserResponseBody = {
  data?: {
    userId?: long(name='userId'),
  }(name='data'),
  requestId?: string(name='requestId'),
}

model CreateUserResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserResponseBody(name='body'),
}

async function createUser(request: CreateUserRequest): CreateUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createUserWithOptions(request, headers, runtime);
}

async function createUserWithOptions(request: CreateUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateUserResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.email)) {
    body.email = request.email;
  }
  if (!Util.isUnset(request.phone)) {
    body.phone = request.phone;
  }
  if (!Util.isUnset(request.ramId)) {
    body.ramId = request.ramId;
  }
  if (!Util.isUnset(request.username)) {
    body.username = request.username;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('CreateUser', '2021-04-13', 'HTTPS', 'POST', 'AK', `/user/create`, 'json', req, runtime);
}

model DeleteEscalationPlanRequest {
  clientToken?: string(name='clientToken', description='clientToken'),
  escalationPlanId?: long(name='escalationPlanId', description='升级计划ID'),
}

model DeleteEscalationPlanResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeleteEscalationPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEscalationPlanResponseBody(name='body'),
}

async function deleteEscalationPlan(request: DeleteEscalationPlanRequest): DeleteEscalationPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteEscalationPlanWithOptions(request, headers, runtime);
}

async function deleteEscalationPlanWithOptions(request: DeleteEscalationPlanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteEscalationPlanResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.escalationPlanId)) {
    body.escalationPlanId = request.escalationPlanId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('DeleteEscalationPlan', '2021-04-13', 'HTTPS', 'POST', 'AK', `/escalationPlan/delete`, 'json', req, runtime);
}

model DeleteIncidentRequest {
  clientToken?: string(name='clientToken', description='幂等校验'),
  incidentId?: long(name='incidentId', description='事件Id'),
}

model DeleteIncidentResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeleteIncidentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIncidentResponseBody(name='body'),
}

async function deleteIncident(request: DeleteIncidentRequest): DeleteIncidentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteIncidentWithOptions(request, headers, runtime);
}

async function deleteIncidentWithOptions(request: DeleteIncidentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteIncidentResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.incidentId)) {
    body.incidentId = request.incidentId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('DeleteIncident', '2021-04-13', 'HTTPS', 'POST', 'AK', `/incident/delete`, 'json', req, runtime);
}

model DeleteIntegrationConfigRequest {
  clientToken?: string(name='clientToken', description='幂等id'),
  integrationConfigId?: long(name='integrationConfigId', description='集成配置id'),
}

model DeleteIntegrationConfigResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeleteIntegrationConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIntegrationConfigResponseBody(name='body'),
}

async function deleteIntegrationConfig(request: DeleteIntegrationConfigRequest): DeleteIntegrationConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteIntegrationConfigWithOptions(request, headers, runtime);
}

async function deleteIntegrationConfigWithOptions(request: DeleteIntegrationConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteIntegrationConfigResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.integrationConfigId)) {
    body.integrationConfigId = request.integrationConfigId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('DeleteIntegrationConfig', '2021-04-13', 'HTTPS', 'POST', 'AK', `/integrationConfig/delete`, 'json', req, runtime);
}

model DeleteProblemRequest {
  clientToken?: string(name='clientToken', description='幂等校验'),
  problemId?: long(name='problemId', description='故障Id'),
}

model DeleteProblemResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeleteProblemResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProblemResponseBody(name='body'),
}

async function deleteProblem(request: DeleteProblemRequest): DeleteProblemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteProblemWithOptions(request, headers, runtime);
}

async function deleteProblemWithOptions(request: DeleteProblemRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteProblemResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('DeleteProblem', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/delete`, 'json', req, runtime);
}

model DeleteProblemEffectionServiceRequest {
  clientToken?: string(name='clientToken', description='clientToken'),
  effectionServiceId?: long(name='effectionServiceId', description='影响服务ID'),
  problemId?: long(name='problemId', description='故障id'),
}

model DeleteProblemEffectionServiceResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeleteProblemEffectionServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProblemEffectionServiceResponseBody(name='body'),
}

async function deleteProblemEffectionService(request: DeleteProblemEffectionServiceRequest): DeleteProblemEffectionServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteProblemEffectionServiceWithOptions(request, headers, runtime);
}

async function deleteProblemEffectionServiceWithOptions(request: DeleteProblemEffectionServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteProblemEffectionServiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.effectionServiceId)) {
    body.effectionServiceId = request.effectionServiceId;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('DeleteProblemEffectionService', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/process/effectionService/delete`, 'json', req, runtime);
}

model DeleteProblemMeasureRequest {
  clientToken?: string(name='clientToken', description='幂等校验token'),
  measureId?: long(name='measureId', description='故障改成措施id'),
  problemId?: string(name='problemId', description='故障Id'),
}

model DeleteProblemMeasureResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeleteProblemMeasureResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProblemMeasureResponseBody(name='body'),
}

async function deleteProblemMeasure(request: DeleteProblemMeasureRequest): DeleteProblemMeasureResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteProblemMeasureWithOptions(request, headers, runtime);
}

async function deleteProblemMeasureWithOptions(request: DeleteProblemMeasureRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteProblemMeasureResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.measureId)) {
    body.measureId = request.measureId;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('DeleteProblemMeasure', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/improvement/measure/delete`, 'json', req, runtime);
}

model DeleteProblemTimelineRequest {
  clientToken?: string(name='clientToken', description='clientToken'),
  problemId?: long(name='problemId', description='故障id'),
  problemTimelineId?: long(name='problemTimelineId', description='ID'),
}

model DeleteProblemTimelineResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeleteProblemTimelineResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProblemTimelineResponseBody(name='body'),
}

async function deleteProblemTimeline(request: DeleteProblemTimelineRequest): DeleteProblemTimelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteProblemTimelineWithOptions(request, headers, runtime);
}

async function deleteProblemTimelineWithOptions(request: DeleteProblemTimelineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteProblemTimelineResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }
  if (!Util.isUnset(request.problemTimelineId)) {
    body.problemTimelineId = request.problemTimelineId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('DeleteProblemTimeline', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/process/timeline/delete`, 'json', req, runtime);
}

model DeleteRouteRuleRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  routeRuleId?: long(name='routeRuleId', description='规则ID'),
}

model DeleteRouteRuleResponseBody = {
  requestId?: long(name='requestId', description='请求ID'),
}

model DeleteRouteRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRouteRuleResponseBody(name='body'),
}

async function deleteRouteRule(request: DeleteRouteRuleRequest): DeleteRouteRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteRouteRuleWithOptions(request, headers, runtime);
}

async function deleteRouteRuleWithOptions(request: DeleteRouteRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteRouteRuleResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.routeRuleId)) {
    body.routeRuleId = request.routeRuleId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('DeleteRouteRule', '2021-04-13', 'HTTPS', 'POST', 'AK', `/routeRule/delete`, 'json', req, runtime);
}

model DeleteServiceRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  serviceId?: long(name='serviceId', description='服务ID'),
}

model DeleteServiceResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeleteServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceResponseBody(name='body'),
}

async function deleteService(request: DeleteServiceRequest): DeleteServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteServiceWithOptions(request, headers, runtime);
}

async function deleteServiceWithOptions(request: DeleteServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteServiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.serviceId)) {
    body.serviceId = request.serviceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('DeleteService', '2021-04-13', 'HTTPS', 'POST', 'AK', `/services/delete`, 'json', req, runtime);
}

model DeleteServiceGroupRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
}

model DeleteServiceGroupResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeleteServiceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceGroupResponseBody(name='body'),
}

async function deleteServiceGroup(request: DeleteServiceGroupRequest): DeleteServiceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteServiceGroupWithOptions(request, headers, runtime);
}

async function deleteServiceGroupWithOptions(request: DeleteServiceGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteServiceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.serviceGroupId)) {
    body.serviceGroupId = request.serviceGroupId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('DeleteServiceGroup', '2021-04-13', 'HTTPS', 'POST', 'AK', `/services/group/delete`, 'json', req, runtime);
}

model DeleteServiceGroupUserRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  newUserId?: long(name='newUserId', description='新的用户'),
  oldUserId?: long(name='oldUserId', description='老的用户ID'),
  removeUser?: boolean(name='removeUser', description='删除服务组成员'),
  serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
}

model DeleteServiceGroupUserResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeleteServiceGroupUserResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceGroupUserResponseBody(name='body'),
}

async function deleteServiceGroupUser(request: DeleteServiceGroupUserRequest): DeleteServiceGroupUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteServiceGroupUserWithOptions(request, headers, runtime);
}

async function deleteServiceGroupUserWithOptions(request: DeleteServiceGroupUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteServiceGroupUserResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.newUserId)) {
    body.newUserId = request.newUserId;
  }
  if (!Util.isUnset(request.oldUserId)) {
    body.oldUserId = request.oldUserId;
  }
  if (!Util.isUnset(request.removeUser)) {
    body.removeUser = request.removeUser;
  }
  if (!Util.isUnset(request.serviceGroupId)) {
    body.serviceGroupId = request.serviceGroupId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('DeleteServiceGroupUser', '2021-04-13', 'HTTPS', 'POST', 'AK', `/services/group/deleteServiceGroupUser`, 'json', req, runtime);
}

model DeleteSubscriptionRequest {
  subscriptionId?: long(name='subscriptionId'),
}

model DeleteSubscriptionResponseBody = {
  requestId?: string(name='requestId', description='requestId'),
}

model DeleteSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSubscriptionResponseBody(name='body'),
}

async function deleteSubscription(request: DeleteSubscriptionRequest): DeleteSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteSubscriptionWithOptions(request, headers, runtime);
}

async function deleteSubscriptionWithOptions(request: DeleteSubscriptionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteSubscriptionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.subscriptionId)) {
    body.subscriptionId = request.subscriptionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('DeleteSubscription', '2021-04-13', 'HTTPS', 'POST', 'AK', `/notify/subscription/delete`, 'json', req, runtime);
}

model DeleteUserRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  userId?: long(name='userId', description='用户ID'),
}

model DeleteUserResponseBody = {
  requestId?: string(name='requestId', description='id of the request'),
}

model DeleteUserResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserResponseBody(name='body'),
}

async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteUserWithOptions(request, headers, runtime);
}

async function deleteUserWithOptions(request: DeleteUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteUserResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.userId)) {
    body.userId = request.userId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('DeleteUser', '2021-04-13', 'HTTPS', 'POST', 'AK', `/user/delete`, 'json', req, runtime);
}

model DeliverIncidentRequest {
  assignUserId?: long(name='assignUserId', description='转交用户ID'),
  clientToken?: string(name='clientToken', description='幂等校验id'),
  incidentId?: long(name='incidentId', description='事件ID'),
}

model DeliverIncidentResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeliverIncidentResponse = {
  headers: map[string]string(name='headers'),
  body: DeliverIncidentResponseBody(name='body'),
}

async function deliverIncident(request: DeliverIncidentRequest): DeliverIncidentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deliverIncidentWithOptions(request, headers, runtime);
}

async function deliverIncidentWithOptions(request: DeliverIncidentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeliverIncidentResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.assignUserId)) {
    body.assignUserId = request.assignUserId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.incidentId)) {
    body.incidentId = request.incidentId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('DeliverIncident', '2021-04-13', 'HTTPS', 'POST', 'AK', `/incident/deliver`, 'json', req, runtime);
}

model DisableEscalationPlanRequest {
  clientToken?: string(name='clientToken', description='clientToken'),
  escalationPlanId?: long(name='escalationPlanId', description='升级计划ID'),
}

model DisableEscalationPlanResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DisableEscalationPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DisableEscalationPlanResponseBody(name='body'),
}

async function disableEscalationPlan(request: DisableEscalationPlanRequest): DisableEscalationPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return disableEscalationPlanWithOptions(request, headers, runtime);
}

async function disableEscalationPlanWithOptions(request: DisableEscalationPlanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DisableEscalationPlanResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.escalationPlanId)) {
    body.escalationPlanId = request.escalationPlanId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('DisableEscalationPlan', '2021-04-13', 'HTTPS', 'POST', 'AK', `/escalationPlan/disable`, 'json', req, runtime);
}

model DisableIntegrationConfigRequest {
  clientToken?: string(name='clientToken', description='幂等id'),
  integrationConfigId?: long(name='integrationConfigId'),
}

model DisableIntegrationConfigResponseBody = {
  requestId?: string(name='requestId', description='requestId'),
}

model DisableIntegrationConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DisableIntegrationConfigResponseBody(name='body'),
}

async function disableIntegrationConfig(request: DisableIntegrationConfigRequest): DisableIntegrationConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return disableIntegrationConfigWithOptions(request, headers, runtime);
}

async function disableIntegrationConfigWithOptions(request: DisableIntegrationConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DisableIntegrationConfigResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.integrationConfigId)) {
    body.integrationConfigId = request.integrationConfigId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('DisableIntegrationConfig', '2021-04-13', 'HTTPS', 'POST', 'AK', `/integrationConfig/disable`, 'json', req, runtime);
}

model DisableRouteRuleRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  routeRuleId?: long(name='routeRuleId', description='请求ID'),
}

model DisableRouteRuleResponseBody = {
  data?: long(name='data', description='C4BE3837-1A13-413B-A225-2C88188E8A43'),
  requestId?: string(name='requestId', description='请求ID'),
}

model DisableRouteRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DisableRouteRuleResponseBody(name='body'),
}

async function disableRouteRule(request: DisableRouteRuleRequest): DisableRouteRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return disableRouteRuleWithOptions(request, headers, runtime);
}

async function disableRouteRuleWithOptions(request: DisableRouteRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DisableRouteRuleResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.routeRuleId)) {
    body.routeRuleId = request.routeRuleId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('DisableRouteRule', '2021-04-13', 'HTTPS', 'POST', 'AK', `/routeRule/disable`, 'json', req, runtime);
}

model DisableServiceGroupWebhookRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
}

model DisableServiceGroupWebhookResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DisableServiceGroupWebhookResponse = {
  headers: map[string]string(name='headers'),
  body: DisableServiceGroupWebhookResponseBody(name='body'),
}

async function disableServiceGroupWebhook(request: DisableServiceGroupWebhookRequest): DisableServiceGroupWebhookResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return disableServiceGroupWebhookWithOptions(request, headers, runtime);
}

async function disableServiceGroupWebhookWithOptions(request: DisableServiceGroupWebhookRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DisableServiceGroupWebhookResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.serviceGroupId)) {
    body.serviceGroupId = request.serviceGroupId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('DisableServiceGroupWebhook', '2021-04-13', 'HTTPS', 'POST', 'AK', `/services/group/disableWebhook`, 'json', req, runtime);
}

model DisableSubscriptionRequest {
  subscriptionId?: long(name='subscriptionId'),
}

model DisableSubscriptionResponseBody = {
  requestId?: string(name='requestId'),
}

model DisableSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: DisableSubscriptionResponseBody(name='body'),
}

async function disableSubscription(request: DisableSubscriptionRequest): DisableSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return disableSubscriptionWithOptions(request, headers, runtime);
}

async function disableSubscriptionWithOptions(request: DisableSubscriptionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DisableSubscriptionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.subscriptionId)) {
    body.subscriptionId = request.subscriptionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('DisableSubscription', '2021-04-13', 'HTTPS', 'POST', 'AK', `/notify/subscription/doDisable`, 'json', req, runtime);
}

model EnableEscalationPlanRequest {
  clientToken?: string(name='clientToken', description='clientToken'),
  escalationPlanId?: long(name='escalationPlanId', description='升级计划ID'),
}

model EnableEscalationPlanResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model EnableEscalationPlanResponse = {
  headers: map[string]string(name='headers'),
  body: EnableEscalationPlanResponseBody(name='body'),
}

async function enableEscalationPlan(request: EnableEscalationPlanRequest): EnableEscalationPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return enableEscalationPlanWithOptions(request, headers, runtime);
}

async function enableEscalationPlanWithOptions(request: EnableEscalationPlanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EnableEscalationPlanResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.escalationPlanId)) {
    body.escalationPlanId = request.escalationPlanId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('EnableEscalationPlan', '2021-04-13', 'HTTPS', 'POST', 'AK', `/escalationPlan/enable`, 'json', req, runtime);
}

model EnableIntegrationConfigRequest {
  clientToken?: string(name='clientToken', description='幂等id'),
  integrationConfigId?: long(name='integrationConfigId'),
}

model EnableIntegrationConfigResponseBody = {
  requestId?: string(name='requestId'),
}

model EnableIntegrationConfigResponse = {
  headers: map[string]string(name='headers'),
  body: EnableIntegrationConfigResponseBody(name='body'),
}

async function enableIntegrationConfig(request: EnableIntegrationConfigRequest): EnableIntegrationConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return enableIntegrationConfigWithOptions(request, headers, runtime);
}

async function enableIntegrationConfigWithOptions(request: EnableIntegrationConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EnableIntegrationConfigResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.integrationConfigId)) {
    body.integrationConfigId = request.integrationConfigId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('EnableIntegrationConfig', '2021-04-13', 'HTTPS', 'POST', 'AK', `/integrationConfig/enable`, 'json', req, runtime);
}

model EnableRouteRuleRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  routeRuleId?: long(name='routeRuleId', description='规则ID'),
}

model EnableRouteRuleResponseBody = {
  data?: int32(name='data'),
  requestId?: string(name='requestId', description='请求ID'),
}

model EnableRouteRuleResponse = {
  headers: map[string]string(name='headers'),
  body: EnableRouteRuleResponseBody(name='body'),
}

async function enableRouteRule(request: EnableRouteRuleRequest): EnableRouteRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return enableRouteRuleWithOptions(request, headers, runtime);
}

async function enableRouteRuleWithOptions(request: EnableRouteRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EnableRouteRuleResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.routeRuleId)) {
    body.routeRuleId = request.routeRuleId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('EnableRouteRule', '2021-04-13', 'HTTPS', 'POST', 'AK', `/routeRule/enable`, 'json', req, runtime);
}

model EnableServiceGroupWebhookRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
}

model EnableServiceGroupWebhookResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model EnableServiceGroupWebhookResponse = {
  headers: map[string]string(name='headers'),
  body: EnableServiceGroupWebhookResponseBody(name='body'),
}

async function enableServiceGroupWebhook(request: EnableServiceGroupWebhookRequest): EnableServiceGroupWebhookResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return enableServiceGroupWebhookWithOptions(request, headers, runtime);
}

async function enableServiceGroupWebhookWithOptions(request: EnableServiceGroupWebhookRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EnableServiceGroupWebhookResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.serviceGroupId)) {
    body.serviceGroupId = request.serviceGroupId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('EnableServiceGroupWebhook', '2021-04-13', 'HTTPS', 'POST', 'AK', `/services/group/enableWebhook`, 'json', req, runtime);
}

model EnableSubscriptionRequest {
  subscriptionId?: long(name='subscriptionId'),
}

model EnableSubscriptionResponseBody = {
  requestId?: string(name='requestId'),
}

model EnableSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: EnableSubscriptionResponseBody(name='body'),
}

async function enableSubscription(request: EnableSubscriptionRequest): EnableSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return enableSubscriptionWithOptions(request, headers, runtime);
}

async function enableSubscriptionWithOptions(request: EnableSubscriptionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): EnableSubscriptionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.subscriptionId)) {
    body.subscriptionId = request.subscriptionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('EnableSubscription', '2021-04-13', 'HTTPS', 'POST', 'AK', `/notify/subscription/enable`, 'json', req, runtime);
}

model FinishIncidentRequest {
  clientToken?: string(name='clientToken', description='幂等校验Id'),
  incidentFinishReason?: int32(name='incidentFinishReason', description='完结原因'),
  incidentFinishReasonDescription?: string(name='incidentFinishReasonDescription', description='原因描述'),
  incidentFinishSolution?: int32(name='incidentFinishSolution', description='解决方案'),
  incidentFinishSolutionDescription?: string(name='incidentFinishSolutionDescription', description='解决方案描述'),
  incidentIds?: [ long ](name='incidentIds', description='事件ID数组'),
}

model FinishIncidentResponseBody = {
  requestId?: string(name='requestId', description='requestId'),
}

model FinishIncidentResponse = {
  headers: map[string]string(name='headers'),
  body: FinishIncidentResponseBody(name='body'),
}

async function finishIncident(request: FinishIncidentRequest): FinishIncidentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return finishIncidentWithOptions(request, headers, runtime);
}

async function finishIncidentWithOptions(request: FinishIncidentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FinishIncidentResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.incidentFinishReason)) {
    body.incidentFinishReason = request.incidentFinishReason;
  }
  if (!Util.isUnset(request.incidentFinishReasonDescription)) {
    body.incidentFinishReasonDescription = request.incidentFinishReasonDescription;
  }
  if (!Util.isUnset(request.incidentFinishSolution)) {
    body.incidentFinishSolution = request.incidentFinishSolution;
  }
  if (!Util.isUnset(request.incidentFinishSolutionDescription)) {
    body.incidentFinishSolutionDescription = request.incidentFinishSolutionDescription;
  }
  if (!Util.isUnset(request.incidentIds)) {
    body.incidentIds = request.incidentIds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('FinishIncident', '2021-04-13', 'HTTPS', 'POST', 'AK', `/incident/finish`, 'json', req, runtime);
}

model FinishProblemRequest {
  clientToken?: string(name='clientToken', description='幂等校验'),
  problemId?: long(name='problemId', description='故障Id'),
}

model FinishProblemResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model FinishProblemResponse = {
  headers: map[string]string(name='headers'),
  body: FinishProblemResponseBody(name='body'),
}

async function finishProblem(request: FinishProblemRequest): FinishProblemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return finishProblemWithOptions(request, headers, runtime);
}

async function finishProblemWithOptions(request: FinishProblemRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FinishProblemResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('FinishProblem', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/finish`, 'json', req, runtime);
}

model GenerateProblemPictureLinkRequest {
  keys?: [ string ](name='keys', description='oss key'),
  problemId?: string(name='problemId', description='故障id'),
}

model GenerateProblemPictureLinkResponseBody = {
  data?: {
    links?: [ 
      {
        key?: string(name='key', description='oss key'),
        link?: string(name='link', description='图片链接'),
      }
    ](name='links', description='图片链接列表'),
  }(name='data'),
  requestId?: string(name='requestId', description='requestId'),
}

model GenerateProblemPictureLinkResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateProblemPictureLinkResponseBody(name='body'),
}

async function generateProblemPictureLink(request: GenerateProblemPictureLinkRequest): GenerateProblemPictureLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return generateProblemPictureLinkWithOptions(request, headers, runtime);
}

async function generateProblemPictureLinkWithOptions(request: GenerateProblemPictureLinkRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GenerateProblemPictureLinkResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.keys)) {
    body.keys = request.keys;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GenerateProblemPictureLink', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/process/oss/getPresignedLink`, 'json', req, runtime);
}

model GenerateProblemPictureUploadSignRequest {
  fileName?: string(name='fileName', description='文件名'),
  fileSize?: long(name='fileSize', description='文件大小KB'),
  fileType?: string(name='fileType', description='文件类型'),
  problemId?: long(name='problemId', description='故障id'),
}

model GenerateProblemPictureUploadSignResponseBody = {
  data?: {
    accessKeyId?: string(name='accessKeyId', description='ossaccessKeyId'),
    bucketName?: string(name='bucketName', description='oss bucket name'),
    key?: string(name='key', description='oss key'),
    policy?: string(name='policy', description='policy'),
    signature?: string(name='signature', description='signature'),
    url?: string(name='url', description='url'),
  }(name='data'),
  requestId?: string(name='requestId', description='requestId'),
}

model GenerateProblemPictureUploadSignResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateProblemPictureUploadSignResponseBody(name='body'),
}

async function generateProblemPictureUploadSign(request: GenerateProblemPictureUploadSignRequest): GenerateProblemPictureUploadSignResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return generateProblemPictureUploadSignWithOptions(request, headers, runtime);
}

async function generateProblemPictureUploadSignWithOptions(request: GenerateProblemPictureUploadSignRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GenerateProblemPictureUploadSignResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.fileName)) {
    body.fileName = request.fileName;
  }
  if (!Util.isUnset(request.fileSize)) {
    body.fileSize = request.fileSize;
  }
  if (!Util.isUnset(request.fileType)) {
    body.fileType = request.fileType;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GenerateProblemPictureUploadSign', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/process/oss/generatePostPolicy`, 'json', req, runtime);
}

model GetEscalationPlanRequest {
  clientToken?: string(name='clientToken', description='幂等标识'),
  escalationPlanId?: long(name='escalationPlanId', description='升级计划id'),
}

model GetEscalationPlanResponseBody = {
  data?: {
    createTime?: string(name='createTime', description='创建时间'),
    escalationPlanDescription?: string(name='escalationPlanDescription', description='升级计划描述'),
    escalationPlanId?: long(name='escalationPlanId', description='升级计划id'),
    escalationPlanName?: string(name='escalationPlanName', description='升级计划名称'),
    escalationPlanRules?: [ 
      {
        escalationPlanConditions?: [ 
          {
            effection?: string(name='effection', description='影响等级'),
            level?: string(name='level', description='事件等级'),
          }
        ](name='escalationPlanConditions', description='升级计划条件'),
        escalationPlanRuleId?: long(name='escalationPlanRuleId', description='升级计划id'),
        escalationPlanStrategies?: [ 
          {
            escalationPlanType?: string(name='escalationPlanType', description='升级计划类型'),
            noticeChannels?: string(name='noticeChannels', description='通知对象渠道'),
            noticeObjectList?: [ 
              {
                noticeObjectId?: long(name='noticeObjectId', description='通知对象id'),
                noticeObjectName?: string(name='noticeObjectName', description='通知对象名称'),
              }
            ](name='noticeObjectList', description='通知对象列表'),
            noticeTime?: long(name='noticeTime', description='通知时间'),
          }
        ](name='escalationPlanStrategies', description='升级计划策略'),
      }
    ](name='escalationPlanRules', description='升级计划规则列表'),
    escalationPlanScopeObjects?: [ 
      {
        scope?: string(name='scope', description='范围对象类型'),
        scopeObjectId?: long(name='scopeObjectId', description='范围对象id'),
        scopeObjectName?: string(name='scopeObjectName', description='范围对象名称'),
      }
    ](name='escalationPlanScopeObjects', description='升级计划范围对象列表'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetEscalationPlanResponse = {
  headers: map[string]string(name='headers'),
  body: GetEscalationPlanResponseBody(name='body'),
}

async function getEscalationPlan(request: GetEscalationPlanRequest): GetEscalationPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getEscalationPlanWithOptions(request, headers, runtime);
}

async function getEscalationPlanWithOptions(request: GetEscalationPlanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetEscalationPlanResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.escalationPlanId)) {
    body.escalationPlanId = request.escalationPlanId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GetEscalationPlan', '2021-04-13', 'HTTPS', 'POST', 'AK', `/escalationPlan/detail`, 'json', req, runtime);
}

model GetEventRequest {
  monitorSourceId?: long(name='monitorSourceId', description='监控源ID不能为空'),
}

model GetEventResponseBody = {
  data?: {
    eventJson?: string(name='eventJson', description='告警内容'),
    eventTime?: string(name='eventTime', description='告警上报时间'),
    monitorSourceId?: long(name='monitorSourceId', description='告警源ID'),
    monitorSourceName?: string(name='monitorSourceName', description='告警源名称'),
  }(name='data', description='告警'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetEventResponse = {
  headers: map[string]string(name='headers'),
  body: GetEventResponseBody(name='body'),
}

async function getEvent(request: GetEventRequest): GetEventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getEventWithOptions(request, headers, runtime);
}

async function getEventWithOptions(request: GetEventRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetEventResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.monitorSourceId)) {
    body.monitorSourceId = request.monitorSourceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GetEvent', '2021-04-13', 'HTTPS', 'POST', 'AK', `/events/getLastTimeEvent`, 'json', req, runtime);
}

model GetHomePageGuidanceRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
}

model GetHomePageGuidanceResponseBody = {
  data?: {
    notifySubscriptionStatus?: boolean(name='notifySubscriptionStatus', description='通知订阅配置状态'),
    serviceGroupStatus?: boolean(name='serviceGroupStatus', description='服务组配置状态'),
    serviceStatus?: boolean(name='serviceStatus', description='服务配置状态'),
    usersStatus?: boolean(name='usersStatus', description='用户配置状态'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetHomePageGuidanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetHomePageGuidanceResponseBody(name='body'),
}

async function getHomePageGuidance(request: GetHomePageGuidanceRequest): GetHomePageGuidanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getHomePageGuidanceWithOptions(request, headers, runtime);
}

async function getHomePageGuidanceWithOptions(request: GetHomePageGuidanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetHomePageGuidanceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GetHomePageGuidance', '2021-04-13', 'HTTPS', 'POST', 'AK', `/guidance/detail`, 'json', req, runtime);
}

model GetIncidentRequest {
  clientToken?: string(name='clientToken', description='幂等校验'),
  incidentId?: long(name='incidentId', description='事件ID'),
}

model GetIncidentResponseBody = {
  data?: {
    assignUserId?: long(name='assignUserId', description='分派的用户ID'),
    assignUserName?: string(name='assignUserName', description='分派的用户姓名 (用户表获取)'),
    assignUserPhone?: string(name='assignUserPhone', description='分派的用户手机号'),
    createTime?: string(name='createTime', description='创建时间'),
    durationTime?: long(name='durationTime', description='持续时间'),
    effect?: string(name='effect', description='HIGH	影响等级 高：HIGH 低 LOW'),
    incidentDescription?: string(name='incidentDescription', description='事件描述'),
    incidentId?: long(name='incidentId', description='事件Id'),
    incidentLevel?: string(name='incidentLevel', description='事件级别 P1 P2 P3 P4'),
    incidentNumber?: string(name='incidentNumber', description='事件编号'),
    incidentStatus?: string(name='incidentStatus', description='事件状态 ASSIGNED已分派 RESPONDED已响应  FINISHED已完结'),
    incidentTitle?: string(name='incidentTitle', description='事件标题'),
    isManual?: boolean(name='isManual', description='事件来源 是：手动 否：自动'),
    isUpgrade?: boolean(name='isUpgrade', description='是否升级 是 否'),
    problemId?: long(name='problemId', description='故障Id'),
    problemNumber?: string(name='problemNumber', description='故障编号'),
    relatedServiceDescription?: string(name='relatedServiceDescription', description='关联服务描述'),
    relatedServiceId?: long(name='relatedServiceId', description='关联服务ID'),
    relatedServiceName?: string(name='relatedServiceName', description='关联服务名称'),
    routeRuleId?: long(name='routeRuleId', description='流转规则ID'),
    routeRuleName?: string(name='routeRuleName', description='流转规则名称'),
  }(name='data'),
  requestId?: string(name='requestId'),
}

model GetIncidentResponse = {
  headers: map[string]string(name='headers'),
  body: GetIncidentResponseBody(name='body'),
}

async function getIncident(request: GetIncidentRequest): GetIncidentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getIncidentWithOptions(request, headers, runtime);
}

async function getIncidentWithOptions(request: GetIncidentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetIncidentResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.incidentId)) {
    body.incidentId = request.incidentId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GetIncident', '2021-04-13', 'HTTPS', 'POST', 'AK', `/incident/detail`, 'json', req, runtime);
}

model GetIncidentStatisticsRequest {
  clientToken?: string(name='clientToken', description='幂等校验Id'),
}

model GetIncidentStatisticsResponseBody = {
  data?: {
    allFinish?: int32(name='allFinish', description='所有 完结'),
    allResponse?: int32(name='allResponse', description='所有 待响应'),
    myFinish?: int32(name='myFinish', description='我的 完结'),
    myResponse?: int32(name='myResponse', description='我的 待响应'),
  }(name='data'),
  requestId?: string(name='requestId'),
}

model GetIncidentStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetIncidentStatisticsResponseBody(name='body'),
}

async function getIncidentStatistics(request: GetIncidentStatisticsRequest): GetIncidentStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getIncidentStatisticsWithOptions(request, headers, runtime);
}

async function getIncidentStatisticsWithOptions(request: GetIncidentStatisticsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetIncidentStatisticsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GetIncidentStatistics', '2021-04-13', 'HTTPS', 'POST', 'AK', `/incident/count`, 'json', req, runtime);
}

model GetIncidentSubtotalCountRequest {
  clientToken?: string(name='clientToken', description='幂等标识'),
  incidentIds?: [ long ](name='incidentIds', description='事件id列表'),
}

model GetIncidentSubtotalCountResponseBody = {
  data?: {
    requestId?: string(name='requestId', description='id of the request'),
    subtotalCount?: map[string]any(name='subtotalCount', description='map'),
  }(name='data', description='data'),
}

model GetIncidentSubtotalCountResponse = {
  headers: map[string]string(name='headers'),
  body: GetIncidentSubtotalCountResponseBody(name='body'),
}

async function getIncidentSubtotalCount(request: GetIncidentSubtotalCountRequest): GetIncidentSubtotalCountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getIncidentSubtotalCountWithOptions(request, headers, runtime);
}

async function getIncidentSubtotalCountWithOptions(request: GetIncidentSubtotalCountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetIncidentSubtotalCountResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.incidentIds)) {
    body.incidentIds = request.incidentIds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GetIncidentSubtotalCount', '2021-04-13', 'HTTPS', 'POST', 'AK', `/incident/subtotal/count`, 'json', req, runtime);
}

model GetIntegrationConfigRequest {
  clientToken?: string(name='clientToken', description='幂等id'),
  integrationConfigId?: long(name='integrationConfigId', description='集成配置id'),
}

model GetIntegrationConfigResponseBody = {
  data?: {
    accessKey?: string(name='accessKey', description='集成秘钥'),
    integrationConfigId?: long(name='integrationConfigId', description='集成配置id、'),
    isReceivedEvent?: boolean(name='isReceivedEvent', description='是否接收报警'),
    monitorSourceId?: long(name='monitorSourceId', description='监控源id'),
    monitorSourceName?: string(name='monitorSourceName', description='监控源名称'),
    monitorSourceShortName?: string(name='monitorSourceShortName', description='监控源简称'),
    status?: string(name='status', description='集成配置状态，DISABLE 禁用，INTEGRATED 已集成，UNINTEGRATED未集成'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetIntegrationConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetIntegrationConfigResponseBody(name='body'),
}

async function getIntegrationConfig(request: GetIntegrationConfigRequest): GetIntegrationConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getIntegrationConfigWithOptions(request, headers, runtime);
}

async function getIntegrationConfigWithOptions(request: GetIntegrationConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetIntegrationConfigResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.integrationConfigId)) {
    body.integrationConfigId = request.integrationConfigId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GetIntegrationConfig', '2021-04-13', 'HTTPS', 'POST', 'AK', `/integrationConfig/detail`, 'json', req, runtime);
}

model GetProblemRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  problemId?: long(name='problemId', description='故障ID'),
}

model GetProblemResponseBody = {
  data?: {
    cancelProblemOperateLogs?: [ 
      {
        actionName?: string(name='actionName', description='动作名称'),
        actionTime?: string(name='actionTime', description='操作时间'),
        operator?: string(name='operator', description='操作人'),
        userId?: long(name='userId', description='用户ID'),
      }
    ](name='cancelProblemOperateLogs', description='已取消故障操作日志'),
    cancelReason?: long(name='cancelReason', description='取消原因'),
    cancelReasonDescription?: string(name='cancelReasonDescription', description='取消原因描述'),
    coordinationGroups?: [ 
      {
        serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
        serviceGroupName?: string(name='serviceGroupName', description='服务组名字'),
      }
    ](name='coordinationGroups', description='应急协同组'),
    createTime?: string(name='createTime', description='创建时间'),
    discoverTime?: string(name='discoverTime', description='发现时间'),
    durationTime?: long(name='durationTime', description='持续时间'),
    effectionServices?: [ 
      {
        description?: string(name='description', description='影响描述'),
        effectionLevel?: long(name='effectionLevel', description='影响等级 P1 . P2 P3 P4'),
        effectionServiceId?: long(name='effectionServiceId', description='服务ID'),
        effectionStatus?: int32(name='effectionStatus', description='影响服务状态  RECOVERED 已经恢复 ,UN_RECOVERED 未恢复'),
        serviceName?: string(name='serviceName', description='服务名称'),
      }
    ](name='effectionServices', description='影响服务'),
    feedback?: string(name='feedback', description='舆情反馈'),
    handingProblemOperateLogs?: [ 
      {
        actionName?: string(name='actionName', description='动作名称'),
        actionTime?: string(name='actionTime', description='操作时间'),
        operator?: string(name='operator', description='操作人'),
        userId?: long(name='userId', description='用户id'),
      }
    ](name='handingProblemOperateLogs', description='处理中故障操作日志'),
    incidentId?: long(name='incidentId', description='事件id'),
    incidentNumber?: string(name='incidentNumber', description='事件编号'),
    mainHandler?: long(name='mainHandler', description='主要处理人'),
    mainHandlerId?: long(name='mainHandlerId', description='主要处理人ID'),
    mainHandlerPhone?: string(name='mainHandlerPhone', description='主要处理人手机号'),
    preliminaryReason?: string(name='preliminaryReason', description='初步原因'),
    problemId?: long(name='problemId', description='ID'),
    problemLevel?: int32(name='problemLevel', description='故障等级 P1 P2 P3 P4'),
    problemName?: string(name='problemName', description='故障名称'),
    problemNumber?: string(name='problemNumber', description='故障编号'),
    problemStatus?: int32(name='problemStatus', description='故障状态  HANDLING    处理中 RECOVERED  已恢复  REPLAYING   复盘中  REPLAYED     已复盘 CANCEL        已取消'),
    progressSummary?: string(name='progressSummary', description='进展摘要'),
    recoveryTime?: string(name='recoveryTime', description='恢复时间'),
    relatedServiceId?: long(name='relatedServiceId', description='关联服务ID'),
    replayProblemOperateLogs?: [ 
      {
        actionName?: string(name='actionName', description='动作名称'),
        actionTime?: string(name='actionTime', description='操作时间'),
        operator?: string(name='operator', description='操作人'),
        userId?: long(name='userId', description='用户id'),
      }
    ](name='replayProblemOperateLogs', description='已复盘故障操作日志'),
    replayingProblemOperateLogs?: [ 
      {
        actionName?: string(name='actionName', description='动作名称'),
        actionTime?: string(name='actionTime', description='操作时间'),
        operator?: string(name='operator', description='操作人'),
        userId?: long(name='userId', description='用户id'),
      }
    ](name='replayingProblemOperateLogs', description='复盘中故障操作日志'),
    restoredProblemOperateLogs?: [ 
      {
        actionName?: string(name='actionName', description='动作名称'),
        actionTime?: string(name='actionTime', description='操作时间'),
        operator?: string(name='operator', description='操作人'),
        userId?: long(name='userId', description='用户id'),
      }
    ](name='restoredProblemOperateLogs', description='已恢复故障操作日志'),
    serviceName?: string(name='serviceName', description='关联服务 名称'),
    timelines?: [ 
      {
        keyNode?: string(name='keyNode', description='关键节点 码表:PROBLEM_KEY_NODE (逗号分隔)'),
      }
    ](name='timelines', description='故障操作时间线'),
  }(name='data', description='详情'),
  requestId?: string(name='requestId', description='请求ID'),
}

model GetProblemResponse = {
  headers: map[string]string(name='headers'),
  body: GetProblemResponseBody(name='body'),
}

async function getProblem(request: GetProblemRequest): GetProblemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getProblemWithOptions(request, headers, runtime);
}

async function getProblemWithOptions(request: GetProblemRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetProblemResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GetProblem', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/detail`, 'json', req, runtime);
}

model GetProblemEffectionServiceRequest {
  clientToken?: string(name='clientToken', description='clientToken'),
  effectionServiceId?: long(name='effectionServiceId', description='id主键'),
  problemId?: long(name='problemId', description='故障id'),
}

model GetProblemEffectionServiceResponseBody = {
  data?: {
    description?: string(name='description', description='影响描述'),
    effectionServiceId?: long(name='effectionServiceId', description='影响服务id'),
    level?: long(name='level', description='影响等级'),
    picUrl?: [ string ](name='picUrl', description='图片链接'),
    serviceId?: long(name='serviceId', description='服务id'),
    serviceName?: string(name='serviceName', description='服务名称'),
    status?: long(name='status', description='影响状态 0 未恢复 1已恢复'),
  }(name='data'),
  requestId?: string(name='requestId', description='requestId'),
}

model GetProblemEffectionServiceResponse = {
  headers: map[string]string(name='headers'),
  body: GetProblemEffectionServiceResponseBody(name='body'),
}

async function getProblemEffectionService(request: GetProblemEffectionServiceRequest): GetProblemEffectionServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getProblemEffectionServiceWithOptions(request, headers, runtime);
}

async function getProblemEffectionServiceWithOptions(request: GetProblemEffectionServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetProblemEffectionServiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.effectionServiceId)) {
    body.effectionServiceId = request.effectionServiceId;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GetProblemEffectionService', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/process/effectionService/detail`, 'json', req, runtime);
}

model GetProblemImprovementRequest {
  clientToken?: string(name='clientToken', description='幂等校验token'),
  problemId?: string(name='problemId', description='故障ID'),
}

model GetProblemImprovementResponseBody = {
  data?: {
    discoverSource?: string(name='discoverSource', description='发现来源 码表:PROBLEM_DISCOVER_SOURCE'),
    dutyDepartmentId?: string(name='dutyDepartmentId', description='故障责任部门'),
    dutyDepartmentName?: string(name='dutyDepartmentName', description='故障责任部门名称'),
    dutyUserId?: long(name='dutyUserId', description='故障责任人id'),
    dutyUserName?: string(name='dutyUserName', description='故障责任人名称'),
    dutyUserPhone?: string(name='dutyUserPhone', description='故障责任人手机号'),
    injectionMode?: string(name='injectionMode', description='注入方式 码表:PROBLEM_INJECTION_MODE'),
    isManual?: boolean(name='isManual', description='是否手动'),
    measureList?: [ 
      {
        checkStandard?: string(name='checkStandard', description='验收标准'),
        checkUserId?: long(name='checkUserId', description='验收人id'),
        checkUserName?: string(name='checkUserName', description='验收人名称'),
        content?: string(name='content', description='措施内容'),
        directorId?: long(name='directorId', description='负责人id'),
        directorName?: string(name='directorName', description='负责人名称'),
        measureId?: long(name='measureId', description='改进措施id 用于删除或更新'),
        planFinishTime?: string(name='planFinishTime', description='计划完成时间'),
        stalkerId?: long(name='stalkerId', description='跟踪人id'),
        stalkerName?: string(name='stalkerName', description='跟踪人名称'),
        status?: string(name='status', description='UNIMPROVED	状态 IMPROVED 改进 2 未改进UNIMPROVED'),
        type?: long(name='type', description='措施类型'),
      }
    ](name='measureList', description='改进措施列表'),
    monitorSourceName?: string(name='monitorSourceName', description='监控源'),
    problemId?: string(name='problemId', description='故障ID'),
    problemReason?: string(name='problemReason', description='故障原因'),
    recentActivity?: string(name='recentActivity', description='最近活动 码表:PROBLEM_RECENT_ACTIVITY'),
    recoveryMode?: string(name='recoveryMode', description='恢复方式  码表:PROBLEM_RECOVERY_MODE'),
    relationChanges?: string(name='relationChanges', description='关联变更'),
    remark?: string(name='remark', description='备注'),
    replayDutyUserId?: long(name='replayDutyUserId', description='复盘负责人id'),
    replayDutyUserName?: string(name='replayDutyUserName', description='复盘负责人名称'),
    replayDutyUserPhone?: string(name='replayDutyUserPhone', description='复盘负责人手机号'),
    userReport?: long(name='userReport', description='用户上报 码表:PROBLEM_USER_REPORT'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetProblemImprovementResponse = {
  headers: map[string]string(name='headers'),
  body: GetProblemImprovementResponseBody(name='body'),
}

async function getProblemImprovement(request: GetProblemImprovementRequest): GetProblemImprovementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getProblemImprovementWithOptions(request, headers, runtime);
}

async function getProblemImprovementWithOptions(request: GetProblemImprovementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetProblemImprovementResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GetProblemImprovement', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/improvement/detail`, 'json', req, runtime);
}

model GetProblemPreviewRequest {
  clientToken?: string(name='clientToken', description='幂等校验token'),
  effectServiceIds?: [ long ](name='effectServiceIds', description='影响服务'),
  incidentId?: long(name='incidentId', description='事件Id'),
  problemId?: long(name='problemId', description='故障id'),
  problemLevel?: string(name='problemLevel', description='故障等级'),
  problemNotifyType?: string(name='problemNotifyType', description='通告类型'),
  relatedServiceId?: long(name='relatedServiceId', description='所属服务'),
  serviceGroupIds?: [ long ](name='serviceGroupIds', description='应急协同组'),
}

model GetProblemPreviewResponseBody = {
  data?: {
    deAfterData?: string(name='deAfterData', description='降级后数据'),
    deBeforeData?: string(name='deBeforeData', description='降级前数据'),
    mail?: {
      count?: long(name='count', description='数量'),
      users?: [ 
        {
          username?: string(name='username', description='用户名称'),
        }
      ](name='users'),
    }(name='mail', description='邮箱'),
    problem?: {
      coordinationGroups?: [ 
        {
          serviceGroupDescription?: string(name='serviceGroupDescription', description='服务组Maison'),
          serviceGroupId?: long(name='serviceGroupId', description='服务Id'),
          serviceGroupName?: string(name='serviceGroupName', description='服务组名称'),
        }
      ](name='coordinationGroups', description='应急协同组'),
      createTime?: string(name='createTime', description='创建时间'),
      discoverTime?: string(name='discoverTime', description='发现时间'),
      effectionServices?: [ 
        {
          serviceId?: long(name='serviceId', description='影响服务Id'),
          serviceName?: string(name='serviceName', description='影响服务名称'),
        }
      ](name='effectionServices', description='影响服务'),
      isManual?: boolean(name='isManual', description='是否手动'),
      isUpgrade?: boolean(name='isUpgrade', description='是否升级'),
      mainHandlerId?: string(name='mainHandlerId', description='主要处理人Id'),
      mainHandlerName?: string(name='mainHandlerName', description='主要处理人'),
      preliminaryReason?: string(name='preliminaryReason', description='初步原因'),
      problemId?: long(name='problemId', description='故障Id'),
      problemLevel?: string(name='problemLevel', description='故障等级 1=P1 2=P2 3=P3 4=P4'),
      problemName?: string(name='problemName', description='故障名称'),
      problemStatus?: string(name='problemStatus', description='故障状态 1 处理中 2已恢复 3复盘中 4已复盘 5已取消'),
      progressSummary?: string(name='progressSummary', description='进展摘要'),
      recoveryTime?: string(name='recoveryTime', description='恢复时间'),
      relatedServiceId?: long(name='relatedServiceId', description='关联服务ID'),
      serviceName?: string(name='serviceName', description='关联服务 名称'),
    }(name='problem'),
    sms?: {
      count?: long(name='count', description='数量'),
      users?: [ 
        {
          username?: string(name='username', description='用户名称'),
        }
      ](name='users'),
    }(name='sms', description='短信'),
    upAfterData?: string(name='upAfterData', description='升级后数据'),
    upBeforeData?: string(name='upBeforeData', description='升级前数据'),
    voice?: {
      count?: long(name='count', description='数量'),
      users?: [ 
        {
          username?: string(name='username', description='用户'),
        }
      ](name='users'),
    }(name='voice', description='语音'),
    webhook?: {
      count?: long(name='count', description='数量'),
      serviceGroups?: [ 
        {
          serviceName?: string(name='serviceName', description='服务名称'),
        }
      ](name='serviceGroups'),
    }(name='webhook', description='webhook'),
  }(name='data'),
  requestId?: string(name='requestId', description='requestId'),
}

model GetProblemPreviewResponse = {
  headers: map[string]string(name='headers'),
  body: GetProblemPreviewResponseBody(name='body'),
}

async function getProblemPreview(request: GetProblemPreviewRequest): GetProblemPreviewResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getProblemPreviewWithOptions(request, headers, runtime);
}

async function getProblemPreviewWithOptions(request: GetProblemPreviewRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetProblemPreviewResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.effectServiceIds)) {
    body.effectServiceIds = request.effectServiceIds;
  }
  if (!Util.isUnset(request.incidentId)) {
    body.incidentId = request.incidentId;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }
  if (!Util.isUnset(request.problemLevel)) {
    body.problemLevel = request.problemLevel;
  }
  if (!Util.isUnset(request.problemNotifyType)) {
    body.problemNotifyType = request.problemNotifyType;
  }
  if (!Util.isUnset(request.relatedServiceId)) {
    body.relatedServiceId = request.relatedServiceId;
  }
  if (!Util.isUnset(request.serviceGroupIds)) {
    body.serviceGroupIds = request.serviceGroupIds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GetProblemPreview', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/preview`, 'json', req, runtime);
}

model GetResourceStatisticsRequest {
  clientToken?: string(name='clientToken', description='幂等校验'),
}

model GetResourceStatisticsResponseBody = {
  data?: {
    alertCount?: int32(name='alertCount', description='报警总数'),
    incidentCount?: int32(name='incidentCount', description='事件总数'),
    integrationCount?: int32(name='integrationCount', description='集成总数'),
    problemCount?: int32(name='problemCount', description='故障总数'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetResourceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceStatisticsResponseBody(name='body'),
}

async function getResourceStatistics(request: GetResourceStatisticsRequest): GetResourceStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getResourceStatisticsWithOptions(request, headers, runtime);
}

async function getResourceStatisticsWithOptions(request: GetResourceStatisticsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetResourceStatisticsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GetResourceStatistics', '2021-04-13', 'HTTPS', 'POST', 'AK', `/config/resource/count`, 'json', req, runtime);
}

model GetRouteRuleRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  routeRuleId?: long(name='routeRuleId', description='规则ID'),
}

model GetRouteRuleResponseBody = {
  data?: {
    assignObjectId?: long(name='assignObjectId', description='事件分派对象ID（服务组ID 或用户ID）'),
    assignObjectName?: string(name='assignObjectName', description='通知对象名称'),
    assignObjectType?: string(name='assignObjectType', description='事件分派对象类型 SERVICEGROUP 服务组  USER 单个用户'),
    createTime?: string(name='createTime', description='创建时间'),
    effection?: string(name='effection', description='影响程度  LOW一般  HIGH-严重'),
    enableStatus?: string(name='enableStatus', description='是否启用  DISABLE禁用 ENABLE 启用'),
    eventRouteChildRules?: [ 
      {
        childRouteRuleId?: long(name='childRouteRuleId', description='子规则ID'),
        conditions?: [ 
          {
            key?: string(name='key', description='条件可以'),
            operationSymbol?: string(name='operationSymbol', description='操作符'),
            value?: string(name='value', description='匹配值'),
          }
        ](name='conditions'),
        isValidChildRule?: boolean(name='isValidChildRule', description='是否有效得规则true有效 false无效'),
        monitorIntegrationConfigId?: long(name='monitorIntegrationConfigId', description='集成配置ID'),
        monitorSourceId?: long(name='monitorSourceId', description='监控源ID'),
        monitorSourceName?: string(name='monitorSourceName', description='监控源名称'),
        parentRuleId?: long(name='parentRuleId', description='规则ID'),
      }
    ](name='eventRouteChildRules', description='子规则'),
    incidentLevel?: string(name='incidentLevel', description='事件级别 P1 P2 P3 P4'),
    matchCount?: long(name='matchCount', description='命中次数'),
    notifyChannelNames?: [ string ](name='notifyChannelNames', description='通知渠道名称'),
    notifyChannels?: [ string ](name='notifyChannels', description='通知渠道'),
    relatedServiceId?: long(name='relatedServiceId', description='关联服务ID'),
    relatedServiceName?: string(name='relatedServiceName', description='关联服务名称'),
    routeRuleId?: long(name='routeRuleId', description='规则ID'),
    routeType?: string(name='routeType', description='路由类型：INCIDENT 触发事件 ALERT 仅触发报警'),
    ruleName?: string(name='ruleName', description='流转规则名字'),
    timeWindow?: int32(name='timeWindow', description='时间窗口'),
    updateTime?: string(name='updateTime', description='修改时间'),
  }(name='data', description='规则详情'),
  requestId?: string(name='requestId', description='请求ID'),
}

model GetRouteRuleResponse = {
  headers: map[string]string(name='headers'),
  body: GetRouteRuleResponseBody(name='body'),
}

async function getRouteRule(request: GetRouteRuleRequest): GetRouteRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getRouteRuleWithOptions(request, headers, runtime);
}

async function getRouteRuleWithOptions(request: GetRouteRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetRouteRuleResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.routeRuleId)) {
    body.routeRuleId = request.routeRuleId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GetRouteRule', '2021-04-13', 'HTTPS', 'POST', 'AK', `/routeRule/detail`, 'json', req, runtime);
}

model GetServiceRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  serviceId?: long(name='serviceId', description='服务ID'),
}

model GetServiceResponseBody = {
  data?: {
    serviceDescription?: string(name='serviceDescription', description='服务描述'),
    serviceId?: long(name='serviceId', description='服务ID'),
    serviceName?: string(name='serviceName', description='服务名字'),
    updateTime?: string(name='updateTime', description='修改时间'),
  }(name='data', description='服务详情'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetServiceResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceResponseBody(name='body'),
}

async function getService(request: GetServiceRequest): GetServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getServiceWithOptions(request, headers, runtime);
}

async function getServiceWithOptions(request: GetServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetServiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.serviceId)) {
    body.serviceId = request.serviceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GetService', '2021-04-13', 'HTTPS', 'POST', 'AK', `/services/detail`, 'json', req, runtime);
}

model GetServiceGroupRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
}

model GetServiceGroupResponseBody = {
  data?: {
    createTime?: string(name='createTime', description='创建时间'),
    enableWebhook?: string(name='enableWebhook', description='ENABLE 启用 DISABLE 禁用'),
    serviceGroupDescription?: string(name='serviceGroupDescription', description='服务组描述'),
    serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
    serviceGroupName?: string(name='serviceGroupName', description='服务组名称'),
    updateTime?: string(name='updateTime', description='修改时间'),
    users?: [ 
      {
        phone?: string(name='phone', description='手机号'),
        serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
        userId?: long(name='userId', description='用户ID'),
        userName?: string(name='userName', description='用户名字'),
      }
    ](name='users', description='用户ID'),
    webhookLink?: string(name='webhookLink', description='webhook 跳转地址'),
    webhookType?: string(name='webhookType', description='WEIXIN_GROUP 微信 DING_GROUP 钉钉 FEISHU_GROUP飞书'),
  }(name='data'),
  requestId?: string(name='requestId', description='请求ID'),
}

model GetServiceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceGroupResponseBody(name='body'),
}

async function getServiceGroup(request: GetServiceGroupRequest): GetServiceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getServiceGroupWithOptions(request, headers, runtime);
}

async function getServiceGroupWithOptions(request: GetServiceGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetServiceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.serviceGroupId)) {
    body.serviceGroupId = request.serviceGroupId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GetServiceGroup', '2021-04-13', 'HTTPS', 'POST', 'AK', `/services/group/detail`, 'json', req, runtime);
}

model GetServiceGroupPersonSchedulingRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  endTime?: string(name='endTime', description='排班结束时间'),
  serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
  startTime?: string(name='startTime', description='排班开始时间'),
  userId?: long(name='userId', description='用户ID'),
}

model GetServiceGroupPersonSchedulingResponseBody = {
  data?: map[string]any(name='data', description='排班日历'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetServiceGroupPersonSchedulingResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceGroupPersonSchedulingResponseBody(name='body'),
}

async function getServiceGroupPersonScheduling(request: GetServiceGroupPersonSchedulingRequest): GetServiceGroupPersonSchedulingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getServiceGroupPersonSchedulingWithOptions(request, headers, runtime);
}

async function getServiceGroupPersonSchedulingWithOptions(request: GetServiceGroupPersonSchedulingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetServiceGroupPersonSchedulingResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.endTime)) {
    body.endTime = request.endTime;
  }
  if (!Util.isUnset(request.serviceGroupId)) {
    body.serviceGroupId = request.serviceGroupId;
  }
  if (!Util.isUnset(request.startTime)) {
    body.startTime = request.startTime;
  }
  if (!Util.isUnset(request.userId)) {
    body.userId = request.userId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GetServiceGroupPersonScheduling', '2021-04-13', 'HTTPS', 'POST', 'AK', `/services/group/scheduling/user/getScheduling`, 'json', req, runtime);
}

model GetServiceGroupSchedulingRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
}

model GetServiceGroupSchedulingResponseBody = {
  data?: {
    fastScheduling?: {
      dutyPlan?: string(name='dutyPlan', description='值班方案 dutyPlan FAST_CHOICE 快速选择   CUSTOM  自定义'),
      id?: long(name='id', description='快速排班ID'),
      schedulingUsers?: [ 
        {
          schedulingOrder?: int32(name='schedulingOrder', description='排班顺序'),
          schedulingUserId?: long(name='schedulingUserId', description='轮班用户ID'),
          schedulingUserName?: string(name='schedulingUserName', description='轮班用户名字'),
        }
      ](name='schedulingUsers', description='快速轮班用户'),
      singleDuration?: int32(name='singleDuration', description='每人排班时长'),
      singleDurationUnit?: string(name='singleDurationUnit', description='每人排班时长单位 HOUR 小时 DAY 天'),
    }(name='fastScheduling', description='快速排班'),
    fineScheduling?: {
      id?: long(name='id', description='1'),
      period?: int32(name='period', description='1'),
      periodUnit?: string(name='periodUnit', description='循环周期单位 HOUR 小时 DAY 天'),
      schedulingFineShifts?: [ 
        {
          cycleOrder?: long(name='cycleOrder', description='循环次序'),
          schedulingEndTime?: string(name='schedulingEndTime', description='排班结束时间'),
          schedulingOrder?: int32(name='schedulingOrder', description='排班顺序'),
          schedulingStartTime?: string(name='schedulingStartTime', description='排班开始时间'),
          schedulingUserId?: long(name='schedulingUserId', description='排班用户ID'),
          schedulingUserName?: string(name='schedulingUserName', description='排班用户名字'),
          shiftName?: string(name='shiftName', description='班次名称'),
          skipOneDay?: boolean(name='skipOneDay', description='是否跨天'),
        }
      ](name='schedulingFineShifts', description='精细排班班次人员信息'),
      schedulingTemplateFineShifts?: [ 
        {
          schedulingEndTime?: string(name='schedulingEndTime', description='排班结束时间'),
          schedulingOrder?: long(name='schedulingOrder', description='排班顺序'),
          schedulingStartTime?: string(name='schedulingStartTime', description='排班开始时间'),
          schedulingUserId?: string(name='schedulingUserId', description='用户ID'),
          schedulingUserName?: string(name='schedulingUserName', description='排班用户名字'),
          shiftName?: string(name='shiftName', description='班次名称'),
          skipOneDay?: boolean(name='skipOneDay', description='是否跨天'),
        }
      ](name='schedulingTemplateFineShifts', description='精细排班模版'),
      shiftType?: string(name='shiftType', description='班次类型 MORNING_NIGHT 早晚班 MORNING_NOON_NIGHT 早中晚班 CUSTOM 自定义'),
    }(name='fineScheduling', description='精细排班'),
    schedulingWay?: string(name='schedulingWay', description='排班方式 FAST 快速排班 FINE 精细排班'),
    serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
    users?: [ 
      {
        userId?: long(name='userId', description='用户ID'),
        userName?: string(name='userName', description='用户名字'),
      }
    ](name='users', description='已经排班'),
  }(name='data', description='排班详情'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetServiceGroupSchedulingResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceGroupSchedulingResponseBody(name='body'),
}

async function getServiceGroupScheduling(request: GetServiceGroupSchedulingRequest): GetServiceGroupSchedulingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getServiceGroupSchedulingWithOptions(request, headers, runtime);
}

async function getServiceGroupSchedulingWithOptions(request: GetServiceGroupSchedulingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetServiceGroupSchedulingResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.serviceGroupId)) {
    body.serviceGroupId = request.serviceGroupId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GetServiceGroupScheduling', '2021-04-13', 'HTTPS', 'POST', 'AK', `/services/group/scheduling/detail`, 'json', req, runtime);
}

model GetServiceGroupSchedulingPreviewRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  endTime?: string(name='endTime', description='排班结束时间'),
  fastScheduling?: {
    dutyPlan?: string(name='dutyPlan', description='值班方案 dutyPlan FAST_CHOICE 快速选择 CUSTOM 自定义'),
    schedulingUsers?: [ 
      {
        schedulingOrder?: int32(name='schedulingOrder', description='排班顺序'),
        schedulingUserId?: long(name='schedulingUserId', description='轮班用户ID'),
      }
    ](name='schedulingUsers', description='快速轮班用户'),
    singleDuration?: int32(name='singleDuration', description='每人排班时长'),
    singleDurationUnit?: string(name='singleDurationUnit', description='每人排班时长单位 HOUR 小时 DAY 天'),
  }(name='fastScheduling', description='快速排班'),
  fineScheduling?: {
    period?: int32(name='period', description='循环周期'),
    periodUnit?: string(name='periodUnit', description='循环周期单位 HOUR 小时 DAY 天'),
    schedulingFineShifts?: [ 
      {
        schedulingEndTime?: string(name='schedulingEndTime', description='排班结束时间'),
        schedulingOrder?: long(name='schedulingOrder', description='排班顺序'),
        schedulingStartTime?: string(name='schedulingStartTime', description='排班开始时间'),
        shiftName?: string(name='shiftName', description='班次名称'),
      }
    ](name='schedulingFineShifts', description='精细排班班次人员信息'),
    shiftType?: string(name='shiftType', description='班次类型 MORNING_NIGHT 早晚班 MORNING_NOON_NIGHT 早中晚班 CUSTOM 自定义'),
  }(name='fineScheduling', description='精细排'),
  schedulingWay?: string(name='schedulingWay', description='排班方式 FAST 快速排班 FINE 精细排班'),
  serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
  startTime?: string(name='startTime', description='排班开始时间'),
}

model GetServiceGroupSchedulingPreviewResponseBody = {
  data?: map[string]any(name='data', description='服务组排班信息'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetServiceGroupSchedulingPreviewResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceGroupSchedulingPreviewResponseBody(name='body'),
}

async function getServiceGroupSchedulingPreview(request: GetServiceGroupSchedulingPreviewRequest): GetServiceGroupSchedulingPreviewResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getServiceGroupSchedulingPreviewWithOptions(request, headers, runtime);
}

async function getServiceGroupSchedulingPreviewWithOptions(request: GetServiceGroupSchedulingPreviewRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetServiceGroupSchedulingPreviewResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.endTime)) {
    body.endTime = request.endTime;
  }
  if (!Util.isUnset(request.fastScheduling)) {
    body.fastScheduling = request.fastScheduling;
  }
  if (!Util.isUnset(request.fineScheduling)) {
    body.fineScheduling = request.fineScheduling;
  }
  if (!Util.isUnset(request.schedulingWay)) {
    body.schedulingWay = request.schedulingWay;
  }
  if (!Util.isUnset(request.serviceGroupId)) {
    body.serviceGroupId = request.serviceGroupId;
  }
  if (!Util.isUnset(request.startTime)) {
    body.startTime = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GetServiceGroupSchedulingPreview', '2021-04-13', 'HTTPS', 'POST', 'AK', `/services/group/scheduling/preview`, 'json', req, runtime);
}

model GetServiceGroupSpecialPersonSchedulingRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
  userId?: long(name='userId', description='用户ID'),
}

model GetServiceGroupSpecialPersonSchedulingResponseBody = {
  data?: [ 
    {
      schedulingDate?: string(name='schedulingDate', description='排班日期'),
      schedulingEndTime?: string(name='schedulingEndTime', description='排班结束时间'),
      schedulingStartTime?: string(name='schedulingStartTime', description='排班开始时间'),
      schedulingUserId?: long(name='schedulingUserId', description='排班用户ID'),
      serviceGroupId?: long(name='serviceGroupId', description='服务组id'),
      serviceGroupName?: string(name='serviceGroupName', description='服务组名字'),
    }
  ](name='data', description='人员排班信息'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetServiceGroupSpecialPersonSchedulingResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceGroupSpecialPersonSchedulingResponseBody(name='body'),
}

async function getServiceGroupSpecialPersonScheduling(request: GetServiceGroupSpecialPersonSchedulingRequest): GetServiceGroupSpecialPersonSchedulingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getServiceGroupSpecialPersonSchedulingWithOptions(request, headers, runtime);
}

async function getServiceGroupSpecialPersonSchedulingWithOptions(request: GetServiceGroupSpecialPersonSchedulingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetServiceGroupSpecialPersonSchedulingResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.serviceGroupId)) {
    body.serviceGroupId = request.serviceGroupId;
  }
  if (!Util.isUnset(request.userId)) {
    body.userId = request.userId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GetServiceGroupSpecialPersonScheduling', '2021-04-13', 'HTTPS', 'POST', 'AK', `/services/group/scheduling/getUserScheduling`, 'json', req, runtime);
}

model GetSimilarIncidentStatisticsRequest {
  clientToken?: string(name='clientToken', description='幂等标识'),
  createTime?: string(name='createTime', description='触发时间'),
  events?: [ string ](name='events', description='事件告警内容'),
  incidentId?: long(name='incidentId', description='事件id'),
  incidentTitle?: string(name='incidentTitle', description='事件标题'),
  relatedServiceId?: long(name='relatedServiceId', description='关联服务id'),
}

model GetSimilarIncidentStatisticsResponseBody = {
  data?: {
    countInSevenDays?: long(name='countInSevenDays', description='7天内相似事件数量'),
    countInSixMonths?: long(name='countInSixMonths', description='6月内相似事件数量'),
    dailySimilarIncidents?: [ 
      {
        commitment?: long(name='commitment', description='数量'),
        date?: string(name='date', description='日期'),
        day?: long(name='day', description='星期几'),
        month?: long(name='month', description='月份'),
        similarIncidents?: [ 
          {
            assignUserId?: long(name='assignUserId', description='分派人id'),
            assignUserName?: string(name='assignUserName', description='分派人'),
            createTime?: string(name='createTime', description='触发时间'),
            durationTime?: long(name='durationTime', description='持续时间'),
            finishReason?: long(name='finishReason', description='触发原因'),
            finishReasonDescription?: string(name='finishReasonDescription', description='触发原因描述'),
            finishSolutionDescription?: string(name='finishSolutionDescription', description='解决方案描述'),
            incidentFinishSolution?: long(name='incidentFinishSolution', description='解决方案'),
            incidentId?: long(name='incidentId', description='事件id'),
            incidentNumber?: string(name='incidentNumber', description='事件编号'),
            incidentTitle?: string(name='incidentTitle', description='事件名称'),
            relatedRouteRuleId?: long(name='relatedRouteRuleId', description='流转规则id'),
            relatedRouteRuleName?: string(name='relatedRouteRuleName', description='流转规则名称'),
            similarScore?: string(name='similarScore', description='相似度'),
          }
        ](name='similarIncidents', description='相似事件列表'),
        week?: string(name='week', description='周'),
      }
    ](name='dailySimilarIncidents', description='根据日期分类'),
    requestId?: string(name='requestId', description='id of the request'),
    topFiveIncidents?: [ 
      {
        assignUserId?: string(name='assignUserId', description='分派人id'),
        assignUserName?: string(name='assignUserName', description='分派人'),
        createTime?: string(name='createTime', description='触发时间'),
        durationTime?: long(name='durationTime', description='持续时间'),
        finishReason?: long(name='finishReason', description='触发原因'),
        finishReasonDescription?: string(name='finishReasonDescription', description='触发原因描述'),
        finishSolutionDescription?: string(name='finishSolutionDescription', description='解决方案描述'),
        incidentFinishSolution?: long(name='incidentFinishSolution', description='解决方案'),
        incidentId?: long(name='incidentId', description='事件id'),
        incidentNumber?: string(name='incidentNumber', description='事件编号'),
        incidentTitle?: string(name='incidentTitle', description='事件标题'),
        relatedRouteRuleId?: long(name='relatedRouteRuleId', description='流转规则id'),
        relatedRouteRuleName?: string(name='relatedRouteRuleName', description='流转规则名称'),
        similarScore?: string(name='similarScore', description='相似度'),
      }
    ](name='topFiveIncidents', description='topFiveIncidents'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='id of the request'),
}

model GetSimilarIncidentStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetSimilarIncidentStatisticsResponseBody(name='body'),
}

async function getSimilarIncidentStatistics(request: GetSimilarIncidentStatisticsRequest): GetSimilarIncidentStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getSimilarIncidentStatisticsWithOptions(request, headers, runtime);
}

async function getSimilarIncidentStatisticsWithOptions(request: GetSimilarIncidentStatisticsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSimilarIncidentStatisticsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.createTime)) {
    body.createTime = request.createTime;
  }
  if (!Util.isUnset(request.events)) {
    body.events = request.events;
  }
  if (!Util.isUnset(request.incidentId)) {
    body.incidentId = request.incidentId;
  }
  if (!Util.isUnset(request.incidentTitle)) {
    body.incidentTitle = request.incidentTitle;
  }
  if (!Util.isUnset(request.relatedServiceId)) {
    body.relatedServiceId = request.relatedServiceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GetSimilarIncidentStatistics', '2021-04-13', 'HTTPS', 'POST', 'AK', `/incident/similarIncident/statistics`, 'json', req, runtime);
}

model GetSubscriptionRequest {
  subscriptionId?: long(name='subscriptionId'),
}

model GetSubscriptionResponseBody = {
  data?: {
    endTime?: string(name='endTime', description='时效结束时间'),
    expiredType?: string(name='expiredType', description='有效期类型 0 长期 1短期'),
    notifyObjectList?: [ 
      {
        id?: long(name='id', description='id主键'),
        name?: string(name='name', description='通知对象名'),
        notifyObjectId?: long(name='notifyObjectId', description='关联主键id'),
        notifyObjectType?: long(name='notifyObjectType', description='通知对象类型0服务组 1个人'),
      }
    ](name='notifyObjectList', description='通知对象列表'),
    notifyObjectType?: string(name='notifyObjectType', description='0服务组 1个人'),
    notifyStrategyList?: [ 
      {
        instanceType?: long(name='instanceType', description='订阅实例类型，0事件、1报警、2故障'),
        strategies?: [ 
          {
            channels?: string(name='channels', description='通知渠道'),
            conditions?: [ 
              {
                action?: string(name='action', description='事件动作'),
                effection?: string(name='effection', description='影响范围'),
                level?: string(name='level', description='等级'),
                problemNotifyType?: string(name='problemNotifyType', description='故障通知类型'),
              }
            ](name='conditions', description='条件'),
            id?: long(name='id', description='策略主键'),
            periodChannel?: {
              nonWorkday?: string(name='nonWorkday', description='非工作时间'),
              workday?: string(name='workday', description='工作时间'),
            }(name='periodChannel', description='分时间段渠道'),
          }
        ](name='strategies', description='策略'),
      }
    ](name='notifyStrategyList', description='通知策略列表'),
    period?: string(name='period', description='时间段字符串'),
    scope?: string(name='scope', description='0 全部 1服务 2 流转规则'),
    scopeObjectList?: [ 
      {
        id?: long(name='id', description='id主键'),
        scope?: string(name='scope', description='订阅范围类型 0 全部 1服务 2 流转规则'),
        scopeObject?: string(name='scopeObject', description='订阅范围对象名称'),
        scopeObjectId?: long(name='scopeObjectId', description='订阅范围对象关联表主键id'),
      }
    ](name='scopeObjectList'),
    startTime?: string(name='startTime', description='时效开始时间'),
    status?: string(name='status', description='1 启用 0禁用'),
    subscriptionId?: long(name='subscriptionId'),
    subscriptionTitle?: string(name='subscriptionTitle', description='通知订阅名称'),
  }(name='data'),
  requestId?: string(name='requestId'),
}

model GetSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: GetSubscriptionResponseBody(name='body'),
}

async function getSubscription(request: GetSubscriptionRequest): GetSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getSubscriptionWithOptions(request, headers, runtime);
}

async function getSubscriptionWithOptions(request: GetSubscriptionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetSubscriptionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.subscriptionId)) {
    body.subscriptionId = request.subscriptionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GetSubscription', '2021-04-13', 'HTTPS', 'POST', 'AK', `/notify/subscription/detail`, 'json', req, runtime);
}

model GetTenantApplicationRequest {
  clientToken?: string(name='clientToken', description='幂等标识'),
}

model GetTenantApplicationResponseBody = {
  data?: {
    bizId?: string(name='bizId', description='业务id'),
    channel?: string(name='channel', description='云钉协同渠道'),
    corporationId?: string(name='corporationId', description='企业id'),
    progress?: string(name='progress', description='进度'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='id of the request'),
}

model GetTenantApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: GetTenantApplicationResponseBody(name='body'),
}

async function getTenantApplication(request: GetTenantApplicationRequest): GetTenantApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTenantApplicationWithOptions(request, headers, runtime);
}

async function getTenantApplicationWithOptions(request: GetTenantApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTenantApplicationResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GetTenantApplication', '2021-04-13', 'HTTPS', 'POST', 'AK', `/mobileApp/detail`, 'json', req, runtime);
}

model GetUserRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  userId?: long(name='userId', description='用户ID'),
}

model GetUserResponseBody = {
  data?: {
    accountType?: string(name='accountType', description='CUSTOMER:主账号，SUB:子账号'),
    createTime?: string(name='createTime', description='创建时间'),
    email?: string(name='email', description='email'),
    isEditableUser?: boolean(name='isEditableUser', description='是否可编辑'),
    isRelated?: string(name='isRelated', description='是否关联'),
    phone?: string(name='phone', description='用户手机号'),
    ramId?: string(name='ramId', description='ramId'),
    serviceGroups?: [ 
      {
        name?: string(name='name', description='服务组名称'),
        serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
      }
    ](name='serviceGroups', description='所属服务组'),
    userId?: long(name='userId', description='用户ID'),
    username?: string(name='username', description='用户昵称'),
  }(name='data', description='用户'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserResponseBody(name='body'),
}

async function getUser(request: GetUserRequest): GetUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getUserWithOptions(request, headers, runtime);
}

async function getUserWithOptions(request: GetUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetUserResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.userId)) {
    body.userId = request.userId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GetUser', '2021-04-13', 'HTTPS', 'POST', 'AK', `/user/getUser`, 'json', req, runtime);
}

model GetUserGuideStatusRequest {
  clientToken?: string(name='clientToken', description='幂等校验'),
}

model GetUserGuideStatusResponseBody = {
  data?: map[string]any(name='data', description='map'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetUserGuideStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserGuideStatusResponseBody(name='body'),
}

async function getUserGuideStatus(request: GetUserGuideStatusRequest): GetUserGuideStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getUserGuideStatusWithOptions(request, headers, runtime);
}

async function getUserGuideStatusWithOptions(request: GetUserGuideStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetUserGuideStatusResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('GetUserGuideStatus', '2021-04-13', 'HTTPS', 'POST', 'AK', `/user/guide/status`, 'json', req, runtime);
}

model ListAlertsRequest {
  alertLevel?: string(name='alertLevel', description='报警等级 P1 P2 P3 P4'),
  alertName?: string(name='alertName', description='报警名称'),
  alertSourceName?: string(name='alertSourceName', description='报警来源'),
  pageNumber?: long(name='pageNumber', description='当前页'),
  pageSize?: long(name='pageSize', description='页大小'),
  relatedServiceId?: long(name='relatedServiceId', description='服务id'),
}

model ListAlertsResponseBody = {
  data?: [ 
    {
      alertId?: long(name='alertId', description='报警ID'),
      alertLevel?: string(name='alertLevel', description='告警优先级  1，2，3，4  对应 p1,p2,p3,p4'),
      alertSourceName?: string(name='alertSourceName', description='报警源'),
      createTime?: string(name='createTime', description='创建时间'),
      firstEventTime?: string(name='firstEventTime', description='第一次告警上报时间'),
      relatedServiceName?: string(name='relatedServiceName', description='关联服务名称'),
      routeRuleId?: long(name='routeRuleId', description='关联流转规则ID'),
      sourceEventCount?: long(name='sourceEventCount', description='收敛量'),
      title?: string(name='title', description='报警标题'),
    }
  ](name='data', description='报警列表'),
  pageNumber?: int32(name='pageNumber', description='当前页'),
  pageSize?: int32(name='pageSize', description='页的大小'),
  requestId?: string(name='requestId', description='请求ID'),
  totalCount?: long(name='totalCount', description='总条数'),
}

model ListAlertsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAlertsResponseBody(name='body'),
}

async function listAlerts(request: ListAlertsRequest): ListAlertsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listAlertsWithOptions(request, headers, runtime);
}

async function listAlertsWithOptions(request: ListAlertsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAlertsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.alertLevel)) {
    body.alertLevel = request.alertLevel;
  }
  if (!Util.isUnset(request.alertName)) {
    body.alertName = request.alertName;
  }
  if (!Util.isUnset(request.alertSourceName)) {
    body.alertSourceName = request.alertSourceName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.relatedServiceId)) {
    body.relatedServiceId = request.relatedServiceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListAlerts', '2021-04-13', 'HTTPS', 'POST', 'AK', `/alerts/list`, 'json', req, runtime);
}

model ListChartDataForServiceGroupRequest {
  clientToken?: string(name='clientToken'),
  endTime?: string(name='endTime', description='结束时间'),
  startTime?: string(name='startTime', description='开始时间'),
}

model ListChartDataForServiceGroupResponseBody = {
  data?: [ 
    {
      effectionLevel?: map[string]any(name='effectionLevel', description='根据影响等级时间等级分组统计数量'),
      escalationIncidentCount?: long(name='escalationIncidentCount', description='升级事件数'),
      incidentCount?: long(name='incidentCount', description='时间总数'),
      meanTimeToAcknowledge?: long(name='meanTimeToAcknowledge', description='当日平均响应时间单位秒'),
      meanTimeToRepair?: long(name='meanTimeToRepair', description='当日平均完结时间单位秒'),
      time?: string(name='time', description='时间'),
      totalMeanTimeToAcknowledge?: long(name='totalMeanTimeToAcknowledge', description='总平均响应时间'),
      totalMeanTimeToRepair?: long(name='totalMeanTimeToRepair', description='总平均完结时间'),
      unAcknowledgedEscalationIncidentCount?: long(name='unAcknowledgedEscalationIncidentCount', description='未响应升级事件数'),
      unFinishEscalationIncidentCount?: long(name='unFinishEscalationIncidentCount', description='未完结升级事件数'),
    }
  ](name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListChartDataForServiceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListChartDataForServiceGroupResponseBody(name='body'),
}

async function listChartDataForServiceGroup(request: ListChartDataForServiceGroupRequest): ListChartDataForServiceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listChartDataForServiceGroupWithOptions(request, headers, runtime);
}

async function listChartDataForServiceGroupWithOptions(request: ListChartDataForServiceGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListChartDataForServiceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.endTime)) {
    body.endTime = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    body.startTime = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListChartDataForServiceGroup', '2021-04-13', 'HTTPS', 'POST', 'AK', `/statistics/chartDataForServiceGroup/`, 'json', req, runtime);
}

model ListChartDataForUserRequest {
  clientToken?: string(name='clientToken'),
  endTime?: string(name='endTime', description='结束时间'),
  startTime?: string(name='startTime', description='开始时间'),
}

model ListChartDataForUserResponseBody = {
  data?: [ 
    {
      effectionLevel?: map[string]any(name='effectionLevel', description='根据影响等级时间等级分组统计数量'),
      escalationIncidentCount?: long(name='escalationIncidentCount', description='升级事件数'),
      incidentCount?: long(name='incidentCount', description='时间总数'),
      meanTimeToAcknowledge?: long(name='meanTimeToAcknowledge', description='当日平均响应时间单位秒'),
      meanTimeToRepair?: long(name='meanTimeToRepair', description='当日平均完结时间单位秒'),
      time?: string(name='time', description='时间'),
      totalMeanTimeToAcknowledge?: long(name='totalMeanTimeToAcknowledge', description='总平均响应时间'),
      totalMeanTimeToRepair?: long(name='totalMeanTimeToRepair', description='总平均完结时间'),
      unAcknowledgedEscalationIncidentCount?: long(name='unAcknowledgedEscalationIncidentCount', description='未响应升级事件数'),
      unFinishEscalationIncidentCount?: long(name='unFinishEscalationIncidentCount', description='未完结升级事件数'),
    }
  ](name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListChartDataForUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListChartDataForUserResponseBody(name='body'),
}

async function listChartDataForUser(request: ListChartDataForUserRequest): ListChartDataForUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listChartDataForUserWithOptions(request, headers, runtime);
}

async function listChartDataForUserWithOptions(request: ListChartDataForUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListChartDataForUserResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.endTime)) {
    body.endTime = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    body.startTime = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListChartDataForUser', '2021-04-13', 'HTTPS', 'POST', 'AK', `/statistics/chartDataForUser/`, 'json', req, runtime);
}

model ListConfigsRequest {
  clientToken?: string(name='clientToken', description='幂等校验token'),
}

model ListConfigsResponseBody = {
  data?: map[string][ DataValue   ](name='data'),
  requestId?: string(name='requestId', description='requestId'),
}

model ListConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: ListConfigsResponseBody(name='body'),
}

async function listConfigs(request: ListConfigsRequest): ListConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listConfigsWithOptions(request, headers, runtime);
}

async function listConfigsWithOptions(request: ListConfigsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListConfigsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListConfigs', '2021-04-13', 'HTTPS', 'POST', 'AK', `/config/all`, 'json', req, runtime);
}

model ListDataReportForServiceGroupRequest {
  endTime?: string(name='endTime', description='结束时间'),
  serviceGroupName?: string(name='serviceGroupName', description='服务组名称'),
  startTime?: string(name='startTime', description='开始时间'),
}

model ListDataReportForServiceGroupResponseBody = {
  data?: [ 
    {
      escalationIncidentCount?: long(name='escalationIncidentCount', description='升级事件数量'),
      finishProportion?: string(name='finishProportion', description='完结率'),
      incidentCount?: long(name='incidentCount', description='事件数量'),
      meanTimeToAcknowledge?: long(name='meanTimeToAcknowledge', description='MRRA'),
      meanTimeToRepair?: long(name='meanTimeToRepair', description='MTTR'),
      serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
      serviceGroupName?: string(name='serviceGroupName', description='服务组名字'),
      unAcknowledgedEscalationIncidentCount?: long(name='unAcknowledgedEscalationIncidentCount', description='未响应升级事件数量'),
      unFinishEscalationIncidentCount?: long(name='unFinishEscalationIncidentCount', description='未完成升级事件数量'),
    }
  ](name='data', description='统计数据'),
  pageNumber?: long(name='pageNumber', description='当前页'),
  pageSIze?: long(name='pageSIze', description='页大小'),
  requestId?: string(name='requestId', description='Id of the request'),
  totalCount?: long(name='totalCount', description='总数'),
}

model ListDataReportForServiceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataReportForServiceGroupResponseBody(name='body'),
}

async function listDataReportForServiceGroup(request: ListDataReportForServiceGroupRequest): ListDataReportForServiceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDataReportForServiceGroupWithOptions(request, headers, runtime);
}

async function listDataReportForServiceGroupWithOptions(request: ListDataReportForServiceGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataReportForServiceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.endTime)) {
    body.endTime = request.endTime;
  }
  if (!Util.isUnset(request.serviceGroupName)) {
    body.serviceGroupName = request.serviceGroupName;
  }
  if (!Util.isUnset(request.startTime)) {
    body.startTime = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListDataReportForServiceGroup', '2021-04-13', 'HTTPS', 'POST', 'AK', `/statistics/listDataReportForServiceGroup`, 'json', req, runtime);
}

model ListDataReportForUserRequest {
  endTime?: string(name='endTime', description='结束时间'),
  pageNumber?: long(name='pageNumber', description='当前页'),
  pageSize?: long(name='pageSize', description='页大小'),
  startTime?: string(name='startTime', description='开始时间'),
}

model ListDataReportForUserResponseBody = {
  data?: [ 
    {
      distributionIncidentCount?: long(name='distributionIncidentCount', description='分配事件数量'),
      escalationIncidentCount?: long(name='escalationIncidentCount', description='升级事件数量'),
      finishIncidentNumber?: long(name='finishIncidentNumber', description='完结事件数量'),
      finishProportion?: string(name='finishProportion', description='完结率'),
      meanTimeToAcknowledge?: string(name='meanTimeToAcknowledge', description='MRRA'),
      meanTimeToRepair?: string(name='meanTimeToRepair', description='MTTA'),
      unAcknowledgedEscalationIncidentCount?: long(name='unAcknowledgedEscalationIncidentCount', description='未响应升级数'),
      unDistributionIncidentCount?: long(name='unDistributionIncidentCount', description='非分配完结数'),
      unFinishEscalationIncidentCount?: long(name='unFinishEscalationIncidentCount', description='未完结事件数'),
      userId?: long(name='userId', description='用户ID'),
      userName?: string(name='userName', description='用户名字'),
    }
  ](name='data', description='个人统计数据'),
  requestId?: string(name='requestId', description='Id of the request'),
  totalCount?: long(name='totalCount', description='总条数'),
}

model ListDataReportForUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataReportForUserResponseBody(name='body'),
}

async function listDataReportForUser(request: ListDataReportForUserRequest): ListDataReportForUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDataReportForUserWithOptions(request, headers, runtime);
}

async function listDataReportForUserWithOptions(request: ListDataReportForUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDataReportForUserResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.endTime)) {
    body.endTime = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    body.startTime = request.startTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListDataReportForUser', '2021-04-13', 'HTTPS', 'POST', 'AK', `/statistics/listDataReportForUser`, 'json', req, runtime);
}

model ListDictionariesRequest {
  clientToken?: string(name='clientToken'),
}

model ListDictionariesResponseBody = {
  data?: map[string][ DataValue   ](name='data'),
  requestId?: string(name='requestId'),
}

model ListDictionariesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDictionariesResponseBody(name='body'),
}

async function listDictionaries(request: ListDictionariesRequest): ListDictionariesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDictionariesWithOptions(request, headers, runtime);
}

async function listDictionariesWithOptions(request: ListDictionariesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDictionariesResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListDictionaries', '2021-04-13', 'HTTPS', 'POST', 'AK', `/dict/list`, 'json', req, runtime);
}

model ListEscalationPlanServicesRequest {
  clientToken?: string(name='clientToken', description='clientToken'),
}

model ListEscalationPlanServicesResponseBody = {
  data?: [ 
    {
      scope?: string(name='scope', description='范围类型'),
      scopeObjectId?: long(name='scopeObjectId', description='范围对象id'),
    }
  ](name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListEscalationPlanServicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListEscalationPlanServicesResponseBody(name='body'),
}

async function listEscalationPlanServices(request: ListEscalationPlanServicesRequest): ListEscalationPlanServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listEscalationPlanServicesWithOptions(request, headers, runtime);
}

async function listEscalationPlanServicesWithOptions(request: ListEscalationPlanServicesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListEscalationPlanServicesResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListEscalationPlanServices', '2021-04-13', 'HTTPS', 'POST', 'AK', `/escalationPlan/services`, 'json', req, runtime);
}

model ListEscalationPlansRequest {
  clientToken?: string(name='clientToken', description='clientToken'),
  escalationPlanName?: string(name='escalationPlanName', description='升级计划名'),
  pageNumber?: long(name='pageNumber', description='pageNumber'),
  pageSize?: long(name='pageSize', description='pageSize'),
  serviceName?: string(name='serviceName', description='服务名称'),
}

model ListEscalationPlansResponseBody = {
  data?: [ 
    {
      escalationPlanId?: long(name='escalationPlanId', description='升级计划id'),
      escalationPlanName?: string(name='escalationPlanName', description='升级计划名称'),
      escalationPlanScopeObjects?: [ 
        {
          scope?: string(name='scope', description='范围对象类型'),
          scopeObjectId?: long(name='scopeObjectId', description='范围对象id（服务id）'),
          scopeObjectName?: string(name='scopeObjectName', description='范围对象名称'),
        }
      ](name='escalationPlanScopeObjects', description='升级计划范围对象'),
      modifyTime?: string(name='modifyTime', description='修改时间'),
      status?: string(name='status', description='启用ENABLE 禁用DISABLE'),
    }
  ](name='data', description='data'),
  pageNumber?: long(name='pageNumber', description='分页参数'),
  pageSize?: long(name='pageSize', description='分页参数'),
  requestId?: string(name='requestId', description='Id of the request'),
  totalCount?: long(name='totalCount', description='总条数'),
}

model ListEscalationPlansResponse = {
  headers: map[string]string(name='headers'),
  body: ListEscalationPlansResponseBody(name='body'),
}

async function listEscalationPlans(request: ListEscalationPlansRequest): ListEscalationPlansResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listEscalationPlansWithOptions(request, headers, runtime);
}

async function listEscalationPlansWithOptions(request: ListEscalationPlansRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListEscalationPlansResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.escalationPlanName)) {
    body.escalationPlanName = request.escalationPlanName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.serviceName)) {
    body.serviceName = request.serviceName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListEscalationPlans', '2021-04-13', 'HTTPS', 'POST', 'AK', `/escalationPlan/list`, 'json', req, runtime);
}

model ListIncidentDetailEscalationPlansRequest {
  clientToken?: string(name='clientToken', description='幂等校验'),
  incidentId?: long(name='incidentId', description='事件ID'),
}

model ListIncidentDetailEscalationPlansResponseBody = {
  data?: {
    escalationPlanId?: long(name='escalationPlanId', description='升级策略ID'),
    escalationPlanName?: string(name='escalationPlanName', description='升级策略名称'),
    nuAcknowledgeEscalationPlan?: [ 
      {
        escalationPlanType?: string(name='escalationPlanType', description='升级策略类型 UN_ACKNOWLEDGE'),
        noticeChannels?: [ string ](name='noticeChannels', description='分配渠道'),
        noticeObjectList?: [ 
          {
            noticeObjectId?: long(name='noticeObjectId', description='分配对象id'),
            noticeObjectName?: string(name='noticeObjectName', description='分配对象名称'),
            noticeObjectPhone?: string(name='noticeObjectPhone', description='分配对象手机号'),
          }
        ](name='noticeObjectList', description='用户信息'),
        noticeTime?: long(name='noticeTime', description='延迟时间'),
        startTime?: long(name='startTime', description='开始时间'),
        status?: string(name='status', description='规则触发状态'),
      }
    ](name='nuAcknowledgeEscalationPlan', description='未响应升级策略'),
    unFinishEscalationPlan?: [ 
      {
        escalationPlanType?: string(name='escalationPlanType', description='升级策略类型 UN_ACKNOWLEDGE'),
        noticeChannels?: [ string ](name='noticeChannels', description='分配渠道'),
        noticeObjectList?: [ 
          {
            noticeObjectId?: long(name='noticeObjectId', description='分配对象id'),
            noticeObjectName?: string(name='noticeObjectName', description='分配对象名称'),
            noticeObjectPhone?: string(name='noticeObjectPhone', description='手机号'),
          }
        ](name='noticeObjectList', description='用户信息'),
        noticeTime?: int32(name='noticeTime', description='延迟时间'),
        startTime?: long(name='startTime', description='开始时间'),
        status?: string(name='status', description='规则触发状态'),
      }
    ](name='unFinishEscalationPlan', description='未完结升级策略规则列表'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListIncidentDetailEscalationPlansResponse = {
  headers: map[string]string(name='headers'),
  body: ListIncidentDetailEscalationPlansResponseBody(name='body'),
}

async function listIncidentDetailEscalationPlans(request: ListIncidentDetailEscalationPlansRequest): ListIncidentDetailEscalationPlansResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listIncidentDetailEscalationPlansWithOptions(request, headers, runtime);
}

async function listIncidentDetailEscalationPlansWithOptions(request: ListIncidentDetailEscalationPlansRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListIncidentDetailEscalationPlansResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.incidentId)) {
    body.incidentId = request.incidentId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListIncidentDetailEscalationPlans', '2021-04-13', 'HTTPS', 'POST', 'AK', `/incident/detail/escalation`, 'json', req, runtime);
}

model ListIncidentDetailTimelinesRequest {
  clientToken?: string(name='clientToken', description='幂等校验'),
  incidentId?: long(name='incidentId', description='事件ID'),
  pageNumber?: long(name='pageNumber', description='页'),
  pageSize?: long(name='pageSize', description='行'),
}

model ListIncidentDetailTimelinesResponseBody = {
  data?: [ 
    {
      action?: string(name='action', description='事件action'),
      createTime?: string(name='createTime', description='创建时间'),
      description?: string(name='description', description='描述'),
      incidentId?: long(name='incidentId', description='事件Id'),
      relatedServiceName?: string(name='relatedServiceName', description='服务名称'),
      remark?: string(name='remark', description='备注'),
      snapshotData?: string(name='snapshotData', description='快照数据'),
      title?: string(name='title', description='主题'),
    }
  ](name='data'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  requestId?: string(name='requestId', description='Id of the request'),
  totalCount?: int32(name='totalCount', description='总数'),
}

model ListIncidentDetailTimelinesResponse = {
  headers: map[string]string(name='headers'),
  body: ListIncidentDetailTimelinesResponseBody(name='body'),
}

async function listIncidentDetailTimelines(request: ListIncidentDetailTimelinesRequest): ListIncidentDetailTimelinesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listIncidentDetailTimelinesWithOptions(request, headers, runtime);
}

async function listIncidentDetailTimelinesWithOptions(request: ListIncidentDetailTimelinesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListIncidentDetailTimelinesResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.incidentId)) {
    body.incidentId = request.incidentId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body.pageSize = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListIncidentDetailTimelines', '2021-04-13', 'HTTPS', 'POST', 'AK', `/incident/detail/timeline`, 'json', req, runtime);
}

model ListIncidentSubtotalsRequest {
  clientToken?: string(name='clientToken', description='幂等校验'),
  incidentId?: long(name='incidentId', description='事件ID'),
}

model ListIncidentSubtotalsResponseBody = {
  data?: [ 
    {
      createTime?: string(name='createTime', description='创建时间'),
      createUserId?: long(name='createUserId', description='操作人Id'),
      createUserName?: string(name='createUserName', description='操作人'),
      createUserPhone?: string(name='createUserPhone', description='操作人手机号'),
      description?: string(name='description', description='描述'),
    }
  ](name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListIncidentSubtotalsResponse = {
  headers: map[string]string(name='headers'),
  body: ListIncidentSubtotalsResponseBody(name='body'),
}

async function listIncidentSubtotals(request: ListIncidentSubtotalsRequest): ListIncidentSubtotalsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listIncidentSubtotalsWithOptions(request, headers, runtime);
}

async function listIncidentSubtotalsWithOptions(request: ListIncidentSubtotalsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListIncidentSubtotalsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.incidentId)) {
    body.incidentId = request.incidentId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListIncidentSubtotals', '2021-04-13', 'HTTPS', 'POST', 'AK', `/incident/list/subtotal`, 'json', req, runtime);
}

model ListIncidentTimelinesRequest {
  clientToken?: string(name='clientToken', description='幂等校验Id'),
  pageNumber?: long(name='pageNumber', description='页'),
  pageSize?: long(name='pageSize', description='行'),
}

model ListIncidentTimelinesResponseBody = {
  data?: [ 
    {
      action?: string(name='action', description='动态类型  触发新增 INCIDENT_ADD 响应 INCIDENT_RESPONSE 转交 INCIDENT_DELIVER 变更 INCIDENT_UPDATE 添加小计 INCIDENT_ADD_SUBTOTAL 完结 INCIDENT_FINISH 分配 INCIDENT_ASSIGN 升级 INCIDENT_UPGRAD'),
      createTime?: string(name='createTime', description='创建时间'),
      description?: long(name='description', description='描述'),
      incidentId?: long(name='incidentId', description='事件Id'),
      incidentNumber?: string(name='incidentNumber', description='事件编号'),
      incidentTitle?: string(name='incidentTitle', description='事件标题'),
      relatedServiceName?: string(name='relatedServiceName', description='服务名称'),
      remark?: string(name='remark', description='备注'),
      snapshotData?: string(name='snapshotData', description='动态快照数据'),
      title?: string(name='title', description='动态'),
    }
  ](name='data'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  requestId?: string(name='requestId'),
  totalCount?: int32(name='totalCount', description='总数'),
}

model ListIncidentTimelinesResponse = {
  headers: map[string]string(name='headers'),
  body: ListIncidentTimelinesResponseBody(name='body'),
}

async function listIncidentTimelines(request: ListIncidentTimelinesRequest): ListIncidentTimelinesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listIncidentTimelinesWithOptions(request, headers, runtime);
}

async function listIncidentTimelinesWithOptions(request: ListIncidentTimelinesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListIncidentTimelinesResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body.pageSize = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListIncidentTimelines', '2021-04-13', 'HTTPS', 'POST', 'AK', `/incident/timeline`, 'json', req, runtime);
}

model ListIncidentsRequest {
  clientToken?: string(name='clientToken', description='幂等校验id'),
  createEndTime?: string(name='createEndTime', description='创建结束时间'),
  createStartTime?: string(name='createStartTime', description='创建开始时间'),
  effect?: string(name='effect', description='影响等级 高：HIGH 低 LOW'),
  incidentLevel?: string(name='incidentLevel', description='事件级别 P1 P2 P3 P4'),
  incidentStatus?: string(name='incidentStatus', description='事件状态 ASSIGNED已分派 RESPONDED已响应  FINISHED已完结'),
  me?: int32(name='me', description='是否自己 1是 0不是'),
  pageNumber?: int32(name='pageNumber', description='页'),
  pageSize?: int32(name='pageSize', description='行'),
  relationServiceId?: long(name='relationServiceId', description='关联服务ID'),
}

model ListIncidentsResponseBody = {
  data?: [ 
    {
      assignUserId?: long(name='assignUserId', description='分派的用户ID'),
      assignUserName?: string(name='assignUserName', description='分派的用户姓名'),
      assignUserPhone?: string(name='assignUserPhone', description='分派人手机号'),
      createTime?: string(name='createTime', description='创建时间'),
      effect?: string(name='effect', description='影响等级 高：HIGH 低 LOW'),
      incidentId?: long(name='incidentId'),
      incidentLevel?: string(name='incidentLevel', description='事件级别 P1 P2 P3 P4'),
      incidentNumber?: string(name='incidentNumber', description='事件编号'),
      incidentStatus?: string(name='incidentStatus', description='事件状态 0已分派 1已响应 2已完结'),
      incidentTitle?: string(name='incidentTitle', description='事件标题'),
      isManual?: boolean(name='isManual', description='事件来源 是=手动 否=自动'),
      relatedServiceId?: long(name='relatedServiceId', description='关联服务ID'),
      relatedServiceName?: string(name='relatedServiceName', description='关联服务名称'),
      routeRuleId?: long(name='routeRuleId', description='流转规则ID'),
      routeRuleName?: string(name='routeRuleName'),
    }
  ](name='data'),
  pageNumber?: int32(name='pageNumber', description='页'),
  pageSize?: int32(name='pageSize', description='行'),
  requestId?: string(name='requestId', description='requestId'),
  totalCount?: int32(name='totalCount', description='总数'),
}

model ListIncidentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListIncidentsResponseBody(name='body'),
}

async function listIncidents(request: ListIncidentsRequest): ListIncidentsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listIncidentsWithOptions(request, headers, runtime);
}

async function listIncidentsWithOptions(request: ListIncidentsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListIncidentsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.createEndTime)) {
    body.createEndTime = request.createEndTime;
  }
  if (!Util.isUnset(request.createStartTime)) {
    body.createStartTime = request.createStartTime;
  }
  if (!Util.isUnset(request.effect)) {
    body.effect = request.effect;
  }
  if (!Util.isUnset(request.incidentLevel)) {
    body.incidentLevel = request.incidentLevel;
  }
  if (!Util.isUnset(request.incidentStatus)) {
    body.incidentStatus = request.incidentStatus;
  }
  if (!Util.isUnset(request.me)) {
    body.me = request.me;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.relationServiceId)) {
    body.relationServiceId = request.relationServiceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListIncidents', '2021-04-13', 'HTTPS', 'POST', 'AK', `/incident/list`, 'json', req, runtime);
}

model ListIntegrationConfigTimelinesRequest {
  clientToken?: string(name='clientToken', description='幂等参数'),
  integrationConfigId?: long(name='integrationConfigId', description='集成配置id'),
  pageNumber?: long(name='pageNumber', description='分页参数'),
  pageSize?: long(name='pageSize', description='分页参数'),
}

model ListIntegrationConfigTimelinesResponseBody = {
  data?: [ 
    {
      createTime?: string(name='createTime', description='创建时间'),
      description?: string(name='description', description='描述'),
      title?: string(name='title', description='主题'),
    }
  ](name='data'),
  pageNumber?: long(name='pageNumber', description='pageNumber'),
  pageSize?: long(name='pageSize', description='pageSize'),
  requestId?: string(name='requestId', description='requestId'),
  totalCount?: long(name='totalCount', description='totalCount'),
}

model ListIntegrationConfigTimelinesResponse = {
  headers: map[string]string(name='headers'),
  body: ListIntegrationConfigTimelinesResponseBody(name='body'),
}

async function listIntegrationConfigTimelines(request: ListIntegrationConfigTimelinesRequest): ListIntegrationConfigTimelinesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listIntegrationConfigTimelinesWithOptions(request, headers, runtime);
}

async function listIntegrationConfigTimelinesWithOptions(request: ListIntegrationConfigTimelinesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListIntegrationConfigTimelinesResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.integrationConfigId)) {
    body.integrationConfigId = request.integrationConfigId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body.pageSize = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListIntegrationConfigTimelines', '2021-04-13', 'HTTPS', 'POST', 'AK', `/integrationConfig/timeline`, 'json', req, runtime);
}

model ListIntegrationConfigsRequest {
  clientToken?: string(name='clientToken', description='幂等id'),
  monitorSourceName?: string(name='monitorSourceName'),
}

model ListIntegrationConfigsResponseBody = {
  data?: [ 
    {
      integrationConfigId?: long(name='integrationConfigId', description='集成配置id'),
      isReceivedEvent?: boolean(name='isReceivedEvent', description='是否已接受报警'),
      monitorSourceId?: long(name='monitorSourceId', description='监控源id'),
      monitorSourceName?: string(name='monitorSourceName', description='监控源名城'),
      monitorSourceShortName?: string(name='monitorSourceShortName', description='监控源简称'),
      status?: string(name='status', description='集成配置状态'),
    }
  ](name='data'),
  requestId?: string(name='requestId'),
}

model ListIntegrationConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: ListIntegrationConfigsResponseBody(name='body'),
}

async function listIntegrationConfigs(request: ListIntegrationConfigsRequest): ListIntegrationConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listIntegrationConfigsWithOptions(request, headers, runtime);
}

async function listIntegrationConfigsWithOptions(request: ListIntegrationConfigsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListIntegrationConfigsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.monitorSourceName)) {
    body.monitorSourceName = request.monitorSourceName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListIntegrationConfigs', '2021-04-13', 'HTTPS', 'POST', 'AK', `/integrationConfig/list`, 'json', req, runtime);
}

model ListMonitorSourcesRequest {
  clientToken?: string(name='clientToken'),
}

model ListMonitorSourcesResponseBody = {
  data?: [ 
    {
      fieldKeys?: [ string ](name='fieldKeys'),
      monitorSourceId?: long(name='monitorSourceId'),
      monitorSourceName?: string(name='monitorSourceName'),
    }
  ](name='data'),
  requestId?: string(name='requestId'),
}

model ListMonitorSourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListMonitorSourcesResponseBody(name='body'),
}

async function listMonitorSources(request: ListMonitorSourcesRequest): ListMonitorSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listMonitorSourcesWithOptions(request, headers, runtime);
}

async function listMonitorSourcesWithOptions(request: ListMonitorSourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListMonitorSourcesResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListMonitorSources', '2021-04-13', 'HTTPS', 'POST', 'AK', `/monitorSource/list`, 'json', req, runtime);
}

model ListProblemDetailOperationsRequest {
  clientToken?: string(name='clientToken', description='幂等校验'),
  createTimeSort?: string(name='createTimeSort', description='时间排序'),
  pageNumber?: int32(name='pageNumber', description='页'),
  pageSize?: int32(name='pageSize', description='行'),
  problemId?: long(name='problemId', description='故障id'),
}

model ListProblemDetailOperationsResponseBody = {
  data?: [ 
    {
      action?: string(name='action', description='升级 PROBLEM_UPGRADE 撤销 PROBLEM_REVOKE 恢复 PROBLEM_RESTORE 复盘 PROBLEM_IN_REVIEW 完结 PROBLEM_REOPENED 取消 PROBLEM_CANCEL 更新故障通告 PROBLEM_UPDATE_NOTIFY 添加故障小计 PROBLEM_ADD_SUBTOTAL 更新故障 PROBLEM_UPDATE'),
      createTime?: string(name='createTime', description='创建时间'),
      description?: string(name='description', description='描述'),
      relatedServiceName?: string(name='relatedServiceName', description='服务'),
      remark?: string(name='remark', description='备注'),
      snapshotData?: string(name='snapshotData', description='快照数据'),
      title?: string(name='title', description='动态标题'),
    }
  ](name='data', description='data'),
  pageNumber?: int32(name='pageNumber', description='页'),
  pageSize?: int32(name='pageSize', description='行'),
  requestId?: string(name='requestId', description='requestId'),
  totalCount?: int32(name='totalCount', description='总数'),
}

model ListProblemDetailOperationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProblemDetailOperationsResponseBody(name='body'),
}

async function listProblemDetailOperations(request: ListProblemDetailOperationsRequest): ListProblemDetailOperationsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProblemDetailOperationsWithOptions(request, headers, runtime);
}

async function listProblemDetailOperationsWithOptions(request: ListProblemDetailOperationsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListProblemDetailOperationsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.createTimeSort)) {
    body.createTimeSort = request.createTimeSort;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListProblemDetailOperations', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/detail/operations`, 'json', req, runtime);
}

model ListProblemOperationsRequest {
  clientToken?: string(name='clientToken', description='幂等校验token'),
  pageNumber?: int32(name='pageNumber', description='页'),
  pageSize?: int32(name='pageSize', description='行'),
}

model ListProblemOperationsResponseBody = {
  data?: [ 
    {
      action?: string(name='action', description='升级    PROBLEM_UPGRADE      撤销     PROBLEM_REVOKE      恢复     PROBLEM_RESTORE       复盘     PROBLEM_IN_REVIEW       完结     PROBLEM_REOPENED       取消     PROBLEM_CANCEL       更新故障通告     PROBLEM_UPDATE_NOTIFY       添加故障小计     PROBLEM_ADD_SUBTOTAL       更新故障     PROBLEM_UPDATE'),
      createTime?: string(name='createTime', description='创建时间'),
      description?: string(name='description', description='描述'),
      problemId?: long(name='problemId', description='故障Id'),
      problemName?: string(name='problemName', description='故障名称'),
      problemNumber?: string(name='problemNumber', description='故障编号'),
      relatedServiceName?: string(name='relatedServiceName', description='服务名称'),
      snapshotData?: string(name='snapshotData', description='快照数据'),
      title?: string(name='title', description='动态标题'),
    }
  ](name='data', description='data'),
  pageNumber?: int32(name='pageNumber', description='页'),
  pageSize?: int32(name='pageSize', description='行'),
  requestId?: string(name='requestId', description='Id of the request'),
  totalCount?: int32(name='totalCount', description='总数'),
}

model ListProblemOperationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProblemOperationsResponseBody(name='body'),
}

async function listProblemOperations(request: ListProblemOperationsRequest): ListProblemOperationsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProblemOperationsWithOptions(request, headers, runtime);
}

async function listProblemOperationsWithOptions(request: ListProblemOperationsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListProblemOperationsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body.pageSize = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListProblemOperations', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/operations`, 'json', req, runtime);
}

model ListProblemSubtotalsRequest {
  clientToken?: string(name='clientToken', description='幂等校验token'),
  problemId?: long(name='problemId', description='故障Id'),
}

model ListProblemSubtotalsResponseBody = {
  data?: [ 
    {
      createRamName?: string(name='createRamName', description='操作人'),
      createTime?: string(name='createTime', description='创建时间'),
      createUserId?: long(name='createUserId', description='人员id'),
      createUserPhone?: string(name='createUserPhone', description='操作人手机号'),
      description?: string(name='description', description='描述'),
    }
  ](name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListProblemSubtotalsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProblemSubtotalsResponseBody(name='body'),
}

async function listProblemSubtotals(request: ListProblemSubtotalsRequest): ListProblemSubtotalsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProblemSubtotalsWithOptions(request, headers, runtime);
}

async function listProblemSubtotalsWithOptions(request: ListProblemSubtotalsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListProblemSubtotalsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListProblemSubtotals', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/list/subtotal`, 'json', req, runtime);
}

model ListProblemTimeLinesRequest {
  clientToken?: string(name='clientToken', description='clientToken'),
  problemId?: long(name='problemId', description='故障ID'),
}

model ListProblemTimeLinesResponseBody = {
  data?: [ 
    {
      content?: string(name='content', description='内容'),
      createTime?: string(name='createTime', description='创建时间'),
      isKey?: boolean(name='isKey', description='是否是关键字 true是 false不是 默认 false'),
      keyNode?: string(name='keyNode', description='关键节点 码表:PROBLEM_KEY_NODE (逗号分隔)'),
      problemTimelineId?: long(name='problemTimelineId', description='时间线id'),
      time?: string(name='time', description='展示时间'),
      updateTime?: string(name='updateTime', description='修改时间'),
      usersInContent?: [ 
        {
          userId?: long(name='userId', description='用户id'),
          username?: string(name='username', description='用户名'),
        }
      ](name='usersInContent', description='内容中的用户信息'),
    }
  ](name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListProblemTimeLinesResponse = {
  headers: map[string]string(name='headers'),
  body: ListProblemTimeLinesResponseBody(name='body'),
}

async function listProblemTimeLines(request: ListProblemTimeLinesRequest): ListProblemTimeLinesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProblemTimeLinesWithOptions(request, headers, runtime);
}

async function listProblemTimeLinesWithOptions(request: ListProblemTimeLinesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListProblemTimeLinesResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListProblemTimeLines', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/detail/timeLines`, 'json', req, runtime);
}

model ListProblemsRequest {
  affectServiceId?: long(name='affectServiceId', description='影响服务ID'),
  clientToken?: string(name='clientToken', description='幂等号'),
  discoveryEndTime?: string(name='discoveryEndTime', description='发现结束时间'),
  discoveryStartTime?: string(name='discoveryStartTime', description='发现开始时间'),
  mainHandlerId?: long(name='mainHandlerId', description='主要处理人'),
  pageNumber?: long(name='pageNumber', description='当前页'),
  pageSize?: long(name='pageSize', description='页大小'),
  problemLevel?: string(name='problemLevel', description='故障等级 1=P1 2=P2 3=P3 4=P4'),
  problemStatus?: string(name='problemStatus', description='故障状态  HANDLING   处理中 RECOVERED 已恢复  REPLAYING   复盘中  REPLAYED     已复盘 CANCEL        已取消'),
  queryType?: string(name='queryType', description='RESPONSIBLE 我负责的       PARTICIPATED 我参与的  ALL 全部'),
  repeaterId?: long(name='repeaterId', description='复盘负责人'),
  restoreEndTime?: string(name='restoreEndTime', description='恢复结束时间'),
  restoreStartTime?: string(name='restoreStartTime', description='恢复开始时间'),
  serviceGroupId?: long(name='serviceGroupId', description='应急协同组'),
}

model ListProblemsResponseBody = {
  data?: [ 
    {
      affectServices?: [ 
        {
          serviceDescription?: string(name='serviceDescription', description='服务描述'),
          serviceId?: long(name='serviceId', description='影响服务ID'),
          serviceName?: string(name='serviceName', description='服务名字'),
          updateTime?: string(name='updateTime', description='修改时间'),
        }
      ](name='affectServices'),
      cancelTime?: string(name='cancelTime', description='取消时间'),
      createTime?: string(name='createTime', description='创建时间'),
      discoverTime?: string(name='discoverTime', description='发现时间'),
      finishTime?: string(name='finishTime', description='完结时间'),
      incidentId?: long(name='incidentId', description='事件ID'),
      isManual?: boolean(name='isManual', description='是否手动'),
      isUpgrade?: boolean(name='isUpgrade', description='是否升级'),
      mainHandlerId?: long(name='mainHandlerId', description='主要处理人ID'),
      mainHandlerName?: string(name='mainHandlerName', description='主要处理人名称'),
      problemId?: long(name='problemId', description='故障id'),
      problemLevel?: string(name='problemLevel', description='故障等级 1=P1 2=P2 3=P3 4=P4'),
      problemName?: string(name='problemName', description='故障名称'),
      problemNumber?: string(name='problemNumber', description='故障编号'),
      problemStatus?: string(name='problemStatus', description='故障状态  HANDLING    处理中 RECOVERED  已恢复  REPLAYING   复盘中  REPLAYED     已复盘 CANCEL        已取消'),
      recoveryTime?: string(name='recoveryTime', description='恢复时间'),
      relatedServiceId?: string(name='relatedServiceId', description='关联服务ID'),
      replayTime?: string(name='replayTime', description='复盘时间'),
      serviceName?: string(name='serviceName', description='关联服务名称'),
      updateTime?: string(name='updateTime', description='修改时间'),
    }
  ](name='data'),
  pageNumber?: long(name='pageNumber', description='当前页'),
  pageSize?: long(name='pageSize', description='页大小'),
  requestId?: string(name='requestId', description='Id of the request'),
  totalCount?: long(name='totalCount', description='总条数'),
}

model ListProblemsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProblemsResponseBody(name='body'),
}

async function listProblems(request: ListProblemsRequest): ListProblemsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProblemsWithOptions(request, headers, runtime);
}

async function listProblemsWithOptions(request: ListProblemsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListProblemsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.affectServiceId)) {
    body.affectServiceId = request.affectServiceId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.discoveryEndTime)) {
    body.discoveryEndTime = request.discoveryEndTime;
  }
  if (!Util.isUnset(request.discoveryStartTime)) {
    body.discoveryStartTime = request.discoveryStartTime;
  }
  if (!Util.isUnset(request.mainHandlerId)) {
    body.mainHandlerId = request.mainHandlerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.problemLevel)) {
    body.problemLevel = request.problemLevel;
  }
  if (!Util.isUnset(request.problemStatus)) {
    body.problemStatus = request.problemStatus;
  }
  if (!Util.isUnset(request.queryType)) {
    body.queryType = request.queryType;
  }
  if (!Util.isUnset(request.repeaterId)) {
    body.repeaterId = request.repeaterId;
  }
  if (!Util.isUnset(request.restoreEndTime)) {
    body.restoreEndTime = request.restoreEndTime;
  }
  if (!Util.isUnset(request.restoreStartTime)) {
    body.restoreStartTime = request.restoreStartTime;
  }
  if (!Util.isUnset(request.serviceGroupId)) {
    body.serviceGroupId = request.serviceGroupId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListProblems', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/listProblems`, 'json', req, runtime);
}

model ListRouteRulesRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  pageNumber?: int32(name='pageNumber', description='第几页'),
  pageSize?: int32(name='pageSize', description='页的大小'),
  ruleName?: bytes(name='ruleName', description='规则名称'),
  serviceName?: bytes(name='serviceName', description='服务名称'),
}

model ListRouteRulesResponseBody = {
  data?: [ 
    {
      assignObjectId?: long(name='assignObjectId', description='事件分派对象ID（服务组ID 或用户ID）'),
      assignObjectType?: string(name='assignObjectType', description='事件分派对象类型 SERVICEGROUP 服务组  USER 单个用户'),
      createTime?: string(name='createTime', description='创建时间'),
      effection?: string(name='effection', description='影响程度 LOW-一般 HIGH-严重'),
      enableStatus?: string(name='enableStatus', description='是否启用  DISABLE禁用. ENABLE 启用'),
      incidentLevel?: string(name='incidentLevel', description='事件级别 P1 P2 P3 P4'),
      matchCount?: long(name='matchCount', description='命中次数'),
      relatedServiceId?: long(name='relatedServiceId', description='关联服务ID'),
      relatedServiceName?: string(name='relatedServiceName', description='服务名称'),
      routeRuleId?: long(name='routeRuleId', description='规则ID'),
      routeType?: string(name='routeType', description='路由类型：INCIDENT 触发事件 ALERT 仅触发报警'),
      ruleName?: string(name='ruleName', description='规则名称'),
      tenantRamId?: long(name='tenantRamId', description='租户ID'),
      timeWindow?: long(name='timeWindow', description='时间窗口'),
      timeWindowUnit?: long(name='timeWindowUnit', description='时间窗口单位 MINUTE 分钟  SECOND 秒'),
      updateTime?: string(name='updateTime', description='修改时间'),
    }
  ](name='data', description='规则列表'),
  pageNumber?: long(name='pageNumber', description='第几页'),
  pageSize?: long(name='pageSize', description='分页大小'),
  requestId?: string(name='requestId', description='请求ID'),
  totalCount?: long(name='totalCount', description='总条数'),
}

model ListRouteRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRouteRulesResponseBody(name='body'),
}

async function listRouteRules(request: ListRouteRulesRequest): ListRouteRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listRouteRulesWithOptions(request, headers, runtime);
}

async function listRouteRulesWithOptions(request: ListRouteRulesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRouteRulesResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.ruleName)) {
    body.ruleName = request.ruleName;
  }
  if (!Util.isUnset(request.serviceName)) {
    body.serviceName = request.serviceName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListRouteRules', '2021-04-13', 'HTTPS', 'POST', 'AK', `/routeRule/list`, 'json', req, runtime);
}

model ListServiceGroupsRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  isScheduled?: boolean(name='isScheduled', description='是否已经排班'),
  orderByScheduleStatus?: boolean(name='orderByScheduleStatus', description='是否根据排班状态排序'),
  pageNumber?: long(name='pageNumber', description='当前页'),
  pageSize?: long(name='pageSize', description='页大小'),
  queryName?: string(name='queryName', description='搜索名称'),
  queryType?: string(name='queryType', description='搜索类型。USER用户 SERVICEGROUP服务组'),
  userId?: long(name='userId', description='用户ID'),
}

model ListServiceGroupsResponseBody = {
  data?: [ 
    {
      enableWebhook?: string(name='enableWebhook', description='ENABLE 启用 DISABLE 禁用'),
      isScheduled?: boolean(name='isScheduled', description='是否已经排班'),
      serviceGroupDescription?: string(name='serviceGroupDescription', description='服务组描述'),
      serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
      serviceGroupName?: string(name='serviceGroupName', description='服务组名字'),
      updateTime?: string(name='updateTime', description='修改时间'),
      users?: [ 
        {
          email?: string(name='email', description='邮箱'),
          phone?: string(name='phone', description='手机号'),
          serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
          userId?: long(name='userId', description='用户ID'),
          userName?: string(name='userName', description='用户名字'),
        }
      ](name='users', description='服务组用户列表'),
      webhookLink?: string(name='webhookLink', description='webhook 跳转地址'),
      webhookType?: string(name='webhookType', description='WEIXIN_GROUP微信DING_GROUP钉钉FEISHU_GROUP飞书'),
    }
  ](name='data', description='服务组列表'),
  pageNumber?: long(name='pageNumber', description='当前页'),
  pageSize?: long(name='pageSize', description='分页大小'),
  requestId?: string(name='requestId', description='Id of the request'),
  totalCount?: long(name='totalCount', description='总条数'),
}

model ListServiceGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceGroupsResponseBody(name='body'),
}

async function listServiceGroups(request: ListServiceGroupsRequest): ListServiceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listServiceGroupsWithOptions(request, headers, runtime);
}

async function listServiceGroupsWithOptions(request: ListServiceGroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListServiceGroupsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.isScheduled)) {
    body.isScheduled = request.isScheduled;
  }
  if (!Util.isUnset(request.orderByScheduleStatus)) {
    body.orderByScheduleStatus = request.orderByScheduleStatus;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.queryName)) {
    body.queryName = request.queryName;
  }
  if (!Util.isUnset(request.queryType)) {
    body.queryType = request.queryType;
  }
  if (!Util.isUnset(request.userId)) {
    body.userId = request.userId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListServiceGroups', '2021-04-13', 'HTTPS', 'POST', 'AK', `/services/group/list`, 'json', req, runtime);
}

model ListServicesRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  pageNumber?: long(name='pageNumber', description='当前页'),
  pageSize?: long(name='pageSize', description='页大小'),
  serviceName?: string(name='serviceName', description='服务名称'),
}

model ListServicesResponseBody = {
  data?: [ 
    {
      serviceDescription?: string(name='serviceDescription', description='服务描述'),
      serviceId?: long(name='serviceId', description='服务ID'),
      serviceName?: string(name='serviceName', description='服务名字'),
      updateTime?: string(name='updateTime', description='修改时间'),
    }
  ](name='data'),
  pageNumber?: long(name='pageNumber', description='当前页'),
  pageSize?: long(name='pageSize', description='页大小'),
  requestId?: string(name='requestId', description='Id of the request'),
  totalCount?: long(name='totalCount', description='总条数'),
}

model ListServicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListServicesResponseBody(name='body'),
}

async function listServices(request: ListServicesRequest): ListServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listServicesWithOptions(request, headers, runtime);
}

async function listServicesWithOptions(request: ListServicesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListServicesResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.serviceName)) {
    body.serviceName = request.serviceName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListServices', '2021-04-13', 'HTTPS', 'POST', 'AK', `/services/list`, 'json', req, runtime);
}

model ListSourceEventsRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  instanceId?: long(name='instanceId', description='报警或者事件ID'),
  instanceType?: string(name='instanceType', description='INCIDENT 事件、ALERT 报警、PROBLEM 故障'),
  pageNumber?: long(name='pageNumber', description='当前页'),
  pageSize?: long(name='pageSize', description='页大小'),
  startRowKey?: string(name='startRowKey', description='startRowKey 用来查询下一页的数据'),
  stopRowKey?: string(name='stopRowKey', description='stopRowKey 用来查询上一页的数据'),
}

model ListSourceEventsResponseBody = {
  data?: [ 
    {
      eventJson?: string(name='eventJson', description='告警内容json'),
      eventTime?: string(name='eventTime', description='告警上报时间'),
      instanceId?: long(name='instanceId', description='关联对象ID'),
      instanceType?: string(name='instanceType', description='INCIDENT 事件、ALERT 报警、PROBLEM 故障'),
      monitorSourceId?: long(name='monitorSourceId', description='监控告警源ID'),
      monitorSourceName?: string(name='monitorSourceName', description='监控告警源名称'),
      routeRuleId?: long(name='routeRuleId', description='规则ID'),
      tenantRamId?: long(name='tenantRamId', description='租户ID'),
    }
  ](name='data'),
  firstRowKey?: string(name='firstRowKey', description='firstRowKey'),
  lastRowKey?: string(name='lastRowKey', description='lastRowKey'),
  pageNumber?: long(name='pageNumber', description='当前页'),
  pageSize?: long(name='pageSize', description='页大小'),
  requestId?: string(name='requestId', description='请求ID'),
  totalCount?: long(name='totalCount', description='总条数'),
}

model ListSourceEventsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSourceEventsResponseBody(name='body'),
}

async function listSourceEvents(request: ListSourceEventsRequest): ListSourceEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSourceEventsWithOptions(request, headers, runtime);
}

async function listSourceEventsWithOptions(request: ListSourceEventsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSourceEventsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    body.instanceId = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    body.instanceType = request.instanceType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.startRowKey)) {
    body.startRowKey = request.startRowKey;
  }
  if (!Util.isUnset(request.stopRowKey)) {
    body.stopRowKey = request.stopRowKey;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListSourceEvents', '2021-04-13', 'HTTPS', 'POST', 'AK', `/events/listOriginalEvent`, 'json', req, runtime);
}

model ListSourceEventsForMonitorSourceRequest {
  monitorSourceId?: long(name='monitorSourceId', description='监控源ID'),
}

model ListSourceEventsForMonitorSourceResponseBody = {
  data?: [ 
    {
      eventJson?: string(name='eventJson', description='告警内容'),
      eventTime?: string(name='eventTime', description='告警上报时间'),
      monitorSourceId?: boolean(name='monitorSourceId', description='监控源ID'),
      monitorSourceName?: string(name='monitorSourceName', description='监控源名称'),
    }
  ](name='data', description='告警列表'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListSourceEventsForMonitorSourceResponse = {
  headers: map[string]string(name='headers'),
  body: ListSourceEventsForMonitorSourceResponseBody(name='body'),
}

async function listSourceEventsForMonitorSource(request: ListSourceEventsForMonitorSourceRequest): ListSourceEventsForMonitorSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSourceEventsForMonitorSourceWithOptions(request, headers, runtime);
}

async function listSourceEventsForMonitorSourceWithOptions(request: ListSourceEventsForMonitorSourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSourceEventsForMonitorSourceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.monitorSourceId)) {
    body.monitorSourceId = request.monitorSourceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListSourceEventsForMonitorSource', '2021-04-13', 'HTTPS', 'POST', 'AK', `/events/queryLastestEvents`, 'json', req, runtime);
}

model ListSubscriptionServiceGroupsRequest {
  clientToken?: string(name='clientToken', description='幂等校验token'),
  serviceIds?: [ long ](name='serviceIds', description='服务列表'),
}

model ListSubscriptionServiceGroupsResponseBody = {
  data?: [ 
    {
      serviceGroupDescription?: string(name='serviceGroupDescription', description='服务组描述'),
      serviceId?: long(name='serviceId', description='主键'),
      serviceName?: string(name='serviceName', description='服务组名称'),
    }
  ](name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListSubscriptionServiceGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSubscriptionServiceGroupsResponseBody(name='body'),
}

async function listSubscriptionServiceGroups(request: ListSubscriptionServiceGroupsRequest): ListSubscriptionServiceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSubscriptionServiceGroupsWithOptions(request, headers, runtime);
}

async function listSubscriptionServiceGroupsWithOptions(request: ListSubscriptionServiceGroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSubscriptionServiceGroupsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.serviceIds)) {
    body.serviceIds = request.serviceIds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListSubscriptionServiceGroups', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/serviceGroup/list`, 'json', req, runtime);
}

model ListSubscriptionsRequest {
  clientToken?: string(name='clientToken', description='幂等参数'),
  notifyObject?: string(name='notifyObject', description='通知对象名'),
  notifyObjectType?: string(name='notifyObjectType', description='通知对象类型notifyWhoType:0服务组 1个人'),
  pageNumber?: int32(name='pageNumber', description='第几页'),
  pageSize?: int32(name='pageSize', description='一页几条'),
  scope?: string(name='scope', description='订阅范围类型 0全部1服务2流转规则'),
  scopeObject?: string(name='scopeObject', description='订阅范围对象名称'),
  subscriptionTitle?: string(name='subscriptionTitle', description='通知订阅名'),
}

model ListSubscriptionsResponseBody = {
  data?: [ 
    {
      endTime?: string(name='endTime', description='时效结束时间'),
      expiredType?: string(name='expiredType', description='有效期类型 0 长期 1短期'),
      notifyObjectList?: [ 
        {
          id?: long(name='id', description='id主键'),
          name?: string(name='name', description='通知对象名'),
          notifyObjectId?: long(name='notifyObjectId', description='关联主键id'),
          notifyObjectType?: long(name='notifyObjectType', description='通知对象类型0服务组 1个人'),
        }
      ](name='notifyObjectList', description='通知对象列表'),
      notifyObjectType?: long(name='notifyObjectType', description='0服务组 1个人'),
      scope?: long(name='scope', description='0 全部 1服务 2 流转规则'),
      scopeObjectList?: [ 
        {
          id?: long(name='id', description='id主键'),
          scope?: long(name='scope', description='订阅范围类型 ALL全部 SERVICE服务 ROUTETULE流转规则'),
          scopeObject?: string(name='scopeObject', description='订阅范围对象名称'),
          scopeObjectId?: long(name='scopeObjectId', description='订阅范围对象关联表主键id'),
        }
      ](name='scopeObjectList', description='订阅范围列表'),
      startTime?: string(name='startTime', description='时效开始时间'),
      status?: string(name='status', description='ENABLE 启用 DISABLE禁用'),
      subscriptionId?: long(name='subscriptionId', description='订阅id'),
      subscriptionTitle?: string(name='subscriptionTitle', description='通知订阅名称'),
    }
  ](name='data'),
  pageNumber?: long(name='pageNumber', description='分页参数'),
  pageSize?: long(name='pageSize', description='分页参数'),
  requestId?: string(name='requestId', description='id of the request'),
  totalCount?: long(name='totalCount', description='分页参数'),
}

model ListSubscriptionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSubscriptionsResponseBody(name='body'),
}

async function listSubscriptions(request: ListSubscriptionsRequest): ListSubscriptionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listSubscriptionsWithOptions(request, headers, runtime);
}

async function listSubscriptionsWithOptions(request: ListSubscriptionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListSubscriptionsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.notifyObject)) {
    body.notifyObject = request.notifyObject;
  }
  if (!Util.isUnset(request.notifyObjectType)) {
    body.notifyObjectType = request.notifyObjectType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.scope)) {
    body.scope = request.scope;
  }
  if (!Util.isUnset(request.scopeObject)) {
    body.scopeObject = request.scopeObject;
  }
  if (!Util.isUnset(request.subscriptionTitle)) {
    body.subscriptionTitle = request.subscriptionTitle;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListSubscriptions', '2021-04-13', 'HTTPS', 'POST', 'AK', `/notify/subscription/list`, 'json', req, runtime);
}

model ListUserSerivceGroupsRequest {
  clientToken?: string(name='clientToken', description='clientToken'),
  userId?: long(name='userId', description='用户ID'),
}

model ListUserSerivceGroupsResponseBody = {
  data?: {
    email?: string(name='email', description='邮箱'),
    phone?: string(name='phone', description='手机号'),
    ramId?: long(name='ramId', description='RAM子账号ID'),
    serviceGroups?: [ 
      {
        serviceGroupDescription?: string(name='serviceGroupDescription', description='服务组描述'),
        serviceGroupId?: long(name='serviceGroupId', description='服务组id'),
        serviceGroupName?: string(name='serviceGroupName', description='服务组名称'),
      }
    ](name='serviceGroups', description='人员所属服务组'),
    userId?: long(name='userId', description='用户ID'),
    username?: string(name='username', description='用户昵称'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListUserSerivceGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserSerivceGroupsResponseBody(name='body'),
}

async function listUserSerivceGroups(request: ListUserSerivceGroupsRequest): ListUserSerivceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listUserSerivceGroupsWithOptions(request, headers, runtime);
}

async function listUserSerivceGroupsWithOptions(request: ListUserSerivceGroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListUserSerivceGroupsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.userId)) {
    body.userId = request.userId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListUserSerivceGroups', '2021-04-13', 'HTTPS', 'POST', 'AK', `/user/preview/detail`, 'json', req, runtime);
}

model ListUsersRequest {
  clientToken?: string(name='clientToken', description='clientToken'),
  pageNumber?: long(name='pageNumber', description='分页参数'),
  pageSize?: long(name='pageSize', description='分页参数'),
  phone?: string(name='phone', description='人员手机号'),
  ramId?: string(name='ramId', description='ramID'),
  scene?: long(name='scene', description='USER_LIST列表 ALL_USERS下拉'),
  synergyChannel?: string(name='synergyChannel', description='移动应用协同渠道'),
  username?: string(name='username', description='人员名称'),
}

model ListUsersResponseBody = {
  data?: [ 
    {
      accountType?: long(name='accountType', description='账户类型'),
      appAccount?: string(name='appAccount', description='移动应用账户'),
      email?: string(name='email', description='邮箱'),
      isEditableUser?: long(name='isEditableUser', description='是否可编辑'),
      isRelated?: string(name='isRelated', description='是否关联'),
      phone?: string(name='phone', description='手机'),
      ramId?: long(name='ramId', description='子账号ramId'),
      synergyChannel?: string(name='synergyChannel', description='移动应用协同渠道'),
      userId?: long(name='userId', description='用户id'),
      username?: string(name='username', description='用户名'),
    }
  ](name='data', description='data'),
  pageNumber?: long(name='pageNumber', description='分页'),
  pageSize?: long(name='pageSize', description='分页'),
  requestId?: string(name='requestId', description='id of the request'),
  totalCount?: long(name='totalCount', description='总条数'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listUsersWithOptions(request, headers, runtime);
}

async function listUsersWithOptions(request: ListUsersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListUsersResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body.pageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.phone)) {
    body.phone = request.phone;
  }
  if (!Util.isUnset(request.ramId)) {
    body.ramId = request.ramId;
  }
  if (!Util.isUnset(request.scene)) {
    body.scene = request.scene;
  }
  if (!Util.isUnset(request.synergyChannel)) {
    body.synergyChannel = request.synergyChannel;
  }
  if (!Util.isUnset(request.username)) {
    body.username = request.username;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ListUsers', '2021-04-13', 'HTTPS', 'POST', 'AK', `/user/list`, 'json', req, runtime);
}

model RecoverProblemRequest {
  problemId?: long(name='problemId', description='故障ID'),
  problemNotifyType?: string(name='problemNotifyType', description='通告类型 PROBLEM_NOTIFY：故障通告 PROBLEM_UPDATE：故障更新 PROBLEM_UPGRADE：故障升级 PROBLEM_DEGRADE：故障降级 PROBLEM_RECOVER：故障恢复 PROBLEM_REISSUE： 故障补发 PROBLEM_CANCEL：故障取消'),
  recoveryTime?: string(name='recoveryTime', description='恢复时间'),
}

model RecoverProblemResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model RecoverProblemResponse = {
  headers: map[string]string(name='headers'),
  body: RecoverProblemResponseBody(name='body'),
}

async function recoverProblem(request: RecoverProblemRequest): RecoverProblemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return recoverProblemWithOptions(request, headers, runtime);
}

async function recoverProblemWithOptions(request: RecoverProblemRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RecoverProblemResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }
  if (!Util.isUnset(request.problemNotifyType)) {
    body.problemNotifyType = request.problemNotifyType;
  }
  if (!Util.isUnset(request.recoveryTime)) {
    body.recoveryTime = request.recoveryTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('RecoverProblem', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/recovery`, 'json', req, runtime);
}

model RefreshIntegrationConfigKeyRequest {
  clientToken?: string(name='clientToken', description='幂等id'),
  integrationConfigId?: long(name='integrationConfigId'),
}

model RefreshIntegrationConfigKeyResponseBody = {
  data?: {
    key?: string(name='key', description='集成秘钥'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model RefreshIntegrationConfigKeyResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshIntegrationConfigKeyResponseBody(name='body'),
}

async function refreshIntegrationConfigKey(request: RefreshIntegrationConfigKeyRequest): RefreshIntegrationConfigKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return refreshIntegrationConfigKeyWithOptions(request, headers, runtime);
}

async function refreshIntegrationConfigKeyWithOptions(request: RefreshIntegrationConfigKeyRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RefreshIntegrationConfigKeyResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.integrationConfigId)) {
    body.integrationConfigId = request.integrationConfigId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('RefreshIntegrationConfigKey', '2021-04-13', 'HTTPS', 'POST', 'AK', `/integrationConfig/refreshKey`, 'json', req, runtime);
}

model RemoveProblemServiceGroupRequest {
  problemId?: long(name='problemId', description='故障ID'),
  serviceGroupIds?: [ long ](name='serviceGroupIds', description='应急协同组'),
}

model RemoveProblemServiceGroupResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model RemoveProblemServiceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveProblemServiceGroupResponseBody(name='body'),
}

async function removeProblemServiceGroup(request: RemoveProblemServiceGroupRequest): RemoveProblemServiceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeProblemServiceGroupWithOptions(request, headers, runtime);
}

async function removeProblemServiceGroupWithOptions(request: RemoveProblemServiceGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveProblemServiceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }
  if (!Util.isUnset(request.serviceGroupIds)) {
    body.serviceGroupIds = request.serviceGroupIds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('RemoveProblemServiceGroup', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/removeServiceGroup`, 'json', req, runtime);
}

model ReplayProblemRequest {
  clientToken?: string(name='clientToken', description='幂等校验token'),
  problemId?: long(name='problemId', description='故障ID'),
  replayDutyUserId?: long(name='replayDutyUserId', description='复盘负责人ID'),
}

model ReplayProblemResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model ReplayProblemResponse = {
  headers: map[string]string(name='headers'),
  body: ReplayProblemResponseBody(name='body'),
}

async function replayProblem(request: ReplayProblemRequest): ReplayProblemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return replayProblemWithOptions(request, headers, runtime);
}

async function replayProblemWithOptions(request: ReplayProblemRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReplayProblemResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }
  if (!Util.isUnset(request.replayDutyUserId)) {
    body.replayDutyUserId = request.replayDutyUserId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('ReplayProblem', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/replay`, 'json', req, runtime);
}

model RespondIncidentRequest {
  clientToken?: string(name='clientToken', description='幂等校验Id'),
  incidentIds?: [ long ](name='incidentIds', description='事件ID数组'),
}

model RespondIncidentResponseBody = {
  requestId?: string(name='requestId', description='requestId'),
}

model RespondIncidentResponse = {
  headers: map[string]string(name='headers'),
  body: RespondIncidentResponseBody(name='body'),
}

async function respondIncident(request: RespondIncidentRequest): RespondIncidentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return respondIncidentWithOptions(request, headers, runtime);
}

async function respondIncidentWithOptions(request: RespondIncidentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RespondIncidentResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.incidentIds)) {
    body.incidentIds = request.incidentIds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('RespondIncident', '2021-04-13', 'HTTPS', 'POST', 'AK', `/incident/response`, 'json', req, runtime);
}

model RevokeProblemRecoveryRequest {
  clientToken?: string(name='clientToken', description='幂等校验Id'),
  problemId?: long(name='problemId', description='故障ID'),
  problemNotifyType?: string(name='problemNotifyType', description='通告类型 PROBLEM_NOTIFY：故障通告 PROBLEM_UPDATE：故障更新 PROBLEM_UPGRADE：故障升级 PROBLEM_DEGRADE：故障降级 PROBLEM_RECOVER：故障恢复 PROBLEM_REISSUE： 故障补发 PROBLEM_CANCEL：故障取消'),
}

model RevokeProblemRecoveryResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model RevokeProblemRecoveryResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeProblemRecoveryResponseBody(name='body'),
}

async function revokeProblemRecovery(request: RevokeProblemRecoveryRequest): RevokeProblemRecoveryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return revokeProblemRecoveryWithOptions(request, headers, runtime);
}

async function revokeProblemRecoveryWithOptions(request: RevokeProblemRecoveryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RevokeProblemRecoveryResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }
  if (!Util.isUnset(request.problemNotifyType)) {
    body.problemNotifyType = request.problemNotifyType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('RevokeProblemRecovery', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/revoke`, 'json', req, runtime);
}

model UpdateEscalationPlanRequest {
  clientToken?: string(name='clientToken', description='clientToken'),
  escalationPlanDescription?: string(name='escalationPlanDescription', description='升级计划描述'),
  escalationPlanId?: long(name='escalationPlanId', description='升级计划id'),
  escalationPlanName?: string(name='escalationPlanName', description='升级计划名称'),
  escalationPlanRules?: [ 
    {
      escalationPlanConditions?: [ 
        {
          effection?: string(name='effection', description='LOW HIGH'),
          level?: string(name='level', description='P1 P2 P3 P4'),
        }
      ](name='escalationPlanConditions', description='升级计划条件列表'),
      escalationPlanStrategies?: [ 
        {
          noticeChannels?: [ string ](name='noticeChannels', description='通知渠道'),
          noticeObjects?: [ long ](name='noticeObjects', description='通知对象id'),
          noticeTime?: long(name='noticeTime', description='通知时间'),
        }
      ](name='escalationPlanStrategies', description='升级策略列表'),
      escalationPlanType?: string(name='escalationPlanType', description='UN_ACKNOWLEDGE 未响应 UN_FINISH 未完结'),
      id?: long(name='id', description='主键'),
    }
  ](name='escalationPlanRules', description='升级计划规则'),
  escalationPlanScopeObjects?: [ 
    {
      id?: long(name='id', description='主键'),
      scope?: string(name='scope', description='范围对象类型'),
      scopeObjectId?: long(name='scopeObjectId', description='范围对象id'),
    }
  ](name='escalationPlanScopeObjects', description='关联范围列表（服务）'),
}

model UpdateEscalationPlanResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdateEscalationPlanResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEscalationPlanResponseBody(name='body'),
}

async function updateEscalationPlan(request: UpdateEscalationPlanRequest): UpdateEscalationPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateEscalationPlanWithOptions(request, headers, runtime);
}

async function updateEscalationPlanWithOptions(request: UpdateEscalationPlanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateEscalationPlanResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.escalationPlanDescription)) {
    body.escalationPlanDescription = request.escalationPlanDescription;
  }
  if (!Util.isUnset(request.escalationPlanId)) {
    body.escalationPlanId = request.escalationPlanId;
  }
  if (!Util.isUnset(request.escalationPlanName)) {
    body.escalationPlanName = request.escalationPlanName;
  }
  if (!Util.isUnset(request.escalationPlanRules)) {
    body.escalationPlanRules = request.escalationPlanRules;
  }
  if (!Util.isUnset(request.escalationPlanScopeObjects)) {
    body.escalationPlanScopeObjects = request.escalationPlanScopeObjects;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateEscalationPlan', '2021-04-13', 'HTTPS', 'POST', 'AK', `/escalationPlan/update`, 'json', req, runtime);
}

model UpdateIncidentRequest {
  clientToken?: string(name='clientToken', description='幂等校验Id'),
  effect?: string(name='effect', description='影响程度'),
  incidentId?: long(name='incidentId', description='事件Id'),
  incidentLevel?: string(name='incidentLevel', description='级别'),
  incidentTitle?: string(name='incidentTitle', description='事件标题'),
}

model UpdateIncidentResponseBody = {
  data?: {
    incidentId?: long(name='incidentId', description='事件id'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdateIncidentResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateIncidentResponseBody(name='body'),
}

async function updateIncident(request: UpdateIncidentRequest): UpdateIncidentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateIncidentWithOptions(request, headers, runtime);
}

async function updateIncidentWithOptions(request: UpdateIncidentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateIncidentResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.effect)) {
    body.effect = request.effect;
  }
  if (!Util.isUnset(request.incidentId)) {
    body.incidentId = request.incidentId;
  }
  if (!Util.isUnset(request.incidentLevel)) {
    body.incidentLevel = request.incidentLevel;
  }
  if (!Util.isUnset(request.incidentTitle)) {
    body.incidentTitle = request.incidentTitle;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateIncident', '2021-04-13', 'HTTPS', 'POST', 'AK', `/incident/update`, 'json', req, runtime);
}

model UpdateIntegrationConfigRequest {
  accessKey?: string(name='accessKey', description='集成秘钥'),
  clientToken?: string(name='clientToken', description='幂等id'),
  integrationConfigId?: long(name='integrationConfigId'),
}

model UpdateIntegrationConfigResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdateIntegrationConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateIntegrationConfigResponseBody(name='body'),
}

async function updateIntegrationConfig(request: UpdateIntegrationConfigRequest): UpdateIntegrationConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateIntegrationConfigWithOptions(request, headers, runtime);
}

async function updateIntegrationConfigWithOptions(request: UpdateIntegrationConfigRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateIntegrationConfigResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.accessKey)) {
    body.accessKey = request.accessKey;
  }
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.integrationConfigId)) {
    body.integrationConfigId = request.integrationConfigId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateIntegrationConfig', '2021-04-13', 'HTTPS', 'POST', 'AK', `/integrationConfig/update`, 'json', req, runtime);
}

model UpdateProblemRequest {
  feedback?: string(name='feedback', description='舆情反馈'),
  level?: string(name='level', description='故障等级'),
  mainHandlerId?: long(name='mainHandlerId', description='主要处理人'),
  preliminaryReason?: string(name='preliminaryReason', description='初步原因'),
  problemId?: long(name='problemId', description='故障ID'),
  problemName?: string(name='problemName', description='故障名'),
  progressSummary?: string(name='progressSummary', description='进展摘要'),
  relatedServiceId?: long(name='relatedServiceId', description='所属服务'),
  serviceGroupIds?: [ long ](name='serviceGroupIds', description='应急协同组'),
}

model UpdateProblemResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdateProblemResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProblemResponseBody(name='body'),
}

async function updateProblem(request: UpdateProblemRequest): UpdateProblemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateProblemWithOptions(request, headers, runtime);
}

async function updateProblemWithOptions(request: UpdateProblemRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateProblemResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.feedback)) {
    body.feedback = request.feedback;
  }
  if (!Util.isUnset(request.level)) {
    body.level = request.level;
  }
  if (!Util.isUnset(request.mainHandlerId)) {
    body.mainHandlerId = request.mainHandlerId;
  }
  if (!Util.isUnset(request.preliminaryReason)) {
    body.preliminaryReason = request.preliminaryReason;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }
  if (!Util.isUnset(request.problemName)) {
    body.problemName = request.problemName;
  }
  if (!Util.isUnset(request.progressSummary)) {
    body.progressSummary = request.progressSummary;
  }
  if (!Util.isUnset(request.relatedServiceId)) {
    body.relatedServiceId = request.relatedServiceId;
  }
  if (!Util.isUnset(request.serviceGroupIds)) {
    body.serviceGroupIds = request.serviceGroupIds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateProblem', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/update`, 'json', req, runtime);
}

model UpdateProblemEffectionServiceRequest {
  clientToken?: string(name='clientToken', description='clientToken'),
  description?: string(name='description', description='影响描述'),
  effectionServiceId?: long(name='effectionServiceId', description='影响服务id'),
  level?: string(name='level', description='影响等级'),
  picUrl?: [ string ](name='picUrl', description='图片地址'),
  problemId?: long(name='problemId', description='故障id'),
  serviceId?: long(name='serviceId', description='关联服务id'),
  status?: string(name='status', description='影响状态 UN_RECOVERED 未恢复 RECOVERED已恢复'),
}

model UpdateProblemEffectionServiceResponseBody = {
  requestId?: string(name='requestId', description='requestId'),
}

model UpdateProblemEffectionServiceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProblemEffectionServiceResponseBody(name='body'),
}

async function updateProblemEffectionService(request: UpdateProblemEffectionServiceRequest): UpdateProblemEffectionServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateProblemEffectionServiceWithOptions(request, headers, runtime);
}

async function updateProblemEffectionServiceWithOptions(request: UpdateProblemEffectionServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateProblemEffectionServiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    body.description = request.description;
  }
  if (!Util.isUnset(request.effectionServiceId)) {
    body.effectionServiceId = request.effectionServiceId;
  }
  if (!Util.isUnset(request.level)) {
    body.level = request.level;
  }
  if (!Util.isUnset(request.picUrl)) {
    body.picUrl = request.picUrl;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }
  if (!Util.isUnset(request.serviceId)) {
    body.serviceId = request.serviceId;
  }
  if (!Util.isUnset(request.status)) {
    body.status = request.status;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateProblemEffectionService', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/process/effectionService/update`, 'json', req, runtime);
}

model UpdateProblemImprovementRequest {
  clientToken?: string(name='clientToken', description='幂等校验token'),
  discoverSource?: long(name='discoverSource', description='发现来源 码表:PROBLEM_DISCOVER_SOURCE'),
  dutyDepartmentId?: long(name='dutyDepartmentId', description='故障责任部门ID'),
  dutyDepartmentName?: string(name='dutyDepartmentName', description='故障责任部门'),
  dutyUserId?: long(name='dutyUserId', description='故障责任人id'),
  injectionMode?: string(name='injectionMode', description='注入方式 码表:PROBLEM_INJECTION_MODE'),
  monitorSourceName?: string(name='monitorSourceName', description='监控源'),
  problemId?: long(name='problemId', description='故障ID'),
  problemReason?: string(name='problemReason', description='故障原因'),
  recentActivity?: string(name='recentActivity', description='最近活动 码表:PROBLEM_RECENT_ACTIVITY'),
  recoveryMode?: string(name='recoveryMode', description='恢复方式  码表:PROBLEM_RECOVERY_MODE'),
  relationChanges?: string(name='relationChanges', description='关联变更'),
  remark?: string(name='remark', description='备注'),
  replayDutyUserId?: long(name='replayDutyUserId', description='复盘负责人id'),
  userReport?: long(name='userReport', description='用户上报 码表:PROBLEM_USER_REPORT'),
}

model UpdateProblemImprovementResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdateProblemImprovementResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProblemImprovementResponseBody(name='body'),
}

async function updateProblemImprovement(request: UpdateProblemImprovementRequest): UpdateProblemImprovementResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateProblemImprovementWithOptions(request, headers, runtime);
}

async function updateProblemImprovementWithOptions(request: UpdateProblemImprovementRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateProblemImprovementResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.discoverSource)) {
    body.discoverSource = request.discoverSource;
  }
  if (!Util.isUnset(request.dutyDepartmentId)) {
    body.dutyDepartmentId = request.dutyDepartmentId;
  }
  if (!Util.isUnset(request.dutyDepartmentName)) {
    body.dutyDepartmentName = request.dutyDepartmentName;
  }
  if (!Util.isUnset(request.dutyUserId)) {
    body.dutyUserId = request.dutyUserId;
  }
  if (!Util.isUnset(request.injectionMode)) {
    body.injectionMode = request.injectionMode;
  }
  if (!Util.isUnset(request.monitorSourceName)) {
    body.monitorSourceName = request.monitorSourceName;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }
  if (!Util.isUnset(request.problemReason)) {
    body.problemReason = request.problemReason;
  }
  if (!Util.isUnset(request.recentActivity)) {
    body.recentActivity = request.recentActivity;
  }
  if (!Util.isUnset(request.recoveryMode)) {
    body.recoveryMode = request.recoveryMode;
  }
  if (!Util.isUnset(request.relationChanges)) {
    body.relationChanges = request.relationChanges;
  }
  if (!Util.isUnset(request.remark)) {
    body.remark = request.remark;
  }
  if (!Util.isUnset(request.replayDutyUserId)) {
    body.replayDutyUserId = request.replayDutyUserId;
  }
  if (!Util.isUnset(request.userReport)) {
    body.userReport = request.userReport;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateProblemImprovement', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/improvement/update`, 'json', req, runtime);
}

model UpdateProblemMeasureRequest {
  checkStandard?: string(name='checkStandard', description='验收标准'),
  checkUserId?: long(name='checkUserId', description='验收人id'),
  clientToken?: string(name='clientToken', description='幂等校验token'),
  content?: string(name='content', description='措施内容'),
  directorId?: long(name='directorId', description='负责人id'),
  measureId?: long(name='measureId', description='措施Id'),
  planFinishTime?: string(name='planFinishTime', description='计划完成时间'),
  problemId?: long(name='problemId', description='故障Id'),
  stalkerId?: long(name='stalkerId', description='跟踪人id'),
  status?: string(name='status', description='状态 IMPROVED 改进 2 未改进UNIMPROVED'),
  type?: int32(name='type', description='措施类型 码表 PROBLEM_REPLAY_IMPROVEMENT'),
}

model UpdateProblemMeasureResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdateProblemMeasureResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProblemMeasureResponseBody(name='body'),
}

async function updateProblemMeasure(request: UpdateProblemMeasureRequest): UpdateProblemMeasureResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateProblemMeasureWithOptions(request, headers, runtime);
}

async function updateProblemMeasureWithOptions(request: UpdateProblemMeasureRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateProblemMeasureResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.checkStandard)) {
    body.checkStandard = request.checkStandard;
  }
  if (!Util.isUnset(request.checkUserId)) {
    body.checkUserId = request.checkUserId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.content)) {
    body.content = request.content;
  }
  if (!Util.isUnset(request.directorId)) {
    body.directorId = request.directorId;
  }
  if (!Util.isUnset(request.measureId)) {
    body.measureId = request.measureId;
  }
  if (!Util.isUnset(request.planFinishTime)) {
    body.planFinishTime = request.planFinishTime;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }
  if (!Util.isUnset(request.stalkerId)) {
    body.stalkerId = request.stalkerId;
  }
  if (!Util.isUnset(request.status)) {
    body.status = request.status;
  }
  if (!Util.isUnset(request.type)) {
    body.type = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateProblemMeasure', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/improvement/measure/update`, 'json', req, runtime);
}

model UpdateProblemNoticeRequest {
  clientToken?: string(name='clientToken', description='幂等校验Id'),
  problemId?: long(name='problemId', description='故障Id'),
  problemNotifyType?: string(name='problemNotifyType', description='通告类型 PROBLEM_NOTIFY：故障通告 PROBLEM_UPDATE：故障更新 PROBLEM_UPGRADE：故障升级 PROBLEM_DEGRADE：故障降级 PROBLEM_RECOVER：故障恢复 PROBLEM_REISSUE： 故障补发 PROBLEM_CANCEL：故障取消'),
}

model UpdateProblemNoticeResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdateProblemNoticeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProblemNoticeResponseBody(name='body'),
}

async function updateProblemNotice(request: UpdateProblemNoticeRequest): UpdateProblemNoticeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateProblemNoticeWithOptions(request, headers, runtime);
}

async function updateProblemNoticeWithOptions(request: UpdateProblemNoticeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateProblemNoticeResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }
  if (!Util.isUnset(request.problemNotifyType)) {
    body.problemNotifyType = request.problemNotifyType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateProblemNotice', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/notify`, 'json', req, runtime);
}

model UpdateProblemTimelineRequest {
  clientToken?: string(name='clientToken', description='clientToken'),
  content?: string(name='content', description='节点内容'),
  keyNode?: string(name='keyNode', description='关键节点 码表:PROBLEM_KEY_NODE (逗号分隔)'),
  problemId?: long(name='problemId', description='故障id'),
  problemTimelineId?: long(name='problemTimelineId', description='时间节点id'),
  time?: string(name='time', description='发生时间'),
}

model UpdateProblemTimelineResponseBody = {
  requestId?: string(name='requestId'),
}

model UpdateProblemTimelineResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProblemTimelineResponseBody(name='body'),
}

async function updateProblemTimeline(request: UpdateProblemTimelineRequest): UpdateProblemTimelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateProblemTimelineWithOptions(request, headers, runtime);
}

async function updateProblemTimelineWithOptions(request: UpdateProblemTimelineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateProblemTimelineResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.content)) {
    body.content = request.content;
  }
  if (!Util.isUnset(request.keyNode)) {
    body.keyNode = request.keyNode;
  }
  if (!Util.isUnset(request.problemId)) {
    body.problemId = request.problemId;
  }
  if (!Util.isUnset(request.problemTimelineId)) {
    body.problemTimelineId = request.problemTimelineId;
  }
  if (!Util.isUnset(request.time)) {
    body.time = request.time;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateProblemTimeline', '2021-04-13', 'HTTPS', 'POST', 'AK', `/problem/process/timeline/update`, 'json', req, runtime);
}

model UpdateRouteRuleRequest {
  assignObjectId?: long(name='assignObjectId', description='事件分派对象ID（服务组ID 或用户ID）'),
  assignObjectType?: string(name='assignObjectType', description='事件分派对象类型 SERVICEGROUP服务组  USER 单个用户'),
  clientToken?: string(name='clientToken', description='幂等号'),
  effection?: string(name='effection', description='影响程度 LOW-一般 HIGH-严重'),
  incidentLevel?: string(name='incidentLevel', description='事件级别 1-P1 2-P2 3-P3 4-P4'),
  matchCount?: long(name='matchCount', description='命中次数'),
  notifyChannels?: [ string ](name='notifyChannels', description='通知渠道    SMS 短信  EMAIL  邮件  PHONE  电话  WEIXIN_GROUP 企微群 DING_GROUP 钉钉群'),
  relatedServiceId?: long(name='relatedServiceId', description='关联服务ID'),
  routeChildRules?: [ 
    {
      childRouteRuleId?: long(name='childRouteRuleId', description='子规则ID 不填表示新增'),
      conditions?: [ 
        {
          key?: string(name='key', description='字段'),
          operationSymbol?: string(name='operationSymbol', description='操作符'),
          value?: string(name='value', description='字段取值'),
        }
      ](name='conditions', description='条件'),
      isValidChildRule?: boolean(name='isValidChildRule', description='true  删除子规则  false编辑子规则'),
      monitorSourceId?: long(name='monitorSourceId', description='监控源ID'),
    }
  ](name='routeChildRules', description='子规则'),
  routeRuleId?: long(name='routeRuleId', description='规则ID'),
  routeType?: string(name='routeType', description='路由类型：INCIDENT 触发事件 ALERT 仅触发报警'),
  ruleName?: string(name='ruleName', description='规则名称'),
  timeWindow?: int32(name='timeWindow', description='时间窗口'),
  timeWindowUnit?: string(name='timeWindowUnit', description='时间窗口单位 MINUTE 分钟  SECOND 秒'),
}

model UpdateRouteRuleResponseBody = {
  data?: long(name='data'),
  requestId?: string(name='requestId', description='请求ID'),
}

model UpdateRouteRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRouteRuleResponseBody(name='body'),
}

async function updateRouteRule(request: UpdateRouteRuleRequest): UpdateRouteRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateRouteRuleWithOptions(request, headers, runtime);
}

async function updateRouteRuleWithOptions(request: UpdateRouteRuleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateRouteRuleResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.assignObjectId)) {
    body.assignObjectId = request.assignObjectId;
  }
  if (!Util.isUnset(request.assignObjectType)) {
    body.assignObjectType = request.assignObjectType;
  }
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.effection)) {
    body.effection = request.effection;
  }
  if (!Util.isUnset(request.incidentLevel)) {
    body.incidentLevel = request.incidentLevel;
  }
  if (!Util.isUnset(request.matchCount)) {
    body.matchCount = request.matchCount;
  }
  if (!Util.isUnset(request.notifyChannels)) {
    body.notifyChannels = request.notifyChannels;
  }
  if (!Util.isUnset(request.relatedServiceId)) {
    body.relatedServiceId = request.relatedServiceId;
  }
  if (!Util.isUnset(request.routeChildRules)) {
    body.routeChildRules = request.routeChildRules;
  }
  if (!Util.isUnset(request.routeRuleId)) {
    body.routeRuleId = request.routeRuleId;
  }
  if (!Util.isUnset(request.routeType)) {
    body.routeType = request.routeType;
  }
  if (!Util.isUnset(request.ruleName)) {
    body.ruleName = request.ruleName;
  }
  if (!Util.isUnset(request.timeWindow)) {
    body.timeWindow = request.timeWindow;
  }
  if (!Util.isUnset(request.timeWindowUnit)) {
    body.timeWindowUnit = request.timeWindowUnit;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateRouteRule', '2021-04-13', 'HTTPS', 'POST', 'AK', `/routeRule/edit`, 'json', req, runtime);
}

model UpdateServiceRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  serviceDescription?: string(name='serviceDescription', description='服务描述'),
  serviceId?: long(name='serviceId', description='服务ID'),
  serviceName?: string(name='serviceName', description='服务名字'),
}

model UpdateServiceResponseBody = {
  data?: long(name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdateServiceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceResponseBody(name='body'),
}

async function updateService(request: UpdateServiceRequest): UpdateServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateServiceWithOptions(request, headers, runtime);
}

async function updateServiceWithOptions(request: UpdateServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateServiceResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.serviceDescription)) {
    body.serviceDescription = request.serviceDescription;
  }
  if (!Util.isUnset(request.serviceId)) {
    body.serviceId = request.serviceId;
  }
  if (!Util.isUnset(request.serviceName)) {
    body.serviceName = request.serviceName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateService', '2021-04-13', 'HTTPS', 'POST', 'AK', `/services/update`, 'json', req, runtime);
}

model UpdateServiceGroupRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  enableWebhook?: string(name='enableWebhook', description='ENABLE 启用 DISABLE 禁用'),
  serviceGroupDescription?: string(name='serviceGroupDescription', description='服务描述'),
  serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
  serviceGroupName?: string(name='serviceGroupName', description='服务组名字'),
  userIds?: [ long ](name='userIds', description='用户ID列表修改后的'),
  webhookLink?: string(name='webhookLink', description='webhook跳转地址'),
  webhookType?: string(name='webhookType', description='WEIXIN_GROUP微信DING_GROUP钉钉FEISHU_GROUP飞书'),
}

model UpdateServiceGroupResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdateServiceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceGroupResponseBody(name='body'),
}

async function updateServiceGroup(request: UpdateServiceGroupRequest): UpdateServiceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateServiceGroupWithOptions(request, headers, runtime);
}

async function updateServiceGroupWithOptions(request: UpdateServiceGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateServiceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.enableWebhook)) {
    body.enableWebhook = request.enableWebhook;
  }
  if (!Util.isUnset(request.serviceGroupDescription)) {
    body.serviceGroupDescription = request.serviceGroupDescription;
  }
  if (!Util.isUnset(request.serviceGroupId)) {
    body.serviceGroupId = request.serviceGroupId;
  }
  if (!Util.isUnset(request.serviceGroupName)) {
    body.serviceGroupName = request.serviceGroupName;
  }
  if (!Util.isUnset(request.userIds)) {
    body.userIds = request.userIds;
  }
  if (!Util.isUnset(request.webhookLink)) {
    body.webhookLink = request.webhookLink;
  }
  if (!Util.isUnset(request.webhookType)) {
    body.webhookType = request.webhookType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateServiceGroup', '2021-04-13', 'HTTPS', 'POST', 'AK', `/services/group/modify`, 'json', req, runtime);
}

model UpdateServiceGroupSchedulingRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  fastScheduling?: {
    dutyPlan?: string(name='dutyPlan', description='值班方案 dutyPlan FAST_CHOICE 快速选择   CUSTOM  自定义'),
    id?: long(name='id', description='快速排班ID'),
    schedulingUsers?: [ 
      {
        schedulingOrder?: int32(name='schedulingOrder', description='排班顺序'),
        schedulingUserId?: long(name='schedulingUserId', description='轮班用户ID'),
      }
    ](name='schedulingUsers', description='快速轮班用户'),
    singleDuration?: int32(name='singleDuration', description='每人排班时长'),
    singleDurationUnit?: string(name='singleDurationUnit', description='每人排班时长单位 HOUR 小时 DAY 天'),
  }(name='fastScheduling', description='快速排班'),
  fineScheduling?: {
    id?: long(name='id', description='精细排班ID'),
    period?: int32(name='period', description='循环周期'),
    periodUnit?: string(name='periodUnit', description='循环周期单位 HOUR 小时 DAY 天'),
    schedulingFineShifts?: [ 
      {
        cycleOrder?: int32(name='cycleOrder', description='轮训次序'),
        schedulingEndTime?: string(name='schedulingEndTime', description='排班结束时间'),
        schedulingOrder?: long(name='schedulingOrder', description='排班顺序'),
        schedulingStartTime?: string(name='schedulingStartTime', description='排班开始时间'),
        schedulingUserId?: long(name='schedulingUserId', description='排班用户ID'),
        shiftName?: string(name='shiftName', description='班次名称'),
        skipOneDay?: boolean(name='skipOneDay', description='是否跨天'),
      }
    ](name='schedulingFineShifts', description='精细排班班次人员信息'),
    schedulingTemplateFineShifts?: [ 
      {
        schedulingEndTime?: string(name='schedulingEndTime', description='排班结束时间'),
        schedulingOrder?: int32(name='schedulingOrder', description='排班顺序'),
        schedulingStartTime?: string(name='schedulingStartTime', description='排班开始时间'),
        schedulingUserId?: long(name='schedulingUserId', description='排班用户ID'),
        shiftName?: string(name='shiftName', description='班次名称'),
        skipOneDay?: boolean(name='skipOneDay', description='是否跨天'),
      }
    ](name='schedulingTemplateFineShifts', description='精细排班模版'),
    shiftType?: string(name='shiftType', description='班次类型 MORNING_NIGHT 早晚班 MORNING_NOON_NIGHT 早中晚班 CUSTOM 自定义'),
  }(name='fineScheduling', description='精细排班'),
  schedulingWay?: string(name='schedulingWay', description='排班方式 FAST 快速排班 FINE 精细排班'),
  serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
}

model UpdateServiceGroupSchedulingResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdateServiceGroupSchedulingResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceGroupSchedulingResponseBody(name='body'),
}

async function updateServiceGroupScheduling(request: UpdateServiceGroupSchedulingRequest): UpdateServiceGroupSchedulingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateServiceGroupSchedulingWithOptions(request, headers, runtime);
}

async function updateServiceGroupSchedulingWithOptions(request: UpdateServiceGroupSchedulingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateServiceGroupSchedulingResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.fastScheduling)) {
    body.fastScheduling = request.fastScheduling;
  }
  if (!Util.isUnset(request.fineScheduling)) {
    body.fineScheduling = request.fineScheduling;
  }
  if (!Util.isUnset(request.schedulingWay)) {
    body.schedulingWay = request.schedulingWay;
  }
  if (!Util.isUnset(request.serviceGroupId)) {
    body.serviceGroupId = request.serviceGroupId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateServiceGroupScheduling', '2021-04-13', 'HTTPS', 'POST', 'AK', `/services/group/scheduling/update`, 'json', req, runtime);
}

model UpdateServiceGroupSpecialDaySchedulingRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  schedulingDate?: string(name='schedulingDate', description='排班日期'),
  schedulingSpecialDays?: [ 
    {
      schedulingEndTime?: string(name='schedulingEndTime', description='排班结束时间'),
      schedulingOrder?: int32(name='schedulingOrder', description='班次顺序'),
      schedulingStartTime?: string(name='schedulingStartTime', description='排班开始时间'),
      schedulingUserId?: long(name='schedulingUserId', description='排班用户ID'),
    }
  ](name='schedulingSpecialDays', description='特殊排班信息'),
  serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
}

model UpdateServiceGroupSpecialDaySchedulingResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdateServiceGroupSpecialDaySchedulingResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceGroupSpecialDaySchedulingResponseBody(name='body'),
}

async function updateServiceGroupSpecialDayScheduling(request: UpdateServiceGroupSpecialDaySchedulingRequest): UpdateServiceGroupSpecialDaySchedulingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateServiceGroupSpecialDaySchedulingWithOptions(request, headers, runtime);
}

async function updateServiceGroupSpecialDaySchedulingWithOptions(request: UpdateServiceGroupSpecialDaySchedulingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateServiceGroupSpecialDaySchedulingResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.schedulingDate)) {
    body.schedulingDate = request.schedulingDate;
  }
  if (!Util.isUnset(request.schedulingSpecialDays)) {
    body.schedulingSpecialDays = request.schedulingSpecialDays;
  }
  if (!Util.isUnset(request.serviceGroupId)) {
    body.serviceGroupId = request.serviceGroupId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateServiceGroupSpecialDayScheduling', '2021-04-13', 'HTTPS', 'POST', 'AK', `/services/group/scheduling/updateSpecialDayScheduling`, 'json', req, runtime);
}

model UpdateSubscriptionRequest {
  endTime?: string(name='endTime', description='结束时间'),
  expiredType?: string(name='expiredType', description='订阅时效'),
  notifyObjectList?: [ 
    {
      id?: long(name='id', description='主键id'),
      notifyObjectId?: long(name='notifyObjectId', description='通知对象id'),
    }
  ](name='notifyObjectList', description='通知对象列表'),
  notifyObjectType?: string(name='notifyObjectType', description='通知对象类型'),
  notifyStrategyList?: [ 
    {
      instanceType?: long(name='instanceType', description='订阅实例类型，事件、报警、故障'),
      strategies?: [ 
        {
          channels?: string(name='channels', description='故障等级'),
          conditions?: [ 
            {
              action?: string(name='action', description='事件动作'),
              effection?: string(name='effection', description='影响程度'),
              level?: string(name='level', description='等级'),
              problemNotifyType?: string(name='problemNotifyType', description='故障通知类型'),
            }
          ](name='conditions', description='影响程度'),
          id?: string(name='id', description='id'),
          periodChannel?: {
            nonWorkday?: string(name='nonWorkday', description='非工作时间'),
            workday?: string(name='workday', description='工作时间'),
          }(name='periodChannel', description='分时段通知渠道'),
        }
      ](name='strategies', description='通知策略'),
    }
  ](name='notifyStrategyList', description='通知策略列表'),
  period?: string(name='period', description='时间段字符串'),
  scope?: string(name='scope', description='订阅范围类型'),
  scopeObjectList?: [ 
    {
      id?: long(name='id', description='主键id'),
      scopeObjectId?: long(name='scopeObjectId', description='订阅范围对象id'),
    }
  ](name='scopeObjectList', description='订阅范围列表'),
  startTime?: string(name='startTime', description='开始时间'),
  subscriptionId?: long(name='subscriptionId', description='主键'),
  subscriptionTitle?: string(name='subscriptionTitle', description='通知订阅名称'),
}

model UpdateSubscriptionResponseBody = {
  requestId?: string(name='requestId'),
}

model UpdateSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSubscriptionResponseBody(name='body'),
}

async function updateSubscription(request: UpdateSubscriptionRequest): UpdateSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateSubscriptionWithOptions(request, headers, runtime);
}

async function updateSubscriptionWithOptions(request: UpdateSubscriptionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSubscriptionResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.endTime)) {
    body.endTime = request.endTime;
  }
  if (!Util.isUnset(request.expiredType)) {
    body.expiredType = request.expiredType;
  }
  if (!Util.isUnset(request.notifyObjectList)) {
    body.notifyObjectList = request.notifyObjectList;
  }
  if (!Util.isUnset(request.notifyObjectType)) {
    body.notifyObjectType = request.notifyObjectType;
  }
  if (!Util.isUnset(request.notifyStrategyList)) {
    body.notifyStrategyList = request.notifyStrategyList;
  }
  if (!Util.isUnset(request.period)) {
    body.period = request.period;
  }
  if (!Util.isUnset(request.scope)) {
    body.scope = request.scope;
  }
  if (!Util.isUnset(request.scopeObjectList)) {
    body.scopeObjectList = request.scopeObjectList;
  }
  if (!Util.isUnset(request.startTime)) {
    body.startTime = request.startTime;
  }
  if (!Util.isUnset(request.subscriptionId)) {
    body.subscriptionId = request.subscriptionId;
  }
  if (!Util.isUnset(request.subscriptionTitle)) {
    body.subscriptionTitle = request.subscriptionTitle;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateSubscription', '2021-04-13', 'HTTPS', 'POST', 'AK', `/notify/subscription/update`, 'json', req, runtime);
}

model UpdateUserRequest {
  clientToken?: string(name='clientToken', description='幂等号'),
  email?: string(name='email', description='邮件'),
  phone?: string(name='phone', description='手机号'),
  ramId?: long(name='ramId', description='用户ramId'),
  userId?: long(name='userId', description='用户ID'),
  username?: string(name='username', description='用户名'),
}

model UpdateUserResponseBody = {
  requestId?: string(name='requestId'),
}

model UpdateUserResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUserResponseBody(name='body'),
}

async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateUserWithOptions(request, headers, runtime);
}

async function updateUserWithOptions(request: UpdateUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateUserResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.email)) {
    body.email = request.email;
  }
  if (!Util.isUnset(request.phone)) {
    body.phone = request.phone;
  }
  if (!Util.isUnset(request.ramId)) {
    body.ramId = request.ramId;
  }
  if (!Util.isUnset(request.userId)) {
    body.userId = request.userId;
  }
  if (!Util.isUnset(request.username)) {
    body.username = request.username;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateUser', '2021-04-13', 'HTTPS', 'POST', 'AK', `/user/update`, 'json', req, runtime);
}

model UpdateUserGuideStatusRequest {
  clientToken?: string(name='clientToken', description='幂等校验'),
  guideAction?: string(name='guideAction', description='INCIDENT_GUIDE	事件线 INCIDENT_GUIDE配置人员 USER_GUIDE 服务组 SERVICE_GROUP_GUIDE 服务 SERVICE_GUIDE 集成配置 MONITOR_GUIDE 流转规则 ROUTE_RULE_GUIDE 通知订阅 NOTICE_GUIDE'),
}

model UpdateUserGuideStatusResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdateUserGuideStatusResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUserGuideStatusResponseBody(name='body'),
}

async function updateUserGuideStatus(request: UpdateUserGuideStatusRequest): UpdateUserGuideStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateUserGuideStatusWithOptions(request, headers, runtime);
}

async function updateUserGuideStatusWithOptions(request: UpdateUserGuideStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateUserGuideStatusResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientToken)) {
    body.clientToken = request.clientToken;
  }
  if (!Util.isUnset(request.guideAction)) {
    body.guideAction = request.guideAction;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequest('UpdateUserGuideStatus', '2021-04-13', 'HTTPS', 'POST', 'AK', `/user/update/guide/status`, 'json', req, runtime);
}

model DataValue = {
  code?: string(name='code'),
  description?: string(name='description'),
  configDescription?: string(name='configDescription', description='配置描述'),
  configCode?: string(name='configCode', description='配置code'),
  parentCode?: string(name='parentCode', description='配置父code'),
  configKey?: string(name='configKey', description='key (用于前后端值传递)'),
  configValue?: string(name='configValue', description='value (用于前端展示)'),
  requirement?: boolean(name='requirement', description='是否必选'),
}

