/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'GEMP';
  @version = '2021-04-13';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddProblemServiceGroupRequest {
  problemId?: long(name='problemId', description='故障ID', position='Body'),
  serviceGroupIds?: [ long ](name='serviceGroupIds', description='应急协同组', position='Body'),
}

model AddProblemServiceGroupResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model AddProblemServiceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddProblemServiceGroupResponseBody(name='body'),
}

async function addProblemServiceGroup(request: AddProblemServiceGroupRequest): AddProblemServiceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddProblemServiceGroup', 'POST', '/problem/addServiceGroup', 'json', false, 'json', request);
}

model CancelProblemRequest {
  cancelReason?: long(name='cancelReason', description='取消原因', position='Body'),
  cancelReasonDescription?: string(name='cancelReasonDescription', description='取消原因描述', position='Body'),
  clientToken?: string(name='clientToken', description='幂等校验token', position='Body'),
  problemId?: long(name='problemId', description='故障id', position='Body'),
  problemNotifyType?: long(name='problemNotifyType', description='PROBLEM_NOTIFY	通告类型 PROBLEM_NOTIFY：故障通告 PROBLEM_UPDATE：故障更新 PROBLEM_UPGRADE：故障升级 PROBLEM_DEGRADE：故障降级 PROBLEM_RECOVER：故障恢复 PROBLEM_REISSUE： 故障补发 PROBLEM_CANCEL：故障取消', position='Body'),
}

model CancelProblemResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model CancelProblemResponse = {
  headers: map[string]string(name='headers'),
  body: CancelProblemResponseBody(name='body'),
}

async function cancelProblem(request: CancelProblemRequest): CancelProblemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelProblem', 'POST', '/problem/cancel', 'json', false, 'json', request);
}

model CheckWebhookRequest {
  clientToken?: string(name='clientToken', description='幂等校验token', position='Body'),
  webhook?: string(name='webhook', description='webook地址', position='Body'),
  webhookType?: string(name='webhookType', description='webhook地址类型 企业微信WEIXIN_GROUP 钉钉群 DING_GROUP 飞书 FEISHU_GROUP', position='Body'),
}

model CheckWebhookResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model CheckWebhookResponse = {
  headers: map[string]string(name='headers'),
  body: CheckWebhookResponseBody(name='body'),
}

async function checkWebhook(request: CheckWebhookRequest): CheckWebhookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckWebhook', 'POST', '/services/check/webhook', 'json', false, 'json', request);
}

model ConfirmIntegrationConfigRequest {
  clientToken?: string(name='clientToken', description='幂等id', position='Body'),
  integrationConfigId?: long(name='integrationConfigId', position='Body'),
}

model ConfirmIntegrationConfigResponseBody = {
  requestId?: string(name='requestId'),
}

model ConfirmIntegrationConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ConfirmIntegrationConfigResponseBody(name='body'),
}

async function confirmIntegrationConfig(request: ConfirmIntegrationConfigRequest): ConfirmIntegrationConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ConfirmIntegrationConfig', 'POST', '/integrationConfig/confirm', 'json', false, 'json', request);
}

model CreateEscalationPlanRequest {
  clientToken?: string(name='clientToken', description='clientToken', position='Body'),
  escalationPlanDescription: string(name='escalationPlanDescription', description='升级计划描述', position='Body'),
  escalationPlanName: string(name='escalationPlanName', description='升级计划名称', position='Body'),
  escalationPlanRules: [ 
    {
      escalationPlanConditions: [ 
        {
          effection: string(name='effection', description='影响等级'),
          level: string(name='level', description='事件等级'),
        }
      ](name='escalationPlanConditions', description='升级条件'),
      escalationPlanStrategies: [ 
        {
          enableWebhook: boolean(name='enableWebhook', description='是否支持群通知'),
          noticeChannels: [ string ](name='noticeChannels', description='升级通知策略'),
          noticeObjects: [ long ](name='noticeObjects', description='升级通知对象id列表'),
          noticeTime: string(name='noticeTime', description='通知时间'),
          serviceGroupIds?: [ long ](name='serviceGroupIds', description='服务组id'),
        }
      ](name='escalationPlanStrategies', description='升级策略'),
      escalationPlanType: string(name='escalationPlanType', description='升级类型'),
    }
  ](name='escalationPlanRules', description='升级计划规则列表', position='Body'),
  escalationPlanScopeObjects: [ 
    {
      scope?: string(name='scope', description='范围对象类型'),
      scopeObjectId: long(name='scopeObjectId', description='范围对象id'),
    }
  ](name='escalationPlanScopeObjects', description='升级计划范围对象列表', position='Body'),
}

model CreateEscalationPlanResponseBody = {
  data?: {
    escalationPlanId?: long(name='escalationPlanId', description='升级计划id'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model CreateEscalationPlanResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEscalationPlanResponseBody(name='body'),
}

async function createEscalationPlan(request: CreateEscalationPlanRequest): CreateEscalationPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateEscalationPlan', 'POST', '/escalationPlan/create', 'json', false, 'json', request);
}

model CreateIncidentRequest {
  assignUserId?: long(name='assignUserId', description='分派的用户ID', position='Body'),
  channels?: [ string ](name='channels', description='通知渠道     SMS 短信   EMAIL 邮件   PHONE  电话  WEIXIN_GROUP企微群 DING_GROUP 钉钉群', position='Body'),
  clientToken?: string(name='clientToken', description='幂等UUID', position='Body'),
  effect?: string(name='effect', description='影响等级 高：HIGH 低 LOW', position='Body'),
  incidentDescription?: string(name='incidentDescription', description='事件描述', position='Body'),
  incidentLevel?: string(name='incidentLevel', description='P1	事件级别 P1 P2 P3 P4', position='Body'),
  incidentTitle?: string(name='incidentTitle', description='事件标题', position='Body'),
  relatedServiceId?: long(name='relatedServiceId', description='关联服务ID', position='Body'),
  serviceGroupId?: long(name='serviceGroupId', description='服务组Id', position='Body'),
}

model CreateIncidentResponseBody = {
  data?: {
    incidentId?: long(name='incidentId', description='事件主健Id'),
  }(name='data', description='Id of the request'),
  requestId?: string(name='requestId', description='requestId'),
}

model CreateIncidentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIncidentResponseBody(name='body'),
}

async function createIncident(request: CreateIncidentRequest): CreateIncidentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateIncident', 'POST', '/incident/manualSave', 'json', false, 'json', request);
}

model CreateIncidentSubtotalRequest {
  clientToken?: string(name='clientToken', description='幂等校验Id', position='Body'),
  description?: string(name='description', description='描述', position='Body'),
  incidentId: long(name='incidentId', description='事件id', position='Body'),
}

model CreateIncidentSubtotalResponseBody = {
  data?: {
    subtotalId?: long(name='subtotalId', description='小计Id'),
  }(name='data'),
  requestId?: string(name='requestId', description='requestId'),
}

model CreateIncidentSubtotalResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIncidentSubtotalResponseBody(name='body'),
}

async function createIncidentSubtotal(request: CreateIncidentSubtotalRequest): CreateIncidentSubtotalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateIncidentSubtotal', 'POST', '/incident/save/subtotal', 'json', false, 'json', request);
}

model CreateIntegrationConfigRequest {
  clientToken?: string(name='clientToken', position='Body'),
  monitorSourceId?: long(name='monitorSourceId', position='Body'),
}

model CreateIntegrationConfigResponseBody = {
  data?: {
    integrationConfigId?: long(name='integrationConfigId', description='集成配置id'),
  }(name='data'),
  requestId?: string(name='requestId'),
}

model CreateIntegrationConfigResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIntegrationConfigResponseBody(name='body'),
}

async function createIntegrationConfig(request: CreateIntegrationConfigRequest): CreateIntegrationConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateIntegrationConfig', 'POST', '/integrationConfig/create', 'json', false, 'json', request);
}

model CreateProblemRequest {
  affectServiceIds?: [ long ](name='affectServiceIds', description='影响服务列表', position='Body'),
  clientToken?: string(name='clientToken', description='幂等校验Id', position='Body'),
  discoverTime?: string(name='discoverTime', description='发现时间 (XXXX-XX-XX 00:00:00)', position='Body'),
  incidentId?: long(name='incidentId', description='事件id', position='Body'),
  mainHandlerId?: long(name='mainHandlerId', description='主要处理人', position='Body'),
  preliminaryReason?: string(name='preliminaryReason', description='初步原因', position='Body'),
  problemLevel?: string(name='problemLevel', description='故障等级 1=P1 2=P2 3=P3 4=P4', position='Body'),
  problemName?: string(name='problemName', description='故障名称', position='Body'),
  problemNotifyType?: string(name='problemNotifyType', description='通告类型', position='Body'),
  problemStatus?: string(name='problemStatus', description='故障状态  HANDLING 处理中 RECOVERED 已恢复  REPLAYING 复盘中  REPLAYED 已复盘 CANCEL 已取消', position='Body'),
  progressSummary?: string(name='progressSummary', description='进展摘要', position='Body'),
  progressSummaryRichTextId?: long(name='progressSummaryRichTextId', description='进展摘要富文本id', position='Body'),
  recoveryTime?: string(name='recoveryTime', description='恢复时间', position='Body'),
  relatedServiceId?: long(name='relatedServiceId', description='所属服务', position='Body'),
  serviceGroupIds?: [ long ](name='serviceGroupIds', description='应急协同组', position='Body'),
}

model CreateProblemResponseBody = {
  data?: {
    problemId?: long(name='problemId', description='故障Id'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model CreateProblemResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProblemResponseBody(name='body'),
}

async function createProblem(request: CreateProblemRequest): CreateProblemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProblem', 'POST', '/problem/upgrade', 'json', false, 'json', request);
}

model CreateProblemEffectionServiceRequest {
  clientToken?: string(name='clientToken', description='clientToken', position='Body'),
  description?: string(name='description', description='影响描述', position='Body'),
  level?: string(name='level', description='影响等级', position='Body'),
  pictureUrl?: [ string ](name='pictureUrl', description='图片地址', position='Body'),
  problemId: long(name='problemId', description='故障id', position='Body'),
  serviceId?: long(name='serviceId', description='影响服务id', position='Body'),
  status?: string(name='status', description='影响状态 0 未恢复 1已恢复', position='Body'),
}

model CreateProblemEffectionServiceResponseBody = {
  data?: {
    effectionServiceId?: long(name='effectionServiceId', description='影响服务id'),
  }(name='data'),
  requestId?: string(name='requestId'),
}

model CreateProblemEffectionServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProblemEffectionServiceResponseBody(name='body'),
}

async function createProblemEffectionService(request: CreateProblemEffectionServiceRequest): CreateProblemEffectionServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProblemEffectionService', 'POST', '/problem/process/effectionService/create', 'json', false, 'json', request);
}

model CreateProblemMeasureRequest {
  checkStandard?: string(name='checkStandard', description='验收标准', position='Body'),
  checkUserId?: long(name='checkUserId', description='验收人id', position='Body'),
  clientToken?: string(name='clientToken', description='幂等校验token', position='Body'),
  content?: string(name='content', description='措施内容', position='Body'),
  directorId?: long(name='directorId', description='负责人id', position='Body'),
  planFinishTime?: string(name='planFinishTime', description='计划完成时间', position='Body'),
  problemId: long(name='problemId', description='故障Id', position='Body'),
  stalkerId?: long(name='stalkerId', description='跟踪人id', position='Body'),
  status?: string(name='status', description='状态 IMPROVED 改进 2 未改进UNIMPROVED', position='Body'),
  type?: int32(name='type', description='措施类型', position='Body'),
}

model CreateProblemMeasureResponseBody = {
  data?: {
    measureId?: long(name='measureId', description='故障措施Id'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model CreateProblemMeasureResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProblemMeasureResponseBody(name='body'),
}

async function createProblemMeasure(request: CreateProblemMeasureRequest): CreateProblemMeasureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProblemMeasure', 'POST', '/problem/improvement/measure/save', 'json', false, 'json', request);
}

model CreateProblemSubtotalRequest {
  clientToken?: string(name='clientToken', description='幂等校验token', position='Body'),
  description?: string(name='description', description='小计文本', position='Body'),
  problemId: long(name='problemId', description='故障Id', position='Body'),
}

model CreateProblemSubtotalResponseBody = {
  data?: {
    subtotalId?: long(name='subtotalId', description='小计id'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model CreateProblemSubtotalResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProblemSubtotalResponseBody(name='body'),
}

async function createProblemSubtotal(request: CreateProblemSubtotalRequest): CreateProblemSubtotalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProblemSubtotal', 'POST', '/problem/save/subtotal', 'json', false, 'json', request);
}

model CreateProblemTimelineRequest {
  clientToken?: string(name='clientToken', description='clientToken', position='Body'),
  content?: string(name='content', description='节点内容', position='Body'),
  keyNode?: string(name='keyNode', description='关键节点 码表:PROBLEM_KEY_NODE (逗号分隔)', position='Body'),
  problemId: long(name='problemId', description='故障id', position='Body'),
  time?: string(name='time', description='发生时间', position='Body'),
}

model CreateProblemTimelineResponseBody = {
  data?: {
    problemTimelineId?: long(name='problemTimelineId', description='故障事件线id'),
  }(name='data', description='Object'),
  requestId?: string(name='requestId', description='id of the request'),
}

model CreateProblemTimelineResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProblemTimelineResponseBody(name='body'),
}

async function createProblemTimeline(request: CreateProblemTimelineRequest): CreateProblemTimelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProblemTimeline', 'POST', '/problem/process/timeline/create', 'json', false, 'json', request);
}

model CreateProblemTimelinesRequest {
  clientToken?: string(name='clientToken', description='clientToken', position='Body'),
  problemId: long(name='problemId', description='故障id', position='Body'),
  timelineNodes?: string(name='timelineNodes', description='时间线节点', position='Body'),
}

model CreateProblemTimelinesResponseBody = {
  data?: {
    problemTimelineIds?: [ long ](name='problemTimelineIds'),
  }(name='data'),
  requestId?: string(name='requestId'),
}

model CreateProblemTimelinesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProblemTimelinesResponseBody(name='body'),
}

async function createProblemTimelines(request: CreateProblemTimelinesRequest): CreateProblemTimelinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProblemTimelines', 'POST', '/problem/process/timeline/batchCreate', 'json', false, 'json', request);
}

model CreateRichTextRequest {
  instanceId?: long(name='instanceId', description='资源id', position='Body'),
  instanceType?: string(name='instanceType', description='资源类型', position='Body'),
  richText?: string(name='richText', description='文本内容', position='Body'),
}

model CreateRichTextResponseBody = {
  data?: {
    instanceId?: long(name='instanceId', description='资源id'),
    instanceType?: long(name='instanceType', description='资源类型'),
    richText?: string(name='richText', description='富文本内容'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model CreateRichTextResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRichTextResponseBody(name='body'),
}

async function createRichText(request: CreateRichTextRequest): CreateRichTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRichText', 'POST', '/rich/create', 'json', false, 'json', request);
}

model CreateRouteRuleRequest {
  assignObjectId: long(name='assignObjectId', description='事件分派对象ID（服务组ID 或用户ID）', position='Body'),
  assignObjectType: string(name='assignObjectType', description='事件分派对象类型 SERVICEGROUP服务组 USER 单个用户', position='Body'),
  childRuleRelation: string(name='childRuleRelation', description='子规则关系AND,OR', position='Body'),
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  effection: string(name='effection', description='影响程度 LOW-一般 HIGH-严重', position='Body'),
  enableStatus?: string(name='enableStatus', description='启用状态', position='Body'),
  incidentLevel: string(name='incidentLevel', description='事件级别 P1 P2 P3 P4', position='Body'),
  matchCount: int32(name='matchCount', description='命中次数', position='Body'),
  notifyChannels: [ string ](name='notifyChannels', description='通知渠道。 SMS 短信  EMAIL 邮件  PHONE电话  WEIXIN_GROUP 企微群 DING_GROUP钉钉群', position='Body'),
  relatedServiceId: long(name='relatedServiceId', description='关联服务ID', position='Body'),
  routeChildRules: [ 
    {
      childConditionRelation?: long(name='childConditionRelation', description='0-与，1-或'),
      conditions: [ 
        {
          key: string(name='key', description='字段名称'),
          operationSymbol: string(name='operationSymbol', description='操作符号：notContain 不包含；contain 包含；equals 等于；notEquals 不等于；'),
          value: string(name='value', description='字段值'),
        }
      ](name='conditions', description='条件'),
      monitorSourceId: long(name='monitorSourceId', description='监控源ID'),
    }
  ](name='routeChildRules', description='子规则', position='Body'),
  routeType: string(name='routeType', description='路由类型：INCIDENT 触发事件 ALERT仅触发报警', position='Body'),
  ruleName: string(name='ruleName', description='规则名称', position='Body'),
  timeWindow: long(name='timeWindow', description='时间窗口', position='Body'),
  timeWindowUnit: string(name='timeWindowUnit', description='时间窗口单位 MINUTE  分钟  SECOND 秒', position='Body'),
}

model CreateRouteRuleResponseBody = {
  data?: {
    routeRuleId?: long(name='routeRuleId', description='规则ID'),
  }(name='data', description='结果'),
  requestId?: string(name='requestId', description='请求'),
}

model CreateRouteRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRouteRuleResponseBody(name='body'),
}

async function createRouteRule(request: CreateRouteRuleRequest): CreateRouteRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRouteRule', 'POST', '/routeRule/save', 'json', false, 'json', request);
}

model CreateServiceRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  serviceDescription?: string(name='serviceDescription', description='服务描述', position='Body'),
  serviceName: string(name='serviceName', description='服务名称', position='Body'),
}

model CreateServiceResponseBody = {
  data?: {
    serviceId?: long(name='serviceId', description='服务ID'),
  }(name='data', description='服务ID'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model CreateServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceResponseBody(name='body'),
}

async function createService(request: CreateServiceRequest): CreateServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateService', 'POST', '/services/save', 'json', false, 'json', request);
}

model CreateServiceGroupRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  enableWebhook: string(name='enableWebhook', description='ENABLE 启用 DISABLE 禁用', position='Body'),
  monitorSourceTemplates?: [ 
    {
      monitorSourceId?: long(name='monitorSourceId', description='监控源ID'),
      monitorSourceName?: string(name='monitorSourceName', description='监控源名字'),
      templateContent?: string(name='templateContent', description='模板内容'),
      templateId?: long(name='templateId', description='消息模版ID'),
    }
  ](name='monitorSourceTemplates', description='监控源消息模版', position='Body'),
  serviceGroupDescription?: string(name='serviceGroupDescription', description='服务描述', position='Body'),
  serviceGroupName: string(name='serviceGroupName', description='服务小组名称', position='Body'),
  userIds: [ long ](name='userIds', description='小组人员用户ID', position='Body'),
  webhookLink: string(name='webhookLink', description='webhookLink', position='Body'),
  webhookType: string(name='webhookType', description='WEIXIN_GROUP微信 DING_GROUP钉钉 FEISHU_GROUP飞书', position='Body'),
}

model CreateServiceGroupResponseBody = {
  data?: {
    serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
  }(name='data', description='服务组ID'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model CreateServiceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceGroupResponseBody(name='body'),
}

async function createServiceGroup(request: CreateServiceGroupRequest): CreateServiceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateServiceGroup', 'POST', '/services/group/insert', 'json', false, 'json', request);
}

model CreateServiceGroupSchedulingRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  fastScheduling?: {
    dutyPlan?: string(name='dutyPlan', description='值班方案 dutyPlan FAST_CHOICE 快速选择   CUSTOM  自定义'),
    schedulingUsers?: [ 
      {
        schedulingOrder?: long(name='schedulingOrder', description='排班顺序'),
        schedulingUserId?: long(name='schedulingUserId', description='轮班用户ID'),
      }
    ](name='schedulingUsers', description='快速轮班用户'),
    singleDuration?: int32(name='singleDuration', description='每人排班时长'),
    singleDurationUnit?: string(name='singleDurationUnit', description='每人排班时常单位 HOUR 小时 DAY  天'),
  }(name='fastScheduling', description='快速排班', position='Body'),
  fineScheduling?: {
    period?: int32(name='period', description='循环周期'),
    periodUnit?: string(name='periodUnit', description='循环周期单位 HOUR 小时 DAY  天'),
    schedulingFineShifts?: [ 
      {
        cycleOrder?: int32(name='cycleOrder', description='循环次序'),
        schedulingEndTime?: string(name='schedulingEndTime', description='排班结束时间'),
        schedulingOrder?: int32(name='schedulingOrder', description='排班顺序'),
        schedulingStartTime?: string(name='schedulingStartTime', description='排班开始时间'),
        schedulingUserId?: long(name='schedulingUserId', description='排班用户ID'),
        shiftName?: string(name='shiftName', description='班次名称'),
        skipOneDay?: boolean(name='skipOneDay', description='是否跨天'),
      }
    ](name='schedulingFineShifts', description='精细排班信息表'),
    schedulingTemplateFineShifts?: [ 
      {
        schedulingEndTime?: string(name='schedulingEndTime', description='排班结束时间'),
        schedulingOrder?: long(name='schedulingOrder', description='排班顺序'),
        schedulingStartTime?: string(name='schedulingStartTime', description='排班开始时间'),
        schedulingUserId?: long(name='schedulingUserId', description='用户ID'),
        schedulingUserName?: string(name='schedulingUserName', description='用户名字'),
        skipOneDay?: boolean(name='skipOneDay', description='是否跨天'),
      }
    ](name='schedulingTemplateFineShifts', description='精细排班模版'),
    shiftType?: string(name='shiftType', description='班次类型 MORNING_NIGHT 早晚班 MORNING_NOON_NIGHT 早中晚班 CUSTOM 自定义'),
  }(name='fineScheduling', description='精细排班', position='Body'),
  schedulingWay: string(name='schedulingWay', description='排班方式 FAST 快速排班 FINE  精细排班', position='Body'),
  serviceGroupId: long(name='serviceGroupId', description='服务组ID', position='Body'),
}

model CreateServiceGroupSchedulingResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model CreateServiceGroupSchedulingResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceGroupSchedulingResponseBody(name='body'),
}

async function createServiceGroupScheduling(request: CreateServiceGroupSchedulingRequest): CreateServiceGroupSchedulingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateServiceGroupScheduling', 'POST', '/services/group/scheduling/save', 'json', false, 'json', request);
}

model CreateSubscriptionRequest {
  clientToken?: string(name='clientToken', description='幂等参数', position='Body'),
  endTime?: string(name='endTime', description='结束时间', position='Body'),
  expiredType: long(name='expiredType', description='订阅时效', position='Body'),
  notifyObjectList: [ 
    {
      notifyObjectId: long(name='notifyObjectId', description='通知对象id'),
    }
  ](name='notifyObjectList', description='通知对象列表', position='Body'),
  notifyObjectType: long(name='notifyObjectType', description='通知对象类型', position='Body'),
  notifyStrategyList: [ 
    {
      channels: string(name='channels', description='渠道，多个逗号分隔'),
      instanceType: long(name='instanceType', description='订阅实例类型，事件、报警、故障'),
      periodChannel?: {
        nonWorkday?: string(name='nonWorkday', description='非工作时段'),
        workday?: string(name='workday', description='工作时段'),
      }(name='periodChannel', description='分时段渠道'),
      strategies: [ 
        {
          conditions?: [ 
            {
              action?: string(name='action', description='时间动作'),
              effection?: string(name='effection', description='影响范围'),
              level?: string(name='level', description='等级'),
              problemNotifyType?: string(name='problemNotifyType', description='故障通知类型'),
            }
          ](name='conditions', description='通知策略条件'),
        }
      ](name='strategies', description='条件。json格式，包含多个条件，比如级别、影响程度 kv格式'),
    }
  ](name='notifyStrategyList', description='通知策略列表', position='Body'),
  period?: string(name='period', description='时间段', position='Body'),
  scope: long(name='scope', description='订阅范围类型', position='Body'),
  scopeObjectList: [ 
    {
      scopeObjectId: long(name='scopeObjectId', description='订阅范围对象id'),
    }
  ](name='scopeObjectList', description='订阅范围列表', position='Body'),
  startTime?: string(name='startTime', description='开始时间', position='Body'),
  subscriptionTitle: string(name='subscriptionTitle', description='通知订阅名称', position='Body'),
}

model CreateSubscriptionResponseBody = {
  data?: {
    subscriptionId?: long(name='subscriptionId', description='订阅id'),
  }(name='data'),
  requestId?: string(name='requestId', description='request id'),
}

model CreateSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSubscriptionResponseBody(name='body'),
}

async function createSubscription(request: CreateSubscriptionRequest): CreateSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSubscription', 'POST', '/notify/subscription/create', 'json', false, 'json', request);
}

model CreateTenantApplicationRequest {
  channel: string(name='channel', description='应用协同渠道', position='Body'),
  clientToken: string(name='clientToken', description='幂等标识', position='Body'),
}

model CreateTenantApplicationResponseBody = {
  data?: {
    openUrl?: string(name='openUrl', description='开通url'),
    progress?: string(name='progress', description='开通进度状态'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='id of the req'),
}

model CreateTenantApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTenantApplicationResponseBody(name='body'),
}

async function createTenantApplication(request: CreateTenantApplicationRequest): CreateTenantApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTenantApplication', 'POST', '/mobileApp/create', 'json', false, 'json', request);
}

model CreateUserRequest {
  clientToken?: string(name='clientToken', position='Body'),
  email?: string(name='email', position='Body'),
  phone?: string(name='phone', position='Body'),
  ramId?: long(name='ramId', position='Body'),
  username?: string(name='username', position='Body'),
}

model CreateUserResponseBody = {
  data?: {
    userId?: long(name='userId'),
  }(name='data'),
  requestId?: string(name='requestId'),
}

model CreateUserResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserResponseBody(name='body'),
}

async function createUser(request: CreateUserRequest): CreateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateUser', 'POST', '/user/create', 'json', false, 'json', request);
}

model DeleteEscalationPlanRequest {
  clientToken?: string(name='clientToken', description='clientToken', position='Body'),
  escalationPlanId: long(name='escalationPlanId', description='升级计划ID', position='Body'),
}

model DeleteEscalationPlanResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeleteEscalationPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEscalationPlanResponseBody(name='body'),
}

async function deleteEscalationPlan(request: DeleteEscalationPlanRequest): DeleteEscalationPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteEscalationPlan', 'POST', '/escalationPlan/delete', 'json', false, 'json', request);
}

model DeleteIncidentRequest {
  clientToken?: string(name='clientToken', description='幂等校验', position='Body'),
  incidentId?: long(name='incidentId', description='事件Id', position='Body'),
}

model DeleteIncidentResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeleteIncidentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIncidentResponseBody(name='body'),
}

async function deleteIncident(request: DeleteIncidentRequest): DeleteIncidentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteIncident', 'POST', '/incident/delete', 'json', false, 'json', request);
}

model DeleteIntegrationConfigRequest {
  clientToken?: string(name='clientToken', description='幂等id', position='Body'),
  integrationConfigId?: long(name='integrationConfigId', description='集成配置id', position='Body'),
}

model DeleteIntegrationConfigResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeleteIntegrationConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIntegrationConfigResponseBody(name='body'),
}

async function deleteIntegrationConfig(request: DeleteIntegrationConfigRequest): DeleteIntegrationConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteIntegrationConfig', 'POST', '/integrationConfig/delete', 'json', false, 'json', request);
}

model DeleteProblemRequest {
  clientToken?: string(name='clientToken', description='幂等校验', position='Body'),
  problemId?: long(name='problemId', description='故障Id', position='Body'),
}

model DeleteProblemResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeleteProblemResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProblemResponseBody(name='body'),
}

async function deleteProblem(request: DeleteProblemRequest): DeleteProblemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProblem', 'POST', '/problem/delete', 'json', false, 'json', request);
}

model DeleteProblemEffectionServiceRequest {
  clientToken?: string(name='clientToken', description='clientToken', position='Body'),
  effectionServiceId?: long(name='effectionServiceId', description='影响服务ID', position='Body'),
  problemId?: long(name='problemId', description='故障id', position='Body'),
}

model DeleteProblemEffectionServiceResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeleteProblemEffectionServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProblemEffectionServiceResponseBody(name='body'),
}

async function deleteProblemEffectionService(request: DeleteProblemEffectionServiceRequest): DeleteProblemEffectionServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProblemEffectionService', 'POST', '/problem/process/effectionService/delete', 'json', false, 'json', request);
}

model DeleteProblemMeasureRequest {
  clientToken?: string(name='clientToken', description='幂等校验token', position='Body'),
  measureId?: long(name='measureId', description='故障改成措施id', position='Body'),
  problemId?: string(name='problemId', description='故障Id', position='Body'),
}

model DeleteProblemMeasureResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeleteProblemMeasureResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProblemMeasureResponseBody(name='body'),
}

async function deleteProblemMeasure(request: DeleteProblemMeasureRequest): DeleteProblemMeasureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProblemMeasure', 'POST', '/problem/improvement/measure/delete', 'json', false, 'json', request);
}

model DeleteProblemTimelineRequest {
  clientToken?: string(name='clientToken', description='clientToken', position='Body'),
  problemId?: long(name='problemId', description='故障id', position='Body'),
  problemTimelineId?: long(name='problemTimelineId', description='ID', position='Body'),
}

model DeleteProblemTimelineResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeleteProblemTimelineResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProblemTimelineResponseBody(name='body'),
}

async function deleteProblemTimeline(request: DeleteProblemTimelineRequest): DeleteProblemTimelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProblemTimeline', 'POST', '/problem/process/timeline/delete', 'json', false, 'json', request);
}

model DeleteRouteRuleRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  routeRuleId: long(name='routeRuleId', description='规则ID', position='Body'),
}

model DeleteRouteRuleResponseBody = {
  requestId?: long(name='requestId', description='请求ID'),
}

model DeleteRouteRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRouteRuleResponseBody(name='body'),
}

async function deleteRouteRule(request: DeleteRouteRuleRequest): DeleteRouteRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRouteRule', 'POST', '/routeRule/delete', 'json', false, 'json', request);
}

model DeleteServiceRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  serviceId?: long(name='serviceId', description='服务ID', position='Body'),
}

model DeleteServiceResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeleteServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceResponseBody(name='body'),
}

async function deleteService(request: DeleteServiceRequest): DeleteServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteService', 'POST', '/services/delete', 'json', false, 'json', request);
}

model DeleteServiceGroupRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  serviceGroupId?: long(name='serviceGroupId', description='服务组ID', position='Body'),
}

model DeleteServiceGroupResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeleteServiceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceGroupResponseBody(name='body'),
}

async function deleteServiceGroup(request: DeleteServiceGroupRequest): DeleteServiceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceGroup', 'POST', '/services/group/delete', 'json', false, 'json', request);
}

model DeleteServiceGroupUserRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  newUserId?: long(name='newUserId', description='新的用户', position='Body'),
  oldUserId?: long(name='oldUserId', description='老的用户ID', position='Body'),
  removeUser?: boolean(name='removeUser', description='删除服务组成员', position='Body'),
  serviceGroupId?: long(name='serviceGroupId', description='服务组ID', position='Body'),
}

model DeleteServiceGroupUserResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeleteServiceGroupUserResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceGroupUserResponseBody(name='body'),
}

async function deleteServiceGroupUser(request: DeleteServiceGroupUserRequest): DeleteServiceGroupUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceGroupUser', 'POST', '/services/group/deleteServiceGroupUser', 'json', false, 'json', request);
}

model DeleteSubscriptionRequest {
  subscriptionId?: long(name='subscriptionId', position='Body'),
}

model DeleteSubscriptionResponseBody = {
  requestId?: string(name='requestId', description='requestId'),
}

model DeleteSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSubscriptionResponseBody(name='body'),
}

async function deleteSubscription(request: DeleteSubscriptionRequest): DeleteSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSubscription', 'POST', '/notify/subscription/delete', 'json', false, 'json', request);
}

model DeleteUserRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  userId: long(name='userId', description='用户ID', position='Body'),
}

model DeleteUserResponseBody = {
  requestId?: string(name='requestId', description='id of the request'),
}

model DeleteUserResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserResponseBody(name='body'),
}

async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteUser', 'POST', '/user/delete', 'json', false, 'json', request);
}

model DeliverIncidentRequest {
  assignUserId?: long(name='assignUserId', description='转交用户ID', position='Body'),
  clientToken?: string(name='clientToken', description='幂等校验id', position='Body'),
  incidentId?: long(name='incidentId', description='事件ID', position='Body'),
}

model DeliverIncidentResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeliverIncidentResponse = {
  headers: map[string]string(name='headers'),
  body: DeliverIncidentResponseBody(name='body'),
}

async function deliverIncident(request: DeliverIncidentRequest): DeliverIncidentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeliverIncident', 'POST', '/incident/deliver', 'json', false, 'json', request);
}

model DisableEscalationPlanRequest {
  clientToken?: string(name='clientToken', description='clientToken', position='Body'),
  escalationPlanId: long(name='escalationPlanId', description='升级计划ID', position='Body'),
}

model DisableEscalationPlanResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DisableEscalationPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DisableEscalationPlanResponseBody(name='body'),
}

async function disableEscalationPlan(request: DisableEscalationPlanRequest): DisableEscalationPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DisableEscalationPlan', 'POST', '/escalationPlan/disable', 'json', false, 'json', request);
}

model DisableIntegrationConfigRequest {
  clientToken?: string(name='clientToken', description='幂等id', position='Body'),
  integrationConfigId?: long(name='integrationConfigId', position='Body'),
}

model DisableIntegrationConfigResponseBody = {
  requestId?: string(name='requestId', description='requestId'),
}

model DisableIntegrationConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DisableIntegrationConfigResponseBody(name='body'),
}

async function disableIntegrationConfig(request: DisableIntegrationConfigRequest): DisableIntegrationConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DisableIntegrationConfig', 'POST', '/integrationConfig/disable', 'json', false, 'json', request);
}

model DisableRouteRuleRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  routeRuleId: long(name='routeRuleId', description='请求ID', position='Body'),
}

model DisableRouteRuleResponseBody = {
  data?: long(name='data', description='C4BE3837-1A13-413B-A225-2C88188E8A43'),
  requestId: string(name='requestId', description='请求ID'),
}

model DisableRouteRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DisableRouteRuleResponseBody(name='body'),
}

async function disableRouteRule(request: DisableRouteRuleRequest): DisableRouteRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DisableRouteRule', 'POST', '/routeRule/disable', 'json', false, 'json', request);
}

model DisableServiceGroupWebhookRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  serviceGroupId?: long(name='serviceGroupId', description='服务组ID', position='Body'),
}

model DisableServiceGroupWebhookResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DisableServiceGroupWebhookResponse = {
  headers: map[string]string(name='headers'),
  body: DisableServiceGroupWebhookResponseBody(name='body'),
}

async function disableServiceGroupWebhook(request: DisableServiceGroupWebhookRequest): DisableServiceGroupWebhookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DisableServiceGroupWebhook', 'POST', '/services/group/disableWebhook', 'json', false, 'json', request);
}

model DisableSubscriptionRequest {
  subscriptionId?: long(name='subscriptionId', position='Body'),
}

model DisableSubscriptionResponseBody = {
  requestId?: string(name='requestId'),
}

model DisableSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: DisableSubscriptionResponseBody(name='body'),
}

async function disableSubscription(request: DisableSubscriptionRequest): DisableSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DisableSubscription', 'POST', '/notify/subscription/doDisable', 'json', false, 'json', request);
}

model EnableEscalationPlanRequest {
  clientToken?: string(name='clientToken', description='clientToken', position='Body'),
  escalationPlanId: long(name='escalationPlanId', description='升级计划ID', position='Body'),
}

model EnableEscalationPlanResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model EnableEscalationPlanResponse = {
  headers: map[string]string(name='headers'),
  body: EnableEscalationPlanResponseBody(name='body'),
}

async function enableEscalationPlan(request: EnableEscalationPlanRequest): EnableEscalationPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EnableEscalationPlan', 'POST', '/escalationPlan/enable', 'json', false, 'json', request);
}

model EnableIntegrationConfigRequest {
  clientToken?: string(name='clientToken', description='幂等id', position='Body'),
  integrationConfigId?: long(name='integrationConfigId', position='Body'),
}

model EnableIntegrationConfigResponseBody = {
  requestId?: string(name='requestId'),
}

model EnableIntegrationConfigResponse = {
  headers: map[string]string(name='headers'),
  body: EnableIntegrationConfigResponseBody(name='body'),
}

async function enableIntegrationConfig(request: EnableIntegrationConfigRequest): EnableIntegrationConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EnableIntegrationConfig', 'POST', '/integrationConfig/enable', 'json', false, 'json', request);
}

model EnableRouteRuleRequest {
  clientToken: string(name='clientToken', description='幂等号', position='Body'),
  routeRuleId: long(name='routeRuleId', description='规则ID', position='Body'),
}

model EnableRouteRuleResponseBody = {
  data?: int32(name='data'),
  requestId?: string(name='requestId', description='请求ID'),
}

model EnableRouteRuleResponse = {
  headers: map[string]string(name='headers'),
  body: EnableRouteRuleResponseBody(name='body'),
}

async function enableRouteRule(request: EnableRouteRuleRequest): EnableRouteRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EnableRouteRule', 'POST', '/routeRule/enable', 'json', false, 'json', request);
}

model EnableServiceGroupWebhookRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  serviceGroupId?: long(name='serviceGroupId', description='服务组ID', position='Body'),
}

model EnableServiceGroupWebhookResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model EnableServiceGroupWebhookResponse = {
  headers: map[string]string(name='headers'),
  body: EnableServiceGroupWebhookResponseBody(name='body'),
}

async function enableServiceGroupWebhook(request: EnableServiceGroupWebhookRequest): EnableServiceGroupWebhookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EnableServiceGroupWebhook', 'POST', '/services/group/enableWebhook', 'json', false, 'json', request);
}

model EnableSubscriptionRequest {
  subscriptionId?: long(name='subscriptionId', position='Body'),
}

model EnableSubscriptionResponseBody = {
  requestId?: string(name='requestId'),
}

model EnableSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: EnableSubscriptionResponseBody(name='body'),
}

async function enableSubscription(request: EnableSubscriptionRequest): EnableSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EnableSubscription', 'POST', '/notify/subscription/enable', 'json', false, 'json', request);
}

model FinishIncidentRequest {
  clientToken?: string(name='clientToken', description='幂等校验Id', position='Body'),
  incidentFinishReason?: int32(name='incidentFinishReason', description='完结原因', position='Body'),
  incidentFinishReasonDescription?: string(name='incidentFinishReasonDescription', description='原因描述', position='Body'),
  incidentFinishSolution?: int32(name='incidentFinishSolution', description='解决方案', position='Body'),
  incidentFinishSolutionDescription?: string(name='incidentFinishSolutionDescription', description='解决方案描述', position='Body'),
  incidentIds: [ long ](name='incidentIds', description='事件ID数组', position='Body'),
}

model FinishIncidentResponseBody = {
  requestId?: string(name='requestId', description='requestId'),
}

model FinishIncidentResponse = {
  headers: map[string]string(name='headers'),
  body: FinishIncidentResponseBody(name='body'),
}

async function finishIncident(request: FinishIncidentRequest): FinishIncidentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FinishIncident', 'POST', '/incident/finish', 'json', false, 'json', request);
}

model FinishProblemRequest {
  clientToken?: string(name='clientToken', description='幂等校验', position='Body'),
  problemId?: long(name='problemId', description='故障Id', position='Body'),
}

model FinishProblemResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model FinishProblemResponse = {
  headers: map[string]string(name='headers'),
  body: FinishProblemResponseBody(name='body'),
}

async function finishProblem(request: FinishProblemRequest): FinishProblemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FinishProblem', 'POST', '/problem/finish', 'json', false, 'json', request);
}

model GeneratePictureLinkRequest {
  keys?: [ string ](name='keys', description='keys', position='Body'),
  problemId?: long(name='problemId', description='故障id', position='Body'),
}

model GeneratePictureLinkResponseBody = {
  data?: {
    links?: [ 
      {
        key?: string(name='key', description='oss key'),
        link?: string(name='link', description='url'),
      }
    ](name='links', description='array'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GeneratePictureLinkResponse = {
  headers: map[string]string(name='headers'),
  body: GeneratePictureLinkResponseBody(name='body'),
}

async function generatePictureLink(request: GeneratePictureLinkRequest): GeneratePictureLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GeneratePictureLink', 'POST', '/rich/oss/getPictureLink', 'json', false, 'json', request);
}

model GeneratePictureUploadSignRequest {
  files?: [ 
    {
      fileName?: string(name='fileName', description='文件名称'),
      fileSize?: long(name='fileSize', description='文件大小'),
      fileType?: string(name='fileType', description='文件类型'),
    }
  ](name='files', description='文件', position='Body'),
  instanceId?: long(name='instanceId', description='资源id', position='Body'),
  instanceType?: string(name='instanceType', description='资源类型', position='Body'),
}

model GeneratePictureUploadSignResponseBody = {
  data?: {
    accessKeyId?: string(name='accessKeyId', description='accessKeyId'),
    bucketName?: string(name='bucketName', description='oss bucket name'),
    files?: [ 
      {
        fileName?: string(name='fileName', description='文件名称'),
        fileSize?: long(name='fileSize', description='文件大小'),
        fileType?: string(name='fileType', description='文件类型'),
        key?: string(name='key', description='oss key'),
      }
    ](name='files', description='files'),
    policy?: string(name='policy', description='policy'),
    signature?: string(name='signature', description='signature'),
    url?: string(name='url', description='url'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GeneratePictureUploadSignResponse = {
  headers: map[string]string(name='headers'),
  body: GeneratePictureUploadSignResponseBody(name='body'),
}

async function generatePictureUploadSign(request: GeneratePictureUploadSignRequest): GeneratePictureUploadSignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GeneratePictureUploadSign', 'POST', '/rich/oss/generatePostPolicy', 'json', false, 'json', request);
}

model GenerateProblemPictureLinkRequest {
  keys?: [ string ](name='keys', description='oss key', position='Body'),
  problemId?: string(name='problemId', description='故障id', position='Body'),
}

model GenerateProblemPictureLinkResponseBody = {
  data?: {
    links?: [ 
      {
        key?: string(name='key', description='oss key'),
        link?: string(name='link', description='图片链接'),
      }
    ](name='links', description='图片链接列表'),
  }(name='data'),
  requestId?: string(name='requestId', description='requestId'),
}

model GenerateProblemPictureLinkResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateProblemPictureLinkResponseBody(name='body'),
}

async function generateProblemPictureLink(request: GenerateProblemPictureLinkRequest): GenerateProblemPictureLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GenerateProblemPictureLink', 'POST', '/problem/process/oss/getPresignedLink', 'json', false, 'json', request);
}

model GenerateProblemPictureUploadSignRequest {
  fileName?: string(name='fileName', description='文件名', position='Body'),
  fileSize?: long(name='fileSize', description='文件大小KB', position='Body'),
  fileType?: string(name='fileType', description='文件类型', position='Body'),
  problemId?: long(name='problemId', description='故障id', position='Body'),
}

model GenerateProblemPictureUploadSignResponseBody = {
  data?: {
    accessKeyId?: string(name='accessKeyId', description='ossaccessKeyId'),
    bucketName?: string(name='bucketName', description='oss bucket name'),
    key?: string(name='key', description='oss key'),
    policy?: string(name='policy', description='policy'),
    signature?: string(name='signature', description='signature'),
    url?: string(name='url', description='url'),
  }(name='data'),
  requestId?: string(name='requestId', description='requestId'),
}

model GenerateProblemPictureUploadSignResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateProblemPictureUploadSignResponseBody(name='body'),
}

async function generateProblemPictureUploadSign(request: GenerateProblemPictureUploadSignRequest): GenerateProblemPictureUploadSignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GenerateProblemPictureUploadSign', 'POST', '/problem/process/oss/generatePostPolicy', 'json', false, 'json', request);
}

model GetEscalationPlanRequest {
  clientToken?: string(name='clientToken', description='幂等标识', position='Body'),
  escalationPlanId: long(name='escalationPlanId', description='升级计划id', position='Body'),
}

model GetEscalationPlanResponseBody = {
  data?: {
    createTime?: string(name='createTime', description='创建时间'),
    escalationPlanDescription?: string(name='escalationPlanDescription', description='升级计划描述'),
    escalationPlanId?: long(name='escalationPlanId', description='升级计划id'),
    escalationPlanName?: string(name='escalationPlanName', description='升级计划名称'),
    escalationPlanRules?: [ 
      {
        escalationPlanConditions?: [ 
          {
            effection?: string(name='effection', description='影响等级'),
            level?: string(name='level', description='事件等级'),
          }
        ](name='escalationPlanConditions', description='升级计划条件'),
        escalationPlanRuleId?: long(name='escalationPlanRuleId', description='升级计划id'),
        escalationPlanStrategies?: [ 
          {
            enableWebhook?: boolean(name='enableWebhook', description='是否支持群通知'),
            escalationPlanType?: string(name='escalationPlanType', description='升级计划类型'),
            noticeChannels?: string(name='noticeChannels', description='通知对象渠道'),
            noticeObjectList?: [ 
              {
                noticeObjectId?: long(name='noticeObjectId', description='通知对象id'),
                noticeObjectName?: string(name='noticeObjectName', description='通知对象名称'),
              }
            ](name='noticeObjectList', description='通知对象列表'),
            noticeTime?: long(name='noticeTime', description='通知时间'),
            serviceGroups?: [ 
              {
                id?: long(name='id', description='服务组id'),
                serviceGroupName?: string(name='serviceGroupName', description='服务组名称'),
              }
            ](name='serviceGroups', description='服务组列表'),
          }
        ](name='escalationPlanStrategies', description='升级计划策略'),
      }
    ](name='escalationPlanRules', description='升级计划规则列表'),
    escalationPlanScopeObjects?: [ 
      {
        scope?: string(name='scope', description='范围对象类型'),
        scopeObjectId?: long(name='scopeObjectId', description='范围对象id'),
        scopeObjectName?: string(name='scopeObjectName', description='范围对象名称'),
      }
    ](name='escalationPlanScopeObjects', description='升级计划范围对象列表'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetEscalationPlanResponse = {
  headers: map[string]string(name='headers'),
  body: GetEscalationPlanResponseBody(name='body'),
}

async function getEscalationPlan(request: GetEscalationPlanRequest): GetEscalationPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetEscalationPlan', 'POST', '/escalationPlan/detail', 'json', false, 'json', request);
}

model GetEventRequest {
  monitorSourceId: long(name='monitorSourceId', description='监控源ID不能为空', position='Body'),
}

model GetEventResponseBody = {
  data?: {
    eventJson?: string(name='eventJson', description='告警内容'),
    eventTime?: string(name='eventTime', description='告警上报时间'),
    monitorSourceId?: long(name='monitorSourceId', description='告警源ID'),
    monitorSourceName?: string(name='monitorSourceName', description='告警源名称'),
  }(name='data', description='告警'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetEventResponse = {
  headers: map[string]string(name='headers'),
  body: GetEventResponseBody(name='body'),
}

async function getEvent(request: GetEventRequest): GetEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetEvent', 'POST', '/events/getLastTimeEvent', 'json', false, 'json', request);
}

model GetHomePageGuidanceRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
}

model GetHomePageGuidanceResponseBody = {
  data?: {
    notifySubscriptionStatus?: boolean(name='notifySubscriptionStatus', description='通知订阅配置状态'),
    serviceGroupStatus?: boolean(name='serviceGroupStatus', description='服务组配置状态'),
    serviceStatus?: boolean(name='serviceStatus', description='服务配置状态'),
    usersStatus?: boolean(name='usersStatus', description='用户配置状态'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetHomePageGuidanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetHomePageGuidanceResponseBody(name='body'),
}

async function getHomePageGuidance(request: GetHomePageGuidanceRequest): GetHomePageGuidanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHomePageGuidance', 'POST', '/guidance/detail', 'json', false, 'json', request);
}

model GetIncidentRequest {
  clientToken?: string(name='clientToken', description='幂等校验', position='Body'),
  incidentId?: long(name='incidentId', description='事件ID', position='Body'),
}

model GetIncidentResponseBody = {
  data?: {
    assignUserId?: long(name='assignUserId', description='分派的用户ID'),
    assignUserName?: string(name='assignUserName', description='分派的用户姓名 (用户表获取)'),
    assignUserPhone?: string(name='assignUserPhone', description='分派的用户手机号'),
    createTime?: string(name='createTime', description='创建时间'),
    durationTime?: long(name='durationTime', description='持续时间'),
    effect?: string(name='effect', description='HIGH	影响等级 高：HIGH 低 LOW'),
    incidentDescription?: string(name='incidentDescription', description='事件描述'),
    incidentId?: long(name='incidentId', description='事件Id'),
    incidentLevel?: string(name='incidentLevel', description='事件级别 P1 P2 P3 P4'),
    incidentNumber?: string(name='incidentNumber', description='事件编号'),
    incidentStatus?: string(name='incidentStatus', description='事件状态 ASSIGNED已分派 RESPONDED已响应  FINISHED已完结'),
    incidentTitle?: string(name='incidentTitle', description='事件标题'),
    isManual?: boolean(name='isManual', description='事件来源 是：手动 否：自动'),
    isUpgrade?: boolean(name='isUpgrade', description='是否升级 是 否'),
    notifyChannels?: [ string ](name='notifyChannels', description='通知渠道'),
    problemId?: long(name='problemId', description='故障Id'),
    problemNumber?: string(name='problemNumber', description='故障编号'),
    relatedServiceDescription?: string(name='relatedServiceDescription', description='关联服务描述'),
    relatedServiceGroupId?: long(name='relatedServiceGroupId', description='关联服服务id'),
    relatedServiceGroupName?: string(name='relatedServiceGroupName', description='关联服务组名称'),
    relatedServiceId?: long(name='relatedServiceId', description='关联服务ID'),
    relatedServiceName?: string(name='relatedServiceName', description='关联服务名称'),
    routeRuleId?: long(name='routeRuleId', description='流转规则ID'),
    routeRuleName?: string(name='routeRuleName', description='流转规则名称'),
  }(name='data'),
  requestId?: string(name='requestId'),
}

model GetIncidentResponse = {
  headers: map[string]string(name='headers'),
  body: GetIncidentResponseBody(name='body'),
}

async function getIncident(request: GetIncidentRequest): GetIncidentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIncident', 'POST', '/incident/detail', 'json', false, 'json', request);
}

model GetIncidentStatisticsRequest {
  clientToken?: string(name='clientToken', description='幂等校验Id', position='Body'),
}

model GetIncidentStatisticsResponseBody = {
  data?: {
    allFinish?: int32(name='allFinish', description='所有 完结'),
    allResponse?: int32(name='allResponse', description='所有 待响应'),
    myFinish?: int32(name='myFinish', description='我的 完结'),
    myResponse?: int32(name='myResponse', description='我的 待响应'),
  }(name='data'),
  requestId?: string(name='requestId'),
}

model GetIncidentStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetIncidentStatisticsResponseBody(name='body'),
}

async function getIncidentStatistics(request: GetIncidentStatisticsRequest): GetIncidentStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIncidentStatistics', 'POST', '/incident/count', 'json', false, 'json', request);
}

model GetIncidentSubtotalCountRequest {
  clientToken?: string(name='clientToken', description='幂等标识', position='Body'),
  incidentIds: [ long ](name='incidentIds', description='事件id列表', position='Body'),
}

model GetIncidentSubtotalCountResponseBody = {
  data?: {
    requestId?: string(name='requestId', description='id of the request'),
    subtotalCount?: map[string]any(name='subtotalCount', description='map'),
  }(name='data', description='data'),
}

model GetIncidentSubtotalCountResponse = {
  headers: map[string]string(name='headers'),
  body: GetIncidentSubtotalCountResponseBody(name='body'),
}

async function getIncidentSubtotalCount(request: GetIncidentSubtotalCountRequest): GetIncidentSubtotalCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIncidentSubtotalCount', 'POST', '/incident/subtotal/count', 'json', false, 'json', request);
}

model GetIntegrationConfigRequest {
  clientToken?: string(name='clientToken', description='幂等id', position='Body'),
  integrationConfigId?: long(name='integrationConfigId', description='集成配置id', position='Body'),
}

model GetIntegrationConfigResponseBody = {
  data?: {
    accessKey?: string(name='accessKey', description='集成秘钥'),
    integrationConfigId?: long(name='integrationConfigId', description='集成配置id、'),
    isReceivedEvent?: boolean(name='isReceivedEvent', description='是否接收报警'),
    monitorSourceId?: long(name='monitorSourceId', description='监控源id'),
    monitorSourceName?: string(name='monitorSourceName', description='监控源名称'),
    monitorSourceShortName?: string(name='monitorSourceShortName', description='监控源简称'),
    status?: string(name='status', description='集成配置状态，DISABLE 禁用，INTEGRATED 已集成，UNINTEGRATED未集成'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetIntegrationConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetIntegrationConfigResponseBody(name='body'),
}

async function getIntegrationConfig(request: GetIntegrationConfigRequest): GetIntegrationConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIntegrationConfig', 'POST', '/integrationConfig/detail', 'json', false, 'json', request);
}

model GetProblemRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  problemId: long(name='problemId', description='故障ID', position='Body'),
}

model GetProblemResponseBody = {
  data?: {
    cancelProblemOperateLogs?: [ 
      {
        actionName?: string(name='actionName', description='动作名称'),
        actionTime?: string(name='actionTime', description='操作时间'),
        operator?: string(name='operator', description='操作人'),
        userId?: long(name='userId', description='用户ID'),
      }
    ](name='cancelProblemOperateLogs', description='已取消故障操作日志'),
    cancelReason?: long(name='cancelReason', description='取消原因'),
    cancelReasonDescription?: string(name='cancelReasonDescription', description='取消原因描述'),
    coordinationGroups?: [ 
      {
        serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
        serviceGroupName?: string(name='serviceGroupName', description='服务组名字'),
      }
    ](name='coordinationGroups', description='应急协同组'),
    createTime?: string(name='createTime', description='创建时间'),
    discoverTime?: string(name='discoverTime', description='发现时间'),
    durationTime?: long(name='durationTime', description='持续时间'),
    effectionServices?: [ 
      {
        description?: string(name='description', description='影响描述'),
        effectionLevel?: long(name='effectionLevel', description='影响等级 P1 . P2 P3 P4'),
        effectionServiceId?: long(name='effectionServiceId', description='服务ID'),
        effectionStatus?: int32(name='effectionStatus', description='影响服务状态  RECOVERED 已经恢复 ,UN_RECOVERED 未恢复'),
        serviceName?: string(name='serviceName', description='服务名称'),
      }
    ](name='effectionServices', description='影响服务'),
    feedback?: string(name='feedback', description='舆情反馈'),
    handingProblemOperateLogs?: [ 
      {
        actionName?: string(name='actionName', description='动作名称'),
        actionTime?: string(name='actionTime', description='操作时间'),
        operator?: string(name='operator', description='操作人'),
        userId?: long(name='userId', description='用户id'),
      }
    ](name='handingProblemOperateLogs', description='处理中故障操作日志'),
    incidentId?: long(name='incidentId', description='事件id'),
    incidentNumber?: string(name='incidentNumber', description='事件编号'),
    mainHandler?: long(name='mainHandler', description='主要处理人'),
    mainHandlerId?: long(name='mainHandlerId', description='主要处理人ID'),
    mainHandlerPhone?: string(name='mainHandlerPhone', description='主要处理人手机号'),
    preliminaryReason?: string(name='preliminaryReason', description='初步原因'),
    problemId: long(name='problemId', description='ID'),
    problemLevel?: int32(name='problemLevel', description='故障等级 P1 P2 P3 P4'),
    problemName?: string(name='problemName', description='故障名称'),
    problemNumber?: string(name='problemNumber', description='故障编号'),
    problemStatus?: int32(name='problemStatus', description='故障状态  HANDLING    处理中 RECOVERED  已恢复  REPLAYING   复盘中  REPLAYED     已复盘 CANCEL        已取消'),
    progressSummary?: string(name='progressSummary', description='进展摘要'),
    progressSummaryRichTextId?: long(name='progressSummaryRichTextId', description='进展摘要富文本id'),
    recoveryTime?: string(name='recoveryTime', description='恢复时间'),
    relatedServiceId?: long(name='relatedServiceId', description='关联服务ID'),
    replayProblemOperateLogs?: [ 
      {
        actionName?: string(name='actionName', description='动作名称'),
        actionTime?: string(name='actionTime', description='操作时间'),
        operator?: string(name='operator', description='操作人'),
        userId?: long(name='userId', description='用户id'),
      }
    ](name='replayProblemOperateLogs', description='已复盘故障操作日志'),
    replayingProblemOperateLogs?: [ 
      {
        actionName?: string(name='actionName', description='动作名称'),
        actionTime?: string(name='actionTime', description='操作时间'),
        operator?: string(name='operator', description='操作人'),
        userId?: long(name='userId', description='用户id'),
      }
    ](name='replayingProblemOperateLogs', description='复盘中故障操作日志'),
    restoredProblemOperateLogs?: [ 
      {
        actionName?: string(name='actionName', description='动作名称'),
        actionTime?: string(name='actionTime', description='操作时间'),
        operator?: string(name='operator', description='操作人'),
        userId?: long(name='userId', description='用户id'),
      }
    ](name='restoredProblemOperateLogs', description='已恢复故障操作日志'),
    serviceName?: string(name='serviceName', description='关联服务 名称'),
    timelines?: [ 
      {
        keyNode?: string(name='keyNode', description='关键节点 码表:PROBLEM_KEY_NODE (逗号分隔)'),
      }
    ](name='timelines', description='故障操作时间线'),
  }(name='data', description='详情'),
  requestId?: string(name='requestId', description='请求ID'),
}

model GetProblemResponse = {
  headers: map[string]string(name='headers'),
  body: GetProblemResponseBody(name='body'),
}

async function getProblem(request: GetProblemRequest): GetProblemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProblem', 'POST', '/problem/detail', 'json', false, 'json', request);
}

model GetProblemEffectionServiceRequest {
  clientToken?: string(name='clientToken', description='clientToken', position='Body'),
  effectionServiceId?: long(name='effectionServiceId', description='id主键', position='Body'),
  problemId?: long(name='problemId', description='故障id', position='Body'),
}

model GetProblemEffectionServiceResponseBody = {
  data?: {
    description?: string(name='description', description='影响描述'),
    effectionServiceId?: long(name='effectionServiceId', description='影响服务id'),
    level?: long(name='level', description='影响等级'),
    picUrl?: [ string ](name='picUrl', description='图片链接'),
    serviceId?: long(name='serviceId', description='服务id'),
    serviceName?: string(name='serviceName', description='服务名称'),
    status?: long(name='status', description='影响状态 0 未恢复 1已恢复'),
  }(name='data'),
  requestId?: string(name='requestId', description='requestId'),
}

model GetProblemEffectionServiceResponse = {
  headers: map[string]string(name='headers'),
  body: GetProblemEffectionServiceResponseBody(name='body'),
}

async function getProblemEffectionService(request: GetProblemEffectionServiceRequest): GetProblemEffectionServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProblemEffectionService', 'POST', '/problem/process/effectionService/detail', 'json', false, 'json', request);
}

model GetProblemImprovementRequest {
  clientToken?: string(name='clientToken', description='幂等校验token', position='Body'),
  problemId?: string(name='problemId', description='故障ID', position='Body'),
}

model GetProblemImprovementResponseBody = {
  data?: {
    discoverSource?: string(name='discoverSource', description='发现来源 码表:PROBLEM_DISCOVER_SOURCE'),
    dutyDepartmentId?: string(name='dutyDepartmentId', description='故障责任部门'),
    dutyDepartmentName?: string(name='dutyDepartmentName', description='故障责任部门名称'),
    dutyUserId?: long(name='dutyUserId', description='故障责任人id'),
    dutyUserName?: string(name='dutyUserName', description='故障责任人名称'),
    dutyUserPhone?: string(name='dutyUserPhone', description='故障责任人手机号'),
    injectionMode?: string(name='injectionMode', description='注入方式 码表:PROBLEM_INJECTION_MODE'),
    isManual?: boolean(name='isManual', description='是否手动'),
    measureList?: [ 
      {
        checkStandard?: string(name='checkStandard', description='验收标准'),
        checkUserId?: long(name='checkUserId', description='验收人id'),
        checkUserName?: string(name='checkUserName', description='验收人名称'),
        content?: string(name='content', description='措施内容'),
        directorId?: long(name='directorId', description='负责人id'),
        directorName?: string(name='directorName', description='负责人名称'),
        measureId?: long(name='measureId', description='改进措施id 用于删除或更新'),
        planFinishTime?: string(name='planFinishTime', description='计划完成时间'),
        stalkerId?: long(name='stalkerId', description='跟踪人id'),
        stalkerName?: string(name='stalkerName', description='跟踪人名称'),
        status?: string(name='status', description='UNIMPROVED	状态 IMPROVED 改进 2 未改进UNIMPROVED'),
        type?: long(name='type', description='措施类型'),
      }
    ](name='measureList', description='改进措施列表'),
    monitorSourceName?: string(name='monitorSourceName', description='监控源'),
    problemId?: string(name='problemId', description='故障ID'),
    problemReason?: string(name='problemReason', description='故障原因'),
    recentActivity?: string(name='recentActivity', description='最近活动 码表:PROBLEM_RECENT_ACTIVITY'),
    recoveryMode?: string(name='recoveryMode', description='恢复方式  码表:PROBLEM_RECOVERY_MODE'),
    relationChanges?: string(name='relationChanges', description='关联变更'),
    remark?: string(name='remark', description='备注'),
    replayDutyUserId?: long(name='replayDutyUserId', description='复盘负责人id'),
    replayDutyUserName?: string(name='replayDutyUserName', description='复盘负责人名称'),
    replayDutyUserPhone?: string(name='replayDutyUserPhone', description='复盘负责人手机号'),
    userReport?: long(name='userReport', description='用户上报 码表:PROBLEM_USER_REPORT'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetProblemImprovementResponse = {
  headers: map[string]string(name='headers'),
  body: GetProblemImprovementResponseBody(name='body'),
}

async function getProblemImprovement(request: GetProblemImprovementRequest): GetProblemImprovementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProblemImprovement', 'POST', '/problem/improvement/detail', 'json', false, 'json', request);
}

model GetProblemPreviewRequest {
  clientToken?: string(name='clientToken', description='幂等校验token', position='Body'),
  effectServiceIds?: [ long ](name='effectServiceIds', description='影响服务', position='Body'),
  incidentId?: long(name='incidentId', description='事件Id', position='Body'),
  problemId?: long(name='problemId', description='故障id', position='Body'),
  problemLevel?: string(name='problemLevel', description='故障等级', position='Body'),
  problemNotifyType?: string(name='problemNotifyType', description='通告类型', position='Body'),
  relatedServiceId?: long(name='relatedServiceId', description='所属服务', position='Body'),
  serviceGroupIds?: [ long ](name='serviceGroupIds', description='应急协同组', position='Body'),
}

model GetProblemPreviewResponseBody = {
  data?: {
    deAfterData?: string(name='deAfterData', description='降级后数据'),
    deBeforeData?: string(name='deBeforeData', description='降级前数据'),
    mail?: {
      count?: long(name='count', description='数量'),
      users?: [ 
        {
          username?: string(name='username', description='用户名称'),
        }
      ](name='users'),
    }(name='mail', description='邮箱'),
    problem?: {
      coordinationGroups?: [ 
        {
          serviceGroupDescription?: string(name='serviceGroupDescription', description='服务组Maison'),
          serviceGroupId?: long(name='serviceGroupId', description='服务Id'),
          serviceGroupName?: string(name='serviceGroupName', description='服务组名称'),
        }
      ](name='coordinationGroups', description='应急协同组'),
      createTime?: string(name='createTime', description='创建时间'),
      discoverTime?: string(name='discoverTime', description='发现时间'),
      effectionServices?: [ 
        {
          serviceId?: long(name='serviceId', description='影响服务Id'),
          serviceName?: string(name='serviceName', description='影响服务名称'),
        }
      ](name='effectionServices', description='影响服务'),
      isManual?: boolean(name='isManual', description='是否手动'),
      isUpgrade?: boolean(name='isUpgrade', description='是否升级'),
      mainHandlerId?: string(name='mainHandlerId', description='主要处理人Id'),
      mainHandlerName?: string(name='mainHandlerName', description='主要处理人'),
      preliminaryReason?: string(name='preliminaryReason', description='初步原因'),
      problemId?: long(name='problemId', description='故障Id'),
      problemLevel?: string(name='problemLevel', description='故障等级 1=P1 2=P2 3=P3 4=P4'),
      problemName?: string(name='problemName', description='故障名称'),
      problemStatus?: string(name='problemStatus', description='故障状态 1 处理中 2已恢复 3复盘中 4已复盘 5已取消'),
      progressSummary?: string(name='progressSummary', description='进展摘要'),
      progressSummaryRichTextId?: long(name='progressSummaryRichTextId', description='富文本id'),
      recoveryTime?: string(name='recoveryTime', description='恢复时间'),
      relatedServiceId?: long(name='relatedServiceId', description='关联服务ID'),
      serviceName?: string(name='serviceName', description='关联服务 名称'),
    }(name='problem'),
    sms?: {
      count?: long(name='count', description='数量'),
      users?: [ 
        {
          username?: string(name='username', description='用户名称'),
        }
      ](name='users'),
    }(name='sms', description='短信'),
    upAfterData?: string(name='upAfterData', description='升级后数据'),
    upBeforeData?: string(name='upBeforeData', description='升级前数据'),
    voice?: {
      count?: long(name='count', description='数量'),
      users?: [ 
        {
          username?: string(name='username', description='用户'),
        }
      ](name='users'),
    }(name='voice', description='语音'),
    webhook?: {
      count?: long(name='count', description='数量'),
      serviceGroups?: [ 
        {
          serviceName?: string(name='serviceName', description='服务名称'),
        }
      ](name='serviceGroups'),
    }(name='webhook', description='webhook'),
  }(name='data'),
  requestId?: string(name='requestId', description='requestId'),
}

model GetProblemPreviewResponse = {
  headers: map[string]string(name='headers'),
  body: GetProblemPreviewResponseBody(name='body'),
}

async function getProblemPreview(request: GetProblemPreviewRequest): GetProblemPreviewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProblemPreview', 'POST', '/problem/preview', 'json', false, 'json', request);
}

model GetResourceStatisticsRequest {
  clientToken?: string(name='clientToken', description='幂等校验', position='Body'),
}

model GetResourceStatisticsResponseBody = {
  data?: {
    alertCount?: int32(name='alertCount', description='报警总数'),
    incidentCount?: int32(name='incidentCount', description='事件总数'),
    integrationCount?: int32(name='integrationCount', description='集成总数'),
    problemCount?: int32(name='problemCount', description='故障总数'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetResourceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceStatisticsResponseBody(name='body'),
}

async function getResourceStatistics(request: GetResourceStatisticsRequest): GetResourceStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetResourceStatistics', 'POST', '/config/resource/count', 'json', false, 'json', request);
}

model GetRichTextRequest {
  instanceId?: long(name='instanceId', description='资源类型', position='Body'),
  instanceType?: string(name='instanceType', position='Body'),
  richTextId?: long(name='richTextId', description='资源id', position='Body'),
}

model GetRichTextResponseBody = {
  data?: {
    instanceId?: long(name='instanceId', description='资源id'),
    instanceType?: long(name='instanceType', description='资源类型'),
    richText?: string(name='richText', description='富文本内容'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetRichTextResponse = {
  headers: map[string]string(name='headers'),
  body: GetRichTextResponseBody(name='body'),
}

async function getRichText(request: GetRichTextRequest): GetRichTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRichText', 'POST', '/rich/detail', 'json', false, 'json', request);
}

model GetRouteRuleRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  routeRuleId: long(name='routeRuleId', description='规则ID', position='Body'),
}

model GetRouteRuleResponseBody = {
  data?: {
    assignObjectId?: long(name='assignObjectId', description='事件分派对象ID（服务组ID 或用户ID）'),
    assignObjectName?: string(name='assignObjectName', description='通知对象名称'),
    assignObjectType?: string(name='assignObjectType', description='事件分派对象类型 SERVICEGROUP 服务组  USER 单个用户'),
    childRuleRelation?: string(name='childRuleRelation', description='子规则关系，0与，1或'),
    createTime?: string(name='createTime', description='创建时间'),
    effection?: string(name='effection', description='影响程度  LOW一般  HIGH-严重'),
    enableStatus?: string(name='enableStatus', description='是否启用  DISABLE禁用 ENABLE 启用'),
    eventRouteChildRules?: [ 
      {
        childConditionRelation?: long(name='childConditionRelation', description='子条件计算关系，0-与，1-或'),
        childRouteRuleId?: long(name='childRouteRuleId', description='子规则ID'),
        conditions?: [ 
          {
            key?: string(name='key', description='条件可以'),
            operationSymbol?: string(name='operationSymbol', description='操作符'),
            value?: string(name='value', description='匹配值'),
          }
        ](name='conditions', description='条件'),
        isValidChildRule?: boolean(name='isValidChildRule', description='是否有效得规则true有效 false无效'),
        monitorIntegrationConfigId?: long(name='monitorIntegrationConfigId', description='集成配置ID'),
        monitorSourceId?: long(name='monitorSourceId', description='监控源ID'),
        monitorSourceName?: string(name='monitorSourceName', description='监控源名称'),
        parentRuleId?: long(name='parentRuleId', description='规则ID'),
      }
    ](name='eventRouteChildRules', description='子规则'),
    incidentLevel?: string(name='incidentLevel', description='事件级别 P1 P2 P3 P4'),
    matchCount?: long(name='matchCount', description='命中次数'),
    notifyChannelNames?: [ string ](name='notifyChannelNames', description='通知渠道名称'),
    notifyChannels?: [ string ](name='notifyChannels', description='通知渠道'),
    relatedServiceId?: long(name='relatedServiceId', description='关联服务ID'),
    relatedServiceName?: string(name='relatedServiceName', description='关联服务名称'),
    routeRuleId?: long(name='routeRuleId', description='规则ID'),
    routeType?: string(name='routeType', description='路由类型：INCIDENT 触发事件 ALERT 仅触发报警'),
    ruleName?: string(name='ruleName', description='流转规则名字'),
    timeWindow?: int32(name='timeWindow', description='时间窗口'),
    updateTime?: string(name='updateTime', description='修改时间'),
  }(name='data', description='规则详情'),
  requestId?: string(name='requestId', description='请求ID'),
}

model GetRouteRuleResponse = {
  headers: map[string]string(name='headers'),
  body: GetRouteRuleResponseBody(name='body'),
}

async function getRouteRule(request: GetRouteRuleRequest): GetRouteRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRouteRule', 'POST', '/routeRule/detail', 'json', false, 'json', request);
}

model GetServiceRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  serviceId: long(name='serviceId', description='服务ID', position='Body'),
}

model GetServiceResponseBody = {
  data?: {
    serviceDescription?: string(name='serviceDescription', description='服务描述'),
    serviceId?: long(name='serviceId', description='服务ID'),
    serviceName?: string(name='serviceName', description='服务名字'),
    updateTime?: string(name='updateTime', description='修改时间'),
  }(name='data', description='服务详情'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetServiceResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceResponseBody(name='body'),
}

async function getService(request: GetServiceRequest): GetServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetService', 'POST', '/services/detail', 'json', false, 'json', request);
}

model GetServiceGroupRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  serviceGroupId?: long(name='serviceGroupId', description='服务组ID', position='Body'),
}

model GetServiceGroupResponseBody = {
  data?: {
    createTime?: string(name='createTime', description='创建时间'),
    enableWebhook?: string(name='enableWebhook', description='ENABLE 启用 DISABLE 禁用'),
    serviceGroupDescription?: string(name='serviceGroupDescription', description='服务组描述'),
    serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
    serviceGroupName?: string(name='serviceGroupName', description='服务组名称'),
    updateTime?: string(name='updateTime', description='修改时间'),
    users?: [ 
      {
        phone?: string(name='phone', description='手机号'),
        serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
        userId?: long(name='userId', description='用户ID'),
        userName?: string(name='userName', description='用户名字'),
      }
    ](name='users', description='用户ID'),
    webhookLink?: string(name='webhookLink', description='webhook 跳转地址'),
    webhookType?: string(name='webhookType', description='WEIXIN_GROUP 微信 DING_GROUP 钉钉 FEISHU_GROUP飞书'),
  }(name='data'),
  requestId?: string(name='requestId', description='请求ID'),
}

model GetServiceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceGroupResponseBody(name='body'),
}

async function getServiceGroup(request: GetServiceGroupRequest): GetServiceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetServiceGroup', 'POST', '/services/group/detail', 'json', false, 'json', request);
}

model GetServiceGroupPersonSchedulingRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  endTime?: string(name='endTime', description='排班结束时间', position='Body'),
  serviceGroupId?: long(name='serviceGroupId', description='服务组ID', position='Body'),
  startTime?: string(name='startTime', description='排班开始时间', position='Body'),
  userId?: long(name='userId', description='用户ID', position='Body'),
}

model GetServiceGroupPersonSchedulingResponseBody = {
  data?: map[string]any(name='data', description='排班日历'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetServiceGroupPersonSchedulingResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceGroupPersonSchedulingResponseBody(name='body'),
}

async function getServiceGroupPersonScheduling(request: GetServiceGroupPersonSchedulingRequest): GetServiceGroupPersonSchedulingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetServiceGroupPersonScheduling', 'POST', '/services/group/scheduling/user/getScheduling', 'json', false, 'json', request);
}

model GetServiceGroupSchedulingRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  serviceGroupId: long(name='serviceGroupId', description='服务组ID', position='Body'),
}

model GetServiceGroupSchedulingResponseBody = {
  data?: {
    fastScheduling?: {
      dutyPlan?: string(name='dutyPlan', description='值班方案 dutyPlan FAST_CHOICE 快速选择   CUSTOM  自定义'),
      id?: long(name='id', description='快速排班ID'),
      schedulingUsers?: [ 
        {
          schedulingOrder?: int32(name='schedulingOrder', description='排班顺序'),
          schedulingUserId?: long(name='schedulingUserId', description='轮班用户ID'),
          schedulingUserName?: string(name='schedulingUserName', description='轮班用户名字'),
        }
      ](name='schedulingUsers', description='快速轮班用户'),
      singleDuration?: int32(name='singleDuration', description='每人排班时长'),
      singleDurationUnit?: string(name='singleDurationUnit', description='每人排班时长单位 HOUR 小时 DAY 天'),
    }(name='fastScheduling', description='快速排班'),
    fineScheduling?: {
      id?: long(name='id', description='1'),
      period?: int32(name='period', description='1'),
      periodUnit?: string(name='periodUnit', description='循环周期单位 HOUR 小时 DAY 天'),
      schedulingFineShifts?: [ 
        {
          cycleOrder?: long(name='cycleOrder', description='循环次序'),
          schedulingEndTime?: string(name='schedulingEndTime', description='排班结束时间'),
          schedulingOrder?: int32(name='schedulingOrder', description='排班顺序'),
          schedulingStartTime?: string(name='schedulingStartTime', description='排班开始时间'),
          schedulingUserId?: long(name='schedulingUserId', description='排班用户ID'),
          schedulingUserName?: string(name='schedulingUserName', description='排班用户名字'),
          shiftName?: string(name='shiftName', description='班次名称'),
          skipOneDay?: boolean(name='skipOneDay', description='是否跨天'),
        }
      ](name='schedulingFineShifts', description='精细排班班次人员信息'),
      schedulingTemplateFineShifts?: [ 
        {
          schedulingEndTime?: string(name='schedulingEndTime', description='排班结束时间'),
          schedulingOrder?: long(name='schedulingOrder', description='排班顺序'),
          schedulingStartTime?: string(name='schedulingStartTime', description='排班开始时间'),
          schedulingUserId?: string(name='schedulingUserId', description='用户ID'),
          schedulingUserName?: string(name='schedulingUserName', description='排班用户名字'),
          shiftName?: string(name='shiftName', description='班次名称'),
          skipOneDay?: boolean(name='skipOneDay', description='是否跨天'),
        }
      ](name='schedulingTemplateFineShifts', description='精细排班模版'),
      shiftType?: string(name='shiftType', description='班次类型 MORNING_NIGHT 早晚班 MORNING_NOON_NIGHT 早中晚班 CUSTOM 自定义'),
    }(name='fineScheduling', description='精细排班'),
    schedulingWay?: string(name='schedulingWay', description='排班方式 FAST 快速排班 FINE 精细排班'),
    serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
    users?: [ 
      {
        userId?: long(name='userId', description='用户ID'),
        userName?: string(name='userName', description='用户名字'),
      }
    ](name='users', description='已经排班'),
  }(name='data', description='排班详情'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetServiceGroupSchedulingResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceGroupSchedulingResponseBody(name='body'),
}

async function getServiceGroupScheduling(request: GetServiceGroupSchedulingRequest): GetServiceGroupSchedulingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetServiceGroupScheduling', 'POST', '/services/group/scheduling/detail', 'json', false, 'json', request);
}

model GetServiceGroupSchedulingPreviewRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  endTime?: string(name='endTime', description='排班结束时间', position='Body'),
  fastScheduling?: {
    dutyPlan?: string(name='dutyPlan', description='值班方案 dutyPlan FAST_CHOICE 快速选择 CUSTOM 自定义'),
    schedulingUsers?: [ 
      {
        schedulingOrder?: int32(name='schedulingOrder', description='排班顺序'),
        schedulingUserId?: long(name='schedulingUserId', description='轮班用户ID'),
      }
    ](name='schedulingUsers', description='快速轮班用户'),
    singleDuration?: int32(name='singleDuration', description='每人排班时长'),
    singleDurationUnit?: string(name='singleDurationUnit', description='每人排班时长单位 HOUR 小时 DAY 天'),
  }(name='fastScheduling', description='快速排班', position='Body'),
  fineScheduling?: {
    period?: int32(name='period', description='循环周期'),
    periodUnit?: string(name='periodUnit', description='循环周期单位 HOUR 小时 DAY 天'),
    schedulingFineShifts?: [ 
      {
        schedulingEndTime?: string(name='schedulingEndTime', description='排班结束时间'),
        schedulingOrder?: long(name='schedulingOrder', description='排班顺序'),
        schedulingStartTime?: string(name='schedulingStartTime', description='排班开始时间'),
        shiftName?: string(name='shiftName', description='班次名称'),
      }
    ](name='schedulingFineShifts', description='精细排班班次人员信息'),
    shiftType?: string(name='shiftType', description='班次类型 MORNING_NIGHT 早晚班 MORNING_NOON_NIGHT 早中晚班 CUSTOM 自定义'),
  }(name='fineScheduling', description='精细排', position='Body'),
  schedulingWay: string(name='schedulingWay', description='排班方式 FAST 快速排班 FINE 精细排班', position='Body'),
  serviceGroupId: long(name='serviceGroupId', description='服务组ID', position='Body'),
  startTime?: string(name='startTime', description='排班开始时间', position='Body'),
}

model GetServiceGroupSchedulingPreviewResponseBody = {
  data?: map[string]any(name='data', description='服务组排班信息'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetServiceGroupSchedulingPreviewResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceGroupSchedulingPreviewResponseBody(name='body'),
}

async function getServiceGroupSchedulingPreview(request: GetServiceGroupSchedulingPreviewRequest): GetServiceGroupSchedulingPreviewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetServiceGroupSchedulingPreview', 'POST', '/services/group/scheduling/preview', 'json', false, 'json', request);
}

model GetServiceGroupSpecialPersonSchedulingRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  serviceGroupId?: long(name='serviceGroupId', description='服务组ID', position='Body'),
  userId: long(name='userId', description='用户ID', position='Body'),
}

model GetServiceGroupSpecialPersonSchedulingResponseBody = {
  data?: [ 
    {
      schedulingDate?: string(name='schedulingDate', description='排班日期'),
      schedulingEndTime?: string(name='schedulingEndTime', description='排班结束时间'),
      schedulingStartTime?: string(name='schedulingStartTime', description='排班开始时间'),
      schedulingUserId?: long(name='schedulingUserId', description='排班用户ID'),
      serviceGroupId?: long(name='serviceGroupId', description='服务组id'),
      serviceGroupName?: string(name='serviceGroupName', description='服务组名字'),
    }
  ](name='data', description='人员排班信息'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetServiceGroupSpecialPersonSchedulingResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceGroupSpecialPersonSchedulingResponseBody(name='body'),
}

async function getServiceGroupSpecialPersonScheduling(request: GetServiceGroupSpecialPersonSchedulingRequest): GetServiceGroupSpecialPersonSchedulingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetServiceGroupSpecialPersonScheduling', 'POST', '/services/group/scheduling/getUserScheduling', 'json', false, 'json', request);
}

model GetSimilarIncidentStatisticsRequest {
  clientToken?: string(name='clientToken', description='幂等标识', position='Body'),
  createTime: string(name='createTime', description='触发时间', position='Body'),
  events: [ string ](name='events', description='事件告警内容', position='Body'),
  incidentId: long(name='incidentId', description='事件id', position='Body'),
  incidentTitle: string(name='incidentTitle', description='事件标题', position='Body'),
  relatedServiceId: long(name='relatedServiceId', description='关联服务id', position='Body'),
}

model GetSimilarIncidentStatisticsResponseBody = {
  data?: {
    countInSevenDays?: long(name='countInSevenDays', description='7天内相似事件数量'),
    countInSixMonths?: long(name='countInSixMonths', description='6月内相似事件数量'),
    dailySimilarIncidents?: [ 
      {
        commitment?: long(name='commitment', description='数量'),
        date?: string(name='date', description='日期'),
        day?: long(name='day', description='星期几'),
        month?: long(name='month', description='月份'),
        similarIncidents?: [ 
          {
            assignUserId?: long(name='assignUserId', description='分派人id'),
            assignUserName?: string(name='assignUserName', description='分派人'),
            createTime?: string(name='createTime', description='触发时间'),
            durationTime?: long(name='durationTime', description='持续时间'),
            finishReason?: long(name='finishReason', description='触发原因'),
            finishReasonDescription?: string(name='finishReasonDescription', description='触发原因描述'),
            finishSolutionDescription?: string(name='finishSolutionDescription', description='解决方案描述'),
            incidentFinishSolution?: long(name='incidentFinishSolution', description='解决方案'),
            incidentId?: long(name='incidentId', description='事件id'),
            incidentNumber?: string(name='incidentNumber', description='事件编号'),
            incidentTitle?: string(name='incidentTitle', description='事件名称'),
            relatedRouteRuleId?: long(name='relatedRouteRuleId', description='流转规则id'),
            relatedRouteRuleName?: string(name='relatedRouteRuleName', description='流转规则名称'),
            similarScore?: string(name='similarScore', description='相似度'),
          }
        ](name='similarIncidents', description='相似事件列表'),
        week?: string(name='week', description='周'),
      }
    ](name='dailySimilarIncidents', description='根据日期分类'),
    requestId?: string(name='requestId', description='id of the request'),
    topFiveIncidents?: [ 
      {
        assignUserId?: string(name='assignUserId', description='分派人id'),
        assignUserName?: string(name='assignUserName', description='分派人'),
        createTime?: string(name='createTime', description='触发时间'),
        durationTime?: long(name='durationTime', description='持续时间'),
        finishReason?: long(name='finishReason', description='触发原因'),
        finishReasonDescription?: string(name='finishReasonDescription', description='触发原因描述'),
        finishSolutionDescription?: string(name='finishSolutionDescription', description='解决方案描述'),
        incidentFinishSolution?: long(name='incidentFinishSolution', description='解决方案'),
        incidentId?: long(name='incidentId', description='事件id'),
        incidentNumber?: string(name='incidentNumber', description='事件编号'),
        incidentTitle?: string(name='incidentTitle', description='事件标题'),
        relatedRouteRuleId?: long(name='relatedRouteRuleId', description='流转规则id'),
        relatedRouteRuleName?: string(name='relatedRouteRuleName', description='流转规则名称'),
        similarScore?: string(name='similarScore', description='相似度'),
      }
    ](name='topFiveIncidents', description='topFiveIncidents'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='id of the request'),
}

model GetSimilarIncidentStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetSimilarIncidentStatisticsResponseBody(name='body'),
}

async function getSimilarIncidentStatistics(request: GetSimilarIncidentStatisticsRequest): GetSimilarIncidentStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSimilarIncidentStatistics', 'POST', '/incident/similarIncident/statistics', 'json', false, 'json', request);
}

model GetSubscriptionRequest {
  subscriptionId?: long(name='subscriptionId', position='Body'),
}

model GetSubscriptionResponseBody = {
  data?: {
    endTime?: string(name='endTime', description='时效结束时间'),
    expiredType?: string(name='expiredType', description='有效期类型 0 长期 1短期'),
    notifyObjectList?: [ 
      {
        id?: long(name='id', description='id主键'),
        name?: string(name='name', description='通知对象名'),
        notifyObjectId?: long(name='notifyObjectId', description='关联主键id'),
        notifyObjectType?: long(name='notifyObjectType', description='通知对象类型0服务组 1个人'),
      }
    ](name='notifyObjectList', description='通知对象列表'),
    notifyObjectType?: string(name='notifyObjectType', description='0服务组 1个人'),
    notifyStrategyList?: [ 
      {
        instanceType?: long(name='instanceType', description='订阅实例类型，0事件、1报警、2故障'),
        strategies?: [ 
          {
            channels?: string(name='channels', description='通知渠道'),
            conditions?: [ 
              {
                action?: string(name='action', description='事件动作'),
                effection?: string(name='effection', description='影响范围'),
                level?: string(name='level', description='等级'),
                problemNotifyType?: string(name='problemNotifyType', description='故障通知类型'),
              }
            ](name='conditions', description='条件'),
            id?: long(name='id', description='策略主键'),
            periodChannel?: {
              nonWorkday?: string(name='nonWorkday', description='非工作时间'),
              workday?: string(name='workday', description='工作时间'),
            }(name='periodChannel', description='分时间段渠道'),
          }
        ](name='strategies', description='策略'),
      }
    ](name='notifyStrategyList', description='通知策略列表'),
    period?: string(name='period', description='时间段字符串'),
    scope?: string(name='scope', description='0 全部 1服务 2 流转规则'),
    scopeObjectList?: [ 
      {
        id?: long(name='id', description='id主键'),
        scope?: string(name='scope', description='订阅范围类型 0 全部 1服务 2 流转规则'),
        scopeObject?: string(name='scopeObject', description='订阅范围对象名称'),
        scopeObjectId?: long(name='scopeObjectId', description='订阅范围对象关联表主键id'),
      }
    ](name='scopeObjectList'),
    startTime?: string(name='startTime', description='时效开始时间'),
    status?: string(name='status', description='1 启用 0禁用'),
    subscriptionId?: long(name='subscriptionId'),
    subscriptionTitle?: string(name='subscriptionTitle', description='通知订阅名称'),
  }(name='data'),
  requestId?: string(name='requestId'),
}

model GetSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: GetSubscriptionResponseBody(name='body'),
}

async function getSubscription(request: GetSubscriptionRequest): GetSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSubscription', 'POST', '/notify/subscription/detail', 'json', false, 'json', request);
}

model GetTenantApplicationRequest {
  clientToken: string(name='clientToken', description='幂等标识', position='Body'),
}

model GetTenantApplicationResponseBody = {
  data?: {
    bizId?: string(name='bizId', description='业务id'),
    channel?: string(name='channel', description='云钉协同渠道'),
    corporationId?: string(name='corporationId', description='企业id'),
    progress?: string(name='progress', description='进度'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='id of the request'),
}

model GetTenantApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: GetTenantApplicationResponseBody(name='body'),
}

async function getTenantApplication(request: GetTenantApplicationRequest): GetTenantApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTenantApplication', 'POST', '/mobileApp/detail', 'json', false, 'json', request);
}

model GetUserRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  userId: long(name='userId', description='用户ID', position='Body'),
}

model GetUserResponseBody = {
  data?: {
    accountType?: string(name='accountType', description='CUSTOMER:主账号，SUB:子账号'),
    createTime?: string(name='createTime', description='创建时间'),
    email?: string(name='email', description='email'),
    isEditableUser?: boolean(name='isEditableUser', description='是否可编辑'),
    isRelated?: string(name='isRelated', description='是否关联'),
    phone?: string(name='phone', description='用户手机号'),
    ramId?: string(name='ramId', description='ramId'),
    serviceGroups?: [ 
      {
        name?: string(name='name', description='服务组名称'),
        serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
      }
    ](name='serviceGroups', description='所属服务组'),
    userId?: long(name='userId', description='用户ID'),
    username?: string(name='username', description='用户昵称'),
  }(name='data', description='用户'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserResponseBody(name='body'),
}

async function getUser(request: GetUserRequest): GetUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUser', 'POST', '/user/getUser', 'json', false, 'json', request);
}

model GetUserGuideStatusRequest {
  clientToken?: string(name='clientToken', description='幂等校验', position='Body'),
}

model GetUserGuideStatusResponseBody = {
  data?: map[string]any(name='data', description='map'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model GetUserGuideStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserGuideStatusResponseBody(name='body'),
}

async function getUserGuideStatus(request: GetUserGuideStatusRequest): GetUserGuideStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUserGuideStatus', 'POST', '/user/guide/status', 'json', false, 'json', request);
}

model ListAlertsRequest {
  alertLevel?: string(name='alertLevel', description='报警等级 P1 P2 P3 P4', position='Body'),
  alertName?: string(name='alertName', description='报警名称', position='Body'),
  alertSourceName?: string(name='alertSourceName', description='报警来源', position='Body'),
  endTime?: string(name='endTime', description='结束时间', position='Body'),
  pageNumber?: long(name='pageNumber', description='当前页', position='Body'),
  pageSize?: long(name='pageSize', description='页大小', position='Body'),
  relatedServiceId?: long(name='relatedServiceId', description='服务id', position='Body'),
  ruleName?: string(name='ruleName', description='流转规则名字', position='Body'),
  startTime?: string(name='startTime', description='开始时间', position='Body'),
}

model ListAlertsResponseBody = {
  data?: [ 
    {
      alertId?: long(name='alertId', description='报警ID'),
      alertLevel?: string(name='alertLevel', description='告警优先级  1，2，3，4  对应 p1,p2,p3,p4'),
      alertNumber?: string(name='alertNumber', description='报警编号'),
      alertSourceName?: string(name='alertSourceName', description='报警源'),
      createTime?: string(name='createTime', description='创建时间'),
      firstEventTime?: string(name='firstEventTime', description='第一次告警上报时间'),
      relatedServiceName?: string(name='relatedServiceName', description='关联服务名称'),
      routeRuleId?: long(name='routeRuleId', description='关联流转规则ID'),
      routeRuleName?: string(name='routeRuleName', description='流转规则名字'),
      sourceEventCount?: long(name='sourceEventCount', description='收敛量'),
      title?: string(name='title', description='报警标题'),
    }
  ](name='data', description='报警列表'),
  pageNumber?: int32(name='pageNumber', description='当前页'),
  pageSize?: int32(name='pageSize', description='页的大小'),
  requestId?: string(name='requestId', description='请求ID'),
  totalCount?: long(name='totalCount', description='总条数'),
}

model ListAlertsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAlertsResponseBody(name='body'),
}

async function listAlerts(request: ListAlertsRequest): ListAlertsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAlerts', 'POST', '/alerts/list', 'json', false, 'json', request);
}

model ListChartDataForServiceGroupRequest {
  clientToken?: string(name='clientToken', position='Body'),
  endTime?: string(name='endTime', description='结束时间', position='Body'),
  startTime?: string(name='startTime', description='开始时间', position='Body'),
}

model ListChartDataForServiceGroupResponseBody = {
  data?: [ 
    {
      effectionLevel?: map[string]any(name='effectionLevel', description='根据影响等级时间等级分组统计数量'),
      escalationIncidentCount?: long(name='escalationIncidentCount', description='升级事件数'),
      incidentCount?: long(name='incidentCount', description='时间总数'),
      meanTimeToAcknowledge?: long(name='meanTimeToAcknowledge', description='当日平均响应时间单位秒'),
      meanTimeToRepair?: long(name='meanTimeToRepair', description='当日平均完结时间单位秒'),
      time?: string(name='time', description='时间'),
      totalMeanTimeToAcknowledge?: long(name='totalMeanTimeToAcknowledge', description='总平均响应时间'),
      totalMeanTimeToRepair?: long(name='totalMeanTimeToRepair', description='总平均完结时间'),
      unAcknowledgedEscalationIncidentCount?: long(name='unAcknowledgedEscalationIncidentCount', description='未响应升级事件数'),
      unFinishEscalationIncidentCount?: long(name='unFinishEscalationIncidentCount', description='未完结升级事件数'),
    }
  ](name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListChartDataForServiceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListChartDataForServiceGroupResponseBody(name='body'),
}

async function listChartDataForServiceGroup(request: ListChartDataForServiceGroupRequest): ListChartDataForServiceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListChartDataForServiceGroup', 'POST', '/statistics/chartDataForServiceGroup/', 'json', false, 'json', request);
}

model ListChartDataForUserRequest {
  clientToken?: string(name='clientToken', position='Body'),
  endTime?: string(name='endTime', description='结束时间', position='Body'),
  startTime?: string(name='startTime', description='开始时间', position='Body'),
}

model ListChartDataForUserResponseBody = {
  data?: [ 
    {
      effectionLevel?: map[string]any(name='effectionLevel', description='根据影响等级时间等级分组统计数量'),
      escalationIncidentCount?: long(name='escalationIncidentCount', description='升级事件数'),
      incidentCount?: long(name='incidentCount', description='时间总数'),
      meanTimeToAcknowledge?: long(name='meanTimeToAcknowledge', description='当日平均响应时间单位秒'),
      meanTimeToRepair?: long(name='meanTimeToRepair', description='当日平均完结时间单位秒'),
      time?: string(name='time', description='时间'),
      totalMeanTimeToAcknowledge?: long(name='totalMeanTimeToAcknowledge', description='总平均响应时间'),
      totalMeanTimeToRepair?: long(name='totalMeanTimeToRepair', description='总平均完结时间'),
      unAcknowledgedEscalationIncidentCount?: long(name='unAcknowledgedEscalationIncidentCount', description='未响应升级事件数'),
      unFinishEscalationIncidentCount?: long(name='unFinishEscalationIncidentCount', description='未完结升级事件数'),
    }
  ](name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListChartDataForUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListChartDataForUserResponseBody(name='body'),
}

async function listChartDataForUser(request: ListChartDataForUserRequest): ListChartDataForUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListChartDataForUser', 'POST', '/statistics/chartDataForUser/', 'json', false, 'json', request);
}

model ListConfigsRequest {
  clientToken?: string(name='clientToken', description='幂等校验token', position='Body'),
}

model ListConfigsResponseBody = {
  data?: map[string][ DataValue   ](name='data'),
  requestId?: string(name='requestId', description='requestId'),
}

model ListConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: ListConfigsResponseBody(name='body'),
}

async function listConfigs(request: ListConfigsRequest): ListConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListConfigs', 'POST', '/config/all', 'json', false, 'json', request);
}

model ListDataReportForServiceGroupRequest {
  endTime?: string(name='endTime', description='结束时间', position='Body'),
  serviceGroupName?: string(name='serviceGroupName', description='服务组名称', position='Body'),
  startTime?: string(name='startTime', description='开始时间', position='Body'),
}

model ListDataReportForServiceGroupResponseBody = {
  data?: [ 
    {
      escalationIncidentCount?: long(name='escalationIncidentCount', description='升级事件数量'),
      finishIncidentCount?: long(name='finishIncidentCount', description='事件完结数'),
      finishProportion?: string(name='finishProportion', description='完结率'),
      incidentCount?: long(name='incidentCount', description='事件数量'),
      meanTimeToAcknowledge?: long(name='meanTimeToAcknowledge', description='MRRA'),
      meanTimeToRepair?: long(name='meanTimeToRepair', description='MTTR'),
      serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
      serviceGroupName?: string(name='serviceGroupName', description='服务组名字'),
      unAcknowledgedEscalationIncidentCount?: long(name='unAcknowledgedEscalationIncidentCount', description='未响应升级事件数量'),
      unFinishEscalationIncidentCount?: long(name='unFinishEscalationIncidentCount', description='未完成升级事件数量'),
    }
  ](name='data', description='统计数据'),
  pageNumber?: long(name='pageNumber', description='当前页'),
  pageSIze?: long(name='pageSIze', description='页大小'),
  requestId?: string(name='requestId', description='Id of the request'),
  totalCount?: long(name='totalCount', description='总数'),
}

model ListDataReportForServiceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataReportForServiceGroupResponseBody(name='body'),
}

async function listDataReportForServiceGroup(request: ListDataReportForServiceGroupRequest): ListDataReportForServiceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataReportForServiceGroup', 'POST', '/statistics/listDataReportForServiceGroup', 'json', false, 'json', request);
}

model ListDataReportForUserRequest {
  endTime?: string(name='endTime', description='结束时间', position='Body'),
  pageNumber?: long(name='pageNumber', description='当前页', position='Body'),
  pageSize?: long(name='pageSize', description='页大小', position='Body'),
  startTime?: string(name='startTime', description='开始时间', position='Body'),
}

model ListDataReportForUserResponseBody = {
  data?: [ 
    {
      distributionIncidentCount?: long(name='distributionIncidentCount', description='分配事件数量'),
      escalationIncidentCount?: long(name='escalationIncidentCount', description='升级事件数量'),
      finishIncidentNumber?: long(name='finishIncidentNumber', description='完结事件数量'),
      finishProportion?: string(name='finishProportion', description='完结率'),
      meanTimeToAcknowledge?: string(name='meanTimeToAcknowledge', description='MRRA'),
      meanTimeToRepair?: string(name='meanTimeToRepair', description='MTTA'),
      unAcknowledgedEscalationIncidentCount?: long(name='unAcknowledgedEscalationIncidentCount', description='未响应升级数'),
      unDistributionIncidentCount?: long(name='unDistributionIncidentCount', description='非分配完结数'),
      unFinishEscalationIncidentCount?: long(name='unFinishEscalationIncidentCount', description='未完结事件数'),
      userId?: long(name='userId', description='用户ID'),
      userName?: string(name='userName', description='用户名字'),
    }
  ](name='data', description='个人统计数据'),
  requestId?: string(name='requestId', description='Id of the request'),
  totalCount?: long(name='totalCount', description='总条数'),
}

model ListDataReportForUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataReportForUserResponseBody(name='body'),
}

async function listDataReportForUser(request: ListDataReportForUserRequest): ListDataReportForUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataReportForUser', 'POST', '/statistics/listDataReportForUser', 'json', false, 'json', request);
}

model ListDictionariesRequest {
  clientToken?: string(name='clientToken', position='Body'),
}

model ListDictionariesResponseBody = {
  data?: map[string][ DataValue   ](name='data'),
  requestId?: string(name='requestId'),
}

model ListDictionariesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDictionariesResponseBody(name='body'),
}

async function listDictionaries(request: ListDictionariesRequest): ListDictionariesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDictionaries', 'POST', '/dict/list', 'json', false, 'json', request);
}

model ListEscalationPlanServicesRequest {
  clientToken?: string(name='clientToken', description='clientToken', position='Body'),
}

model ListEscalationPlanServicesResponseBody = {
  data?: [ 
    {
      scope?: string(name='scope', description='范围类型'),
      scopeObjectId?: long(name='scopeObjectId', description='范围对象id'),
    }
  ](name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListEscalationPlanServicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListEscalationPlanServicesResponseBody(name='body'),
}

async function listEscalationPlanServices(request: ListEscalationPlanServicesRequest): ListEscalationPlanServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEscalationPlanServices', 'POST', '/escalationPlan/services', 'json', false, 'json', request);
}

model ListEscalationPlansRequest {
  clientToken?: string(name='clientToken', description='clientToken', position='Body'),
  escalationPlanName?: string(name='escalationPlanName', description='升级计划名', position='Body'),
  pageNumber?: long(name='pageNumber', description='pageNumber', position='Body'),
  pageSize?: long(name='pageSize', description='pageSize', position='Body'),
  serviceName?: string(name='serviceName', description='服务名称', position='Body'),
}

model ListEscalationPlansResponseBody = {
  data?: [ 
    {
      escalationPlanId?: long(name='escalationPlanId', description='升级计划id'),
      escalationPlanName?: string(name='escalationPlanName', description='升级计划名称'),
      escalationPlanScopeObjects?: [ 
        {
          scope?: string(name='scope', description='范围对象类型'),
          scopeObjectId?: long(name='scopeObjectId', description='范围对象id（服务id）'),
          scopeObjectName?: string(name='scopeObjectName', description='范围对象名称'),
        }
      ](name='escalationPlanScopeObjects', description='升级计划范围对象'),
      modifyTime?: string(name='modifyTime', description='修改时间'),
      status?: string(name='status', description='启用ENABLE 禁用DISABLE'),
    }
  ](name='data', description='data'),
  pageNumber?: long(name='pageNumber', description='分页参数'),
  pageSize?: long(name='pageSize', description='分页参数'),
  requestId?: string(name='requestId', description='Id of the request'),
  totalCount?: long(name='totalCount', description='总条数'),
}

model ListEscalationPlansResponse = {
  headers: map[string]string(name='headers'),
  body: ListEscalationPlansResponseBody(name='body'),
}

async function listEscalationPlans(request: ListEscalationPlansRequest): ListEscalationPlansResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEscalationPlans', 'POST', '/escalationPlan/list', 'json', false, 'json', request);
}

model ListIncidentDetailEscalationPlansRequest {
  clientToken?: string(name='clientToken', description='幂等校验', position='Body'),
  incidentId?: long(name='incidentId', description='事件ID', position='Body'),
}

model ListIncidentDetailEscalationPlansResponseBody = {
  data?: {
    escalationPlanId?: long(name='escalationPlanId', description='升级策略ID'),
    escalationPlanName?: string(name='escalationPlanName', description='升级策略名称'),
    nuAcknowledgeEscalationPlan?: [ 
      {
        escalationPlanType?: string(name='escalationPlanType', description='升级策略类型 UN_ACKNOWLEDGE'),
        noticeChannels?: [ string ](name='noticeChannels', description='分配渠道'),
        noticeObjectList?: [ 
          {
            noticeObjectId?: long(name='noticeObjectId', description='分配对象id'),
            noticeObjectName?: string(name='noticeObjectName', description='分配对象名称'),
            noticeObjectPhone?: string(name='noticeObjectPhone', description='分配对象手机号'),
          }
        ](name='noticeObjectList', description='用户信息'),
        noticeTime?: long(name='noticeTime', description='延迟时间'),
        serviceGroupList?: [ 
          {
            id?: long(name='id', description='服务组id'),
            name?: string(name='name', description='服务组名称'),
          }
        ](name='serviceGroupList', description='通知群'),
        startTime?: long(name='startTime', description='开始时间'),
        status?: string(name='status', description='规则触发状态'),
      }
    ](name='nuAcknowledgeEscalationPlan', description='未响应升级策略'),
    unFinishEscalationPlan?: [ 
      {
        escalationPlanType?: string(name='escalationPlanType', description='升级策略类型 UN_ACKNOWLEDGE'),
        noticeChannels?: [ string ](name='noticeChannels', description='分配渠道'),
        noticeObjectList?: [ 
          {
            noticeObjectId?: long(name='noticeObjectId', description='分配对象id'),
            noticeObjectName?: string(name='noticeObjectName', description='分配对象名称'),
            noticeObjectPhone?: string(name='noticeObjectPhone', description='手机号'),
          }
        ](name='noticeObjectList', description='用户信息'),
        noticeTime?: int32(name='noticeTime', description='延迟时间'),
        serviceGroupList?: [ 
          {
            id?: long(name='id', description='服务组id'),
            name?: string(name='name', description='服务组名称'),
          }
        ](name='serviceGroupList', description='消息群'),
        startTime?: long(name='startTime', description='开始时间'),
        status?: string(name='status', description='规则触发状态'),
      }
    ](name='unFinishEscalationPlan', description='未完结升级策略规则列表'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListIncidentDetailEscalationPlansResponse = {
  headers: map[string]string(name='headers'),
  body: ListIncidentDetailEscalationPlansResponseBody(name='body'),
}

async function listIncidentDetailEscalationPlans(request: ListIncidentDetailEscalationPlansRequest): ListIncidentDetailEscalationPlansResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIncidentDetailEscalationPlans', 'POST', '/incident/detail/escalation', 'json', false, 'json', request);
}

model ListIncidentDetailTimelinesRequest {
  clientToken?: string(name='clientToken', description='幂等校验', position='Body'),
  incidentId?: long(name='incidentId', description='事件ID', position='Body'),
  pageNumber?: long(name='pageNumber', description='页', position='Body'),
  pageSize?: long(name='pageSize', description='行', position='Body'),
}

model ListIncidentDetailTimelinesResponseBody = {
  data?: [ 
    {
      action?: string(name='action', description='事件action'),
      createTime?: string(name='createTime', description='创建时间'),
      description?: string(name='description', description='描述'),
      incidentId?: long(name='incidentId', description='事件Id'),
      relatedServiceName?: string(name='relatedServiceName', description='服务名称'),
      remark?: string(name='remark', description='备注'),
      snapshotData?: string(name='snapshotData', description='快照数据'),
      title?: string(name='title', description='主题'),
    }
  ](name='data'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  requestId?: string(name='requestId', description='Id of the request'),
  totalCount?: int32(name='totalCount', description='总数'),
}

model ListIncidentDetailTimelinesResponse = {
  headers: map[string]string(name='headers'),
  body: ListIncidentDetailTimelinesResponseBody(name='body'),
}

async function listIncidentDetailTimelines(request: ListIncidentDetailTimelinesRequest): ListIncidentDetailTimelinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIncidentDetailTimelines', 'POST', '/incident/detail/timeline', 'json', false, 'json', request);
}

model ListIncidentSubtotalsRequest {
  clientToken?: string(name='clientToken', description='幂等校验', position='Body'),
  incidentId?: long(name='incidentId', description='事件ID', position='Body'),
}

model ListIncidentSubtotalsResponseBody = {
  data?: [ 
    {
      createTime?: string(name='createTime', description='创建时间'),
      createUserId?: long(name='createUserId', description='操作人Id'),
      createUserName?: string(name='createUserName', description='操作人'),
      createUserPhone?: string(name='createUserPhone', description='操作人手机号'),
      description?: string(name='description', description='描述'),
    }
  ](name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListIncidentSubtotalsResponse = {
  headers: map[string]string(name='headers'),
  body: ListIncidentSubtotalsResponseBody(name='body'),
}

async function listIncidentSubtotals(request: ListIncidentSubtotalsRequest): ListIncidentSubtotalsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIncidentSubtotals', 'POST', '/incident/list/subtotal', 'json', false, 'json', request);
}

model ListIncidentTimelinesRequest {
  clientToken?: string(name='clientToken', description='幂等校验Id', position='Body'),
  pageNumber?: long(name='pageNumber', description='页', position='Body'),
  pageSize?: long(name='pageSize', description='行', position='Body'),
}

model ListIncidentTimelinesResponseBody = {
  data?: [ 
    {
      action?: string(name='action', description='动态类型  触发新增 INCIDENT_ADD 响应 INCIDENT_RESPONSE 转交 INCIDENT_DELIVER 变更 INCIDENT_UPDATE 添加小计 INCIDENT_ADD_SUBTOTAL 完结 INCIDENT_FINISH 分配 INCIDENT_ASSIGN 升级 INCIDENT_UPGRAD'),
      createTime?: string(name='createTime', description='创建时间'),
      description?: long(name='description', description='描述'),
      incidentId?: long(name='incidentId', description='事件Id'),
      incidentNumber?: string(name='incidentNumber', description='事件编号'),
      incidentTitle?: string(name='incidentTitle', description='事件标题'),
      relatedServiceName?: string(name='relatedServiceName', description='服务名称'),
      remark?: string(name='remark', description='备注'),
      snapshotData?: string(name='snapshotData', description='动态快照数据'),
      title?: string(name='title', description='动态'),
    }
  ](name='data'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  requestId?: string(name='requestId'),
  totalCount?: int32(name='totalCount', description='总数'),
}

model ListIncidentTimelinesResponse = {
  headers: map[string]string(name='headers'),
  body: ListIncidentTimelinesResponseBody(name='body'),
}

async function listIncidentTimelines(request: ListIncidentTimelinesRequest): ListIncidentTimelinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIncidentTimelines', 'POST', '/incident/timeline', 'json', false, 'json', request);
}

model ListIncidentsRequest {
  clientToken?: string(name='clientToken', description='幂等校验id', position='Body'),
  createEndTime?: string(name='createEndTime', description='创建结束时间', position='Body'),
  createStartTime?: string(name='createStartTime', description='创建开始时间', position='Body'),
  effect?: string(name='effect', description='影响等级 高：HIGH 低 LOW', position='Body'),
  incidentLevel?: string(name='incidentLevel', description='事件级别 P1 P2 P3 P4', position='Body'),
  incidentStatus?: string(name='incidentStatus', description='事件状态 ASSIGNED已分派 RESPONDED已响应  FINISHED已完结', position='Body'),
  me?: int32(name='me', description='是否自己 1是 0不是', position='Body'),
  pageNumber?: int32(name='pageNumber', description='页', position='Body'),
  pageSize?: int32(name='pageSize', description='行', position='Body'),
  relationServiceId?: long(name='relationServiceId', description='关联服务ID', position='Body'),
  ruleName?: string(name='ruleName', description='流转规则名字', position='Body'),
}

model ListIncidentsResponseBody = {
  data?: [ 
    {
      assignUserId?: long(name='assignUserId', description='代表创建时间的资源属性字段'),
      assignUserName?: string(name='assignUserName', description='代表资源一级ID的资源属性字段'),
      assignUserPhone?: string(name='assignUserPhone', description='分派人手机号'),
      createTime?: string(name='createTime', description='事件级别'),
      effect?: string(name='effect', description='时间指派人ID'),
      incidentId?: long(name='incidentId', description='修改时间'),
      incidentLevel?: string(name='incidentLevel', description='影响程度'),
      incidentNumber?: string(name='incidentNumber', description='事件编号'),
      incidentStatus?: string(name='incidentStatus', description='关联流转规则ID'),
      incidentTitle?: string(name='incidentTitle', description='事件内容'),
      isManual?: boolean(name='isManual', description='事件来源 是=手动 否=自动'),
      relatedServiceId?: long(name='relatedServiceId', description='事件状态'),
      relatedServiceName?: string(name='relatedServiceName', description='关联服务名称'),
      routeRuleId?: long(name='routeRuleId', description='关联的服务ID'),
      routeRuleName?: string(name='routeRuleName', description='流转规则'),
    }
  ](name='data'),
  pageNumber?: int32(name='pageNumber', description='页'),
  pageSize?: int32(name='pageSize', description='行'),
  requestId?: string(name='requestId', description='requestId'),
  totalCount?: int32(name='totalCount', description='总数'),
}

model ListIncidentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListIncidentsResponseBody(name='body'),
}

async function listIncidents(request: ListIncidentsRequest): ListIncidentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIncidents', 'POST', '/incident/list', 'json', false, 'json', request);
}

model ListIntegrationConfigTimelinesRequest {
  clientToken?: string(name='clientToken', description='幂等参数', position='Body'),
  integrationConfigId?: long(name='integrationConfigId', description='集成配置id', position='Body'),
  pageNumber?: long(name='pageNumber', description='分页参数', position='Body'),
  pageSize?: long(name='pageSize', description='分页参数', position='Body'),
}

model ListIntegrationConfigTimelinesResponseBody = {
  data?: [ 
    {
      createTime?: string(name='createTime', description='创建时间'),
      description?: string(name='description', description='描述'),
      title?: string(name='title', description='主题'),
    }
  ](name='data'),
  pageNumber?: long(name='pageNumber', description='pageNumber'),
  pageSize?: long(name='pageSize', description='pageSize'),
  requestId?: string(name='requestId', description='requestId'),
  totalCount?: long(name='totalCount', description='totalCount'),
}

model ListIntegrationConfigTimelinesResponse = {
  headers: map[string]string(name='headers'),
  body: ListIntegrationConfigTimelinesResponseBody(name='body'),
}

async function listIntegrationConfigTimelines(request: ListIntegrationConfigTimelinesRequest): ListIntegrationConfigTimelinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIntegrationConfigTimelines', 'POST', '/integrationConfig/timeline', 'json', false, 'json', request);
}

model ListIntegrationConfigsRequest {
  clientToken?: string(name='clientToken', description='幂等id', position='Body'),
  monitorSourceName?: string(name='monitorSourceName', position='Body'),
}

model ListIntegrationConfigsResponseBody = {
  data?: [ 
    {
      integrationConfigId?: long(name='integrationConfigId', description='集成配置id'),
      isReceivedEvent?: boolean(name='isReceivedEvent', description='是否已接受报警'),
      monitorSourceId?: long(name='monitorSourceId', description='监控源id'),
      monitorSourceName?: string(name='monitorSourceName', description='监控源名城'),
      monitorSourceShortName?: string(name='monitorSourceShortName', description='监控源简称'),
      status?: string(name='status', description='集成配置状态'),
    }
  ](name='data'),
  requestId?: string(name='requestId'),
}

model ListIntegrationConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: ListIntegrationConfigsResponseBody(name='body'),
}

async function listIntegrationConfigs(request: ListIntegrationConfigsRequest): ListIntegrationConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIntegrationConfigs', 'POST', '/integrationConfig/list', 'json', false, 'json', request);
}

model ListMonitorSourcesRequest {
  clientToken?: string(name='clientToken', position='Body'),
}

model ListMonitorSourcesResponseBody = {
  data?: [ 
    {
      fieldKeys?: [ string ](name='fieldKeys'),
      monitorSourceId?: long(name='monitorSourceId'),
      monitorSourceName?: string(name='monitorSourceName'),
    }
  ](name='data'),
  requestId?: string(name='requestId'),
}

model ListMonitorSourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListMonitorSourcesResponseBody(name='body'),
}

async function listMonitorSources(request: ListMonitorSourcesRequest): ListMonitorSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMonitorSources', 'POST', '/monitorSource/list', 'json', false, 'json', request);
}

model ListProblemDetailOperationsRequest {
  clientToken?: string(name='clientToken', description='幂等校验', position='Body'),
  createTimeSort?: string(name='createTimeSort', description='时间排序', position='Body'),
  pageNumber?: int32(name='pageNumber', description='页', position='Body'),
  pageSize?: int32(name='pageSize', description='行', position='Body'),
  problemId: long(name='problemId', description='故障id', position='Body'),
}

model ListProblemDetailOperationsResponseBody = {
  data?: [ 
    {
      action?: string(name='action', description='升级 PROBLEM_UPGRADE 撤销 PROBLEM_REVOKE 恢复 PROBLEM_RESTORE 复盘 PROBLEM_IN_REVIEW 完结 PROBLEM_REOPENED 取消 PROBLEM_CANCEL 更新故障通告 PROBLEM_UPDATE_NOTIFY 添加故障小计 PROBLEM_ADD_SUBTOTAL 更新故障 PROBLEM_UPDATE'),
      createTime?: string(name='createTime', description='创建时间'),
      description?: string(name='description', description='描述'),
      relatedServiceName?: string(name='relatedServiceName', description='服务'),
      remark?: string(name='remark', description='备注'),
      snapshotData?: string(name='snapshotData', description='快照数据'),
      title?: string(name='title', description='动态标题'),
    }
  ](name='data', description='data'),
  pageNumber?: int32(name='pageNumber', description='页'),
  pageSize?: int32(name='pageSize', description='行'),
  requestId?: string(name='requestId', description='requestId'),
  totalCount?: int32(name='totalCount', description='总数'),
}

model ListProblemDetailOperationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProblemDetailOperationsResponseBody(name='body'),
}

async function listProblemDetailOperations(request: ListProblemDetailOperationsRequest): ListProblemDetailOperationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProblemDetailOperations', 'POST', '/problem/detail/operations', 'json', false, 'json', request);
}

model ListProblemOperationsRequest {
  clientToken?: string(name='clientToken', description='幂等校验token', position='Body'),
  pageNumber?: int32(name='pageNumber', description='页', position='Body'),
  pageSize?: int32(name='pageSize', description='行', position='Body'),
}

model ListProblemOperationsResponseBody = {
  data?: [ 
    {
      action?: string(name='action', description='升级    PROBLEM_UPGRADE      撤销     PROBLEM_REVOKE      恢复     PROBLEM_RESTORE       复盘     PROBLEM_IN_REVIEW       完结     PROBLEM_REOPENED       取消     PROBLEM_CANCEL       更新故障通告     PROBLEM_UPDATE_NOTIFY       添加故障小计     PROBLEM_ADD_SUBTOTAL       更新故障     PROBLEM_UPDATE'),
      createTime?: string(name='createTime', description='创建时间'),
      description?: string(name='description', description='描述'),
      problemId?: long(name='problemId', description='故障Id'),
      problemName?: string(name='problemName', description='故障名称'),
      problemNumber?: string(name='problemNumber', description='故障编号'),
      relatedServiceName?: string(name='relatedServiceName', description='服务名称'),
      snapshotData?: string(name='snapshotData', description='快照数据'),
      title?: string(name='title', description='动态标题'),
    }
  ](name='data', description='data'),
  pageNumber?: int32(name='pageNumber', description='页'),
  pageSize?: int32(name='pageSize', description='行'),
  requestId?: string(name='requestId', description='Id of the request'),
  totalCount?: int32(name='totalCount', description='总数'),
}

model ListProblemOperationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProblemOperationsResponseBody(name='body'),
}

async function listProblemOperations(request: ListProblemOperationsRequest): ListProblemOperationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProblemOperations', 'POST', '/problem/operations', 'json', false, 'json', request);
}

model ListProblemSubtotalsRequest {
  clientToken?: string(name='clientToken', description='幂等校验token', position='Body'),
  problemId?: long(name='problemId', description='故障Id', position='Body'),
}

model ListProblemSubtotalsResponseBody = {
  data?: [ 
    {
      createRamName?: string(name='createRamName', description='操作人'),
      createTime?: string(name='createTime', description='创建时间'),
      createUserId?: long(name='createUserId', description='人员id'),
      createUserPhone?: string(name='createUserPhone', description='操作人手机号'),
      description?: string(name='description', description='描述'),
    }
  ](name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListProblemSubtotalsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProblemSubtotalsResponseBody(name='body'),
}

async function listProblemSubtotals(request: ListProblemSubtotalsRequest): ListProblemSubtotalsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProblemSubtotals', 'POST', '/problem/list/subtotal', 'json', false, 'json', request);
}

model ListProblemTimeLinesRequest {
  clientToken?: string(name='clientToken', description='clientToken', position='Body'),
  problemId?: long(name='problemId', description='故障ID', position='Body'),
}

model ListProblemTimeLinesResponseBody = {
  data?: [ 
    {
      content?: string(name='content', description='内容'),
      createTime?: string(name='createTime', description='创建时间'),
      isKey?: boolean(name='isKey', description='是否是关键字 true是 false不是 默认 false'),
      keyNode?: string(name='keyNode', description='关键节点 码表:PROBLEM_KEY_NODE (逗号分隔)'),
      problemTimelineId?: long(name='problemTimelineId', description='时间线id'),
      time?: string(name='time', description='展示时间'),
      updateTime?: string(name='updateTime', description='修改时间'),
      usersInContent?: [ 
        {
          userId?: long(name='userId', description='用户id'),
          username?: string(name='username', description='用户名'),
        }
      ](name='usersInContent', description='内容中的用户信息'),
    }
  ](name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListProblemTimeLinesResponse = {
  headers: map[string]string(name='headers'),
  body: ListProblemTimeLinesResponseBody(name='body'),
}

async function listProblemTimeLines(request: ListProblemTimeLinesRequest): ListProblemTimeLinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProblemTimeLines', 'POST', '/problem/detail/timeLines', 'json', false, 'json', request);
}

model ListProblemsRequest {
  affectServiceId?: long(name='affectServiceId', description='影响服务ID', position='Body'),
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  discoveryEndTime?: string(name='discoveryEndTime', description='发现结束时间', position='Body'),
  discoveryStartTime?: string(name='discoveryStartTime', description='发现开始时间', position='Body'),
  mainHandlerId?: long(name='mainHandlerId', description='主要处理人', position='Body'),
  pageNumber?: long(name='pageNumber', description='当前页', position='Body'),
  pageSize?: long(name='pageSize', description='页大小', position='Body'),
  problemLevel?: string(name='problemLevel', description='故障等级 1=P1 2=P2 3=P3 4=P4', position='Body'),
  problemStatus?: string(name='problemStatus', description='故障状态  HANDLING   处理中 RECOVERED 已恢复  REPLAYING   复盘中  REPLAYED     已复盘 CANCEL        已取消', position='Body'),
  queryType?: string(name='queryType', description='RESPONSIBLE 我负责的       PARTICIPATED 我参与的  ALL 全部', position='Body'),
  repeaterId?: long(name='repeaterId', description='复盘负责人', position='Body'),
  restoreEndTime?: string(name='restoreEndTime', description='恢复结束时间', position='Body'),
  restoreStartTime?: string(name='restoreStartTime', description='恢复开始时间', position='Body'),
  serviceGroupId?: long(name='serviceGroupId', description='应急协同组', position='Body'),
}

model ListProblemsResponseBody = {
  data?: [ 
    {
      affectServices?: [ 
        {
          serviceDescription?: string(name='serviceDescription', description='服务描述'),
          serviceId?: long(name='serviceId', description='影响服务ID'),
          serviceName?: string(name='serviceName', description='服务名字'),
          updateTime?: string(name='updateTime', description='修改时间'),
        }
      ](name='affectServices'),
      cancelTime?: string(name='cancelTime', description='取消时间'),
      createTime?: string(name='createTime', description='创建时间'),
      discoverTime?: string(name='discoverTime', description='发现时间'),
      finishTime?: string(name='finishTime', description='完结时间'),
      incidentId?: long(name='incidentId', description='事件ID'),
      isManual?: boolean(name='isManual', description='是否手动'),
      isUpgrade?: boolean(name='isUpgrade', description='是否升级'),
      mainHandlerId?: long(name='mainHandlerId', description='主要处理人ID'),
      mainHandlerName?: string(name='mainHandlerName', description='主要处理人名称'),
      problemId?: long(name='problemId', description='故障id'),
      problemLevel?: string(name='problemLevel', description='故障等级 1=P1 2=P2 3=P3 4=P4'),
      problemName?: string(name='problemName', description='故障名称'),
      problemNumber?: string(name='problemNumber', description='故障编号'),
      problemStatus?: string(name='problemStatus', description='故障状态  HANDLING    处理中 RECOVERED  已恢复  REPLAYING   复盘中  REPLAYED     已复盘 CANCEL        已取消'),
      recoveryTime?: string(name='recoveryTime', description='恢复时间'),
      relatedServiceId?: string(name='relatedServiceId', description='关联服务ID'),
      replayTime?: string(name='replayTime', description='复盘时间'),
      serviceName?: string(name='serviceName', description='关联服务名称'),
      updateTime?: string(name='updateTime', description='修改时间'),
    }
  ](name='data'),
  pageNumber?: long(name='pageNumber', description='当前页'),
  pageSize?: long(name='pageSize', description='页大小'),
  requestId?: string(name='requestId', description='Id of the request'),
  totalCount?: long(name='totalCount', description='总条数'),
}

model ListProblemsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProblemsResponseBody(name='body'),
}

async function listProblems(request: ListProblemsRequest): ListProblemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProblems', 'POST', '/problem/listProblems', 'json', false, 'json', request);
}

model ListRouteRulesRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  pageNumber?: int32(name='pageNumber', description='第几页', position='Body'),
  pageSize?: int32(name='pageSize', description='页的大小', position='Body'),
  routeType?: long(name='routeType', description='路由类型：0触发事件 1仅触发报警 r', position='Body'),
  ruleName?: bytes(name='ruleName', description='规则名称', position='Body'),
  serviceName?: bytes(name='serviceName', description='服务名称', position='Body'),
}

model ListRouteRulesResponseBody = {
  data?: [ 
    {
      assignObjectId?: long(name='assignObjectId', description='事件分派对象ID（服务组ID 或用户ID）'),
      assignObjectType?: string(name='assignObjectType', description='事件分派对象类型 SERVICEGROUP 服务组  USER 单个用户'),
      createTime?: string(name='createTime', description='创建时间'),
      effection?: string(name='effection', description='影响程度 LOW-一般 HIGH-严重'),
      enableStatus?: string(name='enableStatus', description='是否启用  DISABLE禁用. ENABLE 启用'),
      incidentLevel?: string(name='incidentLevel', description='事件级别 P1 P2 P3 P4'),
      matchCount?: long(name='matchCount', description='命中次数'),
      monitorSourceNames?: string(name='monitorSourceNames', description='监控源名称'),
      relatedServiceId?: long(name='relatedServiceId', description='关联服务ID'),
      relatedServiceName?: string(name='relatedServiceName', description='服务名称'),
      routeRuleId?: long(name='routeRuleId', description='规则ID'),
      routeType?: string(name='routeType', description='路由类型：INCIDENT 触发事件 ALERT 仅触发报警'),
      ruleName?: string(name='ruleName', description='规则名称'),
      tenantRamId?: long(name='tenantRamId', description='租户ID'),
      timeWindow?: long(name='timeWindow', description='时间窗口'),
      timeWindowUnit?: long(name='timeWindowUnit', description='时间窗口单位 MINUTE 分钟  SECOND 秒'),
      updateTime?: string(name='updateTime', description='修改时间'),
    }
  ](name='data', description='规则列表'),
  pageNumber?: long(name='pageNumber', description='第几页'),
  pageSize?: long(name='pageSize', description='分页大小'),
  requestId?: string(name='requestId', description='请求ID'),
  totalCount?: long(name='totalCount', description='总条数'),
}

model ListRouteRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRouteRulesResponseBody(name='body'),
}

async function listRouteRules(request: ListRouteRulesRequest): ListRouteRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRouteRules', 'POST', '/routeRule/list', 'json', false, 'json', request);
}

model ListServiceGroupMonitorSourceTemplatesRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  requestId?: string(name='requestId', description='请求ID', position='Body'),
  serviceGroupId?: long(name='serviceGroupId', description='服务组ID', position='Body'),
}

model ListServiceGroupMonitorSourceTemplatesResponseBody = {
  data?: [ 
    {
      fields?: [ string ](name='fields', description='字段'),
      monitorSourceId?: long(name='monitorSourceId', description='监控源ID'),
      monitorSourceName?: string(name='monitorSourceName', description='监控报警源名字'),
      templateContent?: string(name='templateContent', description='模板内容'),
      templateId?: long(name='templateId', description='消息模版ID'),
    }
  ](name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListServiceGroupMonitorSourceTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceGroupMonitorSourceTemplatesResponseBody(name='body'),
}

async function listServiceGroupMonitorSourceTemplates(request: ListServiceGroupMonitorSourceTemplatesRequest): ListServiceGroupMonitorSourceTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServiceGroupMonitorSourceTemplates', 'POST', '/services/group/listServiceGroupMonitorSourceTemplates', 'json', false, 'json', request);
}

model ListServiceGroupsRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  isScheduled?: boolean(name='isScheduled', description='是否已经排班', position='Body'),
  orderByScheduleStatus?: boolean(name='orderByScheduleStatus', description='是否根据排班状态排序', position='Body'),
  pageNumber?: long(name='pageNumber', description='当前页', position='Body'),
  pageSize?: long(name='pageSize', description='页大小', position='Body'),
  queryName?: string(name='queryName', description='搜索名称', position='Body'),
  queryType?: string(name='queryType', description='搜索类型。USER用户 SERVICEGROUP服务组', position='Body'),
  userId?: long(name='userId', description='用户ID', position='Body'),
}

model ListServiceGroupsResponseBody = {
  data?: [ 
    {
      enableWebhook?: string(name='enableWebhook', description='ENABLE 启用 DISABLE 禁用'),
      isScheduled?: boolean(name='isScheduled', description='是否已经排班'),
      serviceGroupDescription?: string(name='serviceGroupDescription', description='服务组描述'),
      serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
      serviceGroupName?: string(name='serviceGroupName', description='服务组名字'),
      updateTime?: string(name='updateTime', description='修改时间'),
      users?: [ 
        {
          email?: string(name='email', description='邮箱'),
          phone?: string(name='phone', description='手机号'),
          serviceGroupId?: long(name='serviceGroupId', description='服务组ID'),
          userId?: long(name='userId', description='用户ID'),
          userName?: string(name='userName', description='用户名字'),
        }
      ](name='users', description='服务组用户列表'),
      webhookLink?: string(name='webhookLink', description='webhook 跳转地址'),
      webhookType?: string(name='webhookType', description='WEIXIN_GROUP微信DING_GROUP钉钉FEISHU_GROUP飞书'),
    }
  ](name='data', description='服务组列表'),
  pageNumber?: long(name='pageNumber', description='当前页'),
  pageSize?: long(name='pageSize', description='分页大小'),
  requestId?: string(name='requestId', description='Id of the request'),
  totalCount?: long(name='totalCount', description='总条数'),
}

model ListServiceGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceGroupsResponseBody(name='body'),
}

async function listServiceGroups(request: ListServiceGroupsRequest): ListServiceGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServiceGroups', 'POST', '/services/group/list', 'json', false, 'json', request);
}

model ListServicesRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  pageNumber: long(name='pageNumber', description='当前页', position='Body'),
  pageSize: long(name='pageSize', description='页大小', position='Body'),
  serviceName?: string(name='serviceName', description='服务名称', position='Body'),
}

model ListServicesResponseBody = {
  data?: [ 
    {
      serviceDescription?: string(name='serviceDescription', description='服务描述'),
      serviceId?: long(name='serviceId', description='服务ID'),
      serviceName?: string(name='serviceName', description='服务名字'),
      updateTime?: string(name='updateTime', description='修改时间'),
    }
  ](name='data'),
  pageNumber?: long(name='pageNumber', description='当前页'),
  pageSize?: long(name='pageSize', description='页大小'),
  requestId?: string(name='requestId', description='Id of the request'),
  totalCount?: long(name='totalCount', description='总条数'),
}

model ListServicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListServicesResponseBody(name='body'),
}

async function listServices(request: ListServicesRequest): ListServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServices', 'POST', '/services/list', 'json', false, 'json', request);
}

model ListSourceEventsRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  endTime?: string(name='endTime', description='结束时间', position='Body'),
  instanceId: long(name='instanceId', description='报警或者事件ID', position='Body'),
  instanceType: string(name='instanceType', description='INCIDENT 事件、ALERT 报警、PROBLEM 故障', position='Body'),
  pageNumber?: long(name='pageNumber', description='当前页', position='Body'),
  pageSize?: long(name='pageSize', description='页大小', position='Body'),
  startRowKey?: string(name='startRowKey', description='startRowKey 用来查询下一页的数据', position='Body'),
  startTime?: string(name='startTime', description='开始时间', position='Body'),
  stopRowKey?: string(name='stopRowKey', description='stopRowKey 用来查询上一页的数据', position='Body'),
}

model ListSourceEventsResponseBody = {
  data?: [ 
    {
      eventJson?: string(name='eventJson', description='告警内容json'),
      eventTime?: string(name='eventTime', description='告警上报时间'),
      instanceId?: long(name='instanceId', description='关联对象ID'),
      instanceType?: string(name='instanceType', description='INCIDENT 事件、ALERT 报警、PROBLEM 故障'),
      monitorSourceId?: long(name='monitorSourceId', description='监控告警源ID'),
      monitorSourceName?: string(name='monitorSourceName', description='监控告警源名称'),
      routeRuleId?: long(name='routeRuleId', description='规则ID'),
      tenantRamId?: long(name='tenantRamId', description='租户ID'),
    }
  ](name='data'),
  firstRowKey?: string(name='firstRowKey', description='firstRowKey'),
  lastRowKey?: string(name='lastRowKey', description='lastRowKey'),
  pageNumber?: long(name='pageNumber', description='当前页'),
  pageSize?: long(name='pageSize', description='页大小'),
  requestId?: string(name='requestId', description='请求ID'),
  totalCount?: long(name='totalCount', description='总条数'),
}

model ListSourceEventsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSourceEventsResponseBody(name='body'),
}

async function listSourceEvents(request: ListSourceEventsRequest): ListSourceEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSourceEvents', 'POST', '/events/listOriginalEvent', 'json', false, 'json', request);
}

model ListSourceEventsForMonitorSourceRequest {
  monitorSourceId?: long(name='monitorSourceId', description='监控源ID', position='Body'),
}

model ListSourceEventsForMonitorSourceResponseBody = {
  data?: [ 
    {
      eventJson?: string(name='eventJson', description='告警内容'),
      eventTime?: string(name='eventTime', description='告警上报时间'),
      monitorSourceId?: boolean(name='monitorSourceId', description='监控源ID'),
      monitorSourceName?: string(name='monitorSourceName', description='监控源名称'),
    }
  ](name='data', description='告警列表'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListSourceEventsForMonitorSourceResponse = {
  headers: map[string]string(name='headers'),
  body: ListSourceEventsForMonitorSourceResponseBody(name='body'),
}

async function listSourceEventsForMonitorSource(request: ListSourceEventsForMonitorSourceRequest): ListSourceEventsForMonitorSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSourceEventsForMonitorSource', 'POST', '/events/queryLastestEvents', 'json', false, 'json', request);
}

model ListSubscriptionServiceGroupsRequest {
  clientToken?: string(name='clientToken', description='幂等校验token', position='Body'),
  serviceIds?: [ long ](name='serviceIds', description='服务列表', position='Body'),
}

model ListSubscriptionServiceGroupsResponseBody = {
  data?: [ 
    {
      serviceGroupDescription?: string(name='serviceGroupDescription', description='服务组描述'),
      serviceId?: long(name='serviceId', description='主键'),
      serviceName?: string(name='serviceName', description='服务组名称'),
    }
  ](name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListSubscriptionServiceGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSubscriptionServiceGroupsResponseBody(name='body'),
}

async function listSubscriptionServiceGroups(request: ListSubscriptionServiceGroupsRequest): ListSubscriptionServiceGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSubscriptionServiceGroups', 'POST', '/problem/serviceGroup/list', 'json', false, 'json', request);
}

model ListSubscriptionsRequest {
  clientToken?: string(name='clientToken', description='幂等参数', position='Body'),
  notifyObject?: string(name='notifyObject', description='通知对象名', position='Body'),
  notifyObjectType?: string(name='notifyObjectType', description='通知对象类型notifyWhoType:0服务组 1个人', position='Body'),
  pageNumber?: int32(name='pageNumber', description='第几页', position='Body'),
  pageSize?: int32(name='pageSize', description='一页几条', position='Body'),
  scope?: string(name='scope', description='订阅范围类型 0全部1服务2流转规则', position='Body'),
  scopeObject?: string(name='scopeObject', description='订阅范围对象名称', position='Body'),
  subscriptionTitle?: string(name='subscriptionTitle', description='通知订阅名', position='Body'),
}

model ListSubscriptionsResponseBody = {
  data?: [ 
    {
      endTime?: string(name='endTime', description='时效结束时间'),
      expiredType?: string(name='expiredType', description='有效期类型 0 长期 1短期'),
      notifyObjectList?: [ 
        {
          id?: long(name='id', description='id主键'),
          name?: string(name='name', description='通知对象名'),
          notifyObjectId?: long(name='notifyObjectId', description='关联主键id'),
          notifyObjectType?: long(name='notifyObjectType', description='通知对象类型0服务组 1个人'),
        }
      ](name='notifyObjectList', description='通知对象列表'),
      notifyObjectType?: long(name='notifyObjectType', description='0服务组 1个人'),
      scope?: long(name='scope', description='0 全部 1服务 2 流转规则'),
      scopeObjectList?: [ 
        {
          id?: long(name='id', description='id主键'),
          scope?: long(name='scope', description='订阅范围类型 ALL全部 SERVICE服务 ROUTETULE流转规则'),
          scopeObject?: string(name='scopeObject', description='订阅范围对象名称'),
          scopeObjectId?: long(name='scopeObjectId', description='订阅范围对象关联表主键id'),
        }
      ](name='scopeObjectList', description='订阅范围列表'),
      startTime?: string(name='startTime', description='时效开始时间'),
      status?: string(name='status', description='ENABLE 启用 DISABLE禁用'),
      subscriptionId?: long(name='subscriptionId', description='订阅id'),
      subscriptionTitle?: string(name='subscriptionTitle', description='通知订阅名称'),
    }
  ](name='data'),
  pageNumber?: long(name='pageNumber', description='分页参数'),
  pageSize?: long(name='pageSize', description='分页参数'),
  requestId?: string(name='requestId', description='id of the request'),
  totalCount?: long(name='totalCount', description='分页参数'),
}

model ListSubscriptionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSubscriptionsResponseBody(name='body'),
}

async function listSubscriptions(request: ListSubscriptionsRequest): ListSubscriptionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSubscriptions', 'POST', '/notify/subscription/list', 'json', false, 'json', request);
}

model ListTrendForSourceEventRequest {
  endTime?: string(name='endTime', description='结束时间', position='Body'),
  instanceId?: long(name='instanceId', description='报警ID', position='Body'),
  instanceType?: string(name='instanceType', description='类型', position='Body'),
  requestId?: string(name='requestId', description='请求ID', position='Body'),
  startTime?: string(name='startTime', description='开始时间', position='Body'),
  timeUnit?: long(name='timeUnit', description='时间单位毫秒', position='Body'),
}

model ListTrendForSourceEventResponseBody = {
  data?: [ 
    {
      convergenceRate?: string(name='convergenceRate', description='收敛率'),
      maxSustainTime?: long(name='maxSustainTime', description='最大持续时长'),
      skipDay?: boolean(name='skipDay', description='是否跨天'),
      sourceEventsStatMap?: map[string]any(name='sourceEventsStatMap', description='按监控源分组统计数据'),
      unit?: string(name='unit', description='时间单位'),
    }
  ](name='data', description='统计列表'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListTrendForSourceEventResponse = {
  headers: map[string]string(name='headers'),
  body: ListTrendForSourceEventResponseBody(name='body'),
}

async function listTrendForSourceEvent(request: ListTrendForSourceEventRequest): ListTrendForSourceEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTrendForSourceEvent', 'POST', '/events/querySourceEventTrend', 'json', false, 'json', request);
}

model ListUserSerivceGroupsRequest {
  clientToken?: string(name='clientToken', description='clientToken', position='Body'),
  userId: long(name='userId', description='用户ID', position='Body'),
}

model ListUserSerivceGroupsResponseBody = {
  data?: {
    email?: string(name='email', description='邮箱'),
    phone?: string(name='phone', description='手机号'),
    ramId?: long(name='ramId', description='RAM子账号ID'),
    serviceGroups?: [ 
      {
        serviceGroupDescription?: string(name='serviceGroupDescription', description='服务组描述'),
        serviceGroupId?: long(name='serviceGroupId', description='服务组id'),
        serviceGroupName?: string(name='serviceGroupName', description='服务组名称'),
      }
    ](name='serviceGroups', description='人员所属服务组'),
    userId?: long(name='userId', description='用户ID'),
    username?: string(name='username', description='用户昵称'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model ListUserSerivceGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserSerivceGroupsResponseBody(name='body'),
}

async function listUserSerivceGroups(request: ListUserSerivceGroupsRequest): ListUserSerivceGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUserSerivceGroups', 'POST', '/user/preview/detail', 'json', false, 'json', request);
}

model ListUsersRequest {
  clientToken?: string(name='clientToken', description='clientToken', position='Body'),
  pageNumber?: long(name='pageNumber', description='分页参数', position='Body'),
  pageSize?: long(name='pageSize', description='分页参数', position='Body'),
  phone?: string(name='phone', description='人员手机号', position='Body'),
  ramId?: string(name='ramId', description='ramID', position='Body'),
  scene?: long(name='scene', description='USER_LIST列表 ALL_USERS下拉', position='Body'),
  synergyChannel?: string(name='synergyChannel', description='移动应用协同渠道', position='Body'),
  username?: string(name='username', description='人员名称', position='Body'),
}

model ListUsersResponseBody = {
  data?: [ 
    {
      accountType?: long(name='accountType', description='账户类型'),
      appAccount?: string(name='appAccount', description='移动应用账户'),
      email?: string(name='email', description='邮箱'),
      isEditableUser?: long(name='isEditableUser', description='是否可编辑'),
      isRelated?: string(name='isRelated', description='是否关联'),
      phone?: string(name='phone', description='手机'),
      ramId?: long(name='ramId', description='子账号ramId'),
      synergyChannel?: string(name='synergyChannel', description='移动应用协同渠道'),
      userId?: long(name='userId', description='用户id'),
      username?: string(name='username', description='用户名'),
    }
  ](name='data', description='data'),
  pageNumber?: long(name='pageNumber', description='分页'),
  pageSize?: long(name='pageSize', description='分页'),
  requestId?: string(name='requestId', description='id of the request'),
  totalCount?: long(name='totalCount', description='总条数'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUsers', 'POST', '/user/list', 'json', false, 'json', request);
}

model RecoverProblemRequest {
  problemId?: long(name='problemId', description='故障ID', position='Body'),
  problemNotifyType?: string(name='problemNotifyType', description='通告类型 PROBLEM_NOTIFY：故障通告 PROBLEM_UPDATE：故障更新 PROBLEM_UPGRADE：故障升级 PROBLEM_DEGRADE：故障降级 PROBLEM_RECOVER：故障恢复 PROBLEM_REISSUE： 故障补发 PROBLEM_CANCEL：故障取消', position='Body'),
  recoveryTime?: string(name='recoveryTime', description='恢复时间', position='Body'),
}

model RecoverProblemResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model RecoverProblemResponse = {
  headers: map[string]string(name='headers'),
  body: RecoverProblemResponseBody(name='body'),
}

async function recoverProblem(request: RecoverProblemRequest): RecoverProblemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RecoverProblem', 'POST', '/problem/recovery', 'json', false, 'json', request);
}

model RefreshIntegrationConfigKeyRequest {
  clientToken?: string(name='clientToken', description='幂等id', position='Body'),
  integrationConfigId?: long(name='integrationConfigId', position='Body'),
}

model RefreshIntegrationConfigKeyResponseBody = {
  data?: {
    key?: string(name='key', description='集成秘钥'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model RefreshIntegrationConfigKeyResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshIntegrationConfigKeyResponseBody(name='body'),
}

async function refreshIntegrationConfigKey(request: RefreshIntegrationConfigKeyRequest): RefreshIntegrationConfigKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RefreshIntegrationConfigKey', 'POST', '/integrationConfig/refreshKey', 'json', false, 'json', request);
}

model RemoveProblemServiceGroupRequest {
  problemId?: long(name='problemId', description='故障ID', position='Body'),
  serviceGroupIds?: [ long ](name='serviceGroupIds', description='应急协同组', position='Body'),
}

model RemoveProblemServiceGroupResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model RemoveProblemServiceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveProblemServiceGroupResponseBody(name='body'),
}

async function removeProblemServiceGroup(request: RemoveProblemServiceGroupRequest): RemoveProblemServiceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveProblemServiceGroup', 'POST', '/problem/removeServiceGroup', 'json', false, 'json', request);
}

model ReplayProblemRequest {
  clientToken?: string(name='clientToken', description='幂等校验token', position='Body'),
  problemId?: long(name='problemId', description='故障ID', position='Body'),
  replayDutyUserId?: long(name='replayDutyUserId', description='复盘负责人ID', position='Body'),
}

model ReplayProblemResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model ReplayProblemResponse = {
  headers: map[string]string(name='headers'),
  body: ReplayProblemResponseBody(name='body'),
}

async function replayProblem(request: ReplayProblemRequest): ReplayProblemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ReplayProblem', 'POST', '/problem/replay', 'json', false, 'json', request);
}

model RespondIncidentRequest {
  clientToken?: string(name='clientToken', description='幂等校验Id', position='Body'),
  incidentIds?: [ long ](name='incidentIds', description='影响程度', position='Body'),
}

model RespondIncidentResponseBody = {
  requestId?: string(name='requestId', description='requestId'),
}

model RespondIncidentResponse = {
  headers: map[string]string(name='headers'),
  body: RespondIncidentResponseBody(name='body'),
}

async function respondIncident(request: RespondIncidentRequest): RespondIncidentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RespondIncident', 'POST', '/incident/response', 'json', false, 'json', request);
}

model RevokeProblemRecoveryRequest {
  clientToken?: string(name='clientToken', description='幂等校验Id', position='Body'),
  problemId?: long(name='problemId', description='故障ID', position='Body'),
  problemNotifyType?: string(name='problemNotifyType', description='通告类型 PROBLEM_NOTIFY：故障通告 PROBLEM_UPDATE：故障更新 PROBLEM_UPGRADE：故障升级 PROBLEM_DEGRADE：故障降级 PROBLEM_RECOVER：故障恢复 PROBLEM_REISSUE： 故障补发 PROBLEM_CANCEL：故障取消', position='Body'),
}

model RevokeProblemRecoveryResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model RevokeProblemRecoveryResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeProblemRecoveryResponseBody(name='body'),
}

async function revokeProblemRecovery(request: RevokeProblemRecoveryRequest): RevokeProblemRecoveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RevokeProblemRecovery', 'POST', '/problem/revoke', 'json', false, 'json', request);
}

model UpdateEscalationPlanRequest {
  clientToken?: string(name='clientToken', description='clientToken', position='Body'),
  escalationPlanDescription?: string(name='escalationPlanDescription', description='升级计划描述', position='Body'),
  escalationPlanId: long(name='escalationPlanId', description='升级计划id', position='Body'),
  escalationPlanName?: string(name='escalationPlanName', description='升级计划名称', position='Body'),
  escalationPlanRules?: [ 
    {
      escalationPlanConditions?: [ 
        {
          effection?: string(name='effection', description='LOW HIGH'),
          level?: string(name='level', description='P1 P2 P3 P4'),
        }
      ](name='escalationPlanConditions', description='升级计划条件列表'),
      escalationPlanStrategies?: [ 
        {
          enableWebhook?: boolean(name='enableWebhook', description='是否支持群通知'),
          noticeChannels?: [ string ](name='noticeChannels', description='通知渠道'),
          noticeObjects?: [ long ](name='noticeObjects', description='通知对象id'),
          noticeTime?: long(name='noticeTime', description='通知时间'),
          serviceGroupIds?: [ long ](name='serviceGroupIds', description='服务组id'),
        }
      ](name='escalationPlanStrategies', description='升级策略列表'),
      escalationPlanType?: string(name='escalationPlanType', description='UN_ACKNOWLEDGE 未响应 UN_FINISH 未完结'),
      id?: long(name='id', description='主键'),
    }
  ](name='escalationPlanRules', description='升级计划规则', position='Body'),
  escalationPlanScopeObjects?: [ 
    {
      id: long(name='id', description='主键'),
      scope?: string(name='scope', description='范围对象类型'),
      scopeObjectId: long(name='scopeObjectId', description='范围对象id'),
    }
  ](name='escalationPlanScopeObjects', description='关联范围列表（服务）', position='Body'),
}

model UpdateEscalationPlanResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdateEscalationPlanResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEscalationPlanResponseBody(name='body'),
}

async function updateEscalationPlan(request: UpdateEscalationPlanRequest): UpdateEscalationPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateEscalationPlan', 'POST', '/escalationPlan/update', 'json', false, 'json', request);
}

model UpdateIncidentRequest {
  clientToken?: string(name='clientToken', description='幂等校验Id', position='Body'),
  effect?: string(name='effect', description='影响程度', position='Body'),
  incidentId: long(name='incidentId', description='事件Id', position='Body'),
  incidentLevel?: string(name='incidentLevel', description='级别', position='Body'),
  incidentTitle?: string(name='incidentTitle', description='事件标题', position='Body'),
}

model UpdateIncidentResponseBody = {
  data?: {
    incidentId?: long(name='incidentId', description='事件id'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdateIncidentResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateIncidentResponseBody(name='body'),
}

async function updateIncident(request: UpdateIncidentRequest): UpdateIncidentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateIncident', 'POST', '/incident/update', 'json', false, 'json', request);
}

model UpdateIntegrationConfigRequest {
  accessKey?: string(name='accessKey', description='集成秘钥', position='Body'),
  clientToken?: string(name='clientToken', description='幂等id', position='Body'),
  integrationConfigId?: long(name='integrationConfigId', position='Body'),
}

model UpdateIntegrationConfigResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdateIntegrationConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateIntegrationConfigResponseBody(name='body'),
}

async function updateIntegrationConfig(request: UpdateIntegrationConfigRequest): UpdateIntegrationConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateIntegrationConfig', 'POST', '/integrationConfig/update', 'json', false, 'json', request);
}

model UpdateProblemRequest {
  feedback?: string(name='feedback', description='舆情反馈', position='Body'),
  level?: string(name='level', description='故障等级', position='Body'),
  mainHandlerId?: long(name='mainHandlerId', description='主要处理人', position='Body'),
  preliminaryReason?: string(name='preliminaryReason', description='初步原因', position='Body'),
  problemId?: long(name='problemId', description='故障ID', position='Body'),
  problemName?: string(name='problemName', description='故障名', position='Body'),
  progressSummary?: string(name='progressSummary', description='进展摘要', position='Body'),
  progressSummaryRichTextId?: long(name='progressSummaryRichTextId', description='进展摘要富文本id', position='Body'),
  relatedServiceId?: long(name='relatedServiceId', description='所属服务', position='Body'),
  serviceGroupIds?: [ long ](name='serviceGroupIds', description='应急协同组', position='Body'),
}

model UpdateProblemResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdateProblemResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProblemResponseBody(name='body'),
}

async function updateProblem(request: UpdateProblemRequest): UpdateProblemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProblem', 'POST', '/problem/update', 'json', false, 'json', request);
}

model UpdateProblemEffectionServiceRequest {
  clientToken?: string(name='clientToken', description='clientToken', position='Body'),
  description?: string(name='description', description='影响描述', position='Body'),
  effectionServiceId?: long(name='effectionServiceId', description='影响服务id', position='Body'),
  level?: string(name='level', description='影响等级', position='Body'),
  picUrl?: [ string ](name='picUrl', description='图片地址', position='Body'),
  problemId?: long(name='problemId', description='故障id', position='Body'),
  serviceId?: long(name='serviceId', description='关联服务id', position='Body'),
  status?: string(name='status', description='影响状态 UN_RECOVERED 未恢复 RECOVERED已恢复', position='Body'),
}

model UpdateProblemEffectionServiceResponseBody = {
  requestId?: string(name='requestId', description='requestId'),
}

model UpdateProblemEffectionServiceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProblemEffectionServiceResponseBody(name='body'),
}

async function updateProblemEffectionService(request: UpdateProblemEffectionServiceRequest): UpdateProblemEffectionServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProblemEffectionService', 'POST', '/problem/process/effectionService/update', 'json', false, 'json', request);
}

model UpdateProblemImprovementRequest {
  clientToken?: string(name='clientToken', description='幂等校验token', position='Body'),
  discoverSource?: long(name='discoverSource', description='发现来源 码表:PROBLEM_DISCOVER_SOURCE', position='Body'),
  dutyDepartmentId?: long(name='dutyDepartmentId', description='故障责任部门ID', position='Body'),
  dutyDepartmentName?: string(name='dutyDepartmentName', description='故障责任部门', position='Body'),
  dutyUserId?: long(name='dutyUserId', description='故障责任人id', position='Body'),
  injectionMode?: string(name='injectionMode', description='注入方式 码表:PROBLEM_INJECTION_MODE', position='Body'),
  monitorSourceName?: string(name='monitorSourceName', description='监控源', position='Body'),
  problemId?: long(name='problemId', description='故障ID', position='Body'),
  problemReason?: string(name='problemReason', description='故障原因', position='Body'),
  recentActivity?: string(name='recentActivity', description='最近活动 码表:PROBLEM_RECENT_ACTIVITY', position='Body'),
  recoveryMode?: string(name='recoveryMode', description='恢复方式  码表:PROBLEM_RECOVERY_MODE', position='Body'),
  relationChanges?: string(name='relationChanges', description='关联变更', position='Body'),
  remark?: string(name='remark', description='备注', position='Body'),
  replayDutyUserId?: long(name='replayDutyUserId', description='复盘负责人id', position='Body'),
  userReport?: long(name='userReport', description='用户上报 码表:PROBLEM_USER_REPORT', position='Body'),
}

model UpdateProblemImprovementResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdateProblemImprovementResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProblemImprovementResponseBody(name='body'),
}

async function updateProblemImprovement(request: UpdateProblemImprovementRequest): UpdateProblemImprovementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProblemImprovement', 'POST', '/problem/improvement/update', 'json', false, 'json', request);
}

model UpdateProblemMeasureRequest {
  checkStandard?: string(name='checkStandard', description='验收标准', position='Body'),
  checkUserId?: long(name='checkUserId', description='验收人id', position='Body'),
  clientToken?: string(name='clientToken', description='幂等校验token', position='Body'),
  content?: string(name='content', description='措施内容', position='Body'),
  directorId?: long(name='directorId', description='负责人id', position='Body'),
  measureId?: long(name='measureId', description='措施Id', position='Body'),
  planFinishTime?: string(name='planFinishTime', description='计划完成时间', position='Body'),
  problemId?: long(name='problemId', description='故障Id', position='Body'),
  stalkerId?: long(name='stalkerId', description='跟踪人id', position='Body'),
  status?: string(name='status', description='状态 IMPROVED 改进 2 未改进UNIMPROVED', position='Body'),
  type?: int32(name='type', description='措施类型 码表 PROBLEM_REPLAY_IMPROVEMENT', position='Body'),
}

model UpdateProblemMeasureResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdateProblemMeasureResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProblemMeasureResponseBody(name='body'),
}

async function updateProblemMeasure(request: UpdateProblemMeasureRequest): UpdateProblemMeasureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProblemMeasure', 'POST', '/problem/improvement/measure/update', 'json', false, 'json', request);
}

model UpdateProblemNoticeRequest {
  clientToken?: string(name='clientToken', description='幂等校验Id', position='Body'),
  problemId?: long(name='problemId', description='故障Id', position='Body'),
  problemNotifyType?: string(name='problemNotifyType', description='通告类型 PROBLEM_NOTIFY：故障通告 PROBLEM_UPDATE：故障更新 PROBLEM_UPGRADE：故障升级 PROBLEM_DEGRADE：故障降级 PROBLEM_RECOVER：故障恢复 PROBLEM_REISSUE： 故障补发 PROBLEM_CANCEL：故障取消', position='Body'),
}

model UpdateProblemNoticeResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdateProblemNoticeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProblemNoticeResponseBody(name='body'),
}

async function updateProblemNotice(request: UpdateProblemNoticeRequest): UpdateProblemNoticeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProblemNotice', 'POST', '/problem/notify', 'json', false, 'json', request);
}

model UpdateProblemTimelineRequest {
  clientToken?: string(name='clientToken', description='clientToken', position='Body'),
  content?: string(name='content', description='节点内容', position='Body'),
  keyNode?: string(name='keyNode', description='关键节点 码表:PROBLEM_KEY_NODE (逗号分隔)', position='Body'),
  problemId?: long(name='problemId', description='故障id', position='Body'),
  problemTimelineId?: long(name='problemTimelineId', description='时间节点id', position='Body'),
  time?: string(name='time', description='发生时间', position='Body'),
}

model UpdateProblemTimelineResponseBody = {
  requestId?: string(name='requestId'),
}

model UpdateProblemTimelineResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProblemTimelineResponseBody(name='body'),
}

async function updateProblemTimeline(request: UpdateProblemTimelineRequest): UpdateProblemTimelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProblemTimeline', 'POST', '/problem/process/timeline/update', 'json', false, 'json', request);
}

model UpdateRichTextRequest {
  instanceId?: long(name='instanceId', description='资源id', position='Body'),
  instanceType?: string(name='instanceType', description='资源类型', position='Body'),
  richText?: string(name='richText', description='文本内容', position='Body'),
  richTextId?: long(name='richTextId', description='富文本id', position='Body'),
}

model UpdateRichTextResponseBody = {
  data?: {
    id?: long(name='id', description='富文本id'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdateRichTextResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRichTextResponseBody(name='body'),
}

async function updateRichText(request: UpdateRichTextRequest): UpdateRichTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRichText', 'POST', '/rich/update', 'json', false, 'json', request);
}

model UpdateRouteRuleRequest {
  assignObjectId: long(name='assignObjectId', description='事件分派对象ID（服务组ID 或用户ID）', position='Body'),
  assignObjectType: string(name='assignObjectType', description='事件分派对象类型 SERVICEGROUP服务组  USER 单个用户', position='Body'),
  childRuleRelation?: string(name='childRuleRelation', description='AND', position='Body'),
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  effection: string(name='effection', description='影响程度 LOW-一般 HIGH-严重', position='Body'),
  incidentLevel: string(name='incidentLevel', description='事件级别 1-P1 2-P2 3-P3 4-P4', position='Body'),
  matchCount: long(name='matchCount', description='命中次数', position='Body'),
  notifyChannels: [ string ](name='notifyChannels', description='通知渠道    SMS 短信  EMAIL  邮件  PHONE  电话  WEIXIN_GROUP 企微群 DING_GROUP 钉钉群', position='Body'),
  relatedServiceId: long(name='relatedServiceId', description='关联服务ID', position='Body'),
  routeChildRules: [ 
    {
      childConditionRelation?: long(name='childConditionRelation', description='子条件计算关系'),
      childRouteRuleId: long(name='childRouteRuleId', description='子规则ID 不填表示新增'),
      conditions: [ 
        {
          key: string(name='key', description='字段'),
          operationSymbol: string(name='operationSymbol', description='操作符'),
          value: string(name='value', description='字段取值'),
        }
      ](name='conditions', description='条件'),
      isValidChildRule: boolean(name='isValidChildRule', description='true  删除子规则  false编辑子规则'),
      monitorSourceId: long(name='monitorSourceId', description='监控源ID'),
    }
  ](name='routeChildRules', description='子规则', position='Body'),
  routeRuleId: long(name='routeRuleId', description='规则ID', position='Body'),
  routeType: string(name='routeType', description='路由类型：INCIDENT 触发事件 ALERT 仅触发报警', position='Body'),
  ruleName: string(name='ruleName', description='规则名称', position='Body'),
  timeWindow: int32(name='timeWindow', description='时间窗口', position='Body'),
  timeWindowUnit: string(name='timeWindowUnit', description='时间窗口单位 MINUTE 分钟  SECOND 秒', position='Body'),
}

model UpdateRouteRuleResponseBody = {
  data?: long(name='data'),
  requestId?: string(name='requestId', description='请求ID'),
}

model UpdateRouteRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRouteRuleResponseBody(name='body'),
}

async function updateRouteRule(request: UpdateRouteRuleRequest): UpdateRouteRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRouteRule', 'POST', '/routeRule/edit', 'json', false, 'json', request);
}

model UpdateServiceRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  serviceDescription?: string(name='serviceDescription', description='服务描述', position='Body'),
  serviceId?: long(name='serviceId', description='服务ID', position='Body'),
  serviceName?: string(name='serviceName', description='服务名字', position='Body'),
}

model UpdateServiceResponseBody = {
  data?: long(name='data'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdateServiceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceResponseBody(name='body'),
}

async function updateService(request: UpdateServiceRequest): UpdateServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateService', 'POST', '/services/update', 'json', false, 'json', request);
}

model UpdateServiceGroupRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  enableWebhook: string(name='enableWebhook', description='ENABLE 启用 DISABLE 禁用', position='Body'),
  monitorSourceTemplates?: [ 
    {
      monitorSourceId?: long(name='monitorSourceId', description='监控报警源Id'),
      monitorSourceName?: string(name='monitorSourceName', description='监控报警源'),
      templateContent?: string(name='templateContent', description='消息模版内容'),
      templateId?: long(name='templateId', description='消息模版ID'),
    }
  ](name='monitorSourceTemplates', description='监控源模版列表', position='Body'),
  serviceGroupDescription?: string(name='serviceGroupDescription', description='服务描述', position='Body'),
  serviceGroupId: long(name='serviceGroupId', description='服务组ID', position='Body'),
  serviceGroupName: string(name='serviceGroupName', description='服务组名字', position='Body'),
  userIds: [ long ](name='userIds', description='用户ID列表修改后的', position='Body'),
  webhookLink: string(name='webhookLink', description='webhook跳转地址', position='Body'),
  webhookType: string(name='webhookType', description='WEIXIN_GROUP微信DING_GROUP钉钉FEISHU_GROUP飞书', position='Body'),
}

model UpdateServiceGroupResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdateServiceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceGroupResponseBody(name='body'),
}

async function updateServiceGroup(request: UpdateServiceGroupRequest): UpdateServiceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceGroup', 'POST', '/services/group/modify', 'json', false, 'json', request);
}

model UpdateServiceGroupSchedulingRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  fastScheduling?: {
    dutyPlan?: string(name='dutyPlan', description='值班方案 dutyPlan FAST_CHOICE 快速选择   CUSTOM  自定义'),
    id?: long(name='id', description='快速排班ID'),
    schedulingUsers?: [ 
      {
        schedulingOrder?: int32(name='schedulingOrder', description='排班顺序'),
        schedulingUserId?: long(name='schedulingUserId', description='轮班用户ID'),
      }
    ](name='schedulingUsers', description='快速轮班用户'),
    singleDuration?: int32(name='singleDuration', description='每人排班时长'),
    singleDurationUnit?: string(name='singleDurationUnit', description='每人排班时长单位 HOUR 小时 DAY 天'),
  }(name='fastScheduling', description='快速排班', position='Body'),
  fineScheduling?: {
    id?: long(name='id', description='精细排班ID'),
    period?: int32(name='period', description='循环周期'),
    periodUnit?: string(name='periodUnit', description='循环周期单位 HOUR 小时 DAY 天'),
    schedulingFineShifts?: [ 
      {
        cycleOrder?: int32(name='cycleOrder', description='轮训次序'),
        schedulingEndTime?: string(name='schedulingEndTime', description='排班结束时间'),
        schedulingOrder?: long(name='schedulingOrder', description='排班顺序'),
        schedulingStartTime?: string(name='schedulingStartTime', description='排班开始时间'),
        schedulingUserId?: long(name='schedulingUserId', description='排班用户ID'),
        shiftName?: string(name='shiftName', description='班次名称'),
        skipOneDay?: boolean(name='skipOneDay', description='是否跨天'),
      }
    ](name='schedulingFineShifts', description='精细排班班次人员信息'),
    schedulingTemplateFineShifts?: [ 
      {
        schedulingEndTime?: string(name='schedulingEndTime', description='排班结束时间'),
        schedulingOrder?: int32(name='schedulingOrder', description='排班顺序'),
        schedulingStartTime?: string(name='schedulingStartTime', description='排班开始时间'),
        schedulingUserId?: long(name='schedulingUserId', description='排班用户ID'),
        shiftName?: string(name='shiftName', description='班次名称'),
        skipOneDay?: boolean(name='skipOneDay', description='是否跨天'),
      }
    ](name='schedulingTemplateFineShifts', description='精细排班模版'),
    shiftType?: string(name='shiftType', description='班次类型 MORNING_NIGHT 早晚班 MORNING_NOON_NIGHT 早中晚班 CUSTOM 自定义'),
  }(name='fineScheduling', description='精细排班', position='Body'),
  schedulingWay: string(name='schedulingWay', description='排班方式 FAST 快速排班 FINE 精细排班', position='Body'),
  serviceGroupId: long(name='serviceGroupId', description='服务组ID', position='Body'),
}

model UpdateServiceGroupSchedulingResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdateServiceGroupSchedulingResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceGroupSchedulingResponseBody(name='body'),
}

async function updateServiceGroupScheduling(request: UpdateServiceGroupSchedulingRequest): UpdateServiceGroupSchedulingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceGroupScheduling', 'POST', '/services/group/scheduling/update', 'json', false, 'json', request);
}

model UpdateServiceGroupSpecialDaySchedulingRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  schedulingDate: string(name='schedulingDate', description='排班日期', position='Body'),
  schedulingSpecialDays: [ 
    {
      schedulingEndTime: string(name='schedulingEndTime', description='排班结束时间'),
      schedulingOrder?: int32(name='schedulingOrder', description='班次顺序'),
      schedulingStartTime: string(name='schedulingStartTime', description='排班开始时间'),
      schedulingUserId: long(name='schedulingUserId', description='排班用户ID'),
    }
  ](name='schedulingSpecialDays', description='特殊排班信息', position='Body'),
  serviceGroupId: long(name='serviceGroupId', description='服务组ID', position='Body'),
}

model UpdateServiceGroupSpecialDaySchedulingResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdateServiceGroupSpecialDaySchedulingResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServiceGroupSpecialDaySchedulingResponseBody(name='body'),
}

async function updateServiceGroupSpecialDayScheduling(request: UpdateServiceGroupSpecialDaySchedulingRequest): UpdateServiceGroupSpecialDaySchedulingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceGroupSpecialDayScheduling', 'POST', '/services/group/scheduling/updateSpecialDayScheduling', 'json', false, 'json', request);
}

model UpdateSubscriptionRequest {
  endTime?: string(name='endTime', description='结束时间', position='Body'),
  expiredType: string(name='expiredType', description='订阅时效', position='Body'),
  notifyObjectList: [ 
    {
      id?: long(name='id', description='主键id'),
      notifyObjectId: long(name='notifyObjectId', description='通知对象id'),
    }
  ](name='notifyObjectList', description='通知对象列表', position='Body'),
  notifyObjectType: string(name='notifyObjectType', description='通知对象类型', position='Body'),
  notifyStrategyList: [ 
    {
      instanceType: long(name='instanceType', description='订阅实例类型，事件、报警、故障'),
      strategies: [ 
        {
          channels?: string(name='channels', description='故障等级'),
          conditions?: [ 
            {
              action?: string(name='action', description='事件动作'),
              effection?: string(name='effection', description='影响程度'),
              level?: string(name='level', description='等级'),
              problemNotifyType?: string(name='problemNotifyType', description='故障通知类型'),
            }
          ](name='conditions', description='影响程度'),
          id?: string(name='id', description='id'),
          periodChannel?: {
            nonWorkday?: string(name='nonWorkday', description='非工作时间'),
            workday?: string(name='workday', description='工作时间'),
          }(name='periodChannel', description='分时段通知渠道'),
        }
      ](name='strategies', description='通知策略'),
    }
  ](name='notifyStrategyList', description='通知策略列表', position='Body'),
  period?: string(name='period', description='时间段字符串', position='Body'),
  scope: string(name='scope', description='订阅范围类型', position='Body'),
  scopeObjectList: [ 
    {
      id?: long(name='id', description='主键id'),
      scopeObjectId: long(name='scopeObjectId', description='订阅范围对象id'),
    }
  ](name='scopeObjectList', description='订阅范围列表', position='Body'),
  startTime?: string(name='startTime', description='开始时间', position='Body'),
  subscriptionId: long(name='subscriptionId', description='主键', position='Body'),
  subscriptionTitle: string(name='subscriptionTitle', description='通知订阅名称', position='Body'),
}

model UpdateSubscriptionResponseBody = {
  requestId?: string(name='requestId'),
}

model UpdateSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSubscriptionResponseBody(name='body'),
}

async function updateSubscription(request: UpdateSubscriptionRequest): UpdateSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateSubscription', 'POST', '/notify/subscription/update', 'json', false, 'json', request);
}

model UpdateUserRequest {
  clientToken?: string(name='clientToken', description='幂等号', position='Body'),
  email?: string(name='email', description='邮件', position='Body'),
  phone?: string(name='phone', description='手机号', position='Body'),
  ramId?: long(name='ramId', description='用户ramId', position='Body'),
  userId: long(name='userId', description='用户ID', position='Body'),
  username?: string(name='username', description='用户名', position='Body'),
}

model UpdateUserResponseBody = {
  requestId?: string(name='requestId'),
}

model UpdateUserResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUserResponseBody(name='body'),
}

async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateUser', 'POST', '/user/update', 'json', false, 'json', request);
}

model UpdateUserGuideStatusRequest {
  clientToken?: string(name='clientToken', description='幂等校验', position='Body'),
  guideAction?: string(name='guideAction', description='INCIDENT_GUIDE	事件线 INCIDENT_GUIDE配置人员 USER_GUIDE 服务组 SERVICE_GROUP_GUIDE 服务 SERVICE_GUIDE 集成配置 MONITOR_GUIDE 流转规则 ROUTE_RULE_GUIDE 通知订阅 NOTICE_GUIDE', position='Body'),
}

model UpdateUserGuideStatusResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model UpdateUserGuideStatusResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUserGuideStatusResponseBody(name='body'),
}

async function updateUserGuideStatus(request: UpdateUserGuideStatusRequest): UpdateUserGuideStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateUserGuideStatus', 'POST', '/user/update/guide/status', 'json', false, 'json', request);
}

model VerifyRouteRuleRequest {
  routeRuleId?: long(name='routeRuleId', description='规则id', position='Body'),
  testSourceEvents?: [ 
    {
      eventJson?: string(name='eventJson', description='告警内容'),
      eventTime?: string(name='eventTime', description='告警上报时间'),
      monitorSourceId?: long(name='monitorSourceId', description='监控告警源ID'),
      monitorSourceName?: string(name='monitorSourceName', description='监控告警源名称'),
    }
  ](name='testSourceEvents', description='测试告警', position='Body'),
}

model VerifyRouteRuleResponseBody = {
  data?: {
    escalationPlans?: [ 
      {
        escalationPlanId?: long(name='escalationPlanId', description='升级计划ID'),
        escalationPlanName?: string(name='escalationPlanName', description='升级计划名称'),
      }
    ](name='escalationPlans', description='升级策略名称'),
    isValidRule?: boolean(name='isValidRule', description='验证是否成功'),
    monitorSourceIds?: [ long ](name='monitorSourceIds', description='验证失败监控源ID'),
    notifySubscriptionNames?: [ 
      {
        subscriptionId?: long(name='subscriptionId', description='订阅ID'),
        title?: string(name='title', description='订阅名称'),
      }
    ](name='notifySubscriptionNames', description='订阅名称'),
    routeRuleFailReason?: [ string ](name='routeRuleFailReason', description='流转规则验证失败的原因'),
    routeType?: string(name='routeType', description='事件或者报警'),
  }(name='data', description='验证结果'),
  requestId?: string(name='requestId', description='Id of the request'),
}

model VerifyRouteRuleResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyRouteRuleResponseBody(name='body'),
}

async function verifyRouteRule(request: VerifyRouteRuleRequest): VerifyRouteRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VerifyRouteRule', 'POST', '/routeRule/verify', 'json', false, 'json', request);
}

model DataValue = {
  code?: string(name='code'),
  description?: string(name='description'),
  configDescription?: string(name='configDescription', description='配置描述'),
  configCode?: string(name='configCode', description='配置code'),
  parentCode?: string(name='parentCode', description='配置父code'),
  configKey?: string(name='configKey', description='key (用于前后端值传递)'),
  configValue?: string(name='configValue', description='value (用于前端展示)'),
  requirement?: boolean(name='requirement', description='是否必选'),
}

