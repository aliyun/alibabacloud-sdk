/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'GEMP';
  @version = '2021-04-13';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddProblemServiceGroupRequest {
  problemId?: long(name='problemId', example='10', position='Body'),
  serviceGroupIds?: [ long ](name='serviceGroupIds', position='Body'),
}

model AddProblemServiceGroupResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='5AD6E6BC-2582-4E0E-832D-52CB1B922253'),
}

model AddProblemServiceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddProblemServiceGroupResponseBody(name='body'),
}

async function addProblemServiceGroup(request: AddProblemServiceGroupRequest): AddProblemServiceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddProblemServiceGroup', 'POST', '/problem/addServiceGroup', 'json', false, 'json', request);
}

model BillingStatisticsRequest {
}

model BillingStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    appUserCount?: long(name='appUserCount'),
    appUserCountFree?: long(name='appUserCountFree'),
    emailSend?: long(name='emailSend'),
    emailSendFree?: long(name='emailSendFree'),
    escalationPlanCount?: long(name='escalationPlanCount'),
    escalationPlanCountFree?: long(name='escalationPlanCountFree'),
    eventReportApi?: long(name='eventReportApi'),
    eventReportApiFree?: long(name='eventReportApiFree'),
    hasScheduleServiceGroupCount?: long(name='hasScheduleServiceGroupCount'),
    hasScheduleServiceGroupCountFree?: long(name='hasScheduleServiceGroupCountFree'),
    imMsgSend?: long(name='imMsgSend'),
    imMsgSendFree?: long(name='imMsgSendFree'),
    ruleCount?: long(name='ruleCount'),
    ruleCountFree?: long(name='ruleCountFree'),
    smsSend?: long(name='smsSend'),
    smsSendFree?: long(name='smsSendFree'),
    subscriptionNotifyCount?: long(name='subscriptionNotifyCount'),
    subscriptionNotifyCountFree?: long(name='subscriptionNotifyCountFree'),
    type?: boolean(name='type'),
    voiceSend?: long(name='voiceSend'),
    voiceSendFree?: long(name='voiceSendFree'),
  }(name='data'),
}

model BillingStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BillingStatisticsResponseBody(name='body'),
}

async function billingStatistics(request: BillingStatisticsRequest): BillingStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BillingStatistics', 'POST', '/charging/details', 'json', false, 'json', request);
}

model CancelProblemRequest {
  cancelReason?: long(name='cancelReason', example='取消原因', position='Body'),
  cancelReasonDescription?: string(name='cancelReasonDescription', example='原因描述', position='Body'),
  clientToken?: string(name='clientToken', example='4361a0e1-6747-4834-96ce-0c4840fd3812', position='Body'),
  problemId?: long(name='problemId', example='312', position='Body'),
  problemNotifyType?: long(name='problemNotifyType', example='PROBLEM_NOTIFY', position='Body'),
}

model CancelProblemResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='B81E84B5-8FD1-45F3-969A-B5067AADCFFF'),
}

model CancelProblemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelProblemResponseBody(name='body'),
}

async function cancelProblem(request: CancelProblemRequest): CancelProblemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelProblem', 'POST', '/problem/cancel', 'json', false, 'json', request);
}

model CheckWebhookRequest {
  clientToken?: string(name='clientToken', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9', position='Body'),
  webhook?: string(name='webhook', example='https://oapi.dingtalk.com/robot/send?access_token=XXX', position='Body'),
  webhookType?: string(name='webhookType', example='DING_GROUP', position='Body'),
}

model CheckWebhookResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9'),
}

model CheckWebhookResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckWebhookResponseBody(name='body'),
}

async function checkWebhook(request: CheckWebhookRequest): CheckWebhookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckWebhook', 'POST', '/services/check/webhook', 'json', false, 'json', request);
}

model ConfirmIntegrationConfigRequest {
  clientToken?: string(name='clientToken', example='601FA6A2-AC5C-4B59-BE11-378F887A6A11', position='Body'),
  integrationConfigId?: long(name='integrationConfigId', example='101', position='Body'),
}

model ConfirmIntegrationConfigResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='601FA6A2-AC5C-4B59-BE11-378F887A6A11'),
}

model ConfirmIntegrationConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfirmIntegrationConfigResponseBody(name='body'),
}

async function confirmIntegrationConfig(request: ConfirmIntegrationConfigRequest): ConfirmIntegrationConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ConfirmIntegrationConfig', 'POST', '/integrationConfig/confirm', 'json', false, 'json', request);
}

model CreateEscalationPlanRequest {
  clientToken?: string(name='clientToken', description='clientToken', example='6b404f14-77d1-4b53-a1a1-30a58bREQUEST', position='Body'),
  escalationPlanDescription: string(name='escalationPlanDescription', example='desc2322424', position='Body'),
  escalationPlanName: string(name='escalationPlanName', example='name123', position='Body'),
  escalationPlanRules: [ 
    {
      escalationPlanConditions: [ 
        {
          effection: string(name='effection', example='LOW'),
          level: string(name='level', example='P1'),
        }
      ](name='escalationPlanConditions'),
      escalationPlanStrategies: [ 
        {
          enableWebhook: boolean(name='enableWebhook', example='true'),
          escalationPlanType?: string(name='escalationPlanType'),
          noticeChannels: [ string ](name='noticeChannels'),
          noticeObjects: [ long ](name='noticeObjects'),
          noticeRoleList?: [ long ](name='noticeRoleList'),
          noticeTime: string(name='noticeTime', example='40'),
          serviceGroupIds?: [ long ](name='serviceGroupIds'),
        }
      ](name='escalationPlanStrategies'),
      escalationPlanType?: string(name='escalationPlanType', example='UN_FINISH'),
    }
  ](name='escalationPlanRules', position='Body'),
  escalationPlanScopeObjects: [ 
    {
      scope?: string(name='scope', example='SERVICE'),
      scopeObjectId: long(name='scopeObjectId', example='23433'),
    }
  ](name='escalationPlanScopeObjects', position='Body'),
  isGlobal?: boolean(name='isGlobal', position='Body'),
}

model CreateEscalationPlanResponseBody = {
  data?: {
    escalationPlanId?: long(name='escalationPlanId', example='234532'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request', example='A5A1FEAE-9C47-011C-9C73-A376BC21925D'),
}

model CreateEscalationPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEscalationPlanResponseBody(name='body'),
}

async function createEscalationPlan(request: CreateEscalationPlanRequest): CreateEscalationPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateEscalationPlan', 'POST', '/escalationPlan/create', 'json', false, 'json', request);
}

model CreateIncidentRequest {
  assignUserId?: long(name='assignUserId', example='12312', position='Body'),
  channels?: [ string ](name='channels', position='Body'),
  clientToken?: string(name='clientToken', example='2b63cdef-7ac3-4892-a76d-0f3389ef729f', position='Body'),
  effect?: string(name='effect', example='LOW', position='Body'),
  incidentDescription?: string(name='incidentDescription', position='Body'),
  incidentLevel?: string(name='incidentLevel', example='P1', position='Body'),
  incidentTitle?: string(name='incidentTitle', position='Body'),
  relatedServiceId?: long(name='relatedServiceId', example='12312', position='Body'),
  serviceGroupId?: long(name='serviceGroupId', description='12000', example='12312', position='Body'),
}

model CreateIncidentResponseBody = {
  data?: {
    incidentId?: long(name='incidentId'),
  }(name='data', description='Id of the request'),
  requestId?: string(name='requestId', description='requestId', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9'),
}

model CreateIncidentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIncidentResponseBody(name='body'),
}

async function createIncident(request: CreateIncidentRequest): CreateIncidentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateIncident', 'POST', '/incident/manualSave', 'json', false, 'json', request);
}

model CreateIncidentSubtotalRequest {
  clientToken?: string(name='clientToken', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9', position='Body'),
  description?: string(name='description', example='描述', position='Body'),
  incidentId: long(name='incidentId', example='12312', position='Body'),
}

model CreateIncidentSubtotalResponseBody = {
  data?: {
    subtotalId?: long(name='subtotalId', example='123'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='requestId', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9'),
}

model CreateIncidentSubtotalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIncidentSubtotalResponseBody(name='body'),
}

async function createIncidentSubtotal(request: CreateIncidentSubtotalRequest): CreateIncidentSubtotalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateIncidentSubtotal', 'POST', '/incident/save/subtotal', 'json', false, 'json', request);
}

model CreateIntegrationConfigRequest {
  clientToken?: string(name='clientToken', example='601FA6A2-AC5C-4B59-BE11-378F887A6A11', position='Body'),
  monitorSourceId?: long(name='monitorSourceId', example='1', position='Body'),
}

model CreateIntegrationConfigResponseBody = {
  data?: {
    integrationConfigId?: long(name='integrationConfigId', example='101'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='id of the request', example='601FA6A2-AC5C-4B59-BE11-378F887A6A11'),
}

model CreateIntegrationConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIntegrationConfigResponseBody(name='body'),
}

async function createIntegrationConfig(request: CreateIntegrationConfigRequest): CreateIntegrationConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateIntegrationConfig', 'POST', '/integrationConfig/create', 'json', false, 'json', request);
}

model CreateProblemRequest {
  affectServiceIds?: [ long ](name='affectServiceIds', position='Body'),
  clientToken?: string(name='clientToken', example='E789D869-DB13-4913-BAA8-A1F56F94B94D', position='Body'),
  discoverTime?: string(name='discoverTime', example='2020-10-02 00:00:00', position='Body'),
  incidentId?: long(name='incidentId', example='123221', position='Body'),
  mainHandlerId?: long(name='mainHandlerId', example='32121', position='Body'),
  preliminaryReason?: string(name='preliminaryReason', example='初步原因', position='Body'),
  problemLevel?: string(name='problemLevel', example='P2', position='Body'),
  problemName?: string(name='problemName', example='故障A', position='Body'),
  problemNotifyType?: string(name='problemNotifyType', example='PROBLEM_NOTIFY', position='Body'),
  problemStatus?: string(name='problemStatus', example='HANDLING', position='Body'),
  progressSummary?: string(name='progressSummary', example='进展摘要', position='Body'),
  progressSummaryRichTextId?: long(name='progressSummaryRichTextId', example='343', position='Body'),
  recoveryTime?: string(name='recoveryTime', example='2020-10-02 00:00:00', position='Body'),
  relatedServiceId?: long(name='relatedServiceId', example='123122', position='Body'),
  serviceGroupIds?: [ long ](name='serviceGroupIds', position='Body'),
}

model CreateProblemResponseBody = {
  data?: {
    problemId?: long(name='problemId', example='321331'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request', example='E789D869-DB13-4933-BAA8-A1F56F94B94D'),
}

model CreateProblemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProblemResponseBody(name='body'),
}

async function createProblem(request: CreateProblemRequest): CreateProblemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProblem', 'POST', '/problem/upgrade', 'json', false, 'json', request);
}

model CreateProblemEffectionServiceRequest {
  clientToken?: string(name='clientToken', description='clientToken', example='e0b6735e-1a04-4d6b-a625-d2350612492c', position='Body'),
  description?: string(name='description', example='erdwcdc', position='Body'),
  level?: string(name='level', example='P2', position='Body'),
  pictureUrl?: [ string ](name='pictureUrl', position='Body'),
  problemId: long(name='problemId', example='150000000', position='Body'),
  serviceId?: long(name='serviceId', example='170000000', position='Body'),
  status?: string(name='status', example='UN_RECOVERED', position='Body'),
}

model CreateProblemEffectionServiceResponseBody = {
  data?: {
    effectionServiceId?: long(name='effectionServiceId', example='6442430'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='id of the request', example='c26f36de-1ec8-496a-a828-880676c5ef81'),
}

model CreateProblemEffectionServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProblemEffectionServiceResponseBody(name='body'),
}

async function createProblemEffectionService(request: CreateProblemEffectionServiceRequest): CreateProblemEffectionServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProblemEffectionService', 'POST', '/problem/process/effectionService/create', 'json', false, 'json', request);
}

model CreateProblemMeasureRequest {
  checkStandard?: string(name='checkStandard', example='标准', position='Body'),
  checkUserId?: long(name='checkUserId', example='123', position='Body'),
  clientToken?: string(name='clientToken', example='4361a0e1-6747-4834-96ce-0c4840fd3812', position='Body'),
  content?: string(name='content', example='措施内容', position='Body'),
  directorId?: long(name='directorId', example='123', position='Body'),
  planFinishTime?: string(name='planFinishTime', example='2020-01-23 00:00:00', position='Body'),
  problemId: long(name='problemId', example='23', position='Body'),
  stalkerId?: long(name='stalkerId', example='123', position='Body'),
  status?: string(name='status', example='IMPROVED', position='Body'),
  type?: int32(name='type', example='1', position='Body'),
}

model CreateProblemMeasureResponseBody = {
  data?: {
    measureId?: long(name='measureId', example='1231'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request', example='4361a0e1-6747-4834-96ce-0c4840fd3812'),
}

model CreateProblemMeasureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProblemMeasureResponseBody(name='body'),
}

async function createProblemMeasure(request: CreateProblemMeasureRequest): CreateProblemMeasureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProblemMeasure', 'POST', '/problem/improvement/measure/save', 'json', false, 'json', request);
}

model CreateProblemSubtotalRequest {
  clientToken?: string(name='clientToken', example='4361a0e1-6747-4834-96ce-0c4840fd3814', position='Body'),
  description?: string(name='description', position='Body'),
  problemId: long(name='problemId', example='1231', position='Body'),
}

model CreateProblemSubtotalResponseBody = {
  data?: {
    subtotalId?: long(name='subtotalId', example='123'),
  }(name='data', description='object'),
  requestId?: string(name='requestId', description='Id of the request', example='4361a0e1-6747-4834-96ce-0c4840fd381A'),
}

model CreateProblemSubtotalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProblemSubtotalResponseBody(name='body'),
}

async function createProblemSubtotal(request: CreateProblemSubtotalRequest): CreateProblemSubtotalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProblemSubtotal', 'POST', '/problem/save/subtotal', 'json', false, 'json', request);
}

model CreateProblemTimelineRequest {
  clientToken?: string(name='clientToken', example='601FA6A2-AC5C-4B59-BE11-378FTOKENA11', position='Body'),
  content?: string(name='content', example='test123', position='Body'),
  keyNode?: string(name='keyNode', example='NodeTest', position='Body'),
  problemId: long(name='problemId', example='102', position='Body'),
  time?: string(name='time', example='2021-06-06 12:11:22', position='Body'),
}

model CreateProblemTimelineResponseBody = {
  data?: {
    problemTimelineId?: long(name='problemTimelineId', example='102'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='id of the request', example='10REQUES-AC5C-4B59-BE11-378F117A6A88'),
}

model CreateProblemTimelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProblemTimelineResponseBody(name='body'),
}

async function createProblemTimeline(request: CreateProblemTimelineRequest): CreateProblemTimelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProblemTimeline', 'POST', '/problem/process/timeline/create', 'json', false, 'json', request);
}

model CreateProblemTimelinesRequest {
  clientToken?: string(name='clientToken', description='clientToken', example='e0b6735e-1a04-4d6b-a625-d2350612492c', position='Body'),
  problemId: long(name='problemId', example='423', position='Body'),
  timelineNodes?: string(name='timelineNodes', example='2018-01-01 18:01，谁做了什么事情\\n2018-01-01 18:01，谁做了什么事情\\n2018-01-01 18:01，谁做了什么事情', position='Body'),
}

model CreateProblemTimelinesResponseBody = {
  data?: {
    problemTimelineIds?: [ long ](name='problemTimelineIds'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='id of the request', example='10REQUES-AC5C-4B59-BE11-378F117A6A88'),
}

model CreateProblemTimelinesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProblemTimelinesResponseBody(name='body'),
}

async function createProblemTimelines(request: CreateProblemTimelinesRequest): CreateProblemTimelinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProblemTimelines', 'POST', '/problem/process/timeline/batchCreate', 'json', false, 'json', request);
}

model CreateRichTextRequest {
  instanceId?: long(name='instanceId', example='12221', position='Body'),
  instanceType?: string(name='instanceType', example='INCIDENT 事件 ALERT告警 PROBLEM故障', position='Body'),
  richText?: string(name='richText', example='这是一个富文本', position='Body'),
}

model CreateRichTextResponseBody = {
  data?: {
    instanceId?: long(name='instanceId', example='1231'),
    instanceType?: long(name='instanceType', example='0 事件 1告警 2 故障'),
    richText?: string(name='richText', example='这是一个富文本'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request', example='10REQUES-AC5C-4B59-BE11-378F117A6A88'),
}

model CreateRichTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRichTextResponseBody(name='body'),
}

async function createRichText(request: CreateRichTextRequest): CreateRichTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRichText', 'POST', '/rich/create', 'json', false, 'json', request);
}

model CreateRouteRuleRequest {
  assignObjectId: long(name='assignObjectId', example='65', position='Body'),
  assignObjectType: string(name='assignObjectType', example='SERVICEGROUP', position='Body'),
  childRuleRelation: string(name='childRuleRelation', example='AND', position='Body'),
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  convergenceFields?: [ string ](name='convergenceFields', position='Body'),
  convergenceType?: int32(name='convergenceType', position='Body'),
  coverageProblemLevels?: [ string ](name='coverageProblemLevels', position='Body'),
  effection: string(name='effection', example='LOW', position='Body'),
  enableStatus?: string(name='enableStatus', example='false', position='Body'),
  incidentLevel: string(name='incidentLevel', example='P1', position='Body'),
  matchCount: int32(name='matchCount', example='3', position='Body'),
  notifyChannels: [ string ](name='notifyChannels', position='Body'),
  problemEffectionServices?: [ long ](name='problemEffectionServices', position='Body'),
  problemLevelGroup?: map[string]ProblemLevelGroupValue(name='problemLevelGroup', position='Body'),
  relatedServiceId: long(name='relatedServiceId', example='100', position='Body'),
  routeChildRules: [ 
    {
      childConditionRelation?: long(name='childConditionRelation', example='0'),
      conditions: [ 
        {
          key: string(name='key', example='payload.summary'),
          operationSymbol: string(name='operationSymbol', example='equals'),
          value: string(name='value', example='123'),
        }
      ](name='conditions'),
      monitorSourceId: long(name='monitorSourceId', example='1'),
      problemLevel?: string(name='problemLevel'),
    }
  ](name='routeChildRules', position='Body'),
  routeType: string(name='routeType', example='INCIDENT', position='Body'),
  ruleName: string(name='ruleName', example='这是一个规则', position='Body'),
  timeWindow: long(name='timeWindow', example='2', position='Body'),
  timeWindowUnit: string(name='timeWindowUnit', example='MINUTE', position='Body'),
}

model CreateRouteRuleResponseBody = {
  data?: {
    routeRuleId?: long(name='routeRuleId', example='1000'),
  }(name='data', example='65'),
  requestId?: string(name='requestId', example='请求ID'),
}

model CreateRouteRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRouteRuleResponseBody(name='body'),
}

async function createRouteRule(request: CreateRouteRuleRequest): CreateRouteRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRouteRule', 'POST', '/routeRule/save', 'json', false, 'json', request);
}

model CreateServiceRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  escalationPlanId?: long(name='escalationPlanId', position='Body'),
  serviceDescription?: string(name='serviceDescription', example='服务描述', position='Body'),
  serviceGroupIdList?: [ long ](name='serviceGroupIdList', position='Body'),
  serviceName: string(name='serviceName', example='服务名称', position='Body'),
}

model CreateServiceResponseBody = {
  data?: {
    serviceId?: long(name='serviceId', example='1'),
  }(name='data', example='1'),
  requestId?: string(name='requestId', description='Id of the request', example='C4BE3837-1A13-413B-A225-2C88188E8A43'),
}

model CreateServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceResponseBody(name='body'),
}

async function createService(request: CreateServiceRequest): CreateServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateService', 'POST', '/services/save', 'json', false, 'json', request);
}

model CreateServiceGroupRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  enableWebhook: string(name='enableWebhook', example='ENABLE', position='Body'),
  monitorSourceTemplates?: [ 
    {
      monitorSourceId?: long(name='monitorSourceId', example='111'),
      monitorSourceName?: string(name='monitorSourceName', example='zabbix'),
      templateContent?: string(name='templateContent', example='xx'),
      templateId?: long(name='templateId', example='111'),
    }
  ](name='monitorSourceTemplates', position='Body'),
  serviceGroupDescription?: string(name='serviceGroupDescription', example='服务描述', position='Body'),
  serviceGroupName: string(name='serviceGroupName', example='冲上云霄', position='Body'),
  userIds: [ long ](name='userIds', position='Body'),
  webhookLink: string(name='webhookLink', description='webhooklink', example='WWWWWWW', position='Body'),
  webhookType: string(name='webhookType', example='WEIXIN_GROUP', position='Body'),
}

model CreateServiceGroupResponseBody = {
  data?: {
    serviceGroupId?: long(name='serviceGroupId', example='1000'),
  }(name='data', example='1'),
  requestId?: string(name='requestId', description='Id of the request', example='C4BE3837-1A13-413B-A225-2C88188E8A43'),
}

model CreateServiceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceGroupResponseBody(name='body'),
}

async function createServiceGroup(request: CreateServiceGroupRequest): CreateServiceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateServiceGroup', 'POST', '/services/group/insert', 'json', false, 'json', request);
}

model CreateServiceGroupSchedulingRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  fastScheduling?: {
    dutyPlan?: string(name='dutyPlan', example='FAST_CHOICE'),
    schedulingUsers?: [ 
      {
        schedulingObjectType?: string(name='schedulingObjectType'),
        schedulingOrder?: long(name='schedulingOrder', example='1'),
        schedulingUserId?: long(name='schedulingUserId', example='6666'),
        schedulingUserIdList?: [ long ](name='schedulingUserIdList'),
      }
    ](name='schedulingUsers'),
    singleDuration?: int32(name='singleDuration', example='12'),
    singleDurationUnit?: string(name='singleDurationUnit', example='DAY'),
  }(name='fastScheduling', example='12', position='Body'),
  fineScheduling?: {
    period?: int32(name='period', example='1'),
    periodUnit?: string(name='periodUnit', example='DAY'),
    schedulingFineShifts?: [ 
      {
        cycleOrder?: int32(name='cycleOrder', example='1'),
        schedulingEndTime?: string(name='schedulingEndTime', example='2020-10-13'),
        schedulingObjectType?: string(name='schedulingObjectType'),
        schedulingOrder?: int32(name='schedulingOrder', example='1'),
        schedulingStartTime?: string(name='schedulingStartTime', example='2020-08-13'),
        schedulingUserId?: long(name='schedulingUserId', example='11'),
        schedulingUserIdList?: [ long ](name='schedulingUserIdList'),
        shiftName?: string(name='shiftName', example='早班'),
        skipOneDay?: boolean(name='skipOneDay', example='fasle'),
      }
    ](name='schedulingFineShifts'),
    schedulingTemplateFineShifts?: [ 
      {
        schedulingEndTime?: string(name='schedulingEndTime', example='2021-10-01 08:00:00'),
        schedulingObjectType?: string(name='schedulingObjectType'),
        schedulingOrder?: long(name='schedulingOrder', example='1'),
        schedulingStartTime?: string(name='schedulingStartTime', example='2021-09-01 08:00:00'),
        schedulingUserId?: long(name='schedulingUserId', example='1'),
        schedulingUserIdList?: [ long ](name='schedulingUserIdList'),
        schedulingUserName?: string(name='schedulingUserName'),
        skipOneDay?: boolean(name='skipOneDay', example='false'),
      }
    ](name='schedulingTemplateFineShifts'),
    shiftType?: string(name='shiftType', example='MORNING_NIGHT'),
  }(name='fineScheduling', position='Body'),
  schedulingWay: string(name='schedulingWay', example='FAST', position='Body'),
  serviceGroupId: long(name='serviceGroupId', example='1000', position='Body'),
}

model CreateServiceGroupSchedulingResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='xxxxxxxxxx'),
}

model CreateServiceGroupSchedulingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceGroupSchedulingResponseBody(name='body'),
}

async function createServiceGroupScheduling(request: CreateServiceGroupSchedulingRequest): CreateServiceGroupSchedulingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateServiceGroupScheduling', 'POST', '/services/group/scheduling/save', 'json', false, 'json', request);
}

model CreateSubscriptionRequest {
  clientToken?: string(name='clientToken', example='601FA6A2-AC5C-4B59-BE11-378FTOKENA11', position='Body'),
  endTime?: string(name='endTime', example='2021-11-03 10:10:10', position='Body'),
  expiredType: long(name='expiredType', example='LONG_TERM', position='Body'),
  notifyObjectList: [ 
    {
      notifyObjectId: long(name='notifyObjectId', example='2'),
    }
  ](name='notifyObjectList', position='Body'),
  notifyObjectType: long(name='notifyObjectType', example='USER', position='Body'),
  notifyStrategyList: [ 
    {
      channels: string(name='channels', example='SMS,PHONE'),
      instanceType: long(name='instanceType', example='INCIDENT'),
      periodChannel?: {
        nonWorkday?: string(name='nonWorkday', example='SMS,PHONE'),
        workday?: string(name='workday', example='SMS,PHONE'),
      }(name='periodChannel'),
      strategies: [ 
        {
          conditions?: [ 
            {
              action?: string(name='action', example='INCIDENT_TRIGGER'),
              effection?: string(name='effection', example='HIGH'),
              level?: string(name='level', example='P1'),
              problemNotifyType?: string(name='problemNotifyType', example='PROBLEM_UPDATE'),
            }
          ](name='conditions'),
        }
      ](name='strategies'),
    }
  ](name='notifyStrategyList', position='Body'),
  period?: string(name='period', example='1个月', position='Body'),
  scope: long(name='scope', example='SERVICE', position='Body'),
  scopeObjectList: [ 
    {
      scopeObjectId: long(name='scopeObjectId', example='1'),
    }
  ](name='scopeObjectList', position='Body'),
  startTime?: string(name='startTime', example='2021-02-03 10:10:10', position='Body'),
  subscriptionTitle: string(name='subscriptionTitle', example='testSubscription', position='Body'),
}

model CreateSubscriptionResponseBody = {
  data?: {
    subscriptionId?: long(name='subscriptionId', example='101'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='request id', example='10REQUES-AC5C-4B59-BE11-378F117A6A88'),
}

model CreateSubscriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSubscriptionResponseBody(name='body'),
}

async function createSubscription(request: CreateSubscriptionRequest): CreateSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSubscription', 'POST', '/notify/subscription/create', 'json', false, 'json', request);
}

model CreateTenantApplicationRequest {
  channel: string(name='channel', example='DINGDING', position='Body'),
  clientToken: string(name='clientToken', example='7C56D225-7C34-40BB-9624-C8BA449260E6', position='Body'),
}

model CreateTenantApplicationResponseBody = {
  data?: {
    openUrl?: string(name='openUrl', example='http://xxxx'),
    progress?: string(name='progress', example='OPENED 已开通 OPENING 开通中'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='id of the req', example='10REQUES-AC5C-4B59-BE11-378F117A6A88'),
}

model CreateTenantApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTenantApplicationResponseBody(name='body'),
}

async function createTenantApplication(request: CreateTenantApplicationRequest): CreateTenantApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTenantApplication', 'POST', '/mobileApp/create', 'json', false, 'json', request);
}

model CreateUserRequest {
  clientToken?: string(name='clientToken', example='c26f36de-1ec8-496a-a828-880676c5ef81', position='Body'),
  email?: string(name='email', example='5678@qq.com', position='Body'),
  phone?: string(name='phone', example='188898989892', position='Body'),
  ramId?: long(name='ramId', example='4787654378343', position='Body'),
  roleIdList?: [ long ](name='roleIdList', position='Body'),
  username?: string(name='username', position='Body'),
}

model CreateUserResponseBody = {
  data?: {
    userId?: long(name='userId', example='1'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='id of the request', example='c26f36de-1ec8-496a-a828-880676c5ef81'),
}

model CreateUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUserResponseBody(name='body'),
}

async function createUser(request: CreateUserRequest): CreateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateUser', 'POST', '/user/create', 'json', false, 'json', request);
}

model DeleteEscalationPlanRequest {
  clientToken?: string(name='clientToken', example='A5A1FEAE-9C47-011C-9C73-A376BC2REQUEST', position='Body'),
  escalationPlanId: long(name='escalationPlanId', example='234534', position='Body'),
}

model DeleteEscalationPlanResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='A5A1FEAE-9C47-011C-9C73-A376BC21925D'),
}

model DeleteEscalationPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEscalationPlanResponseBody(name='body'),
}

async function deleteEscalationPlan(request: DeleteEscalationPlanRequest): DeleteEscalationPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteEscalationPlan', 'POST', '/escalationPlan/delete', 'json', false, 'json', request);
}

model DeleteIncidentRequest {
  clientToken?: string(name='clientToken', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9', position='Body'),
  incidentId?: long(name='incidentId', example='12321', position='Body'),
}

model DeleteIncidentResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9'),
}

model DeleteIncidentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIncidentResponseBody(name='body'),
}

async function deleteIncident(request: DeleteIncidentRequest): DeleteIncidentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteIncident', 'POST', '/incident/delete', 'json', false, 'json', request);
}

model DeleteIntegrationConfigRequest {
  clientToken?: string(name='clientToken', example='601FA6A2-AC5C-4B59-BE11-378F887A6A11', position='Body'),
  integrationConfigId?: long(name='integrationConfigId', example='100', position='Body'),
}

model DeleteIntegrationConfigResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='601FA6A2-AC5C-4B59-BE11-378F887A6A11'),
}

model DeleteIntegrationConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIntegrationConfigResponseBody(name='body'),
}

async function deleteIntegrationConfig(request: DeleteIntegrationConfigRequest): DeleteIntegrationConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteIntegrationConfig', 'POST', '/integrationConfig/delete', 'json', false, 'json', request);
}

model DeleteProblemRequest {
  clientToken?: string(name='clientToken', example='4361a0e1-6747-4834-96ce-0c4840fd3812', position='Body'),
  problemId?: long(name='problemId', example='1231', position='Body'),
}

model DeleteProblemResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='4361a0e1-6747-4834-96ce-0c4840fd3812'),
}

model DeleteProblemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProblemResponseBody(name='body'),
}

async function deleteProblem(request: DeleteProblemRequest): DeleteProblemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProblem', 'POST', '/problem/delete', 'json', false, 'json', request);
}

model DeleteProblemEffectionServiceRequest {
  clientToken?: string(name='clientToken', description='clientToken', example='e0b6735e-1a04-4d6b-a625-d2350612492c', position='Body'),
  effectionServiceId?: long(name='effectionServiceId', example='567', position='Body'),
  problemId?: long(name='problemId', example='876', position='Body'),
}

model DeleteProblemEffectionServiceResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='e0b6735e-1a04-4d6b-a625-d2350612492c'),
}

model DeleteProblemEffectionServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProblemEffectionServiceResponseBody(name='body'),
}

async function deleteProblemEffectionService(request: DeleteProblemEffectionServiceRequest): DeleteProblemEffectionServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProblemEffectionService', 'POST', '/problem/process/effectionService/delete', 'json', false, 'json', request);
}

model DeleteProblemMeasureRequest {
  clientToken?: string(name='clientToken', example='4361a0e1-6747-4834-96ce-0c4840fd3812', position='Body'),
  measureId?: long(name='measureId', example='1213', position='Body'),
  problemId?: string(name='problemId', example='2131', position='Body'),
}

model DeleteProblemMeasureResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='4361a0e1-6747-4834-96ce-0c4840fd3812'),
}

model DeleteProblemMeasureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProblemMeasureResponseBody(name='body'),
}

async function deleteProblemMeasure(request: DeleteProblemMeasureRequest): DeleteProblemMeasureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProblemMeasure', 'POST', '/problem/improvement/measure/delete', 'json', false, 'json', request);
}

model DeleteProblemTimelineRequest {
  clientToken?: string(name='clientToken', example='601FA6A2-AC5C-4B59-BE11-378FTOKENA11', position='Body'),
  problemId?: long(name='problemId', example='102', position='Body'),
  problemTimelineId?: long(name='problemTimelineId', example='11', position='Body'),
}

model DeleteProblemTimelineResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='10REQUES-AC5C-4B59-BE11-378F117A6A88'),
}

model DeleteProblemTimelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProblemTimelineResponseBody(name='body'),
}

async function deleteProblemTimeline(request: DeleteProblemTimelineRequest): DeleteProblemTimelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProblemTimeline', 'POST', '/problem/process/timeline/delete', 'json', false, 'json', request);
}

model DeleteRouteRuleRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  routeRuleId: long(name='routeRuleId', example='10000', position='Body'),
}

model DeleteRouteRuleResponseBody = {
  requestId?: long(name='requestId', example='C4BE3837-1A13-413B-A225-2C88188E8A43'),
}

model DeleteRouteRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRouteRuleResponseBody(name='body'),
}

async function deleteRouteRule(request: DeleteRouteRuleRequest): DeleteRouteRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRouteRule', 'POST', '/routeRule/delete', 'json', false, 'json', request);
}

model DeleteServiceRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  serviceId?: long(name='serviceId', example='10002000', position='Body'),
}

model DeleteServiceResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='C4BE3837-1A13-413B-A225-2C88188E8A43'),
}

model DeleteServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteServiceResponseBody(name='body'),
}

async function deleteService(request: DeleteServiceRequest): DeleteServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteService', 'POST', '/services/delete', 'json', false, 'json', request);
}

model DeleteServiceGroupRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  serviceGroupId?: long(name='serviceGroupId', example='1000', position='Body'),
}

model DeleteServiceGroupResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='C4BE3837-1A13-413B-A225-2C88188E8A43'),
}

model DeleteServiceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteServiceGroupResponseBody(name='body'),
}

async function deleteServiceGroup(request: DeleteServiceGroupRequest): DeleteServiceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceGroup', 'POST', '/services/group/delete', 'json', false, 'json', request);
}

model DeleteServiceGroupSchedulingRequest {
}

model DeleteServiceGroupSchedulingResponseBody = {
  requestId?: string(name='requestId'),
}

model DeleteServiceGroupSchedulingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteServiceGroupSchedulingResponseBody(name='body'),
}

async function deleteServiceGroupScheduling(request: DeleteServiceGroupSchedulingRequest): DeleteServiceGroupSchedulingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceGroupScheduling', 'POST', '/services/group/scheduling/delete', 'json', false, 'json', request);
}

model DeleteServiceGroupUserRequest {
  clientToken?: string(name='clientToken', example='xxxxxx', position='Body'),
  newUserId?: long(name='newUserId', example='88888', position='Body'),
  oldUserId?: long(name='oldUserId', example='777777', position='Body'),
  removeUser?: boolean(name='removeUser', example='true', position='Body'),
  serviceGroupId?: long(name='serviceGroupId', example='66666', position='Body'),
}

model DeleteServiceGroupUserResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='xxxxxx'),
}

model DeleteServiceGroupUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteServiceGroupUserResponseBody(name='body'),
}

async function deleteServiceGroupUser(request: DeleteServiceGroupUserRequest): DeleteServiceGroupUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteServiceGroupUser', 'POST', '/services/group/deleteServiceGroupUser', 'json', false, 'json', request);
}

model DeleteSubscriptionRequest {
  subscriptionId?: long(name='subscriptionId', example='10', position='Body'),
}

model DeleteSubscriptionResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='c26f36de-1ec8-496a-a828-880676c5ef81'),
}

model DeleteSubscriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSubscriptionResponseBody(name='body'),
}

async function deleteSubscription(request: DeleteSubscriptionRequest): DeleteSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSubscription', 'POST', '/notify/subscription/delete', 'json', false, 'json', request);
}

model DeleteUserRequest {
  clientToken?: string(name='clientToken', example='c26f36de-1ec8-496a-a828-880676c5ef81', position='Body'),
  userId: long(name='userId', example='1', position='Body'),
}

model DeleteUserResponseBody = {
  requestId?: string(name='requestId', description='id of the request', example='c26f36de-1ec8-496a-a828-880676c5ef81'),
}

model DeleteUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserResponseBody(name='body'),
}

async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteUser', 'POST', '/user/delete', 'json', false, 'json', request);
}

model DeliverIncidentRequest {
  assignUserId?: long(name='assignUserId', example='212321', position='Body'),
  clientToken?: string(name='clientToken', example='FD200FAE-E98F-496E-BFE6-4CE61CS9A221', position='Body'),
  incidentId?: long(name='incidentId', example='1223212', position='Body'),
}

model DeliverIncidentResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2FS'),
}

model DeliverIncidentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeliverIncidentResponseBody(name='body'),
}

async function deliverIncident(request: DeliverIncidentRequest): DeliverIncidentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeliverIncident', 'POST', '/incident/deliver', 'json', false, 'json', request);
}

model DisableEscalationPlanRequest {
  clientToken?: string(name='clientToken', example='A5A1FEAE-9C47-011C-9C73-A376BC2REQUEST', position='Body'),
  escalationPlanId: long(name='escalationPlanId', example='234534', position='Body'),
}

model DisableEscalationPlanResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='A5A1FEAE-9C47-011C-9C73-A376BC21925D'),
}

model DisableEscalationPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableEscalationPlanResponseBody(name='body'),
}

async function disableEscalationPlan(request: DisableEscalationPlanRequest): DisableEscalationPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DisableEscalationPlan', 'POST', '/escalationPlan/disable', 'json', false, 'json', request);
}

model DisableIntegrationConfigRequest {
  clientToken?: string(name='clientToken', example='601FA6A2-AC5C-4B59-BE11-378F887A6A11', position='Body'),
  integrationConfigId?: long(name='integrationConfigId', example='12345703', position='Body'),
}

model DisableIntegrationConfigResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='601FA6A2-AC5C-4B59-BE11-378F887A6A11'),
}

model DisableIntegrationConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableIntegrationConfigResponseBody(name='body'),
}

async function disableIntegrationConfig(request: DisableIntegrationConfigRequest): DisableIntegrationConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DisableIntegrationConfig', 'POST', '/integrationConfig/disable', 'json', false, 'json', request);
}

model DisableRouteRuleRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  routeRuleId: long(name='routeRuleId', example='1', position='Body'),
}

model DisableRouteRuleResponseBody = {
  data?: long(name='data', description='C4BE3837-1A13-413B-A225-2C88188E8A43', example='null'),
  requestId: string(name='requestId', example='C4BE3837-1A13-413B-A225-2C88188E8A43'),
}

model DisableRouteRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableRouteRuleResponseBody(name='body'),
}

async function disableRouteRule(request: DisableRouteRuleRequest): DisableRouteRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DisableRouteRule', 'POST', '/routeRule/disable', 'json', false, 'json', request);
}

model DisableServiceGroupWebhookRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  serviceGroupId?: long(name='serviceGroupId', example='1', position='Body'),
}

model DisableServiceGroupWebhookResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='C4BE3837-1A13-413B-A225-2C88188E8A43'),
}

model DisableServiceGroupWebhookResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableServiceGroupWebhookResponseBody(name='body'),
}

async function disableServiceGroupWebhook(request: DisableServiceGroupWebhookRequest): DisableServiceGroupWebhookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DisableServiceGroupWebhook', 'POST', '/services/group/disableWebhook', 'json', false, 'json', request);
}

model DisableSubscriptionRequest {
  subscriptionId?: long(name='subscriptionId', example='89', position='Body'),
}

model DisableSubscriptionResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='10REQUES-AC5C-4B59-BE11-378F117A6A88'),
}

model DisableSubscriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableSubscriptionResponseBody(name='body'),
}

async function disableSubscription(request: DisableSubscriptionRequest): DisableSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DisableSubscription', 'POST', '/notify/subscription/doDisable', 'json', false, 'json', request);
}

model EnableEscalationPlanRequest {
  clientToken?: string(name='clientToken', example='A5A1FEAE-9C47-011C-9C73-A376BC2REQUEST', position='Body'),
  escalationPlanId: long(name='escalationPlanId', example='234534', position='Body'),
}

model EnableEscalationPlanResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='A5A1FEAE-9C47-011C-9C73-A376BC21925D'),
}

model EnableEscalationPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableEscalationPlanResponseBody(name='body'),
}

async function enableEscalationPlan(request: EnableEscalationPlanRequest): EnableEscalationPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EnableEscalationPlan', 'POST', '/escalationPlan/enable', 'json', false, 'json', request);
}

model EnableIntegrationConfigRequest {
  clientToken?: string(name='clientToken', example='601FA6A2-AC5C-4B59-BE11-378F887A6A11', position='Body'),
  integrationConfigId?: long(name='integrationConfigId', example='101', position='Body'),
}

model EnableIntegrationConfigResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='601FA6A2-AC5C-4B59-BE11-378F887A6A11'),
}

model EnableIntegrationConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableIntegrationConfigResponseBody(name='body'),
}

async function enableIntegrationConfig(request: EnableIntegrationConfigRequest): EnableIntegrationConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EnableIntegrationConfig', 'POST', '/integrationConfig/enable', 'json', false, 'json', request);
}

model EnableRouteRuleRequest {
  clientToken: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  routeRuleId: long(name='routeRuleId', example='1', position='Body'),
}

model EnableRouteRuleResponseBody = {
  data?: int32(name='data', example='null'),
  requestId?: string(name='requestId', example='C4BE3837-1A13-413B-A225-2C88188E8A43'),
}

model EnableRouteRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableRouteRuleResponseBody(name='body'),
}

async function enableRouteRule(request: EnableRouteRuleRequest): EnableRouteRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EnableRouteRule', 'POST', '/routeRule/enable', 'json', false, 'json', request);
}

model EnableServiceGroupWebhookRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  serviceGroupId?: long(name='serviceGroupId', example='1', position='Body'),
}

model EnableServiceGroupWebhookResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='C4BE3837-1A13-413B-A225-2C88188E8A43'),
}

model EnableServiceGroupWebhookResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableServiceGroupWebhookResponseBody(name='body'),
}

async function enableServiceGroupWebhook(request: EnableServiceGroupWebhookRequest): EnableServiceGroupWebhookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EnableServiceGroupWebhook', 'POST', '/services/group/enableWebhook', 'json', false, 'json', request);
}

model EnableSubscriptionRequest {
  subscriptionId?: long(name='subscriptionId', example='10', position='Body'),
}

model EnableSubscriptionResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='c26f36de-1ec8-496a-a828-880676c5ef81'),
}

model EnableSubscriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableSubscriptionResponseBody(name='body'),
}

async function enableSubscription(request: EnableSubscriptionRequest): EnableSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EnableSubscription', 'POST', '/notify/subscription/enable', 'json', false, 'json', request);
}

model FinishIncidentRequest {
  clientToken?: string(name='clientToken', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2DC', position='Body'),
  incidentFinishReason?: int32(name='incidentFinishReason', example='1', position='Body'),
  incidentFinishReasonDescription?: string(name='incidentFinishReasonDescription', example='原因描述', position='Body'),
  incidentFinishSolution?: int32(name='incidentFinishSolution', example='3', position='Body'),
  incidentFinishSolutionDescription?: string(name='incidentFinishSolutionDescription', example='解决方案描述', position='Body'),
  incidentIds: [ long ](name='incidentIds', position='Body'),
}

model FinishIncidentResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9'),
}

model FinishIncidentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FinishIncidentResponseBody(name='body'),
}

async function finishIncident(request: FinishIncidentRequest): FinishIncidentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FinishIncident', 'POST', '/incident/finish', 'json', false, 'json', request);
}

model FinishProblemRequest {
  clientToken?: string(name='clientToken', example='6338F42D-ED0B-442C-932C-657300AFB4BB', position='Body'),
  problemId?: long(name='problemId', example='3123', position='Body'),
}

model FinishProblemResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='6338F42D-ED0B-442C-932C-657300AFB4BB'),
}

model FinishProblemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FinishProblemResponseBody(name='body'),
}

async function finishProblem(request: FinishProblemRequest): FinishProblemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FinishProblem', 'POST', '/problem/finish', 'json', false, 'json', request);
}

model GeneratePictureLinkRequest {
  keys?: [ string ](name='keys', description='keys', position='Body'),
  problemId?: long(name='problemId', example='50002020', position='Body'),
}

model GeneratePictureLinkResponseBody = {
  data?: {
    links?: [ 
      {
        key?: string(name='key', description='oss key', example='problem/38b2a36d-484d-4242-b9cf-d243e53a82c6'),
        link?: string(name='link', description='url', example='http://gam-objects-bucket.oss-cn-shanghai.aliyuncs.com/problem/38b2a36d-484d-4242-b9cf-d243e53a82c6?Expires=1625662477&OSSAccessKeyId=LTAI5tEoRVPw8GMy1iLRCno7&Signature=1NFnt%2BnudD%2F%2BHVc31b6v5%2FFxoqg%3D'),
      }
    ](name='links', description='array'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request', example='xxxxxx'),
}

model GeneratePictureLinkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GeneratePictureLinkResponseBody(name='body'),
}

async function generatePictureLink(request: GeneratePictureLinkRequest): GeneratePictureLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GeneratePictureLink', 'POST', '/rich/oss/getPictureLink', 'json', false, 'json', request);
}

model GeneratePictureUploadSignRequest {
  files?: [ 
    {
      fileName?: string(name='fileName', example='文件A'),
      fileSize?: long(name='fileSize', example='100'),
      fileType?: string(name='fileType', example='JPG'),
    }
  ](name='files', position='Body'),
  instanceId?: long(name='instanceId', example='123123', position='Body'),
  instanceType?: string(name='instanceType', example='INCIDENT 事件 ALERT告警 PROBLEM故障', position='Body'),
}

model GeneratePictureUploadSignResponseBody = {
  data?: {
    accessKeyId?: string(name='accessKeyId', description='accessKeyId', example='LTAI1tEoRVPw8GMy1iLRCno7'),
    bucketName?: string(name='bucketName', description='oss bucket name', example='gam-objects-bucket'),
    files?: [ 
      {
        fileName?: string(name='fileName', example='文件A'),
        fileSize?: long(name='fileSize', example='100'),
        fileType?: string(name='fileType', example='JPG'),
        key?: string(name='key', description='oss key', example='problem/25a2316c-b08d-41a5-9f41-b3185d529277'),
      }
    ](name='files', description='files'),
    policy?: string(name='policy', description='policy', example='eyJleHBpcmF0aW9uIjoiMjAyMS0wNy0xM1QwNDowOTo0NS4yODJaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMTA0ODU3NjAwXSxbInN0YXJ0cy13aXRoIiwiJGtleSIsInByb2JsZW0iXV19'),
    signature?: string(name='signature', description='signature', example='SHqvIkwUNQd8Hervklir2K8U+ts='),
    url?: string(name='url', description='url', example='https://gam-objects-bucket.oss-cn-shanghai.aliyuncs.com'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request', example='e2d4306a-bf4d-4345-9ae6-158223c85dbd'),
}

model GeneratePictureUploadSignResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GeneratePictureUploadSignResponseBody(name='body'),
}

async function generatePictureUploadSign(request: GeneratePictureUploadSignRequest): GeneratePictureUploadSignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GeneratePictureUploadSign', 'POST', '/rich/oss/generatePostPolicy', 'json', false, 'json', request);
}

model GenerateProblemPictureLinkRequest {
  keys?: [ string ](name='keys', description='oss key', position='Body'),
  problemId?: string(name='problemId', example='50002021', position='Body'),
}

model GenerateProblemPictureLinkResponseBody = {
  data?: {
    links?: [ 
      {
        key?: string(name='key', description='oss key', example='problem/xxxxxxxxxx-484d-4242-b9cf-xxxxxxxxxx'),
        link?: string(name='link', example='http://xxxx-xxxx-bucket.oss-cn-xxxx.aliyuncs.com/pxxxx/38xxxxd-4789-4242-b9cfxxxxxxxxc6?Expires=1xxxxxxxxxx7&OSSAccessKeyId=xxxxxxxxxxxxxx7&Signature=xxxxxxxxxxxxxxxxxxxxxx'),
      }
    ](name='links'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='requestId', example='c26f36de-1ec8-496a-a828-88067879ef81'),
}

model GenerateProblemPictureLinkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateProblemPictureLinkResponseBody(name='body'),
}

async function generateProblemPictureLink(request: GenerateProblemPictureLinkRequest): GenerateProblemPictureLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GenerateProblemPictureLink', 'POST', '/problem/process/oss/getPresignedLink', 'json', false, 'json', request);
}

model GenerateProblemPictureUploadSignRequest {
  fileName?: string(name='fileName', example='test', position='Body'),
  fileSize?: long(name='fileSize', example='1000', position='Body'),
  fileType?: string(name='fileType', example='png', position='Body'),
  problemId?: long(name='problemId', example='67876', position='Body'),
}

model GenerateProblemPictureUploadSignResponseBody = {
  data?: {
    accessKeyId?: string(name='accessKeyId', description='ossaccessKeyId', example='XXXXXXXH8GMy1iLRCno7'),
    bucketName?: string(name='bucketName', description='oss bucket name', example='xxxx-xxxx-xxxx'),
    key?: string(name='key', description='oss key', example='problem/xxxxxxxxxxxxxxxx1-b3185d529277'),
    policy?: string(name='policy', description='policy', example='eyJleHBpcmF0a0p0IjoiMjAyMS0wNy0xM1QwNDowOTo0NS4yODJaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMTA0ODU3NjAwXSxbInN0YXJ0cy13aXRoIiwiJGtleSIsInByb2JsZW0iXV19'),
    signature?: string(name='signature', description='signature', example='SHqvIkwUNQd0o0rvklir2K8U+ts='),
    url?: string(name='url', description='url', example='https://xxx-xxx-bucket.oss-cn-shanghai.aliyuncs.com'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='requestId', example='e2d4306a-bf4d-4345-9ae6-158223c85dbd'),
}

model GenerateProblemPictureUploadSignResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateProblemPictureUploadSignResponseBody(name='body'),
}

async function generateProblemPictureUploadSign(request: GenerateProblemPictureUploadSignRequest): GenerateProblemPictureUploadSignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GenerateProblemPictureUploadSign', 'POST', '/problem/process/oss/generatePostPolicy', 'json', false, 'json', request);
}

model GetEscalationPlanRequest {
  clientToken?: string(name='clientToken', example='A5A1FEAE-9C47-011C-9C73-A376BC2REQUEST', position='Body'),
  escalationPlanId: long(name='escalationPlanId', example='345', position='Body'),
}

model GetEscalationPlanResponseBody = {
  data?: {
    createTime?: string(name='createTime', example='2021-09-09 09:09:09'),
    escalationPlanDescription?: string(name='escalationPlanDescription', example='描述1234'),
    escalationPlanId?: long(name='escalationPlanId', example='2345'),
    escalationPlanName?: string(name='escalationPlanName', example='升级计划234'),
    escalationPlanRules?: [ 
      {
        escalationPlanConditions?: [ 
          {
            effection?: string(name='effection', example='LOW'),
            level?: string(name='level', example='P1'),
          }
        ](name='escalationPlanConditions'),
        escalationPlanRuleId?: long(name='escalationPlanRuleId', example='345'),
        escalationPlanStrategies?: [ 
          {
            enableWebhook?: boolean(name='enableWebhook', example='true'),
            escalationPlanType?: string(name='escalationPlanType', example='UN_ACKNOWLEDGE'),
            noticeChannels?: string(name='noticeChannels', example='SMS'),
            noticeObjectList?: [ 
              {
                noticeObjectId?: long(name='noticeObjectId', example='234'),
                noticeObjectName?: string(name='noticeObjectName', example='张老三'),
              }
            ](name='noticeObjectList'),
            noticeObjects?: [ long ](name='noticeObjects'),
            noticeRoleList?: [ long ](name='noticeRoleList'),
            noticeRoleObjectList?: [ 
              {
                id?: long(name='id'),
                name?: string(name='name'),
              }
            ](name='noticeRoleObjectList'),
            noticeTime?: long(name='noticeTime', example='40'),
            serviceGroups?: [ 
              {
                id?: long(name='id', example='343'),
                serviceGroupName?: string(name='serviceGroupName', example='VCD是'),
              }
            ](name='serviceGroups'),
          }
        ](name='escalationPlanStrategies'),
      }
    ](name='escalationPlanRules'),
    escalationPlanScopeObjects?: [ 
      {
        escalationPlanScopeObjects?: int32(name='escalationPlanScopeObjects'),
        scope?: string(name='scope', example='SERVICE'),
        scopeObjectDeletedType?: int32(name='scopeObjectDeletedType'),
        scopeObjectId?: long(name='scopeObjectId', example='234'),
        scopeObjectName?: string(name='scopeObjectName', example='xx服务'),
      }
    ](name='escalationPlanScopeObjects'),
    isGlobal?: boolean(name='isGlobal'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request', example='A5A1FEAE-9C47-011C-9C73-A376BC2REQUEST'),
}

model GetEscalationPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEscalationPlanResponseBody(name='body'),
}

async function getEscalationPlan(request: GetEscalationPlanRequest): GetEscalationPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetEscalationPlan', 'POST', '/escalationPlan/detail', 'json', false, 'json', request);
}

model GetEventRequest {
  monitorSourceId: long(name='monitorSourceId', example='1', position='Body'),
}

model GetEventResponseBody = {
  data?: {
    eventJson?: string(name='eventJson', example='“”'),
    eventTime?: string(name='eventTime', example='2002-09-08 15:30:35'),
    monitorSourceId?: long(name='monitorSourceId', example='1'),
    monitorSourceName?: string(name='monitorSourceName', example='zabbix'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='XXXXXXXXXXXX'),
}

model GetEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEventResponseBody(name='body'),
}

async function getEvent(request: GetEventRequest): GetEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetEvent', 'POST', '/events/getLastTimeEvent', 'json', false, 'json', request);
}

model GetHomePageGuidanceRequest {
  clientToken?: string(name='clientToken', example='xxxxxx', position='Body'),
}

model GetHomePageGuidanceResponseBody = {
  data?: {
    notifySubscriptionStatus?: boolean(name='notifySubscriptionStatus', example='true'),
    serviceGroupStatus?: boolean(name='serviceGroupStatus', example='true'),
    serviceStatus?: boolean(name='serviceStatus', example='true'),
    usersStatus?: boolean(name='usersStatus', example='true'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='xxxxxx'),
}

model GetHomePageGuidanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHomePageGuidanceResponseBody(name='body'),
}

async function getHomePageGuidance(request: GetHomePageGuidanceRequest): GetHomePageGuidanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHomePageGuidance', 'POST', '/guidance/detail', 'json', false, 'json', request);
}

model GetIncidentRequest {
  clientToken?: string(name='clientToken', example='2b63cdef-7ac3-4892-a76d-0f3389ef729f', position='Body'),
  incidentId?: long(name='incidentId', example='32113', position='Body'),
}

model GetIncidentResponseBody = {
  data?: {
    assignToWhoIsValid?: int32(name='assignToWhoIsValid'),
    assignUserId?: long(name='assignUserId', example='12312'),
    assignUserName?: string(name='assignUserName', example='小明'),
    assignUserPhone?: string(name='assignUserPhone', example='1390000****'),
    createTime?: string(name='createTime', example='2020-01-10 00:00:00'),
    defaultAssignToWho?: int32(name='defaultAssignToWho'),
    defaultAssignToWhoIsValid?: int32(name='defaultAssignToWhoIsValid'),
    defaultAssignToWhoName?: string(name='defaultAssignToWhoName'),
    durationTime?: long(name='durationTime', example='3000000'),
    effect?: string(name='effect', example='LOW'),
    incidentDescription?: string(name='incidentDescription', example='事件描述'),
    incidentId?: long(name='incidentId', example='3213'),
    incidentLevel?: string(name='incidentLevel', example='P4'),
    incidentNumber?: string(name='incidentNumber', example='I3443831000000016247759753663894'),
    incidentStatus?: string(name='incidentStatus', example='FINISHE'),
    incidentTitle?: string(name='incidentTitle', example='事件标题'),
    isManual?: boolean(name='isManual', example='true'),
    isUpgrade?: boolean(name='isUpgrade', example='true'),
    notifyChannels?: [ string ](name='notifyChannels', example='1 短信  2  邮件  3  电话  4 企微群 5 钉钉群 6飞书 7 群通知 8 slack'),
    problemId?: long(name='problemId', example='232113'),
    problemNumber?: string(name='problemNumber', example='3332113231453321'),
    relRouteRuleDeleteType?: int32(name='relRouteRuleDeleteType'),
    relServiceDeleteType?: int32(name='relServiceDeleteType'),
    relServiceGroupIsValid?: int32(name='relServiceGroupIsValid'),
    relatedServiceDescription?: string(name='relatedServiceDescription', example='关联服务描述'),
    relatedServiceGroupId?: long(name='relatedServiceGroupId', example='13000'),
    relatedServiceGroupName?: string(name='relatedServiceGroupName', example='服务组A'),
    relatedServiceId?: long(name='relatedServiceId', example='312312'),
    relatedServiceName?: string(name='relatedServiceName', example='服务A'),
    routeRuleId?: long(name='routeRuleId', example='3123'),
    routeRuleName?: string(name='routeRuleName', example='流转规则A'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='requestId', example='2b63cdef-7ac3-4892-a76d-0f3389ef7291'),
}

model GetIncidentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIncidentResponseBody(name='body'),
}

async function getIncident(request: GetIncidentRequest): GetIncidentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIncident', 'POST', '/incident/detail', 'json', false, 'json', request);
}

model GetIncidentListByIdListRequest {
  clientToken?: string(name='clientToken', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9', position='Body'),
  incidentIdList?: [ long ](name='incidentIdList', position='Body'),
}

model GetIncidentListByIdListResponseBody = {
  data?: [ 
    {
      assignToWhoIsValid?: int32(name='assignToWhoIsValid', example='1'),
      assignUserId?: long(name='assignUserId', example='12312'),
      assignUserName?: string(name='assignUserName'),
      assignUserPhone?: string(name='assignUserPhone', example='139****1111'),
      createTime?: string(name='createTime', example='2010-03-09 15:53:45'),
      defaultAssignToWho?: int32(name='defaultAssignToWho', example='1212'),
      defaultAssignToWhoIsValid?: int32(name='defaultAssignToWhoIsValid', example='1'),
      defaultAssignToWhoName?: string(name='defaultAssignToWhoName'),
      durationTime?: string(name='durationTime', example='3000000'),
      effect?: string(name='effect', example='LOW'),
      incidentDescription?: string(name='incidentDescription'),
      incidentId?: long(name='incidentId', example='3213'),
      incidentLevel?: string(name='incidentLevel', example='P4'),
      incidentNumber?: string(name='incidentNumber', example='I13002001'),
      incidentStatus?: string(name='incidentStatus', example='FINISHE'),
      incidentTitle?: string(name='incidentTitle'),
      isManual?: boolean(name='isManual', example='true'),
      isUpgrade?: boolean(name='isUpgrade', example='true'),
      notifyChannels?: [ string ](name='notifyChannels'),
      problemId?: long(name='problemId', example='12312'),
      problemNumber?: string(name='problemNumber', example='P1231231'),
      relRouteRuleDeleteType?: int32(name='relRouteRuleDeleteType', example='1'),
      relServiceDeleteType?: int32(name='relServiceDeleteType', example='1'),
      relServiceGroupIsValid?: int32(name='relServiceGroupIsValid', example='1'),
      relatedServiceDescription?: string(name='relatedServiceDescription'),
      relatedServiceGroupId?: long(name='relatedServiceGroupId', example='13000'),
      relatedServiceGroupName?: string(name='relatedServiceGroupName'),
      relatedServiceId?: long(name='relatedServiceId', example='213123'),
      relatedServiceName?: string(name='relatedServiceName'),
      routeRuleId?: long(name='routeRuleId', example='10000'),
      routeRuleName?: string(name='routeRuleName'),
    }
  ](name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request', example='C4BE3837-1A13-413B-A225-2C88188E8A43'),
}

model GetIncidentListByIdListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIncidentListByIdListResponseBody(name='body'),
}

async function getIncidentListByIdList(request: GetIncidentListByIdListRequest): GetIncidentListByIdListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIncidentListByIdList', 'POST', '/incident/getIncidentListByIdList', 'json', false, 'json', request);
}

model GetIncidentStatisticsRequest {
  clientToken?: string(name='clientToken', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9', position='Body'),
}

model GetIncidentStatisticsResponseBody = {
  data?: {
    allFinish?: int32(name='allFinish', example='113'),
    allResponse?: int32(name='allResponse', example='12'),
    myFinish?: int32(name='myFinish', example='11'),
    myResponse?: int32(name='myResponse', example='1'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='requestId', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9'),
}

model GetIncidentStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIncidentStatisticsResponseBody(name='body'),
}

async function getIncidentStatistics(request: GetIncidentStatisticsRequest): GetIncidentStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIncidentStatistics', 'POST', '/incident/count', 'json', false, 'json', request);
}

model GetIncidentSubtotalCountRequest {
  clientToken?: string(name='clientToken', example='7C56D225-7C34-40BB-9624-C8BA449260E6', position='Body'),
  incidentIds: [ long ](name='incidentIds', position='Body'),
}

model GetIncidentSubtotalCountResponseBody = {
  data?: {
    requestId?: string(name='requestId', description='id of the request', example='24343424234'),
    subtotalCount?: map[string]any(name='subtotalCount', description='map', example='{12:12}'),
  }(name='data', description='data'),
}

model GetIncidentSubtotalCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIncidentSubtotalCountResponseBody(name='body'),
}

async function getIncidentSubtotalCount(request: GetIncidentSubtotalCountRequest): GetIncidentSubtotalCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIncidentSubtotalCount', 'POST', '/incident/subtotal/count', 'json', false, 'json', request);
}

model GetIntegrationConfigRequest {
  clientToken?: string(name='clientToken', example='601FA6A2-AC5C-4B59-BE11-378F887A6A11', position='Body'),
  integrationConfigId?: long(name='integrationConfigId', example='68', position='Body'),
}

model GetIntegrationConfigResponseBody = {
  data?: {
    accessKey?: string(name='accessKey', example='601FA6A2-AC5C-4B59-BE11-378F887A6A11'),
    integrationConfigId?: long(name='integrationConfigId', example='101'),
    isReceivedEvent?: boolean(name='isReceivedEvent', example='True'),
    monitorSourceId?: long(name='monitorSourceId', example='65'),
    monitorSourceName?: string(name='monitorSourceName', example='Zabbix'),
    monitorSourceShortName?: string(name='monitorSourceShortName', example='Zabbix'),
    status?: string(name='status', example='INTEGRATED'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request', example='601FA6A2-AC5C-4B59-BE11-378F887A6A11'),
}

model GetIntegrationConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIntegrationConfigResponseBody(name='body'),
}

async function getIntegrationConfig(request: GetIntegrationConfigRequest): GetIntegrationConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIntegrationConfig', 'POST', '/integrationConfig/detail', 'json', false, 'json', request);
}

model GetProblemRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  problemId: long(name='problemId', example='1', position='Body'),
}

model GetProblemResponseBody = {
  data?: {
    cancelProblemOperateLogs?: [ 
      {
        actionName?: string(name='actionName', example='取消故障'),
        actionTime?: string(name='actionTime', example='2020-09-08 15:38:38'),
        operator?: string(name='operator', example='王宇'),
        userId?: long(name='userId', example='66666'),
      }
    ](name='cancelProblemOperateLogs'),
    cancelReason?: long(name='cancelReason', example='取消理由'),
    cancelReasonDescription?: string(name='cancelReasonDescription', example='理由'),
    coordinationGroups?: [ 
      {
        isValid?: long(name='isValid'),
        serviceGroupId?: long(name='serviceGroupId', example='1'),
        serviceGroupName?: string(name='serviceGroupName', example='清扫大队'),
      }
    ](name='coordinationGroups'),
    createTime?: string(name='createTime', example='2010-03-09 15:53:45'),
    discoverTime?: string(name='discoverTime', example='2010-03-09 15:53:45'),
    durationTime?: long(name='durationTime', example='300000'),
    effectionServices?: [ 
      {
        description?: string(name='description', example='描述'),
        effectionLevel?: long(name='effectionLevel', example='P1'),
        effectionServiceId?: long(name='effectionServiceId', example='1'),
        effectionStatus?: int32(name='effectionStatus', example='RESTORED'),
        serviceDeleteType?: int32(name='serviceDeleteType'),
        serviceName?: string(name='serviceName', example='购物车'),
      }
    ](name='effectionServices'),
    feedback?: string(name='feedback', example='feedback'),
    handingProblemOperateLogs?: [ 
      {
        actionName?: string(name='actionName', example='取消故障'),
        actionTime?: string(name='actionTime', example='2010-03-09 15:53:45'),
        operator?: string(name='operator', example='王宇'),
        userId?: long(name='userId', example='233'),
        userIsValid?: long(name='userIsValid'),
      }
    ](name='handingProblemOperateLogs'),
    incidentId?: long(name='incidentId', example='130000032'),
    incidentNumber?: string(name='incidentNumber', example='I3443835000012016260833157948165'),
    isRuleTrigger?: boolean(name='isRuleTrigger'),
    mainHandler?: long(name='mainHandler', example='王宇'),
    mainHandlerId?: long(name='mainHandlerId', example='2000'),
    mainHandlerIsValid?: long(name='mainHandlerIsValid'),
    mainHandlerPhone?: string(name='mainHandlerPhone', example='1308987****'),
    preliminaryReason?: string(name='preliminaryReason', example='原因'),
    problemId: long(name='problemId', description='ID', example='1'),
    problemLevel?: int32(name='problemLevel', example='P1'),
    problemName?: string(name='problemName', example='故障'),
    problemNumber?: string(name='problemNumber', example='P34438300010030116260833538987481'),
    problemStatus?: int32(name='problemStatus', example='HANDLING'),
    progressSummary?: string(name='progressSummary', example='摘要'),
    progressSummaryRichTextId?: long(name='progressSummaryRichTextId', example='1231231'),
    recoveryTime?: string(name='recoveryTime', example='2010-03-09 15:53:45'),
    relatedServiceId?: long(name='relatedServiceId', example='1'),
    replayProblemOperateLogs?: [ 
      {
        actionName?: string(name='actionName', example='复盘故障'),
        actionTime?: string(name='actionTime', example='2020-08-08 15:39:39'),
        operator?: string(name='operator', example='周宇凡'),
        userId?: long(name='userId', example='2323'),
        userIsValid?: long(name='userIsValid'),
      }
    ](name='replayProblemOperateLogs'),
    replayingProblemOperateLogs?: [ 
      {
        actionName?: string(name='actionName', example='复盘故障'),
        actionTime?: string(name='actionTime', example='2020-08-08 15:39:39'),
        operator?: string(name='operator', example='刘杰'),
        userId?: long(name='userId', example='用户id'),
        userIsValid?: long(name='userIsValid'),
      }
    ](name='replayingProblemOperateLogs'),
    restoredProblemOperateLogs?: [ 
      {
        actionName?: string(name='actionName', example='恢复故障'),
        actionTime?: string(name='actionTime', example='2020-08-08 15:39:39'),
        operator?: string(name='operator', example='王宇'),
        userId?: long(name='userId', example='3232'),
        userIsValid?: long(name='userIsValid'),
      }
    ](name='restoredProblemOperateLogs'),
    serviceDeleteType?: int32(name='serviceDeleteType', description='serviceDeleteType'),
    serviceName?: string(name='serviceName', example='服务'),
    timelines?: [ 
      {
        keyNode?: string(name='keyNode', example='1,2,3,4,5,7,6,8,9,10'),
      }
    ](name='timelines'),
  }(name='data'),
  requestId?: string(name='requestId', example='C4BE3837-1A13-41VB-A225-2C88188E8A43'),
}

model GetProblemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProblemResponseBody(name='body'),
}

async function getProblem(request: GetProblemRequest): GetProblemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProblem', 'POST', '/problem/detail', 'json', false, 'json', request);
}

model GetProblemEffectionServiceRequest {
  clientToken?: string(name='clientToken', description='clientToken', example='e2d4306a-bf4d-4345-9ae6-158223c85dbd', position='Body'),
  effectionServiceId?: long(name='effectionServiceId', example='9', position='Body'),
  problemId?: long(name='problemId', example='46', position='Body'),
}

model GetProblemEffectionServiceResponseBody = {
  data?: {
    description?: string(name='description', example='ew'),
    effectionServiceId?: long(name='effectionServiceId', example='6442430'),
    level?: long(name='level', example='P2'),
    picUrl?: [ string ](name='picUrl'),
    serviceId?: long(name='serviceId', example='170000000'),
    serviceName?: string(name='serviceName', example='哈哈'),
    status?: long(name='status', example='UN_RECOVERED'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='requestId', example='e2d4306a-bf4d-4345-9ae6-158223c85dbd'),
}

model GetProblemEffectionServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProblemEffectionServiceResponseBody(name='body'),
}

async function getProblemEffectionService(request: GetProblemEffectionServiceRequest): GetProblemEffectionServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProblemEffectionService', 'POST', '/problem/process/effectionService/detail', 'json', false, 'json', request);
}

model GetProblemImprovementRequest {
  clientToken?: string(name='clientToken', example='4361a0e1-6747-4834-96ce-0c4840fd3812', position='Body'),
  problemId?: string(name='problemId', example='312312', position='Body'),
}

model GetProblemImprovementResponseBody = {
  data?: {
    customProblemReason?: string(name='customProblemReason'),
    discoverSource?: string(name='discoverSource', example='1'),
    dutyDepartmentId?: string(name='dutyDepartmentId', example='12312'),
    dutyDepartmentName?: string(name='dutyDepartmentName'),
    dutyUserId?: long(name='dutyUserId', example='231'),
    dutyUserIsValid?: long(name='dutyUserIsValid'),
    dutyUserName?: string(name='dutyUserName'),
    dutyUserPhone?: string(name='dutyUserPhone', example='13098898****'),
    injectionMode?: string(name='injectionMode', example='3'),
    isManual?: boolean(name='isManual', example='true'),
    measureList?: [ 
      {
        checkStandard?: string(name='checkStandard'),
        checkUserId?: long(name='checkUserId', example='12'),
        checkUserIsValid?: int32(name='checkUserIsValid'),
        checkUserName?: string(name='checkUserName'),
        content?: string(name='content'),
        directorId?: long(name='directorId', example='212'),
        directorIsValid?: int32(name='directorIsValid'),
        directorName?: string(name='directorName'),
        measureId?: long(name='measureId', example='12312'),
        planFinishTime?: string(name='planFinishTime', example='2021-05-01 00:00:00'),
        stalkerId?: long(name='stalkerId', example='3121'),
        stalkerIsValid?: int32(name='stalkerIsValid'),
        stalkerName?: string(name='stalkerName'),
        status?: string(name='status', example='UNIMPROVED'),
        type?: long(name='type', example='2'),
      }
    ](name='measureList'),
    monitorSourceName?: string(name='monitorSourceName', example='Zabbix'),
    problemId?: string(name='problemId', example='231231'),
    problemReason?: string(name='problemReason'),
    recentActivity?: string(name='recentActivity', example='2'),
    recoveryMode?: string(name='recoveryMode', example='2'),
    relationChanges?: string(name='relationChanges'),
    remark?: string(name='remark'),
    replayDutyUserId?: long(name='replayDutyUserId', example='23123'),
    replayDutyUserIsValid?: long(name='replayDutyUserIsValid'),
    replayDutyUserName?: string(name='replayDutyUserName'),
    replayDutyUserPhone?: string(name='replayDutyUserPhone', example='1308787****'),
    userReport?: long(name='userReport', example='1'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request', example='4361a0e1-6747-4834-96ce-0c4840fd3811'),
}

model GetProblemImprovementResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProblemImprovementResponseBody(name='body'),
}

async function getProblemImprovement(request: GetProblemImprovementRequest): GetProblemImprovementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProblemImprovement', 'POST', '/problem/improvement/detail', 'json', false, 'json', request);
}

model GetProblemPreviewRequest {
  clientToken?: string(name='clientToken', example='4361a0e1-6747-4834-96ce-0c4840f13812', position='Body'),
  effectServiceIds?: [ long ](name='effectServiceIds', position='Body'),
  incidentId?: long(name='incidentId', example='213123', position='Body'),
  problemId?: long(name='problemId', example='12312', position='Body'),
  problemLevel?: string(name='problemLevel', example='P2', position='Body'),
  problemNotifyType?: string(name='problemNotifyType', example='PROBLEM_NOTIFY', position='Body'),
  relatedServiceId?: long(name='relatedServiceId', example='21312', position='Body'),
  serviceGroupIds?: [ long ](name='serviceGroupIds', position='Body'),
}

model GetProblemPreviewResponseBody = {
  data?: {
    deAfterData?: string(name='deAfterData'),
    deBeforeData?: string(name='deBeforeData'),
    mail?: {
      count?: long(name='count', example='123'),
      users?: [ 
        {
          username?: string(name='username'),
        }
      ](name='users'),
    }(name='mail'),
    problem?: {
      coordinationGroups?: [ 
        {
          serviceGroupDescription?: string(name='serviceGroupDescription'),
          serviceGroupId?: long(name='serviceGroupId', example='1231'),
          serviceGroupName?: string(name='serviceGroupName'),
        }
      ](name='coordinationGroups'),
      createTime?: string(name='createTime', example='2021-02-21 00:00:00'),
      discoverTime?: string(name='discoverTime', example='2021-02-21 00:00:00'),
      effectionServices?: [ 
        {
          serviceId?: long(name='serviceId', example='1231'),
          serviceName?: string(name='serviceName'),
        }
      ](name='effectionServices'),
      isManual?: boolean(name='isManual', example='true'),
      isUpgrade?: boolean(name='isUpgrade', example='true'),
      mainHandlerId?: string(name='mainHandlerId', example='231'),
      mainHandlerName?: string(name='mainHandlerName'),
      preliminaryReason?: string(name='preliminaryReason'),
      problemId?: long(name='problemId', example='123123'),
      problemLevel?: string(name='problemLevel', example='P2'),
      problemName?: string(name='problemName'),
      problemStatus?: string(name='problemStatus', example='HANDLING'),
      progressSummary?: string(name='progressSummary'),
      progressSummaryRichTextId?: long(name='progressSummaryRichTextId', example='12312'),
      recoveryTime?: string(name='recoveryTime', example='2021-02-21 00:00:00'),
      relatedServiceId?: long(name='relatedServiceId', example='213123'),
      serviceName?: string(name='serviceName'),
    }(name='problem', description='object'),
    sms?: {
      count?: long(name='count', example='12'),
      users?: [ 
        {
          username?: string(name='username'),
        }
      ](name='users'),
    }(name='sms'),
    upAfterData?: string(name='upAfterData'),
    upBeforeData?: string(name='upBeforeData'),
    voice?: {
      count?: long(name='count', example='12'),
      users?: [ 
        {
          username?: string(name='username'),
        }
      ](name='users'),
    }(name='voice'),
    webhook?: {
      count?: long(name='count', example='32'),
      serviceGroups?: [ 
        {
          serviceName?: string(name='serviceName'),
        }
      ](name='serviceGroups'),
    }(name='webhook', description='webhook'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='requestId', example='4361a0e1-6747-4834-96ce-0c2840fd3812'),
}

model GetProblemPreviewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProblemPreviewResponseBody(name='body'),
}

async function getProblemPreview(request: GetProblemPreviewRequest): GetProblemPreviewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProblemPreview', 'POST', '/problem/preview', 'json', false, 'json', request);
}

model GetResourceStatisticsRequest {
  clientToken?: string(name='clientToken', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9', position='Body'),
}

model GetResourceStatisticsResponseBody = {
  data?: {
    alertCount?: int32(name='alertCount', example='123'),
    incidentCount?: int32(name='incidentCount', example='1331'),
    integrationCount?: int32(name='integrationCount', example='2211'),
    problemCount?: int32(name='problemCount', example='221'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9'),
}

model GetResourceStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceStatisticsResponseBody(name='body'),
}

async function getResourceStatistics(request: GetResourceStatisticsRequest): GetResourceStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetResourceStatistics', 'POST', '/config/resource/count', 'json', false, 'json', request);
}

model GetRichTextRequest {
  instanceId?: long(name='instanceId', example='INCIDENT 事件 ALERT告警 PROBLEM故障', position='Body'),
  instanceType?: string(name='instanceType', example='INCIDENT', position='Body'),
  richTextId?: long(name='richTextId', example='12221才', position='Body'),
}

model GetRichTextResponseBody = {
  data?: {
    instanceId?: long(name='instanceId', example='123123'),
    instanceType?: long(name='instanceType', example='0 事件 1告警 2 故障'),
    richText?: string(name='richText', example='这是一个富文本'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request', example='4361a0e1-6747-4834-96ce-0c4840fd3812'),
}

model GetRichTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRichTextResponseBody(name='body'),
}

async function getRichText(request: GetRichTextRequest): GetRichTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRichText', 'POST', '/rich/detail', 'json', false, 'json', request);
}

model GetRouteRuleRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  routeRuleId: long(name='routeRuleId', example='1', position='Body'),
}

model GetRouteRuleResponseBody = {
  data?: {
    assignObjectId?: long(name='assignObjectId', example='1000'),
    assignObjectName?: string(name='assignObjectName', example='刘德华'),
    assignObjectType?: string(name='assignObjectType', example='SERVICEGROUP'),
    childRuleRelation?: string(name='childRuleRelation', example='AND、OR'),
    convergenceFields?: [ string ](name='convergenceFields'),
    convergenceType?: int32(name='convergenceType'),
    coverageProblemLevels?: [ string ](name='coverageProblemLevels'),
    createTime?: string(name='createTime', example='2020-09-08 15:30:30'),
    effection?: string(name='effection', example='LOW'),
    enableStatus?: string(name='enableStatus', example='DISABLE'),
    eventRouteChildRules?: [ 
      {
        childConditionRelation?: long(name='childConditionRelation', example='1'),
        childRouteRuleId?: long(name='childRouteRuleId', example='1000'),
        conditions?: [ 
          {
            key?: string(name='key', example='alarmName'),
            operationSymbol?: string(name='operationSymbol', example='contain'),
            value?: string(name='value', example='Zabbix server'),
          }
        ](name='conditions'),
        isValidChildRule?: boolean(name='isValidChildRule', example='false'),
        monitorIntegrationConfigId?: long(name='monitorIntegrationConfigId', example='1'),
        monitorSourceId?: long(name='monitorSourceId', example='1'),
        monitorSourceName?: string(name='monitorSourceName', example='zabbix'),
        parentRuleId?: long(name='parentRuleId', example='1800'),
        problemLevel?: string(name='problemLevel'),
      }
    ](name='eventRouteChildRules'),
    incidentLevel?: string(name='incidentLevel', example='P1'),
    matchCount?: long(name='matchCount', example='3'),
    notifyChannelNames?: [ string ](name='notifyChannelNames'),
    notifyChannels?: [ string ](name='notifyChannels'),
    problemEffectionServices?: [ long ](name='problemEffectionServices'),
    problemLevelGroup?: map[string]DataProblemLevelGroupValue(name='problemLevelGroup'),
    relServiceDeleteType?: int32(name='relServiceDeleteType'),
    relatedServiceId?: long(name='relatedServiceId', example='1000'),
    relatedServiceName?: string(name='relatedServiceName', example='冲上云霄'),
    routeRuleId?: long(name='routeRuleId', example='180000000'),
    routeType?: string(name='routeType', example='INCIDENT'),
    ruleName?: string(name='ruleName', example='规则1'),
    timeWindow?: int32(name='timeWindow', example='3'),
    updateTime?: string(name='updateTime', example='2020-09-08 15:30:30'),
  }(name='data'),
  requestId?: string(name='requestId', example='6B9347ED-FD93-42B4-B9A4-7282962F5D6A'),
}

model GetRouteRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRouteRuleResponseBody(name='body'),
}

async function getRouteRule(request: GetRouteRuleRequest): GetRouteRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRouteRule', 'POST', '/routeRule/detail', 'json', false, 'json', request);
}

model GetServiceRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  serviceId: long(name='serviceId', example='1', position='Body'),
}

model GetServiceResponseBody = {
  data?: {
    escalationPlanId: long(name='escalationPlanId', example='1'),
    serviceDescription?: string(name='serviceDescription'),
    serviceGroupIdList?: [ long ](name='serviceGroupIdList'),
    serviceId?: long(name='serviceId', example='1'),
    serviceName?: string(name='serviceName'),
    updateTime?: string(name='updateTime', example='2020-03-08 12:53:53'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='C4BE3837-1A13-413B-A225-2C88188E8A43'),
}

model GetServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceResponseBody(name='body'),
}

async function getService(request: GetServiceRequest): GetServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetService', 'POST', '/services/detail', 'json', false, 'json', request);
}

model GetServiceGroupRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  serviceGroupId?: long(name='serviceGroupId', example='2323232', position='Body'),
}

model GetServiceGroupResponseBody = {
  data?: {
    createTime?: string(name='createTime', example='2020-08-08 10:00:00'),
    enableWebhook?: string(name='enableWebhook', example='ENABLE'),
    serviceGroupDescription?: string(name='serviceGroupDescription', example='服务描述'),
    serviceGroupId?: long(name='serviceGroupId', example='1000'),
    serviceGroupName?: string(name='serviceGroupName', example='冲上云霄'),
    updateTime?: string(name='updateTime', example='2020-05-03 15:39:39'),
    users?: [ 
      {
        phone?: string(name='phone', example='1390000****'),
        roleNameList?: [ string ](name='roleNameList'),
        serviceGroupId?: long(name='serviceGroupId', example='1'),
        userId?: long(name='userId', example='10'),
        userName?: string(name='userName', example='jack'),
      }
    ](name='users'),
    webhookLink?: string(name='webhookLink', example='wwwwwww'),
    webhookType?: string(name='webhookType', example='WEIXIN_GROUP'),
  }(name='data'),
  requestId?: string(name='requestId', example='C4BE3837-1A13-413B-A225-2C88188E8A43'),
}

model GetServiceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceGroupResponseBody(name='body'),
}

async function getServiceGroup(request: GetServiceGroupRequest): GetServiceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetServiceGroup', 'POST', '/services/group/detail', 'json', false, 'json', request);
}

model GetServiceGroupPersonSchedulingRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  endTime?: string(name='endTime', example='2020-09-31 00:00:00', position='Body'),
  serviceGroupId?: long(name='serviceGroupId', example='77777', position='Body'),
  startTime?: string(name='startTime', example='2020-09-01 00:00:00', position='Body'),
  userId?: long(name='userId', example='66666', position='Body'),
}

model GetServiceGroupPersonSchedulingResponseBody = {
  data?: map[string]any(name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='xxxxx'),
}

model GetServiceGroupPersonSchedulingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceGroupPersonSchedulingResponseBody(name='body'),
}

async function getServiceGroupPersonScheduling(request: GetServiceGroupPersonSchedulingRequest): GetServiceGroupPersonSchedulingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetServiceGroupPersonScheduling', 'POST', '/services/group/scheduling/user/getScheduling', 'json', false, 'json', request);
}

model GetServiceGroupSchedulingRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  serviceGroupId: long(name='serviceGroupId', example='9999', position='Body'),
}

model GetServiceGroupSchedulingResponseBody = {
  data?: {
    fastScheduling?: {
      dutyPlan?: string(name='dutyPlan', example='FAST_CHOICE'),
      id?: long(name='id', example='2222'),
      schedulingUsers?: [ 
        {
          schedulingObjectType?: string(name='schedulingObjectType'),
          schedulingOrder?: int32(name='schedulingOrder', example='1'),
          schedulingUserId?: long(name='schedulingUserId', example='66666'),
          schedulingUserIdList?: [ long ](name='schedulingUserIdList'),
          schedulingUserName?: string(name='schedulingUserName', example='张杰'),
        }
      ](name='schedulingUsers'),
      singleDuration?: int32(name='singleDuration', example='12'),
      singleDurationUnit?: string(name='singleDurationUnit', example='DAY'),
    }(name='fastScheduling'),
    fineScheduling?: {
      id?: long(name='id', description='1', example='精细排班ID'),
      period?: int32(name='period', description='1', example='循环周期'),
      periodUnit?: string(name='periodUnit', example='DAY'),
      schedulingFineShifts?: [ 
        {
          cycleOrder?: long(name='cycleOrder', example='1'),
          schedulingEndTime?: string(name='schedulingEndTime', example='2020-10-13'),
          schedulingObjectType?: string(name='schedulingObjectType'),
          schedulingOrder?: int32(name='schedulingOrder', example='1'),
          schedulingStartTime?: string(name='schedulingStartTime', example='2020-08-13'),
          schedulingUserId?: long(name='schedulingUserId', example='1111'),
          schedulingUserIdList?: [ long ](name='schedulingUserIdList'),
          schedulingUserName?: string(name='schedulingUserName', example='刘德华'),
          shiftName?: string(name='shiftName', example='早班'),
          skipOneDay?: boolean(name='skipOneDay', example='false'),
        }
      ](name='schedulingFineShifts'),
      schedulingTemplateFineShifts?: [ 
        {
          schedulingEndTime?: string(name='schedulingEndTime', example='2021-10-01 00:00:00'),
          schedulingObjectType?: string(name='schedulingObjectType'),
          schedulingOrder?: long(name='schedulingOrder', example='1'),
          schedulingStartTime?: string(name='schedulingStartTime', example='2021-09-01 00:00:00'),
          schedulingUserId?: string(name='schedulingUserId', example='1'),
          schedulingUserIdList?: [ long ](name='schedulingUserIdList'),
          schedulingUserName?: string(name='schedulingUserName'),
          shiftName?: string(name='shiftName'),
          skipOneDay?: boolean(name='skipOneDay', example='true'),
        }
      ](name='schedulingTemplateFineShifts'),
      shiftType?: string(name='shiftType', example='MORNING_NIGHT'),
    }(name='fineScheduling'),
    schedulingWay?: string(name='schedulingWay', example='FINE'),
    serviceGroupId?: long(name='serviceGroupId', example='99999'),
    users?: [ 
      {
        userId?: long(name='userId'),
        userName?: string(name='userName'),
      }
    ](name='users'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='xxxxxxxxxxxx'),
}

model GetServiceGroupSchedulingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceGroupSchedulingResponseBody(name='body'),
}

async function getServiceGroupScheduling(request: GetServiceGroupSchedulingRequest): GetServiceGroupSchedulingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetServiceGroupScheduling', 'POST', '/services/group/scheduling/detail', 'json', false, 'json', request);
}

model GetServiceGroupSchedulingPreviewRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  endTime?: string(name='endTime', example='2021-09-01 00:00:00', position='Body'),
  fastScheduling?: {
    dutyPlan?: string(name='dutyPlan', description='FAST_CHOICE', example='FAST_CHOICE'),
    schedulingUsers?: [ 
      {
        schedulingOrder?: int32(name='schedulingOrder', example='1'),
        schedulingUserId?: long(name='schedulingUserId', example='122222'),
      }
    ](name='schedulingUsers'),
    singleDuration?: int32(name='singleDuration', example='12'),
    singleDurationUnit?: string(name='singleDurationUnit', description='DAY', example='DAY'),
  }(name='fastScheduling', position='Body'),
  fineScheduling?: {
    period?: int32(name='period', example='2'),
    periodUnit?: string(name='periodUnit', example='DAY'),
    schedulingFineShifts?: [ 
      {
        schedulingEndTime?: string(name='schedulingEndTime', example='2020-10-13'),
        schedulingOrder?: long(name='schedulingOrder', example='1'),
        schedulingStartTime?: string(name='schedulingStartTime', example='2020-08-13'),
        shiftName?: string(name='shiftName', example='早班'),
      }
    ](name='schedulingFineShifts'),
    shiftType?: string(name='shiftType', example='MORNING_NIGHT'),
  }(name='fineScheduling', position='Body'),
  schedulingWay: string(name='schedulingWay', example='FAST', position='Body'),
  serviceGroupId: long(name='serviceGroupId', example='55555', position='Body'),
  startTime?: string(name='startTime', example='2021-11-01 00:00:00', position='Body'),
}

model GetServiceGroupSchedulingPreviewResponseBody = {
  data?: map[string]any(name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='xxxxxxxxx'),
}

model GetServiceGroupSchedulingPreviewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceGroupSchedulingPreviewResponseBody(name='body'),
}

async function getServiceGroupSchedulingPreview(request: GetServiceGroupSchedulingPreviewRequest): GetServiceGroupSchedulingPreviewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetServiceGroupSchedulingPreview', 'POST', '/services/group/scheduling/preview', 'json', false, 'json', request);
}

model GetServiceGroupSpecialPersonSchedulingRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  serviceGroupId?: long(name='serviceGroupId', example='77777', position='Body'),
  userId: long(name='userId', example='66666', position='Body'),
}

model GetServiceGroupSpecialPersonSchedulingResponseBody = {
  data?: [ 
    {
      schedulingDate?: string(name='schedulingDate', example='2021-08-17'),
      schedulingEndTime?: string(name='schedulingEndTime', example='2021-08-17  12:00:00'),
      schedulingStartTime?: string(name='schedulingStartTime', example='2021-08-17  00:00:00'),
      schedulingUserId?: long(name='schedulingUserId', example='111111'),
      serviceGroupId?: long(name='serviceGroupId', example='8888'),
      serviceGroupName?: string(name='serviceGroupName', example='刘德华'),
    }
  ](name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='xxxxxx'),
}

model GetServiceGroupSpecialPersonSchedulingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceGroupSpecialPersonSchedulingResponseBody(name='body'),
}

async function getServiceGroupSpecialPersonScheduling(request: GetServiceGroupSpecialPersonSchedulingRequest): GetServiceGroupSpecialPersonSchedulingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetServiceGroupSpecialPersonScheduling', 'POST', '/services/group/scheduling/getUserScheduling', 'json', false, 'json', request);
}

model GetSimilarIncidentStatisticsRequest {
  clientToken?: string(name='clientToken', example='7C56D225-7C34-40BB-9624-C8BA449260E6', position='Body'),
  createTime: string(name='createTime', example='2021-09-09 09:09:09', position='Body'),
  events: [ string ](name='events', position='Body'),
  incidentId: long(name='incidentId', example='32', position='Body'),
  incidentTitle: string(name='incidentTitle', example='xxx事件', position='Body'),
  relatedServiceId: long(name='relatedServiceId', example='23', position='Body'),
}

model GetSimilarIncidentStatisticsResponseBody = {
  data?: {
    countInSevenDays?: long(name='countInSevenDays', example='8'),
    countInSixMonths?: long(name='countInSixMonths', example='43'),
    dailySimilarIncidents?: [ 
      {
        commitment?: long(name='commitment', example='0'),
        date?: string(name='date', example='2021-03-07'),
        day?: long(name='day', example='1'),
        month?: long(name='month', example='2'),
        similarIncidents?: [ 
          {
            assignUserId?: long(name='assignUserId', example='433'),
            assignUserName?: string(name='assignUserName', example='张老三'),
            createTime?: string(name='createTime', example='2021-09-09 09:09:09'),
            durationTime?: long(name='durationTime', example='6789765678'),
            finishReason?: long(name='finishReason', example='1'),
            finishReasonDescription?: string(name='finishReasonDescription', example='xx原因'),
            finishSolutionDescription?: string(name='finishSolutionDescription', example='xxx方案'),
            incidentFinishSolution?: long(name='incidentFinishSolution', example='5'),
            incidentId?: long(name='incidentId', example='5435'),
            incidentNumber?: string(name='incidentNumber', example='I234432'),
            incidentTitle?: string(name='incidentTitle', example='线性代数发多少'),
            relatedRouteRuleId?: long(name='relatedRouteRuleId', example='334'),
            relatedRouteRuleName?: string(name='relatedRouteRuleName', example='xxx规则'),
            similarScore?: string(name='similarScore', example='1003.567'),
          }
        ](name='similarIncidents'),
        week?: string(name='week', example='1'),
      }
    ](name='dailySimilarIncidents', example='{}'),
    requestId?: string(name='requestId', description='id of the request', example='uyihg6789'),
    topFiveIncidents?: [ 
      {
        assignUserId?: string(name='assignUserId', example='43'),
        assignUserName?: string(name='assignUserName', example='张老三'),
        createTime?: string(name='createTime', example='2021-09-09 09:09:09'),
        durationTime?: long(name='durationTime', example='6787678767'),
        finishReason?: long(name='finishReason', example='2'),
        finishReasonDescription?: string(name='finishReasonDescription', example='xxxx原因'),
        finishSolutionDescription?: string(name='finishSolutionDescription', example='xxx方案'),
        incidentFinishSolution?: long(name='incidentFinishSolution', example='5'),
        incidentId?: long(name='incidentId', example='32'),
        incidentNumber?: string(name='incidentNumber', example='I34324'),
        incidentTitle?: string(name='incidentTitle', example='xxx事件'),
        relatedRouteRuleId?: long(name='relatedRouteRuleId', example='4343'),
        relatedRouteRuleName?: string(name='relatedRouteRuleName', example='xxx'),
        similarScore?: string(name='similarScore', example='1992.21'),
      }
    ](name='topFiveIncidents', description='topFiveIncidents'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='id of the request', example='7C56D225-7C34-40BB-9624-C8BA449260E6'),
}

model GetSimilarIncidentStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSimilarIncidentStatisticsResponseBody(name='body'),
}

async function getSimilarIncidentStatistics(request: GetSimilarIncidentStatisticsRequest): GetSimilarIncidentStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSimilarIncidentStatistics', 'POST', '/incident/similarIncident/statistics', 'json', false, 'json', request);
}

model GetSubscriptionRequest {
  notFilterScopeObjectDeleted?: boolean(name='notFilterScopeObjectDeleted', position='Body'),
  subscriptionId?: long(name='subscriptionId', example='10', position='Body'),
}

model GetSubscriptionResponseBody = {
  data?: {
    endTime?: string(name='endTime', example='2021-08-9 10:10:10'),
    expiredType?: string(name='expiredType', example='LONG_TERM'),
    notifyObjectList?: [ 
      {
        id?: long(name='id', example='23'),
        name?: string(name='name', example='TestName'),
        notifyObjectId?: long(name='notifyObjectId', example='19'),
        notifyObjectType?: long(name='notifyObjectType', example='USER'),
      }
    ](name='notifyObjectList'),
    notifyObjectType?: string(name='notifyObjectType', example='USER'),
    notifyStrategyList?: [ 
      {
        instanceType?: long(name='instanceType', example='INCIDENT'),
        strategies?: [ 
          {
            channels?: string(name='channels', example='SMS'),
            conditions?: [ 
              {
                action?: string(name='action', example='INCIDENT_TRIGGER'),
                effection?: string(name='effection', example='HIGH'),
                level?: string(name='level', example='P1'),
                problemNotifyType?: string(name='problemNotifyType', example='PROBLEM_NOTIFY'),
              }
            ](name='conditions'),
            id?: long(name='id', example='12'),
            periodChannel?: {
              nonWorkday?: string(name='nonWorkday', example='DINGDING'),
              workday?: string(name='workday', example='DINGDING'),
            }(name='periodChannel'),
          }
        ](name='strategies'),
      }
    ](name='notifyStrategyList'),
    period?: string(name='period', example='1个月'),
    scope?: string(name='scope', example='SERVICE'),
    scopeObjectList?: [ 
      {
        id?: long(name='id', example='10'),
        isValid?: long(name='isValid'),
        scope?: string(name='scope', example='SERVICE'),
        scopeObject?: string(name='scopeObject'),
        scopeObjectId?: long(name='scopeObjectId', example='10'),
      }
    ](name='scopeObjectList', description='Array'),
    startTime?: string(name='startTime', example='2020-05-9 10:10:10'),
    status?: string(name='status', example='ENABLE'),
    subscriptionId?: long(name='subscriptionId', example='68'),
    subscriptionTitle?: string(name='subscriptionTitle', example='newTitle'),
  }(name='data', description='Object'),
  requestId?: string(name='requestId', description='requestId', example='10REQUES-AC5C-4B59-BE11-378F117A6A88'),
}

model GetSubscriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSubscriptionResponseBody(name='body'),
}

async function getSubscription(request: GetSubscriptionRequest): GetSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSubscription', 'POST', '/notify/subscription/detail', 'json', false, 'json', request);
}

model GetTenantApplicationRequest {
  clientToken: string(name='clientToken', example='7C56D225-7C34-40BB-9624-C8BA449260E6', position='Body'),
}

model GetTenantApplicationResponseBody = {
  data?: {
    bizId?: string(name='bizId', example='7356'),
    channel?: string(name='channel', example='DINGDING'),
    corporationId?: string(name='corporationId', example='ding81913c*'),
    originalCorpId?: string(name='originalCorpId'),
    progress?: string(name='progress', example='NOT_OPEN'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='id of the request', example='10REQUES-AC5C-4B59-BE11-378F117A6A88'),
}

model GetTenantApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTenantApplicationResponseBody(name='body'),
}

async function getTenantApplication(request: GetTenantApplicationRequest): GetTenantApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTenantApplication', 'POST', '/mobileApp/detail', 'json', false, 'json', request);
}

model GetTenantStatusRequest {
  tenantRamId: long(name='tenantRamId', position='Body'),
}

model GetTenantStatusResponseBody = {
  data?: {
    tenantStatus?: int32(name='tenantStatus'),
  }(name='data'),
  requestId?: string(name='requestId'),
}

model GetTenantStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTenantStatusResponseBody(name='body'),
}

async function getTenantStatus(request: GetTenantStatusRequest): GetTenantStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTenantStatus', 'POST', '/tenant/getTenantStatus', 'json', false, 'json', request);
}

model GetUserRequest {
  clientToken?: string(name='clientToken', example='c26f36de-1ec8-496a-a828-880676c5ef81', position='Body'),
  userId: long(name='userId', example='63', position='Body'),
}

model GetUserResponseBody = {
  data?: {
    accountType?: string(name='accountType', example='SUB'),
    createTime?: string(name='createTime', example='2021-09-09 09:09:09'),
    email?: string(name='email', description='email', example='5678***@qq.com'),
    isActive?: long(name='isActive'),
    isEditableUser?: boolean(name='isEditableUser', example='true'),
    isRelated?: string(name='isRelated', example='RELATE'),
    phone?: string(name='phone', example='1390000****'),
    ramId?: string(name='ramId', description='ramId', example='1344383'),
    roleIdList?: [ long ](name='roleIdList'),
    roleNameList?: [ string ](name='roleNameList'),
    serviceGroups?: [ 
      {
        name?: string(name='name', example='山口组'),
        serviceGroupId?: long(name='serviceGroupId', example='10000'),
      }
    ](name='serviceGroups'),
    userId?: long(name='userId', example='63'),
    username?: string(name='username'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='c26f36de-1ec8-496a-a828-880676c5ef81'),
}

model GetUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserResponseBody(name='body'),
}

async function getUser(request: GetUserRequest): GetUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUser', 'POST', '/user/getUser', 'json', false, 'json', request);
}

model GetUserGuideStatusRequest {
  clientToken?: string(name='clientToken', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9', position='Body'),
}

model GetUserGuideStatusResponseBody = {
  data?: map[string]any(name='data', description='map', example='{   "data": {     "monitorGuide": false,     "userRamId": 1344371,     "serviceGuide": false,     "noticeGuide": false,     "userGuide": true,     "serviceGroupGuide": false,     "routeRuleGuide": false,     "incidentGuide": true   }'),
  requestId?: string(name='requestId', description='Id of the request', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9'),
}

model GetUserGuideStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserGuideStatusResponseBody(name='body'),
}

async function getUserGuideStatus(request: GetUserGuideStatusRequest): GetUserGuideStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUserGuideStatus', 'POST', '/user/guide/status', 'json', false, 'json', request);
}

model ListAlertsRequest {
  alertLevel?: string(name='alertLevel', example='P1', position='Body'),
  alertName?: string(name='alertName', example='报警', position='Body'),
  alertSourceName?: string(name='alertSourceName', example='流转规则A', position='Body'),
  endTime?: string(name='endTime', description='2020-09-10 21:00:00', example='2020-10-01 23:59:59', position='Body'),
  monitorSourceId?: string(name='monitorSourceId', position='Body'),
  pageNumber?: long(name='pageNumber', example='1', position='Body'),
  pageSize?: long(name='pageSize', example='10', position='Body'),
  relatedServiceId?: long(name='relatedServiceId', example='1', position='Body'),
  ruleName?: string(name='ruleName', example='zabbix', position='Body'),
  startTime?: string(name='startTime', description='2020-09-10 13:00:00', example='2020-10-01 00:00:00', position='Body'),
}

model ListAlertsResponseBody = {
  data?: [ 
    {
      alertId?: long(name='alertId', example='20000'),
      alertLevel?: string(name='alertLevel', example='P1'),
      alertNumber?: string(name='alertNumber', example='A123123123'),
      alertSourceName?: string(name='alertSourceName', example='zabbix'),
      createTime?: string(name='createTime', example='2020-03-05 15:53:55'),
      firstEventTime?: string(name='firstEventTime', example='2021-09-08 18:30:00'),
      monitorSourceName?: string(name='monitorSourceName'),
      relServiceDeleteType?: int32(name='relServiceDeleteType'),
      relatedServiceName?: string(name='relatedServiceName', example='服务A'),
      routeRuleDeleteType?: int32(name='routeRuleDeleteType'),
      routeRuleId?: long(name='routeRuleId', example='10000'),
      routeRuleName?: string(name='routeRuleName', example='流转规则'),
      sourceEventCount?: long(name='sourceEventCount', example='10'),
      title?: string(name='title', example='报警'),
    }
  ](name='data'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  requestId?: string(name='requestId', example='C4BE3837-1A13-413B-A225-2C88188E8A43'),
  totalCount?: long(name='totalCount', example='100'),
}

model ListAlertsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAlertsResponseBody(name='body'),
}

async function listAlerts(request: ListAlertsRequest): ListAlertsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAlerts', 'POST', '/alerts/list', 'json', false, 'json', request);
}

model ListByMonitorSourceIdRequest {
  monitorSourceId?: string(name='monitorSourceId', position='Body'),
}

model ListByMonitorSourceIdResponseBody = {
  data?: [ 
    {
      id?: long(name='id'),
      ruleName?: string(name='ruleName'),
    }
  ](name='data'),
  requestId?: string(name='requestId', example='10REQUES-AC5C-4B59-BE11-378F117A6A88'),
}

model ListByMonitorSourceIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListByMonitorSourceIdResponseBody(name='body'),
}

async function listByMonitorSourceId(request: ListByMonitorSourceIdRequest): ListByMonitorSourceIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListByMonitorSourceId', 'POST', '/routeRule/listByMonitorSourceId', 'json', false, 'json', request);
}

model ListChartDataForServiceGroupRequest {
  clientToken?: string(name='clientToken', description='clientToken', example='23es23s32xas23', position='Body'),
  endTime?: string(name='endTime', example='2021-10-09', position='Body'),
  startTime?: string(name='startTime', example='2021-09-09', position='Body'),
}

model ListChartDataForServiceGroupResponseBody = {
  data?: [ 
    {
      effectionLevel?: map[string]any(name='effectionLevel', example='{"P1HIGH":32}'),
      escalationIncidentCount?: long(name='escalationIncidentCount', example='43'),
      incidentCount?: long(name='incidentCount', example='32'),
      meanTimeToAcknowledge?: long(name='meanTimeToAcknowledge', example='323'),
      meanTimeToRepair?: long(name='meanTimeToRepair', example='4343'),
      time?: string(name='time', example='2021-09-09'),
      totalMeanTimeToAcknowledge?: long(name='totalMeanTimeToAcknowledge', example='3334'),
      totalMeanTimeToRepair?: long(name='totalMeanTimeToRepair', example='4343'),
      unAcknowledgedEscalationIncidentCount?: long(name='unAcknowledgedEscalationIncidentCount', example='23'),
      unFinishEscalationIncidentCount?: long(name='unFinishEscalationIncidentCount', example='23'),
    }
  ](name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request', example='1231212'),
}

model ListChartDataForServiceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListChartDataForServiceGroupResponseBody(name='body'),
}

async function listChartDataForServiceGroup(request: ListChartDataForServiceGroupRequest): ListChartDataForServiceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListChartDataForServiceGroup', 'POST', '/statistics/chartDataForServiceGroup/', 'json', false, 'json', request);
}

model ListChartDataForUserRequest {
  clientToken?: string(name='clientToken', description='clientToken', example='3232dsd32sd32gr', position='Body'),
  endTime?: string(name='endTime', example='2021-10-09', position='Body'),
  startTime?: string(name='startTime', example='2021-09-09', position='Body'),
}

model ListChartDataForUserResponseBody = {
  data?: [ 
    {
      effectionLevel?: map[string]any(name='effectionLevel', example='{"P1HIGH":32}'),
      escalationIncidentCount?: long(name='escalationIncidentCount', example='43'),
      incidentCount?: long(name='incidentCount', example='32'),
      meanTimeToAcknowledge?: long(name='meanTimeToAcknowledge', example='323'),
      meanTimeToRepair?: long(name='meanTimeToRepair', example='4343'),
      time?: string(name='time', example='2021-09-09'),
      totalMeanTimeToAcknowledge?: long(name='totalMeanTimeToAcknowledge', example='3334'),
      totalMeanTimeToRepair?: long(name='totalMeanTimeToRepair', example='4343'),
      unAcknowledgedEscalationIncidentCount?: long(name='unAcknowledgedEscalationIncidentCount', example='23'),
      unFinishEscalationIncidentCount?: long(name='unFinishEscalationIncidentCount', example='23'),
    }
  ](name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request', example='1231212'),
}

model ListChartDataForUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListChartDataForUserResponseBody(name='body'),
}

async function listChartDataForUser(request: ListChartDataForUserRequest): ListChartDataForUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListChartDataForUser', 'POST', '/statistics/chartDataForUser/', 'json', false, 'json', request);
}

model ListConfigsRequest {
  clientToken?: string(name='clientToken', example='FD200FAE-E98F-496E-BFE6-CDE61E59A2E9', position='Body'),
}

model ListConfigsResponseBody = {
  data?: map[string][ DataValue   ](name='data', description='data'),
  requestId?: string(name='requestId', description='requestId', example='uuid'),
}

model ListConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConfigsResponseBody(name='body'),
}

async function listConfigs(request: ListConfigsRequest): ListConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListConfigs', 'POST', '/config/all', 'json', false, 'json', request);
}

model ListDataReportForServiceGroupRequest {
  endTime?: string(name='endTime', example='2021-09-30', position='Body'),
  serviceGroupName?: string(name='serviceGroupName', example='A服务组', position='Body'),
  startTime?: string(name='startTime', example='2021-09-09', position='Body'),
}

model ListDataReportForServiceGroupResponseBody = {
  data?: [ 
    {
      escalationIncidentCount?: long(name='escalationIncidentCount', example='100'),
      finishIncidentCount?: long(name='finishIncidentCount', example='111'),
      finishProportion?: string(name='finishProportion', example='19%'),
      incidentCount?: long(name='incidentCount', example='1'),
      meanTimeToAcknowledge?: long(name='meanTimeToAcknowledge', description='MRRA', example='3分19秒'),
      meanTimeToRepair?: long(name='meanTimeToRepair', description='MTTR', example='3分19秒'),
      serviceGroupId?: long(name='serviceGroupId', example='100'),
      serviceGroupName?: string(name='serviceGroupName', example='服务组'),
      unAcknowledgedEscalationIncidentCount?: long(name='unAcknowledgedEscalationIncidentCount', example='200'),
      unFinishEscalationIncidentCount?: long(name='unFinishEscalationIncidentCount', example='200'),
    }
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSIze?: long(name='pageSIze', example='10'),
  requestId?: string(name='requestId', description='Id of the request', example='xxxxxxx'),
  totalCount?: long(name='totalCount', example='100'),
}

model ListDataReportForServiceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataReportForServiceGroupResponseBody(name='body'),
}

async function listDataReportForServiceGroup(request: ListDataReportForServiceGroupRequest): ListDataReportForServiceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataReportForServiceGroup', 'POST', '/statistics/listDataReportForServiceGroup', 'json', false, 'json', request);
}

model ListDataReportForUserRequest {
  endTime?: string(name='endTime', example='2021-09-30', position='Body'),
  pageNumber?: long(name='pageNumber', example='1', position='Body'),
  pageSize?: long(name='pageSize', example='100', position='Body'),
  startTime?: string(name='startTime', example='2021-09-01', position='Body'),
}

model ListDataReportForUserResponseBody = {
  data?: [ 
    {
      distributionIncidentCount?: long(name='distributionIncidentCount', example='100'),
      escalationIncidentCount?: long(name='escalationIncidentCount', example='100'),
      finishIncidentNumber?: long(name='finishIncidentNumber', example='100'),
      finishProportion?: string(name='finishProportion', example='20%'),
      meanTimeToAcknowledge?: string(name='meanTimeToAcknowledge', description='MRRA', example='3分50秒'),
      meanTimeToRepair?: string(name='meanTimeToRepair', description='MTTA', example='3分50秒'),
      unAcknowledgedEscalationIncidentCount?: long(name='unAcknowledgedEscalationIncidentCount', example='100'),
      unDistributionIncidentCount?: long(name='unDistributionIncidentCount', example='100'),
      unFinishEscalationIncidentCount?: long(name='unFinishEscalationIncidentCount', example='100'),
      userId?: long(name='userId', example='1111'),
      userName?: string(name='userName', example='wy'),
    }
  ](name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='xxxx'),
  totalCount?: long(name='totalCount', example='100'),
}

model ListDataReportForUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataReportForUserResponseBody(name='body'),
}

async function listDataReportForUser(request: ListDataReportForUserRequest): ListDataReportForUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataReportForUser', 'POST', '/statistics/listDataReportForUser', 'json', false, 'json', request);
}

model ListDictionariesRequest {
  clientToken?: string(name='clientToken', example='601FA6A2-AC5C-4B59-BE11-378F887A6A11', position='Body'),
}

model ListDictionariesResponseBody = {
  data?: map[string][ DataValue   ](name='data', description='data'),
  requestId?: string(name='requestId', description='id of the request', example='10REQUES-AC5C-4B59-BE11-378F117A6A88'),
}

model ListDictionariesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDictionariesResponseBody(name='body'),
}

async function listDictionaries(request: ListDictionariesRequest): ListDictionariesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDictionaries', 'POST', '/dict/list', 'json', false, 'json', request);
}

model ListEscalationPlanServicesRequest {
  clientToken?: string(name='clientToken', description='clientToken', example='A5A1FEAE-9C47-011C-9C73-A376BC2REQUEST', position='Body'),
}

model ListEscalationPlanServicesResponseBody = {
  data?: [ 
    {
      scope?: string(name='scope', example='SERVICE'),
      scopeObjectId?: long(name='scopeObjectId', example='23'),
    }
  ](name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request', example='A5A1FEAE-9C47-011C-9C73-A376BC2REQUEST'),
}

model ListEscalationPlanServicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEscalationPlanServicesResponseBody(name='body'),
}

async function listEscalationPlanServices(request: ListEscalationPlanServicesRequest): ListEscalationPlanServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEscalationPlanServices', 'POST', '/escalationPlan/services', 'json', false, 'json', request);
}

model ListEscalationPlansRequest {
  clientToken?: string(name='clientToken', example='A5A1FEAE-9C47-011C-9C73-A376BC2REQUEST', position='Body'),
  escalationPlanName?: string(name='escalationPlanName', example='xxx', position='Body'),
  isGlobal?: boolean(name='isGlobal', position='Body'),
  pageNumber?: long(name='pageNumber', example='1', position='Body'),
  pageSize?: long(name='pageSize', example='10', position='Body'),
  serviceName?: string(name='serviceName', example='ssxx', position='Body'),
  status?: string(name='status', position='Body'),
}

model ListEscalationPlansResponseBody = {
  data?: [ 
    {
      escalationPlanId?: long(name='escalationPlanId', example='43'),
      escalationPlanName?: string(name='escalationPlanName', example='升级计划2345'),
      escalationPlanScopeObjects?: [ 
        {
          scope?: string(name='scope', example='SERVICE'),
          scopeObjectDeletedType?: int32(name='scopeObjectDeletedType'),
          scopeObjectId?: long(name='scopeObjectId', example='23'),
          scopeObjectName?: string(name='scopeObjectName', example='某服务1'),
        }
      ](name='escalationPlanScopeObjects'),
      isGlobal?: boolean(name='isGlobal'),
      modifyTime?: string(name='modifyTime', example='2021-09-09 09:09:09'),
      status?: string(name='status', example='ENABLE'),
    }
  ](name='data', description='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='10'),
  requestId?: string(name='requestId', description='Id of the request', example='A5A1FEAE-9C47-011C-9C73-A376BC2REQUEST'),
  totalCount?: long(name='totalCount', example='878'),
}

model ListEscalationPlansResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEscalationPlansResponseBody(name='body'),
}

async function listEscalationPlans(request: ListEscalationPlansRequest): ListEscalationPlansResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEscalationPlans', 'POST', '/escalationPlan/list', 'json', false, 'json', request);
}

model ListEscalationPlansByNoticeObjectRequest {
  noticeObjectId?: long(name='noticeObjectId', position='Body'),
  noticeObjectType?: long(name='noticeObjectType', position='Body'),
}

model ListEscalationPlansByNoticeObjectResponseBody = {
  data?: [ 
    {
      escalationPlanId?: long(name='escalationPlanId'),
      escalationPlanName?: string(name='escalationPlanName'),
      escalationPlanScopeObjects?: [ 
        {
          scope?: string(name='scope'),
          scopeObjectDeletedType?: int32(name='scopeObjectDeletedType'),
          scopeObjectId?: long(name='scopeObjectId'),
          scopeObjectName?: string(name='scopeObjectName'),
        }
      ](name='escalationPlanScopeObjects'),
      modifyTime?: string(name='modifyTime'),
      status?: string(name='status'),
    }
  ](name='data'),
  requestId?: string(name='requestId'),
}

model ListEscalationPlansByNoticeObjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEscalationPlansByNoticeObjectResponseBody(name='body'),
}

async function listEscalationPlansByNoticeObject(request: ListEscalationPlansByNoticeObjectRequest): ListEscalationPlansByNoticeObjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEscalationPlansByNoticeObject', 'POST', '/escalationPlan/listByNoticeObject', 'json', false, 'json', request);
}

model ListIncidentDetailEscalationPlansRequest {
  clientToken?: string(name='clientToken', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9', position='Body'),
  incidentId?: long(name='incidentId', example='2311', position='Body'),
}

model ListIncidentDetailEscalationPlansResponseBody = {
  data?: {
    convergenceEscalationPlan?: [ 
      {
        escalationPlanType?: string(name='escalationPlanType', example='UN_ACKNOWLEDGE'),
        noticeChannels?: [ string ](name='noticeChannels'),
        noticeObjectList?: [ 
          {
            noticeObjectId?: long(name='noticeObjectId', example='31231'),
            noticeObjectName?: string(name='noticeObjectName', example='小华'),
            noticeObjectPhone?: string(name='noticeObjectPhone', example='130xxxxxxxxx'),
            roleNameList?: [ string ](name='roleNameList'),
          }
        ](name='noticeObjectList'),
        noticeTime?: long(name='noticeTime', example='10'),
        serviceGroupList?: [ 
          {
            id?: long(name='id', example='1231'),
            name?: string(name='name', example='服务组A'),
          }
        ](name='serviceGroupList'),
        startTime?: long(name='startTime', example='1629872386027'),
        status?: string(name='status', example='UPGRADE'),
      }
    ](name='convergenceEscalationPlan'),
    escalationPlanId?: long(name='escalationPlanId', example='312123'),
    escalationPlanName?: string(name='escalationPlanName', example='升级策略A'),
    nuAcknowledgeEscalationPlan?: [ 
      {
        escalationPlanType?: string(name='escalationPlanType', example='UN_ACKNOWLEDGE'),
        noticeChannels?: [ string ](name='noticeChannels'),
        noticeObjectList?: [ 
          {
            noticeObjectId?: long(name='noticeObjectId', example='31231'),
            noticeObjectName?: string(name='noticeObjectName', example='小华'),
            noticeObjectPhone?: string(name='noticeObjectPhone', example='130xxxxxxxxx'),
            roleNameList?: [ string ](name='roleNameList'),
          }
        ](name='noticeObjectList'),
        noticeRoleList?: [ long ](name='noticeRoleList'),
        noticeRoleObjectList?: [ 
          {
            id?: long(name='id'),
            name?: string(name='name'),
          }
        ](name='noticeRoleObjectList'),
        noticeTime?: long(name='noticeTime', example='10'),
        serviceGroupList?: [ 
          {
            id?: long(name='id', example='1231'),
            name?: string(name='name', example='服务组A'),
          }
        ](name='serviceGroupList'),
        startTime?: long(name='startTime', example='1629872386027'),
        status?: string(name='status', example='UPGRADE'),
      }
    ](name='nuAcknowledgeEscalationPlan'),
    unFinishEscalationPlan?: [ 
      {
        escalationPlanType?: string(name='escalationPlanType', example='UN_FINISH'),
        noticeChannels?: [ string ](name='noticeChannels'),
        noticeObjectList?: [ 
          {
            noticeObjectId?: long(name='noticeObjectId', example='2311'),
            noticeObjectName?: string(name='noticeObjectName', example='小明'),
            noticeObjectPhone?: string(name='noticeObjectPhone', example='130xxxxxxxx'),
            roleNameList?: [ string ](name='roleNameList'),
          }
        ](name='noticeObjectList'),
        noticeRoleList?: [ long ](name='noticeRoleList'),
        noticeRoleObjectList?: [ 
          {
            id?: long(name='id'),
            name?: string(name='name'),
          }
        ](name='noticeRoleObjectList'),
        noticeTime?: int32(name='noticeTime', example='10'),
        serviceGroupList?: [ 
          {
            id?: long(name='id', example='123132'),
            name?: string(name='name', example='服务组A'),
          }
        ](name='serviceGroupList'),
        startTime?: long(name='startTime', example='1629872386027'),
        status?: string(name='status', example='UPGRADE'),
      }
    ](name='unFinishEscalationPlan'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9'),
}

model ListIncidentDetailEscalationPlansResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIncidentDetailEscalationPlansResponseBody(name='body'),
}

async function listIncidentDetailEscalationPlans(request: ListIncidentDetailEscalationPlansRequest): ListIncidentDetailEscalationPlansResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIncidentDetailEscalationPlans', 'POST', '/incident/detail/escalation', 'json', false, 'json', request);
}

model ListIncidentDetailTimelinesRequest {
  clientToken?: string(name='clientToken', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9', position='Body'),
  idSort?: string(name='idSort', position='Body'),
  incidentId?: long(name='incidentId', example='123', position='Body'),
  pageNumber?: long(name='pageNumber', example='1', position='Body'),
  pageSize?: long(name='pageSize', example='10', position='Body'),
}

model ListIncidentDetailTimelinesResponseBody = {
  data?: [ 
    {
      action?: string(name='action', example='INCIDENT_ADD'),
      createTime?: string(name='createTime'),
      description?: string(name='description'),
      incidentId?: long(name='incidentId'),
      relRouteRuleDeleteType?: int32(name='relRouteRuleDeleteType'),
      relatedServiceName?: string(name='relatedServiceName'),
      remark?: string(name='remark'),
      snapshotData?: string(name='snapshotData'),
      title?: string(name='title'),
    }
  ](name='data', description='data'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  requestId?: string(name='requestId', description='Id of the request', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9'),
  totalCount?: int32(name='totalCount'),
}

model ListIncidentDetailTimelinesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIncidentDetailTimelinesResponseBody(name='body'),
}

async function listIncidentDetailTimelines(request: ListIncidentDetailTimelinesRequest): ListIncidentDetailTimelinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIncidentDetailTimelines', 'POST', '/incident/detail/timeline', 'json', false, 'json', request);
}

model ListIncidentSubtotalsRequest {
  clientToken?: string(name='clientToken', example='FD200FAE-E98F-496E-BFE6-4CE62E59A2E9', position='Body'),
  incidentId?: long(name='incidentId', example='3123', position='Body'),
}

model ListIncidentSubtotalsResponseBody = {
  data?: [ 
    {
      createTime?: string(name='createTime', example='2021-06-23 00:00:00'),
      createUserId?: long(name='createUserId', example='12312'),
      createUserName?: string(name='createUserName'),
      createUserPhone?: string(name='createUserPhone', example='130****1111'),
      description?: string(name='description'),
    }
  ](name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9'),
}

model ListIncidentSubtotalsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIncidentSubtotalsResponseBody(name='body'),
}

async function listIncidentSubtotals(request: ListIncidentSubtotalsRequest): ListIncidentSubtotalsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIncidentSubtotals', 'POST', '/incident/list/subtotal', 'json', false, 'json', request);
}

model ListIncidentTimelinesRequest {
  clientToken?: string(name='clientToken', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9', position='Body'),
  pageNumber?: long(name='pageNumber', example='1', position='Body'),
  pageSize?: long(name='pageSize', example='10', position='Body'),
}

model ListIncidentTimelinesResponseBody = {
  data?: [ 
    {
      action?: string(name='action', example='INCIDENT_ADD'),
      createTime?: string(name='createTime', example='2021-06-23 00:00:00'),
      description?: long(name='description'),
      incidentId?: long(name='incidentId', example='3321'),
      incidentNumber?: string(name='incidentNumber', example='I13002001'),
      incidentTitle?: string(name='incidentTitle'),
      relRouteRuleDeleteType?: int32(name='relRouteRuleDeleteType'),
      relatedServiceName?: string(name='relatedServiceName'),
      remark?: string(name='remark'),
      snapshotData?: string(name='snapshotData'),
      title?: string(name='title'),
    }
  ](name='data', description='data'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  requestId?: string(name='requestId', description='requestId', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9'),
  totalCount?: int32(name='totalCount', example='132'),
}

model ListIncidentTimelinesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIncidentTimelinesResponseBody(name='body'),
}

async function listIncidentTimelines(request: ListIncidentTimelinesRequest): ListIncidentTimelinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIncidentTimelines', 'POST', '/incident/timeline', 'json', false, 'json', request);
}

model ListIncidentsRequest {
  clientToken?: string(name='clientToken', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E1', position='Body'),
  createEndTime?: string(name='createEndTime', example='2021-11-10 00:00:00', position='Body'),
  createStartTime?: string(name='createStartTime', example='2021-11-01 00:00:00', position='Body'),
  effect?: string(name='effect', example='LOW', position='Body'),
  incidentLevel?: string(name='incidentLevel', example='P1', position='Body'),
  incidentStatus?: string(name='incidentStatus', example='ASSIGNED', position='Body'),
  me?: int32(name='me', example='true', position='Body'),
  pageNumber?: int32(name='pageNumber', example='1', position='Body'),
  pageSize?: int32(name='pageSize', example='10', position='Body'),
  relationServiceId?: long(name='relationServiceId', example='12312', position='Body'),
  ruleName?: string(name='ruleName', example='sa', position='Body'),
}

model ListIncidentsResponseBody = {
  data?: [ 
    {
      assignToWhoIsValid?: long(name='assignToWhoIsValid'),
      assignUserId?: long(name='assignUserId', description='代表创建时间的资源属性字段', example='21312'),
      assignUserName?: string(name='assignUserName', description='代表资源一级ID的资源属性字段'),
      assignUserPhone?: string(name='assignUserPhone', example='1390000****'),
      createTime?: string(name='createTime', description='事件级别', example='2020-10-1 00:00:00'),
      effect?: string(name='effect', description='时间指派人ID', example='HIGH'),
      incidentId?: long(name='incidentId', description='修改时间', example='12321'),
      incidentLevel?: string(name='incidentLevel', description='影响程度', example='P4'),
      incidentNumber?: string(name='incidentNumber', example='I3000021'),
      incidentStatus?: string(name='incidentStatus', description='关联流转规则ID', example='RESPONDED'),
      incidentTitle?: string(name='incidentTitle', description='事件内容'),
      isManual?: boolean(name='isManual', example='true'),
      relRouteRuleDeleteType?: int32(name='relRouteRuleDeleteType'),
      relServiceDeleteType?: int32(name='relServiceDeleteType'),
      relatedServiceId?: long(name='relatedServiceId', description='事件状态', example='213123'),
      relatedServiceName?: string(name='relatedServiceName'),
      routeRuleId?: long(name='routeRuleId', description='关联的服务ID', example='123'),
      routeRuleName?: string(name='routeRuleName'),
    }
  ](name='data', description='data'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  requestId?: string(name='requestId', description='requestId', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9'),
  totalCount?: int32(name='totalCount', example='60'),
}

model ListIncidentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIncidentsResponseBody(name='body'),
}

async function listIncidents(request: ListIncidentsRequest): ListIncidentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIncidents', 'POST', '/incident/list', 'json', false, 'json', request);
}

model ListIntegrationConfigTimelinesRequest {
  clientToken?: string(name='clientToken', example='601FA6A2-AC5C-4B59-BE11-378F887A6A11', position='Body'),
  integrationConfigId?: long(name='integrationConfigId', example='101', position='Body'),
  pageNumber?: long(name='pageNumber', example='1', position='Body'),
  pageSize?: long(name='pageSize', example='10', position='Body'),
}

model ListIntegrationConfigTimelinesResponseBody = {
  data?: [ 
    {
      createTime?: string(name='createTime', example='2021-04-05 10:10:10'),
      description?: string(name='description'),
      title?: string(name='title'),
    }
  ](name='data', description='data'),
  pageNumber?: long(name='pageNumber', description='pageNumber', example='1'),
  pageSize?: long(name='pageSize', description='pageSize', example='10'),
  requestId?: string(name='requestId', description='requestId', example='601FA6A2-AC5C-4B59-BE11-378F887A6A11'),
  totalCount?: long(name='totalCount', description='totalCount', example='103'),
}

model ListIntegrationConfigTimelinesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIntegrationConfigTimelinesResponseBody(name='body'),
}

async function listIntegrationConfigTimelines(request: ListIntegrationConfigTimelinesRequest): ListIntegrationConfigTimelinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIntegrationConfigTimelines', 'POST', '/integrationConfig/timeline', 'json', false, 'json', request);
}

model ListIntegrationConfigsRequest {
  clientToken?: string(name='clientToken', example='601FA6A2-AC5C-4B59-BE11-378F887A6A11', position='Body'),
  monitorSourceName?: string(name='monitorSourceName', example='Zabbix', position='Body'),
}

model ListIntegrationConfigsResponseBody = {
  data?: [ 
    {
      integrationConfigId?: long(name='integrationConfigId', example='1023'),
      isReceivedEvent?: boolean(name='isReceivedEvent', example='false'),
      monitorSourceId?: long(name='monitorSourceId', example='87'),
      monitorSourceName?: string(name='monitorSourceName', example='Zabbix'),
      monitorSourceShortName?: string(name='monitorSourceShortName', example='Zabbix'),
      monitorSourceType?: int32(name='monitorSourceType'),
      status?: string(name='status', example='NOT_INTEGRATED'),
    }
  ](name='data', description='data'),
  requestId?: string(name='requestId', description='id of the request', example='601FA6A2-AC5C-4B59-BE11-378F887A6A11'),
}

model ListIntegrationConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIntegrationConfigsResponseBody(name='body'),
}

async function listIntegrationConfigs(request: ListIntegrationConfigsRequest): ListIntegrationConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIntegrationConfigs', 'POST', '/integrationConfig/list', 'json', false, 'json', request);
}

model ListMonitorSourcesRequest {
  clientToken?: string(name='clientToken', example='601FA6A2-AC5C-4B59-BE11-378FTOKENA11', position='Body'),
}

model ListMonitorSourcesResponseBody = {
  data?: [ 
    {
      fieldKeys?: [ string ](name='fieldKeys'),
      monitorSourceId?: long(name='monitorSourceId', example='12'),
      monitorSourceName?: string(name='monitorSourceName', example='Zabbix'),
    }
  ](name='data', description='data'),
  requestId?: string(name='requestId', description='id of the request', example='10REQUES-AC5C-4B59-BE11-378F117A6A88'),
}

model ListMonitorSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMonitorSourcesResponseBody(name='body'),
}

async function listMonitorSources(request: ListMonitorSourcesRequest): ListMonitorSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMonitorSources', 'POST', '/monitorSource/list', 'json', false, 'json', request);
}

model ListProblemDetailOperationsRequest {
  clientToken?: string(name='clientToken', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9', position='Body'),
  createTimeSort?: string(name='createTimeSort', example='desc,asc', position='Body'),
  pageNumber?: int32(name='pageNumber', example='1', position='Body'),
  pageSize?: int32(name='pageSize', example='10', position='Body'),
  problemId: long(name='problemId', example='1', position='Body'),
}

model ListProblemDetailOperationsResponseBody = {
  data?: [ 
    {
      action?: string(name='action', example='PROBLEM_CANCEL'),
      createTime?: string(name='createTime', example='2021-01-23 00:00:00'),
      description?: string(name='description', example='描述'),
      relatedServiceName?: string(name='relatedServiceName', example='服务A'),
      remark?: string(name='remark', example='备注'),
      snapshotData?: string(name='snapshotData', example='{“userName”:"小明"}'),
      title?: string(name='title', example='动态标题'),
    }
  ](name='data', description='data'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  requestId?: string(name='requestId', description='requestId', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9'),
  totalCount?: int32(name='totalCount', example='210'),
}

model ListProblemDetailOperationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProblemDetailOperationsResponseBody(name='body'),
}

async function listProblemDetailOperations(request: ListProblemDetailOperationsRequest): ListProblemDetailOperationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProblemDetailOperations', 'POST', '/problem/detail/operations', 'json', false, 'json', request);
}

model ListProblemOperationsRequest {
  clientToken?: string(name='clientToken', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9', position='Body'),
  pageNumber?: int32(name='pageNumber', example='1', position='Body'),
  pageSize?: int32(name='pageSize', example='10', position='Body'),
}

model ListProblemOperationsResponseBody = {
  data?: [ 
    {
      action?: string(name='action', example='PROBLEM_CANCEL'),
      createTime?: string(name='createTime', example='2021-01-23 00:00:00'),
      description?: string(name='description', example='描述'),
      problemId?: long(name='problemId', example='12312'),
      problemName?: string(name='problemName', example='这是一个故障'),
      problemNumber?: string(name='problemNumber', example='P1231231'),
      relatedServiceName?: string(name='relatedServiceName', example='服务名称'),
      snapshotData?: string(name='snapshotData', example='{“userName”:"小明"}'),
      title?: string(name='title', example='动态标题'),
    }
  ](name='data', description='data'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  requestId?: string(name='requestId', description='Id of the request', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9'),
  totalCount?: int32(name='totalCount', example='132'),
}

model ListProblemOperationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProblemOperationsResponseBody(name='body'),
}

async function listProblemOperations(request: ListProblemOperationsRequest): ListProblemOperationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProblemOperations', 'POST', '/problem/operations', 'json', false, 'json', request);
}

model ListProblemSubtotalsRequest {
  clientToken?: string(name='clientToken', example='4361a0e1-6747-4834-96ce-0c4840fdB812', position='Body'),
  problemId?: long(name='problemId', example='1231', position='Body'),
}

model ListProblemSubtotalsResponseBody = {
  data?: [ 
    {
      createRamName?: string(name='createRamName'),
      createTime?: string(name='createTime', example='2020-10-02 00:00:00'),
      createUserId?: long(name='createUserId', example='123123'),
      createUserPhone?: string(name='createUserPhone', example='130****11111'),
      description?: string(name='description'),
    }
  ](name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request', example='4361a0e1-6747-4834-96ce-0S4840fd3812'),
}

model ListProblemSubtotalsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProblemSubtotalsResponseBody(name='body'),
}

async function listProblemSubtotals(request: ListProblemSubtotalsRequest): ListProblemSubtotalsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProblemSubtotals', 'POST', '/problem/list/subtotal', 'json', false, 'json', request);
}

model ListProblemTimeLinesRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  problemId?: long(name='problemId', example='10002010', position='Body'),
}

model ListProblemTimeLinesResponseBody = {
  data?: [ 
    {
      content?: string(name='content', example='内容'),
      createTime?: string(name='createTime', example='2020-08-08 15:38:38'),
      isKey?: boolean(name='isKey', example='true'),
      keyNode?: string(name='keyNode', example='PROBLEM_INJECTION,PROBLEM_HAPPEN'),
      problemTimelineId?: long(name='problemTimelineId', example='10000'),
      time?: string(name='time', example='2020-08-08 15:38:38'),
      updateTime?: string(name='updateTime', example='2020-08-08 15:38:38'),
      usersInContent?: [ 
        {
          isValid?: long(name='isValid'),
          userId?: long(name='userId', example='232'),
          username?: string(name='username', example='张老萨'),
        }
      ](name='usersInContent'),
    }
  ](name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='C4BE3837-1A13-413B-A225-2C88188E8A43'),
}

model ListProblemTimeLinesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProblemTimeLinesResponseBody(name='body'),
}

async function listProblemTimeLines(request: ListProblemTimeLinesRequest): ListProblemTimeLinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProblemTimeLines', 'POST', '/problem/detail/timeLines', 'json', false, 'json', request);
}

model ListProblemsRequest {
  affectServiceId?: long(name='affectServiceId', example='1', position='Body'),
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  discoveryEndTime?: string(name='discoveryEndTime', example='2020-03-05 15:50:59', position='Body'),
  discoveryStartTime?: string(name='discoveryStartTime', example='2020-03-05 15:50:59', position='Body'),
  mainHandlerId?: long(name='mainHandlerId', example='1', position='Body'),
  pageNumber?: long(name='pageNumber', example='1', position='Body'),
  pageSize?: long(name='pageSize', example='10', position='Body'),
  problemLevel?: string(name='problemLevel', example='P2', position='Body'),
  problemStatus?: string(name='problemStatus', example='HANDLING', position='Body'),
  queryType?: string(name='queryType', example='RESPONSIBLE', position='Body'),
  repeaterId?: long(name='repeaterId', example='1', position='Body'),
  restoreEndTime?: string(name='restoreEndTime', example='2020-03-05 15:50:59', position='Body'),
  restoreStartTime?: string(name='restoreStartTime', example='2020-03-05 15:50:59', position='Body'),
  serviceGroupId?: long(name='serviceGroupId', example='1', position='Body'),
}

model ListProblemsResponseBody = {
  data?: [ 
    {
      affectServices?: [ 
        {
          serviceDescription?: string(name='serviceDescription', example='服务描述'),
          serviceId?: long(name='serviceId', example='100'),
          serviceName?: string(name='serviceName', example='冲上云霄'),
          updateTime?: string(name='updateTime', example='2020-09-08 15:59:59'),
        }
      ](name='affectServices'),
      cancelTime?: string(name='cancelTime', example='2020-09-08 15:59:59'),
      createTime?: string(name='createTime', example='2020-09-08 15:59:59'),
      discoverTime?: string(name='discoverTime', example='2020-09-08 15:59:59'),
      finishTime?: string(name='finishTime', example='2020-09-08 15:59:59'),
      incidentId?: long(name='incidentId', example='10000'),
      isManual?: boolean(name='isManual', example='true'),
      isUpgrade?: boolean(name='isUpgrade', example='true'),
      mainHandlerId?: long(name='mainHandlerId', example='100'),
      mainHandlerIsValid?: long(name='mainHandlerIsValid'),
      mainHandlerName?: string(name='mainHandlerName', example='王宇'),
      problemId?: long(name='problemId', example='1'),
      problemLevel?: string(name='problemLevel', example='P1'),
      problemName?: string(name='problemName', example='故障'),
      problemNumber?: string(name='problemNumber', example='P34438300000001116258132229577472'),
      problemStatus?: string(name='problemStatus', example='HANDLING'),
      recoveryTime?: string(name='recoveryTime', example='2020-09-08 15:59:59'),
      relatedServiceId?: string(name='relatedServiceId', example='1'),
      replayTime?: string(name='replayTime', example='2020-09-08 15:59:59'),
      serviceDeletedType?: int32(name='serviceDeletedType'),
      serviceName?: string(name='serviceName', example='服务1'),
      updateTime?: string(name='updateTime', example='2020-09-08 15:59:59'),
    }
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='10'),
  requestId?: string(name='requestId', description='Id of the request', example='C4BE3837-1A13-413B-A225-2C88188E8A43'),
  totalCount?: long(name='totalCount', example='100'),
}

model ListProblemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProblemsResponseBody(name='body'),
}

async function listProblems(request: ListProblemsRequest): ListProblemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProblems', 'POST', '/problem/listProblems', 'json', false, 'json', request);
}

model ListRouteRulesRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  notFilterRouteRuleDeleted?: boolean(name='notFilterRouteRuleDeleted', position='Body'),
  pageNumber?: int32(name='pageNumber', example='1', position='Body'),
  pageSize?: int32(name='pageSize', example='10', position='Body'),
  routeType?: long(name='routeType', example='0', position='Body'),
  ruleName?: bytes(name='ruleName', example='规则名字', position='Body'),
  serviceName?: bytes(name='serviceName', example='冲上云霄', position='Body'),
}

model ListRouteRulesResponseBody = {
  data?: [ 
    {
      assignObjectId?: long(name='assignObjectId', example='10'),
      assignObjectType?: string(name='assignObjectType', example='SERVICEGROUP'),
      createTime?: string(name='createTime', example='2020-03-05 15:53:55'),
      effection?: string(name='effection', example='LOW'),
      enableStatus?: string(name='enableStatus', example='DISABLE'),
      incidentLevel?: string(name='incidentLevel', example='P1'),
      isValid?: int32(name='isValid'),
      matchCount?: long(name='matchCount', example='10'),
      monitorSourceNames?: string(name='monitorSourceNames', example='zabbix'),
      relServiceDeleteType?: int32(name='relServiceDeleteType'),
      relatedServiceId?: long(name='relatedServiceId', example='1'),
      relatedServiceName?: string(name='relatedServiceName', example='关联服务名字'),
      routeRuleId?: long(name='routeRuleId', example='10000'),
      routeType?: string(name='routeType', example='INCIDENT'),
      ruleName?: string(name='ruleName', example='规则名字'),
      tenantRamId?: long(name='tenantRamId', example='1344383'),
      timeWindow?: long(name='timeWindow', example='时间窗口'),
      timeWindowUnit?: long(name='timeWindowUnit', example='MINUTE'),
      updateTime?: string(name='updateTime', example='2020-03-05 15:53:55'),
    }
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='10'),
  requestId?: string(name='requestId', example='C4BE3837-1A13B-A225-2C88188E8A43'),
  totalCount?: long(name='totalCount', example='10'),
}

model ListRouteRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRouteRulesResponseBody(name='body'),
}

async function listRouteRules(request: ListRouteRulesRequest): ListRouteRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRouteRules', 'POST', '/routeRule/list', 'json', false, 'json', request);
}

model ListRouteRulesByAssignWhoIdRequest {
  assignWhoId?: long(name='assignWhoId', position='Body'),
  assignWhoType?: long(name='assignWhoType', position='Body'),
}

model ListRouteRulesByAssignWhoIdResponseBody = {
  data?: [ 
    {
      id?: long(name='id'),
      ruleName?: string(name='ruleName'),
      tenantRamId?: long(name='tenantRamId'),
    }
  ](name='data'),
  requestId?: string(name='requestId'),
}

model ListRouteRulesByAssignWhoIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRouteRulesByAssignWhoIdResponseBody(name='body'),
}

async function listRouteRulesByAssignWhoId(request: ListRouteRulesByAssignWhoIdRequest): ListRouteRulesByAssignWhoIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRouteRulesByAssignWhoId', 'POST', '/routeRule/listByAssignWhoId', 'json', false, 'json', request);
}

model ListRouteRulesByServiceRequest {
}

model ListRouteRulesByServiceResponseBody = {
  data?: [ 
    {
      id?: int32(name='id'),
      ruleName?: string(name='ruleName'),
    }
  ](name='data'),
  requestId?: string(name='requestId'),
  totalCount?: int32(name='totalCount'),
}

model ListRouteRulesByServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRouteRulesByServiceResponseBody(name='body'),
}

async function listRouteRulesByService(request: ListRouteRulesByServiceRequest): ListRouteRulesByServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRouteRulesByService', 'POST', '/routeRule/listByService', 'json', false, 'json', request);
}

model ListServiceGroupMonitorSourceTemplatesRequest {
  clientToken?: string(name='clientToken', example='xxxx', position='Body'),
  requestId?: string(name='requestId', example='xxxxx', position='Body'),
  serviceGroupId?: long(name='serviceGroupId', example='1000', position='Body'),
}

model ListServiceGroupMonitorSourceTemplatesResponseBody = {
  data?: [ 
    {
      fields?: [ string ](name='fields'),
      monitorSourceId?: long(name='monitorSourceId', example='1000'),
      monitorSourceName?: string(name='monitorSourceName', example='zabbix'),
      templateContent?: string(name='templateContent', example='""'),
      templateId?: long(name='templateId', example='1000'),
    }
  ](name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='xxxx'),
}

model ListServiceGroupMonitorSourceTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServiceGroupMonitorSourceTemplatesResponseBody(name='body'),
}

async function listServiceGroupMonitorSourceTemplates(request: ListServiceGroupMonitorSourceTemplatesRequest): ListServiceGroupMonitorSourceTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServiceGroupMonitorSourceTemplates', 'POST', '/services/group/listServiceGroupMonitorSourceTemplates', 'json', false, 'json', request);
}

model ListServiceGroupsRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  isScheduled?: boolean(name='isScheduled', example='false', position='Body'),
  orderByScheduleStatus?: boolean(name='orderByScheduleStatus', example='false', position='Body'),
  pageNumber?: long(name='pageNumber', example='1', position='Body'),
  pageSize?: long(name='pageSize', example='10', position='Body'),
  queryName?: string(name='queryName', example='王宇', position='Body'),
  queryType?: string(name='queryType', example='USER', position='Body'),
  serviceId?: long(name='serviceId', position='Body'),
  userId?: long(name='userId', example='100000', position='Body'),
}

model ListServiceGroupsResponseBody = {
  data?: [ 
    {
      enableWebhook?: string(name='enableWebhook', example='ENABLE'),
      isScheduled?: boolean(name='isScheduled', example='true'),
      serviceGroupDescription?: string(name='serviceGroupDescription', example='服务描述'),
      serviceGroupId?: long(name='serviceGroupId', example='1'),
      serviceGroupName?: string(name='serviceGroupName', example='服务组'),
      updateTime?: string(name='updateTime', example='2020-08-09 15:50:30'),
      users?: [ 
        {
          email?: string(name='email', example='wy930***@163.com'),
          isRelated?: int32(name='isRelated'),
          phone?: string(name='phone', example='1390000****'),
          serviceGroupId?: long(name='serviceGroupId', example='1'),
          userId?: long(name='userId', example='10'),
          userName?: string(name='userName', example='jack'),
        }
      ](name='users'),
      webhookLink?: string(name='webhookLink', example='wwwwwwwwww'),
      webhookType?: string(name='webhookType', example='WEIXIN_GROUP'),
    }
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='10'),
  requestId?: string(name='requestId', description='Id of the request', example='sssss'),
  totalCount?: long(name='totalCount', example='100'),
}

model ListServiceGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServiceGroupsResponseBody(name='body'),
}

async function listServiceGroups(request: ListServiceGroupsRequest): ListServiceGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServiceGroups', 'POST', '/services/group/list', 'json', false, 'json', request);
}

model ListServiceGroupsByUserIdRequest {
}

model ListServiceGroupsByUserIdResponseBody = {
  data?: {
    isScheduled?: boolean(name='isScheduled'),
    serviceGroupId?: long(name='serviceGroupId'),
    serviceGroupName?: string(name='serviceGroupName'),
  }(name='data'),
  requestId?: string(name='requestId'),
}

model ListServiceGroupsByUserIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServiceGroupsByUserIdResponseBody(name='body'),
}

async function listServiceGroupsByUserId(request: ListServiceGroupsByUserIdRequest): ListServiceGroupsByUserIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServiceGroupsByUserId', 'POST', '/services/group/listByUserId', 'json', false, 'json', request);
}

model ListServicesRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  pageNumber: long(name='pageNumber', example='1', position='Body'),
  pageSize: long(name='pageSize', example='10', position='Body'),
  serviceName?: string(name='serviceName', example='冲上云霄', position='Body'),
}

model ListServicesResponseBody = {
  data?: [ 
    {
      escalationPlanId?: long(name='escalationPlanId'),
      escalationPlanName?: string(name='escalationPlanName'),
      isValid?: int32(name='isValid'),
      serviceDescription?: string(name='serviceDescription', example='服务描述'),
      serviceGroupIdList?: [ long ](name='serviceGroupIdList'),
      serviceId?: long(name='serviceId', example='1'),
      serviceName?: string(name='serviceName', example='冲上云霄'),
      updateTime?: string(name='updateTime', example='2020-09-08 14:30:30'),
    }
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='10'),
  requestId?: string(name='requestId', description='Id of the request', example='C4BE3837-1A13-413B-A225-2C88188E8A43'),
  totalCount?: long(name='totalCount', example='100'),
}

model ListServicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServicesResponseBody(name='body'),
}

async function listServices(request: ListServicesRequest): ListServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServices', 'POST', '/services/list', 'json', false, 'json', request);
}

model ListSourceEventsRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  endTime?: string(name='endTime', description='2020-09-18 13:00:00', example='2020-10-01 23:59:59', position='Body'),
  instanceId: long(name='instanceId', example='1', position='Body'),
  instanceType: string(name='instanceType', example='INCIDENT', position='Body'),
  pageNumber?: long(name='pageNumber', example='1', position='Body'),
  pageSize?: long(name='pageSize', example='20', position='Body'),
  startRowKey?: string(name='startRowKey', example='9223370410626682599-1344383-78954515-1-0a6e01a1701447fd9ef18b079edd2c6d', position='Body'),
  startTime?: string(name='startTime', description='2020-09-10 13:00:00', example='2020-10-01 00:00:00', position='Body'),
  stopRowKey?: string(name='stopRowKey', example='9223370410626682599-1344383-78954515-1-0a6e01a1701447fd9ef18b079edd2c6d', position='Body'),
}

model ListSourceEventsResponseBody = {
  data?: [ 
    {
      eventJson?: string(name='eventJson', example='""'),
      eventTime?: string(name='eventTime', example='2020-09-08 15:53:34'),
      instanceId?: long(name='instanceId', example='1'),
      instanceType?: string(name='instanceType', example='INCIDENT'),
      monitorSourceId?: long(name='monitorSourceId', example='1'),
      monitorSourceName?: string(name='monitorSourceName', example='zabbix'),
      routeRuleId?: long(name='routeRuleId', example='1'),
      tenantRamId?: long(name='tenantRamId', example='1'),
    }
  ](name='data'),
  firstRowKey?: string(name='firstRowKey', description='firstRowKey', example='9223370412331485032-1344383-9967-1-08be8b08ef30441390072f3bfba71c94'),
  lastRowKey?: string(name='lastRowKey', description='lastRowKey', example='9223370412331485036-1344383-9967-1-8d729a1b176f493ca3be643b391d5ced'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='20'),
  requestId?: string(name='requestId', example='C4BE3837-1A13-413B-A225-2C88188E8A43'),
  totalCount?: long(name='totalCount', example='100'),
}

model ListSourceEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSourceEventsResponseBody(name='body'),
}

async function listSourceEvents(request: ListSourceEventsRequest): ListSourceEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSourceEvents', 'POST', '/events/listOriginalEvent', 'json', false, 'json', request);
}

model ListSourceEventsForMonitorSourceRequest {
  monitorSourceId?: long(name='monitorSourceId', example='1000', position='Body'),
}

model ListSourceEventsForMonitorSourceResponseBody = {
  data?: [ 
    {
      eventJson?: string(name='eventJson', example='{}'),
      eventTime?: string(name='eventTime', example='2020-01-01 18:30:00'),
      monitorSourceId?: boolean(name='monitorSourceId', example='1000'),
      monitorSourceName?: string(name='monitorSourceName', example='zabbix'),
    }
  ](name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='xxxxxx'),
}

model ListSourceEventsForMonitorSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSourceEventsForMonitorSourceResponseBody(name='body'),
}

async function listSourceEventsForMonitorSource(request: ListSourceEventsForMonitorSourceRequest): ListSourceEventsForMonitorSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSourceEventsForMonitorSource', 'POST', '/events/queryLastestEvents', 'json', false, 'json', request);
}

model ListSubscriptionServiceGroupsRequest {
  clientToken?: string(name='clientToken', example='89f51d2e-5527-4f6c-a6c6-4411b5496e9f', position='Body'),
  serviceIds?: [ long ](name='serviceIds', position='Body'),
}

model ListSubscriptionServiceGroupsResponseBody = {
  data?: [ 
    {
      serviceGroupDescription?: string(name='serviceGroupDescription'),
      serviceId?: long(name='serviceId', example='123113'),
      serviceName?: string(name='serviceName'),
    }
  ](name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request', example='89f51d2e-5527-4f6c-a6c6-4411b5496e9f'),
}

model ListSubscriptionServiceGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSubscriptionServiceGroupsResponseBody(name='body'),
}

async function listSubscriptionServiceGroups(request: ListSubscriptionServiceGroupsRequest): ListSubscriptionServiceGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSubscriptionServiceGroups', 'POST', '/problem/serviceGroup/list', 'json', false, 'json', request);
}

model ListSubscriptionsRequest {
  clientToken?: string(name='clientToken', example='601FA6A2-AC5C-4B59-BE11-378FTOKENA11', position='Body'),
  notFilterScopeObjectDeleted?: boolean(name='notFilterScopeObjectDeleted', position='Body'),
  notifyObject?: string(name='notifyObject', example='test', position='Body'),
  notifyObjectType?: string(name='notifyObjectType', example='SERVICE', position='Body'),
  pageNumber?: int32(name='pageNumber', example='1', position='Body'),
  pageSize?: int32(name='pageSize', example='10', position='Body'),
  scope?: string(name='scope', example='SERVICE', position='Body'),
  scopeObject?: string(name='scopeObject', example='TestName', position='Body'),
  subscriptionTitle?: string(name='subscriptionTitle', example='newTitle', position='Body'),
}

model ListSubscriptionsResponseBody = {
  data?: [ 
    {
      endTime?: string(name='endTime', example='2022-05-09 10:10:10'),
      expiredType?: string(name='expiredType', example='LONG_TERM'),
      notifyObjectList?: [ 
        {
          id?: long(name='id', example='10'),
          isValid?: long(name='isValid'),
          name?: string(name='name', example='张珊'),
          notifyObjectId?: long(name='notifyObjectId', example='10'),
          notifyObjectType?: long(name='notifyObjectType', example='USER'),
        }
      ](name='notifyObjectList'),
      notifyObjectType?: long(name='notifyObjectType', example='USER'),
      scope?: long(name='scope', example='SERVICE'),
      scopeObjectList?: [ 
        {
          id?: long(name='id', example='10'),
          isValid?: long(name='isValid'),
          scope?: long(name='scope', example='SERVICE'),
          scopeObject?: string(name='scopeObject', example='阿里云服务'),
          scopeObjectId?: long(name='scopeObjectId', example='10'),
        }
      ](name='scopeObjectList'),
      startTime?: string(name='startTime', example='2020-05-09 10:10:10'),
      status?: string(name='status', example='ENABLE'),
      subscriptionId?: long(name='subscriptionId', example='10'),
      subscriptionTitle?: string(name='subscriptionTitle', example='test'),
    }
  ](name='data', description='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='10'),
  requestId?: string(name='requestId', description='id of the request', example='10REQUES-AC5C-4B59-BE11-378F117A6A88'),
  totalCount?: long(name='totalCount', example='100'),
}

model ListSubscriptionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSubscriptionsResponseBody(name='body'),
}

async function listSubscriptions(request: ListSubscriptionsRequest): ListSubscriptionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSubscriptions', 'POST', '/notify/subscription/list', 'json', false, 'json', request);
}

model ListTrendForSourceEventRequest {
  endTime?: string(name='endTime', example='2020-10-10 23:59:59', position='Body'),
  instanceId?: long(name='instanceId', example='1000', position='Body'),
  instanceType?: string(name='instanceType', example='INCIDENT', position='Body'),
  requestId?: string(name='requestId', example='xxxx', position='Body'),
  startTime?: string(name='startTime', example='2020-10-10 00:00:00', position='Body'),
  timeUnit?: long(name='timeUnit', example='1000', position='Body'),
}

model ListTrendForSourceEventResponseBody = {
  data?: [ 
    {
      convergenceRate?: string(name='convergenceRate', example='90.90%'),
      maxSustainTime?: long(name='maxSustainTime', example='10920312312312'),
      skipDay?: boolean(name='skipDay', example='true'),
      sourceEventsStatMap?: map[string]any(name='sourceEventsStatMap', example='{             "Grafana": [                 {                     "evenTime": "2021-11-15 14:29:59",                     "eventCount": 4,                     "monitorSourceName": "Grafana",                     "monitorSourceCounts": null,                     "sustainTime": 15646                 },                 {                     "evenTime": "2021-11-15 14:30:36",                     "eventCount": 7,                     "monitorSourceName": "Grafana",                     "monitorSourceCounts": null,                     "sustainTime": 52638                 }             ]         }'),
      unit?: string(name='unit', example='1000'),
    }
  ](name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='xxxxx'),
}

model ListTrendForSourceEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTrendForSourceEventResponseBody(name='body'),
}

async function listTrendForSourceEvent(request: ListTrendForSourceEventRequest): ListTrendForSourceEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTrendForSourceEvent', 'POST', '/events/querySourceEventTrend', 'json', false, 'json', request);
}

model ListUserSerivceGroupsRequest {
  clientToken?: string(name='clientToken', description='clientToken', example='2b63cdef-7ac3-4892-a76d-0f3389ef729f', position='Body'),
  userId: long(name='userId', example='123', position='Body'),
}

model ListUserSerivceGroupsResponseBody = {
  data?: {
    email?: string(name='email', example='12121****@163.com'),
    phone?: string(name='phone', example='1390000****'),
    ramId?: long(name='ramId', example='321'),
    serviceGroups?: [ 
      {
        serviceGroupDescription?: string(name='serviceGroupDescription', example='描述'),
        serviceGroupId?: long(name='serviceGroupId', example='123'),
        serviceGroupName?: string(name='serviceGroupName', example='服务组A'),
      }
    ](name='serviceGroups'),
    userId?: long(name='userId', example='321'),
    username?: string(name='username', example='小明'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request', example='2b63cdef-7ac3-4892-a76d-0f3389ef7291'),
}

model ListUserSerivceGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserSerivceGroupsResponseBody(name='body'),
}

async function listUserSerivceGroups(request: ListUserSerivceGroupsRequest): ListUserSerivceGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUserSerivceGroups', 'POST', '/user/preview/detail', 'json', false, 'json', request);
}

model ListUsersRequest {
  clientToken?: string(name='clientToken', description='clientToken', example='c26f36de-1ec8-496a-a828-880676c5ef81', position='Body'),
  pageNumber?: long(name='pageNumber', example='1', position='Body'),
  pageSize?: long(name='pageSize', example='10', position='Body'),
  phone?: string(name='phone', example='1887879****', position='Body'),
  ramId?: string(name='ramId', example='1344383', position='Body'),
  scene?: long(name='scene', example='USER_LIST', position='Body'),
  synergyChannel?: string(name='synergyChannel', example='DINGDING', position='Body'),
  username?: string(name='username', example='张三', position='Body'),
}

model ListUsersResponseBody = {
  data?: [ 
    {
      accountType?: long(name='accountType', example='SUB'),
      appAccount?: string(name='appAccount', example='23456tre'),
      email?: string(name='email', example='2345****@qq.com'),
      gmtActive?: string(name='gmtActive'),
      gmtCreate?: string(name='gmtCreate'),
      isActive?: long(name='isActive'),
      isEditableUser?: long(name='isEditableUser', example='true'),
      isOperation?: int32(name='isOperation'),
      isRam?: int32(name='isRam'),
      isRelated?: string(name='isRelated', example='RELATED关联  NOT_RELATED 未关联'),
      phone?: string(name='phone', example='1390000****'),
      ramId?: long(name='ramId', example='53624523'),
      roleIdList?: [ long ](name='roleIdList'),
      roleNameList?: [ string ](name='roleNameList'),
      synergyChannel?: string(name='synergyChannel', example='DINGDING'),
      userId?: long(name='userId', example='1234'),
      username?: string(name='username'),
    }
  ](name='data', description='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='10'),
  requestId?: string(name='requestId', description='id of the request', example='c26f36de-1ec8-496a-a828-880676c5ef81'),
  totalCount?: long(name='totalCount', example='100'),
}

model ListUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUsersResponseBody(name='body'),
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUsers', 'POST', '/user/list', 'json', false, 'json', request);
}

model PushMonitorRequest {
  apiKey: string(name='apiKey', example='dfb2e51a58e64152a0eef7a232308006', position='Path'),
  body?: string(name='body', position='Body'),
}

model PushMonitorResponseBody = {
  data?: any(name='data', example='null'),
  requestId?: string(name='requestId', example='5A30D240-1821-0246-B580-AB1468657AD2'),
}

model PushMonitorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushMonitorResponseBody(name='body'),
}

async function pushMonitor(request: PushMonitorRequest): PushMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PushMonitor', 'POST', '/api/monitor/push/{apiKey}', 'json', false, 'json', request);
}

model RecoverProblemRequest {
  problemId?: long(name='problemId', example='123', position='Body'),
  problemNotifyType?: string(name='problemNotifyType', example='PROBLEM_UPDATE', position='Body'),
  recoveryTime?: string(name='recoveryTime', example='2020-02-01 00:00:00', position='Body'),
}

model RecoverProblemResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='EBC39DEF-C95B-46F8-9AE3-204F0B0A706D'),
}

model RecoverProblemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecoverProblemResponseBody(name='body'),
}

async function recoverProblem(request: RecoverProblemRequest): RecoverProblemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RecoverProblem', 'POST', '/problem/recovery', 'json', false, 'json', request);
}

model RefreshIntegrationConfigKeyRequest {
  clientToken?: string(name='clientToken', example='601FA6A2-AC5C-4B59-BE11-378F887A6A11', position='Body'),
  integrationConfigId?: long(name='integrationConfigId', example='102', position='Body'),
}

model RefreshIntegrationConfigKeyResponseBody = {
  data?: {
    key?: string(name='key', example='859FA6A2-AC5C-4B09-BE23-986F887H6A232'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request', example='601FA6A2-AC5C-4B59-BE11-378F887A6A11'),
}

model RefreshIntegrationConfigKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefreshIntegrationConfigKeyResponseBody(name='body'),
}

async function refreshIntegrationConfigKey(request: RefreshIntegrationConfigKeyRequest): RefreshIntegrationConfigKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RefreshIntegrationConfigKey', 'POST', '/integrationConfig/refreshKey', 'json', false, 'json', request);
}

model RemoveIntegrationConfigRequest {
  clientToken?: string(name='clientToken', position='Body'),
  integrationConfigId?: long(name='integrationConfigId', position='Body'),
}

model RemoveIntegrationConfigResponseBody = {
  requestId?: string(name='requestId'),
}

model RemoveIntegrationConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveIntegrationConfigResponseBody(name='body'),
}

async function removeIntegrationConfig(request: RemoveIntegrationConfigRequest): RemoveIntegrationConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveIntegrationConfig', 'POST', '/integrationConfig/remove', 'json', false, 'json', request);
}

model RemoveProblemServiceGroupRequest {
  problemId?: long(name='problemId', example='13123', position='Body'),
  serviceGroupIds?: [ long ](name='serviceGroupIds', position='Body'),
}

model RemoveProblemServiceGroupResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='5AD6E6BC-2582-4E0E-832D-52CB1B922253'),
}

model RemoveProblemServiceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveProblemServiceGroupResponseBody(name='body'),
}

async function removeProblemServiceGroup(request: RemoveProblemServiceGroupRequest): RemoveProblemServiceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveProblemServiceGroup', 'POST', '/problem/removeServiceGroup', 'json', false, 'json', request);
}

model ReplayProblemRequest {
  clientToken?: string(name='clientToken', example='4361a0e1-6747-4834-96ce-0c4840fd3212', position='Body'),
  problemId?: long(name='problemId', example='123', position='Body'),
  replayDutyUserId?: long(name='replayDutyUserId', example='3123', position='Body'),
}

model ReplayProblemResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='B81E84B5-8FD1-45F3-969A-B5067AADCFFF'),
}

model ReplayProblemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReplayProblemResponseBody(name='body'),
}

async function replayProblem(request: ReplayProblemRequest): ReplayProblemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ReplayProblem', 'POST', '/problem/replay', 'json', false, 'json', request);
}

model RespondIncidentRequest {
  clientToken?: string(name='clientToken', example='FD200FAE-E98F-496E-BFE6-4CE61E59A221', position='Body'),
  incidentIds?: [ long ](name='incidentIds', description='影响程度', position='Body'),
}

model RespondIncidentResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='062E6568-E505-49D6-8DD0-8F11283EB0AB'),
}

model RespondIncidentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RespondIncidentResponseBody(name='body'),
}

async function respondIncident(request: RespondIncidentRequest): RespondIncidentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RespondIncident', 'POST', '/incident/response', 'json', false, 'json', request);
}

model RevokeProblemRecoveryRequest {
  clientToken?: string(name='clientToken', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2EF', position='Body'),
  problemId?: long(name='problemId', example='1231', position='Body'),
  problemNotifyType?: string(name='problemNotifyType', example='PROBLEM_UPGRADE', position='Body'),
}

model RevokeProblemRecoveryResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9'),
}

model RevokeProblemRecoveryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeProblemRecoveryResponseBody(name='body'),
}

async function revokeProblemRecovery(request: RevokeProblemRecoveryRequest): RevokeProblemRecoveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RevokeProblemRecovery', 'POST', '/problem/revoke', 'json', false, 'json', request);
}

model UnbindUserRequest {
}

model UnbindUserResponseBody = {
  requestId?: string(name='requestId'),
}

model UnbindUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindUserResponseBody(name='body'),
}

async function unbindUser(request: UnbindUserRequest): UnbindUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UnbindUser', 'POST', '/user/unbind', 'json', false, 'json', request);
}

model UpdateEscalationPlanRequest {
  clientToken?: string(name='clientToken', description='clientToken', example='6b404f14-77d1-4b53-a1a1-30a58bbcfc57', position='Body'),
  escalationPlanDescription?: string(name='escalationPlanDescription', example='xxxx', position='Body'),
  escalationPlanId: long(name='escalationPlanId', example='433', position='Body'),
  escalationPlanName?: string(name='escalationPlanName', example='xxx', position='Body'),
  escalationPlanRules?: [ 
    {
      escalationPlanConditions?: [ 
        {
          effection?: string(name='effection', description='LOW HIGH', example='LOW'),
          level?: string(name='level', description='P1 P2 P3 P4', example='P1'),
        }
      ](name='escalationPlanConditions'),
      escalationPlanStrategies?: [ 
        {
          enableWebhook?: boolean(name='enableWebhook', example='true'),
          escalationPlanType?: string(name='escalationPlanType', example='UN_ACKNOWLEDGE'),
          noticeChannels?: [ string ](name='noticeChannels'),
          noticeObjects?: [ long ](name='noticeObjects'),
          noticeRoleList?: [ long ](name='noticeRoleList'),
          noticeTime?: long(name='noticeTime', example='30'),
          serviceGroupIds?: [ long ](name='serviceGroupIds'),
        }
      ](name='escalationPlanStrategies'),
      escalationPlanType?: string(name='escalationPlanType', example='UN_ACKNOWLEDGE'),
      id?: long(name='id', example='872'),
    }
  ](name='escalationPlanRules', position='Body'),
  escalationPlanScopeObjects?: [ 
    {
      id: long(name='id', example='87'),
      scope?: string(name='scope', example='SERVICE'),
      scopeObjectId: long(name='scopeObjectId', example='234'),
    }
  ](name='escalationPlanScopeObjects', position='Body'),
  isGlobal?: boolean(name='isGlobal', position='Body'),
}

model UpdateEscalationPlanResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='A5A1FEAE-9C47-011C-9C73-A376BC2REQUEST'),
}

model UpdateEscalationPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEscalationPlanResponseBody(name='body'),
}

async function updateEscalationPlan(request: UpdateEscalationPlanRequest): UpdateEscalationPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateEscalationPlan', 'POST', '/escalationPlan/update', 'json', false, 'json', request);
}

model UpdateIncidentRequest {
  clientToken?: string(name='clientToken', example='FD200FAE-E98F-496E-BFE6-4CE61E59A123', position='Body'),
  effect?: string(name='effect', example='LOW', position='Body'),
  incidentId: long(name='incidentId', example='12312', position='Body'),
  incidentLevel?: string(name='incidentLevel', example='P1', position='Body'),
  incidentTitle?: string(name='incidentTitle', example='事件标题', position='Body'),
}

model UpdateIncidentResponseBody = {
  data?: {
    incidentId?: long(name='incidentId', example='2312'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9'),
}

model UpdateIncidentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIncidentResponseBody(name='body'),
}

async function updateIncident(request: UpdateIncidentRequest): UpdateIncidentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateIncident', 'POST', '/incident/update', 'json', false, 'json', request);
}

model UpdateIntegrationConfigRequest {
  accessKey?: string(name='accessKey', description='accessKey', example='601FA6A2-AC5C-4B59-BE11-378F887A6A11', position='Body'),
  clientToken?: string(name='clientToken', example='601FA6A2-AC5C-4B59-BE11-378F987A6A98', position='Body'),
  integrationConfigId?: long(name='integrationConfigId', example='103', position='Body'),
}

model UpdateIntegrationConfigResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='10REQUES-AC5C-4B59-BE11-378F117A6A88'),
}

model UpdateIntegrationConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIntegrationConfigResponseBody(name='body'),
}

async function updateIntegrationConfig(request: UpdateIntegrationConfigRequest): UpdateIntegrationConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateIntegrationConfig', 'POST', '/integrationConfig/update', 'json', false, 'json', request);
}

model UpdateProblemRequest {
  feedback?: string(name='feedback', position='Body'),
  level?: string(name='level', example='P1', position='Body'),
  mainHandlerId?: long(name='mainHandlerId', example='678', position='Body'),
  preliminaryReason?: string(name='preliminaryReason', position='Body'),
  problemId?: long(name='problemId', example='213432', position='Body'),
  problemName?: string(name='problemName', position='Body'),
  progressSummary?: string(name='progressSummary', position='Body'),
  progressSummaryRichTextId?: long(name='progressSummaryRichTextId', example='23232', position='Body'),
  relatedServiceId?: long(name='relatedServiceId', example='123', position='Body'),
  serviceGroupIds?: [ long ](name='serviceGroupIds', position='Body'),
}

model UpdateProblemResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='c26f36de-1ec8-496a-a828-880676c5ef81'),
}

model UpdateProblemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateProblemResponseBody(name='body'),
}

async function updateProblem(request: UpdateProblemRequest): UpdateProblemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProblem', 'POST', '/problem/update', 'json', false, 'json', request);
}

model UpdateProblemEffectionServiceRequest {
  clientToken?: string(name='clientToken', description='clientToken', example='c26f36de-1ec8-496a-a828-880676c5ef81', position='Body'),
  description?: string(name='description', example='乐嘉国际大厦', position='Body'),
  effectionServiceId?: long(name='effectionServiceId', example='103', position='Body'),
  level?: string(name='level', example='P1', position='Body'),
  picUrl?: [ string ](name='picUrl', position='Body'),
  problemId?: long(name='problemId', example='190000000', position='Body'),
  serviceId?: long(name='serviceId', example='33', position='Body'),
  status?: string(name='status', example='UN_RECOVERED', position='Body'),
}

model UpdateProblemEffectionServiceResponseBody = {
  requestId?: string(name='requestId', description='requestId', example='ffbf594-e093-46ad-bdcd-df4d7097125a'),
}

model UpdateProblemEffectionServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateProblemEffectionServiceResponseBody(name='body'),
}

async function updateProblemEffectionService(request: UpdateProblemEffectionServiceRequest): UpdateProblemEffectionServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProblemEffectionService', 'POST', '/problem/process/effectionService/update', 'json', false, 'json', request);
}

model UpdateProblemImprovementRequest {
  clientToken?: string(name='clientToken', example='4361a0e1-6747-4834-96ce-0c4840fd3813', position='Body'),
  customProblemReason?: string(name='customProblemReason', position='Body'),
  discoverSource?: long(name='discoverSource', example='1', position='Body'),
  dutyDepartmentId?: long(name='dutyDepartmentId', example='123123', position='Body'),
  dutyDepartmentName?: string(name='dutyDepartmentName', position='Body'),
  dutyUserId?: long(name='dutyUserId', example='1231', position='Body'),
  injectionMode?: string(name='injectionMode', example='1', position='Body'),
  monitorSourceName?: string(name='monitorSourceName', example='Zabbix', position='Body'),
  problemId?: long(name='problemId', example='12312', position='Body'),
  problemReason?: string(name='problemReason', position='Body'),
  recentActivity?: string(name='recentActivity', example='2', position='Body'),
  recoveryMode?: string(name='recoveryMode', example='2', position='Body'),
  relationChanges?: string(name='relationChanges', position='Body'),
  remark?: string(name='remark', position='Body'),
  replayDutyUserId?: long(name='replayDutyUserId', example='1213', position='Body'),
  userReport?: long(name='userReport', example='10', position='Body'),
}

model UpdateProblemImprovementResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='4361a0e1-6747-4834-96ce-0c4840fd3812'),
}

model UpdateProblemImprovementResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateProblemImprovementResponseBody(name='body'),
}

async function updateProblemImprovement(request: UpdateProblemImprovementRequest): UpdateProblemImprovementResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProblemImprovement', 'POST', '/problem/improvement/update', 'json', false, 'json', request);
}

model UpdateProblemMeasureRequest {
  checkStandard?: string(name='checkStandard', example='2', position='Body'),
  checkUserId?: long(name='checkUserId', example='123', position='Body'),
  clientToken?: string(name='clientToken', example='4361a0e1-6747-4834-96ce-0c4840fd3812', position='Body'),
  content?: string(name='content', position='Body'),
  directorId?: long(name='directorId', example='123', position='Body'),
  measureId?: long(name='measureId', example='1231', position='Body'),
  planFinishTime?: string(name='planFinishTime', example='2021-01-21 00:00:00', position='Body'),
  problemId?: long(name='problemId', example='1233', position='Body'),
  stalkerId?: long(name='stalkerId', example='123', position='Body'),
  status?: string(name='status', example='UNIMPROVED', position='Body'),
  type?: int32(name='type', example='3', position='Body'),
}

model UpdateProblemMeasureResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='4361a0e1-6747-4834-96ce-0c4840fd3812'),
}

model UpdateProblemMeasureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateProblemMeasureResponseBody(name='body'),
}

async function updateProblemMeasure(request: UpdateProblemMeasureRequest): UpdateProblemMeasureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProblemMeasure', 'POST', '/problem/improvement/measure/update', 'json', false, 'json', request);
}

model UpdateProblemNoticeRequest {
  clientToken?: string(name='clientToken', example='4361a0e1-6747-4834-96ce-0c4840fd3812', position='Body'),
  problemId?: long(name='problemId', example='1312', position='Body'),
  problemNotifyType?: string(name='problemNotifyType', example='PROBLEM_NOTIFY', position='Body'),
}

model UpdateProblemNoticeResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='4361a0e1-6747-4834-96ce-0c4840fd3812'),
}

model UpdateProblemNoticeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateProblemNoticeResponseBody(name='body'),
}

async function updateProblemNotice(request: UpdateProblemNoticeRequest): UpdateProblemNoticeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProblemNotice', 'POST', '/problem/notify', 'json', false, 'json', request);
}

model UpdateProblemTimelineRequest {
  clientToken?: string(name='clientToken', example='c26f36de-1ec8-496a-a828-880676c5ef81', position='Body'),
  content?: string(name='content', position='Body'),
  keyNode?: string(name='keyNode', example='NodeTest', position='Body'),
  problemId?: long(name='problemId', example='234', position='Body'),
  problemTimelineId?: long(name='problemTimelineId', example='3940', position='Body'),
  time?: string(name='time', example='2021-01-08 10:10:10', position='Body'),
}

model UpdateProblemTimelineResponseBody = {
  requestId?: string(name='requestId', description='id of the request', example='c26f36de-1ec8-496a-a828-880676c5ef81'),
}

model UpdateProblemTimelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateProblemTimelineResponseBody(name='body'),
}

async function updateProblemTimeline(request: UpdateProblemTimelineRequest): UpdateProblemTimelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProblemTimeline', 'POST', '/problem/process/timeline/update', 'json', false, 'json', request);
}

model UpdateRichTextRequest {
  instanceId?: long(name='instanceId', example='123123', position='Body'),
  instanceType?: string(name='instanceType', example='INCIDENT 事件 ALERT告警 PROBLEM故障', position='Body'),
  richText?: string(name='richText', example='这是一个富文本', position='Body'),
  richTextId?: long(name='richTextId', example='123112313', position='Body'),
}

model UpdateRichTextResponseBody = {
  data?: {
    id?: long(name='id', example='12'),
  }(name='data', description='data'),
  requestId?: string(name='requestId', description='Id of the request', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9'),
}

model UpdateRichTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRichTextResponseBody(name='body'),
}

async function updateRichText(request: UpdateRichTextRequest): UpdateRichTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRichText', 'POST', '/rich/update', 'json', false, 'json', request);
}

model UpdateRouteRuleRequest {
  assignObjectId: long(name='assignObjectId', example='1', position='Body'),
  assignObjectType: string(name='assignObjectType', example='SERVICEGROUP', position='Body'),
  childRuleRelation?: string(name='childRuleRelation', example='AND', position='Body'),
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  convergenceFields?: [ string ](name='convergenceFields', position='Body'),
  convergenceType?: int32(name='convergenceType', position='Body'),
  coverageProblemLevels?: [ string ](name='coverageProblemLevels', position='Body'),
  effection: string(name='effection', example='LOW', position='Body'),
  incidentLevel: string(name='incidentLevel', example='P1', position='Body'),
  matchCount: long(name='matchCount', example='10', position='Body'),
  notifyChannels: [ string ](name='notifyChannels', position='Body'),
  problemEffectionServices?: [ long ](name='problemEffectionServices', position='Body'),
  problemLevelGroup?: map[string]ProblemLevelGroupValue(name='problemLevelGroup', position='Body'),
  relatedServiceId: long(name='relatedServiceId', example='1', position='Body'),
  routeChildRules: [ 
    {
      childConditionRelation?: long(name='childConditionRelation', example='1'),
      childRouteRuleId: long(name='childRouteRuleId', example='1'),
      conditions: [ 
        {
          key: string(name='key', example='payload.summary'),
          operationSymbol: string(name='operationSymbol', example='equals'),
          value: string(name='value', example='123'),
        }
      ](name='conditions'),
      isValidChildRule: boolean(name='isValidChildRule', example='false'),
      monitorSourceId: long(name='monitorSourceId', example='1'),
      problemLevel?: string(name='problemLevel'),
    }
  ](name='routeChildRules', position='Body'),
  routeRuleId: long(name='routeRuleId', example='1', position='Body'),
  routeType: string(name='routeType', example='ALERT', position='Body'),
  ruleName: string(name='ruleName', example='规则1', position='Body'),
  timeWindow: int32(name='timeWindow', example='10', position='Body'),
  timeWindowUnit: string(name='timeWindowUnit', example='MINUTE', position='Body'),
}

model UpdateRouteRuleResponseBody = {
  data?: long(name='data', example='null'),
  requestId?: string(name='requestId', example='C4BE3837-1A13-413B-A225-2C88188E8A43'),
}

model UpdateRouteRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRouteRuleResponseBody(name='body'),
}

async function updateRouteRule(request: UpdateRouteRuleRequest): UpdateRouteRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRouteRule', 'POST', '/routeRule/edit', 'json', false, 'json', request);
}

model UpdateServiceRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  escalationPlanId?: long(name='escalationPlanId', position='Body'),
  serviceDescription?: string(name='serviceDescription', example='服务描述', position='Body'),
  serviceGroupIdList?: [ long ](name='serviceGroupIdList', position='Body'),
  serviceId?: long(name='serviceId', example='10002000', position='Body'),
  serviceName?: string(name='serviceName', example='服务名字', position='Body'),
}

model UpdateServiceResponseBody = {
  data?: long(name='data', example='null'),
  requestId?: string(name='requestId', description='Id of the request', example='C4BE3837-1A13-413B-A225-2C88188E8A43'),
}

model UpdateServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServiceResponseBody(name='body'),
}

async function updateService(request: UpdateServiceRequest): UpdateServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateService', 'POST', '/services/update', 'json', false, 'json', request);
}

model UpdateServiceGroupRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  enableWebhook: string(name='enableWebhook', example='ENABLE', position='Body'),
  monitorSourceTemplates?: [ 
    {
      monitorSourceId?: long(name='monitorSourceId', example='11111'),
      monitorSourceName?: string(name='monitorSourceName', example='zabbix'),
      templateContent?: string(name='templateContent', example='xxxx'),
      templateId?: long(name='templateId', example='1111'),
    }
  ](name='monitorSourceTemplates', position='Body'),
  serviceGroupDescription?: string(name='serviceGroupDescription', example='飞车', position='Body'),
  serviceGroupId: long(name='serviceGroupId', example='1', position='Body'),
  serviceGroupName: string(name='serviceGroupName', example='冲上云霄', position='Body'),
  userIds: [ long ](name='userIds', position='Body'),
  webhookLink: string(name='webhookLink', example='wwwwwww', position='Body'),
  webhookType: string(name='webhookType', example='WEIXINGROUP', position='Body'),
}

model UpdateServiceGroupResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='C4BE3837-1A13-413B-A225-2C88188E8A43'),
}

model UpdateServiceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServiceGroupResponseBody(name='body'),
}

async function updateServiceGroup(request: UpdateServiceGroupRequest): UpdateServiceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceGroup', 'POST', '/services/group/modify', 'json', false, 'json', request);
}

model UpdateServiceGroupSchedulingRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  fastScheduling?: {
    dutyPlan?: string(name='dutyPlan', example='FAST_CHOICE'),
    id?: long(name='id', example='1'),
    schedulingUsers?: [ 
      {
        schedulingObjectType?: string(name='schedulingObjectType'),
        schedulingOrder?: int32(name='schedulingOrder', example='1'),
        schedulingUserId?: long(name='schedulingUserId', example='6666'),
        schedulingUserIdList?: [ long ](name='schedulingUserIdList'),
      }
    ](name='schedulingUsers'),
    singleDuration?: int32(name='singleDuration', example='12'),
    singleDurationUnit?: string(name='singleDurationUnit', example='DAY'),
  }(name='fastScheduling', example='HOUR', position='Body'),
  fineScheduling?: {
    id?: long(name='id', example='1'),
    period?: int32(name='period', example='1'),
    periodUnit?: string(name='periodUnit', example='DAY'),
    schedulingFineShifts?: [ 
      {
        cycleOrder?: int32(name='cycleOrder', example='123'),
        schedulingEndTime?: string(name='schedulingEndTime', example='2020-10-13'),
        schedulingObjectType?: string(name='schedulingObjectType'),
        schedulingOrder?: long(name='schedulingOrder', example='1'),
        schedulingStartTime?: string(name='schedulingStartTime', example='2020-08-13'),
        schedulingUserId?: long(name='schedulingUserId', example='32'),
        schedulingUserIdList?: [ long ](name='schedulingUserIdList'),
        shiftName?: string(name='shiftName', example='早班'),
        skipOneDay?: boolean(name='skipOneDay', example='true'),
      }
    ](name='schedulingFineShifts'),
    schedulingTemplateFineShifts?: [ 
      {
        schedulingEndTime?: string(name='schedulingEndTime', example='2021-11-01 00:00：00'),
        schedulingObjectType?: string(name='schedulingObjectType'),
        schedulingOrder?: int32(name='schedulingOrder', example='1'),
        schedulingStartTime?: string(name='schedulingStartTime', example='2021-10-01 00:00：00'),
        schedulingUserId?: long(name='schedulingUserId', example='1'),
        schedulingUserIdList?: [ long ](name='schedulingUserIdList'),
        shiftName?: string(name='shiftName'),
        skipOneDay?: boolean(name='skipOneDay', example='false'),
      }
    ](name='schedulingTemplateFineShifts'),
    shiftType?: string(name='shiftType', example='MORNING_NIGHT'),
  }(name='fineScheduling', position='Body'),
  schedulingWay: string(name='schedulingWay', example='FAST', position='Body'),
  serviceGroupId: long(name='serviceGroupId', example='1000', position='Body'),
}

model UpdateServiceGroupSchedulingResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='xxxxxxxxxx'),
}

model UpdateServiceGroupSchedulingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServiceGroupSchedulingResponseBody(name='body'),
}

async function updateServiceGroupScheduling(request: UpdateServiceGroupSchedulingRequest): UpdateServiceGroupSchedulingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceGroupScheduling', 'POST', '/services/group/scheduling/update', 'json', false, 'json', request);
}

model UpdateServiceGroupSpecialDaySchedulingRequest {
  clientToken?: string(name='clientToken', example='C4BE3837-1A13-413B-A225-2C88188E8A43', position='Body'),
  schedulingDate: string(name='schedulingDate', example='2021-08-19', position='Body'),
  schedulingSpecialDays: [ 
    {
      schedulingEndTime: string(name='schedulingEndTime', example='2021-08-19 12:00:00'),
      schedulingObjectType?: string(name='schedulingObjectType'),
      schedulingOrder?: int32(name='schedulingOrder', example='1'),
      schedulingStartTime: string(name='schedulingStartTime', example='2021-08-19 08:00:00'),
      schedulingUserId: long(name='schedulingUserId', example='64'),
      schedulingUserIdList?: [ long ](name='schedulingUserIdList'),
    }
  ](name='schedulingSpecialDays', position='Body'),
  serviceGroupId: long(name='serviceGroupId', example='6666', position='Body'),
}

model UpdateServiceGroupSpecialDaySchedulingResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='xxxxxxxx'),
}

model UpdateServiceGroupSpecialDaySchedulingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServiceGroupSpecialDaySchedulingResponseBody(name='body'),
}

async function updateServiceGroupSpecialDayScheduling(request: UpdateServiceGroupSpecialDaySchedulingRequest): UpdateServiceGroupSpecialDaySchedulingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceGroupSpecialDayScheduling', 'POST', '/services/group/scheduling/updateSpecialDayScheduling', 'json', false, 'json', request);
}

model UpdateSubscriptionRequest {
  endTime?: string(name='endTime', example='2022-05-09 10:10:23', position='Body'),
  expiredType: string(name='expiredType', example='LONG_TERM', position='Body'),
  notifyObjectList: [ 
    {
      id?: long(name='id', example='10'),
      notifyObjectId: long(name='notifyObjectId', example='19'),
    }
  ](name='notifyObjectList', position='Body'),
  notifyObjectType: string(name='notifyObjectType', example='USER', position='Body'),
  notifyStrategyList: [ 
    {
      instanceType: long(name='instanceType', example='INCIDENT'),
      strategies: [ 
        {
          channels?: string(name='channels', example='SMS,WEIXIN_GROUP'),
          conditions?: [ 
            {
              action?: string(name='action', example='INCIDENT_TRIGGER'),
              effection?: string(name='effection', example='HIGH'),
              level?: string(name='level', example='P1'),
              problemNotifyType?: string(name='problemNotifyType', example='PROBLEM_NOTIFY'),
            }
          ](name='conditions'),
          id?: string(name='id', example='10'),
          periodChannel?: {
            nonWorkday?: string(name='nonWorkday', example='SMS,WEIXIN_GROUP'),
            workday?: string(name='workday', example='SMS,WEIXIN_GROUP'),
          }(name='periodChannel'),
        }
      ](name='strategies'),
    }
  ](name='notifyStrategyList', position='Body'),
  period?: string(name='period', example='1个月', position='Body'),
  scope: string(name='scope', example='SERVICE', position='Body'),
  scopeObjectList: [ 
    {
      id?: long(name='id', example='1'),
      scopeObjectId: long(name='scopeObjectId', example='1'),
    }
  ](name='scopeObjectList', position='Body'),
  startTime?: string(name='startTime', example='2021-04-04 10:10:11', position='Body'),
  subscriptionId: long(name='subscriptionId', example='80002020', position='Body'),
  subscriptionTitle: string(name='subscriptionTitle', example='newSubs244', position='Body'),
}

model UpdateSubscriptionResponseBody = {
  requestId?: string(name='requestId', description='id of the request', example='c26f36de-1ec8-496a-a828-880676c5ef81'),
}

model UpdateSubscriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSubscriptionResponseBody(name='body'),
}

async function updateSubscription(request: UpdateSubscriptionRequest): UpdateSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateSubscription', 'POST', '/notify/subscription/update', 'json', false, 'json', request);
}

model UpdateUserRequest {
  clientToken?: string(name='clientToken', example='c26f36de-1ec8-496a-a828-880676c5ef81', position='Body'),
  email?: string(name='email', example='78799****@qq.com', position='Body'),
  phone?: string(name='phone', example='18887878****', position='Body'),
  ramId?: long(name='ramId', example='2243564', position='Body'),
  roleIdList?: [ long ](name='roleIdList', position='Body'),
  userId: long(name='userId', example='111', position='Body'),
  username?: string(name='username', position='Body'),
}

model UpdateUserResponseBody = {
  requestId?: string(name='requestId', description='id of the request', example='c26f36de-1ec8-496a-a828-880676c5ef81'),
}

model UpdateUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserResponseBody(name='body'),
}

async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateUser', 'POST', '/user/update', 'json', false, 'json', request);
}

model UpdateUserGuideStatusRequest {
  clientToken?: string(name='clientToken', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9', position='Body'),
  guideAction?: string(name='guideAction', example='SERVICE_GROUP_GUIDE', position='Body'),
}

model UpdateUserGuideStatusResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='FD200FAE-E98F-496E-BFE6-4CE61E59A2E9'),
}

model UpdateUserGuideStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserGuideStatusResponseBody(name='body'),
}

async function updateUserGuideStatus(request: UpdateUserGuideStatusRequest): UpdateUserGuideStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateUserGuideStatus', 'POST', '/user/update/guide/status', 'json', false, 'json', request);
}

model VerifyRouteRuleRequest {
  routeRuleId?: long(name='routeRuleId', example='1111', position='Body'),
  testSourceEvents?: [ 
    {
      eventJson?: string(name='eventJson', example='{}'),
      eventTime?: string(name='eventTime', example='2021-09-08 13:00:00'),
      monitorSourceId?: long(name='monitorSourceId', example='1'),
      monitorSourceName?: string(name='monitorSourceName', example='zabbix'),
    }
  ](name='testSourceEvents', position='Body'),
}

model VerifyRouteRuleResponseBody = {
  data?: {
    escalationPlans?: [ 
      {
        escalationPlanId?: long(name='escalationPlanId', example='111111'),
        escalationPlanName?: string(name='escalationPlanName', example='升级计划1'),
      }
    ](name='escalationPlans'),
    isValidRule?: boolean(name='isValidRule', example='true'),
    monitorSourceIds?: [ long ](name='monitorSourceIds'),
    notifySubscriptionNames?: [ 
      {
        subscriptionId?: long(name='subscriptionId', example='111111'),
        title?: string(name='title', example='订阅名称'),
      }
    ](name='notifySubscriptionNames'),
    routeRuleFailReason?: [ string ](name='routeRuleFailReason'),
    routeType?: string(name='routeType', example='INCIDENT、ALERT'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='xxxxxx'),
}

model VerifyRouteRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VerifyRouteRuleResponseBody(name='body'),
}

async function verifyRouteRule(request: VerifyRouteRuleRequest): VerifyRouteRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VerifyRouteRule', 'POST', '/routeRule/verify', 'json', false, 'json', request);
}

model ProblemLevelGroupValue = {
  childRuleRelation?: int32(name='childRuleRelation'),
  matchCount?: long(name='matchCount'),
  timeWindow?: long(name='timeWindow'),
  timeWindowUnit?: string(name='timeWindowUnit'),
  enableUpgrade?: boolean(name='enableUpgrade'),
  upgradeTimeWindow?: long(name='upgradeTimeWindow'),
  upgradeTimeWindowUnit?: string(name='upgradeTimeWindowUnit'),
}

model DataProblemLevelGroupValue = {
  childRuleRelation?: int32(name='childRuleRelation'),
  matchCount?: long(name='matchCount'),
  timeWindow?: long(name='timeWindow'),
  timeWindowUnit?: string(name='timeWindowUnit'),
  enableUpgrade?: boolean(name='enableUpgrade'),
  upgradeTimeWindow?: long(name='upgradeTimeWindow'),
  upgradeTimeWindowUnit?: string(name='upgradeTimeWindowUnit'),
}

model DataValue = {
  code?: string(name='code', example='SMS'),
  description?: string(name='description'),
  configDescription?: string(name='configDescription'),
  configCode?: string(name='configCode', example='PROBLEM_REASON_DISASTER'),
  parentCode?: string(name='parentCode', example='PROBLEM_REASON'),
  configKey?: string(name='configKey', example='2'),
  configValue?: string(name='configValue'),
  requirement?: boolean(name='requirement', example='true'),
}

