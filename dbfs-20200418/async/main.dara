/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'DBFS';
  @version = '2020-04-18';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'dbfs.aliyuncs.com',
    cn-beijing-finance-1 = 'dbfs.aliyuncs.com',
    cn-beijing-finance-pop = 'dbfs.aliyuncs.com',
    cn-beijing-gov-1 = 'dbfs.aliyuncs.com',
    cn-beijing-nu16-b01 = 'dbfs.aliyuncs.com',
    cn-edge-1 = 'dbfs.aliyuncs.com',
    cn-fujian = 'dbfs.aliyuncs.com',
    cn-haidian-cm12-c01 = 'dbfs.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'dbfs.aliyuncs.com',
    cn-hangzhou-finance = 'dbfs.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'dbfs.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'dbfs.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'dbfs.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'dbfs.aliyuncs.com',
    cn-hangzhou-test-306 = 'dbfs.aliyuncs.com',
    cn-hongkong-finance-pop = 'dbfs.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'dbfs.aliyuncs.com',
    cn-north-2-gov-1 = 'dbfs.aliyuncs.com',
    cn-qingdao-nebula = 'dbfs.aliyuncs.com',
    cn-shanghai-et15-b01 = 'dbfs.aliyuncs.com',
    cn-shanghai-et2-b01 = 'dbfs.aliyuncs.com',
    cn-shanghai-finance-1 = 'dbfs.aliyuncs.com',
    cn-shanghai-inner = 'dbfs.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'dbfs.aliyuncs.com',
    cn-shenzhen-finance-1 = 'dbfs.aliyuncs.com',
    cn-shenzhen-inner = 'dbfs.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'dbfs.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'dbfs.aliyuncs.com',
    cn-wuhan = 'dbfs.aliyuncs.com',
    cn-wulanchabu = 'dbfs.aliyuncs.com',
    cn-yushanfang = 'dbfs.aliyuncs.com',
    cn-zhangbei = 'dbfs.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'dbfs.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'dbfs.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'dbfs.aliyuncs.com',
    eu-west-1-oxs = 'dbfs.aliyuncs.com',
    rus-west-1-pop = 'dbfs.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddTagsBatchRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dbfsList: string(name='DbfsList', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  tags: string(name='Tags', position='Query'),
}

model AddTagsBatchResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddTagsBatchResponse = {
  headers: map[string]string(name='headers'),
  body: AddTagsBatchResponseBody(name='body'),
}

async function addTagsBatch(request: AddTagsBatchRequest): AddTagsBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTagsBatch', 'POST', '/', 'json', false, 'json', request);
}

model AttachDbfsRequest {
  attachMode?: string(name='AttachMode', position='Query'),
  attachPoint?: string(name='AttachPoint', position='Query'),
  ECSInstanceId: string(name='ECSInstanceId', position='Query'),
  fsId: string(name='FsId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  serverUrl?: string(name='ServerUrl', position='Query'),
}

model AttachDbfsResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachDbfsResponse = {
  headers: map[string]string(name='headers'),
  body: AttachDbfsResponseBody(name='body'),
}

async function attachDbfs(request: AttachDbfsRequest): AttachDbfsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachDbfs', 'POST', '/', 'json', false, 'json', request);
}

model CreateDbfsRequest {
  advancedFeatures?: string(name='AdvancedFeatures', position='Query'),
  category: string(name='Category', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  deleteSnapshot?: boolean(name='DeleteSnapshot', position='Query'),
  enableRaid?: boolean(name='EnableRaid', position='Query'),
  encryption?: boolean(name='Encryption', position='Query'),
  fsName: string(name='FsName', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
  KMSKeyId?: string(name='KMSKeyId', position='Query'),
  performanceLevel?: string(name='PerformanceLevel', position='Query'),
  raidStripeUnitNumber?: int32(name='RaidStripeUnitNumber', minimum=0, maximum=100, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  sizeG: int32(name='SizeG', minimum=20, position='Query'),
  snapshotId?: string(name='SnapshotId', position='Query'),
  usedScene?: string(name='UsedScene', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model CreateDbfsResponseBody = {
  fsId?: string(name='FsId'),
  requestId?: string(name='RequestId'),
}

model CreateDbfsResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDbfsResponseBody(name='body'),
}

async function createDbfs(request: CreateDbfsRequest): CreateDbfsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDbfs', 'POST', '/', 'json', false, 'json', request);
}

model CreateServiceLinkedRoleRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model CreateServiceLinkedRoleResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceLinkedRoleResponseBody(name='body'),
}

async function createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): CreateServiceLinkedRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServiceLinkedRole', 'POST', '/', 'json', false, 'json', request);
}

model CreateSnapshotRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  fsId: string(name='FsId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  retentionDays?: int32(name='RetentionDays', minimum=-1, maximum=36500, position='Query'),
  snapshotName?: string(name='SnapshotName', position='Query'),
}

model CreateSnapshotResponseBody = {
  requestId?: string(name='RequestId'),
  snapshotId?: string(name='SnapshotId'),
}

model CreateSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSnapshotResponseBody(name='body'),
}

async function createSnapshot(request: CreateSnapshotRequest): CreateSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDbfsRequest {
  fsId: string(name='FsId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DeleteDbfsResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDbfsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDbfsResponseBody(name='body'),
}

async function deleteDbfs(request: DeleteDbfsRequest): DeleteDbfsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDbfs', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSnapshotRequest {
  force?: boolean(name='Force', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  snapshotId: string(name='SnapshotId', position='Query'),
}

model DeleteSnapshotResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSnapshotResponseBody(name='body'),
}

async function deleteSnapshot(request: DeleteSnapshotRequest): DeleteSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTagsBatchRequest {
  dbfsList: string(name='DbfsList', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  tags: string(name='Tags', position='Query'),
}

model DeleteTagsBatchResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTagsBatchResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTagsBatchResponseBody(name='body'),
}

async function deleteTagsBatch(request: DeleteTagsBatchRequest): DeleteTagsBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTagsBatch', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDbfsSpecificationsRequest {
  category: string(name='Category', position='Query'),
  ecsInstanceType: string(name='EcsInstanceType', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DescribeDbfsSpecificationsResponseBody = {
  maxDbfsNumberPerEcs?: map[string]any(name='MaxDbfsNumberPerEcs'),
  requestId?: string(name='RequestId'),
  supportedEcsInstanceTypeFamily?: [ string ](name='SupportedEcsInstanceTypeFamily'),
}

model DescribeDbfsSpecificationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDbfsSpecificationsResponseBody(name='body'),
}

async function describeDbfsSpecifications(request: DescribeDbfsSpecificationsRequest): DescribeDbfsSpecificationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDbfsSpecifications', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceTypesRequest {
  regionId: string(name='RegionId', description='地域ID', position='Query'),
}

model DescribeInstanceTypesResponseBody = {
  instanceTypes?: [ 
    {
      cpuCoreCount?: float(name='CpuCoreCount'),
      instanceTypeDescription?: string(name='InstanceTypeDescription'),
      instanceTypeId?: string(name='InstanceTypeId'),
      memorySize?: float(name='MemorySize'),
    }
  ](name='InstanceTypes', description='Array of InstanceType'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeInstanceTypesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceTypesResponseBody(name='body'),
}

async function describeInstanceTypes(request: DescribeInstanceTypesRequest): DescribeInstanceTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceTypes', 'POST', '/', 'json', false, 'json', request);
}

model DetachDbfsRequest {
  ECSInstanceId: string(name='ECSInstanceId', position='Query'),
  fsId: string(name='FsId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model DetachDbfsResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachDbfsResponse = {
  headers: map[string]string(name='headers'),
  body: DetachDbfsResponseBody(name='body'),
}

async function detachDbfs(request: DetachDbfsRequest): DetachDbfsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachDbfs', 'POST', '/', 'json', false, 'json', request);
}

model GetDbfsRequest {
  fsId: string(name='FsId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model GetDbfsResponseBody = {
  DBFSInfo?: {
    attachNodeNumber?: int32(name='AttachNodeNumber'),
    category?: string(name='Category'),
    createdTime?: string(name='CreatedTime'),
    DBFSClusterId?: string(name='DBFSClusterId'),
    description?: string(name='Description'),
    ebsList?: [ 
      {
        ebsId?: string(name='EbsId'),
        sizeG?: int32(name='SizeG'),
      }
    ](name='EbsList'),
    ecsList?: [ 
      {
        ecsId?: string(name='EcsId'),
      }
    ](name='EcsList'),
    enableRaid?: boolean(name='EnableRaid'),
    encryption?: boolean(name='Encryption'),
    fsId?: string(name='FsId'),
    fsName?: string(name='FsName'),
    instanceType?: string(name='InstanceType'),
    KMSKeyId?: string(name='KMSKeyId'),
    lastFailed?: string(name='LastFailed'),
    lastMountTime?: string(name='LastMountTime'),
    lastUmountTime?: string(name='LastUmountTime'),
    payType?: string(name='PayType'),
    performanceLevel?: string(name='PerformanceLevel'),
    raidStrip?: int32(name='RaidStrip'),
    regionId?: string(name='RegionId'),
    sizeG?: int32(name='SizeG'),
    status?: string(name='Status'),
    tags?: [ 
      {
        id?: int32(name='Id'),
        tagKey?: string(name='TagKey'),
        tagValue?: string(name='TagValue'),
      }
    ](name='Tags'),
    usedScene?: string(name='UsedScene'),
    zoneId?: string(name='ZoneId'),
  }(name='DBFSInfo'),
  requestId?: string(name='RequestId'),
}

model GetDbfsResponse = {
  headers: map[string]string(name='headers'),
  body: GetDbfsResponseBody(name='body'),
}

async function getDbfs(request: GetDbfsRequest): GetDbfsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDbfs', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceLinkedRoleRequest {
  regionId: string(name='RegionId', position='Query'),
}

model GetServiceLinkedRoleResponseBody = {
  accountId?: string(name='AccountId'),
  dbfsLinkedRole?: boolean(name='DbfsLinkedRole'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
}

model GetServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceLinkedRoleResponseBody(name='body'),
}

async function getServiceLinkedRole(request: GetServiceLinkedRoleRequest): GetServiceLinkedRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceLinkedRole', 'POST', '/', 'json', false, 'json', request);
}

model ListDbfsRequest {
  filterKey?: string(name='FilterKey', position='Query'),
  filterValue?: string(name='FilterValue', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=999999, position='Query'),
  pageSize?: int32(name='PageSize', minimum=10, maximum=200, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  sortKey?: string(name='SortKey', position='Query'),
  sortType?: string(name='SortType', position='Query'),
  tags?: string(name='Tags', position='Query'),
}

model ListDbfsResponseBody = {
  DBFSInfo?: [ 
    {
      attachNodeNumber?: int32(name='AttachNodeNumber'),
      category?: string(name='Category'),
      createdTime?: string(name='CreatedTime'),
      DBFSClusterId?: string(name='DBFSClusterId'),
      ebsList?: [ 
        {
          ebsId?: string(name='EbsId'),
          sizeG?: int32(name='SizeG'),
        }
      ](name='EbsList'),
      ecsList?: [ 
        {
          ecsId?: string(name='EcsId'),
        }
      ](name='EcsList'),
      enableRaid?: boolean(name='EnableRaid'),
      encryption?: boolean(name='Encryption'),
      fsId?: string(name='FsId'),
      fsName?: string(name='FsName'),
      instanceType?: string(name='InstanceType'),
      KMSKeyId?: string(name='KMSKeyId'),
      lastFailed?: string(name='LastFailed'),
      lastMountTime?: string(name='LastMountTime'),
      lastUmountTime?: string(name='LastUmountTime'),
      payType?: string(name='PayType'),
      performanceLevel?: string(name='PerformanceLevel'),
      raidStrip?: int32(name='RaidStrip'),
      regionId?: string(name='RegionId'),
      sizeG?: int32(name='SizeG'),
      status?: string(name='Status'),
      tags?: [ 
        {
          id?: long(name='Id'),
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tags'),
      usedScene?: string(name='UsedScene'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DBFSInfo'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListDbfsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDbfsResponseBody(name='body'),
}

async function listDbfs(request: ListDbfsRequest): ListDbfsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDbfs', 'POST', '/', 'json', false, 'json', request);
}

model ListDbfsAttachableEcsInstancesRequest {
  filterKey?: string(name='FilterKey', position='Query'),
  filterValue?: string(name='FilterValue', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ListDbfsAttachableEcsInstancesResponseBody = {
  ecsLabelInfo?: [ 
    {
      instanceTypeFamily?: string(name='InstanceTypeFamily'),
      OSName?: string(name='OSName'),
      status?: string(name='Status'),
      zoneId?: string(name='ZoneId'),
      label?: string(name='label'),
      value?: string(name='value'),
    }
  ](name='EcsLabelInfo'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListDbfsAttachableEcsInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDbfsAttachableEcsInstancesResponseBody(name='body'),
}

async function listDbfsAttachableEcsInstances(request: ListDbfsAttachableEcsInstancesRequest): ListDbfsAttachableEcsInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDbfsAttachableEcsInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListDbfsAttachedEcsInstancesRequest {
  fsId: string(name='FsId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ListDbfsAttachedEcsInstancesResponseBody = {
  ecsLabelInfo?: [ 
    {
      instanceTypeFamily?: string(name='InstanceTypeFamily'),
      mountPoint?: string(name='MountPoint'),
      mountedTime?: string(name='MountedTime'),
      OSName?: string(name='OSName'),
      label?: string(name='label'),
      value?: string(name='value'),
    }
  ](name='EcsLabelInfo'),
  requestId?: string(name='RequestId'),
}

model ListDbfsAttachedEcsInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDbfsAttachedEcsInstancesResponseBody(name='body'),
}

async function listDbfsAttachedEcsInstances(request: ListDbfsAttachedEcsInstancesRequest): ListDbfsAttachedEcsInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDbfsAttachedEcsInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListSnapshotRequest {
  filterKey?: string(name='FilterKey', position='Query'),
  filterValue?: string(name='FilterValue', position='Query'),
  fsId?: string(name='FsId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=10240, position='Query'),
  pageSize?: int32(name='PageSize', minimum=10, maximum=200, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  snapshotIds?: string(name='SnapshotIds', position='Query'),
  snapshotName?: string(name='SnapshotName', position='Query'),
  snapshotType?: string(name='SnapshotType', position='Query'),
  sortKey?: string(name='SortKey', position='Query'),
  sortType?: string(name='SortType', position='Query'),
  status?: string(name='Status', position='Query'),
}

model ListSnapshotResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  snapshots?: [ 
    {
      category?: string(name='Category'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      lastModifiedTime?: string(name='LastModifiedTime'),
      progress?: string(name='Progress'),
      remainTime?: int32(name='RemainTime'),
      retentionDays?: int32(name='RetentionDays'),
      snapshotId?: string(name='SnapshotId'),
      snapshotName?: string(name='SnapshotName'),
      snapshotType?: string(name='SnapshotType'),
      sourceFsId?: string(name='SourceFsId'),
      sourceFsSize?: int32(name='SourceFsSize'),
      sourceFsStripeWidth?: int32(name='SourceFsStripeWidth'),
      status?: string(name='Status'),
    }
  ](name='Snapshots'),
  totalCount?: int32(name='TotalCount'),
}

model ListSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: ListSnapshotResponseBody(name='body'),
}

async function listSnapshot(request: ListSnapshotRequest): ListSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model ListTagKeysRequest {
  regionId: string(name='RegionId', position='Query'),
}

model ListTagKeysResponseBody = {
  requestId?: string(name='RequestId'),
  tagKeys?: [ string ](name='TagKeys'),
}

model ListTagKeysResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagKeysResponseBody(name='body'),
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagKeys', 'POST', '/', 'json', false, 'json', request);
}

model ListTagValuesRequest {
  regionId: string(name='RegionId', position='Query'),
  tagKey: string(name='TagKey', position='Query'),
}

model ListTagValuesResponseBody = {
  requestId?: string(name='RequestId'),
  tagValues?: [ string ](name='TagValues'),
}

model ListTagValuesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagValuesResponseBody(name='body'),
}

async function listTagValues(request: ListTagValuesRequest): ListTagValuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagValues', 'POST', '/', 'json', false, 'json', request);
}

model RenameDbfsRequest {
  fsId: string(name='FsId', position='Query'),
  fsName: string(name='FsName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model RenameDbfsResponseBody = {
  requestId?: string(name='RequestId'),
}

model RenameDbfsResponse = {
  headers: map[string]string(name='headers'),
  body: RenameDbfsResponseBody(name='body'),
}

async function renameDbfs(request: RenameDbfsRequest): RenameDbfsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenameDbfs', 'POST', '/', 'json', false, 'json', request);
}

model ResizeDbfsRequest {
  fsId: string(name='FsId', position='Query'),
  newSizeG: int32(name='NewSizeG', minimum=20, position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ResizeDbfsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResizeDbfsResponse = {
  headers: map[string]string(name='headers'),
  body: ResizeDbfsResponseBody(name='body'),
}

async function resizeDbfs(request: ResizeDbfsRequest): ResizeDbfsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResizeDbfs', 'POST', '/', 'json', false, 'json', request);
}

model TagDbfsRequest {
  dbfsId: string(name='DbfsId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  tags: string(name='Tags', position='Query'),
}

model TagDbfsResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagDbfsResponse = {
  headers: map[string]string(name='headers'),
  body: TagDbfsResponseBody(name='body'),
}

async function tagDbfs(request: TagDbfsRequest): TagDbfsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagDbfs', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDbfsRequest {
  advancedFeatures?: string(name='AdvancedFeatures', position='Query'),
  fsId: string(name='FsId', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  usedScene?: string(name='UsedScene', position='Query'),
}

model UpdateDbfsResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDbfsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDbfsResponseBody(name='body'),
}

async function updateDbfs(request: UpdateDbfsRequest): UpdateDbfsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDbfs', 'POST', '/', 'json', false, 'json', request);
}

