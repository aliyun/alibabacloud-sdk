/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'DBFS';
  @version = '2020-04-18';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'dbfs.aliyuncs.com',
    cn-beijing-finance-1 = 'dbfs.aliyuncs.com',
    cn-beijing-finance-pop = 'dbfs.aliyuncs.com',
    cn-beijing-gov-1 = 'dbfs.aliyuncs.com',
    cn-beijing-nu16-b01 = 'dbfs.aliyuncs.com',
    cn-edge-1 = 'dbfs.aliyuncs.com',
    cn-fujian = 'dbfs.aliyuncs.com',
    cn-haidian-cm12-c01 = 'dbfs.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'dbfs.aliyuncs.com',
    cn-hangzhou-finance = 'dbfs.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'dbfs.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'dbfs.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'dbfs.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'dbfs.aliyuncs.com',
    cn-hangzhou-test-306 = 'dbfs.aliyuncs.com',
    cn-hongkong-finance-pop = 'dbfs.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'dbfs.aliyuncs.com',
    cn-north-2-gov-1 = 'dbfs.aliyuncs.com',
    cn-qingdao-nebula = 'dbfs.aliyuncs.com',
    cn-shanghai-et15-b01 = 'dbfs.aliyuncs.com',
    cn-shanghai-et2-b01 = 'dbfs.aliyuncs.com',
    cn-shanghai-finance-1 = 'dbfs.aliyuncs.com',
    cn-shanghai-inner = 'dbfs.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'dbfs.aliyuncs.com',
    cn-shenzhen-finance-1 = 'dbfs.aliyuncs.com',
    cn-shenzhen-inner = 'dbfs.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'dbfs.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'dbfs.aliyuncs.com',
    cn-wuhan = 'dbfs.aliyuncs.com',
    cn-wulanchabu = 'dbfs.aliyuncs.com',
    cn-yushanfang = 'dbfs.aliyuncs.com',
    cn-zhangbei = 'dbfs.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'dbfs.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'dbfs.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'dbfs.aliyuncs.com',
    eu-west-1-oxs = 'dbfs.aliyuncs.com',
    rus-west-1-pop = 'dbfs.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddTagsBatchRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dbfsList: string(name='DbfsList', example='["dbfs-nUy1tb********BQ4X8Gpw","dbfs-v0WvA********tVEVcgJLg"]', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  tags: string(name='Tags', example='[{"TagKey":"k1","TagValue":"v1"},{"TagKey":"k2","TagValue":"v2"}]', position='Query'),
}

model AddTagsBatchResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AddTagsBatchResponse = {
  headers: map[string]string(name='headers'),
  body: AddTagsBatchResponseBody(name='body'),
}

async function addTagsBatch(request: AddTagsBatchRequest): AddTagsBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTagsBatch', 'POST', '/', 'json', false, 'json', request);
}

model ApplyAutoSnapshotPolicyRequest {
  dbfsIds: [ string ](name='DbfsIds', shrink='json', position='Query'),
  policyId: string(name='PolicyId', description='策略ID', example='sp-z5siir3iq3m**********', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ApplyAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ApplyAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyAutoSnapshotPolicyResponseBody(name='body'),
}

async function applyAutoSnapshotPolicy(request: ApplyAutoSnapshotPolicyRequest): ApplyAutoSnapshotPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyAutoSnapshotPolicy', 'POST', '/', 'json', false, 'json', request);
}

model AttachDbfsRequest {
  attachMode?: string(name='AttachMode', example='create_new_mount_point', position='Query'),
  attachPoint?: string(name='AttachPoint', example='/mnt/dbfs/dbfs-001', position='Query'),
  ECSInstanceId: string(name='ECSInstanceId', example='i-bp1ecr********5go2go', position='Query'),
  fsId: string(name='FsId', example='dbfs-v0WvA********tVEVcgJLg', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serverUrl?: string(name='ServerUrl', example='dbfs-pkg-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com', position='Query'),
}

model AttachDbfsResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AttachDbfsResponse = {
  headers: map[string]string(name='headers'),
  body: AttachDbfsResponseBody(name='body'),
}

async function attachDbfs(request: AttachDbfsRequest): AttachDbfsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachDbfs', 'POST', '/', 'json', false, 'json', request);
}

model CancelAutoSnapshotPolicyRequest {
  dbfsIds: [ string ](name='DbfsIds', shrink='json', position='Query'),
  policyId: string(name='PolicyId', description='策略ID', example='sp-z5siir3iq3m**********', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model CancelAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CancelAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CancelAutoSnapshotPolicyResponseBody(name='body'),
}

async function cancelAutoSnapshotPolicy(request: CancelAutoSnapshotPolicyRequest): CancelAutoSnapshotPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelAutoSnapshotPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateAutoSnapshotPolicyRequest {
  policyName: string(name='PolicyName', description='自动快照策略名称', example='policyTest', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  repeatWeekdays: [ string ](name='RepeatWeekdays', description='重复星期', shrink='json', position='Query'),
  retentionDays: int32(name='RetentionDays', description='保留天数', example='30', minimum=-1, maximum=65536, position='Query'),
  timePoints: [ string ](name='TimePoints', description='重复时间', shrink='json', position='Query'),
}

model CreateAutoSnapshotPolicyResponseBody = {
  policyId?: string(name='PolicyId', example='sp-z5siir3iq3m**********'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAutoSnapshotPolicyResponseBody(name='body'),
}

async function createAutoSnapshotPolicy(request: CreateAutoSnapshotPolicyRequest): CreateAutoSnapshotPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAutoSnapshotPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateDbfsRequest {
  advancedFeatures?: string(name='AdvancedFeatures', example='{"cpuCoreCount":0.5,"memorySize":512,"pageCacheSize":128}', position='Query'),
  category: string(name='Category', example='standard', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  deleteSnapshot?: boolean(name='DeleteSnapshot', example='false', position='Query'),
  enableRaid?: boolean(name='EnableRaid', example='false', position='Query'),
  encryption?: boolean(name='Encryption', example='false', position='Query'),
  fsName: string(name='FsName', example='testdbfs-001', position='Query'),
  instanceType?: string(name='InstanceType', example='dbfs.small', position='Query'),
  KMSKeyId?: string(name='KMSKeyId', example='0e478b7a-4262-4802-b8cb-00d3fb40826X', position='Query'),
  performanceLevel?: string(name='PerformanceLevel', example='PL1', position='Query'),
  raidStripeUnitNumber?: int32(name='RaidStripeUnitNumber', example='2', minimum=0, maximum=100, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  sizeG: int32(name='SizeG', example='200', minimum=20, position='Query'),
  snapshotId?: string(name='SnapshotId', example='s-y2vZ3********vvMilZ2hQ', position='Query'),
  usedScene?: string(name='UsedScene', example='PostgreSQL', position='Query'),
  zoneId: string(name='ZoneId', example='cn-hangzhou-i', position='Query'),
}

model CreateDbfsResponseBody = {
  fsId?: string(name='FsId', example='dbfs-GOrr********Yd0VLOyBpg'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateDbfsResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDbfsResponseBody(name='body'),
}

async function createDbfs(request: CreateDbfsRequest): CreateDbfsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDbfs', 'POST', '/', 'json', false, 'json', request);
}

model CreateServiceLinkedRoleRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model CreateServiceLinkedRoleResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceLinkedRoleResponseBody(name='body'),
}

async function createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): CreateServiceLinkedRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServiceLinkedRole', 'POST', '/', 'json', false, 'json', request);
}

model CreateSnapshotRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', example='testDescription', position='Query'),
  fsId: string(name='FsId', example='d-bp131n0q38u3a4zi*****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  retentionDays?: int32(name='RetentionDays', example='30', minimum=-1, maximum=36500, position='Query'),
  snapshotName?: string(name='SnapshotName', example='testSnapshotName', position='Query'),
}

model CreateSnapshotResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  snapshotId?: string(name='SnapshotId', example='s-Q2greuDZTvWeS8bfKZ****'),
}

model CreateSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSnapshotResponseBody(name='body'),
}

async function createSnapshot(request: CreateSnapshotRequest): CreateSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAutoSnapshotPolicyRequest {
  policyId: string(name='PolicyId', description='策略ID', example='sp-z5siir3iq3m**********', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC********'),
}

model DeleteAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAutoSnapshotPolicyResponseBody(name='body'),
}

async function deleteAutoSnapshotPolicy(request: DeleteAutoSnapshotPolicyRequest): DeleteAutoSnapshotPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAutoSnapshotPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDbfsRequest {
  fsId: string(name='FsId', example='d-bp131n0q38u3a4zi*****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteDbfsResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteDbfsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDbfsResponseBody(name='body'),
}

async function deleteDbfs(request: DeleteDbfsRequest): DeleteDbfsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDbfs', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSnapshotRequest {
  force?: boolean(name='Force', example='false', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  snapshotId: string(name='SnapshotId', position='Query'),
}

model DeleteSnapshotResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSnapshotResponseBody(name='body'),
}

async function deleteSnapshot(request: DeleteSnapshotRequest): DeleteSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTagsBatchRequest {
  dbfsList: string(name='DbfsList', example='["dbfs-nUy1tb********BQ4X8Gpw","dbfs-v0WvA********tVEVcgJLg"]', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  tags: string(name='Tags', example='[{"TagKey":"k1","TagValue":"v1"},{"TagKey":"k2","TagValue":"v2"}]', position='Query'),
}

model DeleteTagsBatchResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteTagsBatchResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTagsBatchResponseBody(name='body'),
}

async function deleteTagsBatch(request: DeleteTagsBatchRequest): DeleteTagsBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTagsBatch', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDbfsSpecificationsRequest {
  category: string(name='Category', example='enterprise', position='Query'),
  ecsInstanceType: string(name='EcsInstanceType', example='ecs.g7se', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeDbfsSpecificationsResponseBody = {
  maxDbfsNumberPerEcs?: map[string]any(name='MaxDbfsNumberPerEcs', example='4'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  supportedEcsInstanceTypeFamily?: [ string ](name='SupportedEcsInstanceTypeFamily'),
}

model DescribeDbfsSpecificationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDbfsSpecificationsResponseBody(name='body'),
}

async function describeDbfsSpecifications(request: DescribeDbfsSpecificationsRequest): DescribeDbfsSpecificationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDbfsSpecifications', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceTypesRequest {
  regionId: string(name='RegionId', description='地域ID', example='cn-hangzhou', position='Query'),
}

model DescribeInstanceTypesResponseBody = {
  instanceTypes?: [ 
    {
      cpuCoreCount?: float(name='CpuCoreCount', example='0.25'),
      instanceTypeDescription?: string(name='InstanceTypeDescription', example='dbfs.small'),
      instanceTypeId?: string(name='InstanceTypeId', example='dbfs.small'),
      memorySize?: float(name='MemorySize', example='0.5'),
    }
  ](name='InstanceTypes', description='Array of InstanceType'),
  requestId?: string(name='RequestId', description='Id of the request', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeInstanceTypesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceTypesResponseBody(name='body'),
}

async function describeInstanceTypes(request: DescribeInstanceTypesRequest): DescribeInstanceTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceTypes', 'POST', '/', 'json', false, 'json', request);
}

model DetachDbfsRequest {
  ECSInstanceId: string(name='ECSInstanceId', example='i-bp67acfmxazb4ph***', position='Query'),
  fsId: string(name='FsId', example='d-bp131n0q38u3a4zi*****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DetachDbfsResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DetachDbfsResponse = {
  headers: map[string]string(name='headers'),
  body: DetachDbfsResponseBody(name='body'),
}

async function detachDbfs(request: DetachDbfsRequest): DetachDbfsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachDbfs', 'POST', '/', 'json', false, 'json', request);
}

model GetAutoSnapshotPolicyRequest {
  policyId: string(name='PolicyId', description='策略ID', example='sp-z5siir3iq3m**********', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model GetAutoSnapshotPolicyResponseBody = {
  data?: {
    accountId?: string(name='AccountId', description='账户ID', example='13523459********'),
    appliedDbfsNumber?: int32(name='AppliedDbfsNumber', description='设置的dbfs数', example='1'),
    createdTime?: string(name='CreatedTime', example='1670998784000'),
    lastModified?: string(name='LastModified', example='1670998784000'),
    policyId?: string(name='PolicyId', description='策略ID', example='sp-z5siir3iq3m**********'),
    policyName?: string(name='PolicyName', description='自动快照策略名称', example='PolicyTest'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    repeatWeekdays?: [ string ](name='RepeatWeekdays'),
    retentionDays?: int32(name='RetentionDays', description='快照保留天数（1-65535，NULL为永久保存）', example='30'),
    status?: string(name='Status', description='策略状态', example='Normal'),
    statusDetail?: string(name='StatusDetail', example='-'),
    timePoints?: [ string ](name='TimePoints'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model GetAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: GetAutoSnapshotPolicyResponseBody(name='body'),
}

async function getAutoSnapshotPolicy(request: GetAutoSnapshotPolicyRequest): GetAutoSnapshotPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAutoSnapshotPolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetDbfsRequest {
  fsId: string(name='FsId', example='dbfs-GOrr********Yd0VLOyBpg', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model GetDbfsResponseBody = {
  DBFSInfo?: {
    attachNodeNumber?: int32(name='AttachNodeNumber', example='1'),
    category?: string(name='Category', example='standard'),
    createdTime?: string(name='CreatedTime', example='1609330367000'),
    DBFSClusterId?: string(name='DBFSClusterId', example='c39EcDBf-2Ecb-C3C6-6526-018d4Dcf63eD'),
    description?: string(name='Description', example='desc'),
    ebsList?: [ 
      {
        ebsId?: string(name='EbsId', example='d-bp1hq4******qi7gy1th'),
        sizeG?: int32(name='SizeG', example='20'),
      }
    ](name='EbsList'),
    ecsList?: [ 
      {
        ecsId?: string(name='EcsId', example='i-y2vZ3********vvMilZ2hQ'),
      }
    ](name='EcsList'),
    enableRaid?: boolean(name='EnableRaid', example='false'),
    encryption?: boolean(name='Encryption', example='false'),
    fsId?: string(name='FsId', example='dbfs-GOrr********Yd0VLOyBpg'),
    fsName?: string(name='FsName', example='dbfs-test-01'),
    instanceType?: string(name='InstanceType', example='dbfs.small'),
    KMSKeyId?: string(name='KMSKeyId', example='c39EcDBf-2Ecb-C3C6-6526-018d4D******'),
    lastFailed?: string(name='LastFailed', example='TargetIsBusy.DBFS'),
    lastMountTime?: string(name='LastMountTime', example='1644915400000'),
    lastUmountTime?: string(name='LastUmountTime', example='1644915319000'),
    payType?: string(name='PayType', example='postpaid'),
    performanceLevel?: string(name='PerformanceLevel', example='PL1'),
    raidStrip?: int32(name='RaidStrip', example='2'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    sizeG?: int32(name='SizeG', example='20'),
    snapshotInfo?: {
      linkId?: string(name='LinkId'),
      policyId?: string(name='PolicyId'),
      snapshotCount?: int32(name='SnapshotCount'),
      totalSize?: long(name='totalSize'),
    }(name='SnapshotInfo'),
    status?: string(name='Status', example='attached'),
    tags?: [ 
      {
        id?: int32(name='Id', example='1'),
        tagKey?: string(name='TagKey', example='TestTagKey1'),
        tagValue?: string(name='TagValue', example='TestTagValue1'),
      }
    ](name='Tags'),
    usedScene?: string(name='UsedScene', example='MySQL 5.7'),
    zoneId?: string(name='ZoneId', example='cn-hangzhou-i'),
  }(name='DBFSInfo'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model GetDbfsResponse = {
  headers: map[string]string(name='headers'),
  body: GetDbfsResponseBody(name='body'),
}

async function getDbfs(request: GetDbfsRequest): GetDbfsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDbfs', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceLinkedRoleRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model GetServiceLinkedRoleResponseBody = {
  accountId?: string(name='AccountId', example='1352345930******'),
  dbfsLinkedRole?: boolean(name='DbfsLinkedRole', example='true'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model GetServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceLinkedRoleResponseBody(name='body'),
}

async function getServiceLinkedRole(request: GetServiceLinkedRoleRequest): GetServiceLinkedRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceLinkedRole', 'POST', '/', 'json', false, 'json', request);
}

model ListAutoSnapshotPoliciesRequest {
  filterKey?: string(name='FilterKey', example='PolicyName', position='Query'),
  filterValue?: string(name='FilterValue', example='policyTest', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=999999, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=10, maximum=200, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListAutoSnapshotPoliciesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  snapshotPolicies?: [ 
    {
      accountId?: string(name='AccountId', description='账户ID', example='13523459********'),
      appliedDbfsNumber?: int32(name='AppliedDbfsNumber', description='设置的dbfs数', example='1'),
      createdTime?: string(name='CreatedTime', example='1670998784000'),
      lastModified?: string(name='LastModified', example='1670998784000'),
      policyId?: string(name='PolicyId', description='策略ID', example='sp-z5siir3iq3m**********'),
      policyName?: string(name='PolicyName', description='自动快照策略名称', example='policyTest'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      repeatWeekdays?: [ string ](name='RepeatWeekdays'),
      retentionDays?: int32(name='RetentionDays', description='快照保留天数（1-65535，NULL为永久保存）', example='30'),
      status?: string(name='Status', description='策略状态', example='Normal'),
      statusDetail?: string(name='StatusDetail', example='-'),
      timePoints?: [ string ](name='TimePoints'),
    }
  ](name='SnapshotPolicies'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListAutoSnapshotPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAutoSnapshotPoliciesResponseBody(name='body'),
}

async function listAutoSnapshotPolicies(request: ListAutoSnapshotPoliciesRequest): ListAutoSnapshotPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAutoSnapshotPolicies', 'POST', '/', 'json', false, 'json', request);
}

model ListAutoSnapshotPolicyAppliedDbfsRequest {
  filterKey?: string(name='FilterKey', example='FsName', position='Query'),
  filterValue?: string(name='FilterValue', example='DBFS1', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=999999, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=10, maximum=200, position='Query'),
  policyId: string(name='PolicyId', example='sp-z5siir3iq3m**********', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListAutoSnapshotPolicyAppliedDbfsResponseBody = {
  dbfsList?: [ 
    {
      fsId?: string(name='FsId', description='DBFS实例ID', example='dbfs-ejdvesb0qvuywvg*******'),
      fsName?: string(name='FsName', description='DBFS实例名称', example='test'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      sizeG?: long(name='SizeG', description='容量（GB）', example='20'),
      snapshotCount?: string(name='SnapshotCount'),
      status?: string(name='Status', example='attached'),
      totalSize?: string(name='TotalSize'),
    }
  ](name='DbfsList'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListAutoSnapshotPolicyAppliedDbfsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAutoSnapshotPolicyAppliedDbfsResponseBody(name='body'),
}

async function listAutoSnapshotPolicyAppliedDbfs(request: ListAutoSnapshotPolicyAppliedDbfsRequest): ListAutoSnapshotPolicyAppliedDbfsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAutoSnapshotPolicyAppliedDbfs', 'POST', '/', 'json', false, 'json', request);
}

model ListAutoSnapshotPolicyUnappliedDbfsRequest {
  filterKey?: string(name='FilterKey', example='FsName', position='Query'),
  filterValue?: string(name='FilterValue', example='DBFS1', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=999999, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=10, maximum=200, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListAutoSnapshotPolicyUnappliedDbfsResponseBody = {
  dbfsList?: [ 
    {
      fsId?: string(name='FsId', description='DBFS实例ID', example='dbfs-ejdvesb0qvuywvg*******'),
      fsName?: string(name='FsName', description='DBFS实例名称', example='test'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      sizeG?: long(name='SizeG', description='容量（GB）', example='20'),
      snapshotCount?: string(name='SnapshotCount'),
      status?: string(name='Status', example='attached'),
      totalSize?: long(name='TotalSize'),
    }
  ](name='DbfsList'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListAutoSnapshotPolicyUnappliedDbfsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAutoSnapshotPolicyUnappliedDbfsResponseBody(name='body'),
}

async function listAutoSnapshotPolicyUnappliedDbfs(request: ListAutoSnapshotPolicyUnappliedDbfsRequest): ListAutoSnapshotPolicyUnappliedDbfsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAutoSnapshotPolicyUnappliedDbfs', 'POST', '/', 'json', false, 'json', request);
}

model ListDbfsRequest {
  filterKey?: string(name='FilterKey', example='FsName', position='Query'),
  filterValue?: string(name='FilterValue', example='dbfs-test-01', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=999999, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=10, maximum=200, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  sortKey?: string(name='SortKey', example='SizeG', position='Query'),
  sortType?: string(name='SortType', example='desc', position='Query'),
  tags?: string(name='Tags', example='[{"TagKey":"k1","TagValue":"v1"},{"TagKey":"k2","TagValue":"v2"}]', position='Query'),
}

model ListDbfsResponseBody = {
  DBFSInfo?: [ 
    {
      attachNodeNumber?: int32(name='AttachNodeNumber', example='1'),
      category?: string(name='Category', example='standard'),
      createdTime?: string(name='CreatedTime', example='1609330367000'),
      DBFSClusterId?: string(name='DBFSClusterId', example='c39EcDBf-2Ecb-C3C6-6526-018d4Dcf63eD'),
      ebsList?: [ 
        {
          ebsId?: string(name='EbsId', example='d-bp1383******3uir001r'),
          sizeG?: int32(name='SizeG', example='20'),
        }
      ](name='EbsList'),
      ecsList?: [ 
        {
          ecsId?: string(name='EcsId', example='i-y2vZ3********vvMilZ2hQ'),
        }
      ](name='EcsList'),
      enableRaid?: boolean(name='EnableRaid', example='false'),
      encryption?: boolean(name='Encryption', example='false'),
      fsId?: string(name='FsId', example='dbfs-GOrr********Yd0VLOyBpg'),
      fsName?: string(name='FsName', example='dbfs-test-01'),
      instanceType?: string(name='InstanceType', example='dbfs.small'),
      KMSKeyId?: string(name='KMSKeyId', example='0e478b7a-4262-4802-b8cb-00d3fb408***'),
      lastFailed?: string(name='LastFailed', example='TargetIsBusy.DBFS'),
      lastMountTime?: string(name='LastMountTime', example='1644915400000'),
      lastUmountTime?: string(name='LastUmountTime', example='1644915319000'),
      payType?: string(name='PayType', example='postpaid'),
      performanceLevel?: string(name='PerformanceLevel', example='PL1'),
      raidStrip?: int32(name='RaidStrip', example='2'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      sizeG?: int32(name='SizeG', example='20'),
      snapshotInfo?: {
        linkId?: string(name='LinkId'),
        policyId?: string(name='PolicyId'),
        snapshotCount?: int32(name='SnapshotCount'),
        totalSize?: long(name='TotalSize'),
      }(name='SnapshotInfo'),
      status?: string(name='Status', example='attached'),
      tags?: [ 
        {
          id?: long(name='Id', example='1'),
          tagKey?: string(name='TagKey', example='TestTagKey1'),
          tagValue?: string(name='TagValue', example='TestTagValue1'),
        }
      ](name='Tags'),
      usedScene?: string(name='UsedScene', example='MySQL 5.7'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-i'),
    }
  ](name='DBFSInfo'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', example='32'),
}

model ListDbfsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDbfsResponseBody(name='body'),
}

async function listDbfs(request: ListDbfsRequest): ListDbfsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDbfs', 'POST', '/', 'json', false, 'json', request);
}

model ListDbfsAttachableEcsInstancesRequest {
  filterKey?: string(name='FilterKey', example='InstanceName', position='Query'),
  filterValue?: string(name='FilterValue', example='autotest1', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListDbfsAttachableEcsInstancesResponseBody = {
  ecsLabelInfo?: [ 
    {
      instanceTypeFamily?: string(name='InstanceTypeFamily', example='ecs.g7se'),
      OSName?: string(name='OSName', example='Alibaba Cloud Linux 2.1903 LTS 64 bit'),
      status?: string(name='Status', example='Running'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-i'),
      label?: string(name='label', example='dbfs-test-01'),
      value?: string(name='value', example='i-bp10jb8mqajkmrejgo00'),
    }
  ](name='EcsLabelInfo'),
  requestId?: string(name='RequestId', example='3724CFEF-02DA-578B-AED6-67EE80671B4A'),
  totalCount?: int32(name='TotalCount', example='32'),
}

model ListDbfsAttachableEcsInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDbfsAttachableEcsInstancesResponseBody(name='body'),
}

async function listDbfsAttachableEcsInstances(request: ListDbfsAttachableEcsInstancesRequest): ListDbfsAttachableEcsInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDbfsAttachableEcsInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListDbfsAttachedEcsInstancesRequest {
  fsId: string(name='FsId', example='dbfs-nUy1tb********BQ4X8Gpw', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListDbfsAttachedEcsInstancesResponseBody = {
  ecsLabelInfo?: [ 
    {
      instanceTypeFamily?: string(name='InstanceTypeFamily', example='ecs.g7se'),
      mountPoint?: string(name='MountPoint', example='/mnt/dbfs/dbfs-nUy1tb********BQ4X8Gpw'),
      mountedTime?: string(name='MountedTime', example='1606290930000'),
      OSName?: string(name='OSName', example='Alibaba Cloud Linux 2.1903 LTS 64 bit'),
      label?: string(name='label', example='dbfs-test-01'),
      value?: string(name='value', example='i-bp10jb8mqajkmrejgo00'),
    }
  ](name='EcsLabelInfo'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ListDbfsAttachedEcsInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDbfsAttachedEcsInstancesResponseBody(name='body'),
}

async function listDbfsAttachedEcsInstances(request: ListDbfsAttachedEcsInstancesRequest): ListDbfsAttachedEcsInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDbfsAttachedEcsInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListSnapshotRequest {
  filterKey?: string(name='FilterKey', example='SnapshotId', position='Query'),
  filterValue?: string(name='FilterValue', example='s-bp67acfmxazb4p****', position='Query'),
  fsId?: string(name='FsId', example='dbfs-GOrr********Yd0VLOyBpg', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=10240, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=10, maximum=200, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  snapshotIds?: string(name='SnapshotIds', example='["s-bp67acfmxazb4p****", "s-bp67acfmxazb5p****", … "s-bp67acfmxazb6p****"]', position='Query'),
  snapshotName?: string(name='SnapshotName', example='testSnapshotName', position='Query'),
  snapshotType?: string(name='SnapshotType', example='user', position='Query'),
  sortKey?: string(name='SortKey', example='SnapshotSize', position='Query'),
  sortType?: string(name='SortType', example='desc', position='Query'),
  status?: string(name='Status', example='accomplished', position='Query'),
}

model ListSnapshotResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  snapshots?: [ 
    {
      category?: string(name='Category', example='standard'),
      creationTime?: string(name='CreationTime', example='1609330367000'),
      description?: string(name='Description', example='testDescription'),
      lastModifiedTime?: string(name='LastModifiedTime', example='1609330367000'),
      progress?: string(name='Progress', example='100%'),
      remainTime?: int32(name='RemainTime', example='38'),
      retentionDays?: int32(name='RetentionDays', example='30'),
      snapshotId?: string(name='SnapshotId', example='s-bp67acfmxazb4p****'),
      snapshotName?: string(name='SnapshotName', example='testSnapshotName'),
      snapshotType?: string(name='SnapshotType', example='user'),
      sourceFsId?: string(name='SourceFsId', example='dbfs-bp67acfmxazb4p****'),
      sourceFsSize?: int32(name='SourceFsSize', example='20'),
      sourceFsStripeWidth?: int32(name='SourceFsStripeWidth', example='1'),
      status?: string(name='Status', example='accomplished'),
    }
  ](name='Snapshots'),
  totalCount?: int32(name='TotalCount', example='32'),
}

model ListSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: ListSnapshotResponseBody(name='body'),
}

async function listSnapshot(request: ListSnapshotRequest): ListSnapshotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSnapshot', 'POST', '/', 'json', false, 'json', request);
}

model ListTagKeysRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListTagKeysResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  tagKeys?: [ string ](name='TagKeys'),
}

model ListTagKeysResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagKeysResponseBody(name='body'),
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagKeys', 'POST', '/', 'json', false, 'json', request);
}

model ListTagValuesRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  tagKey: string(name='TagKey', example='tagKey1', position='Query'),
}

model ListTagValuesResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  tagValues?: [ string ](name='TagValues'),
}

model ListTagValuesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagValuesResponseBody(name='body'),
}

async function listTagValues(request: ListTagValuesRequest): ListTagValuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagValues', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAutoSnapshotPolicyRequest {
  policyId: string(name='PolicyId', description='策略ID', example='sp-z5siir3iq3m**********', position='Query'),
  policyName?: string(name='PolicyName', description='策略名称', example='policyTest', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  repeatWeekdays?: [ string ](name='RepeatWeekdays', shrink='json', position='Query'),
  retentionDays?: int32(name='RetentionDays', description='保留天数', example='30', minimum=-1, maximum=65536, position='Query'),
  timePoints?: [ string ](name='TimePoints', shrink='json', position='Query'),
}

model ModifyAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAutoSnapshotPolicyResponseBody(name='body'),
}

async function modifyAutoSnapshotPolicy(request: ModifyAutoSnapshotPolicyRequest): ModifyAutoSnapshotPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAutoSnapshotPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifySnapshotAttributeRequest {
  description?: string(name='Description', example='testDescription', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  snapshotId: string(name='SnapshotId', example='s-y2vZ3********vvMilZ2hQ', position='Query'),
  snapshotName?: string(name='SnapshotName', example='testSnapshotName', position='Query'),
}

model ModifySnapshotAttributeResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifySnapshotAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySnapshotAttributeResponseBody(name='body'),
}

async function modifySnapshotAttribute(request: ModifySnapshotAttributeRequest): ModifySnapshotAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySnapshotAttribute', 'POST', '/', 'json', false, 'json', request);
}

model RenameDbfsRequest {
  fsId: string(name='FsId', example='dbfs-GOrr********Yd0VLOyBpg', position='Query'),
  fsName: string(name='FsName', example='NewDbfsName', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model RenameDbfsResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model RenameDbfsResponse = {
  headers: map[string]string(name='headers'),
  body: RenameDbfsResponseBody(name='body'),
}

async function renameDbfs(request: RenameDbfsRequest): RenameDbfsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenameDbfs', 'POST', '/', 'json', false, 'json', request);
}

model ResizeDbfsRequest {
  fsId: string(name='FsId', example='dbfs-GOrr********Yd0VLOyBpg', position='Query'),
  newSizeG: int32(name='NewSizeG', example='40', minimum=20, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ResizeDbfsResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ResizeDbfsResponse = {
  headers: map[string]string(name='headers'),
  body: ResizeDbfsResponseBody(name='body'),
}

async function resizeDbfs(request: ResizeDbfsRequest): ResizeDbfsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResizeDbfs', 'POST', '/', 'json', false, 'json', request);
}

model TagDbfsRequest {
  dbfsId: string(name='DbfsId', example='dbfs-nUy1tb********BQ4X8Gpw', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  tags: string(name='Tags', example='[{"TagKey":"k1","TagValue":"v1"},{"TagKey":"k2","TagValue":"v2"}]', position='Query'),
}

model TagDbfsResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model TagDbfsResponse = {
  headers: map[string]string(name='headers'),
  body: TagDbfsResponseBody(name='body'),
}

async function tagDbfs(request: TagDbfsRequest): TagDbfsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagDbfs', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDbfsRequest {
  advancedFeatures?: string(name='AdvancedFeatures', example='{"cpuCoreCount":0.5,"memorySize":512,"pageCacheSize":128}', position='Query'),
  fsId: string(name='FsId', example='dbfs-GOrr********Yd0VLOyBpg', position='Query'),
  instanceType?: string(name='InstanceType', example='dbfs.medium', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  usedScene?: string(name='UsedScene', example='MySQL 5.7', position='Query'),
}

model UpdateDbfsResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model UpdateDbfsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDbfsResponseBody(name='body'),
}

async function updateDbfs(request: UpdateDbfsRequest): UpdateDbfsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDbfs', 'POST', '/', 'json', false, 'json', request);
}

