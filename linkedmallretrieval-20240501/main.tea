/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('linkedmallretrieval', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AISearchQuery {
  card?: string(name='card', example='active'),
  query?: string(name='query', example='今年五一假期放假时间表'),
}

model AISearchResult {
  header?: EventHeader(name='header'),
  payload?: string(name='payload'),
  requestId?: string(name='requestId', example='3239281273464326823'),
}

model EventHeader {
  event?: string(name='event', example='on_common_search_stream'),
  eventId?: string(name='eventId', example='ff3de49-cedc-47ea-ba3c-8456acd345d8'),
  requestId?: string(name='requestId', example='55c2349-cedc-47ea-ba3c-8456acd6c7d8'),
  responseTime?: long(name='responseTime', example='1403'),
}

model AISearchRequest {
  card?: string(name='card', example='active'),
  query?: string(name='query', description='This parameter is required.', example='今年五一假期放假时间表'),
}

model AISearchResponseBody = {
  header?: {
    event?: string(name='event', example='on_common_search_stream'),
    eventId?: string(name='eventId', example='ff3de49-cedc-47ea-ba3c-8456acd345d8'),
    requestId?: string(name='requestId', example='D4F6D088-EDE9-5823-9E66-22603937A40B'),
    responseTime?: string(name='responseTime', example='1403'),
  }(name='header'),
  payload?: string(name='payload'),
  requestId?: string(name='requestId', example='D016A23D-738A-5209-A91A-6145845C5A23'),
}

model AISearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AISearchResponseBody(name='body'),
}

/**
 * @summary AI搜索
 *
 * @param request AISearchRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AISearchResponse
 */
async function aISearchWithOptions(request: AISearchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AISearchResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.card)) {
    query['card'] = request.card;
  }
  if (!Util.isUnset(request.query)) {
    query['query'] = request.query;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AISearch',
    version = '2024-05-01',
    protocol = 'HTTPS',
    pathname = `/linked-retrieval/linked-retrieval-entry/v1/linkedRetrieval/commands/aiSearch`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary AI搜索
 *
 * @param request AISearchRequest
 * @return AISearchResponse
 */
async function aISearch(request: AISearchRequest): AISearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return aISearchWithOptions(request, headers, runtime);
}

model AISearchV2Request {
  query?: string(name='query'),
  sessionId?: string(name='sessionId', example='14199B5E-5906-52BD-800D-900268AEC9F6'),
}

model AISearchV2ResponseBody = {
  header?: {
    event?: string(name='event', example='on_common_search_stream'),
    eventId?: string(name='eventId', example='ff3de49-cedc-47ea-ba3c-8456acd345d8'),
    responseTime?: string(name='responseTime', example='1403'),
  }(name='header'),
  payload?: string(name='payload'),
  requestId?: string(name='requestId', example='D016A23D-738A-5209-A91A-6145845C5A23'),
}

model AISearchV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AISearchV2ResponseBody(name='body'),
}

/**
 * @summary 提供通用检索与检索后处理的多阶段优化结果，为开放域QA提供信源
 *
 * @param request AISearchV2Request
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AISearchV2Response
 */
async function aISearchV2WithOptions(request: AISearchV2Request, headers: map[string]string, runtime: Util.RuntimeOptions): AISearchV2Response {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.query)) {
    query['query'] = request.query;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['sessionId'] = request.sessionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AISearchV2',
    version = '2024-05-01',
    protocol = 'HTTPS',
    pathname = `/linked-retrieval/linked-retrieval-entry/v2/linkedRetrieval/commands/aiSearch`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 提供通用检索与检索后处理的多阶段优化结果，为开放域QA提供信源
 *
 * @param request AISearchV2Request
 * @return AISearchV2Response
 */
async function aISearchV2(request: AISearchV2Request): AISearchV2Response {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return aISearchV2WithOptions(request, headers, runtime);
}

