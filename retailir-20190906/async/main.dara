/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'retailir';
  @version = '2019-09-06';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateTaskRequest {
  appkey: string(name='Appkey', example='UP**********', position='Query'),
  imageLeftBottom?: string(name='ImageLeftBottom', example='http://nls.alicdn.com/vision/shelf/testdata/case001/0.jpg', position='Query'),
  imageLeftTop?: string(name='ImageLeftTop', example='http://nls.alicdn.com/vision/shelf/testdata/case001/0.jpg', position='Query'),
  imageList?: [ 
    {
      fileLink: string(name='FileLink'),
      xaxis: int32(name='Xaxis'),
      yaxis: int32(name='Yaxis'),
    }
  ](name='ImageList', position='Query'),
  imageMiddleBottom?: string(name='ImageMiddleBottom', example='http://nls.alicdn.com/vision/shelf/testdata/case001/0.jpg', position='Query'),
  imageMiddleTop?: string(name='ImageMiddleTop', example='http://nls.alicdn.com/vision/shelf/testdata/case001/0.jpg', position='Query'),
  imageRightBottom?: string(name='ImageRightBottom', example='http://nls.alicdn.com/vision/shelf/testdata/case001/0.jpg', position='Query'),
  imageRightTop?: string(name='ImageRightTop', example='http://nls.alicdn.com/vision/shelf/testdata/case001/0.jpg', position='Query'),
  taskName: string(name='TaskName', example='taskName', position='Query'),
}

model CreateTaskResponseBody = {
  requestId?: string(name='RequestId', example='20@312b8e21-6190-4850-a99e-9a600cf88517'),
  resultCode?: int32(name='ResultCode', example='0'),
  resultMessage?: string(name='ResultMessage', example='success'),
  task?: {
    appkey?: string(name='Appkey', example='UP**********'),
    jobId?: string(name='JobId', example='9a600cf885179a600cf88517'),
    namespace?: string(name='Namespace', example='ShelfInsight'),
    progress?: int32(name='Progress', example='23'),
    request?: string(name='Request', example='{""}'),
    status?: string(name='Status', example='0'),
    userId?: string(name='UserId', example='111111'),
    version?: string(name='Version'),
  }(name='Task'),
}

model CreateTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTaskResponseBody(name='body'),
}

async function createTask(request: CreateTaskRequest): CreateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTask', 'POST', '/', 'json', false, 'json', request);
}

model GetTaskRequest {
  appkey: string(name='Appkey', example='To************', position='Query'),
  jobId: string(name='JobId', example='JobId', position='Query'),
}

model GetTaskResponseBody = {
  requestId?: string(name='RequestId', example='20@312b8e21-6190-4850-a99e-9a600cf88517'),
  resultCode?: string(name='ResultCode', example='0'),
  resultMessage?: string(name='ResultMessage', example='success'),
  task?: {
    appkey?: string(name='Appkey', example='To************'),
    createTime?: long(name='CreateTime', example='123243424'),
    jobId?: string(name='JobId', example='4ad0e26847da4de9a842baa9765b652e'),
    lastUpdateTime?: long(name='LastUpdateTime', example='123243424'),
    namespace?: string(name='Namespace', example='ShelfInsight'),
    progress?: int32(name='Progress', example='23'),
    request?: string(name='Request', example='{""}'),
    response?: string(name='Response', example='“”'),
    status?: string(name='Status', example='COMPLETED'),
    statusCode?: string(name='StatusCode', example='40000003'),
    statusMessage?: string(name='StatusMessage', example='"Parameter invalid!"'),
    userId?: string(name='UserId', example='1122668997700980'),
    version?: int32(name='Version', example='0'),
  }(name='Task'),
}

model GetTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTaskResponseBody(name='body'),
}

async function getTask(request: GetTaskRequest): GetTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTask', 'POST', '/', 'json', false, 'json', request);
}

