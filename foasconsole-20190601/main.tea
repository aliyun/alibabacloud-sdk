/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('foasconsole', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model DeleteNamespaceRequest {
  deleteNamespaceRequest?: {
    region?: string(name='Region'),
    instanceId?: string(name='InstanceId'),
    namespace?: string(name='Namespace'),
  }(name='DeleteNamespaceRequest'),
}

model DeleteNamespaceResponseBody = {
  requestId?: string(name='RequestId', description='请求id'),
  success?: boolean(name='Success', description='是否成功'),
}

model DeleteNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNamespaceResponseBody(name='body'),
}

async function deleteNamespaceWithOptions(request: DeleteNamespaceRequest, runtime: Util.RuntimeOptions): DeleteNamespaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteNamespace', '2019-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteNamespace(request: DeleteNamespaceRequest): DeleteNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNamespaceWithOptions(request, runtime);
}

model ModifyPrepayInstanceSpecRequest {
  modifyPrepayInstanceSpecRequest?: {
    region?: string(name='Region'),
    instanceId?: string(name='InstanceId'),
    resourceSpec?: {
      cpu?: int32(name='Cpu'),
      memoryGB?: int32(name='MemoryGB'),
    }(name='ResourceSpec'),
  }(name='ModifyPrepayInstanceSpecRequest'),
}

model ModifyPrepayInstanceSpecResponseBody = {
  requestId?: string(name='RequestId', description='请求id'),
  orderId?: long(name='OrderId', description='订单id'),
  success?: boolean(name='Success', description='是否成功'),
}

model ModifyPrepayInstanceSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPrepayInstanceSpecResponseBody(name='body'),
}

async function modifyPrepayInstanceSpecWithOptions(request: ModifyPrepayInstanceSpecRequest, runtime: Util.RuntimeOptions): ModifyPrepayInstanceSpecResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyPrepayInstanceSpec', '2019-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyPrepayInstanceSpec(request: ModifyPrepayInstanceSpecRequest): ModifyPrepayInstanceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPrepayInstanceSpecWithOptions(request, runtime);
}

model DescribeInstancesRequest {
  describeInstancesRequest?: {
    pageIndex?: int32(name='PageIndex'),
    pageSize?: int32(name='PageSize'),
    instanceId?: string(name='InstanceId'),
    region?: string(name='Region'),
    chargeType?: string(name='ChargeType', description='付款类型'),
  }(name='DescribeInstancesRequest'),
}

model DescribeInstancesResponseBody = {
  totalCount?: long(name='TotalCount'),
  totalPage?: int32(name='TotalPage'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  instances?: [ 
    {
      resourceCreateTime?: long(name='ResourceCreateTime'),
      region?: string(name='Region'),
      zoneId?: string(name='ZoneId'),
      vpcId?: string(name='VpcId'),
      vSwitchIds?: [ string ](name='VSwitchIds'),
      instanceId?: string(name='InstanceId'),
      chargeType?: string(name='ChargeType'),
      instanceName?: string(name='InstanceName'),
      uid?: string(name='Uid'),
      orderState?: string(name='OrderState'),
      resourceId?: string(name='ResourceId'),
      storage?: {
        oss?: {
          bucket?: string(name='Bucket'),
        }(name='Oss'),
      }(name='Storage'),
      resourceSpec?: {
        cpu?: int32(name='Cpu'),
        memoryGB?: int32(name='MemoryGB'),
      }(name='ResourceSpec'),
      clusterStatus?: string(name='ClusterStatus'),
    }
  ](name='Instances'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstancesResponseBody(name='body'),
}

async function describeInstancesWithOptions(request: DescribeInstancesRequest, runtime: Util.RuntimeOptions): DescribeInstancesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeInstances', '2019-06-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancesWithOptions(request, runtime);
}

model DescribeNamespacesRequest {
  describeNamespacesRequest?: {
    region?: string(name='Region', description='regionId'),
    instanceId?: string(name='InstanceId', description='实例id'),
    namespace?: string(name='Namespace', description='命名空间名称'),
    pageIndex?: int32(name='PageIndex', description='当前页数'),
    pageSize?: int32(name='PageSize', description='每页大小'),
  }(name='DescribeNamespacesRequest'),
}

model DescribeNamespacesResponseBody = {
  requestId?: string(name='RequestId', description='请求id'),
  success?: boolean(name='Success', description='是否成功'),
  totalCount?: long(name='TotalCount'),
  totalPage?: int32(name='TotalPage'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  namespaces?: [ 
    {
      namespace?: string(name='Namespace'),
      status?: string(name='Status'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      resourceSpec?: {
        cpu?: int32(name='Cpu'),
        memoryGB?: int32(name='MemoryGB'),
      }(name='ResourceSpec'),
      resourceUsed?: {
        cpu?: float(name='Cpu'),
        memoryGB?: float(name='MemoryGB'),
      }(name='ResourceUsed'),
    }
  ](name='Namespaces'),
}

model DescribeNamespacesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNamespacesResponseBody(name='body'),
}

async function describeNamespacesWithOptions(request: DescribeNamespacesRequest, runtime: Util.RuntimeOptions): DescribeNamespacesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeNamespaces', '2019-06-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeNamespaces(request: DescribeNamespacesRequest): DescribeNamespacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNamespacesWithOptions(request, runtime);
}

model CreateInstanceRequest {
  createInstanceRequest?: {
    instanceName?: string(name='InstanceName'),
    chargeType?: string(name='ChargeType'),
    region?: string(name='Region'),
    zoneId?: string(name='ZoneId'),
    vpcId?: string(name='VpcId'),
    vSwitchIds?: [ string ](name='VSwitchIds'),
    resourceSpec?: {
      cpu?: int32(name='Cpu'),
      memoryGB?: int32(name='MemoryGB'),
    }(name='ResourceSpec'),
    pricingCycle?: string(name='PricingCycle'),
    duration?: int32(name='Duration'),
    autoRenew?: boolean(name='AutoRenew'),
    storage?: {
      oss?: {
        bucket?: string(name='Bucket'),
      }(name='Oss'),
    }(name='Storage'),
  }(name='CreateInstanceRequest'),
}

model CreateInstanceResponseBody = {
  requestId?: string(name='RequestId', description='请求id'),
  success?: boolean(name='Success', description='是否成功'),
  orderInfo?: {
    orderId?: long(name='OrderId', description='订单id'),
    instanceId?: string(name='InstanceId', description='实例id'),
  }(name='OrderInfo', description='订单信息'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateInstance', '2019-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model CreateNamespaceRequest {
  createNamespaceRequest?: {
    region?: string(name='Region'),
    instanceId?: string(name='InstanceId'),
    namespace?: string(name='Namespace'),
    resourceSpec?: {
      cpu?: int32(name='Cpu'),
      memoryGB?: int32(name='MemoryGB'),
    }(name='ResourceSpec'),
  }(name='CreateNamespaceRequest'),
}

model CreateNamespaceResponseBody = {
  requestId?: string(name='RequestId', description='请求id'),
  success?: boolean(name='Success', description='是否成功'),
}

model CreateNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNamespaceResponseBody(name='body'),
}

async function createNamespaceWithOptions(request: CreateNamespaceRequest, runtime: Util.RuntimeOptions): CreateNamespaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateNamespace', '2019-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createNamespace(request: CreateNamespaceRequest): CreateNamespaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNamespaceWithOptions(request, runtime);
}

model ModifyPrepayNamespaceSpecRequest {
  modifyPrepayNamespaceSpecRequest?: {
    region?: string(name='Region'),
    instanceId?: string(name='InstanceId'),
    namespace?: string(name='Namespace'),
    resourceSpec?: {
      cpu?: int32(name='Cpu'),
      memoryGB?: int32(name='MemoryGB'),
    }(name='ResourceSpec'),
  }(name='ModifyPrepayNamespaceSpecRequest'),
}

model ModifyPrepayNamespaceSpecResponseBody = {
  requestId?: string(name='RequestId', description='请求id'),
  success?: boolean(name='Success', description='是否成功'),
}

model ModifyPrepayNamespaceSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPrepayNamespaceSpecResponseBody(name='body'),
}

async function modifyPrepayNamespaceSpecWithOptions(request: ModifyPrepayNamespaceSpecRequest, runtime: Util.RuntimeOptions): ModifyPrepayNamespaceSpecResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyPrepayNamespaceSpec', '2019-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyPrepayNamespaceSpec(request: ModifyPrepayNamespaceSpecRequest): ModifyPrepayNamespaceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPrepayNamespaceSpecWithOptions(request, runtime);
}

model DeleteInstanceRequest {
  deleteInstanceRequest?: {
    region?: string(name='Region'),
    instanceId?: string(name='InstanceId'),
  }(name='DeleteInstanceRequest'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId', description='请求id'),
  success?: boolean(name='Success', description='是否成功'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteInstance', '2019-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceWithOptions(request, runtime);
}

model RenewInstanceRequest {
  renewInstanceRequest?: {
    region?: string(name='Region', description='地域id'),
    instanceId?: string(name='InstanceId', description='实例id'),
    duration?: int32(name='Duration', description='订购周期数量'),
    pricingCycle?: string(name='PricingCycle', description='订购周期'),
  }(name='RenewInstanceRequest'),
}

model RenewInstanceResponseBody = {
  requestId?: string(name='RequestId', description='请求id'),
  orderId?: long(name='OrderId', description='orderId'),
  success?: boolean(name='Success', description='是否成功'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RenewInstanceResponseBody(name='body'),
}

async function renewInstanceWithOptions(request: RenewInstanceRequest, runtime: Util.RuntimeOptions): RenewInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RenewInstance', '2019-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewInstanceWithOptions(request, runtime);
}

