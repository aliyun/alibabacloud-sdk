/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'foasconsole';
  @version = '2019-06-01';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ConvertInstanceRequest {
  convertPostpayInstanceRequest: {
    duration: int32(name='Duration', description='订购周期数量'),
    instanceId: string(name='InstanceId'),
    isAutoRenew: boolean(name='IsAutoRenew', description='是否自动续费'),
    namespaceResourceSpecs: [ 
      {
        namespace: string(name='Namespace', description='namespace名称，'),
        resourceSpec: {
          cpu: int32(name='Cpu', description='cpu数量。'),
          memoryGB: int32(name='MemoryGB', description='内存大小。'),
        }(name='ResourceSpec', description='资源规格。'),
      }
    ](name='NamespaceResourceSpecs', description='项目空间资源规格。'),
    pricingCycle: string(name='PricingCycle', description='订购周期'),
    region: string(name='Region'),
  }(name='ConvertPostpayInstanceRequest', position='Body'),
}

model ConvertInstanceResponseBody = {
  orderId?: long(name='OrderId', description='订单id'),
  requestId?: string(name='RequestId', description='请求id'),
  success?: boolean(name='Success', description='是否成功'),
}

model ConvertInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ConvertInstanceResponseBody(name='body'),
}

async function convertInstance(request: ConvertInstanceRequest): ConvertInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConvertInstance', 'POST', '/', 'json', true, 'form', request);
}

model CreateInstanceRequest {
  createInstanceRequest: {
    autoRenew?: boolean(name='AutoRenew'),
    chargeType: string(name='ChargeType'),
    duration?: int32(name='Duration'),
    instanceName: string(name='InstanceName'),
    pricingCycle?: string(name='PricingCycle'),
    promotionCode?: string(name='PromotionCode', description='优惠券code'),
    region: string(name='Region'),
    resourceSpec?: {
      cpu?: int32(name='Cpu'),
      memoryGB?: int32(name='MemoryGB'),
    }(name='ResourceSpec'),
    storage: {
      oss: {
        bucket: string(name='Bucket'),
      }(name='Oss'),
    }(name='Storage'),
    usePromotionCode?: boolean(name='UsePromotionCode', description='是否使用优惠券'),
    vSwitchIds: [ string ](name='VSwitchIds'),
    vpcId: string(name='VpcId'),
    zoneId: string(name='ZoneId'),
  }(name='CreateInstanceRequest', position='Body'),
}

model CreateInstanceResponseBody = {
  orderInfo?: {
    instanceId?: string(name='InstanceId', description='实例id'),
    orderId?: long(name='OrderId', description='订单id'),
  }(name='OrderInfo', description='订单信息'),
  requestId?: string(name='RequestId', description='请求id'),
  success?: boolean(name='Success', description='是否成功'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', true, 'form', request);
}

model CreateNamespaceRequest {
  createNamespaceRequest: {
    instanceId: string(name='InstanceId'),
    namespace: string(name='Namespace'),
    region: string(name='Region'),
    resourceSpec?: {
      cpu?: int32(name='Cpu'),
      memoryGB?: int32(name='MemoryGB'),
    }(name='ResourceSpec'),
  }(name='CreateNamespaceRequest', position='Body'),
}

model CreateNamespaceResponseBody = {
  requestId?: string(name='RequestId', description='请求id'),
  success?: boolean(name='Success', description='是否成功'),
}

model CreateNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNamespaceResponseBody(name='body'),
}

async function createNamespace(request: CreateNamespaceRequest): CreateNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNamespace', 'POST', '/', 'json', true, 'form', request);
}

model DeleteInstanceRequest {
  deleteInstanceRequest: {
    instanceId: string(name='InstanceId'),
    region: string(name='Region'),
  }(name='DeleteInstanceRequest', position='Body'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId', description='请求id'),
  success?: boolean(name='Success', description='是否成功'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstance', 'POST', '/', 'json', true, 'form', request);
}

model DeleteNamespaceRequest {
  deleteNamespaceRequest: {
    instanceId: string(name='InstanceId'),
    namespace: string(name='Namespace'),
    region: string(name='Region'),
  }(name='DeleteNamespaceRequest', position='Body'),
}

model DeleteNamespaceResponseBody = {
  requestId?: string(name='RequestId', description='请求id'),
  success?: boolean(name='Success', description='是否成功'),
}

model DeleteNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNamespaceResponseBody(name='body'),
}

async function deleteNamespace(request: DeleteNamespaceRequest): DeleteNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNamespace', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInstancesRequest {
  describeInstancesRequest: {
    chargeType?: string(name='ChargeType', description='付款类型'),
    instanceId?: string(name='InstanceId'),
    pageIndex?: int32(name='PageIndex'),
    pageSize?: int32(name='PageSize'),
    region: string(name='Region'),
  }(name='DescribeInstancesRequest', position='Query'),
}

model DescribeInstancesResponseBody = {
  instances?: [ 
    {
      chargeType?: string(name='ChargeType'),
      clusterStatus?: string(name='ClusterStatus'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      orderState?: string(name='OrderState'),
      region?: string(name='Region'),
      resourceCreateTime?: long(name='ResourceCreateTime'),
      resourceExpiredTime?: long(name='ResourceExpiredTime', description='超期时间'),
      resourceId?: string(name='ResourceId'),
      resourceSpec?: {
        cpu?: int32(name='Cpu'),
        memoryGB?: int32(name='MemoryGB'),
      }(name='ResourceSpec'),
      storage?: {
        oss?: {
          bucket?: string(name='Bucket'),
        }(name='Oss'),
      }(name='Storage'),
      uid?: string(name='Uid'),
      vSwitchIds?: [ string ](name='VSwitchIds'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Instances'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
  totalPage?: int32(name='TotalPage'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstancesResponseBody(name='body'),
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstances', 'GET', '/', 'json', false, 'json', request);
}

model DescribeNamespacesRequest {
  describeNamespacesRequest: {
    instanceId: string(name='InstanceId', description='实例id'),
    namespace?: string(name='Namespace', description='命名空间名称'),
    pageIndex?: int32(name='PageIndex', description='当前页数'),
    pageSize?: int32(name='PageSize', description='每页大小'),
    region: string(name='Region', description='regionId'),
  }(name='DescribeNamespacesRequest', position='Query'),
}

model DescribeNamespacesResponseBody = {
  namespaces?: [ 
    {
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      namespace?: string(name='Namespace'),
      resourceSpec?: {
        cpu?: int32(name='Cpu'),
        memoryGB?: int32(name='MemoryGB'),
      }(name='ResourceSpec'),
      resourceUsed?: {
        cpu?: float(name='Cpu'),
        cu?: float(name='Cu'),
        memoryGB?: float(name='MemoryGB'),
      }(name='ResourceUsed'),
      status?: string(name='Status'),
    }
  ](name='Namespaces'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId', description='请求id'),
  success?: boolean(name='Success', description='是否成功'),
  totalCount?: long(name='TotalCount'),
  totalPage?: int32(name='TotalPage'),
}

model DescribeNamespacesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNamespacesResponseBody(name='body'),
}

async function describeNamespaces(request: DescribeNamespacesRequest): DescribeNamespacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNamespaces', 'GET', '/', 'json', false, 'json', request);
}

model DescribeSupportedRegionsRequest {
}

model DescribeSupportedRegionsResponseBody = {
  regions?: [ 
    {
      region?: string(name='Region', description='regionId'),
      regionName?: string(name='RegionName', description='region名称'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', description='请求id'),
  success?: boolean(name='Success', description='是否成功'),
}

model DescribeSupportedRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSupportedRegionsResponseBody(name='body'),
}

async function describeSupportedRegions(request: DescribeSupportedRegionsRequest): DescribeSupportedRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSupportedRegions', 'GET', '/', 'json', false, 'json', request);
}

model DescribeSupportedZonesRequest {
  region?: string(name='Region', description='regionId', position='Query'),
}

model DescribeSupportedZonesResponseBody = {
  requestId?: string(name='RequestId', description='请求id'),
  success?: boolean(name='Success', description='是否成功'),
  zoneIds?: [ string ](name='ZoneIds'),
}

model DescribeSupportedZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSupportedZonesResponseBody(name='body'),
}

async function describeSupportedZones(request: DescribeSupportedZonesRequest): DescribeSupportedZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSupportedZones', 'GET', '/', 'json', false, 'json', request);
}

model ModifyPrepayInstanceSpecRequest {
  modifyPrepayInstanceSpecRequest: {
    instanceId: string(name='InstanceId'),
    region: string(name='Region'),
    resourceSpec: {
      cpu: int32(name='Cpu'),
      memoryGB: int32(name='MemoryGB'),
    }(name='ResourceSpec'),
  }(name='ModifyPrepayInstanceSpecRequest', position='Body'),
}

model ModifyPrepayInstanceSpecResponseBody = {
  orderId?: long(name='OrderId', description='订单id'),
  requestId?: string(name='RequestId', description='请求id'),
  success?: boolean(name='Success', description='是否成功'),
}

model ModifyPrepayInstanceSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPrepayInstanceSpecResponseBody(name='body'),
}

async function modifyPrepayInstanceSpec(request: ModifyPrepayInstanceSpecRequest): ModifyPrepayInstanceSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPrepayInstanceSpec', 'POST', '/', 'json', true, 'form', request);
}

model ModifyPrepayNamespaceSpecRequest {
  modifyPrepayNamespaceSpecRequest: {
    instanceId: string(name='InstanceId'),
    namespace: string(name='Namespace'),
    region: string(name='Region'),
    resourceSpec: {
      cpu: int32(name='Cpu'),
      memoryGB: int32(name='MemoryGB'),
    }(name='ResourceSpec'),
  }(name='ModifyPrepayNamespaceSpecRequest', position='Body'),
}

model ModifyPrepayNamespaceSpecResponseBody = {
  requestId?: string(name='RequestId', description='请求id'),
  success?: boolean(name='Success', description='是否成功'),
}

model ModifyPrepayNamespaceSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPrepayNamespaceSpecResponseBody(name='body'),
}

async function modifyPrepayNamespaceSpec(request: ModifyPrepayNamespaceSpecRequest): ModifyPrepayNamespaceSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPrepayNamespaceSpec', 'POST', '/', 'json', true, 'form', request);
}

model QueryConvertInstancePriceRequest {
  convertPostpayInstanceRequest: {
    duration: int32(name='Duration', description='订购周期数量'),
    instanceId: string(name='InstanceId'),
    isAutoRenew: boolean(name='IsAutoRenew', description='是否自动续费'),
    namespaceResourceSpecs: [ 
      {
        namespace: string(name='Namespace', description='namespace名称，'),
        resourceSpec: {
          cpu: int32(name='Cpu', description='cpu数量。'),
          memoryGB: int32(name='MemoryGB', description='内存大小。'),
        }(name='ResourceSpec', description='资源规格。'),
      }
    ](name='NamespaceResourceSpecs', description='项目空间资源规格。'),
    pricingCycle: string(name='PricingCycle', description='订购周期'),
    region: string(name='Region'),
  }(name='ConvertPostpayInstanceRequest', position='Body'),
}

model QueryConvertInstancePriceResponseBody = {
  priceInfo?: {
    code?: string(name='Code', description='错误码'),
    currency?: string(name='Currency', description='货币单位。'),
    discountAmount?: float(name='DiscountAmount', description='折扣'),
    message?: string(name='Message', description='错误信息'),
    optionalPromotions?: [ 
      {
        promotionDesc?: string(name='PromotionDesc', description='优惠券描述'),
        promotionName?: string(name='PromotionName', description='优惠券名称'),
        promotionOptionNo?: string(name='PromotionOptionNo', description='优惠券编号'),
        selected?: boolean(name='Selected'),
      }
    ](name='OptionalPromotions'),
    originalAmount?: float(name='OriginalAmount', description='原价'),
    rules?: [ 
      {
        description?: string(name='Description', description='活动规则描述。'),
        ruleId?: long(name='RuleId', description='活动ID。'),
      }
    ](name='Rules', description='活动规则。'),
    tradeAmount?: float(name='TradeAmount', description='最终价，为原价减去折扣。'),
  }(name='PriceInfo', description='价格信息，包括价格和优惠规则。'),
  requestId?: string(name='RequestId', description='请求id'),
  success?: boolean(name='Success', description='是否成功'),
}

model QueryConvertInstancePriceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryConvertInstancePriceResponseBody(name='body'),
}

async function queryConvertInstancePrice(request: QueryConvertInstancePriceRequest): QueryConvertInstancePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryConvertInstancePrice', 'POST', '/', 'json', true, 'form', request);
}

model QueryCreateInstancePriceRequest {
  createInstanceRequest: {
    autoRenew?: boolean(name='AutoRenew'),
    chargeType: string(name='ChargeType'),
    duration?: int32(name='Duration'),
    instanceName?: string(name='InstanceName'),
    pricingCycle?: string(name='PricingCycle'),
    promotionCode?: string(name='PromotionCode', description='优惠券code'),
    region: string(name='Region'),
    resourceSpec?: {
      cpu?: int32(name='Cpu'),
      memoryGB?: int32(name='MemoryGB'),
    }(name='ResourceSpec'),
    storage?: {
      oss?: {
        bucket?: string(name='Bucket'),
      }(name='Oss'),
    }(name='Storage'),
    usePromotionCode?: boolean(name='UsePromotionCode', description='是否使用优惠券'),
    vSwitchIds?: [ string ](name='VSwitchIds'),
    vpcId?: string(name='VpcId'),
    zoneId?: string(name='ZoneId'),
  }(name='CreateInstanceRequest', position='Body'),
}

model QueryCreateInstancePriceResponseBody = {
  priceInfo?: {
    code?: string(name='Code', description='错误码'),
    currency?: string(name='Currency', description='货币单位。'),
    discountAmount?: float(name='DiscountAmount', description='折扣'),
    message?: string(name='Message', description='错误信息'),
    optionalPromotions?: [ 
      {
        promotionDesc?: string(name='PromotionDesc', description='优惠券描述'),
        promotionName?: string(name='PromotionName', description='优惠券名称'),
        promotionOptionNo?: string(name='PromotionOptionNo', description='优惠券编号'),
        selected?: boolean(name='Selected'),
      }
    ](name='OptionalPromotions'),
    originalAmount?: float(name='OriginalAmount', description='原价'),
    rules?: [ 
      {
        description?: string(name='Description', description='活动规则描述。'),
        ruleId?: long(name='RuleId', description='活动ID。'),
      }
    ](name='Rules', description='活动规则。'),
    tradeAmount?: float(name='TradeAmount', description='最终价，为原价减去折扣。'),
  }(name='PriceInfo', description='价格信息，包括价格和优惠规则。'),
  requestId?: string(name='RequestId', description='请求id'),
  success?: boolean(name='Success', description='是否成功'),
}

model QueryCreateInstancePriceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCreateInstancePriceResponseBody(name='body'),
}

async function queryCreateInstancePrice(request: QueryCreateInstancePriceRequest): QueryCreateInstancePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCreateInstancePrice', 'POST', '/', 'json', true, 'form', request);
}

model QueryModifyInstancePriceRequest {
  modifyPrepayInstanceSpecRequest: {
    instanceId: string(name='InstanceId'),
    region: string(name='Region'),
    resourceSpec: {
      cpu: int32(name='Cpu'),
      memoryGB: int32(name='MemoryGB'),
    }(name='ResourceSpec'),
  }(name='ModifyPrepayInstanceSpecRequest', position='Body'),
}

model QueryModifyInstancePriceResponseBody = {
  priceInfo?: {
    code?: string(name='Code', description='错误码'),
    currency?: string(name='Currency', description='货币单位。'),
    discountAmount?: float(name='DiscountAmount', description='折扣'),
    message?: string(name='Message', description='错误信息'),
    optionalPromotions?: [ 
      {
        promotionDesc?: string(name='PromotionDesc', description='优惠券描述'),
        promotionName?: string(name='PromotionName', description='优惠券名称'),
        promotionOptionNo?: string(name='PromotionOptionNo', description='优惠券编号'),
        selected?: boolean(name='Selected'),
      }
    ](name='OptionalPromotions'),
    originalAmount?: float(name='OriginalAmount', description='原价'),
    rules?: [ 
      {
        description?: string(name='Description', description='活动规则描述。'),
        ruleId?: long(name='RuleId', description='活动ID。'),
      }
    ](name='Rules', description='活动规则。'),
    tradeAmount?: float(name='TradeAmount', description='最终价，为原价减去折扣。'),
  }(name='PriceInfo', description='价格信息，包括价格和优惠规则。'),
  requestId?: string(name='RequestId', description='请求id'),
  success?: boolean(name='Success', description='是否成功'),
}

model QueryModifyInstancePriceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryModifyInstancePriceResponseBody(name='body'),
}

async function queryModifyInstancePrice(request: QueryModifyInstancePriceRequest): QueryModifyInstancePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryModifyInstancePrice', 'POST', '/', 'json', true, 'form', request);
}

model QueryRenewInstancePriceRequest {
  renewInstanceRequest: {
    duration: int32(name='Duration', description='订购周期数量'),
    instanceId: string(name='InstanceId', description='实例id'),
    pricingCycle: string(name='PricingCycle', description='订购周期'),
    region: string(name='Region', description='地域id'),
  }(name='RenewInstanceRequest', position='Body'),
}

model QueryRenewInstancePriceResponseBody = {
  priceInfo?: {
    code?: string(name='Code', description='错误码'),
    currency?: string(name='Currency', description='货币单位。'),
    discountAmount?: float(name='DiscountAmount', description='折扣'),
    message?: string(name='Message', description='错误信息'),
    optionalPromotions?: [ 
      {
        promotionDesc?: string(name='PromotionDesc', description='优惠券描述'),
        promotionName?: string(name='PromotionName', description='优惠券名称'),
        promotionOptionNo?: string(name='PromotionOptionNo', description='优惠券编号'),
        selected?: boolean(name='Selected'),
      }
    ](name='OptionalPromotions'),
    originalAmount?: float(name='OriginalAmount', description='原价'),
    rules?: [ 
      {
        description?: string(name='Description', description='活动规则描述。'),
        ruleId?: long(name='RuleId', description='活动ID。'),
      }
    ](name='Rules', description='活动规则。'),
    tradeAmount?: float(name='TradeAmount', description='最终价，为原价减去折扣。'),
  }(name='PriceInfo', description='价格信息，包括价格和优惠规则。'),
  requestId?: string(name='RequestId', description='请求id'),
  success?: boolean(name='Success', description='是否成功'),
}

model QueryRenewInstancePriceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRenewInstancePriceResponseBody(name='body'),
}

async function queryRenewInstancePrice(request: QueryRenewInstancePriceRequest): QueryRenewInstancePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRenewInstancePrice', 'POST', '/', 'json', true, 'form', request);
}

model RenewInstanceRequest {
  renewInstanceRequest: {
    duration: int32(name='Duration', description='订购周期数量'),
    instanceId: string(name='InstanceId', description='实例id'),
    pricingCycle: string(name='PricingCycle', description='订购周期'),
    region: string(name='Region', description='地域id'),
  }(name='RenewInstanceRequest', position='Body'),
}

model RenewInstanceResponseBody = {
  orderId?: long(name='OrderId', description='orderId'),
  requestId?: string(name='RequestId', description='请求id'),
  success?: boolean(name='Success', description='是否成功'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RenewInstanceResponseBody(name='body'),
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewInstance', 'POST', '/', 'json', true, 'form', request);
}

