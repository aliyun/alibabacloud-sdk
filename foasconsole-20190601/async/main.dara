/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'foasconsole';
  @version = '2019-06-01';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ConvertInstanceRequest {
  convertPostpayInstanceRequest: {
    duration: int32(name='Duration', example='1'),
    instanceId: string(name='InstanceId', example='sc_flinkserverlesspost_public_cn-*******'),
    isAutoRenew: boolean(name='IsAutoRenew', example='true'),
    namespaceResourceSpecs: [ 
      {
        namespace: string(name='Namespace', example='ns-1'),
        resourceSpec: {
          cpu: int32(name='Cpu', example='1'),
          memoryGB: int32(name='MemoryGB', example='4'),
        }(name='ResourceSpec'),
      }
    ](name='NamespaceResourceSpecs'),
    pricingCycle: string(name='PricingCycle', example='Month'),
    region: string(name='Region', example='cn-beijing'),
  }(name='ConvertPostpayInstanceRequest', position='Body'),
}

model ConvertInstanceResponseBody = {
  orderId?: long(name='OrderId', example='211473228320700'),
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
}

model ConvertInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConvertInstanceResponseBody(name='body'),
}

async function convertInstance(request: ConvertInstanceRequest): ConvertInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConvertInstance', 'POST', '/', 'json', true, 'form', request);
}

model ConvertPrepayInstanceRequest {
  convertPrepayInstanceRequest: {
    instanceId: string(name='InstanceId'),
    region: string(name='Region'),
  }(name='ConvertPrepayInstanceRequest', position='Body'),
}

model ConvertPrepayInstanceResponseBody = {
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success'),
}

model ConvertPrepayInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConvertPrepayInstanceResponseBody(name='body'),
}

async function convertPrepayInstance(request: ConvertPrepayInstanceRequest): ConvertPrepayInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConvertPrepayInstance', 'POST', '/', 'json', true, 'form', request);
}

model CreateInstanceRequest {
  createInstanceRequest: {
    architectureType?: string(name='ArchitectureType'),
    autoRenew?: boolean(name='AutoRenew', example='true'),
    chargeType: string(name='ChargeType', example='PRE'),
    duration?: int32(name='Duration', example='1'),
    extra?: string(name='Extra', example='*'),
    ha?: boolean(name='Ha'),
    haResourceSpec?: {
      cpu?: int32(name='Cpu'),
      memoryGB?: int32(name='MemoryGB'),
    }(name='HaResourceSpec'),
    haVSwitchIds?: [ string ](name='HaVSwitchIds'),
    haZoneId?: string(name='HaZoneId'),
    instanceName: string(name='InstanceName', example='vvp1'),
    monitorType?: string(name='MonitorType'),
    pricingCycle?: string(name='PricingCycle', example='Month'),
    promotionCode?: string(name='PromotionCode', example='5RT******'),
    region: string(name='Region', example='cn-beijing'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-******'),
    resourceSpec?: {
      cpu?: int32(name='Cpu', example='10'),
      memoryGB?: int32(name='MemoryGB', example='40'),
    }(name='ResourceSpec'),
    storage: {
      oss: {
        bucket: string(name='Bucket', example='oss_flink'),
      }(name='Oss'),
    }(name='Storage'),
    usePromotionCode?: boolean(name='UsePromotionCode', example='true'),
    vSwitchIds: [ string ](name='VSwitchIds'),
    vpcId: string(name='VpcId', description='VPC ID。', example='vpc-2ze9*******nxfmfcdi'),
    zoneId: string(name='ZoneId', example='cn-beijing-g'),
  }(name='CreateInstanceRequest', position='Body'),
}

model CreateInstanceResponseBody = {
  orderInfo?: {
    instanceId?: string(name='InstanceId', example='8D2D5BBF-C302-1A21-80E1-27799802****'),
    orderId?: long(name='OrderId', example='210406354694567'),
  }(name='OrderInfo'),
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
}

model CreateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', true, 'form', request);
}

model CreateNamespaceRequest {
  createNamespaceRequest: {
    ha?: boolean(name='Ha'),
    instanceId: string(name='InstanceId', example='223493C7-FCA9-13D4-B75B-AF8B32F4****'),
    namespace: string(name='Namespace', example='ns-1'),
    region: string(name='Region', example='cn-beijing'),
    resourceSpec?: {
      cpu?: int32(name='Cpu', example='10'),
      memoryGB?: int32(name='MemoryGB', example='40'),
    }(name='ResourceSpec'),
  }(name='CreateNamespaceRequest', position='Body'),
}

model CreateNamespaceResponseBody = {
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
}

model CreateNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNamespaceResponseBody(name='body'),
}

async function createNamespace(request: CreateNamespaceRequest): CreateNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNamespace', 'POST', '/', 'json', true, 'form', request);
}

model DeleteInstanceRequest {
  deleteInstanceRequest: {
    instanceId: string(name='InstanceId', example='223493C7-FCA9-13D4-B75B-AF8B32F4****'),
    region: string(name='Region', example='cn-beijing'),
  }(name='DeleteInstanceRequest', position='Body'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
}

model DeleteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstance', 'POST', '/', 'json', true, 'form', request);
}

model DeleteNamespaceRequest {
  deleteNamespaceRequest: {
    instanceId: string(name='InstanceId', example='sc_flinkserverlesspost_public_cn-0ju2bj2****'),
    namespace: string(name='Namespace', example='ns-1'),
    region: string(name='Region', example='cn-beijing'),
  }(name='DeleteNamespaceRequest', position='Body'),
}

model DeleteNamespaceResponseBody = {
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
}

model DeleteNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNamespaceResponseBody(name='body'),
}

async function deleteNamespace(request: DeleteNamespaceRequest): DeleteNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNamespace', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInstancesRequest {
  describeInstancesRequest: {
    architectureType?: string(name='ArchitectureType'),
    chargeType?: string(name='ChargeType', example='PRE'),
    instanceId?: string(name='InstanceId', example='223493C7-FCA9-13D4-B75B-AF8B32F4****'),
    pageIndex?: int32(name='PageIndex', example='1'),
    pageSize?: int32(name='PageSize', example='2'),
    region: string(name='Region', example='cn-beijing'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-***'),
    tags?: [ 
      {
        key?: string(name='Key', example='flink'),
        value?: string(name='Value', example='test'),
      }
    ](name='Tags'),
  }(name='DescribeInstancesRequest', position='Query'),
}

model DescribeInstancesResponseBody = {
  instances?: [ 
    {
      architectureType?: string(name='ArchitectureType'),
      askClusterId?: string(name='AskClusterId', example='c20c******404'),
      chargeType?: string(name='ChargeType', example='PRE'),
      clusterStatus?: string(name='ClusterStatus', example='RUNNING'),
      ha?: boolean(name='Ha'),
      haResourceSpec?: {
        cpu?: int32(name='Cpu'),
        memoryGB?: int32(name='MemoryGB'),
      }(name='HaResourceSpec'),
      haVSwitchIds?: [ string ](name='HaVSwitchIds'),
      haZoneId?: string(name='HaZoneId'),
      hostAliases: [ 
        {
          hostNames: [ string ](name='HostNames'),
          ip: string(name='Ip'),
        }
      ](name='HostAliases'),
      instanceId?: string(name='InstanceId', example='sc_flinkserverlesspost_public_cn-0ju2bj2****'),
      instanceName?: string(name='InstanceName', example='vvp1'),
      monitorType?: string(name='MonitorType'),
      orderState?: string(name='OrderState', example='NORMAL'),
      region?: string(name='Region', example='cn-beijing'),
      resourceCreateTime?: long(name='ResourceCreateTime', example='1629879567394'),
      resourceExpiredTime?: long(name='ResourceExpiredTime', example='1637337600000'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-***'),
      resourceId?: string(name='ResourceId', example='b3690a1655da47'),
      resourceSpec?: {
        cpu?: int32(name='Cpu', example='10'),
        memoryGB?: int32(name='MemoryGB', example='40'),
      }(name='ResourceSpec'),
      storage?: {
        oss?: {
          bucket?: string(name='Bucket', example='oss_flink'),
        }(name='Oss'),
      }(name='Storage'),
      tags?: [ 
        {
          key?: string(name='Key', example='flink'),
          value?: string(name='Value', example='test'),
        }
      ](name='Tags'),
      uid?: string(name='Uid', example='183899668736****'),
      vSwitchIds?: [ string ](name='VSwitchIds'),
      vpcId?: string(name='VpcId', example='vpc-2ze9*******nxfmfcdi'),
      zoneId?: string(name='ZoneId', example='cn-beijing-g'),
    }
  ](name='Instances'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageSize?: int32(name='PageSize', example='2'),
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='15'),
  totalPage?: int32(name='TotalPage', example='2'),
}

model DescribeInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstancesResponseBody(name='body'),
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstances', 'GET', '/', 'json', false, 'json', request);
}

model DescribeNamespacesRequest {
  describeNamespacesRequest: {
    ha?: boolean(name='Ha'),
    instanceId: string(name='InstanceId', example='223493C7-FCA9-13D4-B75B-AF8B32F4****'),
    namespace?: string(name='Namespace', example='ns-1'),
    pageIndex?: int32(name='PageIndex', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    region: string(name='Region', example='cn-beijing'),
    tags?: [ 
      {
        key?: string(name='Key', example='flink'),
        value?: string(name='Value', example='test'),
      }
    ](name='Tags'),
  }(name='DescribeNamespacesRequest', position='Query'),
}

model DescribeNamespacesResponseBody = {
  namespaces?: [ 
    {
      gmtCreate?: long(name='GmtCreate', example='1629879567394'),
      gmtModified?: long(name='GmtModified', example='1629879567394'),
      ha?: boolean(name='Ha'),
      namespace?: string(name='Namespace', example='ns-1'),
      resourceSpec?: {
        cpu?: int32(name='Cpu', example='10'),
        memoryGB?: int32(name='MemoryGB', example='40'),
      }(name='ResourceSpec'),
      resourceUsed?: {
        cpu?: float(name='Cpu', example='2.5'),
        cu?: float(name='Cu', example='1.6'),
        memoryGB?: float(name='MemoryGB', example='6.6'),
      }(name='ResourceUsed'),
      status?: string(name='Status', example='SUCCESS'),
      tags?: [ 
        {
          key?: string(name='Key', example='flink'),
          value?: string(name='Value', example='test'),
        }
      ](name='Tags'),
    }
  ](name='Namespaces'),
  pageIndex?: int32(name='PageIndex', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='15'),
  totalPage?: int32(name='TotalPage', example='2'),
}

model DescribeNamespacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNamespacesResponseBody(name='body'),
}

async function describeNamespaces(request: DescribeNamespacesRequest): DescribeNamespacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNamespaces', 'GET', '/', 'json', false, 'json', request);
}

model DescribeSupportedRegionsRequest {
}

model DescribeSupportedRegionsResponseBody = {
  regions?: [ 
    {
      region?: string(name='Region', example='cn-beijing'),
      regionName?: string(name='RegionName', example='华北2 (北京)'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', example='B21DC47E-8928-199A-9F32-36D45E4693B4'),
  success?: boolean(name='Success', example='true'),
}

model DescribeSupportedRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSupportedRegionsResponseBody(name='body'),
}

async function describeSupportedRegions(request: DescribeSupportedRegionsRequest): DescribeSupportedRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSupportedRegions', 'GET', '/', 'json', false, 'json', request);
}

model DescribeSupportedZonesRequest {
  architectureType?: string(name='ArchitectureType', position='Query'),
  region?: string(name='Region', example='cn-beijing', position='Query'),
}

model DescribeSupportedZonesResponseBody = {
  requestId?: string(name='RequestId', example='23A9C718-DDAB-1696-B025-18FBC830F7C5'),
  success?: boolean(name='Success', example='true'),
  zoneIds?: [ string ](name='ZoneIds'),
}

model DescribeSupportedZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSupportedZonesResponseBody(name='body'),
}

async function describeSupportedZones(request: DescribeSupportedZonesRequest): DescribeSupportedZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSupportedZones', 'GET', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', example='yt656', position='Query'),
  regionId: string(name='RegionId', example='cn-beijing', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', example='vvpinstance', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='test'),
      value?: string(name='Value', example='tag'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', example='27AE00'),
  requestId?: string(name='RequestId', description='requestID。', example='27AE00'),
  success?: boolean(name='Success', example='true'),
  tagReponseId?: string(name='TagReponseId', example='87AE00'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', example='f-cn-tyts'),
      resourceType?: string(name='ResourceType', example='vvpinstance'),
      tagKey?: string(name='TagKey', example='test'),
      tagValue?: string(name='TagValue', example='tag'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPrepayInstanceSpecRequest {
  modifyPrepayInstanceSpecRequest: {
    ha?: boolean(name='Ha'),
    haResourceSpec?: {
      cpu?: int32(name='Cpu'),
      memoryGB?: int32(name='MemoryGB'),
    }(name='HaResourceSpec'),
    haVSwitchIds?: [ string ](name='HaVSwitchIds'),
    haZoneId?: string(name='HaZoneId'),
    instanceId: string(name='InstanceId', example='sc_flinkserverlesspost_public_cn-0ju2bj2i104'),
    region: string(name='Region', example='cn-beijing'),
    resourceSpec: {
      cpu: int32(name='Cpu', example='10'),
      memoryGB: int32(name='MemoryGB', example='40'),
    }(name='ResourceSpec'),
  }(name='ModifyPrepayInstanceSpecRequest', position='Body'),
}

model ModifyPrepayInstanceSpecResponseBody = {
  orderId?: long(name='OrderId', example='210406354690749'),
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
}

model ModifyPrepayInstanceSpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPrepayInstanceSpecResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function modifyPrepayInstanceSpec(request: ModifyPrepayInstanceSpecRequest): ModifyPrepayInstanceSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPrepayInstanceSpec', 'POST', '/', 'json', true, 'form', request);
}

model ModifyPrepayNamespaceSpecRequest {
  modifyPrepayNamespaceSpecRequest: {
    instanceId: string(name='InstanceId', example='sc_flinkserverlesspost_public_cn-0ju2bj2****'),
    namespace: string(name='Namespace', example='ns-1'),
    region: string(name='Region', example='cn-beijing'),
    resourceSpec: {
      cpu: int32(name='Cpu', example='10'),
      memoryGB: int32(name='MemoryGB', example='40'),
    }(name='ResourceSpec'),
  }(name='ModifyPrepayNamespaceSpecRequest', position='Body'),
}

model ModifyPrepayNamespaceSpecResponseBody = {
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
}

model ModifyPrepayNamespaceSpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPrepayNamespaceSpecResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function modifyPrepayNamespaceSpec(request: ModifyPrepayNamespaceSpecRequest): ModifyPrepayNamespaceSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPrepayNamespaceSpec', 'POST', '/', 'json', true, 'form', request);
}

model QueryConvertInstancePriceRequest {
  convertPostpayInstanceRequest: {
    duration: int32(name='Duration', example='1'),
    instanceId: string(name='InstanceId', example='sc_flinkserverlesspost_public_cn-******'),
    isAutoRenew: boolean(name='IsAutoRenew', example='true'),
    namespaceResourceSpecs: [ 
      {
        namespace: string(name='Namespace', example='ns-1'),
        resourceSpec: {
          cpu: int32(name='Cpu', example='1'),
          memoryGB: int32(name='MemoryGB', example='4'),
        }(name='ResourceSpec'),
      }
    ](name='NamespaceResourceSpecs'),
    pricingCycle: string(name='PricingCycle', example='Month'),
    region: string(name='Region', example='cn-beijing'),
  }(name='ConvertPostpayInstanceRequest', position='Body'),
}

model QueryConvertInstancePriceResponseBody = {
  priceInfo?: {
    code?: string(name='Code', example='ORDER.INST_HAS_UNPAID_ORDER'),
    currency?: string(name='Currency', example='CNY'),
    depreciateInfo?: {
      cheapRate?: string(name='CheapRate'),
      cheapStandAmount?: string(name='CheapStandAmount'),
      isShow?: boolean(name='IsShow'),
      monthPrice?: string(name='MonthPrice'),
      originalStandAmount?: string(name='OriginalStandAmount'),
      startTime?: string(name='StartTime'),
    }(name='DepreciateInfo'),
    discountAmount?: float(name='DiscountAmount', example='655.2'),
    isContractActivity?: boolean(name='IsContractActivity'),
    message?: string(name='Message', example='存在未支付订单，请先支付或取消原有订单'),
    optionalPromotions?: [ 
      {
        promotionDesc?: string(name='PromotionDesc', example='￥1,391.5 优惠券 (有效期至 03/23/2022)'),
        promotionName?: string(name='PromotionName', example='￥1,391.5 优惠券'),
        promotionOptionNo?: string(name='PromotionOptionNo', example='500011220010099'),
        selected?: boolean(name='Selected', example='true'),
      }
    ](name='OptionalPromotions'),
    originalAmount?: float(name='OriginalAmount', example='4368'),
    rules?: [ 
      {
        description?: string(name='Description', example='买满1年，立享官网价格8.5折优惠。'),
        ruleId?: long(name='RuleId', example='1020071005141834'),
      }
    ](name='Rules'),
    standDiscountPrice?: string(name='StandDiscountPrice'),
    standPrice?: string(name='StandPrice'),
    tradeAmount?: float(name='TradeAmount', example='3712.8'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
}

model QueryConvertInstancePriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryConvertInstancePriceResponseBody(name='body'),
}

async function queryConvertInstancePrice(request: QueryConvertInstancePriceRequest): QueryConvertInstancePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryConvertInstancePrice', 'POST', '/', 'json', true, 'form', request);
}

model QueryConvertPrepayInstancePriceRequest {
  convertPrepayInstanceRequest: {
    instanceId: string(name='InstanceId'),
    region: string(name='Region'),
  }(name='ConvertPrepayInstanceRequest', position='Body'),
}

model QueryConvertPrepayInstancePriceResponseBody = {
  priceInfo?: {
    code?: string(name='Code', example='ORDER.INST_HAS_UNPAID_ORDER'),
    currency?: string(name='Currency', example='CNY'),
    depreciateInfo?: {
      cheapRate?: string(name='CheapRate'),
      cheapStandAmount?: string(name='CheapStandAmount'),
      isShow?: boolean(name='IsShow'),
      monthPrice?: string(name='MonthPrice'),
      originalStandAmount?: string(name='OriginalStandAmount'),
      startTime?: string(name='StartTime'),
    }(name='DepreciateInfo'),
    discountAmount?: float(name='DiscountAmount', example='655.2'),
    isContractActivity?: boolean(name='IsContractActivity'),
    message?: string(name='Message', example='存在未支付订单，请先支付或取消原有订单'),
    optionalPromotions?: [ 
      {
        promotionDesc?: string(name='PromotionDesc', example='￥1,391.5 优惠券 (有效期至 03/23/2022)'),
        promotionName?: string(name='PromotionName', example='￥1,391.5 优惠券'),
        promotionOptionNo?: string(name='PromotionOptionNo', example='500011220010099'),
        selected?: boolean(name='Selected'),
      }
    ](name='OptionalPromotions'),
    originalAmount?: float(name='OriginalAmount', example='4368'),
    rules?: [ 
      {
        description?: string(name='Description', example='买满1年，立享官网价格8.5折优惠。'),
        ruleId?: long(name='RuleId', example='587'),
      }
    ](name='Rules'),
    standDiscountPrice?: string(name='StandDiscountPrice'),
    standPrice?: string(name='StandPrice'),
    tradeAmount?: float(name='TradeAmount', example='3712.8'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success'),
}

model QueryConvertPrepayInstancePriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryConvertPrepayInstancePriceResponseBody(name='body'),
}

async function queryConvertPrepayInstancePrice(request: QueryConvertPrepayInstancePriceRequest): QueryConvertPrepayInstancePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryConvertPrepayInstancePrice', 'POST', '/', 'json', true, 'form', request);
}

model QueryCreateInstancePriceRequest {
  createInstanceRequest: {
    architectureType?: string(name='ArchitectureType'),
    autoRenew?: boolean(name='AutoRenew', example='true'),
    chargeType: string(name='ChargeType', example='PRE'),
    duration?: int32(name='Duration', example='1'),
    extra?: string(name='Extra'),
    ha?: boolean(name='Ha'),
    haResourceSpec?: {
      cpu?: int32(name='Cpu'),
      memoryGB?: int32(name='MemoryGB'),
    }(name='HaResourceSpec'),
    instanceName?: string(name='InstanceName', example='vvp1'),
    pricingCycle?: string(name='PricingCycle', example='Month'),
    promotionCode?: string(name='PromotionCode', example='5ef***'),
    region: string(name='Region', example='cn-beijing'),
    resourceSpec?: {
      cpu?: int32(name='Cpu', example='10'),
      memoryGB?: int32(name='MemoryGB', example='40'),
    }(name='ResourceSpec'),
    storage?: {
      oss?: {
        bucket?: string(name='Bucket', example='oss_flink'),
      }(name='Oss'),
    }(name='Storage'),
    usePromotionCode?: boolean(name='UsePromotionCode', example='true'),
    vSwitchIds?: [ string ](name='VSwitchIds'),
    vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-2ze9*******nxfmfcdi'),
    zoneId?: string(name='ZoneId', example='cn-beijing-g'),
  }(name='CreateInstanceRequest', position='Body'),
}

model QueryCreateInstancePriceResponseBody = {
  priceInfo?: {
    code?: string(name='Code', example='ORDER.INST_HAS_UNPAID_ORDER'),
    currency?: string(name='Currency', example='CNY'),
    depreciateInfo?: {
      cheapRate?: string(name='CheapRate'),
      cheapStandAmount?: string(name='CheapStandAmount'),
      isShow?: boolean(name='IsShow'),
      monthPrice?: string(name='MonthPrice'),
      originalStandAmount?: string(name='OriginalStandAmount'),
      startTime?: string(name='StartTime'),
    }(name='DepreciateInfo'),
    discountAmount?: float(name='DiscountAmount', example='655.2'),
    isContractActivity?: boolean(name='IsContractActivity'),
    message?: string(name='Message', example='存在未支付订单，请先支付或取消原有订单'),
    optionalPromotions?: [ 
      {
        promotionDesc?: string(name='PromotionDesc', example='￥1,391.5 优惠券 (有效期至 03/23/2022)'),
        promotionName?: string(name='PromotionName', example='￥1,391.5 优惠券'),
        promotionOptionNo?: string(name='PromotionOptionNo', example='50001122001****'),
        selected?: boolean(name='Selected', example='true'),
      }
    ](name='OptionalPromotions'),
    originalAmount?: float(name='OriginalAmount', example='4368'),
    rules?: [ 
      {
        description?: string(name='Description', example='买满1年，立享官网价格8.5折优惠。'),
        ruleId?: long(name='RuleId', example='102007100514****'),
      }
    ](name='Rules'),
    standDiscountPrice?: string(name='StandDiscountPrice'),
    standPrice?: string(name='StandPrice'),
    tradeAmount?: float(name='TradeAmount', example='3712.8'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
}

model QueryCreateInstancePriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCreateInstancePriceResponseBody(name='body'),
}

async function queryCreateInstancePrice(request: QueryCreateInstancePriceRequest): QueryCreateInstancePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCreateInstancePrice', 'POST', '/', 'json', true, 'form', request);
}

model QueryModifyInstancePriceRequest {
  modifyPrepayInstanceSpecRequest: {
    ha?: boolean(name='Ha'),
    haResourceSpec?: {
      cpu?: int32(name='Cpu'),
      memoryGB?: int32(name='MemoryGB'),
    }(name='HaResourceSpec'),
    haVSwitchIds?: [ string ](name='HaVSwitchIds'),
    haZoneId?: string(name='HaZoneId'),
    instanceId: string(name='InstanceId', example='sc_flinkserverless_public_cn-******'),
    region: string(name='Region', example='cn-beijing'),
    resourceSpec: {
      cpu: int32(name='Cpu', example='10'),
      memoryGB: int32(name='MemoryGB', example='40'),
    }(name='ResourceSpec'),
  }(name='ModifyPrepayInstanceSpecRequest', position='Body'),
}

model QueryModifyInstancePriceResponseBody = {
  priceInfo?: {
    code?: string(name='Code', example='ORDER.INST_HAS_UNPAID_ORDER'),
    currency?: string(name='Currency', example='CNY'),
    depreciateInfo?: {
      cheapRate?: string(name='CheapRate'),
      cheapStandAmount?: string(name='CheapStandAmount'),
      isShow?: boolean(name='IsShow'),
      monthPrice?: string(name='MonthPrice'),
      originalStandAmount?: string(name='OriginalStandAmount'),
      startTime?: string(name='StartTime'),
    }(name='DepreciateInfo'),
    discountAmount?: float(name='DiscountAmount', example='655.2'),
    isContractActivity?: boolean(name='IsContractActivity'),
    message?: string(name='Message', example='存在未支付订单，请先支付或取消原有订单'),
    optionalPromotions?: [ 
      {
        promotionDesc?: string(name='PromotionDesc', example='￥1,391.5 优惠券 (有效期至 03/23/2022)'),
        promotionName?: string(name='PromotionName', example='￥1,391.5 优惠券'),
        promotionOptionNo?: string(name='PromotionOptionNo', example='500011220010099'),
        selected?: boolean(name='Selected', example='true'),
      }
    ](name='OptionalPromotions'),
    originalAmount?: float(name='OriginalAmount', example='4368'),
    rules?: [ 
      {
        description?: string(name='Description', example='买满1年，立享官网价格8.5折优惠。'),
        ruleId?: long(name='RuleId', example='1020071005141834'),
      }
    ](name='Rules'),
    standDiscountPrice?: string(name='StandDiscountPrice'),
    standPrice?: string(name='StandPrice'),
    tradeAmount?: float(name='TradeAmount', example='3712.8'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
}

model QueryModifyInstancePriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryModifyInstancePriceResponseBody(name='body'),
}

async function queryModifyInstancePrice(request: QueryModifyInstancePriceRequest): QueryModifyInstancePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryModifyInstancePrice', 'POST', '/', 'json', true, 'form', request);
}

model QueryRenewInstancePriceRequest {
  renewInstanceRequest: {
    duration: int32(name='Duration', example='1'),
    instanceId: string(name='InstanceId', example='sc_flinkserverless_public_cn-******'),
    pricingCycle: string(name='PricingCycle', example='Month'),
    region: string(name='Region', example='cn-beijing'),
  }(name='RenewInstanceRequest', position='Body'),
}

model QueryRenewInstancePriceResponseBody = {
  priceInfo?: {
    code?: string(name='Code', example='ORDER.INST_HAS_UNPAID_ORDER'),
    currency?: string(name='Currency', example='CNY'),
    depreciateInfo?: {
      cheapRate?: string(name='CheapRate'),
      cheapStandAmount?: string(name='CheapStandAmount'),
      isShow?: boolean(name='IsShow'),
      monthPrice?: string(name='MonthPrice'),
      originalStandAmount?: string(name='OriginalStandAmount'),
      startTime?: string(name='StartTime'),
    }(name='DepreciateInfo'),
    discountAmount?: float(name='DiscountAmount', example='655.2'),
    isContractActivity?: boolean(name='IsContractActivity'),
    message?: string(name='Message', example='存在未支付订单，请先支付或取消原有订单'),
    optionalPromotions?: [ 
      {
        promotionDesc?: string(name='PromotionDesc', example='￥1,391.5 优惠券 (有效期至 03/23/2022)'),
        promotionName?: string(name='PromotionName', example='￥1,391.5 优惠券'),
        promotionOptionNo?: string(name='PromotionOptionNo', example='500011220010099'),
        selected?: boolean(name='Selected', example='true'),
      }
    ](name='OptionalPromotions'),
    originalAmount?: float(name='OriginalAmount', example='4368'),
    rules?: [ 
      {
        description?: string(name='Description', example='买满1年，立享官网价格8.5折优惠。'),
        ruleId?: long(name='RuleId', example='1020071005141834'),
      }
    ](name='Rules'),
    standDiscountPrice?: string(name='StandDiscountPrice'),
    standPrice?: string(name='StandPrice'),
    tradeAmount?: float(name='TradeAmount', example='3712.8'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
}

model QueryRenewInstancePriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryRenewInstancePriceResponseBody(name='body'),
}

async function queryRenewInstancePrice(request: QueryRenewInstancePriceRequest): QueryRenewInstancePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRenewInstancePrice', 'POST', '/', 'json', true, 'form', request);
}

model RenewInstanceRequest {
  renewInstanceRequest: {
    duration: int32(name='Duration', example='1'),
    instanceId: string(name='InstanceId', example='sc_flinkserverless_public_cn-7e22ae5****'),
    pricingCycle: string(name='PricingCycle', example='Month'),
    region: string(name='Region', example='cn-beijing'),
  }(name='RenewInstanceRequest', position='Body'),
}

model RenewInstanceResponseBody = {
  orderId?: long(name='OrderId', example='210406354690749'),
  requestId?: string(name='RequestId', example='67F33190-946B-1105-B6A1-E2DF0426DD51'),
  success?: boolean(name='Success', example='true'),
}

model RenewInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenewInstanceResponseBody(name='body'),
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewInstance', 'POST', '/', 'json', true, 'form', request);
}

model TagResourcesRequest {
  regionId: string(name='RegionId', example='cn-beijing', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', example='vvpinstance', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', example='test'),
      value?: string(name='Value', example='tag'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', example='true'),
  tagResponseId?: string(name='TagResponseId', example='154FT'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', example='false', position='Query'),
  regionId: string(name='RegionId', example='cn-beijing', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', example='vvpinstance', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='""'),
  requestId?: string(name='RequestId', example='27AE00'),
  success?: boolean(name='Success', example='true'),
  tagResponseId?: string(name='TagResponseId', example='154FT'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

