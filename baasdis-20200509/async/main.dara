/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'BaasDis';
  @version = '2020-05-09';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateEenterpriseDIDRequest {
  regionId?: string(name='RegionId', example='""', position='Host'),
  clientToken: string(name='ClientToken', example='01357967-61d1-42a9-8a90-f0dd8a161411', position='Body'),
  ownerUniqueID: string(name='OwnerUniqueID', example='F76iBtCdYuE0DHC33a5amzv3ioUfAqjuBxgek3RwjxBZ2cGP0HDxZy0k8Hs7yNtZRmM3h3KmRn4liSH4gLOOK4P41l', position='Body'),
}

model CreateEenterpriseDIDResponseBody = {
  DID?: string(name='DID', example='"did:mychain:xxx"'),
  requestId?: string(name='RequestId', example='"7CEDB9B0-E68A-4E67-A258-EEE342695921"'),
  resultCode?: string(name='ResultCode', example='"OK"'),
  resultMessage?: string(name='ResultMessage', example='""'),
  success?: boolean(name='Success', example='true'),
}

model CreateEenterpriseDIDResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEenterpriseDIDResponseBody(name='body'),
}

async function createEenterpriseDID(request: CreateEenterpriseDIDRequest): CreateEenterpriseDIDResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEenterpriseDID', 'POST', '/', 'json', true, 'form', request);
}

model CreatePersonalDIDRequest {
  regionId?: string(name='RegionId', example='""', position='Host'),
  clientToken: string(name='ClientToken', example='01357967-61d1-42a9-8a90-f0dd8a161411', position='Body'),
  ownerUniqueID: string(name='OwnerUniqueID', example='73BUce7y51BlPFxHucfjdOLC9cdWNnPqc7pyXXJe05c2twjraDPwDm1KhmD6v1d7tUyxjYoNhXLdX18zzp5rsogU87', position='Body'),
}

model CreatePersonalDIDResponseBody = {
  DID?: string(name='DID', example='"did:mychain:xxx"'),
  requestId?: string(name='RequestId', example='"7C171509-B966-4AD2-B654-7BE14F1F3AA6"'),
  resultCode?: string(name='ResultCode', example='"OK"'),
  resultMessage?: string(name='ResultMessage', example='""'),
  success?: boolean(name='Success', example='true'),
}

model CreatePersonalDIDResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePersonalDIDResponseBody(name='body'),
}

async function createPersonalDID(request: CreatePersonalDIDRequest): CreatePersonalDIDResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePersonalDID', 'POST', '/', 'json', true, 'form', request);
}

model CreateTenantDIDRequest {
  regionId?: string(name='RegionId', example='""', position='Host'),
  clientToken: string(name='ClientToken', example='01357967-61d1-42a9-8a90-f0dd8a161411', position='Body'),
}

model CreateTenantDIDResponseBody = {
  DID?: string(name='DID', example='"did:mychain:xxx"'),
  requestId?: string(name='RequestId', example='"757DB186-A865-4F65-935D-7D990E0CE451"'),
  resultCode?: string(name='ResultCode', example='"OK"'),
  resultMessage?: string(name='ResultMessage', example='""'),
  success?: boolean(name='Success', example='true'),
}

model CreateTenantDIDResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTenantDIDResponseBody(name='body'),
}

async function createTenantDID(request: CreateTenantDIDRequest): CreateTenantDIDResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTenantDID', 'POST', '/', 'json', true, 'form', request);
}

model GetDIDRequest {
  regionId?: string(name='RegionId', example='""', position='Host'),
  DID: string(name='DID', example='did:mychain:xxx', position='Body'),
}

model GetDIDResponseBody = {
  doc?: string(name='Doc', example='"{\\"creator\\":\\"did:mychain:xxx\\",\\"created\\":\\"2020-05-22T13:59:49+0800\\",\\"service\\":[],\\"index\\":[],\\"id\\":\\"did:mychain:xxx\\",\\"publicKey\\":[{\\"controller\\":\\"did:mychain:xxx\\",\\"id\\":\\"keys-1\\",\\"publicKey\\":\\"xxx\\",\\"type\\":\\"Secp256k1VerificationKey2018\\"}],\\"type\\":\\"Corporate\\",\\"@context\\":\\"https://w3id.org/did/v1\\",\\"updated\\":\\"2020-05-22T13:59:49+0800\\",\\"version\\":0,\\"authentication\\":[\\"keys-1\\"]}"'),
  requestId?: string(name='RequestId', example='"2C93E421-AD9D-4ABE-B519-6E1ACD18934C"'),
  resultCode?: string(name='ResultCode', example='"OK"'),
  resultMessage?: string(name='ResultMessage', example='”“'),
  success?: boolean(name='Success', example='true'),
}

model GetDIDResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDIDResponseBody(name='body'),
}

async function getDID(request: GetDIDRequest): GetDIDResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDID', 'POST', '/', 'json', true, 'form', request);
}

model IssueNormalVerifiableVCRequest {
  regionId?: string(name='RegionId', example='""', position='Host'),
  bareClaimStructBody: [ 
    {
      claim: string(name='Claim', example='"test"'),
      claimType?: string(name='ClaimType', example='""'),
    }
  ](name='BareClaimStructBody', position='Body'),
  clientToken: string(name='ClientToken', example='01357967-61d1-42a9-8a90-f0dd8a161411', position='Body'),
  expiration: long(name='Expiration', example='-1', position='Body'),
  issuer: string(name='Issuer', example='"did:mychain:xxx"', position='Body'),
  subject: string(name='Subject', example='"did:mychain:xxx"', position='Body'),
}

model IssueNormalVerifiableVCResponseBody = {
  requestId?: string(name='RequestId', example='"4D1E29A7-17D6-48AD-B5AF-F44FAB68D87D"'),
  resultCode?: string(name='ResultCode', example='"OK"'),
  resultMessage?: string(name='ResultMessage', example='""'),
  success?: boolean(name='Success', example='true'),
  verifiableClaimContent?: string(name='VerifiableClaimContent', example='"{\\"proof\\":{\\"type\\":\\"ecdsa\\",\\"verificationMethod\\":\\"did:mychain:xxx#keys-1\\",\\"signatureValue\\":\\"xxx\\"},\\"content\\":{\\"issuanceDate\\":1590127960785,\\"subject\\":\\"did:mychain:xxx\\",\\"expire\\":-1,\\"claim\\":\\"test\\",\\"id\\":\\"vc:mychain:xxx\\",\\"type\\":[\\"VerifiableCredential\\"],\\"version\\":\\"0.7.0\\",\\"@context\\":\\"https://www.w3.org/2018/credentials/v1\\",\\"issuer\\":\\"did:mychain:xxx\\",\\"status\\":{\\"id\\":\\"vc:mychain:xxx\\",\\"type\\":\\"BlockChainStatusList\\"}}}"'),
  verifiableClaimId?: string(name='VerifiableClaimId', example='"vc:mychain:xxx"'),
}

model IssueNormalVerifiableVCResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: IssueNormalVerifiableVCResponseBody(name='body'),
}

async function issueNormalVerifiableVC(request: IssueNormalVerifiableVCRequest): IssueNormalVerifiableVCResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'IssueNormalVerifiableVC', 'POST', '/', 'json', true, 'form', request);
}

model UpdateVCRequest {
  regionId?: string(name='RegionId', example='""', position='Host'),
  issuerDid: string(name='IssuerDid', example='"did:mychain:xxx"', position='Body'),
  VCId: string(name='VCId', example='vc:mychain:xxx', position='Body'),
  VCStatus: string(name='VCStatus', example='"1"', position='Body'),
}

model UpdateVCResponseBody = {
  requestId?: string(name='RequestId', example='"1265B5EA-704A-4DCA-83F9-29C4D3B69549"'),
  resultCode?: string(name='ResultCode', example='"OK"'),
  resultMessage?: string(name='ResultMessage', example='""'),
  success?: boolean(name='Success', example='true'),
}

model UpdateVCResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateVCResponseBody(name='body'),
}

async function updateVC(request: UpdateVCRequest): UpdateVCResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateVC', 'POST', '/', 'json', true, 'form', request);
}

model VerifyVerifiableClaimRequest {
  regionId?: string(name='RegionId', example='""', position='Host'),
  VCContent: string(name='VCContent', example='{"proof": {"type": "ecdsa","verificationMethod": "did:mychain:xxx#keys-1","signatureValue": "xxx"},"content": {"issuanceDate": 1589964299367,"subject": "did:mychain:xxx","expire": -1,"claim": "test01","id": "vc:mychain:xxx","type": ["VerifiableCredential"],"version": "0.7.0","@context": "https://www.w3.org/2018/credentials/v1","issuer": "did:mychain:xxx","status": {"id": "vc:mychain:xxx","type": "BlockChainStatusList"}}}', position='Body'),
}

model VerifyVerifiableClaimResponseBody = {
  requestId?: string(name='RequestId', example='"EEA284E9-B779-4E62-99EA-E2E8E801A745"'),
  resultCode?: string(name='ResultCode', example='"OK"'),
  resultMessage?: string(name='ResultMessage', example='""'),
  success?: boolean(name='Success', example='true'),
}

model VerifyVerifiableClaimResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifyVerifiableClaimResponseBody(name='body'),
}

async function verifyVerifiableClaim(request: VerifyVerifiableClaimRequest): VerifyVerifiableClaimResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyVerifiableClaim', 'POST', '/', 'json', true, 'form', request);
}

