/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Dypls';
  @version = '2017-08-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ApplyArInvoiceWithSourceRequest {
  address?: {
    addressId?: string(name='AddressId'),
    appCode?: string(name='AppCode'),
    city?: string(name='City'),
    country?: string(name='Country'),
    creator?: string(name='Creator'),
    customer?: {
      appCode?: string(name='AppCode'),
      customerId?: string(name='CustomerId'),
      customerSite?: string(name='CustomerSite'),
      customerSystem?: string(name='CustomerSystem'),
      encryptProps?: map[string]string(name='EncryptProps'),
      language?: string(name='Language'),
      sign?: string(name='Sign'),
      uuid?: string(name='Uuid'),
    }(name='Customer'),
    detailedAddress?: string(name='DetailedAddress'),
    district?: string(name='District'),
    encryptProps?: map[string]string(name='EncryptProps'),
    fixedNumber?: string(name='FixedNumber'),
    fullAddress?: string(name='FullAddress'),
    isDefault?: boolean(name='IsDefault'),
    isEffective?: boolean(name='IsEffective'),
    language?: string(name='Language'),
    mobileNumber?: string(name='MobileNumber'),
    province?: string(name='Province'),
    recipientName?: string(name='RecipientName'),
    relatedId?: string(name='RelatedId'),
    relatedSystem?: string(name='RelatedSystem'),
    sign?: string(name='Sign'),
    street?: string(name='Street'),
    uuid?: string(name='Uuid'),
    zipCode?: string(name='ZipCode'),
  }(name='Address', position='Body'),
  amount?: double(name='Amount', position='Body'),
  appCode?: string(name='AppCode', position='Body'),
  applier?: string(name='Applier', position='Body'),
  applyDate?: string(name='ApplyDate', position='Body'),
  currencyCode?: string(name='CurrencyCode', position='Body'),
  customer?: {
    appCode?: string(name='AppCode'),
    customerId?: string(name='CustomerId'),
    customerSite?: string(name='CustomerSite'),
    customerSystem?: string(name='CustomerSystem'),
    encryptProps?: map[string]string(name='EncryptProps'),
    language?: string(name='Language'),
    sign?: string(name='Sign'),
    uuid?: string(name='Uuid'),
  }(name='Customer', position='Body'),
  encryptProps?: map[string]string(name='EncryptProps', position='Body'),
  excludingTaxAmount?: double(name='ExcludingTaxAmount', position='Body'),
  inputType?: string(name='InputType', position='Body'),
  invoiceType?: string(name='InvoiceType', position='Body'),
  isMerged?: boolean(name='IsMerged', position='Body'),
  language?: string(name='Language', position='Body'),
  materialType?: string(name='MaterialType', position='Body'),
  memo?: string(name='Memo', position='Body'),
  ouCode?: string(name='OuCode', position='Body'),
  purchaserBankInfo?: string(name='PurchaserBankInfo', position='Body'),
  purchaserContactInfo?: string(name='PurchaserContactInfo', position='Body'),
  purchaserName?: string(name='PurchaserName', position='Body'),
  purchaserTaxNo?: string(name='PurchaserTaxNo', position='Body'),
  requestNo?: string(name='RequestNo', position='Body'),
  sign?: string(name='Sign', position='Body'),
  siteId?: string(name='SiteId', position='Body'),
  sourceList?: [ 
    {
      amount?: double(name='Amount'),
      appCode?: string(name='AppCode'),
      billAmount?: double(name='BillAmount'),
      billDomain?: string(name='BillDomain'),
      billNo?: string(name='BillNo'),
      billType?: string(name='BillType'),
      blueSourceId?: long(name='BlueSourceId'),
      canMerge?: boolean(name='CanMerge'),
      cargoName?: string(name='CargoName'),
      category?: string(name='Category'),
      companyName?: string(name='CompanyName'),
      currencyCode?: string(name='CurrencyCode'),
      customer?: {
        appCode?: string(name='AppCode'),
        customerId?: string(name='CustomerId'),
        customerSite?: string(name='CustomerSite'),
        customerSystem?: string(name='CustomerSystem'),
        encryptProps?: map[string]string(name='EncryptProps'),
        language?: string(name='Language'),
        sign?: string(name='Sign'),
        uuid?: string(name='Uuid'),
      }(name='Customer'),
      discountAmount?: double(name='DiscountAmount'),
      discountTaxAmount?: double(name='DiscountTaxAmount'),
      encryptProps?: map[string]string(name='EncryptProps'),
      excludingTaxAmount?: double(name='ExcludingTaxAmount'),
      excludingTaxDiscountAmount?: double(name='ExcludingTaxDiscountAmount'),
      excludingTaxRedAmount?: double(name='ExcludingTaxRedAmount'),
      excludingTaxRemainAmount?: double(name='ExcludingTaxRemainAmount'),
      gmtBill?: string(name='GmtBill'),
      gmtBillEnd?: string(name='GmtBillEnd'),
      gmtBillStart?: string(name='GmtBillStart'),
      gmtBuild?: string(name='GmtBuild'),
      isApply?: string(name='IsApply'),
      language?: string(name='Language'),
      majorBillNo?: string(name='MajorBillNo'),
      model?: string(name='Model'),
      ouCode?: string(name='OuCode'),
      parentCategory?: string(name='ParentCategory'),
      productDomain?: string(name='ProductDomain'),
      productId?: string(name='ProductId'),
      productName?: string(name='ProductName'),
      quantity?: double(name='Quantity'),
      quantityUnit?: string(name='QuantityUnit'),
      redAmount?: double(name='RedAmount'),
      relatedId?: string(name='RelatedId'),
      remainAmount?: double(name='RemainAmount'),
      revenueType?: string(name='RevenueType'),
      serviceName?: string(name='ServiceName'),
      sign?: string(name='Sign'),
      siteId?: string(name='SiteId'),
      sourceId?: long(name='SourceId'),
      taxAmount?: double(name='TaxAmount'),
      taxRate?: double(name='TaxRate'),
      unitPrice?: double(name='UnitPrice'),
      uuid?: string(name='Uuid'),
    }
  ](name='SourceList', position='Body'),
  taxAmount?: double(name='TaxAmount', position='Body'),
  uuid?: string(name='Uuid', position='Body'),
}

model ApplyArInvoiceWithSourceResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  returnValue?: {
    encryptProps?: map[string]string(name='EncryptProps'),
    outerSystemEncryptStr?: string(name='OuterSystemEncryptStr'),
    outerSystemSignStr?: string(name='OuterSystemSignStr'),
    sign?: string(name='Sign'),
  }(name='ReturnValue'),
}

model ApplyArInvoiceWithSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyArInvoiceWithSourceResponseBody(name='body'),
}

async function applyArInvoiceWithSource(request: ApplyArInvoiceWithSourceRequest): ApplyArInvoiceWithSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyArInvoiceWithSource', 'POST', '/', 'json', true, 'form', request);
}

model ApplyBlackInfoExportRequest {
  billId: string(name='BillId', position='Query'),
  blackType: string(name='BlackType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ApplyBlackInfoExportResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model ApplyBlackInfoExportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyBlackInfoExportResponseBody(name='body'),
}

async function applyBlackInfoExport(request: ApplyBlackInfoExportRequest): ApplyBlackInfoExportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyBlackInfoExport', 'POST', '/', 'json', false, 'json', request);
}

model ApplyCallRecordExportRequest {
  billId: string(name='BillId', position='Query'),
  callDate: string(name='CallDate', position='Query'),
  callId?: string(name='CallId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNoA?: string(name='PhoneNoA', position='Query'),
  phoneNoB?: string(name='PhoneNoB', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resType: int32(name='ResType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo?: string(name='SecretNo', position='Query'),
}

model ApplyCallRecordExportResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model ApplyCallRecordExportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyCallRecordExportResponseBody(name='body'),
}

async function applyCallRecordExport(request: ApplyCallRecordExportRequest): ApplyCallRecordExportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyCallRecordExport', 'POST', '/', 'json', false, 'json', request);
}

model ApplyGroupNumberExportRequest {
  groupId: string(name='GroupId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey?: string(name='PoolKey', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ApplyGroupNumberExportResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model ApplyGroupNumberExportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyGroupNumberExportResponseBody(name='body'),
}

async function applyGroupNumberExport(request: ApplyGroupNumberExportRequest): ApplyGroupNumberExportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyGroupNumberExport', 'POST', '/', 'json', false, 'json', request);
}

model ApplyRingToneRequest {
  billId?: string(name='BillId', position='Query'),
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  playType: string(name='PlayType', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ApplyRingToneResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model ApplyRingToneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyRingToneResponseBody(name='body'),
}

async function applyRingTone(request: ApplyRingToneRequest): ApplyRingToneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyRingTone', 'POST', '/', 'json', false, 'json', request);
}

model BatchOccupySecretResRequest {
  batchOccupyList?: [ 
    {
      count: int32(name='Count'),
      orderDetailId: long(name='OrderDetailId'),
      orderId: long(name='OrderId'),
      partnerKey: string(name='PartnerKey'),
      resType: long(name='ResType'),
      secretNoType: long(name='SecretNoType'),
    }
  ](name='BatchOccupyList', shrink='json', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model BatchOccupySecretResResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchOccupySecretResResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchOccupySecretResResponseBody(name='body'),
}

async function batchOccupySecretRes(request: BatchOccupySecretResRequest): BatchOccupySecretResResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchOccupySecretRes', 'POST', '/', 'json', false, 'json', request);
}

model BindResourceRequest {
  asrModelId?: string(name='AsrModelId', position='Query'),
  asrStatus?: boolean(name='AsrStatus', position='Query'),
  axnExtensionB?: string(name='AxnExtensionB', position='Query'),
  billId: string(name='BillId', position='Query'),
  expTime?: string(name='ExpTime', position='Query'),
  isRecord?: boolean(name='IsRecord', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNoA?: string(name='PhoneNoA', position='Query'),
  phoneNoB?: string(name='PhoneNoB', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resType?: int32(name='ResType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo?: string(name='SecretNo', position='Query'),
}

model BindResourceResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model BindResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindResourceResponseBody(name='body'),
}

async function bindResource(request: BindResourceRequest): BindResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindResource', 'POST', '/', 'json', false, 'json', request);
}

model BlackOperateRequest {
  billId: string(name='BillId', position='Query'),
  blackMap: string(name='BlackMap', position='Query'),
  blackType: string(name='BlackType', position='Query'),
  operateType: string(name='OperateType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model BlackOperateResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
  message?: string(name='message'),
}

model BlackOperateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BlackOperateResponseBody(name='body'),
}

async function blackOperate(request: BlackOperateRequest): BlackOperateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BlackOperate', 'POST', '/', 'json', false, 'json', request);
}

model CreateCertifyInfoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNo: string(name='PhoneNo', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateCertifyInfoResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreateCertifyInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCertifyInfoResponseBody(name='body'),
}

async function createCertifyInfo(request: CreateCertifyInfoRequest): CreateCertifyInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCertifyInfo', 'POST', '/', 'json', false, 'json', request);
}

model CreateContactsRequest {
  billId: string(name='BillId', position='Query'),
  name: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateContactsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreateContactsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateContactsResponseBody(name='body'),
}

async function createContacts(request: CreateContactsRequest): CreateContactsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateContacts', 'POST', '/', 'json', false, 'json', request);
}

model CreateGroupDetailRequest {
  groupId: string(name='GroupId', position='Query'),
  numberList: string(name='NumberList', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey: string(name='PoolKey', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateGroupDetailResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: boolean(name='data'),
}

model CreateGroupDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateGroupDetailResponseBody(name='body'),
}

async function createGroupDetail(request: CreateGroupDetailRequest): CreateGroupDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGroupDetail', 'POST', '/', 'json', false, 'json', request);
}

model CreateGroupInfoRequest {
  name: string(name='Name', position='Query'),
  numberList?: string(name='NumberList', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey: string(name='PoolKey', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateGroupInfoResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: boolean(name='data'),
}

model CreateGroupInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateGroupInfoResponseBody(name='body'),
}

async function createGroupInfo(request: CreateGroupInfoRequest): CreateGroupInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGroupInfo', 'POST', '/', 'json', false, 'json', request);
}

model CreateLogicalDeleteRequest {
  bid: string(name='Bid', position='Query'),
  country: string(name='Country', position='Query'),
  gmtWakeup: string(name='GmtWakeup', position='Query'),
  hid: long(name='Hid', position='Query'),
  interrupt?: boolean(name='Interrupt', position='Query'),
  invoker: string(name='Invoker', position='Query'),
  message?: string(name='Message', position='Query'),
  pk: string(name='Pk', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  success?: boolean(name='Success', position='Query'),
  taskExtraData: string(name='TaskExtraData', position='Query'),
  taskIdentifier: string(name='TaskIdentifier', position='Query'),
}

model CreateLogicalDeleteResponseBody = {
  bid?: string(name='Bid'),
  country?: string(name='Country'),
  gmtWakeup?: string(name='GmtWakeup'),
  hid?: long(name='Hid'),
  interrupt?: boolean(name='Interrupt'),
  invoker?: string(name='Invoker'),
  message?: string(name='Message'),
  pk?: string(name='Pk'),
  success?: boolean(name='Success'),
  taskExtraData?: string(name='TaskExtraData'),
  taskIdentifier?: string(name='TaskIdentifier'),
}

model CreateLogicalDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLogicalDeleteResponseBody(name='body'),
}

async function createLogicalDelete(request: CreateLogicalDeleteRequest): CreateLogicalDeleteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLogicalDelete', 'POST', '/', 'json', false, 'json', request);
}

model CreateMessageCallbackRequest {
  bizType: string(name='BizType', position='Query'),
  callbackUrl: string(name='CallbackUrl', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateMessageCallbackResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
  message?: string(name='message'),
}

model CreateMessageCallbackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMessageCallbackResponseBody(name='body'),
}

async function createMessageCallback(request: CreateMessageCallbackRequest): CreateMessageCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMessageCallback', 'POST', '/', 'json', false, 'json', request);
}

model CreateMessageQueueRequest {
  billIds: string(name='BillIds', position='Query'),
  bizType: string(name='BizType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  queueName?: string(name='QueueName', position='Query'),
  queueTitle: string(name='QueueTitle', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateMessageQueueResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreateMessageQueueResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMessageQueueResponseBody(name='body'),
}

async function createMessageQueue(request: CreateMessageQueueRequest): CreateMessageQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMessageQueue', 'POST', '/', 'json', false, 'json', request);
}

model CreatePhysicalDeleteRequest {
  bid: string(name='Bid', position='Query'),
  country: string(name='Country', position='Query'),
  gmtWakeup: string(name='GmtWakeup', position='Query'),
  hid: long(name='Hid', position='Query'),
  interrupt?: boolean(name='Interrupt', position='Query'),
  invoker: string(name='Invoker', position='Query'),
  message?: string(name='Message', position='Query'),
  pk: string(name='Pk', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  success?: boolean(name='Success', position='Query'),
  taskExtraData: string(name='TaskExtraData', position='Query'),
  taskIdentifier: string(name='TaskIdentifier', position='Query'),
}

model CreatePhysicalDeleteResponseBody = {
  bid?: string(name='Bid'),
  country?: string(name='Country'),
  gmtWakeup?: string(name='GmtWakeup'),
  hid?: long(name='Hid'),
  interrupt?: boolean(name='Interrupt'),
  invoker?: string(name='Invoker'),
  message?: string(name='Message'),
  pk?: string(name='Pk'),
  success?: boolean(name='Success'),
  taskExtraData?: string(name='TaskExtraData'),
  taskIdentifier?: string(name='TaskIdentifier'),
}

model CreatePhysicalDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePhysicalDeleteResponseBody(name='body'),
}

async function createPhysicalDelete(request: CreatePhysicalDeleteRequest): CreatePhysicalDeleteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePhysicalDelete', 'POST', '/', 'json', false, 'json', request);
}

model CreatePoolInfoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  poolName: string(name='PoolName', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resType: int32(name='ResType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreatePoolInfoResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreatePoolInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePoolInfoResponseBody(name='body'),
}

async function createPoolInfo(request: CreatePoolInfoRequest): CreatePoolInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePoolInfo', 'POST', '/', 'json', false, 'json', request);
}

model CreateProductRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  prodId: string(name='ProdId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateProductResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: boolean(name='data'),
}

model CreateProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProductResponseBody(name='body'),
}

async function createProduct(request: CreateProductRequest): CreateProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProduct', 'POST', '/', 'json', false, 'json', request);
}

model CreateRingToneRequest {
  billId?: string(name='BillId', position='Query'),
  fileKey: string(name='FileKey', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  playType?: string(name='PlayType', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  ringName?: string(name='RingName', position='Query'),
  tts?: string(name='Tts', position='Query'),
}

model CreateRingToneResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreateRingToneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRingToneResponseBody(name='body'),
}

async function createRingTone(request: CreateRingToneRequest): CreateRingToneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRingTone', 'POST', '/', 'json', false, 'json', request);
}

model CreateSubsTrialRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  phoneA: string(name='PhoneA', position='Query'),
  phoneB?: string(name='PhoneB', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resType: string(name='ResType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateSubsTrialResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: boolean(name='data'),
}

model CreateSubsTrialResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSubsTrialResponseBody(name='body'),
}

async function createSubsTrial(request: CreateSubsTrialRequest): CreateSubsTrialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSubsTrial', 'POST', '/', 'json', false, 'json', request);
}

model CreateTransferRecordRequest {
  city?: string(name='City', position='Query'),
  numberList?: string(name='NumberList', position='Query'),
  originBillId: string(name='OriginBillId', position='Query'),
  originName: string(name='OriginName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  targetBillId: string(name='TargetBillId', position='Query'),
  targetName: string(name='TargetName', position='Query'),
  total?: int32(name='Total', minimum=1, maximum=500, position='Query'),
  transferType: int32(name='TransferType', position='Query'),
}

model CreateTransferRecordResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model CreateTransferRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTransferRecordResponseBody(name='body'),
}

async function createTransferRecord(request: CreateTransferRecordRequest): CreateTransferRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTransferRecord', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCertifyInfoRequest {
  certifyId: string(name='CertifyId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteCertifyInfoResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model DeleteCertifyInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCertifyInfoResponseBody(name='body'),
}

async function deleteCertifyInfo(request: DeleteCertifyInfoRequest): DeleteCertifyInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCertifyInfo', 'POST', '/', 'json', false, 'json', request);
}

model DeleteContactsRequest {
  billId: string(name='BillId', position='Query'),
  id: long(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteContactsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model DeleteContactsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteContactsResponseBody(name='body'),
}

async function deleteContacts(request: DeleteContactsRequest): DeleteContactsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteContacts', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGroupDetailRequest {
  groupId?: string(name='GroupId', position='Query'),
  idList: string(name='IdList', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey: string(name='PoolKey', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteGroupDetailResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: boolean(name='data'),
}

model DeleteGroupDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGroupDetailResponseBody(name='body'),
}

async function deleteGroupDetail(request: DeleteGroupDetailRequest): DeleteGroupDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGroupDetail', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMessageCallbackRequest {
  bizType: string(name='BizType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteMessageCallbackResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: boolean(name='data'),
}

model DeleteMessageCallbackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMessageCallbackResponseBody(name='body'),
}

async function deleteMessageCallback(request: DeleteMessageCallbackRequest): DeleteMessageCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMessageCallback', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRingToneRequest {
  billId?: string(name='BillId', position='Query'),
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteRingToneResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model DeleteRingToneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRingToneResponseBody(name='body'),
}

async function deleteRingTone(request: DeleteRingToneRequest): DeleteRingToneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRingTone', 'POST', '/', 'json', false, 'json', request);
}

model DownloadCompleteRequest {
  bizType?: string(name='BizType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DownloadCompleteResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model DownloadCompleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DownloadCompleteResponseBody(name='body'),
}

async function downloadComplete(request: DownloadCompleteRequest): DownloadCompleteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadComplete', 'POST', '/', 'json', false, 'json', request);
}

model ExportResRequest {
  billId: string(name='BillId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resBindStatus?: int32(name='ResBindStatus', position='Query'),
  resType?: int32(name='ResType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo?: string(name='SecretNo', position='Query'),
}

model ExportResResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model ExportResResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportResResponseBody(name='body'),
}

async function exportRes(request: ExportResRequest): ExportResResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportRes', 'POST', '/', 'json', false, 'json', request);
}

model GetEinvoicePdfDataRequest {
  appCode?: string(name='AppCode', position='Body'),
  customer?: {
    appCode?: string(name='AppCode'),
    customerId?: string(name='CustomerId'),
    customerSite?: string(name='CustomerSite'),
    customerSystem?: string(name='CustomerSystem'),
    encryptProps?: map[string]string(name='EncryptProps'),
    language?: string(name='Language'),
    sign?: string(name='Sign'),
    uuid?: string(name='Uuid'),
  }(name='Customer', position='Body'),
  encryptProps?: map[string]string(name='EncryptProps', position='Body'),
  invoiceCode?: string(name='InvoiceCode', position='Body'),
  invoiceNo?: string(name='InvoiceNo', position='Body'),
  language?: string(name='Language', position='Body'),
  sign?: string(name='Sign', position='Body'),
  uuid?: string(name='Uuid', position='Body'),
}

model GetEinvoicePdfDataResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  returnValue?: {
    appCode?: string(name='AppCode'),
    eInvoiceData?: [ int32 ](name='EInvoiceData'),
    encryptProps?: map[string]string(name='EncryptProps'),
    invoiceCode?: string(name='InvoiceCode'),
    invoiceNo?: string(name='InvoiceNo'),
    language?: string(name='Language'),
    sign?: string(name='Sign'),
    uuid?: string(name='Uuid'),
  }(name='ReturnValue'),
}

model GetEinvoicePdfDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEinvoicePdfDataResponseBody(name='body'),
}

async function getEinvoicePdfData(request: GetEinvoicePdfDataRequest): GetEinvoicePdfDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEinvoicePdfData', 'POST', '/', 'json', true, 'form', request);
}

model GetSecretAsrInfoRequest {
  callId: string(name='CallId', position='Query'),
  callTime: string(name='CallTime', position='Query'),
  poolKey: string(name='PoolKey', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
}

model GetSecretAsrInfoResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      channel?: string(name='Channel'),
      text?: string(name='Text'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetSecretAsrInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSecretAsrInfoResponseBody(name='body'),
}

async function getSecretAsrInfo(request: GetSecretAsrInfoRequest): GetSecretAsrInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSecretAsrInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetUserResourceTagStatusRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: int32(name='ResourceType', minimum=0, maximum=100000000000, position='Query'),
}

model GetUserResourceTagStatusResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetUserResourceTagStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserResourceTagStatusResponseBody(name='body'),
}

async function getUserResourceTagStatus(request: GetUserResourceTagStatusRequest): GetUserResourceTagStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserResourceTagStatus', 'POST', '/', 'json', false, 'json', request);
}

model ListAsrLanguageModelsRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListAsrLanguageModelsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListAsrLanguageModelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAsrLanguageModelsResponseBody(name='body'),
}

async function listAsrLanguageModels(request: ListAsrLanguageModelsRequest): ListAsrLanguageModelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAsrLanguageModels', 'POST', '/', 'json', false, 'json', request);
}

model LockResourceRequest {
  billId: string(name='BillId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo: string(name='SecretNo', position='Query'),
}

model LockResourceResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model LockResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LockResourceResponseBody(name='body'),
}

async function lockResource(request: LockResourceRequest): LockResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LockResource', 'POST', '/', 'json', false, 'json', request);
}

model OccupySecretResRequest {
  city?: string(name='City', position='Query'),
  isDisplayPool?: boolean(name='IsDisplayPool', position='Query'),
  noLike?: string(name='NoLike', position='Query'),
  orderDetailId: long(name='OrderDetailId', position='Query'),
  orderId: long(name='OrderId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  partnerKey?: string(name='PartnerKey', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resType: long(name='ResType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNoType: int32(name='SecretNoType', position='Query'),
  totalCount: int32(name='TotalCount', position='Query'),
  secretNo?: string(name='secretNo', position='Query'),
}

model OccupySecretResResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model OccupySecretResResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OccupySecretResResponseBody(name='body'),
}

async function occupySecretRes(request: OccupySecretResRequest): OccupySecretResResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OccupySecretRes', 'POST', '/', 'json', false, 'json', request);
}

model OrderSucceededCallbackRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  data: string(name='data', position='Query'),
}

model OrderSucceededCallbackResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  synchro?: string(name='Synchro'),
}

model OrderSucceededCallbackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OrderSucceededCallbackResponseBody(name='body'),
}

async function orderSucceededCallback(request: OrderSucceededCallbackRequest): OrderSucceededCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OrderSucceededCallback', 'POST', '/', 'json', false, 'json', request);
}

model PoolConfigRequest {
  billId: string(name='BillId', position='Query'),
  callbackType?: int32(name='CallbackType', position='Query'),
  frozenDay?: int32(name='FrozenDay', position='Query'),
  needAllCallRecords?: boolean(name='NeedAllCallRecords', position='Query'),
  openSmsWhite?: boolean(name='OpenSmsWhite', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolWarningLimit?: int32(name='PoolWarningLimit', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  selectXMode?: string(name='SelectXMode', position='Query'),
  smartSmsWhitelist?: string(name='SmartSmsWhitelist', position='Query'),
  smsChannel?: string(name='SmsChannel', position='Query'),
}

model PoolConfigResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model PoolConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PoolConfigResponseBody(name='body'),
}

async function poolConfig(request: PoolConfigRequest): PoolConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PoolConfig', 'POST', '/', 'json', false, 'json', request);
}

model PurchaseResourcesRequest {
  billId?: string(name='BillId', position='Query'),
  buyNumber: int32(name='BuyNumber', position='Query'),
  isDisplayPool?: boolean(name='IsDisplayPool', position='Query'),
  noLike?: string(name='NoLike', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  regionName: string(name='RegionName', position='Query'),
  resType: int32(name='ResType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  specId?: long(name='SpecId', position='Query'),
  usageScenarios?: string(name='UsageScenarios', position='Query'),
}

model PurchaseResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model PurchaseResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PurchaseResourcesResponseBody(name='body'),
}

async function purchaseResources(request: PurchaseResourcesRequest): PurchaseResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PurchaseResources', 'POST', '/', 'json', false, 'json', request);
}

model QueryBindingDetailsRequest {
  billId: string(name='BillId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  phoneNoA?: string(name='PhoneNoA', position='Query'),
  phoneNoB?: string(name='PhoneNoB', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resType?: int32(name='ResType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo?: string(name='SecretNo', position='Query'),
  subId?: string(name='SubId', position='Query'),
}

model QueryBindingDetailsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryBindingDetailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryBindingDetailsResponseBody(name='body'),
}

async function queryBindingDetails(request: QueryBindingDetailsRequest): QueryBindingDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBindingDetails', 'POST', '/', 'json', false, 'json', request);
}

model QueryBlackListRequest {
  billId: string(name='BillId', position='Query'),
  blackPrefix?: string(name='BlackPrefix', position='Query'),
  blackType: string(name='BlackType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo: int32(name='PageNo', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryBlackListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
  message?: string(name='message'),
}

model QueryBlackListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryBlackListResponseBody(name='body'),
}

async function queryBlackList(request: QueryBlackListRequest): QueryBlackListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBlackList', 'POST', '/', 'json', false, 'json', request);
}

model QueryBuyPageInitDataRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryBuyPageInitDataResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryBuyPageInitDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryBuyPageInitDataResponseBody(name='body'),
}

async function queryBuyPageInitData(request: QueryBuyPageInitDataRequest): QueryBuyPageInitDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBuyPageInitData', 'POST', '/', 'json', false, 'json', request);
}

model QueryBuyPageResCountRequest {
  city?: string(name='City', position='Query'),
  like?: string(name='Like', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resType: int32(name='ResType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  specId?: long(name='SpecId', position='Query'),
}

model QueryBuyPageResCountResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryBuyPageResCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryBuyPageResCountResponseBody(name='body'),
}

async function queryBuyPageResCount(request: QueryBuyPageResCountRequest): QueryBuyPageResCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBuyPageResCount', 'POST', '/', 'json', false, 'json', request);
}

model QueryBuyPageResInfoRequest {
  like?: string(name='Like', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resType: int32(name='ResType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  specId?: long(name='SpecId', position='Query'),
}

model QueryBuyPageResInfoResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryBuyPageResInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryBuyPageResInfoResponseBody(name='body'),
}

async function queryBuyPageResInfo(request: QueryBuyPageResInfoRequest): QueryBuyPageResInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBuyPageResInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryBuyResInfoRequest {
  like?: string(name='Like', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resType: int32(name='ResType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  specId?: long(name='SpecId', position='Query'),
}

model QueryBuyResInfoResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryBuyResInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryBuyResInfoResponseBody(name='body'),
}

async function queryBuyResInfo(request: QueryBuyResInfoRequest): QueryBuyResInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBuyResInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryCallRecordingListRequest {
  billId: string(name='BillId', position='Query'),
  callDate: string(name='CallDate', position='Query'),
  callId?: string(name='CallId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  phoneNoA?: string(name='PhoneNoA', position='Query'),
  phoneNoB?: string(name='PhoneNoB', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resType: int32(name='ResType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo?: string(name='SecretNo', position='Query'),
}

model QueryCallRecordingListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryCallRecordingListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCallRecordingListResponseBody(name='body'),
}

async function queryCallRecordingList(request: QueryCallRecordingListRequest): QueryCallRecordingListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCallRecordingList', 'POST', '/', 'json', false, 'json', request);
}

model QueryCertifyInfoListRequest {
  certifyStatus?: string(name='CertifyStatus', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  phoneNo?: string(name='PhoneNo', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryCertifyInfoListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryCertifyInfoListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCertifyInfoListResponseBody(name='body'),
}

async function queryCertifyInfoList(request: QueryCertifyInfoListRequest): QueryCertifyInfoListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCertifyInfoList', 'POST', '/', 'json', false, 'json', request);
}

model QueryCertifyOverviewInfoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryCertifyOverviewInfoResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryCertifyOverviewInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCertifyOverviewInfoResponseBody(name='body'),
}

async function queryCertifyOverviewInfo(request: QueryCertifyOverviewInfoRequest): QueryCertifyOverviewInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCertifyOverviewInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryContactsListRequest {
  billId: string(name='BillId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryContactsListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryContactsListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryContactsListResponseBody(name='body'),
}

async function queryContactsList(request: QueryContactsListRequest): QueryContactsListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryContactsList', 'POST', '/', 'json', false, 'json', request);
}

model QueryCustInfoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryCustInfoResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: {
    certifyType?: int32(name='CertifyType'),
    contactPhone?: string(name='ContactPhone'),
    custId?: long(name='CustId'),
    custName?: string(name='CustName'),
    isDayuCustomer?: boolean(name='IsDayuCustomer'),
    osStatus?: int32(name='OsStatus'),
    partnerId?: long(name='PartnerId'),
    userTag?: long(name='UserTag'),
    userTag2?: long(name='UserTag2'),
  }(name='data'),
}

model QueryCustInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCustInfoResponseBody(name='body'),
}

async function queryCustInfo(request: QueryCustInfoRequest): QueryCustInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCustInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryDownloadUrlRequest {
  bizType?: string(name='BizType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryDownloadUrlResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryDownloadUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDownloadUrlResponseBody(name='body'),
}

async function queryDownloadUrl(request: QueryDownloadUrlRequest): QueryDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDownloadUrl', 'POST', '/', 'json', false, 'json', request);
}

model QueryEffectiveInvoiceListByBillNosRequest {
  appCode?: string(name='AppCode', position='Body'),
  billNo?: string(name='BillNo', position='Body'),
  encryptProps?: map[string]string(name='EncryptProps', position='Body'),
  language?: string(name='Language', position='Body'),
  majorBillNo?: string(name='MajorBillNo', position='Body'),
  ouCode?: string(name='OuCode', position='Body'),
  relatedSystem?: string(name='RelatedSystem', position='Body'),
  sign?: string(name='Sign', position='Body'),
  uuid?: string(name='Uuid', position='Body'),
}

model QueryEffectiveInvoiceListByBillNosResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  returnValue?: {
    encryptProps?: map[string]string(name='EncryptProps'),
    list?: [ 
      {
        aliCompany?: string(name='AliCompany'),
        aliId?: long(name='AliId'),
        amount?: double(name='Amount'),
        appCode?: string(name='AppCode'),
        buildAmount?: double(name='BuildAmount'),
        category?: string(name='Category'),
        encryptProps?: map[string]string(name='EncryptProps'),
        invoiceNo?: string(name='InvoiceNo'),
        invoiceStatus?: string(name='InvoiceStatus'),
        invoiceTitle?: string(name='InvoiceTitle'),
        language?: string(name='Language'),
        orderItemNo?: string(name='OrderItemNo'),
        parentContractNo?: string(name='ParentContractNo'),
        sign?: string(name='Sign'),
        site?: string(name='Site'),
        taxRegisgerNo?: string(name='TaxRegisgerNo'),
        uuid?: string(name='Uuid'),
      }
    ](name='List'),
    sign?: string(name='Sign'),
  }(name='ReturnValue'),
}

model QueryEffectiveInvoiceListByBillNosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEffectiveInvoiceListByBillNosResponseBody(name='body'),
}

async function queryEffectiveInvoiceListByBillNos(request: QueryEffectiveInvoiceListByBillNosRequest): QueryEffectiveInvoiceListByBillNosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEffectiveInvoiceListByBillNos', 'POST', '/', 'json', true, 'form', request);
}

model QueryExportResUrlRequest {
  billId: string(name='BillId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resType: int32(name='ResType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: string(name='TaskId', position='Query'),
}

model QueryExportResUrlResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryExportResUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryExportResUrlResponseBody(name='body'),
}

async function queryExportResUrl(request: QueryExportResUrlRequest): QueryExportResUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryExportResUrl', 'POST', '/', 'json', false, 'json', request);
}

model QueryGroupDetailListRequest {
  groupId: string(name='GroupId', position='Query'),
  number?: string(name='Number', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo: string(name='PageNo', position='Query'),
  pageSize: string(name='PageSize', position='Query'),
  poolKey: string(name='PoolKey', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryGroupDetailListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: boolean(name='data'),
}

model QueryGroupDetailListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryGroupDetailListResponseBody(name='body'),
}

async function queryGroupDetailList(request: QueryGroupDetailListRequest): QueryGroupDetailListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryGroupDetailList', 'POST', '/', 'json', false, 'json', request);
}

model QueryGroupInfoListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo: string(name='PageNo', position='Query'),
  pageSize: string(name='PageSize', position='Query'),
  poolKey: string(name='PoolKey', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  queryKey?: string(name='QueryKey', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryGroupInfoListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: boolean(name='data'),
}

model QueryGroupInfoListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryGroupInfoListResponseBody(name='body'),
}

async function queryGroupInfoList(request: QueryGroupInfoListRequest): QueryGroupInfoListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryGroupInfoList', 'POST', '/', 'json', false, 'json', request);
}

model QueryInvoiceInfoByRequestNoRequest {
  appCode?: string(name='AppCode', position='Body'),
  encryptProps?: map[string]string(name='EncryptProps', position='Body'),
  language?: string(name='Language', position='Body'),
  relatedSystem?: string(name='RelatedSystem', position='Body'),
  requestNo?: string(name='RequestNo', position='Body'),
  sign?: string(name='Sign', position='Body'),
  uuid?: string(name='Uuid', position='Body'),
}

model QueryInvoiceInfoByRequestNoResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  isSuccess?: boolean(name='IsSuccess'),
  returnValue?: {
    encryptProps?: map[string]string(name='EncryptProps'),
    list?: [ 
      {
        amount?: double(name='Amount'),
        appCode?: string(name='AppCode'),
        currencyCode?: string(name='CurrencyCode'),
        customer?: {
          appCode?: string(name='AppCode'),
          customerId?: string(name='CustomerId'),
          customerSite?: string(name='CustomerSite'),
          customerSystem?: string(name='CustomerSystem'),
          encryptProps?: map[string]string(name='EncryptProps'),
          language?: string(name='Language'),
          sign?: string(name='Sign'),
          uuid?: string(name='Uuid'),
        }(name='Customer'),
        detailList?: [ 
          {
            amount?: double(name='Amount'),
            appCode?: string(name='AppCode'),
            cargoName?: string(name='CargoName'),
            discountAmount?: double(name='DiscountAmount'),
            discountTaxAmount?: double(name='DiscountTaxAmount'),
            encryptProps?: map[string]string(name='EncryptProps'),
            excludingTaxAmount?: double(name='ExcludingTaxAmount'),
            excludingTaxDiscountAmount?: double(name='ExcludingTaxDiscountAmount'),
            excludingTaxRedAmount?: double(name='ExcludingTaxRedAmount'),
            excludingTaxRemainAmount?: double(name='ExcludingTaxRemainAmount'),
            excludingTaxUnitPrice?: double(name='ExcludingTaxUnitPrice'),
            invoiceDetailId?: long(name='InvoiceDetailId'),
            language?: string(name='Language'),
            model?: string(name='Model'),
            quantity?: double(name='Quantity'),
            quantityUnit?: string(name='QuantityUnit'),
            redAmount?: double(name='RedAmount'),
            relatedId?: string(name='RelatedId'),
            remainAmount?: double(name='RemainAmount'),
            sign?: string(name='Sign'),
            sourceList?: [ 
              {
                amount?: double(name='Amount'),
                appCode?: string(name='AppCode'),
                billAmount?: double(name='BillAmount'),
                billDomain?: string(name='BillDomain'),
                billNo?: string(name='BillNo'),
                billType?: string(name='BillType'),
                blueSourceId?: long(name='BlueSourceId'),
                canMerge?: boolean(name='CanMerge'),
                cargoName?: string(name='CargoName'),
                category?: string(name='Category'),
                companyName?: string(name='CompanyName'),
                currencyCode?: string(name='CurrencyCode'),
                customer?: {
                  appCode?: string(name='AppCode'),
                  customerId?: string(name='CustomerId'),
                  customerSite?: string(name='CustomerSite'),
                  customerSystem?: string(name='CustomerSystem'),
                  encryptProps?: map[string]string(name='EncryptProps'),
                  language?: string(name='Language'),
                  sign?: string(name='Sign'),
                  uuid?: string(name='Uuid'),
                }(name='Customer'),
                discountAmount?: double(name='DiscountAmount'),
                discountTaxAmount?: double(name='DiscountTaxAmount'),
                encryptProps?: map[string]string(name='EncryptProps'),
                excludingTaxAmount?: double(name='ExcludingTaxAmount'),
                excludingTaxDiscountAmount?: double(name='ExcludingTaxDiscountAmount'),
                excludingTaxRedAmount?: double(name='ExcludingTaxRedAmount'),
                excludingTaxRemainAmount?: double(name='ExcludingTaxRemainAmount'),
                gmtBill?: string(name='GmtBill'),
                gmtBillEnd?: string(name='GmtBillEnd'),
                gmtBillStart?: string(name='GmtBillStart'),
                gmtBuild?: string(name='GmtBuild'),
                isApply?: string(name='IsApply'),
                language?: string(name='Language'),
                majorBillNo?: string(name='MajorBillNo'),
                model?: string(name='Model'),
                ouCode?: string(name='OuCode'),
                parentCategory?: string(name='ParentCategory'),
                productDomain?: string(name='ProductDomain'),
                productId?: string(name='ProductId'),
                productName?: string(name='ProductName'),
                quantity?: double(name='Quantity'),
                quantityUnit?: string(name='QuantityUnit'),
                redAmount?: double(name='RedAmount'),
                relatedId?: string(name='RelatedId'),
                remainAmount?: double(name='RemainAmount'),
                revenueType?: string(name='RevenueType'),
                serviceName?: string(name='ServiceName'),
                sign?: string(name='Sign'),
                siteId?: string(name='SiteId'),
                sourceId?: long(name='SourceId'),
                taxAmount?: double(name='TaxAmount'),
                taxRate?: double(name='TaxRate'),
                unitPrice?: double(name='UnitPrice'),
                uuid?: string(name='Uuid'),
              }
            ](name='SourceList'),
            taxAmount?: double(name='TaxAmount'),
            taxRate?: double(name='TaxRate'),
            unitPrice?: double(name='UnitPrice'),
            uuid?: string(name='Uuid'),
          }
        ](name='DetailList'),
        encryptProps?: map[string]string(name='EncryptProps'),
        excludingTaxAmount?: double(name='ExcludingTaxAmount'),
        excludingTaxRedAmount?: double(name='ExcludingTaxRedAmount'),
        excludingTaxRemainAmount?: double(name='ExcludingTaxRemainAmount'),
        invoiceCode?: string(name='InvoiceCode'),
        invoiceDate?: string(name='InvoiceDate'),
        invoiceId?: long(name='InvoiceId'),
        invoiceNo?: string(name='InvoiceNo'),
        invoiceStatus?: string(name='InvoiceStatus'),
        invoiceType?: string(name='InvoiceType'),
        isRed?: boolean(name='IsRed'),
        isReissue?: boolean(name='IsReissue'),
        language?: string(name='Language'),
        linkInvoiceCode?: string(name='LinkInvoiceCode'),
        linkInvoiceNo?: string(name='LinkInvoiceNo'),
        logisticsInfo?: {
          appCode?: string(name='AppCode'),
          customer?: {
            appCode?: string(name='AppCode'),
            customerId?: string(name='CustomerId'),
            customerSite?: string(name='CustomerSite'),
            customerSystem?: string(name='CustomerSystem'),
            encryptProps?: map[string]string(name='EncryptProps'),
            language?: string(name='Language'),
            sign?: string(name='Sign'),
            uuid?: string(name='Uuid'),
          }(name='Customer'),
          encryptProps?: map[string]string(name='EncryptProps'),
          gmtSend?: string(name='GmtSend'),
          invoiceCode?: string(name='InvoiceCode'),
          invoiceDate?: string(name='InvoiceDate'),
          invoiceId?: long(name='InvoiceId'),
          invoiceNo?: string(name='InvoiceNo'),
          invoiceNos?: string(name='InvoiceNos'),
          language?: string(name='Language'),
          logisticsCompanies?: string(name='LogisticsCompanies'),
          relatedId?: string(name='RelatedId'),
          sender?: string(name='Sender'),
          sign?: string(name='Sign'),
          timestamp?: long(name='Timestamp'),
          trackingNumber?: string(name='TrackingNumber'),
          uuid?: string(name='Uuid'),
        }(name='LogisticsInfo'),
        materialType?: string(name='MaterialType'),
        memo?: string(name='Memo'),
        ouCode?: string(name='OuCode'),
        purchaserBankInfo?: string(name='PurchaserBankInfo'),
        purchaserContactInfo?: string(name='PurchaserContactInfo'),
        purchaserName?: string(name='PurchaserName'),
        purchaserTaxNo?: string(name='PurchaserTaxNo'),
        redAmount?: double(name='RedAmount'),
        relatedId?: string(name='RelatedId'),
        remainAmount?: double(name='RemainAmount'),
        sign?: string(name='Sign'),
        siteId?: string(name='SiteId'),
        taxAmount?: double(name='TaxAmount'),
        uuid?: string(name='Uuid'),
      }
    ](name='List'),
    sign?: string(name='Sign'),
  }(name='ReturnValue'),
}

model QueryInvoiceInfoByRequestNoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryInvoiceInfoByRequestNoResponseBody(name='body'),
}

async function queryInvoiceInfoByRequestNo(request: QueryInvoiceInfoByRequestNoRequest): QueryInvoiceInfoByRequestNoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryInvoiceInfoByRequestNo', 'POST', '/', 'json', true, 'form', request);
}

model QueryMessageCallbackInfoRequest {
  bizType?: string(name='BizType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryMessageCallbackInfoResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: boolean(name='data'),
}

model QueryMessageCallbackInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMessageCallbackInfoResponseBody(name='body'),
}

async function queryMessageCallbackInfo(request: QueryMessageCallbackInfoRequest): QueryMessageCallbackInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMessageCallbackInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryMessageQueueListRequest {
  bizType: string(name='BizType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryMessageQueueListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryMessageQueueListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMessageQueueListResponseBody(name='body'),
}

async function queryMessageQueueList(request: QueryMessageQueueListRequest): QueryMessageQueueListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMessageQueueList', 'POST', '/', 'json', false, 'json', request);
}

model QueryMonthlyBillInfoRequest {
  billCycle?: string(name='BillCycle', position='Query'),
  itemId?: string(name='ItemId', position='Query'),
  itemName?: string(name='ItemName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  subjectItemId?: string(name='SubjectItemId', position='Query'),
}

model QueryMonthlyBillInfoResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryMonthlyBillInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMonthlyBillInfoResponseBody(name='body'),
}

async function queryMonthlyBillInfo(request: QueryMonthlyBillInfoRequest): QueryMonthlyBillInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMonthlyBillInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryMonthlyStatisticsInfoRequest {
  billId: string(name='BillId', position='Query'),
  endDate?: string(name='EndDate', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resType?: int32(name='ResType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startDate?: string(name='StartDate', position='Query'),
}

model QueryMonthlyStatisticsInfoResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryMonthlyStatisticsInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMonthlyStatisticsInfoResponseBody(name='body'),
}

async function queryMonthlyStatisticsInfo(request: QueryMonthlyStatisticsInfoRequest): QueryMonthlyStatisticsInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMonthlyStatisticsInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryNoBuyTasksRequest {
  billId?: string(name='BillId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryNoBuyTasksResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
  message?: string(name='message'),
}

model QueryNoBuyTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryNoBuyTasksResponseBody(name='body'),
}

async function queryNoBuyTasks(request: QueryNoBuyTasksRequest): QueryNoBuyTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryNoBuyTasks', 'POST', '/', 'json', false, 'json', request);
}

model QueryNoDistributeRequest {
  billId?: string(name='BillId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryNoDistributeResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryNoDistributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryNoDistributeResponseBody(name='body'),
}

async function queryNoDistribute(request: QueryNoDistributeRequest): QueryNoDistributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryNoDistribute', 'POST', '/', 'json', false, 'json', request);
}

model QueryOpenStatusRequest {
  busOffer?: long(name='BusOffer', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  prodId: string(name='ProdId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryOpenStatusResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: boolean(name='data'),
}

model QueryOpenStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryOpenStatusResponseBody(name='body'),
}

async function queryOpenStatus(request: QueryOpenStatusRequest): QueryOpenStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOpenStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryPackageDetailRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', position='Query'),
}

model QueryPackageDetailResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryPackageDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPackageDetailResponseBody(name='body'),
}

async function queryPackageDetail(request: QueryPackageDetailRequest): QueryPackageDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPackageDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryPackageListRequest {
  billCycle?: string(name='BillCycle', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryPackageListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryPackageListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPackageListResponseBody(name='body'),
}

async function queryPackageList(request: QueryPackageListRequest): QueryPackageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPackageList', 'POST', '/', 'json', false, 'json', request);
}

model QueryPackageStatisticsRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryPackageStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryPackageStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPackageStatisticsResponseBody(name='body'),
}

async function queryPackageStatistics(request: QueryPackageStatisticsRequest): QueryPackageStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPackageStatistics', 'POST', '/', 'json', false, 'json', request);
}

model QueryPoolCityListRequest {
  billId: string(name='BillId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryPoolCityListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryPoolCityListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPoolCityListResponseBody(name='body'),
}

async function queryPoolCityList(request: QueryPoolCityListRequest): QueryPoolCityListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPoolCityList', 'POST', '/', 'json', false, 'json', request);
}

model QueryPoolInfoListRequest {
  isFuzzyQuery?: boolean(name='IsFuzzyQuery', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo: string(name='PageNo', position='Query'),
  pageSize: string(name='PageSize', position='Query'),
  poolName?: string(name='PoolName', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resType: int32(name='ResType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  searchParam?: string(name='SearchParam', position='Query'),
}

model QueryPoolInfoListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryPoolInfoListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPoolInfoListResponseBody(name='body'),
}

async function queryPoolInfoList(request: QueryPoolInfoListRequest): QueryPoolInfoListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPoolInfoList', 'POST', '/', 'json', false, 'json', request);
}

model QueryPoolMonthlyBillInfoRequest {
  billCycle?: string(name='BillCycle', position='Query'),
  billId?: string(name='BillId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryPoolMonthlyBillInfoResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model QueryPoolMonthlyBillInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPoolMonthlyBillInfoResponseBody(name='body'),
}

async function queryPoolMonthlyBillInfo(request: QueryPoolMonthlyBillInfoRequest): QueryPoolMonthlyBillInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPoolMonthlyBillInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryPoolStatisticsInfoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryPoolStatisticsInfoResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryPoolStatisticsInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPoolStatisticsInfoResponseBody(name='body'),
}

async function queryPoolStatisticsInfo(request: QueryPoolStatisticsInfoRequest): QueryPoolStatisticsInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPoolStatisticsInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryPoolSummaryInfoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryPoolSummaryInfoResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryPoolSummaryInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPoolSummaryInfoResponseBody(name='body'),
}

async function queryPoolSummaryInfo(request: QueryPoolSummaryInfoRequest): QueryPoolSummaryInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPoolSummaryInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryPurchasedInfoRequest {
  billId: string(name='BillId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resType?: int32(name='ResType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryPurchasedInfoResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryPurchasedInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPurchasedInfoResponseBody(name='body'),
}

async function queryPurchasedInfo(request: QueryPurchasedInfoRequest): QueryPurchasedInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPurchasedInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryPurchasedResListRequest {
  billId?: string(name='BillId', position='Query'),
  city?: string(name='City', position='Query'),
  isDisplayPool?: boolean(name='IsDisplayPool', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resBindStatus?: int32(name='ResBindStatus', position='Query'),
  resType?: int32(name='ResType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo?: string(name='SecretNo', position='Query'),
}

model QueryPurchasedResListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryPurchasedResListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPurchasedResListResponseBody(name='body'),
}

async function queryPurchasedResList(request: QueryPurchasedResListRequest): QueryPurchasedResListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPurchasedResList', 'POST', '/', 'json', false, 'json', request);
}

model QueryQRCodeInfoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNumber: string(name='SecretNumber', position='Query'),
}

model QueryQRCodeInfoResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  token?: string(name='Token'),
}

model QueryQRCodeInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryQRCodeInfoResponseBody(name='body'),
}

async function queryQRCodeInfo(request: QueryQRCodeInfoRequest): QueryQRCodeInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryQRCodeInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryRecordingUrlRequest {
  billId: string(name='BillId', position='Query'),
  callDate: string(name='CallDate', position='Query'),
  callId: string(name='CallId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resType: int32(name='ResType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryRecordingUrlResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryRecordingUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRecordingUrlResponseBody(name='body'),
}

async function queryRecordingUrl(request: QueryRecordingUrlRequest): QueryRecordingUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRecordingUrl', 'POST', '/', 'json', false, 'json', request);
}

model QueryResSummaryInfoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryResSummaryInfoResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryResSummaryInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryResSummaryInfoResponseBody(name='body'),
}

async function queryResSummaryInfo(request: QueryResSummaryInfoRequest): QueryResSummaryInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryResSummaryInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryRingToneUrlRequest {
  billId?: string(name='BillId', position='Query'),
  fileKey: string(name='FileKey', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryRingToneUrlResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryRingToneUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRingToneUrlResponseBody(name='body'),
}

async function queryRingToneUrl(request: QueryRingToneUrlRequest): QueryRingToneUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRingToneUrl', 'POST', '/', 'json', false, 'json', request);
}

model QueryRingTonesRequest {
  billId?: string(name='BillId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  playType?: string(name='PlayType', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryRingTonesResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryRingTonesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRingTonesResponseBody(name='body'),
}

async function queryRingTones(request: QueryRingTonesRequest): QueryRingTonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRingTones', 'POST', '/', 'json', false, 'json', request);
}

model QuerySimplePoolInfoListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  poolName?: string(name='PoolName', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resType: int32(name='ResType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QuerySimplePoolInfoListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QuerySimplePoolInfoListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySimplePoolInfoListResponseBody(name='body'),
}

async function querySimplePoolInfoList(request: QuerySimplePoolInfoListRequest): QuerySimplePoolInfoListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySimplePoolInfoList', 'POST', '/', 'json', false, 'json', request);
}

model QueryStatisticsInfoRequest {
  billId: string(name='BillId', position='Query'),
  endDate?: string(name='EndDate', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resType?: int32(name='ResType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startDate?: string(name='StartDate', position='Query'),
}

model QueryStatisticsInfoResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryStatisticsInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryStatisticsInfoResponseBody(name='body'),
}

async function queryStatisticsInfo(request: QueryStatisticsInfoRequest): QueryStatisticsInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryStatisticsInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryTagOpenStatusRequest {
  attributeKey?: string(name='AttributeKey', position='Query'),
  bizType?: int32(name='BizType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  subAttributeKey?: string(name='SubAttributeKey', position='Query'),
}

model QueryTagOpenStatusResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model QueryTagOpenStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTagOpenStatusResponseBody(name='body'),
}

async function queryTagOpenStatus(request: QueryTagOpenStatusRequest): QueryTagOpenStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTagOpenStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryTransferDetailsRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  recordId?: long(name='RecordId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryTransferDetailsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryTransferDetailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTransferDetailsResponseBody(name='body'),
}

async function queryTransferDetails(request: QueryTransferDetailsRequest): QueryTransferDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTransferDetails', 'POST', '/', 'json', false, 'json', request);
}

model QueryTransferRecordRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  recordId?: long(name='RecordId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryTransferRecordResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryTransferRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTransferRecordResponseBody(name='body'),
}

async function queryTransferRecord(request: QueryTransferRecordRequest): QueryTransferRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTransferRecord', 'POST', '/', 'json', false, 'json', request);
}

model QueryTransferRecordsRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: int32(name='PageNo', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  recordId?: long(name='RecordId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryTransferRecordsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryTransferRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTransferRecordsResponseBody(name='body'),
}

async function queryTransferRecords(request: QueryTransferRecordsRequest): QueryTransferRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTransferRecords', 'POST', '/', 'json', false, 'json', request);
}

model QueryUserDeleteStatusRequest {
  bid: string(name='Bid', position='Query'),
  country: string(name='Country', position='Query'),
  gmtWakeup: string(name='GmtWakeup', position='Query'),
  hid: long(name='Hid', position='Query'),
  interrupt?: boolean(name='Interrupt', position='Query'),
  invoker: string(name='Invoker', position='Query'),
  level?: long(name='Level', position='Query'),
  message?: string(name='Message', position='Query'),
  pk: string(name='Pk', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  prompt?: string(name='Prompt', position='Query'),
  success?: boolean(name='Success', position='Query'),
  taskExtraData: string(name='TaskExtraData', position='Query'),
  taskIdentifier: string(name='TaskIdentifier', position='Query'),
  url?: string(name='Url', position='Query'),
}

model QueryUserDeleteStatusResponseBody = {
  bid?: string(name='Bid'),
  country?: string(name='Country'),
  gmtWakeup?: string(name='GmtWakeup'),
  hid?: long(name='Hid'),
  interrupt?: boolean(name='Interrupt'),
  invoker?: string(name='Invoker'),
  level?: long(name='Level'),
  message?: string(name='Message'),
  pk?: string(name='Pk'),
  prompt?: string(name='Prompt'),
  success?: boolean(name='Success'),
  taskExtraData?: string(name='TaskExtraData'),
  taskIdentifier?: string(name='TaskIdentifier'),
  url?: string(name='Url'),
}

model QueryUserDeleteStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryUserDeleteStatusResponseBody(name='body'),
}

async function queryUserDeleteStatus(request: QueryUserDeleteStatusRequest): QueryUserDeleteStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUserDeleteStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryUserInfoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryUserInfoResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryUserInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryUserInfoResponseBody(name='body'),
}

async function queryUserInfo(request: QueryUserInfoRequest): QueryUserInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUserInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryUserResPoolInfoRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryUserResPoolInfoResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryUserResPoolInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryUserResPoolInfoResponseBody(name='body'),
}

async function queryUserResPoolInfo(request: QueryUserResPoolInfoRequest): QueryUserResPoolInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUserResPoolInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryVirtualOperationShowRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryVirtualOperationShowResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model QueryVirtualOperationShowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryVirtualOperationShowResponseBody(name='body'),
}

async function queryVirtualOperationShow(request: QueryVirtualOperationShowRequest): QueryVirtualOperationShowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryVirtualOperationShow', 'POST', '/', 'json', false, 'json', request);
}

model QueryWarningListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryWarningListResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model QueryWarningListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryWarningListResponseBody(name='body'),
}

async function queryWarningList(request: QueryWarningListRequest): QueryWarningListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryWarningList', 'POST', '/', 'json', false, 'json', request);
}

model QueryWaybillOrderInfoRequest {
  contentType?: string(name='Content-Type', position='Header'),
  outerOrderCode: string(name='OuterOrderCode', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryWaybillOrderInfoResponseBody = {
  code?: string(name='Code'),
  data?: {
    aliyunprice?: string(name='Aliyunprice'),
    appointGotEndTime?: string(name='AppointGotEndTime'),
    appointGotStartTime?: string(name='AppointGotStartTime'),
    bizType?: int32(name='BizType'),
    city?: string(name='City'),
    cpCode?: string(name='CpCode'),
    gotCode?: string(name='GotCode'),
    lastLogisticDetail?: string(name='LastLogisticDetail'),
    logisticsGmtModified?: string(name='LogisticsGmtModified'),
    logisticsStatus?: string(name='LogisticsStatus'),
    logisticsStatusDesc?: string(name='LogisticsStatusDesc'),
    mailNo?: string(name='MailNo'),
    outerOrderCode?: string(name='OuterOrderCode'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryWaybillOrderInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryWaybillOrderInfoResponseBody(name='body'),
}

async function queryWaybillOrderInfo(request: QueryWaybillOrderInfoRequest): QueryWaybillOrderInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryWaybillOrderInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryWaybillOrderStatisticsInfoRequest {
  contentType?: string(name='Content-Type', position='Header'),
  endTime: string(name='EndTime', position='Query'),
  granularity: string(name='Granularity', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model QueryWaybillOrderStatisticsInfoResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      aliyunpriceAmount?: double(name='AliyunpriceAmount'),
      cancelCount?: int32(name='CancelCount'),
      gmtCreate?: string(name='GmtCreate'),
      gotCount?: int32(name='GotCount'),
      orderTotal?: int32(name='OrderTotal'),
    }
  ](name='Data'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryWaybillOrderStatisticsInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryWaybillOrderStatisticsInfoResponseBody(name='body'),
}

async function queryWaybillOrderStatisticsInfo(request: QueryWaybillOrderStatisticsInfoRequest): QueryWaybillOrderStatisticsInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryWaybillOrderStatisticsInfo', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseResourceRequest {
  billId: string(name='BillId', position='Query'),
  isDisplayPool?: boolean(name='IsDisplayPool', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resType?: int32(name='ResType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo?: string(name='SecretNo', position='Query'),
}

model ReleaseResourceResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model ReleaseResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseResourceResponseBody(name='body'),
}

async function releaseResource(request: ReleaseResourceRequest): ReleaseResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseResource', 'POST', '/', 'json', false, 'json', request);
}

model TestTtsRingToneRequest {
  billId?: string(name='BillId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tts?: string(name='Tts', position='Query'),
  voiceSpeed?: string(name='VoiceSpeed', position='Query'),
  voiceStyle?: string(name='VoiceStyle', position='Query'),
  voiceType?: string(name='VoiceType', position='Query'),
  voiceVolume?: string(name='VoiceVolume', position='Query'),
}

model TestTtsRingToneResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model TestTtsRingToneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TestTtsRingToneResponseBody(name='body'),
}

async function testTtsRingTone(request: TestTtsRingToneRequest): TestTtsRingToneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TestTtsRingTone', 'POST', '/', 'json', false, 'json', request);
}

model UnbindResourceRequest {
  billId: string(name='BillId', position='Query'),
  bindIds?: string(name='BindIds', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resType?: int32(name='ResType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo?: string(name='SecretNo', position='Query'),
}

model UnbindResourceResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model UnbindResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindResourceResponseBody(name='body'),
}

async function unbindResource(request: UnbindResourceRequest): UnbindResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindResource', 'POST', '/', 'json', false, 'json', request);
}

model UnlockResourceRequest {
  billId: string(name='BillId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo: string(name='SecretNo', position='Query'),
}

model UnlockResourceResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model UnlockResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnlockResourceResponseBody(name='body'),
}

async function unlockResource(request: UnlockResourceRequest): UnlockResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnlockResource', 'POST', '/', 'json', false, 'json', request);
}

model UpdateContactsRequest {
  billId: string(name='BillId', position='Query'),
  id: long(name='Id', position='Query'),
  name: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdateContactsResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model UpdateContactsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateContactsResponseBody(name='body'),
}

async function updateContacts(request: UpdateContactsRequest): UpdateContactsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateContacts', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGroupDetailRequest {
  groupId?: string(name='GroupId', position='Query'),
  id: string(name='Id', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey: string(name='PoolKey', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  remark?: string(name='Remark', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdateGroupDetailResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: boolean(name='data'),
}

model UpdateGroupDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGroupDetailResponseBody(name='body'),
}

async function updateGroupDetail(request: UpdateGroupDetailRequest): UpdateGroupDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGroupDetail', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGroupInfoRequest {
  id: string(name='Id', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolKey: string(name='PoolKey', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  remark?: string(name='Remark', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdateGroupInfoResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: boolean(name='data'),
}

model UpdateGroupInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGroupInfoResponseBody(name='body'),
}

async function updateGroupInfo(request: UpdateGroupInfoRequest): UpdateGroupInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGroupInfo', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePoolNameRequest {
  billId: string(name='BillId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  poolName: string(name='PoolName', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resType: int32(name='ResType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdatePoolNameResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model UpdatePoolNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdatePoolNameResponseBody(name='body'),
}

async function updatePoolName(request: UpdatePoolNameRequest): UpdatePoolNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePoolName', 'POST', '/', 'json', false, 'json', request);
}

model UpdateResRemarkRequest {
  billId: string(name='BillId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  remark: string(name='Remark', position='Query'),
  resType?: int32(name='ResType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secretNo?: string(name='SecretNo', position='Query'),
}

model UpdateResRemarkResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='code'),
  data?: string(name='data'),
}

model UpdateResRemarkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateResRemarkResponseBody(name='body'),
}

async function updateResRemark(request: UpdateResRemarkRequest): UpdateResRemarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateResRemark', 'POST', '/', 'json', false, 'json', request);
}

model ValidateOrderRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  data: string(name='data', position='Query'),
}

model ValidateOrderResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ValidateOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ValidateOrderResponseBody(name='body'),
}

async function validateOrder(request: ValidateOrderRequest): ValidateOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ValidateOrder', 'POST', '/', 'json', false, 'json', request);
}

