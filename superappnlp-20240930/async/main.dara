/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'SuperappNlp';
  @version = '2024-09-30';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model NlpAddressNormalizationRequest {
  regionId?: string(name='RegionId', position='Host'),
  cityStdManual?: string(name='CityStdManual', position='Query'),
  cityStr?: string(name='CityStr', example='BACOLOR', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  districtStdManual?: string(name='DistrictStdManual', position='Query'),
  instanceId?: string(name='InstanceId', example='10671', position='Query'),
  provinceStdManual?: string(name='ProvinceStdManual', position='Query'),
  provinceStr?: string(name='ProvinceStr', example='PAMPANGA', position='Query'),
  queryStr?: string(name='QueryStr', example='350 Magliman, Bacolor, Pampanga AQUA MALTA Refilling Station', position='Query'),
}

model NlpAddressNormalizationResponseBody = {
  code?: string(name='Code'),
  data?: {
    cityStd?: string(name='CityStd'),
    districtStd?: string(name='DistrictStd'),
    provinceStd?: string(name='ProvinceStd'),
    results?: [ string ](name='Results'),
    statusEs?: string(name='StatusEs'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='99540D1A-9112-56E5-8DCC-1A2603F4C500'),
  result?: string(name='Result', example='success'),
  success?: boolean(name='Success', example='true'),
  timestamp?: string(name='Timestamp', example='1701051540592'),
}

model NlpAddressNormalizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: NlpAddressNormalizationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of NlpAddressNormalization  NlpAddressNormalizationRequest
  * @return NlpAddressNormalizationResponse
 */
async function nlpAddressNormalization(request: NlpAddressNormalizationRequest): NlpAddressNormalizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'NlpAddressNormalization', 'POST', '/', 'json', false, 'json', request);
}

