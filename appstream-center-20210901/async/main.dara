/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'appstream-center';
  @version = '2021-09-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ApproveOtaTaskRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='实例组id', example='aig-9ciijz60n4xsv****', position='Body'),
  bizRegionId: string(name='BizRegionId', description='请求发起者所在地域', example='cn-hangzhou', position='Body'),
  otaType: string(name='OtaType', description='ota类型,取值：
Fota ： agent组件更新
ImageUpdate ： 镜像更新
AppUpdate ： 应用更新', example='Fota', position='Body'),
  startTime: string(name='StartTime', description='开始时间，iso8601格式', example='2022-08-04T14:36:00+08:00', position='Body'),
  taskId: string(name='TaskId', description='ota任务id', example='ota-be7jzm29wrrz5****', position='Body'),
}

model ApproveOtaTaskResponseBody = {
  code?: string(name='Code', example='OtaTask.Running'),
  message?: string(name='Message', example='The task is running and cannot be sumitted.'),
  requestId?: string(name='RequestId', description='Id of the request', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ApproveOtaTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ApproveOtaTaskResponseBody(name='body'),
}

async function approveOtaTask(request: ApproveOtaTaskRequest): ApproveOtaTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApproveOtaTask', 'POST', '/', 'json', true, 'form', request);
}

model AuthorizeInstanceGroupRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****', position='Body'),
  authorizeUserIds?: [ string ](name='AuthorizeUserIds', position='Body'),
  productType: string(name='ProductType', example='CloudApp', position='Body'),
  unAuthorizeUserIds?: [ string ](name='UnAuthorizeUserIds', position='Body'),
}

model AuthorizeInstanceGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model AuthorizeInstanceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AuthorizeInstanceGroupResponseBody(name='body'),
}

async function authorizeInstanceGroup(request: AuthorizeInstanceGroupRequest): AuthorizeInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuthorizeInstanceGroup', 'POST', '/', 'json', true, 'form', request);
}

model CancelOtaTaskRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='实例组id', example='aig-53fvrq1oanz6c****', position='Body'),
  taskId: string(name='TaskId', description='任务id', example='ota-be7jzm29wrrz5****', position='Body'),
}

model CancelOtaTaskResponseBody = {
  code?: string(name='Code', example='OtaTask.Running'),
  message?: string(name='Message', example='The task is running and cannot be sumitted.'),
  requestId?: string(name='RequestId', description='Id of the request', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CancelOtaTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CancelOtaTaskResponseBody(name='body'),
}

async function cancelOtaTask(request: CancelOtaTaskRequest): CancelOtaTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelOtaTask', 'POST', '/', 'json', true, 'form', request);
}

model CreateAppInstanceGroupRequest {
  appCenterImageId: string(name='AppCenterImageId', example='img-8z4nztpaqvay4****', position='Body'),
  appInstanceGroupName: string(name='AppInstanceGroupName', position='Body'),
  autoPay?: boolean(name='AutoPay', example='false', position='Body'),
  autoRenew?: boolean(name='AutoRenew', example='false', position='Body'),
  bizRegionId: string(name='BizRegionId', example='cn-hangzhou', position='Body'),
  chargeResourceMode: string(name='ChargeResourceMode', example='Node', position='Body'),
  chargeType: string(name='ChargeType', example='PrePaid', position='Body'),
  network?: {
    routes?: [ 
      {
        destination?: string(name='Destination'),
        mode?: string(name='Mode'),
      }
    ](name='Routes'),
    strategyType?: string(name='StrategyType'),
  }(name='Network', shrink='json', position='Body'),
  nodePool?: {
    maxScalingAmount?: int32(name='MaxScalingAmount'),
    nodeAmount?: int32(name='NodeAmount', example='1'),
    nodeCapacity?: int32(name='NodeCapacity', example='2'),
    nodeInstanceType?: string(name='NodeInstanceType', example='appstreaming.vgpu.4c8g.2g'),
    recurrenceSchedules?: [ 
      {
        recurrenceType?: string(name='RecurrenceType'),
        recurrenceValues?: [ int32 ](name='RecurrenceValues'),
        timerPeriods?: [ 
          {
            amount?: int32(name='Amount'),
            endTime?: string(name='EndTime'),
            startTime?: string(name='StartTime'),
          }
        ](name='TimerPeriods'),
      }
    ](name='RecurrenceSchedules'),
    scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes'),
    scalingStep?: int32(name='ScalingStep'),
    scalingUsageThreshold?: string(name='ScalingUsageThreshold'),
    strategyDisableDate?: string(name='StrategyDisableDate'),
    strategyEnableDate?: string(name='StrategyEnableDate'),
    strategyType?: string(name='StrategyType'),
    warmUp?: boolean(name='WarmUp'),
  }(name='NodePool', shrink='json', position='Body'),
  period: int32(name='Period', example='1', position='Body'),
  periodUnit: string(name='PeriodUnit', example='Day', position='Body'),
  preOpenAppId?: string(name='PreOpenAppId', position='Body'),
  productType: string(name='ProductType', example='CloudApp', position='Body'),
  promotionId?: string(name='PromotionId', example='17440009****', position='Body'),
  runtimePolicy?: {
    sessionType?: string(name='SessionType'),
  }(name='RuntimePolicy', shrink='json', position='Body'),
  sessionTimeout: int32(name='SessionTimeout', example='15', maximum=300, position='Body'),
  userInfo?: {
    type?: string(name='Type', example='Simple'),
  }(name='UserInfo', shrink='json', position='Body'),
  users?: [ string ](name='Users', position='Body'),
}

model CreateAppInstanceGroupResponseBody = {
  appInstanceGroupModel?: {
    appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
    nodePoolId?: string(name='NodePoolId', example='rg-ew7va2g1wl3vm****'),
    orderId?: string(name='OrderId', example='12345****'),
  }(name='AppInstanceGroupModel'),
  requestId?: string(name='RequestId', description='Id of the request', example='41730F59-EEF0-53E8-9692-2E82E6721D46'),
}

model CreateAppInstanceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppInstanceGroupResponseBody(name='body'),
}

async function createAppInstanceGroup(request: CreateAppInstanceGroupRequest): CreateAppInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppInstanceGroup', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAppInstanceGroupRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****', position='Body'),
  productType: string(name='ProductType', example='CloudApp', position='Body'),
}

model DeleteAppInstanceGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteAppInstanceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAppInstanceGroupResponseBody(name='body'),
}

async function deleteAppInstanceGroup(request: DeleteAppInstanceGroupRequest): DeleteAppInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAppInstanceGroup', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAppInstancesRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****', position='Body'),
  appInstanceIds: [ string ](name='AppInstanceIds', position='Body'),
  productType: string(name='ProductType', example='CloudApp', position='Body'),
}

model DeleteAppInstancesResponseBody = {
  deleteAppInstanceModels?: [ 
    {
      appInstanceId?: string(name='AppInstanceId', example='ai-gbuea*****'),
      code?: string(name='Code', example='InvalidParameter.ProductType'),
      message?: string(name='Message', example='The parameter ProductType is invalid.'),
      success?: boolean(name='Success', example='true'),
    }
  ](name='DeleteAppInstanceModels'),
  requestId?: string(name='RequestId', description='Id of the request', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteAppInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAppInstancesResponseBody(name='body'),
}

async function deleteAppInstances(request: DeleteAppInstancesRequest): DeleteAppInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAppInstances', 'POST', '/', 'json', true, 'form', request);
}

model GetAppInstanceGroupRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****', position='Query'),
  productType: string(name='ProductType', example='CloudApp', position='Query'),
}

model GetAppInstanceGroupResponseBody = {
  appInstanceGroupModels?: {
    amount?: int32(name='Amount', example='0'),
    appCenterImageId?: string(name='AppCenterImageId', example='img-8z4nztpaqvay4****'),
    appCenterImageName?: string(name='AppCenterImageName', example='OfficeApps'),
    appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
    appInstanceGroupName?: string(name='AppInstanceGroupName'),
    appInstanceType?: string(name='AppInstanceType', example='__dynamic__'),
    appPolicyId?: string(name='AppPolicyId'),
    apps?: [ 
      {
        appId?: string(name='AppId', example='ca-i87mycyn419nu****'),
        appName?: string(name='AppName'),
      }
    ](name='Apps'),
    chargeType?: string(name='ChargeType', example='PrePaid'),
    expiredTime?: string(name='ExpiredTime', example='2022-04-27T16:00:00.000+00:00'),
    gmtCreate?: string(name='GmtCreate', example='2022-04-26T15:06:16.000+00:00'),
    nodePool?: [ 
      {
        amount?: int32(name='Amount', example='2'),
        maxScalingAmount?: int32(name='MaxScalingAmount', example='8'),
        nodeAmount?: int32(name='NodeAmount', example='1'),
        nodeCapacity?: int32(name='NodeCapacity', example='2'),
        nodeInstanceType?: string(name='NodeInstanceType', example='appstreaming.vgpu.4c8g.2g'),
        nodePoolId?: string(name='NodePoolId', example='rg-g6922kced36hx****'),
        nodeTypeName?: string(name='NodeTypeName'),
        nodeUsed?: int32(name='NodeUsed', example='1'),
        recurrenceSchedules?: [ 
          {
            recurrenceType?: string(name='RecurrenceType', example='Weekly'),
            recurrenceValues?: [ int32 ](name='RecurrenceValues'),
            timerPeriods?: [ 
              {
                amount?: int32(name='Amount', example='5'),
                endTime?: string(name='EndTime', example='11:00'),
                startTime?: string(name='StartTime', example='09:30'),
              }
            ](name='TimerPeriods'),
          }
        ](name='RecurrenceSchedules'),
        scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes', example='5'),
        scalingNodeAmount?: int32(name='ScalingNodeAmount', example='8'),
        scalingNodeUsed?: int32(name='ScalingNodeUsed', example='4'),
        scalingStep?: int32(name='ScalingStep', example='2'),
        scalingUsageThreshold?: string(name='ScalingUsageThreshold', example='85'),
        strategyDisableDate?: string(name='StrategyDisableDate', example='2022-09-08'),
        strategyEnableDate?: string(name='StrategyEnableDate', example='2022-08-01'),
        strategyType?: string(name='StrategyType', example='NODE_FIXED'),
        warmUp?: boolean(name='WarmUp', example='false'),
      }
    ](name='NodePool'),
    osType?: string(name='OsType', description='系统类型', example='Windows'),
    otaInfo?: {
      newOtaVersion?: string(name='NewOtaVersion', description='新ota版本,为空表示没有新版本', example='0.0.1-D-20220630.11****'),
      otaVersion?: string(name='OtaVersion', description='当前ota版本', example='0.0.1-D-20220615.11****'),
      taskId?: string(name='TaskId', description='任务id', example='ota-e49929gv8acz5****'),
    }(name='OtaInfo'),
    productType?: string(name='ProductType', example='CloudApp'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    resourceStatus?: string(name='ResourceStatus', example='AVAILABLE'),
    sessionTimeout?: string(name='SessionTimeout', example='15'),
    specId?: string(name='SpecId', example='spec-8o18t8uc31qib0****'),
    status?: string(name='Status', example='PUBLISHED'),
  }(name='AppInstanceGroupModels', description='AppInstanceGroupModels'),
  requestId?: string(name='RequestId', description='Id of the request', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model GetAppInstanceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetAppInstanceGroupResponseBody(name='body'),
}

async function getAppInstanceGroup(request: GetAppInstanceGroupRequest): GetAppInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAppInstanceGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetConnectionTicketRequest {
  appId?: string(name='AppId', example='ca-e4s0puhmwi7v****', position='Body'),
  appInstanceGroupIdList?: [ string ](name='AppInstanceGroupIdList', position='Body'),
  appInstanceId?: string(name='AppInstanceId', example='ai-1rznfnrvsa99d****', position='Body'),
  appStartParam?: string(name='AppStartParam', example='/q /n', position='Body'),
  appVersion?: string(name='AppVersion', example='1.0.0', position='Body'),
  bizRegionId?: string(name='BizRegionId', example='cn-hangzhou', position='Body'),
  endUserId: string(name='EndUserId', example='alice', position='Body'),
  productType: string(name='ProductType', example='CloudApp', position='Body'),
  taskId?: string(name='TaskId', example='28778acb-a469-4bc0-8e0f****', position='Body'),
}

model GetConnectionTicketResponseBody = {
  appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-53fvrq1oan****'),
  appInstanceId?: string(name='AppInstanceId', example='ai-7ybdeiyoeh5e****'),
  bizRegionId?: string(name='BizRegionId', example='cn-hangzhou'),
  osType?: string(name='OsType', example='Windows'),
  requestId?: string(name='RequestId', description='Id of the request', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  taskId?: string(name='TaskId', example='f3d1b31c-605e-4d04-a896****'),
  taskStatus?: string(name='TaskStatus', example='Running'),
  ticket?: string(name='Ticket', example='DQpbRGVza3RvcF0NCkZvcmNlVGxzVHlwZT0xDQpHV1Rva2VuUGFydDE9MDAva09ROW1FUTU3dU****'),
}

model GetConnectionTicketResponse = {
  headers: map[string]string(name='headers'),
  body: GetConnectionTicketResponseBody(name='body'),
}

async function getConnectionTicket(request: GetConnectionTicketRequest): GetConnectionTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConnectionTicket', 'POST', '/', 'json', true, 'form', request);
}

model GetOtaTaskByTaskIdRequest {
  taskId: string(name='TaskId', description='ota任务id', example='ota-be7jzm29wrrz5****', position='Body'),
}

model GetOtaTaskByTaskIdResponseBody = {
  code?: string(name='Code', description='错误码', example='OtaTask.Running'),
  message?: string(name='Message', description='提示', example='The task is running and cannot be sumitted.'),
  otaVersion?: string(name='OtaVersion', description='版本号', example='0.0.1-R-20220708.110604'),
  releaseNote?: string(name='ReleaseNote', description='版本说明'),
  requestId?: string(name='RequestId', description='Id of the request', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  taskStartTime?: string(name='TaskStartTime', description='任务执行时间，ISO-8601格式', example='2022-08-04T14:36:00+08:00'),
}

model GetOtaTaskByTaskIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetOtaTaskByTaskIdResponseBody(name='body'),
}

async function getOtaTaskByTaskId(request: GetOtaTaskByTaskIdRequest): GetOtaTaskByTaskIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOtaTaskByTaskId', 'POST', '/', 'json', true, 'form', request);
}

model GetResourcePriceRequest {
  amount: long(name='Amount', example='1', position='Query'),
  bizRegionId: string(name='BizRegionId', example='cn-hangzhou', position='Query'),
  chargeType: string(name='ChargeType', example='PrePaid', position='Query'),
  nodeInstanceType: string(name='NodeInstanceType', example='appstreaming.vgpu.4c8g.2g', position='Query'),
  period: long(name='Period', example='1', position='Query'),
  periodUnit: string(name='PeriodUnit', example='Day', position='Query'),
  productType: string(name='ProductType', example='CloudApp', position='Query'),
}

model GetResourcePriceResponseBody = {
  code?: string(name='Code', example='InvalidParameter.ProductType'),
  message?: string(name='Message', example='The parameter ProductType is invalid.'),
  priceModel?: {
    price?: {
      currency?: string(name='Currency', example='CNY'),
      discountPrice?: string(name='DiscountPrice', example='1.00'),
      originalPrice?: string(name='OriginalPrice', example='11.00'),
      promotions?: [ 
        {
          optionCode?: string(name='OptionCode', example='coupon****'),
          promotionDesc?: string(name='PromotionDesc'),
          promotionId?: string(name='PromotionId', example='17440009****'),
          promotionName?: string(name='PromotionName'),
          selected?: boolean(name='Selected', example='true'),
        }
      ](name='Promotions'),
      tradePrice?: string(name='TradePrice', example='10.00'),
    }(name='Price'),
    rules?: [ 
      {
        description?: string(name='Description'),
        ruleId?: long(name='RuleId', example='102002100393****'),
      }
    ](name='Rules'),
  }(name='PriceModel'),
  requestId?: string(name='RequestId', description='Id of the request', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model GetResourcePriceResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourcePriceResponseBody(name='body'),
}

async function getResourcePrice(request: GetResourcePriceRequest): GetResourcePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourcePrice', 'POST', '/', 'json', false, 'json', request);
}

model GetResourceRenewPriceRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****', position='Query'),
  period: long(name='Period', example='1', position='Query'),
  periodUnit: string(name='PeriodUnit', example='Week', position='Query'),
  productType: string(name='ProductType', example='CloudApp', position='Query'),
}

model GetResourceRenewPriceResponseBody = {
  data?: {
    price?: {
      currency?: string(name='Currency', example='CNY'),
      discountPrice?: string(name='DiscountPrice', example='1'),
      originalPrice?: string(name='OriginalPrice', example='11'),
      promotions?: [ 
        {
          optionCode?: string(name='OptionCode', example='coupon****'),
          promotionDesc?: string(name='PromotionDesc'),
          promotionId?: string(name='PromotionId', example='139965*****'),
          promotionName?: string(name='PromotionName'),
          selected?: boolean(name='Selected', example='true'),
        }
      ](name='Promotions'),
      tradePrice?: string(name='TradePrice', example='10'),
    }(name='Price'),
    rules?: [ 
      {
        description?: string(name='Description'),
        ruleId?: long(name='RuleId', example='20002****'),
      }
    ](name='Rules'),
  }(name='Data'),
  requestId?: string(name='RequestId', description='Id of the request', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model GetResourceRenewPriceResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceRenewPriceResponseBody(name='body'),
}

async function getResourceRenewPrice(request: GetResourceRenewPriceRequest): GetResourceRenewPriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourceRenewPrice', 'POST', '/', 'json', false, 'json', request);
}

model ListAppInstanceGroupRequest {
  appCenterImageId?: string(name='AppCenterImageId', description='应用中心镜像ID', position='Query'),
  appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****', position='Query'),
  appInstanceGroupName?: string(name='AppInstanceGroupName', position='Query'),
  nodeInstanceType?: string(name='NodeInstanceType', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  productType: string(name='ProductType', example='CloudApp', position='Query'),
  regionId?: string(name='RegionId', description='地域ID', position='Query'),
  status?: [ string ](name='Status', position='Body'),
}

model ListAppInstanceGroupResponseBody = {
  appInstanceGroupModels?: [ 
    {
      amount?: int32(name='Amount', example='1'),
      appCenterImageId?: string(name='AppCenterImageId', example='img-8z4nztpaqvay4****'),
      appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
      appInstanceGroupName?: string(name='AppInstanceGroupName'),
      appInstanceType?: string(name='AppInstanceType', example='__dynamic__'),
      appPolicyId?: string(name='AppPolicyId'),
      apps?: [ 
        {
          appIcon?: string(name='AppIcon'),
          appId?: string(name='AppId', example='ca-i87mycyn419nu****'),
          appName?: string(name='AppName'),
          appVersion?: string(name='AppVersion'),
          appVersionName?: string(name='AppVersionName'),
        }
      ](name='Apps'),
      chargeResourceMode?: string(name='ChargeResourceMode'),
      chargeType?: string(name='ChargeType', example='PrePaid'),
      expiredTime?: string(name='ExpiredTime', example='2022-04-27T16:00:00.000+00:00'),
      gmtCreate?: string(name='GmtCreate', example='2022-04-26T15:06:16.000+00:00'),
      nodePool?: [ 
        {
          amount?: int32(name='Amount', example='2'),
          maxScalingAmount?: int32(name='MaxScalingAmount', example='8'),
          nodeAmount?: int32(name='NodeAmount', example='1'),
          nodeCapacity?: int32(name='NodeCapacity', example='2'),
          nodeInstanceType?: string(name='NodeInstanceType', example='appstreaming.vgpu.4c8g.2g'),
          nodePoolId?: string(name='NodePoolId', example='rg-g6922kced36hx****'),
          nodeTypeName?: string(name='NodeTypeName'),
          nodeUsed?: int32(name='NodeUsed', example='1'),
          recurrenceSchedules?: [ 
            {
              recurrenceType?: string(name='RecurrenceType'),
              recurrenceValues?: [ int32 ](name='RecurrenceValues'),
              timerPeriods?: [ 
                {
                  amount?: int32(name='Amount'),
                  endTime?: string(name='EndTime'),
                  startTime?: string(name='StartTime'),
                }
              ](name='TimerPeriods'),
            }
          ](name='RecurrenceSchedules'),
          scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes', example='5'),
          scalingNodeAmount?: int32(name='ScalingNodeAmount', example='8'),
          scalingNodeUsed?: int32(name='ScalingNodeUsed', example='4'),
          scalingStep?: int32(name='ScalingStep', example='2'),
          scalingUsageThreshold?: string(name='ScalingUsageThreshold', example='85'),
          strategyDisableDate?: string(name='StrategyDisableDate'),
          strategyEnableDate?: string(name='StrategyEnableDate'),
          strategyType?: string(name='StrategyType', example='NODE_FIXED'),
          warmUp?: boolean(name='WarmUp'),
        }
      ](name='NodePool'),
      osType?: string(name='OsType', description='系统类型', example='Windows'),
      otaInfo?: {
        newOtaVersion?: string(name='NewOtaVersion', description='新ota版本,为空表示没有新版本', example='0.0.1-D-20220630.11****'),
        otaVersion?: string(name='OtaVersion', description='当前ota版本', example='0.0.1-D-20220615.11****'),
        taskId?: string(name='TaskId', description='任务id', example='ota-e49929gv8acz5****'),
      }(name='OtaInfo'),
      productType?: string(name='ProductType', example='CloudApp'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceStatus?: string(name='ResourceStatus'),
      sessionTimeout?: string(name='SessionTimeout', example='15'),
      specId?: string(name='SpecId', example='spec-8o18t8uc31qib0****'),
      status?: string(name='Status', example='PUBLISHED'),
    }
  ](name='AppInstanceGroupModels', description='AppInstanceGroupModels'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  totalCount?: int32(name='TotalCount', example='15'),
}

model ListAppInstanceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListAppInstanceGroupResponseBody(name='body'),
}

async function listAppInstanceGroup(request: ListAppInstanceGroupRequest): ListAppInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAppInstanceGroup', 'POST', '/', 'json', true, 'form', request);
}

model ListAppInstancesRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', example='aig-4p5f8tj16yb8b****', position='Query'),
  appInstanceId?: string(name='AppInstanceId', example='ai-azn3kmwruh1vl****', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=100, position='Query'),
  status?: [ string ](name='Status', position='Body'),
}

model ListAppInstancesResponseBody = {
  appInstanceModels?: [ 
    {
      appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-dk8p95irqfst9****'),
      appInstanceId?: string(name='AppInstanceId', example='ai-8dl7dzchklmka****'),
      gmtCreate?: string(name='GmtCreate', example='2023-03-07T20:29:19.000+08:00'),
      gmtModified?: string(name='GmtModified', example='2023-03-07T20:29:19.000+08:00'),
      mainEthPublicIp?: string(name='MainEthPublicIp', example='10.13.13.211'),
      sessionStatus?: string(name='SessionStatus', example='connect'),
      status?: string(name='Status', example='BOUND'),
    }
  ](name='AppInstanceModels'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  totalCount?: int32(name='TotalCount', example='18'),
}

model ListAppInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAppInstancesResponseBody(name='body'),
}

async function listAppInstances(request: ListAppInstancesRequest): ListAppInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAppInstances', 'POST', '/', 'json', true, 'form', request);
}

model ListNodeInstanceTypeRequest {
  bizRegionId?: string(name='BizRegionId', position='Query'),
  language?: string(name='Language', position='Query'),
  nodeInstanceType?: string(name='NodeInstanceType', position='Query'),
  osType?: string(name='OsType', position='Query'),
  pageNumber: int32(name='PageNumber', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  productType: string(name='ProductType', example='CloudApp', position='Query'),
}

model ListNodeInstanceTypeResponseBody = {
  nodeInstanceTypeModels?: [ 
    {
      cpu?: string(name='Cpu', example='4'),
      gpu?: string(name='Gpu', example='2'),
      gpuMemory?: long(name='GpuMemory'),
      maxCapacity?: int32(name='MaxCapacity'),
      memory?: long(name='Memory', example='8192'),
      nodeInstanceType?: string(name='NodeInstanceType', example='appstreaming.vgpu.4c8g.2g'),
      nodeInstanceTypeFamily?: string(name='NodeInstanceTypeFamily', example='appstreaming.vgpu'),
      nodeTypeName?: string(name='NodeTypeName'),
    }
  ](name='NodeInstanceTypeModels'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='B6D88508-51D4-5105-8B3F-201EEE374B30'),
  totalCount?: int32(name='TotalCount', example='6'),
}

model ListNodeInstanceTypeResponse = {
  headers: map[string]string(name='headers'),
  body: ListNodeInstanceTypeResponseBody(name='body'),
}

async function listNodeInstanceType(request: ListNodeInstanceTypeRequest): ListNodeInstanceTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNodeInstanceType', 'POST', '/', 'json', false, 'json', request);
}

model ListOtaTaskRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='实例组id', example='aig-53fvrq1oanz6c****', position='Body'),
  otaType: string(name='OtaType', description='ota类型,取值：
Fota ： agent组件更新
ImageUpdate ： 镜像更新
AppUpdate ： 应用更新', example='Fota', position='Body'),
  pageNumber: int32(name='PageNumber', description='页码', example='1', position='Body'),
  pageSize: int32(name='PageSize', description='每页数量', example='10', minimum=1, maximum=100, position='Body'),
}

model ListOtaTaskResponseBody = {
  pageNumber?: int32(name='PageNumber', description='页码', example='1'),
  pageSize?: int32(name='PageSize', description='每页数量', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  taskList?: [ 
    {
      otaVersion?: string(name='OtaVersion', description='ota版本，格式举例：0.0.1-R-20220708.110604', example='0.0.1-R-20220708.110604'),
      taskDisplayStatus?: string(name='TaskDisplayStatus', description='任务展示状态', example='RUNNING'),
      taskId?: string(name='TaskId', description='任务id', example='ota-be7jzm29wrrz5****'),
      taskStartTime?: string(name='TaskStartTime', description='任务开始时间，ISO-8601格式', example='2022-08-04T14:36:00+08:00'),
    }
  ](name='TaskList', description='AppInstanceGroupModels'),
  totalCount?: int32(name='TotalCount', example='6'),
}

model ListOtaTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ListOtaTaskResponseBody(name='body'),
}

async function listOtaTask(request: ListOtaTaskRequest): ListOtaTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOtaTask', 'POST', '/', 'json', true, 'form', request);
}

model ListRegionsRequest {
}

model ListRegionsResponseBody = {
  regionModels?: [ 
    {
      regionId?: string(name='regionId'),
    }
  ](name='RegionModels'),
  requestId?: string(name='RequestId', description='Id of the request', example='BB825037-D0E2-574E-A45F-2886D70C7CFF'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListTenantConfigRequest {
}

model ListTenantConfigResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  tenantConfigModel?: {
    appInstanceGroupExpireRemind?: boolean(name='AppInstanceGroupExpireRemind', example='true'),
  }(name='TenantConfigModel'),
}

model ListTenantConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ListTenantConfigResponseBody(name='body'),
}

async function listTenantConfig(request: ListTenantConfigRequest): ListTenantConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTenantConfig', 'POST', '/', 'json', false, 'json', request);
}

model LogOffAllSessionsInAppInstanceGroupRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='实例组id', example='aig-9ciijz60n4xsv****', position='Body'),
  productType: string(name='ProductType', description='产品类型', example='CloudApp', position='Body'),
}

model LogOffAllSessionsInAppInstanceGroupResponseBody = {
  code?: string(name='Code', example='InvalidParameter.ProductType'),
  message?: string(name='Message', example='The parameter ProductType is invalid.'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model LogOffAllSessionsInAppInstanceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: LogOffAllSessionsInAppInstanceGroupResponseBody(name='body'),
}

async function logOffAllSessionsInAppInstanceGroup(request: LogOffAllSessionsInAppInstanceGroupRequest): LogOffAllSessionsInAppInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LogOffAllSessionsInAppInstanceGroup', 'POST', '/', 'json', true, 'form', request);
}

model ModifyAppInstanceGroupAttributeRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****', position='Query'),
  appInstanceGroupName?: string(name='AppInstanceGroupName', position='Query'),
  nodePool?: {
    nodeCapacity?: int32(name='NodeCapacity', example='2'),
    nodePoolId?: string(name='NodePoolId', example='rg-ew7va2g1wl3vm****'),
  }(name='NodePool', shrink='json', position='Query'),
  productType: string(name='ProductType', example='CloudApp', position='Query'),
  sessionTimeout?: int32(name='SessionTimeout', example='15', maximum=300, position='Query'),
}

model ModifyAppInstanceGroupAttributeResponseBody = {
  code?: string(name='Code', example='InvalidParameter.ProductType'),
  message?: string(name='Message', example='The parameter ProductType is invalid.'),
  requestId?: string(name='RequestId', description='Id of the request', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyAppInstanceGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAppInstanceGroupAttributeResponseBody(name='body'),
}

async function modifyAppInstanceGroupAttribute(request: ModifyAppInstanceGroupAttributeRequest): ModifyAppInstanceGroupAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAppInstanceGroupAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyNodePoolAttributeRequest {
  bizRegionId?: string(name='BizRegionId', example='cn-hangzhou', position='Body'),
  nodeCapacity?: int32(name='NodeCapacity', description='按资源售卖的，单个节点允许运行的应用实例数', example='2', position='Body'),
  nodePoolStrategy?: {
    maxScalingAmount?: int32(name='MaxScalingAmount', description='最大弹性数量', example='10'),
    nodeAmount?: int32(name='NodeAmount'),
    recurrenceSchedules?: [ 
      {
        recurrenceType?: string(name='RecurrenceType'),
        recurrenceValues?: [ int32 ](name='RecurrenceValues'),
        timerPeriods?: [ 
          {
            amount?: int32(name='Amount'),
            endTime?: string(name='EndTime'),
            startTime?: string(name='StartTime'),
          }
        ](name='TimerPeriods'),
      }
    ](name='RecurrenceSchedules'),
    scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes', description='资源回收时间', example='5'),
    scalingStep?: int32(name='ScalingStep', description='弹性扩容步长', example='2'),
    scalingUsageThreshold?: string(name='ScalingUsageThreshold', description='触发弹性扩容的会话百分比', example='85'),
    strategyDisableDate?: string(name='StrategyDisableDate'),
    strategyEnableDate?: string(name='StrategyEnableDate'),
    strategyType?: string(name='StrategyType', description='策略类型，默认为NODE_FIXED', example='NODE_SCALING_BY_USAGE'),
    warmUp?: boolean(name='WarmUp'),
  }(name='NodePoolStrategy', description='节点池策略', shrink='json', position='Body'),
  poolId?: string(name='PoolId', description='资源组id', example='rg-ew7va2g1wl3vm****', position='Body'),
  productType?: string(name='ProductType', description='产品类型', position='Body'),
}

model ModifyNodePoolAttributeResponseBody = {
  code?: string(name='Code', example='InvalidParameter.PoolId'),
  message?: string(name='Message', example='The parameter PoolId is invalid.'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyNodePoolAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyNodePoolAttributeResponseBody(name='body'),
}

async function modifyNodePoolAttribute(request: ModifyNodePoolAttributeRequest): ModifyNodePoolAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNodePoolAttribute', 'POST', '/', 'json', true, 'form', request);
}

model ModifyTenantConfigRequest {
  appInstanceGroupExpireRemind?: boolean(name='AppInstanceGroupExpireRemind', example='true', position='Body'),
}

model ModifyTenantConfigResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyTenantConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTenantConfigResponseBody(name='body'),
}

async function modifyTenantConfig(request: ModifyTenantConfigRequest): ModifyTenantConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTenantConfig', 'POST', '/', 'json', true, 'form', request);
}

model PageListAppInstanceGroupUserRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  productType: string(name='ProductType', example='CloudApp', position='Body'),
}

model PageListAppInstanceGroupUserResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  users?: [ string ](name='Users'),
}

model PageListAppInstanceGroupUserResponse = {
  headers: map[string]string(name='headers'),
  body: PageListAppInstanceGroupUserResponseBody(name='body'),
}

async function pageListAppInstanceGroupUser(request: PageListAppInstanceGroupUserRequest): PageListAppInstanceGroupUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PageListAppInstanceGroupUser', 'POST', '/', 'json', true, 'form', request);
}

model RenewAppInstanceGroupRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****', position='Query'),
  autoPay?: boolean(name='AutoPay', example='false', position='Query'),
  period: int32(name='Period', example='1', position='Query'),
  periodUnit: string(name='PeriodUnit', example='Day', position='Query'),
  productType: string(name='ProductType', example='CloudApp', position='Query'),
  promotionId?: string(name='PromotionId', example='17440009****', position='Query'),
}

model RenewAppInstanceGroupResponseBody = {
  code?: string(name='Code', example='InvalidParameter.ProductType'),
  message?: string(name='Message', example='The parameter ProductType is invalid.'),
  orderId?: string(name='OrderId', example='123456****'),
  requestId?: string(name='RequestId', description='Id of the request', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RenewAppInstanceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RenewAppInstanceGroupResponseBody(name='body'),
}

async function renewAppInstanceGroup(request: RenewAppInstanceGroupRequest): RenewAppInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewAppInstanceGroup', 'POST', '/', 'json', false, 'json', request);
}

model UnbindRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****', position='Body'),
  appInstanceId?: string(name='AppInstanceId', example='ai-d297eyf83g5ni****', position='Body'),
  endUserId: string(name='EndUserId', example='alice', position='Body'),
  productType: string(name='ProductType', example='CloudApp', position='Body'),
}

model UnbindResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model UnbindResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindResponseBody(name='body'),
}

async function unbind(request: UnbindRequest): UnbindResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Unbind', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAppInstanceGroupImageRequest {
  appCenterImageId: string(name='AppCenterImageId', example='img-8z4nztpaqvay4****', position='Query'),
  appInstanceGroupId: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****', position='Query'),
  bizRegionId: string(name='BizRegionId', example='cn-hangzhou', position='Query'),
  productType: string(name='ProductType', example='CloudApp', position='Query'),
}

model UpdateAppInstanceGroupImageResponseBody = {
  code?: string(name='Code', example='InvalidParameter.ProductType'),
  message?: string(name='Message', example='The parameter ProductType is invalid.'),
  requestId?: string(name='RequestId', description='Id of the request', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model UpdateAppInstanceGroupImageResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAppInstanceGroupImageResponseBody(name='body'),
}

async function updateAppInstanceGroupImage(request: UpdateAppInstanceGroupImageRequest): UpdateAppInstanceGroupImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAppInstanceGroupImage', 'POST', '/', 'json', false, 'json', request);
}

