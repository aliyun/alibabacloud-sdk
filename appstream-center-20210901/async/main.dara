/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'appstream-center';
  @version = '2021-09-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AccessPageGetAclRequest {
  accessPageId?: string(name='AccessPageId', example='a-075nu7bcqim2wvxli', position='Query'),
}

model AccessPageGetAclResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      accessMode?: string(name='AccessMode', example='FREE_ACCESS'),
      accessUrl?: string(name='AccessUrl', example='https://wuying.aliyun.com/native-solution/cloud-flow/view?id=a-075nu7bcqim2wvxli&token=8141B1A674D48ACB8E5D2D6CE53FDB2F3CF8710A5F8F78578D5254BC6F******'),
      effectTime?: int32(name='EffectTime', example='2023-02-08T03:52Z'),
      unit?: string(name='Unit', example='hour'),
      urlExpireTime?: string(name='UrlExpireTime', example='2023-12-05 14:28:20'),
    }
  ](name='Data'),
  message?: string(name='Message', example='The parameter ProductType is invalid.'),
  requestId?: string(name='RequestId', description='Id of the request', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: string(name='Success', example='true'),
}

model AccessPageGetAclResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AccessPageGetAclResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AccessPageGetAcl  AccessPageGetAclRequest
  * @return AccessPageGetAclResponse
 */
async function accessPageGetAcl(request: AccessPageGetAclRequest): AccessPageGetAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AccessPageGetAcl', 'POST', '/', 'json', false, 'json', request);
}

model AccessPageSetAclRequest {
  accessMode: string(name='AccessMode', description='This parameter is required.', example='FREE_ACCESS', position='Query'),
  accessPageId: string(name='AccessPageId', description='This parameter is required.', example='a-062wec3cwmayw****', position='Query'),
  accessPageName?: string(name='AccessPageName', example='notepad_test', position='Query'),
  effectTime: int32(name='EffectTime', description='This parameter is required.', example='7', minimum=1, maximum=2147483647, position='Query'),
  unit?: string(name='Unit', example='Day', position='Query'),
}

model AccessPageSetAclResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='InternalError'),
  requestId?: string(name='RequestId', example='E25FC620-6B6F-12D2-A992-AD8727DC****'),
  success?: string(name='Success', example='true'),
}

model AccessPageSetAclResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AccessPageSetAclResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AccessPageSetAcl  AccessPageSetAclRequest
  * @return AccessPageSetAclResponse
 */
async function accessPageSetAcl(request: AccessPageSetAclRequest): AccessPageSetAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AccessPageSetAcl', 'POST', '/', 'json', false, 'json', request);
}

model ApproveOtaTaskRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='This parameter is required.', example='aig-9ciijz60n4xsv****', position='Body'),
  bizRegionId: string(name='BizRegionId', description='This parameter is required.', example='cn-hangzhou', position='Body'),
  otaType: string(name='OtaType', description='This parameter is required.', example='Fota', position='Body'),
  startTime: string(name='StartTime', description='This parameter is required.

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-08-04T14:36:00+08:00', position='Body'),
  taskId: string(name='TaskId', description='This parameter is required.', example='ota-be7jzm29wrrz5****', position='Body'),
}

model ApproveOtaTaskResponseBody = {
  code?: string(name='Code', example='OtaTask.Running'),
  message?: string(name='Message', example='The task is running and cannot be sumitted.'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ApproveOtaTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApproveOtaTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ApproveOtaTask  ApproveOtaTaskRequest
  * @return ApproveOtaTaskResponse
 */
async function approveOtaTask(request: ApproveOtaTaskRequest): ApproveOtaTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApproveOtaTask', 'POST', '/', 'json', true, 'form', request);
}

model AskSessionPackagePriceRequest {
  chargeType?: string(name='ChargeType', position='Query'),
  maxSessions?: int32(name='MaxSessions', position='Query'),
  period?: int32(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  region: string(name='Region', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  sessionPackageType?: string(name='SessionPackageType', example='0', position='Query'),
  sessionSpec: string(name='SessionSpec', description='This parameter is required.', example='appstreaming.general.entry', position='Query'),
  sessionType: string(name='SessionType', description='This parameter is required.', example='Windows', position='Query'),
}

model AskSessionPackagePriceResponseBody = {
  data?: [ 
    {
      price?: {
        currency?: string(name='Currency', example='CNY'),
        discountPrice?: float(name='DiscountPrice', example='0.0'),
        originalPrice?: float(name='OriginalPrice', example='2000.0'),
        tradePrice?: float(name='TradePrice', example='2000.0'),
      }(name='Price'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='2C64D9E5-DFCD-10A5-A911-xxxxxxx'),
}

model AskSessionPackagePriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AskSessionPackagePriceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AskSessionPackagePrice  AskSessionPackagePriceRequest
  * @return AskSessionPackagePriceResponse
 */
async function askSessionPackagePrice(request: AskSessionPackagePriceRequest): AskSessionPackagePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AskSessionPackagePrice', 'POST', '/', 'json', false, 'json', request);
}

model AskSessionPackageRenewPriceRequest {
  period: int32(name='Period', description='This parameter is required.', example='1', position='Query'),
  periodUnit: string(name='PeriodUnit', description='This parameter is required.', example='Month', position='Query'),
  sessionPackageId: string(name='SessionPackageId', description='This parameter is required.', example='tp-***********', position='Query'),
}

model AskSessionPackageRenewPriceResponseBody = {
  data?: [ 
    {
      price?: {
        currency?: string(name='Currency', example='CNY'),
        discountPrice?: float(name='DiscountPrice', example='0.0'),
        originalPrice?: float(name='OriginalPrice', example='2000.0'),
        tradePrice?: float(name='TradePrice', example='2000.0'),
      }(name='Price'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='50158E8B-992E-1286-B174-**********'),
}

model AskSessionPackageRenewPriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AskSessionPackageRenewPriceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AskSessionPackageRenewPrice  AskSessionPackageRenewPriceRequest
  * @return AskSessionPackageRenewPriceResponse
 */
async function askSessionPackageRenewPrice(request: AskSessionPackageRenewPriceRequest): AskSessionPackageRenewPriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AskSessionPackageRenewPrice', 'POST', '/', 'json', false, 'json', request);
}

model AuthorizeInstanceGroupRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='This parameter is required.', example='aig-9ciijz60n4xsv****', position='Body'),
  authorizeUserIds?: [ string ](name='AuthorizeUserIds', position='Body'),
  productType: string(name='ProductType', description='This parameter is required.', example='CloudApp', position='Body'),
  unAuthorizeUserIds?: [ string ](name='UnAuthorizeUserIds', position='Body'),
  userMeta?: {
    adDomain?: string(name='AdDomain'),
    type?: string(name='Type'),
  }(name='UserMeta', shrink='json', position='Body'),
}

model AuthorizeInstanceGroupResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model AuthorizeInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AuthorizeInstanceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AuthorizeInstanceGroup  AuthorizeInstanceGroupRequest
  * @return AuthorizeInstanceGroupResponse
 */
async function authorizeInstanceGroup(request: AuthorizeInstanceGroupRequest): AuthorizeInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuthorizeInstanceGroup', 'POST', '/', 'json', true, 'form', request);
}

model BuySessionPackageRequest {
  autoPay?: boolean(name='AutoPay', position='Query'),
  chargeType?: string(name='ChargeType', position='Query'),
  maxSessions?: int32(name='MaxSessions', position='Query'),
  period?: int32(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  projectId?: string(name='ProjectId', example='p-xxxxxxxxxxxxx', position='Query'),
  region: string(name='Region', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  sessionPackageName?: string(name='SessionPackageName', position='Query'),
  sessionPackageType?: string(name='SessionPackageType', example='0', position='Query'),
  sessionSpec: string(name='SessionSpec', description='This parameter is required.', example='appstreaming.general.entry', position='Query'),
  sessionType: string(name='SessionType', description='This parameter is required.', example='Windows', position='Query'),
}

model BuySessionPackageResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='There is a missing parameter.'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5Fxxxxxxxx'),
  sessionPackageId?: long(name='SessionPackageId', example='tp-xxxxxxxxxx'),
  success?: string(name='Success', example='false'),
}

model BuySessionPackageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BuySessionPackageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BuySessionPackage  BuySessionPackageRequest
  * @return BuySessionPackageResponse
 */
async function buySessionPackage(request: BuySessionPackageRequest): BuySessionPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BuySessionPackage', 'POST', '/', 'json', false, 'json', request);
}

model CancelOtaTaskRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='This parameter is required.', example='aig-53fvrq1oanz6c****', position='Body'),
  taskId: string(name='TaskId', description='This parameter is required.', example='ota-be7jzm29wrrz5****', position='Body'),
}

model CancelOtaTaskResponseBody = {
  code?: string(name='Code', example='OtaTask.Running'),
  message?: string(name='Message', example='The task is running and cannot be sumitted.'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CancelOtaTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelOtaTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelOtaTask  CancelOtaTaskRequest
  * @return CancelOtaTaskResponse
 */
async function cancelOtaTask(request: CancelOtaTaskRequest): CancelOtaTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelOtaTask', 'POST', '/', 'json', true, 'form', request);
}

model CreateAccessPageRequest {
  accessPageName: string(name='AccessPageName', description='This parameter is required.', position='Query'),
  cloudEnvId?: string(name='CloudEnvId', example='c-e-06gdesdaxez****', position='Query'),
  effectTime?: int32(name='EffectTime', example='7', position='Query'),
  projectId: string(name='ProjectId', description='This parameter is required.', example='p-065zdecaer07h****', position='Query'),
  projectName?: string(name='ProjectName', position='Query'),
  unit?: string(name='Unit', example='Day', position='Query'),
}

model CreateAccessPageResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='a-06xnr5lyp77e7****'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: string(name='Success', example='true'),
}

model CreateAccessPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAccessPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAccessPage  CreateAccessPageRequest
  * @return CreateAccessPageResponse
 */
async function createAccessPage(request: CreateAccessPageRequest): CreateAccessPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccessPage', 'POST', '/', 'json', false, 'json', request);
}

model CreateAppInstanceGroupRequest {
  appCenterImageId: string(name='AppCenterImageId', description='This parameter is required.', example='img-8z4nztpaqvay4****', position='Body'),
  appInstanceGroupName?: string(name='AppInstanceGroupName', position='Body'),
  autoPay?: boolean(name='AutoPay', example='false', position='Body'),
  autoRenew?: boolean(name='AutoRenew', example='false', position='Body'),
  bizRegionId: string(name='BizRegionId', description='This parameter is required.', example='cn-hangzhou', position='Body'),
  chargeResourceMode: string(name='ChargeResourceMode', description='This parameter is required.', example='Node', position='Body'),
  chargeType: string(name='ChargeType', description='This parameter is required.', example='PrePaid', position='Body'),
  network?: {
    domainRules?: [ 
      {
        domain?: string(name='Domain'),
        policy?: string(name='Policy'),
      }
    ](name='DomainRules'),
    ipExpireMinutes?: int32(name='IpExpireMinutes', example='60', minimum=60),
    officeSiteId?: string(name='OfficeSiteId'),
    routes?: [ 
      {
        destination?: string(name='Destination', example='139.196.XX.XX/32'),
        mode?: string(name='Mode', example='Shared'),
      }
    ](name='Routes'),
    strategyType?: string(name='StrategyType', example='Shared'),
    vSwitchIds?: [ string ](name='VSwitchIds'),
  }(name='Network', shrink='json', position='Body'),
  nodePool?: {
    maxIdleAppInstanceAmount?: int32(name='MaxIdleAppInstanceAmount'),
    maxScalingAmount?: int32(name='MaxScalingAmount', example='10'),
    nodeAmount?: int32(name='NodeAmount', example='1'),
    nodeCapacity?: int32(name='NodeCapacity', example='2'),
    nodeInstanceType?: string(name='NodeInstanceType'),
    recurrenceSchedules?: [ 
      {
        recurrenceType?: string(name='RecurrenceType', example='weekly'),
        recurrenceValues?: [ int32 ](name='RecurrenceValues'),
        timerPeriods?: [ 
          {
            amount?: int32(name='Amount', example='2'),
            endTime?: string(name='EndTime', example='15:00'),
            startTime?: string(name='StartTime', example='12:00'),
          }
        ](name='TimerPeriods'),
      }
    ](name='RecurrenceSchedules'),
    scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes', example='5'),
    scalingStep?: int32(name='ScalingStep', example='2'),
    scalingUsageThreshold?: string(name='ScalingUsageThreshold', example='85'),
    strategyDisableDate?: string(name='StrategyDisableDate', example='2022-09-08'),
    strategyEnableDate?: string(name='StrategyEnableDate', example='2022-08-01'),
    strategyType?: string(name='StrategyType', example='NODE_FIXED'),
    warmUp?: boolean(name='WarmUp', example='false'),
  }(name='NodePool', shrink='json', position='Body'),
  period: int32(name='Period', description='This parameter is required.', example='1', position='Body'),
  periodUnit: string(name='PeriodUnit', description='This parameter is required.', position='Body'),
  preOpenAppId?: string(name='PreOpenAppId', example='cag-b2ron*******', position='Body'),
  productType: string(name='ProductType', description='This parameter is required.', example='CloudApp', position='Body'),
  promotionId?: string(name='PromotionId', example='17440009****', position='Body'),
  runtimePolicy?: {
    debugMode?: string(name='DebugMode'),
    sessionType?: string(name='SessionType', description='会话类型。', example='NORMAL'),
  }(name='RuntimePolicy', shrink='json', position='Body'),
  securityPolicy?: {
    resetAfterUnbind?: boolean(name='ResetAfterUnbind', example='true'),
    skipUserAuthCheck?: boolean(name='SkipUserAuthCheck', example='false'),
  }(name='SecurityPolicy', shrink='json', position='Body'),
  sessionTimeout: int32(name='SessionTimeout', description='This parameter is required.', example='15', maximum=300, position='Body'),
  storagePolicy?: {
    storageTypeList?: [ string ](name='StorageTypeList'),
  }(name='StoragePolicy', shrink='json', position='Body'),
  userDefinePolicy?: {
    customConfig?: string(name='CustomConfig'),
  }(name='UserDefinePolicy', shrink='json', position='Query'),
  userInfo?: {
    type?: string(name='Type', example='Simple'),
  }(name='UserInfo', shrink='json', position='Body'),
  users?: [ string ](name='Users', position='Body'),
  videoPolicy?: {
    frameRate?: int32(name='FrameRate'),
    sessionResolutionHeight?: int32(name='SessionResolutionHeight'),
    sessionResolutionWidth?: int32(name='SessionResolutionWidth'),
    streamingMode?: string(name='StreamingMode'),
    terminalResolutionAdaptive?: boolean(name='TerminalResolutionAdaptive'),
    webrtc?: boolean(name='Webrtc'),
  }(name='VideoPolicy', shrink='json', position='Body'),
}

model CreateAppInstanceGroupResponseBody = {
  appInstanceGroupModel?: {
    appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
    nodePoolId?: string(name='NodePoolId', example='rg-ew7va2g1wl3vm****'),
    orderId?: string(name='OrderId', example='12345****'),
  }(name='AppInstanceGroupModel'),
  requestId?: string(name='RequestId'),
}

model CreateAppInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppInstanceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAppInstanceGroup  CreateAppInstanceGroupRequest
  * @return CreateAppInstanceGroupResponse
 */
async function createAppInstanceGroup(request: CreateAppInstanceGroupRequest): CreateAppInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppInstanceGroup', 'POST', '/', 'json', true, 'form', request);
}

model CreateImageFromAppInstanceGroupRequest {
  appCenterImageName: string(name='AppCenterImageName', description='This parameter is required.', example='test_name', position='Body'),
  appInstanceGroupId: string(name='AppInstanceGroupId', description='This parameter is required.', example='aig-9ciijz60n4xsv****', position='Body'),
  productType: string(name='ProductType', description='This parameter is required.', example='CloudApp', position='Body'),
}

model CreateImageFromAppInstanceGroupResponseBody = {
  imageId?: string(name='ImageId', example='img-bp13mu****'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreateImageFromAppInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateImageFromAppInstanceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateImageFromAppInstanceGroup  CreateImageFromAppInstanceGroupRequest
  * @return CreateImageFromAppInstanceGroupResponse
 */
async function createImageFromAppInstanceGroup(request: CreateImageFromAppInstanceGroupRequest): CreateImageFromAppInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateImageFromAppInstanceGroup', 'POST', '/', 'json', true, 'form', request);
}

model CreateProjectRequest {
  clipboard?: int32(name='Clipboard', example='0', position='Query'),
  cloudEnvId?: string(name='CloudEnvId', example='c-xxxxxxx', position='Query'),
  contentId?: string(name='ContentId', example='c-06vcpamarryyq****', position='Query'),
  description?: string(name='Description', example='xxx', position='Query'),
  fileTransfer?: int32(name='FileTransfer', example='0', position='Query'),
  frameRate?: int32(name='FrameRate', example='30', position='Query'),
  keepAliveDuration?: int32(name='KeepAliveDuration', example='15', position='Query'),
  projectName?: string(name='ProjectName', example='notepad++xxxxx', position='Query'),
  sessionResolutionHeight?: int32(name='SessionResolutionHeight', example='4096', position='Query'),
  sessionResolutionWidth?: int32(name='SessionResolutionWidth', example='4096', position='Query'),
  sessionSpec?: string(name='SessionSpec', position='Query'),
  streamingMode?: string(name='StreamingMode', example='mix', position='Query'),
  terminalResolutionAdaptation?: boolean(name='TerminalResolutionAdaptation', example='true', position='Query'),
}

model CreateProjectResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='p-xxxxxxxxxxx'),
  message?: string(name='Message', example='There is a missing parameter.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='50158E8B-992E-1286-B174-XXXXXXXXXXXX'),
  success?: string(name='Success', example='true'),
}

model CreateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateProject  CreateProjectRequest
  * @return CreateProjectResponse
 */
async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProject', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAccessPageRequest {
  accessPageId?: string(name='AccessPageId', example='a-075nu7bcqim2wvxli', position='Query'),
}

model DeleteAccessPageResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: string(name='Success', example='true'),
}

model DeleteAccessPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAccessPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAccessPage  DeleteAccessPageRequest
  * @return DeleteAccessPageResponse
 */
async function deleteAccessPage(request: DeleteAccessPageRequest): DeleteAccessPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccessPage', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAppInstanceGroupRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='This parameter is required.', example='aig-9ciijz60n4xsv****', position='Body'),
  productType: string(name='ProductType', description='This parameter is required.', example='CloudApp', position='Body'),
}

model DeleteAppInstanceGroupResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteAppInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppInstanceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAppInstanceGroup  DeleteAppInstanceGroupRequest
  * @return DeleteAppInstanceGroupResponse
 */
async function deleteAppInstanceGroup(request: DeleteAppInstanceGroupRequest): DeleteAppInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAppInstanceGroup', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAppInstancesRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='This parameter is required.', example='aig-9ciijz60n4xsv****', position='Body'),
  appInstanceIds: [ string ](name='AppInstanceIds', description='This parameter is required.', position='Body'),
  productType: string(name='ProductType', description='This parameter is required.', example='CloudApp', position='Body'),
}

model DeleteAppInstancesResponseBody = {
  deleteAppInstanceModels?: [ 
    {
      appInstanceId?: string(name='AppInstanceId', example='ai-gbuea*****'),
      code?: string(name='Code', example='InvalidParameter.ProductType'),
      message?: string(name='Message', example='The parameter ProductType is invalid.'),
      success?: boolean(name='Success', example='true'),
    }
  ](name='DeleteAppInstanceModels'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteAppInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAppInstances  DeleteAppInstancesRequest
  * @return DeleteAppInstancesResponse
 */
async function deleteAppInstances(request: DeleteAppInstancesRequest): DeleteAppInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAppInstances', 'POST', '/', 'json', true, 'form', request);
}

model DeleteProjectRequest {
  projectId?: string(name='ProjectId', example='p-065z4tu9ak07h****', position='Query'),
}

model DeleteProjectResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='None'),
  message?: string(name='Message', example='The parameter PoolId is invalid.'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: string(name='Success', example='true'),
}

model DeleteProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteProject  DeleteProjectRequest
  * @return DeleteProjectResponse
 */
async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProject', 'POST', '/', 'json', false, 'json', request);
}

model GetAccessPageSessionRequest {
  accessPageId: string(name='AccessPageId', description='This parameter is required.', example='a-062wec3cwmayw****', position='Query'),
  accessPageToken: string(name='AccessPageToken', description='This parameter is required.', example='8141B1A674D48ACB8E5D2D6CE53FDB2F3CF8710A5F8F78578D5254BC6F******', position='Query'),
  externalUserId?: string(name='ExternalUserId', example='Banca******', position='Query'),
}

model GetAccessPageSessionResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    connectTicket?: string(name='ConnectTicket', example='DQpbRGVza3RvcF0NCkZvcmNlVGxzVHlwZT0xDQpHV1Rva2VuUGFydDE9MDBzQU5DTGVsZ0RqMnAyMGpZdUNkRDMrNTlLekpzUTRXNElPWVdjWGIwZ2QrUkNyais0ZGM3WUJGM1NBdVFJWWl2ejhaWDlvakh1cDJ4c0Vpc3lrQ1I4RVEzeDhIYXdCb2pRRDJReklaQTZIbU52VjdrRlNlWkxQTXV3Y0hNTEZTTkxKaDNOY1BtU0tVYTNqWVVUMFUyKzNqWDBRMXdLM29ZQnJaOFVoL2RWY0xpem5tWEhHTmE0THVGRCtrajloSWlFT0w3b2w4OHY1cjBPelpHZnh4aXlVbk1yQURnRHhoK1F6K3UvdXYxaFYyQ3UwVlduTHJ3cDNRM3hYWWtORW81N00xYWZ4cTJBdWplVmx3aGVxOHd4dDl2Y3NGVGMxNFpPL2hudWdoeGJkaz0NCkdXVG9rZW5QYXJ0Mj0NCkFzcEF1dGhUb2tlbj0wME5LTnlLZXE3UGpzNzNzeURrdEs2NUlaenpYb05WNWxnY3BjVTJMd2NKUEoyMk53WmlrSGNaaDdNVGk2azlLazNyeHFCd2FHZTlmc2NUbFljUDJ0MEVldXRha2paUklMM0x3a0RsT1BZZTZxYmtsay9STHFrajg4dWg0ZFZNTHE2QkF0WVRSeW9ZTC9WUHhaVWxyZEZOQT09DQpBZXNLZXlWZXJzaW9uPTE3MDEyMzk1ODc4NzcNCkdhdGV3YXlEb21haW5BZGRyZXNzPWd3LWFwcC1jbi1oYW5nemhvdS1pLWFwcC10ZXN0MC13aW4ud3V5aW5nLmFsaXl1bmNzLmNvbQ0KR2F0ZXdheUFkZHJlc3M9NDcuOTkuMjIzLjE0OQ0KR2F0ZXdheVBvcnQ9NTkxMg0KR2F0ZXdheVdzc1BvcnQ9ODAwOA0KU3RyZWFtVHlwZT0wDQpSdGNHd1Rva2VuPVAwMFJkc013dVdQVkt4MGtRYUNkSlY3MUc2OC9iaWFhSEJwVn******'),
    flowId?: string(name='FlowId', description='flow ID', example='e4fa0b4c18c5437a8b1746e7c228172e'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: string(name='Success', example='true'),
}

model GetAccessPageSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAccessPageSessionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAccessPageSession  GetAccessPageSessionRequest
  * @return GetAccessPageSessionResponse
 */
async function getAccessPageSession(request: GetAccessPageSessionRequest): GetAccessPageSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccessPageSession', 'POST', '/', 'json', false, 'json', request);
}

model GetAppInstanceGroupRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='This parameter is required.', example='aig-9ciijz60n4xsv****', position='Query'),
  productType: string(name='ProductType', description='This parameter is required.', example='CloudApp', position='Query'),
}

model GetAppInstanceGroupResponseBody = {
  appInstanceGroupModels?: {
    amount?: int32(name='Amount'),
    appCenterImageId?: string(name='AppCenterImageId', example='img-8z4nztpaqvay4****'),
    appCenterImageName?: string(name='AppCenterImageName', example='OfficeApps'),
    appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
    appInstanceGroupName?: string(name='AppInstanceGroupName'),
    appInstanceType?: string(name='AppInstanceType', example='__dynamic__'),
    appInstanceTypeName?: string(name='AppInstanceTypeName', example='test001'),
    appPolicyId?: string(name='AppPolicyId', example='pg-g3k5wa2ms2****'),
    apps?: [ 
      {
        appIcon?: string(name='AppIcon'),
        appId?: string(name='AppId', example='ca-i87mycyn419nu****'),
        appName?: string(name='AppName'),
        appVersion?: string(name='AppVersion'),
        appVersionName?: string(name='AppVersionName'),
      }
    ](name='Apps'),
    chargeResourceMode?: string(name='ChargeResourceMode', example='Node'),
    chargeType?: string(name='ChargeType', example='PrePaid'),
    expiredTime?: string(name='ExpiredTime', example='2022-04-27T16:00:00.000+00:00'),
    gmtCreate?: string(name='GmtCreate', example='2022-04-26T15:06:16.000+00:00'),
    maxAmount?: int32(name='MaxAmount', example='10'),
    minAmount?: int32(name='MinAmount', example='1'),
    nodePool?: [ 
      {
        amount?: int32(name='Amount', example='2'),
        maxIdleAppInstanceAmount?: int32(name='MaxIdleAppInstanceAmount'),
        maxScalingAmount?: int32(name='MaxScalingAmount', example='8'),
        nodeAmount?: int32(name='NodeAmount', example='1'),
        nodeCapacity?: int32(name='NodeCapacity', example='2'),
        nodeInstanceType?: string(name='NodeInstanceType', example='appstreaming.vgpu.4c8g.2g'),
        nodePoolId?: string(name='NodePoolId', example='rg-g6922kced36hx****'),
        nodeTypeName?: string(name='NodeTypeName'),
        nodeUsed?: int32(name='NodeUsed', example='1'),
        recurrenceSchedules?: [ 
          {
            recurrenceType?: string(name='RecurrenceType', example='Weekly'),
            recurrenceValues?: [ int32 ](name='RecurrenceValues'),
            timerPeriods?: [ 
              {
                amount?: int32(name='Amount', example='5'),
                endTime?: string(name='EndTime', example='11:00'),
                startTime?: string(name='StartTime', example='09:30'),
              }
            ](name='TimerPeriods'),
          }
        ](name='RecurrenceSchedules'),
        scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes', example='5'),
        scalingNodeAmount?: int32(name='ScalingNodeAmount', example='8'),
        scalingNodeUsed?: int32(name='ScalingNodeUsed', example='4'),
        scalingStep?: int32(name='ScalingStep', example='2'),
        scalingUsageThreshold?: string(name='ScalingUsageThreshold', example='85'),
        strategyDisableDate?: string(name='StrategyDisableDate', example='2022-09-08'),
        strategyEnableDate?: string(name='StrategyEnableDate', example='2022-08-01'),
        strategyType?: string(name='StrategyType', example='NODE_FIXED'),
        warmUp?: boolean(name='WarmUp', example='false'),
      }
    ](name='NodePool'),
    officeSiteId?: string(name='OfficeSiteId'),
    osType?: string(name='OsType', example='Windows'),
    otaInfo?: {
      newOtaVersion?: string(name='NewOtaVersion', example='0.0.1-D-20220630.11****'),
      otaVersion?: string(name='OtaVersion', example='0.0.1-D-20220615.11****'),
      taskId?: string(name='TaskId', example='ota-e49929gv8acz5****'),
    }(name='OtaInfo'),
    productType?: string(name='ProductType', example='CloudApp'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    reserveAmountRatio?: string(name='ReserveAmountRatio', example='20'),
    reserveMaxAmount?: int32(name='ReserveMaxAmount', example='5'),
    reserveMinAmount?: int32(name='ReserveMinAmount', example='1'),
    resourceStatus?: string(name='ResourceStatus', example='AVAILABLE'),
    scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes', example='5'),
    scalingStep?: int32(name='ScalingStep', example='10'),
    scalingUsageThreshold?: string(name='ScalingUsageThreshold', example='85'),
    sessionTimeout?: string(name='SessionTimeout', example='15'),
    skipUserAuthCheck?: boolean(name='SkipUserAuthCheck', example='false'),
    specId?: string(name='SpecId', example='spec-8o18t8uc31qib0****'),
    status?: string(name='Status', example='PUBLISHED'),
  }(name='AppInstanceGroupModels', description='AppInstanceGroupModels'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model GetAppInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAppInstanceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAppInstanceGroup  GetAppInstanceGroupRequest
  * @return GetAppInstanceGroupResponse
 */
async function getAppInstanceGroup(request: GetAppInstanceGroupRequest): GetAppInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAppInstanceGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetConnectionTicketRequest {
  appId?: string(name='AppId', example='ca-e4s0puhmwi7v****', position='Body'),
  appInstanceGroupIdList?: [ string ](name='AppInstanceGroupIdList', position='Body'),
  appInstanceId?: string(name='AppInstanceId', example='ai-1rznfnrvsa99d****', position='Body'),
  appInstancePersistentId?: string(name='AppInstancePersistentId', position='Body'),
  appStartParam?: string(name='AppStartParam', example='/q /n', position='Body'),
  appVersion?: string(name='AppVersion', example='1.0.0', position='Body'),
  bizRegionId?: string(name='BizRegionId', example='cn-hangzhou', position='Body'),
  endUserId: string(name='EndUserId', description='This parameter is required.', example='alice', position='Body'),
  productType: string(name='ProductType', description='This parameter is required.', example='CloudApp', position='Body'),
  taskId?: string(name='TaskId', example='28778acb-a469-4bc0-8e0f****', position='Body'),
}

model GetConnectionTicketResponseBody = {
  appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-53fvrq1oan****'),
  appInstanceId?: string(name='AppInstanceId', example='ai-7ybdeiyoeh5e****'),
  appInstancePersistentId?: string(name='AppInstancePersistentId'),
  bizRegionId?: string(name='BizRegionId', example='cn-hangzhou'),
  osType?: string(name='OsType', example='Windows'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  taskId?: string(name='TaskId', example='f3d1b31c-605e-4d04-a896****'),
  taskStatus?: string(name='TaskStatus', example='Running'),
  tenantId?: long(name='TenantId'),
  ticket?: string(name='Ticket', example='DQpbRGVza3RvcF0NCkZvcmNlVGxzVHlwZT0xDQpHV1Rva2VuUGFydDE9MDAva09ROW1FUTU3dU****'),
}

model GetConnectionTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConnectionTicketResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetConnectionTicket  GetConnectionTicketRequest
  * @return GetConnectionTicketResponse
 */
async function getConnectionTicket(request: GetConnectionTicketRequest): GetConnectionTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConnectionTicket', 'POST', '/', 'json', true, 'form', request);
}

model GetDebugAppInstanceRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='This parameter is required.', example='aig-9ciijz60n4xsv****', position='Body'),
  productType: string(name='ProductType', description='This parameter is required.', example='CloudApp', position='Body'),
}

model GetDebugAppInstanceResponseBody = {
  appId?: string(name='AppId'),
  appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
  appInstanceId?: string(name='AppInstanceId', example='ai-7ybdeiyoeh5e****'),
  appVersion?: string(name='AppVersion', example='1.1'),
  authCode?: string(name='AuthCode', example='e4e169bea1cc48e8afac53**********'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  userId?: string(name='UserId'),
}

model GetDebugAppInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDebugAppInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDebugAppInstance  GetDebugAppInstanceRequest
  * @return GetDebugAppInstanceResponse
 */
async function getDebugAppInstance(request: GetDebugAppInstanceRequest): GetDebugAppInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDebugAppInstance', 'POST', '/', 'json', true, 'form', request);
}

model GetOtaTaskByTaskIdRequest {
  taskId: string(name='TaskId', description='This parameter is required.', example='ota-be7jzm29wrrz5****', position='Body'),
}

model GetOtaTaskByTaskIdResponseBody = {
  code?: string(name='Code', example='OtaTask.Running'),
  message?: string(name='Message', example='The task is running and cannot be sumitted.'),
  otaVersion?: string(name='OtaVersion', example='0.0.1-R-20220708.110604'),
  releaseNote?: string(name='ReleaseNote'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  taskStartTime?: string(name='TaskStartTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-08-04T14:36:00+08:00'),
}

model GetOtaTaskByTaskIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOtaTaskByTaskIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOtaTaskByTaskId  GetOtaTaskByTaskIdRequest
  * @return GetOtaTaskByTaskIdResponse
 */
async function getOtaTaskByTaskId(request: GetOtaTaskByTaskIdRequest): GetOtaTaskByTaskIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOtaTaskByTaskId', 'POST', '/', 'json', true, 'form', request);
}

model GetProjectPoliciesRequest {
  projectId?: string(name='ProjectId', example='p-xxxxxxxxxxxxxxx', position='Query'),
}

model GetProjectPoliciesResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    clipboard?: int32(name='Clipboard', example='0'),
    fileTransfer?: int32(name='FileTransfer', example='0'),
    frameRate?: string(name='FrameRate', example='30'),
    keepAliveDuration?: int32(name='KeepAliveDuration', example='15'),
    maxHours?: int32(name='MaxHours', example='1000'),
    maxSessions?: int32(name='MaxSessions', example='60'),
    projectId?: string(name='ProjectId', example='p-xxxxxxxxxxx'),
    sessionResolutionHeight?: int32(name='SessionResolutionHeight', example='1080'),
    sessionResolutionWidth?: int32(name='SessionResolutionWidth', example='1920'),
    sessionSpec?: string(name='SessionSpec'),
    streamingMode?: string(name='StreamingMode', example='mix'),
    terminalResolutionAdaptation?: boolean(name='TerminalResolutionAdaptation', example='true'),
  }(name='Data'),
  message?: string(name='Message', example='The parameter ProductType is invalid.'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: string(name='Success', example='true'),
}

model GetProjectPoliciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectPoliciesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetProjectPolicies  GetProjectPoliciesRequest
  * @return GetProjectPoliciesResponse
 */
async function getProjectPolicies(request: GetProjectPoliciesRequest): GetProjectPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProjectPolicies', 'POST', '/', 'json', false, 'json', request);
}

model GetResourcePriceRequest {
  amount: long(name='Amount', description='This parameter is required.', example='1', position='Query'),
  appInstanceType?: string(name='AppInstanceType', example='appstreaming.general', position='Query'),
  bizRegionId: string(name='BizRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  chargeType: string(name='ChargeType', description='This parameter is required.', example='PrePaid', position='Query'),
  nodeInstanceType?: string(name='NodeInstanceType', example='appstreaming.vgpu.4c8g.2g', position='Query'),
  period: long(name='Period', description='This parameter is required.', example='1', position='Query'),
  periodUnit: string(name='PeriodUnit', description='This parameter is required.', position='Query'),
  productType: string(name='ProductType', description='This parameter is required.', example='CloudApp', position='Query'),
}

model GetResourcePriceResponseBody = {
  code?: string(name='Code', example='InvalidParameter.ProductType'),
  message?: string(name='Message', example='The parameter ProductType is invalid.'),
  priceList?: [ 
    {
      price?: {
        currency?: string(name='Currency', example='CNY'),
        discountPrice?: string(name='DiscountPrice', example='999.0'),
        originalPrice?: string(name='OriginalPrice', example='6700'),
        promotions?: [ 
          {
            optionCode?: string(name='OptionCode', example='coupon****'),
            promotionDesc?: string(name='PromotionDesc'),
            promotionId?: string(name='PromotionId', example='1847709****'),
            promotionName?: string(name='PromotionName'),
            selected?: boolean(name='Selected', example='true'),
          }
        ](name='Promotions'),
        tradePrice?: string(name='TradePrice', example='5278.0'),
      }(name='Price'),
      priceType?: string(name='PriceType', example='Standby'),
      rules?: [ 
        {
          description?: string(name='Description'),
          ruleId?: long(name='RuleId', example='260904273633****'),
        }
      ](name='Rules'),
    }
  ](name='PriceList'),
  priceModel?: {
    price?: {
      currency?: string(name='Currency', example='CNY'),
      discountPrice?: string(name='DiscountPrice', example='1.00'),
      originalPrice?: string(name='OriginalPrice', example='11.00'),
      promotions?: [ 
        {
          optionCode?: string(name='OptionCode', example='coupon****'),
          promotionDesc?: string(name='PromotionDesc'),
          promotionId?: string(name='PromotionId', example='17440009****'),
          promotionName?: string(name='PromotionName'),
          selected?: boolean(name='Selected', example='true'),
        }
      ](name='Promotions'),
      tradePrice?: string(name='TradePrice', example='10.00'),
    }(name='Price'),
    rules?: [ 
      {
        description?: string(name='Description'),
        ruleId?: long(name='RuleId', example='102002100393****'),
      }
    ](name='Rules'),
  }(name='PriceModel'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model GetResourcePriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourcePriceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetResourcePrice  GetResourcePriceRequest
  * @return GetResourcePriceResponse
 */
async function getResourcePrice(request: GetResourcePriceRequest): GetResourcePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourcePrice', 'POST', '/', 'json', false, 'json', request);
}

model GetResourceRenewPriceRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='This parameter is required.', example='aig-9ciijz60n4xsv****', position='Query'),
  period: long(name='Period', description='This parameter is required.', example='1', position='Query'),
  periodUnit: string(name='PeriodUnit', description='This parameter is required.', example='Week', position='Query'),
  productType: string(name='ProductType', description='This parameter is required.', example='CloudApp', position='Query'),
}

model GetResourceRenewPriceResponseBody = {
  data?: {
    price?: {
      currency?: string(name='Currency', example='CNY'),
      discountPrice?: string(name='DiscountPrice', example='1'),
      originalPrice?: string(name='OriginalPrice', example='11'),
      promotions?: [ 
        {
          optionCode?: string(name='OptionCode', example='coupon****'),
          promotionDesc?: string(name='PromotionDesc'),
          promotionId?: string(name='PromotionId', example='139965*****'),
          promotionName?: string(name='PromotionName'),
          selected?: boolean(name='Selected', example='true'),
        }
      ](name='Promotions'),
      tradePrice?: string(name='TradePrice', example='10'),
    }(name='Price'),
    rules?: [ 
      {
        description?: string(name='Description'),
        ruleId?: long(name='RuleId', example='20002****'),
      }
    ](name='Rules'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model GetResourceRenewPriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceRenewPriceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetResourceRenewPrice  GetResourceRenewPriceRequest
  * @return GetResourceRenewPriceResponse
 */
async function getResourceRenewPrice(request: GetResourceRenewPriceRequest): GetResourceRenewPriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourceRenewPrice', 'POST', '/', 'json', false, 'json', request);
}

model ListAccessPagesRequest {
  accessPageId?: string(name='AccessPageId', example='a-062wec3cwmayw****', position='Query'),
  accessPageName?: string(name='AccessPageName', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='100', position='Query'),
  projectId?: string(name='ProjectId', example='p-065zdecaer07h****', position='Query'),
  sortType?: string(name='SortType', example='ASC', position='Query'),
}

model ListAccessPagesResponseBody = {
  code?: string(name='Code', example='200'),
  count?: string(name='Count', example='22'),
  data?: [ 
    {
      accessMode?: string(name='AccessMode'),
      accessPageId?: string(name='AccessPageId', example='a-062wec3cwmayw****'),
      accessPageName?: string(name='AccessPageName', example='notepad_test'),
      accessPageState?: string(name='AccessPageState', example='1'),
      accessUrl?: string(name='AccessUrl', example='id=a-062wec3cwmayw****&token=9E9A62937B0E41F4AEFE5EC9B238156CCDFB682954003AEE940A05FB2568****'),
      contentId?: string(name='ContentId', example='c-05to6wm3w5d53****'),
      contentName?: string(name='ContentName'),
      effectTime?: int32(name='EffectTime', example='168'),
      gmtCreate?: string(name='GmtCreate', example='2023-11-16T08:48:15.000+00:00'),
      projectId?: string(name='ProjectId', example='p-062wec3cwmayu****'),
      projectName?: string(name='ProjectName', example='notepad_demo'),
      unit?: string(name='Unit', example='Hour'),
      urlExpireTime?: string(name='UrlExpireTime', example='2023-11-23T08:48:15.000+00:00'),
    }
  ](name='Data'),
  message?: string(name='Message', example='InternalError'),
  pageNumber?: string(name='PageNumber', example='1'),
  pageSize?: string(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='AF8361BD-5ECB-139A-B019-2E0350CC****'),
  success?: string(name='Success', example='true'),
}

model ListAccessPagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAccessPagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAccessPages  ListAccessPagesRequest
  * @return ListAccessPagesResponse
 */
async function listAccessPages(request: ListAccessPagesRequest): ListAccessPagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccessPages', 'POST', '/', 'json', false, 'json', request);
}

model ListAppInstanceGroupRequest {
  appCenterImageId?: string(name='AppCenterImageId', example='img-8z4nztpaqvay4****', position='Query'),
  appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****', position='Query'),
  appInstanceGroupName?: string(name='AppInstanceGroupName', position='Query'),
  bizRegionId?: string(name='BizRegionId', position='Query'),
  nodeInstanceType?: string(name='NodeInstanceType', example='appstreaming.vgpu.4c8g.2g', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  productType: string(name='ProductType', description='This parameter is required.', example='CloudApp', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', deprecated='true', position='Query'),
  status?: [ string ](name='Status', position='Body'),
}

model ListAppInstanceGroupResponseBody = {
  appInstanceGroupModels?: [ 
    {
      amount?: int32(name='Amount', example='1'),
      appCenterImageId?: string(name='AppCenterImageId', example='img-8z4nztpaqvay4****'),
      appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
      appInstanceGroupName?: string(name='AppInstanceGroupName'),
      appInstanceType?: string(name='AppInstanceType', example='__dynamic__'),
      appPolicyId?: string(name='AppPolicyId', description='策略ID。', example='pg-g3k5wa2ms2****'),
      apps?: [ 
        {
          appIcon?: string(name='AppIcon', description='应用图标。', example='https://app-center-icon-****.png'),
          appId?: string(name='AppId', example='ca-i87mycyn419nu****'),
          appName?: string(name='AppName'),
          appVersion?: string(name='AppVersion', description='应用版本。', example='1.0.0'),
          appVersionName?: string(name='AppVersionName', description='应用版本名称。', example='初始版本'),
        }
      ](name='Apps'),
      chargeResourceMode?: string(name='ChargeResourceMode', description='售卖模式。', example='Node'),
      chargeType?: string(name='ChargeType', example='PrePaid'),
      expiredTime?: string(name='ExpiredTime', example='2022-04-27T16:00:00.000+00:00'),
      gmtCreate?: string(name='GmtCreate', example='2022-04-26T15:06:16.000+00:00'),
      maxAmount?: int32(name='MaxAmount', example='10'),
      minAmount?: int32(name='MinAmount', example='1'),
      nodePool?: [ 
        {
          amount?: int32(name='Amount', example='2'),
          maxIdleAppInstanceAmount?: int32(name='MaxIdleAppInstanceAmount'),
          maxScalingAmount?: int32(name='MaxScalingAmount', example='8'),
          nodeAmount?: int32(name='NodeAmount', example='1'),
          nodeCapacity?: int32(name='NodeCapacity', example='2'),
          nodeInstanceType?: string(name='NodeInstanceType', example='appstreaming.vgpu.4c8g.2g'),
          nodePoolId?: string(name='NodePoolId', example='rg-g6922kced36hx****'),
          nodeTypeName?: string(name='NodeTypeName'),
          nodeUsed?: int32(name='NodeUsed', example='1'),
          recurrenceSchedules?: [ 
            {
              recurrenceType?: string(name='RecurrenceType', example='Weekly'),
              recurrenceValues?: [ int32 ](name='RecurrenceValues'),
              timerPeriods?: [ 
                {
                  amount?: int32(name='Amount', example='5'),
                  endTime?: string(name='EndTime', example='11:00'),
                  startTime?: string(name='StartTime', example='09:30'),
                }
              ](name='TimerPeriods'),
            }
          ](name='RecurrenceSchedules'),
          scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes', example='5'),
          scalingNodeAmount?: int32(name='ScalingNodeAmount', example='8'),
          scalingNodeUsed?: int32(name='ScalingNodeUsed', example='4'),
          scalingStep?: int32(name='ScalingStep', example='2'),
          scalingUsageThreshold?: string(name='ScalingUsageThreshold', example='85'),
          strategyDisableDate?: string(name='StrategyDisableDate', example='2022-09-08'),
          strategyEnableDate?: string(name='StrategyEnableDate', example='2022-08-01'),
          strategyType?: string(name='StrategyType', example='NODE_FIXED'),
          warmUp?: boolean(name='WarmUp', example='false'),
        }
      ](name='NodePool'),
      officeSiteId?: string(name='OfficeSiteId'),
      osType?: string(name='OsType', example='Windows'),
      otaInfo?: {
        newOtaVersion?: string(name='NewOtaVersion', example='0.0.1-D-20220630.11****'),
        otaVersion?: string(name='OtaVersion', example='0.0.1-D-20220615.11****'),
        taskId?: string(name='TaskId', example='ota-e49929gv8acz5****'),
      }(name='OtaInfo'),
      productType?: string(name='ProductType', example='CloudApp'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      reserveAmountRatio?: string(name='ReserveAmountRatio', example='20'),
      reserveMaxAmount?: int32(name='ReserveMaxAmount', example='5'),
      reserveMinAmount?: int32(name='ReserveMinAmount', example='1'),
      resourceStatus?: string(name='ResourceStatus', example='AVAILABLE'),
      scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes', example='5'),
      scalingStep?: int32(name='ScalingStep', example='10'),
      scalingUsageThreshold?: string(name='ScalingUsageThreshold', example='85'),
      sessionTimeout?: string(name='SessionTimeout', example='15'),
      skipUserAuthCheck?: boolean(name='SkipUserAuthCheck', example='false'),
      specId?: string(name='SpecId', example='spec-8o18t8uc31qib0****'),
      status?: string(name='Status', example='PUBLISHED'),
    }
  ](name='AppInstanceGroupModels'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  totalCount?: int32(name='TotalCount', example='15'),
}

model ListAppInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAppInstanceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAppInstanceGroup  ListAppInstanceGroupRequest
  * @return ListAppInstanceGroupResponse
 */
async function listAppInstanceGroup(request: ListAppInstanceGroupRequest): ListAppInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAppInstanceGroup', 'POST', '/', 'json', true, 'form', request);
}

model ListAppInstancesRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='This parameter is required.', example='aig-4p5f8tj16yb8b****', position='Query'),
  appInstanceId?: string(name='AppInstanceId', example='ai-azn3kmwruh1vl****', position='Query'),
  appInstanceIdList?: [ string ](name='AppInstanceIdList', position='Body'),
  includeDeleted?: boolean(name='IncludeDeleted', example='true', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=100, position='Query'),
  status?: [ string ](name='Status', position='Body'),
}

model ListAppInstancesResponseBody = {
  appInstanceModels?: [ 
    {
      appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-dk8p95irqfst9****'),
      appInstanceId?: string(name='AppInstanceId', example='ai-8dl7dzchklmka****'),
      bindInfo?: {
        endUserId?: string(name='EndUserId', example='app.test'),
        usageDuration?: long(name='UsageDuration', example='2000'),
      }(name='BindInfo'),
      gmtCreate?: string(name='GmtCreate', example='2023-03-07T20:29:19.000+08:00'),
      gmtModified?: string(name='GmtModified', example='2023-03-07T20:29:19.000+08:00'),
      mainEthPublicIp?: string(name='MainEthPublicIp', example='10.13.13.211'),
      sessionStatus?: string(name='SessionStatus', example='connect'),
      status?: string(name='Status', example='BOUND'),
    }
  ](name='AppInstanceModels'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  totalCount?: int32(name='TotalCount', example='18'),
}

model ListAppInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAppInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAppInstances  ListAppInstancesRequest
  * @return ListAppInstancesResponse
 */
async function listAppInstances(request: ListAppInstancesRequest): ListAppInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAppInstances', 'POST', '/', 'json', true, 'form', request);
}

model ListNodeInstanceTypeRequest {
  bizRegionId?: string(name='BizRegionId', description='资源所属的地域ID。关于支持的地域详情，请参见[使用限制](https://help.aliyun.com/document_detail/426036.html)。', example='cn-hangzhou', position='Query'),
  cpu?: float(name='Cpu', position='Query'),
  gpu?: float(name='Gpu', position='Query'),
  gpuMemory?: int32(name='GpuMemory', position='Query'),
  language?: string(name='Language', description='语言类型。', example='zh-CN', position='Query'),
  memory?: int32(name='Memory', position='Query'),
  nodeInstanceType?: string(name='NodeInstanceType', example='appstreaming.vgpu.4c8g.2g', position='Query'),
  nodeInstanceTypeFamily?: string(name='NodeInstanceTypeFamily', position='Query'),
  orderBy?: string(name='OrderBy', position='Query'),
  osType?: string(name='OsType', description='支持的操作系统类型。', example='Windows', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', minimum=1, maximum=100, position='Query'),
  productType: string(name='ProductType', description='This parameter is required.', example='CloudApp', position='Query'),
  sortType?: string(name='SortType', position='Query'),
}

model ListNodeInstanceTypeResponseBody = {
  nodeInstanceTypeModels?: [ 
    {
      cpu?: string(name='Cpu', example='4'),
      gpu?: string(name='Gpu', example='2'),
      gpuMemory?: long(name='GpuMemory', description='显卡内存大小，单位为MB。', example='8192'),
      maxCapacity?: int32(name='MaxCapacity', description='最大并发会话数，即单个资源可同时连接的会话数。如果同时连接的会话数过多，可能导致应用的使用体验下降。取值范围因资源规格不同而不同。各资源规格对应的取值范围分别是：

- appstreaming.general.4c8g：1\\~2；
- appstreaming.general.8c16g：1\\~4；
- appstreaming.vgpu.8c16g.4g：1\\~4；
- appstreaming.vgpu.8c31g.16g：1\\~4；
- appstreaming.vgpu.14c93g.12g：1\\~6；', example='4'),
      memory?: long(name='Memory', example='8192'),
      nodeInstanceType?: string(name='NodeInstanceType', example='appstreaming.vgpu.4c8g.2g'),
      nodeInstanceTypeFamily?: string(name='NodeInstanceTypeFamily', example='appstreaming.vgpu'),
      nodeTypeName?: string(name='NodeTypeName', description='资源规格名称。', example='无影-通用型_4核8G'),
    }
  ](name='NodeInstanceTypeModels'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount', example='6'),
}

model ListNodeInstanceTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodeInstanceTypeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNodeInstanceType  ListNodeInstanceTypeRequest
  * @return ListNodeInstanceTypeResponse
 */
async function listNodeInstanceType(request: ListNodeInstanceTypeRequest): ListNodeInstanceTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNodeInstanceType', 'POST', '/', 'json', false, 'json', request);
}

model ListOtaTaskRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='This parameter is required.', example='aig-53fvrq1oanz6c****', position='Body'),
  otaType: string(name='OtaType', description='This parameter is required.', example='Fota', position='Body'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Body'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', minimum=1, maximum=100, position='Body'),
}

model ListOtaTaskResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  taskList?: [ 
    {
      otaVersion?: string(name='OtaVersion', example='0.0.1-R-20220708.110604'),
      taskDisplayStatus?: string(name='TaskDisplayStatus', example='RUNNING'),
      taskId?: string(name='TaskId', example='ota-be7jzm29wrrz5****'),
      taskStartTime?: string(name='TaskStartTime', description='Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-08-04T14:36:00+08:00'),
    }
  ](name='TaskList'),
  totalCount?: int32(name='TotalCount', example='6'),
}

model ListOtaTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOtaTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOtaTask  ListOtaTaskRequest
  * @return ListOtaTaskResponse
 */
async function listOtaTask(request: ListOtaTaskRequest): ListOtaTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOtaTask', 'POST', '/', 'json', true, 'form', request);
}

model ListProjectsRequest {
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  projectId?: string(name='ProjectId', example='p-065z4tu9ak07h****', position='Query'),
  projectName?: string(name='ProjectName', example='notepad++***', position='Query'),
  sortType?: string(name='SortType', example='ASC', position='Query'),
  stateList?: [ int32 ](name='StateList', position='Query'),
}

model ListProjectsResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      accessPageId?: [ long ](name='AccessPageId'),
      availableHours?: int32(name='AvailableHours', example='3174301'),
      contentId?: string(name='ContentId', example='c-06vcpamarryyq****'),
      contentName?: string(name='ContentName', example='notepad++***'),
      createTime?: string(name='CreateTime', example='1701141509000'),
      description?: string(name='Description', example='xxx'),
      inUseSessions?: long(name='InUseSessions'),
      maxHours?: long(name='MaxHours', example='1000'),
      maxSessions?: long(name='MaxSessions', example='100'),
      projectId?: string(name='ProjectId', example='p-065z4tu9ak07h****'),
      projectName?: string(name='ProjectName', example='notepad++***'),
      projectState?: string(name='ProjectState', example='0'),
      sessionSpec?: string(name='SessionSpec', example='appstreaming.general.basic'),
    }
  ](name='Data'),
  message?: string(name='Message', example='There is a missing parameter.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: string(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='6'),
}

model ListProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListProjects  ListProjectsRequest
  * @return ListProjectsResponse
 */
async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProjects', 'POST', '/', 'json', false, 'json', request);
}

model ListRegionsRequest {
  bizSource?: string(name='BizSource', position='Query'),
  productType?: string(name='ProductType', position='Query'),
}

model ListRegionsResponseBody = {
  regionModels?: [ 
    {
      regionId?: string(name='regionId'),
    }
  ](name='RegionModels'),
  requestId?: string(name='RequestId'),
}

model ListRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRegions  ListRegionsRequest
  * @return ListRegionsResponse
 */
async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListSessionPackagesRequest {
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='100', position='Query'),
  projectId?: string(name='ProjectId', example='p-xxxxxxxxxxxx', position='Query'),
  sessionPackageId?: string(name='SessionPackageId', example='tp-xxxxxxxx', position='Query'),
  sessionPackageName?: string(name='SessionPackageName', position='Query'),
  sortType?: string(name='SortType', example='ASC', position='Query'),
  stateList?: [ int32 ](name='StateList', position='Query'),
}

model ListSessionPackagesResponseBody = {
  data?: [ 
    {
      availableHours?: long(name='AvailableHours', example='500'),
      chargeType?: string(name='ChargeType'),
      deleteStatus?: int32(name='DeleteStatus', example='0'),
      gmtCreate?: string(name='GmtCreate', example='1701170196000'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='1701170203000'),
      instanceObject?: {
        expiredTime?: string(name='ExpiredTime', example='2024-05-28T16:00:00Z'),
        instanceId?: string(name='InstanceId', example='tp-xxxxxxxxxxx'),
        instanceType?: string(name='InstanceType', example='appstreaming.general.entry'),
        resourceId?: string(name='ResourceId', example='p-xxxxxxxxxx'),
        resourceType?: string(name='ResourceType', example='AppSessionPackage'),
        startTime?: string(name='StartTime', example='2023-11-28T04:14:07Z'),
        totalTime?: long(name='TotalTime', example='3600000'),
        usedTime?: long(name='UsedTime', example='1021'),
      }(name='InstanceObject'),
      maxHours?: long(name='MaxHours', example='1000'),
      maxSessions?: long(name='MaxSessions', example='100'),
      projectId?: string(name='ProjectId', example='p-xxxxxxxxxxxx'),
      projectName?: string(name='ProjectName'),
      region?: string(name='Region', example='cn-hangzhou'),
      sessionPackageId?: string(name='SessionPackageId', example='tp-xxxxxxxxx'),
      sessionPackageName?: string(name='SessionPackageName'),
      sessionPackageTypeId?: string(name='SessionPackageTypeId', example='0'),
      sessionSpec?: string(name='SessionSpec', example='appstreaming.general.entry'),
      sessionUsageRate?: long(name='SessionUsageRate', example='60'),
      state?: int32(name='State', example='4'),
      userIdentification?: long(name='UserIdentification', example='156xxxxxxxxxx'),
    }
  ](name='Data'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='100'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5Fxxxxxxxx'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListSessionPackagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSessionPackagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSessionPackages  ListSessionPackagesRequest
  * @return ListSessionPackagesResponse
 */
async function listSessionPackages(request: ListSessionPackagesRequest): ListSessionPackagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSessionPackages', 'POST', '/', 'json', false, 'json', request);
}

model ListTenantConfigRequest {
}

model ListTenantConfigResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  tenantConfigModel?: {
    appInstanceGroupExpireRemind?: boolean(name='AppInstanceGroupExpireRemind', example='true'),
  }(name='TenantConfigModel'),
}

model ListTenantConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTenantConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTenantConfig  ListTenantConfigRequest
  * @return ListTenantConfigResponse
 */
async function listTenantConfig(request: ListTenantConfigRequest): ListTenantConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTenantConfig', 'POST', '/', 'json', false, 'json', request);
}

model LogOffAllSessionsInAppInstanceGroupRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='This parameter is required.', example='aig-9ciijz60n4xsv****', position='Body'),
  productType: string(name='ProductType', description='This parameter is required.', example='CloudApp', position='Body'),
}

model LogOffAllSessionsInAppInstanceGroupResponseBody = {
  code?: string(name='Code', example='InvalidParameter.ProductType'),
  message?: string(name='Message', example='The parameter ProductType is invalid.'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model LogOffAllSessionsInAppInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LogOffAllSessionsInAppInstanceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of LogOffAllSessionsInAppInstanceGroup  LogOffAllSessionsInAppInstanceGroupRequest
  * @return LogOffAllSessionsInAppInstanceGroupResponse
 */
async function logOffAllSessionsInAppInstanceGroup(request: LogOffAllSessionsInAppInstanceGroupRequest): LogOffAllSessionsInAppInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LogOffAllSessionsInAppInstanceGroup', 'POST', '/', 'json', true, 'form', request);
}

model MigrateSessionPackageRequest {
  destProjectId?: string(name='DestProjectId', example='p-xxxxxx123x4312367', position='Body'),
  sessionPackageId: string(name='SessionPackageId', description='This parameter is required.', example='tp-xxxxxxxxxxxxxxxxx', position='Body'),
  sourceProjectId?: string(name='SourceProjectId', example='p-xxxxxx123x4312345', position='Body'),
}

model MigrateSessionPackageResponseBody = {
  code?: string(name='Code', example='NO_DATA'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='E25FC620-6B6F-12D2-A992-AD8727DC****'),
  success?: boolean(name='Success', example='true'),
}

model MigrateSessionPackageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MigrateSessionPackageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MigrateSessionPackage  MigrateSessionPackageRequest
  * @return MigrateSessionPackageResponse
 */
async function migrateSessionPackage(request: MigrateSessionPackageRequest): MigrateSessionPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MigrateSessionPackage', 'POST', '/', 'json', true, 'form', request);
}

model ModifyAppInstanceGroupAttributeRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='This parameter is required.', example='aig-9ciijz60n4xsv****', position='Query'),
  appInstanceGroupName?: string(name='AppInstanceGroupName', position='Query'),
  network?: {
    domainRules?: [ 
      {
        domain?: string(name='Domain'),
        policy?: string(name='Policy'),
      }
    ](name='DomainRules'),
  }(name='Network', shrink='json', position='Body'),
  nodePool?: {
    nodeCapacity?: int32(name='NodeCapacity', example='2'),
    nodePoolId?: string(name='NodePoolId', example='rg-ew7va2g1wl3vm****'),
  }(name='NodePool', shrink='json', position='Query'),
  preOpenAppId?: string(name='PreOpenAppId', position='Body'),
  preOpenMode?: string(name='PreOpenMode', position='Body'),
  productType: string(name='ProductType', description='This parameter is required.', example='CloudApp', position='Query'),
  securityPolicy?: {
    resetAfterUnbind?: boolean(name='ResetAfterUnbind', example='true'),
    skipUserAuthCheck?: boolean(name='SkipUserAuthCheck', example='false'),
  }(name='SecurityPolicy', shrink='json', position='Body'),
  sessionTimeout?: int32(name='SessionTimeout', example='15', maximum=300, position='Query'),
  storagePolicy?: {
    storageTypeList?: [ string ](name='StorageTypeList'),
  }(name='StoragePolicy', shrink='json', position='Body'),
}

model ModifyAppInstanceGroupAttributeResponseBody = {
  code?: string(name='Code', example='InvalidParameter.ProductType'),
  message?: string(name='Message', example='The parameter ProductType is invalid.'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyAppInstanceGroupAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAppInstanceGroupAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAppInstanceGroupAttribute  ModifyAppInstanceGroupAttributeRequest
  * @return ModifyAppInstanceGroupAttributeResponse
 */
async function modifyAppInstanceGroupAttribute(request: ModifyAppInstanceGroupAttributeRequest): ModifyAppInstanceGroupAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAppInstanceGroupAttribute', 'POST', '/', 'json', true, 'form', request);
}

model ModifyAppPolicyRequest {
  appPolicyId: string(name='AppPolicyId', description='This parameter is required.', example='pg-ee2znjktwgxu2****', position='Query'),
  productType: string(name='ProductType', description='This parameter is required.', example='CloudApp', position='Query'),
  videoPolicy?: {
    frameRate?: int32(name='FrameRate', example='60'),
    sessionResolutionHeight?: int32(name='SessionResolutionHeight', example='1080'),
    sessionResolutionWidth?: int32(name='SessionResolutionWidth', example='1920'),
    streamingMode?: string(name='StreamingMode', example='video'),
    terminalResolutionAdaptive?: boolean(name='TerminalResolutionAdaptive', example='false'),
    visualQualityStrategy?: string(name='VisualQualityStrategy'),
    webrtc?: boolean(name='Webrtc', example='true'),
  }(name='VideoPolicy', shrink='json', position='Query'),
}

model ModifyAppPolicyResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyAppPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAppPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAppPolicy  ModifyAppPolicyRequest
  * @return ModifyAppPolicyResponse
 */
async function modifyAppPolicy(request: ModifyAppPolicyRequest): ModifyAppPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAppPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyNodePoolAttributeRequest {
  bizRegionId?: string(name='BizRegionId', example='cn-hangzhou', position='Body'),
  nodeCapacity?: int32(name='NodeCapacity', example='2', position='Body'),
  nodePoolStrategy?: {
    maxIdleAppInstanceAmount?: int32(name='MaxIdleAppInstanceAmount'),
    maxScalingAmount?: int32(name='MaxScalingAmount', example='10'),
    nodeAmount?: int32(name='NodeAmount', description='购买资源的数量。取值范围：1~100。

> 
- 若为包年包月资源，则该参数不可修改。
- 若为按量付费资源，则当弹性模式（`StrategyType`）为固定数量（`NODE_FIXED`）或自动扩缩容（`NODE_SCALING_BY_USAGE`）时该参数可修改。', example='1'),
    recurrenceSchedules?: [ 
      {
        recurrenceType?: string(name='RecurrenceType', description='策略执行周期的类型。必须同时指定`RecurrenceType`和`RecurrenceValues`。', example='weekly'),
        recurrenceValues?: [ int32 ](name='RecurrenceValues', description='策略执行周期的数值列表。'),
        timerPeriods?: [ 
          {
            amount?: int32(name='Amount', description='资源数量。', example='2'),
            endTime?: string(name='EndTime', description='结束时间。格式为HH:mm。', example='15:00'),
            startTime?: string(name='StartTime', description='开始时间。格式为HH:mm。', example='12:00'),
          }
        ](name='TimerPeriods', description='策略执行周期的时间段列表。时间段设置要求：

- 最多可添加3个时间段。
- 时间段之间不重叠。
- 时间段之间的间隔大于或等于5分钟。
- 单个时间段的时长大于或等于15分钟。
- 所有时间段累计不跨天。'),
      }
    ](name='RecurrenceSchedules', description='策略执行周期列表。`StrategyType`（弹性模式）设为`NODE_SCALING_BY_SCHEDULE`（定时扩缩容）时，该字段必填。'),
    scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes', example='5'),
    scalingStep?: int32(name='ScalingStep', example='2'),
    scalingUsageThreshold?: string(name='ScalingUsageThreshold', example='85'),
    strategyDisableDate?: string(name='StrategyDisableDate', description='策略失效日期。格式为：yyyy-MM-dd。失效日期与生效日期的间隔必须介于7天到1年之间（含7天和1年）。`StrategyType`（弹性模式）设为`NODE_SCALING_BY_SCHEDULE`（定时扩缩容）时，该字段必填。', example='2023-01-19'),
    strategyEnableDate?: string(name='StrategyEnableDate', description='策略生效日期。格式为：yyyy-MM-dd。该日期必须大于或等于当前日期。`StrategyType`（弹性模式）设为`NODE_SCALING_BY_SCHEDULE`（定时扩缩容）时，该字段必填。', example='2023-01-05'),
    strategyType?: string(name='StrategyType'),
    warmUp?: boolean(name='WarmUp', description='是否开启资源预热策略。`StrategyType`（弹性模式）设为`NODE_SCALING_BY_SCHEDULE`（定时扩缩容）时，该字段必填。', example='false'),
  }(name='NodePoolStrategy', shrink='json', position='Body'),
  poolId?: string(name='PoolId', example='rg-ew7va2g1wl3vm****', position='Body'),
  productType?: string(name='ProductType', description='产品类型。', example='CloudApp', position='Body'),
}

model ModifyNodePoolAttributeResponseBody = {
  code?: string(name='Code', example='InvalidParameter.PoolId'),
  message?: string(name='Message', example='The parameter PoolId is invalid.'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyNodePoolAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNodePoolAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyNodePoolAttribute  ModifyNodePoolAttributeRequest
  * @return ModifyNodePoolAttributeResponse
 */
async function modifyNodePoolAttribute(request: ModifyNodePoolAttributeRequest): ModifyNodePoolAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNodePoolAttribute', 'POST', '/', 'json', true, 'form', request);
}

model ModifyProjectPolicyRequest {
  clipboard?: int32(name='Clipboard', example='0', position='Query'),
  fileTransfer?: int32(name='FileTransfer', example='0', position='Query'),
  frameRate?: int32(name='FrameRate', example='30', position='Query'),
  keepAliveDuration?: int32(name='KeepAliveDuration', example='15', minimum=-1, maximum=300, position='Query'),
  projectId?: string(name='ProjectId', example='p-065z4tu9ak07h****', position='Query'),
  sessionResolutionHeight?: int32(name='SessionResolutionHeight', example='4096', minimum=500, maximum=4096, position='Query'),
  sessionResolutionWidth?: int32(name='SessionResolutionWidth', example='4096', minimum=500, maximum=4096, position='Query'),
  streamingMode?: string(name='StreamingMode', example='video', position='Query'),
  terminalResolutionAdaptation?: boolean(name='TerminalResolutionAdaptation', example='true', position='Query'),
}

model ModifyProjectPolicyResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='None'),
  message?: string(name='Message', example='There is a missing parameter.'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: string(name='Success', example='true'),
}

model ModifyProjectPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyProjectPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyProjectPolicy  ModifyProjectPolicyRequest
  * @return ModifyProjectPolicyResponse
 */
async function modifyProjectPolicy(request: ModifyProjectPolicyRequest): ModifyProjectPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyProjectPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTenantConfigRequest {
  appInstanceGroupExpireRemind?: boolean(name='AppInstanceGroupExpireRemind', example='true', position='Body'),
}

model ModifyTenantConfigResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyTenantConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTenantConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyTenantConfig  ModifyTenantConfigRequest
  * @return ModifyTenantConfigResponse
 */
async function modifyTenantConfig(request: ModifyTenantConfigRequest): ModifyTenantConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTenantConfig', 'POST', '/', 'json', true, 'form', request);
}

model PageListAppInstanceGroupUserRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='This parameter is required.', example='aig-9ciijz60n4xsv****', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  productType: string(name='ProductType', description='This parameter is required.', example='CloudApp', position='Body'),
}

model PageListAppInstanceGroupUserResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  users?: [ string ](name='Users'),
}

model PageListAppInstanceGroupUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PageListAppInstanceGroupUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PageListAppInstanceGroupUser  PageListAppInstanceGroupUserRequest
  * @return PageListAppInstanceGroupUserResponse
 */
async function pageListAppInstanceGroupUser(request: PageListAppInstanceGroupUserRequest): PageListAppInstanceGroupUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PageListAppInstanceGroupUser', 'POST', '/', 'json', true, 'form', request);
}

model RefreshAccessUrlRequest {
  accessPageId?: string(name='AccessPageId', example='a-062wec3cwmayw****', position='Query'),
}

model RefreshAccessUrlResponseBody = {
  accessUrl?: string(name='AccessUrl', example='https://wuying.aliyun.com/native-solution/cloud-flow/view?id=a-075nu7b9ynrpugvbm&token=67C7557D25540A9130B1ED81E806D4772A7DE693E6F377E3594179772B******'),
  code?: string(name='Code', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: string(name='Success', example='true'),
}

model RefreshAccessUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefreshAccessUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RefreshAccessUrl  RefreshAccessUrlRequest
  * @return RefreshAccessUrlResponse
 */
async function refreshAccessUrl(request: RefreshAccessUrlRequest): RefreshAccessUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshAccessUrl', 'POST', '/', 'json', false, 'json', request);
}

model RenewAppInstanceGroupRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='This parameter is required.', example='aig-9ciijz60n4xsv****', position='Query'),
  autoPay?: boolean(name='AutoPay', example='false', position='Query'),
  period: int32(name='Period', description='This parameter is required.', example='1', position='Query'),
  periodUnit: string(name='PeriodUnit', description='This parameter is required.', position='Query'),
  productType: string(name='ProductType', description='This parameter is required.', example='CloudApp', position='Query'),
  promotionId?: string(name='PromotionId', example='17440009****', position='Query'),
}

model RenewAppInstanceGroupResponseBody = {
  code?: string(name='Code', example='InvalidParameter.ProductType'),
  message?: string(name='Message', example='The parameter ProductType is invalid.'),
  orderId?: string(name='OrderId', example='123456****'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RenewAppInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenewAppInstanceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RenewAppInstanceGroup  RenewAppInstanceGroupRequest
  * @return RenewAppInstanceGroupResponse
 */
async function renewAppInstanceGroup(request: RenewAppInstanceGroupRequest): RenewAppInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewAppInstanceGroup', 'POST', '/', 'json', false, 'json', request);
}

model RenewSessionPackageRequest {
  period: int32(name='Period', description='This parameter is required.', example='1', position='Query'),
  periodUnit: string(name='PeriodUnit', description='This parameter is required.', example='Month', position='Query'),
  sessionPackageId: string(name='SessionPackageId', description='This parameter is required.', example='tp-****', position='Query'),
}

model RenewSessionPackageResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='There is a missing parameter.'),
  requestId?: string(name='RequestId', example='50158E8B-992E-1286-B174-**********'),
  sessionPackageId?: long(name='SessionPackageId', example='22983172******'),
  success?: string(name='Success', example='success'),
}

model RenewSessionPackageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenewSessionPackageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RenewSessionPackage  RenewSessionPackageRequest
  * @return RenewSessionPackageResponse
 */
async function renewSessionPackage(request: RenewSessionPackageRequest): RenewSessionPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewSessionPackage', 'POST', '/', 'json', false, 'json', request);
}

model UnbindRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='This parameter is required.', example='aig-9ciijz60n4xsv****', position='Body'),
  appInstanceId?: string(name='AppInstanceId', example='ai-d297eyf83g5ni****', position='Body'),
  appInstancePersistentId?: string(name='AppInstancePersistentId', position='Body'),
  endUserId: string(name='EndUserId', description='This parameter is required.', example='alice', position='Body'),
  productType: string(name='ProductType', description='This parameter is required.', example='CloudApp', position='Body'),
}

model UnbindResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model UnbindResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Unbind  UnbindRequest
  * @return UnbindResponse
 */
async function unbind(request: UnbindRequest): UnbindResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Unbind', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAccessPageStateRequest {
  accessPageId?: string(name='AccessPageId', example='a-06xnr5lyp77e7****', position='Query'),
  accessPageState?: int32(name='AccessPageState', example='1', position='Query'),
}

model UpdateAccessPageStateResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='InternalError'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: string(name='Success', example='true'),
}

model UpdateAccessPageStateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAccessPageStateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateAccessPageState  UpdateAccessPageStateRequest
  * @return UpdateAccessPageStateResponse
 */
async function updateAccessPageState(request: UpdateAccessPageStateRequest): UpdateAccessPageStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAccessPageState', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAppInstanceGroupImageRequest {
  appCenterImageId: string(name='AppCenterImageId', description='This parameter is required.', example='img-8z4nztpaqvay4****', position='Query'),
  appInstanceGroupId: string(name='AppInstanceGroupId', description='This parameter is required.', example='aig-9ciijz60n4xsv****', position='Query'),
  bizRegionId: string(name='BizRegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  productType: string(name='ProductType', description='This parameter is required.', example='CloudApp', position='Query'),
}

model UpdateAppInstanceGroupImageResponseBody = {
  code?: string(name='Code', example='InvalidParameter.ProductType'),
  message?: string(name='Message', example='The parameter ProductType is invalid.'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model UpdateAppInstanceGroupImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAppInstanceGroupImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateAppInstanceGroupImage  UpdateAppInstanceGroupImageRequest
  * @return UpdateAppInstanceGroupImageResponse
 */
async function updateAppInstanceGroupImage(request: UpdateAppInstanceGroupImageRequest): UpdateAppInstanceGroupImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAppInstanceGroupImage', 'POST', '/', 'json', false, 'json', request);
}

