/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'appstream-center';
  @version = '2021-09-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ApproveOtaTaskRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='The ID of the delivery group. You can call the [ListAppInstanceGroup](https://help.aliyun.com/document_detail/428506.html) operation to obtain the ID.

This parameter is required.', example='aig-9ciijz60n4xsv****', position='Body'),
  bizRegionId: string(name='BizRegionId', description='The ID of the region where the delivery group resides. You can call the [ListRegions](https://help.aliyun.com/document_detail/428500.html) operation to query the list of regions supported by App Streaming.

This parameter is required.', example='cn-hangzhou', position='Body'),
  otaType: string(name='OtaType', description='The type of the OTA update task.

Valid values:

*   Fota: update of the system components of Alibaba Cloud Workspace
*   AppUpdate
*   ImageUpdate

This parameter is required.', example='Fota', position='Body'),
  startTime: string(name='StartTime', description='The start time of the OTA update task. The time follows the ISO 8601 standard.

This parameter is required.

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-08-04T14:36:00+08:00', position='Body'),
  taskId: string(name='TaskId', description='The ID of the OTA update task. You can call the [ListAppInstanceGroup](https://help.aliyun.com/document_detail/428506.html) operation to obtain the ID.

>  Each successful call to the `ApproveOtaTask` operation causes a value change of this parameter.`` Before you call this operation, call the `ListAppInstanceGroup` operation again to obtain the latest value of this parameter.``

This parameter is required.', example='ota-be7jzm29wrrz5****', position='Body'),
}

model ApproveOtaTaskResponseBody = {
  code?: string(name='Code', description='The execution result. If the request was successful, `success` is returned. If the request failed, an error message is returned.', example='OtaTask.Running'),
  message?: string(name='Message', description='The error message. If the value of `Code` is `success`, this parameter is not returned.', example='The task is running and cannot be sumitted.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ApproveOtaTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApproveOtaTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ApproveOtaTask  ApproveOtaTaskRequest
  * @return ApproveOtaTaskResponse
 */
async function approveOtaTask(request: ApproveOtaTaskRequest): ApproveOtaTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApproveOtaTask', 'POST', '/', 'json', true, 'form', request);
}

model AuthorizeInstanceGroupRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='This parameter is required.', example='aig-9ciijz60n4xsv****', position='Body'),
  appInstancePersistentId?: string(name='AppInstancePersistentId', description='持久会话ID。', example='p-0cc7s3mw2fg4j****', position='Body'),
  authorizeUserGroupIds?: [ string ](name='AuthorizeUserGroupIds', position='Body'),
  authorizeUserIds?: [ string ](name='AuthorizeUserIds', description='The IDs of the users that you want to add to the authorization list of the delivery group. You can specify 1 to 100 user IDs.', position='Body'),
  avatarId?: string(name='AvatarId', example='default', position='Body'),
  productType: string(name='ProductType', description='This parameter is required.', example='CloudApp', position='Body'),
  unAuthorizeUserGroupIds?: [ string ](name='UnAuthorizeUserGroupIds', position='Body'),
  unAuthorizeUserIds?: [ string ](name='UnAuthorizeUserIds', description='The IDs of the users that you want to remove from the authorization list of the delivery group. You can specify 1 to 100 user IDs.', position='Body'),
  userMeta?: {
    adDomain?: string(name='AdDomain', description='The AD domain name.', example='example.com'),
    type?: string(name='Type', description='The user type.

Valid values:

*   ad: Active Directory (AD) account
*   simple: convenience account', example='simple'),
  }(name='UserMeta', description='The user information.', shrink='json', position='Body'),
}

model AuthorizeInstanceGroupResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model AuthorizeInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AuthorizeInstanceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AuthorizeInstanceGroup  AuthorizeInstanceGroupRequest
  * @return AuthorizeInstanceGroupResponse
 */
async function authorizeInstanceGroup(request: AuthorizeInstanceGroupRequest): AuthorizeInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuthorizeInstanceGroup', 'POST', '/', 'json', true, 'form', request);
}

model CreateAppInstanceGroupRequest {
  appCenterImageId: string(name='AppCenterImageId', description='This parameter is required.', example='img-8z4nztpaqvay4****', position='Body'),
  appInstanceGroupName?: string(name='AppInstanceGroupName', position='Body'),
  appPackageType?: string(name='AppPackageType', position='Body'),
  appPolicyId?: string(name='AppPolicyId', position='Body'),
  authMode?: string(name='AuthMode', example='App', position='Body'),
  autoPay?: boolean(name='AutoPay', example='false', position='Body'),
  autoRenew?: boolean(name='AutoRenew', example='false', position='Body'),
  bizRegionId: string(name='BizRegionId', description='This parameter is required.', example='cn-hangzhou', position='Body'),
  chargeResourceMode: string(name='ChargeResourceMode', description='This parameter is required.', example='Node', position='Body'),
  chargeType: string(name='ChargeType', description='This parameter is required.', example='PrePaid', position='Body'),
  clusterId?: string(name='ClusterId', position='Body'),
  network?: {
    domainRules?: [ 
      {
        domain?: string(name='Domain'),
        policy?: string(name='Policy'),
      }
    ](name='DomainRules'),
    ipExpireMinutes?: int32(name='IpExpireMinutes', example='60', minimum=60),
    officeSiteId?: string(name='OfficeSiteId'),
    routes?: [ 
      {
        destination?: string(name='Destination', example='139.196.XX.XX/32'),
        mode?: string(name='Mode', example='Shared'),
      }
    ](name='Routes'),
    strategyType?: string(name='StrategyType', example='Shared'),
    vSwitchIds?: [ string ](name='VSwitchIds'),
  }(name='Network', shrink='json', position='Body'),
  nodePool?: {
    maxIdleAppInstanceAmount?: int32(name='MaxIdleAppInstanceAmount'),
    maxScalingAmount?: int32(name='MaxScalingAmount', example='10'),
    nodeAmount?: int32(name='NodeAmount', example='1'),
    nodeCapacity?: int32(name='NodeCapacity', example='2'),
    nodeInstanceType?: string(name='NodeInstanceType'),
    recurrenceSchedules?: [ 
      {
        recurrenceType?: string(name='RecurrenceType', example='weekly'),
        recurrenceValues?: [ int32 ](name='RecurrenceValues'),
        timerPeriods?: [ 
          {
            amount?: int32(name='Amount', example='2'),
            endTime?: string(name='EndTime', example='15:00'),
            startTime?: string(name='StartTime', example='12:00'),
          }
        ](name='TimerPeriods'),
      }
    ](name='RecurrenceSchedules'),
    scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes', example='5'),
    scalingStep?: int32(name='ScalingStep', example='2'),
    scalingUsageThreshold?: string(name='ScalingUsageThreshold', example='85'),
    strategyDisableDate?: string(name='StrategyDisableDate', example='2022-09-08'),
    strategyEnableDate?: string(name='StrategyEnableDate', example='2022-08-01'),
    strategyType?: string(name='StrategyType', example='NODE_FIXED'),
    warmUp?: boolean(name='WarmUp', example='false'),
  }(name='NodePool', shrink='json', position='Body'),
  period: int32(name='Period', description='This parameter is required.', example='1', position='Body'),
  periodUnit: string(name='PeriodUnit', description='This parameter is required.', position='Body'),
  preOpenAppId?: string(name='PreOpenAppId', example='cag-b2ron*******', position='Body'),
  productType: string(name='ProductType', description='This parameter is required.', example='CloudApp', position='Body'),
  promotionId?: string(name='PromotionId', example='17440009****', position='Body'),
  runtimePolicy?: {
    debugMode?: string(name='DebugMode'),
    perSessionPerApp?: boolean(name='PerSessionPerApp'),
    persistentAppInstanceScheduleMode?: string(name='PersistentAppInstanceScheduleMode', example='DYNAMIC'),
    sessionPreOpen?: string(name='SessionPreOpen'),
    sessionType?: string(name='SessionType', description='会话类型。', example='NORMAL'),
    sessionUserGenerationMode?: string(name='SessionUserGenerationMode'),
  }(name='RuntimePolicy', shrink='json', position='Body'),
  securityPolicy?: {
    resetAfterUnbind?: boolean(name='ResetAfterUnbind', example='true'),
    skipUserAuthCheck?: boolean(name='SkipUserAuthCheck', example='false'),
  }(name='SecurityPolicy', shrink='json', position='Body'),
  sessionTimeout: int32(name='SessionTimeout', description='This parameter is required.', example='15', maximum=300, position='Body'),
  storagePolicy?: {
    storageTypeList?: [ string ](name='StorageTypeList'),
    userProfile?: {
      remoteStoragePath?: string(name='RemoteStoragePath'),
      remoteStorageType?: string(name='RemoteStorageType'),
      userProfileSwitch?: boolean(name='UserProfileSwitch'),
    }(name='UserProfile'),
  }(name='StoragePolicy', shrink='json', position='Body'),
  subPayType?: string(name='SubPayType', position='Body'),
  userDefinePolicy?: {
    customConfig?: string(name='CustomConfig'),
  }(name='UserDefinePolicy', shrink='json', position='Query'),
  userInfo?: {
    type?: string(name='Type', example='Simple'),
  }(name='UserInfo', shrink='json', position='Body'),
  users?: [ string ](name='Users', position='Body'),
  videoPolicy?: {
    frameRate?: int32(name='FrameRate'),
    sessionResolutionHeight?: int32(name='SessionResolutionHeight'),
    sessionResolutionWidth?: int32(name='SessionResolutionWidth'),
    streamingMode?: string(name='StreamingMode'),
    terminalResolutionAdaptive?: boolean(name='TerminalResolutionAdaptive'),
    webrtc?: boolean(name='Webrtc'),
  }(name='VideoPolicy', shrink='json', position='Body'),
}

model CreateAppInstanceGroupResponseBody = {
  appInstanceGroupModel?: {
    appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
    nodePoolId?: string(name='NodePoolId', example='rg-ew7va2g1wl3vm****'),
    orderId?: string(name='OrderId', example='12345****'),
  }(name='AppInstanceGroupModel'),
  requestId?: string(name='RequestId'),
}

model CreateAppInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppInstanceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAppInstanceGroup  CreateAppInstanceGroupRequest
  * @return CreateAppInstanceGroupResponse
 */
async function createAppInstanceGroup(request: CreateAppInstanceGroupRequest): CreateAppInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppInstanceGroup', 'POST', '/', 'json', true, 'form', request);
}

model CreateImageFromAppInstanceGroupRequest {
  appCenterImageName: string(name='AppCenterImageName', description='The image name.

This parameter is required.', example='test_name', position='Body'),
  appInstanceGroupId: string(name='AppInstanceGroupId', description='The ID of the delivery group. You can call the [ListAppInstanceGroup](https://help.aliyun.com/document_detail/428506.html) operation to obtain the ID.

This parameter is required.', example='aig-9ciijz60n4xsv****', position='Body'),
  productType: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp', position='Body'),
}

model CreateImageFromAppInstanceGroupResponseBody = {
  imageId?: string(name='ImageId', description='The image ID.', example='img-bp13mu****'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreateImageFromAppInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateImageFromAppInstanceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateImageFromAppInstanceGroup  CreateImageFromAppInstanceGroupRequest
  * @return CreateImageFromAppInstanceGroupResponse
 */
async function createImageFromAppInstanceGroup(request: CreateImageFromAppInstanceGroupRequest): CreateImageFromAppInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateImageFromAppInstanceGroup', 'POST', '/', 'json', true, 'form', request);
}

model CreateWuyingServerRequest {
  amount?: int32(name='Amount', example='1', position='Body'),
  autoPay?: boolean(name='AutoPay', example='false', position='Body'),
  autoRenew?: boolean(name='AutoRenew', example='false', position='Body'),
  bizRegionId?: string(name='BizRegionId', example='cn-hangzhou', position='Body'),
  chargeType?: string(name='ChargeType', example='PrePaid', position='Body'),
  dataDisk?: [ 
    {
      dataDiskCategory?: string(name='DataDiskCategory', example='cloud_auto'),
      dataDiskPerformanceLevel?: string(name='DataDiskPerformanceLevel', example='PL0'),
      dataDiskSize?: int32(name='DataDiskSize', example='100'),
    }
  ](name='DataDisk', position='Body'),
  imageId?: string(name='ImageId', example='img-bp13mu****', position='Body'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-643067****', position='Body'),
  password?: string(name='Password', example='YourPassword123', position='Body'),
  period?: int32(name='Period', example='1', position='Body'),
  periodUnit?: string(name='PeriodUnit', example='Month', position='Body'),
  promotionId?: string(name='PromotionId', example='17440009****', position='Body'),
  serverInstanceType?: string(name='ServerInstanceType', example='eds.proworkstation_flagship_elite_ne.96c384g.192g4x', position='Body'),
  systemDiskCategory?: string(name='SystemDiskCategory', example='cloud_auto', position='Body'),
  systemDiskPerformanceLevel?: string(name='SystemDiskPerformanceLevel', example='PL0', position='Body'),
  systemDiskSize?: int32(name='SystemDiskSize', example='100', position='Body'),
  vSwitchIds?: [ string ](name='VSwitchIds', position='Body'),
  wuyingServerName?: string(name='WuyingServerName', example='exampleServerName', position='Body'),
}

model CreateWuyingServerResponseBody = {
  data?: {
    orderId?: string(name='OrderId', example='23429322113****'),
    wuyingServerIdList?: [ string ](name='WuyingServerIdList'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreateWuyingServerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWuyingServerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateWuyingServer  CreateWuyingServerRequest
  * @return CreateWuyingServerResponse
 */
async function createWuyingServer(request: CreateWuyingServerRequest): CreateWuyingServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWuyingServer', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAppInstanceGroupRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='The ID of the delivery group.

This parameter is required.', example='aig-9ciijz60n4xsv****', position='Body'),
  productType: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp', position='Body'),
}

model DeleteAppInstanceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteAppInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppInstanceGroupResponseBody(name='body'),
}

/**
  * @description >  You cannot call this operation to delete a subscription delivery group.
  * @param request  the request parameters of DeleteAppInstanceGroup  DeleteAppInstanceGroupRequest
  * @return DeleteAppInstanceGroupResponse
 */
async function deleteAppInstanceGroup(request: DeleteAppInstanceGroupRequest): DeleteAppInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAppInstanceGroup', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAppInstancesRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='The ID of the delivery group. You can call the [listAppInstanceGroup](https://help.aliyun.com/document_detail/428506.html) operation to obtain the ID.

This parameter is required.', example='aig-9ciijz60n4xsv****', position='Body'),
  appInstanceIds: [ string ](name='AppInstanceIds', description='The IDs of application instances.

This parameter is required.', position='Body'),
  productType: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp', position='Body'),
}

model DeleteAppInstancesResponseBody = {
  deleteAppInstanceModels?: [ 
    {
      appInstanceId?: string(name='AppInstanceId', description='The ID of the application instance.', example='ai-gbuea*****'),
      code?: string(name='Code', description='The error code.', example='InvalidParameter.ProductType'),
      message?: string(name='Message', description='The error message.', example='The parameter ProductType is invalid.'),
      success?: boolean(name='Success', description='Specifies whether the application instance is deleted.

Valid values:

*   true
*   false', example='true'),
    }
  ](name='DeleteAppInstanceModels', description='The data returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteAppInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppInstancesResponseBody(name='body'),
}

/**
  * @description Only application instances that are in the Initializing or Idle state can be deleted. The operation can be called only by specific customers.
  * @param request  the request parameters of DeleteAppInstances  DeleteAppInstancesRequest
  * @return DeleteAppInstancesResponse
 */
async function deleteAppInstances(request: DeleteAppInstancesRequest): DeleteAppInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAppInstances', 'POST', '/', 'json', true, 'form', request);
}

model GetAppInstanceGroupRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='This parameter is required.', example='aig-9ciijz60n4xsv****', position='Query'),
  productType: string(name='ProductType', description='This parameter is required.', example='CloudApp', position='Query'),
}

model GetAppInstanceGroupResponseBody = {
  appInstanceGroupModels?: {
    accessType?: string(name='AccessType', example='INTERNET'),
    amount?: int32(name='Amount'),
    appCenterImageId?: string(name='AppCenterImageId', example='img-8z4nztpaqvay4****'),
    appCenterImageName?: string(name='AppCenterImageName', example='OfficeApps'),
    appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
    appInstanceGroupName?: string(name='AppInstanceGroupName'),
    appInstanceType?: string(name='AppInstanceType', example='__dynamic__'),
    appInstanceTypeName?: string(name='AppInstanceTypeName', example='test001'),
    appPolicyId?: string(name='AppPolicyId', example='pg-g3k5wa2ms2****'),
    apps?: [ 
      {
        appIcon?: string(name='AppIcon'),
        appId?: string(name='AppId', example='ca-i87mycyn419nu****'),
        appName?: string(name='AppName'),
        appVersion?: string(name='AppVersion'),
        appVersionName?: string(name='AppVersionName'),
      }
    ](name='Apps'),
    authMode?: string(name='AuthMode', example='App'),
    chargeResourceMode?: string(name='ChargeResourceMode', example='Node'),
    chargeType?: string(name='ChargeType', example='PrePaid'),
    expiredTime?: string(name='ExpiredTime', example='2022-04-27T16:00:00.000+00:00'),
    gmtCreate?: string(name='GmtCreate', example='2022-04-26T15:06:16.000+00:00'),
    maxAmount?: int32(name='MaxAmount', example='10'),
    minAmount?: int32(name='MinAmount', example='1'),
    nodePool?: [ 
      {
        amount?: int32(name='Amount', example='2'),
        maxIdleAppInstanceAmount?: int32(name='MaxIdleAppInstanceAmount'),
        maxScalingAmount?: int32(name='MaxScalingAmount', example='8'),
        nodeAmount?: int32(name='NodeAmount', example='1'),
        nodeCapacity?: int32(name='NodeCapacity', example='2'),
        nodeInstanceType?: string(name='NodeInstanceType', example='appstreaming.vgpu.4c8g.2g'),
        nodePoolId?: string(name='NodePoolId', example='rg-g6922kced36hx****'),
        nodeTypeName?: string(name='NodeTypeName'),
        nodeUsed?: int32(name='NodeUsed', example='1'),
        recurrenceSchedules?: [ 
          {
            recurrenceType?: string(name='RecurrenceType', example='Weekly'),
            recurrenceValues?: [ int32 ](name='RecurrenceValues'),
            timerPeriods?: [ 
              {
                amount?: int32(name='Amount', example='5'),
                endTime?: string(name='EndTime', example='11:00'),
                startTime?: string(name='StartTime', example='09:30'),
              }
            ](name='TimerPeriods'),
          }
        ](name='RecurrenceSchedules'),
        scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes', example='5'),
        scalingNodeAmount?: int32(name='ScalingNodeAmount', example='8'),
        scalingNodeUsed?: int32(name='ScalingNodeUsed', example='4'),
        scalingStep?: int32(name='ScalingStep', example='2'),
        scalingUsageThreshold?: string(name='ScalingUsageThreshold', example='85'),
        strategyDisableDate?: string(name='StrategyDisableDate', example='2022-09-08'),
        strategyEnableDate?: string(name='StrategyEnableDate', example='2022-08-01'),
        strategyType?: string(name='StrategyType', example='NODE_FIXED'),
        warmUp?: boolean(name='WarmUp', example='false'),
      }
    ](name='NodePool'),
    officeSiteId?: string(name='OfficeSiteId'),
    osType?: string(name='OsType', example='Windows'),
    otaInfo?: {
      newOtaVersion?: string(name='NewOtaVersion', example='0.0.1-D-20220630.11****'),
      otaVersion?: string(name='OtaVersion', example='0.0.1-D-20220615.11****'),
      taskId?: string(name='TaskId', example='ota-e49929gv8acz5****'),
    }(name='OtaInfo'),
    productType?: string(name='ProductType', example='CloudApp'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    reserveAmountRatio?: string(name='ReserveAmountRatio', example='20'),
    reserveMaxAmount?: int32(name='ReserveMaxAmount', example='5'),
    reserveMinAmount?: int32(name='ReserveMinAmount', example='1'),
    resourceStatus?: string(name='ResourceStatus', example='AVAILABLE'),
    scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes', example='5'),
    scalingStep?: int32(name='ScalingStep', example='10'),
    scalingUsageThreshold?: string(name='ScalingUsageThreshold', example='85'),
    sessionTimeout?: string(name='SessionTimeout', example='15'),
    sessionType?: string(name='SessionType'),
    skipUserAuthCheck?: boolean(name='SkipUserAuthCheck', example='false'),
    specId?: string(name='SpecId', example='spec-8o18t8uc31qib0****'),
    status?: string(name='Status', example='PUBLISHED'),
    tags?: [ 
      {
        key?: string(name='Key'),
        scope?: string(name='Scope'),
        value?: string(name='Value'),
      }
    ](name='Tags'),
  }(name='AppInstanceGroupModels', description='AppInstanceGroupModels'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model GetAppInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAppInstanceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAppInstanceGroup  GetAppInstanceGroupRequest
  * @return GetAppInstanceGroupResponse
 */
async function getAppInstanceGroup(request: GetAppInstanceGroupRequest): GetAppInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAppInstanceGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetConnectionTicketRequest {
  accessType?: string(name='AccessType', example='INTERNET', maxLength=10, position='Body'),
  appId?: string(name='AppId', description='The application ID.

>  This parameter is required for the first call to this operation and optional for subsequent calls to the operation.', example='ca-e4s0puhmwi7v****', position='Body'),
  appInstanceGroupIdList?: [ string ](name='AppInstanceGroupIdList', description='The delivery groups.

> *   If you configure this parameter, the system assigns application instances only among the specified authorized delivery groups. 
> *   This parameter is required if you configure `AppInstanceId` or `AppInstancePersistentId`.', position='Body'),
  appInstanceId?: string(name='AppInstanceId', description='The ID of the application instance.

> *   If you configure this parameter, the system attempts to assign only the specified application instance.
> *   If you configure this parameter, you must also configure `AppInstanceGroupIdList` and the number of delivery groups specified by `AppInstanceGroupIdList` must be 1.', example='ai-1rznfnrvsa99d****', position='Body'),
  appInstancePersistentId?: string(name='AppInstancePersistentId', description='The ID of the persistent session.', example='p-0bxls9m3cl7s****', position='Body'),
  appPolicyId?: string(name='AppPolicyId', position='Body'),
  appStartParam?: string(name='AppStartParam', description='The parameters that are configured to start the application. For information about how to obtain these parameters, see [Obtain parameters configured to install and start an application](https://help.aliyun.com/document_detail/426045.html).', example='/q /n', position='Body'),
  appVersion?: string(name='AppVersion', description='The application version. If you configure this parameter, only an application of the specified version is started. If you do not configure this parameter, an application of a random authorized version is started.', example='1.0.0', position='Body'),
  bizRegionId?: string(name='BizRegionId', description='The region ID.

>  If you configure this parameter, the system assigns application instances only among the delivery groups that reside in the specified region.', example='cn-hangzhou', position='Body'),
  endUserId: string(name='EndUserId', description='The ID of the convenience account.

This parameter is required.', example='alice', position='Body'),
  productType: string(name='ProductType', description='The product type.

Valid values:

*   CloudApp: App Streaming
*   AndroidCloud: Cloud Phone

This parameter is required.', example='CloudApp', position='Body'),
  taskId?: string(name='TaskId', description='The task ID.

>  This parameter is required for calls other than the first call to this operation. You can use this parameter to query the task status and connection credential.', example='28778acb-a469-4bc0-8e0f****', position='Body'),
}

model GetConnectionTicketResponseBody = {
  appInstanceGroupId?: string(name='AppInstanceGroupId', description='The ID of the delivery group.', example='aig-53fvrq1oan****'),
  appInstanceId?: string(name='AppInstanceId', description='The ID of the application instance.', example='ai-7ybdeiyoeh5e****'),
  appInstancePersistentId?: string(name='AppInstancePersistentId', description='The ID of the persistent session.', example='p-0bxls9m3cl7s****'),
  avatarId?: string(name='AvatarId'),
  bizRegionId?: string(name='BizRegionId', description='The region ID.', example='cn-hangzhou'),
  osType?: string(name='OsType', description='The operating system.

Valid value:

*   Windows: the Windows operating system', example='Windows'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  taskId?: string(name='TaskId', description='The task ID.', example='f3d1b31c-605e-4d04-a896****'),
  taskStatus?: string(name='TaskStatus', description='The task status.

Valid values:

*   Finished: The task is complete.
*   Failed: The task failed.
*   Running: The task is being executed.', example='Running'),
  tenantId?: long(name='TenantId', description='The ID of the Alibaba Cloud account.', example='148871678899****'),
  ticket?: string(name='Ticket', description='The credential that is used to connect to App Streaming.

>  This parameter is displayed for calls other than the first call to this operation.', example='DQpbRGVza3RvcF0NCkZvcmNlVGxzVHlwZT0xDQpHV1Rva2VuUGFydDE9MDAva09ROW1FUTU3dU****'),
}

model GetConnectionTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConnectionTicketResponseBody(name='body'),
}

/**
  * @description You must call this operation at least twice to obtain a connection credential.
  * The first time you call this operation, the system assigns an application instance to the specified convenience account and then starts the application. In this case, the ID of the started task, which is indicated by `TaskID`, is returned.
  * In subsequent calls, you must configure `TaskID` to query whether the task is completed. If the value of `TaskStatus` in the response is `Finished`, the connection credential, which is indicated by `Ticket`, is returned.
  * @param request  the request parameters of GetConnectionTicket  GetConnectionTicketRequest
  * @return GetConnectionTicketResponse
 */
async function getConnectionTicket(request: GetConnectionTicketRequest): GetConnectionTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConnectionTicket', 'POST', '/', 'json', true, 'form', request);
}

model GetDebugAppInstanceRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='The ID of the delivery group. You can call the `listAppInstanceGroup` operation to obtain the ID.

This parameter is required.', example='aig-9ciijz60n4xsv****', position='Body'),
  productType: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp', position='Body'),
}

model GetDebugAppInstanceResponseBody = {
  appId?: string(name='AppId', description='The application ID.', example='__DEBUG_APP'),
  appInstanceGroupId?: string(name='AppInstanceGroupId', description='The ID of the delivery group.', example='aig-9ciijz60n4xsv****'),
  appInstanceId?: string(name='AppInstanceId', description='The ID of the application instance.', example='ai-7ybdeiyoeh5e****'),
  appVersion?: string(name='AppVersion', description='The ID of the application version.', example='1.1'),
  authCode?: string(name='AuthCode', description='The authorization code. This authorization code is valid for 3 minutes and can be used only once, regardless of whether the authentication succeeds. If multiple authentication codes are generated for a user, only the latest authentication code takes effect.', example='e4e169bea1cc48e8afac53**********'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  userId?: string(name='UserId', description='The user ID.', example='__debug__'),
}

model GetDebugAppInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDebugAppInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDebugAppInstance  GetDebugAppInstanceRequest
  * @return GetDebugAppInstanceResponse
 */
async function getDebugAppInstance(request: GetDebugAppInstanceRequest): GetDebugAppInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDebugAppInstance', 'POST', '/', 'json', true, 'form', request);
}

model GetOtaTaskByTaskIdRequest {
  taskId: string(name='TaskId', description='The ID of the OTA update task. You can call the [ListAppInstanceGroup](https://help.aliyun.com/document_detail/428506.html) operation to obtain the ID.

This parameter is required.', example='ota-be7jzm29wrrz5****', position='Body'),
}

model GetOtaTaskByTaskIdResponseBody = {
  code?: string(name='Code', description='The error code.', example='OtaTask.Running'),
  message?: string(name='Message', description='The error message.', example='The task is running and cannot be sumitted.'),
  otaVersion?: string(name='OtaVersion', description='The OTA version.', example='0.0.1-R-20220708.110604'),
  releaseNote?: string(name='ReleaseNote', description='The version description.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  taskStartTime?: string(name='TaskStartTime', description='The execution time of the OTA update task. The time follows the ISO 8601 standard.

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-08-04T14:36:00+08:00'),
}

model GetOtaTaskByTaskIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOtaTaskByTaskIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOtaTaskByTaskId  GetOtaTaskByTaskIdRequest
  * @return GetOtaTaskByTaskIdResponse
 */
async function getOtaTaskByTaskId(request: GetOtaTaskByTaskIdRequest): GetOtaTaskByTaskIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOtaTaskByTaskId', 'POST', '/', 'json', true, 'form', request);
}

model GetResourcePriceRequest {
  amount: long(name='Amount', description='The number of resources to purchase.

This parameter is required.', example='1', position='Query'),
  appInstanceType?: string(name='AppInstanceType', description='The type ID of the sessions that you purchase. You can call the `ListAppInstanceType` operation to obtain the ID.

You must specify one of AppInstanceType and NodeInstanceType. If you specify both of the parameters, the value of NodeInstanceType takes effect.', example='appstreaming.general', position='Query'),
  bizRegionId: string(name='BizRegionId', description='The ID of the region where the delivery group resides. For information about the supported regions, see [Limits](https://help.aliyun.com/document_detail/426036.html).

Valid values:

*   cn-shanghai: China (Shanghai).
*   cn-hangzhou: China (Hangzhou)

This parameter is required.', example='cn-hangzhou', position='Query'),
  chargeType: string(name='ChargeType', description='The billing method.

Valid values:

*   PostPaid: pay-as-you-go
*   PrePaid: subscription

This parameter is required.', example='PrePaid', position='Query'),
  nodeInstanceType?: string(name='NodeInstanceType', description='The ID of the resource type that you purchase. You can call the [ListNodeInstanceType](https://help.aliyun.com/document_detail/428502.html) to obtain the ID.

You must specify one of AppInstanceType and NodeInstanceType. If you specify both of the parameters, the value of NodeInstanceType takes effect.

Valid values:

*   appstreaming.vgpu.8c16g.4g: WUYING - Graphics - 8 vCPUs, 16 GiB Memory, 4 GiB GPU Memory
*   appstreaming.general.8c16g: WUYING - General - 8 vCPUs, 16 GiB Memory
*   appstreaming.general.4c8g: WUYING - General - 4 vCPUs, 8 GiB Memory
*   appstreaming.vgpu.14c93g.12g: WUYING - Graphics - 14 vCPUs, 93 GiB Memory, 12 GiB GPU Memory.
*   appstreaming.vgpu.8c31g.16g: WUYING - Graphics - 8 vCPUs, 31 GiB Memory, 16 GiB GPU Memory', example='appstreaming.vgpu.4c8g.2g', position='Query'),
  period: long(name='Period', description='The subscription duration of resources. This parameter must be configured together with `PeriodUnit`.

This parameter is required.', example='1', position='Query'),
  periodUnit: string(name='PeriodUnit', description='The unit of the subscription duration. This parameter must be configured together with `Period`. The following items describe valid values for the combinations of `Period` and `PeriodUnit`:

*   1 Week
*   1 Month
*   2 Month
*   3 Month
*   6 Month
*   1 Year
*   2 Year
*   3 Year

>  The value of this parameter is case-insensitive. For example, `Week` is valid and `week` is invalid. If you specify a value combination other than the preceding combinations, such as `2 Week`, the operation can still be called. However, an error occurs when you place the order.

This parameter is required.', example='Week', position='Query'),
  productType: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp', position='Query'),
}

model GetResourcePriceResponseBody = {
  code?: string(name='Code', description='The error code.', example='InvalidParameter.ProductType'),
  message?: string(name='Message', description='The error message.', example='The parameter ProductType is invalid.'),
  priceList?: [ 
    {
      price?: {
        currency?: string(name='Currency', description='The currency type.', example='CNY'),
        discountPrice?: string(name='DiscountPrice', description='The discount. The actual price is calculated based on the following formula: Actual price = Original price - Discount.', example='999.0'),
        originalPrice?: string(name='OriginalPrice', description='The original price.', example='6700'),
        promotions?: [ 
          {
            optionCode?: string(name='OptionCode', description='The coupon code.', example='coupon****'),
            promotionDesc?: string(name='PromotionDesc', description='The coupon description.'),
            promotionId?: string(name='PromotionId', description='The coupon ID.', example='1847709****'),
            promotionName?: string(name='PromotionName', description='The coupon name.'),
            selected?: boolean(name='Selected', description='Indicates whether the coupon was used.

Valid values:

*   true
*   false', example='true'),
          }
        ](name='Promotions', description='The coupon metadata.'),
        tradePrice?: string(name='TradePrice', description='The actual price. The actual price is calculated based on the following formula: Actual price = Original price - Discount.', example='5278.0'),
      }(name='Price', description='The price details.'),
      priceType?: string(name='PriceType', description='The price type.

Valid values:

*   Connected: in use
*   Standby: pending for use.', example='Standby'),
      rules?: [ 
        {
          description?: string(name='Description', description='The description of the price calculation rule.'),
          ruleId?: long(name='RuleId', description='The ID of the price calculation rule.', example='260904273633****'),
        }
      ](name='Rules', description='The price calculation rules.'),
    }
  ](name='PriceList', description='The price objects.

This parameter is returned only if a value is specified for AppInstanceType.'),
  priceModel?: {
    price?: {
      currency?: string(name='Currency', description='The currency type.', example='CNY'),
      discountPrice?: string(name='DiscountPrice', description='The discount. The actual price is calculated based on the following formula: Actual price = Original price - Discount.', example='1.00'),
      originalPrice?: string(name='OriginalPrice', description='The original price.', example='11.00'),
      promotions?: [ 
        {
          optionCode?: string(name='OptionCode', description='The coupon code.', example='coupon****'),
          promotionDesc?: string(name='PromotionDesc', description='The coupon description.'),
          promotionId?: string(name='PromotionId', description='The coupon ID.', example='17440009****'),
          promotionName?: string(name='PromotionName', description='The coupon name.'),
          selected?: boolean(name='Selected', description='Indicates whether the coupon was used.

Valid values:

*   true
*   false', example='true'),
        }
      ](name='Promotions', description='The coupon metadata.'),
      tradePrice?: string(name='TradePrice', description='The actual price. The actual price is calculated based on the following formula: Actual price = Original price - Discount.', example='10.00'),
    }(name='Price', description='The price details.'),
    rules?: [ 
      {
        description?: string(name='Description', description='The description of the price calculation rule.'),
        ruleId?: long(name='RuleId', description='The ID of the price calculation rule.', example='102002100393****'),
      }
    ](name='Rules', description='The price calculation rules.'),
  }(name='PriceModel', description='The price object.

This parameter is returned only if a value is specified for NodeInstanceType.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model GetResourcePriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourcePriceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetResourcePrice  GetResourcePriceRequest
  * @return GetResourcePriceResponse
 */
async function getResourcePrice(request: GetResourcePriceRequest): GetResourcePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourcePrice', 'POST', '/', 'json', false, 'json', request);
}

model GetResourceRenewPriceRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='The ID of the delivery group. You can call the [ListAppInstanceGroup](https://help.aliyun.com/document_detail/428506.html) operation to obtain the ID.

This parameter is required.', example='aig-9ciijz60n4xsv****', position='Query'),
  period: long(name='Period', description='The subscription duration of resources. This parameter must be configured together with `PeriodUnit`.

This parameter is required.', example='1', position='Query'),
  periodUnit: string(name='PeriodUnit', description='The unit of the subscription duration. This parameter must be configured together with `Period`. The following items describe valid values for the combinations of `Period` and `PeriodUnit`:

*   1 Week
*   1 Month
*   2 Month
*   3 Month
*   6 Month
*   1 Year
*   2 Year
*   3 Year

>  The value of this parameter is case-insensitive. For example, `Week` is valid and `week` is invalid. If you specify a value combination other than the preceding combinations, such as `2 Week`, the operation can still be called. However, an error occurs when you place the order.

This parameter is required.', example='Week', position='Query'),
  productType: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp', position='Query'),
}

model GetResourceRenewPriceResponseBody = {
  data?: {
    price?: {
      currency?: string(name='Currency', description='The currency type.', example='CNY'),
      discountPrice?: string(name='DiscountPrice', description='The discount. The actual price is calculated based on the following formula: Actual price = Original price - Discount.', example='1'),
      originalPrice?: string(name='OriginalPrice', description='The original price.', example='11'),
      promotions?: [ 
        {
          optionCode?: string(name='OptionCode', description='The coupon code.', example='coupon****'),
          promotionDesc?: string(name='PromotionDesc', description='The coupon description.'),
          promotionId?: string(name='PromotionId', description='The coupon ID.', example='139965*****'),
          promotionName?: string(name='PromotionName', description='The coupon name.'),
          selected?: boolean(name='Selected', description='Indicates whether the coupon was used.

Valid values:

*   true
*   false', example='true'),
        }
      ](name='Promotions', description='The coupon description.'),
      tradePrice?: string(name='TradePrice', description='The actual price. The actual price is calculated based on the following formula: Actual price = Original price - Discount.', example='10'),
    }(name='Price', description='The price details.'),
    rules?: [ 
      {
        description?: string(name='Description', description='The description of the price calculation rule.'),
        ruleId?: long(name='RuleId', description='The ID of the price calculation rule.', example='20002****'),
      }
    ](name='Rules', description='The price calculation rules.'),
  }(name='Data', description='The price object.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model GetResourceRenewPriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceRenewPriceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetResourceRenewPrice  GetResourceRenewPriceRequest
  * @return GetResourceRenewPriceResponse
 */
async function getResourceRenewPrice(request: GetResourceRenewPriceRequest): GetResourceRenewPriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourceRenewPrice', 'POST', '/', 'json', false, 'json', request);
}

model ListAppInstanceGroupRequest {
  appCenterImageId?: string(name='AppCenterImageId', description='The image ID of the app. You can obtain the ID from the Images page in the App Streaming console.', example='img-8z4nztpaqvay4****', position='Query'),
  appInstanceGroupId?: string(name='AppInstanceGroupId', description='The ID of the delivery group.', example='aig-9ciijz60n4xsv****', position='Query'),
  appInstanceGroupName?: string(name='AppInstanceGroupName', description='The name of the delivery groups to query. Fuzzy match is used for queries. For example, if you set this parameter to `Office App`, all delivery groups whose names contain `Office App` are queried, such as `My Office Apps` and `Office App A`.', position='Query'),
  bizRegionId?: string(name='BizRegionId', description='The ID of the region where the delivery group resides. For information about the supported regions, see [Limits](https://help.aliyun.com/document_detail/426036.html).

Valid values:

*   cn-shanghai: China (Shanghai)
*   cn-hangzhou: China (Hangzhou)', example='cn-hangzhou', position='Query'),
  nodeInstanceType?: string(name='NodeInstanceType', description='The ID of the resource specification that you purchase. You can call the [ListNodeInstanceType](~~ListNodeInstanceType~~) operation to obtain the ID.', example='appstreaming.vgpu.4c8g.2g', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hongkong+dir-643067****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. The value cannot be greater than `100`.', example='10', minimum=1, maximum=100, position='Query'),
  productType: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp', position='Query'),
  regionId?: string(name='RegionId', description='The region ID', example='cn-hangzhou', deprecated='true', position='Query'),
  status?: [ string ](name='Status', description='The status of the delivery groups.', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model ListAppInstanceGroupResponseBody = {
  appInstanceGroupModels?: [ 
    {
      accessType?: string(name='AccessType', example='INTERNET'),
      amount?: int32(name='Amount', description='The number of subscription resources. Minimum value: 1.', example='1'),
      appCenterImageId?: string(name='AppCenterImageId', description='The image ID of the app.', example='img-8z4nztpaqvay4****'),
      appInstanceGroupId?: string(name='AppInstanceGroupId', description='The ID of the delivery group.', example='aig-9ciijz60n4xsv****'),
      appInstanceGroupName?: string(name='AppInstanceGroupName', description='The name of the delivery group.'),
      appInstanceType?: string(name='AppInstanceType', description='The resource type of the delivery group.', example='__dynamic__'),
      appPolicyId?: string(name='AppPolicyId', description='The policy ID.', example='pg-g3k5wa2ms2****'),
      appPolicyImageCheck?: boolean(name='AppPolicyImageCheck', example='false'),
      appPolicyVersion?: string(name='AppPolicyVersion', example='CENTER'),
      apps?: [ 
        {
          appIcon?: string(name='AppIcon', description='The app icon.', example='https://app-center-icon-****.png'),
          appId?: string(name='AppId', description='The app ID.', example='ca-i87mycyn419nu****'),
          appName?: string(name='AppName', description='The app name.'),
          appVersion?: string(name='AppVersion', description='The app version.', example='1.0.0'),
          appVersionName?: string(name='AppVersionName', description='The name of the app version.'),
        }
      ](name='Apps', description='The apps.'),
      authMode?: string(name='AuthMode', example='App'),
      chargeResourceMode?: string(name='ChargeResourceMode', description='The sales mode.

Valid values:

*   AppInstance: by session
*   Node: by resource', example='Node'),
      chargeType?: string(name='ChargeType', description='The billing method.

Valid values:

*   PostPaid: pay-as-you-go
*   PrePaid: subscription', example='PrePaid'),
      expiredTime?: string(name='ExpiredTime', description='The time when the delivery group expires.', example='2022-04-27T16:00:00.000+00:00'),
      gmtCreate?: string(name='GmtCreate', description='The time when the delivery group was created.', example='2022-04-26T15:06:16.000+00:00'),
      maxAmount?: int32(name='MaxAmount', description='The maximum number of instances. Minimum value: 1.', example='10'),
      minAmount?: int32(name='MinAmount', description='The minimum number of instances. Minimum value: 1.', example='1'),
      nodePool?: [ 
        {
          amount?: int32(name='Amount', description='The number of resources purchased when the delivery group was created.', example='2'),
          maxIdleAppInstanceAmount?: int32(name='MaxIdleAppInstanceAmount', description='The maximum number of idle sessions. After you specify a value for this parameter, auto scale-out is triggered only if the number of idle sessions in the delivery group is smaller than the specified value and the session usage exceeds the value specified for `ScalingUsageThreshold`. Otherwise, the system determines that idle sessions in the delivery group are sufficient and does not perform auto scale-out.`` You can use this parameter to flexibly manage auto scaling and reduce costs.', example='3'),
          maxScalingAmount?: int32(name='MaxScalingAmount', description='The maximum number of resources that can be created for scale-out.', example='8'),
          nodeAmount?: int32(name='NodeAmount', description='The total number of subscription resources.', example='1'),
          nodeCapacity?: int32(name='NodeCapacity', description='The maximum number of sessions that can be connected to a resource at the same time. If a resource connects to a large number of sessions at the same time, user experience can be compromised. The value range varies based on the resource specification. The following items describe the value ranges of different resource types:

*   appstreaming.general.4c8g: 1 to 2
*   appstreaming.general.8c16g: 1 to 4
*   appstreaming.vgpu.8c16g.4g: 1 to 4
*   appstreaming.vgpu.8c31g.16g: 1 to 4
*   appstreaming.vgpu.14c93g.12g: 1 to 6', example='2'),
          nodeInstanceType?: string(name='NodeInstanceType', description='The ID of the resource specification that you purchase.', example='appstreaming.vgpu.4c8g.2g'),
          nodePoolId?: string(name='NodePoolId', description='The ID of the resource group.', example='rg-g6922kced36hx****'),
          nodeTypeName?: string(name='NodeTypeName', description='The name of the resource specification.'),
          nodeUsed?: int32(name='NodeUsed', description='The number of subscription resources that are in use.', example='1'),
          recurrenceSchedules?: [ 
            {
              recurrenceType?: string(name='RecurrenceType', description='The schedule type of the scaling policy. This parameter must be configured together with `RecurrenceValues`.``

Valid value:

*   weekly: The scaling policy is executed on specific days each week.', example='Weekly'),
              recurrenceValues?: [ int32 ](name='RecurrenceValues', description='The days of each week on which the scaling policy is executed.'),
              timerPeriods?: [ 
                {
                  amount?: int32(name='Amount', description='The number of destination resources.', example='5'),
                  endTime?: string(name='EndTime', description='The time when the scaling policy ends. Format: HH:mm.', example='11:00'),
                  startTime?: string(name='StartTime', description='The time when the scaling policy starts. Format: HH:mm.', example='09:30'),
                }
              ](name='TimerPeriods', description='The time periods during which the scaling policy can be executed.'),
            }
          ](name='RecurrenceSchedules', description='The intervals at which the scaling policy is executed.'),
          scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes', description='The duration for which no session is connected. Unit: minutes. If no session is connected in the resources after the specified duration elapses, auto scale-in is triggered. Default value: 5.', example='5'),
          scalingNodeAmount?: int32(name='ScalingNodeAmount', description='The total number of scalable resources.', example='8'),
          scalingNodeUsed?: int32(name='ScalingNodeUsed', description='The number of scalable resources that are in use.', example='4'),
          scalingStep?: int32(name='ScalingStep', description='The number of resources that are created each time resources are scaled out. Valid values: 1 to 10.', example='2'),
          scalingUsageThreshold?: string(name='ScalingUsageThreshold', description='The upper limit of session usage. If the session usage exceeds the specified upper limit, auto scale-out is triggered. The session usage is calculated by using the following formula: `Session usage = Number of current sessions/(Total number of resources × Number of concurrent sessions) × 100%`.', example='85'),
          strategyDisableDate?: string(name='StrategyDisableDate', description='The expiration date of the scaling policy. Format: yyyy-MM-dd.', example='2022-09-08'),
          strategyEnableDate?: string(name='StrategyEnableDate', description='The effective date of the scaling policy. Format: yyyy-MM-dd.', example='2022-08-01'),
          strategyType?: string(name='StrategyType', description='The type of the scaling policy.

>  `NODE_SCALING_BY_USAGE` is returned for this parameter only if ChargeType is set to `PrePaid`. `NODE_SCALING_BY_SCHEDULE` is returned for this parameter only if ChargeType is set to `PostPaid`.

Valid values:

*   NODE_FIXED: No scalable resources are used.
*   NODE_SCALING_BY_SCHEDULE: Scheduled scaling is used.
*   NODE_SCALING_BY_USAGE: Resources are scaled based on usage.', example='NODE_FIXED'),
          warmUp?: boolean(name='WarmUp', description='Indicates whether resource prefetch is enabled.', example='false'),
        }
      ](name='NodePool', description='The resource groups.'),
      officeSiteId?: string(name='OfficeSiteId', example='cn-beijing+dir-172301****'),
      osType?: string(name='OsType', description='The type of the operating system.

Valid value:

*   Windows', example='Windows'),
      otaInfo?: {
        newOtaVersion?: string(name='NewOtaVersion', description='The new OTA version. A null value indicates that no new version is available.', example='0.0.1-D-20220630.11****'),
        otaVersion?: string(name='OtaVersion', description='The current OTA version.', example='0.0.1-D-20220615.11****'),
        taskId?: string(name='TaskId', description='The ID of the OTA update task.', example='ota-e49929gv8acz5****'),
      }(name='OtaInfo', description='The information about the over-the-air (OTA) update task.'),
      productType?: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming', example='CloudApp'),
      regionId?: string(name='RegionId', description='The ID of the region where the delivery group resides. For information about the supported regions, see [Limits](https://help.aliyun.com/document_detail/426036.html).', example='cn-hangzhou'),
      reserveAmountRatio?: string(name='ReserveAmountRatio', description='The percentage of reserved instances. The value indicates the percentage of unused sessions in the delivery group. Valid values: 0 to 99.', example='20'),
      reserveMaxAmount?: int32(name='ReserveMaxAmount', description='The maximum number of reserved instances. The value indicates the maximum number of unused sessions in the delivery group. Minimum value: 1.', example='5'),
      reserveMinAmount?: int32(name='ReserveMinAmount', description='The minimum number of reserved instances. The value indicates the minimum number of unused sessions in the delivery group. Minimum value: 1.', example='1'),
      resourceStatus?: string(name='ResourceStatus', description='The resource status.

Valid values:

*   AVAILABLE
*   RELEASED
*   EXPIRED_IN_7_DAYS
*   UNAVAILABLE
*   UPGRADING
*   CREATING', example='AVAILABLE'),
      resourceTags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='department'),
          scope?: string(name='Scope', description='The tag type. Valid values: Custom System', example='Custom'),
          value?: string(name='Value', description='The tag value.', example='design'),
        }
      ](name='ResourceTags', description='The resource tags.'),
      scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes', description='The duration for which no session is connected. Unit: minutes. If no session is connected in the resources after the specified duration elapses, auto scale-in is triggered. Minimum value: 0.', example='5'),
      scalingStep?: int32(name='ScalingStep', description='The number of sessions that are created each time the delivery group is scaled out. Minimum value: 1.', example='10'),
      scalingUsageThreshold?: string(name='ScalingUsageThreshold', description='The upper limit of session usage. If the session usage exceeds the specified upper limit, auto scale-out is triggered. The session usage rate is calculated by using the following formula: Session usage rate = Number of sessions in use/Total number of sessions × 100%. Valid values: 0 to 99.', example='85'),
      sessionTimeout?: string(name='SessionTimeout', description='The duration for which sessions are retained after disconnection. Unit: minutes. After an end user disconnects from a session, the session is closed only after the specified duration elapses. If you want to permanently retain sessions, set this parameter to `-1`. Valid values:-1 and 3 to 300. Default value: `15`.', example='15'),
      skipUserAuthCheck?: boolean(name='SkipUserAuthCheck', description='Indicates whether user permission verification is skipped.

Valid values:

*   true
*   false: This is the default value.', example='false'),
      specId?: string(name='SpecId', description='The specification ID that uniquely corresponds to the ID of the delivery group.', example='spec-8o18t8uc31qib0****'),
      status?: string(name='Status', description='The status of the delivery group.

Valid values:

*   PUBLISHED: The delivery group is published.
*   FAILED: The delivery group failed to be published.
*   MAINTAIN_FAILED: The delivery group failed to be updated.
*   EXPIRED: The delivery group is expired.
*   MAINTAINING: The delivery group is being updated.
*   CEASED: The delivery group has overdue payments.
*   EXPIRED_RECYCLING: The delivery group is expired and being recycled.
*   DEPLOYING: The delivery group is being published.', example='PUBLISHED'),
      tags?: [ 
        {
          key?: string(name='Key'),
          scope?: string(name='Scope'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
    }
  ](name='AppInstanceGroupModels', description='The delivery groups.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='15'),
}

model ListAppInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAppInstanceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAppInstanceGroup  ListAppInstanceGroupRequest
  * @return ListAppInstanceGroupResponse
 */
async function listAppInstanceGroup(request: ListAppInstanceGroupRequest): ListAppInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAppInstanceGroup', 'POST', '/', 'json', true, 'form', request);
}

model ListAppInstancesRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='The ID of the delivery group.

This parameter is required.', example='aig-4p5f8tj16yb8b****', position='Query'),
  appInstanceId?: string(name='AppInstanceId', description='The ID of the application instance.', example='ai-azn3kmwruh1vl****', position='Query'),
  appInstanceIdList?: [ string ](name='AppInstanceIdList', description='The IDs of the application instances. Up to 100 IDs can be specified.', position='Body'),
  includeDeleted?: boolean(name='IncludeDeleted', description='Specifies whether to query the information about deleted app instances. If you set this parameter to true, you must configure AppInstanceIdList. Otherwise, a parameter error is reported.

Valid values:

*   true
*   false', example='true', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: `1`. We recommend that you specify this parameter.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. The value cannot be greater than `100`. Default value: `20`. We recommend that you specify this parameter.', example='20', minimum=1, maximum=100, position='Query'),
  status?: [ string ](name='Status', description='The status of the application instances.', position='Body'),
  userIdList?: [ string ](name='UserIdList', description='The user IDs. You can specify up to 100 IDs.', position='Query'),
}

model ListAppInstancesResponseBody = {
  appInstanceModels?: [ 
    {
      appInstanceGroupId?: string(name='AppInstanceGroupId', description='The ID of the delivery group.', example='aig-dk8p95irqfst9****'),
      appInstanceId?: string(name='AppInstanceId', description='The ID of the application instance.', example='ai-8dl7dzchklmka****'),
      bindInfo?: {
        endUserId?: string(name='EndUserId', description='The ID of the end user that is bound to the application instance.', example='app.test'),
        usageDuration?: long(name='UsageDuration', description='The use duration of the application instance. Unit: seconds.', example='2000'),
      }(name='BindInfo', description='The information about the binding between the application instance and end users.'),
      chargeType?: string(name='ChargeType', description='The billing method of the app instance. Valid values:

*   **PrePaid**: subscription.
*   **PostPaid**: pay-as-you-go

>  This parameter is returned only if the ChargeResourceMode parameter of the delivery group to which the app instance belongs is set to Node.', example='PostPaid'),
      gmtCreate?: string(name='GmtCreate', description='The time when the application instance was created.', example='2023-03-07T20:29:19.000+08:00'),
      gmtModified?: string(name='GmtModified', description='The time when the application instance was updated.', example='2023-03-07T20:29:19.000+08:00'),
      mainEthPublicIp?: string(name='MainEthPublicIp', description='The public IP address associated with the primary NIC. This value is returned only if `StrategyType` is set to `Mixed`.', example='10.13.13.211'),
      networkInterfaceIp?: string(name='NetworkInterfaceIp'),
      nodeId?: string(name='NodeId', description='The ID of the node on which the app instance runs.

>  This parameter is returned only if the ChargeResourceMode parameter of the delivery group to which the app instance belongs is set to Node.', example='i-bp13********'),
      sessionStatus?: string(name='SessionStatus', description='The session status. This parameter is returned only if the application instance is in the `RUNNING` state.

Valid values:

*   disconnect: disconnected
*   connect: connected', example='connect'),
      status?: string(name='Status', description='The status of the application instance.', example='BOUND'),
    }
  ](name='AppInstanceModels', description='The app instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page. We recommend that you configure this parameter.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on each page. The value cannot be greater than `100`. We recommend that you configure this parameter.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='18'),
}

model ListAppInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAppInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAppInstances  ListAppInstancesRequest
  * @return ListAppInstancesResponse
 */
async function listAppInstances(request: ListAppInstancesRequest): ListAppInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAppInstances', 'POST', '/', 'json', true, 'form', request);
}

model ListAuthorizedUserGroupsRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='This parameter is required.', example='aig-9ciijz60n4xsv****', position='Body'),
  groupId?: string(name='GroupId', example='ug-00001', position='Body'),
  groupName?: string(name='GroupName', position='Body'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', minimum=1, position='Body'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', maximum=100, position='Body'),
  productType: string(name='ProductType', description='This parameter is required.', example='CloudApp', position='Body'),
}

model ListAuthorizedUserGroupsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  totalCount?: int32(name='TotalCount', example='6'),
  userGroups?: [ 
    {
      appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
      authMode?: string(name='AuthMode', example='App'),
      groupId?: string(name='GroupId', example='ug-00001'),
      groupName?: string(name='GroupName'),
    }
  ](name='UserGroups'),
}

model ListAuthorizedUserGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAuthorizedUserGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAuthorizedUserGroups  ListAuthorizedUserGroupsRequest
  * @return ListAuthorizedUserGroupsResponse
 */
async function listAuthorizedUserGroups(request: ListAuthorizedUserGroupsRequest): ListAuthorizedUserGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAuthorizedUserGroups', 'POST', '/', 'json', true, 'form', request);
}

model ListBindInfoRequest {
  appIdList?: [ string ](name='AppIdList', position='Body'),
  appInstanceGroupIdList?: [ string ](name='AppInstanceGroupIdList', position='Body'),
  appInstanceIdList?: [ string ](name='AppInstanceIdList', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Body'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Body'),
  userIdList?: [ string ](name='UserIdList', position='Body'),
  wyIdList?: [ string ](name='WyIdList', position='Body'),
}

model ListBindInfoResponseBody = {
  bindInfoModels?: [ 
    {
      accountType?: string(name='AccountType', example='simple'),
      appId?: string(name='AppId', example='ca-fq738or6vd854****'),
      appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-0abxhr6ce35w8****'),
      appInstanceId?: string(name='AppInstanceId', example='ai-83oe276fre4l3****'),
      appVersion?: string(name='AppVersion', example='1.0'),
      productType?: string(name='ProductType', example='CloudApp'),
      regionId?: string(name='RegionId', example='cn-shanghai'),
      userId?: string(name='UserId', example='Alice'),
      wyId?: string(name='WyId', example='2ca6f5a93536****'),
    }
  ](name='BindInfoModels'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='AD2D0761-1FE5-549D-B169-D3F8D19C****'),
  totalCount?: int32(name='TotalCount', example='15'),
}

model ListBindInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBindInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListBindInfo  ListBindInfoRequest
  * @return ListBindInfoResponse
 */
async function listBindInfo(request: ListBindInfoRequest): ListBindInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBindInfo', 'POST', '/', 'json', true, 'form', request);
}

model ListNodeInstanceTypeRequest {
  bizRegionId?: string(name='BizRegionId', description='The ID of the region where the resource resides. For information about the supported regions, see [Limits](https://help.aliyun.com/document_detail/426036.html).

Valid values:

*   cn-shanghai: China (Shanghai)
*   cn-hangzhou: China (Hangzhou)', example='cn-hangzhou', position='Query'),
  cpu?: float(name='Cpu', position='Query'),
  gpu?: float(name='Gpu', position='Query'),
  gpuMemory?: int32(name='GpuMemory', position='Query'),
  language?: string(name='Language', description='The language that you want to use.

Valid values:

*   en-US: English (US)
*   zh-CN: Simplified Chinese', example='zh-CN', position='Query'),
  memory?: int32(name='Memory', position='Query'),
  nodeInstanceType?: string(name='NodeInstanceType', description='The resource type that you want to query. If you do not configure this parameter, all resource types are returned.', example='appstreaming.vgpu.4c8g.2g', position='Query'),
  nodeInstanceTypeFamily?: string(name='NodeInstanceTypeFamily', position='Query'),
  orderBy?: string(name='OrderBy', position='Query'),
  osType?: string(name='OsType', description='The operating system that is supported.

Valid value:

*   Windows: the Windows operating system', example='Windows', position='Query'),
  pageNumber: int32(name='PageNumber', description='The number of the page to return.

This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 100.

This parameter is required.', example='10', minimum=1, maximum=100, position='Query'),
  productType: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp', position='Query'),
  sortType?: string(name='SortType', position='Query'),
}

model ListNodeInstanceTypeResponseBody = {
  nodeInstanceTypeModels?: [ 
    {
      cpu?: string(name='Cpu', description='The number of vCPUs.', example='4'),
      gpu?: string(name='Gpu', description='The number of GPUs.', example='2'),
      gpuMemory?: long(name='GpuMemory', description='The GPU size. Unit: MB.', example='8192'),
      maxCapacity?: int32(name='MaxCapacity', description='The maximum number of sessions to which a resource can connect at the same time. If a resource connects to a large number of sessions at the same time, user experience can be compromised. The value range varies based on the resource type. The following items describe the value ranges of different resource types:

*   appstreaming.general.4c8g: 1 to 2
*   appstreaming.general.8c16g: 1 to 4
*   appstreaming.vgpu.8c16g.4g: 1 to 4
*   appstreaming.vgpu.8c31g.16g: 1 to 4
*   appstreaming.vgpu.14c93g.12g: 1 to 6', example='4'),
      memory?: long(name='Memory', description='The memory size. Unit: MB.', example='8192'),
      nodeInstanceType?: string(name='NodeInstanceType', description='The ID of the resource type.', example='appstreaming.vgpu.4c8g.2g'),
      nodeInstanceTypeFamily?: string(name='NodeInstanceTypeFamily', description='The resource type family.

Valid values:

*   appstreaming.general: WUYING - General
*   appstreaming.vgpu: WUYING - Graphics', example='appstreaming.vgpu'),
      nodeTypeName?: string(name='NodeTypeName', description='The name of the resource type.', example='WUYING - General - 4 vCPUs 8 GB Memory'),
    }
  ](name='NodeInstanceTypeModels', description='The resource types.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries on each page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='6'),
}

model ListNodeInstanceTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodeInstanceTypeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNodeInstanceType  ListNodeInstanceTypeRequest
  * @return ListNodeInstanceTypeResponse
 */
async function listNodeInstanceType(request: ListNodeInstanceTypeRequest): ListNodeInstanceTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNodeInstanceType', 'POST', '/', 'json', false, 'json', request);
}

model ListNodesRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='The ID of the delivery group.

This parameter is required.', example='aig-53fvrq1oanz6c****', position='Body'),
  pageNumber: int32(name='PageNumber', description='The page number. Pages start from page 1.

This parameter is required.', example='1', position='Body'),
  pageSize: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 200.

This parameter is required.', example='10', position='Body'),
  productType: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp', position='Body'),
}

model ListNodesResponseBody = {
  count?: int32(name='Count', description='The total number of entries returned.', example='100'),
  nodeModels?: [ 
    {
      chargeType?: string(name='ChargeType', description='The billing method of the resource node.

>  This parameter is returned only if the ChargeResourceMode parameter of the delivery group to which the resource node belongs is set to Node.

Valid values:

*   PostPaid: pay-as-you-go
*   Prepaid: subscription', example='PostPaid'),
      nodeId?: string(name='NodeId', description='The ID of the resource node.

>  This parameter is returned only if the ChargeResourceMode parameter of the delivery group to which the resource node belongs is set to Node.', example='i-bp13********'),
    }
  ](name='NodeModels', description='The resource nodes.'),
  perPageSize?: int32(name='PerPageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  toPage?: int32(name='ToPage', description='The page number.', example='1'),
}

model ListNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNodes  ListNodesRequest
  * @return ListNodesResponse
 */
async function listNodes(request: ListNodesRequest): ListNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNodes', 'POST', '/', 'json', true, 'form', request);
}

model ListOtaTaskRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='The ID of the delivery group.

This parameter is required.', example='aig-53fvrq1oanz6c****', position='Body'),
  otaType: string(name='OtaType', description='The type of the OTA update task.

Valid values:

*   Fota: update of the system components of Alibaba Cloud Workspace

This parameter is required.', example='Fota', position='Body'),
  pageNumber: int32(name='PageNumber', description='The page number of the page to return.

This parameter is required.', example='1', position='Body'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 100.

This parameter is required.', example='10', minimum=1, maximum=100, position='Body'),
}

model ListOtaTaskResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries on each page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  taskList?: [ 
    {
      otaVersion?: string(name='OtaVersion', description='The OTA version.', example='0.0.1-R-20220708.110604'),
      taskDisplayStatus?: string(name='TaskDisplayStatus', description='The task status.

Valid values:

*   FAILED
*   RUNNING
*   TERMINATED
*   PART_FINISHED
*   STANDBY
*   FINISHED', example='RUNNING'),
      taskId?: string(name='TaskId', description='The task ID.', example='ota-be7jzm29wrrz5****'),
      taskStartTime?: string(name='TaskStartTime', description='The start time of the OTA update task. The time follows the ISO 8601 standard.

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-08-04T14:36:00+08:00'),
    }
  ](name='TaskList', description='The OTA update tasks.'),
  totalCount?: int32(name='TotalCount', description='The total number of OTA update tasks.', example='6'),
}

model ListOtaTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOtaTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOtaTask  ListOtaTaskRequest
  * @return ListOtaTaskResponse
 */
async function listOtaTask(request: ListOtaTaskRequest): ListOtaTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOtaTask', 'POST', '/', 'json', true, 'form', request);
}

model ListPersistentAppInstancesRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='This parameter is required.', example='aig-0bxls9m9arax6****', position='Query'),
  appInstancePersistentIds?: [ string ](name='AppInstancePersistentIds', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=100, position='Query'),
  productType: string(name='ProductType', description='This parameter is required.', example='CloudApp', position='Query'),
}

model ListPersistentAppInstancesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  persistentAppInstanceModels?: [ 
    {
      appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-0bxls9m9arax6****'),
      appInstanceId?: string(name='AppInstanceId', example='ai-azn3kmwruh1vl****'),
      appInstancePersistentId?: string(name='AppInstancePersistentId', example='p-0cc7s3mw2fg4j****'),
      appInstancePersistentName?: string(name='AppInstancePersistentName', example='test-persistent-name'),
      appInstancePersistentStatus?: string(name='AppInstancePersistentStatus', example='RUNNING'),
      appInstanceStatus?: string(name='AppInstanceStatus', example='RUNNING'),
      authorizedUsers?: [ string ](name='AuthorizedUsers'),
      gmtCreate?: string(name='GmtCreate', example='2025-03-13T03:22:18.000+00:00'),
    }
  ](name='PersistentAppInstanceModels'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  totalCount?: int32(name='TotalCount', example='15'),
}

model ListPersistentAppInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPersistentAppInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPersistentAppInstances  ListPersistentAppInstancesRequest
  * @return ListPersistentAppInstancesResponse
 */
async function listPersistentAppInstances(request: ListPersistentAppInstancesRequest): ListPersistentAppInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPersistentAppInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListRegionsRequest {
  bizSource?: string(name='BizSource', description='>  This parameter is not publicly available.', example='null', position='Query'),
  productType?: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming', example='CloudApp', position='Query'),
}

model ListRegionsResponseBody = {
  regionModels?: [ 
    {
      regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou'),
    }
  ](name='RegionModels', description='The region IDs.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ListRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRegionsResponseBody(name='body'),
}

/**
  * @description >  All supported regions instead of available regions are returned by this operation. For more information, see [Supported regions](https://help.aliyun.com/document_detail/426036.html).
  * @param request  the request parameters of ListRegions  ListRegionsRequest
  * @return ListRegionsResponse
 */
async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListTagCloudResourcesRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Maximum value: 1000. Default value: 50.', example='50', minimum=1, maximum=1000, position='Body'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='ptnJAAAAAAAxNzE5OTEwNQ==', position='Body'),
  resourceIds?: [ string ](name='ResourceIds', description='The resource IDs. You can specify up to 50 resource IDs. You do not need to specify this parameter if you set ResourceType to AliUid.', position='Body'),
  resourceType: string(name='ResourceType', description='The type of the cloud resource.

Valid values:

*   AppId: app ID.
*   WyId: Alibaba Cloud Workspace user ID.
*   AppInstanceGroupId: delivery group ID.
*   AliUid: tenant ID.

This parameter is required.', example='AppInstanceGroupId', position='Body'),
  scope?: string(name='Scope', description='The tag type.

Valid values:

*   All (default): all tags.
*   Custom: custom tag.
*   System: system tag.', example='Custom', maxLength=20, position='Body'),
}

model ListTagCloudResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='Indicates whether the next query is required.', example='AAAAAYRHtOLVQzCYj17y+OP7LZRrUJaF4rnBGQkWwMiVHlLZBB1w3Us37CVvhvyM0TXavA=='),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  resourceTags?: [ 
    {
      resourceId?: string(name='ResourceId', description='The resource ID.', example='aig-0001'),
      resourceType?: string(name='ResourceType', description='The type of the cloud resource.

Valid values:

*   AppId: app ID.
*   WyId: Alibaba Cloud Workspace user ID.
*   AppInstanceGroupId: delivery group ID.
*   AliUid: tenant ID.', example='AppInstanceGroupId'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='Resolution'),
          scope?: string(name='Scope', description='The tag type.

Valid values:

*   Custom: custom tag.
*   System: system tag.', example='Custom'),
          value?: string(name='Value', description='The tag value.', example='1080p'),
        }
      ](name='Tags', description='The tags.'),
    }
  ](name='ResourceTags', description='The tags added to the cloud resources.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries.', example='15'),
}

model ListTagCloudResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagCloudResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTagCloudResources  ListTagCloudResourcesRequest
  * @return ListTagCloudResourcesResponse
 */
async function listTagCloudResources(request: ListTagCloudResourcesRequest): ListTagCloudResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagCloudResources', 'POST', '/', 'json', true, 'form', request);
}

model ListTenantConfigRequest {
}

model ListTenantConfigResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  tenantConfigModel?: {
    appInstanceGroupExpireRemind?: boolean(name='AppInstanceGroupExpireRemind', description='Indicates whether the resource expiration reminder feature is enabled.

Valid values:

*   true
*   false', example='true'),
  }(name='TenantConfigModel', description='The user configurations.'),
}

model ListTenantConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTenantConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTenantConfig  ListTenantConfigRequest
  * @return ListTenantConfigResponse
 */
async function listTenantConfig(request: ListTenantConfigRequest): ListTenantConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTenantConfig', 'POST', '/', 'json', false, 'json', request);
}

model ListWuyingServerRequest {
  bizRegionId?: string(name='BizRegionId', example='cn-hangzhou', position='Body'),
  chargeType?: string(name='ChargeType', example='PrePaid', position='Body'),
  imageId?: string(name='ImageId', example='img-bp13mu****', position='Body'),
  officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-172301****', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='100', minimum=1, maximum=100, position='Body'),
  serverInstanceType?: string(name='ServerInstanceType', example='eds.proworkstation_flagship_elite.32c64g.48g1x', position='Body'),
  status?: string(name='Status', example='RUNNING', position='Body'),
  wuyingServerIdList?: [ string ](name='WuyingServerIdList', position='Body'),
  wuyingServerNameOrId?: string(name='WuyingServerNameOrId', example='exampleServerName', position='Body'),
}

model ListWuyingServerResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  totalCount?: int32(name='TotalCount', example='15'),
  wuyingServerList?: [ 
    {
      bizRegionId?: string(name='BizRegionId', example='cn-hangzhou'),
      chargeType?: string(name='ChargeType', example='PrePaid'),
      createTime?: string(name='CreateTime', example='2025-08-02T16:52:11.000+00:00'),
      dataDisk?: [ 
        {
          dataDiskCategory?: string(name='DataDiskCategory', example='cloud_auto'),
          dataDiskPerformanceLevel?: string(name='DataDiskPerformanceLevel', example='PL0'),
          dataDiskSize?: int32(name='DataDiskSize', example='200'),
        }
      ](name='DataDisk'),
      expiredTime?: string(name='ExpiredTime', example='2025-09-03T16:00:00.000+00:00'),
      imageId?: string(name='ImageId', example='imgc-06****oagaev'),
      imageName?: string(name='ImageName'),
      instanceInfoList?: [ 
        {
          instanceId?: string(name='InstanceId', example='p-0ceitx****c5'),
          networkInterfaceId?: string(name='NetworkInterfaceId', example='eni-uf65b****dfnt3wb'),
        }
      ](name='InstanceInfoList'),
      networkInterfaceIp?: string(name='NetworkInterfaceIp', example='10.80.21.149'),
      officeSiteId?: string(name='OfficeSiteId', example='cn-hangzhou+dir-1b****ayv2'),
      officeSiteName?: string(name='OfficeSiteName', example='exampleOfficeSite'),
      officeSiteType?: string(name='OfficeSiteType', example='SIMPLE'),
      osType?: string(name='OsType', example='Linux'),
      serverInstanceTypeInfo?: {
        cpu?: string(name='Cpu', example='96'),
        gpu?: string(name='Gpu', example='4'),
        gpuMemory?: int32(name='GpuMemory', example='196,608'),
        memory?: int32(name='Memory', example='393,216'),
        serverInstanceType?: string(name='ServerInstanceType', example='eds.proworkstation_flagship_elite_ne.96c384g.192g4x'),
      }(name='ServerInstanceTypeInfo'),
      status?: string(name='Status', example='RUNNING'),
      systemDiskCategory?: string(name='SystemDiskCategory', example='cloud_auto'),
      systemDiskPerformanceLevel?: string(name='SystemDiskPerformanceLevel', example='PL0'),
      systemDiskSize?: int32(name='SystemDiskSize', example='100'),
      wuyingServerId?: string(name='WuyingServerId', example='ws-0byd****8wn2lwi'),
      wuyingServerName?: string(name='WuyingServerName', example='exampleServerName'),
    }
  ](name='WuyingServerList'),
}

model ListWuyingServerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWuyingServerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWuyingServer  ListWuyingServerRequest
  * @return ListWuyingServerResponse
 */
async function listWuyingServer(request: ListWuyingServerRequest): ListWuyingServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWuyingServer', 'POST', '/', 'json', true, 'form', request);
}

model LogOffAllSessionsInAppInstanceGroupRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='The ID of the delivery group.

This parameter is required.', example='aig-9ciijz60n4xsv****', position='Body'),
  productType: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp', position='Body'),
}

model LogOffAllSessionsInAppInstanceGroupResponseBody = {
  code?: string(name='Code', description='The error code.', example='InvalidParameter.ProductType'),
  message?: string(name='Message', description='The error message.', example='The parameter ProductType is invalid.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model LogOffAllSessionsInAppInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LogOffAllSessionsInAppInstanceGroupResponseBody(name='body'),
}

/**
  * @description >  This operation can be called only if you use a pay-as-you-go delivery group for which a scheduled scaling policy is used and if you call the operation at a time other than the scheduled time.
  * @param request  the request parameters of LogOffAllSessionsInAppInstanceGroup  LogOffAllSessionsInAppInstanceGroupRequest
  * @return LogOffAllSessionsInAppInstanceGroupResponse
 */
async function logOffAllSessionsInAppInstanceGroup(request: LogOffAllSessionsInAppInstanceGroupRequest): LogOffAllSessionsInAppInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LogOffAllSessionsInAppInstanceGroup', 'POST', '/', 'json', true, 'form', request);
}

model ModifyAppInstanceGroupAttributeRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='The ID of the delivery group.

This parameter is required.', example='aig-9ciijz60n4xsv****', position='Query'),
  appInstanceGroupName?: string(name='AppInstanceGroupName', description='The name of the delivery group.', position='Query'),
  network?: {
    domainRules?: [ 
      {
        domain?: string(name='Domain', description='The domain name.', example='www.example.com'),
        policy?: string(name='Policy', description='The policy used for the domain name.

Valid values:

*   allow
*   block', example='block'),
      }
    ](name='DomainRules', description='The domain name rules.'),
  }(name='Network', description='The network settings.

>  If you want to use this parameter, submit a ticket.', shrink='json', position='Body'),
  nodePool?: {
    nodeCapacity?: int32(name='NodeCapacity', description='The maximum number of sessions to which a resource can connect at the same time. If a resource connects to a large number of sessions at the same time, user experience can be compromised. The value range varies based on the resource type. The following items describe the value ranges of different resource types:

*   appstreaming.general.4c8g: 1 to 2
*   appstreaming.general.8c16g: 1 to 4
*   appstreaming.vgpu.8c16g.4g: 1 to 4
*   appstreaming.vgpu.8c31g.16g: 1 to 4
*   appstreaming.vgpu.14c93g.12g: 1 to 6', example='2'),
    nodePoolId?: string(name='NodePoolId', description='The ID of the resource group.', example='rg-ew7va2g1wl3vm****'),
  }(name='NodePool', description='The information about the resource group.', shrink='json', position='Query'),
  perSessionPerApp?: boolean(name='PerSessionPerApp', description='Specifies whether only one application can be opened in a session.

*   After you enable this feature, the system assigns a session to each application if you open multiple applications in a delivery group. This consumes a larger number of sessions.

Valid values:

*   true
*   false', example='false', position='Body'),
  preOpenAppId?: string(name='PreOpenAppId', description='The application ID of the pre-open application. If you set `PreOpenMode` to `SINGLE_APP`, you cannot leave this parameter empty.``', example='ca-b2ronxxd****', position='Body'),
  preOpenMode?: string(name='PreOpenMode', description='The pre-open mode.

Valid values:

*   SINGLE_APP: enables the pre-open mode for a single application.
*   OFF: disables the pre-open mode. This is the default value.', example='OFF', position='Body'),
  productType: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp', position='Query'),
  securityPolicy?: {
    resetAfterUnbind?: boolean(name='ResetAfterUnbind', description='Specifies whether to reset after unbinding from a delivery group.

Valid values:

*   true
*   false', example='true'),
    skipUserAuthCheck?: boolean(name='SkipUserAuthCheck', description='Specifies whether to skip user permission verification.

Valid values:

*   true
*   false: This is the default value.', example='false'),
  }(name='SecurityPolicy', description='The security policy.', shrink='json', position='Body'),
  sessionTimeout?: int32(name='SessionTimeout', description='The duration for which sessions are retained after disconnection. Unit: minutes. After an end user disconnects from a session, the session is closed only after the specified duration elapses. If you want to permanently retain sessions, set this parameter to `-1`. Valid values:-1 and 3 to 300. Default value: `15`.', example='15', maximum=300, position='Query'),
  storagePolicy?: {
    storageTypeList?: [ string ](name='StorageTypeList', description='The storage types.'),
    userProfile?: {
      fileSystemId?: string(name='FileSystemId', description='The ID of the File Storage NAS (NAS) file system used to store user data.', example='06ae94****'),
      userProfileSwitch?: boolean(name='UserProfileSwitch', description='Specifies whether user data roaming is enabled.

Valid values:

*   true
*   false', example='false'),
    }(name='UserProfile', description='The configurations of user data roaming.'),
    userProfileFollow?: {
      fileSystemId?: string(name='FileSystemId'),
      profileFollowSwitch?: boolean(name='ProfileFollowSwitch'),
    }(name='UserProfileFollow'),
  }(name='StoragePolicy', description='The storage policy.', shrink='json', position='Body'),
}

model ModifyAppInstanceGroupAttributeResponseBody = {
  code?: string(name='Code', description='The error code.', example='InvalidParameter.ProductType'),
  message?: string(name='Message', description='The error message.', example='The parameter ProductType is invalid.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyAppInstanceGroupAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAppInstanceGroupAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAppInstanceGroupAttribute  ModifyAppInstanceGroupAttributeRequest
  * @return ModifyAppInstanceGroupAttributeResponse
 */
async function modifyAppInstanceGroupAttribute(request: ModifyAppInstanceGroupAttributeRequest): ModifyAppInstanceGroupAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAppInstanceGroupAttribute', 'POST', '/', 'json', true, 'form', request);
}

model ModifyAppPolicyRequest {
  appPolicyId: string(name='AppPolicyId', description='This parameter is required.', example='pg-ee2znjktwgxu2****', position='Query'),
  productType: string(name='ProductType', description='This parameter is required.', example='CloudApp', position='Query'),
  videoPolicy?: {
    frameRate?: int32(name='FrameRate', example='60'),
    sessionResolutionHeight?: int32(name='SessionResolutionHeight', example='1080'),
    sessionResolutionWidth?: int32(name='SessionResolutionWidth', example='1920'),
    streamingMode?: string(name='StreamingMode', example='video'),
    terminalResolutionAdaptive?: boolean(name='TerminalResolutionAdaptive', example='false'),
    visualQualityStrategy?: string(name='VisualQualityStrategy'),
    webrtc?: boolean(name='Webrtc', example='true'),
  }(name='VideoPolicy', shrink='json', position='Query'),
}

model ModifyAppPolicyResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyAppPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAppPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAppPolicy  ModifyAppPolicyRequest
  * @return ModifyAppPolicyResponse
 */
async function modifyAppPolicy(request: ModifyAppPolicyRequest): ModifyAppPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAppPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyNodePoolAmountRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='The ID of the delivery group.

This parameter is required.', example='aig-9ciijz60n4xsv****', position='Body'),
  nodePool: {
    nodeAmount: int32(name='NodeAmount', description='The total number of subscription nodes after the change.

This parameter is required.', example='1'),
    prePaidNodeAmountModifyMode?: string(name='PrePaidNodeAmountModifyMode', description='The change mode of subscription nodes.

Valid value:

*   EXPAND_FROM_POST_PAID_EXPLICIT: changes from specified pay-as-you-go nodes', example='EXPAND_FROM_POST_PAID_EXPLICIT'),
    prePaidNodeAmountModifyNodeIds?: [ string ](name='PrePaidNodeAmountModifyNodeIds', description='The nodes for which you want to change the billing method.'),
  }(name='NodePool', description='The parameters related to the configuration change of the node pool.

This parameter is required.', shrink='json', position='Body'),
  productType: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp', position='Body'),
}

model ModifyNodePoolAmountResponseBody = {
  data?: {
    orderId?: string(name='OrderId', description='The order ID.', example='23429322113****'),
  }(name='Data', description='The returned data.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyNodePoolAmountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNodePoolAmountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyNodePoolAmount  ModifyNodePoolAmountRequest
  * @return ModifyNodePoolAmountResponse
 */
async function modifyNodePoolAmount(request: ModifyNodePoolAmountRequest): ModifyNodePoolAmountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNodePoolAmount', 'POST', '/', 'json', true, 'form', request);
}

model ModifyNodePoolAttributeRequest {
  bizRegionId?: string(name='BizRegionId', example='cn-hangzhou', position='Body'),
  nodeCapacity?: int32(name='NodeCapacity', example='2', position='Body'),
  nodePoolStrategy?: {
    maxIdleAppInstanceAmount?: int32(name='MaxIdleAppInstanceAmount'),
    maxScalingAmount?: int32(name='MaxScalingAmount', example='10'),
    nodeAmount?: int32(name='NodeAmount', description='购买资源的数量。取值范围：1~100。

> 
- 若为包年包月资源，则该参数不可修改。
- 若为按量付费资源，则当弹性模式（`StrategyType`）为固定数量（`NODE_FIXED`）或自动扩缩容（`NODE_SCALING_BY_USAGE`）时该参数可修改。', example='1'),
    recurrenceSchedules?: [ 
      {
        recurrenceType?: string(name='RecurrenceType', description='策略执行周期的类型。必须同时指定`RecurrenceType`和`RecurrenceValues`。', example='weekly'),
        recurrenceValues?: [ int32 ](name='RecurrenceValues', description='策略执行周期的数值列表。'),
        timerPeriods?: [ 
          {
            amount?: int32(name='Amount', description='资源数量。', example='2'),
            endTime?: string(name='EndTime', description='结束时间。格式为HH:mm。', example='15:00'),
            startTime?: string(name='StartTime', description='开始时间。格式为HH:mm。', example='12:00'),
          }
        ](name='TimerPeriods', description='策略执行周期的时间段列表。时间段设置要求：

- 最多可添加3个时间段。
- 时间段之间不重叠。
- 时间段之间的间隔大于或等于5分钟。
- 单个时间段的时长大于或等于15分钟。
- 所有时间段累计不跨天。'),
      }
    ](name='RecurrenceSchedules', description='策略执行周期列表。`StrategyType`（弹性模式）设为`NODE_SCALING_BY_SCHEDULE`（定时扩缩容）时，该字段必填。'),
    scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes', example='5'),
    scalingStep?: int32(name='ScalingStep', example='2'),
    scalingUsageThreshold?: string(name='ScalingUsageThreshold', example='85'),
    strategyDisableDate?: string(name='StrategyDisableDate', description='策略失效日期。格式为：yyyy-MM-dd。失效日期与生效日期的间隔必须介于7天到1年之间（含7天和1年）。`StrategyType`（弹性模式）设为`NODE_SCALING_BY_SCHEDULE`（定时扩缩容）时，该字段必填。', example='2023-01-19'),
    strategyEnableDate?: string(name='StrategyEnableDate', description='策略生效日期。格式为：yyyy-MM-dd。该日期必须大于或等于当前日期。`StrategyType`（弹性模式）设为`NODE_SCALING_BY_SCHEDULE`（定时扩缩容）时，该字段必填。', example='2023-01-05'),
    strategyType?: string(name='StrategyType'),
    warmUp?: boolean(name='WarmUp', description='是否开启资源预热策略。`StrategyType`（弹性模式）设为`NODE_SCALING_BY_SCHEDULE`（定时扩缩容）时，该字段必填。', example='false'),
  }(name='NodePoolStrategy', shrink='json', position='Body'),
  poolId?: string(name='PoolId', example='rg-ew7va2g1wl3vm****', position='Body'),
  productType?: string(name='ProductType', description='产品类型。', example='CloudApp', position='Body'),
}

model ModifyNodePoolAttributeResponseBody = {
  code?: string(name='Code', example='InvalidParameter.PoolId'),
  message?: string(name='Message', example='The parameter PoolId is invalid.'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyNodePoolAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNodePoolAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyNodePoolAttribute  ModifyNodePoolAttributeRequest
  * @return ModifyNodePoolAttributeResponse
 */
async function modifyNodePoolAttribute(request: ModifyNodePoolAttributeRequest): ModifyNodePoolAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNodePoolAttribute', 'POST', '/', 'json', true, 'form', request);
}

model ModifyTenantConfigRequest {
  appInstanceGroupExpireRemind?: boolean(name='AppInstanceGroupExpireRemind', description='Specifies whether to enable the resource expiration reminder feature.

Valid values:

*   true
*   false', example='true', position='Body'),
}

model ModifyTenantConfigResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyTenantConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTenantConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyTenantConfig  ModifyTenantConfigRequest
  * @return ModifyTenantConfigResponse
 */
async function modifyTenantConfig(request: ModifyTenantConfigRequest): ModifyTenantConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTenantConfig', 'POST', '/', 'json', true, 'form', request);
}

model ModifyWuyingServerAttributeRequest {
  password?: string(name='Password', example='yourPassword', position='Body'),
  wuyingServerId?: string(name='WuyingServerId', example='ws-0bw2f11****dial', position='Body'),
  wuyingServerName?: string(name='WuyingServerName', example='exampleServerName', position='Body'),
}

model ModifyWuyingServerAttributeResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyWuyingServerAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyWuyingServerAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyWuyingServerAttribute  ModifyWuyingServerAttributeRequest
  * @return ModifyWuyingServerAttributeResponse
 */
async function modifyWuyingServerAttribute(request: ModifyWuyingServerAttributeRequest): ModifyWuyingServerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWuyingServerAttribute', 'POST', '/', 'json', true, 'form', request);
}

model PageListAppInstanceGroupUserRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='The ID of the delivery group.

This parameter is required.', example='aig-9ciijz60n4xsv****', position='Body'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. We recommend that you configure this parameter.', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='The number of entries to be return on each page. The value cannot be greater than `100`. We recommend that you configure this parameter.', example='10', position='Body'),
  productType: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp', position='Body'),
}

model PageListAppInstanceGroupUserResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  users?: [ string ](name='Users', description='The users.'),
}

model PageListAppInstanceGroupUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PageListAppInstanceGroupUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PageListAppInstanceGroupUser  PageListAppInstanceGroupUserRequest
  * @return PageListAppInstanceGroupUserResponse
 */
async function pageListAppInstanceGroupUser(request: PageListAppInstanceGroupUserRequest): PageListAppInstanceGroupUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PageListAppInstanceGroupUser', 'POST', '/', 'json', true, 'form', request);
}

model RenewAppInstanceGroupRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='The ID of the delivery group.

This parameter is required.', example='aig-9ciijz60n4xsv****', position='Query'),
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment.

Valid values:

*   true
*   false: manual payment. This is the default value.', example='false', position='Query'),
  period: int32(name='Period', description='The subscription duration of resources. This parameter must be configured together with `PeriodUnit`.

This parameter is required.', example='1', position='Query'),
  periodUnit: string(name='PeriodUnit', description='The unit of the subscription duration. This parameter must be configured together with `Period`. The following items describe valid values for the combinations of `Period` and `PeriodUnit`:

*   1 Week
*   1 Month
*   2 Month
*   3 Month
*   6 Month
*   1 Year
*   2 Year
*   3 Year

>  The value of this parameter is case-insensitive. For example, `Week` is valid and `week` is invalid. If you specify a value combination other than the preceding combinations, such as `2 Week`, the operation can still be called. However, an error occurs when you place the order.

This parameter is required.', example='Week', position='Query'),
  productType: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp', position='Query'),
  promotionId?: string(name='PromotionId', description='The promotion ID. You can call the [GetResourcePrice](https://help.aliyun.com/document_detail/428503.html) operation to obtain the ID.', example='17440009****', position='Query'),
  renewAmount?: int32(name='RenewAmount', position='Query'),
  renewMode?: string(name='RenewMode', position='Query'),
  renewNodes?: [ string ](name='RenewNodes', shrink='json', position='Query'),
}

model RenewAppInstanceGroupResponseBody = {
  code?: string(name='Code', description='The error code.', example='InvalidParameter.ProductType'),
  message?: string(name='Message', description='The error message.', example='The parameter ProductType is invalid.'),
  orderId?: string(name='OrderId', description='The order ID.', example='123456****'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RenewAppInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenewAppInstanceGroupResponseBody(name='body'),
}

/**
  * @description Before you call this operation, make sure that you fully understand the [billing methods and prices](https://help.aliyun.com/document_detail/426039.html) of App Streaming.
  * @param request  the request parameters of RenewAppInstanceGroup  RenewAppInstanceGroupRequest
  * @return RenewAppInstanceGroupResponse
 */
async function renewAppInstanceGroup(request: RenewAppInstanceGroupRequest): RenewAppInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewAppInstanceGroup', 'POST', '/', 'json', false, 'json', request);
}

model RenewWuyingServerRequest {
  autoPay?: boolean(name='AutoPay', example='false', position='Body'),
  period?: int32(name='Period', example='1', position='Body'),
  periodUnit?: string(name='PeriodUnit', example='Month', position='Body'),
  promotionId?: string(name='PromotionId', example='17440009****', position='Body'),
  wuyingServerId?: string(name='WuyingServerId', example='ws-0bw2f11****dial', position='Body'),
}

model RenewWuyingServerResponseBody = {
  orderId?: string(name='OrderId', example='23977848****97'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RenewWuyingServerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenewWuyingServerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RenewWuyingServer  RenewWuyingServerRequest
  * @return RenewWuyingServerResponse
 */
async function renewWuyingServer(request: RenewWuyingServerRequest): RenewWuyingServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewWuyingServer', 'POST', '/', 'json', true, 'form', request);
}

model RestartWuyingServerRequest {
  wuyingServerIdList?: [ string ](name='WuyingServerIdList', position='Body'),
}

model RestartWuyingServerResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RestartWuyingServerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartWuyingServerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RestartWuyingServer  RestartWuyingServerRequest
  * @return RestartWuyingServerResponse
 */
async function restartWuyingServer(request: RestartWuyingServerRequest): RestartWuyingServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartWuyingServer', 'POST', '/', 'json', true, 'form', request);
}

model StartWuyingServerRequest {
  wuyingServerIdList?: [ string ](name='WuyingServerIdList', position='Body'),
}

model StartWuyingServerResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model StartWuyingServerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartWuyingServerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartWuyingServer  StartWuyingServerRequest
  * @return StartWuyingServerResponse
 */
async function startWuyingServer(request: StartWuyingServerRequest): StartWuyingServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartWuyingServer', 'POST', '/', 'json', true, 'form', request);
}

model StopWuyingServerRequest {
  force?: boolean(name='Force', example='True', position='Body'),
  wuyingServerIdList?: [ string ](name='WuyingServerIdList', position='Body'),
}

model StopWuyingServerResponseBody = {
  requestId?: string(name='RequestId', example='AD2D0761-1FE5-549D-B169******'),
}

model StopWuyingServerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopWuyingServerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopWuyingServer  StopWuyingServerRequest
  * @return StopWuyingServerResponse
 */
async function stopWuyingServer(request: StopWuyingServerRequest): StopWuyingServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopWuyingServer', 'POST', '/', 'json', true, 'form', request);
}

model TagCloudResourcesRequest {
  resourceIds?: [ string ](name='ResourceIds', position='Body'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='AppInstanceGroupId', minLength=1, maxLength=30, position='Body'),
  tags: [ 
    {
      key: string(name='Key', description='This parameter is required.', example='Resolution', minLength=1, maxLength=128),
      value: string(name='Value', description='This parameter is required.', example='720p', maxLength=256),
    }
  ](name='Tags', description='This parameter is required.', position='Body'),
}

model TagCloudResourcesResponseBody = {
  failedResources?: [ 
    {
      code?: string(name='Code', example='TAG_KEY_DUPLICATED'),
      message?: string(name='Message', example='Duplicate tag keys exist.'),
      resourceId?: string(name='ResourceId', example='aig-001'),
      resourceType?: string(name='ResourceType', example='AppInstanceGroupId'),
      tags?: [ 
        {
          key?: string(name='Key', example='System/Scheduler/STOP_NEW_USER_CONNECTION'),
          scope?: string(name='Scope', example='System'),
          value?: string(name='Value', example='true'),
        }
      ](name='Tags'),
    }
  ](name='FailedResources'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model TagCloudResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagCloudResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TagCloudResources  TagCloudResourcesRequest
  * @return TagCloudResourcesResponse
 */
async function tagCloudResources(request: TagCloudResourcesRequest): TagCloudResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagCloudResources', 'POST', '/', 'json', true, 'form', request);
}

model UnbindRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='The ID of the delivery group. You can call the [GetConnectionTicket](~~GetConnectionTicket~~) operation to obtain the ID.

This parameter is required.', example='aig-9ciijz60n4xsv****', position='Body'),
  appInstanceId?: string(name='AppInstanceId', description='The session ID. You can call the [GetConnectionTicket](~~GetConnectionTicket~~) operation to obtain the ID.', example='ai-d297eyf83g5ni****', position='Body'),
  appInstancePersistentId?: string(name='AppInstancePersistentId', description='The ID of the persistent session. You can call the [GetConnectionTicket](~~GetConnectionTicket~~) operation to obtain the ID.', example='p-0bxls9m3cl7s****', position='Body'),
  endUserId: string(name='EndUserId', description='The username.

This parameter is required.', example='alice', position='Body'),
  productType: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp', position='Body'),
}

model UnbindResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model UnbindResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Unbind  UnbindRequest
  * @return UnbindResponse
 */
async function unbind(request: UnbindRequest): UnbindResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Unbind', 'POST', '/', 'json', true, 'form', request);
}

model UntagCloudResourcesRequest {
  resourceIds?: [ string ](name='ResourceIds', description='The resource IDs. You can specify up to 50 resource IDs. You do not need to specify this parameter if you set ResourceType to AliUid.', position='Body'),
  resourceType: string(name='ResourceType', description='The type of the resource from which you want to remove tags.

Valid values:

*   AppId: app ID.
*   WyId: Alibaba Cloud Workspace user ID.
*   AppInstanceGroupId: delivery group ID.
*   AliUid: tenant ID.

This parameter is required.', example='AppInstanceGroupId', position='Body'),
  tagKeys: [ string ](name='TagKeys', description='The tags that you want to remove from the cloud resources. System and custom tags are supported. You can specify up to 10 tags.

Valid values for system tags:

*   `System/Scheduler/GRAYSCALE`: canary tags.
*   `System/Scheduler/STOP_NEW_USER_CONNECTION`: tags used to stop new users bound to the delivery group from establishing a connection.

This parameter is required.', position='Body'),
}

model UntagCloudResourcesResponseBody = {
  failedResources?: [ 
    {
      code?: string(name='Code', description='The error code.', example='UNTAG_RESOURCE_FAILED'),
      message?: string(name='Message', description='The error message.', example='Failed to untag resource.'),
      resourceId?: string(name='ResourceId', description='The resource IDs.', example='aig-00000001'),
      resourceType?: string(name='ResourceType', description='The type of the cloud resource.

Valid values:

*   AppId: app ID.
*   WyId: Alibaba Cloud Workspace user ID.
*   AppInstanceGroupId: delivery group ID.
*   AliUid: tenant ID.', example='AppInstanceGroupId'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='Resolution'),
          scope?: string(name='Scope', description='The tag type.

Valid values:

*   Custom: custom tag.
*   System: system tag.', example='Custom'),
        }
      ](name='Tags', description='The tags that failed to be removed from the cloud resources.'),
    }
  ](name='FailedResources', description='The cloud resources whose tags failed to be removed and the corresponding tags.'),
  requestId?: string(name='RequestId', description='The request ID.', example='E25FC620-6B6F-12D2-A992-AD8727DC****'),
}

model UntagCloudResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagCloudResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UntagCloudResources  UntagCloudResourcesRequest
  * @return UntagCloudResourcesResponse
 */
async function untagCloudResources(request: UntagCloudResourcesRequest): UntagCloudResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagCloudResources', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAppInstanceGroupImageRequest {
  appCenterImageId: string(name='AppCenterImageId', description='The image ID of the application. You can obtain the ID from the Images page in the App Streaming console.

This parameter is required.', example='img-8z4nztpaqvay4****', position='Query'),
  appInstanceGroupId: string(name='AppInstanceGroupId', description='The ID of the delivery group.

This parameter is required.', example='aig-9ciijz60n4xsv****', position='Query'),
  bizRegionId: string(name='BizRegionId', description='The ID of the region where the delivery group resides. For information about the supported regions, see [Limits](https://help.aliyun.com/document_detail/426036.html).

Valid values:

*   cn-shanghai: China (Shanghai).
*   cn-hangzhou: China (Hangzhou)

This parameter is required.', example='cn-hangzhou', position='Query'),
  productType: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp', position='Query'),
}

model UpdateAppInstanceGroupImageResponseBody = {
  code?: string(name='Code', description='The error code.', example='InvalidParameter.ProductType'),
  message?: string(name='Message', description='The error message.', example='The parameter ProductType is invalid.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model UpdateAppInstanceGroupImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAppInstanceGroupImageResponseBody(name='body'),
}

/**
  * @description **
  * **Warning** After the image is updated, the end user session accessing the cloud application will be disconnected. Exercise caution to avoid end user data loss.
  * >  After the image of the delivery group is updated, the change takes effect on the terminal in approximately 2 minutes.
  * @param request  the request parameters of UpdateAppInstanceGroupImage  UpdateAppInstanceGroupImageRequest
  * @return UpdateAppInstanceGroupImageResponse
 */
async function updateAppInstanceGroupImage(request: UpdateAppInstanceGroupImageRequest): UpdateAppInstanceGroupImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAppInstanceGroupImage', 'POST', '/', 'json', false, 'json', request);
}

