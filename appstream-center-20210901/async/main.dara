/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'appstream-center';
  @version = '2021-09-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ApproveOtaTaskRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='实例组id', position='Body'),
  bizRegionId: string(name='BizRegionId', description='请求发起者所在地域', position='Body'),
  otaType: string(name='OtaType', description='ota类型,取值：
Fota ： agent组件更新
ImageUpdate ： 镜像更新
AppUpdate ： 应用更新', position='Body'),
  startTime: string(name='StartTime', description='开始时间，iso8601格式', position='Body'),
  taskId: string(name='TaskId', description='ota任务id', position='Body'),
}

model ApproveOtaTaskResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ApproveOtaTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ApproveOtaTaskResponseBody(name='body'),
}

async function approveOtaTask(request: ApproveOtaTaskRequest): ApproveOtaTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApproveOtaTask', 'POST', '/', 'json', true, 'form', request);
}

model AuthorizeInstanceGroupRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', position='Body'),
  authorizeUserIds?: [ string ](name='AuthorizeUserIds', position='Body'),
  productType: string(name='ProductType', position='Body'),
  unAuthorizeUserIds?: [ string ](name='UnAuthorizeUserIds', position='Body'),
}

model AuthorizeInstanceGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AuthorizeInstanceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AuthorizeInstanceGroupResponseBody(name='body'),
}

async function authorizeInstanceGroup(request: AuthorizeInstanceGroupRequest): AuthorizeInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuthorizeInstanceGroup', 'POST', '/', 'json', true, 'form', request);
}

model CancelOtaTaskRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='实例组id', position='Body'),
  taskId: string(name='TaskId', description='任务id', position='Body'),
}

model CancelOtaTaskResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CancelOtaTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CancelOtaTaskResponseBody(name='body'),
}

async function cancelOtaTask(request: CancelOtaTaskRequest): CancelOtaTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelOtaTask', 'POST', '/', 'json', true, 'form', request);
}

model CreateAppInstanceGroupRequest {
  appCenterImageId: string(name='AppCenterImageId', position='Body'),
  appInstanceGroupName: string(name='AppInstanceGroupName', position='Body'),
  autoPay?: boolean(name='AutoPay', position='Body'),
  autoRenew?: boolean(name='AutoRenew', position='Body'),
  bizRegionId: string(name='BizRegionId', position='Body'),
  chargeResourceMode: string(name='ChargeResourceMode', position='Body'),
  chargeType: string(name='ChargeType', position='Body'),
  nodePool: {
    maxScalingAmount?: int32(name='MaxScalingAmount'),
    nodeAmount: int32(name='NodeAmount'),
    nodeCapacity: int32(name='NodeCapacity'),
    nodeInstanceType: string(name='NodeInstanceType'),
    scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes'),
    scalingStep?: int32(name='ScalingStep'),
    scalingUsageThreshold?: string(name='ScalingUsageThreshold'),
    strategyType?: string(name='StrategyType'),
  }(name='NodePool', shrink='json', position='Body'),
  period: int32(name='Period', position='Body'),
  periodUnit: string(name='PeriodUnit', position='Body'),
  productType: string(name='ProductType', position='Body'),
  promotionId?: string(name='PromotionId', position='Body'),
  sessionTimeout: int32(name='SessionTimeout', maximum=300, position='Body'),
  userInfo?: {
    type?: string(name='Type'),
  }(name='UserInfo', shrink='json', position='Body'),
  users?: [ string ](name='Users', position='Body'),
}

model CreateAppInstanceGroupResponseBody = {
  appInstanceGroupModel?: {
    appInstanceGroupId?: string(name='AppInstanceGroupId'),
    nodePoolId?: string(name='NodePoolId'),
    orderId?: string(name='OrderId'),
  }(name='AppInstanceGroupModel'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateAppInstanceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppInstanceGroupResponseBody(name='body'),
}

async function createAppInstanceGroup(request: CreateAppInstanceGroupRequest): CreateAppInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppInstanceGroup', 'POST', '/', 'json', true, 'form', request);
}

model GetOtaTaskByTaskIdRequest {
  taskId: string(name='TaskId', description='ota任务id', position='Body'),
}

model GetOtaTaskByTaskIdResponseBody = {
  code?: string(name='Code', description='错误码'),
  message?: string(name='Message', description='提示'),
  otaVersion?: string(name='OtaVersion', description='版本号'),
  releaseNote?: string(name='ReleaseNote', description='版本说明'),
  requestId?: string(name='RequestId', description='Id of the request'),
  taskStartTime?: string(name='TaskStartTime', description='任务执行时间，ISO-8601格式'),
}

model GetOtaTaskByTaskIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetOtaTaskByTaskIdResponseBody(name='body'),
}

async function getOtaTaskByTaskId(request: GetOtaTaskByTaskIdRequest): GetOtaTaskByTaskIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOtaTaskByTaskId', 'POST', '/', 'json', true, 'form', request);
}

model GetResourcePriceRequest {
  amount: long(name='Amount', maximum=100, position='Query'),
  bizRegionId: string(name='BizRegionId', position='Query'),
  chargeType: string(name='ChargeType', position='Query'),
  nodeInstanceType: string(name='NodeInstanceType', position='Query'),
  period: long(name='Period', position='Query'),
  periodUnit: string(name='PeriodUnit', position='Query'),
  productType: string(name='ProductType', position='Query'),
}

model GetResourcePriceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  priceModel?: {
    price?: {
      currency?: string(name='Currency'),
      discountPrice?: string(name='DiscountPrice'),
      originalPrice?: string(name='OriginalPrice'),
      promotions?: [ 
        {
          optionCode?: string(name='OptionCode'),
          promotionDesc?: string(name='PromotionDesc'),
          promotionId?: string(name='PromotionId'),
          promotionName?: string(name='PromotionName'),
          selected?: boolean(name='Selected'),
        }
      ](name='Promotions'),
      tradePrice?: string(name='TradePrice'),
    }(name='Price'),
    rules?: [ 
      {
        description?: string(name='Description'),
        ruleId?: long(name='RuleId'),
      }
    ](name='Rules'),
  }(name='PriceModel'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetResourcePriceResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourcePriceResponseBody(name='body'),
}

async function getResourcePrice(request: GetResourcePriceRequest): GetResourcePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourcePrice', 'POST', '/', 'json', false, 'json', request);
}

model ListAppInstanceGroupRequest {
  appCenterImageId?: string(name='AppCenterImageId', description='应用中心镜像ID', position='Query'),
  appInstanceGroupId?: string(name='AppInstanceGroupId', position='Query'),
  appInstanceGroupName?: string(name='AppInstanceGroupName', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  productType: string(name='ProductType', position='Query'),
  regionId?: string(name='RegionId', description='地域ID', position='Query'),
  status?: [ string ](name='Status', position='Body'),
}

model ListAppInstanceGroupResponseBody = {
  appInstanceGroupModels?: [ 
    {
      amount?: int32(name='Amount'),
      appCenterImageId?: string(name='AppCenterImageId'),
      appInstanceGroupId?: string(name='AppInstanceGroupId'),
      appInstanceGroupName?: string(name='AppInstanceGroupName'),
      appInstanceType?: string(name='AppInstanceType'),
      apps?: [ 
        {
          appId?: string(name='AppId'),
          appName?: string(name='AppName'),
        }
      ](name='Apps'),
      chargeType?: string(name='ChargeType'),
      expiredTime?: string(name='ExpiredTime'),
      gmtCreate?: string(name='GmtCreate'),
      nodePool?: [ 
        {
          amount?: int32(name='Amount'),
          maxScalingAmount?: int32(name='MaxScalingAmount'),
          nodeAmount?: int32(name='NodeAmount'),
          nodeCapacity?: int32(name='NodeCapacity'),
          nodeInstanceType?: string(name='NodeInstanceType'),
          nodePoolId?: string(name='NodePoolId'),
          nodeUsed?: int32(name='NodeUsed'),
          recurrenceSchedules?: [ 
            {
              recurrenceType?: string(name='RecurrenceType'),
              recurrenceValues?: [ int32 ](name='RecurrenceValues'),
              timerPeriods?: [ 
                {
                  amount?: int32(name='Amount'),
                  endTime?: string(name='EndTime'),
                  startTime?: string(name='StartTime'),
                }
              ](name='TimerPeriods'),
            }
          ](name='RecurrenceSchedules'),
          scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes'),
          scalingNodeAmount?: int32(name='ScalingNodeAmount'),
          scalingNodeUsed?: int32(name='ScalingNodeUsed'),
          scalingStep?: int32(name='ScalingStep'),
          scalingUsageThreshold?: string(name='ScalingUsageThreshold'),
          strategyDisableDate?: string(name='StrategyDisableDate'),
          strategyEnableDate?: string(name='StrategyEnableDate'),
          strategyType?: string(name='StrategyType'),
          warmUp?: boolean(name='WarmUp'),
        }
      ](name='NodePool'),
      osType?: string(name='OsType', description='系统类型'),
      otaInfo?: {
        newOtaVersion?: string(name='NewOtaVersion', description='新ota版本,为空表示没有新版本'),
        otaVersion?: string(name='OtaVersion', description='当前ota版本'),
        taskId?: string(name='TaskId', description='任务id'),
      }(name='OtaInfo'),
      productType?: string(name='ProductType'),
      regionId?: string(name='RegionId'),
      sessionTimeout?: string(name='SessionTimeout'),
      specId?: string(name='SpecId'),
      status?: string(name='Status'),
    }
  ](name='AppInstanceGroupModels', description='AppInstanceGroupModels'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount'),
}

model ListAppInstanceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListAppInstanceGroupResponseBody(name='body'),
}

async function listAppInstanceGroup(request: ListAppInstanceGroupRequest): ListAppInstanceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAppInstanceGroup', 'POST', '/', 'json', true, 'form', request);
}

model ListNodeInstanceTypeRequest {
  bizRegionId?: string(name='BizRegionId', position='Query'),
  language?: string(name='Language', position='Query'),
  osType?: string(name='OsType', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  productType: string(name='ProductType', position='Query'),
}

model ListNodeInstanceTypeResponseBody = {
  nodeInstanceTypeModels?: [ 
    {
      cpu?: string(name='Cpu'),
      gpu?: string(name='Gpu'),
      gpuMemory?: long(name='GpuMemory'),
      maxCapacity?: int32(name='MaxCapacity'),
      memory?: long(name='Memory'),
      nodeInstanceType?: string(name='NodeInstanceType'),
      nodeInstanceTypeFamily?: string(name='NodeInstanceTypeFamily'),
      nodeTypeName?: string(name='NodeTypeName'),
    }
  ](name='NodeInstanceTypeModels'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount'),
}

model ListNodeInstanceTypeResponse = {
  headers: map[string]string(name='headers'),
  body: ListNodeInstanceTypeResponseBody(name='body'),
}

async function listNodeInstanceType(request: ListNodeInstanceTypeRequest): ListNodeInstanceTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNodeInstanceType', 'POST', '/', 'json', false, 'json', request);
}

model ListOtaTaskRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', description='实例组id', position='Body'),
  otaType: string(name='OtaType', description='ota类型,取值：
Fota ： agent组件更新
ImageUpdate ： 镜像更新
AppUpdate ： 应用更新', position='Body'),
  pageNumber: int32(name='PageNumber', description='页码', position='Body'),
  pageSize: int32(name='PageSize', description='每页数量', minimum=1, maximum=100, position='Body'),
}

model ListOtaTaskResponseBody = {
  pageNumber?: int32(name='PageNumber', description='页码'),
  pageSize?: int32(name='PageSize', description='每页数量'),
  requestId?: string(name='RequestId', description='Id of the request'),
  taskList?: [ 
    {
      otaVersion?: string(name='OtaVersion', description='ota版本，格式举例：0.0.1-R-20220708.110604'),
      taskDisplayStatus?: string(name='TaskDisplayStatus', description='任务展示状态'),
      taskId?: string(name='TaskId', description='任务id'),
      taskStartTime?: string(name='TaskStartTime', description='任务开始时间，ISO-8601格式'),
    }
  ](name='TaskList', description='AppInstanceGroupModels'),
  totalCount?: int32(name='TotalCount'),
}

model ListOtaTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ListOtaTaskResponseBody(name='body'),
}

async function listOtaTask(request: ListOtaTaskRequest): ListOtaTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOtaTask', 'POST', '/', 'json', true, 'form', request);
}

model ListRegionsRequest {
}

model ListRegionsResponseBody = {
  regionModels?: [ 
    {
      regionId?: string(name='regionId'),
    }
  ](name='RegionModels'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegions', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAppInstanceGroupAttributeRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', position='Query'),
  appInstanceGroupName?: string(name='AppInstanceGroupName', position='Query'),
  nodePool?: {
    nodeCapacity?: int32(name='NodeCapacity'),
    nodePoolId?: string(name='NodePoolId'),
  }(name='NodePool', shrink='json', position='Query'),
  productType: string(name='ProductType', position='Query'),
  sessionTimeout?: int32(name='SessionTimeout', maximum=300, position='Query'),
}

model ModifyAppInstanceGroupAttributeResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ModifyAppInstanceGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAppInstanceGroupAttributeResponseBody(name='body'),
}

async function modifyAppInstanceGroupAttribute(request: ModifyAppInstanceGroupAttributeRequest): ModifyAppInstanceGroupAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAppInstanceGroupAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyNodePoolAttributeRequest {
  bizRegionId?: string(name='BizRegionId', position='Body'),
  nodeCapacity?: int32(name='NodeCapacity', description='按资源售卖的，单个节点允许运行的应用实例数', position='Body'),
  nodePoolStrategy?: {
    maxScalingAmount?: int32(name='MaxScalingAmount', description='最大弹性数量'),
    scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes', description='资源回收时间'),
    scalingStep?: int32(name='ScalingStep', description='弹性扩容步长'),
    scalingUsageThreshold?: string(name='ScalingUsageThreshold', description='触发弹性扩容的会话百分比'),
    strategyType?: string(name='StrategyType', description='策略类型，默认为NODE_FIXED'),
  }(name='NodePoolStrategy', description='节点池策略', shrink='json', position='Body'),
  poolId?: string(name='PoolId', description='资源组id', position='Body'),
  productType?: string(name='ProductType', description='产品类型', position='Body'),
}

model ModifyNodePoolAttributeResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ModifyNodePoolAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyNodePoolAttributeResponseBody(name='body'),
}

async function modifyNodePoolAttribute(request: ModifyNodePoolAttributeRequest): ModifyNodePoolAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNodePoolAttribute', 'POST', '/', 'json', true, 'form', request);
}

model PageListAppInstanceGroupUserRequest {
  appInstanceGroupId: string(name='AppInstanceGroupId', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  productType: string(name='ProductType', position='Body'),
}

model PageListAppInstanceGroupUserResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  users?: [ string ](name='Users'),
}

model PageListAppInstanceGroupUserResponse = {
  headers: map[string]string(name='headers'),
  body: PageListAppInstanceGroupUserResponseBody(name='body'),
}

async function pageListAppInstanceGroupUser(request: PageListAppInstanceGroupUserRequest): PageListAppInstanceGroupUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PageListAppInstanceGroupUser', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAppInstanceGroupImageRequest {
  appCenterImageId: string(name='AppCenterImageId', position='Query'),
  appInstanceGroupId: string(name='AppInstanceGroupId', position='Query'),
  bizRegionId: string(name='BizRegionId', position='Query'),
  productType: string(name='ProductType', position='Query'),
}

model UpdateAppInstanceGroupImageResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateAppInstanceGroupImageResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAppInstanceGroupImageResponseBody(name='body'),
}

async function updateAppInstanceGroupImage(request: UpdateAppInstanceGroupImageRequest): UpdateAppInstanceGroupImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAppInstanceGroupImage', 'POST', '/', 'json', false, 'json', request);
}

