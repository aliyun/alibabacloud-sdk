/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('appstream-center', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ApproveOtaTaskRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId'),
  bizRegionId?: string(name='BizRegionId'),
  otaType?: string(name='OtaType'),
  startTime?: string(name='StartTime'),
  taskId?: string(name='TaskId'),
}

model ApproveOtaTaskResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ApproveOtaTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApproveOtaTaskResponseBody(name='body'),
}

async function approveOtaTaskWithOptions(request: ApproveOtaTaskRequest, runtime: Util.RuntimeOptions): ApproveOtaTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.bizRegionId)) {
    body['BizRegionId'] = request.bizRegionId;
  }
  if (!Util.isUnset(request.otaType)) {
    body['OtaType'] = request.otaType;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ApproveOtaTask',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function approveOtaTask(request: ApproveOtaTaskRequest): ApproveOtaTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return approveOtaTaskWithOptions(request, runtime);
}

model AuthorizeInstanceGroupRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId'),
  authorizeUserIds?: [ string ](name='AuthorizeUserIds'),
  productType?: string(name='ProductType'),
  unAuthorizeUserIds?: [ string ](name='UnAuthorizeUserIds'),
}

model AuthorizeInstanceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model AuthorizeInstanceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AuthorizeInstanceGroupResponseBody(name='body'),
}

async function authorizeInstanceGroupWithOptions(request: AuthorizeInstanceGroupRequest, runtime: Util.RuntimeOptions): AuthorizeInstanceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.authorizeUserIds)) {
    body['AuthorizeUserIds'] = request.authorizeUserIds;
  }
  if (!Util.isUnset(request.productType)) {
    body['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.unAuthorizeUserIds)) {
    body['UnAuthorizeUserIds'] = request.unAuthorizeUserIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AuthorizeInstanceGroup',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function authorizeInstanceGroup(request: AuthorizeInstanceGroupRequest): AuthorizeInstanceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return authorizeInstanceGroupWithOptions(request, runtime);
}

model CancelOtaTaskRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId'),
  taskId?: string(name='TaskId'),
}

model CancelOtaTaskResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CancelOtaTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelOtaTaskResponseBody(name='body'),
}

async function cancelOtaTaskWithOptions(request: CancelOtaTaskRequest, runtime: Util.RuntimeOptions): CancelOtaTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CancelOtaTask',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelOtaTask(request: CancelOtaTaskRequest): CancelOtaTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOtaTaskWithOptions(request, runtime);
}

model CreateAppInstanceGroupRequest {
  appCenterImageId?: string(name='AppCenterImageId'),
  appInstanceGroupName?: string(name='AppInstanceGroupName'),
  autoPay?: boolean(name='AutoPay'),
  autoRenew?: boolean(name='AutoRenew'),
  bizRegionId?: string(name='BizRegionId'),
  chargeResourceMode?: string(name='ChargeResourceMode'),
  chargeType?: string(name='ChargeType'),
  nodePool?: {
    maxScalingAmount?: int32(name='MaxScalingAmount'),
    nodeAmount?: int32(name='NodeAmount'),
    nodeCapacity?: int32(name='NodeCapacity'),
    nodeInstanceType?: string(name='NodeInstanceType'),
    scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes'),
    scalingStep?: int32(name='ScalingStep'),
    scalingUsageThreshold?: string(name='ScalingUsageThreshold'),
    strategyType?: string(name='StrategyType'),
  }(name='NodePool'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  productType?: string(name='ProductType'),
  promotionId?: string(name='PromotionId'),
  sessionTimeout?: int32(name='SessionTimeout'),
  userInfo?: {
    type?: string(name='Type'),
  }(name='UserInfo'),
  users?: [ string ](name='Users'),
}

model CreateAppInstanceGroupShrinkRequest {
  appCenterImageId?: string(name='AppCenterImageId'),
  appInstanceGroupName?: string(name='AppInstanceGroupName'),
  autoPay?: boolean(name='AutoPay'),
  autoRenew?: boolean(name='AutoRenew'),
  bizRegionId?: string(name='BizRegionId'),
  chargeResourceMode?: string(name='ChargeResourceMode'),
  chargeType?: string(name='ChargeType'),
  nodePoolShrink?: string(name='NodePool'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  productType?: string(name='ProductType'),
  promotionId?: string(name='PromotionId'),
  sessionTimeout?: int32(name='SessionTimeout'),
  userInfoShrink?: string(name='UserInfo'),
  users?: [ string ](name='Users'),
}

model CreateAppInstanceGroupResponseBody = {
  appInstanceGroupModel?: {
    appInstanceGroupId?: string(name='AppInstanceGroupId'),
    nodePoolId?: string(name='NodePoolId'),
    orderId?: string(name='OrderId'),
  }(name='AppInstanceGroupModel'),
  requestId?: string(name='RequestId'),
}

model CreateAppInstanceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAppInstanceGroupResponseBody(name='body'),
}

async function createAppInstanceGroupWithOptions(tmpReq: CreateAppInstanceGroupRequest, runtime: Util.RuntimeOptions): CreateAppInstanceGroupResponse {
  Util.validateModel(tmpReq);
  var request = new CreateAppInstanceGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.nodePool)) {
    request.nodePoolShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.nodePool, 'NodePool', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appCenterImageId)) {
    body['AppCenterImageId'] = request.appCenterImageId;
  }
  if (!Util.isUnset(request.appInstanceGroupName)) {
    body['AppInstanceGroupName'] = request.appInstanceGroupName;
  }
  if (!Util.isUnset(request.autoPay)) {
    body['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.autoRenew)) {
    body['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.bizRegionId)) {
    body['BizRegionId'] = request.bizRegionId;
  }
  if (!Util.isUnset(request.chargeResourceMode)) {
    body['ChargeResourceMode'] = request.chargeResourceMode;
  }
  if (!Util.isUnset(request.chargeType)) {
    body['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.nodePoolShrink)) {
    body['NodePool'] = request.nodePoolShrink;
  }
  if (!Util.isUnset(request.period)) {
    body['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    body['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.productType)) {
    body['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.promotionId)) {
    body['PromotionId'] = request.promotionId;
  }
  if (!Util.isUnset(request.sessionTimeout)) {
    body['SessionTimeout'] = request.sessionTimeout;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    body['UserInfo'] = request.userInfoShrink;
  }
  if (!Util.isUnset(request.users)) {
    body['Users'] = request.users;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAppInstanceGroup',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAppInstanceGroup(request: CreateAppInstanceGroupRequest): CreateAppInstanceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppInstanceGroupWithOptions(request, runtime);
}

model GetOtaTaskByTaskIdRequest {
  taskId?: string(name='TaskId'),
}

model GetOtaTaskByTaskIdResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  otaVersion?: string(name='OtaVersion'),
  releaseNote?: string(name='ReleaseNote'),
  requestId?: string(name='RequestId'),
  taskStartTime?: string(name='TaskStartTime'),
}

model GetOtaTaskByTaskIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOtaTaskByTaskIdResponseBody(name='body'),
}

async function getOtaTaskByTaskIdWithOptions(request: GetOtaTaskByTaskIdRequest, runtime: Util.RuntimeOptions): GetOtaTaskByTaskIdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetOtaTaskByTaskId',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOtaTaskByTaskId(request: GetOtaTaskByTaskIdRequest): GetOtaTaskByTaskIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOtaTaskByTaskIdWithOptions(request, runtime);
}

model GetResourcePriceRequest {
  amount?: long(name='Amount'),
  bizRegionId?: string(name='BizRegionId'),
  chargeType?: string(name='ChargeType'),
  nodeInstanceType?: string(name='NodeInstanceType'),
  period?: long(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  productType?: string(name='ProductType'),
}

model GetResourcePriceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  priceModel?: {
    price?: {
      currency?: string(name='Currency'),
      discountPrice?: string(name='DiscountPrice'),
      originalPrice?: string(name='OriginalPrice'),
      promotions?: [ 
        {
          optionCode?: string(name='OptionCode'),
          promotionDesc?: string(name='PromotionDesc'),
          promotionId?: string(name='PromotionId'),
          promotionName?: string(name='PromotionName'),
          selected?: boolean(name='Selected'),
        }
      ](name='Promotions'),
      tradePrice?: string(name='TradePrice'),
    }(name='Price'),
    rules?: [ 
      {
        description?: string(name='Description'),
        ruleId?: long(name='RuleId'),
      }
    ](name='Rules'),
  }(name='PriceModel'),
  requestId?: string(name='RequestId'),
}

model GetResourcePriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourcePriceResponseBody(name='body'),
}

async function getResourcePriceWithOptions(request: GetResourcePriceRequest, runtime: Util.RuntimeOptions): GetResourcePriceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.bizRegionId)) {
    query['BizRegionId'] = request.bizRegionId;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.nodeInstanceType)) {
    query['NodeInstanceType'] = request.nodeInstanceType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResourcePrice',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourcePrice(request: GetResourcePriceRequest): GetResourcePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourcePriceWithOptions(request, runtime);
}

model ListAppInstanceGroupRequest {
  appCenterImageId?: string(name='AppCenterImageId'),
  appInstanceGroupId?: string(name='AppInstanceGroupId'),
  appInstanceGroupName?: string(name='AppInstanceGroupName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  productType?: string(name='ProductType'),
  regionId?: string(name='RegionId'),
  status?: [ string ](name='Status'),
}

model ListAppInstanceGroupResponseBody = {
  appInstanceGroupModels?: [ 
    {
      amount?: int32(name='Amount'),
      appCenterImageId?: string(name='AppCenterImageId'),
      appInstanceGroupId?: string(name='AppInstanceGroupId'),
      appInstanceGroupName?: string(name='AppInstanceGroupName'),
      appInstanceType?: string(name='AppInstanceType'),
      apps?: [ 
        {
          appId?: string(name='AppId'),
          appName?: string(name='AppName'),
        }
      ](name='Apps'),
      chargeType?: string(name='ChargeType'),
      expiredTime?: string(name='ExpiredTime'),
      gmtCreate?: string(name='GmtCreate'),
      nodePool?: [ 
        {
          amount?: int32(name='Amount'),
          maxScalingAmount?: int32(name='MaxScalingAmount'),
          nodeAmount?: int32(name='NodeAmount'),
          nodeCapacity?: int32(name='NodeCapacity'),
          nodeInstanceType?: string(name='NodeInstanceType'),
          nodePoolId?: string(name='NodePoolId'),
          nodeUsed?: int32(name='NodeUsed'),
          recurrenceSchedules?: [ 
            {
              recurrenceType?: string(name='RecurrenceType'),
              recurrenceValues?: [ int32 ](name='RecurrenceValues'),
              timerPeriods?: [ 
                {
                  amount?: int32(name='Amount'),
                  endTime?: string(name='EndTime'),
                  startTime?: string(name='StartTime'),
                }
              ](name='TimerPeriods'),
            }
          ](name='RecurrenceSchedules'),
          scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes'),
          scalingNodeAmount?: int32(name='ScalingNodeAmount'),
          scalingNodeUsed?: int32(name='ScalingNodeUsed'),
          scalingStep?: int32(name='ScalingStep'),
          scalingUsageThreshold?: string(name='ScalingUsageThreshold'),
          strategyDisableDate?: string(name='StrategyDisableDate'),
          strategyEnableDate?: string(name='StrategyEnableDate'),
          strategyType?: string(name='StrategyType'),
          warmUp?: boolean(name='WarmUp'),
        }
      ](name='NodePool'),
      osType?: string(name='OsType'),
      otaInfo?: {
        newOtaVersion?: string(name='NewOtaVersion'),
        otaVersion?: string(name='OtaVersion'),
        taskId?: string(name='TaskId'),
      }(name='OtaInfo'),
      productType?: string(name='ProductType'),
      regionId?: string(name='RegionId'),
      sessionTimeout?: string(name='SessionTimeout'),
      specId?: string(name='SpecId'),
      status?: string(name='Status'),
    }
  ](name='AppInstanceGroupModels'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListAppInstanceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAppInstanceGroupResponseBody(name='body'),
}

async function listAppInstanceGroupWithOptions(request: ListAppInstanceGroupRequest, runtime: Util.RuntimeOptions): ListAppInstanceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appCenterImageId)) {
    query['AppCenterImageId'] = request.appCenterImageId;
  }
  if (!Util.isUnset(request.appInstanceGroupId)) {
    query['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.appInstanceGroupName)) {
    query['AppInstanceGroupName'] = request.appInstanceGroupName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListAppInstanceGroup',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAppInstanceGroup(request: ListAppInstanceGroupRequest): ListAppInstanceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppInstanceGroupWithOptions(request, runtime);
}

model ListNodeInstanceTypeRequest {
  bizRegionId?: string(name='BizRegionId'),
  language?: string(name='Language'),
  osType?: string(name='OsType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  productType?: string(name='ProductType'),
}

model ListNodeInstanceTypeResponseBody = {
  nodeInstanceTypeModels?: [ 
    {
      cpu?: string(name='Cpu'),
      gpu?: string(name='Gpu'),
      gpuMemory?: long(name='GpuMemory'),
      maxCapacity?: int32(name='MaxCapacity'),
      memory?: long(name='Memory'),
      nodeInstanceType?: string(name='NodeInstanceType'),
      nodeInstanceTypeFamily?: string(name='NodeInstanceTypeFamily'),
      nodeTypeName?: string(name='NodeTypeName'),
    }
  ](name='NodeInstanceTypeModels'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListNodeInstanceTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNodeInstanceTypeResponseBody(name='body'),
}

async function listNodeInstanceTypeWithOptions(request: ListNodeInstanceTypeRequest, runtime: Util.RuntimeOptions): ListNodeInstanceTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizRegionId)) {
    query['BizRegionId'] = request.bizRegionId;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.osType)) {
    query['OsType'] = request.osType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListNodeInstanceType',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodeInstanceType(request: ListNodeInstanceTypeRequest): ListNodeInstanceTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodeInstanceTypeWithOptions(request, runtime);
}

model ListOtaTaskRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId'),
  otaType?: string(name='OtaType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListOtaTaskResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  taskList?: [ 
    {
      otaVersion?: string(name='OtaVersion'),
      taskDisplayStatus?: string(name='TaskDisplayStatus'),
      taskId?: string(name='TaskId'),
      taskStartTime?: string(name='TaskStartTime'),
    }
  ](name='TaskList'),
  totalCount?: int32(name='TotalCount'),
}

model ListOtaTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOtaTaskResponseBody(name='body'),
}

async function listOtaTaskWithOptions(request: ListOtaTaskRequest, runtime: Util.RuntimeOptions): ListOtaTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.otaType)) {
    body['OtaType'] = request.otaType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListOtaTask',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOtaTask(request: ListOtaTaskRequest): ListOtaTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOtaTaskWithOptions(request, runtime);
}

model ListRegionsResponseBody = {
  regionModels?: [ 
    {
      regionId?: string(name='regionId'),
    }
  ](name='RegionModels'),
  requestId?: string(name='RequestId'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegionsWithOptions(runtime: Util.RuntimeOptions): ListRegionsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListRegions',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRegions(): ListRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRegionsWithOptions(runtime);
}

model ModifyAppInstanceGroupAttributeRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId'),
  appInstanceGroupName?: string(name='AppInstanceGroupName'),
  nodePool?: {
    nodeCapacity?: int32(name='NodeCapacity'),
    nodePoolId?: string(name='NodePoolId'),
  }(name='NodePool'),
  productType?: string(name='ProductType'),
  sessionTimeout?: int32(name='SessionTimeout'),
}

model ModifyAppInstanceGroupAttributeShrinkRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId'),
  appInstanceGroupName?: string(name='AppInstanceGroupName'),
  nodePoolShrink?: string(name='NodePool'),
  productType?: string(name='ProductType'),
  sessionTimeout?: int32(name='SessionTimeout'),
}

model ModifyAppInstanceGroupAttributeResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ModifyAppInstanceGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAppInstanceGroupAttributeResponseBody(name='body'),
}

async function modifyAppInstanceGroupAttributeWithOptions(tmpReq: ModifyAppInstanceGroupAttributeRequest, runtime: Util.RuntimeOptions): ModifyAppInstanceGroupAttributeResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyAppInstanceGroupAttributeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.nodePool)) {
    request.nodePoolShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.nodePool, 'NodePool', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appInstanceGroupId)) {
    query['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.appInstanceGroupName)) {
    query['AppInstanceGroupName'] = request.appInstanceGroupName;
  }
  if (!Util.isUnset(request.nodePoolShrink)) {
    query['NodePool'] = request.nodePoolShrink;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.sessionTimeout)) {
    query['SessionTimeout'] = request.sessionTimeout;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAppInstanceGroupAttribute',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAppInstanceGroupAttribute(request: ModifyAppInstanceGroupAttributeRequest): ModifyAppInstanceGroupAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAppInstanceGroupAttributeWithOptions(request, runtime);
}

model ModifyNodePoolAttributeRequest {
  bizRegionId?: string(name='BizRegionId'),
  nodeCapacity?: int32(name='NodeCapacity'),
  nodePoolStrategy?: {
    maxScalingAmount?: int32(name='MaxScalingAmount'),
    scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes'),
    scalingStep?: int32(name='ScalingStep'),
    scalingUsageThreshold?: string(name='ScalingUsageThreshold'),
    strategyType?: string(name='StrategyType'),
  }(name='NodePoolStrategy'),
  poolId?: string(name='PoolId'),
  productType?: string(name='ProductType'),
}

model ModifyNodePoolAttributeShrinkRequest {
  bizRegionId?: string(name='BizRegionId'),
  nodeCapacity?: int32(name='NodeCapacity'),
  nodePoolStrategyShrink?: string(name='NodePoolStrategy'),
  poolId?: string(name='PoolId'),
  productType?: string(name='ProductType'),
}

model ModifyNodePoolAttributeResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ModifyNodePoolAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyNodePoolAttributeResponseBody(name='body'),
}

async function modifyNodePoolAttributeWithOptions(tmpReq: ModifyNodePoolAttributeRequest, runtime: Util.RuntimeOptions): ModifyNodePoolAttributeResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyNodePoolAttributeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.nodePoolStrategy)) {
    request.nodePoolStrategyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.nodePoolStrategy, 'NodePoolStrategy', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizRegionId)) {
    body['BizRegionId'] = request.bizRegionId;
  }
  if (!Util.isUnset(request.nodeCapacity)) {
    body['NodeCapacity'] = request.nodeCapacity;
  }
  if (!Util.isUnset(request.nodePoolStrategyShrink)) {
    body['NodePoolStrategy'] = request.nodePoolStrategyShrink;
  }
  if (!Util.isUnset(request.poolId)) {
    body['PoolId'] = request.poolId;
  }
  if (!Util.isUnset(request.productType)) {
    body['ProductType'] = request.productType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNodePoolAttribute',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyNodePoolAttribute(request: ModifyNodePoolAttributeRequest): ModifyNodePoolAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNodePoolAttributeWithOptions(request, runtime);
}

model PageListAppInstanceGroupUserRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  productType?: string(name='ProductType'),
}

model PageListAppInstanceGroupUserResponseBody = {
  requestId?: string(name='RequestId'),
  users?: [ string ](name='Users'),
}

model PageListAppInstanceGroupUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PageListAppInstanceGroupUserResponseBody(name='body'),
}

async function pageListAppInstanceGroupUserWithOptions(request: PageListAppInstanceGroupUserRequest, runtime: Util.RuntimeOptions): PageListAppInstanceGroupUserResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productType)) {
    body['ProductType'] = request.productType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PageListAppInstanceGroupUser',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pageListAppInstanceGroupUser(request: PageListAppInstanceGroupUserRequest): PageListAppInstanceGroupUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return pageListAppInstanceGroupUserWithOptions(request, runtime);
}

model UpdateAppInstanceGroupImageRequest {
  appCenterImageId?: string(name='AppCenterImageId'),
  appInstanceGroupId?: string(name='AppInstanceGroupId'),
  bizRegionId?: string(name='BizRegionId'),
  productType?: string(name='ProductType'),
}

model UpdateAppInstanceGroupImageResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateAppInstanceGroupImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAppInstanceGroupImageResponseBody(name='body'),
}

async function updateAppInstanceGroupImageWithOptions(request: UpdateAppInstanceGroupImageRequest, runtime: Util.RuntimeOptions): UpdateAppInstanceGroupImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appCenterImageId)) {
    query['AppCenterImageId'] = request.appCenterImageId;
  }
  if (!Util.isUnset(request.appInstanceGroupId)) {
    query['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.bizRegionId)) {
    query['BizRegionId'] = request.bizRegionId;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAppInstanceGroupImage',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAppInstanceGroupImage(request: UpdateAppInstanceGroupImageRequest): UpdateAppInstanceGroupImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAppInstanceGroupImageWithOptions(request, runtime);
}

