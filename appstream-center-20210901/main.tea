/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('appstream-center', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ApproveOtaTaskRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
  bizRegionId?: string(name='BizRegionId', example='cn-hangzhou'),
  otaType?: string(name='OtaType', example='Fota'),
  startTime?: string(name='StartTime', example='2022-08-04T14:36:00+08:00'),
  taskId?: string(name='TaskId', example='ota-be7jzm29wrrz5****'),
}

model ApproveOtaTaskResponseBody = {
  code?: string(name='Code', example='OtaTask.Running'),
  message?: string(name='Message', example='The task is running and cannot be sumitted.'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ApproveOtaTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApproveOtaTaskResponseBody(name='body'),
}

async function approveOtaTaskWithOptions(request: ApproveOtaTaskRequest, runtime: Util.RuntimeOptions): ApproveOtaTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.bizRegionId)) {
    body['BizRegionId'] = request.bizRegionId;
  }
  if (!Util.isUnset(request.otaType)) {
    body['OtaType'] = request.otaType;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ApproveOtaTask',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function approveOtaTask(request: ApproveOtaTaskRequest): ApproveOtaTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return approveOtaTaskWithOptions(request, runtime);
}

model AuthorizeInstanceGroupRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
  authorizeUserIds?: [ string ](name='AuthorizeUserIds'),
  productType?: string(name='ProductType', example='CloudApp'),
  unAuthorizeUserIds?: [ string ](name='UnAuthorizeUserIds'),
}

model AuthorizeInstanceGroupResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model AuthorizeInstanceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AuthorizeInstanceGroupResponseBody(name='body'),
}

async function authorizeInstanceGroupWithOptions(request: AuthorizeInstanceGroupRequest, runtime: Util.RuntimeOptions): AuthorizeInstanceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.authorizeUserIds)) {
    body['AuthorizeUserIds'] = request.authorizeUserIds;
  }
  if (!Util.isUnset(request.productType)) {
    body['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.unAuthorizeUserIds)) {
    body['UnAuthorizeUserIds'] = request.unAuthorizeUserIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AuthorizeInstanceGroup',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function authorizeInstanceGroup(request: AuthorizeInstanceGroupRequest): AuthorizeInstanceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return authorizeInstanceGroupWithOptions(request, runtime);
}

model CancelOtaTaskRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-53fvrq1oanz6c****'),
  taskId?: string(name='TaskId', example='ota-be7jzm29wrrz5****'),
}

model CancelOtaTaskResponseBody = {
  code?: string(name='Code', example='OtaTask.Running'),
  message?: string(name='Message', example='The task is running and cannot be sumitted.'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CancelOtaTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelOtaTaskResponseBody(name='body'),
}

async function cancelOtaTaskWithOptions(request: CancelOtaTaskRequest, runtime: Util.RuntimeOptions): CancelOtaTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CancelOtaTask',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelOtaTask(request: CancelOtaTaskRequest): CancelOtaTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOtaTaskWithOptions(request, runtime);
}

model CreateAppInstanceGroupRequest {
  appCenterImageId?: string(name='AppCenterImageId', example='img-8z4nztpaqvay4****'),
  appInstanceGroupName?: string(name='AppInstanceGroupName'),
  autoPay?: boolean(name='AutoPay', example='false'),
  autoRenew?: boolean(name='AutoRenew', example='false'),
  bizRegionId?: string(name='BizRegionId', example='cn-hangzhou'),
  chargeResourceMode?: string(name='ChargeResourceMode', example='Node'),
  chargeType?: string(name='ChargeType', example='PrePaid'),
  network?: {
    routes?: [ 
      {
        destination?: string(name='Destination'),
        mode?: string(name='Mode'),
      }
    ](name='Routes'),
    strategyType?: string(name='StrategyType'),
  }(name='Network'),
  nodePool?: {
    maxScalingAmount?: int32(name='MaxScalingAmount'),
    nodeAmount?: int32(name='NodeAmount', example='1'),
    nodeCapacity?: int32(name='NodeCapacity', example='2'),
    nodeInstanceType?: string(name='NodeInstanceType', example='appstreaming.vgpu.4c8g.2g'),
    recurrenceSchedules?: [ 
      {
        recurrenceType?: string(name='RecurrenceType'),
        recurrenceValues?: [ int32 ](name='RecurrenceValues'),
        timerPeriods?: [ 
          {
            amount?: int32(name='Amount'),
            endTime?: string(name='EndTime'),
            startTime?: string(name='StartTime'),
          }
        ](name='TimerPeriods'),
      }
    ](name='RecurrenceSchedules'),
    scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes'),
    scalingStep?: int32(name='ScalingStep'),
    scalingUsageThreshold?: string(name='ScalingUsageThreshold'),
    strategyDisableDate?: string(name='StrategyDisableDate'),
    strategyEnableDate?: string(name='StrategyEnableDate'),
    strategyType?: string(name='StrategyType'),
    warmUp?: boolean(name='WarmUp'),
  }(name='NodePool'),
  period?: int32(name='Period', example='1'),
  periodUnit?: string(name='PeriodUnit', example='Day'),
  preOpenAppId?: string(name='PreOpenAppId'),
  productType?: string(name='ProductType', example='CloudApp'),
  promotionId?: string(name='PromotionId', example='17440009****'),
  runtimePolicy?: {
    sessionType?: string(name='SessionType'),
  }(name='RuntimePolicy'),
  sessionTimeout?: int32(name='SessionTimeout', example='15'),
  userInfo?: {
    type?: string(name='Type', example='Simple'),
  }(name='UserInfo'),
  users?: [ string ](name='Users'),
}

model CreateAppInstanceGroupShrinkRequest {
  appCenterImageId?: string(name='AppCenterImageId', example='img-8z4nztpaqvay4****'),
  appInstanceGroupName?: string(name='AppInstanceGroupName'),
  autoPay?: boolean(name='AutoPay', example='false'),
  autoRenew?: boolean(name='AutoRenew', example='false'),
  bizRegionId?: string(name='BizRegionId', example='cn-hangzhou'),
  chargeResourceMode?: string(name='ChargeResourceMode', example='Node'),
  chargeType?: string(name='ChargeType', example='PrePaid'),
  networkShrink?: string(name='Network'),
  nodePoolShrink?: string(name='NodePool'),
  period?: int32(name='Period', example='1'),
  periodUnit?: string(name='PeriodUnit', example='Day'),
  preOpenAppId?: string(name='PreOpenAppId'),
  productType?: string(name='ProductType', example='CloudApp'),
  promotionId?: string(name='PromotionId', example='17440009****'),
  runtimePolicyShrink?: string(name='RuntimePolicy'),
  sessionTimeout?: int32(name='SessionTimeout', example='15'),
  userInfoShrink?: string(name='UserInfo'),
  users?: [ string ](name='Users'),
}

model CreateAppInstanceGroupResponseBody = {
  appInstanceGroupModel?: {
    appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
    nodePoolId?: string(name='NodePoolId', example='rg-ew7va2g1wl3vm****'),
    orderId?: string(name='OrderId', example='12345****'),
  }(name='AppInstanceGroupModel'),
  requestId?: string(name='RequestId', example='41730F59-EEF0-53E8-9692-2E82E6721D46'),
}

model CreateAppInstanceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAppInstanceGroupResponseBody(name='body'),
}

async function createAppInstanceGroupWithOptions(tmpReq: CreateAppInstanceGroupRequest, runtime: Util.RuntimeOptions): CreateAppInstanceGroupResponse {
  Util.validateModel(tmpReq);
  var request = new CreateAppInstanceGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.network)) {
    request.networkShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.network, 'Network', 'json');
  }
  if (!Util.isUnset(tmpReq.nodePool)) {
    request.nodePoolShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.nodePool, 'NodePool', 'json');
  }
  if (!Util.isUnset(tmpReq.runtimePolicy)) {
    request.runtimePolicyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.runtimePolicy, 'RuntimePolicy', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appCenterImageId)) {
    body['AppCenterImageId'] = request.appCenterImageId;
  }
  if (!Util.isUnset(request.appInstanceGroupName)) {
    body['AppInstanceGroupName'] = request.appInstanceGroupName;
  }
  if (!Util.isUnset(request.autoPay)) {
    body['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.autoRenew)) {
    body['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.bizRegionId)) {
    body['BizRegionId'] = request.bizRegionId;
  }
  if (!Util.isUnset(request.chargeResourceMode)) {
    body['ChargeResourceMode'] = request.chargeResourceMode;
  }
  if (!Util.isUnset(request.chargeType)) {
    body['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.networkShrink)) {
    body['Network'] = request.networkShrink;
  }
  if (!Util.isUnset(request.nodePoolShrink)) {
    body['NodePool'] = request.nodePoolShrink;
  }
  if (!Util.isUnset(request.period)) {
    body['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    body['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.preOpenAppId)) {
    body['PreOpenAppId'] = request.preOpenAppId;
  }
  if (!Util.isUnset(request.productType)) {
    body['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.promotionId)) {
    body['PromotionId'] = request.promotionId;
  }
  if (!Util.isUnset(request.runtimePolicyShrink)) {
    body['RuntimePolicy'] = request.runtimePolicyShrink;
  }
  if (!Util.isUnset(request.sessionTimeout)) {
    body['SessionTimeout'] = request.sessionTimeout;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    body['UserInfo'] = request.userInfoShrink;
  }
  if (!Util.isUnset(request.users)) {
    body['Users'] = request.users;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAppInstanceGroup',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAppInstanceGroup(request: CreateAppInstanceGroupRequest): CreateAppInstanceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppInstanceGroupWithOptions(request, runtime);
}

model DeleteAppInstanceGroupRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
  productType?: string(name='ProductType', example='CloudApp'),
}

model DeleteAppInstanceGroupResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteAppInstanceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAppInstanceGroupResponseBody(name='body'),
}

async function deleteAppInstanceGroupWithOptions(request: DeleteAppInstanceGroupRequest, runtime: Util.RuntimeOptions): DeleteAppInstanceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.productType)) {
    body['ProductType'] = request.productType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAppInstanceGroup',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAppInstanceGroup(request: DeleteAppInstanceGroupRequest): DeleteAppInstanceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAppInstanceGroupWithOptions(request, runtime);
}

model DeleteAppInstancesRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
  appInstanceIds?: [ string ](name='AppInstanceIds'),
  productType?: string(name='ProductType', example='CloudApp'),
}

model DeleteAppInstancesResponseBody = {
  deleteAppInstanceModels?: [ 
    {
      appInstanceId?: string(name='AppInstanceId', example='ai-gbuea*****'),
      code?: string(name='Code', example='InvalidParameter.ProductType'),
      message?: string(name='Message', example='The parameter ProductType is invalid.'),
      success?: boolean(name='Success', example='true'),
    }
  ](name='DeleteAppInstanceModels'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteAppInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAppInstancesResponseBody(name='body'),
}

async function deleteAppInstancesWithOptions(request: DeleteAppInstancesRequest, runtime: Util.RuntimeOptions): DeleteAppInstancesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.appInstanceIds)) {
    body['AppInstanceIds'] = request.appInstanceIds;
  }
  if (!Util.isUnset(request.productType)) {
    body['ProductType'] = request.productType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAppInstances',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAppInstances(request: DeleteAppInstancesRequest): DeleteAppInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAppInstancesWithOptions(request, runtime);
}

model GetAppInstanceGroupRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
  productType?: string(name='ProductType', example='CloudApp'),
}

model GetAppInstanceGroupResponseBody = {
  appInstanceGroupModels?: {
    amount?: int32(name='Amount', example='0'),
    appCenterImageId?: string(name='AppCenterImageId', example='img-8z4nztpaqvay4****'),
    appCenterImageName?: string(name='AppCenterImageName', example='OfficeApps'),
    appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
    appInstanceGroupName?: string(name='AppInstanceGroupName'),
    appInstanceType?: string(name='AppInstanceType', example='__dynamic__'),
    appPolicyId?: string(name='AppPolicyId'),
    apps?: [ 
      {
        appId?: string(name='AppId', example='ca-i87mycyn419nu****'),
        appName?: string(name='AppName'),
      }
    ](name='Apps'),
    chargeType?: string(name='ChargeType', example='PrePaid'),
    expiredTime?: string(name='ExpiredTime', example='2022-04-27T16:00:00.000+00:00'),
    gmtCreate?: string(name='GmtCreate', example='2022-04-26T15:06:16.000+00:00'),
    nodePool?: [ 
      {
        amount?: int32(name='Amount', example='2'),
        maxScalingAmount?: int32(name='MaxScalingAmount', example='8'),
        nodeAmount?: int32(name='NodeAmount', example='1'),
        nodeCapacity?: int32(name='NodeCapacity', example='2'),
        nodeInstanceType?: string(name='NodeInstanceType', example='appstreaming.vgpu.4c8g.2g'),
        nodePoolId?: string(name='NodePoolId', example='rg-g6922kced36hx****'),
        nodeTypeName?: string(name='NodeTypeName'),
        nodeUsed?: int32(name='NodeUsed', example='1'),
        recurrenceSchedules?: [ 
          {
            recurrenceType?: string(name='RecurrenceType', example='Weekly'),
            recurrenceValues?: [ int32 ](name='RecurrenceValues'),
            timerPeriods?: [ 
              {
                amount?: int32(name='Amount', example='5'),
                endTime?: string(name='EndTime', example='11:00'),
                startTime?: string(name='StartTime', example='09:30'),
              }
            ](name='TimerPeriods'),
          }
        ](name='RecurrenceSchedules'),
        scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes', example='5'),
        scalingNodeAmount?: int32(name='ScalingNodeAmount', example='8'),
        scalingNodeUsed?: int32(name='ScalingNodeUsed', example='4'),
        scalingStep?: int32(name='ScalingStep', example='2'),
        scalingUsageThreshold?: string(name='ScalingUsageThreshold', example='85'),
        strategyDisableDate?: string(name='StrategyDisableDate', example='2022-09-08'),
        strategyEnableDate?: string(name='StrategyEnableDate', example='2022-08-01'),
        strategyType?: string(name='StrategyType', example='NODE_FIXED'),
        warmUp?: boolean(name='WarmUp', example='false'),
      }
    ](name='NodePool'),
    osType?: string(name='OsType', example='Windows'),
    otaInfo?: {
      newOtaVersion?: string(name='NewOtaVersion', example='0.0.1-D-20220630.11****'),
      otaVersion?: string(name='OtaVersion', example='0.0.1-D-20220615.11****'),
      taskId?: string(name='TaskId', example='ota-e49929gv8acz5****'),
    }(name='OtaInfo'),
    productType?: string(name='ProductType', example='CloudApp'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    resourceStatus?: string(name='ResourceStatus', example='AVAILABLE'),
    sessionTimeout?: string(name='SessionTimeout', example='15'),
    specId?: string(name='SpecId', example='spec-8o18t8uc31qib0****'),
    status?: string(name='Status', example='PUBLISHED'),
  }(name='AppInstanceGroupModels', description='AppInstanceGroupModels'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model GetAppInstanceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAppInstanceGroupResponseBody(name='body'),
}

async function getAppInstanceGroupWithOptions(request: GetAppInstanceGroupRequest, runtime: Util.RuntimeOptions): GetAppInstanceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appInstanceGroupId)) {
    query['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAppInstanceGroup',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAppInstanceGroup(request: GetAppInstanceGroupRequest): GetAppInstanceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAppInstanceGroupWithOptions(request, runtime);
}

model GetConnectionTicketRequest {
  appId?: string(name='AppId', example='ca-e4s0puhmwi7v****'),
  appInstanceGroupIdList?: [ string ](name='AppInstanceGroupIdList'),
  appInstanceId?: string(name='AppInstanceId', example='ai-1rznfnrvsa99d****'),
  appStartParam?: string(name='AppStartParam', example='/q /n'),
  appVersion?: string(name='AppVersion', example='1.0.0'),
  bizRegionId?: string(name='BizRegionId', example='cn-hangzhou'),
  endUserId?: string(name='EndUserId', example='alice'),
  productType?: string(name='ProductType', example='CloudApp'),
  taskId?: string(name='TaskId', example='28778acb-a469-4bc0-8e0f****'),
}

model GetConnectionTicketResponseBody = {
  appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-53fvrq1oan****'),
  appInstanceId?: string(name='AppInstanceId', example='ai-7ybdeiyoeh5e****'),
  bizRegionId?: string(name='BizRegionId', example='cn-hangzhou'),
  osType?: string(name='OsType', example='Windows'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  taskId?: string(name='TaskId', example='f3d1b31c-605e-4d04-a896****'),
  taskStatus?: string(name='TaskStatus', example='Running'),
  ticket?: string(name='Ticket', example='DQpbRGVza3RvcF0NCkZvcmNlVGxzVHlwZT0xDQpHV1Rva2VuUGFydDE9MDAva09ROW1FUTU3dU****'),
}

model GetConnectionTicketResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetConnectionTicketResponseBody(name='body'),
}

async function getConnectionTicketWithOptions(request: GetConnectionTicketRequest, runtime: Util.RuntimeOptions): GetConnectionTicketResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appInstanceGroupIdList)) {
    body['AppInstanceGroupIdList'] = request.appInstanceGroupIdList;
  }
  if (!Util.isUnset(request.appInstanceId)) {
    body['AppInstanceId'] = request.appInstanceId;
  }
  if (!Util.isUnset(request.appStartParam)) {
    body['AppStartParam'] = request.appStartParam;
  }
  if (!Util.isUnset(request.appVersion)) {
    body['AppVersion'] = request.appVersion;
  }
  if (!Util.isUnset(request.bizRegionId)) {
    body['BizRegionId'] = request.bizRegionId;
  }
  if (!Util.isUnset(request.endUserId)) {
    body['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.productType)) {
    body['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetConnectionTicket',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getConnectionTicket(request: GetConnectionTicketRequest): GetConnectionTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConnectionTicketWithOptions(request, runtime);
}

model GetOtaTaskByTaskIdRequest {
  taskId?: string(name='TaskId', example='ota-be7jzm29wrrz5****'),
}

model GetOtaTaskByTaskIdResponseBody = {
  code?: string(name='Code', example='OtaTask.Running'),
  message?: string(name='Message', example='The task is running and cannot be sumitted.'),
  otaVersion?: string(name='OtaVersion', example='0.0.1-R-20220708.110604'),
  releaseNote?: string(name='ReleaseNote'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  taskStartTime?: string(name='TaskStartTime', example='2022-08-04T14:36:00+08:00'),
}

model GetOtaTaskByTaskIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOtaTaskByTaskIdResponseBody(name='body'),
}

async function getOtaTaskByTaskIdWithOptions(request: GetOtaTaskByTaskIdRequest, runtime: Util.RuntimeOptions): GetOtaTaskByTaskIdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetOtaTaskByTaskId',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOtaTaskByTaskId(request: GetOtaTaskByTaskIdRequest): GetOtaTaskByTaskIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOtaTaskByTaskIdWithOptions(request, runtime);
}

model GetResourcePriceRequest {
  amount?: long(name='Amount', example='1'),
  bizRegionId?: string(name='BizRegionId', example='cn-hangzhou'),
  chargeType?: string(name='ChargeType', example='PrePaid'),
  nodeInstanceType?: string(name='NodeInstanceType', example='appstreaming.vgpu.4c8g.2g'),
  period?: long(name='Period', example='1'),
  periodUnit?: string(name='PeriodUnit', example='Day'),
  productType?: string(name='ProductType', example='CloudApp'),
}

model GetResourcePriceResponseBody = {
  code?: string(name='Code', example='InvalidParameter.ProductType'),
  message?: string(name='Message', example='The parameter ProductType is invalid.'),
  priceModel?: {
    price?: {
      currency?: string(name='Currency', example='CNY'),
      discountPrice?: string(name='DiscountPrice', example='1.00'),
      originalPrice?: string(name='OriginalPrice', example='11.00'),
      promotions?: [ 
        {
          optionCode?: string(name='OptionCode', example='coupon****'),
          promotionDesc?: string(name='PromotionDesc'),
          promotionId?: string(name='PromotionId', example='17440009****'),
          promotionName?: string(name='PromotionName'),
          selected?: boolean(name='Selected', example='true'),
        }
      ](name='Promotions'),
      tradePrice?: string(name='TradePrice', example='10.00'),
    }(name='Price'),
    rules?: [ 
      {
        description?: string(name='Description'),
        ruleId?: long(name='RuleId', example='102002100393****'),
      }
    ](name='Rules'),
  }(name='PriceModel'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model GetResourcePriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourcePriceResponseBody(name='body'),
}

async function getResourcePriceWithOptions(request: GetResourcePriceRequest, runtime: Util.RuntimeOptions): GetResourcePriceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.bizRegionId)) {
    query['BizRegionId'] = request.bizRegionId;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.nodeInstanceType)) {
    query['NodeInstanceType'] = request.nodeInstanceType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResourcePrice',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourcePrice(request: GetResourcePriceRequest): GetResourcePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourcePriceWithOptions(request, runtime);
}

model GetResourceRenewPriceRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
  period?: long(name='Period', example='1'),
  periodUnit?: string(name='PeriodUnit', example='Week'),
  productType?: string(name='ProductType', example='CloudApp'),
}

model GetResourceRenewPriceResponseBody = {
  data?: {
    price?: {
      currency?: string(name='Currency', example='CNY'),
      discountPrice?: string(name='DiscountPrice', example='1'),
      originalPrice?: string(name='OriginalPrice', example='11'),
      promotions?: [ 
        {
          optionCode?: string(name='OptionCode', example='coupon****'),
          promotionDesc?: string(name='PromotionDesc'),
          promotionId?: string(name='PromotionId', example='139965*****'),
          promotionName?: string(name='PromotionName'),
          selected?: boolean(name='Selected', example='true'),
        }
      ](name='Promotions'),
      tradePrice?: string(name='TradePrice', example='10'),
    }(name='Price'),
    rules?: [ 
      {
        description?: string(name='Description'),
        ruleId?: long(name='RuleId', example='20002****'),
      }
    ](name='Rules'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model GetResourceRenewPriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourceRenewPriceResponseBody(name='body'),
}

async function getResourceRenewPriceWithOptions(request: GetResourceRenewPriceRequest, runtime: Util.RuntimeOptions): GetResourceRenewPriceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appInstanceGroupId)) {
    query['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResourceRenewPrice',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourceRenewPrice(request: GetResourceRenewPriceRequest): GetResourceRenewPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceRenewPriceWithOptions(request, runtime);
}

model ListAppInstanceGroupRequest {
  appCenterImageId?: string(name='AppCenterImageId'),
  appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
  appInstanceGroupName?: string(name='AppInstanceGroupName'),
  nodeInstanceType?: string(name='NodeInstanceType'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  productType?: string(name='ProductType', example='CloudApp'),
  regionId?: string(name='RegionId'),
  status?: [ string ](name='Status'),
}

model ListAppInstanceGroupResponseBody = {
  appInstanceGroupModels?: [ 
    {
      amount?: int32(name='Amount', example='1'),
      appCenterImageId?: string(name='AppCenterImageId', example='img-8z4nztpaqvay4****'),
      appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
      appInstanceGroupName?: string(name='AppInstanceGroupName'),
      appInstanceType?: string(name='AppInstanceType', example='__dynamic__'),
      appPolicyId?: string(name='AppPolicyId'),
      apps?: [ 
        {
          appIcon?: string(name='AppIcon'),
          appId?: string(name='AppId', example='ca-i87mycyn419nu****'),
          appName?: string(name='AppName'),
          appVersion?: string(name='AppVersion'),
          appVersionName?: string(name='AppVersionName'),
        }
      ](name='Apps'),
      chargeResourceMode?: string(name='ChargeResourceMode'),
      chargeType?: string(name='ChargeType', example='PrePaid'),
      expiredTime?: string(name='ExpiredTime', example='2022-04-27T16:00:00.000+00:00'),
      gmtCreate?: string(name='GmtCreate', example='2022-04-26T15:06:16.000+00:00'),
      nodePool?: [ 
        {
          amount?: int32(name='Amount', example='2'),
          maxScalingAmount?: int32(name='MaxScalingAmount', example='8'),
          nodeAmount?: int32(name='NodeAmount', example='1'),
          nodeCapacity?: int32(name='NodeCapacity', example='2'),
          nodeInstanceType?: string(name='NodeInstanceType', example='appstreaming.vgpu.4c8g.2g'),
          nodePoolId?: string(name='NodePoolId', example='rg-g6922kced36hx****'),
          nodeTypeName?: string(name='NodeTypeName'),
          nodeUsed?: int32(name='NodeUsed', example='1'),
          recurrenceSchedules?: [ 
            {
              recurrenceType?: string(name='RecurrenceType'),
              recurrenceValues?: [ int32 ](name='RecurrenceValues'),
              timerPeriods?: [ 
                {
                  amount?: int32(name='Amount'),
                  endTime?: string(name='EndTime'),
                  startTime?: string(name='StartTime'),
                }
              ](name='TimerPeriods'),
            }
          ](name='RecurrenceSchedules'),
          scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes', example='5'),
          scalingNodeAmount?: int32(name='ScalingNodeAmount', example='8'),
          scalingNodeUsed?: int32(name='ScalingNodeUsed', example='4'),
          scalingStep?: int32(name='ScalingStep', example='2'),
          scalingUsageThreshold?: string(name='ScalingUsageThreshold', example='85'),
          strategyDisableDate?: string(name='StrategyDisableDate'),
          strategyEnableDate?: string(name='StrategyEnableDate'),
          strategyType?: string(name='StrategyType', example='NODE_FIXED'),
          warmUp?: boolean(name='WarmUp'),
        }
      ](name='NodePool'),
      osType?: string(name='OsType', example='Windows'),
      otaInfo?: {
        newOtaVersion?: string(name='NewOtaVersion', example='0.0.1-D-20220630.11****'),
        otaVersion?: string(name='OtaVersion', example='0.0.1-D-20220615.11****'),
        taskId?: string(name='TaskId', example='ota-e49929gv8acz5****'),
      }(name='OtaInfo'),
      productType?: string(name='ProductType', example='CloudApp'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceStatus?: string(name='ResourceStatus'),
      sessionTimeout?: string(name='SessionTimeout', example='15'),
      specId?: string(name='SpecId', example='spec-8o18t8uc31qib0****'),
      status?: string(name='Status', example='PUBLISHED'),
    }
  ](name='AppInstanceGroupModels'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  totalCount?: int32(name='TotalCount', example='15'),
}

model ListAppInstanceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAppInstanceGroupResponseBody(name='body'),
}

async function listAppInstanceGroupWithOptions(request: ListAppInstanceGroupRequest, runtime: Util.RuntimeOptions): ListAppInstanceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appCenterImageId)) {
    query['AppCenterImageId'] = request.appCenterImageId;
  }
  if (!Util.isUnset(request.appInstanceGroupId)) {
    query['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.appInstanceGroupName)) {
    query['AppInstanceGroupName'] = request.appInstanceGroupName;
  }
  if (!Util.isUnset(request.nodeInstanceType)) {
    query['NodeInstanceType'] = request.nodeInstanceType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListAppInstanceGroup',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAppInstanceGroup(request: ListAppInstanceGroupRequest): ListAppInstanceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppInstanceGroupWithOptions(request, runtime);
}

model ListAppInstancesRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-4p5f8tj16yb8b****'),
  appInstanceId?: string(name='AppInstanceId', example='ai-azn3kmwruh1vl****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  status?: [ string ](name='Status'),
}

model ListAppInstancesResponseBody = {
  appInstanceModels?: [ 
    {
      appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-dk8p95irqfst9****'),
      appInstanceId?: string(name='AppInstanceId', example='ai-8dl7dzchklmka****'),
      gmtCreate?: string(name='GmtCreate', example='2023-03-07T20:29:19.000+08:00'),
      gmtModified?: string(name='GmtModified', example='2023-03-07T20:29:19.000+08:00'),
      mainEthPublicIp?: string(name='MainEthPublicIp', example='10.13.13.211'),
      sessionStatus?: string(name='SessionStatus', example='connect'),
      status?: string(name='Status', example='BOUND'),
    }
  ](name='AppInstanceModels'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  totalCount?: int32(name='TotalCount', example='18'),
}

model ListAppInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAppInstancesResponseBody(name='body'),
}

async function listAppInstancesWithOptions(request: ListAppInstancesRequest, runtime: Util.RuntimeOptions): ListAppInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appInstanceGroupId)) {
    query['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.appInstanceId)) {
    query['AppInstanceId'] = request.appInstanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListAppInstances',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAppInstances(request: ListAppInstancesRequest): ListAppInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppInstancesWithOptions(request, runtime);
}

model ListNodeInstanceTypeRequest {
  bizRegionId?: string(name='BizRegionId'),
  language?: string(name='Language'),
  nodeInstanceType?: string(name='NodeInstanceType'),
  osType?: string(name='OsType'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  productType?: string(name='ProductType', example='CloudApp'),
}

model ListNodeInstanceTypeResponseBody = {
  nodeInstanceTypeModels?: [ 
    {
      cpu?: string(name='Cpu', example='4'),
      gpu?: string(name='Gpu', example='2'),
      gpuMemory?: long(name='GpuMemory'),
      maxCapacity?: int32(name='MaxCapacity'),
      memory?: long(name='Memory', example='8192'),
      nodeInstanceType?: string(name='NodeInstanceType', example='appstreaming.vgpu.4c8g.2g'),
      nodeInstanceTypeFamily?: string(name='NodeInstanceTypeFamily', example='appstreaming.vgpu'),
      nodeTypeName?: string(name='NodeTypeName'),
    }
  ](name='NodeInstanceTypeModels'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='B6D88508-51D4-5105-8B3F-201EEE374B30'),
  totalCount?: int32(name='TotalCount', example='6'),
}

model ListNodeInstanceTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNodeInstanceTypeResponseBody(name='body'),
}

async function listNodeInstanceTypeWithOptions(request: ListNodeInstanceTypeRequest, runtime: Util.RuntimeOptions): ListNodeInstanceTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizRegionId)) {
    query['BizRegionId'] = request.bizRegionId;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.nodeInstanceType)) {
    query['NodeInstanceType'] = request.nodeInstanceType;
  }
  if (!Util.isUnset(request.osType)) {
    query['OsType'] = request.osType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListNodeInstanceType',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodeInstanceType(request: ListNodeInstanceTypeRequest): ListNodeInstanceTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodeInstanceTypeWithOptions(request, runtime);
}

model ListOtaTaskRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-53fvrq1oanz6c****'),
  otaType?: string(name='OtaType', example='Fota'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListOtaTaskResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  taskList?: [ 
    {
      otaVersion?: string(name='OtaVersion', example='0.0.1-R-20220708.110604'),
      taskDisplayStatus?: string(name='TaskDisplayStatus', example='RUNNING'),
      taskId?: string(name='TaskId', example='ota-be7jzm29wrrz5****'),
      taskStartTime?: string(name='TaskStartTime', example='2022-08-04T14:36:00+08:00'),
    }
  ](name='TaskList'),
  totalCount?: int32(name='TotalCount', example='6'),
}

model ListOtaTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOtaTaskResponseBody(name='body'),
}

async function listOtaTaskWithOptions(request: ListOtaTaskRequest, runtime: Util.RuntimeOptions): ListOtaTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.otaType)) {
    body['OtaType'] = request.otaType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListOtaTask',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOtaTask(request: ListOtaTaskRequest): ListOtaTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOtaTaskWithOptions(request, runtime);
}

model ListRegionsResponseBody = {
  regionModels?: [ 
    {
      regionId?: string(name='regionId'),
    }
  ](name='RegionModels'),
  requestId?: string(name='RequestId', example='BB825037-D0E2-574E-A45F-2886D70C7CFF'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegionsWithOptions(runtime: Util.RuntimeOptions): ListRegionsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListRegions',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRegions(): ListRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRegionsWithOptions(runtime);
}

model ListTenantConfigResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  tenantConfigModel?: {
    appInstanceGroupExpireRemind?: boolean(name='AppInstanceGroupExpireRemind', example='true'),
  }(name='TenantConfigModel'),
}

model ListTenantConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTenantConfigResponseBody(name='body'),
}

async function listTenantConfigWithOptions(runtime: Util.RuntimeOptions): ListTenantConfigResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListTenantConfig',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTenantConfig(): ListTenantConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTenantConfigWithOptions(runtime);
}

model LogOffAllSessionsInAppInstanceGroupRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
  productType?: string(name='ProductType', example='CloudApp'),
}

model LogOffAllSessionsInAppInstanceGroupResponseBody = {
  code?: string(name='Code', example='InvalidParameter.ProductType'),
  message?: string(name='Message', example='The parameter ProductType is invalid.'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model LogOffAllSessionsInAppInstanceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LogOffAllSessionsInAppInstanceGroupResponseBody(name='body'),
}

async function logOffAllSessionsInAppInstanceGroupWithOptions(request: LogOffAllSessionsInAppInstanceGroupRequest, runtime: Util.RuntimeOptions): LogOffAllSessionsInAppInstanceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.productType)) {
    body['ProductType'] = request.productType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'LogOffAllSessionsInAppInstanceGroup',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function logOffAllSessionsInAppInstanceGroup(request: LogOffAllSessionsInAppInstanceGroupRequest): LogOffAllSessionsInAppInstanceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return logOffAllSessionsInAppInstanceGroupWithOptions(request, runtime);
}

model ModifyAppInstanceGroupAttributeRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
  appInstanceGroupName?: string(name='AppInstanceGroupName'),
  nodePool?: {
    nodeCapacity?: int32(name='NodeCapacity', example='2'),
    nodePoolId?: string(name='NodePoolId', example='rg-ew7va2g1wl3vm****'),
  }(name='NodePool'),
  productType?: string(name='ProductType', example='CloudApp'),
  sessionTimeout?: int32(name='SessionTimeout', example='15'),
}

model ModifyAppInstanceGroupAttributeShrinkRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
  appInstanceGroupName?: string(name='AppInstanceGroupName'),
  nodePoolShrink?: string(name='NodePool'),
  productType?: string(name='ProductType', example='CloudApp'),
  sessionTimeout?: int32(name='SessionTimeout', example='15'),
}

model ModifyAppInstanceGroupAttributeResponseBody = {
  code?: string(name='Code', example='InvalidParameter.ProductType'),
  message?: string(name='Message', example='The parameter ProductType is invalid.'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyAppInstanceGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAppInstanceGroupAttributeResponseBody(name='body'),
}

async function modifyAppInstanceGroupAttributeWithOptions(tmpReq: ModifyAppInstanceGroupAttributeRequest, runtime: Util.RuntimeOptions): ModifyAppInstanceGroupAttributeResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyAppInstanceGroupAttributeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.nodePool)) {
    request.nodePoolShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.nodePool, 'NodePool', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appInstanceGroupId)) {
    query['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.appInstanceGroupName)) {
    query['AppInstanceGroupName'] = request.appInstanceGroupName;
  }
  if (!Util.isUnset(request.nodePoolShrink)) {
    query['NodePool'] = request.nodePoolShrink;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.sessionTimeout)) {
    query['SessionTimeout'] = request.sessionTimeout;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAppInstanceGroupAttribute',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAppInstanceGroupAttribute(request: ModifyAppInstanceGroupAttributeRequest): ModifyAppInstanceGroupAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAppInstanceGroupAttributeWithOptions(request, runtime);
}

model ModifyNodePoolAttributeRequest {
  bizRegionId?: string(name='BizRegionId', example='cn-hangzhou'),
  nodeCapacity?: int32(name='NodeCapacity', example='2'),
  nodePoolStrategy?: {
    maxScalingAmount?: int32(name='MaxScalingAmount', example='10'),
    nodeAmount?: int32(name='NodeAmount'),
    recurrenceSchedules?: [ 
      {
        recurrenceType?: string(name='RecurrenceType'),
        recurrenceValues?: [ int32 ](name='RecurrenceValues'),
        timerPeriods?: [ 
          {
            amount?: int32(name='Amount'),
            endTime?: string(name='EndTime'),
            startTime?: string(name='StartTime'),
          }
        ](name='TimerPeriods'),
      }
    ](name='RecurrenceSchedules'),
    scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes', example='5'),
    scalingStep?: int32(name='ScalingStep', example='2'),
    scalingUsageThreshold?: string(name='ScalingUsageThreshold', example='85'),
    strategyDisableDate?: string(name='StrategyDisableDate'),
    strategyEnableDate?: string(name='StrategyEnableDate'),
    strategyType?: string(name='StrategyType', example='NODE_SCALING_BY_USAGE'),
    warmUp?: boolean(name='WarmUp'),
  }(name='NodePoolStrategy'),
  poolId?: string(name='PoolId', example='rg-ew7va2g1wl3vm****'),
  productType?: string(name='ProductType'),
}

model ModifyNodePoolAttributeShrinkRequest {
  bizRegionId?: string(name='BizRegionId', example='cn-hangzhou'),
  nodeCapacity?: int32(name='NodeCapacity', example='2'),
  nodePoolStrategyShrink?: string(name='NodePoolStrategy'),
  poolId?: string(name='PoolId', example='rg-ew7va2g1wl3vm****'),
  productType?: string(name='ProductType'),
}

model ModifyNodePoolAttributeResponseBody = {
  code?: string(name='Code', example='InvalidParameter.PoolId'),
  message?: string(name='Message', example='The parameter PoolId is invalid.'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyNodePoolAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyNodePoolAttributeResponseBody(name='body'),
}

async function modifyNodePoolAttributeWithOptions(tmpReq: ModifyNodePoolAttributeRequest, runtime: Util.RuntimeOptions): ModifyNodePoolAttributeResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyNodePoolAttributeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.nodePoolStrategy)) {
    request.nodePoolStrategyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.nodePoolStrategy, 'NodePoolStrategy', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizRegionId)) {
    body['BizRegionId'] = request.bizRegionId;
  }
  if (!Util.isUnset(request.nodeCapacity)) {
    body['NodeCapacity'] = request.nodeCapacity;
  }
  if (!Util.isUnset(request.nodePoolStrategyShrink)) {
    body['NodePoolStrategy'] = request.nodePoolStrategyShrink;
  }
  if (!Util.isUnset(request.poolId)) {
    body['PoolId'] = request.poolId;
  }
  if (!Util.isUnset(request.productType)) {
    body['ProductType'] = request.productType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNodePoolAttribute',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyNodePoolAttribute(request: ModifyNodePoolAttributeRequest): ModifyNodePoolAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNodePoolAttributeWithOptions(request, runtime);
}

model ModifyTenantConfigRequest {
  appInstanceGroupExpireRemind?: boolean(name='AppInstanceGroupExpireRemind', example='true'),
}

model ModifyTenantConfigResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyTenantConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyTenantConfigResponseBody(name='body'),
}

async function modifyTenantConfigWithOptions(request: ModifyTenantConfigRequest, runtime: Util.RuntimeOptions): ModifyTenantConfigResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appInstanceGroupExpireRemind)) {
    body['AppInstanceGroupExpireRemind'] = request.appInstanceGroupExpireRemind;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyTenantConfig',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyTenantConfig(request: ModifyTenantConfigRequest): ModifyTenantConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTenantConfigWithOptions(request, runtime);
}

model PageListAppInstanceGroupUserRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  productType?: string(name='ProductType', example='CloudApp'),
}

model PageListAppInstanceGroupUserResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  users?: [ string ](name='Users'),
}

model PageListAppInstanceGroupUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PageListAppInstanceGroupUserResponseBody(name='body'),
}

async function pageListAppInstanceGroupUserWithOptions(request: PageListAppInstanceGroupUserRequest, runtime: Util.RuntimeOptions): PageListAppInstanceGroupUserResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productType)) {
    body['ProductType'] = request.productType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PageListAppInstanceGroupUser',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pageListAppInstanceGroupUser(request: PageListAppInstanceGroupUserRequest): PageListAppInstanceGroupUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return pageListAppInstanceGroupUserWithOptions(request, runtime);
}

model RenewAppInstanceGroupRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
  autoPay?: boolean(name='AutoPay', example='false'),
  period?: int32(name='Period', example='1'),
  periodUnit?: string(name='PeriodUnit', example='Day'),
  productType?: string(name='ProductType', example='CloudApp'),
  promotionId?: string(name='PromotionId', example='17440009****'),
}

model RenewAppInstanceGroupResponseBody = {
  code?: string(name='Code', example='InvalidParameter.ProductType'),
  message?: string(name='Message', example='The parameter ProductType is invalid.'),
  orderId?: string(name='OrderId', example='123456****'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RenewAppInstanceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewAppInstanceGroupResponseBody(name='body'),
}

async function renewAppInstanceGroupWithOptions(request: RenewAppInstanceGroupRequest, runtime: Util.RuntimeOptions): RenewAppInstanceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appInstanceGroupId)) {
    query['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.promotionId)) {
    query['PromotionId'] = request.promotionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenewAppInstanceGroup',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function renewAppInstanceGroup(request: RenewAppInstanceGroupRequest): RenewAppInstanceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewAppInstanceGroupWithOptions(request, runtime);
}

model UnbindRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
  appInstanceId?: string(name='AppInstanceId', example='ai-d297eyf83g5ni****'),
  endUserId?: string(name='EndUserId', example='alice'),
  productType?: string(name='ProductType', example='CloudApp'),
}

model UnbindResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model UnbindResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindResponseBody(name='body'),
}

async function unbindWithOptions(request: UnbindRequest, runtime: Util.RuntimeOptions): UnbindResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.appInstanceId)) {
    body['AppInstanceId'] = request.appInstanceId;
  }
  if (!Util.isUnset(request.endUserId)) {
    body['EndUserId'] = request.endUserId;
  }
  if (!Util.isUnset(request.productType)) {
    body['ProductType'] = request.productType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'Unbind',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbind(request: UnbindRequest): UnbindResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindWithOptions(request, runtime);
}

model UpdateAppInstanceGroupImageRequest {
  appCenterImageId?: string(name='AppCenterImageId', example='img-8z4nztpaqvay4****'),
  appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
  bizRegionId?: string(name='BizRegionId', example='cn-hangzhou'),
  productType?: string(name='ProductType', example='CloudApp'),
}

model UpdateAppInstanceGroupImageResponseBody = {
  code?: string(name='Code', example='InvalidParameter.ProductType'),
  message?: string(name='Message', example='The parameter ProductType is invalid.'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model UpdateAppInstanceGroupImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAppInstanceGroupImageResponseBody(name='body'),
}

async function updateAppInstanceGroupImageWithOptions(request: UpdateAppInstanceGroupImageRequest, runtime: Util.RuntimeOptions): UpdateAppInstanceGroupImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appCenterImageId)) {
    query['AppCenterImageId'] = request.appCenterImageId;
  }
  if (!Util.isUnset(request.appInstanceGroupId)) {
    query['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!Util.isUnset(request.bizRegionId)) {
    query['BizRegionId'] = request.bizRegionId;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAppInstanceGroupImage',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAppInstanceGroupImage(request: UpdateAppInstanceGroupImageRequest): UpdateAppInstanceGroupImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAppInstanceGroupImageWithOptions(request, runtime);
}

