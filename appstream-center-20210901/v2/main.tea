/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @signatureAlgorithm = 'v2';
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('appstream-center', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AccessPageSetAclRequest {
  accessMode?: string(name='AccessMode', description='This parameter is required.', example='FREE_ACCESS'),
  accessPageId?: string(name='AccessPageId', description='This parameter is required.', example='a-062wec3cwmayw****'),
  accessPageName?: string(name='AccessPageName', example='notepad_test'),
  effectTime?: int32(name='EffectTime', description='This parameter is required.', example='7'),
  unit?: string(name='Unit', example='Day'),
}

model AccessPageSetAclResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='InternalError'),
  requestId?: string(name='RequestId', example='E25FC620-6B6F-12D2-A992-AD8727DC****'),
  success?: string(name='Success', example='true'),
}

model AccessPageSetAclResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AccessPageSetAclResponseBody(name='body'),
}

/**
 * @summary 更新访问管理
 *
 * @param request AccessPageSetAclRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AccessPageSetAclResponse
 */
async function accessPageSetAclWithOptions(request: AccessPageSetAclRequest, runtime: $RuntimeOptions): AccessPageSetAclResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.accessMode)) {
    query['AccessMode'] = request.accessMode;
  }
  if (!$isNull(request.accessPageId)) {
    query['AccessPageId'] = request.accessPageId;
  }
  if (!$isNull(request.accessPageName)) {
    query['AccessPageName'] = request.accessPageName;
  }
  if (!$isNull(request.effectTime)) {
    query['EffectTime'] = request.effectTime;
  }
  if (!$isNull(request.unit)) {
    query['Unit'] = request.unit;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'AccessPageSetAcl',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 更新访问管理
 *
 * @param request AccessPageSetAclRequest
 * @return AccessPageSetAclResponse
 */
async function accessPageSetAcl(request: AccessPageSetAclRequest): AccessPageSetAclResponse {
  var runtime = new $RuntimeOptions{};
  return accessPageSetAclWithOptions(request, runtime);
}

model ApproveOtaTaskRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', description='The ID of the delivery group. You can call the [ListAppInstanceGroup](https://help.aliyun.com/document_detail/428506.html) operation to obtain the ID.

This parameter is required.', example='aig-9ciijz60n4xsv****'),
  bizRegionId?: string(name='BizRegionId', description='The ID of the region where the delivery group resides. You can call the [ListRegions](https://help.aliyun.com/document_detail/428500.html) operation to query the list of regions supported by App Streaming.

This parameter is required.', example='cn-hangzhou'),
  otaType?: string(name='OtaType', description='The type of the OTA update task.

Valid values:

*   Fota: update of the system components of Alibaba Cloud Workspace
*   AppUpdate
*   ImageUpdate

This parameter is required.', example='Fota'),
  startTime?: string(name='StartTime', description='The start time of the OTA update task. The time follows the ISO 8601 standard.

This parameter is required.

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-08-04T14:36:00+08:00'),
  taskId?: string(name='TaskId', description='The ID of the OTA update task. You can call the [ListAppInstanceGroup](https://help.aliyun.com/document_detail/428506.html) operation to obtain the ID.

>  Each successful call to the `ApproveOtaTask` operation causes a value change of this parameter.`` Before you call this operation, call the `ListAppInstanceGroup` operation again to obtain the latest value of this parameter.``

This parameter is required.', example='ota-be7jzm29wrrz5****'),
}

model ApproveOtaTaskResponseBody = {
  code?: string(name='Code', description='The execution result. If the request was successful, `success` is returned. If the request failed, an error message is returned.', example='OtaTask.Running'),
  message?: string(name='Message', description='The error message. If the value of `Code` is `success`, this parameter is not returned.', example='The task is running and cannot be sumitted.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ApproveOtaTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApproveOtaTaskResponseBody(name='body'),
}

/**
 * @summary Sets the execution time of an over-the-air (OTA) update task.
 *
 * @param request ApproveOtaTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ApproveOtaTaskResponse
 */
async function approveOtaTaskWithOptions(request: ApproveOtaTaskRequest, runtime: $RuntimeOptions): ApproveOtaTaskResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!$isNull(request.bizRegionId)) {
    body['BizRegionId'] = request.bizRegionId;
  }
  if (!$isNull(request.otaType)) {
    body['OtaType'] = request.otaType;
  }
  if (!$isNull(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!$isNull(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ApproveOtaTask',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Sets the execution time of an over-the-air (OTA) update task.
 *
 * @param request ApproveOtaTaskRequest
 * @return ApproveOtaTaskResponse
 */
async function approveOtaTask(request: ApproveOtaTaskRequest): ApproveOtaTaskResponse {
  var runtime = new $RuntimeOptions{};
  return approveOtaTaskWithOptions(request, runtime);
}

model AskSessionPackagePriceRequest {
  chargeType?: string(name='ChargeType'),
  maxSessions?: int32(name='MaxSessions'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  region?: string(name='Region', description='This parameter is required.', example='cn-hangzhou'),
  sessionPackageType?: string(name='SessionPackageType', example='0'),
  sessionSpec?: string(name='SessionSpec', description='This parameter is required.', example='appstreaming.general.entry'),
  sessionType?: string(name='SessionType', description='This parameter is required.', example='Windows'),
}

model AskSessionPackagePriceResponseBody = {
  data?: [ 
    {
      price?: {
        currency?: string(name='Currency', example='CNY'),
        discountPrice?: float(name='DiscountPrice', example='0.0'),
        originalPrice?: float(name='OriginalPrice', example='2000.0'),
        tradePrice?: float(name='TradePrice', example='2000.0'),
      }(name='Price'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='2C64D9E5-DFCD-10A5-A911-xxxxxxx'),
}

model AskSessionPackagePriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AskSessionPackagePriceResponseBody(name='body'),
}

/**
 * @summary 会话包收费查询
 *
 * @param request AskSessionPackagePriceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AskSessionPackagePriceResponse
 */
async function askSessionPackagePriceWithOptions(request: AskSessionPackagePriceRequest, runtime: $RuntimeOptions): AskSessionPackagePriceResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!$isNull(request.maxSessions)) {
    query['MaxSessions'] = request.maxSessions;
  }
  if (!$isNull(request.period)) {
    query['Period'] = request.period;
  }
  if (!$isNull(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!$isNull(request.region)) {
    query['Region'] = request.region;
  }
  if (!$isNull(request.sessionPackageType)) {
    query['SessionPackageType'] = request.sessionPackageType;
  }
  if (!$isNull(request.sessionSpec)) {
    query['SessionSpec'] = request.sessionSpec;
  }
  if (!$isNull(request.sessionType)) {
    query['SessionType'] = request.sessionType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'AskSessionPackagePrice',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 会话包收费查询
 *
 * @param request AskSessionPackagePriceRequest
 * @return AskSessionPackagePriceResponse
 */
async function askSessionPackagePrice(request: AskSessionPackagePriceRequest): AskSessionPackagePriceResponse {
  var runtime = new $RuntimeOptions{};
  return askSessionPackagePriceWithOptions(request, runtime);
}

model AuthorizeInstanceGroupRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', description='This parameter is required.', example='aig-9ciijz60n4xsv****'),
  authorizeUserIds?: [ string ](name='AuthorizeUserIds'),
  productType?: string(name='ProductType', description='This parameter is required.', example='CloudApp'),
  unAuthorizeUserIds?: [ string ](name='UnAuthorizeUserIds'),
  userMeta?: {
    adDomain?: string(name='AdDomain'),
    type?: string(name='Type'),
  }(name='UserMeta'),
}

model AuthorizeInstanceGroupShrinkRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', description='This parameter is required.', example='aig-9ciijz60n4xsv****'),
  authorizeUserIds?: [ string ](name='AuthorizeUserIds'),
  productType?: string(name='ProductType', description='This parameter is required.', example='CloudApp'),
  unAuthorizeUserIds?: [ string ](name='UnAuthorizeUserIds'),
  userMetaShrink?: string(name='UserMeta'),
}

model AuthorizeInstanceGroupResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model AuthorizeInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AuthorizeInstanceGroupResponseBody(name='body'),
}

/**
 * @summary 授权用户
 *
 * @param tmpReq AuthorizeInstanceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AuthorizeInstanceGroupResponse
 */
async function authorizeInstanceGroupWithOptions(tmpReq: AuthorizeInstanceGroupRequest, runtime: $RuntimeOptions): AuthorizeInstanceGroupResponse {
  tmpReq.validate();
  var request = new AuthorizeInstanceGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.userMeta)) {
    request.userMetaShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userMeta, 'UserMeta', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  var bodyFlat : map[string]any = {};
  if (!$isNull(request.authorizeUserIds)) {
    bodyFlat['AuthorizeUserIds'] = request.authorizeUserIds;
  }
  if (!$isNull(request.productType)) {
    body['ProductType'] = request.productType;
  }
  if (!$isNull(request.unAuthorizeUserIds)) {
    bodyFlat['UnAuthorizeUserIds'] = request.unAuthorizeUserIds;
  }
  if (!$isNull(request.userMetaShrink)) {
    body['UserMeta'] = request.userMetaShrink;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'AuthorizeInstanceGroup',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 授权用户
 *
 * @param request AuthorizeInstanceGroupRequest
 * @return AuthorizeInstanceGroupResponse
 */
async function authorizeInstanceGroup(request: AuthorizeInstanceGroupRequest): AuthorizeInstanceGroupResponse {
  var runtime = new $RuntimeOptions{};
  return authorizeInstanceGroupWithOptions(request, runtime);
}

model BuySessionPackageRequest {
  autoPay?: boolean(name='AutoPay'),
  chargeType?: string(name='ChargeType'),
  maxSessions?: int32(name='MaxSessions'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  projectId?: string(name='ProjectId', example='p-xxxxxxxxxxxxx'),
  region?: string(name='Region', description='This parameter is required.', example='cn-hangzhou'),
  sessionPackageName?: string(name='SessionPackageName'),
  sessionPackageType?: string(name='SessionPackageType', example='0'),
  sessionSpec?: string(name='SessionSpec', description='This parameter is required.', example='appstreaming.general.entry'),
  sessionType?: string(name='SessionType', description='This parameter is required.', example='Windows'),
}

model BuySessionPackageResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='There is a missing parameter.'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5Fxxxxxxxx'),
  sessionPackageId?: long(name='SessionPackageId', example='tp-xxxxxxxxxx'),
  success?: string(name='Success', example='false'),
}

model BuySessionPackageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BuySessionPackageResponseBody(name='body'),
}

/**
 * @summary 配置会话包
 *
 * @param request BuySessionPackageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BuySessionPackageResponse
 */
async function buySessionPackageWithOptions(request: BuySessionPackageRequest, runtime: $RuntimeOptions): BuySessionPackageResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!$isNull(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!$isNull(request.maxSessions)) {
    query['MaxSessions'] = request.maxSessions;
  }
  if (!$isNull(request.period)) {
    query['Period'] = request.period;
  }
  if (!$isNull(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!$isNull(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.region)) {
    query['Region'] = request.region;
  }
  if (!$isNull(request.sessionPackageName)) {
    query['SessionPackageName'] = request.sessionPackageName;
  }
  if (!$isNull(request.sessionPackageType)) {
    query['SessionPackageType'] = request.sessionPackageType;
  }
  if (!$isNull(request.sessionSpec)) {
    query['SessionSpec'] = request.sessionSpec;
  }
  if (!$isNull(request.sessionType)) {
    query['SessionType'] = request.sessionType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'BuySessionPackage',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 配置会话包
 *
 * @param request BuySessionPackageRequest
 * @return BuySessionPackageResponse
 */
async function buySessionPackage(request: BuySessionPackageRequest): BuySessionPackageResponse {
  var runtime = new $RuntimeOptions{};
  return buySessionPackageWithOptions(request, runtime);
}

model CreateAccessPageRequest {
  accessPageName?: string(name='AccessPageName', description='This parameter is required.'),
  cloudEnvId?: string(name='CloudEnvId', example='c-e-06gdesdaxez****'),
  effectTime?: int32(name='EffectTime', example='7'),
  projectId?: string(name='ProjectId', description='This parameter is required.', example='p-065zdecaer07h****'),
  projectName?: string(name='ProjectName'),
  unit?: string(name='Unit', example='Day'),
}

model CreateAccessPageResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='a-06xnr5lyp77e7****'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: string(name='Success', example='true'),
}

model CreateAccessPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAccessPageResponseBody(name='body'),
}

/**
 * @summary 创建访问页面 
 *
 * @param request CreateAccessPageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAccessPageResponse
 */
async function createAccessPageWithOptions(request: CreateAccessPageRequest, runtime: $RuntimeOptions): CreateAccessPageResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.accessPageName)) {
    query['AccessPageName'] = request.accessPageName;
  }
  if (!$isNull(request.cloudEnvId)) {
    query['CloudEnvId'] = request.cloudEnvId;
  }
  if (!$isNull(request.effectTime)) {
    query['EffectTime'] = request.effectTime;
  }
  if (!$isNull(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.projectName)) {
    query['ProjectName'] = request.projectName;
  }
  if (!$isNull(request.unit)) {
    query['Unit'] = request.unit;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateAccessPage',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 创建访问页面 
 *
 * @param request CreateAccessPageRequest
 * @return CreateAccessPageResponse
 */
async function createAccessPage(request: CreateAccessPageRequest): CreateAccessPageResponse {
  var runtime = new $RuntimeOptions{};
  return createAccessPageWithOptions(request, runtime);
}

model CreateAppInstanceGroupRequest {
  appCenterImageId?: string(name='AppCenterImageId', description='This parameter is required.', example='img-8z4nztpaqvay4****'),
  appInstanceGroupName?: string(name='AppInstanceGroupName'),
  appPackageType?: string(name='AppPackageType'),
  appPolicyId?: string(name='AppPolicyId'),
  autoPay?: boolean(name='AutoPay', example='false'),
  autoRenew?: boolean(name='AutoRenew', example='false'),
  bizRegionId?: string(name='BizRegionId', description='This parameter is required.', example='cn-hangzhou'),
  chargeResourceMode?: string(name='ChargeResourceMode', description='This parameter is required.', example='Node'),
  chargeType?: string(name='ChargeType', description='This parameter is required.', example='PrePaid'),
  clusterId?: string(name='ClusterId'),
  network?: {
    domainRules?: [ 
      {
        domain?: string(name='Domain'),
        policy?: string(name='Policy'),
      }
    ](name='DomainRules'),
    ipExpireMinutes?: int32(name='IpExpireMinutes', example='60'),
    officeSiteId?: string(name='OfficeSiteId'),
    routes?: [ 
      {
        destination?: string(name='Destination', example='139.196.XX.XX/32'),
        mode?: string(name='Mode', example='Shared'),
      }
    ](name='Routes'),
    strategyType?: string(name='StrategyType', example='Shared'),
    vSwitchIds?: [ string ](name='VSwitchIds'),
  }(name='Network'),
  nodePool?: {
    maxIdleAppInstanceAmount?: int32(name='MaxIdleAppInstanceAmount'),
    maxScalingAmount?: int32(name='MaxScalingAmount', example='10'),
    nodeAmount?: int32(name='NodeAmount', example='1'),
    nodeCapacity?: int32(name='NodeCapacity', example='2'),
    nodeInstanceType?: string(name='NodeInstanceType'),
    recurrenceSchedules?: [ 
      {
        recurrenceType?: string(name='RecurrenceType', example='weekly'),
        recurrenceValues?: [ int32 ](name='RecurrenceValues'),
        timerPeriods?: [ 
          {
            amount?: int32(name='Amount', example='2'),
            endTime?: string(name='EndTime', example='15:00'),
            startTime?: string(name='StartTime', example='12:00'),
          }
        ](name='TimerPeriods'),
      }
    ](name='RecurrenceSchedules'),
    scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes', example='5'),
    scalingStep?: int32(name='ScalingStep', example='2'),
    scalingUsageThreshold?: string(name='ScalingUsageThreshold', example='85'),
    strategyDisableDate?: string(name='StrategyDisableDate', example='2022-09-08'),
    strategyEnableDate?: string(name='StrategyEnableDate', example='2022-08-01'),
    strategyType?: string(name='StrategyType', example='NODE_FIXED'),
    warmUp?: boolean(name='WarmUp', example='false'),
  }(name='NodePool'),
  period?: int32(name='Period', description='This parameter is required.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='This parameter is required.'),
  preOpenAppId?: string(name='PreOpenAppId', example='cag-b2ron*******'),
  productType?: string(name='ProductType', description='This parameter is required.', example='CloudApp'),
  promotionId?: string(name='PromotionId', example='17440009****'),
  runtimePolicy?: {
    debugMode?: string(name='DebugMode'),
    perSessionPerApp?: boolean(name='PerSessionPerApp'),
    sessionPreOpen?: string(name='SessionPreOpen'),
    sessionType?: string(name='SessionType', description='会话类型。', example='NORMAL'),
    sessionUserGenerationMode?: string(name='SessionUserGenerationMode'),
  }(name='RuntimePolicy'),
  securityPolicy?: {
    resetAfterUnbind?: boolean(name='ResetAfterUnbind', example='true'),
    skipUserAuthCheck?: boolean(name='SkipUserAuthCheck', example='false'),
  }(name='SecurityPolicy'),
  sessionTimeout?: int32(name='SessionTimeout', description='This parameter is required.', example='15'),
  storagePolicy?: {
    storageTypeList?: [ string ](name='StorageTypeList'),
    userProfile?: {
      remoteStoragePath?: string(name='RemoteStoragePath'),
      remoteStorageType?: string(name='RemoteStorageType'),
      userProfileSwitch?: boolean(name='UserProfileSwitch'),
    }(name='UserProfile'),
  }(name='StoragePolicy'),
  subPayType?: string(name='SubPayType'),
  userDefinePolicy?: {
    customConfig?: string(name='CustomConfig'),
  }(name='UserDefinePolicy'),
  userInfo?: {
    type?: string(name='Type', example='Simple'),
  }(name='UserInfo'),
  users?: [ string ](name='Users'),
  videoPolicy?: {
    frameRate?: int32(name='FrameRate'),
    sessionResolutionHeight?: int32(name='SessionResolutionHeight'),
    sessionResolutionWidth?: int32(name='SessionResolutionWidth'),
    streamingMode?: string(name='StreamingMode'),
    terminalResolutionAdaptive?: boolean(name='TerminalResolutionAdaptive'),
    webrtc?: boolean(name='Webrtc'),
  }(name='VideoPolicy'),
}

model CreateAppInstanceGroupShrinkRequest {
  appCenterImageId?: string(name='AppCenterImageId', description='This parameter is required.', example='img-8z4nztpaqvay4****'),
  appInstanceGroupName?: string(name='AppInstanceGroupName'),
  appPackageType?: string(name='AppPackageType'),
  appPolicyId?: string(name='AppPolicyId'),
  autoPay?: boolean(name='AutoPay', example='false'),
  autoRenew?: boolean(name='AutoRenew', example='false'),
  bizRegionId?: string(name='BizRegionId', description='This parameter is required.', example='cn-hangzhou'),
  chargeResourceMode?: string(name='ChargeResourceMode', description='This parameter is required.', example='Node'),
  chargeType?: string(name='ChargeType', description='This parameter is required.', example='PrePaid'),
  clusterId?: string(name='ClusterId'),
  networkShrink?: string(name='Network'),
  nodePoolShrink?: string(name='NodePool'),
  period?: int32(name='Period', description='This parameter is required.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='This parameter is required.'),
  preOpenAppId?: string(name='PreOpenAppId', example='cag-b2ron*******'),
  productType?: string(name='ProductType', description='This parameter is required.', example='CloudApp'),
  promotionId?: string(name='PromotionId', example='17440009****'),
  runtimePolicyShrink?: string(name='RuntimePolicy'),
  securityPolicyShrink?: string(name='SecurityPolicy'),
  sessionTimeout?: int32(name='SessionTimeout', description='This parameter is required.', example='15'),
  storagePolicyShrink?: string(name='StoragePolicy'),
  subPayType?: string(name='SubPayType'),
  userDefinePolicyShrink?: string(name='UserDefinePolicy'),
  userInfoShrink?: string(name='UserInfo'),
  users?: [ string ](name='Users'),
  videoPolicyShrink?: string(name='VideoPolicy'),
}

model CreateAppInstanceGroupResponseBody = {
  appInstanceGroupModel?: {
    appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
    nodePoolId?: string(name='NodePoolId', example='rg-ew7va2g1wl3vm****'),
    orderId?: string(name='OrderId', example='12345****'),
  }(name='AppInstanceGroupModel'),
  requestId?: string(name='RequestId'),
}

model CreateAppInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppInstanceGroupResponseBody(name='body'),
}

/**
 * @summary 创建云应用交付组
 *
 * @param tmpReq CreateAppInstanceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAppInstanceGroupResponse
 */
async function createAppInstanceGroupWithOptions(tmpReq: CreateAppInstanceGroupRequest, runtime: $RuntimeOptions): CreateAppInstanceGroupResponse {
  tmpReq.validate();
  var request = new CreateAppInstanceGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.network)) {
    request.networkShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.network, 'Network', 'json');
  }
  if (!$isNull(tmpReq.nodePool)) {
    request.nodePoolShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.nodePool, 'NodePool', 'json');
  }
  if (!$isNull(tmpReq.runtimePolicy)) {
    request.runtimePolicyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.runtimePolicy, 'RuntimePolicy', 'json');
  }
  if (!$isNull(tmpReq.securityPolicy)) {
    request.securityPolicyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.securityPolicy, 'SecurityPolicy', 'json');
  }
  if (!$isNull(tmpReq.storagePolicy)) {
    request.storagePolicyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.storagePolicy, 'StoragePolicy', 'json');
  }
  if (!$isNull(tmpReq.userDefinePolicy)) {
    request.userDefinePolicyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userDefinePolicy, 'UserDefinePolicy', 'json');
  }
  if (!$isNull(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  if (!$isNull(tmpReq.videoPolicy)) {
    request.videoPolicyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.videoPolicy, 'VideoPolicy', 'json');
  }
  var query = {};
  if (!$isNull(request.userDefinePolicyShrink)) {
    query['UserDefinePolicy'] = request.userDefinePolicyShrink;
  }
  var body : map[string]any = {};
  if (!$isNull(request.appCenterImageId)) {
    body['AppCenterImageId'] = request.appCenterImageId;
  }
  if (!$isNull(request.appInstanceGroupName)) {
    body['AppInstanceGroupName'] = request.appInstanceGroupName;
  }
  if (!$isNull(request.appPackageType)) {
    body['AppPackageType'] = request.appPackageType;
  }
  if (!$isNull(request.appPolicyId)) {
    body['AppPolicyId'] = request.appPolicyId;
  }
  if (!$isNull(request.autoPay)) {
    body['AutoPay'] = request.autoPay;
  }
  if (!$isNull(request.autoRenew)) {
    body['AutoRenew'] = request.autoRenew;
  }
  if (!$isNull(request.bizRegionId)) {
    body['BizRegionId'] = request.bizRegionId;
  }
  if (!$isNull(request.chargeResourceMode)) {
    body['ChargeResourceMode'] = request.chargeResourceMode;
  }
  if (!$isNull(request.chargeType)) {
    body['ChargeType'] = request.chargeType;
  }
  if (!$isNull(request.clusterId)) {
    body['ClusterId'] = request.clusterId;
  }
  if (!$isNull(request.networkShrink)) {
    body['Network'] = request.networkShrink;
  }
  if (!$isNull(request.nodePoolShrink)) {
    body['NodePool'] = request.nodePoolShrink;
  }
  if (!$isNull(request.period)) {
    body['Period'] = request.period;
  }
  if (!$isNull(request.periodUnit)) {
    body['PeriodUnit'] = request.periodUnit;
  }
  if (!$isNull(request.preOpenAppId)) {
    body['PreOpenAppId'] = request.preOpenAppId;
  }
  if (!$isNull(request.productType)) {
    body['ProductType'] = request.productType;
  }
  if (!$isNull(request.promotionId)) {
    body['PromotionId'] = request.promotionId;
  }
  if (!$isNull(request.runtimePolicyShrink)) {
    body['RuntimePolicy'] = request.runtimePolicyShrink;
  }
  if (!$isNull(request.securityPolicyShrink)) {
    body['SecurityPolicy'] = request.securityPolicyShrink;
  }
  if (!$isNull(request.sessionTimeout)) {
    body['SessionTimeout'] = request.sessionTimeout;
  }
  if (!$isNull(request.storagePolicyShrink)) {
    body['StoragePolicy'] = request.storagePolicyShrink;
  }
  if (!$isNull(request.subPayType)) {
    body['SubPayType'] = request.subPayType;
  }
  if (!$isNull(request.userInfoShrink)) {
    body['UserInfo'] = request.userInfoShrink;
  }
  if (!$isNull(request.users)) {
    body['Users'] = request.users;
  }
  if (!$isNull(request.videoPolicyShrink)) {
    body['VideoPolicy'] = request.videoPolicyShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateAppInstanceGroup',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 创建云应用交付组
 *
 * @param request CreateAppInstanceGroupRequest
 * @return CreateAppInstanceGroupResponse
 */
async function createAppInstanceGroup(request: CreateAppInstanceGroupRequest): CreateAppInstanceGroupResponse {
  var runtime = new $RuntimeOptions{};
  return createAppInstanceGroupWithOptions(request, runtime);
}

model CreateImageFromAppInstanceGroupRequest {
  appCenterImageName?: string(name='AppCenterImageName', description='The image name.

This parameter is required.', example='test_name'),
  appInstanceGroupId?: string(name='AppInstanceGroupId', description='The ID of the delivery group. You can call the [ListAppInstanceGroup](https://help.aliyun.com/document_detail/428506.html) operation to obtain the ID.

This parameter is required.', example='aig-9ciijz60n4xsv****'),
  productType?: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp'),
}

model CreateImageFromAppInstanceGroupResponseBody = {
  imageId?: string(name='ImageId', description='The image ID.', example='img-bp13mu****'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model CreateImageFromAppInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateImageFromAppInstanceGroupResponseBody(name='body'),
}

/**
 * @summary Creates a new image by debugging the delivery group.
 *
 * @param request CreateImageFromAppInstanceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateImageFromAppInstanceGroupResponse
 */
async function createImageFromAppInstanceGroupWithOptions(request: CreateImageFromAppInstanceGroupRequest, runtime: $RuntimeOptions): CreateImageFromAppInstanceGroupResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.appCenterImageName)) {
    body['AppCenterImageName'] = request.appCenterImageName;
  }
  if (!$isNull(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!$isNull(request.productType)) {
    body['ProductType'] = request.productType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateImageFromAppInstanceGroup',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Creates a new image by debugging the delivery group.
 *
 * @param request CreateImageFromAppInstanceGroupRequest
 * @return CreateImageFromAppInstanceGroupResponse
 */
async function createImageFromAppInstanceGroup(request: CreateImageFromAppInstanceGroupRequest): CreateImageFromAppInstanceGroupResponse {
  var runtime = new $RuntimeOptions{};
  return createImageFromAppInstanceGroupWithOptions(request, runtime);
}

model DeleteAccessPageRequest {
  accessPageId?: string(name='AccessPageId', example='a-075nu7bcqim2wvxli'),
}

model DeleteAccessPageResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: string(name='Success', example='true'),
}

model DeleteAccessPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAccessPageResponseBody(name='body'),
}

/**
 * @summary 删除访问页面
 *
 * @param request DeleteAccessPageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAccessPageResponse
 */
async function deleteAccessPageWithOptions(request: DeleteAccessPageRequest, runtime: $RuntimeOptions): DeleteAccessPageResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.accessPageId)) {
    query['AccessPageId'] = request.accessPageId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteAccessPage',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 删除访问页面
 *
 * @param request DeleteAccessPageRequest
 * @return DeleteAccessPageResponse
 */
async function deleteAccessPage(request: DeleteAccessPageRequest): DeleteAccessPageResponse {
  var runtime = new $RuntimeOptions{};
  return deleteAccessPageWithOptions(request, runtime);
}

model DeleteAppInstanceGroupRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', description='The ID of the delivery group.

This parameter is required.', example='aig-9ciijz60n4xsv****'),
  productType?: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp'),
}

model DeleteAppInstanceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteAppInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppInstanceGroupResponseBody(name='body'),
}

/**
 * @summary Deletes a delivery group that uses the By Resource - Pay-as-you-go billing method.
 *
 * @description >  You cannot call this operation to delete a subscription delivery group.
 *
 * @param request DeleteAppInstanceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAppInstanceGroupResponse
 */
async function deleteAppInstanceGroupWithOptions(request: DeleteAppInstanceGroupRequest, runtime: $RuntimeOptions): DeleteAppInstanceGroupResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!$isNull(request.productType)) {
    body['ProductType'] = request.productType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteAppInstanceGroup',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes a delivery group that uses the By Resource - Pay-as-you-go billing method.
 *
 * @description >  You cannot call this operation to delete a subscription delivery group.
 *
 * @param request DeleteAppInstanceGroupRequest
 * @return DeleteAppInstanceGroupResponse
 */
async function deleteAppInstanceGroup(request: DeleteAppInstanceGroupRequest): DeleteAppInstanceGroupResponse {
  var runtime = new $RuntimeOptions{};
  return deleteAppInstanceGroupWithOptions(request, runtime);
}

model DeleteAppInstancesRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', description='The ID of the delivery group. You can call the [listAppInstanceGroup](https://help.aliyun.com/document_detail/428506.html) operation to obtain the ID.

This parameter is required.', example='aig-9ciijz60n4xsv****'),
  appInstanceIds?: [ string ](name='AppInstanceIds', description='The IDs of application instances.

This parameter is required.', nullable=false),
  productType?: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp'),
}

model DeleteAppInstancesResponseBody = {
  deleteAppInstanceModels?: [ 
    {
      appInstanceId?: string(name='AppInstanceId', description='The ID of the application instance.', example='ai-gbuea*****'),
      code?: string(name='Code', description='The error code.', example='InvalidParameter.ProductType'),
      message?: string(name='Message', description='The error message.', example='The parameter ProductType is invalid.'),
      success?: boolean(name='Success', description='Specifies whether the application instance is deleted.

Valid values:

*   true
*   false', example='true'),
    }
  ](name='DeleteAppInstanceModels', description='The data returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model DeleteAppInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppInstancesResponseBody(name='body'),
}

/**
 * @summary Deletes an application instance.
 *
 * @description Only application instances that are in the Initializing or Idle state can be deleted. The operation can be called only by specific customers.
 *
 * @param request DeleteAppInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAppInstancesResponse
 */
async function deleteAppInstancesWithOptions(request: DeleteAppInstancesRequest, runtime: $RuntimeOptions): DeleteAppInstancesResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!$isNull(request.appInstanceIds)) {
    body['AppInstanceIds'] = request.appInstanceIds;
  }
  if (!$isNull(request.productType)) {
    body['ProductType'] = request.productType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteAppInstances',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Deletes an application instance.
 *
 * @description Only application instances that are in the Initializing or Idle state can be deleted. The operation can be called only by specific customers.
 *
 * @param request DeleteAppInstancesRequest
 * @return DeleteAppInstancesResponse
 */
async function deleteAppInstances(request: DeleteAppInstancesRequest): DeleteAppInstancesResponse {
  var runtime = new $RuntimeOptions{};
  return deleteAppInstancesWithOptions(request, runtime);
}

model GetAccessPageSessionRequest {
  accessPageId?: string(name='AccessPageId', description='This parameter is required.', example='a-062wec3cwmayw****'),
  accessPageToken?: string(name='AccessPageToken', description='This parameter is required.', example='8141B1A674D48ACB8E5D2D6CE53FDB2F3CF8710A5F8F78578D5254BC6F******'),
  externalUserId?: string(name='ExternalUserId', example='Banca******'),
}

model GetAccessPageSessionResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    connectTicket?: string(name='ConnectTicket', example='DQpbRGVza3RvcF0NCkZvcmNlVGxzVHlwZT0xDQpHV1Rva2VuUGFydDE9MDBzQU5DTGVsZ0RqMnAyMGpZdUNkRDMrNTlLekpzUTRXNElPWVdjWGIwZ2QrUkNyais0ZGM3WUJGM1NBdVFJWWl2ejhaWDlvakh1cDJ4c0Vpc3lrQ1I4RVEzeDhIYXdCb2pRRDJReklaQTZIbU52VjdrRlNlWkxQTXV3Y0hNTEZTTkxKaDNOY1BtU0tVYTNqWVVUMFUyKzNqWDBRMXdLM29ZQnJaOFVoL2RWY0xpem5tWEhHTmE0THVGRCtrajloSWlFT0w3b2w4OHY1cjBPelpHZnh4aXlVbk1yQURnRHhoK1F6K3UvdXYxaFYyQ3UwVlduTHJ3cDNRM3hYWWtORW81N00xYWZ4cTJBdWplVmx3aGVxOHd4dDl2Y3NGVGMxNFpPL2hudWdoeGJkaz0NCkdXVG9rZW5QYXJ0Mj0NCkFzcEF1dGhUb2tlbj0wME5LTnlLZXE3UGpzNzNzeURrdEs2NUlaenpYb05WNWxnY3BjVTJMd2NKUEoyMk53WmlrSGNaaDdNVGk2azlLazNyeHFCd2FHZTlmc2NUbFljUDJ0MEVldXRha2paUklMM0x3a0RsT1BZZTZxYmtsay9STHFrajg4dWg0ZFZNTHE2QkF0WVRSeW9ZTC9WUHhaVWxyZEZOQT09DQpBZXNLZXlWZXJzaW9uPTE3MDEyMzk1ODc4NzcNCkdhdGV3YXlEb21haW5BZGRyZXNzPWd3LWFwcC1jbi1oYW5nemhvdS1pLWFwcC10ZXN0MC13aW4ud3V5aW5nLmFsaXl1bmNzLmNvbQ0KR2F0ZXdheUFkZHJlc3M9NDcuOTkuMjIzLjE0OQ0KR2F0ZXdheVBvcnQ9NTkxMg0KR2F0ZXdheVdzc1BvcnQ9ODAwOA0KU3RyZWFtVHlwZT0wDQpSdGNHd1Rva2VuPVAwMFJkc013dVdQVkt4MGtRYUNkSlY3MUc2OC9iaWFhSEJwVn******'),
    flowId?: string(name='FlowId', description='flow ID', example='e4fa0b4c18c5437a8b1746e7c228172e'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  success?: string(name='Success', example='true'),
}

model GetAccessPageSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAccessPageSessionResponseBody(name='body'),
}

/**
 * @summary 访客进入访问页面的匿名api
 *
 * @param request GetAccessPageSessionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAccessPageSessionResponse
 */
async function getAccessPageSessionWithOptions(request: GetAccessPageSessionRequest, runtime: $RuntimeOptions): GetAccessPageSessionResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.accessPageId)) {
    query['AccessPageId'] = request.accessPageId;
  }
  if (!$isNull(request.accessPageToken)) {
    query['AccessPageToken'] = request.accessPageToken;
  }
  if (!$isNull(request.externalUserId)) {
    query['ExternalUserId'] = request.externalUserId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetAccessPageSession',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 访客进入访问页面的匿名api
 *
 * @param request GetAccessPageSessionRequest
 * @return GetAccessPageSessionResponse
 */
async function getAccessPageSession(request: GetAccessPageSessionRequest): GetAccessPageSessionResponse {
  var runtime = new $RuntimeOptions{};
  return getAccessPageSessionWithOptions(request, runtime);
}

model GetAppInstanceGroupRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', description='This parameter is required.', example='aig-9ciijz60n4xsv****'),
  productType?: string(name='ProductType', description='This parameter is required.', example='CloudApp'),
}

model GetAppInstanceGroupResponseBody = {
  appInstanceGroupModels?: {
    amount?: int32(name='Amount'),
    appCenterImageId?: string(name='AppCenterImageId', example='img-8z4nztpaqvay4****'),
    appCenterImageName?: string(name='AppCenterImageName', example='OfficeApps'),
    appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
    appInstanceGroupName?: string(name='AppInstanceGroupName'),
    appInstanceType?: string(name='AppInstanceType', example='__dynamic__'),
    appInstanceTypeName?: string(name='AppInstanceTypeName', example='test001'),
    appPolicyId?: string(name='AppPolicyId', example='pg-g3k5wa2ms2****'),
    apps?: [ 
      {
        appIcon?: string(name='AppIcon'),
        appId?: string(name='AppId', example='ca-i87mycyn419nu****'),
        appName?: string(name='AppName'),
        appVersion?: string(name='AppVersion'),
        appVersionName?: string(name='AppVersionName'),
      }
    ](name='Apps'),
    chargeResourceMode?: string(name='ChargeResourceMode', example='Node'),
    chargeType?: string(name='ChargeType', example='PrePaid'),
    expiredTime?: string(name='ExpiredTime', example='2022-04-27T16:00:00.000+00:00'),
    gmtCreate?: string(name='GmtCreate', example='2022-04-26T15:06:16.000+00:00'),
    maxAmount?: int32(name='MaxAmount', example='10'),
    minAmount?: int32(name='MinAmount', example='1'),
    nodePool?: [ 
      {
        amount?: int32(name='Amount', example='2'),
        maxIdleAppInstanceAmount?: int32(name='MaxIdleAppInstanceAmount'),
        maxScalingAmount?: int32(name='MaxScalingAmount', example='8'),
        nodeAmount?: int32(name='NodeAmount', example='1'),
        nodeCapacity?: int32(name='NodeCapacity', example='2'),
        nodeInstanceType?: string(name='NodeInstanceType', example='appstreaming.vgpu.4c8g.2g'),
        nodePoolId?: string(name='NodePoolId', example='rg-g6922kced36hx****'),
        nodeTypeName?: string(name='NodeTypeName'),
        nodeUsed?: int32(name='NodeUsed', example='1'),
        recurrenceSchedules?: [ 
          {
            recurrenceType?: string(name='RecurrenceType', example='Weekly'),
            recurrenceValues?: [ int32 ](name='RecurrenceValues'),
            timerPeriods?: [ 
              {
                amount?: int32(name='Amount', example='5'),
                endTime?: string(name='EndTime', example='11:00'),
                startTime?: string(name='StartTime', example='09:30'),
              }
            ](name='TimerPeriods'),
          }
        ](name='RecurrenceSchedules'),
        scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes', example='5'),
        scalingNodeAmount?: int32(name='ScalingNodeAmount', example='8'),
        scalingNodeUsed?: int32(name='ScalingNodeUsed', example='4'),
        scalingStep?: int32(name='ScalingStep', example='2'),
        scalingUsageThreshold?: string(name='ScalingUsageThreshold', example='85'),
        strategyDisableDate?: string(name='StrategyDisableDate', example='2022-09-08'),
        strategyEnableDate?: string(name='StrategyEnableDate', example='2022-08-01'),
        strategyType?: string(name='StrategyType', example='NODE_FIXED'),
        warmUp?: boolean(name='WarmUp', example='false'),
      }
    ](name='NodePool'),
    officeSiteId?: string(name='OfficeSiteId'),
    osType?: string(name='OsType', example='Windows'),
    otaInfo?: {
      newOtaVersion?: string(name='NewOtaVersion', example='0.0.1-D-20220630.11****'),
      otaVersion?: string(name='OtaVersion', example='0.0.1-D-20220615.11****'),
      taskId?: string(name='TaskId', example='ota-e49929gv8acz5****'),
    }(name='OtaInfo'),
    productType?: string(name='ProductType', example='CloudApp'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    reserveAmountRatio?: string(name='ReserveAmountRatio', example='20'),
    reserveMaxAmount?: int32(name='ReserveMaxAmount', example='5'),
    reserveMinAmount?: int32(name='ReserveMinAmount', example='1'),
    resourceStatus?: string(name='ResourceStatus', example='AVAILABLE'),
    scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes', example='5'),
    scalingStep?: int32(name='ScalingStep', example='10'),
    scalingUsageThreshold?: string(name='ScalingUsageThreshold', example='85'),
    sessionTimeout?: string(name='SessionTimeout', example='15'),
    sessionType?: string(name='SessionType'),
    skipUserAuthCheck?: boolean(name='SkipUserAuthCheck', example='false'),
    specId?: string(name='SpecId', example='spec-8o18t8uc31qib0****'),
    status?: string(name='Status', example='PUBLISHED'),
  }(name='AppInstanceGroupModels', description='AppInstanceGroupModels'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model GetAppInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAppInstanceGroupResponseBody(name='body'),
}

/**
 * @summary 获取交付组详情
 *
 * @param request GetAppInstanceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAppInstanceGroupResponse
 */
async function getAppInstanceGroupWithOptions(request: GetAppInstanceGroupRequest, runtime: $RuntimeOptions): GetAppInstanceGroupResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appInstanceGroupId)) {
    query['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!$isNull(request.productType)) {
    query['ProductType'] = request.productType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetAppInstanceGroup',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 获取交付组详情
 *
 * @param request GetAppInstanceGroupRequest
 * @return GetAppInstanceGroupResponse
 */
async function getAppInstanceGroup(request: GetAppInstanceGroupRequest): GetAppInstanceGroupResponse {
  var runtime = new $RuntimeOptions{};
  return getAppInstanceGroupWithOptions(request, runtime);
}

model GetConnectionTicketRequest {
  appId?: string(name='AppId', description='The application ID.

>  This parameter is required for the first call to this operation and optional for subsequent calls to the operation.', example='ca-e4s0puhmwi7v****'),
  appInstanceGroupIdList?: [ string ](name='AppInstanceGroupIdList', description='The delivery groups.

> *   If you configure this parameter, the system assigns application instances only among the specified authorized delivery groups. 
> *   This parameter is required if you configure `AppInstanceId` or `AppInstancePersistentId`.'),
  appInstanceId?: string(name='AppInstanceId', description='The ID of the application instance.

> *   If you configure this parameter, the system attempts to assign only the specified application instance.
> *   If you configure this parameter, you must also configure `AppInstanceGroupIdList` and the number of delivery groups specified by `AppInstanceGroupIdList` must be 1.', example='ai-1rznfnrvsa99d****'),
  appInstancePersistentId?: string(name='AppInstancePersistentId', description='The ID of the persistent session.', example='p-0bxls9m3cl7s****'),
  appStartParam?: string(name='AppStartParam', description='The parameters that are configured to start the application. For information about how to obtain these parameters, see [Obtain parameters configured to install and start an application](https://help.aliyun.com/document_detail/426045.html).', example='/q /n'),
  appVersion?: string(name='AppVersion', description='The application version. If you configure this parameter, only an application of the specified version is started. If you do not configure this parameter, an application of a random authorized version is started.', example='1.0.0'),
  bizRegionId?: string(name='BizRegionId', description='The region ID.

>  If you configure this parameter, the system assigns application instances only among the delivery groups that reside in the specified region.', example='cn-hangzhou'),
  endUserId?: string(name='EndUserId', description='The ID of the convenience account.

This parameter is required.', example='alice'),
  productType?: string(name='ProductType', description='The product type.

Valid values:

*   CloudApp: App Streaming
*   AndroidCloud: Cloud Phone

This parameter is required.', example='CloudApp'),
  taskId?: string(name='TaskId', description='The task ID.

>  This parameter is required for calls other than the first call to this operation. You can use this parameter to query the task status and connection credential.', example='28778acb-a469-4bc0-8e0f****'),
}

model GetConnectionTicketResponseBody = {
  appInstanceGroupId?: string(name='AppInstanceGroupId', description='The ID of the delivery group.', example='aig-53fvrq1oan****'),
  appInstanceId?: string(name='AppInstanceId', description='The ID of the application instance.', example='ai-7ybdeiyoeh5e****'),
  appInstancePersistentId?: string(name='AppInstancePersistentId', description='The ID of the persistent session.', example='p-0bxls9m3cl7s****'),
  bizRegionId?: string(name='BizRegionId', description='The region ID.', example='cn-hangzhou'),
  osType?: string(name='OsType', description='The operating system.

Valid value:

*   Windows: the Windows operating system', example='Windows'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  taskId?: string(name='TaskId', description='The task ID.', example='f3d1b31c-605e-4d04-a896****'),
  taskStatus?: string(name='TaskStatus', description='The task status.

Valid values:

*   Finished: The task is complete.
*   Failed: The task failed.
*   Running: The task is being executed.', example='Running'),
  tenantId?: long(name='TenantId', description='The ID of the Alibaba Cloud account.', example='148871678899****'),
  ticket?: string(name='Ticket', description='The credential that is used to connect to App Streaming.

>  This parameter is displayed for calls other than the first call to this operation.', example='DQpbRGVza3RvcF0NCkZvcmNlVGxzVHlwZT0xDQpHV1Rva2VuUGFydDE9MDAva09ROW1FUTU3dU****'),
}

model GetConnectionTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConnectionTicketResponseBody(name='body'),
}

/**
 * @summary Queries the credential that is used to connect to App Streaming.
 *
 * @description You must call this operation at least twice to obtain a connection credential.
 * The first time you call this operation, the system assigns an application instance to the specified convenience account and then starts the application. In this case, the ID of the started task, which is indicated by `TaskID`, is returned.
 * In subsequent calls, you must configure `TaskID` to query whether the task is completed. If the value of `TaskStatus` in the response is `Finished`, the connection credential, which is indicated by `Ticket`, is returned.
 *
 * @param request GetConnectionTicketRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetConnectionTicketResponse
 */
async function getConnectionTicketWithOptions(request: GetConnectionTicketRequest, runtime: $RuntimeOptions): GetConnectionTicketResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!$isNull(request.appInstanceGroupIdList)) {
    body['AppInstanceGroupIdList'] = request.appInstanceGroupIdList;
  }
  if (!$isNull(request.appInstanceId)) {
    body['AppInstanceId'] = request.appInstanceId;
  }
  if (!$isNull(request.appInstancePersistentId)) {
    body['AppInstancePersistentId'] = request.appInstancePersistentId;
  }
  if (!$isNull(request.appStartParam)) {
    body['AppStartParam'] = request.appStartParam;
  }
  if (!$isNull(request.appVersion)) {
    body['AppVersion'] = request.appVersion;
  }
  if (!$isNull(request.bizRegionId)) {
    body['BizRegionId'] = request.bizRegionId;
  }
  if (!$isNull(request.endUserId)) {
    body['EndUserId'] = request.endUserId;
  }
  if (!$isNull(request.productType)) {
    body['ProductType'] = request.productType;
  }
  if (!$isNull(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetConnectionTicket',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the credential that is used to connect to App Streaming.
 *
 * @description You must call this operation at least twice to obtain a connection credential.
 * The first time you call this operation, the system assigns an application instance to the specified convenience account and then starts the application. In this case, the ID of the started task, which is indicated by `TaskID`, is returned.
 * In subsequent calls, you must configure `TaskID` to query whether the task is completed. If the value of `TaskStatus` in the response is `Finished`, the connection credential, which is indicated by `Ticket`, is returned.
 *
 * @param request GetConnectionTicketRequest
 * @return GetConnectionTicketResponse
 */
async function getConnectionTicket(request: GetConnectionTicketRequest): GetConnectionTicketResponse {
  var runtime = new $RuntimeOptions{};
  return getConnectionTicketWithOptions(request, runtime);
}

model GetDebugAppInstanceRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', description='The ID of the delivery group. You can call the `listAppInstanceGroup` operation to obtain the ID.

This parameter is required.', example='aig-9ciijz60n4xsv****'),
  productType?: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp'),
}

model GetDebugAppInstanceResponseBody = {
  appId?: string(name='AppId', description='The application ID.', example='__DEBUG_APP'),
  appInstanceGroupId?: string(name='AppInstanceGroupId', description='The ID of the delivery group.', example='aig-9ciijz60n4xsv****'),
  appInstanceId?: string(name='AppInstanceId', description='The ID of the application instance.', example='ai-7ybdeiyoeh5e****'),
  appVersion?: string(name='AppVersion', description='The ID of the application version.', example='1.1'),
  authCode?: string(name='AuthCode', description='The authorization code. This authorization code is valid for 3 minutes and can be used only once, regardless of whether the authentication succeeds. If multiple authentication codes are generated for a user, only the latest authentication code takes effect.', example='e4e169bea1cc48e8afac53**********'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  userId?: string(name='UserId', description='The user ID.', example='__debug__'),
}

model GetDebugAppInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDebugAppInstanceResponseBody(name='body'),
}

/**
 * @summary Queries information that is used to debug an application instance.
 *
 * @param request GetDebugAppInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDebugAppInstanceResponse
 */
async function getDebugAppInstanceWithOptions(request: GetDebugAppInstanceRequest, runtime: $RuntimeOptions): GetDebugAppInstanceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!$isNull(request.productType)) {
    body['ProductType'] = request.productType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDebugAppInstance',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries information that is used to debug an application instance.
 *
 * @param request GetDebugAppInstanceRequest
 * @return GetDebugAppInstanceResponse
 */
async function getDebugAppInstance(request: GetDebugAppInstanceRequest): GetDebugAppInstanceResponse {
  var runtime = new $RuntimeOptions{};
  return getDebugAppInstanceWithOptions(request, runtime);
}

model GetOtaTaskByTaskIdRequest {
  taskId?: string(name='TaskId', description='The ID of the OTA update task. You can call the [ListAppInstanceGroup](https://help.aliyun.com/document_detail/428506.html) operation to obtain the ID.

This parameter is required.', example='ota-be7jzm29wrrz5****'),
}

model GetOtaTaskByTaskIdResponseBody = {
  code?: string(name='Code', description='The error code.', example='OtaTask.Running'),
  message?: string(name='Message', description='The error message.', example='The task is running and cannot be sumitted.'),
  otaVersion?: string(name='OtaVersion', description='The OTA version.', example='0.0.1-R-20220708.110604'),
  releaseNote?: string(name='ReleaseNote', description='The version description.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  taskStartTime?: string(name='TaskStartTime', description='The execution time of the OTA update task. The time follows the ISO 8601 standard.

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-08-04T14:36:00+08:00'),
}

model GetOtaTaskByTaskIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOtaTaskByTaskIdResponseBody(name='body'),
}

/**
 * @summary Queries the details of an over-the-air (OTA) update task, including the available versions and version description.
 *
 * @param request GetOtaTaskByTaskIdRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetOtaTaskByTaskIdResponse
 */
async function getOtaTaskByTaskIdWithOptions(request: GetOtaTaskByTaskIdRequest, runtime: $RuntimeOptions): GetOtaTaskByTaskIdResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetOtaTaskByTaskId',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the details of an over-the-air (OTA) update task, including the available versions and version description.
 *
 * @param request GetOtaTaskByTaskIdRequest
 * @return GetOtaTaskByTaskIdResponse
 */
async function getOtaTaskByTaskId(request: GetOtaTaskByTaskIdRequest): GetOtaTaskByTaskIdResponse {
  var runtime = new $RuntimeOptions{};
  return getOtaTaskByTaskIdWithOptions(request, runtime);
}

model GetResourcePriceRequest {
  amount?: long(name='Amount', description='The number of resources to purchase.

This parameter is required.', example='1'),
  appInstanceType?: string(name='AppInstanceType', description='The type ID of the sessions that you purchase. You can call the `ListAppInstanceType` operation to obtain the ID.

You must specify one of AppInstanceType and NodeInstanceType. If you specify both of the parameters, the value of NodeInstanceType takes effect.', example='appstreaming.general'),
  bizRegionId?: string(name='BizRegionId', description='The ID of the region where the delivery group resides. For information about the supported regions, see [Limits](https://help.aliyun.com/document_detail/426036.html).

Valid values:

*   cn-shanghai: China (Shanghai).
*   cn-hangzhou: China (Hangzhou)

This parameter is required.', example='cn-hangzhou'),
  chargeType?: string(name='ChargeType', description='The billing method.

Valid values:

*   PostPaid: pay-as-you-go
*   PrePaid: subscription

This parameter is required.', example='PrePaid'),
  nodeInstanceType?: string(name='NodeInstanceType', description='The ID of the resource type that you purchase. You can call the [ListNodeInstanceType](https://help.aliyun.com/document_detail/428502.html) to obtain the ID.

You must specify one of AppInstanceType and NodeInstanceType. If you specify both of the parameters, the value of NodeInstanceType takes effect.

Valid values:

*   appstreaming.vgpu.8c16g.4g: WUYING - Graphics - 8 vCPUs, 16 GiB Memory, 4 GiB GPU Memory
*   appstreaming.general.8c16g: WUYING - General - 8 vCPUs, 16 GiB Memory
*   appstreaming.general.4c8g: WUYING - General - 4 vCPUs, 8 GiB Memory
*   appstreaming.vgpu.14c93g.12g: WUYING - Graphics - 14 vCPUs, 93 GiB Memory, 12 GiB GPU Memory.
*   appstreaming.vgpu.8c31g.16g: WUYING - Graphics - 8 vCPUs, 31 GiB Memory, 16 GiB GPU Memory', example='appstreaming.vgpu.4c8g.2g'),
  period?: long(name='Period', description='The subscription duration of resources. This parameter must be configured together with `PeriodUnit`.

This parameter is required.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription duration. This parameter must be configured together with `Period`. The following items describe valid values for the combinations of `Period` and `PeriodUnit`:

*   1 Week
*   1 Month
*   2 Month
*   3 Month
*   6 Month
*   1 Year
*   2 Year
*   3 Year

>  The value of this parameter is case-insensitive. For example, `Week` is valid and `week` is invalid. If you specify a value combination other than the preceding combinations, such as `2 Week`, the operation can still be called. However, an error occurs when you place the order.

This parameter is required.', example='Week'),
  productType?: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp'),
}

model GetResourcePriceResponseBody = {
  code?: string(name='Code', description='The error code.', example='InvalidParameter.ProductType'),
  message?: string(name='Message', description='The error message.', example='The parameter ProductType is invalid.'),
  priceList?: [ 
    {
      price?: {
        currency?: string(name='Currency', description='The currency type.', example='CNY'),
        discountPrice?: string(name='DiscountPrice', description='The discount. The actual price is calculated based on the following formula: Actual price = Original price - Discount.', example='999.0'),
        originalPrice?: string(name='OriginalPrice', description='The original price.', example='6700'),
        promotions?: [ 
          {
            optionCode?: string(name='OptionCode', description='The coupon code.', example='coupon****'),
            promotionDesc?: string(name='PromotionDesc', description='The coupon description.'),
            promotionId?: string(name='PromotionId', description='The coupon ID.', example='1847709****'),
            promotionName?: string(name='PromotionName', description='The coupon name.'),
            selected?: boolean(name='Selected', description='Indicates whether the coupon was used.

Valid values:

*   true
*   false', example='true'),
          }
        ](name='Promotions', description='The coupon metadata.'),
        tradePrice?: string(name='TradePrice', description='The actual price. The actual price is calculated based on the following formula: Actual price = Original price - Discount.', example='5278.0'),
      }(name='Price', description='The price details.'),
      priceType?: string(name='PriceType', description='The price type.

Valid values:

*   Connected: in use
*   Standby: pending for use.', example='Standby'),
      rules?: [ 
        {
          description?: string(name='Description', description='The description of the price calculation rule.'),
          ruleId?: long(name='RuleId', description='The ID of the price calculation rule.', example='260904273633****'),
        }
      ](name='Rules', description='The price calculation rules.'),
    }
  ](name='PriceList', description='The price objects.

This parameter is returned only if a value is specified for AppInstanceType.'),
  priceModel?: {
    price?: {
      currency?: string(name='Currency', description='The currency type.', example='CNY'),
      discountPrice?: string(name='DiscountPrice', description='The discount. The actual price is calculated based on the following formula: Actual price = Original price - Discount.', example='1.00'),
      originalPrice?: string(name='OriginalPrice', description='The original price.', example='11.00'),
      promotions?: [ 
        {
          optionCode?: string(name='OptionCode', description='The coupon code.', example='coupon****'),
          promotionDesc?: string(name='PromotionDesc', description='The coupon description.'),
          promotionId?: string(name='PromotionId', description='The coupon ID.', example='17440009****'),
          promotionName?: string(name='PromotionName', description='The coupon name.'),
          selected?: boolean(name='Selected', description='Indicates whether the coupon was used.

Valid values:

*   true
*   false', example='true'),
        }
      ](name='Promotions', description='The coupon metadata.'),
      tradePrice?: string(name='TradePrice', description='The actual price. The actual price is calculated based on the following formula: Actual price = Original price - Discount.', example='10.00'),
    }(name='Price', description='The price details.'),
    rules?: [ 
      {
        description?: string(name='Description', description='The description of the price calculation rule.'),
        ruleId?: long(name='RuleId', description='The ID of the price calculation rule.', example='102002100393****'),
      }
    ](name='Rules', description='The price calculation rules.'),
  }(name='PriceModel', description='The price object.

This parameter is returned only if a value is specified for NodeInstanceType.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model GetResourcePriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourcePriceResponseBody(name='body'),
}

/**
 * @summary Queries resource prices.
 *
 * @param request GetResourcePriceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetResourcePriceResponse
 */
async function getResourcePriceWithOptions(request: GetResourcePriceRequest, runtime: $RuntimeOptions): GetResourcePriceResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!$isNull(request.appInstanceType)) {
    query['AppInstanceType'] = request.appInstanceType;
  }
  if (!$isNull(request.bizRegionId)) {
    query['BizRegionId'] = request.bizRegionId;
  }
  if (!$isNull(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!$isNull(request.nodeInstanceType)) {
    query['NodeInstanceType'] = request.nodeInstanceType;
  }
  if (!$isNull(request.period)) {
    query['Period'] = request.period;
  }
  if (!$isNull(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!$isNull(request.productType)) {
    query['ProductType'] = request.productType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetResourcePrice',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries resource prices.
 *
 * @param request GetResourcePriceRequest
 * @return GetResourcePriceResponse
 */
async function getResourcePrice(request: GetResourcePriceRequest): GetResourcePriceResponse {
  var runtime = new $RuntimeOptions{};
  return getResourcePriceWithOptions(request, runtime);
}

model GetResourceRenewPriceRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', description='The ID of the delivery group. You can call the [ListAppInstanceGroup](https://help.aliyun.com/document_detail/428506.html) operation to obtain the ID.

This parameter is required.', example='aig-9ciijz60n4xsv****'),
  period?: long(name='Period', description='The subscription duration of resources. This parameter must be configured together with `PeriodUnit`.

This parameter is required.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription duration. This parameter must be configured together with `Period`. The following items describe valid values for the combinations of `Period` and `PeriodUnit`:

*   1 Week
*   1 Month
*   2 Month
*   3 Month
*   6 Month
*   1 Year
*   2 Year
*   3 Year

>  The value of this parameter is case-insensitive. For example, `Week` is valid and `week` is invalid. If you specify a value combination other than the preceding combinations, such as `2 Week`, the operation can still be called. However, an error occurs when you place the order.

This parameter is required.', example='Week'),
  productType?: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp'),
}

model GetResourceRenewPriceResponseBody = {
  data?: {
    price?: {
      currency?: string(name='Currency', description='The currency type.', example='CNY'),
      discountPrice?: string(name='DiscountPrice', description='The discount. The actual price is calculated based on the following formula: Actual price = Original price - Discount.', example='1'),
      originalPrice?: string(name='OriginalPrice', description='The original price.', example='11'),
      promotions?: [ 
        {
          optionCode?: string(name='OptionCode', description='The coupon code.', example='coupon****'),
          promotionDesc?: string(name='PromotionDesc', description='The coupon description.'),
          promotionId?: string(name='PromotionId', description='The coupon ID.', example='139965*****'),
          promotionName?: string(name='PromotionName', description='The coupon name.'),
          selected?: boolean(name='Selected', description='Indicates whether the coupon was used.

Valid values:

*   true
*   false', example='true'),
        }
      ](name='Promotions', description='The coupon description.'),
      tradePrice?: string(name='TradePrice', description='The actual price. The actual price is calculated based on the following formula: Actual price = Original price - Discount.', example='10'),
    }(name='Price', description='The price details.'),
    rules?: [ 
      {
        description?: string(name='Description', description='The description of the price calculation rule.'),
        ruleId?: long(name='RuleId', description='The ID of the price calculation rule.', example='20002****'),
      }
    ](name='Rules', description='The price calculation rules.'),
  }(name='Data', description='The price object.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model GetResourceRenewPriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceRenewPriceResponseBody(name='body'),
}

/**
 * @summary Queries the renewal prices of App Streaming resources.
 *
 * @param request GetResourceRenewPriceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetResourceRenewPriceResponse
 */
async function getResourceRenewPriceWithOptions(request: GetResourceRenewPriceRequest, runtime: $RuntimeOptions): GetResourceRenewPriceResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appInstanceGroupId)) {
    query['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!$isNull(request.period)) {
    query['Period'] = request.period;
  }
  if (!$isNull(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!$isNull(request.productType)) {
    query['ProductType'] = request.productType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetResourceRenewPrice',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the renewal prices of App Streaming resources.
 *
 * @param request GetResourceRenewPriceRequest
 * @return GetResourceRenewPriceResponse
 */
async function getResourceRenewPrice(request: GetResourceRenewPriceRequest): GetResourceRenewPriceResponse {
  var runtime = new $RuntimeOptions{};
  return getResourceRenewPriceWithOptions(request, runtime);
}

model ListAccessPagesRequest {
  accessPageId?: string(name='AccessPageId', example='a-062wec3cwmayw****'),
  accessPageName?: string(name='AccessPageName'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='100'),
  projectId?: string(name='ProjectId', example='p-065zdecaer07h****'),
  sortType?: string(name='SortType', example='ASC'),
}

model ListAccessPagesResponseBody = {
  code?: string(name='Code', example='200'),
  count?: string(name='Count', example='22'),
  data?: [ 
    {
      accessMode?: string(name='AccessMode'),
      accessPageId?: string(name='AccessPageId', example='a-062wec3cwmayw****'),
      accessPageName?: string(name='AccessPageName', example='notepad_test'),
      accessPageState?: string(name='AccessPageState', example='1'),
      accessUrl?: string(name='AccessUrl', example='id=a-062wec3cwmayw****&token=9E9A62937B0E41F4AEFE5EC9B238156CCDFB682954003AEE940A05FB2568****'),
      contentId?: string(name='ContentId', example='c-05to6wm3w5d53****'),
      contentName?: string(name='ContentName'),
      effectTime?: int32(name='EffectTime', example='168'),
      gmtCreate?: string(name='GmtCreate', example='2023-11-16T08:48:15.000+00:00'),
      projectId?: string(name='ProjectId', example='p-062wec3cwmayu****'),
      projectName?: string(name='ProjectName', example='notepad_demo'),
      unit?: string(name='Unit', example='Hour'),
      urlExpireTime?: string(name='UrlExpireTime', example='2023-11-23T08:48:15.000+00:00'),
    }
  ](name='Data'),
  message?: string(name='Message', example='InternalError'),
  pageNumber?: string(name='PageNumber', example='1'),
  pageSize?: string(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='AF8361BD-5ECB-139A-B019-2E0350CC****'),
  success?: string(name='Success', example='true'),
}

model ListAccessPagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAccessPagesResponseBody(name='body'),
}

/**
 * @summary 访问页面分页查询
 *
 * @param request ListAccessPagesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAccessPagesResponse
 */
async function listAccessPagesWithOptions(request: ListAccessPagesRequest, runtime: $RuntimeOptions): ListAccessPagesResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.accessPageId)) {
    query['AccessPageId'] = request.accessPageId;
  }
  if (!$isNull(request.accessPageName)) {
    query['AccessPageName'] = request.accessPageName;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.sortType)) {
    query['SortType'] = request.sortType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListAccessPages',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 访问页面分页查询
 *
 * @param request ListAccessPagesRequest
 * @return ListAccessPagesResponse
 */
async function listAccessPages(request: ListAccessPagesRequest): ListAccessPagesResponse {
  var runtime = new $RuntimeOptions{};
  return listAccessPagesWithOptions(request, runtime);
}

model ListAppInstanceGroupRequest {
  appCenterImageId?: string(name='AppCenterImageId', example='img-8z4nztpaqvay4****'),
  appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
  appInstanceGroupName?: string(name='AppInstanceGroupName'),
  bizRegionId?: string(name='BizRegionId', description='The ID of the region where the delivery group resides. For information about the supported regions, see [Limits](https://help.aliyun.com/document_detail/426036.html).

Valid values:

*   cn-shanghai: China (Shanghai)
*   cn-hangzhou: China (Hangzhou)', example='cn-hangzhou'),
  nodeInstanceType?: string(name='NodeInstanceType', description='The ID of the resource specification that you purchase. You can call the [ListNodeInstanceType](~~ListNodeInstanceType~~) operation to obtain the ID.', example='appstreaming.vgpu.4c8g.2g'),
  officeSiteId?: string(name='OfficeSiteId'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  productType?: string(name='ProductType', description='This parameter is required.', example='CloudApp'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', deprecated=true),
  status?: [ string ](name='Status'),
}

model ListAppInstanceGroupResponseBody = {
  appInstanceGroupModels?: [ 
    {
      amount?: int32(name='Amount', example='1'),
      appCenterImageId?: string(name='AppCenterImageId', example='img-8z4nztpaqvay4****'),
      appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-9ciijz60n4xsv****'),
      appInstanceGroupName?: string(name='AppInstanceGroupName'),
      appInstanceType?: string(name='AppInstanceType', example='__dynamic__'),
      appPolicyId?: string(name='AppPolicyId', example='pg-g3k5wa2ms2****'),
      appPolicyImageCheck?: boolean(name='AppPolicyImageCheck'),
      appPolicyVersion?: string(name='AppPolicyVersion'),
      apps?: [ 
        {
          appIcon?: string(name='AppIcon', example='https://app-center-icon-****.png'),
          appId?: string(name='AppId', example='ca-i87mycyn419nu****'),
          appName?: string(name='AppName'),
          appVersion?: string(name='AppVersion', example='1.0.0'),
          appVersionName?: string(name='AppVersionName'),
        }
      ](name='Apps'),
      chargeResourceMode?: string(name='ChargeResourceMode', example='Node'),
      chargeType?: string(name='ChargeType', example='PrePaid'),
      expiredTime?: string(name='ExpiredTime', example='2022-04-27T16:00:00.000+00:00'),
      gmtCreate?: string(name='GmtCreate', example='2022-04-26T15:06:16.000+00:00'),
      maxAmount?: int32(name='MaxAmount', example='10'),
      minAmount?: int32(name='MinAmount', example='1'),
      nodePool?: [ 
        {
          amount?: int32(name='Amount', example='2'),
          maxIdleAppInstanceAmount?: int32(name='MaxIdleAppInstanceAmount', description='The maximum number of idle sessions. After you specify a value for this parameter, auto scaling is triggered only if the number of idle sessions in the delivery group is smaller than the specified value and the session usage exceeds the value specified for `ScalingUsageThreshold`. Otherwise, the system determines that the idle sessions in the delivery group are sufficient and does not perform auto scaling.`` You can use this parameter to flexibly manage auto scaling and reduce costs.', example='3'),
          maxScalingAmount?: int32(name='MaxScalingAmount', example='8'),
          nodeAmount?: int32(name='NodeAmount', example='1'),
          nodeCapacity?: int32(name='NodeCapacity', example='2'),
          nodeInstanceType?: string(name='NodeInstanceType', example='appstreaming.vgpu.4c8g.2g'),
          nodePoolId?: string(name='NodePoolId', example='rg-g6922kced36hx****'),
          nodeTypeName?: string(name='NodeTypeName'),
          nodeUsed?: int32(name='NodeUsed', example='1'),
          recurrenceSchedules?: [ 
            {
              recurrenceType?: string(name='RecurrenceType', example='Weekly'),
              recurrenceValues?: [ int32 ](name='RecurrenceValues'),
              timerPeriods?: [ 
                {
                  amount?: int32(name='Amount', example='5'),
                  endTime?: string(name='EndTime', example='11:00'),
                  startTime?: string(name='StartTime', example='09:30'),
                }
              ](name='TimerPeriods'),
            }
          ](name='RecurrenceSchedules'),
          scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes', example='5'),
          scalingNodeAmount?: int32(name='ScalingNodeAmount', example='8'),
          scalingNodeUsed?: int32(name='ScalingNodeUsed', example='4'),
          scalingStep?: int32(name='ScalingStep', example='2'),
          scalingUsageThreshold?: string(name='ScalingUsageThreshold', example='85'),
          strategyDisableDate?: string(name='StrategyDisableDate', example='2022-09-08'),
          strategyEnableDate?: string(name='StrategyEnableDate', example='2022-08-01'),
          strategyType?: string(name='StrategyType', example='NODE_FIXED'),
          warmUp?: boolean(name='WarmUp', example='false'),
        }
      ](name='NodePool', description='The resource groups.'),
      officeSiteId?: string(name='OfficeSiteId'),
      osType?: string(name='OsType', example='Windows'),
      otaInfo?: {
        newOtaVersion?: string(name='NewOtaVersion', example='0.0.1-D-20220630.11****'),
        otaVersion?: string(name='OtaVersion', example='0.0.1-D-20220615.11****'),
        taskId?: string(name='TaskId', example='ota-e49929gv8acz5****'),
      }(name='OtaInfo'),
      productType?: string(name='ProductType', example='CloudApp'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      reserveAmountRatio?: string(name='ReserveAmountRatio', example='20'),
      reserveMaxAmount?: int32(name='ReserveMaxAmount', example='5'),
      reserveMinAmount?: int32(name='ReserveMinAmount', example='1'),
      resourceStatus?: string(name='ResourceStatus', example='AVAILABLE'),
      scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes', example='5'),
      scalingStep?: int32(name='ScalingStep', example='10'),
      scalingUsageThreshold?: string(name='ScalingUsageThreshold', example='85'),
      sessionTimeout?: string(name='SessionTimeout', example='15'),
      skipUserAuthCheck?: boolean(name='SkipUserAuthCheck', example='false'),
      specId?: string(name='SpecId', example='spec-8o18t8uc31qib0****'),
      status?: string(name='Status', example='PUBLISHED'),
    }
  ](name='AppInstanceGroupModels', description='The delivery groups.'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  totalCount?: int32(name='TotalCount', example='15'),
}

model ListAppInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAppInstanceGroupResponseBody(name='body'),
}

/**
 * @summary Queries the details of multiple delivery groups that meet the query conditions.
 *
 * @param request ListAppInstanceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAppInstanceGroupResponse
 */
async function listAppInstanceGroupWithOptions(request: ListAppInstanceGroupRequest, runtime: $RuntimeOptions): ListAppInstanceGroupResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appCenterImageId)) {
    query['AppCenterImageId'] = request.appCenterImageId;
  }
  if (!$isNull(request.appInstanceGroupId)) {
    query['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!$isNull(request.appInstanceGroupName)) {
    query['AppInstanceGroupName'] = request.appInstanceGroupName;
  }
  if (!$isNull(request.bizRegionId)) {
    query['BizRegionId'] = request.bizRegionId;
  }
  if (!$isNull(request.nodeInstanceType)) {
    query['NodeInstanceType'] = request.nodeInstanceType;
  }
  if (!$isNull(request.officeSiteId)) {
    query['OfficeSiteId'] = request.officeSiteId;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!$isNull(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var body : map[string]any = {};
  if (!$isNull(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListAppInstanceGroup',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the details of multiple delivery groups that meet the query conditions.
 *
 * @param request ListAppInstanceGroupRequest
 * @return ListAppInstanceGroupResponse
 */
async function listAppInstanceGroup(request: ListAppInstanceGroupRequest): ListAppInstanceGroupResponse {
  var runtime = new $RuntimeOptions{};
  return listAppInstanceGroupWithOptions(request, runtime);
}

model ListAppInstancesRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', description='The ID of the delivery group.

This parameter is required.', example='aig-4p5f8tj16yb8b****'),
  appInstanceId?: string(name='AppInstanceId', description='The ID of the application instance.', example='ai-azn3kmwruh1vl****'),
  appInstanceIdList?: [ string ](name='AppInstanceIdList', description='The IDs of the application instances. Up to 100 IDs can be specified.', nullable=false),
  includeDeleted?: boolean(name='IncludeDeleted', description='Specifies whether to query the information about deleted application instances. If you set this parameter to true, you must configure AppInstanceIdList. Otherwise, a parameter error is reported.

Valid values:

*   true
*   false', example='true'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: `1`. We recommend that you configure this parameter.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. The value cannot be greater than `100`. Default value: `20`. We recommend that you configure this parameter.', example='20'),
  status?: [ string ](name='Status', description='The status of the application instances.', nullable=false),
  userIdList?: [ string ](name='UserIdList'),
}

model ListAppInstancesResponseBody = {
  appInstanceModels?: [ 
    {
      appInstanceGroupId?: string(name='AppInstanceGroupId', description='The ID of the delivery group.', example='aig-dk8p95irqfst9****'),
      appInstanceId?: string(name='AppInstanceId', description='The ID of the application instance.', example='ai-8dl7dzchklmka****'),
      bindInfo?: {
        endUserId?: string(name='EndUserId', description='The ID of the end user that is bound to the application instance.', example='app.test'),
        usageDuration?: long(name='UsageDuration', description='The use duration of the application instance. Unit: seconds.', example='2000'),
      }(name='BindInfo', description='The information about the binding between the application instance and end users.'),
      chargeType?: string(name='ChargeType'),
      gmtCreate?: string(name='GmtCreate', description='The time when the application instance was created.', example='2023-03-07T20:29:19.000+08:00'),
      gmtModified?: string(name='GmtModified', description='The time when the application instance was updated.', example='2023-03-07T20:29:19.000+08:00'),
      mainEthPublicIp?: string(name='MainEthPublicIp', description='The public IP address associated with the primary NIC. This value is returned only if `StrategyType` is set to `Mixed`.', example='10.13.13.211'),
      nodeId?: string(name='NodeId'),
      sessionStatus?: string(name='SessionStatus', description='The session status. This parameter is returned only if the application instance is in the `RUNNING` state.

Valid values:

*   disconnect: disconnected
*   connect: connected', example='connect'),
      status?: string(name='Status', description='The status of the application instance.', example='BOUND'),
    }
  ](name='AppInstanceModels', description='The IDs of the application instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page. We recommend that you configure this parameter.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on each page. The value cannot be greater than `100`. We recommend that you configure this parameter.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='18'),
}

model ListAppInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAppInstancesResponseBody(name='body'),
}

/**
 * @summary Queries the details of application instances in a delivery group, including the IDs, status, creation time, update time, session status, and public IP addresses associated with the primary NICs of the instances.
 *
 * @param request ListAppInstancesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAppInstancesResponse
 */
async function listAppInstancesWithOptions(request: ListAppInstancesRequest, runtime: $RuntimeOptions): ListAppInstancesResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appInstanceGroupId)) {
    query['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!$isNull(request.appInstanceId)) {
    query['AppInstanceId'] = request.appInstanceId;
  }
  if (!$isNull(request.includeDeleted)) {
    query['IncludeDeleted'] = request.includeDeleted;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.userIdList)) {
    query['UserIdList'] = request.userIdList;
  }
  var body : map[string]any = {};
  if (!$isNull(request.appInstanceIdList)) {
    body['AppInstanceIdList'] = request.appInstanceIdList;
  }
  if (!$isNull(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListAppInstances',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the details of application instances in a delivery group, including the IDs, status, creation time, update time, session status, and public IP addresses associated with the primary NICs of the instances.
 *
 * @param request ListAppInstancesRequest
 * @return ListAppInstancesResponse
 */
async function listAppInstances(request: ListAppInstancesRequest): ListAppInstancesResponse {
  var runtime = new $RuntimeOptions{};
  return listAppInstancesWithOptions(request, runtime);
}

model ListBindInfoRequest {
  appIdList?: [ string ](name='AppIdList'),
  appInstanceGroupIdList?: [ string ](name='AppInstanceGroupIdList'),
  appInstanceIdList?: [ string ](name='AppInstanceIdList'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  userIdList?: [ string ](name='UserIdList'),
  wyIdList?: [ string ](name='WyIdList'),
}

model ListBindInfoResponseBody = {
  bindInfoModels?: [ 
    {
      accountType?: string(name='AccountType', example='simple'),
      appId?: string(name='AppId', example='ca-fq738or6vd854****'),
      appInstanceGroupId?: string(name='AppInstanceGroupId', example='aig-0abxhr6ce35w8****'),
      appInstanceId?: string(name='AppInstanceId', example='ai-83oe276fre4l3****'),
      appVersion?: string(name='AppVersion', example='1.0'),
      productType?: string(name='ProductType', example='CloudApp'),
      regionId?: string(name='RegionId', example='cn-shanghai'),
      userId?: string(name='UserId', example='Alice'),
      wyId?: string(name='WyId', example='2ca6f5a93536****'),
    }
  ](name='BindInfoModels'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='AD2D0761-1FE5-549D-B169-D3F8D19C****'),
  totalCount?: int32(name='TotalCount', example='15'),
}

model ListBindInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBindInfoResponseBody(name='body'),
}

/**
 * @summary 查询绑定信息，支持分页
 *
 * @param request ListBindInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListBindInfoResponse
 */
async function listBindInfoWithOptions(request: ListBindInfoRequest, runtime: $RuntimeOptions): ListBindInfoResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.appIdList)) {
    body['AppIdList'] = request.appIdList;
  }
  if (!$isNull(request.appInstanceGroupIdList)) {
    body['AppInstanceGroupIdList'] = request.appInstanceGroupIdList;
  }
  if (!$isNull(request.appInstanceIdList)) {
    body['AppInstanceIdList'] = request.appInstanceIdList;
  }
  if (!$isNull(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.userIdList)) {
    body['UserIdList'] = request.userIdList;
  }
  if (!$isNull(request.wyIdList)) {
    body['WyIdList'] = request.wyIdList;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListBindInfo',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 查询绑定信息，支持分页
 *
 * @param request ListBindInfoRequest
 * @return ListBindInfoResponse
 */
async function listBindInfo(request: ListBindInfoRequest): ListBindInfoResponse {
  var runtime = new $RuntimeOptions{};
  return listBindInfoWithOptions(request, runtime);
}

model ListNodeInstanceTypeRequest {
  bizRegionId?: string(name='BizRegionId', description='The ID of the region where the resource resides. For information about the supported regions, see [Limits](https://help.aliyun.com/document_detail/426036.html).

Valid values:

*   cn-shanghai: China (Shanghai)
*   cn-hangzhou: China (Hangzhou)', example='cn-hangzhou'),
  cpu?: float(name='Cpu'),
  gpu?: float(name='Gpu'),
  gpuMemory?: int32(name='GpuMemory'),
  language?: string(name='Language', description='The language that you want to use.

Valid values:

*   en-US: English (US)
*   zh-CN: Simplified Chinese', example='zh-CN'),
  memory?: int32(name='Memory'),
  nodeInstanceType?: string(name='NodeInstanceType', description='The resource type that you want to query. If you do not configure this parameter, all resource types are returned.', example='appstreaming.vgpu.4c8g.2g'),
  nodeInstanceTypeFamily?: string(name='NodeInstanceTypeFamily'),
  orderBy?: string(name='OrderBy'),
  osType?: string(name='OsType', description='The operating system that is supported.

Valid value:

*   Windows: the Windows operating system', example='Windows'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 100.

This parameter is required.', example='10'),
  productType?: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp'),
  sortType?: string(name='SortType'),
}

model ListNodeInstanceTypeResponseBody = {
  nodeInstanceTypeModels?: [ 
    {
      cpu?: string(name='Cpu', description='The number of vCPUs.', example='4'),
      gpu?: string(name='Gpu', description='The number of GPUs.', example='2'),
      gpuMemory?: long(name='GpuMemory', description='The GPU size. Unit: MB.', example='8192'),
      maxCapacity?: int32(name='MaxCapacity', description='The maximum number of sessions to which a resource can connect at the same time. If a resource connects to a large number of sessions at the same time, user experience can be compromised. The value range varies based on the resource type. The following items describe the value ranges of different resource types:

*   appstreaming.general.4c8g: 1 to 2
*   appstreaming.general.8c16g: 1 to 4
*   appstreaming.vgpu.8c16g.4g: 1 to 4
*   appstreaming.vgpu.8c31g.16g: 1 to 4
*   appstreaming.vgpu.14c93g.12g: 1 to 6', example='4'),
      memory?: long(name='Memory', description='The memory size. Unit: MB.', example='8192'),
      nodeInstanceType?: string(name='NodeInstanceType', description='The ID of the resource type.', example='appstreaming.vgpu.4c8g.2g'),
      nodeInstanceTypeFamily?: string(name='NodeInstanceTypeFamily', description='The resource type family.

Valid values:

*   appstreaming.general: WUYING - General
*   appstreaming.vgpu: WUYING - Graphics', example='appstreaming.vgpu'),
      nodeTypeName?: string(name='NodeTypeName', description='The name of the resource type.', example='WUYING - General - 4 vCPUs 8 GB Memory'),
    }
  ](name='NodeInstanceTypeModels', description='The resource types.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries on each page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='6'),
}

model ListNodeInstanceTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodeInstanceTypeResponseBody(name='body'),
}

/**
 * @summary Queries the resource types that are available for purchase when you create a delivery group.
 *
 * @param request ListNodeInstanceTypeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNodeInstanceTypeResponse
 */
async function listNodeInstanceTypeWithOptions(request: ListNodeInstanceTypeRequest, runtime: $RuntimeOptions): ListNodeInstanceTypeResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizRegionId)) {
    query['BizRegionId'] = request.bizRegionId;
  }
  if (!$isNull(request.cpu)) {
    query['Cpu'] = request.cpu;
  }
  if (!$isNull(request.gpu)) {
    query['Gpu'] = request.gpu;
  }
  if (!$isNull(request.gpuMemory)) {
    query['GpuMemory'] = request.gpuMemory;
  }
  if (!$isNull(request.language)) {
    query['Language'] = request.language;
  }
  if (!$isNull(request.memory)) {
    query['Memory'] = request.memory;
  }
  if (!$isNull(request.nodeInstanceType)) {
    query['NodeInstanceType'] = request.nodeInstanceType;
  }
  if (!$isNull(request.nodeInstanceTypeFamily)) {
    query['NodeInstanceTypeFamily'] = request.nodeInstanceTypeFamily;
  }
  if (!$isNull(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!$isNull(request.osType)) {
    query['OsType'] = request.osType;
  }
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!$isNull(request.sortType)) {
    query['SortType'] = request.sortType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListNodeInstanceType',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the resource types that are available for purchase when you create a delivery group.
 *
 * @param request ListNodeInstanceTypeRequest
 * @return ListNodeInstanceTypeResponse
 */
async function listNodeInstanceType(request: ListNodeInstanceTypeRequest): ListNodeInstanceTypeResponse {
  var runtime = new $RuntimeOptions{};
  return listNodeInstanceTypeWithOptions(request, runtime);
}

model ListOtaTaskRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', description='The ID of the delivery group.

This parameter is required.', example='aig-53fvrq1oanz6c****'),
  otaType?: string(name='OtaType', description='The type of the OTA update task.

Valid values:

*   Fota: update of the system components of Alibaba Cloud Workspace

This parameter is required.', example='Fota'),
  pageNumber?: int32(name='PageNumber', description='The page number of the page to return.

This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 100.

This parameter is required.', example='10'),
}

model ListOtaTaskResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries on each page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  taskList?: [ 
    {
      otaVersion?: string(name='OtaVersion', description='The OTA version.', example='0.0.1-R-20220708.110604'),
      taskDisplayStatus?: string(name='TaskDisplayStatus', description='The task status.

Valid values:

*   FAILED
*   RUNNING
*   TERMINATED
*   PART_FINISHED
*   STANDBY
*   FINISHED', example='RUNNING'),
      taskId?: string(name='TaskId', description='The task ID.', example='ota-be7jzm29wrrz5****'),
      taskStartTime?: string(name='TaskStartTime', description='The start time of the OTA update task. The time follows the ISO 8601 standard.

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-08-04T14:36:00+08:00'),
    }
  ](name='TaskList', description='The OTA update tasks.'),
  totalCount?: int32(name='TotalCount', description='The total number of OTA update tasks.', example='6'),
}

model ListOtaTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOtaTaskResponseBody(name='body'),
}

/**
 * @summary Queries the information about over-the-air (OTA) update tasks.
 *
 * @param request ListOtaTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListOtaTaskResponse
 */
async function listOtaTaskWithOptions(request: ListOtaTaskRequest, runtime: $RuntimeOptions): ListOtaTaskResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!$isNull(request.otaType)) {
    body['OtaType'] = request.otaType;
  }
  if (!$isNull(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListOtaTask',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the information about over-the-air (OTA) update tasks.
 *
 * @param request ListOtaTaskRequest
 * @return ListOtaTaskResponse
 */
async function listOtaTask(request: ListOtaTaskRequest): ListOtaTaskResponse {
  var runtime = new $RuntimeOptions{};
  return listOtaTaskWithOptions(request, runtime);
}

model ListRegionsRequest {
  bizSource?: string(name='BizSource'),
  productType?: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming', example='CloudApp'),
}

model ListRegionsResponseBody = {
  regionModels?: [ 
    {
      regionId?: string(name='regionId', description='The region ID.', example='cn-hangzhou'),
    }
  ](name='RegionModels', description='The region IDs.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ListRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRegionsResponseBody(name='body'),
}

/**
 * @summary Queries the regions that are supported by App Streaming.
 *
 * @description >  All supported regions instead of available regions are returned by this operation. For more information, see [Supported regions](https://help.aliyun.com/document_detail/426036.html).
 *
 * @param request ListRegionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListRegionsResponse
 */
async function listRegionsWithOptions(request: ListRegionsRequest, runtime: $RuntimeOptions): ListRegionsResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizSource)) {
    query['BizSource'] = request.bizSource;
  }
  if (!$isNull(request.productType)) {
    query['ProductType'] = request.productType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListRegions',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the regions that are supported by App Streaming.
 *
 * @description >  All supported regions instead of available regions are returned by this operation. For more information, see [Supported regions](https://help.aliyun.com/document_detail/426036.html).
 *
 * @param request ListRegionsRequest
 * @return ListRegionsResponse
 */
async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  var runtime = new $RuntimeOptions{};
  return listRegionsWithOptions(request, runtime);
}

model ListSessionPackagesRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='100'),
  projectId?: string(name='ProjectId', example='p-xxxxxxxxxxxx'),
  sessionPackageId?: string(name='SessionPackageId', example='tp-xxxxxxxx'),
  sessionPackageName?: string(name='SessionPackageName'),
  sortType?: string(name='SortType', example='ASC'),
  stateList?: [ int32 ](name='StateList'),
}

model ListSessionPackagesResponseBody = {
  data?: [ 
    {
      availableHours?: long(name='AvailableHours', example='500'),
      chargeType?: string(name='ChargeType'),
      deleteStatus?: int32(name='DeleteStatus', example='0'),
      gmtCreate?: string(name='GmtCreate', example='1701170196000'),
      gmtModifiedTime?: string(name='GmtModifiedTime', example='1701170203000'),
      instanceObject?: {
        expiredTime?: string(name='ExpiredTime', example='2024-05-28T16:00:00Z'),
        instanceId?: string(name='InstanceId', example='tp-xxxxxxxxxxx'),
        instanceType?: string(name='InstanceType', example='appstreaming.general.entry'),
        resourceId?: string(name='ResourceId', example='p-xxxxxxxxxx'),
        resourceType?: string(name='ResourceType', example='AppSessionPackage'),
        startTime?: string(name='StartTime', example='2023-11-28T04:14:07Z'),
        totalTime?: long(name='TotalTime', example='3600000'),
        usedTime?: long(name='UsedTime', example='1021'),
      }(name='InstanceObject'),
      maxHours?: long(name='MaxHours', example='1000'),
      maxSessions?: long(name='MaxSessions', example='100'),
      projectId?: string(name='ProjectId', example='p-xxxxxxxxxxxx'),
      projectName?: string(name='ProjectName'),
      region?: string(name='Region', example='cn-hangzhou'),
      sessionPackageId?: string(name='SessionPackageId', example='tp-xxxxxxxxx'),
      sessionPackageName?: string(name='SessionPackageName'),
      sessionPackageTypeId?: string(name='SessionPackageTypeId', example='0'),
      sessionSpec?: string(name='SessionSpec', example='appstreaming.general.entry'),
      sessionUsageRate?: long(name='SessionUsageRate', example='60'),
      state?: int32(name='State', example='4'),
      userIdentification?: long(name='UserIdentification', example='156xxxxxxxxxx'),
    }
  ](name='Data'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='100'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5Fxxxxxxxx'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListSessionPackagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSessionPackagesResponseBody(name='body'),
}

/**
 * @summary 项目的会话包列表
 *
 * @param request ListSessionPackagesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSessionPackagesResponse
 */
async function listSessionPackagesWithOptions(request: ListSessionPackagesRequest, runtime: $RuntimeOptions): ListSessionPackagesResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.projectId)) {
    query['ProjectId'] = request.projectId;
  }
  if (!$isNull(request.sessionPackageId)) {
    query['SessionPackageId'] = request.sessionPackageId;
  }
  if (!$isNull(request.sessionPackageName)) {
    query['SessionPackageName'] = request.sessionPackageName;
  }
  if (!$isNull(request.sortType)) {
    query['SortType'] = request.sortType;
  }
  if (!$isNull(request.stateList)) {
    query['StateList'] = request.stateList;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListSessionPackages',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 项目的会话包列表
 *
 * @param request ListSessionPackagesRequest
 * @return ListSessionPackagesResponse
 */
async function listSessionPackages(request: ListSessionPackagesRequest): ListSessionPackagesResponse {
  var runtime = new $RuntimeOptions{};
  return listSessionPackagesWithOptions(request, runtime);
}

model ListTenantConfigResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  tenantConfigModel?: {
    appInstanceGroupExpireRemind?: boolean(name='AppInstanceGroupExpireRemind', description='Indicates whether the resource expiration reminder feature is enabled.

Valid values:

*   true
*   false', example='true'),
  }(name='TenantConfigModel', description='The user configurations.'),
}

model ListTenantConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTenantConfigResponseBody(name='body'),
}

/**
 * @summary Queries the configurations of the administrator account, such as whether the resource expiration reminder feature is enabled.
 *
 * @param request ListTenantConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTenantConfigResponse
 */
async function listTenantConfigWithOptions(runtime: $RuntimeOptions): ListTenantConfigResponse {
  var req = new OpenApiUtil.OpenApiRequest{};
  var params = new OpenApiUtil.Params{
    action = 'ListTenantConfig',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the configurations of the administrator account, such as whether the resource expiration reminder feature is enabled.
 *
 * @return ListTenantConfigResponse
 */
async function listTenantConfig(): ListTenantConfigResponse {
  var runtime = new $RuntimeOptions{};
  return listTenantConfigWithOptions(runtime);
}

model LogOffAllSessionsInAppInstanceGroupRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', description='The ID of the delivery group.

This parameter is required.', example='aig-9ciijz60n4xsv****'),
  productType?: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp'),
}

model LogOffAllSessionsInAppInstanceGroupResponseBody = {
  code?: string(name='Code', description='The error code.', example='InvalidParameter.ProductType'),
  message?: string(name='Message', description='The error message.', example='The parameter ProductType is invalid.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model LogOffAllSessionsInAppInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LogOffAllSessionsInAppInstanceGroupResponseBody(name='body'),
}

/**
 * @summary Closes all sessions in a pay-as-you-go delivery group for which a scheduled scaling policy is used.
 *
 * @description >  This operation can be called only if you use a pay-as-you-go delivery group for which a scheduled scaling policy is used and if you call the operation at a time other than the scheduled time.
 *
 * @param request LogOffAllSessionsInAppInstanceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return LogOffAllSessionsInAppInstanceGroupResponse
 */
async function logOffAllSessionsInAppInstanceGroupWithOptions(request: LogOffAllSessionsInAppInstanceGroupRequest, runtime: $RuntimeOptions): LogOffAllSessionsInAppInstanceGroupResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!$isNull(request.productType)) {
    body['ProductType'] = request.productType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'LogOffAllSessionsInAppInstanceGroup',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Closes all sessions in a pay-as-you-go delivery group for which a scheduled scaling policy is used.
 *
 * @description >  This operation can be called only if you use a pay-as-you-go delivery group for which a scheduled scaling policy is used and if you call the operation at a time other than the scheduled time.
 *
 * @param request LogOffAllSessionsInAppInstanceGroupRequest
 * @return LogOffAllSessionsInAppInstanceGroupResponse
 */
async function logOffAllSessionsInAppInstanceGroup(request: LogOffAllSessionsInAppInstanceGroupRequest): LogOffAllSessionsInAppInstanceGroupResponse {
  var runtime = new $RuntimeOptions{};
  return logOffAllSessionsInAppInstanceGroupWithOptions(request, runtime);
}

model ModifyAppInstanceGroupAttributeRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', description='The ID of the delivery group.

This parameter is required.', example='aig-9ciijz60n4xsv****'),
  appInstanceGroupName?: string(name='AppInstanceGroupName', description='The name of the delivery group.'),
  network?: {
    domainRules?: [ 
      {
        domain?: string(name='Domain', description='The domain name.', example='www.example.com'),
        policy?: string(name='Policy', description='The policy used for the domain name.

Valid values:

*   allow
*   block', example='block'),
      }
    ](name='DomainRules', description='The domain name rules.'),
  }(name='Network', description='The network settings.

>  If you want to use this parameter, submit a ticket.'),
  nodePool?: {
    nodeCapacity?: int32(name='NodeCapacity', description='The maximum number of sessions to which a resource can connect at the same time. If a resource connects to a large number of sessions at the same time, user experience can be compromised. The value range varies based on the resource type. The following items describe the value ranges of different resource types:

*   appstreaming.general.4c8g: 1 to 2
*   appstreaming.general.8c16g: 1 to 4
*   appstreaming.vgpu.8c16g.4g: 1 to 4
*   appstreaming.vgpu.8c31g.16g: 1 to 4
*   appstreaming.vgpu.14c93g.12g: 1 to 6', example='2'),
    nodePoolId?: string(name='NodePoolId', description='The ID of the resource group.', example='rg-ew7va2g1wl3vm****'),
  }(name='NodePool', description='The information about the resource group.'),
  perSessionPerApp?: boolean(name='PerSessionPerApp'),
  preOpenAppId?: string(name='PreOpenAppId', description='The application ID of the pre-open application. If you set `PreOpenMode` to `SINGLE_APP`, you cannot leave this parameter empty.``', example='ca-b2ronxxd****'),
  preOpenMode?: string(name='PreOpenMode', description='The pre-open mode.

Valid values:

*   SINGLE_APP: enables the pre-open mode for a single application.
*   OFF: disables the pre-open mode. This is the default value.', example='OFF'),
  productType?: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp'),
  securityPolicy?: {
    resetAfterUnbind?: boolean(name='ResetAfterUnbind', description='Specifies whether to reset after unbinding from a delivery group.

Valid values:

*   true
*   false', example='true'),
    skipUserAuthCheck?: boolean(name='SkipUserAuthCheck', description='Specifies whether to skip user permission verification.

Valid values:

*   true
*   false: This is the default value.', example='false'),
  }(name='SecurityPolicy', description='The security policy.'),
  sessionTimeout?: int32(name='SessionTimeout', description='The duration for which sessions are retained after disconnection. Unit: minutes. After an end user disconnects from a session, the session is closed only after the specified duration elapses. If you want to permanently retain sessions, set this parameter to `-1`. Valid values:-1 and 3 to 300. Default value: `15`.', example='15'),
  storagePolicy?: {
    storageTypeList?: [ string ](name='StorageTypeList', description='The storage types.'),
    userProfile?: {
      fileSystemId?: string(name='FileSystemId'),
      userProfileSwitch?: boolean(name='UserProfileSwitch'),
    }(name='UserProfile'),
    userProfileFollow?: {
      fileSystemId?: string(name='FileSystemId'),
      profileFollowSwitch?: boolean(name='ProfileFollowSwitch'),
    }(name='UserProfileFollow'),
  }(name='StoragePolicy', description='The storage policy.'),
}

model ModifyAppInstanceGroupAttributeShrinkRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', description='The ID of the delivery group.

This parameter is required.', example='aig-9ciijz60n4xsv****'),
  appInstanceGroupName?: string(name='AppInstanceGroupName', description='The name of the delivery group.'),
  networkShrink?: string(name='Network', description='The network settings.

>  If you want to use this parameter, submit a ticket.'),
  nodePoolShrink?: string(name='NodePool', description='The information about the resource group.'),
  perSessionPerApp?: boolean(name='PerSessionPerApp'),
  preOpenAppId?: string(name='PreOpenAppId', description='The application ID of the pre-open application. If you set `PreOpenMode` to `SINGLE_APP`, you cannot leave this parameter empty.``', example='ca-b2ronxxd****'),
  preOpenMode?: string(name='PreOpenMode', description='The pre-open mode.

Valid values:

*   SINGLE_APP: enables the pre-open mode for a single application.
*   OFF: disables the pre-open mode. This is the default value.', example='OFF'),
  productType?: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp'),
  securityPolicyShrink?: string(name='SecurityPolicy', description='The security policy.'),
  sessionTimeout?: int32(name='SessionTimeout', description='The duration for which sessions are retained after disconnection. Unit: minutes. After an end user disconnects from a session, the session is closed only after the specified duration elapses. If you want to permanently retain sessions, set this parameter to `-1`. Valid values:-1 and 3 to 300. Default value: `15`.', example='15'),
  storagePolicyShrink?: string(name='StoragePolicy', description='The storage policy.'),
}

model ModifyAppInstanceGroupAttributeResponseBody = {
  code?: string(name='Code', description='The error code.', example='InvalidParameter.ProductType'),
  message?: string(name='Message', description='The error message.', example='The parameter ProductType is invalid.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyAppInstanceGroupAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAppInstanceGroupAttributeResponseBody(name='body'),
}

/**
 * @summary Modifies the general policies of a delivery group, including the number of concurrent sessions and the retention period of disconnected sessions.
 *
 * @param tmpReq ModifyAppInstanceGroupAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyAppInstanceGroupAttributeResponse
 */
async function modifyAppInstanceGroupAttributeWithOptions(tmpReq: ModifyAppInstanceGroupAttributeRequest, runtime: $RuntimeOptions): ModifyAppInstanceGroupAttributeResponse {
  tmpReq.validate();
  var request = new ModifyAppInstanceGroupAttributeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.network)) {
    request.networkShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.network, 'Network', 'json');
  }
  if (!$isNull(tmpReq.nodePool)) {
    request.nodePoolShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.nodePool, 'NodePool', 'json');
  }
  if (!$isNull(tmpReq.securityPolicy)) {
    request.securityPolicyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.securityPolicy, 'SecurityPolicy', 'json');
  }
  if (!$isNull(tmpReq.storagePolicy)) {
    request.storagePolicyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.storagePolicy, 'StoragePolicy', 'json');
  }
  var query = {};
  if (!$isNull(request.appInstanceGroupId)) {
    query['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!$isNull(request.appInstanceGroupName)) {
    query['AppInstanceGroupName'] = request.appInstanceGroupName;
  }
  if (!$isNull(request.nodePoolShrink)) {
    query['NodePool'] = request.nodePoolShrink;
  }
  if (!$isNull(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!$isNull(request.sessionTimeout)) {
    query['SessionTimeout'] = request.sessionTimeout;
  }
  var body : map[string]any = {};
  if (!$isNull(request.networkShrink)) {
    body['Network'] = request.networkShrink;
  }
  if (!$isNull(request.perSessionPerApp)) {
    body['PerSessionPerApp'] = request.perSessionPerApp;
  }
  if (!$isNull(request.preOpenAppId)) {
    body['PreOpenAppId'] = request.preOpenAppId;
  }
  if (!$isNull(request.preOpenMode)) {
    body['PreOpenMode'] = request.preOpenMode;
  }
  if (!$isNull(request.securityPolicyShrink)) {
    body['SecurityPolicy'] = request.securityPolicyShrink;
  }
  if (!$isNull(request.storagePolicyShrink)) {
    body['StoragePolicy'] = request.storagePolicyShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ModifyAppInstanceGroupAttribute',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Modifies the general policies of a delivery group, including the number of concurrent sessions and the retention period of disconnected sessions.
 *
 * @param request ModifyAppInstanceGroupAttributeRequest
 * @return ModifyAppInstanceGroupAttributeResponse
 */
async function modifyAppInstanceGroupAttribute(request: ModifyAppInstanceGroupAttributeRequest): ModifyAppInstanceGroupAttributeResponse {
  var runtime = new $RuntimeOptions{};
  return modifyAppInstanceGroupAttributeWithOptions(request, runtime);
}

model ModifyAppPolicyRequest {
  appPolicyId?: string(name='AppPolicyId', description='This parameter is required.', example='pg-ee2znjktwgxu2****'),
  productType?: string(name='ProductType', description='This parameter is required.', example='CloudApp'),
  videoPolicy?: {
    frameRate?: int32(name='FrameRate', example='60'),
    sessionResolutionHeight?: int32(name='SessionResolutionHeight', example='1080'),
    sessionResolutionWidth?: int32(name='SessionResolutionWidth', example='1920'),
    streamingMode?: string(name='StreamingMode', example='video'),
    terminalResolutionAdaptive?: boolean(name='TerminalResolutionAdaptive', example='false'),
    visualQualityStrategy?: string(name='VisualQualityStrategy'),
    webrtc?: boolean(name='Webrtc', example='true'),
  }(name='VideoPolicy'),
}

model ModifyAppPolicyShrinkRequest {
  appPolicyId?: string(name='AppPolicyId', description='This parameter is required.', example='pg-ee2znjktwgxu2****'),
  productType?: string(name='ProductType', description='This parameter is required.', example='CloudApp'),
  videoPolicyShrink?: string(name='VideoPolicy'),
}

model ModifyAppPolicyResponseBody = {
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyAppPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAppPolicyResponseBody(name='body'),
}

/**
 * @summary 修改策略信息
 *
 * @param tmpReq ModifyAppPolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyAppPolicyResponse
 */
async function modifyAppPolicyWithOptions(tmpReq: ModifyAppPolicyRequest, runtime: $RuntimeOptions): ModifyAppPolicyResponse {
  tmpReq.validate();
  var request = new ModifyAppPolicyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.videoPolicy)) {
    request.videoPolicyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.videoPolicy, 'VideoPolicy', 'json');
  }
  var query = {};
  if (!$isNull(request.appPolicyId)) {
    query['AppPolicyId'] = request.appPolicyId;
  }
  if (!$isNull(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!$isNull(request.videoPolicyShrink)) {
    query['VideoPolicy'] = request.videoPolicyShrink;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ModifyAppPolicy',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary 修改策略信息
 *
 * @param request ModifyAppPolicyRequest
 * @return ModifyAppPolicyResponse
 */
async function modifyAppPolicy(request: ModifyAppPolicyRequest): ModifyAppPolicyResponse {
  var runtime = new $RuntimeOptions{};
  return modifyAppPolicyWithOptions(request, runtime);
}

model ModifyNodePoolAttributeRequest {
  bizRegionId?: string(name='BizRegionId', example='cn-hangzhou'),
  nodeCapacity?: int32(name='NodeCapacity', example='2'),
  nodePoolStrategy?: {
    maxIdleAppInstanceAmount?: int32(name='MaxIdleAppInstanceAmount'),
    maxScalingAmount?: int32(name='MaxScalingAmount', example='10'),
    nodeAmount?: int32(name='NodeAmount', description='购买资源的数量。取值范围：1~100。

> 
- 若为包年包月资源，则该参数不可修改。
- 若为按量付费资源，则当弹性模式（`StrategyType`）为固定数量（`NODE_FIXED`）或自动扩缩容（`NODE_SCALING_BY_USAGE`）时该参数可修改。', example='1'),
    recurrenceSchedules?: [ 
      {
        recurrenceType?: string(name='RecurrenceType', description='策略执行周期的类型。必须同时指定`RecurrenceType`和`RecurrenceValues`。', example='weekly'),
        recurrenceValues?: [ int32 ](name='RecurrenceValues', description='策略执行周期的数值列表。'),
        timerPeriods?: [ 
          {
            amount?: int32(name='Amount', description='资源数量。', example='2'),
            endTime?: string(name='EndTime', description='结束时间。格式为HH:mm。', example='15:00'),
            startTime?: string(name='StartTime', description='开始时间。格式为HH:mm。', example='12:00'),
          }
        ](name='TimerPeriods', description='策略执行周期的时间段列表。时间段设置要求：

- 最多可添加3个时间段。
- 时间段之间不重叠。
- 时间段之间的间隔大于或等于5分钟。
- 单个时间段的时长大于或等于15分钟。
- 所有时间段累计不跨天。'),
      }
    ](name='RecurrenceSchedules', description='策略执行周期列表。`StrategyType`（弹性模式）设为`NODE_SCALING_BY_SCHEDULE`（定时扩缩容）时，该字段必填。'),
    scalingDownAfterIdleMinutes?: int32(name='ScalingDownAfterIdleMinutes', example='5'),
    scalingStep?: int32(name='ScalingStep', example='2'),
    scalingUsageThreshold?: string(name='ScalingUsageThreshold', example='85'),
    strategyDisableDate?: string(name='StrategyDisableDate', description='策略失效日期。格式为：yyyy-MM-dd。失效日期与生效日期的间隔必须介于7天到1年之间（含7天和1年）。`StrategyType`（弹性模式）设为`NODE_SCALING_BY_SCHEDULE`（定时扩缩容）时，该字段必填。', example='2023-01-19'),
    strategyEnableDate?: string(name='StrategyEnableDate', description='策略生效日期。格式为：yyyy-MM-dd。该日期必须大于或等于当前日期。`StrategyType`（弹性模式）设为`NODE_SCALING_BY_SCHEDULE`（定时扩缩容）时，该字段必填。', example='2023-01-05'),
    strategyType?: string(name='StrategyType'),
    warmUp?: boolean(name='WarmUp', description='是否开启资源预热策略。`StrategyType`（弹性模式）设为`NODE_SCALING_BY_SCHEDULE`（定时扩缩容）时，该字段必填。', example='false'),
  }(name='NodePoolStrategy'),
  poolId?: string(name='PoolId', example='rg-ew7va2g1wl3vm****'),
  productType?: string(name='ProductType', description='产品类型。', example='CloudApp'),
}

model ModifyNodePoolAttributeShrinkRequest {
  bizRegionId?: string(name='BizRegionId', example='cn-hangzhou'),
  nodeCapacity?: int32(name='NodeCapacity', example='2'),
  nodePoolStrategyShrink?: string(name='NodePoolStrategy'),
  poolId?: string(name='PoolId', example='rg-ew7va2g1wl3vm****'),
  productType?: string(name='ProductType', description='产品类型。', example='CloudApp'),
}

model ModifyNodePoolAttributeResponseBody = {
  code?: string(name='Code', example='InvalidParameter.PoolId'),
  message?: string(name='Message', example='The parameter PoolId is invalid.'),
  requestId?: string(name='RequestId', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyNodePoolAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNodePoolAttributeResponseBody(name='body'),
}

/**
 * @param tmpReq ModifyNodePoolAttributeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyNodePoolAttributeResponse
 */
async function modifyNodePoolAttributeWithOptions(tmpReq: ModifyNodePoolAttributeRequest, runtime: $RuntimeOptions): ModifyNodePoolAttributeResponse {
  tmpReq.validate();
  var request = new ModifyNodePoolAttributeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.nodePoolStrategy)) {
    request.nodePoolStrategyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.nodePoolStrategy, 'NodePoolStrategy', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.bizRegionId)) {
    body['BizRegionId'] = request.bizRegionId;
  }
  if (!$isNull(request.nodeCapacity)) {
    body['NodeCapacity'] = request.nodeCapacity;
  }
  if (!$isNull(request.nodePoolStrategyShrink)) {
    body['NodePoolStrategy'] = request.nodePoolStrategyShrink;
  }
  if (!$isNull(request.poolId)) {
    body['PoolId'] = request.poolId;
  }
  if (!$isNull(request.productType)) {
    body['ProductType'] = request.productType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ModifyNodePoolAttribute',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @param request ModifyNodePoolAttributeRequest
 * @return ModifyNodePoolAttributeResponse
 */
async function modifyNodePoolAttribute(request: ModifyNodePoolAttributeRequest): ModifyNodePoolAttributeResponse {
  var runtime = new $RuntimeOptions{};
  return modifyNodePoolAttributeWithOptions(request, runtime);
}

model ModifyTenantConfigRequest {
  appInstanceGroupExpireRemind?: boolean(name='AppInstanceGroupExpireRemind', description='Specifies whether to enable the resource expiration reminder feature.

Valid values:

*   true
*   false', example='true'),
}

model ModifyTenantConfigResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model ModifyTenantConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTenantConfigResponseBody(name='body'),
}

/**
 * @summary Modifies the configurations of the administrator account, such as whether to enable the resource expiration reminder feature.
 *
 * @param request ModifyTenantConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyTenantConfigResponse
 */
async function modifyTenantConfigWithOptions(request: ModifyTenantConfigRequest, runtime: $RuntimeOptions): ModifyTenantConfigResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.appInstanceGroupExpireRemind)) {
    body['AppInstanceGroupExpireRemind'] = request.appInstanceGroupExpireRemind;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ModifyTenantConfig',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Modifies the configurations of the administrator account, such as whether to enable the resource expiration reminder feature.
 *
 * @param request ModifyTenantConfigRequest
 * @return ModifyTenantConfigResponse
 */
async function modifyTenantConfig(request: ModifyTenantConfigRequest): ModifyTenantConfigResponse {
  var runtime = new $RuntimeOptions{};
  return modifyTenantConfigWithOptions(request, runtime);
}

model PageListAppInstanceGroupUserRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', description='The ID of the delivery group.

This parameter is required.', example='aig-9ciijz60n4xsv****'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. We recommend that you configure this parameter.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to be return on each page. The value cannot be greater than `100`. We recommend that you configure this parameter.', example='10'),
  productType?: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp'),
}

model PageListAppInstanceGroupUserResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
  users?: [ string ](name='Users', description='The users.'),
}

model PageListAppInstanceGroupUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PageListAppInstanceGroupUserResponseBody(name='body'),
}

/**
 * @summary Queries the assigned users that are added to a delivery group by page.
 *
 * @param request PageListAppInstanceGroupUserRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PageListAppInstanceGroupUserResponse
 */
async function pageListAppInstanceGroupUserWithOptions(request: PageListAppInstanceGroupUserRequest, runtime: $RuntimeOptions): PageListAppInstanceGroupUserResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!$isNull(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.productType)) {
    body['ProductType'] = request.productType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'PageListAppInstanceGroupUser',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Queries the assigned users that are added to a delivery group by page.
 *
 * @param request PageListAppInstanceGroupUserRequest
 * @return PageListAppInstanceGroupUserResponse
 */
async function pageListAppInstanceGroupUser(request: PageListAppInstanceGroupUserRequest): PageListAppInstanceGroupUserResponse {
  var runtime = new $RuntimeOptions{};
  return pageListAppInstanceGroupUserWithOptions(request, runtime);
}

model RenewAppInstanceGroupRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', description='The ID of the delivery group.

This parameter is required.', example='aig-9ciijz60n4xsv****'),
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment.

Valid values:

*   true
*   false: manual payment. This is the default value.', example='false'),
  period?: int32(name='Period', description='The subscription duration of resources. This parameter must be configured together with `PeriodUnit`.

This parameter is required.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription duration. This parameter must be configured together with `Period`. The following items describe valid values for the combinations of `Period` and `PeriodUnit`:

*   1 Week
*   1 Month
*   2 Month
*   3 Month
*   6 Month
*   1 Year
*   2 Year
*   3 Year

>  The value of this parameter is case-insensitive. For example, `Week` is valid and `week` is invalid. If you specify a value combination other than the preceding combinations, such as `2 Week`, the operation can still be called. However, an error occurs when you place the order.

This parameter is required.', example='Week'),
  productType?: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp'),
  promotionId?: string(name='PromotionId', description='The promotion ID. You can call the [GetResourcePrice](https://help.aliyun.com/document_detail/428503.html) operation to obtain the ID.', example='17440009****'),
}

model RenewAppInstanceGroupResponseBody = {
  code?: string(name='Code', description='The error code.', example='InvalidParameter.ProductType'),
  message?: string(name='Message', description='The error message.', example='The parameter ProductType is invalid.'),
  orderId?: string(name='OrderId', description='The order ID.', example='123456****'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model RenewAppInstanceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenewAppInstanceGroupResponseBody(name='body'),
}

/**
 * @summary Renews a delivery group.
 *
 * @description Before you call this operation, make sure that you fully understand the [billing methods and prices](https://help.aliyun.com/document_detail/426039.html) of App Streaming.
 *
 * @param request RenewAppInstanceGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RenewAppInstanceGroupResponse
 */
async function renewAppInstanceGroupWithOptions(request: RenewAppInstanceGroupRequest, runtime: $RuntimeOptions): RenewAppInstanceGroupResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appInstanceGroupId)) {
    query['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!$isNull(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!$isNull(request.period)) {
    query['Period'] = request.period;
  }
  if (!$isNull(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!$isNull(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!$isNull(request.promotionId)) {
    query['PromotionId'] = request.promotionId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'RenewAppInstanceGroup',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Renews a delivery group.
 *
 * @description Before you call this operation, make sure that you fully understand the [billing methods and prices](https://help.aliyun.com/document_detail/426039.html) of App Streaming.
 *
 * @param request RenewAppInstanceGroupRequest
 * @return RenewAppInstanceGroupResponse
 */
async function renewAppInstanceGroup(request: RenewAppInstanceGroupRequest): RenewAppInstanceGroupResponse {
  var runtime = new $RuntimeOptions{};
  return renewAppInstanceGroupWithOptions(request, runtime);
}

model UnbindRequest {
  appInstanceGroupId?: string(name='AppInstanceGroupId', description='The ID of the delivery group. You can call the [GetConnectionTicket](~~GetConnectionTicket~~) operation to obtain the ID.

This parameter is required.', example='aig-9ciijz60n4xsv****'),
  appInstanceId?: string(name='AppInstanceId', description='The session ID. You can call the [GetConnectionTicket](~~GetConnectionTicket~~) operation to obtain the ID.', example='ai-d297eyf83g5ni****'),
  appInstancePersistentId?: string(name='AppInstancePersistentId', description='The ID of the persistent session. You can call the [GetConnectionTicket](~~GetConnectionTicket~~) operation to obtain the ID.', example='p-0bxls9m3cl7s****'),
  endUserId?: string(name='EndUserId', description='The username.

This parameter is required.', example='alice'),
  productType?: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp'),
}

model UnbindResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model UnbindResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindResponseBody(name='body'),
}

/**
 * @summary Unbinds a user and a session.
 *
 * @param request UnbindRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UnbindResponse
 */
async function unbindWithOptions(request: UnbindRequest, runtime: $RuntimeOptions): UnbindResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.appInstanceGroupId)) {
    body['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!$isNull(request.appInstanceId)) {
    body['AppInstanceId'] = request.appInstanceId;
  }
  if (!$isNull(request.appInstancePersistentId)) {
    body['AppInstancePersistentId'] = request.appInstancePersistentId;
  }
  if (!$isNull(request.endUserId)) {
    body['EndUserId'] = request.endUserId;
  }
  if (!$isNull(request.productType)) {
    body['ProductType'] = request.productType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'Unbind',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Unbinds a user and a session.
 *
 * @param request UnbindRequest
 * @return UnbindResponse
 */
async function unbind(request: UnbindRequest): UnbindResponse {
  var runtime = new $RuntimeOptions{};
  return unbindWithOptions(request, runtime);
}

model UpdateAppInstanceGroupImageRequest {
  appCenterImageId?: string(name='AppCenterImageId', description='The image ID of the application. You can obtain the ID from the Images page in the App Streaming console.

This parameter is required.', example='img-8z4nztpaqvay4****'),
  appInstanceGroupId?: string(name='AppInstanceGroupId', description='The ID of the delivery group.

This parameter is required.', example='aig-9ciijz60n4xsv****'),
  bizRegionId?: string(name='BizRegionId', description='The ID of the region where the delivery group resides. For information about the supported regions, see [Limits](https://help.aliyun.com/document_detail/426036.html).

Valid values:

*   cn-shanghai: China (Shanghai).
*   cn-hangzhou: China (Hangzhou)

This parameter is required.', example='cn-hangzhou'),
  productType?: string(name='ProductType', description='The product type.

Valid value:

*   CloudApp: App Streaming

This parameter is required.', example='CloudApp'),
}

model UpdateAppInstanceGroupImageResponseBody = {
  code?: string(name='Code', description='The error code.', example='InvalidParameter.ProductType'),
  message?: string(name='Message', description='The error message.', example='The parameter ProductType is invalid.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1CBAFFAB-B697-4049-A9B1-67E1FC5F****'),
}

model UpdateAppInstanceGroupImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAppInstanceGroupImageResponseBody(name='body'),
}

/**
 * @summary Updates the image of a delivery group.
 *
 * @description **
 * **Warning** After the image is updated, the end user session accessing the cloud application will be disconnected. Exercise caution to avoid end user data loss.
 * >  After the image of the delivery group is updated, the change takes effect on the terminal in approximately 2 minutes.
 *
 * @param request UpdateAppInstanceGroupImageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAppInstanceGroupImageResponse
 */
async function updateAppInstanceGroupImageWithOptions(request: UpdateAppInstanceGroupImageRequest, runtime: $RuntimeOptions): UpdateAppInstanceGroupImageResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appCenterImageId)) {
    query['AppCenterImageId'] = request.appCenterImageId;
  }
  if (!$isNull(request.appInstanceGroupId)) {
    query['AppInstanceGroupId'] = request.appInstanceGroupId;
  }
  if (!$isNull(request.bizRegionId)) {
    query['BizRegionId'] = request.bizRegionId;
  }
  if (!$isNull(request.productType)) {
    query['ProductType'] = request.productType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateAppInstanceGroupImage',
    version = '2021-09-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  if ($isNull(@signatureVersion) || @signatureVersion != 'v4') {
    return callApi(params, req, runtime);
  } else {
    return execute(params, req, runtime);
  }
}

/**
 * @summary Updates the image of a delivery group.
 *
 * @description **
 * **Warning** After the image is updated, the end user session accessing the cloud application will be disconnected. Exercise caution to avoid end user data loss.
 * >  After the image of the delivery group is updated, the change takes effect on the terminal in approximately 2 minutes.
 *
 * @param request UpdateAppInstanceGroupImageRequest
 * @return UpdateAppInstanceGroupImageResponse
 */
async function updateAppInstanceGroupImage(request: UpdateAppInstanceGroupImageRequest): UpdateAppInstanceGroupImageResponse {
  var runtime = new $RuntimeOptions{};
  return updateAppInstanceGroupImageWithOptions(request, runtime);
}

