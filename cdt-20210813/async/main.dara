/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'CDT';
  @version = '2021-08-13';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model GetCdtCbServiceStatusRequest {
}

model GetCdtCbServiceStatusResponseBody = {
  enabled?: boolean(name='Enabled'),
  requestId?: string(name='RequestId'),
}

model GetCdtCbServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCdtCbServiceStatusResponseBody(name='body'),
}

async function getCdtCbServiceStatus(request: GetCdtCbServiceStatusRequest): GetCdtCbServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCdtCbServiceStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetCdtInternetServiceStatusRequest {
}

model GetCdtInternetServiceStatusResponseBody = {
  enabled?: boolean(name='Enabled'),
  requestId?: string(name='RequestId'),
}

model GetCdtInternetServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCdtInternetServiceStatusResponseBody(name='body'),
}

async function getCdtInternetServiceStatus(request: GetCdtInternetServiceStatusRequest): GetCdtInternetServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCdtInternetServiceStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetCdtServiceStatusRequest {
}

model GetCdtServiceStatusResponseBody = {
  enabled?: boolean(name='Enabled'),
  requestId?: string(name='RequestId'),
}

model GetCdtServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCdtServiceStatusResponseBody(name='body'),
}

async function getCdtServiceStatus(request: GetCdtServiceStatusRequest): GetCdtServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCdtServiceStatus', 'POST', '/', 'json', false, 'json', request);
}

model ListCdtCrossBordTrafficRequest {
  businessRegionId: string(name='BusinessRegionId', position='Query'),
}

model ListCdtCrossBordTrafficResponseBody = {
  requestId?: string(name='RequestId'),
  trafficDetails?: [ 
    {
      businessRegionId?: string(name='BusinessRegionId'),
      productTrafficDetails?: [ 
        {
          product?: string(name='Product'),
          traffic?: long(name='Traffic'),
        }
      ](name='ProductTrafficDetails'),
      traffic?: long(name='Traffic'),
    }
  ](name='TrafficDetails'),
}

model ListCdtCrossBordTrafficResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCdtCrossBordTrafficResponseBody(name='body'),
}

async function listCdtCrossBordTraffic(request: ListCdtCrossBordTrafficRequest): ListCdtCrossBordTrafficResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCdtCrossBordTraffic', 'POST', '/', 'json', false, 'json', request);
}

model ListCdtInternetTrafficRequest {
  businessRegionId?: string(name='BusinessRegionId', position='Query'),
}

model ListCdtInternetTrafficResponseBody = {
  requestId?: string(name='RequestId'),
  trafficDetails?: [ 
    {
      businessRegionId?: string(name='BusinessRegionId'),
      ISPType?: string(name='ISPType'),
      productTrafficDetails?: [ 
        {
          product?: string(name='Product'),
          traffic?: long(name='Traffic'),
        }
      ](name='ProductTrafficDetails'),
      traffic?: long(name='Traffic'),
      trafficTierDetails?: [ 
        {
          highestTraffic?: long(name='HighestTraffic'),
          lowestTraffic?: long(name='LowestTraffic'),
          tier?: long(name='Tier'),
          traffic?: long(name='Traffic'),
        }
      ](name='TrafficTierDetails'),
    }
  ](name='TrafficDetails'),
}

model ListCdtInternetTrafficResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCdtInternetTrafficResponseBody(name='body'),
}

async function listCdtInternetTraffic(request: ListCdtInternetTrafficRequest): ListCdtInternetTrafficResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCdtInternetTraffic', 'POST', '/', 'json', false, 'json', request);
}

model ListCdtProductsRequest {
  businessRegionId: string(name='BusinessRegionId', position='Query'),
  product?: string(name='Product', position='Query'),
}

model ListCdtProductsResponseBody = {
  cdtProducts?: [ 
    {
      billingType?: string(name='BillingType'),
      businessRegionId?: string(name='BusinessRegionId'),
      cdtType?: string(name='CdtType'),
      effectiveTime?: long(name='EffectiveTime'),
      expireTime?: long(name='ExpireTime'),
      product?: string(name='Product'),
      switchedToCdt?: boolean(name='SwitchedToCdt'),
    }
  ](name='CdtProducts'),
  requestId?: string(name='RequestId'),
}

model ListCdtProductsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCdtProductsResponseBody(name='body'),
}

async function listCdtProducts(request: ListCdtProductsRequest): ListCdtProductsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCdtProducts', 'POST', '/', 'json', false, 'json', request);
}

model ListCdtTrafficTiersRequest {
  businessRegionId: string(name='BusinessRegionId', position='Query'),
}

model ListCdtTrafficTiersResponseBody = {
  requestId?: string(name='RequestId'),
  trafficTiers?: [ 
    {
      highestTraffic?: long(name='HighestTraffic'),
      lowestTraffic?: long(name='LowestTraffic'),
      tier?: long(name='Tier'),
    }
  ](name='TrafficTiers'),
}

model ListCdtTrafficTiersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCdtTrafficTiersResponseBody(name='body'),
}

async function listCdtTrafficTiers(request: ListCdtTrafficTiersRequest): ListCdtTrafficTiersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCdtTrafficTiers', 'POST', '/', 'json', false, 'json', request);
}

model ListSwitchedCdtProductsRequest {
  businessRegionId: string(name='BusinessRegionId', position='Query'),
  product?: string(name='Product', position='Query'),
}

model ListSwitchedCdtProductsResponseBody = {
  cdtProducts?: [ 
    {
      billingType?: string(name='BillingType'),
      businessRegionId?: string(name='BusinessRegionId'),
      cdtType?: string(name='CdtType'),
      effectiveTime?: long(name='EffectiveTime'),
      expireTime?: long(name='ExpireTime'),
      product?: string(name='Product'),
    }
  ](name='CdtProducts'),
  requestId?: string(name='RequestId'),
}

model ListSwitchedCdtProductsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSwitchedCdtProductsResponseBody(name='body'),
}

async function listSwitchedCdtProducts(request: ListSwitchedCdtProductsRequest): ListSwitchedCdtProductsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSwitchedCdtProducts', 'POST', '/', 'json', false, 'json', request);
}

model OpenCdtCbServiceRequest {
}

model OpenCdtCbServiceResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model OpenCdtCbServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenCdtCbServiceResponseBody(name='body'),
}

async function openCdtCbService(request: OpenCdtCbServiceRequest): OpenCdtCbServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenCdtCbService', 'POST', '/', 'json', false, 'json', request);
}

model OpenCdtInternetServiceRequest {
}

model OpenCdtInternetServiceResponseBody = {
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model OpenCdtInternetServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenCdtInternetServiceResponseBody(name='body'),
}

async function openCdtInternetService(request: OpenCdtInternetServiceRequest): OpenCdtInternetServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenCdtInternetService', 'POST', '/', 'json', false, 'json', request);
}

model OpenCdtServiceRequest {
}

model OpenCdtServiceResponseBody = {
  orderId?: string(name='OrderId', example='******'),
  requestId?: string(name='RequestId', example='FF39F653-033E-4CD9-9EDF-3CCA5A71FBC3'),
}

model OpenCdtServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenCdtServiceResponseBody(name='body'),
}

async function openCdtService(request: OpenCdtServiceRequest): OpenCdtServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenCdtService', 'POST', '/', 'json', false, 'json', request);
}

model SwitchToCdtRequest {
  billingType: string(name='BillingType', position='Query'),
  businessRegionId: string(name='BusinessRegionId', position='Query'),
  product: string(name='Product', position='Query'),
}

model SwitchToCdtResponseBody = {
  effectiveTime?: long(name='EffectiveTime'),
  requestId?: string(name='RequestId'),
}

model SwitchToCdtResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SwitchToCdtResponseBody(name='body'),
}

async function switchToCdt(request: SwitchToCdtRequest): SwitchToCdtResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchToCdt', 'POST', '/', 'json', false, 'json', request);
}

