/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cdt', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model GetCdtServiceStatusRequest {
  ownerId?: long(name='OwnerId'),
}

model GetCdtServiceStatusResponseBody = {
  requestId?: string(name='RequestId'),
  enabled?: boolean(name='Enabled'),
}

model GetCdtServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetCdtServiceStatusResponseBody(name='body'),
}

async function getCdtServiceStatusWithOptions(request: GetCdtServiceStatusRequest, runtime: Util.RuntimeOptions): GetCdtServiceStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetCdtServiceStatus', '2021-08-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getCdtServiceStatus(request: GetCdtServiceStatusRequest): GetCdtServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCdtServiceStatusWithOptions(request, runtime);
}

model OpenCdtServiceRequest {
  ownerId?: long(name='OwnerId'),
}

model OpenCdtServiceResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model OpenCdtServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenCdtServiceResponseBody(name='body'),
}

async function openCdtServiceWithOptions(request: OpenCdtServiceRequest, runtime: Util.RuntimeOptions): OpenCdtServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OpenCdtService', '2021-08-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function openCdtService(request: OpenCdtServiceRequest): OpenCdtServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openCdtServiceWithOptions(request, runtime);
}

model GetCdtCbServiceStatusRequest {
  ownerId?: long(name='OwnerId'),
}

model GetCdtCbServiceStatusResponseBody = {
  requestId?: string(name='RequestId'),
  enabled?: boolean(name='Enabled'),
}

model GetCdtCbServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetCdtCbServiceStatusResponseBody(name='body'),
}

async function getCdtCbServiceStatusWithOptions(request: GetCdtCbServiceStatusRequest, runtime: Util.RuntimeOptions): GetCdtCbServiceStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetCdtCbServiceStatus', '2021-08-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getCdtCbServiceStatus(request: GetCdtCbServiceStatusRequest): GetCdtCbServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCdtCbServiceStatusWithOptions(request, runtime);
}

model OpenCdtCbServiceRequest {
  ownerId?: long(name='OwnerId'),
}

model OpenCdtCbServiceResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model OpenCdtCbServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenCdtCbServiceResponseBody(name='body'),
}

async function openCdtCbServiceWithOptions(request: OpenCdtCbServiceRequest, runtime: Util.RuntimeOptions): OpenCdtCbServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OpenCdtCbService', '2021-08-13', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function openCdtCbService(request: OpenCdtCbServiceRequest): OpenCdtCbServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openCdtCbServiceWithOptions(request, runtime);
}

