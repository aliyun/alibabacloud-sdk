/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'schedulerx2';
  @version = '2019-04-30';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-beijing = 'schedulerx.cn-beijing.aliyuncs.com',
    cn-hangzhou = 'schedulerx.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'schedulerx.cn-shanghai.aliyuncs.com',
    cn-shenzhen = 'schedulerx.cn-shenzhen.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model BatchDeleteJobRequest {
  groupId: string(name='GroupId', position='Query'),
  jobIdList: [ integer ](name='JobIdList', position='Body'),
  namespace: string(name='Namespace', position='Query'),
  namespaceSource?: string(name='NamespaceSource', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model BatchDeleteJobResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchDeleteJobResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteJobResponseBody(name='body'),
}

async function batchDeleteJob(request: BatchDeleteJobRequest): BatchDeleteJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDeleteJob', 'POST', '/', 'json', true, 'form', request);
}

model BatchDeleteJobsRequest {
  groupId: string(name='GroupId', position='Query'),
  jobIdList: [ long ](name='JobIdList', position='Body'),
  namespace: string(name='Namespace', position='Query'),
  namespaceSource?: string(name='NamespaceSource', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model BatchDeleteJobsResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchDeleteJobsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteJobsResponseBody(name='body'),
}

async function batchDeleteJobs(request: BatchDeleteJobsRequest): BatchDeleteJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDeleteJobs', 'POST', '/', 'json', true, 'form', request);
}

model BatchDisableJobRequest {
  groupId?: string(name='GroupId', position='Query'),
  jobIdList: [ integer ](name='JobIdList', position='Body'),
  namespace: string(name='Namespace', position='Query'),
  namespaceSource?: string(name='NamespaceSource', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model BatchDisableJobResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchDisableJobResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDisableJobResponseBody(name='body'),
}

async function batchDisableJob(request: BatchDisableJobRequest): BatchDisableJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDisableJob', 'POST', '/', 'json', true, 'form', request);
}

model BatchDisableJobsRequest {
  groupId?: string(name='GroupId', position='Query'),
  jobIdList: [ long ](name='JobIdList', position='Body'),
  namespace: string(name='Namespace', position='Query'),
  namespaceSource?: string(name='NamespaceSource', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model BatchDisableJobsResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchDisableJobsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDisableJobsResponseBody(name='body'),
}

async function batchDisableJobs(request: BatchDisableJobsRequest): BatchDisableJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDisableJobs', 'POST', '/', 'json', true, 'form', request);
}

model BatchEnableJobRequest {
  groupId?: string(name='GroupId', position='Query'),
  jobIdList: [ integer ](name='JobIdList', position='Body'),
  namespace: string(name='Namespace', position='Query'),
  namespaceSource?: string(name='NamespaceSource', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model BatchEnableJobResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchEnableJobResponse = {
  headers: map[string]string(name='headers'),
  body: BatchEnableJobResponseBody(name='body'),
}

async function batchEnableJob(request: BatchEnableJobRequest): BatchEnableJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchEnableJob', 'POST', '/', 'json', true, 'form', request);
}

model BatchEnableJobsRequest {
  groupId?: string(name='GroupId', position='Query'),
  jobIdList: [ long ](name='JobIdList', position='Body'),
  namespace: string(name='Namespace', position='Query'),
  namespaceSource?: string(name='NamespaceSource', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model BatchEnableJobsResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchEnableJobsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchEnableJobsResponseBody(name='body'),
}

async function batchEnableJobs(request: BatchEnableJobsRequest): BatchEnableJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchEnableJobs', 'POST', '/', 'json', true, 'form', request);
}

model CreateAppGroupRequest {
  alarmJson?: string(name='AlarmJson', position='Query'),
  appName: string(name='AppName', position='Query'),
  description?: string(name='Description', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  maxJobs?: int32(name='MaxJobs', position='Query'),
  namespace: string(name='Namespace', position='Query'),
  namespaceName: string(name='NamespaceName', position='Query'),
  namespaceSource?: string(name='NamespaceSource', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model CreateAppGroupResponseBody = {
  code?: int32(name='Code'),
  data?: {
    appGroupId?: long(name='AppGroupId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateAppGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppGroupResponseBody(name='body'),
}

async function createAppGroup(request: CreateAppGroupRequest): CreateAppGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppGroup', 'GET', '/', 'json', false, 'json', request);
}

model CreateJobRequest {
  attemptInterval?: int32(name='AttemptInterval', position='Body'),
  calendar?: string(name='Calendar', position='Body'),
  className?: string(name='ClassName', position='Body'),
  consumerSize?: int32(name='ConsumerSize', position='Body'),
  contactInfo?: [ 
    {
      ding?: string(name='Ding'),
      userMail?: string(name='UserMail'),
      userName?: string(name='UserName'),
      userPhone?: string(name='UserPhone'),
    }
  ](name='ContactInfo', position='Body'),
  content?: string(name='Content', position='Body'),
  dataOffset?: int32(name='DataOffset', position='Body'),
  description?: string(name='Description', position='Body'),
  dispatcherSize?: int32(name='DispatcherSize', position='Body'),
  executeMode: string(name='ExecuteMode', position='Body'),
  failEnable?: boolean(name='FailEnable', position='Body'),
  groupId: string(name='GroupId', position='Body'),
  jarUrl?: string(name='JarUrl', position='Body'),
  jobType: string(name='JobType', position='Body'),
  maxAttempt?: int32(name='MaxAttempt', position='Body'),
  maxConcurrency?: int32(name='MaxConcurrency', minimum=1, maximum=200, position='Body'),
  missWorkerEnable?: boolean(name='MissWorkerEnable', position='Body'),
  name: string(name='Name', position='Body'),
  namespace: string(name='Namespace', position='Body'),
  namespaceSource?: string(name='NamespaceSource', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  parameters?: string(name='Parameters', position='Body'),
  queueSize?: int32(name='QueueSize', position='Body'),
  regionId?: string(name='RegionId', position='Query'),
  sendChannel?: string(name='SendChannel', position='Body'),
  taskAttemptInterval?: int32(name='TaskAttemptInterval', minimum=0, position='Body'),
  taskMaxAttempt?: int32(name='TaskMaxAttempt', minimum=0, maximum=10, position='Body'),
  timeExpression?: string(name='TimeExpression', position='Body'),
  timeType: int32(name='TimeType', position='Body'),
  timeout?: long(name='Timeout', position='Body'),
  timeoutEnable?: boolean(name='TimeoutEnable', position='Body'),
  timeoutKillEnable?: boolean(name='TimeoutKillEnable', position='Body'),
}

model CreateJobResponseBody = {
  code?: int32(name='Code'),
  data?: {
    jobId?: long(name='JobId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateJobResponseBody(name='body'),
}

async function createJob(request: CreateJobRequest): CreateJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateJob', 'POST', '/', 'json', true, 'form', request);
}

model DeleteJobRequest {
  groupId: string(name='GroupId', position='Query'),
  jobId: long(name='JobId', position='Query'),
  namespace: string(name='Namespace', position='Query'),
  namespaceSource?: string(name='NamespaceSource', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DeleteJobResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteJobResponseBody(name='body'),
}

async function deleteJob(request: DeleteJobRequest): DeleteJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteJob', 'GET', '/', 'json', false, 'json', request);
}

model DeleteWorkflowRequest {
  groupId?: string(name='GroupId', position='Query'),
  namespace: string(name='Namespace', position='Query'),
  namespaceSource?: string(name='NamespaceSource', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  workflowId: long(name='WorkflowId', position='Query'),
}

model DeleteWorkflowResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteWorkflowResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWorkflowResponseBody(name='body'),
}

async function deleteWorkflow(request: DeleteWorkflowRequest): DeleteWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWorkflow', 'GET', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeRegionsResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DesignateWorkersRequest {
  designateType: int32(name='DesignateType', description='指定机器的类型', position='Query'),
  groupId: string(name='GroupId', description='应用分组ID', position='Query'),
  jobId: long(name='JobId', description='任务ID', position='Query'),
  labels?: string(name='Labels', description='指定label列表json格式', position='Query'),
  namespace: string(name='Namespace', description='命名空间UID', position='Query'),
  namespaceSource?: string(name='NamespaceSource', description='命名空间来源', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  transferable: boolean(name='Transferable', description='是否故障转移', position='Query'),
  workers?: string(name='Workers', description='指定机器列表json格式', position='Query'),
}

model DesignateWorkersResponseBody = {
  code?: int32(name='Code', description='错误码'),
  message?: string(name='Message', description='错误信息'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success', description='是否成功'),
}

model DesignateWorkersResponse = {
  headers: map[string]string(name='headers'),
  body: DesignateWorkersResponseBody(name='body'),
}

async function designateWorkers(request: DesignateWorkersRequest): DesignateWorkersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DesignateWorkers', 'GET', '/', 'json', false, 'json', request);
}

model DisableJobRequest {
  groupId?: string(name='GroupId', position='Query'),
  jobId: long(name='JobId', position='Query'),
  namespace: string(name='Namespace', position='Query'),
  namespaceSource?: string(name='NamespaceSource', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DisableJobResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DisableJobResponse = {
  headers: map[string]string(name='headers'),
  body: DisableJobResponseBody(name='body'),
}

async function disableJob(request: DisableJobRequest): DisableJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableJob', 'GET', '/', 'json', false, 'json', request);
}

model DisableWorkflowRequest {
  groupId?: string(name='GroupId', position='Query'),
  namespace: string(name='Namespace', position='Query'),
  namespaceSource?: string(name='NamespaceSource', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  workflowId: long(name='WorkflowId', position='Query'),
}

model DisableWorkflowResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DisableWorkflowResponse = {
  headers: map[string]string(name='headers'),
  body: DisableWorkflowResponseBody(name='body'),
}

async function disableWorkflow(request: DisableWorkflowRequest): DisableWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableWorkflow', 'GET', '/', 'json', false, 'json', request);
}

model EnableJobRequest {
  groupId?: string(name='GroupId', position='Query'),
  jobId: long(name='JobId', position='Query'),
  namespace: string(name='Namespace', position='Query'),
  namespaceSource?: string(name='NamespaceSource', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model EnableJobResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnableJobResponse = {
  headers: map[string]string(name='headers'),
  body: EnableJobResponseBody(name='body'),
}

async function enableJob(request: EnableJobRequest): EnableJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableJob', 'GET', '/', 'json', false, 'json', request);
}

model EnableWorkflowRequest {
  groupId?: string(name='GroupId', position='Query'),
  namespace: string(name='Namespace', position='Query'),
  namespaceSource?: string(name='NamespaceSource', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  workflowId: long(name='WorkflowId', position='Query'),
}

model EnableWorkflowResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnableWorkflowResponse = {
  headers: map[string]string(name='headers'),
  body: EnableWorkflowResponseBody(name='body'),
}

async function enableWorkflow(request: EnableWorkflowRequest): EnableWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableWorkflow', 'GET', '/', 'json', false, 'json', request);
}

model ExecuteJobRequest {
  checkJobStatus?: boolean(name='CheckJobStatus', position='Query'),
  designateType?: int32(name='DesignateType', description='指定机器类型：1.workerAddr; 2. label', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  instanceParameters?: string(name='InstanceParameters', position='Query'),
  jobId: long(name='JobId', position='Query'),
  label?: string(name='Label', description='指定机器的标签', position='Query'),
  namespace: string(name='Namespace', position='Query'),
  namespaceSource?: string(name='NamespaceSource', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  worker?: string(name='Worker', description='指定机器的workerAddr', position='Query'),
}

model ExecuteJobResponseBody = {
  code?: int32(name='Code'),
  data?: {
    jobInstanceId?: long(name='JobInstanceId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ExecuteJobResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteJobResponseBody(name='body'),
}

async function executeJob(request: ExecuteJobRequest): ExecuteJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteJob', 'GET', '/', 'json', false, 'json', request);
}

model ExecuteWorkflowRequest {
  groupId: string(name='GroupId', position='Query'),
  instanceParameters?: string(name='InstanceParameters', position='Query'),
  namespace: string(name='Namespace', position='Query'),
  namespaceSource?: string(name='NamespaceSource', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  workflowId: long(name='WorkflowId', position='Query'),
}

model ExecuteWorkflowResponseBody = {
  code?: int32(name='Code'),
  data?: {
    wfInstanceId?: long(name='WfInstanceId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ExecuteWorkflowResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteWorkflowResponseBody(name='body'),
}

async function executeWorkflow(request: ExecuteWorkflowRequest): ExecuteWorkflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteWorkflow', 'GET', '/', 'json', false, 'json', request);
}

model GetJobInfoRequest {
  groupId: string(name='GroupId', position='Query'),
  jobId: long(name='JobId', position='Query'),
  namespace: string(name='Namespace', position='Query'),
  namespaceSource?: string(name='NamespaceSource', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model GetJobInfoResponseBody = {
  code?: int32(name='Code'),
  data?: {
    jobConfigInfo?: {
      attemptInterval?: int32(name='AttemptInterval'),
      className?: string(name='ClassName'),
      content?: string(name='Content'),
      description?: string(name='Description'),
      executeMode?: string(name='ExecuteMode'),
      jarUrl?: string(name='JarUrl'),
      jobMonitorInfo?: {
        contactInfo?: [ 
          {
            ding?: string(name='Ding'),
            userMail?: string(name='UserMail'),
            userName?: string(name='UserName'),
            userPhone?: string(name='UserPhone'),
          }
        ](name='ContactInfo'),
        monitorConfig?: {
          failEnable?: boolean(name='FailEnable'),
          missWorkerEnable?: boolean(name='MissWorkerEnable'),
          sendChannel?: string(name='SendChannel'),
          timeout?: long(name='Timeout'),
          timeoutEnable?: boolean(name='TimeoutEnable'),
          timeoutKillEnable?: boolean(name='TimeoutKillEnable'),
        }(name='MonitorConfig'),
      }(name='JobMonitorInfo'),
      mapTaskXAttrs?: {
        consumerSize?: int32(name='ConsumerSize'),
        dispatcherSize?: int32(name='DispatcherSize'),
        pageSize?: int32(name='PageSize'),
        queueSize?: int32(name='QueueSize'),
        taskAttemptInterval?: int32(name='TaskAttemptInterval'),
        taskMaxAttempt?: int32(name='TaskMaxAttempt'),
      }(name='MapTaskXAttrs'),
      maxAttempt?: int32(name='MaxAttempt'),
      maxConcurrency?: string(name='MaxConcurrency'),
      name?: string(name='Name'),
      parameters?: string(name='Parameters'),
      status?: int32(name='Status'),
      timeConfig?: {
        calendar?: string(name='Calendar'),
        dataOffset?: int32(name='DataOffset'),
        timeExpression?: string(name='TimeExpression'),
        timeType?: int32(name='TimeType'),
      }(name='TimeConfig'),
    }(name='JobConfigInfo'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetJobInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobInfoResponseBody(name='body'),
}

async function getJobInfo(request: GetJobInfoRequest): GetJobInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetJobInfo', 'GET', '/', 'json', false, 'json', request);
}

model GetJobInstanceRequest {
  groupId: string(name='GroupId', position='Query'),
  jobId: long(name='JobId', position='Query'),
  jobInstanceId: long(name='JobInstanceId', position='Query'),
  namespace: string(name='Namespace', position='Query'),
  namespaceSource?: string(name='NamespaceSource', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetJobInstanceResponseBody = {
  code?: int32(name='Code'),
  data?: {
    jobInstanceDetail?: {
      dataTime?: string(name='DataTime'),
      endTime?: string(name='EndTime'),
      executor?: string(name='Executor'),
      instanceId?: long(name='InstanceId'),
      jobId?: long(name='JobId'),
      progress?: string(name='Progress'),
      result?: string(name='Result'),
      scheduleTime?: string(name='ScheduleTime'),
      startTime?: string(name='StartTime'),
      status?: int32(name='Status'),
      timeType?: int32(name='TimeType'),
      triggerType?: int32(name='TriggerType'),
      workAddr?: string(name='WorkAddr'),
    }(name='JobInstanceDetail'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetJobInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobInstanceResponseBody(name='body'),
}

async function getJobInstance(request: GetJobInstanceRequest): GetJobInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetJobInstance', 'GET', '/', 'json', false, 'json', request);
}

model GetJobInstanceListRequest {
  groupId: string(name='GroupId', position='Query'),
  jobId: long(name='JobId', position='Query'),
  namespace: string(name='Namespace', position='Query'),
  namespaceSource?: string(name='NamespaceSource', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model GetJobInstanceListResponseBody = {
  code?: int32(name='Code'),
  data?: {
    jobInstanceDetails?: [ 
      {
        dataTime?: string(name='DataTime'),
        endTime?: string(name='EndTime'),
        executor?: string(name='Executor'),
        instanceId?: long(name='InstanceId'),
        jobId?: long(name='JobId'),
        progress?: string(name='Progress'),
        result?: string(name='Result'),
        scheduleTime?: string(name='ScheduleTime'),
        startTime?: string(name='StartTime'),
        status?: int32(name='Status'),
        timeType?: int32(name='TimeType'),
        triggerType?: int32(name='TriggerType'),
        workAddr?: string(name='WorkAddr'),
      }
    ](name='JobInstanceDetails'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetJobInstanceListResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobInstanceListResponseBody(name='body'),
}

async function getJobInstanceList(request: GetJobInstanceListRequest): GetJobInstanceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetJobInstanceList', 'GET', '/', 'json', false, 'json', request);
}

model GetWorkFlowRequest {
  groupId: string(name='GroupId', description='应用分组ID', position='Query'),
  namespace: string(name='Namespace', description='命名空间uid', position='Query'),
  namespaceSource?: string(name='NamespaceSource', description='命名空间来源', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  workflowId: long(name='WorkflowId', description='工作流ID', position='Query'),
}

model GetWorkFlowResponseBody = {
  code?: int32(name='Code', description='错误码'),
  data?: {
    workFlowInfo?: {
      description?: string(name='Description', description='工作流描述'),
      name?: string(name='Name', description='工作流名称'),
      status?: string(name='Status', description='工作流状态'),
      timeExpression?: string(name='TimeExpression', description='工作流时间表达式'),
      timeType?: string(name='TimeType', description='工作流时间类型'),
      workflowId?: long(name='WorkflowId', description='工作流ID'),
    }(name='WorkFlowInfo', description='工作流基本信息'),
    workFlowNodeInfo?: {
      edges?: [ 
        {
          source?: long(name='Source', description='起始任务ID'),
          target?: long(name='Target', description='目的任务ID'),
        }
      ](name='Edges', description='工作流边列表'),
      nodes?: [ 
        {
          id?: long(name='Id', description='任务ID'),
          label?: string(name='Label', description='任务名称'),
          status?: int32(name='Status', description='任务状态'),
        }
      ](name='Nodes', description='工作流节点列表'),
    }(name='WorkFlowNodeInfo', description='工作流节点信息'),
  }(name='Data', description='工作流的数据'),
  message?: string(name='Message', description='错误信息'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success', description='会否成功'),
}

model GetWorkFlowResponse = {
  headers: map[string]string(name='headers'),
  body: GetWorkFlowResponseBody(name='body'),
}

async function getWorkFlow(request: GetWorkFlowRequest): GetWorkFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWorkFlow', 'GET', '/', 'json', false, 'json', request);
}

model GetWorkerListRequest {
  groupId: string(name='GroupId', position='Query'),
  namespace: string(name='Namespace', position='Query'),
  namespaceSource?: string(name='NamespaceSource', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model GetWorkerListResponseBody = {
  code?: int32(name='Code'),
  data?: {
    workerInfos?: [ 
      {
        ip?: string(name='Ip'),
        label?: string(name='Label'),
        port?: int32(name='Port'),
        starter?: string(name='Starter'),
        version?: string(name='Version'),
        workerAddress?: string(name='WorkerAddress'),
      }
    ](name='WorkerInfos'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model GetWorkerListResponse = {
  headers: map[string]string(name='headers'),
  body: GetWorkerListResponseBody(name='body'),
}

async function getWorkerList(request: GetWorkerListRequest): GetWorkerListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWorkerList', 'GET', '/', 'json', false, 'json', request);
}

model GrantPermissionRequest {
  grantOption?: boolean(name='GrantOption', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  namespace: string(name='Namespace', position='Query'),
  namespaceSource?: string(name='NamespaceSource', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  userId: string(name='UserId', position='Query'),
  userName: string(name='UserName', position='Query'),
}

model GrantPermissionResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GrantPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: GrantPermissionResponseBody(name='body'),
}

async function grantPermission(request: GrantPermissionRequest): GrantPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantPermission', 'POST', '/', 'json', false, 'json', request);
}

model ListGroupsRequest {
  namespace: string(name='Namespace', position='Query'),
  namespaceSource?: string(name='NamespaceSource', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model ListGroupsResponseBody = {
  code?: int32(name='Code'),
  data?: {
    appGroups?: [ 
      {
        appKey?: string(name='AppKey'),
        appName?: string(name='AppName'),
        description?: string(name='Description'),
        groupId?: string(name='GroupId'),
      }
    ](name='AppGroups'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListGroupsResponseBody(name='body'),
}

async function listGroups(request: ListGroupsRequest): ListGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGroups', 'GET', '/', 'json', false, 'json', request);
}

model ListJobsRequest {
  groupId: string(name='GroupId', position='Query'),
  jobName?: string(name='JobName', position='Query'),
  namespace: string(name='Namespace', position='Query'),
  namespaceSource?: string(name='NamespaceSource', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  status?: string(name='Status', position='Query'),
}

model ListJobsResponseBody = {
  code?: int32(name='Code'),
  data?: {
    jobs?: [ 
      {
        attemptInterval?: int32(name='AttemptInterval'),
        className?: string(name='ClassName'),
        content?: string(name='Content'),
        description?: string(name='Description'),
        executeMode?: string(name='ExecuteMode'),
        jarUrl?: string(name='JarUrl'),
        jobId?: long(name='JobId'),
        jobMonitorInfo?: {
          contactInfo?: [ 
            {
              ding?: string(name='Ding'),
              userMail?: string(name='UserMail'),
              userName?: string(name='UserName'),
              userPhone?: string(name='UserPhone'),
            }
          ](name='ContactInfo'),
          monitorConfig?: {
            failEnable?: boolean(name='FailEnable'),
            missWorkerEnable?: boolean(name='MissWorkerEnable'),
            sendChannel?: string(name='SendChannel'),
            timeout?: long(name='Timeout'),
            timeoutEnable?: boolean(name='TimeoutEnable'),
            timeoutKillEnable?: boolean(name='TimeoutKillEnable'),
          }(name='MonitorConfig'),
        }(name='JobMonitorInfo'),
        mapTaskXAttrs?: {
          consumerSize?: int32(name='ConsumerSize'),
          dispatcherSize?: int32(name='DispatcherSize'),
          pageSize?: int32(name='PageSize'),
          queueSize?: int32(name='QueueSize'),
          taskAttemptInterval?: int32(name='TaskAttemptInterval'),
          taskMaxAttempt?: int32(name='TaskMaxAttempt'),
        }(name='MapTaskXAttrs'),
        maxAttempt?: int32(name='MaxAttempt'),
        maxConcurrency?: string(name='MaxConcurrency'),
        name?: string(name='Name'),
        parameters?: string(name='Parameters'),
        status?: int32(name='Status'),
        timeConfig?: {
          calendar?: string(name='Calendar'),
          dataOffset?: int32(name='DataOffset'),
          timeExpression?: string(name='TimeExpression'),
          timeType?: int32(name='TimeType'),
        }(name='TimeConfig'),
      }
    ](name='Jobs'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListJobsResponseBody(name='body'),
}

async function listJobs(request: ListJobsRequest): ListJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListJobs', 'GET', '/', 'json', false, 'json', request);
}

model ListNamespacesRequest {
  regionId?: string(name='RegionId', position='Query'),
}

model ListNamespacesResponseBody = {
  code?: int32(name='Code'),
  data?: {
    namespaces?: [ 
      {
        description?: string(name='Description'),
        name?: string(name='Name'),
        UId?: string(name='UId'),
      }
    ](name='Namespaces'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListNamespacesResponse = {
  headers: map[string]string(name='headers'),
  body: ListNamespacesResponseBody(name='body'),
}

async function listNamespaces(request: ListNamespacesRequest): ListNamespacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNamespaces', 'GET', '/', 'json', false, 'json', request);
}

model RevokePermissionRequest {
  groupId: string(name='GroupId', position='Query'),
  namespace: string(name='Namespace', position='Query'),
  namespaceSource?: string(name='NamespaceSource', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  userId: string(name='UserId', position='Query'),
}

model RevokePermissionResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RevokePermissionResponse = {
  headers: map[string]string(name='headers'),
  body: RevokePermissionResponseBody(name='body'),
}

async function revokePermission(request: RevokePermissionRequest): RevokePermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokePermission', 'POST', '/', 'json', false, 'json', request);
}

model StopInstanceRequest {
  groupId: string(name='GroupId', position='Query'),
  instanceId: long(name='InstanceId', position='Query'),
  jobId: long(name='JobId', position='Query'),
  namespace: string(name='Namespace', position='Query'),
  namespaceSource?: string(name='NamespaceSource', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model StopInstanceResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StopInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StopInstanceResponseBody(name='body'),
}

async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopInstance', 'GET', '/', 'json', false, 'json', request);
}

model UpdateJobRequest {
  attemptInterval?: int32(name='AttemptInterval', position='Body'),
  calendar?: string(name='Calendar', position='Body'),
  className?: string(name='ClassName', position='Body'),
  consumerSize?: int32(name='ConsumerSize', position='Body'),
  contactInfo?: [ 
    {
      ding?: string(name='Ding'),
      userMail?: string(name='UserMail'),
      userName?: string(name='UserName'),
      userPhone?: string(name='UserPhone'),
    }
  ](name='ContactInfo', position='Body'),
  content?: string(name='Content', position='Body'),
  dataOffset?: int32(name='DataOffset', position='Body'),
  description?: string(name='Description', position='Body'),
  dispatcherSize?: int32(name='DispatcherSize', position='Body'),
  executeMode: string(name='ExecuteMode', position='Body'),
  failEnable?: boolean(name='FailEnable', position='Body'),
  groupId: string(name='GroupId', position='Body'),
  jarUrl?: string(name='JarUrl', position='Body'),
  jobId: long(name='JobId', position='Body'),
  maxAttempt?: int32(name='MaxAttempt', position='Body'),
  maxConcurrency?: int32(name='MaxConcurrency', minimum=1, maximum=200, position='Body'),
  missWorkerEnable?: boolean(name='MissWorkerEnable', position='Body'),
  name: string(name='Name', position='Body'),
  namespace: string(name='Namespace', position='Body'),
  namespaceSource?: string(name='NamespaceSource', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  parameters?: string(name='Parameters', position='Body'),
  queueSize?: int32(name='QueueSize', position='Body'),
  regionId?: string(name='RegionId', position='Query'),
  sendChannel?: string(name='SendChannel', position='Body'),
  taskAttemptInterval?: int32(name='TaskAttemptInterval', minimum=0, position='Body'),
  taskMaxAttempt?: int32(name='TaskMaxAttempt', minimum=0, maximum=10, position='Body'),
  timeExpression?: string(name='TimeExpression', position='Body'),
  timeType: int32(name='TimeType', position='Body'),
  timeout?: long(name='Timeout', position='Body'),
  timeoutEnable?: boolean(name='TimeoutEnable', position='Body'),
  timeoutKillEnable?: boolean(name='TimeoutKillEnable', position='Body'),
}

model UpdateJobResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateJobResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateJobResponseBody(name='body'),
}

async function updateJob(request: UpdateJobRequest): UpdateJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateJob', 'POST', '/', 'json', true, 'form', request);
}

