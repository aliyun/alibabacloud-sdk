/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('linkcard', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model GetCardDetailRequest {
  destroyCard?: boolean(name='DestroyCard'),
  iccid?: string(name='Iccid'),
  instanceId?: string(name='InstanceId'),
  showPsim?: boolean(name='ShowPsim'),
}

model GetCardDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    listPsimCards?: [ 
      {
        apnName?: string(name='ApnName'),
        certifyStatus?: string(name='CertifyStatus'),
        iccid?: string(name='Iccid'),
        imsi?: [ string ](name='Imsi'),
        msisdn?: [ string ](name='Msisdn'),
        osStatus?: string(name='OsStatus'),
        periodAddFlow?: string(name='PeriodAddFlow'),
        periodSmsUse?: string(name='PeriodSmsUse'),
        privateNetworkSegment?: string(name='PrivateNetworkSegment'),
        status?: string(name='Status'),
        vendor?: string(name='Vendor'),
      }
    ](name='ListPsimCards'),
    vsimCardInfo?: {
      activeTime?: string(name='ActiveTime'),
      activeType?: string(name='ActiveType'),
      aliFee?: string(name='AliFee'),
      aliyunOrderId?: string(name='AliyunOrderId'),
      apnName?: string(name='ApnName'),
      autoLimitResume?: boolean(name='AutoLimitResume'),
      autoRebindReuse?: boolean(name='AutoRebindReuse'),
      cardLimitSpeedThreshold?: int32(name='CardLimitSpeedThreshold'),
      cardLimitStopThreshold?: int32(name='CardLimitStopThreshold'),
      certifyStatus?: string(name='CertifyStatus'),
      certifyType?: string(name='CertifyType'),
      credentialInstanceId?: string(name='CredentialInstanceId'),
      credentialLimitSpeedThreshold?: int32(name='CredentialLimitSpeedThreshold'),
      credentialLimitStopThreshold?: int32(name='CredentialLimitStopThreshold'),
      credentialNo?: string(name='CredentialNo'),
      credentialType?: string(name='CredentialType'),
      dataLevel?: string(name='DataLevel'),
      dataType?: string(name='DataType'),
      deviceImei?: string(name='DeviceImei'),
      directionalGroupId?: string(name='DirectionalGroupId'),
      directionalGroupName?: string(name='DirectionalGroupName'),
      expireTime?: string(name='ExpireTime'),
      flowThresholdUnit?: string(name='FlowThresholdUnit'),
      iccid?: string(name='Iccid'),
      imsi?: [ string ](name='Imsi'),
      isAutoRecharge?: boolean(name='IsAutoRecharge'),
      msisdn?: [ string ](name='Msisdn'),
      notifyId?: string(name='NotifyId'),
      openAccountTime?: string(name='OpenAccountTime'),
      osStatus?: string(name='OsStatus'),
      period?: string(name='Period'),
      periodAddFlow?: string(name='PeriodAddFlow'),
      periodRestFlow?: string(name='PeriodRestFlow'),
      periodSmsUse?: string(name='PeriodSmsUse'),
      privateNetworkSegment?: string(name='PrivateNetworkSegment'),
      simType?: string(name='SimType'),
      status?: string(name='Status'),
      tagList?: [ 
        {
          id?: long(name='Id'),
          tagName?: string(name='TagName'),
        }
      ](name='TagList'),
      vendor?: string(name='Vendor'),
      vsimInstanceId?: int32(name='VsimInstanceId'),
    }(name='VsimCardInfo'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetCardDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetCardDetailResponseBody(name='body'),
}

async function getCardDetailWithOptions(request: GetCardDetailRequest, runtime: Util.RuntimeOptions): GetCardDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destroyCard)) {
    query['DestroyCard'] = request.destroyCard;
  }
  if (!Util.isUnset(request.iccid)) {
    query['Iccid'] = request.iccid;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.showPsim)) {
    query['ShowPsim'] = request.showPsim;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCardDetail',
    version = '2021-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCardDetail(request: GetCardDetailRequest): GetCardDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCardDetailWithOptions(request, runtime);
}

model GetCardFlowInfoRequest {
  dateList?: [ string ](name='DateList'),
  iccid?: string(name='Iccid'),
}

model GetCardFlowInfoResponseBody = {
  code?: string(name='Code'),
  data?: {
    listCardMonthFlow?: [ 
      {
        flowCount?: string(name='FlowCount'),
        listDayFlow?: [ 
          {
            day?: string(name='Day'),
            flow?: string(name='Flow'),
          }
        ](name='ListDayFlow'),
        month?: string(name='Month'),
      }
    ](name='ListCardMonthFlow'),
    listPackageDTO?: [ 
      {
        effectiveTime?: string(name='EffectiveTime'),
        expireTime?: string(name='ExpireTime'),
        packageName?: string(name='PackageName'),
        remark?: string(name='Remark'),
      }
    ](name='ListPackageDTO'),
    listVendorDetail?: [ 
      {
        netWorkDelay?: string(name='NetWorkDelay'),
        signalStrength?: string(name='SignalStrength'),
        vendor?: string(name='Vendor'),
      }
    ](name='ListVendorDetail'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetCardFlowInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetCardFlowInfoResponseBody(name='body'),
}

async function getCardFlowInfoWithOptions(request: GetCardFlowInfoRequest, runtime: Util.RuntimeOptions): GetCardFlowInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dateList)) {
    query['DateList'] = request.dateList;
  }
  if (!Util.isUnset(request.iccid)) {
    query['Iccid'] = request.iccid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCardFlowInfo',
    version = '2021-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCardFlowInfo(request: GetCardFlowInfoRequest): GetCardFlowInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCardFlowInfoWithOptions(request, runtime);
}

model GetCredentialPoolStatisticsRequest {
  credentialNO?: string(name='CredentialNO'),
  date?: string(name='Date'),
}

model GetCredentialPoolStatisticsResponseBody = {
  code?: string(name='Code'),
  data?: {
    cardActiveNum?: long(name='CardActiveNum'),
    cardTotalNum?: long(name='CardTotalNum'),
    credentialInstanceId?: string(name='CredentialInstanceId'),
    credentialNO?: string(name='CredentialNO'),
    credentialType?: string(name='CredentialType'),
    effectiveAvailableFlow?: string(name='EffectiveAvailableFlow'),
    effectiveTotalFlow?: string(name='EffectiveTotalFlow'),
    monthFeatureFee?: long(name='MonthFeatureFee'),
    poolAvaiable?: string(name='PoolAvaiable'),
    poolGrandTotal?: string(name='PoolGrandTotal'),
    poolGrandTotalUsed?: string(name='PoolGrandTotalUsed'),
    poolOutUsed?: string(name='PoolOutUsed'),
    poolUsed?: string(name='PoolUsed'),
    smsUsed?: long(name='SmsUsed'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetCredentialPoolStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetCredentialPoolStatisticsResponseBody(name='body'),
}

async function getCredentialPoolStatisticsWithOptions(request: GetCredentialPoolStatisticsRequest, runtime: Util.RuntimeOptions): GetCredentialPoolStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.credentialNO)) {
    query['CredentialNO'] = request.credentialNO;
  }
  if (!Util.isUnset(request.date)) {
    query['Date'] = request.date;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCredentialPoolStatistics',
    version = '2021-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCredentialPoolStatistics(request: GetCredentialPoolStatisticsRequest): GetCredentialPoolStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCredentialPoolStatisticsWithOptions(request, runtime);
}

model RebindResumeSingleCardRequest {
  iccid?: string(name='Iccid'),
  optMsisdns?: map[string]any(name='OptMsisdns'),
}

model RebindResumeSingleCardShrinkRequest {
  iccid?: string(name='Iccid'),
  optMsisdnsShrink?: string(name='OptMsisdns'),
}

model RebindResumeSingleCardResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RebindResumeSingleCardResponse = {
  headers: map[string]string(name='headers'),
  body: RebindResumeSingleCardResponseBody(name='body'),
}

async function rebindResumeSingleCardWithOptions(tmpReq: RebindResumeSingleCardRequest, runtime: Util.RuntimeOptions): RebindResumeSingleCardResponse {
  Util.validateModel(tmpReq);
  var request = new RebindResumeSingleCardShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.optMsisdns)) {
    request.optMsisdnsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.optMsisdns, 'OptMsisdns', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.iccid)) {
    query['Iccid'] = request.iccid;
  }
  if (!Util.isUnset(request.optMsisdnsShrink)) {
    query['OptMsisdns'] = request.optMsisdnsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RebindResumeSingleCard',
    version = '2021-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function rebindResumeSingleCard(request: RebindResumeSingleCardRequest): RebindResumeSingleCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebindResumeSingleCardWithOptions(request, runtime);
}

model ResumeSingleCardRequest {
  iccid?: string(name='Iccid'),
  optMsisdns?: map[string]any(name='OptMsisdns'),
}

model ResumeSingleCardShrinkRequest {
  iccid?: string(name='Iccid'),
  optMsisdnsShrink?: string(name='OptMsisdns'),
}

model ResumeSingleCardResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ResumeSingleCardResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeSingleCardResponseBody(name='body'),
}

async function resumeSingleCardWithOptions(tmpReq: ResumeSingleCardRequest, runtime: Util.RuntimeOptions): ResumeSingleCardResponse {
  Util.validateModel(tmpReq);
  var request = new ResumeSingleCardShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.optMsisdns)) {
    request.optMsisdnsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.optMsisdns, 'OptMsisdns', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.iccid)) {
    query['Iccid'] = request.iccid;
  }
  if (!Util.isUnset(request.optMsisdnsShrink)) {
    query['OptMsisdns'] = request.optMsisdnsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResumeSingleCard',
    version = '2021-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resumeSingleCard(request: ResumeSingleCardRequest): ResumeSingleCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeSingleCardWithOptions(request, runtime);
}

model StopSingleCardRequest {
  iccid?: string(name='Iccid'),
  optMsisdns?: map[string]any(name='OptMsisdns'),
}

model StopSingleCardShrinkRequest {
  iccid?: string(name='Iccid'),
  optMsisdnsShrink?: string(name='OptMsisdns'),
}

model StopSingleCardResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StopSingleCardResponse = {
  headers: map[string]string(name='headers'),
  body: StopSingleCardResponseBody(name='body'),
}

async function stopSingleCardWithOptions(tmpReq: StopSingleCardRequest, runtime: Util.RuntimeOptions): StopSingleCardResponse {
  Util.validateModel(tmpReq);
  var request = new StopSingleCardShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.optMsisdns)) {
    request.optMsisdnsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.optMsisdns, 'OptMsisdns', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.iccid)) {
    query['Iccid'] = request.iccid;
  }
  if (!Util.isUnset(request.optMsisdnsShrink)) {
    query['OptMsisdns'] = request.optMsisdnsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopSingleCard',
    version = '2021-05-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopSingleCard(request: StopSingleCardRequest): StopSingleCardResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopSingleCardWithOptions(request, runtime);
}

