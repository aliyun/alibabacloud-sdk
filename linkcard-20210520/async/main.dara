/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Linkcard';
  @version = '2021-05-20';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddDirectionalCardRequest {
  fileUri?: string(name='FileUri', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
  orderList?: [ string ](name='OrderList', shrink='json', position='Query'),
  tagList?: [ string ](name='TagList', shrink='json', position='Query'),
  uploadMethod: string(name='UploadMethod', position='Query'),
  uploadType: string(name='UploadType', position='Query'),
}

model AddDirectionalCardResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddDirectionalCardResponse = {
  headers: map[string]string(name='headers'),
  body: AddDirectionalCardResponseBody(name='body'),
}

async function addDirectionalCard(request: AddDirectionalCardRequest): AddDirectionalCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDirectionalCard', 'POST', '/', 'json', false, 'json', request);
}

model AddDirectionalGroupRequest {
  groupName: string(name='GroupName', position='Query'),
}

model AddDirectionalGroupResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddDirectionalGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddDirectionalGroupResponseBody(name='body'),
}

async function addDirectionalGroup(request: AddDirectionalGroupRequest): AddDirectionalGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDirectionalGroup', 'POST', '/', 'json', false, 'json', request);
}

model BatchAddDirectionalAddressRequest {
  addressType: string(name='AddressType', position='Query'),
  groupId: long(name='GroupId', position='Query'),
  listAddress: [ string ](name='ListAddress', position='Query'),
  source: string(name='Source', position='Query'),
}

model BatchAddDirectionalAddressResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', description='必填'),
}

model BatchAddDirectionalAddressResponse = {
  headers: map[string]string(name='headers'),
  body: BatchAddDirectionalAddressResponseBody(name='body'),
}

async function batchAddDirectionalAddress(request: BatchAddDirectionalAddressRequest): BatchAddDirectionalAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchAddDirectionalAddress', 'POST', '/', 'json', false, 'json', request);
}

model ForceActivationRequest {
  dateType?: string(name='DateType', position='Query'),
  iccid: string(name='Iccid', position='Query'),
}

model ForceActivationResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ForceActivationResponse = {
  headers: map[string]string(name='headers'),
  body: ForceActivationResponseBody(name='body'),
}

async function forceActivation(request: ForceActivationRequest): ForceActivationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ForceActivation', 'POST', '/', 'json', false, 'json', request);
}

model GetCardDetailRequest {
  destroyCard?: boolean(name='DestroyCard', position='Query'),
  iccid: string(name='Iccid', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  showPsim?: boolean(name='ShowPsim', position='Query'),
}

model GetCardDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    listPsimCards?: [ 
      {
        apnName?: string(name='ApnName'),
        certifyStatus?: string(name='CertifyStatus'),
        iccid?: string(name='Iccid'),
        imsi?: [ string ](name='Imsi'),
        ip?: [ string ](name='Ip'),
        msisdn?: [ string ](name='Msisdn'),
        openSms?: boolean(name='OpenSms'),
        osStatus?: string(name='OsStatus'),
        periodAddFlow?: string(name='PeriodAddFlow'),
        periodSmsUse?: string(name='PeriodSmsUse'),
        privateNetworkSegment?: string(name='PrivateNetworkSegment'),
        status?: string(name='Status'),
        vendor?: string(name='Vendor'),
      }
    ](name='ListPsimCards'),
    vsimCardInfo?: {
      activeTime?: string(name='ActiveTime'),
      activeType?: string(name='ActiveType'),
      aliFee?: string(name='AliFee'),
      aliyunOrderId?: string(name='AliyunOrderId'),
      apnName?: string(name='ApnName'),
      autoLimitResume?: boolean(name='AutoLimitResume'),
      autoRebindReuse?: boolean(name='AutoRebindReuse'),
      cardLimitSpeedThreshold?: int32(name='CardLimitSpeedThreshold'),
      cardLimitStopThreshold?: int32(name='CardLimitStopThreshold'),
      certifyStatus?: string(name='CertifyStatus'),
      certifyType?: string(name='CertifyType'),
      credentialInstanceId?: string(name='CredentialInstanceId'),
      credentialLimitSpeedThreshold?: int32(name='CredentialLimitSpeedThreshold'),
      credentialLimitStopThreshold?: int32(name='CredentialLimitStopThreshold'),
      credentialNo?: string(name='CredentialNo'),
      credentialType?: string(name='CredentialType'),
      dataLevel?: string(name='DataLevel'),
      dataType?: string(name='DataType'),
      deviceImei?: string(name='DeviceImei'),
      directionalGroupId?: string(name='DirectionalGroupId'),
      directionalGroupName?: string(name='DirectionalGroupName'),
      expireTime?: string(name='ExpireTime'),
      flowThresholdUnit?: string(name='FlowThresholdUnit'),
      iccid?: string(name='Iccid'),
      imsi?: [ string ](name='Imsi'),
      ip?: [ string ](name='Ip'),
      isAutoRecharge?: boolean(name='IsAutoRecharge'),
      msisdn?: [ string ](name='Msisdn'),
      notifyId?: string(name='NotifyId'),
      openAccountTime?: string(name='OpenAccountTime'),
      openSms?: boolean(name='OpenSms'),
      osStatus?: string(name='OsStatus'),
      period?: string(name='Period'),
      periodAddFlow?: string(name='PeriodAddFlow'),
      periodRestFlow?: string(name='PeriodRestFlow'),
      periodSmsUse?: string(name='PeriodSmsUse'),
      privateNetworkSegment?: string(name='PrivateNetworkSegment'),
      simType?: string(name='SimType'),
      status?: string(name='Status'),
      tagList?: [ 
        {
          id?: long(name='Id'),
          tagName?: string(name='TagName'),
        }
      ](name='TagList'),
      vendor?: string(name='Vendor'),
      vsimInstanceId?: int32(name='VsimInstanceId'),
    }(name='VsimCardInfo'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetCardDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetCardDetailResponseBody(name='body'),
}

async function getCardDetail(request: GetCardDetailRequest): GetCardDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCardDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetCardFlowInfoRequest {
  dateList?: [ string ](name='DateList', position='Query'),
  iccid: string(name='Iccid', position='Query'),
}

model GetCardFlowInfoResponseBody = {
  code?: string(name='Code'),
  data?: {
    listCardMonthFlow?: [ 
      {
        flowCount?: string(name='FlowCount'),
        listDayFlow?: [ 
          {
            day?: string(name='Day'),
            flow?: string(name='Flow'),
          }
        ](name='ListDayFlow'),
        month?: string(name='Month'),
      }
    ](name='ListCardMonthFlow'),
    listPackageDTO?: [ 
      {
        effectiveTime?: string(name='EffectiveTime'),
        expireTime?: string(name='ExpireTime'),
        packageName?: string(name='PackageName'),
        remark?: string(name='Remark'),
      }
    ](name='ListPackageDTO'),
    listVendorDetail?: [ 
      {
        netWorkDelay?: string(name='NetWorkDelay'),
        ratio?: string(name='Ratio'),
        signalStrength?: string(name='SignalStrength'),
        usedFlow?: string(name='UsedFlow'),
        vendor?: string(name='Vendor'),
      }
    ](name='ListVendorDetail'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetCardFlowInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetCardFlowInfoResponseBody(name='body'),
}

async function getCardFlowInfo(request: GetCardFlowInfoRequest): GetCardFlowInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCardFlowInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetCredentialPoolStatisticsRequest {
  credentialNO: string(name='CredentialNO', position='Query'),
  date: string(name='Date', position='Query'),
}

model GetCredentialPoolStatisticsResponseBody = {
  code?: string(name='Code'),
  data?: {
    cardActiveNum?: long(name='CardActiveNum'),
    cardTotalNum?: long(name='CardTotalNum'),
    credentialInstanceId?: string(name='CredentialInstanceId'),
    credentialNO?: string(name='CredentialNO'),
    credentialType?: string(name='CredentialType'),
    effectiveAvailableFlow?: string(name='EffectiveAvailableFlow'),
    effectiveTotalFlow?: string(name='EffectiveTotalFlow'),
    monthFeatureFee?: long(name='MonthFeatureFee'),
    monthUsedAmount?: long(name='MonthUsedAmount'),
    poolAvaiable?: string(name='PoolAvaiable'),
    poolGrandTotal?: string(name='PoolGrandTotal'),
    poolGrandTotalUsed?: string(name='PoolGrandTotalUsed'),
    poolOutUsed?: string(name='PoolOutUsed'),
    poolUsed?: string(name='PoolUsed'),
    smsUsed?: long(name='SmsUsed'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetCredentialPoolStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetCredentialPoolStatisticsResponseBody(name='body'),
}

async function getCredentialPoolStatistics(request: GetCredentialPoolStatisticsRequest): GetCredentialPoolStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCredentialPoolStatistics', 'POST', '/', 'json', false, 'json', request);
}

model ListCardInfoRequest {
  activeTimeEnd?: string(name='ActiveTimeEnd', position='Query'),
  activeTimeStart?: string(name='ActiveTimeStart', position='Query'),
  aliFee?: string(name='AliFee', position='Query'),
  aliyunOrderId?: string(name='AliyunOrderId', position='Query'),
  apnName?: string(name='ApnName', position='Query'),
  certifyType?: string(name='CertifyType', position='Query'),
  credentialNo?: string(name='CredentialNo', position='Query'),
  dataLevel?: string(name='DataLevel', position='Query'),
  dataType?: string(name='DataType', position='Query'),
  directionalGroupId?: string(name='DirectionalGroupId', position='Query'),
  expireTimeEnd?: string(name='ExpireTimeEnd', position='Query'),
  expireTimeStart?: string(name='ExpireTimeStart', position='Query'),
  iccid?: string(name='Iccid', position='Query'),
  imsi?: string(name='Imsi', position='Query'),
  isAutoRecharge?: boolean(name='IsAutoRecharge', position='Query'),
  maxFlow?: string(name='MaxFlow', position='Query'),
  maxRestFlowPercentage?: double(name='MaxRestFlowPercentage', position='Query'),
  minFlow?: string(name='MinFlow', position='Query'),
  msisdn?: string(name='Msisdn', position='Query'),
  notifyId?: string(name='NotifyId', position='Query'),
  osStatus?: string(name='OsStatus', position='Query'),
  pageNo: int32(name='PageNo', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  period?: string(name='Period', position='Query'),
  poolId?: string(name='PoolId', position='Query'),
  simType?: string(name='SimType', position='Query'),
  status?: string(name='Status', position='Query'),
  tagName?: string(name='TagName', position='Query'),
  vendor?: string(name='Vendor', position='Query'),
}

model ListCardInfoResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        activeTime?: string(name='ActiveTime'),
        activeType?: string(name='ActiveType'),
        aliFee?: string(name='AliFee'),
        aliyunOrderId?: string(name='AliyunOrderId'),
        apnName?: string(name='ApnName'),
        certifyType?: string(name='CertifyType'),
        credentialInstanceId?: string(name='CredentialInstanceId'),
        credentialNo?: string(name='CredentialNo'),
        credentialType?: string(name='CredentialType'),
        dataLevel?: string(name='DataLevel'),
        dataType?: string(name='DataType'),
        directionalGroupId?: long(name='DirectionalGroupId'),
        directionalGroupName?: string(name='DirectionalGroupName'),
        expireTime?: string(name='ExpireTime'),
        iccid?: string(name='Iccid'),
        imsi?: [ string ](name='Imsi'),
        isAutoRecharge?: boolean(name='IsAutoRecharge'),
        msisdn?: [ string ](name='Msisdn'),
        notifyId?: string(name='NotifyId'),
        openAccountTime?: string(name='OpenAccountTime'),
        osStatus?: string(name='OsStatus'),
        period?: string(name='Period'),
        periodAddFlow?: string(name='PeriodAddFlow'),
        periodRestFlow?: string(name='PeriodRestFlow'),
        periodSmsUse?: string(name='PeriodSmsUse'),
        privateNetworkSegment?: string(name='PrivateNetworkSegment'),
        remark?: string(name='Remark'),
        simType?: string(name='SimType'),
        status?: string(name='Status'),
        tagList?: [ 
          {
            id?: long(name='Id'),
            tagName?: string(name='TagName'),
          }
        ](name='TagList'),
        vendor?: string(name='Vendor'),
        vsimInstanceId?: long(name='VsimInstanceId'),
      }
    ](name='List'),
    pageCount?: int32(name='PageCount'),
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListCardInfoResponse = {
  headers: map[string]string(name='headers'),
  body: ListCardInfoResponseBody(name='body'),
}

async function listCardInfo(request: ListCardInfoRequest): ListCardInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCardInfo', 'POST', '/', 'json', false, 'json', request);
}

model ListDirectionalAddressRequest {
  groupId: string(name='GroupId', position='Query'),
  pageNo: int32(name='PageNo', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model ListDirectionalAddressResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        address?: string(name='Address'),
        addressType?: string(name='AddressType'),
        groupId?: string(name='GroupId'),
        source?: string(name='Source'),
        state?: int32(name='State'),
      }
    ](name='List'),
    pageCount?: int32(name='PageCount'),
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListDirectionalAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ListDirectionalAddressResponseBody(name='body'),
}

async function listDirectionalAddress(request: ListDirectionalAddressRequest): ListDirectionalAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDirectionalAddress', 'POST', '/', 'json', false, 'json', request);
}

model ListDirectionalDetailRequest {
  iccid: string(name='Iccid', position='Query'),
  pageNo: int32(name='PageNo', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model ListDirectionalDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    directionalGroupId?: long(name='DirectionalGroupId'),
    directionalName?: string(name='DirectionalName'),
    paginationResult?: {
      list?: [ 
        {
          address?: string(name='Address'),
          addressType?: string(name='AddressType'),
          groupId?: string(name='GroupId'),
          source?: string(name='Source'),
          state?: string(name='State'),
        }
      ](name='List'),
      pageCount?: int32(name='PageCount'),
      pageNo?: int32(name='PageNo'),
      pageSize?: int32(name='PageSize'),
      total?: int32(name='Total'),
    }(name='PaginationResult'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', description='必填'),
}

model ListDirectionalDetailResponse = {
  headers: map[string]string(name='headers'),
  body: ListDirectionalDetailResponseBody(name='body'),
}

async function listDirectionalDetail(request: ListDirectionalDetailRequest): ListDirectionalDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDirectionalDetail', 'POST', '/', 'json', false, 'json', request);
}

model ListOrderRequest {
  endDate?: string(name='EndDate', position='Query'),
  orderId?: string(name='OrderId', position='Query'),
  orderStatus?: string(name='OrderStatus', position='Query'),
  orderType?: string(name='OrderType', position='Query'),
  pageNo: int32(name='PageNo', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  startDate?: string(name='StartDate', position='Query'),
}

model ListOrderResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        aliFee?: string(name='AliFee'),
        apnName?: string(name='ApnName'),
        apnRegion?: string(name='ApnRegion'),
        billingCycle?: string(name='BillingCycle'),
        buyNum?: int32(name='BuyNum'),
        cardPayCount?: int32(name='CardPayCount'),
        credentialNo?: string(name='CredentialNo'),
        credentialPackage?: string(name='CredentialPackage'),
        dataLevel?: string(name='DataLevel'),
        deliveryInfo?: {
          address?: string(name='Address'),
          buyerMessage?: string(name='BuyerMessage'),
          mail?: string(name='Mail'),
          receiver?: string(name='Receiver'),
          zipCode?: string(name='ZipCode'),
        }(name='DeliveryInfo'),
        expressNoList?: [ string ](name='ExpressNoList'),
        flowType?: string(name='FlowType'),
        functionFee?: int32(name='FunctionFee'),
        orderDetailUrl?: string(name='OrderDetailUrl'),
        orderId?: string(name='OrderId'),
        orderInfo?: string(name='OrderInfo'),
        orderStatus?: string(name='OrderStatus'),
        orderType?: string(name='OrderType'),
        payDuration?: string(name='PayDuration'),
        payTime?: string(name='PayTime'),
        poolCapacity?: string(name='PoolCapacity'),
        poolCapacityUnit?: string(name='PoolCapacityUnit'),
        poolNo?: string(name='PoolNo'),
        resourceQuantity?: long(name='ResourceQuantity'),
        vendor?: string(name='Vendor'),
      }
    ](name='List'),
    pageCount?: int32(name='PageCount'),
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListOrderResponse = {
  headers: map[string]string(name='headers'),
  body: ListOrderResponseBody(name='body'),
}

async function listOrder(request: ListOrderRequest): ListOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOrder', 'POST', '/', 'json', false, 'json', request);
}

model RebindResumeSingleCardRequest {
  iccid: string(name='Iccid', position='Query'),
  optMsisdns?: [ string ](name='OptMsisdns', shrink='json', position='Query'),
}

model RebindResumeSingleCardResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RebindResumeSingleCardResponse = {
  headers: map[string]string(name='headers'),
  body: RebindResumeSingleCardResponseBody(name='body'),
}

async function rebindResumeSingleCard(request: RebindResumeSingleCardRequest): RebindResumeSingleCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebindResumeSingleCard', 'POST', '/', 'json', false, 'json', request);
}

model RenewRequest {
  apiProduct?: string(name='ApiProduct', position='Body'),
  apiRevision?: string(name='ApiRevision', position='Body'),
  buyNum?: int32(name='BuyNum', position='Query'),
  iccid?: string(name='Iccid', position='Query'),
  offerCode?: string(name='OfferCode', position='Query'),
  rechargeType?: string(name='RechargeType', position='Query'),
  serialNo?: string(name='SerialNo', position='Query'),
}

model RenewResponseBody = {
  code?: string(name='Code'),
  data?: {
    orderNo?: string(name='OrderNo'),
    serialNo?: string(name='SerialNo'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model RenewResponse = {
  headers: map[string]string(name='headers'),
  body: RenewResponseBody(name='body'),
}

async function renew(request: RenewRequest): RenewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Renew', 'POST', '/', 'json', true, 'form', request);
}

model ResumeSingleCardRequest {
  iccid: string(name='Iccid', position='Query'),
  optMsisdns?: [ string ](name='OptMsisdns', shrink='json', position='Query'),
}

model ResumeSingleCardResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ResumeSingleCardResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeSingleCardResponseBody(name='body'),
}

async function resumeSingleCard(request: ResumeSingleCardRequest): ResumeSingleCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumeSingleCard', 'POST', '/', 'json', false, 'json', request);
}

model SetCardStopRuleRequest {
  autoRestore: boolean(name='AutoRestore', position='Query'),
  flowLimit: long(name='FlowLimit', position='Query'),
  iccid: string(name='Iccid', position='Query'),
}

model SetCardStopRuleResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetCardStopRuleResponse = {
  headers: map[string]string(name='headers'),
  body: SetCardStopRuleResponseBody(name='body'),
}

async function setCardStopRule(request: SetCardStopRuleRequest): SetCardStopRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetCardStopRule', 'POST', '/', 'json', false, 'json', request);
}

model StopSingleCardRequest {
  iccid: string(name='Iccid', position='Query'),
  optMsisdns?: [ string ](name='OptMsisdns', shrink='json', position='Query'),
}

model StopSingleCardResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StopSingleCardResponse = {
  headers: map[string]string(name='headers'),
  body: StopSingleCardResponseBody(name='body'),
}

async function stopSingleCard(request: StopSingleCardRequest): StopSingleCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopSingleCard', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAutoRechargeSwitchRequest {
  iccid: string(name='Iccid', position='Query'),
  open: boolean(name='Open', position='Query'),
}

model UpdateAutoRechargeSwitchResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateAutoRechargeSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAutoRechargeSwitchResponseBody(name='body'),
}

async function updateAutoRechargeSwitch(request: UpdateAutoRechargeSwitchRequest): UpdateAutoRechargeSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAutoRechargeSwitch', 'POST', '/', 'json', false, 'json', request);
}

model VerifyIotCardRequest {
  iccid: string(name='Iccid', position='Query'),
}

model VerifyIotCardResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', description='必填'),
}

model VerifyIotCardResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyIotCardResponseBody(name='body'),
}

async function verifyIotCard(request: VerifyIotCardRequest): VerifyIotCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyIotCard', 'POST', '/', 'json', false, 'json', request);
}

