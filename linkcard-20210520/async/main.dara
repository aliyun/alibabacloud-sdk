/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Linkcard';
  @version = '2021-05-20';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddCardToDirectionalGroupRequest {
  addType: string(name='AddType', example='NEW', position='Query'),
  apiProduct?: string(name='ApiProduct', description='Linkcard', example='Linkcard', position='Body'),
  groupId: string(name='GroupId', example='10000002595', position='Query'),
  iccidList: [ string ](name='IccidList', shrink='json', position='Query'),
  msgNotify?: boolean(name='MsgNotify', example='false', position='Query'),
  serialNo: string(name='SerialNo', example='123123', position='Query'),
}

model AddCardToDirectionalGroupResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    result?: boolean(name='Result', example='true'),
    serialNo?: string(name='SerialNo', example='123213'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='InstanceId cannot be empty.'),
  localizedMessage?: string(name='LocalizedMessage', example='InstanceId cannot be empty.'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', description='必填', example='true'),
}

model AddCardToDirectionalGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddCardToDirectionalGroupResponseBody(name='body'),
}

async function addCardToDirectionalGroup(request: AddCardToDirectionalGroupRequest): AddCardToDirectionalGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCardToDirectionalGroup', 'POST', '/', 'json', true, 'form', request);
}

model AddDirectionalAddressRequest {
  address: string(name='Address', example='*.aliyun.com', position='Query'),
  addressType: string(name='AddressType', example='Domain', position='Query'),
  groupId: string(name='GroupId', example='10000002595', position='Query'),
  msgNotify?: boolean(name='MsgNotify', example='false', position='Query'),
  serialNo?: string(name='SerialNo', example='123123', position='Query'),
  source: string(name='Source', example='user_defined', position='Query'),
}

model AddDirectionalAddressResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage', example='InstanceId cannot be empty.'),
  localizedMessage?: string(name='LocalizedMessage', example='InstanceId cannot be empty.'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model AddDirectionalAddressResponse = {
  headers: map[string]string(name='headers'),
  body: AddDirectionalAddressResponseBody(name='body'),
}

async function addDirectionalAddress(request: AddDirectionalAddressRequest): AddDirectionalAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDirectionalAddress', 'POST', '/', 'json', false, 'json', request);
}

model AddDirectionalCardRequest {
  fileUri?: string(name='FileUri', example='https://linkcard-user-online.oss-cn-zhangjiakou.aliyuncs.com/DIRECTIONAL_GROUP/20220811/xxxx.csv', position='Query'),
  groupId: string(name='GroupId', example='5', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
  orderList?: [ string ](name='OrderList', shrink='json', position='Query'),
  tagList?: [ string ](name='TagList', shrink='json', position='Query'),
  uploadMethod: string(name='UploadMethod', example='TAG', position='Query'),
  uploadType: string(name='UploadType', example='ALL', position='Query'),
}

model AddDirectionalCardResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage', example='InstanceId cannot be empty.'),
  localizedMessage?: string(name='LocalizedMessage', example='InstanceId cannot be empty.'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model AddDirectionalCardResponse = {
  headers: map[string]string(name='headers'),
  body: AddDirectionalCardResponseBody(name='body'),
}

async function addDirectionalCard(request: AddDirectionalCardRequest): AddDirectionalCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDirectionalCard', 'POST', '/', 'json', false, 'json', request);
}

model AddDirectionalGroupRequest {
  groupName: string(name='GroupName', position='Query'),
}

model AddDirectionalGroupResponseBody = {
  code?: string(name='Code', example='200'),
  data?: long(name='Data', example='6'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage', example='InstanceId cannot be empty.'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model AddDirectionalGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddDirectionalGroupResponseBody(name='body'),
}

async function addDirectionalGroup(request: AddDirectionalGroupRequest): AddDirectionalGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDirectionalGroup', 'POST', '/', 'json', false, 'json', request);
}

model BatchAddDirectionalAddressRequest {
  addressType: string(name='AddressType', example='Domain', position='Query'),
  groupId: long(name='GroupId', example='5', position='Query'),
  listAddress: [ string ](name='ListAddress', position='Query'),
  source: string(name='Source', example='user_defined', position='Query'),
}

model BatchAddDirectionalAddressResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage', example='InstanceId cannot be empty.'),
  localizedMessage?: string(name='LocalizedMessage', example='InstanceId cannot be empty.'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', description='必填', example='true'),
}

model BatchAddDirectionalAddressResponse = {
  headers: map[string]string(name='headers'),
  body: BatchAddDirectionalAddressResponseBody(name='body'),
}

async function batchAddDirectionalAddress(request: BatchAddDirectionalAddressRequest): BatchAddDirectionalAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchAddDirectionalAddress', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDirectionalAddressRequest {
  address: string(name='Address', example='*.aliyun.com', position='Query'),
  groupId: string(name='GroupId', example='10000002595', position='Query'),
  msgNotify?: boolean(name='MsgNotify', example='false', position='Query'),
  serialNo?: string(name='SerialNo', example='123123', position='Query'),
}

model DeleteDirectionalAddressResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage', example='InstanceId cannot be empty.'),
  localizedMessage?: string(name='LocalizedMessage', example='InstanceId cannot be empty.'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDirectionalAddressResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDirectionalAddressResponseBody(name='body'),
}

async function deleteDirectionalAddress(request: DeleteDirectionalAddressRequest): DeleteDirectionalAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDirectionalAddress', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDirectionalGroupRequest {
  groupId: string(name='GroupId', example='10000002595', position='Query'),
}

model DeleteDirectionalGroupResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage', example='InstanceId cannot be empty.'),
  localizedMessage?: string(name='LocalizedMessage', example='InstanceId cannot be empty.'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDirectionalGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDirectionalGroupResponseBody(name='body'),
}

async function deleteDirectionalGroup(request: DeleteDirectionalGroupRequest): DeleteDirectionalGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDirectionalGroup', 'POST', '/', 'json', false, 'json', request);
}

model ForceActivationRequest {
  dateType?: string(name='DateType', example='sameflowcard', position='Query'),
  iccid: string(name='Iccid', example='89860321******15668', position='Query'),
}

model ForceActivationResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage', example='InstanceId cannot be empty.'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model ForceActivationResponse = {
  headers: map[string]string(name='headers'),
  body: ForceActivationResponseBody(name='body'),
}

async function forceActivation(request: ForceActivationRequest): ForceActivationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ForceActivation', 'POST', '/', 'json', false, 'json', request);
}

model GetCardDetailRequest {
  destroyCard?: boolean(name='DestroyCard', example='false', position='Query'),
  iccid: string(name='Iccid', example='89860321******15668', position='Query'),
  instanceId?: string(name='InstanceId', example='411****', position='Query'),
  showPsim?: boolean(name='ShowPsim', example='false', position='Query'),
}

model GetCardDetailResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    listPsimCards?: [ 
      {
        apnName?: string(name='ApnName', example='cmiot'),
        certifyStatus?: string(name='CertifyStatus', example='2'),
        iccid?: string(name='Iccid', example='89860321******15668'),
        imsi?: [ string ](name='Imsi'),
        ip?: [ string ](name='Ip'),
        msisdn?: [ string ](name='Msisdn'),
        openSms?: boolean(name='OpenSms', example='true'),
        osStatus?: string(name='OsStatus', example='300'),
        periodAddFlow?: string(name='PeriodAddFlow', example='130.00MB'),
        periodSmsUse?: string(name='PeriodSmsUse', example='0'),
        privateNetworkSegment?: string(name='PrivateNetworkSegment', example='*.2.*.4'),
        status?: string(name='Status', example='35'),
        vendor?: string(name='Vendor', example='CMCC'),
      }
    ](name='ListPsimCards'),
    vsimCardInfo?: {
      activeTime?: string(name='ActiveTime', example='2021-11-16 16:35:50'),
      activeType?: string(name='ActiveType', example='first_data_record'),
      aliFee?: string(name='AliFee', example='ali_2'),
      aliyunOrderId?: string(name='AliyunOrderId', example='211519634******'),
      apnName?: string(name='ApnName', example='cmiot'),
      autoLimitResume?: boolean(name='AutoLimitResume', example='true'),
      autoRebindReuse?: boolean(name='AutoRebindReuse', example='false'),
      cardLimitSpeedThreshold?: int32(name='CardLimitSpeedThreshold', example='1024'),
      cardLimitStopThreshold?: int32(name='CardLimitStopThreshold', example='20480'),
      certifyStatus?: string(name='CertifyStatus', example='2'),
      certifyType?: string(name='CertifyType', example='enterprise'),
      credentialInstanceId?: string(name='CredentialInstanceId', example='2622***'),
      credentialLimitSpeedThreshold?: int32(name='CredentialLimitSpeedThreshold', example='1024'),
      credentialLimitStopThreshold?: int32(name='CredentialLimitStopThreshold', example='20480'),
      credentialNo?: string(name='CredentialNo', example='CM-***-*-2-**M'),
      credentialType?: string(name='CredentialType', example='CT-SC-M-1-30M'),
      dataLevel?: string(name='DataLevel', example='30MB'),
      dataType?: string(name='DataType', example='sameflowcard'),
      deviceImei?: string(name='DeviceImei', example='11111111******'),
      directionalGroupId?: string(name='DirectionalGroupId', example='22'),
      directionalGroupName?: string(name='DirectionalGroupName'),
      expireTime?: string(name='ExpireTime', example='2022-04-30 23:59:59'),
      flowThresholdUnit?: string(name='FlowThresholdUnit', example='KB'),
      iccid?: string(name='Iccid', example='89860321******15668'),
      imsi?: [ string ](name='Imsi'),
      ip?: [ string ](name='Ip'),
      isAutoRecharge?: boolean(name='IsAutoRecharge', example='true'),
      msisdn?: [ string ](name='Msisdn'),
      notifyId?: string(name='NotifyId', example='11111'),
      openAccountTime?: string(name='OpenAccountTime', example='2021-11-29 16:12:14'),
      openSms?: boolean(name='OpenSms', example='true'),
      osStatus?: string(name='OsStatus', example='200'),
      period?: string(name='Period', example='1101'),
      periodAddFlow?: string(name='PeriodAddFlow', example='0KB'),
      periodRestFlow?: string(name='PeriodRestFlow', example='130.00MB'),
      periodSmsUse?: string(name='PeriodSmsUse', example='0'),
      privateNetworkSegment?: string(name='PrivateNetworkSegment', example='1.*.3.*'),
      simType?: string(name='SimType', example='nano'),
      status?: string(name='Status', example='35'),
      tagList?: [ 
        {
          id?: long(name='Id', example='24'),
          tagName?: string(name='TagName'),
        }
      ](name='TagList'),
      vendor?: string(name='Vendor', example='CMCC'),
      vsimInstanceId?: int32(name='VsimInstanceId', example='123456'),
    }(name='VsimCardInfo'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='InstanceId cannot be empty.'),
  localizedMessage?: string(name='LocalizedMessage', example='InstanceId cannot be empty.'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model GetCardDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetCardDetailResponseBody(name='body'),
}

async function getCardDetail(request: GetCardDetailRequest): GetCardDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCardDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetCardFlowInfoRequest {
  dateList?: [ string ](name='DateList', example='["202110","202111"]', position='Query'),
  iccid: string(name='Iccid', example='89860321******15668', position='Query'),
}

model GetCardFlowInfoResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    listCardMonthFlow?: [ 
      {
        flowCount?: string(name='FlowCount', example='200MB'),
        listDayFlow?: [ 
          {
            day?: string(name='Day', example='20211201'),
            flow?: string(name='Flow', example='100MB'),
          }
        ](name='ListDayFlow'),
        month?: string(name='Month', example='202112'),
      }
    ](name='ListCardMonthFlow'),
    listPackageDTO?: [ 
      {
        effectiveTime?: string(name='EffectiveTime', example='2022-03-20 23:59:59'),
        expireTime?: string(name='ExpireTime', example='2022-04-30 23:59:59'),
        packageName?: string(name='PackageName'),
        remark?: string(name='Remark'),
      }
    ](name='ListPackageDTO'),
    listVendorDetail?: [ 
      {
        netWorkDelay?: string(name='NetWorkDelay', example='20'),
        ratio?: string(name='Ratio', example='80%'),
        signalStrength?: string(name='SignalStrength', example='20'),
        usedFlow?: string(name='UsedFlow', example='100MB'),
        vendor?: string(name='Vendor', example='CMCC'),
      }
    ](name='ListVendorDetail'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='InstanceId cannot be empty.'),
  localizedMessage?: string(name='LocalizedMessage', example='InstanceId cannot be empty.'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model GetCardFlowInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetCardFlowInfoResponseBody(name='body'),
}

async function getCardFlowInfo(request: GetCardFlowInfoRequest): GetCardFlowInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCardFlowInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetCardLatestFlowRequest {
  iccid: string(name='Iccid', description='iccid', position='Query'),
}

model GetCardLatestFlowResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', description='必填'),
}

model GetCardLatestFlowResponse = {
  headers: map[string]string(name='headers'),
  body: GetCardLatestFlowResponseBody(name='body'),
}

async function getCardLatestFlow(request: GetCardLatestFlowRequest): GetCardLatestFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCardLatestFlow', 'POST', '/', 'json', false, 'json', request);
}

model GetCardStatusStatisticsRequest {
}

model GetCardStatusStatisticsResponseBody = {
  code?: string(name='Code'),
  data?: {
    errorStopStatisticsDTO?: {
      poolCount?: long(name='PoolCount'),
      sameFlowCardCount?: long(name='SameFlowCardCount'),
      singleCardCount?: long(name='SingleCardCount'),
      totalCount?: long(name='TotalCount'),
    }(name='ErrorStopStatisticsDTO'),
    exhaustStopStatisticsDTO?: {
      poolCount?: long(name='PoolCount'),
      sameFlowCardCount?: long(name='SameFlowCardCount'),
      singleCardCount?: long(name='SingleCardCount'),
      totalCount?: long(name='TotalCount'),
    }(name='ExhaustStopStatisticsDTO'),
    expireStopStatisticsDTO?: {
      poolCount?: long(name='PoolCount'),
      sameFlowCardCount?: long(name='SameFlowCardCount'),
      singleCardCount?: long(name='SingleCardCount'),
      totalCount?: long(name='TotalCount'),
    }(name='ExpireStopStatisticsDTO'),
    flowOutStatisticsDTO?: {
      poolCount?: long(name='PoolCount'),
      sameFlowCardCount?: long(name='SameFlowCardCount'),
      singleCardCount?: long(name='SingleCardCount'),
      totalCount?: long(name='TotalCount'),
    }(name='FlowOutStatisticsDTO'),
    manageStopStatisticsDTO?: {
      poolCount?: long(name='PoolCount'),
      sameFlowCardCount?: long(name='SameFlowCardCount'),
      singleCardCount?: long(name='SingleCardCount'),
      totalCount?: long(name='TotalCount'),
    }(name='ManageStopStatisticsDTO'),
    riskWaringStatisticsDTO?: {
      leftFlowPercentageWarnCount?: long(name='LeftFlowPercentageWarnCount'),
      stopCount?: long(name='StopCount'),
      waringTotalCount?: long(name='WaringTotalCount'),
      warningCount?: long(name='WarningCount'),
    }(name='RiskWaringStatisticsDTO'),
    singCardPeriodLeftFlowWarnDTO?: {
      lessFlowPercentage10Count?: long(name='LessFlowPercentage10Count'),
      lessFlowPercentage30Count?: long(name='LessFlowPercentage30Count'),
    }(name='SingCardPeriodLeftFlowWarnDTO'),
    unCertifiedStopStatisticsDTO?: {
      poolCount?: long(name='PoolCount'),
      sameFlowCardCount?: long(name='SameFlowCardCount'),
      singleCardCount?: long(name='SingleCardCount'),
      totalCount?: long(name='TotalCount'),
    }(name='UnCertifiedStopStatisticsDTO'),
    unbindResumeStatisticsDTO?: {
      poolCount?: long(name='PoolCount'),
      sameFlowCardCount?: long(name='SameFlowCardCount'),
      singleCardCount?: long(name='SingleCardCount'),
      totalCount?: long(name='TotalCount'),
    }(name='UnbindResumeStatisticsDTO'),
    weekWarnStatisticsDTO?: {
      poolCount?: long(name='PoolCount'),
      sameFlowCardCount?: long(name='SameFlowCardCount'),
      singleCardCount?: long(name='SingleCardCount'),
      totalCount?: long(name='TotalCount'),
    }(name='WeekWarnStatisticsDTO'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetCardStatusStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetCardStatusStatisticsResponseBody(name='body'),
}

async function getCardStatusStatistics(request: GetCardStatusStatisticsRequest): GetCardStatusStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCardStatusStatistics', 'POST', '/', 'json', false, 'json', request);
}

model GetCredentialPoolStatisticsRequest {
  credentialNO: string(name='CredentialNO', example='CM-SF-M-2-12G', position='Query'),
  date: string(name='Date', example='202108', position='Query'),
}

model GetCredentialPoolStatisticsResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    cardActiveNum?: long(name='CardActiveNum', example='10'),
    cardTotalNum?: long(name='CardTotalNum', example='20'),
    credentialInstanceId?: string(name='CredentialInstanceId', example='259****'),
    credentialNO?: string(name='CredentialNO', example='CM-SF-M-2-12G'),
    credentialType?: string(name='CredentialType', example='CT-SC-M-1-30M'),
    effectiveAvailableFlow?: string(name='EffectiveAvailableFlow', example='6.00GB'),
    effectiveTotalFlow?: string(name='EffectiveTotalFlow', example='12.00GB'),
    monthFeatureFee?: long(name='MonthFeatureFee', example='100'),
    monthUsedAmount?: long(name='MonthUsedAmount', example='3.00GB'),
    poolAvaiable?: string(name='PoolAvaiable', example='6.00GB'),
    poolGrandTotal?: string(name='PoolGrandTotal', example='12.00GB'),
    poolGrandTotalUsed?: string(name='PoolGrandTotalUsed', example='6.00GB'),
    poolOutUsed?: string(name='PoolOutUsed', example='0KB'),
    poolUsed?: string(name='PoolUsed', example='0KB'),
    smsUsed?: long(name='SmsUsed', example='0'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model GetCredentialPoolStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetCredentialPoolStatisticsResponseBody(name='body'),
}

async function getCredentialPoolStatistics(request: GetCredentialPoolStatisticsRequest): GetCredentialPoolStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCredentialPoolStatistics', 'POST', '/', 'json', false, 'json', request);
}

model GetOperateResultRequest {
  apiProduct?: string(name='ApiProduct', position='Query'),
  resId: string(name='ResId', position='Query'),
  serialNo: string(name='SerialNo', position='Query'),
}

model GetOperateResultResponseBody = {
  code?: string(name='Code'),
  data?: {
    operateType?: string(name='OperateType'),
    result?: boolean(name='Result'),
    status?: string(name='Status'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', description='必填'),
}

model GetOperateResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetOperateResultResponseBody(name='body'),
}

async function getOperateResult(request: GetOperateResultRequest): GetOperateResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOperateResult', 'POST', '/', 'json', false, 'json', request);
}

model GetRealNameStatusRequest {
  iccid: string(name='Iccid', position='Query'),
  listMsisdns?: [ string ](name='ListMsisdns', shrink='json', position='Query'),
}

model GetRealNameStatusResponseBody = {
  code?: string(name='Code'),
  data?: {
    desc?: string(name='Desc'),
    realNameStatus?: string(name='RealNameStatus'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', description='必填'),
}

model GetRealNameStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetRealNameStatusResponseBody(name='body'),
}

async function getRealNameStatus(request: GetRealNameStatusRequest): GetRealNameStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRealNameStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetSimCardStateDistributionRequest {
  credentialNO?: string(name='CredentialNO', position='Query'),
  date: string(name='Date', position='Query'),
}

model GetSimCardStateDistributionResponseBody = {
  code?: string(name='Code'),
  data?: {
    cardCount?: long(name='CardCount'),
    destoryedCount?: long(name='DestoryedCount'),
    shutDownCount?: long(name='ShutDownCount'),
    stopCount?: long(name='StopCount'),
    testCount?: long(name='TestCount'),
    unusedCount?: long(name='UnusedCount'),
    usingCount?: long(name='UsingCount'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetSimCardStateDistributionResponse = {
  headers: map[string]string(name='headers'),
  body: GetSimCardStateDistributionResponseBody(name='body'),
}

async function getSimCardStateDistribution(request: GetSimCardStateDistributionRequest): GetSimCardStateDistributionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSimCardStateDistribution', 'POST', '/', 'json', false, 'json', request);
}

model ListCardInfoRequest {
  activeTimeEnd?: string(name='ActiveTimeEnd', example='2022-05-25 23:59:59', position='Query'),
  activeTimeStart?: string(name='ActiveTimeStart', example='2022-05-25 23:59:59', position='Query'),
  aliFee?: string(name='AliFee', example='ali_2', position='Query'),
  aliyunOrderId?: string(name='AliyunOrderId', example='211519634******', position='Query'),
  apnName?: string(name='ApnName', example='cmiot', position='Query'),
  certifyType?: string(name='CertifyType', example='enterprise', position='Query'),
  credentialNo?: string(name='CredentialNo', example='CM-***-*-2-**M', position='Query'),
  dataLevel?: string(name='DataLevel', example='30MB', position='Query'),
  dataType?: string(name='DataType', example='sameflowcard', position='Query'),
  directionalGroupId?: string(name='DirectionalGroupId', example='22', position='Query'),
  expireTimeEnd?: string(name='ExpireTimeEnd', example='2022-05-25 23:59:59', position='Query'),
  expireTimeStart?: string(name='ExpireTimeStart', example='2022-05-25 23:59:59', position='Query'),
  iccid?: string(name='Iccid', example='89860321******15668', position='Query'),
  imsi?: string(name='Imsi', example='460081937******', position='Query'),
  isAutoRecharge?: boolean(name='IsAutoRecharge', example='true', position='Query'),
  maxFlow?: string(name='MaxFlow', example='30', position='Query'),
  maxRestFlowPercentage?: double(name='MaxRestFlowPercentage', example='0.2', position='Query'),
  minFlow?: string(name='MinFlow', example='20', position='Query'),
  msisdn?: string(name='Msisdn', example='1440993******', position='Query'),
  notifyId?: string(name='NotifyId', example='11111', position='Query'),
  osStatus?: string(name='OsStatus', example='300', position='Query'),
  pageNo: int32(name='PageNo', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  period?: string(name='Period', example='1101', position='Query'),
  poolId?: string(name='PoolId', example='test1', position='Query'),
  simType?: string(name='SimType', example='nano', position='Query'),
  status?: string(name='Status', example='35', position='Query'),
  tagName?: string(name='TagName', position='Query'),
  vendor?: string(name='Vendor', example='CMCC', position='Query'),
}

model ListCardInfoResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    list?: [ 
      {
        activeTime?: string(name='ActiveTime', example='2021-11-16 16:35:50'),
        activeType?: string(name='ActiveType', example='first_data_record'),
        aliFee?: string(name='AliFee', example='ali_2'),
        aliyunOrderId?: string(name='AliyunOrderId', example='211519634******'),
        apnName?: string(name='ApnName', example='cmiot'),
        certifyType?: string(name='CertifyType', example='enterprise'),
        credentialInstanceId?: string(name='CredentialInstanceId', example='2622***'),
        credentialNo?: string(name='CredentialNo', example='CM-***-*-2-**M'),
        credentialType?: string(name='CredentialType', example='unityPayPool'),
        dataLevel?: string(name='DataLevel', example='30MB'),
        dataType?: string(name='DataType', example='sameflowcard'),
        directionalGroupId?: long(name='DirectionalGroupId', example='55'),
        directionalGroupName?: string(name='DirectionalGroupName'),
        expireTime?: string(name='ExpireTime', example='2022-04-30 23:59:59'),
        iccid?: string(name='Iccid', example='89860321******15668'),
        imsi?: [ string ](name='Imsi'),
        isAutoRecharge?: boolean(name='IsAutoRecharge', example='true'),
        msisdn?: [ string ](name='Msisdn'),
        notifyId?: string(name='NotifyId', example='11111'),
        openAccountTime?: string(name='OpenAccountTime', example='2021-11-29 16:12:14'),
        osStatus?: string(name='OsStatus', example='300'),
        period?: string(name='Period', example='1101'),
        periodAddFlow?: string(name='PeriodAddFlow', example='0KB'),
        periodRestFlow?: string(name='PeriodRestFlow', example='130.00MB'),
        periodSmsUse?: string(name='PeriodSmsUse', example='0'),
        privateNetworkSegment?: string(name='PrivateNetworkSegment', example='1.*.3.*'),
        remark?: string(name='Remark'),
        simType?: string(name='SimType', example='nano'),
        status?: string(name='Status', example='35'),
        tagList?: [ 
          {
            id?: long(name='Id', example='24'),
            tagName?: string(name='TagName'),
          }
        ](name='TagList'),
        vendor?: string(name='Vendor', example='CMCC'),
        vsimInstanceId?: long(name='VsimInstanceId', example='123456'),
      }
    ](name='List'),
    pageCount?: int32(name='PageCount', example='20'),
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='199'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='InstanceId cannot be empty.'),
  localizedMessage?: string(name='LocalizedMessage', example='InstanceId cannot be empty.'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model ListCardInfoResponse = {
  headers: map[string]string(name='headers'),
  body: ListCardInfoResponseBody(name='body'),
}

async function listCardInfo(request: ListCardInfoRequest): ListCardInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCardInfo', 'POST', '/', 'json', false, 'json', request);
}

model ListDirectionalAddressRequest {
  groupId: string(name='GroupId', example='5', position='Query'),
  pageNo: int32(name='PageNo', example='1', minimum=1, position='Query'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=200, position='Query'),
}

model ListDirectionalAddressResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    list?: [ 
      {
        address?: string(name='Address', example='*.aliyun.com'),
        addressType?: string(name='AddressType', example='Domain'),
        groupId?: string(name='GroupId', example='5'),
        source?: string(name='Source', example='user_defined'),
        state?: int32(name='State', example='500'),
      }
    ](name='List'),
    pageCount?: int32(name='PageCount', example='9'),
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='90'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='InstanceId cannot be empty.'),
  localizedMessage?: string(name='LocalizedMessage', example='InstanceId cannot be empty.'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model ListDirectionalAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ListDirectionalAddressResponseBody(name='body'),
}

async function listDirectionalAddress(request: ListDirectionalAddressRequest): ListDirectionalAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDirectionalAddress', 'POST', '/', 'json', false, 'json', request);
}

model ListDirectionalDetailRequest {
  iccid: string(name='Iccid', example='89860321******15668', position='Query'),
  pageNo: int32(name='PageNo', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
}

model ListDirectionalDetailResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    directionalGroupId?: long(name='DirectionalGroupId', example='5'),
    directionalName?: string(name='DirectionalName'),
    paginationResult?: {
      list?: [ 
        {
          address?: string(name='Address', example='*.aliyun.com'),
          addressType?: string(name='AddressType', example='Domain'),
          groupId?: string(name='GroupId', example='5'),
          source?: string(name='Source', example='user_defined'),
          state?: string(name='State', example='500'),
        }
      ](name='List'),
      pageCount?: int32(name='PageCount', example='9'),
      pageNo?: int32(name='PageNo', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      total?: int32(name='Total', example='90'),
    }(name='PaginationResult'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='InstanceId cannot be empty.'),
  localizedMessage?: string(name='LocalizedMessage', example='InstanceId cannot be empty.'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', description='必填', example='true'),
}

model ListDirectionalDetailResponse = {
  headers: map[string]string(name='headers'),
  body: ListDirectionalDetailResponseBody(name='body'),
}

async function listDirectionalDetail(request: ListDirectionalDetailRequest): ListDirectionalDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDirectionalDetail', 'POST', '/', 'json', false, 'json', request);
}

model ListOrderRequest {
  endDate?: string(name='EndDate', example='2022-04-05', position='Query'),
  orderId?: string(name='OrderId', example='21450******0275', position='Query'),
  orderStatus?: string(name='OrderStatus', example='processing', position='Query'),
  orderType?: string(name='OrderType', example='NEW', position='Query'),
  pageNo: int32(name='PageNo', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  startDate?: string(name='StartDate', example='2022-04-05', position='Query'),
}

model ListOrderResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    list?: [ 
      {
        aliFee?: string(name='AliFee', example='ali_2'),
        apnName?: string(name='ApnName'),
        apnRegion?: string(name='ApnRegion'),
        billingCycle?: string(name='BillingCycle', example='1101'),
        buyNum?: int32(name='BuyNum', example='100'),
        cardPayCount?: int32(name='CardPayCount', example='2022-04-11 16:43:00'),
        credentialNo?: string(name='CredentialNo', example='CM-***-*-2-**M'),
        credentialPackage?: string(name='CredentialPackage', example='AL-UPG-******3_beika4'),
        dataLevel?: string(name='DataLevel', example='30MB'),
        deliveryInfo?: {
          address?: string(name='Address'),
          buyerMessage?: string(name='BuyerMessage'),
          mail?: string(name='Mail', example='xxx@xxx.com'),
          receiver?: string(name='Receiver'),
          zipCode?: string(name='ZipCode', example='100000'),
        }(name='DeliveryInfo'),
        expressNoList?: [ string ](name='ExpressNoList'),
        flowType?: string(name='FlowType', example='singlecard'),
        functionFee?: int32(name='FunctionFee', example='90'),
        orderDetailUrl?: string(name='OrderDetailUrl', example='https://us******60589'),
        orderId?: string(name='OrderId', example='21450******0275'),
        orderInfo?: string(name='OrderInfo', example='123123'),
        orderStatus?: string(name='OrderStatus', example='processing'),
        orderType?: string(name='OrderType', example='NEW'),
        payDuration?: string(name='PayDuration'),
        payTime?: string(name='PayTime', example='2022-04-11 16:43:00'),
        poolCapacity?: string(name='PoolCapacity', example='200'),
        poolCapacityUnit?: string(name='PoolCapacityUnit', example='GB'),
        poolNo?: string(name='PoolNo', example='beika4'),
        resourceQuantity?: long(name='ResourceQuantity'),
        vendor?: string(name='Vendor', example='CMCC'),
      }
    ](name='List'),
    pageCount?: int32(name='PageCount', example='5'),
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='48'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='InstanceId cannot be empty.'),
  localizedMessage?: string(name='LocalizedMessage', example='InstanceId cannot be empty.'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model ListOrderResponse = {
  headers: map[string]string(name='headers'),
  body: ListOrderResponseBody(name='body'),
}

async function listOrder(request: ListOrderRequest): ListOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOrder', 'POST', '/', 'json', false, 'json', request);
}

model RebindResumeSingleCardRequest {
  iccid: string(name='Iccid', example='89860321******15668', position='Query'),
  optMsisdns?: [ string ](name='OptMsisdns', example='["1112******826","1112******827"]', shrink='json', position='Query'),
}

model RebindResumeSingleCardResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage', example='Iccid cannot be empty.'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model RebindResumeSingleCardResponse = {
  headers: map[string]string(name='headers'),
  body: RebindResumeSingleCardResponseBody(name='body'),
}

async function rebindResumeSingleCard(request: RebindResumeSingleCardRequest): RebindResumeSingleCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebindResumeSingleCard', 'POST', '/', 'json', false, 'json', request);
}

model RenewRequest {
  apiProduct?: string(name='ApiProduct', example='linkcard', position='Body'),
  apiRevision?: string(name='ApiRevision', example='2021-05-20', position='Body'),
  buyNum?: int32(name='BuyNum', example='12', position='Query'),
  iccid?: string(name='Iccid', example='89860321******15668', position='Query'),
  offerCode?: string(name='OfferCode', example='COM***0203', position='Query'),
  rechargeType?: string(name='RechargeType', example='STANDARD', position='Query'),
  serialNo?: string(name='SerialNo', example='12345678', position='Query'),
}

model RenewResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    orderNo?: string(name='OrderNo', example='21450******0275'),
    serialNo?: string(name='SerialNo', example='12345678'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage', example='InstanceId cannot be empty.'),
  requestId?: string(name='RequestId', description='Id of the request', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model RenewResponse = {
  headers: map[string]string(name='headers'),
  body: RenewResponseBody(name='body'),
}

async function renew(request: RenewRequest): RenewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Renew', 'POST', '/', 'json', true, 'form', request);
}

model ResumeSingleCardRequest {
  iccid: string(name='Iccid', example='89860321******15668', position='Query'),
  optMsisdns?: [ string ](name='OptMsisdns', example='["111******6826","11*******6827"]', shrink='json', position='Query'),
}

model ResumeSingleCardResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage', example='InstanceId cannot be empty.'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model ResumeSingleCardResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeSingleCardResponseBody(name='body'),
}

async function resumeSingleCard(request: ResumeSingleCardRequest): ResumeSingleCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumeSingleCard', 'POST', '/', 'json', false, 'json', request);
}

model SetCardStopRuleRequest {
  autoRestore: boolean(name='AutoRestore', example='true', position='Query'),
  flowLimit: long(name='FlowLimit', example='100', position='Query'),
  iccid: string(name='Iccid', example='89860321******15668', position='Query'),
}

model SetCardStopRuleResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage', example='InstanceId cannot be empty.'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model SetCardStopRuleResponse = {
  headers: map[string]string(name='headers'),
  body: SetCardStopRuleResponseBody(name='body'),
}

async function setCardStopRule(request: SetCardStopRuleRequest): SetCardStopRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetCardStopRule', 'POST', '/', 'json', false, 'json', request);
}

model StopSingleCardRequest {
  iccid: string(name='Iccid', example='89860321******15668', position='Query'),
  optMsisdns?: [ string ](name='OptMsisdns', example='["1112******826","1112******827"]', shrink='json', position='Query'),
}

model StopSingleCardResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage', example='InstanceId cannot be empty.'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model StopSingleCardResponse = {
  headers: map[string]string(name='headers'),
  body: StopSingleCardResponseBody(name='body'),
}

async function stopSingleCard(request: StopSingleCardRequest): StopSingleCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopSingleCard', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAutoRechargeSwitchRequest {
  iccid: string(name='Iccid', example='89860321******15668', position='Query'),
  open: boolean(name='Open', example='true', position='Query'),
}

model UpdateAutoRechargeSwitchResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  localizedMessage?: string(name='LocalizedMessage', example='InstanceId cannot be empty.'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model UpdateAutoRechargeSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAutoRechargeSwitchResponseBody(name='body'),
}

async function updateAutoRechargeSwitch(request: UpdateAutoRechargeSwitchRequest): UpdateAutoRechargeSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAutoRechargeSwitch', 'POST', '/', 'json', false, 'json', request);
}

model VerifyIotCardRequest {
  iccid: string(name='Iccid', example='89860321******15668', position='Query'),
}

model VerifyIotCardResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage', example='InstanceId cannot be empty.'),
  localizedMessage?: string(name='LocalizedMessage', example='InstanceId cannot be empty.'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', description='必填', example='true'),
}

model VerifyIotCardResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyIotCardResponseBody(name='body'),
}

async function verifyIotCard(request: VerifyIotCardRequest): VerifyIotCardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyIotCard', 'POST', '/', 'json', false, 'json', request);
}

