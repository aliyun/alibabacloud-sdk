/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    ap-northeast-2-pop = 'clickhouse.aliyuncs.com',
    ap-southeast-1 = 'clickhouse.aliyuncs.com',
    cn-beijing = 'clickhouse.aliyuncs.com',
    cn-beijing-finance-1 = 'clickhouse.aliyuncs.com',
    cn-beijing-finance-pop = 'clickhouse.aliyuncs.com',
    cn-beijing-gov-1 = 'clickhouse.aliyuncs.com',
    cn-beijing-nu16-b01 = 'clickhouse.aliyuncs.com',
    cn-edge-1 = 'clickhouse.aliyuncs.com',
    cn-fujian = 'clickhouse.aliyuncs.com',
    cn-haidian-cm12-c01 = 'clickhouse.aliyuncs.com',
    cn-hangzhou = 'clickhouse.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-finance = 'clickhouse.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-test-306 = 'clickhouse.aliyuncs.com',
    cn-hongkong = 'clickhouse.aliyuncs.com',
    cn-hongkong-finance-pop = 'clickhouse.aliyuncs.com',
    cn-north-2-gov-1 = 'clickhouse.aliyuncs.com',
    cn-qingdao = 'clickhouse.aliyuncs.com',
    cn-qingdao-nebula = 'clickhouse.aliyuncs.com',
    cn-shanghai = 'clickhouse.aliyuncs.com',
    cn-shanghai-et15-b01 = 'clickhouse.aliyuncs.com',
    cn-shanghai-et2-b01 = 'clickhouse.aliyuncs.com',
    cn-shanghai-finance-1 = 'clickhouse.aliyuncs.com',
    cn-shanghai-inner = 'clickhouse.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'clickhouse.aliyuncs.com',
    cn-shenzhen = 'clickhouse.aliyuncs.com',
    cn-shenzhen-finance-1 = 'clickhouse.aliyuncs.com',
    cn-shenzhen-inner = 'clickhouse.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'clickhouse.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'clickhouse.aliyuncs.com',
    cn-wuhan = 'clickhouse.aliyuncs.com',
    cn-yushanfang = 'clickhouse.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'clickhouse.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'clickhouse.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'clickhouse.aliyuncs.com',
    eu-west-1-oxs = 'clickhouse.aliyuncs.com',
    me-east-1 = 'clickhouse.aliyuncs.com',
    rus-west-1-pop = 'clickhouse.aliyuncs.com',
    us-east-1 = 'clickhouse.aliyuncs.com',
    us-west-1 = 'clickhouse.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('clickhouse', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model DescribeAccountAuthorityRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterId?: string(name='DBClusterId'),
  accountName?: string(name='AccountName'),
}

model DescribeAccountAuthorityResponseBody = {
  ddlAuthority?: boolean(name='DdlAuthority'),
  dmlAuthority?: string(name='DmlAuthority'),
  requestId?: string(name='RequestId'),
  totalDatabases?: [ string ](name='TotalDatabases'),
  totalDictionaries?: [ string ](name='TotalDictionaries'),
  allowDictionaries?: [ string ](name='AllowDictionaries'),
  allowDatabases?: [ string ](name='AllowDatabases'),
  accountName?: string(name='AccountName'),
}

model DescribeAccountAuthorityResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccountAuthorityResponseBody(name='body'),
}

async function describeAccountAuthorityWithOptions(request: DescribeAccountAuthorityRequest, runtime: Util.RuntimeOptions): DescribeAccountAuthorityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAccountAuthority', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAccountAuthority(request: DescribeAccountAuthorityRequest): DescribeAccountAuthorityResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountAuthorityWithOptions(request, runtime);
}

model CreateServiceLinkedRoleRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model CreateServiceLinkedRoleResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceLinkedRoleResponseBody(name='body'),
}

async function createServiceLinkedRoleWithOptions(request: CreateServiceLinkedRoleRequest, runtime: Util.RuntimeOptions): CreateServiceLinkedRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateServiceLinkedRole', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): CreateServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceLinkedRoleWithOptions(request, runtime);
}

model DescribeLorneTasksRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterId?: string(name='DBClusterId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeLorneTasksResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  taskDetails?: [ 
    {
      sinkVpcId?: string(name='SinkVpcId'),
      state?: string(name='State'),
      createTime?: string(name='CreateTime'),
      sinkType?: string(name='SinkType'),
      sourceType?: string(name='SourceType'),
      sinkUser?: string(name='SinkUser'),
      columnMapper?: string(name='ColumnMapper'),
      message?: string(name='Message'),
      sinkInstance?: string(name='SinkInstance'),
      strict?: string(name='Strict'),
      sourceTopic?: string(name='SourceTopic'),
      sinkRegion?: string(name='SinkRegion'),
      description?: string(name='Description'),
      sinkSchema?: string(name='SinkSchema'),
      sourceProject?: string(name='SourceProject'),
      name?: string(name='Name'),
      checkpoint?: string(name='Checkpoint'),
      sourceRegion?: string(name='SourceRegion'),
      id?: string(name='Id'),
      sinkTable?: string(name='SinkTable'),
    }
  ](name='TaskDetails'),
}

model DescribeLorneTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLorneTasksResponseBody(name='body'),
}

async function describeLorneTasksWithOptions(request: DescribeLorneTasksRequest, runtime: Util.RuntimeOptions): DescribeLorneTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLorneTasks', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLorneTasks(request: DescribeLorneTasksRequest): DescribeLorneTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLorneTasksWithOptions(request, runtime);
}

model DescribeDBClusterPerformanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  key?: string(name='Key'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeDBClusterPerformanceResponseBody = {
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  DBClusterId?: string(name='DBClusterId'),
  performances?: [ 
    {
      key?: string(name='Key'),
      unit?: string(name='Unit'),
      series?: [ 
        {
          values?: [ 
            {
              point?: [ string ](name='Point'),
            }
          ](name='Values'),
          name?: string(name='Name'),
        }
      ](name='Series'),
      name?: string(name='Name'),
    }
  ](name='Performances'),
}

model DescribeDBClusterPerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterPerformanceResponseBody(name='body'),
}

async function describeDBClusterPerformanceWithOptions(request: DescribeDBClusterPerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBClusterPerformanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClusterPerformance', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClusterPerformance(request: DescribeDBClusterPerformanceRequest): DescribeDBClusterPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterPerformanceWithOptions(request, runtime);
}

model ModifyDBClusterConfigRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterId?: string(name='DBClusterId'),
  userConfig?: string(name='UserConfig'),
}

model ModifyDBClusterConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterConfigResponseBody(name='body'),
}

async function modifyDBClusterConfigWithOptions(request: ModifyDBClusterConfigRequest, runtime: Util.RuntimeOptions): ModifyDBClusterConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBClusterConfig', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBClusterConfig(request: ModifyDBClusterConfigRequest): ModifyDBClusterConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterConfigWithOptions(request, runtime);
}

model ModifyAccountDescriptionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  accountName?: string(name='AccountName'),
  accountDescription?: string(name='AccountDescription'),
}

model ModifyAccountDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

async function modifyAccountDescriptionWithOptions(request: ModifyAccountDescriptionRequest, runtime: Util.RuntimeOptions): ModifyAccountDescriptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAccountDescription', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountDescriptionWithOptions(request, runtime);
}

model DescribeDBClusterConfigRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeDBClusterConfigResponseBody = {
  requestId?: string(name='RequestId'),
  config?: string(name='Config'),
}

model DescribeDBClusterConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterConfigResponseBody(name='body'),
}

async function describeDBClusterConfigWithOptions(request: DescribeDBClusterConfigRequest, runtime: Util.RuntimeOptions): DescribeDBClusterConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClusterConfig', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClusterConfig(request: DescribeDBClusterConfigRequest): DescribeDBClusterConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterConfigWithOptions(request, runtime);
}

model DescribeOSSStorageRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeOSSStorageResponseBody = {
  policy?: string(name='Policy'),
  requestId?: string(name='RequestId'),
  state?: string(name='State'),
  coldStorage?: boolean(name='ColdStorage'),
  storageUsage?: string(name='StorageUsage'),
}

model DescribeOSSStorageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOSSStorageResponseBody(name='body'),
}

async function describeOSSStorageWithOptions(request: DescribeOSSStorageRequest, runtime: Util.RuntimeOptions): DescribeOSSStorageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeOSSStorage', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeOSSStorage(request: DescribeOSSStorageRequest): DescribeOSSStorageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOSSStorageWithOptions(request, runtime);
}

model CreateDBInstanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  DBClusterVersion?: string(name='DBClusterVersion'),
  DBClusterCategory?: string(name='DBClusterCategory'),
  DBClusterClass?: string(name='DBClusterClass'),
  DBNodeGroupCount?: string(name='DBNodeGroupCount'),
  DBNodeStorage?: string(name='DBNodeStorage'),
  DBClusterNetworkType?: string(name='DBClusterNetworkType'),
  DBClusterDescription?: string(name='DBClusterDescription'),
  payType?: string(name='PayType'),
  period?: string(name='Period'),
  usedTime?: string(name='UsedTime'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
  clientToken?: string(name='ClientToken'),
  dbNodeStorageType?: string(name='DbNodeStorageType'),
  encryptionKey?: string(name='EncryptionKey'),
  encryptionType?: string(name='EncryptionType'),
}

model CreateDBInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  DBClusterId?: string(name='DBClusterId'),
  orderId?: string(name='OrderId'),
}

model CreateDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBInstanceResponseBody(name='body'),
}

async function createDBInstanceWithOptions(request: CreateDBInstanceRequest, runtime: Util.RuntimeOptions): CreateDBInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDBInstance', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDBInstance(request: CreateDBInstanceRequest): CreateDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBInstanceWithOptions(request, runtime);
}

model ModifyDBConfigRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterId?: string(name='DBClusterId'),
  config?: string(name='Config'),
}

model ModifyDBConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBConfigResponseBody(name='body'),
}

async function modifyDBConfigWithOptions(request: ModifyDBConfigRequest, runtime: Util.RuntimeOptions): ModifyDBConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBConfig', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBConfig(request: ModifyDBConfigRequest): ModifyDBConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBConfigWithOptions(request, runtime);
}

model DeleteDBClusterRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model DeleteDBClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDBClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBClusterResponseBody(name='body'),
}

async function deleteDBClusterWithOptions(request: DeleteDBClusterRequest, runtime: Util.RuntimeOptions): DeleteDBClusterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDBCluster', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDBCluster(request: DeleteDBClusterRequest): DeleteDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBClusterWithOptions(request, runtime);
}

model DescribeSlowLogTrendRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterId?: string(name='DBClusterId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  queryDurationMs?: int32(name='QueryDurationMs'),
}

model DescribeSlowLogTrendResponseBody = {
  requestId?: string(name='RequestId'),
  slowLogTrend?: {
    tableSchema?: {
      resultSet?: [ 
      {
        type?: string(name='Type'),
        name?: string(name='Name'),
      }
    ](name='ResultSet')
    }(name='TableSchema'),
    data?: {
      resultSet?: [ 
      {
        queryStartTime?: string(name='QueryStartTime'),
        maxQueryDurationMs?: string(name='MaxQueryDurationMs'),
        minQueryDurationMs?: string(name='MinQueryDurationMs'),
        count?: string(name='Count'),
        avgQueryDurationMs?: string(name='AvgQueryDurationMs'),
      }
    ](name='ResultSet')
    }(name='Data'),
    rows?: string(name='Rows'),
    rowsBeforeLimitAtLeast?: string(name='RowsBeforeLimitAtLeast'),
    statistics?: {
      rowsRead?: int32(name='RowsRead'),
      elapsedTime?: float(name='ElapsedTime'),
      bytesRead?: int32(name='BytesRead'),
    }(name='Statistics'),
  }(name='SlowLogTrend'),
}

model DescribeSlowLogTrendResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowLogTrendResponseBody(name='body'),
}

async function describeSlowLogTrendWithOptions(request: DescribeSlowLogTrendRequest, runtime: Util.RuntimeOptions): DescribeSlowLogTrendResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSlowLogTrend', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSlowLogTrend(request: DescribeSlowLogTrendRequest): DescribeSlowLogTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowLogTrendWithOptions(request, runtime);
}

model DescribeAvailableResourceRequest {
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  chargeType?: string(name='ChargeType'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  acceptLanguage?: string(name='AcceptLanguage'),
}

model DescribeAvailableResourceResponseBody = {
  requestId?: string(name='RequestId'),
  regionId?: string(name='RegionId'),
  availableZoneList?: {
    availableZone?: [ 
    {
      supportedSerialList?: {
        supportedSerial?: [ 
        {
          serial?: string(name='Serial'),
          supportedInstanceClassList?: {
            supportedInstanceClass?: [ 
            {
              supportedExecutorList?: {
                supportedExecutor?: [ 
                {
                  nodeCount?: {
                    step?: string(name='Step'),
                    minCount?: string(name='MinCount'),
                    maxCount?: string(name='MaxCount'),
                  }(name='NodeCount'),
                }
              ](name='SupportedExecutor')
              }(name='SupportedExecutorList'),
              instanceClass?: string(name='InstanceClass'),
              supportedNodeCountList?: {
                supportedNodeCount?: [ 
                {
                  nodeCount?: {
                    step?: string(name='Step'),
                    minCount?: string(name='MinCount'),
                    maxCount?: string(name='MaxCount'),
                  }(name='NodeCount'),
                  storageSize?: {
                    storageSize?: [ string ](name='StorageSize')
                  }(name='StorageSize'),
                }
              ](name='SupportedNodeCount')
              }(name='SupportedNodeCountList'),
              tips?: string(name='Tips'),
            }
          ](name='SupportedInstanceClass')
          }(name='SupportedInstanceClassList'),
        }
      ](name='SupportedSerial')
      }(name='SupportedSerialList'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='AvailableZone')
  }(name='AvailableZoneList'),
}

model DescribeAvailableResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableResourceResponseBody(name='body'),
}

async function describeAvailableResourceWithOptions(request: DescribeAvailableResourceRequest, runtime: Util.RuntimeOptions): DescribeAvailableResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAvailableResource', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAvailableResource(request: DescribeAvailableResourceRequest): DescribeAvailableResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableResourceWithOptions(request, runtime);
}

model ReleaseClusterPublicConnectionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model ReleaseClusterPublicConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseClusterPublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseClusterPublicConnectionResponseBody(name='body'),
}

async function releaseClusterPublicConnectionWithOptions(request: ReleaseClusterPublicConnectionRequest, runtime: Util.RuntimeOptions): ReleaseClusterPublicConnectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleaseClusterPublicConnection', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releaseClusterPublicConnection(request: ReleaseClusterPublicConnectionRequest): ReleaseClusterPublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseClusterPublicConnectionWithOptions(request, runtime);
}

model CreateAccountRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
  accountDescription?: string(name='AccountDescription'),
}

model CreateAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAccountResponseBody(name='body'),
}

async function createAccountWithOptions(request: CreateAccountRequest, runtime: Util.RuntimeOptions): CreateAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAccount', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccountWithOptions(request, runtime);
}

model DescribeLogStoreKeysRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  projectName?: string(name='ProjectName'),
  logStoreName?: string(name='LogStoreName'),
}

model DescribeLogStoreKeysResponseBody = {
  requestId?: string(name='RequestId'),
  logStoreKeys?: {
    logStoreKey?: [ string ](name='LogStoreKey')
  }(name='LogStoreKeys'),
}

model DescribeLogStoreKeysResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLogStoreKeysResponseBody(name='body'),
}

async function describeLogStoreKeysWithOptions(request: DescribeLogStoreKeysRequest, runtime: Util.RuntimeOptions): DescribeLogStoreKeysResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLogStoreKeys', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLogStoreKeys(request: DescribeLogStoreKeysRequest): DescribeLogStoreKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogStoreKeysWithOptions(request, runtime);
}

model DescribeProcessListRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterId?: string(name='DBClusterId'),
  queryDurationMs?: int32(name='QueryDurationMs'),
  initialUser?: string(name='InitialUser'),
  keyword?: string(name='Keyword'),
  order?: string(name='Order'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  initialQueryId?: string(name='InitialQueryId'),
}

model DescribeProcessListResponseBody = {
  requestId?: string(name='RequestId'),
  processList?: {
    tableSchema?: {
      resultSet?: [ 
      {
        type?: string(name='Type'),
        name?: string(name='Name'),
      }
    ](name='ResultSet')
    }(name='TableSchema'),
    data?: {
      resultSet?: [ 
      {
        queryStartTime?: string(name='QueryStartTime'),
        query?: string(name='Query'),
        initialAddress?: string(name='InitialAddress'),
        initialQueryId?: string(name='InitialQueryId'),
        initialUser?: string(name='InitialUser'),
        queryDurationMs?: string(name='QueryDurationMs'),
      }
    ](name='ResultSet')
    }(name='Data'),
    rows?: string(name='Rows'),
    rowsBeforeLimitAtLeast?: string(name='RowsBeforeLimitAtLeast'),
    statistics?: {
      rowsRead?: int32(name='RowsRead'),
      elapsedTime?: float(name='ElapsedTime'),
      bytesRead?: int32(name='BytesRead'),
    }(name='Statistics'),
  }(name='ProcessList'),
}

model DescribeProcessListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProcessListResponseBody(name='body'),
}

async function describeProcessListWithOptions(request: DescribeProcessListRequest, runtime: Util.RuntimeOptions): DescribeProcessListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeProcessList', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeProcessList(request: DescribeProcessListRequest): DescribeProcessListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProcessListWithOptions(request, runtime);
}

model CreateOSSStorageRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterId?: string(name='DBClusterId'),
}

model CreateOSSStorageResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateOSSStorageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOSSStorageResponseBody(name='body'),
}

async function createOSSStorageWithOptions(request: CreateOSSStorageRequest, runtime: Util.RuntimeOptions): CreateOSSStorageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateOSSStorage', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createOSSStorage(request: CreateOSSStorageRequest): CreateOSSStorageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOSSStorageWithOptions(request, runtime);
}

model DescribeTablesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  schemaName?: string(name='SchemaName'),
  tableName?: string(name='TableName'),
}

model DescribeTablesResponseBody = {
  requestId?: string(name='RequestId'),
  items?: {
    table?: [ 
    {
      tableName?: string(name='TableName'),
      DBClusterId?: string(name='DBClusterId'),
      schemaName?: string(name='SchemaName'),
    }
  ](name='Table')
  }(name='Items'),
}

model DescribeTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTablesResponseBody(name='body'),
}

async function describeTablesWithOptions(request: DescribeTablesRequest, runtime: Util.RuntimeOptions): DescribeTablesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTables', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTables(request: DescribeTablesRequest): DescribeTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTablesWithOptions(request, runtime);
}

model ModifyBackupPolicyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
  backupRetentionPeriod?: string(name='BackupRetentionPeriod'),
}

model ModifyBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackupPolicyResponseBody(name='body'),
}

async function modifyBackupPolicyWithOptions(request: ModifyBackupPolicyRequest, runtime: Util.RuntimeOptions): ModifyBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyBackupPolicy', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBackupPolicyWithOptions(request, runtime);
}

model DescribeLorneTasksMCountRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterId?: string(name='DBClusterId'),
  taskId?: string(name='TaskId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  metricName?: string(name='MetricName'),
}

model DescribeLorneTasksMCountResponseBody = {
  requestId?: string(name='RequestId'),
  data?: float(name='Data'),
}

model DescribeLorneTasksMCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLorneTasksMCountResponseBody(name='body'),
}

async function describeLorneTasksMCountWithOptions(request: DescribeLorneTasksMCountRequest, runtime: Util.RuntimeOptions): DescribeLorneTasksMCountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLorneTasksMCount', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLorneTasksMCount(request: DescribeLorneTasksMCountRequest): DescribeLorneTasksMCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLorneTasksMCountWithOptions(request, runtime);
}

model DescribeDBConfigRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeDBConfigResponseBody = {
  requestId?: string(name='RequestId'),
  config?: string(name='Config'),
}

model DescribeDBConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBConfigResponseBody(name='body'),
}

async function describeDBConfigWithOptions(request: DescribeDBConfigRequest, runtime: Util.RuntimeOptions): DescribeDBConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBConfig', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBConfig(request: DescribeDBConfigRequest): DescribeDBConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBConfigWithOptions(request, runtime);
}

model ModifyAccountAuthorityRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterId?: string(name='DBClusterId'),
  accountName?: string(name='AccountName'),
  dmlAuthority?: string(name='DmlAuthority'),
  ddlAuthority?: boolean(name='DdlAuthority'),
  allowDatabases?: string(name='AllowDatabases'),
  totalDatabases?: string(name='TotalDatabases'),
  allowDictionaries?: string(name='AllowDictionaries'),
  totalDictionaries?: string(name='TotalDictionaries'),
}

model ModifyAccountAuthorityResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccountAuthorityResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountAuthorityResponseBody(name='body'),
}

async function modifyAccountAuthorityWithOptions(request: ModifyAccountAuthorityRequest, runtime: Util.RuntimeOptions): ModifyAccountAuthorityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAccountAuthority', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAccountAuthority(request: ModifyAccountAuthorityRequest): ModifyAccountAuthorityResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountAuthorityWithOptions(request, runtime);
}

model DescribeLorneLogRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterId?: string(name='DBClusterId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  taskId?: string(name='TaskId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeLorneLogResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  data?: [ 
    {
      endTime?: string(name='EndTime'),
      startTime?: string(name='StartTime'),
      code?: string(name='Code'),
      message?: string(name='Message'),
      count?: string(name='Count'),
    }
  ](name='Data'),
}

model DescribeLorneLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLorneLogResponseBody(name='body'),
}

async function describeLorneLogWithOptions(request: DescribeLorneLogRequest, runtime: Util.RuntimeOptions): DescribeLorneLogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLorneLog', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLorneLog(request: DescribeLorneLogRequest): DescribeLorneLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLorneLogWithOptions(request, runtime);
}

model DescribeAllDataSourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  schemaName?: string(name='SchemaName'),
  tableName?: string(name='TableName'),
}

model DescribeAllDataSourcesResponseBody = {
  requestId?: string(name='RequestId'),
  tables?: {
    table?: [ 
    {
      tableName?: string(name='TableName'),
      DBClusterId?: string(name='DBClusterId'),
      schemaName?: string(name='SchemaName'),
    }
  ](name='Table')
  }(name='Tables'),
  columns?: {
    column?: [ 
    {
      type?: string(name='Type'),
      columnName?: string(name='ColumnName'),
      tableName?: string(name='TableName'),
      autoIncrementColumn?: boolean(name='AutoIncrementColumn'),
      DBClusterId?: string(name='DBClusterId'),
      primaryKey?: boolean(name='PrimaryKey'),
      schemaName?: string(name='SchemaName'),
    }
  ](name='Column')
  }(name='Columns'),
  schemas?: {
    schema?: [ 
    {
      DBClusterId?: string(name='DBClusterId'),
      schemaName?: string(name='SchemaName'),
    }
  ](name='Schema')
  }(name='Schemas'),
}

model DescribeAllDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAllDataSourcesResponseBody(name='body'),
}

async function describeAllDataSourcesWithOptions(request: DescribeAllDataSourcesRequest, runtime: Util.RuntimeOptions): DescribeAllDataSourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAllDataSources', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAllDataSources(request: DescribeAllDataSourcesRequest): DescribeAllDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAllDataSourcesWithOptions(request, runtime);
}

model OperateLorneTaskStatusRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  taskId?: string(name='TaskId'),
  lorneStatus?: string(name='LorneStatus'),
}

model OperateLorneTaskStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model OperateLorneTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  body: OperateLorneTaskStatusResponseBody(name='body'),
}

async function operateLorneTaskStatusWithOptions(request: OperateLorneTaskStatusRequest, runtime: Util.RuntimeOptions): OperateLorneTaskStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OperateLorneTaskStatus', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function operateLorneTaskStatus(request: OperateLorneTaskStatusRequest): OperateLorneTaskStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateLorneTaskStatusWithOptions(request, runtime);
}

model DescribeDBClusterAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeDBClusterAttributeResponseBody = {
  DBCluster?: {
    vpcId?: string(name='VpcId'),
    supportBackup?: int32(name='SupportBackup'),
    encryptionType?: string(name='EncryptionType'),
    DBNodeCount?: long(name='DBNodeCount'),
    maintainTime?: string(name='MaintainTime'),
    createTime?: string(name='CreateTime'),
    payType?: string(name='PayType'),
    tags?: {
      tag?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Tag')
    }(name='Tags'),
    publicConnectionString?: string(name='PublicConnectionString'),
    storageType?: string(name='StorageType'),
    port?: int32(name='Port'),
    lockMode?: string(name='LockMode'),
    bid?: string(name='Bid'),
    engineVersion?: string(name='EngineVersion'),
    isExpired?: string(name='IsExpired'),
    scaleOutStatus?: {
      progress?: string(name='Progress'),
      ratio?: string(name='Ratio'),
    }(name='ScaleOutStatus'),
    vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
    DBClusterId?: string(name='DBClusterId'),
    connectionString?: string(name='ConnectionString'),
    encryptionKey?: string(name='EncryptionKey'),
    DBClusterType?: string(name='DBClusterType'),
    commodityCode?: string(name='CommodityCode'),
    expireTime?: string(name='ExpireTime'),
    DBNodeStorage?: long(name='DBNodeStorage'),
    DBNodeClass?: string(name='DBNodeClass'),
    aliUid?: string(name='AliUid'),
    lockReason?: string(name='LockReason'),
    regionId?: string(name='RegionId'),
    publicPort?: string(name='PublicPort'),
    vSwitchId?: string(name='VSwitchId'),
    DBClusterStatus?: string(name='DBClusterStatus'),
    DBClusterNetworkType?: string(name='DBClusterNetworkType'),
    DBClusterDescription?: string(name='DBClusterDescription'),
    zoneId?: string(name='ZoneId'),
    category?: string(name='Category'),
    engine?: string(name='Engine'),
  }(name='DBCluster'),
  requestId?: string(name='RequestId'),
}

model DescribeDBClusterAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterAttributeResponseBody(name='body'),
}

async function describeDBClusterAttributeWithOptions(request: DescribeDBClusterAttributeRequest, runtime: Util.RuntimeOptions): DescribeDBClusterAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClusterAttribute', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClusterAttribute(request: DescribeDBClusterAttributeRequest): DescribeDBClusterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterAttributeWithOptions(request, runtime);
}

model DeleteLorneTaskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterId?: string(name='DBClusterId'),
  taskId?: string(name='TaskId'),
}

model DeleteLorneTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLorneTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLorneTaskResponseBody(name='body'),
}

async function deleteLorneTaskWithOptions(request: DeleteLorneTaskRequest, runtime: Util.RuntimeOptions): DeleteLorneTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLorneTask', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLorneTask(request: DeleteLorneTaskRequest): DeleteLorneTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLorneTaskWithOptions(request, runtime);
}

model DescribeDBClustersRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterIds?: string(name='DBClusterIds'),
  DBClusterDescription?: string(name='DBClusterDescription'),
  DBClusterStatus?: string(name='DBClusterStatus'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeDBClustersResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  DBClusters?: {
    DBCluster?: [ 
    {
      vpcId?: string(name='VpcId'),
      DBNodeCount?: long(name='DBNodeCount'),
      createTime?: string(name='CreateTime'),
      payType?: string(name='PayType'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      storageType?: string(name='StorageType'),
      port?: int32(name='Port'),
      lockMode?: string(name='LockMode'),
      bid?: string(name='Bid'),
      isExpired?: string(name='IsExpired'),
      vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
      scaleOutStatus?: {
        progress?: string(name='Progress'),
        ratio?: string(name='Ratio'),
      }(name='ScaleOutStatus'),
      DBClusterId?: string(name='DBClusterId'),
      connectionString?: string(name='ConnectionString'),
      commodityCode?: string(name='CommodityCode'),
      expireTime?: string(name='ExpireTime'),
      DBNodeStorage?: long(name='DBNodeStorage'),
      DBNodeClass?: string(name='DBNodeClass'),
      aliUid?: string(name='AliUid'),
      lockReason?: string(name='LockReason'),
      regionId?: string(name='RegionId'),
      vSwitchId?: string(name='VSwitchId'),
      DBClusterStatus?: string(name='DBClusterStatus'),
      DBClusterDescription?: string(name='DBClusterDescription'),
      DBClusterNetworkType?: string(name='DBClusterNetworkType'),
      zoneId?: string(name='ZoneId'),
      category?: string(name='Category'),
    }
  ](name='DBCluster')
  }(name='DBClusters'),
}

model DescribeDBClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClustersResponseBody(name='body'),
}

async function describeDBClustersWithOptions(request: DescribeDBClustersRequest, runtime: Util.RuntimeOptions): DescribeDBClustersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClusters', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClusters(request: DescribeDBClustersRequest): DescribeDBClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClustersWithOptions(request, runtime);
}

model OperateLogHubRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  create?: boolean(name='Create'),
  DBClusterId?: string(name='DBClusterId'),
  projectName?: string(name='ProjectName'),
  logStoreName?: string(name='LogStoreName'),
  deliverName?: string(name='DeliverName'),
  deliverTime?: string(name='DeliverTime'),
  description?: string(name='Description'),
  domainUrl?: string(name='DomainUrl'),
  schemaName?: string(name='SchemaName'),
  tableName?: string(name='TableName'),
  userName?: string(name='UserName'),
  password?: string(name='Password'),
  filterDirtyData?: boolean(name='FilterDirtyData'),
  accessKey?: string(name='AccessKey'),
  accessSecret?: string(name='AccessSecret'),
  useLorne?: boolean(name='UseLorne'),
  taskId?: string(name='TaskId'),
  logHubStores?: [ 
    {
      type?: string(name='Type'),
      logKey?: string(name='LogKey'),
      fieldKey?: string(name='FieldKey'),
    }
  ](name='LogHubStores'),
}

model OperateLogHubResponseBody = {
  requestId?: string(name='RequestId'),
}

model OperateLogHubResponse = {
  headers: map[string]string(name='headers'),
  body: OperateLogHubResponseBody(name='body'),
}

async function operateLogHubWithOptions(request: OperateLogHubRequest, runtime: Util.RuntimeOptions): OperateLogHubResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OperateLogHub', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function operateLogHub(request: OperateLogHubRequest): OperateLogHubResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateLogHubWithOptions(request, runtime);
}

model CheckServiceLinkedRoleRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model CheckServiceLinkedRoleResponseBody = {
  requestId?: string(name='RequestId'),
  hasServiceLinkedRole?: boolean(name='HasServiceLinkedRole'),
}

model CheckServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CheckServiceLinkedRoleResponseBody(name='body'),
}

async function checkServiceLinkedRoleWithOptions(request: CheckServiceLinkedRoleRequest, runtime: Util.RuntimeOptions): CheckServiceLinkedRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckServiceLinkedRole', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkServiceLinkedRole(request: CheckServiceLinkedRoleRequest): CheckServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkServiceLinkedRoleWithOptions(request, runtime);
}

model CreateBackupPolicyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
  backupRetentionPeriod?: string(name='BackupRetentionPeriod'),
}

model CreateBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBackupPolicyResponseBody(name='body'),
}

async function createBackupPolicyWithOptions(request: CreateBackupPolicyRequest, runtime: Util.RuntimeOptions): CreateBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateBackupPolicy', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createBackupPolicy(request: CreateBackupPolicyRequest): CreateBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBackupPolicyWithOptions(request, runtime);
}

model DescribeSchemasRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  schemaName?: string(name='SchemaName'),
  tableName?: string(name='TableName'),
}

model DescribeSchemasResponseBody = {
  requestId?: string(name='RequestId'),
  items?: {
    schema?: [ 
    {
      DBClusterId?: string(name='DBClusterId'),
      schemaName?: string(name='SchemaName'),
    }
  ](name='Schema')
  }(name='Items'),
}

model DescribeSchemasResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSchemasResponseBody(name='body'),
}

async function describeSchemasWithOptions(request: DescribeSchemasRequest, runtime: Util.RuntimeOptions): DescribeSchemasResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSchemas', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSchemas(request: DescribeSchemasRequest): DescribeSchemasResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSchemasWithOptions(request, runtime);
}

model KillProcessRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterId?: string(name='DBClusterId'),
  initialQueryId?: string(name='InitialQueryId'),
}

model KillProcessResponseBody = {
  requestId?: string(name='RequestId'),
}

model KillProcessResponse = {
  headers: map[string]string(name='headers'),
  body: KillProcessResponseBody(name='body'),
}

async function killProcessWithOptions(request: KillProcessRequest, runtime: Util.RuntimeOptions): KillProcessResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('KillProcess', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function killProcess(request: KillProcessRequest): KillProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return killProcessWithOptions(request, runtime);
}

model ModifyDBClusterMaintainTimeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  maintainTime?: string(name='MaintainTime'),
}

model ModifyDBClusterMaintainTimeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterMaintainTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterMaintainTimeResponseBody(name='body'),
}

async function modifyDBClusterMaintainTimeWithOptions(request: ModifyDBClusterMaintainTimeRequest, runtime: Util.RuntimeOptions): ModifyDBClusterMaintainTimeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBClusterMaintainTime', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBClusterMaintainTime(request: ModifyDBClusterMaintainTimeRequest): ModifyDBClusterMaintainTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterMaintainTimeWithOptions(request, runtime);
}

model DescribeBackupsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  backupId?: string(name='BackupId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeBackupsResponseBody = {
  totalCount?: string(name='TotalCount'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: string(name='PageNumber'),
  items?: [ 
    {
      DBClusterId?: string(name='DBClusterId'),
      backupStatus?: string(name='BackupStatus'),
      backupType?: string(name='BackupType'),
      backupStartTime?: string(name='BackupStartTime'),
      backupSize?: int32(name='BackupSize'),
      backupEndTime?: string(name='BackupEndTime'),
      backupSetInfo?: string(name='BackupSetInfo'),
      backupId?: string(name='BackupId'),
      backupMethod?: string(name='BackupMethod'),
    }
  ](name='Items'),
}

model DescribeBackupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupsResponseBody(name='body'),
}

async function describeBackupsWithOptions(request: DescribeBackupsRequest, runtime: Util.RuntimeOptions): DescribeBackupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackups', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackups(request: DescribeBackupsRequest): DescribeBackupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupsWithOptions(request, runtime);
}

model DescribeDBClusterAccessWhiteListRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeDBClusterAccessWhiteListResponseBody = {
  DBClusterAccessWhiteList?: {
    IPArray?: [ 
    {
      DBClusterIPArrayAttribute?: string(name='DBClusterIPArrayAttribute'),
      securityIPList?: string(name='SecurityIPList'),
      DBClusterIPArrayName?: string(name='DBClusterIPArrayName'),
    }
  ](name='IPArray')
  }(name='DBClusterAccessWhiteList'),
  requestId?: string(name='RequestId'),
}

model DescribeDBClusterAccessWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterAccessWhiteListResponseBody(name='body'),
}

async function describeDBClusterAccessWhiteListWithOptions(request: DescribeDBClusterAccessWhiteListRequest, runtime: Util.RuntimeOptions): DescribeDBClusterAccessWhiteListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClusterAccessWhiteList', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClusterAccessWhiteList(request: DescribeDBClusterAccessWhiteListRequest): DescribeDBClusterAccessWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterAccessWhiteListWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: {
    region?: [ 
    {
      zones?: {
        zone?: [ 
        {
          zoneId?: string(name='ZoneId'),
          vpcEnabled?: boolean(name='VpcEnabled'),
        }
      ](name='Zone')
      }(name='Zones'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model ModifyDBClusterDescriptionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  DBClusterDescription?: string(name='DBClusterDescription'),
}

model ModifyDBClusterDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterDescriptionResponseBody(name='body'),
}

async function modifyDBClusterDescriptionWithOptions(request: ModifyDBClusterDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDBClusterDescriptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBClusterDescription', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBClusterDescription(request: ModifyDBClusterDescriptionRequest): ModifyDBClusterDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterDescriptionWithOptions(request, runtime);
}

model DeleteAccountRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  accountName?: string(name='AccountName'),
}

model DeleteAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAccountResponseBody(name='body'),
}

async function deleteAccountWithOptions(request: DeleteAccountRequest, runtime: Util.RuntimeOptions): DeleteAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAccount', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccountWithOptions(request, runtime);
}

model DescribeSlowLogRecordsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterId?: string(name='DBClusterId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  queryDurationMs?: int32(name='QueryDurationMs'),
}

model DescribeSlowLogRecordsResponseBody = {
  requestId?: string(name='RequestId'),
  slowLogRecords?: {
    tableSchema?: {
      resultSet?: [ 
      {
        type?: string(name='Type'),
        name?: string(name='Name'),
      }
    ](name='ResultSet')
    }(name='TableSchema'),
    data?: {
      resultSet?: [ 
      {
        type?: string(name='Type'),
        queryStartTime?: string(name='QueryStartTime'),
        query?: string(name='Query'),
        readRows?: string(name='ReadRows'),
        initialAddress?: string(name='InitialAddress'),
        memoryUsage?: string(name='MemoryUsage'),
        initialUser?: string(name='InitialUser'),
        initialQueryId?: string(name='InitialQueryId'),
        readBytes?: string(name='ReadBytes'),
        queryDurationMs?: string(name='QueryDurationMs'),
        resultBytes?: string(name='ResultBytes'),
      }
    ](name='ResultSet')
    }(name='Data'),
    rows?: string(name='Rows'),
    rowsBeforeLimitAtLeast?: string(name='RowsBeforeLimitAtLeast'),
    statistics?: {
      rowsRead?: int32(name='RowsRead'),
      elapsedTime?: float(name='ElapsedTime'),
      bytesRead?: int32(name='BytesRead'),
    }(name='Statistics'),
  }(name='SlowLogRecords'),
}

model DescribeSlowLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowLogRecordsResponseBody(name='body'),
}

async function describeSlowLogRecordsWithOptions(request: DescribeSlowLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeSlowLogRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSlowLogRecords', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSlowLogRecords(request: DescribeSlowLogRecordsRequest): DescribeSlowLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowLogRecordsWithOptions(request, runtime);
}

model DescribeColumnsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  schemaName?: string(name='SchemaName'),
  tableName?: string(name='TableName'),
}

model DescribeColumnsResponseBody = {
  requestId?: string(name='RequestId'),
  items?: {
    column?: [ 
    {
      type?: string(name='Type'),
      columnName?: string(name='ColumnName'),
      tableName?: string(name='TableName'),
      autoIncrementColumn?: boolean(name='AutoIncrementColumn'),
      DBClusterId?: string(name='DBClusterId'),
      primaryKey?: boolean(name='PrimaryKey'),
      schemaName?: string(name='SchemaName'),
    }
  ](name='Column')
  }(name='Items'),
}

model DescribeColumnsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeColumnsResponseBody(name='body'),
}

async function describeColumnsWithOptions(request: DescribeColumnsRequest, runtime: Util.RuntimeOptions): DescribeColumnsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeColumns', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeColumns(request: DescribeColumnsRequest): DescribeColumnsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeColumnsWithOptions(request, runtime);
}

model ResetAccountPasswordRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
}

model ResetAccountPasswordResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAccountPasswordResponseBody(name='body'),
}

async function resetAccountPasswordWithOptions(request: ResetAccountPasswordRequest, runtime: Util.RuntimeOptions): ResetAccountPasswordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetAccountPassword', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAccountPasswordWithOptions(request, runtime);
}

model DescribeAccountsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  accountName?: string(name='AccountName'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeAccountsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  accounts?: {
    account?: [ 
    {
      accountStatus?: string(name='AccountStatus'),
      accountDescription?: string(name='AccountDescription'),
      accountType?: string(name='AccountType'),
      accountName?: string(name='AccountName'),
    }
  ](name='Account')
  }(name='Accounts'),
}

model DescribeAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccountsResponseBody(name='body'),
}

async function describeAccountsWithOptions(request: DescribeAccountsRequest, runtime: Util.RuntimeOptions): DescribeAccountsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAccounts', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountsWithOptions(request, runtime);
}

model DescribeLorneTasksMetricsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterId?: string(name='DBClusterId'),
  taskId?: string(name='TaskId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  metricName?: string(name='MetricName'),
}

model DescribeLorneTasksMetricsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    values?: [ string ](name='Values'),
    name?: string(name='Name'),
    taskId?: string(name='TaskId'),
    columns?: [ string ](name='Columns'),
  }(name='Data'),
}

model DescribeLorneTasksMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLorneTasksMetricsResponseBody(name='body'),
}

async function describeLorneTasksMetricsWithOptions(request: DescribeLorneTasksMetricsRequest, runtime: Util.RuntimeOptions): DescribeLorneTasksMetricsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLorneTasksMetrics', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLorneTasksMetrics(request: DescribeLorneTasksMetricsRequest): DescribeLorneTasksMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLorneTasksMetricsWithOptions(request, runtime);
}

model CheckScaleOutBalancedRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterId?: string(name='DBClusterId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model CheckScaleOutBalancedResponseBody = {
  totalCount?: int32(name='TotalCount'),
  tableDetails?: {
    tableDetail?: [ 
    {
      tableName?: string(name='TableName'),
      cluster?: string(name='Cluster'),
      database?: string(name='Database'),
      detail?: int32(name='Detail'),
    }
  ](name='TableDetail')
  }(name='TableDetails'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  checkCode?: string(name='CheckCode'),
  timeDuration?: string(name='TimeDuration'),
}

model CheckScaleOutBalancedResponse = {
  headers: map[string]string(name='headers'),
  body: CheckScaleOutBalancedResponseBody(name='body'),
}

async function checkScaleOutBalancedWithOptions(request: CheckScaleOutBalancedRequest, runtime: Util.RuntimeOptions): CheckScaleOutBalancedResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckScaleOutBalanced', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkScaleOutBalanced(request: CheckScaleOutBalancedRequest): CheckScaleOutBalancedResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkScaleOutBalancedWithOptions(request, runtime);
}

model AllocateClusterPublicConnectionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix'),
}

model AllocateClusterPublicConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model AllocateClusterPublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateClusterPublicConnectionResponseBody(name='body'),
}

async function allocateClusterPublicConnectionWithOptions(request: AllocateClusterPublicConnectionRequest, runtime: Util.RuntimeOptions): AllocateClusterPublicConnectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AllocateClusterPublicConnection', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function allocateClusterPublicConnection(request: AllocateClusterPublicConnectionRequest): AllocateClusterPublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateClusterPublicConnectionWithOptions(request, runtime);
}

model DescribeAllDataSourceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  schemaName?: string(name='SchemaName'),
  tableName?: string(name='TableName'),
}

model DescribeAllDataSourceResponseBody = {
  requestId?: string(name='RequestId'),
  tables?: {
    table?: [ 
    {
      tableName?: string(name='TableName'),
      DBClusterId?: string(name='DBClusterId'),
      schemaName?: string(name='SchemaName'),
    }
  ](name='Table')
  }(name='Tables'),
  columns?: {
    column?: [ 
    {
      type?: string(name='Type'),
      columnName?: string(name='ColumnName'),
      tableName?: string(name='TableName'),
      autoIncrementColumn?: boolean(name='AutoIncrementColumn'),
      DBClusterId?: string(name='DBClusterId'),
      primaryKey?: boolean(name='PrimaryKey'),
      schemaName?: string(name='SchemaName'),
    }
  ](name='Column')
  }(name='Columns'),
  schemas?: {
    schema?: [ 
    {
      DBClusterId?: string(name='DBClusterId'),
      schemaName?: string(name='SchemaName'),
    }
  ](name='Schema')
  }(name='Schemas'),
}

model DescribeAllDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAllDataSourceResponseBody(name='body'),
}

async function describeAllDataSourceWithOptions(request: DescribeAllDataSourceRequest, runtime: Util.RuntimeOptions): DescribeAllDataSourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAllDataSource', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAllDataSource(request: DescribeAllDataSourceRequest): DescribeAllDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAllDataSourceWithOptions(request, runtime);
}

model DescribeBackupPolicyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeBackupPolicyResponseBody = {
  preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
  switch?: string(name='Switch'),
  requestId?: string(name='RequestId'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
  backupRetentionPeriod?: int32(name='BackupRetentionPeriod'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicyWithOptions(request: DescribeBackupPolicyRequest, runtime: Util.RuntimeOptions): DescribeBackupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupPolicy', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPolicyWithOptions(request, runtime);
}

model DescribeDBClusterNetInfoItemsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
}

model DescribeDBClusterNetInfoItemsResponseBody = {
  netInfoItems?: {
    netInfoItem?: [ 
    {
      vpcId?: string(name='VpcId'),
      vSwitchId?: string(name='VSwitchId'),
      connectionString?: string(name='ConnectionString'),
      jdbcPort?: string(name='JdbcPort'),
      netType?: string(name='NetType'),
      httpPort?: string(name='HttpPort'),
      IPAddress?: string(name='IPAddress'),
    }
  ](name='NetInfoItem')
  }(name='NetInfoItems'),
  clusterNetworkType?: string(name='ClusterNetworkType'),
  requestId?: string(name='RequestId'),
}

model DescribeDBClusterNetInfoItemsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterNetInfoItemsResponseBody(name='body'),
}

async function describeDBClusterNetInfoItemsWithOptions(request: DescribeDBClusterNetInfoItemsRequest, runtime: Util.RuntimeOptions): DescribeDBClusterNetInfoItemsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDBClusterNetInfoItems', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDBClusterNetInfoItems(request: DescribeDBClusterNetInfoItemsRequest): DescribeDBClusterNetInfoItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterNetInfoItemsWithOptions(request, runtime);
}

model DescribeLoghubDetailRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  projectName?: string(name='ProjectName'),
  exportName?: string(name='ExportName'),
}

model DescribeLoghubDetailResponseBody = {
  requestId?: string(name='RequestId'),
  loghubInfo?: {
    accessKey?: string(name='AccessKey'),
    tableName?: string(name='TableName'),
    accessSecret?: string(name='AccessSecret'),
    logHubStores?: {
      logHubStore?: [ 
      {
        type?: string(name='Type'),
        logKey?: string(name='LogKey'),
        fieldKey?: string(name='FieldKey'),
      }
    ](name='LogHubStore')
    }(name='LogHubStores'),
    projectName?: string(name='ProjectName'),
    schemaName?: string(name='SchemaName'),
    DBType?: string(name='DBType'),
    deliverName?: string(name='DeliverName'),
    regionId?: string(name='RegionId'),
    password?: string(name='Password'),
    DBClusterId?: string(name='DBClusterId'),
    description?: string(name='Description'),
    filterDirtyData?: boolean(name='FilterDirtyData'),
    zoneId?: string(name='ZoneId'),
    logStoreName?: string(name='LogStoreName'),
    userName?: string(name='UserName'),
    domainUrl?: string(name='DomainUrl'),
    deliverTime?: string(name='DeliverTime'),
  }(name='LoghubInfo'),
}

model DescribeLoghubDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLoghubDetailResponseBody(name='body'),
}

async function describeLoghubDetailWithOptions(request: DescribeLoghubDetailRequest, runtime: Util.RuntimeOptions): DescribeLoghubDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLoghubDetail', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLoghubDetail(request: DescribeLoghubDetailRequest): DescribeLoghubDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLoghubDetailWithOptions(request, runtime);
}

model ModifyDBClusterRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  DBNodeGroupCount?: string(name='DBNodeGroupCount'),
  DBNodeStorage?: string(name='DBNodeStorage'),
  DBClusterClass?: string(name='DBClusterClass'),
  regionId?: string(name='RegionId'),
}

model ModifyDBClusterResponseBody = {
  DBCluster?: string(name='DBCluster'),
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterResponseBody(name='body'),
}

async function modifyDBClusterWithOptions(request: ModifyDBClusterRequest, runtime: Util.RuntimeOptions): ModifyDBClusterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBCluster', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBCluster(request: ModifyDBClusterRequest): ModifyDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterWithOptions(request, runtime);
}

model DescribeLogHubAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterId?: string(name='DBClusterId'),
  projectName?: string(name='ProjectName'),
  logStoreName?: string(name='LogStoreName'),
  deliverName?: string(name='DeliverName'),
  taskId?: string(name='TaskId'),
}

model DescribeLogHubAttributeResponseBody = {
  requestId?: string(name='RequestId'),
  loghubInfo?: {
    tableName?: string(name='TableName'),
    logHubStores?: {
      logHubStore?: [ 
      {
        type?: string(name='Type'),
        logKey?: string(name='LogKey'),
        fieldKey?: string(name='FieldKey'),
      }
    ](name='LogHubStore')
    }(name='LogHubStores'),
    projectName?: string(name='ProjectName'),
    schemaName?: string(name='SchemaName'),
    DBType?: string(name='DBType'),
    deliverName?: string(name='DeliverName'),
    regionId?: string(name='RegionId'),
    password?: string(name='Password'),
    DBClusterId?: string(name='DBClusterId'),
    description?: string(name='Description'),
    filterDirtyData?: string(name='FilterDirtyData'),
    zoneId?: string(name='ZoneId'),
    logStoreName?: string(name='LogStoreName'),
    userName?: string(name='UserName'),
    id?: string(name='Id'),
    domainUrl?: string(name='DomainUrl'),
    deliverTime?: string(name='DeliverTime'),
  }(name='LoghubInfo'),
}

model DescribeLogHubAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLogHubAttributeResponseBody(name='body'),
}

async function describeLogHubAttributeWithOptions(request: DescribeLogHubAttributeRequest, runtime: Util.RuntimeOptions): DescribeLogHubAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLogHubAttribute', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLogHubAttribute(request: DescribeLogHubAttributeRequest): DescribeLogHubAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogHubAttributeWithOptions(request, runtime);
}

model ModifyDBClusterAccessWhiteListRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  DBClusterId?: string(name='DBClusterId'),
  securityIps?: string(name='SecurityIps'),
  DBClusterIPArrayName?: string(name='DBClusterIPArrayName'),
  DBClusterIPArrayAttribute?: string(name='DBClusterIPArrayAttribute'),
  modifyMode?: string(name='ModifyMode'),
}

model ModifyDBClusterAccessWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterAccessWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterAccessWhiteListResponseBody(name='body'),
}

async function modifyDBClusterAccessWhiteListWithOptions(request: ModifyDBClusterAccessWhiteListRequest, runtime: Util.RuntimeOptions): ModifyDBClusterAccessWhiteListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBClusterAccessWhiteList', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBClusterAccessWhiteList(request: ModifyDBClusterAccessWhiteListRequest): ModifyDBClusterAccessWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterAccessWhiteListWithOptions(request, runtime);
}

model CreateAccountAndAuthorityRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  DBClusterId?: string(name='DBClusterId'),
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
  accountDescription?: string(name='AccountDescription'),
  dmlAuthority?: string(name='DmlAuthority'),
  ddlAuthority?: boolean(name='DdlAuthority'),
  allowDatabases?: string(name='AllowDatabases'),
  totalDatabases?: string(name='TotalDatabases'),
  allowDictionaries?: string(name='AllowDictionaries'),
  totalDictionaries?: string(name='TotalDictionaries'),
}

model CreateAccountAndAuthorityResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateAccountAndAuthorityResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAccountAndAuthorityResponseBody(name='body'),
}

async function createAccountAndAuthorityWithOptions(request: CreateAccountAndAuthorityRequest, runtime: Util.RuntimeOptions): CreateAccountAndAuthorityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAccountAndAuthority', '2019-11-11', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAccountAndAuthority(request: CreateAccountAndAuthorityRequest): CreateAccountAndAuthorityResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccountAndAuthorityWithOptions(request, runtime);
}

