/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'clickhouse';
  @version = '2019-11-11';
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-2-pop' = 'clickhouse.aliyuncs.com',
    'ap-southeast-1' = 'clickhouse.aliyuncs.com',
    'cn-beijing' = 'clickhouse.aliyuncs.com',
    'cn-beijing-finance-1' = 'clickhouse.aliyuncs.com',
    'cn-beijing-finance-pop' = 'clickhouse.aliyuncs.com',
    'cn-beijing-gov-1' = 'clickhouse.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'clickhouse.aliyuncs.com',
    'cn-edge-1' = 'clickhouse.aliyuncs.com',
    'cn-fujian' = 'clickhouse.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'clickhouse.aliyuncs.com',
    'cn-hangzhou' = 'clickhouse.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'clickhouse.aliyuncs.com',
    'cn-hangzhou-finance' = 'clickhouse.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'clickhouse.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'clickhouse.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'clickhouse.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'clickhouse.aliyuncs.com',
    'cn-hangzhou-test-306' = 'clickhouse.aliyuncs.com',
    'cn-hongkong' = 'clickhouse.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'clickhouse.aliyuncs.com',
    'cn-north-2-gov-1' = 'clickhouse.aliyuncs.com',
    'cn-qingdao' = 'clickhouse.aliyuncs.com',
    'cn-qingdao-nebula' = 'clickhouse.aliyuncs.com',
    'cn-shanghai' = 'clickhouse.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'clickhouse.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'clickhouse.aliyuncs.com',
    'cn-shanghai-finance-1' = 'clickhouse.aliyuncs.com',
    'cn-shanghai-inner' = 'clickhouse.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'clickhouse.aliyuncs.com',
    'cn-shenzhen' = 'clickhouse.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'clickhouse.aliyuncs.com',
    'cn-shenzhen-inner' = 'clickhouse.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'clickhouse.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'clickhouse.aliyuncs.com',
    'cn-wuhan' = 'clickhouse.aliyuncs.com',
    'cn-yushanfang' = 'clickhouse.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'clickhouse.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'clickhouse.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'clickhouse.aliyuncs.com',
    'eu-west-1-oxs' = 'clickhouse.aliyuncs.com',
    'me-east-1' = 'clickhouse.aliyuncs.com',
    'rus-west-1-pop' = 'clickhouse.aliyuncs.com',
    'us-east-1' = 'clickhouse.aliyuncs.com',
    'us-west-1' = 'clickhouse.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AllocateClusterPublicConnectionRequest {
  connectionStringPrefix?: string(name='ConnectionStringPrefix', description='The prefix of the endpoint that is used to connect to the database. Set the value to the cluster ID.', example='cc-bp108z124a8o7****', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AllocateClusterPublicConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D0CEC6AC-7760-409A-A0D5-E6CD8660E9CC'),
}

model AllocateClusterPublicConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AllocateClusterPublicConnectionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AllocateClusterPublicConnection  AllocateClusterPublicConnectionRequest
  * @return AllocateClusterPublicConnectionResponse
 */
async function allocateClusterPublicConnection(request: AllocateClusterPublicConnectionRequest): AllocateClusterPublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateClusterPublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model CheckClickhouseToRDSRequest {
  ckPassword: string(name='CkPassword', description='The password of the account that is used to log on to the database in the ApsaraDB for ClickHouse cluster.

This parameter is required.', example='123456Aa', position='Query'),
  ckUserName: string(name='CkUserName', description='The account that is used to log on to the database in the ApsaraDB for ClickHouse cluster.

This parameter is required.', example='user1', position='Query'),
  clickhousePort?: long(name='ClickhousePort', description='The port number of the ApsaraDB for ClickHouse cluster.', example='8123', position='Query'),
  dbClusterId: string(name='DbClusterId', description='The ID of the ApsaraDB for ClickHouse cluster.

This parameter is required.', example='cc-2zeyy362b5sbm****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  rdsId: string(name='RdsId', description='The ID of the ApsaraDB RDS for MySQL instance.

This parameter is required.', example='rm-bp13v4bnwlu8j****', position='Query'),
  rdsPassword: string(name='RdsPassword', description='The password of the account that is used to log on to the database in the ApsaraDB RDS for MySQL instance.

This parameter is required.', example='123456Rr', position='Query'),
  rdsPort?: long(name='RdsPort', description='The port number of the ApsaraDB RDS for MySQL instance.', example='3306', position='Query'),
  rdsUserName: string(name='RdsUserName', description='The account that is used to log on to the database in the ApsaraDB RDS for MySQL instance.

This parameter is required.', example='user2', position='Query'),
  rdsVpcId: string(name='RdsVpcId', description='The ID of the VPC in which the ApsaraDB RDS for MySQL instance is deployed.

This parameter is required.', example='vpc-wz9mm0qka0winfl47****', position='Query'),
  rdsVpcUrl: string(name='RdsVpcUrl', description='The internal endpoint of the ApsaraDB RDS for MySQL instance.

This parameter is required.', example='rm-bp16t9h3999xb0a7****.mysql.rds.aliyuncs.com', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CheckClickhouseToRDSResponseBody = {
  errorCode?: string(name='ErrorCode', description='*   When the value **true** is returned for the **Status** parameter, the system does not return the ErrorCode parameter.
*   When the value **false** is returned for the **Status** parameter, the system returns for the ErrorCode parameter the reason why the ApsaraDB for ClickHouse cluster cannot be connected to the ApsaraDB RDS for MySQL instance.', example='NotSameVpc'),
  requestId?: string(name='RequestId', description='The request ID.', example='A82758F8-E793-5610-BE11-0E46664305C2'),
  status?: boolean(name='Status', description='Indicates whether the ApsaraDB for ClickHouse cluster can be connected to the ApsaraDB RDS for MySQL instance.

*   **true**: The ApsaraDB for ClickHouse cluster can be connected to the ApsaraDB RDS for MySQL instance.
*   **false**: The ApsaraDB for ClickHouse cluster cannot be connected to the ApsaraDB RDS for MySQL instance.', example='false'),
}

model CheckClickhouseToRDSResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckClickhouseToRDSResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckClickhouseToRDS  CheckClickhouseToRDSRequest
  * @return CheckClickhouseToRDSResponse
 */
async function checkClickhouseToRDS(request: CheckClickhouseToRDSRequest): CheckClickhouseToRDSResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckClickhouseToRDS', 'POST', '/', 'json', false, 'json', request);
}

model CheckModifyConfigNeedRestartRequest {
  config: string(name='Config', description='The configuration parameters whose settings are modified.

This parameter is required.', example='<?xml version="1.0"?>
<yandex>
    <keep_alive_timeout>400</keep_alive_timeout>
    <listen_backlog>4096</listen_backlog>
    <logger>
        <level>debug</level>
        <size>1000M</size>
    </logger>
    <mark_cache_size>5368709120</mark_cache_size>
    <max_concurrent_queries>201</max_concurrent_queries>
    <max_connections>4096</max_connections>
    <max_partition_size_to_drop>0</max_partition_size_to_drop>
    <max_table_size_to_drop>0</max_table_size_to_drop>
    <merge_tree>
        <max_delay_to_insert>256</max_delay_to_insert>
        <max_part_loading_threads>auto</max_part_loading_threads>
        <max_suspicious_broken_parts>100</max_suspicious_broken_parts>
        <zookeeper_session_expiration_check_period>1</zookeeper_session_expiration_check_period>
    </merge_tree>
    <uncompressed_cache_size>1717986918</uncompressed_cache_size>
</yandex>', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The cluster ID. You can call the [DescribeDBClusters](https://help.aliyun.com/document_detail/170879.html) operation to query information about all the clusters that are deployed in a specific region. The information includes the cluster IDs.

This parameter is required.', example='cc-bp1tm8zf130ew****', position='Query'),
}

model CheckModifyConfigNeedRestartResponseBody = {
  needRestart?: boolean(name='NeedRestart', description='Indicates whether the cluster was restarted after you modified the configuration parameters. Valid values:

*   **true**: The cluster was restarted.
*   **false**: The cluster was not restarted.', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='06798FEE-BEF2-5FAF-A30D-728973BBE97C'),
}

model CheckModifyConfigNeedRestartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckModifyConfigNeedRestartResponseBody(name='body'),
}

/**
  * @description >  You can call this operation only for ApsaraDB for ClickHouse clusters that were created after December 1, 2021.
  * @param request  the request parameters of CheckModifyConfigNeedRestart  CheckModifyConfigNeedRestartRequest
  * @return CheckModifyConfigNeedRestartResponse
 */
async function checkModifyConfigNeedRestart(request: CheckModifyConfigNeedRestartRequest): CheckModifyConfigNeedRestartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckModifyConfigNeedRestart', 'POST', '/', 'json', false, 'json', request);
}

model CheckMonitorAlertRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp13s14l8498l****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/170875.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CheckMonitorAlertResponseBody = {
  parameter?: string(name='Parameter', description='The parameters that are used to configure the monitoring and alerting feature.', example='{   "monitor":{     "key1":"value1",     "key2":"value2"   },   "alert":{     "key1":"value1",     "key2":"value2"   } }'),
  requestId?: string(name='RequestId', description='The request ID.', example='94F92113-FF63-5E57-8401-6FE123AD11DD'),
  state?: string(name='State', description='Indicates whether the monitoring and alerting feature is enabled. Valid values:

*   **enable**: The monitoring and alerting feature is enabled.
*   **disable**: The monitoring and alerting feature is disabled.', example='enable'),
}

model CheckMonitorAlertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckMonitorAlertResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckMonitorAlert  CheckMonitorAlertRequest
  * @return CheckMonitorAlertResponse
 */
async function checkMonitorAlert(request: CheckMonitorAlertRequest): CheckMonitorAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckMonitorAlert', 'POST', '/', 'json', false, 'json', request);
}

model CheckScaleOutBalancedRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The total number of returned pages.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Valid values:

*   **30** (default)
*   **50**
*   **100**', example='30', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/170875.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CheckScaleOutBalancedResponseBody = {
  checkCode?: string(name='CheckCode', description='The check result. Valid values:

*   **400**: The cluster failed the check.
*   **200**: The cluster passed the check.', example='400'),
  pageNumber?: int32(name='PageNumber', description='The total number of returned pages.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Valid values:

*   **30** (default)
*   **50**
*   **100**', example='30'),
  requestId?: string(name='RequestId', description='The request ID.', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
  tableDetails?: {
    tableDetail?: [ 
    {
      cluster?: string(name='Cluster', description='The cluster. The value is fixed as **default**.', example='default'),
      database?: string(name='Database', description='The database name.', example='db_name'),
      detail?: int32(name='Detail', description='The error details. Valid values:

*   **1**: The unique distributed table is missing.
*   **2**: More than one distributed table exists for the local table.', example='1'),
      tableName?: string(name='TableName', description='The name of the local table.', example='test'),
    }
  ](name='TableDetail')
  }(name='TableDetails', description='The error information returned for a check failure.'),
  timeDuration?: string(name='TimeDuration', description='The amount of time that is required for the migration and scale-out. Unit: minutes.', example='21'),
  totalCount?: int32(name='TotalCount', description='The total number of entries that are returned.', example='1'),
}

model CheckScaleOutBalancedResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckScaleOutBalancedResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckScaleOutBalanced  CheckScaleOutBalancedRequest
  * @return CheckScaleOutBalancedResponse
 */
async function checkScaleOutBalanced(request: CheckScaleOutBalancedRequest): CheckScaleOutBalancedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckScaleOutBalanced', 'POST', '/', 'json', false, 'json', request);
}

model CheckServiceLinkedRoleRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CheckServiceLinkedRoleResponseBody = {
  hasServiceLinkedRole?: boolean(name='HasServiceLinkedRole', description='The role.', example='xxxx'),
  requestId?: string(name='RequestId', description='The request ID.', example='xxx'),
}

model CheckServiceLinkedRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckServiceLinkedRoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckServiceLinkedRole  CheckServiceLinkedRoleRequest
  * @return CheckServiceLinkedRoleResponse
 */
async function checkServiceLinkedRole(request: CheckServiceLinkedRoleRequest): CheckServiceLinkedRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckServiceLinkedRole', 'POST', '/', 'json', false, 'json', request);
}

model CreateAccountRequest {
  accountDescription?: string(name='AccountDescription', description='The description of the database account.

> 

*   The description cannot start with http:// or https://.

*   The description must be 0 to 256 characters in length.', example='ceshi', position='Query'),
  accountName: string(name='AccountName', description='The name of the database account.

> 

*   The name must be unique in the cluster.

*   The name can contain lowercase letters, digits, and underscores (_).
*   The name must start with a lowercase letter and end with a lowercase letter or a digit.
*   The name must be 2 to 64 characters in length.

This parameter is required.', example='test', position='Query'),
  accountPassword: string(name='AccountPassword', description='The password of the database account.

> 

*   The password must contain at least three types of the following characters: uppercase letters, lowercase letters, digits, and special characters.

*   The password can contain the following special characters: ! @ # $ % ^ & \\* ( ) _ + - =
*   The password must be 8 to 32 characters in length.

This parameter is required.', example='123789Ff!', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateAccountResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='2FED790E-FB61-4721-8C1C-07C627FA5A19'),
}

model CreateAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAccount  CreateAccountRequest
  * @return CreateAccountResponse
 */
async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateAccountAndAuthorityRequest {
  accountDescription?: string(name='AccountDescription', example='ceshi', position='Query'),
  accountName: string(name='AccountName', description='This parameter is required.', example='test', position='Query'),
  accountPassword: string(name='AccountPassword', description='This parameter is required.', example='123456Aa', position='Query'),
  allowDatabases: string(name='AllowDatabases', description='This parameter is required.', example='db1', position='Query'),
  allowDictionaries: string(name='AllowDictionaries', description='This parameter is required.', example='dt1', position='Query'),
  DBClusterId: string(name='DBClusterId', description='This parameter is required.', example='cc-bp1p816075e21****', position='Query'),
  ddlAuthority: boolean(name='DdlAuthority', description='This parameter is required.', example='true', position='Query'),
  dmlAuthority: string(name='DmlAuthority', description='This parameter is required.', example='all', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  totalDatabases?: string(name='TotalDatabases', example='db1,db2', position='Query'),
  totalDictionaries?: string(name='TotalDictionaries', example='dt1,dt2', position='Query'),
}

model CreateAccountAndAuthorityResponseBody = {
  requestId?: string(name='RequestId', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
}

model CreateAccountAndAuthorityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAccountAndAuthorityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAccountAndAuthority  CreateAccountAndAuthorityRequest
  * @return CreateAccountAndAuthorityResponse
 */
async function createAccountAndAuthority(request: CreateAccountAndAuthorityRequest): CreateAccountAndAuthorityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccountAndAuthority', 'POST', '/', 'json', false, 'json', request);
}

model CreateBackupPolicyRequest {
  backupRetentionPeriod?: string(name='BackupRetentionPeriod', description='The retention period for the backup data. By default, the backup data is retained for seven days. Valid values: 7 to 730. Unit: day.', example='8', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  preferredBackupPeriod: string(name='PreferredBackupPeriod', description='The day of a week when the system regularly backs up data. If you specify multiple days of a week, separate them with commas (,). Valid values:

*   **Monday**
*   **Tuesday**
*   **Wednesday**
*   **Thursday**
*   **Friday**
*   **Saturday**
*   **Sunday**

This parameter is required.', example='Monday,Friday', position='Query'),
  preferredBackupTime: string(name='PreferredBackupTime', description='The backup window. Specify the time in the ISO 8601 standard in the HH:mmZ-HH:mmZ format. The time must be in Coordinated Universal Time (UTC).

For example, if you set the backup window to 00:00Z-01:00Z, the data of the cluster can be backed up from 08:00 (UTC+8) to 09:00 (UTC+8).

This parameter is required.', example='10:00Z-11:00Z', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/170875.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateBackupPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
}

model CreateBackupPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateBackupPolicyResponseBody(name='body'),
}

/**
  * @description >  This operation is available only for the ApsaraDB for ClickHouse clusters of versions 20.3, 20.8, and 21.8.
  * @param request  the request parameters of CreateBackupPolicy  CreateBackupPolicyRequest
  * @return CreateBackupPolicyResponse
 */
async function createBackupPolicy(request: CreateBackupPolicyRequest): CreateBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBInstanceRequest {
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal.

>  This parameter is valid only if the value of PayType is set to Prepaid.', example='false', position='Query'),
  backupSetID?: string(name='BackupSetID', description='The ID of the backup set. You can call the [DescribeBackups](https://help.aliyun.com/document_detail/360339.html) operation to query the backup sets.

>  If you want to restore the data of an ApsaraDB for ClickHouse cluster, this parameter is required.', example='b-12af23adsf', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. The value is a string and can be up to 64 ASCII characters in length.', example='AB', position='Query'),
  DBClusterCategory: string(name='DBClusterCategory', description='The edition of the cluster. Valid values:

*   **Basic**: Single-replica Edition
*   **HighAvailability**: Double-replica Edition

This parameter is required.', example='Basic', position='Query'),
  DBClusterClass: string(name='DBClusterClass', description='The specifications of the cluster.

*   Valid values when the cluster is of Single-replica Edition: 

    - **S4**: 4 CPU cores and 16 GB of memory 
    - **S8**: 8 CPU cores and 32 GB of memory
    -  **S16**: 16 CPU cores and 64 GB of memory
    *   **S32**: 32 CPU cores and 128 GB of memory
    *   **S64**: 64 CPU cores and 256 GB of memory
    *   **S104**: 104 CPU cores and 384 GB of memory

*   Valid values when the cluster is of Double-replica Edition: 

    - **C4**: 4 CPU cores and 16 GB of memory 
    - **C8**: 8 CPU cores and 32 GB of memory 
    - **C16**: 16 CPU cores and 64 GB of memory 
    - **C32**: 32 CPU cores and 128 GB of memory 
    - **C64**: 64 CPU cores and 256 GB of memory 
    - **C104**: 104 CPU cores and 384 GB of memory

This parameter is required.', example='S8', position='Query'),
  DBClusterDescription?: string(name='DBClusterDescription', description='The description of the cluster.', example='test', position='Query'),
  DBClusterNetworkType: string(name='DBClusterNetworkType', description='The network type of the cluster. Only Virtual Private Cloud (VPC) is supported.

This parameter is required.', example='VPC', position='Query'),
  DBClusterVersion: string(name='DBClusterVersion', description='The kernel version. Valid values:

*   **21.8.10.19**
*   **22.8.5.29**

This parameter is required.', example='21.8.10.19', position='Query'),
  DBNodeGroupCount: string(name='DBNodeGroupCount', description='The number of nodes.

*   Valid values when the cluster is of Single-replica Edition: 1 to 48.
*   Valid values when the cluster is of Double-replica Edition: 1 to 24.

This parameter is required.', example='1', position='Query'),
  DBNodeStorage: string(name='DBNodeStorage', description='The storage capacity of a single node. Valid values: 100 to 32000. Unit: GB.

>  This value is a multiple of 100.

This parameter is required.', example='100', position='Query'),
  dbNodeStorageType: string(name='DbNodeStorageType', description='The storage type of the cluster. Valid values:

*   **CloudESSD**: The cluster uses an enhanced SSD (ESSD) of performance level 1 (PL1).
*   **CloudESSD_PL2**: The cluster uses an ESSD of PL2.
*   **CloudESSD_PL3**: The cluster uses an ESSD of PL3.
*   **CloudEfficiency**: The cluster uses an ultra disk.

This parameter is required.', example='CloudESSD_PL2', position='Query'),
  encryptionKey?: string(name='EncryptionKey', description='You must specify this parameter when EncryptionType is set to CloudDisk.

The ID of the key that is used to encrypt data on disks. You can obtain the ID of the key from the Key Management Service (KMS) console. You can also create a key.

>  If EncryptionType is empty, you do not need to specify this parameter.', example='0d2470df-da7b-4786-b981-9a164dae****', position='Query'),
  encryptionType?: string(name='EncryptionType', description='The encryption type. Set the value to **CloudDisk**, which indicates that only disk encryption is supported.

>  If this parameter is not specified, data is not encrypted.', example='CloudDisk', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  payType: string(name='PayType', description='The billing method of the cluster. Valid values:

*   **Postpaid**: The cluster uses the pay-as-you-go billing method.
*   **Prepaid**: The cluster uses the subscription billing method.

This parameter is required.', example='Prepaid', position='Query'),
  period?: string(name='Period', description='The unit of the subscription duration. This parameter is required when PayType is set to Prepaid.

Valid values:

*   **Year**
*   **Month**', example='Month', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/170875.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the cluster belongs.', example='rg-4690g37929****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceDBClusterId?: string(name='SourceDBClusterId', description='The ID of the source cluster. You can call the [DescribeDBClusters](https://help.aliyun.com/document_detail/170879.html) operation to query backup set IDs.

>  If you want to restore the data of an ApsaraDB for ClickHouse cluster, this parameter is required.', example='cc-bp1lxbo89u950****', position='Query'),
  usedTime?: string(name='UsedTime', description='The subscription duration of the subscription cluster. This parameter is required when PayType is set to Prepaid.

Valid values:

*   If Period is set to Year, the value of UsedTime must be an integer that ranges from 1 to 3.
*   If Period is set to Month, the value of UsedTime must be an integer that ranges from 1 to 9.', example='1', position='Query'),
  VPCId: string(name='VPCId', description='The VPC ID.

This parameter is required.', example='vpc-bp175iuvg8nxqraf2****', position='Query'),
  vSwitchBak?: string(name='VSwitchBak', description='The vSwitch in the secondary zone for the VPC.', example='vsw-bp1gzt31twhlo0sa5****', position='Query'),
  vSwitchBak2?: string(name='VSwitchBak2', description='The vSwitch in secondary zone 2 for the VPC.', example='vsw-bp1gzt31twhlo0sa5****', position='Query'),
  vSwitchId: string(name='VSwitchId', description='The vSwitch ID.

This parameter is required.', example='vsw-bp1gzt31twhlo0sa5****', position='Query'),
  zondIdBak2?: string(name='ZondIdBak2', description='Secondary zone 2.', example='cn-hangzhou-j', position='Query'),
  zoneId?: string(name='ZoneId', description='The zone ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/170875.html) operation to query the most recent zone list.', example='cn-hangzhou-h', position='Query'),
  zoneIdBak?: string(name='ZoneIdBak', description='The secondary zone.', example='cn-hangzhou-k', position='Query'),
}

model CreateDBInstanceResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The cluster ID.', example='cc-bp1qx68m06981****'),
  orderId?: string(name='OrderId', description='The order ID.', example='21137950671****'),
  requestId?: string(name='RequestId', description='The request ID.', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
}

model CreateDBInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDBInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDBInstance  CreateDBInstanceRequest
  * @return CreateDBInstanceResponse
 */
async function createDBInstance(request: CreateDBInstanceRequest): CreateDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateMonitorDataReportRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp13s14l8498l****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/170875.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateMonitorDataReportResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='94F92113-FF63-5E57-8401-6FE123AD11DD'),
}

model CreateMonitorDataReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMonitorDataReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateMonitorDataReport  CreateMonitorDataReportRequest
  * @return CreateMonitorDataReportResponse
 */
async function createMonitorDataReport(request: CreateMonitorDataReportRequest): CreateMonitorDataReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMonitorDataReport', 'POST', '/', 'json', false, 'json', request);
}

model CreateOSSStorageRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp1z3a2hc8dmt****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/170875.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateOSSStorageResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1F488A93-83FD-540F-9B67-0333AF64E6A0'),
}

model CreateOSSStorageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOSSStorageResponseBody(name='body'),
}

/**
  * @description Only an ApsaraDB for ClickHouse cluster of V20.8 or later supports tiered storage of hot data and cold data. If your data is in an ApsaraDB for ClickHouse cluster of a version earlier than V20.8 and you want to use tiered storage of hot data and cold data to store the data, you can migrate the data to an ApsaraDB for ClickHouse cluster of V20.8 or later and use tiered storage of hot data and cold data. For more information about how to migrate data between ApsaraDB for ClickHouse clusters, see [Migrate data between ApsaraDB for ClickHouse clusters](https://help.aliyun.com/document_detail/276926.html).
  * @param request  the request parameters of CreateOSSStorage  CreateOSSStorageRequest
  * @return CreateOSSStorageResponse
 */
async function createOSSStorage(request: CreateOSSStorageRequest): CreateOSSStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOSSStorage', 'POST', '/', 'json', false, 'json', request);
}

model CreatePortsForClickHouseRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  portType: string(name='PortType', description='The port type. Set the value to mysql_port.

This parameter is required.', example='mysql_port', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/170875.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreatePortsForClickHouseResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='2FED790E-FB61-4721-8C1C-07C627FA5A19'),
}

model CreatePortsForClickHouseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePortsForClickHouseResponseBody(name='body'),
}

/**
  * @description >  For an ApsaraDB for ClickHouse cluster of V20.8 or later that was created before December 1, 2021, you must manually enable the MySQL port. For an ApsaraDB for ClickHouse cluster of V20.8 or later that was created after December 1, 2021, the MySQL port is automatically enabled.
  * @param request  the request parameters of CreatePortsForClickHouse  CreatePortsForClickHouseRequest
  * @return CreatePortsForClickHouseResponse
 */
async function createPortsForClickHouse(request: CreatePortsForClickHouseRequest): CreatePortsForClickHouseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePortsForClickHouse', 'POST', '/', 'json', false, 'json', request);
}

model CreateRDSToClickhouseDbRequest {
  ckPassword: string(name='CkPassword', description='The password of the account that is used to log on to the database in the ApsaraDB for ClickHouse cluster.

This parameter is required.', example='123456Aa', position='Query'),
  ckUserName: string(name='CkUserName', description='The account that is used to log on to the database in the ApsaraDB for ClickHouse cluster.

This parameter is required.', example='user1', position='Query'),
  clickhousePort?: long(name='ClickhousePort', description='The port number of the ApsaraDB for ClickHouse cluster.', example='8123', position='Query'),
  dbClusterId: string(name='DbClusterId', description='The ID of the ApsaraDB for ClickHouse cluster.

This parameter is required.', example='cc-2ze5zeyl72188****', position='Query'),
  limitUpper?: long(name='LimitUpper', description='The maximum number of rows that can be synchronized per second.', example='50000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  rdsId: string(name='RdsId', description='The ID of the ApsaraDB RDS for MySQL instance.

This parameter is required.', example='rm-8vb989qj9roh0****', position='Query'),
  rdsPassword: string(name='RdsPassword', description='The password of the account that is used to log on to the ApsaraDB RDS for MySQL instance.

This parameter is required.', example='123456Rr', position='Query'),
  rdsPort?: long(name='RdsPort', description='The port number of the ApsaraDB RDS for MySQL instance.', example='3306', position='Query'),
  rdsUserName: string(name='RdsUserName', description='The account that is used to log on to the database in the ApsaraDB RDS for MySQL instance.

This parameter is required.', example='user2', position='Query'),
  rdsVpcId?: string(name='RdsVpcId', description='The ID of the virtual private cloud (VPC) to which the ApsaraDB RDS for MySQL instance belongs.', example='vpc-2zen93xryil99jsfy****', position='Query'),
  rdsVpcUrl?: string(name='RdsVpcUrl', description='The private endpoint of the ApsaraDB RDS for MySQL instance.', example='rm-bp16t9h3999xb0a7****.mysql.rds.aliyuncs.com', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  skipUnsupported: boolean(name='SkipUnsupported', description='Specifies whether to ignore the table schemas that do not support synchronization. Valid values:

*   **true**
*   **false**

This parameter is required.', example='true', position='Query'),
  synDbTables: string(name='SynDbTables', description='The tables whose data you want to synchronize.

This parameter is required.', example='[{"Schema":"recommend","Tables":["mr_platform_cpm","mr_platform_ecpm","p_monitor_record"]}]', position='Query'),
}

model CreateRDSToClickhouseDbResponseBody = {
  errorMsg?: string(name='ErrorMsg', description='If -1 is returned for the **Status** parameter, the cause of the creation failure is returned.', example='ClickHouse exception, code: 49, host: 100.100.79.102, port: 14540; Code: 49, e.displayText() = DB::Exception: Logical error: there is no global context (version 20.8.17.25)n'),
  repeatedDbs?: [ string ](name='RepeatedDbs', description='Duplicate tables in the synchronization task.'),
  requestId?: string(name='RequestId', description='The request ID.', example='66676F54-1994-5DCF-993F-74536649628A'),
  status?: long(name='Status', description='Indicates whether the synchronization task was created. Valid values:

*   **1**: Created.
*   **0**: Creation failed. The tables in the synchronization task are duplicate. The duplicate tables are returned for the **RepeatedDbs** parameter.
*   **-1**: Creation failed. The cause why the creation failed is returned for the **ErrorMsg** parameter.', example='0'),
}

model CreateRDSToClickhouseDbResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRDSToClickhouseDbResponseBody(name='body'),
}

/**
  * @description >  This operation is only applicable to ApsaraDB for ClickHouse clusters.
  * @param request  the request parameters of CreateRDSToClickhouseDb  CreateRDSToClickhouseDbRequest
  * @return CreateRDSToClickhouseDbResponse
 */
async function createRDSToClickhouseDb(request: CreateRDSToClickhouseDbRequest): CreateRDSToClickhouseDbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRDSToClickhouseDb', 'POST', '/', 'json', false, 'json', request);
}

model CreateSQLAccountRequest {
  accountDescription?: string(name='AccountDescription', description='The description of the database account.

*   The description cannot start with http:// or https://.
*   The description can be up to 256 characters in length or be an empty string.', position='Query'),
  accountName: string(name='AccountName', description='The name of the database account.

*   The name must be unique in the cluster.
*   The name can contain lowercase letters, digits, or underscores (_).
*   The name must start with a lowercase letter and end with a lowercase letter or a digit.
*   The name must be 2 to 64 characters in length.

This parameter is required.', example='test', position='Query'),
  accountPassword: string(name='AccountPassword', description='The password of the database account.

*   The password must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters.
*   Special characters include ! @ # $ % ^ & \\* ( ) _ + - =
*   The password must be 8 to 32 characters in length.

This parameter is required.', example='Test1234', position='Query'),
  accountType: string(name='AccountType', description='The type of the database account. Valid values:

*   **Super**: privileged account.
*   **Normal**: standard account.

This parameter is required.', example='Super', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp1p816075e21****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateSQLAccountResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F5178C10-1407-4987-9133-DE4DC9119F76'),
}

model CreateSQLAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSQLAccountResponseBody(name='body'),
}

/**
  * @description >  This operation is applicable only to ApsaraDB for ClickHouse clusters of V20.8 or later that were created after December 1, 2021,
  * @param request  the request parameters of CreateSQLAccount  CreateSQLAccountRequest
  * @return CreateSQLAccountResponse
 */
async function createSQLAccount(request: CreateSQLAccountRequest): CreateSQLAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSQLAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateServiceLinkedRoleRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateServiceLinkedRoleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='66428721-FFEC-5023-B4E5-3BD1B67837E0'),
}

model CreateServiceLinkedRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceLinkedRoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateServiceLinkedRole  CreateServiceLinkedRoleRequest
  * @return CreateServiceLinkedRoleResponse
 */
async function createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): CreateServiceLinkedRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServiceLinkedRole', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAccountRequest {
  accountName: string(name='AccountName', description='The name of the database account.

This parameter is required.', example='test', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteAccountResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='2FED790E-FB61-4721-8C1C-07C627FA5A19'),
}

model DeleteAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAccountResponseBody(name='body'),
}

/**
  * @description >  After you delete a database account, you cannot use the account to log on to the ApsaraDB for ClickHouse cluster. Exercise caution when performing this operation.
  * @param request  the request parameters of DeleteAccount  DeleteAccountRequest
  * @return DeleteAccountResponse
 */
async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccount', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBClusterRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the pay-as-you-go ApsaraDB for ClickHouse cluster.

This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDBClusterResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='05321590-BB65-4720-8CB6-8218E041CDD0'),
}

model DeleteDBClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDBClusterResponseBody(name='body'),
}

/**
  * @description **Warning** After an ApsaraDB for ClickHouse cluster is deleted, all data in the cluster is deleted and cannot be recovered. Exercise caution when performing this operation.
  * @param request  the request parameters of DeleteDBCluster  DeleteDBClusterRequest
  * @return DeleteDBClusterResponse
 */
async function deleteDBCluster(request: DeleteDBClusterRequest): DeleteDBClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBCluster', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSyndbRequest {
  dbClusterId: string(name='DbClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp158i5wvj436****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  synDb: string(name='SynDb', description='The name of the database in the ApsaraDB RDS for MySQL instance. The database is used for data synchronization.

This parameter is required.', example='database', position='Query'),
}

model DeleteSyndbResponseBody = {
  errorCode?: long(name='ErrorCode', description='The error code.', example='0'),
  errorMsg?: string(name='ErrorMsg', description='*   If the value **true** is returned for the **Status** parameter, the system does not return the ErrorMsg parameter.
*   If the value **false** is returned for the **Status** parameter, the system returns the deletion failure cause for the ErrorMsg parameter.', example='ClickHouse exception, code: 49, host: 100.100.xx.xx, port: 49670; Code: 49, e.displayText() = DB::Exception: Logical error: there is no global context (version 20.8.17.25)n'),
  requestId?: string(name='RequestId', description='The request ID.', example='2C7393F1-5FD1-5CEE-A2EA-270A2CF99693'),
  status?: boolean(name='Status', description='Indicates whether the database used for data synchronization was deleted. Valid values:

*   **true**
*   **false**', example='true'),
}

model DeleteSyndbResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSyndbResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSyndb  DeleteSyndbRequest
  * @return DeleteSyndbResponse
 */
async function deleteSyndb(request: DeleteSyndbRequest): DeleteSyndbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSyndb', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccountAuthorityRequest {
  accountName?: string(name='AccountName', description='The name of the database account.', example='test', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp1p816075e21****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/170875.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeAccountAuthorityResponseBody = {
  accountName?: string(name='AccountName', description='The name of the database account.', example='test'),
  allowDatabases?: [ string ](name='AllowDatabases', description='Databases to which permissions have been granted.'),
  allowDictionaries?: [ string ](name='AllowDictionaries', description='Dictionaries to which permissions have been granted.'),
  ddlAuthority?: boolean(name='DdlAuthority', description='Indicates whether the database account has DDL permissions. Valid values:

*   **true**: has DDL permissions.
*   **false**: does not have DDL permissions.', example='true'),
  dmlAuthority?: string(name='DmlAuthority', description='Indicates whether the database account has DML permissions. Valid values:

*   **all**
*   **readOnly,modify**', example='all'),
  requestId?: string(name='RequestId', description='The request ID.', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
  totalDatabases?: [ string ](name='TotalDatabases', description='All databases.'),
  totalDictionaries?: [ string ](name='TotalDictionaries', description='All dictionaries.'),
}

model DescribeAccountAuthorityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAccountAuthorityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAccountAuthority  DescribeAccountAuthorityRequest
  * @return DescribeAccountAuthorityResponse
 */
async function describeAccountAuthority(request: DescribeAccountAuthorityRequest): DescribeAccountAuthorityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccountAuthority', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccountsRequest {
  accountName?: string(name='AccountName', example='test', position='Query'),
  DBClusterId: string(name='DBClusterId', description='This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='30', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeAccountsResponseBody = {
  accounts?: {
    account?: [ 
    {
      accountDescription?: string(name='AccountDescription', example='test'),
      accountName?: string(name='AccountName', example='test'),
      accountStatus?: string(name='AccountStatus', example='Creating'),
      accountType?: string(name='AccountType', example='Super'),
      configType?: string(name='ConfigType'),
    }
  ](name='Account')
  }(name='Accounts'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='30'),
  requestId?: string(name='RequestId', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeAccountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAccountsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAccounts  DescribeAccountsRequest
  * @return DescribeAccountsResponse
 */
async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccounts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAllDataSourceRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemaName?: string(name='SchemaName', description='The database name.', example='database', position='Query'),
  tableName?: string(name='TableName', description='The table name.', example='table', position='Query'),
}

model DescribeAllDataSourceResponseBody = {
  columns?: {
    column?: [ 
    {
      autoIncrementColumn?: boolean(name='AutoIncrementColumn', description='Indicates whether the column is an auto-increment column. Valid values:

*   **true**
*   **false**', example='true'),
      columnName?: string(name='ColumnName', description='The column name.', example='name'),
      DBClusterId?: string(name='DBClusterId', description='The cluster ID.', example='cc-bp108z124a8o7****'),
      primaryKey?: boolean(name='PrimaryKey', description='Indicates whether the column is the primary key of the table. Valid values:

*   **true**
*   **false**', example='true'),
      schemaName?: string(name='SchemaName', description='The database name.', example='database'),
      tableName?: string(name='TableName', description='The table name.', example='table'),
      type?: string(name='Type', description='The type of the column.', example='String'),
    }
  ](name='Column')
  }(name='Columns', description='The information about the columns.'),
  requestId?: string(name='RequestId', description='The request ID.', example='05321590-BB65-4720-8CB6-8218E041CDD0'),
  schemas?: {
    schema?: [ 
    {
      DBClusterId?: string(name='DBClusterId', description='The cluster ID.', example='cc-bp108z124a8o7****'),
      schemaName?: string(name='SchemaName', description='The database name.', example='database'),
    }
  ](name='Schema')
  }(name='Schemas', description='The information about the databases.'),
  tables?: {
    table?: [ 
    {
      DBClusterId?: string(name='DBClusterId', description='The cluster ID.', example='cc-bp108z124a8o7****'),
      schemaName?: string(name='SchemaName', description='The database name.', example='database'),
      tableName?: string(name='TableName', description='The table name.', example='table'),
    }
  ](name='Table')
  }(name='Tables', description='The information about the tables.'),
}

model DescribeAllDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAllDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAllDataSource  DescribeAllDataSourceRequest
  * @return DescribeAllDataSourceResponse
 */
async function describeAllDataSource(request: DescribeAllDataSourceRequest): DescribeAllDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAllDataSource', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAllDataSourcesRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemaName?: string(name='SchemaName', description='The database name.', example='database', position='Query'),
  tableName?: string(name='TableName', description='The table name.', example='table', position='Query'),
}

model DescribeAllDataSourcesResponseBody = {
  columns?: {
    column?: [ 
    {
      autoIncrementColumn?: boolean(name='AutoIncrementColumn', description='Indicates whether the column is an auto-increment column. Valid values:

*   **true**
*   **false**', example='true'),
      columnName?: string(name='ColumnName', description='The column name.', example='name'),
      DBClusterId?: string(name='DBClusterId', description='The cluster ID.', example='cc-bp108z124a8o7****'),
      primaryKey?: boolean(name='PrimaryKey', description='Indicates whether the column is the primary key of the table. Valid values:

*   **true**: The column is the primary key of the table.
*   **false**: The column is not the primary key of the table.', example='true'),
      schemaName?: string(name='SchemaName', description='The database name.', example='database'),
      tableName?: string(name='TableName', description='The table name.', example='table'),
      type?: string(name='Type', description='The column type.', example='String'),
    }
  ](name='Column')
  }(name='Columns', description='Details of the columns.'),
  requestId?: string(name='RequestId', description='The request ID.', example='75EA41D7-025A-50A6-9287-359A91399F1E'),
  schemas?: {
    schema?: [ 
    {
      DBClusterId?: string(name='DBClusterId', description='The cluster ID.', example='cc-bp108z124a8o7****'),
      schemaName?: string(name='SchemaName', description='The database name.', example='database'),
    }
  ](name='Schema')
  }(name='Schemas', description='The information about the databases.'),
  tables?: {
    table?: [ 
    {
      DBClusterId?: string(name='DBClusterId', description='The cluster ID.', example='cc-bp108z124a8o7****'),
      schemaName?: string(name='SchemaName', description='The database name.', example='database'),
      tableName?: string(name='TableName', description='The table name.', example='table'),
    }
  ](name='Table')
  }(name='Tables', description='The information about the tables.'),
}

model DescribeAllDataSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAllDataSourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAllDataSources  DescribeAllDataSourcesRequest
  * @return DescribeAllDataSourcesResponse
 */
async function describeAllDataSources(request: DescribeAllDataSourcesRequest): DescribeAllDataSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAllDataSources', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupPolicyRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp1qx68m06981****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeBackupPolicyResponseBody = {
  backupRetentionPeriod?: int32(name='BackupRetentionPeriod', description='The retention period for the backup data. By default, the backup data is retained for seven days. Valid values: 7 to 730. Unit: day.', example='7'),
  backupSize?: string(name='BackupSize', description='The size of the backup data. Unit: MB.', example='123124'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod', description='The day of a week when the system regularly backs up data. Valid values:

*   **Monday**
*   **Tuesday**
*   **Wednesday**
*   **Thursday**
*   **Friday**
*   **Saturday**
*   **Sunday**', example='Monday'),
  preferredBackupTime?: string(name='PreferredBackupTime', description='The backup window. The time is displayed in Coordinated Universal Time (UTC).', example='15:00Z-16:00Z'),
  requestId?: string(name='RequestId', description='The request ID.', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
  switch?: string(name='Switch', description='Indicates whether the backup feature is enabled. Valid values:

*   **true**
*   **false**', example='true'),
}

model DescribeBackupPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBackupPolicyResponseBody(name='body'),
}

/**
  * @description >  This operation is available only for the ApsaraDB for ClickHouse clusters of versions 20.3, 20.8, and 21.8.
  * @param request  the request parameters of DescribeBackupPolicy  DescribeBackupPolicyRequest
  * @return DescribeBackupPolicyResponse
 */
async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupsRequest {
  backupId?: string(name='BackupId', example='117403****', position='Query'),
  DBClusterId: string(name='DBClusterId', description='This parameter is required.', example='cc-bp1qx68m06981****', position='Query'),
  endTime: string(name='EndTime', description='This parameter is required.', example='2021-11-25T16:00Z', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', example='30', minimum=30, maximum=100, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='This parameter is required.', example='2021-11-21T16:00Z', position='Query'),
}

model DescribeBackupsResponseBody = {
  items?: [ 
    {
      backupEndTime?: string(name='BackupEndTime', example='2021-11-22T18:28:41Z'),
      backupId?: string(name='BackupId', example='117403****'),
      backupMethod?: string(name='BackupMethod', example='Physical'),
      backupSetInfo?: string(name='BackupSetInfo', example='{"shard_count"：4}'),
      backupSize?: long(name='BackupSize', example='131072'),
      backupStartTime?: string(name='BackupStartTime', example='2021-11-22T18:28:22Z'),
      backupStatus?: string(name='BackupStatus', example='Success'),
      backupType?: string(name='BackupType', example='IncrementalBackup'),
      DBClusterId?: string(name='DBClusterId', example='cc-bp1qx68m06981****'),
      expireDate?: string(name='ExpireDate', example='2022-07-22T18:28:41Z'),
    }
  ](name='Items'),
  pageNumber?: string(name='PageNumber', example='1'),
  pageSize?: string(name='PageSize', example='30'),
  requestId?: string(name='RequestId', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
  totalCount?: string(name='TotalCount', example='1'),
}

model DescribeBackupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBackupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeBackups  DescribeBackupsRequest
  * @return DescribeBackupsResponse
 */
async function describeBackups(request: DescribeBackupsRequest): DescribeBackupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeColumnsRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-2zeux3ua25242****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemaName: string(name='SchemaName', description='The database name. You can call the [DescribeSchemas](https://help.aliyun.com/document_detail/350931.html) operation to query database names.

This parameter is required.', example='database', position='Query'),
  tableName: string(name='TableName', description='The table name. You can call the [DescribeTables](https://help.aliyun.com/document_detail/350932.html) operation to query table names.

This parameter is required.', example='table', position='Query'),
}

model DescribeColumnsResponseBody = {
  items?: {
    column?: [ 
    {
      autoIncrementColumn?: boolean(name='AutoIncrementColumn', description='Indicates whether the column is an auto-increment column. Valid values:

*   **true**
*   **false**', example='true'),
      columnName?: string(name='ColumnName', description='The column name.', example='name'),
      DBClusterId?: string(name='DBClusterId', description='The cluster ID.', example='cc-2zeux3ua25242****'),
      primaryKey?: boolean(name='PrimaryKey', description='Indicates whether the column is the primary key of the table. Valid values:

*   **true**
*   **false**', example='true'),
      schemaName?: string(name='SchemaName', description='The database name.', example='database'),
      tableName?: string(name='TableName', description='The table name.', example='table'),
      type?: string(name='Type', description='The column type.', example='String'),
    }
  ](name='Column')
  }(name='Items', description='Details of the columns.'),
  requestId?: string(name='RequestId', description='The request ID.', example='66428721-FFEC-5023-B4E5-3BD1B67837E0'),
}

model DescribeColumnsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeColumnsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeColumns  DescribeColumnsRequest
  * @return DescribeColumnsResponse
 */
async function describeColumns(request: DescribeColumnsRequest): DescribeColumnsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeColumns', 'POST', '/', 'json', false, 'json', request);
}

model DescribeConfigHistoryRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID. You can call the [DescribeDBClusters](https://help.aliyun.com/document_detail/170879.html) operation to query information about all the clusters that are deployed in a specific region. The information includes the cluster IDs.

This parameter is required.', example='cc-bp1p816075e21****', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

This parameter is required.', example='2022-08-22T10:06:00Z', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in Coordinated Universal Time (UTC).

This parameter is required.', example='2022-08-11T06:27:00Z', position='Query'),
}

model DescribeConfigHistoryResponseBody = {
  configHistoryItems?: [ 
    {
      changeId?: string(name='ChangeId', description='The ID of the change record.', example='1'),
      ownerId?: string(name='OwnerId', description='The user ID (UID) of the Alibaba Cloud account.', example='253460731706911258'),
      reason?: string(name='Reason', description='The reason for the setting modification of the configuration parameters.', example='test'),
      success?: boolean(name='Success', description='Indicates whether the setting modification of the configuration parameters took effect. Valid values:

*   **true**
*   **false**', example='true'),
      time?: string(name='Time', description='The time when the values of the configuration parameters were changed. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2022-08-22T10:00:00Z'),
    }
  ](name='ConfigHistoryItems', description='The change records of the configuration parameters.'),
  requestId?: string(name='RequestId', description='The request ID.', example='D0CEC6AC-7760-409A-A0D5-E6CD8660E9CC'),
}

model DescribeConfigHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeConfigHistoryResponseBody(name='body'),
}

/**
  * @description >  You can call this operation only for ApsaraDB for ClickHouse clusters that were created after December 1, 2021.
  * @param request  the request parameters of DescribeConfigHistory  DescribeConfigHistoryRequest
  * @return DescribeConfigHistoryResponse
 */
async function describeConfigHistory(request: DescribeConfigHistoryRequest): DescribeConfigHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConfigHistory', 'GET', '/', 'json', false, 'json', request);
}

model DescribeConfigVersionDifferenceRequest {
  changeId: string(name='ChangeId', description='The ID of the change record. You can call the [DescribeConfigHistory](https://help.aliyun.com/document_detail/452209.html) operation to query the ID of the change record.

This parameter is required.', example='1', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The cluster ID. You can call the [DescribeDBClusters](https://help.aliyun.com/document_detail/170879.html) operation to query information about all the clusters that are deployed in a specific region. The information includes the cluster IDs.

This parameter is required.', example='cc-bp1tm8zf130ew****', position='Query'),
}

model DescribeConfigVersionDifferenceResponseBody = {
  newConfigXML?: string(name='NewConfigXML', description='The values of the configuration parameters after the values of the configuration parameters are changed.', example='"<?xml version="1.0"?>
<yandex>
    <keep_alive_timeout>400</keep_alive_timeout>
    <listen_backlog>4096</listen_backlog>
    <logger>
        <level>debug</level>
        <size>1000M</size>
    </logger>
    <mark_cache_size>5368709120</mark_cache_size>
    <max_concurrent_queries>201</max_concurrent_queries>
    <max_connections>4096</max_connections>
    <max_partition_size_to_drop>0</max_partition_size_to_drop>
    <max_table_size_to_drop>0</max_table_size_to_drop>
    <merge_tree>
        <max_delay_to_insert>256</max_delay_to_insert>
        <max_part_loading_threads>auto</max_part_loading_threads>
        <max_suspicious_broken_parts>100</max_suspicious_broken_parts>
        <zookeeper_session_expiration_check_period>1</zookeeper_session_expiration_check_period>
    </merge_tree>
    <uncompressed_cache_size>1717986918</uncompressed_cache_size>
</yandex>"'),
  oldConfigXML?: string(name='OldConfigXML', description='The values of the configuration parameters before the values of the configuration parameters are changed.', example='"<?xml version="1.0"?>
<yandex>
    <keep_alive_timeout>300</keep_alive_timeout>
    <listen_backlog>4096</listen_backlog>
    <logger>
        <level>debug</level>
        <size>1000M</size>
    </logger>
    <mark_cache_size>5368709120</mark_cache_size>
    <max_concurrent_queries>150</max_concurrent_queries>
    <max_connections>4096</max_connections>
    <max_partition_size_to_drop>0</max_partition_size_to_drop>
    <max_table_size_to_drop>0</max_table_size_to_drop>
    <merge_tree>
        <max_delay_to_insert>256</max_delay_to_insert>
        <max_part_loading_threads>auto</max_part_loading_threads>
        <max_suspicious_broken_parts>100</max_suspicious_broken_parts>
        <zookeeper_session_expiration_check_period>1</zookeeper_session_expiration_check_period>
    </merge_tree>
    <uncompressed_cache_size>1717986918</uncompressed_cache_size>
</yandex>"'),
  requestId?: string(name='RequestId', description='The request ID.', example='D0CEC6AC-7760-409A-A0D5-E6CD8660E9CC'),
}

model DescribeConfigVersionDifferenceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeConfigVersionDifferenceResponseBody(name='body'),
}

/**
  * @description >  You can call this operation only for ApsaraDB for ClickHouse clusters that were created after December 1, 2021.
  * @param request  the request parameters of DescribeConfigVersionDifference  DescribeConfigVersionDifferenceRequest
  * @return DescribeConfigVersionDifferenceResponse
 */
async function describeConfigVersionDifference(request: DescribeConfigVersionDifferenceRequest): DescribeConfigVersionDifferenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConfigVersionDifference', 'GET', '/', 'json', false, 'json', request);
}

model DescribeDBClusterAccessWhiteListRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClusterAccessWhiteListResponseBody = {
  DBClusterAccessWhiteList?: {
    IPArray?: [ 
    {
      DBClusterIPArrayAttribute?: string(name='DBClusterIPArrayAttribute', description='The attribute of the IP address whitelist.', example='default'),
      DBClusterIPArrayName?: string(name='DBClusterIPArrayName', description='The name of the IP address whitelist.', example='default'),
      securityIPList?: string(name='SecurityIPList', description='The IP addresses in the IP address whitelist.', example='192.168.xx.xx,192.168.xx.xx'),
    }
  ](name='IPArray')
  }(name='DBClusterAccessWhiteList', description='The details about the IP address whitelist.'),
  requestId?: string(name='RequestId', description='The request ID.', example='905F13A4-5097-4897-A84D-527EC75FFF4F'),
}

model DescribeDBClusterAccessWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDBClusterAccessWhiteListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDBClusterAccessWhiteList  DescribeDBClusterAccessWhiteListRequest
  * @return DescribeDBClusterAccessWhiteListResponse
 */
async function describeDBClusterAccessWhiteList(request: DescribeDBClusterAccessWhiteListRequest): DescribeDBClusterAccessWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterAccessWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterAttributeRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID. You can call the [DescribeDBClusters](https://help.aliyun.com/document_detail/170879.html) operation to query information about all the clusters that are deployed in a specific region. The information includes the cluster IDs.

This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClusterAttributeResponseBody = {
  DBCluster?: {
    aliUid?: string(name='AliUid', description='The ID of the Alibaba Cloud account.', example='140692647406****'),
    appointmentRestartTime?: string(name='AppointmentRestartTime', description='The scheduled restart time. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in Coordinated Universal Time (UTC).', example='2023-11-06T12:00:00Z'),
    availableUpgradeMajorVersion?: map[string]any(name='AvailableUpgradeMajorVersion'),
    bid?: string(name='Bid', description='The site ID. Valid values:

*   **26842**: the China site (aliyun.com)
*   **26888**: the international site (alibabacloud.com)', example='26842'),
    category?: string(name='Category', description='The edition of the cluster. Valid values:

*   **Basic**: Single-replica Edition
*   **HighAvailability**: Double-replica Edition', example='HighAvailability'),
    commodityCode?: string(name='CommodityCode', description='The commodity code of the cluster.', example='clickhouse_go_public_cn'),
    connectionString?: string(name='ConnectionString', description='The VPC endpoint of the cluster.', example='cc-bp1qx68m06981****.ads.rds.aliyuncs.com'),
    controlVersion?: string(name='ControlVersion', description='The version of the ApsaraDB for ClickHouse console that is used to manage the cluster. Valid values:

*   **v1**
*   **v2**', example='v1'),
    createTime?: string(name='CreateTime', description='The time when the cluster was created. The value is in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2021-12-13T11:33:11Z'),
    DBClusterDescription?: string(name='DBClusterDescription', description='The description of the cluster.', example='cc-bp108z124a8o7****'),
    DBClusterId?: string(name='DBClusterId', description='The cluster ID.', example='cc-bp108z124a8o7****'),
    DBClusterNetworkType?: string(name='DBClusterNetworkType', description='The network type of the cluster. Only VPC is supported.', example='vpc'),
    DBClusterStatus?: string(name='DBClusterStatus', description='The cluster state. Valid values:

*   **Preparing**: The cluster is being prepared.
*   **Creating**: The cluster is being created.
*   **Running**: The cluster is running.
*   **Deleting**: The cluster is being deleted.
*   **SCALING_OUT**: The storage capacity of the cluster is being expanded.', example='Running'),
    DBClusterType?: string(name='DBClusterType', description='The type of the cluster. Valid values:

*   **Common**: a common cluster
*   **Readonly**: a read-only cluster
*   **Guard**: a disaster recovery cluster', example='Common'),
    DBNodeClass?: string(name='DBNodeClass', description='The specifications of the cluster.

*   Valid values when the cluster is of Single-replica Edition:

    *   **S4-NEW**
    *   **S8**
    *   **S16**
    *   **S32**
    *   **S64**
    *   **S104**

*   Valid values when the cluster is of Double-replica Edition:

    *   **C4-NEW**
    *   **C8**
    *   **C16**
    *   **C32**
    *   **C64**
    *   **C104**', example='C8'),
    DBNodeCount?: long(name='DBNodeCount', description='The number of nodes.

*   Valid values when the cluster is of Single-replica Edition: 1 to 48.
*   Valid values when the cluster is of Double-replica Edition: 1 to 24.', example='1'),
    DBNodeStorage?: long(name='DBNodeStorage', description='The storage capacity of a single node of the cluster. Unit: GB.

Valid values: 100 to 32000.

>  This value is a multiple of 100.', example='100'),
    encryptionKey?: string(name='EncryptionKey', description='The Key Management Service (KMS) key that is used to encrypt data.

>  If the value of the EncryptionType parameter is off, an empty string is returned for this parameter.', example='685f416f-87c9-4554-8d3a-75b6ce25****'),
    encryptionType?: string(name='EncryptionType', description='The encryption type. Valid values:

*   **CloudDisk**: Disk encryption is enabled.
*   **off**: Data is not encrypted.', example='CloudDisk'),
    engine?: string(name='Engine', description='The type of the database engine.', example='ClickHouse'),
    engineLatestMinorVersion?: string(name='EngineLatestMinorVersion', description='The latest minor version to which the cluster can be updated.', example='1.34.0'),
    engineMinorVersion?: string(name='EngineMinorVersion', description='The current minor version.', example='1.6.0'),
    engineVersion?: string(name='EngineVersion', description='The engine version.', example='21.8.10.19'),
    expireTime?: string(name='ExpireTime', description='The time when the cluster expired. The time is in the yyyy-MM-ddTHH:mm:ssZ format.

>  Pay-as-you-go clusters never expire. If the cluster is a pay-as-you-go cluster, an empty string is returned for this parameter.', example='2022-11-11T16:00:00Z'),
    extStorageSize?: int32(name='ExtStorageSize', description='The extended storage space. Unit: GB.', example='500'),
    extStorageType?: string(name='ExtStorageType', description='The extended storage type. Valid values:

*   **CloudESSD**: The cluster uses an enhanced SSD (ESSD) of performance level (PL) 1.
*   **CloudESSD_PL2**: The cluster uses an ESSD of PL 2.
*   **CloudESSD_PL3**: The cluster uses an ESSD of PL 3.
*   **CloudEfficiency**: The cluster uses an ultra disk.', example='CloudESSD'),
    isExpired?: string(name='IsExpired', description='Indicates whether the cluster has expired. Valid values:

*   **true**
*   **false**', example='false'),
    lockMode?: string(name='LockMode', description='The lock mode of the cluster. Valid values:

*   **Unlock**: The cluster is not locked.
*   **ManualLock**: The cluster is manually locked.
*   **LockByExpiration**: The cluster is automatically locked due to cluster expiration.
*   **LockByRestoration**: The cluster is automatically locked because the cluster is about to be rolled back.
*   **LockByDiskQuota**: The cluster is automatically locked because the disk space is exhausted.', example='Unlock'),
    lockReason?: string(name='LockReason', description='The cause why the cluster was locked.

>  If the value of the LockMode parameter is Unlock, an empty string is returned for this parameter.', example='DISK_FULL'),
    maintainAutoType?: boolean(name='MaintainAutoType', description='The update type. If the value of the parameter is **false**, it indicates a manual update.', example='false'),
    maintainTime?: string(name='MaintainTime', description='The maintenance window of the cluster. The value is in the HH:mmZ-HH:mmZ format. The time is displayed in UTC.

For example, if you set the maintenance window to 00:00Z-01:00Z, the cluster can be maintained from 08:00 (UTC+8) to 09:00 (UTC+8).', example='00:00Z-01:00Z'),
    payType?: string(name='PayType', description='The billing method of the cluster. Valid values:

*   **Postpaid**: indicates the pay-as-you-go billing method.
*   **Prepaid**: indicates the subscription billing method.', example='Prepaid'),
    port?: int32(name='Port', description='The HTTP port number.', example='8123'),
    publicConnectionString?: string(name='PublicConnectionString', description='The public endpoint.', example='cc-bp1199ya710s7****.public.clickhouse.ads.aliyuncs.com'),
    publicIpAddr?: string(name='PublicIpAddr', description='The IP address that is used to connect to the cluster over the Internet.', example='121.40.xx.xx'),
    publicPort?: string(name='PublicPort', description='The TCP port number in the public endpoint.', example='3306'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmyf65je6****'),
    scaleOutStatus?: {
      progress?: string(name='Progress', description='The progress of the data migration task in percentage.

>  This parameter is returned only when the cluster is in the SCALING_OUT state.', example='0'),
      ratio?: string(name='Ratio', description='The progress of the data migration task. This value is displayed in the following format: Data volume that has been migrated/Total data volume.

>  This parameter is returned only when the cluster is in the SCALING_OUT state.', example='0MB/60469MB'),
    }(name='ScaleOutStatus', description='The status of the data migration task.'),
    storageType?: string(name='StorageType', description='The storage type of the cluster. Valid values:

*   **CloudESSD**: The cluster uses an enhanced SSD (ESSD) of performance level (PL) 1.
*   **CloudESSD_PL2**: The cluster uses an ESSD of PL 2.
*   **CloudESSD_PL3**: The cluster uses an ESSD of PL 3.
*   **CloudEfficiency**: The cluster uses an ultra disk.', example='CloudESSD'),
    supportBackup?: int32(name='SupportBackup', description='Indicates whether data backup is supported. Valid values:

*   **1**: Data backup is supported.
*   **2**: Data backup is not supported.', example='1'),
    supportHttpsPort?: boolean(name='SupportHttpsPort', description='Indicates whether HTTPS ports are supported. Valid values:

*   **true**
*   **false**', example='false'),
    supportMysqlPort?: boolean(name='SupportMysqlPort', description='Indicates whether the cluster supports a MySQL port. Valid values:

*   **true**: A MySQL port is supported.
*   **false**: A MySQL port is not supported.', example='false'),
    supportOss?: int32(name='SupportOss', description='Indicates whether tiered storage of hot data and cold data is supported. Valid values:

*   **1**: Tiered storage of hot data and cold data is supported.
*   **2**: Tiered storage of hot data and cold data is not supported.', example='1'),
    tags?: {
      tag?: [ 
      {
        key?: string(name='Key', description='The tag name.', example='department'),
        value?: string(name='Value', description='The tag value.', example='it'),
      }
    ](name='Tag')
    }(name='Tags', description='The tags.'),
    vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-bp1n874li1t5y57wi****'),
    vpcCloudInstanceId?: string(name='VpcCloudInstanceId', description='The ID of the VPC in which the cluster is deployed.', example='vpc-bp10tr8k9qasioaty****'),
    vpcId?: string(name='VpcId', description='The virtual private cloud (VPC) ID.', example='vpc-bp10tr8k9qasioaty****'),
    vpcIpAddr?: string(name='VpcIpAddr', description='The IP address that is used to connect to the cluster over the VPC.', example='192.168.xx.xx'),
    zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-hangzhou-h'),
    zoneIdVswitchMap?: map[string]any(name='ZoneIdVswitchMap', description='The list of vSwitch IDs in multi-zone clusters.', example='cn-shanghai-f: vsw-zm0n42d5vvuo****'),
    zookeeperClass?: string(name='ZookeeperClass', description='The ZooKeeper specifications.', example='4 Core 8 GB'),
  }(name='DBCluster', description='The information about the cluster.'),
  requestId?: string(name='RequestId', description='The request ID.', example='05321590-BB65-4720-8CB6-8218E041CDD0'),
}

model DescribeDBClusterAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDBClusterAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDBClusterAttribute  DescribeDBClusterAttributeRequest
  * @return DescribeDBClusterAttributeResponse
 */
async function describeDBClusterAttribute(request: DescribeDBClusterAttributeRequest): DescribeDBClusterAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterConfigRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-wz988vja2mor4****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/170875.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClusterConfigResponseBody = {
  config?: string(name='Config', description='The information about the parameter settings of the cluster.', example='[ { "name": "keep_alive_timeout", "defaultValue": 300, "currentValue": 300, "restart": true, "valueRange": ">0", "desc": "The number of seconds that ClickHouse waits for incoming requests before closing the connection." }, ... ,{ "name": "max_partition_size_to_drop", "defaultValue": 0, "currentValue": 0, "restart": true, "valueRange": ">=0", "desc": "If the size of a MergeTree partition exceeds max_partition_size_to_drop (in bytes), you can’t delete it using a DROP query." } ]'),
  requestId?: string(name='RequestId', description='The request ID.', example='9A23C87D-87DF-4DA0-A50E-CB13F4F7923D'),
}

model DescribeDBClusterConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDBClusterConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDBClusterConfig  DescribeDBClusterConfigRequest
  * @return DescribeDBClusterConfigResponse
 */
async function describeDBClusterConfig(request: DescribeDBClusterConfigRequest): DescribeDBClusterConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterConfigInXMLRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID. You can call the [DescribeDBClusters](https://help.aliyun.com/document_detail/170879.html) operation to query information about all the clusters that are deployed in a specific region. The information includes the cluster IDs.

This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/170875.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model DescribeDBClusterConfigInXMLResponseBody = {
  config?: string(name='Config', description='The values of the configuration parameters.', example='<?xml version="1.0"?>
<yandex>
    <keep_alive_timeout>300</keep_alive_timeout>
    <listen_backlog>64</listen_backlog>
    <logger>
        <level>debug</level>
        <size>1000M</size>
    </logger>
    <mark_cache_size>6871947673</mark_cache_size>
    <max_concurrent_queries>100</max_concurrent_queries>
    <max_connections>4096</max_connections>
    <max_partition_size_to_drop>0</max_partition_size_to_drop>
    <max_server_memory_usage>0</max_server_memory_usage>
<max_server_memory_usage_to_ram_ratio>0.9</max_server_memory_usage_to_ram_ratio>
    <max_table_size_to_drop>0</max_table_size_to_drop>
    <max_thread_pool_size>10000</max_thread_pool_size>
    <merge_tree>
        <max_delay_to_insert>256</max_delay_to_insert>
        <max_part_loading_threads>16</max_part_loading_threads>      <zookeeper_session_expiration_check_period>1</zookeeper_session_expiration_check_period>
    </merge_tree>
    <total_memory_profiler_step>4194304</total_memory_profiler_step>
<total_memory_tracker_sample_probability>0</total_memory_tracker_sample_probability>
    <uncompressed_cache_size>3435973836</uncompressed_cache_size>
</yandex>'),
  requestId?: string(name='RequestId', description='The request ID.', example='FE042911-2B00-134C-9F42-816871BBAFB8'),
}

model DescribeDBClusterConfigInXMLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDBClusterConfigInXMLResponseBody(name='body'),
}

/**
  * @description >  You can call this operation only for ApsaraDB for ClickHouse clusters that were created after December 1, 2021.
  * @param request  the request parameters of DescribeDBClusterConfigInXML  DescribeDBClusterConfigInXMLRequest
  * @return DescribeDBClusterConfigInXMLResponse
 */
async function describeDBClusterConfigInXML(request: DescribeDBClusterConfigInXMLRequest): DescribeDBClusterConfigInXMLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterConfigInXML', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterNetInfoItemsRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp1qx68m06981****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClusterNetInfoItemsResponseBody = {
  clusterNetworkType?: string(name='ClusterNetworkType', description='The network type of the cluster. Only VPC is supported.', example='VPC'),
  enableSLB: boolean(name='EnableSLB', description='Indicates whether Server Load Balancer (SLB) is activated in the VPC. Valid values:

*   true
*   false

This parameter is required.', example='true'),
  netInfoItems?: {
    netInfoItem?: [ 
    {
      connectionString?: string(name='ConnectionString', description='The endpoint that is used to connect to the database.', example='cc-bp1554t789i8e****.clickhouse.ads.aliyuncs.com'),
      httpPort?: string(name='HttpPort', description='The HTTP port number.', example='8123'),
      httpsPort?: string(name='HttpsPort', description='The HTTPS port number.', example='8443'),
      IPAddress?: string(name='IPAddress', description='The IP address.', example='10.255.234.251'),
      jdbcPort?: string(name='JdbcPort', description='The port number that is used in Java Database Connectivity (JDBC).', example='3306'),
      mySQLPort?: string(name='MySQLPort', description='The port of the MySQL instance.', example='9004'),
      netType?: string(name='NetType', description='The network type of the endpoint. Valid values:

*   Public: public endpoint
*   VPC: VPC', example='VPC'),
      vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.

>  If the value of the NetType parameter is set to Public, an empty string is returned.', example='vsw-bp1gzt31twhlo0sa5****'),
      vpcId?: string(name='VpcId', description='The virtual private cloud (VPC) ID.

>  If the value of the NetType parameter is set to Public, an empty string is returned.', example='vpc-bp175iuvg8nxqraf2****'),
    }
  ](name='NetInfoItem')
  }(name='NetInfoItems', description='The network information about the cluster.'),
  requestId?: string(name='RequestId', description='The request ID.', example='9A23C87D-87DF-4DA0-A50E-CB13F4F7923D'),
}

model DescribeDBClusterNetInfoItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDBClusterNetInfoItemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDBClusterNetInfoItems  DescribeDBClusterNetInfoItemsRequest
  * @return DescribeDBClusterNetInfoItemsResponse
 */
async function describeDBClusterNetInfoItems(request: DescribeDBClusterNetInfoItemsRequest): DescribeDBClusterNetInfoItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterNetInfoItems', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterPerformanceRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp125e3uu94wo****', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mmZ format. The time must be in UTC.

>  The end time must be later than the start time. The interval cannot be more than 32 days.

This parameter is required.', example='2021-11-27T16:38Z', position='Query'),
  key?: string(name='Key', description='The performance metrics that you want to query. Separate multiple performance metrics with commas (,). You can query up to five performance metrics at a time. You can query the following performance metrics:

>  The **Key** parameter is required.

*   **CPU**:

    *   **CPU_USAGE**: the CPU utilization

*   **Memory**:

    *   **MEM_USAGE**: the memory usage
    *   **MEM_USAGE_SIZE**: the used memory. Unit: MB

*   **Disk**:

    *   **DISK_USAGE**: the disk usage
    *   **DISK_USAGE_SIZE**: the size of the used disks. Unit: MB
    *   **IOPS**: the disk Input/Output Operations per Second (IOPS)

*   **Connection**:

    *   **CONN_USAGE**: the database connection usage
    *   **CONN_USAGE_COUNT**: the number of database connections used

*   **Write**:

    *   **TPS**: the number of rows written per second
    *   **INSERT_SIZE**: the amount of data written per second. Unit: MB

*   **Query**:

    *   **QPS**: the queries per second
    *   **AVG_SEEK**: the average number of random seek calls

*   **WAIT**:

    *   **ZK_WAIT**: the average ZooKeeper wait time. Unit: ms
    *   **IO_WAIT**: the average I/O wait time. Unit: ms
    *   **CPU_WAIT**: the average CPU wait time. Unit: ms', example='MEM_USAGE', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mmZ format. The time must be in Coordinated Universal Time (UTC).

This parameter is required.', example='2021-11-27T16:37Z', position='Query'),
}

model DescribeDBClusterPerformanceResponseBody = {
  DBClusterId?: string(name='DBClusterId', description='The cluster ID.', example='cc-bp125e3uu94wo****'),
  endTime?: string(name='EndTime', description='The end of the time range to query. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mmZ format. The time is displayed in Coordinated Universal Time (UTC).', example='2021-11-27T16:38Z'),
  performances?: [ 
    {
      key?: string(name='Key', description='The name of the performance metric.', example='MEM_USAGE'),
      name?: string(name='Name', description='The name of the performance metric value.', example='mem_usage'),
      series?: [ 
        {
          name?: string(name='Name', description='The name of the list of performance metric values.', example='cc-bp125e3uu94wo1s0k16****'),
          values?: [ 
            {
              point?: [ string ](name='Point', description='The values of a metric.'),
            }
          ](name='Values', description='The values of the performance parameter. Each value of the performance parameter is collected at a point in time.'),
        }
      ](name='Series', description='The queried performance pamaters.'),
      unit?: string(name='Unit', description='The unit of the performance metric.', example='%'),
    }
  ](name='Performances', description='The values of the queried performance metrics of the cluster.'),
  requestId?: string(name='RequestId', description='The request ID.', example='FE242962-6DA3-5FC8-9691-37B62A3210F7'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mmZ format. The time is displayed in UTC.', example='2021-11-27T16:37Z'),
}

model DescribeDBClusterPerformanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDBClusterPerformanceResponseBody(name='body'),
}

/**
  * @description You can query the performance data of a specified cluster over a specific time range based on the performance metrics. The data is collected every 30 seconds.
  * >  You can call this operation only for ApsaraDB for ClickHouse clusters that were created before December 1, 2021.
  * @param request  the request parameters of DescribeDBClusterPerformance  DescribeDBClusterPerformanceRequest
  * @return DescribeDBClusterPerformanceResponse
 */
async function describeDBClusterPerformance(request: DescribeDBClusterPerformanceRequest): DescribeDBClusterPerformanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterPerformance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClustersRequest {
  DBClusterDescription?: string(name='DBClusterDescription', description='The description of the cluster.', example='cc-bp108z124a8o7****', position='Query'),
  DBClusterIds?: string(name='DBClusterIds', description='The cluster ID.

>  If you do not specify this parameter, the information about all clusters is queried.', example='cc-bp108z124a8o7****', position='Query'),
  DBClusterStatus?: string(name='DBClusterStatus', description='The state of the cluster. Valid values:

*   **Preparing**: The cluster is being prepared.
*   **Creating**: The cluster is being created.
*   **Running**: The cluster is running.
*   **Deleting**: The cluster is being deleted.
*   **SCALING_OUT**: The storage capacity of the cluster is being expanded.', example='Running', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Valid values:

*   **30** (default)
*   **50**
*   **100**', example='30', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/170875.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the cluster belongs.', example='rg-4690g37929****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag name.', example='department'),
      value?: string(name='Value', description='The tag value.', example='it'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model DescribeDBClustersResponseBody = {
  DBClusters?: {
    DBCluster?: [ 
    {
      aliUid?: string(name='AliUid', description='The ID of the Alibaba Cloud account.', example='140692647406****'),
      bid?: string(name='Bid', description='The site ID. Valid values:

*   **26842**: the China site (aliyun.com)
*   **26888**: the international site (alibabacloud.com)', example='26842'),
      category?: string(name='Category', description='The edition of the cluster. Valid values:

*   **Basic**: Single-replica Edition
*   **HighAvailability**: Double-replica Edition', example='Basic'),
      commodityCode?: string(name='CommodityCode', description='The commodity code of the cluster.', example='clickhouse_go_public_cn'),
      connectionString?: string(name='ConnectionString', description='The VPC endpoint of the cluster.', example='cc-bp1fs5o051c61****.clickhouse.ads.aliyuncs.com'),
      controlVersion?: string(name='ControlVersion', description='The version number of the backend management system of ApsaraDB for ClickHouse. Valid values:

*   **v1**
*   **v2**', example='v1'),
      createTime?: string(name='CreateTime', description='The time when the cluster was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format.', example='2021-10-28T07:24:45Z'),
      DBClusterDescription?: string(name='DBClusterDescription', description='The description of the cluster.', example='test'),
      DBClusterId?: string(name='DBClusterId', description='The cluster ID.', example='cc-bp108z124a8o7****'),
      DBClusterNetworkType?: string(name='DBClusterNetworkType', description='The network type of the cluster. Only VPC is supported.', example='VPC'),
      DBClusterStatus?: string(name='DBClusterStatus', description='The state of the cluster. Valid values:

*   **Preparing**: The cluster is being prepared.
*   **Creating**: The cluster is being created.
*   **Running**: The cluster is running.
*   **Deleting**: The cluster is being deleted.
*   **SCALING_OUT**: The storage capacity of the cluster is being expanded.', example='Running'),
      DBNodeClass?: string(name='DBNodeClass', description='The specifications of the cluster.

*   Valid values when the cluster is of Single-replica Edition: -**S4**: 4 CPU cores and 16 GB of memory -**S8**: 8 CPU cores and 32 GB of memory

    *   **S16**: 16 CPU cores and 64 GB of memory
    *   **S32**: 32 CPU cores and 128 GB of memory
    *   **S64**: 64 CPU cores and 256 GB of memory
    *   **S104**: 104 CPU cores and 384 GB of memory

*   Valid values when the cluster is of Double-replica Edition: -**C4**: 4 CPU cores and 16 GB of memory -**C8**: 8 CPU cores and 32 GB of memory -**C16**: 16 CPU cores and 64 GB of memory -**C32**: 32 CPU cores and 128 GB of memory -**C64**: 64 CPU cores and 256 GB of memory -**C104**: 104 CPU cores and 384 GB of memory', example='C8'),
      DBNodeCount?: long(name='DBNodeCount', description='The number of nodes.

*   Valid values when the cluster is of Single-replica Edition: 1 to 48.
*   Valid values when the cluster is of Double-replica Edition: 1 to 24.', example='2'),
      DBNodeStorage?: long(name='DBNodeStorage', description='The storage capacity of each node. Valid values: 100 to 32000. Unit: GB.

>  This value is a multiple of 100.', example='100'),
      dbVersion?: string(name='DbVersion'),
      expireTime?: string(name='ExpireTime', description='The time when the cluster expired. The time is in the yyyy-MM-ddTHH:mm:ssZ format.

>  Pay-as-you-go clusters never expire. If the cluster is a pay-as-you-go cluster, an empty string is returned for this parameter.', example='2011-05-30T12:11:4Z'),
      extStorageSize?: int32(name='ExtStorageSize', description='The extended storage space.', example='100GB'),
      extStorageType?: string(name='ExtStorageType', description='The extended storage type. Valid values:

*   **CloudSSD**: standard SSD.
*   **CloudESSD**: The cluster uses an enhanced SSD (ESSD) of performance level (PL) 1.
*   **CloudESSD_PL2**: The cluster uses an ESSD of PL 2.
*   **CloudESSD_PL3**: The cluster uses an ESSD of PL 3.
*   **CloudEfficiency**: The cluster uses an ultra disk.', example='CloudESSD'),
      isExpired?: string(name='IsExpired', description='Indicates whether the cluster has expired. Valid values:

*   **true**: The cluster has expired.
*   **false**: The cluster has not expired.', example='false'),
      lockMode?: string(name='LockMode', description='The lock mode of the cluster. Valid values:

*   **Unlock**: The cluster is not locked.
*   **ManualLock**: The cluster is manually locked.
*   **LockByExpiration**: The cluster is automatically locked due to cluster expiration.
*   **LockByRestoration**: The cluster is automatically locked because the cluster is about to be rolled back.
*   **LockByDiskQuota**: The cluster is automatically locked because the disk space is exhausted.', example='Unlock'),
      lockReason?: string(name='LockReason', description='The cause why the cluster was locked.

>  If the value of the LockMode parameter is Unlock, an empty string is returned for this parameter.', example='DISK_FULL'),
      payType?: string(name='PayType', description='The billing method of the cluster. Valid values:

*   **Postpaid**: The cluster uses the pay-as-you-go billing method.
*   **Prepaid**: The cluster uses the subscription billing method.', example='Postpaid'),
      port?: int32(name='Port', description='The HTTP port number.', example='8123'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the cluster belongs.', example='rg-4690g37929****'),
      scaleOutDisableWriteWindows?: string(name='ScaleOutDisableWriteWindows'),
      scaleOutStatus?: {
        progress?: string(name='Progress', description='The progress of the data migration task in percentage.

>  This parameter is returned only when the cluster is in the SCALING_OUT state.', example='0'),
        ratio?: string(name='Ratio', description='The progress of the data migration task. This value is displayed in the following format: Data volume that has been migrated/Total data volume.

>  This parameter is returned only when the cluster is in the SCALING_OUT state.', example='0MB/60469MB'),
      }(name='ScaleOutStatus', description='The status of a data migration task.'),
      storageType?: string(name='StorageType', description='The storage type of the cluster. Valid values:

*   **CloudESSD**: The cluster uses an enhanced SSD (ESSD) of performance level (PL) 1.
*   **CloudESSD_PL2**: The cluster uses an ESSD of PL 2.
*   **CloudESSD_PL3**: The cluster uses an ESSD of PL 3.
*   **CloudEfficiency**: The cluster uses an ultra disk.', example='CloudESSD'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The tag name.', example='department'),
          value?: string(name='Value', description='The tag value.', example='it'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags.'),
      vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-bp1gzt31twhlo0sa5****'),
      vpcCloudInstanceId?: string(name='VpcCloudInstanceId', description='The ID of the VPC in which the cluster is deployed.', example='vpc-bp175iuvg8nxqraf2****'),
      vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) in which the cluster is deployed.', example='vpc-bp175iuvg8nxqraf2****'),
      zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-hangzhou-h'),
    }
  ](name='DBCluster')
  }(name='DBClusters', description='The details of the clusters.'),
  pageNumber?: int32(name='PageNumber', description='The total number of returned pages.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Valid values:

*   **30** (default)
*   **50**
*   **100**', example='30'),
  requestId?: string(name='RequestId', description='The request ID.', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
  totalCount?: int32(name='TotalCount', description='The total number of entries that are returned.', example='1'),
}

model DescribeDBClustersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDBClustersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDBClusters  DescribeDBClustersRequest
  * @return DescribeDBClustersResponse
 */
async function describeDBClusters(request: DescribeDBClustersRequest): DescribeDBClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBConfigRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-t4nw17nh2e4t2****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/170875.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBConfigResponseBody = {
  config?: string(name='Config', description='The configuration information about the cluster.', example='<dictionaries><dictionary><name>test</name><source><clickhouse><host>10.37.XX.XX</host><port>9000</port><user>default</user><password></password><db>default</db><table>t_organization</table><where>id=1</where><invalidate_query>SQL_QUERY</invalidate_query></clickhouse></source><lifetime><min>31</min><max>33</max></lifetime><layout><flat></flat></layout><structure><key><attribute><name>field1</name><type>String</type></attribute></key></structure></dictionary></dictionaries>'),
  requestId?: string(name='RequestId', description='The request ID.', example='16060117-92E1-5F3B-BF42-28B172D0F869'),
}

model DescribeDBConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDBConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDBConfig  DescribeDBConfigRequest
  * @return DescribeDBConfigResponse
 */
async function describeDBConfig(request: DescribeDBConfigRequest): DescribeDBConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOSSStorageRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/170875.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeOSSStorageResponseBody = {
  coldStorage?: boolean(name='ColdStorage', description='Indicates whether tiered storage of hot data and cold data is supported. Valid values:

*   **true**: Tiered storage of hot data and cold data is supported.
*   **false**: Tiered storage of hot data and cold data is not supported.', example='true'),
  policy?: string(name='Policy', description='The parameters for tiered storage of hot data and cold data.', example='[{ "currentValue":"0.1", "defaultValue":"0.1", "desc":"Ratio of free disk space. When the ratio exceeds the value of configuration parameter, ClickHouse start to move data to the cold storage", "name":"move_factor", "restart":true, "valueRange":"(0, 1]" },{ "currentValue":"true", "defaultValue":"true", "desc":"Disables merging of data parts on cold storage", "name":"prefer_not_to_merge", "restart":true, "valueRange":"true|false" }]'),
  requestId?: string(name='RequestId', description='The request ID.', example='aadbb456-ebf7-4ed8-9671-fad9f3846ca4'),
  state?: string(name='State', description='The state of tiered storage of hot data and cold data. Valid values:

*   **CREATING**: Tiered storage of hot data and cold data is being enabled.
*   **DISABLE**: Tiered storage of hot data and cold data is not enabled.
*   **ENABLE**: Tiered storage of hot data and cold data is enabled.', example='ENABLE'),
  storageUsage?: string(name='StorageUsage', description='The space used for tiered storage of hot data and cold data. Unit: GB.', example='0.00'),
}

model DescribeOSSStorageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOSSStorageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeOSSStorage  DescribeOSSStorageRequest
  * @return DescribeOSSStorageResponse
 */
async function describeOSSStorage(request: DescribeOSSStorageRequest): DescribeOSSStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOSSStorage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeProcessListRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID. You can call the [DescribeDBClusters](https://help.aliyun.com/document_detail/170879.html) operation to query information about all the clusters that are deployed in a specific region. The information includes the cluster IDs.

This parameter is required.', example='cc-bp1190tj036am****', position='Query'),
  initialQueryId?: string(name='InitialQueryId', description='The ID of the query statement.', example='6c69d508-f05f-4c74-857c-d982b7e7e79f', position='Query'),
  initialUser?: string(name='InitialUser', description='The account that is used to log on to the database.', example='user', position='Query'),
  keyword?: string(name='Keyword', description='The keyword that is used to query.', example='join', position='Query'),
  order?: string(name='Order', description='Sorting by the specified column name. Valid values:

*   elapsed: the cumulative execution time
*   written_rows: the number of written rows
*   read_rows: the number of read rows
*   memory_usage: the memory usage', example='elapsed', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', minimum=1, maximum=9999999999, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Valid values:

*   **30** (default)
*   **50**
*   **100**', example='30', minimum=0, maximum=9999999999, position='Query'),
  queryDurationMs?: int32(name='QueryDurationMs', description='The minimum query duration. The minimum value is **1000**, and the default value is **1000**. Unit: milliseconds. Queries that last longer than this duration are returned in response parameters.', example='500', minimum=0, maximum=9999999999, position='Query'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/170875.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeProcessListResponseBody = {
  processList?: {
    data?: {
      resultSet?: [ 
      {
        initialAddress?: string(name='InitialAddress', description='The IP address of the client that initiates the query.', example='::ffff:10.1.XX.XX'),
        initialQueryId?: string(name='InitialQueryId', description='The query ID.', example='2dd144fd-4230-4249-b15c-e63f964fbb5a'),
        initialUser?: string(name='InitialUser', description='The database account.', example='test'),
        query?: string(name='Query', description='The SQL statement that is executed in the query.', example='select * from test order by score limit 1;'),
        queryDurationMs?: string(name='QueryDurationMs', description='The execution duration of the query. Unit: milliseconds.', example='2000'),
        queryStartTime?: string(name='QueryStartTime', description='The beginning of the time range to query. The value is in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in Coordinated Universal Time (UTC).', example='2021-02-02T09:14:48Z'),
      }
    ](name='ResultSet')
    }(name='Data', description='The details of the query.'),
    rows?: string(name='Rows', description='The number of rows returned for the query.', example='1145700'),
    rowsBeforeLimitAtLeast?: string(name='RowsBeforeLimitAtLeast', description='The number of entries returned per page.', example='1'),
    statistics?: {
      bytesRead?: int32(name='BytesRead', description='The size of the data that was scanned. Unit: bytes.', example='9141300000'),
      elapsedTime?: float(name='ElapsedTime', description='The average response time.', example='4156'),
      rowsRead?: int32(name='RowsRead', description='The number of scanned rows.', example='1000000'),
    }(name='Statistics', description='The statistics of the results.'),
    tableSchema?: {
      resultSet?: [ 
      {
        name?: string(name='Name', description='The column name.', example='InitialUser'),
        type?: string(name='Type', description='The column type.', example='String'),
      }
    ](name='ResultSet')
    }(name='TableSchema', description='Details of the columns.'),
  }(name='ProcessList', description='The queries.'),
  requestId?: string(name='RequestId', description='The request ID.', example='FD61BB0D-788A-5185-A8E3-1B90BA8F6F04'),
}

model DescribeProcessListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeProcessListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeProcessList  DescribeProcessListRequest
  * @return DescribeProcessListResponse
 */
async function describeProcessList(request: DescribeProcessListRequest): DescribeProcessListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProcessList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
      zones?: {
        zone?: [ 
        {
          vpcEnabled?: boolean(name='VpcEnabled', description='Indicates whether Virtual Private Cloud (VPC) is supported in the zone. Valid values:

*   **true**
*   **false**', example='true'),
          zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-hangzhou-h'),
        }
      ](name='Zone')
      }(name='Zones', description='The zones.'),
    }
  ](name='Region')
  }(name='Regions', description='The queried regions.'),
  requestId?: string(name='RequestId', description='The request ID.', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRegions  DescribeRegionsRequest
  * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSchemasRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeSchemasResponseBody = {
  items?: {
    schema?: [ 
    {
      DBClusterId?: string(name='DBClusterId', description='The cluster ID.', example='cc-bp108z124a8o7****'),
      schemaName?: string(name='SchemaName', description='The database name.', example='database'),
    }
  ](name='Schema')
  }(name='Items', description='The information about the databases of the cluster.'),
  requestId?: string(name='RequestId', description='The request ID.', example='05321590-BB65-4720-8CB6-8218E041CDD0'),
}

model DescribeSchemasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSchemasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSchemas  DescribeSchemasRequest
  * @return DescribeSchemasResponse
 */
async function describeSchemas(request: DescribeSchemasRequest): DescribeSchemasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSchemas', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlowLogRecordsRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID. You can call the [DescribeDBClusters](https://help.aliyun.com/document_detail/170879.html) operation to query information about all the clusters that are deployed in a specific region. The information includes the cluster IDs.

This parameter is required.', example='cc-bp1z58t881wcx****', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-dd hh:mm:ss format. The time must be in UTC.

>  The end time must be later than the start time. The specified time range that can be specified must be less than seven days.

This parameter is required.', example='2022-05-27 16:00:00', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. Default value: **1**.', example='1', minimum=1, maximum=99999999, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values:

*   **30** (default)
*   **50**
*   **100**', example='30', minimum=1, maximum=99999999, position='Query'),
  queryDurationMs?: int32(name='QueryDurationMs', description='The minimum query duration. The minimum value is **1000**, and the default value is **1000**. Unit: milliseconds. Queries that last longer than this duration are returned in response parameters.', example='1000', minimum=0, maximum=9999999999, position='Query'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/170875.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-dd hh:mm:ss format. The time must be in Coordinated Universal Time (UTC).

This parameter is required.', example='2022-05-20 16:00:00', position='Query'),
}

model DescribeSlowLogRecordsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='DF203CC8-5F68-5E3F-8050-3C77DD65731A'),
  slowLogRecords?: {
    data?: {
      resultSet?: [ 
      {
        initialAddress?: string(name='InitialAddress', description='The IP address of the client that initiated the query.', example='::ffff:100.104.XX.XX'),
        initialQueryId?: string(name='InitialQueryId', description='The query ID.', example='\\"b51496f2-6b0b-4546-aff9-e17951cb9410\\"'),
        initialUser?: string(name='InitialUser', description='The username that is used to initiate the query.', example='test_users'),
        memoryUsage?: string(name='MemoryUsage', description='The peak memory usage for the query. Unit: bytes.', example='1048576'),
        query?: string(name='Query', description='The statement that was executed in the query.', example='Select * from table'),
        queryDurationMs?: string(name='QueryDurationMs', description='The duration of the query. Unit: milliseconds.', example='2000'),
        queryStartTime?: string(name='QueryStartTime', description='The beginning of the time range to query. The time is in the yyyy-MM-dd hh:mm:ss format. The time is displayed in UTC.', example='2022-05-22 20:00:01'),
        readBytes?: string(name='ReadBytes', description='The size of the data read by executing the statement. Unit: bytes.', example='1048576'),
        readRows?: string(name='ReadRows', description='The number of rows read by executing the statement.', example='10027008'),
        resultBytes?: string(name='ResultBytes', description='The size of the result data. Unit: bytes.', example='1024'),
        type?: string(name='Type', description='The query status. Valid values:

*   **QueryFinish**: The query is complete.
*   **Processing**: The query is running.', example='QueryFinish'),
      }
    ](name='ResultSet')
    }(name='Data', description='Details about the slow query logs.'),
    rows?: string(name='Rows', description='The number of rows in the result set.', example='1'),
    rowsBeforeLimitAtLeast?: string(name='RowsBeforeLimitAtLeast', description='The number of entries per page.', example='1'),
    statistics?: {
      bytesRead?: int32(name='BytesRead', description='The total size of data that were read. Unit: bytes.', example='123456'),
      elapsedTime?: float(name='ElapsedTime', description='The time consumed by the slow query. Unit: milliseconds.', example='21.35'),
      rowsRead?: int32(name='RowsRead', description='The total number of rows that were read.', example='2016722'),
    }(name='Statistics', description='The statistics of the results.'),
    tableSchema?: {
      resultSet?: [ 
      {
        name?: string(name='Name', description='The name of the column.', example='name'),
        type?: string(name='Type', description='The type of the column.', example='String'),
      }
    ](name='ResultSet')
    }(name='TableSchema', description='The schema of the table in the database.'),
  }(name='SlowLogRecords', description='The details about the slow query logs.'),
}

model DescribeSlowLogRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSlowLogRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSlowLogRecords  DescribeSlowLogRecordsRequest
  * @return DescribeSlowLogRecordsResponse
 */
async function describeSlowLogRecords(request: DescribeSlowLogRecordsRequest): DescribeSlowLogRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlowLogRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSynDbTablesRequest {
  dbClusterId: string(name='DbClusterId', description='The ID of the ApsaraDB for ClickHouse cluster.

This parameter is required.', example='cc-bp158i5wvj436****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  synDb: string(name='SynDb', description='The name of the ApsaraDB RDS for MySQL instance.

This parameter is required.', example='database', position='Query'),
}

model DescribeSynDbTablesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='851D11EA-681C-5B38-A065-C3F90BBD49DE'),
  tables?: [ string ](name='Tables', description='The queried tables.'),
}

model DescribeSynDbTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSynDbTablesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSynDbTables  DescribeSynDbTablesRequest
  * @return DescribeSynDbTablesResponse
 */
async function describeSynDbTables(request: DescribeSynDbTablesRequest): DescribeSynDbTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSynDbTables', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSynDbsRequest {
  dbClusterId: string(name='DbClusterId', description='The ID of the ApsaraDB for ClickHouse cluster.

This parameter is required.', example='cc-bp1ab22b80814****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeSynDbsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='7655F5F9-1313-5ABA-8516-F6EB79605A5F'),
  synDbs?: [ 
    {
      errorMsg?: string(name='ErrorMsg', description='*   When the value **true** is returned for the **SynStatus** parameter, the system does not return the ErrorMsg parameter.
*   When the value **false** is returned for the **SynStatus** parameter, the system returns for the ErrorMsg parameter the cause why the data synchronization failed.', example='ClickHouse exception, code: 49, host: 100.100.118.132, port: 49670; Code: 49, e.displayText() = DB::Exception: Logical error: there is no global context (version 20.8.17.25)n'),
      rdsId?: string(name='RdsId', description='The ID of the ApsaraDB RDS for MySQL instance.', example='rm-wz9d11qg1j0h4****'),
      rdsUserName?: string(name='RdsUserName', description='The database account that is used to log on to the ApsaraDB RDS for MySQL instance.', example='test'),
      rdsVpcUrl?: string(name='RdsVpcUrl', description='The internal endpoint of the ApsaraDB RDS for MySQL instance.', example='rm-bp16t9h3999xb0a711****.mysql.rds.aliyuncs.com:3306'),
      synDb?: string(name='SynDb', description='The name of the database in the ApsaraDB RDS for MySQL instance.', example='database'),
      synStatus?: boolean(name='SynStatus', description='Indicates whether the data synchronization succeeded. Valid values:

*   **true**: The data synchronization succeeded.
*   **false**: The data synchronization failed.', example='true'),
    }
  ](name='SynDbs', description='The information about data synchronization between the ApsaraDB for ClickHouse cluster and an ApsaraDB RDS for MySQL instance.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='0'),
}

model DescribeSynDbsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSynDbsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSynDbs  DescribeSynDbsRequest
  * @return DescribeSynDbsResponse
 */
async function describeSynDbs(request: DescribeSynDbsRequest): DescribeSynDbsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSynDbs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTablesRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemaName: string(name='SchemaName', description='The database name.

This parameter is required.', example='database', position='Query'),
}

model DescribeTablesResponseBody = {
  items?: {
    table?: [ 
    {
      DBClusterId?: string(name='DBClusterId', description='The cluster ID.', example='cc-bp108z124a8o7****'),
      schemaName?: string(name='SchemaName', description='The database name.', example='database'),
      tableName?: string(name='TableName', description='The table name.', example='test'),
    }
  ](name='Table')
  }(name='Items', description='The information about the tables.'),
  requestId?: string(name='RequestId', description='The request ID.', example='05321590-BB65-4720-8CB6-8218E041CDD0'),
}

model DescribeTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTablesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeTables  DescribeTablesRequest
  * @return DescribeTablesResponse
 */
async function describeTables(request: DescribeTablesRequest): DescribeTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTables', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTransferHistoryRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeTransferHistoryResponseBody = {
  historyDetails?: {
    historyDetail?: [ 
    {
      disableWriteWindows?: string(name='DisableWriteWindows'),
      progress?: string(name='Progress', description='The progress of the data migration.', example='100%'),
      sourceControlVersion?: string(name='SourceControlVersion'),
      sourceDBCluster?: string(name='SourceDBCluster', description='The ID of the source cluster.', example='cc-bp108z124a8o7****'),
      status?: string(name='Status', description='The status of the data migration task. Valid values:

*   **Finished**: The data migration task is complete.
*   **Processing**: The data migration task is in progress.', example='Finished'),
      targetControlVersion?: string(name='TargetControlVersion'),
      targetDBCluster?: string(name='TargetDBCluster', description='The ID of the destination cluster.', example='cc-bp13zkh9uw523****'),
    }
  ](name='HistoryDetail')
  }(name='HistoryDetails', description='The migration information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='05321590-BB65-4720-8CB6-8218E041CDD0'),
}

model DescribeTransferHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTransferHistoryResponseBody(name='body'),
}

/**
  * @description >  You can call this operation to query information about only data migration from an ApsaraDB for ClickHouse cluster of an earlier version to an ApsaraDB for ClickHouse cluster of a later version.
  * @param request  the request parameters of DescribeTransferHistory  DescribeTransferHistoryRequest
  * @return DescribeTransferHistoryResponse
 */
async function describeTransferHistory(request: DescribeTransferHistoryRequest): DescribeTransferHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTransferHistory', 'POST', '/', 'json', false, 'json', request);
}

model KillProcessRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  initialQueryId?: string(name='InitialQueryId', description='The query statement or query statements that you want to stop executing. If you want to stop executing multiple query statements, separate the statements with commas (,).

>  If you do not set this parameter, all query statements are stopped by default.', example='SELECT * FROM `test01` ;', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/170875.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model KillProcessResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='05321590-BB65-4720-8CB6-8218E041CDD0'),
}

model KillProcessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: KillProcessResponseBody(name='body'),
}

/**
  * @param request  the request parameters of KillProcess  KillProcessRequest
  * @return KillProcessResponse
 */
async function killProcess(request: KillProcessRequest): KillProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'KillProcess', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccountAuthorityRequest {
  accountName: string(name='AccountName', description='The name of the database account.

This parameter is required.', example='test', position='Query'),
  allowDatabases: string(name='AllowDatabases', description='The databases to which you want to grant permissions. Separate databases with commas (,).

This parameter is required.', example='db1', position='Query'),
  allowDictionaries: string(name='AllowDictionaries', description='The dictionaries to which you want to grant permissions. Separate dictionaries with commas (,).

This parameter is required.', example='dt1', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  ddlAuthority: boolean(name='DdlAuthority', description='Specifies whether to grant DDL permissions to the database account. Valid values:

*   **true**: grants DDL permissions to the database account.
*   **false**: does not grant DDL permissions to the database account.

This parameter is required.', example='true', position='Query'),
  dmlAuthority: string(name='DmlAuthority', description='Specifies whether to grant DML permissions to the database account. Valid values:

*   **all**
*   **readonly,modify**

This parameter is required.', example='all', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/170875.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  totalDatabases?: string(name='TotalDatabases', description='All databases. Separate databases with commas (,).', example='db1,db2', position='Query'),
  totalDictionaries?: string(name='TotalDictionaries', description='All dictionaries. Separate dictionaries with commas (,).', example='dt1,dt2', position='Query'),
}

model ModifyAccountAuthorityResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='05321590-BB65-4720-8CB6-8218E041CDD0'),
}

model ModifyAccountAuthorityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAccountAuthorityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAccountAuthority  ModifyAccountAuthorityRequest
  * @return ModifyAccountAuthorityResponse
 */
async function modifyAccountAuthority(request: ModifyAccountAuthorityRequest): ModifyAccountAuthorityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccountAuthority', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccountDescriptionRequest {
  accountDescription: string(name='AccountDescription', description='This parameter is required.', example='ceshi', position='Query'),
  accountName: string(name='AccountName', description='This parameter is required.', example='test', position='Query'),
  DBClusterId: string(name='DBClusterId', description='This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyAccountDescriptionResponseBody = {
  requestId?: string(name='RequestId', example='2FED790E-FB61-4721-8C1C-07C627FA5A19'),
}

model ModifyAccountDescriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAccountDescriptionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAccountDescription  ModifyAccountDescriptionRequest
  * @return ModifyAccountDescriptionResponse
 */
async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccountDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBackupPolicyRequest {
  backupRetentionPeriod?: string(name='BackupRetentionPeriod', description='The retention period for the backup data. Valid values: 7 to 730. Unit: day.', example='7', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp1qx68m06981****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  preferredBackupPeriod: string(name='PreferredBackupPeriod', description='The day of a week when the system regularly backs up data. If you specify multiple days of a week, separate them with commas (,). Valid values:

*   **Monday**
*   **Tuesday**
*   **Wednesday**
*   **Thursday**
*   **Friday**
*   **Saturday**
*   **Sunday**

This parameter is required.', example='Monday', position='Query'),
  preferredBackupTime: string(name='PreferredBackupTime', description='The backup window. Specify the time in the ISO 8601 standard in the HH:mmZ-HH:mmZ format. The time must be in Coordinated Universal Time (UTC).

For example, if you set the backup window to 00:00Z-01:00Z, the data of the cluster can be backed up from 08:00 (UTC+8) to 09:00 (UTC+8).

This parameter is required.', example='15:00Z-16:00Z', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyBackupPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
}

model ModifyBackupPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyBackupPolicyResponseBody(name='body'),
}

/**
  * @description >  This operation is available only for the ApsaraDB for ClickHouse clusters of versions 20.3, 20.8, and 21.8.
  * @param request  the request parameters of ModifyBackupPolicy  ModifyBackupPolicyRequest
  * @return ModifyBackupPolicyResponse
 */
async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterRequest {
  DBClusterClass: string(name='DBClusterClass', description='The specifications of the cluster.

*   Valid values when the cluster is of Single-replica Edition:

    *   **S4-NEW**
    *   **S8**
    *   **S16**
    *   **S32**
    *   **S64**
    *   **S104**

*   Valid values when the cluster is of Double-replica Edition:

    *   **C4-NEW**
    *   **C8**
    *   **C16**
    *   **C32**
    *   **C64**
    *   **C104**

This parameter is required.', example='S4-NEW', position='Query'),
  DBClusterId?: string(name='DBClusterId', description='The cluster ID.', example='cc-bp19lo45sy98x****', position='Query'),
  DBNodeGroupCount: string(name='DBNodeGroupCount', description='The number of nodes in the cluster.

*   If the cluster is of Single-replica Edition, the value must be an integer that ranges from 1 to 48.
*   If the cluster is of Double-replica Edition, the value must be an integer that ranges from 1 to 24.

This parameter is required.', example='1', position='Query'),
  DBNodeStorage: string(name='DBNodeStorage', description='The storage capacity of a single node of the cluster. Unit: GB.

Valid values: 100 to 32000.

>  This value is a multiple of 100.

This parameter is required.', example='100', position='Query'),
  dbNodeStorageType?: string(name='DbNodeStorageType', position='Query'),
  disableWriteWindows?: string(name='DisableWriteWindows', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/170875.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBClusterResponseBody = {
  DBCluster?: {
    dbClusterId?: string(name='dbClusterId', description='The cluster ID.', example='cc-bp19lo45sy98x****'),
    orderId?: string(name='orderId', description='The order ID.', example='21417210003****'),
  }(name='DBCluster', description='The information about the cluster.'),
  requestId?: string(name='RequestId', description='The request ID.', example='BA30A000-3A4D-5B97-9420-E5D0D49F7016'),
}

model ModifyDBClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDBClusterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDBCluster  ModifyDBClusterRequest
  * @return ModifyDBClusterResponse
 */
async function modifyDBCluster(request: ModifyDBClusterRequest): ModifyDBClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBCluster', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterAccessWhiteListRequest {
  DBClusterIPArrayAttribute?: string(name='DBClusterIPArrayAttribute', example='NULL', position='Query'),
  DBClusterIPArrayName?: string(name='DBClusterIPArrayName', example='default', position='Query'),
  DBClusterId: string(name='DBClusterId', description='This parameter is required.', example='cc-bp1qx68m06981****', position='Query'),
  modifyMode?: string(name='ModifyMode', example='Cover', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityIps: string(name='SecurityIps', description='This parameter is required.', example='192.168.xx.xx', position='Query'),
}

model ModifyDBClusterAccessWhiteListResponseBody = {
  requestId?: string(name='RequestId', example='D0CEC6AC-7760-409A-A0D5-E6CD8660E9CC'),
}

model ModifyDBClusterAccessWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDBClusterAccessWhiteListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDBClusterAccessWhiteList  ModifyDBClusterAccessWhiteListRequest
  * @return ModifyDBClusterAccessWhiteListResponse
 */
async function modifyDBClusterAccessWhiteList(request: ModifyDBClusterAccessWhiteListRequest): ModifyDBClusterAccessWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterAccessWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterConfigRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID. You can call the [DescribeDBClusters](https://help.aliyun.com/document_detail/170879.html) operation to query information about all the clusters that are deployed in a specific region. The information includes the cluster IDs.

This parameter is required.', example='cc-bp1t9lbb7a4z7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  reason?: string(name='Reason', description='The reason for the change.', example='test', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/170875.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  userConfig: string(name='UserConfig', description='The names of the parameters and the new values that you want to specify for the parameters.

>  You can change the value of a single parameter. The values of parameters that are not specified will not be changed.

This parameter is required.', example='{"keep_alive_timeout":"301"}', position='Query'),
}

model ModifyDBClusterConfigResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A9AA1E0A-2AEE-5847-87CF-E4FDC0E66052'),
}

model ModifyDBClusterConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDBClusterConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDBClusterConfig  ModifyDBClusterConfigRequest
  * @return ModifyDBClusterConfigResponse
 */
async function modifyDBClusterConfig(request: ModifyDBClusterConfigRequest): ModifyDBClusterConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterConfigInXMLRequest {
  config: string(name='Config', description='The configuration parameters whose settings you want to modify. You can call the [DescribeDBClusterConfigInXML](https://help.aliyun.com/document_detail/452210.html) operation to query configuration parameters, and modify the settings of the returned configuration parameters.

> You must specify all configuration parameters even when you want to modify the setting of a single parameter. If a configuration parameter is not specified, the original value of this parameter is retained or the modification fails.

This parameter is required.', example='<?xml version="1.0"?>
<yandex>
    <keep_alive_timeout>400</keep_alive_timeout>
    <listen_backlog>4096</listen_backlog>
    <logger>
        <level>debug</level>
        <size>1000M</size>
    </logger>
    <mark_cache_size>5368709120</mark_cache_size>
    <max_concurrent_queries>201</max_concurrent_queries>
    <max_connections>4096</max_connections>
    <max_partition_size_to_drop>0</max_partition_size_to_drop>
    <max_table_size_to_drop>0</max_table_size_to_drop>
    <merge_tree>
        <max_delay_to_insert>256</max_delay_to_insert>
        <max_part_loading_threads>auto</max_part_loading_threads>
        <max_suspicious_broken_parts>100</max_suspicious_broken_parts>
        <zookeeper_session_expiration_check_period>1</zookeeper_session_expiration_check_period>
    </merge_tree>
    <uncompressed_cache_size>1717986918</uncompressed_cache_size>
</yandex>', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The cluster ID. You can call the [DescribeDBClusters](https://help.aliyun.com/document_detail/170879.html) operation to query information about all the clusters that are deployed in a specific region. The information includes the cluster IDs.

This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  reason?: string(name='Reason', description='The reason for the modification.', example='test', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the cluster. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/170875.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model ModifyDBClusterConfigInXMLResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='BDD29EB1-BE76-5CFA-9068-D34B696310BF'),
}

model ModifyDBClusterConfigInXMLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDBClusterConfigInXMLResponseBody(name='body'),
}

/**
  * @description >  You can call this operation only for ApsaraDB for ClickHouse clusters that were created after December 1, 2021.
  * @param request  the request parameters of ModifyDBClusterConfigInXML  ModifyDBClusterConfigInXMLRequest
  * @return ModifyDBClusterConfigInXMLResponse
 */
async function modifyDBClusterConfigInXML(request: ModifyDBClusterConfigInXMLRequest): ModifyDBClusterConfigInXMLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterConfigInXML', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterDescriptionRequest {
  DBClusterDescription: string(name='DBClusterDescription', description='The cluster name. When you set the cluster name, take note of the following rules:

*   The cluster name cannot start with http:// or https://.
*   The cluster name must be 2 to 256 characters in length.

This parameter is required.', example='ClusterDescriptionTest', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBClusterDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='05321590-BB65-4720-8CB6-8218E041CDD0'),
}

model ModifyDBClusterDescriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDBClusterDescriptionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDBClusterDescription  ModifyDBClusterDescriptionRequest
  * @return ModifyDBClusterDescriptionResponse
 */
async function modifyDBClusterDescription(request: ModifyDBClusterDescriptionRequest): ModifyDBClusterDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterMaintainTimeRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  maintainTime: string(name='MaintainTime', description='The maintenance window of the cluster. Specify the time in the HH:mmZ-HH:mmZ format. The time must be in Coordinated Universal Time (UTC).

For example, a value of 00:00Z-01:00Z indicates that routine maintenance can be performed on the cluster from 08:00 (UTC+8) to 09:00 (UTC+8).

>  You can set the start time and end time of the maintenance window to the time on the hour, and the maintenance window is 1 hour.

This parameter is required.', example='00:00Z-01:00Z', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBClusterMaintainTimeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='05321590-BB65-4720-8CB6-8218E041CDD0'),
}

model ModifyDBClusterMaintainTimeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDBClusterMaintainTimeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDBClusterMaintainTime  ModifyDBClusterMaintainTimeRequest
  * @return ModifyDBClusterMaintainTimeResponse
 */
async function modifyDBClusterMaintainTime(request: ModifyDBClusterMaintainTimeRequest): ModifyDBClusterMaintainTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterMaintainTime', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBConfigRequest {
  config?: string(name='Config', description='The dictionary configuration.', example='{"name":"test"}', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp1r59y779o04****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/170875.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBConfigResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='BF3844B6-1B12-57A0-A259-476D2079EE83'),
}

model ModifyDBConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDBConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDBConfig  ModifyDBConfigRequest
  * @return ModifyDBConfigResponse
 */
async function modifyDBConfig(request: ModifyDBConfigRequest): ModifyDBConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyMinorVersionGreadeTypeRequest {
  DBClusterId: string(name='DBClusterId', description='This parameter is required.', example='cc-bp1qx68m06981****', position='Query'),
  maintainAutoType: boolean(name='MaintainAutoType', description='This parameter is required.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyMinorVersionGreadeTypeResponseBody = {
  requestId?: string(name='RequestId', example='D0CEC6AC-7760-409A-A0D5-E6CD8660E9CC'),
}

model ModifyMinorVersionGreadeTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyMinorVersionGreadeTypeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyMinorVersionGreadeType  ModifyMinorVersionGreadeTypeRequest
  * @return ModifyMinorVersionGreadeTypeResponse
 */
async function modifyMinorVersionGreadeType(request: ModifyMinorVersionGreadeTypeRequest): ModifyMinorVersionGreadeTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyMinorVersionGreadeType', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRDSToClickhouseDbRequest {
  ckPassword: string(name='CkPassword', description='The password of the account that is used to log on to the database in the ApsaraDB for ClickHouse cluster.

This parameter is required.', example='123456Aa', position='Query'),
  ckUserName: string(name='CkUserName', description='The account that is used to log on to the database in the ApsaraDB for ClickHouse cluster.

This parameter is required.', example='user1', position='Query'),
  clickhousePort?: long(name='ClickhousePort', description='The port number of the ApsaraDB for ClickHouse cluster.', example='8123', position='Query'),
  dbClusterId: string(name='DbClusterId', description='The ID of the ApsaraDB for ClickHouse cluster.

This parameter is required.', example='cc-bp158i5wvj436****', position='Query'),
  limitUpper?: long(name='LimitUpper', description='The maximum number of rows that can be synchronized per second.', example='50000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  rdsId: string(name='RdsId', description='The ID of the ApsaraDB RDS for MySQL instance.

This parameter is required.', example='rm-uf6x3qq4t90ok****', position='Query'),
  rdsPassword: string(name='RdsPassword', description='The password of the account that is used to log on to the database in the ApsaraDB RDS for MySQL instance.

This parameter is required.', example='123456Rr', position='Query'),
  rdsPort?: long(name='RdsPort', description='The port number of the ApsaraDB RDS for MySQL instance.', example='3306', position='Query'),
  rdsSynDb: string(name='RdsSynDb', description='The database in the ApsaraDB RDS for MySQL instance.

This parameter is required.', example='database', position='Query'),
  rdsSynTables: string(name='RdsSynTables', description='The table in the ApsaraDB RDS for MySQL instance.

This parameter is required.', example='table', position='Query'),
  rdsUserName: string(name='RdsUserName', description='The account that is used to log on to the database in the ApsaraDB RDS for MySQL instance.

This parameter is required.', example='user2', position='Query'),
  rdsVpcId?: string(name='RdsVpcId', description='The ID of the virtual private cloud (VPC) to which the ApsaraDB RDS for MySQL instance belongs.', example='vpc-bp1v9dtwmqqjhwwg****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  skipUnsupported: boolean(name='SkipUnsupported', description='Specifies whether to ignore databases that do not support synchronization. Valid values:

*   **true**
*   **false**

This parameter is required.', example='true', position='Query'),
}

model ModifyRDSToClickhouseDbResponseBody = {
  errorCode?: long(name='ErrorCode', description='The error code.', example='0'),
  errorMsg?: string(name='ErrorMsg', description='*   If the value **1** is returned for the **Status** parameter, the system does not return the ErrorMsg parameter.
*   If the value **0** is returned for the **Status** parameter, the ErrorMsg parameter returns the cause for the modification failure.', example='ClickHouse exception, code: 49, host: 100.100.118.132, port: 49670; Code: 49, e.displayText() = DB::Exception: Logical error: there is no global context (version 20.8.17.25)n'),
  requestId?: string(name='RequestId', description='The request ID.', example='746CD303-0B82-5E8D-886D-93A9FAF3A876'),
  status?: long(name='Status', description='Indicates whether the modification was successful. Valid values:

*   **1**: The modification was successful.
*   **0**: The modification failed.', example='1'),
}

model ModifyRDSToClickhouseDbResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyRDSToClickhouseDbResponseBody(name='body'),
}

/**
  * @description >  This operation is applicable only to ApsaraDB for ClickHouse clusters.
  * @param request  the request parameters of ModifyRDSToClickhouseDb  ModifyRDSToClickhouseDbRequest
  * @return ModifyRDSToClickhouseDbResponse
 */
async function modifyRDSToClickhouseDb(request: ModifyRDSToClickhouseDbRequest): ModifyRDSToClickhouseDbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRDSToClickhouseDb', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseClusterPublicConnectionRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ReleaseClusterPublicConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D0CEC6AC-7760-409A-A0D5-E6CD8660E9CC'),
}

model ReleaseClusterPublicConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseClusterPublicConnectionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReleaseClusterPublicConnection  ReleaseClusterPublicConnectionRequest
  * @return ReleaseClusterPublicConnectionResponse
 */
async function releaseClusterPublicConnection(request: ReleaseClusterPublicConnectionRequest): ReleaseClusterPublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseClusterPublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model ResetAccountPasswordRequest {
  accountName: string(name='AccountName', description='The name of the database account.

This parameter is required.', example='test', position='Query'),
  accountPassword: string(name='AccountPassword', description='The new password for the database account.

> 

*   The password must contain at least three types of the following characters: uppercase letters, lowercase letters, digits, and special characters.

*   The password can contain the following special characters: ! @ # $ % ^ & \\* ( ) _ + - =
*   The password must be 8 to 32 characters in length.

This parameter is required.', example='123456Ff', position='Query'),
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ResetAccountPasswordResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='2FED790E-FB61-4721-8C1C-07C627FA5A19'),
}

model ResetAccountPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetAccountPasswordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResetAccountPassword  ResetAccountPasswordRequest
  * @return ResetAccountPasswordResponse
 */
async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAccountPassword', 'POST', '/', 'json', false, 'json', request);
}

model RestartInstanceRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID. You can call the [DescribeDBClusters](https://help.aliyun.com/document_detail/170879.html) operation to query information about all the clusters that are deployed in a specific region. The information includes the cluster IDs.

This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values:

*   30 (default)
*   50
*   100', example='30', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/170875.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  restartTime?: string(name='RestartTime', description='The scheduled restart time. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mmZ format. The time must be in Coordinated Universal Time (UTC).

>  If this parameter is left empty or the time specified by this parameter is earlier than the current time, the cluster is immediately restarted.', example='2023-03-22T00:00:50Z', position='Query'),
}

model RestartInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F5178C10-1407-4987-9133-DE4DC9119F75'),
}

model RestartInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RestartInstance  RestartInstanceRequest
  * @return RestartInstanceResponse
 */
async function restartInstance(request: RestartInstanceRequest): RestartInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartInstance', 'POST', '/', 'json', false, 'json', request);
}

model TransferVersionRequest {
  DBClusterId: string(name='DBClusterId', description='The ID of the source ApsaraDB for ClickHouse cluster.

This parameter is required.', example='cc-bp1tm8zf130ew****', position='Query'),
  disableWriteWindows?: string(name='DisableWriteWindows', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values:

*   **30** (default)
*   **50**
*   **100**', example='30', position='Query'),
  regionId: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/170875.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceAccount: string(name='SourceAccount', description='The database account that is used to log on to the database in the source ApsaraDB for ClickHouse cluster.

This parameter is required.', example='test', position='Query'),
  sourcePassword: string(name='SourcePassword', description='The password that corresponds to the database account for logging on to the database in the source ApsaraDB for ClickHouse cluster.

This parameter is required.', example='123456Aa', position='Query'),
  targetAccount: string(name='TargetAccount', description='The database account that is used to log on to the database in the destination ApsaraDB for ClickHouse cluster.

This parameter is required.', example='test01', position='Query'),
  targetDbClusterId: string(name='TargetDbClusterId', description='The ID of the destination ApsaraDB for ClickHouse cluster.

This parameter is required.', example='cc-bp14b39djx7zg****', position='Query'),
  targetPassword: string(name='TargetPassword', description='The password that corresponds to the database account for logging on to the database in the destination ApsaraDB for ClickHouse cluster.

This parameter is required.', example='123456Ff', position='Query'),
}

model TransferVersionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='7084CDB5-308F-5D0B-8F9B-5F7D83E09738'),
}

model TransferVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TransferVersionResponseBody(name='body'),
}

/**
  * @description ## [](#)Prerequisites
  * *   The IP address of the source ApsaraDB for ClickHouse cluster is added to the IP address whitelist of the destination ApsaraDB for ClickHouse cluster.
  * *   The IP address of the destination ApsaraDB for ClickHouse cluster is added to the IP address whitelist of the source ApsaraDB for ClickHouse cluster.
  * >  You can execute the `select * from system.clusters;` statement to query the IP address of an ApsaraDB for ClickHouse cluster.
  * @param request  the request parameters of TransferVersion  TransferVersionRequest
  * @return TransferVersionResponse
 */
async function transferVersion(request: TransferVersionRequest): TransferVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransferVersion', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeMinorVersionRequest {
  DBClusterId: string(name='DBClusterId', description='The cluster ID.

This parameter is required.', example='cc-bp108z124a8o7****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  upgradeImmediately: boolean(name='UpgradeImmediately', description='Specifies whether to update the minor engine version of the ApsaraDB for ClickHouse cluster immediately. Valid values:

*   **true**: updates the minor engine version of the ApsaraDB for ClickHouse cluster immediately.
*   **false**: updates the minor engine version of the ApsaraDB for ClickHouse cluster at the specified time or within the specified maintenance window.

>  If you want to update the minor engine version of the ApsaraDB for ClickHouse cluster at the specified time, **UpgradeTime** is required.

This parameter is required.', example='false', position='Query'),
  upgradeTime?: string(name='UpgradeTime', description='The update time. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mmZ format. The time must be in Coordinated Universal Time (UTC).

>  If you do not set this parameter, the minor engine version of an ApsaraDB for ClickHouse cluster is updated within the specified maintenance window.', example='2022-08-07T16:38Z', position='Query'),
  upgradeVersion?: string(name='UpgradeVersion', description='The minor engine version to which you want to update.

>  By default, UpgradeVersion is not set and the minor engine version of the ApsaraDB for ClickHouse cluster is updated to the latest version.', example='1.37.0', position='Query'),
}

model UpgradeMinorVersionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='FE242962-6DA3-5FC8-9691-37B62A3210F7'),
}

model UpgradeMinorVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeMinorVersionResponseBody(name='body'),
}

/**
  * @description >  You can call this operation only for ApsaraDB for ClickHouse clusters that were purchased after December 1, 2021.
  * @param request  the request parameters of UpgradeMinorVersion  UpgradeMinorVersionRequest
  * @return UpgradeMinorVersionResponse
 */
async function upgradeMinorVersion(request: UpgradeMinorVersionRequest): UpgradeMinorVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeMinorVersion', 'POST', '/', 'json', false, 'json', request);
}

