/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'clickhouse';
  @version = '2019-11-11';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'clickhouse.aliyuncs.com',
    ap-southeast-1 = 'clickhouse.aliyuncs.com',
    cn-beijing = 'clickhouse.aliyuncs.com',
    cn-beijing-finance-1 = 'clickhouse.aliyuncs.com',
    cn-beijing-finance-pop = 'clickhouse.aliyuncs.com',
    cn-beijing-gov-1 = 'clickhouse.aliyuncs.com',
    cn-beijing-nu16-b01 = 'clickhouse.aliyuncs.com',
    cn-edge-1 = 'clickhouse.aliyuncs.com',
    cn-fujian = 'clickhouse.aliyuncs.com',
    cn-haidian-cm12-c01 = 'clickhouse.aliyuncs.com',
    cn-hangzhou = 'clickhouse.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-finance = 'clickhouse.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-test-306 = 'clickhouse.aliyuncs.com',
    cn-hongkong = 'clickhouse.aliyuncs.com',
    cn-hongkong-finance-pop = 'clickhouse.aliyuncs.com',
    cn-north-2-gov-1 = 'clickhouse.aliyuncs.com',
    cn-qingdao = 'clickhouse.aliyuncs.com',
    cn-qingdao-nebula = 'clickhouse.aliyuncs.com',
    cn-shanghai = 'clickhouse.aliyuncs.com',
    cn-shanghai-et15-b01 = 'clickhouse.aliyuncs.com',
    cn-shanghai-et2-b01 = 'clickhouse.aliyuncs.com',
    cn-shanghai-finance-1 = 'clickhouse.aliyuncs.com',
    cn-shanghai-inner = 'clickhouse.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'clickhouse.aliyuncs.com',
    cn-shenzhen = 'clickhouse.aliyuncs.com',
    cn-shenzhen-finance-1 = 'clickhouse.aliyuncs.com',
    cn-shenzhen-inner = 'clickhouse.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'clickhouse.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'clickhouse.aliyuncs.com',
    cn-wuhan = 'clickhouse.aliyuncs.com',
    cn-yushanfang = 'clickhouse.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'clickhouse.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'clickhouse.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'clickhouse.aliyuncs.com',
    eu-west-1-oxs = 'clickhouse.aliyuncs.com',
    me-east-1 = 'clickhouse.aliyuncs.com',
    rus-west-1-pop = 'clickhouse.aliyuncs.com',
    us-east-1 = 'clickhouse.aliyuncs.com',
    us-west-1 = 'clickhouse.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AllocateClusterPublicConnectionRequest {
  connectionStringPrefix?: string(name='ConnectionStringPrefix', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AllocateClusterPublicConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model AllocateClusterPublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateClusterPublicConnectionResponseBody(name='body'),
}

async function allocateClusterPublicConnection(request: AllocateClusterPublicConnectionRequest): AllocateClusterPublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateClusterPublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model CheckClickhouseToRDSRequest {
  ckPassword: string(name='CkPassword', position='Query'),
  ckUserName: string(name='CkUserName', position='Query'),
  clickhousePort?: long(name='ClickhousePort', position='Query'),
  dbClusterId: string(name='DbClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  rdsId: string(name='RdsId', position='Query'),
  rdsPassword: string(name='RdsPassword', position='Query'),
  rdsPort?: long(name='RdsPort', position='Query'),
  rdsUserName: string(name='RdsUserName', position='Query'),
  rdsVpcId: string(name='RdsVpcId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CheckClickhouseToRDSResponseBody = {
  errorCode?: string(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model CheckClickhouseToRDSResponse = {
  headers: map[string]string(name='headers'),
  body: CheckClickhouseToRDSResponseBody(name='body'),
}

async function checkClickhouseToRDS(request: CheckClickhouseToRDSRequest): CheckClickhouseToRDSResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckClickhouseToRDS', 'POST', '/', 'json', false, 'json', request);
}

model CheckMonitorAlertRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CheckMonitorAlertResponseBody = {
  parameter?: string(name='Parameter'),
  requestId?: string(name='RequestId'),
  state?: string(name='State'),
}

model CheckMonitorAlertResponse = {
  headers: map[string]string(name='headers'),
  body: CheckMonitorAlertResponseBody(name='body'),
}

async function checkMonitorAlert(request: CheckMonitorAlertRequest): CheckMonitorAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckMonitorAlert', 'POST', '/', 'json', false, 'json', request);
}

model CheckScaleOutBalancedRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CheckScaleOutBalancedResponseBody = {
  checkCode?: string(name='CheckCode'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  tableDetails?: {
    tableDetail?: [ 
    {
      cluster?: string(name='Cluster'),
      database?: string(name='Database'),
      detail?: int32(name='Detail'),
      tableName?: string(name='TableName'),
    }
  ](name='TableDetail')
  }(name='TableDetails'),
  timeDuration?: string(name='TimeDuration'),
  totalCount?: int32(name='TotalCount'),
}

model CheckScaleOutBalancedResponse = {
  headers: map[string]string(name='headers'),
  body: CheckScaleOutBalancedResponseBody(name='body'),
}

async function checkScaleOutBalanced(request: CheckScaleOutBalancedRequest): CheckScaleOutBalancedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckScaleOutBalanced', 'POST', '/', 'json', false, 'json', request);
}

model CheckServiceLinkedRoleRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CheckServiceLinkedRoleResponseBody = {
  hasServiceLinkedRole?: boolean(name='HasServiceLinkedRole'),
  requestId?: string(name='RequestId'),
}

model CheckServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CheckServiceLinkedRoleResponseBody(name='body'),
}

async function checkServiceLinkedRole(request: CheckServiceLinkedRoleRequest): CheckServiceLinkedRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckServiceLinkedRole', 'POST', '/', 'json', false, 'json', request);
}

model CheckVersionTransferRequest {
  checkAccount: boolean(name='CheckAccount', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceAccount: string(name='SourceAccount', position='Query'),
  sourcePassword: string(name='SourcePassword', position='Query'),
  targetAccount: string(name='TargetAccount', position='Query'),
  targetDbClusterId: string(name='TargetDbClusterId', position='Query'),
  targetPassword: string(name='TargetPassword', position='Query'),
}

model CheckVersionTransferResponseBody = {
  checkAccess?: {
    errCode?: long(name='ErrCode'),
    errMessage?: string(name='ErrMessage'),
  }(name='CheckAccess'),
  checkCategory?: boolean(name='CheckCategory'),
  checkCode?: {
    errCode?: long(name='ErrCode'),
    errMessage?: string(name='ErrMessage'),
  }(name='CheckCode'),
  checkConnection?: boolean(name='CheckConnection'),
  checkStatus?: {
    errCode?: long(name='ErrCode'),
    errMessage?: string(name='ErrMessage'),
  }(name='CheckStatus'),
  checkStorage?: boolean(name='CheckStorage'),
  requestId?: string(name='RequestId'),
  timeDuration?: string(name='TimeDuration'),
  totalCount?: int32(name='TotalCount'),
}

model CheckVersionTransferResponse = {
  headers: map[string]string(name='headers'),
  body: CheckVersionTransferResponseBody(name='body'),
}

async function checkVersionTransfer(request: CheckVersionTransferRequest): CheckVersionTransferResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckVersionTransfer', 'POST', '/', 'json', false, 'json', request);
}

model CreateAccountRequest {
  accountDescription?: string(name='AccountDescription', position='Query'),
  accountName: string(name='AccountName', position='Query'),
  accountPassword: string(name='AccountPassword', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAccountResponseBody(name='body'),
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateAccountAndAuthorityRequest {
  accountDescription?: string(name='AccountDescription', position='Query'),
  accountName: string(name='AccountName', position='Query'),
  accountPassword: string(name='AccountPassword', position='Query'),
  allowDatabases: string(name='AllowDatabases', position='Query'),
  allowDictionaries: string(name='AllowDictionaries', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ddlAuthority: boolean(name='DdlAuthority', position='Query'),
  dmlAuthority: string(name='DmlAuthority', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  totalDatabases?: string(name='TotalDatabases', position='Query'),
  totalDictionaries?: string(name='TotalDictionaries', position='Query'),
}

model CreateAccountAndAuthorityResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateAccountAndAuthorityResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAccountAndAuthorityResponseBody(name='body'),
}

async function createAccountAndAuthority(request: CreateAccountAndAuthorityRequest): CreateAccountAndAuthorityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccountAndAuthority', 'POST', '/', 'json', false, 'json', request);
}

model CreateBackupPolicyRequest {
  backupRetentionPeriod?: string(name='BackupRetentionPeriod', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  preferredBackupPeriod: string(name='PreferredBackupPeriod', position='Query'),
  preferredBackupTime: string(name='PreferredBackupTime', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBackupPolicyResponseBody(name='body'),
}

async function createBackupPolicy(request: CreateBackupPolicyRequest): CreateBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateDBInstanceRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  DBClusterCategory: string(name='DBClusterCategory', position='Query'),
  DBClusterClass: string(name='DBClusterClass', position='Query'),
  DBClusterDescription?: string(name='DBClusterDescription', position='Query'),
  DBClusterNetworkType: string(name='DBClusterNetworkType', position='Query'),
  DBClusterVersion: string(name='DBClusterVersion', position='Query'),
  DBNodeGroupCount: string(name='DBNodeGroupCount', position='Query'),
  DBNodeStorage: string(name='DBNodeStorage', position='Query'),
  dbNodeStorageType: string(name='DbNodeStorageType', position='Query'),
  encryptionKey?: string(name='EncryptionKey', position='Query'),
  encryptionType?: string(name='EncryptionType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  payType: string(name='PayType', position='Query'),
  period?: string(name='Period', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  usedTime?: string(name='UsedTime', position='Query'),
  VPCId: string(name='VPCId', position='Query'),
  vSwitchId: string(name='VSwitchId', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model CreateDBInstanceResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateDBInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDBInstanceResponseBody(name='body'),
}

async function createDBInstance(request: CreateDBInstanceRequest): CreateDBInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDBInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateMonitorDataReportRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateMonitorDataReportResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateMonitorDataReportResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMonitorDataReportResponseBody(name='body'),
}

async function createMonitorDataReport(request: CreateMonitorDataReportRequest): CreateMonitorDataReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMonitorDataReport', 'POST', '/', 'json', false, 'json', request);
}

model CreateOSSStorageRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateOSSStorageResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateOSSStorageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOSSStorageResponseBody(name='body'),
}

async function createOSSStorage(request: CreateOSSStorageRequest): CreateOSSStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOSSStorage', 'POST', '/', 'json', false, 'json', request);
}

model CreatePortsForClickHouseRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  portType: string(name='PortType', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreatePortsForClickHouseResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreatePortsForClickHouseResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePortsForClickHouseResponseBody(name='body'),
}

async function createPortsForClickHouse(request: CreatePortsForClickHouseRequest): CreatePortsForClickHouseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePortsForClickHouse', 'POST', '/', 'json', false, 'json', request);
}

model CreateRDSToClickhouseDbRequest {
  ckPassword: string(name='CkPassword', position='Query'),
  ckUserName: string(name='CkUserName', position='Query'),
  clickhousePort?: long(name='ClickhousePort', position='Query'),
  dbClusterId: string(name='DbClusterId', position='Query'),
  limitUpper?: long(name='LimitUpper', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  rdsId: string(name='RdsId', position='Query'),
  rdsPassword: string(name='RdsPassword', position='Query'),
  rdsPort?: long(name='RdsPort', position='Query'),
  rdsUserName: string(name='RdsUserName', position='Query'),
  rdsVpcId?: string(name='RdsVpcId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  skipUnsupported: boolean(name='SkipUnsupported', position='Query'),
  synDbTables: string(name='SynDbTables', position='Query'),
}

model CreateRDSToClickhouseDbResponseBody = {
  errorMsg?: string(name='ErrorMsg'),
  repeatedDbs?: [ string ](name='RepeatedDbs'),
  requestId?: string(name='RequestId'),
  status?: long(name='Status'),
}

model CreateRDSToClickhouseDbResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRDSToClickhouseDbResponseBody(name='body'),
}

async function createRDSToClickhouseDb(request: CreateRDSToClickhouseDbRequest): CreateRDSToClickhouseDbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRDSToClickhouseDb', 'POST', '/', 'json', false, 'json', request);
}

model CreateServiceLinkedRoleRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateServiceLinkedRoleResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceLinkedRoleResponseBody(name='body'),
}

async function createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): CreateServiceLinkedRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServiceLinkedRole', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAccountRequest {
  accountName: string(name='AccountName', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAccountResponseBody(name='body'),
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccount', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDBClusterRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDBClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDBClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDBClusterResponseBody(name='body'),
}

async function deleteDBCluster(request: DeleteDBClusterRequest): DeleteDBClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDBCluster', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLorneTaskRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: string(name='TaskId', position='Query'),
}

model DeleteLorneTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLorneTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLorneTaskResponseBody(name='body'),
}

async function deleteLorneTask(request: DeleteLorneTaskRequest): DeleteLorneTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLorneTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSyndbRequest {
  dbClusterId: string(name='DbClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  synDb: string(name='SynDb', position='Query'),
}

model DeleteSyndbResponseBody = {
  errorCode?: long(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model DeleteSyndbResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSyndbResponseBody(name='body'),
}

async function deleteSyndb(request: DeleteSyndbRequest): DeleteSyndbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSyndb', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccountAuthorityRequest {
  accountName?: string(name='AccountName', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeAccountAuthorityResponseBody = {
  accountName?: string(name='AccountName'),
  allowDatabases?: [ string ](name='AllowDatabases'),
  allowDictionaries?: [ string ](name='AllowDictionaries'),
  ddlAuthority?: boolean(name='DdlAuthority'),
  dmlAuthority?: string(name='DmlAuthority'),
  requestId?: string(name='RequestId'),
  totalDatabases?: [ string ](name='TotalDatabases'),
  totalDictionaries?: [ string ](name='TotalDictionaries'),
}

model DescribeAccountAuthorityResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccountAuthorityResponseBody(name='body'),
}

async function describeAccountAuthority(request: DescribeAccountAuthorityRequest): DescribeAccountAuthorityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccountAuthority', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccountsRequest {
  accountName?: string(name='AccountName', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeAccountsResponseBody = {
  accounts?: {
    account?: [ 
    {
      accountDescription?: string(name='AccountDescription'),
      accountName?: string(name='AccountName'),
      accountStatus?: string(name='AccountStatus'),
      accountType?: string(name='AccountType'),
    }
  ](name='Account')
  }(name='Accounts'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccountsResponseBody(name='body'),
}

async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccounts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAllDataSourceRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemaName?: string(name='SchemaName', position='Query'),
  tableName?: string(name='TableName', position='Query'),
}

model DescribeAllDataSourceResponseBody = {
  columns?: {
    column?: [ 
    {
      autoIncrementColumn?: boolean(name='AutoIncrementColumn'),
      columnName?: string(name='ColumnName'),
      DBClusterId?: string(name='DBClusterId'),
      primaryKey?: boolean(name='PrimaryKey'),
      schemaName?: string(name='SchemaName'),
      tableName?: string(name='TableName'),
      type?: string(name='Type'),
    }
  ](name='Column')
  }(name='Columns'),
  requestId?: string(name='RequestId'),
  schemas?: {
    schema?: [ 
    {
      DBClusterId?: string(name='DBClusterId'),
      schemaName?: string(name='SchemaName'),
    }
  ](name='Schema')
  }(name='Schemas'),
  tables?: {
    table?: [ 
    {
      DBClusterId?: string(name='DBClusterId'),
      schemaName?: string(name='SchemaName'),
      tableName?: string(name='TableName'),
    }
  ](name='Table')
  }(name='Tables'),
}

model DescribeAllDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAllDataSourceResponseBody(name='body'),
}

async function describeAllDataSource(request: DescribeAllDataSourceRequest): DescribeAllDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAllDataSource', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAllDataSourcesRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemaName?: string(name='SchemaName', position='Query'),
  tableName?: string(name='TableName', position='Query'),
}

model DescribeAllDataSourcesResponseBody = {
  columns?: {
    column?: [ 
    {
      autoIncrementColumn?: boolean(name='AutoIncrementColumn'),
      columnName?: string(name='ColumnName'),
      DBClusterId?: string(name='DBClusterId'),
      primaryKey?: boolean(name='PrimaryKey'),
      schemaName?: string(name='SchemaName'),
      tableName?: string(name='TableName'),
      type?: string(name='Type'),
    }
  ](name='Column')
  }(name='Columns'),
  requestId?: string(name='RequestId'),
  schemas?: {
    schema?: [ 
    {
      DBClusterId?: string(name='DBClusterId'),
      schemaName?: string(name='SchemaName'),
    }
  ](name='Schema')
  }(name='Schemas'),
  tables?: {
    table?: [ 
    {
      DBClusterId?: string(name='DBClusterId'),
      schemaName?: string(name='SchemaName'),
      tableName?: string(name='TableName'),
    }
  ](name='Table')
  }(name='Tables'),
}

model DescribeAllDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAllDataSourcesResponseBody(name='body'),
}

async function describeAllDataSources(request: DescribeAllDataSourcesRequest): DescribeAllDataSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAllDataSources', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAvailableResourceRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Query'),
  chargeType?: string(name='ChargeType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model DescribeAvailableResourceResponseBody = {
  availableZoneList?: {
    availableZone?: [ 
    {
      supportedSerialList?: {
        supportedSerial?: [ 
        {
          serial?: string(name='Serial'),
          supportedInstanceClassList?: {
            supportedInstanceClass?: [ 
            {
              instanceClass?: string(name='InstanceClass'),
              supportedExecutorList?: {
                supportedExecutor?: [ 
                {
                  nodeCount?: {
                    maxCount?: string(name='MaxCount'),
                    minCount?: string(name='MinCount'),
                    step?: string(name='Step'),
                  }(name='NodeCount'),
                }
              ](name='SupportedExecutor')
              }(name='SupportedExecutorList'),
              supportedNodeCountList?: {
                supportedNodeCount?: [ 
                {
                  nodeCount?: {
                    maxCount?: string(name='MaxCount'),
                    minCount?: string(name='MinCount'),
                    step?: string(name='Step'),
                  }(name='NodeCount'),
                  storageSize?: {
                    storageSize?: [ string ](name='StorageSize')
                  }(name='StorageSize'),
                }
              ](name='SupportedNodeCount')
              }(name='SupportedNodeCountList'),
              tips?: string(name='Tips'),
            }
          ](name='SupportedInstanceClass')
          }(name='SupportedInstanceClassList'),
        }
      ](name='SupportedSerial')
      }(name='SupportedSerialList'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='AvailableZone')
  }(name='AvailableZoneList'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
}

model DescribeAvailableResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableResourceResponseBody(name='body'),
}

async function describeAvailableResource(request: DescribeAvailableResourceRequest): DescribeAvailableResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvailableResource', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupPolicyRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeBackupPolicyResponseBody = {
  backupRetentionPeriod?: int32(name='BackupRetentionPeriod'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod'),
  preferredBackupTime?: string(name='PreferredBackupTime'),
  requestId?: string(name='RequestId'),
  switch?: string(name='Switch'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupsRequest {
  backupId?: string(name='BackupId', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=2147483647, position='Query'),
  pageSize?: int32(name='PageSize', minimum=30, maximum=100, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeBackupsResponseBody = {
  items?: [ 
    {
      backupEndTime?: string(name='BackupEndTime'),
      backupId?: string(name='BackupId'),
      backupMethod?: string(name='BackupMethod'),
      backupSetInfo?: string(name='BackupSetInfo'),
      backupSize?: int32(name='BackupSize'),
      backupStartTime?: string(name='BackupStartTime'),
      backupStatus?: string(name='BackupStatus'),
      backupType?: string(name='BackupType'),
      DBClusterId?: string(name='DBClusterId'),
    }
  ](name='Items'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model DescribeBackupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupsResponseBody(name='body'),
}

async function describeBackups(request: DescribeBackupsRequest): DescribeBackupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeColumnsRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemaName: string(name='SchemaName', position='Query'),
  tableName: string(name='TableName', position='Query'),
}

model DescribeColumnsResponseBody = {
  items?: {
    column?: [ 
    {
      autoIncrementColumn?: boolean(name='AutoIncrementColumn'),
      columnName?: string(name='ColumnName'),
      DBClusterId?: string(name='DBClusterId'),
      primaryKey?: boolean(name='PrimaryKey'),
      schemaName?: string(name='SchemaName'),
      tableName?: string(name='TableName'),
      type?: string(name='Type'),
    }
  ](name='Column')
  }(name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeColumnsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeColumnsResponseBody(name='body'),
}

async function describeColumns(request: DescribeColumnsRequest): DescribeColumnsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeColumns', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterAccessWhiteListRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClusterAccessWhiteListResponseBody = {
  DBClusterAccessWhiteList?: {
    IPArray?: [ 
    {
      DBClusterIPArrayAttribute?: string(name='DBClusterIPArrayAttribute'),
      DBClusterIPArrayName?: string(name='DBClusterIPArrayName'),
      securityIPList?: string(name='SecurityIPList'),
    }
  ](name='IPArray')
  }(name='DBClusterAccessWhiteList'),
  requestId?: string(name='RequestId'),
}

model DescribeDBClusterAccessWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterAccessWhiteListResponseBody(name='body'),
}

async function describeDBClusterAccessWhiteList(request: DescribeDBClusterAccessWhiteListRequest): DescribeDBClusterAccessWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterAccessWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterAttributeRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClusterAttributeResponseBody = {
  DBCluster?: {
    aliUid?: string(name='AliUid'),
    bid?: string(name='Bid'),
    category?: string(name='Category'),
    commodityCode?: string(name='CommodityCode'),
    connectionString?: string(name='ConnectionString'),
    controlVersion?: string(name='ControlVersion'),
    createTime?: string(name='CreateTime'),
    DBClusterDescription?: string(name='DBClusterDescription'),
    DBClusterId?: string(name='DBClusterId'),
    DBClusterNetworkType?: string(name='DBClusterNetworkType'),
    DBClusterStatus?: string(name='DBClusterStatus'),
    DBClusterType?: string(name='DBClusterType'),
    DBNodeClass?: string(name='DBNodeClass'),
    DBNodeCount?: long(name='DBNodeCount'),
    DBNodeStorage?: long(name='DBNodeStorage'),
    encryptionKey?: string(name='EncryptionKey'),
    encryptionType?: string(name='EncryptionType'),
    engine?: string(name='Engine'),
    engineVersion?: string(name='EngineVersion'),
    expireTime?: string(name='ExpireTime'),
    isExpired?: string(name='IsExpired'),
    lockMode?: string(name='LockMode'),
    lockReason?: string(name='LockReason'),
    maintainTime?: string(name='MaintainTime'),
    payType?: string(name='PayType'),
    port?: int32(name='Port'),
    publicConnectionString?: string(name='PublicConnectionString'),
    publicPort?: string(name='PublicPort'),
    regionId?: string(name='RegionId'),
    scaleOutStatus?: {
      progress?: string(name='Progress'),
      ratio?: string(name='Ratio'),
    }(name='ScaleOutStatus'),
    storageType?: string(name='StorageType'),
    supportBackup?: int32(name='SupportBackup'),
    supportHttpsPort?: boolean(name='SupportHttpsPort'),
    supportMysqlPort?: boolean(name='SupportMysqlPort'),
    tags?: {
      tag?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Tag')
    }(name='Tags'),
    vSwitchId?: string(name='VSwitchId'),
    vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
    vpcId?: string(name='VpcId'),
    zoneId?: string(name='ZoneId'),
  }(name='DBCluster'),
  requestId?: string(name='RequestId'),
}

model DescribeDBClusterAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterAttributeResponseBody(name='body'),
}

async function describeDBClusterAttribute(request: DescribeDBClusterAttributeRequest): DescribeDBClusterAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterConfigRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClusterConfigResponseBody = {
  config?: string(name='Config'),
  requestId?: string(name='RequestId'),
}

model DescribeDBClusterConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterConfigResponseBody(name='body'),
}

async function describeDBClusterConfig(request: DescribeDBClusterConfigRequest): DescribeDBClusterConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterNetInfoItemsRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBClusterNetInfoItemsResponseBody = {
  clusterNetworkType?: string(name='ClusterNetworkType'),
  netInfoItems?: {
    netInfoItem?: [ 
    {
      connectionString?: string(name='ConnectionString'),
      httpPort?: string(name='HttpPort'),
      IPAddress?: string(name='IPAddress'),
      jdbcPort?: string(name='JdbcPort'),
      netType?: string(name='NetType'),
      vSwitchId?: string(name='VSwitchId'),
      vpcId?: string(name='VpcId'),
    }
  ](name='NetInfoItem')
  }(name='NetInfoItems'),
  requestId?: string(name='RequestId'),
}

model DescribeDBClusterNetInfoItemsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterNetInfoItemsResponseBody(name='body'),
}

async function describeDBClusterNetInfoItems(request: DescribeDBClusterNetInfoItemsRequest): DescribeDBClusterNetInfoItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterNetInfoItems', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClusterPerformanceRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  key?: string(name='Key', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeDBClusterPerformanceResponseBody = {
  DBClusterId?: string(name='DBClusterId'),
  endTime?: string(name='EndTime'),
  performances?: [ 
    {
      key?: string(name='Key'),
      name?: string(name='Name'),
      series?: [ 
        {
          name?: string(name='Name'),
          values?: [ 
            {
              point?: [ string ](name='Point'),
            }
          ](name='Values'),
        }
      ](name='Series'),
      unit?: string(name='Unit'),
    }
  ](name='Performances'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeDBClusterPerformanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClusterPerformanceResponseBody(name='body'),
}

async function describeDBClusterPerformance(request: DescribeDBClusterPerformanceRequest): DescribeDBClusterPerformanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusterPerformance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBClustersRequest {
  controlVersion?: string(name='ControlVersion', position='Query'),
  DBClusterDescription?: string(name='DBClusterDescription', position='Query'),
  DBClusterIds?: string(name='DBClusterIds', position='Query'),
  DBClusterStatus?: string(name='DBClusterStatus', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeDBClustersResponseBody = {
  DBClusters?: {
    DBCluster?: [ 
    {
      aliUid?: string(name='AliUid'),
      bid?: string(name='Bid'),
      category?: string(name='Category'),
      commodityCode?: string(name='CommodityCode'),
      connectionString?: string(name='ConnectionString'),
      controlVersion?: string(name='ControlVersion'),
      createTime?: string(name='CreateTime'),
      DBClusterDescription?: string(name='DBClusterDescription'),
      DBClusterId?: string(name='DBClusterId'),
      DBClusterNetworkType?: string(name='DBClusterNetworkType'),
      DBClusterStatus?: string(name='DBClusterStatus'),
      DBNodeClass?: string(name='DBNodeClass'),
      DBNodeCount?: long(name='DBNodeCount'),
      DBNodeStorage?: long(name='DBNodeStorage'),
      expireTime?: string(name='ExpireTime'),
      isExpired?: string(name='IsExpired'),
      lockMode?: string(name='LockMode'),
      lockReason?: string(name='LockReason'),
      payType?: string(name='PayType'),
      port?: int32(name='Port'),
      regionId?: string(name='RegionId'),
      scaleOutStatus?: {
        progress?: string(name='Progress'),
        ratio?: string(name='Ratio'),
      }(name='ScaleOutStatus'),
      storageType?: string(name='StorageType'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      vSwitchId?: string(name='VSwitchId'),
      vpcCloudInstanceId?: string(name='VpcCloudInstanceId'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DBCluster')
  }(name='DBClusters'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDBClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBClustersResponseBody(name='body'),
}

async function describeDBClusters(request: DescribeDBClustersRequest): DescribeDBClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBClusters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDBConfigRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDBConfigResponseBody = {
  config?: string(name='Config'),
  requestId?: string(name='RequestId'),
}

model DescribeDBConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDBConfigResponseBody(name='body'),
}

async function describeDBConfig(request: DescribeDBConfigRequest): DescribeDBConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDBConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLogHubAttributeRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  deliverName?: string(name='DeliverName', minimum=0, maximum=9999999999, position='Query'),
  logStoreName?: string(name='LogStoreName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  projectName?: string(name='ProjectName', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: string(name='TaskId', position='Query'),
}

model DescribeLogHubAttributeResponseBody = {
  loghubInfo?: {
    DBClusterId?: string(name='DBClusterId'),
    DBType?: string(name='DBType'),
    deliverName?: string(name='DeliverName'),
    deliverTime?: string(name='DeliverTime'),
    description?: string(name='Description'),
    domainUrl?: string(name='DomainUrl'),
    filterDirtyData?: string(name='FilterDirtyData'),
    id?: string(name='Id'),
    logHubStores?: {
      logHubStore?: [ 
      {
        fieldKey?: string(name='FieldKey'),
        logKey?: string(name='LogKey'),
        type?: string(name='Type'),
      }
    ](name='LogHubStore')
    }(name='LogHubStores'),
    logStoreName?: string(name='LogStoreName'),
    password?: string(name='Password'),
    projectName?: string(name='ProjectName'),
    regionId?: string(name='RegionId'),
    schemaName?: string(name='SchemaName'),
    tableName?: string(name='TableName'),
    userName?: string(name='UserName'),
    zoneId?: string(name='ZoneId'),
  }(name='LoghubInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeLogHubAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLogHubAttributeResponseBody(name='body'),
}

async function describeLogHubAttribute(request: DescribeLogHubAttributeRequest): DescribeLogHubAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogHubAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLogStoreKeysRequest {
  logStoreName: string(name='LogStoreName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  projectName: string(name='ProjectName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeLogStoreKeysResponseBody = {
  logStoreKeys?: {
    logStoreKey?: [ string ](name='LogStoreKey')
  }(name='LogStoreKeys'),
  requestId?: string(name='RequestId'),
}

model DescribeLogStoreKeysResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLogStoreKeysResponseBody(name='body'),
}

async function describeLogStoreKeys(request: DescribeLogStoreKeysRequest): DescribeLogStoreKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogStoreKeys', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLoghubDetailRequest {
  exportName?: string(name='ExportName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  projectName?: string(name='ProjectName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeLoghubDetailResponseBody = {
  loghubInfo?: {
    accessKey?: string(name='AccessKey'),
    accessSecret?: string(name='AccessSecret'),
    DBClusterId?: string(name='DBClusterId'),
    DBType?: string(name='DBType'),
    deliverName?: string(name='DeliverName'),
    deliverTime?: string(name='DeliverTime'),
    description?: string(name='Description'),
    domainUrl?: string(name='DomainUrl'),
    filterDirtyData?: boolean(name='FilterDirtyData'),
    logHubStores?: {
      logHubStore?: [ 
      {
        fieldKey?: string(name='FieldKey'),
        logKey?: string(name='LogKey'),
        type?: string(name='Type'),
      }
    ](name='LogHubStore')
    }(name='LogHubStores'),
    logStoreName?: string(name='LogStoreName'),
    password?: string(name='Password'),
    projectName?: string(name='ProjectName'),
    regionId?: string(name='RegionId'),
    schemaName?: string(name='SchemaName'),
    tableName?: string(name='TableName'),
    userName?: string(name='UserName'),
    zoneId?: string(name='ZoneId'),
  }(name='LoghubInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeLoghubDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLoghubDetailResponseBody(name='body'),
}

async function describeLoghubDetail(request: DescribeLoghubDetailRequest): DescribeLoghubDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLoghubDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLorneLogRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  taskId: string(name='TaskId', position='Query'),
}

model DescribeLorneLogResponseBody = {
  data?: [ 
    {
      code?: string(name='Code'),
      count?: string(name='Count'),
      endTime?: string(name='EndTime'),
      message?: string(name='Message'),
      startTime?: string(name='StartTime'),
    }
  ](name='Data'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeLorneLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLorneLogResponseBody(name='body'),
}

async function describeLorneLog(request: DescribeLorneLogRequest): DescribeLorneLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLorneLog', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLorneTasksRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeLorneTasksResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  taskDetails?: [ 
    {
      checkpoint?: string(name='Checkpoint'),
      columnMapper?: string(name='ColumnMapper'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      id?: string(name='Id'),
      message?: string(name='Message'),
      name?: string(name='Name'),
      sinkInstance?: string(name='SinkInstance'),
      sinkRegion?: string(name='SinkRegion'),
      sinkSchema?: string(name='SinkSchema'),
      sinkTable?: string(name='SinkTable'),
      sinkType?: string(name='SinkType'),
      sinkUser?: string(name='SinkUser'),
      sinkVpcId?: string(name='SinkVpcId'),
      sourceProject?: string(name='SourceProject'),
      sourceRegion?: string(name='SourceRegion'),
      sourceTopic?: string(name='SourceTopic'),
      sourceType?: string(name='SourceType'),
      state?: string(name='State'),
      strict?: string(name='Strict'),
    }
  ](name='TaskDetails'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeLorneTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLorneTasksResponseBody(name='body'),
}

async function describeLorneTasks(request: DescribeLorneTasksRequest): DescribeLorneTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLorneTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLorneTasksMCountRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  metricName: string(name='MetricName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  taskId: string(name='TaskId', position='Query'),
}

model DescribeLorneTasksMCountResponseBody = {
  data?: float(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeLorneTasksMCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLorneTasksMCountResponseBody(name='body'),
}

async function describeLorneTasksMCount(request: DescribeLorneTasksMCountRequest): DescribeLorneTasksMCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLorneTasksMCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLorneTasksMetricsRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  metricName: string(name='MetricName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  taskId: string(name='TaskId', position='Query'),
}

model DescribeLorneTasksMetricsResponseBody = {
  data?: {
    columns?: [ string ](name='Columns'),
    name?: string(name='Name'),
    taskId?: string(name='TaskId'),
    values?: [ string ](name='Values'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model DescribeLorneTasksMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLorneTasksMetricsResponseBody(name='body'),
}

async function describeLorneTasksMetrics(request: DescribeLorneTasksMetricsRequest): DescribeLorneTasksMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLorneTasksMetrics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOSSStorageRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeOSSStorageResponseBody = {
  coldStorage?: boolean(name='ColdStorage'),
  policy?: string(name='Policy'),
  requestId?: string(name='RequestId'),
  state?: string(name='State'),
  storageUsage?: string(name='StorageUsage'),
}

model DescribeOSSStorageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOSSStorageResponseBody(name='body'),
}

async function describeOSSStorage(request: DescribeOSSStorageRequest): DescribeOSSStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOSSStorage', 'POST', '/', 'json', false, 'json', request);
}

model DescribeProcessListRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  initialQueryId?: string(name='InitialQueryId', position='Query'),
  initialUser?: string(name='InitialUser', position='Query'),
  keyword?: string(name='Keyword', position='Query'),
  order?: string(name='Order', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=9999999999, position='Query'),
  pageSize?: int32(name='PageSize', minimum=0, maximum=9999999999, position='Query'),
  queryDurationMs?: int32(name='QueryDurationMs', minimum=0, maximum=9999999999, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeProcessListResponseBody = {
  processList?: {
    data?: {
      resultSet?: [ 
      {
        initialAddress?: string(name='InitialAddress'),
        initialQueryId?: string(name='InitialQueryId'),
        initialUser?: string(name='InitialUser'),
        query?: string(name='Query'),
        queryDurationMs?: string(name='QueryDurationMs'),
        queryStartTime?: string(name='QueryStartTime'),
      }
    ](name='ResultSet')
    }(name='Data'),
    rows?: string(name='Rows'),
    rowsBeforeLimitAtLeast?: string(name='RowsBeforeLimitAtLeast'),
    statistics?: {
      bytesRead?: int32(name='BytesRead'),
      elapsedTime?: float(name='ElapsedTime'),
      rowsRead?: int32(name='RowsRead'),
    }(name='Statistics'),
    tableSchema?: {
      resultSet?: [ 
      {
        name?: string(name='Name'),
        type?: string(name='Type'),
      }
    ](name='ResultSet')
    }(name='TableSchema'),
  }(name='ProcessList'),
  requestId?: string(name='RequestId'),
}

model DescribeProcessListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProcessListResponseBody(name='body'),
}

async function describeProcessList(request: DescribeProcessListRequest): DescribeProcessListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProcessList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRDSTablesRequest {
  dbClusterId: string(name='DbClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  rdsId: string(name='RdsId', position='Query'),
  rdsPassword: string(name='RdsPassword', position='Query'),
  rdsPort?: long(name='RdsPort', position='Query'),
  rdsUserName: string(name='RdsUserName', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schema: string(name='Schema', position='Query'),
}

model DescribeRDSTablesResponseBody = {
  requestId?: string(name='RequestId'),
  tables?: [ string ](name='Tables'),
}

model DescribeRDSTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRDSTablesResponseBody(name='body'),
}

async function describeRDSTables(request: DescribeRDSTablesRequest): DescribeRDSTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRDSTables', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRDSVpcRequest {
  dbClusterId?: string(name='DbClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  rdsId: string(name='RdsId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRDSVpcResponseBody = {
  requestId?: string(name='RequestId'),
  vpcId?: string(name='VpcId'),
}

model DescribeRDSVpcResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRDSVpcResponseBody(name='body'),
}

async function describeRDSVpc(request: DescribeRDSVpcRequest): DescribeRDSVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRDSVpc', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRDSschemasRequest {
  dbClusterId: string(name='DbClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  rdsId: string(name='RdsId', position='Query'),
  rdsPassword: string(name='RdsPassword', position='Query'),
  rdsPort?: long(name='RdsPort', position='Query'),
  rdsUserName: string(name='RdsUserName', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRDSschemasResponseBody = {
  requestId?: string(name='RequestId'),
  schemas?: [ string ](name='Schemas'),
}

model DescribeRDSschemasResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRDSschemasResponseBody(name='body'),
}

async function describeRDSschemas(request: DescribeRDSschemasRequest): DescribeRDSschemasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRDSschemas', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      regionId?: string(name='RegionId'),
      zones?: {
        zone?: [ 
        {
          vpcEnabled?: boolean(name='VpcEnabled'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='Zone')
      }(name='Zones'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSchemasRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemaName?: string(name='SchemaName', position='Query'),
  tableName?: string(name='TableName', position='Query'),
}

model DescribeSchemasResponseBody = {
  items?: {
    schema?: [ 
    {
      DBClusterId?: string(name='DBClusterId'),
      schemaName?: string(name='SchemaName'),
    }
  ](name='Schema')
  }(name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeSchemasResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSchemasResponseBody(name='body'),
}

async function describeSchemas(request: DescribeSchemasRequest): DescribeSchemasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSchemas', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlowLogRecordsRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=99999999, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=99999999, position='Query'),
  queryDurationMs?: int32(name='QueryDurationMs', minimum=0, maximum=9999999999, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeSlowLogRecordsResponseBody = {
  requestId?: string(name='RequestId'),
  slowLogRecords?: {
    data?: {
      resultSet?: [ 
      {
        initialAddress?: string(name='InitialAddress'),
        initialQueryId?: string(name='InitialQueryId'),
        initialUser?: string(name='InitialUser'),
        memoryUsage?: string(name='MemoryUsage'),
        query?: string(name='Query'),
        queryDurationMs?: string(name='QueryDurationMs'),
        queryStartTime?: string(name='QueryStartTime'),
        readBytes?: string(name='ReadBytes'),
        readRows?: string(name='ReadRows'),
        resultBytes?: string(name='ResultBytes'),
        type?: string(name='Type'),
      }
    ](name='ResultSet')
    }(name='Data'),
    rows?: string(name='Rows'),
    rowsBeforeLimitAtLeast?: string(name='RowsBeforeLimitAtLeast'),
    statistics?: {
      bytesRead?: int32(name='BytesRead'),
      elapsedTime?: float(name='ElapsedTime'),
      rowsRead?: int32(name='RowsRead'),
    }(name='Statistics'),
    tableSchema?: {
      resultSet?: [ 
      {
        name?: string(name='Name'),
        type?: string(name='Type'),
      }
    ](name='ResultSet')
    }(name='TableSchema'),
  }(name='SlowLogRecords'),
}

model DescribeSlowLogRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowLogRecordsResponseBody(name='body'),
}

async function describeSlowLogRecords(request: DescribeSlowLogRecordsRequest): DescribeSlowLogRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlowLogRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlowLogTrendRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  queryDurationMs?: int32(name='QueryDurationMs', minimum=0, maximum=9999999999, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model DescribeSlowLogTrendResponseBody = {
  requestId?: string(name='RequestId'),
  slowLogTrend?: {
    data?: {
      resultSet?: [ 
      {
        avgQueryDurationMs?: string(name='AvgQueryDurationMs'),
        count?: string(name='Count'),
        maxQueryDurationMs?: string(name='MaxQueryDurationMs'),
        minQueryDurationMs?: string(name='MinQueryDurationMs'),
        queryStartTime?: string(name='QueryStartTime'),
      }
    ](name='ResultSet')
    }(name='Data'),
    rows?: string(name='Rows'),
    rowsBeforeLimitAtLeast?: string(name='RowsBeforeLimitAtLeast'),
    statistics?: {
      bytesRead?: int32(name='BytesRead'),
      elapsedTime?: float(name='ElapsedTime'),
      rowsRead?: int32(name='RowsRead'),
    }(name='Statistics'),
    tableSchema?: {
      resultSet?: [ 
      {
        name?: string(name='Name'),
        type?: string(name='Type'),
      }
    ](name='ResultSet')
    }(name='TableSchema'),
  }(name='SlowLogTrend'),
}

model DescribeSlowLogTrendResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlowLogTrendResponseBody(name='body'),
}

async function describeSlowLogTrend(request: DescribeSlowLogTrendRequest): DescribeSlowLogTrendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlowLogTrend', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSynDbTablesRequest {
  dbClusterId: string(name='DbClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  synDb: string(name='SynDb', position='Query'),
}

model DescribeSynDbTablesResponseBody = {
  requestId?: string(name='RequestId'),
  tables?: [ string ](name='Tables'),
}

model DescribeSynDbTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSynDbTablesResponseBody(name='body'),
}

async function describeSynDbTables(request: DescribeSynDbTablesRequest): DescribeSynDbTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSynDbTables', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSynDbsRequest {
  dbClusterId: string(name='DbClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeSynDbsResponseBody = {
  requestId?: string(name='RequestId'),
  synDbs?: [ 
    {
      errorMsg?: string(name='ErrorMsg'),
      rdsId?: string(name='RdsId'),
      rdsPassword?: string(name='RdsPassword'),
      rdsUserName?: string(name='RdsUserName'),
      synDb?: string(name='SynDb'),
      synStatus?: boolean(name='SynStatus'),
    }
  ](name='SynDbs'),
}

model DescribeSynDbsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSynDbsResponseBody(name='body'),
}

async function describeSynDbs(request: DescribeSynDbsRequest): DescribeSynDbsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSynDbs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTablesRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemaName: string(name='SchemaName', position='Query'),
  tableName?: string(name='TableName', position='Query'),
}

model DescribeTablesResponseBody = {
  items?: {
    table?: [ 
    {
      DBClusterId?: string(name='DBClusterId'),
      schemaName?: string(name='SchemaName'),
      tableName?: string(name='TableName'),
    }
  ](name='Table')
  }(name='Items'),
  requestId?: string(name='RequestId'),
}

model DescribeTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTablesResponseBody(name='body'),
}

async function describeTables(request: DescribeTablesRequest): DescribeTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTables', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTransferHistoryRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeTransferHistoryResponseBody = {
  historyDetails?: {
    historyDetail?: [ 
    {
      progress?: string(name='Progress'),
      sourceDBCluster?: string(name='SourceDBCluster'),
      status?: string(name='Status'),
      targetDBCluster?: string(name='TargetDBCluster'),
    }
  ](name='HistoryDetail')
  }(name='HistoryDetails'),
  requestId?: string(name='RequestId'),
}

model DescribeTransferHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTransferHistoryResponseBody(name='body'),
}

async function describeTransferHistory(request: DescribeTransferHistoryRequest): DescribeTransferHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTransferHistory', 'POST', '/', 'json', false, 'json', request);
}

model KillProcessRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  initialQueryId?: string(name='InitialQueryId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model KillProcessResponseBody = {
  requestId?: string(name='RequestId'),
}

model KillProcessResponse = {
  headers: map[string]string(name='headers'),
  body: KillProcessResponseBody(name='body'),
}

async function killProcess(request: KillProcessRequest): KillProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'KillProcess', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccountAuthorityRequest {
  accountName: string(name='AccountName', position='Query'),
  allowDatabases: string(name='AllowDatabases', position='Query'),
  allowDictionaries: string(name='AllowDictionaries', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ddlAuthority: boolean(name='DdlAuthority', position='Query'),
  dmlAuthority: string(name='DmlAuthority', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  totalDatabases?: string(name='TotalDatabases', position='Query'),
  totalDictionaries?: string(name='TotalDictionaries', position='Query'),
}

model ModifyAccountAuthorityResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccountAuthorityResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountAuthorityResponseBody(name='body'),
}

async function modifyAccountAuthority(request: ModifyAccountAuthorityRequest): ModifyAccountAuthorityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccountAuthority', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccountDescriptionRequest {
  accountDescription: string(name='AccountDescription', position='Query'),
  accountName: string(name='AccountName', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyAccountDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccountDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountDescriptionResponseBody(name='body'),
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccountDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBackupPolicyRequest {
  backupRetentionPeriod?: string(name='BackupRetentionPeriod', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  preferredBackupPeriod: string(name='PreferredBackupPeriod', position='Query'),
  preferredBackupTime: string(name='PreferredBackupTime', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackupPolicyResponseBody(name='body'),
}

async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBackupPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterRequest {
  DBClusterClass: string(name='DBClusterClass', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  DBNodeGroupCount: string(name='DBNodeGroupCount', position='Query'),
  DBNodeStorage: string(name='DBNodeStorage', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBClusterResponseBody = {
  DBCluster?: {
    dbClusterId?: string(name='dbClusterId'),
    orderId?: string(name='orderId'),
  }(name='DBCluster'),
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterResponseBody(name='body'),
}

async function modifyDBCluster(request: ModifyDBClusterRequest): ModifyDBClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBCluster', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterAccessWhiteListRequest {
  DBClusterIPArrayAttribute?: string(name='DBClusterIPArrayAttribute', position='Query'),
  DBClusterIPArrayName?: string(name='DBClusterIPArrayName', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  modifyMode?: string(name='ModifyMode', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityIps: string(name='SecurityIps', position='Query'),
}

model ModifyDBClusterAccessWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterAccessWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterAccessWhiteListResponseBody(name='body'),
}

async function modifyDBClusterAccessWhiteList(request: ModifyDBClusterAccessWhiteListRequest): ModifyDBClusterAccessWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterAccessWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterConfigRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  userConfig: string(name='UserConfig', position='Query'),
}

model ModifyDBClusterConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterConfigResponseBody(name='body'),
}

async function modifyDBClusterConfig(request: ModifyDBClusterConfigRequest): ModifyDBClusterConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterDescriptionRequest {
  DBClusterDescription: string(name='DBClusterDescription', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBClusterDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterDescriptionResponseBody(name='body'),
}

async function modifyDBClusterDescription(request: ModifyDBClusterDescriptionRequest): ModifyDBClusterDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterDescription', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBClusterMaintainTimeRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  maintainTime: string(name='MaintainTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBClusterMaintainTimeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBClusterMaintainTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBClusterMaintainTimeResponseBody(name='body'),
}

async function modifyDBClusterMaintainTime(request: ModifyDBClusterMaintainTimeRequest): ModifyDBClusterMaintainTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBClusterMaintainTime', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDBConfigRequest {
  config?: string(name='Config', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDBConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBConfigResponseBody(name='body'),
}

async function modifyDBConfig(request: ModifyDBConfigRequest): ModifyDBConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDBConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRDSToClickhouseDbRequest {
  ckPassword: string(name='CkPassword', position='Query'),
  ckUserName: string(name='CkUserName', position='Query'),
  clickhousePort?: long(name='ClickhousePort', position='Query'),
  dbClusterId: string(name='DbClusterId', position='Query'),
  limitUpper?: long(name='LimitUpper', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  rdsId: string(name='RdsId', position='Query'),
  rdsPassword: string(name='RdsPassword', position='Query'),
  rdsPort?: long(name='RdsPort', position='Query'),
  rdsSynDb: string(name='RdsSynDb', position='Query'),
  rdsSynTables: string(name='RdsSynTables', position='Query'),
  rdsUserName: string(name='RdsUserName', position='Query'),
  rdsVpcId?: string(name='RdsVpcId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  skipUnsupported: boolean(name='SkipUnsupported', position='Query'),
}

model ModifyRDSToClickhouseDbResponseBody = {
  errorCode?: long(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  status?: long(name='Status'),
}

model ModifyRDSToClickhouseDbResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRDSToClickhouseDbResponseBody(name='body'),
}

async function modifyRDSToClickhouseDb(request: ModifyRDSToClickhouseDbRequest): ModifyRDSToClickhouseDbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRDSToClickhouseDb', 'POST', '/', 'json', false, 'json', request);
}

model OperateLogHubRequest {
  accessKey?: string(name='AccessKey', position='Query'),
  accessSecret?: string(name='AccessSecret', position='Query'),
  create: boolean(name='Create', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  deliverName: string(name='DeliverName', position='Query'),
  deliverTime: string(name='DeliverTime', position='Query'),
  description: string(name='Description', position='Query'),
  domainUrl: string(name='DomainUrl', position='Query'),
  filterDirtyData?: boolean(name='FilterDirtyData', position='Query'),
  logHubStores: [ 
    {
      fieldKey: string(name='FieldKey'),
      logKey: string(name='LogKey'),
      type: string(name='Type'),
    }
  ](name='LogHubStores', position='Query'),
  logStoreName: string(name='LogStoreName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  password: string(name='Password', position='Query'),
  projectName: string(name='ProjectName', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  schemaName: string(name='SchemaName', position='Query'),
  tableName: string(name='TableName', position='Query'),
  taskId?: string(name='TaskId', position='Query'),
  useLorne?: boolean(name='UseLorne', position='Query'),
  userName: string(name='UserName', position='Query'),
}

model OperateLogHubResponseBody = {
  requestId?: string(name='RequestId'),
}

model OperateLogHubResponse = {
  headers: map[string]string(name='headers'),
  body: OperateLogHubResponseBody(name='body'),
}

async function operateLogHub(request: OperateLogHubRequest): OperateLogHubResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateLogHub', 'POST', '/', 'json', false, 'json', request);
}

model OperateLorneTaskStatusRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  lorneStatus: string(name='LorneStatus', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId: string(name='TaskId', position='Query'),
}

model OperateLorneTaskStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model OperateLorneTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  body: OperateLorneTaskStatusResponseBody(name='body'),
}

async function operateLorneTaskStatus(request: OperateLorneTaskStatusRequest): OperateLorneTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateLorneTaskStatus', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseClusterPublicConnectionRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ReleaseClusterPublicConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseClusterPublicConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseClusterPublicConnectionResponseBody(name='body'),
}

async function releaseClusterPublicConnection(request: ReleaseClusterPublicConnectionRequest): ReleaseClusterPublicConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseClusterPublicConnection', 'POST', '/', 'json', false, 'json', request);
}

model ResetAccountPasswordRequest {
  accountName: string(name='AccountName', position='Query'),
  accountPassword: string(name='AccountPassword', position='Query'),
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ResetAccountPasswordResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAccountPasswordResponseBody(name='body'),
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAccountPassword', 'POST', '/', 'json', false, 'json', request);
}

model RestartInstanceRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RestartInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RestartInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RestartInstanceResponseBody(name='body'),
}

async function restartInstance(request: RestartInstanceRequest): RestartInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartInstance', 'POST', '/', 'json', false, 'json', request);
}

model SearchRDSTablesRequest {
  dbClusterId: string(name='DbClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  rdsId: string(name='RdsId', position='Query'),
  rdsPassword: string(name='RdsPassword', position='Query'),
  rdsPort?: long(name='RdsPort', position='Query'),
  rdsUserName: string(name='RdsUserName', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tableName: string(name='TableName', position='Query'),
}

model SearchRDSTablesResponseBody = {
  requestId?: string(name='RequestId'),
  schemas?: [ 
    {
      dbName?: string(name='DbName'),
      tables?: [ string ](name='Tables'),
    }
  ](name='Schemas'),
}

model SearchRDSTablesResponse = {
  headers: map[string]string(name='headers'),
  body: SearchRDSTablesResponseBody(name='body'),
}

async function searchRDSTables(request: SearchRDSTablesRequest): SearchRDSTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchRDSTables', 'POST', '/', 'json', false, 'json', request);
}

model TransferVersionRequest {
  DBClusterId: string(name='DBClusterId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceAccount: string(name='SourceAccount', position='Query'),
  sourcePassword: string(name='SourcePassword', position='Query'),
  targetAccount: string(name='TargetAccount', position='Query'),
  targetDbClusterId: string(name='TargetDbClusterId', position='Query'),
  targetPassword: string(name='TargetPassword', position='Query'),
}

model TransferVersionResponseBody = {
  DBInstanceID?: int32(name='DBInstanceID'),
  DBInstanceName?: long(name='DBInstanceName'),
  requestId?: string(name='RequestId'),
  taskId?: boolean(name='TaskId'),
}

model TransferVersionResponse = {
  headers: map[string]string(name='headers'),
  body: TransferVersionResponseBody(name='body'),
}

async function transferVersion(request: TransferVersionRequest): TransferVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransferVersion', 'POST', '/', 'json', false, 'json', request);
}

