/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Ft';
  @version = '2015-03-03';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'ft.aliyuncs.com',
    ap-south-1 = 'ft.aliyuncs.com',
    ap-southeast-1 = 'ft.aliyuncs.com',
    ap-southeast-2 = 'ft.aliyuncs.com',
    ap-southeast-3 = 'ft.aliyuncs.com',
    ap-southeast-5 = 'ft.aliyuncs.com',
    cn-beijing = 'ft.aliyuncs.com',
    cn-beijing-finance-1 = 'ft.aliyuncs.com',
    cn-beijing-finance-pop = 'ft.aliyuncs.com',
    cn-beijing-gov-1 = 'ft.aliyuncs.com',
    cn-beijing-nu16-b01 = 'ft.aliyuncs.com',
    cn-chengdu = 'ft.aliyuncs.com',
    cn-edge-1 = 'ft.aliyuncs.com',
    cn-fujian = 'ft.aliyuncs.com',
    cn-haidian-cm12-c01 = 'ft.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'ft.aliyuncs.com',
    cn-hangzhou-finance = 'ft.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'ft.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'ft.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'ft.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'ft.aliyuncs.com',
    cn-hangzhou-test-306 = 'ft.aliyuncs.com',
    cn-hongkong-finance-pop = 'ft.aliyuncs.com',
    cn-huhehaote = 'ft.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'ft.aliyuncs.com',
    cn-qingdao = 'ft.aliyuncs.com',
    cn-qingdao-nebula = 'ft.aliyuncs.com',
    cn-shanghai-et15-b01 = 'ft.aliyuncs.com',
    cn-shanghai-et2-b01 = 'ft.aliyuncs.com',
    cn-shanghai-finance-1 = 'ft.aliyuncs.com',
    cn-shanghai-inner = 'ft.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'ft.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ft.aliyuncs.com',
    cn-shenzhen-inner = 'ft.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'ft.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'ft.aliyuncs.com',
    cn-wuhan = 'ft.aliyuncs.com',
    cn-wulanchabu = 'ft.aliyuncs.com',
    cn-yushanfang = 'ft.aliyuncs.com',
    cn-zhangbei = 'ft.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'ft.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'ft.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'ft.aliyuncs.com',
    eu-central-1 = 'ft.aliyuncs.com',
    eu-west-1 = 'ft.aliyuncs.com',
    eu-west-1-oxs = 'ft.aliyuncs.com',
    me-east-1 = 'ft.aliyuncs.com',
    rus-west-1-pop = 'ft.aliyuncs.com',
    us-west-1 = 'ft.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CreateInsRequest {
  success?: string(name='Success', position='Query'),
  test?: string(name='Test', position='Query'),
  newParam1?: string(name='new-param-1', position='Query'),
  newParam2?: string(name='new-param-2', position='Query'),
}

model CreateInsResponseBody = {
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model CreateInsResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInsResponseBody(name='body'),
}

async function createIns(request: CreateInsRequest): CreateInsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIns', 'POST', '/', 'json', false, 'json', request);
}

model RpcNoDefaultErrorCodeApiRequest {
  code?: string(name='Code', position='Query'),
  httpStatusCode?: string(name='HttpStatusCode', position='Query'),
  message?: string(name='Message', position='Query'),
  success?: string(name='Success', position='Query'),
}

model RpcNoDefaultErrorCodeApiResponseBody = {
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model RpcNoDefaultErrorCodeApiResponse = {
  headers: map[string]string(name='headers'),
  body: RpcNoDefaultErrorCodeApiResponseBody(name='body'),
}

async function rpcNoDefaultErrorCodeApi(request: RpcNoDefaultErrorCodeApiRequest): RpcNoDefaultErrorCodeApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RpcNoDefaultErrorCodeApi', 'POST', '/', 'json', false, 'json', request);
}

model UpdateInsRequest {
  httpStatusCode?: string(name='HttpStatusCode', position='Query'),
  succeed?: string(name='Succeed', position='Query'),
}

model UpdateInsResponseBody = {
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model UpdateInsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInsResponseBody(name='body'),
}

async function updateIns(request: UpdateInsRequest): UpdateInsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIns', 'POST', '/', 'json', false, 'json', request);
}

