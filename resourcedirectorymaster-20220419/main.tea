/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('resourcedirectorymaster', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AcceptHandshakeRequest {
  handshakeId?: string(name='HandshakeId', example='h-Ih8IuPfvV0t0****'),
}

model AcceptHandshakeResponseBody = {
  handshake?: {
    createTime?: string(name='CreateTime', example='2021-01-06T02:15:40Z'),
    expireTime?: string(name='ExpireTime', example='2021-01-20T02:15:40Z'),
    handshakeId?: string(name='HandshakeId', example='h-Ih8IuPfvV0t0****'),
    masterAccountId?: string(name='MasterAccountId', example='151266687691****'),
    masterAccountName?: string(name='MasterAccountName', example='CompanyA'),
    modifyTime?: string(name='ModifyTime', example='2021-01-06T02:16:40Z'),
    note?: string(name='Note'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-3G****'),
    status?: string(name='Status', example='Accepted'),
    targetEntity?: string(name='TargetEntity', example='177242285274****'),
    targetType?: string(name='TargetType', example='Account'),
  }(name='Handshake'),
  requestId?: string(name='RequestId', example='5828C836-3286-49A6-9006-15231BB19342'),
}

model AcceptHandshakeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AcceptHandshakeResponseBody(name='body'),
}

async function acceptHandshakeWithOptions(request: AcceptHandshakeRequest, runtime: Util.RuntimeOptions): AcceptHandshakeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.handshakeId)) {
    query['HandshakeId'] = request.handshakeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AcceptHandshake',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function acceptHandshake(request: AcceptHandshakeRequest): AcceptHandshakeResponse {
  var runtime = new Util.RuntimeOptions{};
  return acceptHandshakeWithOptions(request, runtime);
}

model AddMessageContactRequest {
  emailAddress?: string(name='EmailAddress', example='someone***@example.com'),
  messageTypes?: [ string ](name='MessageTypes'),
  name?: string(name='Name', example='tom'),
  phoneNumber?: string(name='PhoneNumber', example='86-139****1234'),
  title?: string(name='Title', example='TechnicalDirector'),
}

model AddMessageContactResponseBody = {
  contact?: {
    contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****'),
    createDate?: string(name='CreateDate', example='2023-03-27 17:19:21'),
  }(name='Contact'),
  requestId?: string(name='RequestId', example='2DFCE4C9-04A9-4C83-BB14-FE791275EC53'),
}

model AddMessageContactResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddMessageContactResponseBody(name='body'),
}

async function addMessageContactWithOptions(request: AddMessageContactRequest, runtime: Util.RuntimeOptions): AddMessageContactResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.emailAddress)) {
    query['EmailAddress'] = request.emailAddress;
  }
  if (!Util.isUnset(request.messageTypes)) {
    query['MessageTypes'] = request.messageTypes;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddMessageContact',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addMessageContact(request: AddMessageContactRequest): AddMessageContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return addMessageContactWithOptions(request, runtime);
}

model AssociateMembersRequest {
  contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****'),
  members?: [ string ](name='Members'),
}

model AssociateMembersResponseBody = {
  members?: [ 
    {
      contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****'),
      memberId?: string(name='MemberId', example='fd-ZDNPiT****'),
      modifyDate?: string(name='ModifyDate', example='2023-03-27 17:19:21'),
    }
  ](name='Members'),
  requestId?: string(name='RequestId', example='95060F1D-6990-4645-8920-A81D1BBFE992'),
}

model AssociateMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateMembersResponseBody(name='body'),
}

async function associateMembersWithOptions(request: AssociateMembersRequest, runtime: Util.RuntimeOptions): AssociateMembersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactId)) {
    query['ContactId'] = request.contactId;
  }
  if (!Util.isUnset(request.members)) {
    query['Members'] = request.members;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateMembers',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateMembers(request: AssociateMembersRequest): AssociateMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateMembersWithOptions(request, runtime);
}

model AttachControlPolicyRequest {
  policyId?: string(name='PolicyId', example='cp-jExXAqIYkwHN****'),
  targetId?: string(name='TargetId', example='fd-ZDNPiT****'),
}

model AttachControlPolicyResponseBody = {
  requestId?: string(name='RequestId', example='95060F1D-6990-4645-8920-A81D1BBFE992'),
}

model AttachControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachControlPolicyResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request AttachControlPolicyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AttachControlPolicyResponse
 */
async function attachControlPolicyWithOptions(request: AttachControlPolicyRequest, runtime: Util.RuntimeOptions): AttachControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.targetId)) {
    query['TargetId'] = request.targetId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachControlPolicy',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request AttachControlPolicyRequest
  * @return AttachControlPolicyResponse
 */
async function attachControlPolicy(request: AttachControlPolicyRequest): AttachControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachControlPolicyWithOptions(request, runtime);
}

model BindSecureMobilePhoneRequest {
  accountId?: string(name='AccountId', example='138660628348****'),
  secureMobilePhone?: string(name='SecureMobilePhone', example='xx-13900001234'),
  verificationCode?: string(name='VerificationCode', example='123456'),
}

model BindSecureMobilePhoneResponseBody = {
  requestId?: string(name='RequestId', example='0217AFEB-5318-56D4-B167-1933D83EDF3F'),
}

model BindSecureMobilePhoneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindSecureMobilePhoneResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request BindSecureMobilePhoneRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BindSecureMobilePhoneResponse
 */
async function bindSecureMobilePhoneWithOptions(request: BindSecureMobilePhoneRequest, runtime: Util.RuntimeOptions): BindSecureMobilePhoneResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.secureMobilePhone)) {
    query['SecureMobilePhone'] = request.secureMobilePhone;
  }
  if (!Util.isUnset(request.verificationCode)) {
    query['VerificationCode'] = request.verificationCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindSecureMobilePhone',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request BindSecureMobilePhoneRequest
  * @return BindSecureMobilePhoneResponse
 */
async function bindSecureMobilePhone(request: BindSecureMobilePhoneRequest): BindSecureMobilePhoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindSecureMobilePhoneWithOptions(request, runtime);
}

model CancelChangeAccountEmailRequest {
  accountId?: string(name='AccountId', example='181761095690****'),
}

model CancelChangeAccountEmailResponseBody = {
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model CancelChangeAccountEmailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelChangeAccountEmailResponseBody(name='body'),
}

async function cancelChangeAccountEmailWithOptions(request: CancelChangeAccountEmailRequest, runtime: Util.RuntimeOptions): CancelChangeAccountEmailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelChangeAccountEmail',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelChangeAccountEmail(request: CancelChangeAccountEmailRequest): CancelChangeAccountEmailResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelChangeAccountEmailWithOptions(request, runtime);
}

model CancelHandshakeRequest {
  handshakeId?: string(name='HandshakeId', example='h-ycm4rp****'),
}

model CancelHandshakeResponseBody = {
  handshake?: {
    createTime?: string(name='CreateTime', example='2018-08-10T09:55:41Z'),
    expireTime?: string(name='ExpireTime', example='2018-08-24T09:55:41Z'),
    handshakeId?: string(name='HandshakeId', example='h-ycm4rp****'),
    masterAccountId?: string(name='MasterAccountId', example='172841235500****'),
    masterAccountName?: string(name='MasterAccountName', example='Alice'),
    modifyTime?: string(name='ModifyTime', example='2018-08-10T09:55:41Z'),
    note?: string(name='Note'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='h-ycm4rp****'),
    status?: string(name='Status', example='Cancelled'),
    targetEntity?: string(name='TargetEntity', example='someone@example.com'),
    targetType?: string(name='TargetType', example='Email'),
  }(name='Handshake'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model CancelHandshakeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelHandshakeResponseBody(name='body'),
}

async function cancelHandshakeWithOptions(request: CancelHandshakeRequest, runtime: Util.RuntimeOptions): CancelHandshakeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.handshakeId)) {
    query['HandshakeId'] = request.handshakeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelHandshake',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelHandshake(request: CancelHandshakeRequest): CancelHandshakeResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelHandshakeWithOptions(request, runtime);
}

model CancelMessageContactUpdateRequest {
  contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****'),
  emailAddress?: string(name='EmailAddress', example='someone***@example.com'),
  phoneNumber?: string(name='PhoneNumber', example='86-139****1234'),
}

model CancelMessageContactUpdateResponseBody = {
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model CancelMessageContactUpdateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelMessageContactUpdateResponseBody(name='body'),
}

async function cancelMessageContactUpdateWithOptions(request: CancelMessageContactUpdateRequest, runtime: Util.RuntimeOptions): CancelMessageContactUpdateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactId)) {
    query['ContactId'] = request.contactId;
  }
  if (!Util.isUnset(request.emailAddress)) {
    query['EmailAddress'] = request.emailAddress;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelMessageContactUpdate',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelMessageContactUpdate(request: CancelMessageContactUpdateRequest): CancelMessageContactUpdateResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelMessageContactUpdateWithOptions(request, runtime);
}

model ChangeAccountEmailRequest {
  accountId?: string(name='AccountId', example='181761095690****'),
  email?: string(name='Email', example='someone@example.com'),
}

model ChangeAccountEmailResponseBody = {
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model ChangeAccountEmailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeAccountEmailResponseBody(name='body'),
}

async function changeAccountEmailWithOptions(request: ChangeAccountEmailRequest, runtime: Util.RuntimeOptions): ChangeAccountEmailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeAccountEmail',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeAccountEmail(request: ChangeAccountEmailRequest): ChangeAccountEmailResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeAccountEmailWithOptions(request, runtime);
}

model CheckAccountDeleteRequest {
  accountId?: string(name='AccountId', example='179855839641****'),
}

model CheckAccountDeleteResponseBody = {
  requestId?: string(name='RequestId', example='7CDDDCEF-CDFD-0825-B7D7-217BE0897B22'),
}

model CheckAccountDeleteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckAccountDeleteResponseBody(name='body'),
}

/**
  * The returned result.
  *
  * @param request CheckAccountDeleteRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CheckAccountDeleteResponse
 */
async function checkAccountDeleteWithOptions(request: CheckAccountDeleteRequest, runtime: Util.RuntimeOptions): CheckAccountDeleteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckAccountDelete',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The returned result.
  *
  * @param request CheckAccountDeleteRequest
  * @return CheckAccountDeleteResponse
 */
async function checkAccountDelete(request: CheckAccountDeleteRequest): CheckAccountDeleteResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkAccountDeleteWithOptions(request, runtime);
}

model CreateControlPolicyRequest {
  description?: string(name='Description', example='ExampleControlPolicy'),
  effectScope?: string(name='EffectScope', example='RAM'),
  policyDocument?: string(name='PolicyDocument', example='{"Version":"1","Statement":[{"Effect":"Deny","Action":["ram:UpdateRole","ram:DeleteRole","ram:AttachPolicyToRole","ram:DetachPolicyFromRole"],"Resource":"acs:ram:*:*:role/ResourceDirectoryAccountAccessRole"}]}'),
  policyName?: string(name='PolicyName', example='ExampleControlPolicy'),
}

model CreateControlPolicyResponseBody = {
  controlPolicy?: {
    attachmentCount?: string(name='AttachmentCount', example='0'),
    createDate?: string(name='CreateDate', example='2021-03-18T09:24:19Z'),
    description?: string(name='Description', example='ExampleControlPolicy'),
    effectScope?: string(name='EffectScope', example='RAM'),
    policyId?: string(name='PolicyId', example='cp-jExXAqIYkwHN****'),
    policyName?: string(name='PolicyName', example='ExampleControlPolicy'),
    policyType?: string(name='PolicyType', example='Custom'),
    updateDate?: string(name='UpdateDate', example='2021-03-18T09:24:19Z'),
  }(name='ControlPolicy'),
  requestId?: string(name='RequestId', example='776B05B3-A0B0-464B-A191-F4E1119A94B2'),
}

model CreateControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateControlPolicyResponseBody(name='body'),
}

async function createControlPolicyWithOptions(request: CreateControlPolicyRequest, runtime: Util.RuntimeOptions): CreateControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.effectScope)) {
    query['EffectScope'] = request.effectScope;
  }
  if (!Util.isUnset(request.policyDocument)) {
    query['PolicyDocument'] = request.policyDocument;
  }
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateControlPolicy',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createControlPolicy(request: CreateControlPolicyRequest): CreateControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createControlPolicyWithOptions(request, runtime);
}

model CreateFolderRequest {
  folderName?: string(name='FolderName', example='rdFolder'),
  parentFolderId?: string(name='ParentFolderId', example='r-b1****'),
}

model CreateFolderResponseBody = {
  folder?: {
    createTime?: string(name='CreateTime', example='2019-02-19T09:34:50.757Z'),
    folderId?: string(name='FolderId', example='fd-u8B321****'),
    folderName?: string(name='FolderName', example='rdFolder'),
    parentFolderId?: string(name='ParentFolderId', example='r-b1****'),
  }(name='Folder'),
  requestId?: string(name='RequestId', example='C2CBCA30-C8DD-423E-B4AD-4FB694C9180C'),
}

model CreateFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFolderResponseBody(name='body'),
}

/**
  * The name of the folder.
  *
  * @param request CreateFolderRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateFolderResponse
 */
async function createFolderWithOptions(request: CreateFolderRequest, runtime: Util.RuntimeOptions): CreateFolderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.folderName)) {
    query['FolderName'] = request.folderName;
  }
  if (!Util.isUnset(request.parentFolderId)) {
    query['ParentFolderId'] = request.parentFolderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFolder',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The name of the folder.
  *
  * @param request CreateFolderRequest
  * @return CreateFolderResponse
 */
async function createFolder(request: CreateFolderRequest): CreateFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFolderWithOptions(request, runtime);
}

model CreateResourceAccountRequest {
  accountNamePrefix?: string(name='AccountNamePrefix', example='alice'),
  displayName?: string(name='DisplayName', example='Dev'),
  parentFolderId?: string(name='ParentFolderId', example='fd-r23M55****'),
  payerAccountId?: string(name='PayerAccountId', example='12323344****'),
  resellAccountType?: string(name='ResellAccountType', example='resell'),
  tag?: [ 
    {
      key?: string(name='Key', example='k1'),
      value?: string(name='Value', example='v1'),
    }
  ](name='Tag'),
}

model CreateResourceAccountResponseBody = {
  account?: {
    accountId?: string(name='AccountId', example='112730938585****'),
    accountName?: string(name='AccountName', example='alice@rd-3g****.aliyunid.com'),
    displayName?: string(name='DisplayName', example='Dev'),
    folderId?: string(name='FolderId', example='fd-r23M55****'),
    joinMethod?: string(name='JoinMethod', example='created'),
    joinTime?: string(name='JoinTime', example='2020-12-31T03:37:39.456Z'),
    modifyTime?: string(name='ModifyTime', example='2020-12-31T03:37:39.456Z'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-3G****'),
    status?: string(name='Status', example='CreateSuccess'),
    type?: string(name='Type', example='ResourceAccount'),
  }(name='Account'),
  requestId?: string(name='RequestId', example='B356A415-D860-43E5-865A-E2193D62BBD6'),
}

model CreateResourceAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateResourceAccountResponseBody(name='body'),
}

/**
  * The Alibaba Cloud account name of the member.
  *
  * @param request CreateResourceAccountRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateResourceAccountResponse
 */
async function createResourceAccountWithOptions(request: CreateResourceAccountRequest, runtime: Util.RuntimeOptions): CreateResourceAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountNamePrefix)) {
    query['AccountNamePrefix'] = request.accountNamePrefix;
  }
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.parentFolderId)) {
    query['ParentFolderId'] = request.parentFolderId;
  }
  if (!Util.isUnset(request.payerAccountId)) {
    query['PayerAccountId'] = request.payerAccountId;
  }
  if (!Util.isUnset(request.resellAccountType)) {
    query['ResellAccountType'] = request.resellAccountType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateResourceAccount',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The Alibaba Cloud account name of the member.
  *
  * @param request CreateResourceAccountRequest
  * @return CreateResourceAccountResponse
 */
async function createResourceAccount(request: CreateResourceAccountRequest): CreateResourceAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createResourceAccountWithOptions(request, runtime);
}

model DeclineHandshakeRequest {
  handshakeId?: string(name='HandshakeId', example='h-ycm4rp****'),
}

model DeclineHandshakeResponseBody = {
  handshake?: {
    createTime?: string(name='CreateTime', example='2018-08-10T09:55:41Z'),
    expireTime?: string(name='ExpireTime', example='2018-08-10T09:55:41Z'),
    handshakeId?: string(name='HandshakeId', example='h-ycm4rp****'),
    masterAccountId?: string(name='MasterAccountId', example='172841235500****'),
    masterAccountName?: string(name='MasterAccountName', example='Alice'),
    modifyTime?: string(name='ModifyTime', example='2018-08-10T09:55:41Z'),
    note?: string(name='Note'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-abcdef****'),
    status?: string(name='Status', example='Declined'),
    targetEntity?: string(name='TargetEntity', example='someone@example.com'),
    targetType?: string(name='TargetType', example='Email'),
  }(name='Handshake'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model DeclineHandshakeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeclineHandshakeResponseBody(name='body'),
}

async function declineHandshakeWithOptions(request: DeclineHandshakeRequest, runtime: Util.RuntimeOptions): DeclineHandshakeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.handshakeId)) {
    query['HandshakeId'] = request.handshakeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeclineHandshake',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function declineHandshake(request: DeclineHandshakeRequest): DeclineHandshakeResponse {
  var runtime = new Util.RuntimeOptions{};
  return declineHandshakeWithOptions(request, runtime);
}

model DeleteAccountRequest {
  abandonableCheckId?: [ string ](name='AbandonableCheckId'),
  accountId?: string(name='AccountId', example='169946124551****'),
}

model DeleteAccountShrinkRequest {
  abandonableCheckIdShrink?: string(name='AbandonableCheckId'),
  accountId?: string(name='AccountId', example='169946124551****'),
}

model DeleteAccountResponseBody = {
  deletionType?: string(name='DeletionType', example='0'),
  requestId?: string(name='RequestId', example='009429F8-C1C0-5872-B674-A6C2333B9647'),
}

model DeleteAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAccountResponseBody(name='body'),
}

async function deleteAccountWithOptions(tmpReq: DeleteAccountRequest, runtime: Util.RuntimeOptions): DeleteAccountResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteAccountShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.abandonableCheckId)) {
    request.abandonableCheckIdShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.abandonableCheckId, 'AbandonableCheckId', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.abandonableCheckIdShrink)) {
    query['AbandonableCheckId'] = request.abandonableCheckIdShrink;
  }
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAccount',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccountWithOptions(request, runtime);
}

model DeleteControlPolicyRequest {
  policyId?: string(name='PolicyId', example='cp-SImPt8GCEwiq****'),
}

model DeleteControlPolicyResponseBody = {
  requestId?: string(name='RequestId', example='C8541E06-B207-46BF-92C9-DC8DE4609D75'),
}

model DeleteControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteControlPolicyResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request DeleteControlPolicyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteControlPolicyResponse
 */
async function deleteControlPolicyWithOptions(request: DeleteControlPolicyRequest, runtime: Util.RuntimeOptions): DeleteControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteControlPolicy',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request DeleteControlPolicyRequest
  * @return DeleteControlPolicyResponse
 */
async function deleteControlPolicy(request: DeleteControlPolicyRequest): DeleteControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteControlPolicyWithOptions(request, runtime);
}

model DeleteFolderRequest {
  folderId?: string(name='FolderId', example='fd-ae1in7****'),
}

model DeleteFolderResponseBody = {
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model DeleteFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFolderResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request DeleteFolderRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteFolderResponse
 */
async function deleteFolderWithOptions(request: DeleteFolderRequest, runtime: Util.RuntimeOptions): DeleteFolderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.folderId)) {
    query['FolderId'] = request.folderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFolder',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request DeleteFolderRequest
  * @return DeleteFolderResponse
 */
async function deleteFolder(request: DeleteFolderRequest): DeleteFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFolderWithOptions(request, runtime);
}

model DeleteMessageContactRequest {
  contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****'),
  retainContactInMembers?: boolean(name='RetainContactInMembers', example='true'),
}

model DeleteMessageContactResponseBody = {
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
  status?: string(name='Status', example='Deleting'),
}

model DeleteMessageContactResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMessageContactResponseBody(name='body'),
}

async function deleteMessageContactWithOptions(request: DeleteMessageContactRequest, runtime: Util.RuntimeOptions): DeleteMessageContactResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactId)) {
    query['ContactId'] = request.contactId;
  }
  if (!Util.isUnset(request.retainContactInMembers)) {
    query['RetainContactInMembers'] = request.retainContactInMembers;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMessageContact',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMessageContact(request: DeleteMessageContactRequest): DeleteMessageContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMessageContactWithOptions(request, runtime);
}

model DeregisterDelegatedAdministratorRequest {
  accountId?: string(name='AccountId', example='181761095690****'),
  servicePrincipal?: string(name='ServicePrincipal', example='cloudfw.aliyuncs.com'),
}

model DeregisterDelegatedAdministratorResponseBody = {
  requestId?: string(name='RequestId', example='DF5D5C52-7BD0-40E7-94C6-23A1505038A2'),
}

model DeregisterDelegatedAdministratorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeregisterDelegatedAdministratorResponseBody(name='body'),
}

async function deregisterDelegatedAdministratorWithOptions(request: DeregisterDelegatedAdministratorRequest, runtime: Util.RuntimeOptions): DeregisterDelegatedAdministratorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.servicePrincipal)) {
    query['ServicePrincipal'] = request.servicePrincipal;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeregisterDelegatedAdministrator',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deregisterDelegatedAdministrator(request: DeregisterDelegatedAdministratorRequest): DeregisterDelegatedAdministratorResponse {
  var runtime = new Util.RuntimeOptions{};
  return deregisterDelegatedAdministratorWithOptions(request, runtime);
}

model DestroyResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model DestroyResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DestroyResourceDirectoryResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request DestroyResourceDirectoryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DestroyResourceDirectoryResponse
 */
async function destroyResourceDirectoryWithOptions(runtime: Util.RuntimeOptions): DestroyResourceDirectoryResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DestroyResourceDirectory',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @return DestroyResourceDirectoryResponse
 */
async function destroyResourceDirectory(): DestroyResourceDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return destroyResourceDirectoryWithOptions(runtime);
}

model DetachControlPolicyRequest {
  policyId?: string(name='PolicyId', example='cp-jExXAqIYkwHN****'),
  targetId?: string(name='TargetId', example='fd-ZDNPiT****'),
}

model DetachControlPolicyResponseBody = {
  requestId?: string(name='RequestId', example='9EA4F962-1A2E-4AFE-BE0C-B14736FC46CC'),
}

model DetachControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachControlPolicyResponseBody(name='body'),
}

async function detachControlPolicyWithOptions(request: DetachControlPolicyRequest, runtime: Util.RuntimeOptions): DetachControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.targetId)) {
    query['TargetId'] = request.targetId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachControlPolicy',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachControlPolicy(request: DetachControlPolicyRequest): DetachControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachControlPolicyWithOptions(request, runtime);
}

model DisableControlPolicyResponseBody = {
  enablementStatus?: string(name='EnablementStatus', example='PendingDisable'),
  requestId?: string(name='RequestId', example='7C709979-451D-4C92-835D-7DDCCAA562E9'),
}

model DisableControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableControlPolicyResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request DisableControlPolicyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DisableControlPolicyResponse
 */
async function disableControlPolicyWithOptions(runtime: Util.RuntimeOptions): DisableControlPolicyResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DisableControlPolicy',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @return DisableControlPolicyResponse
 */
async function disableControlPolicy(): DisableControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableControlPolicyWithOptions(runtime);
}

model DisassociateMembersRequest {
  contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****'),
  members?: [ string ](name='Members'),
}

model DisassociateMembersResponseBody = {
  members?: [ 
    {
      contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****'),
      memberId?: string(name='MemberId', example='fd-ZDNPiT****'),
      modifyDate?: string(name='ModifyDate', example='2023-03-27 17:19:21'),
    }
  ](name='Members'),
  requestId?: string(name='RequestId', example='95060F1D-6990-4645-8920-A81D1BBFE992'),
}

model DisassociateMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisassociateMembersResponseBody(name='body'),
}

async function disassociateMembersWithOptions(request: DisassociateMembersRequest, runtime: Util.RuntimeOptions): DisassociateMembersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactId)) {
    query['ContactId'] = request.contactId;
  }
  if (!Util.isUnset(request.members)) {
    query['Members'] = request.members;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisassociateMembers',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disassociateMembers(request: DisassociateMembersRequest): DisassociateMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return disassociateMembersWithOptions(request, runtime);
}

model EnableControlPolicyResponseBody = {
  enablementStatus?: string(name='EnablementStatus', example='PendingEnable'),
  requestId?: string(name='RequestId', example='8CE7BD95-EFFA-4911-A1E0-BD4412697FEB'),
}

model EnableControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableControlPolicyResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request EnableControlPolicyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return EnableControlPolicyResponse
 */
async function enableControlPolicyWithOptions(runtime: Util.RuntimeOptions): EnableControlPolicyResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'EnableControlPolicy',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @return EnableControlPolicyResponse
 */
async function enableControlPolicy(): EnableControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableControlPolicyWithOptions(runtime);
}

model EnableResourceDirectoryRequest {
  enableMode?: string(name='EnableMode', example='CurrentAccount'),
  MAName?: string(name='MAName', example='user01@rdadmin.aliyunid.com'),
  MASecureMobilePhone?: string(name='MASecureMobilePhone', example='xx-13900001234'),
  verificationCode?: string(name='VerificationCode', example='123456'),
}

model EnableResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId', example='EC2FE94D-A4A2-51A1-A493-5C273A36C46A'),
  resourceDirectory?: {
    createTime?: string(name='CreateTime', example='2021-12-08T02:15:31.744Z'),
    masterAccountId?: string(name='MasterAccountId', example='507408460615****'),
    masterAccountName?: string(name='MasterAccountName', example='alice@example.com'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-54****'),
    rootFolderId?: string(name='RootFolderId', example='r-G9****'),
  }(name='ResourceDirectory'),
}

model EnableResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableResourceDirectoryResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
  * @param request EnableResourceDirectoryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return EnableResourceDirectoryResponse
 */
async function enableResourceDirectoryWithOptions(request: EnableResourceDirectoryRequest, runtime: Util.RuntimeOptions): EnableResourceDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.enableMode)) {
    query['EnableMode'] = request.enableMode;
  }
  if (!Util.isUnset(request.MAName)) {
    query['MAName'] = request.MAName;
  }
  if (!Util.isUnset(request.MASecureMobilePhone)) {
    query['MASecureMobilePhone'] = request.MASecureMobilePhone;
  }
  if (!Util.isUnset(request.verificationCode)) {
    query['VerificationCode'] = request.verificationCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableResourceDirectory',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the request.
  *
  * @param request EnableResourceDirectoryRequest
  * @return EnableResourceDirectoryResponse
 */
async function enableResourceDirectory(request: EnableResourceDirectoryRequest): EnableResourceDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableResourceDirectoryWithOptions(request, runtime);
}

model GetAccountRequest {
  accountId?: string(name='AccountId', example='181761095690****'),
  includeTags?: boolean(name='IncludeTags', example='true'),
}

model GetAccountResponseBody = {
  account?: {
    accountId?: string(name='AccountId', example='181761095690****'),
    accountName?: string(name='AccountName', example='someone@example.com'),
    displayName?: string(name='DisplayName', example='admin'),
    emailStatus?: string(name='EmailStatus', example='WAIT_MODIFY'),
    folderId?: string(name='FolderId', example='fd-bVaRIG****'),
    identityInformation?: string(name='IdentityInformation', example='aliyun-admin'),
    joinMethod?: string(name='JoinMethod', example='created'),
    joinTime?: string(name='JoinTime', example='2015-01-23T12:33:18Z'),
    location?: string(name='Location', example='root/AlRd****/Z5Aa****'),
    modifyTime?: string(name='ModifyTime', example='2015-01-23T12:33:18Z'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-k3****'),
    resourceDirectoryPath?: string(name='ResourceDirectoryPath', example='rd-k3****/r-Wm****/fd-bVaRIG****/181761095690****'),
    status?: string(name='Status', example='CreateSuccess'),
    tags?: [ 
      {
        key?: string(name='Key', example='tag_key'),
        value?: string(name='Value', example='tag_value'),
      }
    ](name='Tags'),
    type?: string(name='Type', example='ResourceAccount'),
  }(name='Account'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model GetAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAccountResponseBody(name='body'),
}

async function getAccountWithOptions(request: GetAccountRequest, runtime: Util.RuntimeOptions): GetAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.includeTags)) {
    query['IncludeTags'] = request.includeTags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAccount',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAccount(request: GetAccountRequest): GetAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAccountWithOptions(request, runtime);
}

model GetAccountDeletionCheckResultRequest {
  accountId?: string(name='AccountId', example='179855839641****'),
}

model GetAccountDeletionCheckResultResponseBody = {
  accountDeletionCheckResultInfo?: {
    abandonableChecks?: [ 
      {
        checkId?: string(name='CheckId', example='NON_SP_cs'),
        checkName?: string(name='CheckName'),
        description?: string(name='Description'),
      }
    ](name='AbandonableChecks'),
    allowDelete?: string(name='AllowDelete', example='false'),
    notAllowReason?: [ 
      {
        checkId?: string(name='CheckId', example='NON_SP_efc'),
        checkName?: string(name='CheckName', example='Enterprise finance'),
        description?: string(name='Description', example='This account is an Enterprise Finance associated account. Please remove the financial association of this account before deleting it.'),
      }
    ](name='NotAllowReason'),
    status?: string(name='Status', example='PreCheckComplete'),
  }(name='AccountDeletionCheckResultInfo'),
  requestId?: string(name='RequestId', example='54AC391D-4F7F-5F08-B8D3-0AECDE6EC5BD'),
}

model GetAccountDeletionCheckResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAccountDeletionCheckResultResponseBody(name='body'),
}

/**
  * Container Service for Kubernetes
  *
  * @param request GetAccountDeletionCheckResultRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetAccountDeletionCheckResultResponse
 */
async function getAccountDeletionCheckResultWithOptions(request: GetAccountDeletionCheckResultRequest, runtime: Util.RuntimeOptions): GetAccountDeletionCheckResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAccountDeletionCheckResult',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Container Service for Kubernetes
  *
  * @param request GetAccountDeletionCheckResultRequest
  * @return GetAccountDeletionCheckResultResponse
 */
async function getAccountDeletionCheckResult(request: GetAccountDeletionCheckResultRequest): GetAccountDeletionCheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAccountDeletionCheckResultWithOptions(request, runtime);
}

model GetAccountDeletionStatusRequest {
  accountId?: string(name='AccountId', example='169946124551****'),
}

model GetAccountDeletionStatusResponseBody = {
  rdAccountDeletionStatus?: {
    accountId?: string(name='AccountId', example='169946124551****'),
    createTime?: string(name='CreateTime', example='2022-08-23T17:05:30+08:00'),
    deletionTime?: string(name='DeletionTime', example='2022-08-23T17:06:01+08:00'),
    deletionType?: string(name='DeletionType', example='0'),
    failReasonList?: [ 
      {
        description?: string(name='Description', example='This account has a payer account. Please release the financial relationship of this account first.'),
        name?: string(name='Name', example='Others'),
      }
    ](name='FailReasonList'),
    status?: string(name='Status', example='Success'),
  }(name='RdAccountDeletionStatus'),
  requestId?: string(name='RequestId', example='8AA43293-7C8F-5730-8F2D-7F864EC092C5'),
}

model GetAccountDeletionStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAccountDeletionStatusResponseBody(name='body'),
}

async function getAccountDeletionStatusWithOptions(request: GetAccountDeletionStatusRequest, runtime: Util.RuntimeOptions): GetAccountDeletionStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAccountDeletionStatus',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAccountDeletionStatus(request: GetAccountDeletionStatusRequest): GetAccountDeletionStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAccountDeletionStatusWithOptions(request, runtime);
}

model GetControlPolicyRequest {
  language?: string(name='Language', example='zh-CN'),
  policyId?: string(name='PolicyId', example='cp-SImPt8GCEwiq****'),
}

model GetControlPolicyResponseBody = {
  controlPolicy?: {
    attachmentCount?: string(name='AttachmentCount', example='0'),
    createDate?: string(name='CreateDate', example='2021-03-18T08:51:33Z'),
    description?: string(name='Description', example='ExampleControlPolicy'),
    effectScope?: string(name='EffectScope', example='RAM'),
    policyDocument?: string(name='PolicyDocument', example='{\\"Version\\":\\"1\\",\\"Statement\\":[{\\"Effect\\":\\"Deny\\",\\"Action\\":[\\"ram:UpdateRole\\",\\"ram:DeleteRole\\",\\"ram:AttachPolicyToRole\\",\\"ram:DetachPolicyFromRole\\"],\\"Resource\\":\\"acs:ram:*:*:role/ResourceDirectoryAccountAccessRole\\"}]}'),
    policyId?: string(name='PolicyId', example='cp-SImPt8GCEwiq****'),
    policyName?: string(name='PolicyName', example='test'),
    policyType?: string(name='PolicyType', example='Custom'),
    updateDate?: string(name='UpdateDate', example='2021-03-18T08:51:33Z'),
  }(name='ControlPolicy'),
  requestId?: string(name='RequestId', example='AB769936-CDFA-4D52-8CE2-A3581800044A'),
}

model GetControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetControlPolicyResponseBody(name='body'),
}

async function getControlPolicyWithOptions(request: GetControlPolicyRequest, runtime: Util.RuntimeOptions): GetControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetControlPolicy',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getControlPolicy(request: GetControlPolicyRequest): GetControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getControlPolicyWithOptions(request, runtime);
}

model GetControlPolicyEnablementStatusResponseBody = {
  enablementStatus?: string(name='EnablementStatus', example='Disabled'),
  requestId?: string(name='RequestId', example='1DC39A4E-3B52-4EFE-9F93-4897D7FFA0C4'),
}

model GetControlPolicyEnablementStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetControlPolicyEnablementStatusResponseBody(name='body'),
}

async function getControlPolicyEnablementStatusWithOptions(runtime: Util.RuntimeOptions): GetControlPolicyEnablementStatusResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetControlPolicyEnablementStatus',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getControlPolicyEnablementStatus(): GetControlPolicyEnablementStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getControlPolicyEnablementStatusWithOptions(runtime);
}

model GetFolderRequest {
  folderId?: string(name='FolderId', example='fd-Jyl5U7****'),
}

model GetFolderResponseBody = {
  folder?: {
    createTime?: string(name='CreateTime', example='2021-06-15T06:39:08.521Z'),
    folderId?: string(name='FolderId', example='fd-Jyl5U7****'),
    folderName?: string(name='FolderName', example='Applications'),
    parentFolderId?: string(name='ParentFolderId', example='r-Wm****'),
    resourceDirectoryPath?: string(name='ResourceDirectoryPath', example='rd-3G****/r-Wm****/fd-Jyl5U7****'),
  }(name='Folder'),
  requestId?: string(name='RequestId', example='C2CBCA30-C8DD-423E-B4AD-4FB694C9180C'),
}

model GetFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFolderResponseBody(name='body'),
}

async function getFolderWithOptions(request: GetFolderRequest, runtime: Util.RuntimeOptions): GetFolderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.folderId)) {
    query['FolderId'] = request.folderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFolder',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFolder(request: GetFolderRequest): GetFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFolderWithOptions(request, runtime);
}

model GetHandshakeRequest {
  handshakeId?: string(name='HandshakeId', example='h-ycm4rp****'),
}

model GetHandshakeResponseBody = {
  handshake?: {
    createTime?: string(name='CreateTime', example='2018-08-10T09:55:41Z'),
    expireTime?: string(name='ExpireTime', example='2018-08-24T09:55:41Z'),
    handshakeId?: string(name='HandshakeId', example='h-ycm4rp****'),
    invitedAccountRealName?: string(name='InvitedAccountRealName', example='Alice'),
    masterAccountId?: string(name='MasterAccountId', example='172841235500****'),
    masterAccountName?: string(name='MasterAccountName', example='company@example.com'),
    masterAccountRealName?: string(name='MasterAccountRealName', example='company'),
    modifyTime?: string(name='ModifyTime', example='2018-08-10T09:55:41Z'),
    note?: string(name='Note'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-abcdef****'),
    status?: string(name='Status', example='Pending'),
    targetEntity?: string(name='TargetEntity', example='someone@example.com'),
    targetType?: string(name='TargetType', example='Email'),
  }(name='Handshake'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model GetHandshakeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHandshakeResponseBody(name='body'),
}

async function getHandshakeWithOptions(request: GetHandshakeRequest, runtime: Util.RuntimeOptions): GetHandshakeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.handshakeId)) {
    query['HandshakeId'] = request.handshakeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHandshake',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHandshake(request: GetHandshakeRequest): GetHandshakeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHandshakeWithOptions(request, runtime);
}

model GetMessageContactRequest {
  contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****'),
}

model GetMessageContactResponseBody = {
  contact?: {
    contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****'),
    createDate?: string(name='CreateDate', example='2023-03-27 17:19:21'),
    emailAddress?: string(name='EmailAddress', example='someone***@example.com'),
    members?: [ string ](name='Members'),
    messageTypes?: [ string ](name='MessageTypes'),
    name?: string(name='Name', example='tom'),
    phoneNumber?: string(name='PhoneNumber', example='86-139****1234'),
    status?: string(name='Status', example='Active'),
    title?: string(name='Title', example='TechnicalDirector'),
  }(name='Contact'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model GetMessageContactResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMessageContactResponseBody(name='body'),
}

async function getMessageContactWithOptions(request: GetMessageContactRequest, runtime: Util.RuntimeOptions): GetMessageContactResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactId)) {
    query['ContactId'] = request.contactId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMessageContact',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMessageContact(request: GetMessageContactRequest): GetMessageContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMessageContactWithOptions(request, runtime);
}

model GetMessageContactDeletionStatusRequest {
  contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****'),
}

model GetMessageContactDeletionStatusResponseBody = {
  contactDeletionStatus?: {
    contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****'),
    failReasonList?: [ 
      {
        accountId?: string(name='AccountId', example='199796839435****'),
        messageTypes?: [ string ](name='MessageTypes'),
      }
    ](name='FailReasonList'),
    status?: string(name='Status', example='Deleting'),
  }(name='ContactDeletionStatus'),
  requestId?: string(name='RequestId', example='95060F1D-6990-4645-8920-A81D1BBFE992'),
}

model GetMessageContactDeletionStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMessageContactDeletionStatusResponseBody(name='body'),
}

async function getMessageContactDeletionStatusWithOptions(request: GetMessageContactDeletionStatusRequest, runtime: Util.RuntimeOptions): GetMessageContactDeletionStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactId)) {
    query['ContactId'] = request.contactId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMessageContactDeletionStatus',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMessageContactDeletionStatus(request: GetMessageContactDeletionStatusRequest): GetMessageContactDeletionStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMessageContactDeletionStatusWithOptions(request, runtime);
}

model GetPayerForAccountRequest {
  accountId?: string(name='AccountId', description='The ID of the billing account.', example='12323344****'),
}

model GetPayerForAccountResponseBody = {
  payerAccountId?: string(name='PayerAccountId', description='The ID of the billing account.', example='172841235500****'),
  payerAccountName?: string(name='PayerAccountName', description='The name of the billing account.', example='Alice'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model GetPayerForAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPayerForAccountResponseBody(name='body'),
}

async function getPayerForAccountWithOptions(request: GetPayerForAccountRequest, runtime: Util.RuntimeOptions): GetPayerForAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPayerForAccount',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPayerForAccount(request: GetPayerForAccountRequest): GetPayerForAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPayerForAccountWithOptions(request, runtime);
}

model GetResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId', example='CD76D376-2517-4924-92C5-DBC52262F93A'),
  resourceDirectory?: {
    controlPolicyStatus?: string(name='ControlPolicyStatus', example='Enabled'),
    createTime?: string(name='CreateTime', example='2019-02-18T15:32:10.473Z'),
    identityInformation?: string(name='IdentityInformation'),
    masterAccountId?: string(name='MasterAccountId', example='172845045600****'),
    masterAccountName?: string(name='MasterAccountName', example='aliyun-admin'),
    memberDeletionStatus?: string(name='MemberDeletionStatus', example='Enabled'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-St****'),
    rootFolderId?: string(name='RootFolderId', example='r-Zo****'),
  }(name='ResourceDirectory'),
}

model GetResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourceDirectoryResponseBody(name='body'),
}

async function getResourceDirectoryWithOptions(runtime: Util.RuntimeOptions): GetResourceDirectoryResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetResourceDirectory',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourceDirectory(): GetResourceDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourceDirectoryWithOptions(runtime);
}

model InviteAccountToResourceDirectoryRequest {
  note?: string(name='Note'),
  parentFolderId?: string(name='ParentFolderId', example='r-b1****'),
  tag?: [ 
    {
      key?: string(name='Key', example='k1'),
      value?: string(name='Value', example='v1'),
    }
  ](name='Tag'),
  targetEntity?: string(name='TargetEntity', example='someone@example.com'),
  targetType?: string(name='TargetType', example='Email'),
}

model InviteAccountToResourceDirectoryResponseBody = {
  handshake?: {
    createTime?: string(name='CreateTime', example='2018-08-10T09:55:41Z'),
    expireTime?: string(name='ExpireTime', example='2018-08-24T09:55:41Z'),
    handshakeId?: string(name='HandshakeId', example='h-ycm4rp****'),
    masterAccountId?: string(name='MasterAccountId', example='172841235500****'),
    masterAccountName?: string(name='MasterAccountName', example='Alice'),
    modifyTime?: string(name='ModifyTime', example='2018-08-10T09:55:41Z'),
    note?: string(name='Note'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-abcdef****'),
    status?: string(name='Status', example='Pending'),
    targetEntity?: string(name='TargetEntity', example='someone@example.com'),
    targetType?: string(name='TargetType', example='Email'),
  }(name='Handshake'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model InviteAccountToResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InviteAccountToResourceDirectoryResponseBody(name='body'),
}

async function inviteAccountToResourceDirectoryWithOptions(request: InviteAccountToResourceDirectoryRequest, runtime: Util.RuntimeOptions): InviteAccountToResourceDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.note)) {
    query['Note'] = request.note;
  }
  if (!Util.isUnset(request.parentFolderId)) {
    query['ParentFolderId'] = request.parentFolderId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.targetEntity)) {
    query['TargetEntity'] = request.targetEntity;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InviteAccountToResourceDirectory',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function inviteAccountToResourceDirectory(request: InviteAccountToResourceDirectoryRequest): InviteAccountToResourceDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return inviteAccountToResourceDirectoryWithOptions(request, runtime);
}

model ListAccountsRequest {
  includeTags?: boolean(name='IncludeTags', description='Specifies whether to return the information of tags. Valid values:

false (default value) true', example='true'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10'),
  queryKeyword?: string(name='QueryKeyword', description='The keyword used for the query, such as the display name of a member.

Fuzzy match is supported.', example='Advance'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='tag_key'),
      value?: string(name='Value', description='The tag value.', example='tag_value'),
    }
  ](name='Tag', description='The tags. This parameter specifies a filter condition.'),
}

model ListAccountsResponseBody = {
  accounts?: {
    account?: [ 
    {
      accountId?: string(name='AccountId', description='The Alibaba Cloud account ID of the member.', example='181761095690****'),
      accountName?: string(name='AccountName', description='The Alibaba Cloud account name of the member.', example='oxy01414357@alibaba-inc.com'),
      displayName?: string(name='DisplayName', description='The display name of the member.', example='test'),
      folderId?: string(name='FolderId', description='The ID of the folder.', example='fd-QRzuim****'),
      joinMethod?: string(name='JoinMethod', description='The way in which the member joins the resource directory. Valid values:

*   invited: The member is invited to join the resource directory.
*   created: The member is directly created in the resource directory.', example='created'),
      joinTime?: string(name='JoinTime', description='The time when the member joined the resource directory. The time is displayed in UTC.', example='2021-01-18T08:01:50.522Z'),
      modifyTime?: string(name='ModifyTime', description='The time when the member was modified. The time is displayed in UTC.', example='2021-01-18T08:04:37.668Z'),
      resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-3G****'),
      resourceDirectoryPath?: string(name='ResourceDirectoryPath', description='The path of the member in the resource directory.', example='rd-3G****/r-Wm****/fd-QRzuim****/181761095690****'),
      status?: string(name='Status', description='The status of the member. Valid values:

*   CreateSuccess: The member is created.
*   PromoteVerifying: The upgrade of the member is being confirmed.
*   PromoteFailed: The upgrade of the member fails.
*   PromoteExpired: The upgrade of the member expires.
*   PromoteCancelled: The upgrade of the member is canceled.
*   PromoteSuccess: The member is upgraded.
*   InviteSuccess: The member accepts the invitation.', example='CreateSuccess'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='tag_key'),
          value?: string(name='Value', description='The tag value.', example='tag_value'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags that are added to the member.'),
      type?: string(name='Type', description='The type of the member. Valid values:

*   CloudAccount: cloud account
*   ResourceAccount: resource account', example='ResourceAccount'),
    }
  ](name='Account')
  }(name='Accounts', description='The members returned.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='5'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7B8A4E7D-6CFF-471D-84DF-195A7A241ECB'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListAccountsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAccountsResponseBody(name='body'),
}

/**
  * You can use only the management account of a resource directory or a delegated administrator account of a trusted service to call this operation.
  *
  * @param request ListAccountsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListAccountsResponse
 */
async function listAccountsWithOptions(request: ListAccountsRequest, runtime: Util.RuntimeOptions): ListAccountsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.includeTags)) {
    query['IncludeTags'] = request.includeTags;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryKeyword)) {
    query['QueryKeyword'] = request.queryKeyword;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAccounts',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can use only the management account of a resource directory or a delegated administrator account of a trusted service to call this operation.
  *
  * @param request ListAccountsRequest
  * @return ListAccountsResponse
 */
async function listAccounts(request: ListAccountsRequest): ListAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAccountsWithOptions(request, runtime);
}

model ListAccountsForParentRequest {
  includeTags?: boolean(name='IncludeTags', description='Specifies whether to return the information of tags. Valid values:

false (default value) true', example='true'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10'),
  parentFolderId?: string(name='ParentFolderId', description='The ID of the folder.', example='fd-bVaRIG****'),
  queryKeyword?: string(name='QueryKeyword', description='The keyword used for the query, such as the display name of a member.

Fuzzy match is supported.', example='admin'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='tag_key'),
      value?: string(name='Value', description='The value of the tag.', example='tag_value'),
    }
  ](name='Tag', description='The tags. This parameter specifies a filter condition.'),
}

model ListAccountsForParentResponseBody = {
  accounts?: {
    account?: [ 
    {
      accountId?: string(name='AccountId', description='The Alibaba Cloud account ID of the member.', example='184311716100****'),
      accountName?: string(name='AccountName', description='The Alibaba Cloud account name of the member.', example='hdd01429358@alibaba-inc.com'),
      displayName?: string(name='DisplayName', description='The display name of the member.', example='admin'),
      folderId?: string(name='FolderId', description='The ID of the folder.', example='fd-bVaRIG****'),
      joinMethod?: string(name='JoinMethod', description='The way in which the member joins the resource directory. Valid values:

*   invited: The member is invited to join the resource directory.
*   created: The member is directly created in the resource directory.', example='created'),
      joinTime?: string(name='JoinTime', description='The time when the member joined the resource directory. The time is displayed in UTC.', example='2015-01-23T12:33:18Z'),
      modifyTime?: string(name='ModifyTime', description='The time when the member was modified. The time is displayed in UTC.', example='2015-01-23T12:33:18Z'),
      resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-k4****'),
      status?: string(name='Status', description='The status of the member. Valid values:

*   CreateSuccess: The member is created.
*   PromoteVerifying: The upgrade of the member is being confirmed.
*   PromoteFailed: The upgrade of the member fails.
*   PromoteExpired: The upgrade of the member expires.
*   PromoteCancelled: The upgrade of the member is canceled.
*   PromoteSuccess: The member is upgraded.
*   InviteSuccess: The member accepts the invitation.', example='CreateSuccess'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The key of the tag.', example='tag_key'),
          value?: string(name='Value', description='The value of the tag.', example='tag_value'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags that are added to the member.'),
      type?: string(name='Type', description='The type of the member. Valid values:

*   CloudAccount: cloud account
*   ResourceAccount: resource account', example='ResourceAccount'),
    }
  ](name='Account')
  }(name='Accounts', description='The information of the members.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='5'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7B8A4E7D-6CFF-471D-84DF-195A7A241ECB'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListAccountsForParentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAccountsForParentResponseBody(name='body'),
}

async function listAccountsForParentWithOptions(request: ListAccountsForParentRequest, runtime: Util.RuntimeOptions): ListAccountsForParentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.includeTags)) {
    query['IncludeTags'] = request.includeTags;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentFolderId)) {
    query['ParentFolderId'] = request.parentFolderId;
  }
  if (!Util.isUnset(request.queryKeyword)) {
    query['QueryKeyword'] = request.queryKeyword;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAccountsForParent',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAccountsForParent(request: ListAccountsForParentRequest): ListAccountsForParentResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAccountsForParentWithOptions(request, runtime);
}

model ListAncestorsRequest {
  childId?: string(name='ChildId', description='The ID of the subfolder.', example='fd-i1c9nr****'),
}

model ListAncestorsResponseBody = {
  folders?: {
    folder?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the folder was created.', example='2019-01-18T10:03:35.217Z'),
      folderId?: string(name='FolderId', description='The ID of the folder.', example='r-b1****'),
      folderName?: string(name='FolderName', description='The name of the folder.', example='root'),
    }
  ](name='Folder')
  }(name='Folders', description='The information of the folders.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='83AFBEB6-DC03-406E-9686-867461FF6698'),
}

model ListAncestorsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAncestorsResponseBody(name='body'),
}

async function listAncestorsWithOptions(request: ListAncestorsRequest, runtime: Util.RuntimeOptions): ListAncestorsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.childId)) {
    query['ChildId'] = request.childId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAncestors',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAncestors(request: ListAncestorsRequest): ListAncestorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAncestorsWithOptions(request, runtime);
}

model ListControlPoliciesRequest {
  language?: string(name='Language', description='The language in which you want to return the descriptions of the access control policies. Valid values:

*   zh-CN (default value): Chinese
*   en: English
*   ja: Japanese

> This parameter is available only for system access control policies.', example='zh-CN'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10'),
  policyType?: string(name='PolicyType', description='The type of the access control policies. Valid values:

*   System: system access control policy
*   Custom: custom access control policy', example='System'),
}

model ListControlPoliciesResponseBody = {
  controlPolicies?: {
    controlPolicy?: [ 
    {
      attachmentCount?: string(name='AttachmentCount', description='The number of times that the access control policy is referenced.', example='44'),
      createDate?: string(name='CreateDate', description='The time when the access control policy was created.', example='2020-08-05T06:32:24Z'),
      description?: string(name='Description', description='The description of the access control policy.', example='System access control policy available for all operations on the cloud'),
      effectScope?: string(name='EffectScope', description='The effective scope of the access control policy. Valid values:

*   All: The access control policy is in effect for Alibaba Cloud accounts, RAM users, and RAM roles.
*   RAM: The access control policy is in effect only for RAM users and RAM roles.', example='All'),
      policyId?: string(name='PolicyId', description='The ID of the access control policy.', example='cp-FullAliyunAccess'),
      policyName?: string(name='PolicyName', description='The name of the access control policy.', example='FullAliyunAccess'),
      policyType?: string(name='PolicyType', description='The type of the access control policy. Valid values:

*   System: system access control policy
*   Custom: custom access control policy', example='System'),
      updateDate?: string(name='UpdateDate', description='The time when the access control policy was updated.', example='2020-08-05T06:32:24Z'),
    }
  ](name='ControlPolicy')
  }(name='ControlPolicies', description='The information of the access control policies.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9424A34C-3471-45AD-B6AB-924BBDFE42F9'),
  totalCount?: int32(name='TotalCount', description='The number of access control policies.', example='1'),
}

model ListControlPoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListControlPoliciesResponseBody(name='body'),
}

async function listControlPoliciesWithOptions(request: ListControlPoliciesRequest, runtime: Util.RuntimeOptions): ListControlPoliciesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.policyType)) {
    query['PolicyType'] = request.policyType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListControlPolicies',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listControlPolicies(request: ListControlPoliciesRequest): ListControlPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listControlPoliciesWithOptions(request, runtime);
}

model ListControlPolicyAttachmentsForTargetRequest {
  language?: string(name='Language', description='The language in which you want to return the descriptions of the access control policies. Valid values:

*   zh-CN (default value): Chinese
*   en: English
*   ja: Japanese

> This parameter is valid only for system access control policies.', example='zh-CN'),
  targetId?: string(name='TargetId', description='The ID of the object whose access control policies you want to query. Access control policies can be attached to the following objects:

*   Root folder
*   Subfolders of the Root folder
*   Members', example='fd-ZDNPiT****'),
}

model ListControlPolicyAttachmentsForTargetResponseBody = {
  controlPolicyAttachments?: {
    controlPolicyAttachment?: [ 
    {
      attachDate?: string(name='AttachDate', description='The time when the access control policy was attached.', example='2021-03-19T02:56:24Z'),
      description?: string(name='Description', description='The description of the access control policy.', example='ExampleControlPolicy'),
      effectScope?: string(name='EffectScope', description='The effective scope of the access control policy. Valid values:

*   All: The access control policy is in effect for Alibaba Cloud accounts, RAM users, and RAM roles.
*   RAM: The access control policy is in effect only for RAM users and RAM roles.', example='RAM'),
      policyId?: string(name='PolicyId', description='The ID of the access control policy.', example='cp-jExXAqIYkwHN****'),
      policyName?: string(name='PolicyName', description='The name of the access control policy.', example='ExampleControlPolicy'),
      policyType?: string(name='PolicyType', description='The type of the access control policy. Valid values:

*   System: system access control policy
*   Custom: custom access control policy', example='Custom'),
    }
  ](name='ControlPolicyAttachment')
  }(name='ControlPolicyAttachments', description='The information about the attached access control policies.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C276B600-7B7A-49E8-938C-E16CFA955A82'),
}

model ListControlPolicyAttachmentsForTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListControlPolicyAttachmentsForTargetResponseBody(name='body'),
}

async function listControlPolicyAttachmentsForTargetWithOptions(request: ListControlPolicyAttachmentsForTargetRequest, runtime: Util.RuntimeOptions): ListControlPolicyAttachmentsForTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.targetId)) {
    query['TargetId'] = request.targetId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListControlPolicyAttachmentsForTarget',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listControlPolicyAttachmentsForTarget(request: ListControlPolicyAttachmentsForTargetRequest): ListControlPolicyAttachmentsForTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return listControlPolicyAttachmentsForTargetWithOptions(request, runtime);
}

model ListDelegatedAdministratorsRequest {
  pageNumber?: long(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10'),
  servicePrincipal?: string(name='ServicePrincipal', description='The identifier of the trusted service.

For more information, see the `Trusted service identifier` column in [Supported trusted services](~~208133~~).', example='cloudfw.aliyuncs.com'),
}

model ListDelegatedAdministratorsResponseBody = {
  accounts?: {
    account?: [ 
    {
      accountId?: string(name='AccountId', description='The Alibaba Cloud account ID of the member.', example='138660628348****'),
      delegationEnabledTime?: string(name='DelegationEnabledTime', description='The time when the member was specified as a delegated administrator account.', example='1616652684164'),
      displayName?: string(name='DisplayName', description='The display name of the member.', example='abc'),
      joinMethod?: string(name='JoinMethod', description='The way in which the member joins the resource directory. Valid values:

*   invited: The member is invited to join the resource directory.
*   created: The member is directly created in the resource directory.', example='created'),
      servicePrincipal?: string(name='ServicePrincipal', description='The identifier of the trusted service.', example='cloudfw.aliyuncs.com'),
    }
  ](name='Account')
  }(name='Accounts', description='The information about the delegated administrator accounts.'),
  pageNumber?: long(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='009C3A02-7D4B-416C-9CE7-548C91508F1E'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListDelegatedAdministratorsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDelegatedAdministratorsResponseBody(name='body'),
}

async function listDelegatedAdministratorsWithOptions(request: ListDelegatedAdministratorsRequest, runtime: Util.RuntimeOptions): ListDelegatedAdministratorsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.servicePrincipal)) {
    query['ServicePrincipal'] = request.servicePrincipal;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDelegatedAdministrators',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDelegatedAdministrators(request: ListDelegatedAdministratorsRequest): ListDelegatedAdministratorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDelegatedAdministratorsWithOptions(request, runtime);
}

model ListDelegatedServicesForAccountRequest {
  accountId?: string(name='AccountId', description='The Alibaba Cloud account ID of the member.', example='138660628348****'),
}

model ListDelegatedServicesForAccountResponseBody = {
  delegatedServices?: {
    delegatedService?: [ 
    {
      delegationEnabledTime?: string(name='DelegationEnabledTime', description='The time when the member was specified as a delegated administrator account.', example='1616652684164'),
      servicePrincipal?: string(name='ServicePrincipal', description='The identifier of the trusted service.', example='cloudfw.aliyuncs.com'),
      status?: string(name='Status', description='The status of the trusted service. Valid values:

*   ENABLED: enabled
*   DISABLED: disabled', example='ENABLED'),
    }
  ](name='DelegatedService')
  }(name='DelegatedServices', description='The information about the trusted services.

> If the value of this parameter is empty, the member is not specified as a delegated administrator account.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D9C03B94-9396-4794-A74B-13DC437556A6'),
}

model ListDelegatedServicesForAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDelegatedServicesForAccountResponseBody(name='body'),
}

async function listDelegatedServicesForAccountWithOptions(request: ListDelegatedServicesForAccountRequest, runtime: Util.RuntimeOptions): ListDelegatedServicesForAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDelegatedServicesForAccount',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDelegatedServicesForAccount(request: ListDelegatedServicesForAccountRequest): ListDelegatedServicesForAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDelegatedServicesForAccountWithOptions(request, runtime);
}

model ListFoldersForParentRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10'),
  parentFolderId?: string(name='ParentFolderId', description='The ID of the parent folder.

If you leave this parameter empty, the information of the first-level subfolders of the Root folder is queried.', example='r-b1****'),
  queryKeyword?: string(name='QueryKeyword', description='The keyword used for the query, such as a folder name.

Fuzzy match is supported.', example='rdFolder'),
}

model ListFoldersForParentResponseBody = {
  folders?: {
    folder?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the folder was created.', example='2015-01-23T12:33:18Z'),
      folderId?: string(name='FolderId', description='The ID of the folder.', example='rd-evic31****'),
      folderName?: string(name='FolderName', description='The name of the folder.', example='project-1'),
    }
  ](name='Folder')
  }(name='Folders', description='The information of the folders.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='5'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7B8A4E7D-6CFF-471D-84DF-195A7A241ECB'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListFoldersForParentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFoldersForParentResponseBody(name='body'),
}

/**
  * You can call this API operation to view the information of only the first-level subfolders of a folder.
  *
  * @param request ListFoldersForParentRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListFoldersForParentResponse
 */
async function listFoldersForParentWithOptions(request: ListFoldersForParentRequest, runtime: Util.RuntimeOptions): ListFoldersForParentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentFolderId)) {
    query['ParentFolderId'] = request.parentFolderId;
  }
  if (!Util.isUnset(request.queryKeyword)) {
    query['QueryKeyword'] = request.queryKeyword;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFoldersForParent',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this API operation to view the information of only the first-level subfolders of a folder.
  *
  * @param request ListFoldersForParentRequest
  * @return ListFoldersForParentResponse
 */
async function listFoldersForParent(request: ListFoldersForParentRequest): ListFoldersForParentResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFoldersForParentWithOptions(request, runtime);
}

model ListHandshakesForAccountRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10'),
}

model ListHandshakesForAccountResponseBody = {
  handshakes?: {
    handshake?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the invitation was created. The time is displayed in UTC.', example='2018-08-10T09:55:41Z'),
      expireTime?: string(name='ExpireTime', description='The time when the invitation expires. The time is displayed in UTC.', example='2018-08-24T09:55:41Z'),
      handshakeId?: string(name='HandshakeId', description='The ID of the invitation.', example='h-4N57QZzCTtES****'),
      masterAccountId?: string(name='MasterAccountId', description='The ID of the management account of the resource directory.', example='172841235500****'),
      masterAccountName?: string(name='MasterAccountName', description='The name of the management account of the resource directory.', example='CompanyA'),
      modifyTime?: string(name='ModifyTime', description='The time when the invitation was modified. The time is displayed in UTC.', example='2018-08-10T09:55:41Z'),
      note?: string(name='Note', description='The description of the invitation.', example='Welcome'),
      resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-abcdef****'),
      status?: string(name='Status', description='The status of the invitation. Valid values:

*   Pending: The invitation is waiting for confirmation.
*   Accepted: The invitation is accepted.
*   Cancelled: The invitation is canceled.
*   Declined: The invitation is rejected.
*   Expired: The invitation expires.', example='Pending'),
      targetEntity?: string(name='TargetEntity', description='The ID or logon email address of the invited Alibaba Cloud account.', example='someone@example.com'),
      targetType?: string(name='TargetType', description='The type of the invited Alibaba Cloud account. Valid values:

*   Account: indicates the ID of the account.
*   Email: indicates the logon email address of the account.', example='Email'),
    }
  ](name='Handshake')
  }(name='Handshakes', description='The information of the invitations.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
  totalCount?: int32(name='TotalCount', description='The total number of invitations.', example='2'),
}

model ListHandshakesForAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHandshakesForAccountResponseBody(name='body'),
}

async function listHandshakesForAccountWithOptions(request: ListHandshakesForAccountRequest, runtime: Util.RuntimeOptions): ListHandshakesForAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHandshakesForAccount',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHandshakesForAccount(request: ListHandshakesForAccountRequest): ListHandshakesForAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHandshakesForAccountWithOptions(request, runtime);
}

model ListHandshakesForResourceDirectoryRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10'),
}

model ListHandshakesForResourceDirectoryResponseBody = {
  handshakes?: {
    handshake?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the invitation was created. The time is displayed in UTC.', example='2018-08-10T09:55:41Z'),
      expireTime?: string(name='ExpireTime', description='The time when the invitation expires. The time is displayed in UTC.', example='2018-08-24T09:55:41Z'),
      handshakeId?: string(name='HandshakeId', description='The ID of the invitation.', example='h-ycm4rp****'),
      masterAccountId?: string(name='MasterAccountId', description='The ID of the management account of the resource directory.', example='172841235500****'),
      masterAccountName?: string(name='MasterAccountName', description='The name of the management account of the resource directory.', example='Alice'),
      modifyTime?: string(name='ModifyTime', description='The time when the invitation was modified. The time is displayed in UTC.', example='2018-08-10T09:55:41Z'),
      note?: string(name='Note', description='The description of the invitation.', example='Welcome'),
      resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-abcdef****'),
      status?: string(name='Status', description='The status of the invitation. Valid values:

*   Pending: The invitation is waiting for confirmation.
*   Accepted: The invitation is accepted.
*   Cancelled: The invitation is canceled.
*   Declined: The invitation is rejected.
*   Expired: The invitation expires.', example='Pending'),
      targetEntity?: string(name='TargetEntity', description='The ID or logon email address of the invited account.', example='someone@example.com'),
      targetType?: string(name='TargetType', description='The type of the invited account. Valid values:

*   Account: indicates the ID of the account.
*   Email: indicates the logon email address of the account.', example='Email'),
    }
  ](name='Handshake')
  }(name='Handshakes', description='The information of the invitations.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListHandshakesForResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHandshakesForResourceDirectoryResponseBody(name='body'),
}

async function listHandshakesForResourceDirectoryWithOptions(request: ListHandshakesForResourceDirectoryRequest, runtime: Util.RuntimeOptions): ListHandshakesForResourceDirectoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHandshakesForResourceDirectory',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHandshakesForResourceDirectory(request: ListHandshakesForResourceDirectoryRequest): ListHandshakesForResourceDirectoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHandshakesForResourceDirectoryWithOptions(request, runtime);
}

model ListMessageContactVerificationsRequest {
  contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListMessageContactVerificationsResponseBody = {
  contactVerifications?: [ 
    {
      contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****'),
      target?: string(name='Target', example='someone***@example.com'),
    }
  ](name='ContactVerifications'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='CD76D376-2517-4924-92C5-DBC52262F93A'),
  totalCount?: int32(name='TotalCount', example='48'),
}

model ListMessageContactVerificationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMessageContactVerificationsResponseBody(name='body'),
}

async function listMessageContactVerificationsWithOptions(request: ListMessageContactVerificationsRequest, runtime: Util.RuntimeOptions): ListMessageContactVerificationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactId)) {
    query['ContactId'] = request.contactId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMessageContactVerifications',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMessageContactVerifications(request: ListMessageContactVerificationsRequest): ListMessageContactVerificationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMessageContactVerificationsWithOptions(request, runtime);
}

model ListMessageContactsRequest {
  contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****'),
  member?: string(name='Member', example='fd-ZDNPiT****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListMessageContactsResponseBody = {
  contacts?: [ 
    {
      associatedDate?: string(name='AssociatedDate', example='2023-03-27 17:19:21'),
      contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****'),
      createDate?: string(name='CreateDate', example='2023-03-27 17:19:21'),
      emailAddress?: string(name='EmailAddress', example='someone***@example.com'),
      members?: [ string ](name='Members'),
      messageTypes?: [ string ](name='MessageTypes'),
      name?: string(name='Name', example='tom'),
      phoneNumber?: string(name='PhoneNumber', example='86-139****1234'),
      status?: string(name='Status', example='Active'),
      title?: string(name='Title', example='TechnicalDirector'),
    }
  ](name='Contacts'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='95060F1D-6990-4645-8920-A81D1BBFE992'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model ListMessageContactsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMessageContactsResponseBody(name='body'),
}

async function listMessageContactsWithOptions(request: ListMessageContactsRequest, runtime: Util.RuntimeOptions): ListMessageContactsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactId)) {
    query['ContactId'] = request.contactId;
  }
  if (!Util.isUnset(request.member)) {
    query['Member'] = request.member;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMessageContacts',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMessageContacts(request: ListMessageContactsRequest): ListMessageContactsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMessageContactsWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The token that is used to start the next query.', example='caeba0bbb2be03f84eb48b699f0a****'),
  resourceId?: [ string ](name='ResourceId', description='The Alibaba Cloud account IDs of the members. This parameter specifies a filter condition for the query.

> If you want to query the tags that are added to the members in a resource directory, you must configure both the `ResourceId` and `ResourceType` parameters and set the `ResourceType` parameter to `Account` in your request.'),
  resourceType?: string(name='ResourceType', description='The type of the objects whose tags you want to query. This parameter specifies a filter condition for the query. Valid values:

*   Account: member', example='Account'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='k1'),
      value?: string(name='Value', description='The value of the tag.', example='v1'),
    }
  ](name='Tag', description='The tags. This parameter specifies a filter condition for the query.

You can specify a maximum of 20 tags.'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='Indicates whether the next query is required.```` Valid values:

*   If the value of this parameter is empty (`"NextToken": ""`), all results are returned, and the `next query` is not required.
*   If the value of this parameter is not empty, the next query is required, and the value is the token used to start the next query.````', example='caeba0bbb2be03f84eb48b699f0a****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8054B059-6B36-53BF-AA45-B8C9A0ED05AB'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The Alibaba Cloud account ID of the member.', example='1098***'),
      resourceType?: string(name='ResourceType', description='The type of the object whose tags are queried. Valid values:

*   Account: member', example='Account'),
      tagKey?: string(name='TagKey', description='The key of the tag.', example='k1'),
      tagValue?: string(name='TagValue', description='The value of the tag.', example='k1'),
    }
  ](name='TagResources', description='The tags.'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ListTargetAttachmentsForControlPolicyRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10'),
  policyId?: string(name='PolicyId', description='The ID of the access control policy.', example='cp-jExXAqIYkwHN****'),
}

model ListTargetAttachmentsForControlPolicyResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B32BD3D6-1089-41F3-8E70-E0079BC7D760'),
  targetAttachments?: {
    targetAttachment?: [ 
    {
      attachDate?: string(name='AttachDate', description='The time when the access control policy was attached to the object.', example='2021-03-19T02:56:24Z'),
      targetId?: string(name='TargetId', description='The ID of the object.', example='fd-ZDNPiT****'),
      targetName?: string(name='TargetName', description='The name of the object.', example='Dev_Department'),
      targetType?: string(name='TargetType', description='The type of the object. Valid values:

*   Root: Root folder
*   Folder: subfolder of the Root folder
*   Account: member', example='Folder'),
    }
  ](name='TargetAttachment')
  }(name='TargetAttachments', description='The information about the objects to which the access control policy is attached.'),
  totalCount?: int32(name='TotalCount', description='The total number of objects to which the access control policy is attached.', example='1'),
}

model ListTargetAttachmentsForControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTargetAttachmentsForControlPolicyResponseBody(name='body'),
}

async function listTargetAttachmentsForControlPolicyWithOptions(request: ListTargetAttachmentsForControlPolicyRequest, runtime: Util.RuntimeOptions): ListTargetAttachmentsForControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTargetAttachmentsForControlPolicy',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTargetAttachmentsForControlPolicy(request: ListTargetAttachmentsForControlPolicyRequest): ListTargetAttachmentsForControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTargetAttachmentsForControlPolicyWithOptions(request, runtime);
}

model ListTrustedServiceStatusRequest {
  adminAccountId?: string(name='AdminAccountId', example='177242285274****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListTrustedServiceStatusResponseBody = {
  enabledServicePrincipals?: {
    enabledServicePrincipal?: [ 
    {
      enableTime?: string(name='EnableTime', example='2019-02-18T15:32:10.473Z'),
      servicePrincipal?: string(name='ServicePrincipal', example='config.aliyuncs.com'),
    }
  ](name='EnabledServicePrincipal')
  }(name='EnabledServicePrincipals'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='CD76D376-2517-4924-92C5-DBC52262F93A'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListTrustedServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTrustedServiceStatusResponseBody(name='body'),
}

/**
  * The time when the trusted service was enabled.
  *
  * @param request ListTrustedServiceStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListTrustedServiceStatusResponse
 */
async function listTrustedServiceStatusWithOptions(request: ListTrustedServiceStatusRequest, runtime: Util.RuntimeOptions): ListTrustedServiceStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.adminAccountId)) {
    query['AdminAccountId'] = request.adminAccountId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTrustedServiceStatus',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The time when the trusted service was enabled.
  *
  * @param request ListTrustedServiceStatusRequest
  * @return ListTrustedServiceStatusResponse
 */
async function listTrustedServiceStatus(request: ListTrustedServiceStatusRequest): ListTrustedServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTrustedServiceStatusWithOptions(request, runtime);
}

model MoveAccountRequest {
  accountId?: string(name='AccountId', description='The Alibaba Cloud account ID of the member that you want to move.', example='12323344****'),
  destinationFolderId?: string(name='DestinationFolderId', description='The ID of the destination folder.', example='fd-bVaRIG****'),
}

model MoveAccountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model MoveAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MoveAccountResponseBody(name='body'),
}

async function moveAccountWithOptions(request: MoveAccountRequest, runtime: Util.RuntimeOptions): MoveAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.destinationFolderId)) {
    query['DestinationFolderId'] = request.destinationFolderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MoveAccount',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function moveAccount(request: MoveAccountRequest): MoveAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveAccountWithOptions(request, runtime);
}

model RegisterDelegatedAdministratorRequest {
  accountId?: string(name='AccountId', example='181761095690****'),
  servicePrincipal?: string(name='ServicePrincipal', example='cloudfw.aliyuncs.com'),
}

model RegisterDelegatedAdministratorResponseBody = {
  requestId?: string(name='RequestId', example='0A45FC8F-54D2-4A65-8338-25E5DEBDA304'),
}

model RegisterDelegatedAdministratorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RegisterDelegatedAdministratorResponseBody(name='body'),
}

async function registerDelegatedAdministratorWithOptions(request: RegisterDelegatedAdministratorRequest, runtime: Util.RuntimeOptions): RegisterDelegatedAdministratorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.servicePrincipal)) {
    query['ServicePrincipal'] = request.servicePrincipal;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RegisterDelegatedAdministrator',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function registerDelegatedAdministrator(request: RegisterDelegatedAdministratorRequest): RegisterDelegatedAdministratorResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerDelegatedAdministratorWithOptions(request, runtime);
}

model RemoveCloudAccountRequest {
  accountId?: string(name='AccountId', description='The Alibaba Cloud account ID of the member.', example='177242285274****'),
}

model RemoveCloudAccountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model RemoveCloudAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveCloudAccountResponseBody(name='body'),
}

async function removeCloudAccountWithOptions(request: RemoveCloudAccountRequest, runtime: Util.RuntimeOptions): RemoveCloudAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveCloudAccount',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeCloudAccount(request: RemoveCloudAccountRequest): RemoveCloudAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeCloudAccountWithOptions(request, runtime);
}

model RetryChangeAccountEmailRequest {
  accountId?: string(name='AccountId', description='The Alibaba Cloud account ID of the member.', example='181761095690****'),
}

model RetryChangeAccountEmailResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model RetryChangeAccountEmailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RetryChangeAccountEmailResponseBody(name='body'),
}

async function retryChangeAccountEmailWithOptions(request: RetryChangeAccountEmailRequest, runtime: Util.RuntimeOptions): RetryChangeAccountEmailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RetryChangeAccountEmail',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function retryChangeAccountEmail(request: RetryChangeAccountEmailRequest): RetryChangeAccountEmailResponse {
  var runtime = new Util.RuntimeOptions{};
  return retryChangeAccountEmailWithOptions(request, runtime);
}

model SendEmailVerificationForMessageContactRequest {
  contactId?: string(name='ContactId', example='c-5gsZAGt***PGduDF'),
  emailAddress?: string(name='EmailAddress', example='someone***@example.com'),
}

model SendEmailVerificationForMessageContactResponseBody = {
  requestId?: string(name='RequestId', example='7B8A4E7D-6CFF-471D-84DF-195A7A241ECB'),
}

model SendEmailVerificationForMessageContactResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendEmailVerificationForMessageContactResponseBody(name='body'),
}

async function sendEmailVerificationForMessageContactWithOptions(request: SendEmailVerificationForMessageContactRequest, runtime: Util.RuntimeOptions): SendEmailVerificationForMessageContactResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactId)) {
    query['ContactId'] = request.contactId;
  }
  if (!Util.isUnset(request.emailAddress)) {
    query['EmailAddress'] = request.emailAddress;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SendEmailVerificationForMessageContact',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendEmailVerificationForMessageContact(request: SendEmailVerificationForMessageContactRequest): SendEmailVerificationForMessageContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendEmailVerificationForMessageContactWithOptions(request, runtime);
}

model SendPhoneVerificationForMessageContactRequest {
  contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****'),
  phoneNumber?: string(name='PhoneNumber', example='86-139****1234'),
}

model SendPhoneVerificationForMessageContactResponseBody = {
  requestId?: string(name='RequestId', example='CD76D376-2517-4924-92C5-DBC52262F93A'),
}

model SendPhoneVerificationForMessageContactResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendPhoneVerificationForMessageContactResponseBody(name='body'),
}

async function sendPhoneVerificationForMessageContactWithOptions(request: SendPhoneVerificationForMessageContactRequest, runtime: Util.RuntimeOptions): SendPhoneVerificationForMessageContactResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactId)) {
    query['ContactId'] = request.contactId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SendPhoneVerificationForMessageContact',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendPhoneVerificationForMessageContact(request: SendPhoneVerificationForMessageContactRequest): SendPhoneVerificationForMessageContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendPhoneVerificationForMessageContactWithOptions(request, runtime);
}

model SendVerificationCodeForBindSecureMobilePhoneRequest {
  accountId?: string(name='AccountId', description='The Alibaba Cloud account ID of the member.', example='138660628348****'),
  secureMobilePhone?: string(name='SecureMobilePhone', description='The mobile phone number that you want to bind to the member for security purposes.

Specify the mobile phone number in the \\<Country code>-\\<Mobile phone number> format.

> Mobile phone numbers in the `86-<Mobile phone number>` format in the Chinese mainland are not supported.', example='xx-13900001234'),
}

model SendVerificationCodeForBindSecureMobilePhoneResponseBody = {
  expirationDate?: string(name='ExpirationDate', description='The time when the verification code expires.', example='2021-12-17T07:38:41.747Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DCD43660-75DD-5D15-B342-1B83FCA5B913'),
}

model SendVerificationCodeForBindSecureMobilePhoneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendVerificationCodeForBindSecureMobilePhoneResponseBody(name='body'),
}

/**
  * To ensure that the system can record the operators of management operations, you must use a RAM user or RAM role to which the AliyunResourceDirectoryFullAccess policy is attached within the management account of your resource directory to call this API operation.
  *
  * @param request SendVerificationCodeForBindSecureMobilePhoneRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SendVerificationCodeForBindSecureMobilePhoneResponse
 */
async function sendVerificationCodeForBindSecureMobilePhoneWithOptions(request: SendVerificationCodeForBindSecureMobilePhoneRequest, runtime: Util.RuntimeOptions): SendVerificationCodeForBindSecureMobilePhoneResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.secureMobilePhone)) {
    query['SecureMobilePhone'] = request.secureMobilePhone;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SendVerificationCodeForBindSecureMobilePhone',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * To ensure that the system can record the operators of management operations, you must use a RAM user or RAM role to which the AliyunResourceDirectoryFullAccess policy is attached within the management account of your resource directory to call this API operation.
  *
  * @param request SendVerificationCodeForBindSecureMobilePhoneRequest
  * @return SendVerificationCodeForBindSecureMobilePhoneResponse
 */
async function sendVerificationCodeForBindSecureMobilePhone(request: SendVerificationCodeForBindSecureMobilePhoneRequest): SendVerificationCodeForBindSecureMobilePhoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendVerificationCodeForBindSecureMobilePhoneWithOptions(request, runtime);
}

model SendVerificationCodeForEnableRDRequest {
  secureMobilePhone?: string(name='SecureMobilePhone', description='The mobile phone number that is bound to the newly created account. If you leave this parameter empty, the mobile phone number that is bound to the current account is used.

Specify the mobile phone number in the `<Country code>-<Mobile phone number>` format.

> Mobile phone numbers in the `86-<Mobile phone number>` format in the Chinese mainland are not supported.', example='xx-13900001234'),
}

model SendVerificationCodeForEnableRDResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC2FE94D-A4A2-51A1-A493-5C273A36C46A'),
}

model SendVerificationCodeForEnableRDResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendVerificationCodeForEnableRDResponseBody(name='body'),
}

/**
  * Each Alibaba Cloud account can be used to send a maximum of 100 verification codes per day.
  *
  * @param request SendVerificationCodeForEnableRDRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SendVerificationCodeForEnableRDResponse
 */
async function sendVerificationCodeForEnableRDWithOptions(request: SendVerificationCodeForEnableRDRequest, runtime: Util.RuntimeOptions): SendVerificationCodeForEnableRDResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.secureMobilePhone)) {
    query['SecureMobilePhone'] = request.secureMobilePhone;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SendVerificationCodeForEnableRD',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Each Alibaba Cloud account can be used to send a maximum of 100 verification codes per day.
  *
  * @param request SendVerificationCodeForEnableRDRequest
  * @return SendVerificationCodeForEnableRDResponse
 */
async function sendVerificationCodeForEnableRD(request: SendVerificationCodeForEnableRDRequest): SendVerificationCodeForEnableRDResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendVerificationCodeForEnableRDWithOptions(request, runtime);
}

model SetMemberDeletionPermissionRequest {
  status?: string(name='Status', description='Specifies whether to enable the member deletion feature. Valid values:

*   Enabled: enables the member deletion feature.
*   Disabled: disables the member deletion feature.', example='Enabled'),
}

model SetMemberDeletionPermissionResponseBody = {
  managementAccountId?: string(name='ManagementAccountId', description='The ID of the management account of the resource directory.', example='151266687691****'),
  memberDeletionStatus?: string(name='MemberDeletionStatus', description='The status of the member deletion feature. Valid values:

*   Enabled: The feature is enabled.
*   Disabled: The feature is disabled.', example='Enabled'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C55A4CAA-9039-1DDF-91CE-FCC134513D29'),
  resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-3G****'),
}

model SetMemberDeletionPermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetMemberDeletionPermissionResponseBody(name='body'),
}

/**
  * Members of the resource account type can be deleted only after the member deletion feature is enabled.
  *
  * @param request SetMemberDeletionPermissionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetMemberDeletionPermissionResponse
 */
async function setMemberDeletionPermissionWithOptions(request: SetMemberDeletionPermissionRequest, runtime: Util.RuntimeOptions): SetMemberDeletionPermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetMemberDeletionPermission',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Members of the resource account type can be deleted only after the member deletion feature is enabled.
  *
  * @param request SetMemberDeletionPermissionRequest
  * @return SetMemberDeletionPermissionResponse
 */
async function setMemberDeletionPermission(request: SetMemberDeletionPermissionRequest): SetMemberDeletionPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return setMemberDeletionPermissionWithOptions(request, runtime);
}

model TagResourcesRequest {
  resourceId?: [ string ](name='ResourceId', description='The Alibaba Cloud account IDs of the members.

You can specify a maximum of 50 IDs.'),
  resourceType?: string(name='ResourceType', description='The type of the objects to which you want to add tags. Valid values:

*   Account: member', example='Account'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.

A tag key can be a maximum of 128 characters in length. It cannot contain `http://` or `https://` and cannot start with `acs:` or `aliyun`.', example='k1'),
      value?: string(name='Value', description='The value of the tag.

A tag value can be a maximum of 128 characters in length. It cannot contain `http://` or `https://` and cannot start with `acs:`.', example='v1'),
    }
  ](name='Tag', description='The tags.

You can specify a maximum of 20 tags.'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='E7747EDF-EDDC-5B38-9B6A-6392B9C92B1C'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to remove all tags from the specified members. Valid values:

*   false (default value)
*   true', example='false'),
  resourceId?: [ string ](name='ResourceId', description='The Alibaba Cloud account IDs of the members.

You can specify a maximum of 50 IDs.'),
  resourceType?: string(name='ResourceType', description='The type of the objects from which you want to remove tags. Valid values:

*   Account: member', example='Account'),
  tagKey?: [ string ](name='TagKey', description='The tag keys.

You can specify a maximum of 20 tag keys.

> If you set the `All` parameter to `true`, you do not need to specify tag keys.'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='E7747EDF-EDDC-5B38-9B6A-6392B9C92B1C'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateAccountRequest {
  accountId?: string(name='AccountId', example='12323344****'),
  newAccountType?: string(name='NewAccountType', example='ResourceAccount'),
  newDisplayName?: string(name='NewDisplayName', example='admin'),
}

model UpdateAccountResponseBody = {
  account?: {
    accountId?: string(name='AccountId', example='12323344****'),
    accountName?: string(name='AccountName', example='ecs-manager@aliyun.com'),
    displayName?: string(name='DisplayName', example='admin'),
    folderId?: string(name='FolderId', example='fd-bVaRIG****'),
    joinMethod?: string(name='JoinMethod', example='created'),
    joinTime?: string(name='JoinTime', example='2015-01-23T12:33:18Z'),
    modifyTime?: string(name='ModifyTime', example='2015-01-23T12:33:18Z'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-k3****'),
    status?: string(name='Status', example='CreateSuccess'),
    type?: string(name='Type', example='ResourceAccount'),
  }(name='Account'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model UpdateAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAccountResponseBody(name='body'),
}

async function updateAccountWithOptions(request: UpdateAccountRequest, runtime: Util.RuntimeOptions): UpdateAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.newAccountType)) {
    query['NewAccountType'] = request.newAccountType;
  }
  if (!Util.isUnset(request.newDisplayName)) {
    query['NewDisplayName'] = request.newDisplayName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAccount',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAccount(request: UpdateAccountRequest): UpdateAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAccountWithOptions(request, runtime);
}

model UpdateControlPolicyRequest {
  newDescription?: string(name='NewDescription', description='The new description of the access control policy.

The description must be 1 to 1,024 characters in length. The description can contain letters, digits, underscores (\\_), and hyphens (-) and must start with a letter.', example='ExampleControlPolicy'),
  newPolicyDocument?: string(name='NewPolicyDocument', description='The new document of the access control policy.

The document can be a maximum of 4,096 characters in length.

For more information about the languages of access control policies, see [Languages of access control policies](~~179096~~).

For more information about the examples of access control policies, see [Examples of custom access control policies](~~181474~~).', example='{"Version":"1","Statement":[{"Effect":"Deny","Action":["ram:UpdateRole","ram:DeleteRole","ram:AttachPolicyToRole","ram:DetachPolicyFromRole"],"Resource":"acs:ram:*:*:role/ResourceDirectoryAccountAccessRole"}]}'),
  newPolicyName?: string(name='NewPolicyName', description='The new name of the access control policy.

The name must be 1 to 128 characters in length. The name can contain letters, digits, and hyphens (-) and must start with a letter.', example='NewControlPolicy'),
  policyId?: string(name='PolicyId', description='The ID of the access control policy.', example='cp-jExXAqIYkwHN****'),
}

model UpdateControlPolicyResponseBody = {
  controlPolicy?: {
    attachmentCount?: string(name='AttachmentCount', description='The number of times that the access control policy is referenced.', example='0'),
    createDate?: string(name='CreateDate', description='The time when the access control policy was created.', example='2021-03-18T09:24:19Z'),
    description?: string(name='Description', description='The description of the access control policy.', example='ExampleControlPolicy'),
    effectScope?: string(name='EffectScope', description='The effective scope of the access control policy. Valid values:

*   All: The access control policy is in effect for Alibaba Cloud accounts, RAM users, and RAM roles.
*   RAM: The access control policy is in effect only for RAM users and RAM roles.', example='RAM'),
    policyId?: string(name='PolicyId', description='The ID of the access control policy.', example='cp-jExXAqIYkwHN****'),
    policyName?: string(name='PolicyName', description='The name of the access control policy.', example='NewControlPolicy'),
    policyType?: string(name='PolicyType', description='The type of the access control policy. Valid values:

*   System: system access control policy
*   Custom: custom access control policy', example='Custom'),
    updateDate?: string(name='UpdateDate', description='The time when the access control policy was updated.', example='2021-03-18T10:04:55Z'),
  }(name='ControlPolicy', description='The details of the access control policy.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2DFCE4C9-04A9-4C83-BB14-FE791275EC53'),
}

model UpdateControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateControlPolicyResponseBody(name='body'),
}

async function updateControlPolicyWithOptions(request: UpdateControlPolicyRequest, runtime: Util.RuntimeOptions): UpdateControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.newDescription)) {
    query['NewDescription'] = request.newDescription;
  }
  if (!Util.isUnset(request.newPolicyDocument)) {
    query['NewPolicyDocument'] = request.newPolicyDocument;
  }
  if (!Util.isUnset(request.newPolicyName)) {
    query['NewPolicyName'] = request.newPolicyName;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateControlPolicy',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateControlPolicy(request: UpdateControlPolicyRequest): UpdateControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateControlPolicyWithOptions(request, runtime);
}

model UpdateFolderRequest {
  folderId?: string(name='FolderId', description='The ID of the folder.', example='fd-u8B321****'),
  newFolderName?: string(name='NewFolderName', description='The new name of the folder.

The name must be 1 to 24 characters in length and can contain letters, digits, underscores (\\_), periods (.), and hyphens (-).', example='rdFolder'),
}

model UpdateFolderResponseBody = {
  folder?: {
    createTime?: string(name='CreateTime', description='The time when the folder was created.', example='2019-02-19T09:34:50.757Z'),
    folderId?: string(name='FolderId', description='The ID of the folder.', example='fd-u8B321****'),
    folderName?: string(name='FolderName', description='The name of the folder.', example='rdFolder'),
    parentFolderId?: string(name='ParentFolderId', description='The ID of the parent folder.', example='r-b1****'),
  }(name='Folder', description='The information about the folder.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C2CBCA30-C8DD-423E-B4AD-4FB694C9180C'),
}

model UpdateFolderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFolderResponseBody(name='body'),
}

async function updateFolderWithOptions(request: UpdateFolderRequest, runtime: Util.RuntimeOptions): UpdateFolderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.folderId)) {
    query['FolderId'] = request.folderId;
  }
  if (!Util.isUnset(request.newFolderName)) {
    query['NewFolderName'] = request.newFolderName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFolder',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateFolder(request: UpdateFolderRequest): UpdateFolderResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFolderWithOptions(request, runtime);
}

model UpdateMessageContactRequest {
  contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****'),
  emailAddress?: string(name='EmailAddress', example='someone***@example.com'),
  messageTypes?: [ string ](name='MessageTypes'),
  name?: string(name='Name', example='tom'),
  phoneNumber?: string(name='PhoneNumber', example='86-139****1234'),
  title?: string(name='Title', example='TechnicalDirector'),
}

model UpdateMessageContactResponseBody = {
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model UpdateMessageContactResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMessageContactResponseBody(name='body'),
}

async function updateMessageContactWithOptions(request: UpdateMessageContactRequest, runtime: Util.RuntimeOptions): UpdateMessageContactResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactId)) {
    query['ContactId'] = request.contactId;
  }
  if (!Util.isUnset(request.emailAddress)) {
    query['EmailAddress'] = request.emailAddress;
  }
  if (!Util.isUnset(request.messageTypes)) {
    query['MessageTypes'] = request.messageTypes;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMessageContact',
    version = '2022-04-19',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMessageContact(request: UpdateMessageContactRequest): UpdateMessageContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMessageContactWithOptions(request, runtime);
}

