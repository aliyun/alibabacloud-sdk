/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ResourceDirectoryMaster';
  @version = '2022-04-19';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AcceptHandshakeRequest {
  handshakeId: string(name='HandshakeId', example='h-Ih8IuPfvV0t0****', position='Query'),
}

model AcceptHandshakeResponseBody = {
  handshake?: {
    createTime?: string(name='CreateTime', example='2021-01-06T02:15:40Z'),
    expireTime?: string(name='ExpireTime', example='2021-01-20T02:15:40Z'),
    handshakeId?: string(name='HandshakeId', example='h-Ih8IuPfvV0t0****'),
    masterAccountId?: string(name='MasterAccountId', example='151266687691****'),
    masterAccountName?: string(name='MasterAccountName', example='CompanyA'),
    modifyTime?: string(name='ModifyTime', example='2021-01-06T02:16:40Z'),
    note?: string(name='Note'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-3G****'),
    status?: string(name='Status', example='Accepted'),
    targetEntity?: string(name='TargetEntity', example='177242285274****'),
    targetType?: string(name='TargetType', example='Account'),
  }(name='Handshake'),
  requestId?: string(name='RequestId', example='5828C836-3286-49A6-9006-15231BB19342'),
}

model AcceptHandshakeResponse = {
  headers: map[string]string(name='headers'),
  body: AcceptHandshakeResponseBody(name='body'),
}

async function acceptHandshake(request: AcceptHandshakeRequest): AcceptHandshakeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AcceptHandshake', 'POST', '/', 'json', false, 'json', request);
}

model AddMessageContactRequest {
  emailAddress?: string(name='EmailAddress', example='someone***@example.com', position='Query'),
  messageTypes?: [ string ](name='MessageTypes', position='Query'),
  name?: string(name='Name', example='tom', position='Query'),
  phoneNumber?: string(name='PhoneNumber', example='86-139****1234', position='Query'),
  title?: string(name='Title', example='TechnicalDirector', position='Query'),
}

model AddMessageContactResponseBody = {
  contact?: {
    contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****'),
    createDate?: string(name='CreateDate', example='2023-03-27 17:19:21'),
  }(name='Contact'),
  requestId?: string(name='RequestId', description='Id of the request', example='2DFCE4C9-04A9-4C83-BB14-FE791275EC53'),
}

model AddMessageContactResponse = {
  headers: map[string]string(name='headers'),
  body: AddMessageContactResponseBody(name='body'),
}

async function addMessageContact(request: AddMessageContactRequest): AddMessageContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddMessageContact', 'POST', '/', 'json', false, 'json', request);
}

model AssociateMembersRequest {
  contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****', position='Query'),
  members?: [ string ](name='Members', position='Query'),
}

model AssociateMembersResponseBody = {
  members?: [ 
    {
      contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****'),
      memberId?: string(name='MemberId', example='fd-ZDNPiT****'),
      modifyDate?: string(name='ModifyDate', example='2023-03-27 17:19:21'),
    }
  ](name='Members'),
  requestId?: string(name='RequestId', description='Id of the request', example='95060F1D-6990-4645-8920-A81D1BBFE992'),
}

model AssociateMembersResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateMembersResponseBody(name='body'),
}

async function associateMembers(request: AssociateMembersRequest): AssociateMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateMembers', 'POST', '/', 'json', false, 'json', request);
}

model AttachControlPolicyRequest {
  policyId: string(name='PolicyId', example='cp-jExXAqIYkwHN****', position='Query'),
  targetId: string(name='TargetId', example='fd-ZDNPiT****', position='Query'),
}

model AttachControlPolicyResponseBody = {
  requestId?: string(name='RequestId', example='95060F1D-6990-4645-8920-A81D1BBFE992'),
}

model AttachControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: AttachControlPolicyResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
 */
async function attachControlPolicy(request: AttachControlPolicyRequest): AttachControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model BindSecureMobilePhoneRequest {
  accountId: string(name='AccountId', example='138660628348****', position='Query'),
  secureMobilePhone: string(name='SecureMobilePhone', example='xx-13900001234', position='Query'),
  verificationCode: string(name='VerificationCode', example='123456', position='Query'),
}

model BindSecureMobilePhoneResponseBody = {
  requestId?: string(name='RequestId', example='0217AFEB-5318-56D4-B167-1933D83EDF3F'),
}

model BindSecureMobilePhoneResponse = {
  headers: map[string]string(name='headers'),
  body: BindSecureMobilePhoneResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
 */
async function bindSecureMobilePhone(request: BindSecureMobilePhoneRequest): BindSecureMobilePhoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindSecureMobilePhone', 'POST', '/', 'json', false, 'json', request);
}

model CancelChangeAccountEmailRequest {
  accountId: string(name='AccountId', example='181761095690****', position='Query'),
}

model CancelChangeAccountEmailResponseBody = {
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model CancelChangeAccountEmailResponse = {
  headers: map[string]string(name='headers'),
  body: CancelChangeAccountEmailResponseBody(name='body'),
}

async function cancelChangeAccountEmail(request: CancelChangeAccountEmailRequest): CancelChangeAccountEmailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelChangeAccountEmail', 'POST', '/', 'json', false, 'json', request);
}

model CancelHandshakeRequest {
  handshakeId: string(name='HandshakeId', example='h-ycm4rp****', position='Query'),
}

model CancelHandshakeResponseBody = {
  handshake?: {
    createTime?: string(name='CreateTime', example='2018-08-10T09:55:41Z'),
    expireTime?: string(name='ExpireTime', example='2018-08-24T09:55:41Z'),
    handshakeId?: string(name='HandshakeId', example='h-ycm4rp****'),
    masterAccountId?: string(name='MasterAccountId', example='172841235500****'),
    masterAccountName?: string(name='MasterAccountName', example='Alice'),
    modifyTime?: string(name='ModifyTime', example='2018-08-10T09:55:41Z'),
    note?: string(name='Note'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='h-ycm4rp****'),
    status?: string(name='Status', example='Cancelled'),
    targetEntity?: string(name='TargetEntity', example='someone@example.com'),
    targetType?: string(name='TargetType', example='Email'),
  }(name='Handshake'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model CancelHandshakeResponse = {
  headers: map[string]string(name='headers'),
  body: CancelHandshakeResponseBody(name='body'),
}

async function cancelHandshake(request: CancelHandshakeRequest): CancelHandshakeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelHandshake', 'POST', '/', 'json', false, 'json', request);
}

model CancelMessageContactUpdateRequest {
  contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****', position='Query'),
  emailAddress?: string(name='EmailAddress', example='someone***@example.com', position='Query'),
  phoneNumber?: string(name='PhoneNumber', example='86-139****1234', position='Query'),
}

model CancelMessageContactUpdateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model CancelMessageContactUpdateResponse = {
  headers: map[string]string(name='headers'),
  body: CancelMessageContactUpdateResponseBody(name='body'),
}

async function cancelMessageContactUpdate(request: CancelMessageContactUpdateRequest): CancelMessageContactUpdateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelMessageContactUpdate', 'POST', '/', 'json', false, 'json', request);
}

model ChangeAccountEmailRequest {
  accountId: string(name='AccountId', example='181761095690****', position='Query'),
  email: string(name='Email', example='someone@example.com', position='Query'),
}

model ChangeAccountEmailResponseBody = {
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model ChangeAccountEmailResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeAccountEmailResponseBody(name='body'),
}

async function changeAccountEmail(request: ChangeAccountEmailRequest): ChangeAccountEmailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeAccountEmail', 'POST', '/', 'json', false, 'json', request);
}

model CheckAccountDeleteRequest {
  accountId: string(name='AccountId', example='179855839641****', position='Query'),
}

model CheckAccountDeleteResponseBody = {
  requestId?: string(name='RequestId', example='7CDDDCEF-CDFD-0825-B7D7-217BE0897B22'),
}

model CheckAccountDeleteResponse = {
  headers: map[string]string(name='headers'),
  body: CheckAccountDeleteResponseBody(name='body'),
}

/**
  * The returned result.
  *
 */
async function checkAccountDelete(request: CheckAccountDeleteRequest): CheckAccountDeleteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckAccountDelete', 'POST', '/', 'json', false, 'json', request);
}

model CreateControlPolicyRequest {
  description?: string(name='Description', example='ExampleControlPolicy', position='Query'),
  effectScope: string(name='EffectScope', example='RAM', position='Query'),
  policyDocument: string(name='PolicyDocument', example='{"Version":"1","Statement":[{"Effect":"Deny","Action":["ram:UpdateRole","ram:DeleteRole","ram:AttachPolicyToRole","ram:DetachPolicyFromRole"],"Resource":"acs:ram:*:*:role/ResourceDirectoryAccountAccessRole"}]}', position='Query'),
  policyName: string(name='PolicyName', example='ExampleControlPolicy', position='Query'),
}

model CreateControlPolicyResponseBody = {
  controlPolicy?: {
    attachmentCount?: string(name='AttachmentCount', example='0'),
    createDate?: string(name='CreateDate', example='2021-03-18T09:24:19Z'),
    description?: string(name='Description', example='ExampleControlPolicy'),
    effectScope?: string(name='EffectScope', example='RAM'),
    policyId?: string(name='PolicyId', example='cp-jExXAqIYkwHN****'),
    policyName?: string(name='PolicyName', example='ExampleControlPolicy'),
    policyType?: string(name='PolicyType', example='Custom'),
    updateDate?: string(name='UpdateDate', example='2021-03-18T09:24:19Z'),
  }(name='ControlPolicy'),
  requestId?: string(name='RequestId', example='776B05B3-A0B0-464B-A191-F4E1119A94B2'),
}

model CreateControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateControlPolicyResponseBody(name='body'),
}

async function createControlPolicy(request: CreateControlPolicyRequest): CreateControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateFolderRequest {
  folderName: string(name='FolderName', example='rdFolder', position='Query'),
  parentFolderId?: string(name='ParentFolderId', example='r-b1****', position='Query'),
}

model CreateFolderResponseBody = {
  folder?: {
    createTime?: string(name='CreateTime', example='2019-02-19T09:34:50.757Z'),
    folderId?: string(name='FolderId', example='fd-u8B321****'),
    folderName?: string(name='FolderName', example='rdFolder'),
    parentFolderId?: string(name='ParentFolderId', example='r-b1****'),
  }(name='Folder'),
  requestId?: string(name='RequestId', example='C2CBCA30-C8DD-423E-B4AD-4FB694C9180C'),
}

model CreateFolderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFolderResponseBody(name='body'),
}

/**
  * The name of the folder.
  *
 */
async function createFolder(request: CreateFolderRequest): CreateFolderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFolder', 'POST', '/', 'json', false, 'json', request);
}

model CreateResourceAccountRequest {
  accountNamePrefix?: string(name='AccountNamePrefix', example='alice', position='Query'),
  displayName: string(name='DisplayName', example='Dev', position='Query'),
  parentFolderId?: string(name='ParentFolderId', example='fd-r23M55****', position='Query'),
  payerAccountId?: string(name='PayerAccountId', example='12323344****', position='Query'),
  resellAccountType?: string(name='ResellAccountType', example='resell', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='k1'),
      value?: string(name='Value', example='v1'),
    }
  ](name='Tag', position='Query'),
}

model CreateResourceAccountResponseBody = {
  account?: {
    accountId?: string(name='AccountId', example='112730938585****'),
    accountName?: string(name='AccountName', example='alice@rd-3g****.aliyunid.com'),
    displayName?: string(name='DisplayName', example='Dev'),
    folderId?: string(name='FolderId', example='fd-r23M55****'),
    joinMethod?: string(name='JoinMethod', example='created'),
    joinTime?: string(name='JoinTime', example='2020-12-31T03:37:39.456Z'),
    modifyTime?: string(name='ModifyTime', example='2020-12-31T03:37:39.456Z'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-3G****'),
    status?: string(name='Status', example='CreateSuccess'),
    type?: string(name='Type', example='ResourceAccount'),
  }(name='Account'),
  requestId?: string(name='RequestId', example='B356A415-D860-43E5-865A-E2193D62BBD6'),
}

model CreateResourceAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResourceAccountResponseBody(name='body'),
}

/**
  * The Alibaba Cloud account name of the member.
  *
 */
async function createResourceAccount(request: CreateResourceAccountRequest): CreateResourceAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateResourceAccount', 'POST', '/', 'json', false, 'json', request);
}

model DeclineHandshakeRequest {
  handshakeId: string(name='HandshakeId', example='h-ycm4rp****', position='Query'),
}

model DeclineHandshakeResponseBody = {
  handshake?: {
    createTime?: string(name='CreateTime', example='2018-08-10T09:55:41Z'),
    expireTime?: string(name='ExpireTime', example='2018-08-10T09:55:41Z'),
    handshakeId?: string(name='HandshakeId', example='h-ycm4rp****'),
    masterAccountId?: string(name='MasterAccountId', example='172841235500****'),
    masterAccountName?: string(name='MasterAccountName', example='Alice'),
    modifyTime?: string(name='ModifyTime', example='2018-08-10T09:55:41Z'),
    note?: string(name='Note'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-abcdef****'),
    status?: string(name='Status', example='Declined'),
    targetEntity?: string(name='TargetEntity', example='someone@example.com'),
    targetType?: string(name='TargetType', example='Email'),
  }(name='Handshake'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model DeclineHandshakeResponse = {
  headers: map[string]string(name='headers'),
  body: DeclineHandshakeResponseBody(name='body'),
}

async function declineHandshake(request: DeclineHandshakeRequest): DeclineHandshakeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeclineHandshake', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAccountRequest {
  abandonableCheckId?: [ string ](name='AbandonableCheckId', shrink='json', position='Query'),
  accountId: string(name='AccountId', example='169946124551****', position='Query'),
}

model DeleteAccountResponseBody = {
  deletionType?: string(name='DeletionType', example='0'),
  requestId?: string(name='RequestId', example='009429F8-C1C0-5872-B674-A6C2333B9647'),
}

model DeleteAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAccountResponseBody(name='body'),
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAccount', 'POST', '/', 'json', false, 'json', request);
}

model DeleteControlPolicyRequest {
  policyId: string(name='PolicyId', example='cp-SImPt8GCEwiq****', position='Query'),
}

model DeleteControlPolicyResponseBody = {
  requestId?: string(name='RequestId', example='C8541E06-B207-46BF-92C9-DC8DE4609D75'),
}

model DeleteControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteControlPolicyResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
 */
async function deleteControlPolicy(request: DeleteControlPolicyRequest): DeleteControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFolderRequest {
  folderId: string(name='FolderId', example='fd-ae1in7****', position='Query'),
}

model DeleteFolderResponseBody = {
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model DeleteFolderResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFolderResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
 */
async function deleteFolder(request: DeleteFolderRequest): DeleteFolderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFolder', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMessageContactRequest {
  contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****', position='Query'),
  retainContactInMembers?: boolean(name='RetainContactInMembers', example='true', position='Query'),
}

model DeleteMessageContactResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
  status?: string(name='Status', example='Deleting'),
}

model DeleteMessageContactResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMessageContactResponseBody(name='body'),
}

async function deleteMessageContact(request: DeleteMessageContactRequest): DeleteMessageContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMessageContact', 'POST', '/', 'json', false, 'json', request);
}

model DeregisterDelegatedAdministratorRequest {
  accountId: string(name='AccountId', example='181761095690****', position='Query'),
  servicePrincipal: string(name='ServicePrincipal', example='cloudfw.aliyuncs.com', position='Query'),
}

model DeregisterDelegatedAdministratorResponseBody = {
  requestId?: string(name='RequestId', example='DF5D5C52-7BD0-40E7-94C6-23A1505038A2'),
}

model DeregisterDelegatedAdministratorResponse = {
  headers: map[string]string(name='headers'),
  body: DeregisterDelegatedAdministratorResponseBody(name='body'),
}

async function deregisterDelegatedAdministrator(request: DeregisterDelegatedAdministratorRequest): DeregisterDelegatedAdministratorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeregisterDelegatedAdministrator', 'POST', '/', 'json', false, 'json', request);
}

model DestroyResourceDirectoryRequest {
}

model DestroyResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model DestroyResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: DestroyResourceDirectoryResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
 */
async function destroyResourceDirectory(request: DestroyResourceDirectoryRequest): DestroyResourceDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DestroyResourceDirectory', 'POST', '/', 'json', false, 'json', request);
}

model DetachControlPolicyRequest {
  policyId: string(name='PolicyId', example='cp-jExXAqIYkwHN****', position='Query'),
  targetId: string(name='TargetId', example='fd-ZDNPiT****', position='Query'),
}

model DetachControlPolicyResponseBody = {
  requestId?: string(name='RequestId', example='9EA4F962-1A2E-4AFE-BE0C-B14736FC46CC'),
}

model DetachControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DetachControlPolicyResponseBody(name='body'),
}

async function detachControlPolicy(request: DetachControlPolicyRequest): DetachControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DisableControlPolicyRequest {
}

model DisableControlPolicyResponseBody = {
  enablementStatus?: string(name='EnablementStatus', example='PendingDisable'),
  requestId?: string(name='RequestId', example='7C709979-451D-4C92-835D-7DDCCAA562E9'),
}

model DisableControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DisableControlPolicyResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
 */
async function disableControlPolicy(request: DisableControlPolicyRequest): DisableControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DisassociateMembersRequest {
  contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****', position='Query'),
  members?: [ string ](name='Members', position='Query'),
}

model DisassociateMembersResponseBody = {
  members?: [ 
    {
      contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****'),
      memberId?: string(name='MemberId', example='fd-ZDNPiT****'),
      modifyDate?: string(name='ModifyDate', example='2023-03-27 17:19:21'),
    }
  ](name='Members'),
  requestId?: string(name='RequestId', description='Id of the request', example='95060F1D-6990-4645-8920-A81D1BBFE992'),
}

model DisassociateMembersResponse = {
  headers: map[string]string(name='headers'),
  body: DisassociateMembersResponseBody(name='body'),
}

async function disassociateMembers(request: DisassociateMembersRequest): DisassociateMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisassociateMembers', 'POST', '/', 'json', false, 'json', request);
}

model EnableControlPolicyRequest {
}

model EnableControlPolicyResponseBody = {
  enablementStatus?: string(name='EnablementStatus', example='PendingEnable'),
  requestId?: string(name='RequestId', example='8CE7BD95-EFFA-4911-A1E0-BD4412697FEB'),
}

model EnableControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: EnableControlPolicyResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
 */
async function enableControlPolicy(request: EnableControlPolicyRequest): EnableControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model EnableResourceDirectoryRequest {
  enableMode: string(name='EnableMode', example='CurrentAccount', position='Query'),
  MAName?: string(name='MAName', example='user01@rdadmin.aliyunid.com', position='Query'),
  MASecureMobilePhone?: string(name='MASecureMobilePhone', example='xx-13900001234', position='Query'),
  verificationCode?: string(name='VerificationCode', example='123456', position='Query'),
}

model EnableResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId', example='EC2FE94D-A4A2-51A1-A493-5C273A36C46A'),
  resourceDirectory?: {
    createTime?: string(name='CreateTime', example='2021-12-08T02:15:31.744Z'),
    masterAccountId?: string(name='MasterAccountId', example='507408460615****'),
    masterAccountName?: string(name='MasterAccountName', example='alice@example.com'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-54****'),
    rootFolderId?: string(name='RootFolderId', example='r-G9****'),
  }(name='ResourceDirectory'),
}

model EnableResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: EnableResourceDirectoryResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
 */
async function enableResourceDirectory(request: EnableResourceDirectoryRequest): EnableResourceDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableResourceDirectory', 'POST', '/', 'json', false, 'json', request);
}

model GetAccountRequest {
  accountId: string(name='AccountId', example='181761095690****', position='Query'),
  includeTags?: boolean(name='IncludeTags', example='true', position='Query'),
}

model GetAccountResponseBody = {
  account?: {
    accountId?: string(name='AccountId', example='181761095690****'),
    accountName?: string(name='AccountName', example='someone@example.com'),
    displayName?: string(name='DisplayName', example='admin'),
    emailStatus?: string(name='EmailStatus', example='WAIT_MODIFY'),
    folderId?: string(name='FolderId', example='fd-bVaRIG****'),
    identityInformation?: string(name='IdentityInformation', example='aliyun-admin'),
    joinMethod?: string(name='JoinMethod', example='created'),
    joinTime?: string(name='JoinTime', example='2015-01-23T12:33:18Z'),
    location?: string(name='Location', example='root/AlRd****/Z5Aa****'),
    modifyTime?: string(name='ModifyTime', example='2015-01-23T12:33:18Z'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-k3****'),
    resourceDirectoryPath?: string(name='ResourceDirectoryPath', example='rd-k3****/r-Wm****/fd-bVaRIG****/181761095690****'),
    status?: string(name='Status', example='CreateSuccess'),
    tags?: [ 
      {
        key?: string(name='Key', example='tag_key'),
        value?: string(name='Value', example='tag_value'),
      }
    ](name='Tags'),
    type?: string(name='Type', example='ResourceAccount'),
  }(name='Account'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model GetAccountResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccountResponseBody(name='body'),
}

async function getAccount(request: GetAccountRequest): GetAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccount', 'POST', '/', 'json', false, 'json', request);
}

model GetAccountDeletionCheckResultRequest {
  accountId: string(name='AccountId', example='179855839641****', position='Query'),
}

model GetAccountDeletionCheckResultResponseBody = {
  accountDeletionCheckResultInfo?: {
    abandonableChecks?: [ 
      {
        checkId?: string(name='CheckId', example='NON_SP_cs'),
        checkName?: string(name='CheckName'),
        description?: string(name='Description'),
      }
    ](name='AbandonableChecks'),
    allowDelete?: string(name='AllowDelete', example='false'),
    notAllowReason?: [ 
      {
        checkId?: string(name='CheckId', example='NON_SP_efc'),
        checkName?: string(name='CheckName', example='Enterprise finance'),
        description?: string(name='Description', example='This account is an Enterprise Finance associated account. Please remove the financial association of this account before deleting it.'),
      }
    ](name='NotAllowReason'),
    status?: string(name='Status', example='PreCheckComplete'),
  }(name='AccountDeletionCheckResultInfo'),
  requestId?: string(name='RequestId', example='54AC391D-4F7F-5F08-B8D3-0AECDE6EC5BD'),
}

model GetAccountDeletionCheckResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccountDeletionCheckResultResponseBody(name='body'),
}

/**
  * Container Service for Kubernetes
  *
 */
async function getAccountDeletionCheckResult(request: GetAccountDeletionCheckResultRequest): GetAccountDeletionCheckResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccountDeletionCheckResult', 'POST', '/', 'json', false, 'json', request);
}

model GetAccountDeletionStatusRequest {
  accountId: string(name='AccountId', example='169946124551****', position='Query'),
}

model GetAccountDeletionStatusResponseBody = {
  rdAccountDeletionStatus?: {
    accountId?: string(name='AccountId', example='169946124551****'),
    createTime?: string(name='CreateTime', example='2022-08-23T17:05:30+08:00'),
    deletionTime: string(name='DeletionTime', example='2022-08-23T17:06:01+08:00'),
    deletionType?: string(name='DeletionType', example='0'),
    failReasonList?: [ 
      {
        description?: string(name='Description', example='This account has a payer account. Please release the financial relationship of this account first.'),
        name?: string(name='Name', example='Others'),
      }
    ](name='FailReasonList'),
    status?: string(name='Status', example='Success'),
  }(name='RdAccountDeletionStatus'),
  requestId?: string(name='RequestId', example='8AA43293-7C8F-5730-8F2D-7F864EC092C5'),
}

model GetAccountDeletionStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccountDeletionStatusResponseBody(name='body'),
}

async function getAccountDeletionStatus(request: GetAccountDeletionStatusRequest): GetAccountDeletionStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccountDeletionStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetControlPolicyRequest {
  language?: string(name='Language', example='zh-CN', position='Query'),
  policyId: string(name='PolicyId', example='cp-SImPt8GCEwiq****', position='Query'),
}

model GetControlPolicyResponseBody = {
  controlPolicy?: {
    attachmentCount?: string(name='AttachmentCount', example='0'),
    createDate?: string(name='CreateDate', example='2021-03-18T08:51:33Z'),
    description?: string(name='Description', example='ExampleControlPolicy'),
    effectScope?: string(name='EffectScope', example='RAM'),
    policyDocument?: string(name='PolicyDocument', example='{\\"Version\\":\\"1\\",\\"Statement\\":[{\\"Effect\\":\\"Deny\\",\\"Action\\":[\\"ram:UpdateRole\\",\\"ram:DeleteRole\\",\\"ram:AttachPolicyToRole\\",\\"ram:DetachPolicyFromRole\\"],\\"Resource\\":\\"acs:ram:*:*:role/ResourceDirectoryAccountAccessRole\\"}]}'),
    policyId?: string(name='PolicyId', example='cp-SImPt8GCEwiq****'),
    policyName?: string(name='PolicyName', example='test'),
    policyType?: string(name='PolicyType', example='Custom'),
    updateDate?: string(name='UpdateDate', example='2021-03-18T08:51:33Z'),
  }(name='ControlPolicy'),
  requestId?: string(name='RequestId', example='AB769936-CDFA-4D52-8CE2-A3581800044A'),
}

model GetControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: GetControlPolicyResponseBody(name='body'),
}

async function getControlPolicy(request: GetControlPolicyRequest): GetControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetControlPolicyEnablementStatusRequest {
}

model GetControlPolicyEnablementStatusResponseBody = {
  enablementStatus?: string(name='EnablementStatus', example='Disabled'),
  requestId?: string(name='RequestId', example='1DC39A4E-3B52-4EFE-9F93-4897D7FFA0C4'),
}

model GetControlPolicyEnablementStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetControlPolicyEnablementStatusResponseBody(name='body'),
}

async function getControlPolicyEnablementStatus(request: GetControlPolicyEnablementStatusRequest): GetControlPolicyEnablementStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetControlPolicyEnablementStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetFolderRequest {
  folderId: string(name='FolderId', example='fd-Jyl5U7****', position='Query'),
}

model GetFolderResponseBody = {
  folder?: {
    createTime?: string(name='CreateTime', example='2021-06-15T06:39:08.521Z'),
    folderId?: string(name='FolderId', example='fd-Jyl5U7****'),
    folderName?: string(name='FolderName', example='Applications'),
    parentFolderId?: string(name='ParentFolderId', example='r-Wm****'),
    resourceDirectoryPath?: string(name='ResourceDirectoryPath', example='rd-3G****/r-Wm****/fd-Jyl5U7****'),
  }(name='Folder'),
  requestId?: string(name='RequestId', example='C2CBCA30-C8DD-423E-B4AD-4FB694C9180C'),
}

model GetFolderResponse = {
  headers: map[string]string(name='headers'),
  body: GetFolderResponseBody(name='body'),
}

async function getFolder(request: GetFolderRequest): GetFolderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFolder', 'POST', '/', 'json', false, 'json', request);
}

model GetHandshakeRequest {
  handshakeId: string(name='HandshakeId', example='h-ycm4rp****', position='Query'),
}

model GetHandshakeResponseBody = {
  handshake?: {
    createTime?: string(name='CreateTime', example='2018-08-10T09:55:41Z'),
    expireTime?: string(name='ExpireTime', example='2018-08-24T09:55:41Z'),
    handshakeId?: string(name='HandshakeId', example='h-ycm4rp****'),
    invitedAccountRealName?: string(name='InvitedAccountRealName', example='Alice'),
    masterAccountId?: string(name='MasterAccountId', example='172841235500****'),
    masterAccountName?: string(name='MasterAccountName', example='company@example.com'),
    masterAccountRealName?: string(name='MasterAccountRealName', example='company'),
    modifyTime?: string(name='ModifyTime', example='2018-08-10T09:55:41Z'),
    note?: string(name='Note'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-abcdef****'),
    status?: string(name='Status', example='Pending'),
    targetEntity?: string(name='TargetEntity', example='someone@example.com'),
    targetType?: string(name='TargetType', example='Email'),
  }(name='Handshake'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model GetHandshakeResponse = {
  headers: map[string]string(name='headers'),
  body: GetHandshakeResponseBody(name='body'),
}

async function getHandshake(request: GetHandshakeRequest): GetHandshakeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHandshake', 'POST', '/', 'json', false, 'json', request);
}

model GetMessageContactRequest {
  contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****', position='Query'),
}

model GetMessageContactResponseBody = {
  contact?: {
    contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****'),
    createDate?: string(name='CreateDate', example='2023-03-27 17:19:21'),
    emailAddress?: string(name='EmailAddress', example='someone***@example.com'),
    members?: [ string ](name='Members'),
    messageTypes?: [ string ](name='MessageTypes'),
    name?: string(name='Name', example='tom'),
    phoneNumber?: string(name='PhoneNumber', example='86-139****1234'),
    status?: string(name='Status', example='Active'),
    title?: string(name='Title', example='TechnicalDirector'),
  }(name='Contact'),
  requestId?: string(name='RequestId', description='Id of the request', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model GetMessageContactResponse = {
  headers: map[string]string(name='headers'),
  body: GetMessageContactResponseBody(name='body'),
}

async function getMessageContact(request: GetMessageContactRequest): GetMessageContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMessageContact', 'POST', '/', 'json', false, 'json', request);
}

model GetMessageContactDeletionStatusRequest {
  contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****', position='Query'),
}

model GetMessageContactDeletionStatusResponseBody = {
  contactDeletionStatus?: {
    contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****'),
    failReasonList?: [ 
      {
        accountId?: string(name='AccountId', example='199796839435****'),
        messageTypes?: [ string ](name='MessageTypes'),
      }
    ](name='FailReasonList'),
    status?: string(name='Status', example='Deleting'),
  }(name='ContactDeletionStatus'),
  requestId?: string(name='RequestId', description='Id of the request', example='95060F1D-6990-4645-8920-A81D1BBFE992'),
}

model GetMessageContactDeletionStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetMessageContactDeletionStatusResponseBody(name='body'),
}

async function getMessageContactDeletionStatus(request: GetMessageContactDeletionStatusRequest): GetMessageContactDeletionStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMessageContactDeletionStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetPayerForAccountRequest {
  accountId: string(name='AccountId', description='The ID of the billing account.', example='12323344****', position='Query'),
}

model GetPayerForAccountResponseBody = {
  payerAccountId?: string(name='PayerAccountId', description='The ID of the billing account.', example='172841235500****'),
  payerAccountName?: string(name='PayerAccountName', description='The name of the billing account.', example='Alice'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model GetPayerForAccountResponse = {
  headers: map[string]string(name='headers'),
  body: GetPayerForAccountResponseBody(name='body'),
}

async function getPayerForAccount(request: GetPayerForAccountRequest): GetPayerForAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPayerForAccount', 'POST', '/', 'json', false, 'json', request);
}

model GetResourceDirectoryRequest {
}

model GetResourceDirectoryResponseBody = {
  requestId?: string(name='RequestId', example='CD76D376-2517-4924-92C5-DBC52262F93A'),
  resourceDirectory?: {
    controlPolicyStatus?: string(name='ControlPolicyStatus', example='Enabled'),
    createTime?: string(name='CreateTime', example='2019-02-18T15:32:10.473Z'),
    identityInformation?: string(name='IdentityInformation'),
    masterAccountId?: string(name='MasterAccountId', example='172845045600****'),
    masterAccountName?: string(name='MasterAccountName', example='aliyun-admin'),
    memberDeletionStatus?: string(name='MemberDeletionStatus', example='Enabled'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-St****'),
    rootFolderId?: string(name='RootFolderId', example='r-Zo****'),
  }(name='ResourceDirectory'),
}

model GetResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourceDirectoryResponseBody(name='body'),
}

async function getResourceDirectory(request: GetResourceDirectoryRequest): GetResourceDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourceDirectory', 'POST', '/', 'json', false, 'json', request);
}

model InviteAccountToResourceDirectoryRequest {
  note?: string(name='Note', position='Query'),
  parentFolderId?: string(name='ParentFolderId', example='r-b1****', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='k1'),
      value?: string(name='Value', example='v1'),
    }
  ](name='Tag', position='Query'),
  targetEntity: string(name='TargetEntity', example='someone@example.com', position='Query'),
  targetType: string(name='TargetType', example='Email', position='Query'),
}

model InviteAccountToResourceDirectoryResponseBody = {
  handshake?: {
    createTime?: string(name='CreateTime', example='2018-08-10T09:55:41Z'),
    expireTime?: string(name='ExpireTime', example='2018-08-24T09:55:41Z'),
    handshakeId?: string(name='HandshakeId', example='h-ycm4rp****'),
    masterAccountId?: string(name='MasterAccountId', example='172841235500****'),
    masterAccountName?: string(name='MasterAccountName', example='Alice'),
    modifyTime?: string(name='ModifyTime', example='2018-08-10T09:55:41Z'),
    note?: string(name='Note'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-abcdef****'),
    status?: string(name='Status', example='Pending'),
    targetEntity?: string(name='TargetEntity', example='someone@example.com'),
    targetType?: string(name='TargetType', example='Email'),
  }(name='Handshake'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model InviteAccountToResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: InviteAccountToResourceDirectoryResponseBody(name='body'),
}

async function inviteAccountToResourceDirectory(request: InviteAccountToResourceDirectoryRequest): InviteAccountToResourceDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InviteAccountToResourceDirectory', 'POST', '/', 'json', false, 'json', request);
}

model ListAccountsRequest {
  includeTags?: boolean(name='IncludeTags', description='Specifies whether to return the information of tags. Valid values:

false (default value) true', example='true', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
  queryKeyword?: string(name='QueryKeyword', description='The keyword used for the query, such as the display name of a member.

Fuzzy match is supported.', example='Advance', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='tag_key'),
      value?: string(name='Value', description='The tag value.', example='tag_value'),
    }
  ](name='Tag', description='The tags. This parameter specifies a filter condition.', position='Query'),
}

model ListAccountsResponseBody = {
  accounts?: {
    account?: [ 
    {
      accountId?: string(name='AccountId', description='The Alibaba Cloud account ID of the member.', example='181761095690****'),
      accountName?: string(name='AccountName', description='The Alibaba Cloud account name of the member.', example='oxy01414357@alibaba-inc.com'),
      displayName?: string(name='DisplayName', description='The display name of the member.', example='test'),
      folderId?: string(name='FolderId', description='The ID of the folder.', example='fd-QRzuim****'),
      joinMethod?: string(name='JoinMethod', description='The way in which the member joins the resource directory. Valid values:

*   invited: The member is invited to join the resource directory.
*   created: The member is directly created in the resource directory.', example='created'),
      joinTime?: string(name='JoinTime', description='The time when the member joined the resource directory. The time is displayed in UTC.', example='2021-01-18T08:01:50.522Z'),
      modifyTime?: string(name='ModifyTime', description='The time when the member was modified. The time is displayed in UTC.', example='2021-01-18T08:04:37.668Z'),
      resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-3G****'),
      resourceDirectoryPath?: string(name='ResourceDirectoryPath', description='The path of the member in the resource directory.', example='rd-3G****/r-Wm****/fd-QRzuim****/181761095690****'),
      status?: string(name='Status', description='The status of the member. Valid values:

*   CreateSuccess: The member is created.
*   PromoteVerifying: The upgrade of the member is being confirmed.
*   PromoteFailed: The upgrade of the member fails.
*   PromoteExpired: The upgrade of the member expires.
*   PromoteCancelled: The upgrade of the member is canceled.
*   PromoteSuccess: The member is upgraded.
*   InviteSuccess: The member accepts the invitation.', example='CreateSuccess'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='tag_key'),
          value?: string(name='Value', description='The tag value.', example='tag_value'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags that are added to the member.'),
      type?: string(name='Type', description='The type of the member. Valid values:

*   CloudAccount: cloud account
*   ResourceAccount: resource account', example='ResourceAccount'),
    }
  ](name='Account')
  }(name='Accounts', description='The members returned.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='5'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7B8A4E7D-6CFF-471D-84DF-195A7A241ECB'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAccountsResponseBody(name='body'),
}

/**
  * You can use only the management account of a resource directory or a delegated administrator account of a trusted service to call this operation.
  *
 */
async function listAccounts(request: ListAccountsRequest): ListAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccounts', 'POST', '/', 'json', false, 'json', request);
}

model ListAccountsForParentRequest {
  includeTags?: boolean(name='IncludeTags', description='Specifies whether to return the information of tags. Valid values:

false (default value) true', example='true', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
  parentFolderId?: string(name='ParentFolderId', description='The ID of the folder.', example='fd-bVaRIG****', position='Query'),
  queryKeyword?: string(name='QueryKeyword', description='The keyword used for the query, such as the display name of a member.

Fuzzy match is supported.', example='admin', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='tag_key'),
      value?: string(name='Value', description='The value of the tag.', example='tag_value'),
    }
  ](name='Tag', description='The tags. This parameter specifies a filter condition.', position='Query'),
}

model ListAccountsForParentResponseBody = {
  accounts?: {
    account?: [ 
    {
      accountId?: string(name='AccountId', description='The Alibaba Cloud account ID of the member.', example='184311716100****'),
      accountName?: string(name='AccountName', description='The Alibaba Cloud account name of the member.', example='hdd01429358@alibaba-inc.com'),
      displayName?: string(name='DisplayName', description='The display name of the member.', example='admin'),
      folderId?: string(name='FolderId', description='The ID of the folder.', example='fd-bVaRIG****'),
      joinMethod?: string(name='JoinMethod', description='The way in which the member joins the resource directory. Valid values:

*   invited: The member is invited to join the resource directory.
*   created: The member is directly created in the resource directory.', example='created'),
      joinTime?: string(name='JoinTime', description='The time when the member joined the resource directory. The time is displayed in UTC.', example='2015-01-23T12:33:18Z'),
      modifyTime?: string(name='ModifyTime', description='The time when the member was modified. The time is displayed in UTC.', example='2015-01-23T12:33:18Z'),
      resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-k4****'),
      status?: string(name='Status', description='The status of the member. Valid values:

*   CreateSuccess: The member is created.
*   PromoteVerifying: The upgrade of the member is being confirmed.
*   PromoteFailed: The upgrade of the member fails.
*   PromoteExpired: The upgrade of the member expires.
*   PromoteCancelled: The upgrade of the member is canceled.
*   PromoteSuccess: The member is upgraded.
*   InviteSuccess: The member accepts the invitation.', example='CreateSuccess'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The key of the tag.', example='tag_key'),
          value?: string(name='Value', description='The value of the tag.', example='tag_value'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags that are added to the member.'),
      type?: string(name='Type', description='The type of the member. Valid values:

*   CloudAccount: cloud account
*   ResourceAccount: resource account', example='ResourceAccount'),
    }
  ](name='Account')
  }(name='Accounts', description='The information of the members.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='5'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7B8A4E7D-6CFF-471D-84DF-195A7A241ECB'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListAccountsForParentResponse = {
  headers: map[string]string(name='headers'),
  body: ListAccountsForParentResponseBody(name='body'),
}

async function listAccountsForParent(request: ListAccountsForParentRequest): ListAccountsForParentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccountsForParent', 'POST', '/', 'json', false, 'json', request);
}

model ListAncestorsRequest {
  childId: string(name='ChildId', description='The ID of the subfolder.', example='fd-i1c9nr****', position='Query'),
}

model ListAncestorsResponseBody = {
  folders?: {
    folder?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the folder was created.', example='2019-01-18T10:03:35.217Z'),
      folderId?: string(name='FolderId', description='The ID of the folder.', example='r-b1****'),
      folderName?: string(name='FolderName', description='The name of the folder.', example='root'),
    }
  ](name='Folder')
  }(name='Folders', description='The information of the folders.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='83AFBEB6-DC03-406E-9686-867461FF6698'),
}

model ListAncestorsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAncestorsResponseBody(name='body'),
}

async function listAncestors(request: ListAncestorsRequest): ListAncestorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAncestors', 'POST', '/', 'json', false, 'json', request);
}

model ListControlPoliciesRequest {
  language?: string(name='Language', description='The language in which you want to return the descriptions of the access control policies. Valid values:

*   zh-CN (default value): Chinese
*   en: English
*   ja: Japanese

> This parameter is available only for system access control policies.', example='zh-CN', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', minimum=1, maximum=200000, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  policyType?: string(name='PolicyType', description='The type of the access control policies. Valid values:

*   System: system access control policy
*   Custom: custom access control policy', example='System', position='Query'),
}

model ListControlPoliciesResponseBody = {
  controlPolicies?: {
    controlPolicy?: [ 
    {
      attachmentCount?: string(name='AttachmentCount', description='The number of times that the access control policy is referenced.', example='44'),
      createDate?: string(name='CreateDate', description='The time when the access control policy was created.', example='2020-08-05T06:32:24Z'),
      description?: string(name='Description', description='The description of the access control policy.', example='System access control policy available for all operations on the cloud'),
      effectScope?: string(name='EffectScope', description='The effective scope of the access control policy. Valid values:

*   All: The access control policy is in effect for Alibaba Cloud accounts, RAM users, and RAM roles.
*   RAM: The access control policy is in effect only for RAM users and RAM roles.', example='All'),
      policyId?: string(name='PolicyId', description='The ID of the access control policy.', example='cp-FullAliyunAccess'),
      policyName?: string(name='PolicyName', description='The name of the access control policy.', example='FullAliyunAccess'),
      policyType?: string(name='PolicyType', description='The type of the access control policy. Valid values:

*   System: system access control policy
*   Custom: custom access control policy', example='System'),
      updateDate?: string(name='UpdateDate', description='The time when the access control policy was updated.', example='2020-08-05T06:32:24Z'),
    }
  ](name='ControlPolicy')
  }(name='ControlPolicies', description='The information of the access control policies.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9424A34C-3471-45AD-B6AB-924BBDFE42F9'),
  totalCount?: int32(name='TotalCount', description='The number of access control policies.', example='1'),
}

model ListControlPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: ListControlPoliciesResponseBody(name='body'),
}

async function listControlPolicies(request: ListControlPoliciesRequest): ListControlPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListControlPolicies', 'POST', '/', 'json', false, 'json', request);
}

model ListControlPolicyAttachmentsForTargetRequest {
  language?: string(name='Language', description='The language in which you want to return the descriptions of the access control policies. Valid values:

*   zh-CN (default value): Chinese
*   en: English
*   ja: Japanese

> This parameter is valid only for system access control policies.', example='zh-CN', position='Query'),
  targetId: string(name='TargetId', description='The ID of the object whose access control policies you want to query. Access control policies can be attached to the following objects:

*   Root folder
*   Subfolders of the Root folder
*   Members', example='fd-ZDNPiT****', position='Query'),
}

model ListControlPolicyAttachmentsForTargetResponseBody = {
  controlPolicyAttachments?: {
    controlPolicyAttachment?: [ 
    {
      attachDate?: string(name='AttachDate', description='The time when the access control policy was attached.', example='2021-03-19T02:56:24Z'),
      description?: string(name='Description', description='The description of the access control policy.', example='ExampleControlPolicy'),
      effectScope?: string(name='EffectScope', description='The effective scope of the access control policy. Valid values:

*   All: The access control policy is in effect for Alibaba Cloud accounts, RAM users, and RAM roles.
*   RAM: The access control policy is in effect only for RAM users and RAM roles.', example='RAM'),
      policyId?: string(name='PolicyId', description='The ID of the access control policy.', example='cp-jExXAqIYkwHN****'),
      policyName?: string(name='PolicyName', description='The name of the access control policy.', example='ExampleControlPolicy'),
      policyType?: string(name='PolicyType', description='The type of the access control policy. Valid values:

*   System: system access control policy
*   Custom: custom access control policy', example='Custom'),
    }
  ](name='ControlPolicyAttachment')
  }(name='ControlPolicyAttachments', description='The information about the attached access control policies.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C276B600-7B7A-49E8-938C-E16CFA955A82'),
}

model ListControlPolicyAttachmentsForTargetResponse = {
  headers: map[string]string(name='headers'),
  body: ListControlPolicyAttachmentsForTargetResponseBody(name='body'),
}

async function listControlPolicyAttachmentsForTarget(request: ListControlPolicyAttachmentsForTargetRequest): ListControlPolicyAttachmentsForTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListControlPolicyAttachmentsForTarget', 'POST', '/', 'json', false, 'json', request);
}

model ListDelegatedAdministratorsRequest {
  pageNumber?: long(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
  servicePrincipal?: string(name='ServicePrincipal', description='The identifier of the trusted service.

For more information, see the `Trusted service identifier` column in [Supported trusted services](~~208133~~).', example='cloudfw.aliyuncs.com', position='Query'),
}

model ListDelegatedAdministratorsResponseBody = {
  accounts?: {
    account?: [ 
    {
      accountId?: string(name='AccountId', description='The Alibaba Cloud account ID of the member.', example='138660628348****'),
      delegationEnabledTime?: string(name='DelegationEnabledTime', description='The time when the member was specified as a delegated administrator account.', example='1616652684164'),
      displayName?: string(name='DisplayName', description='The display name of the member.', example='abc'),
      joinMethod?: string(name='JoinMethod', description='The way in which the member joins the resource directory. Valid values:

*   invited: The member is invited to join the resource directory.
*   created: The member is directly created in the resource directory.', example='created'),
      servicePrincipal?: string(name='ServicePrincipal', description='The identifier of the trusted service.', example='cloudfw.aliyuncs.com'),
    }
  ](name='Account')
  }(name='Accounts', description='The information about the delegated administrator accounts.'),
  pageNumber?: long(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='009C3A02-7D4B-416C-9CE7-548C91508F1E'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListDelegatedAdministratorsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDelegatedAdministratorsResponseBody(name='body'),
}

async function listDelegatedAdministrators(request: ListDelegatedAdministratorsRequest): ListDelegatedAdministratorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDelegatedAdministrators', 'POST', '/', 'json', false, 'json', request);
}

model ListDelegatedServicesForAccountRequest {
  accountId: string(name='AccountId', description='The Alibaba Cloud account ID of the member.', example='138660628348****', position='Query'),
}

model ListDelegatedServicesForAccountResponseBody = {
  delegatedServices?: {
    delegatedService?: [ 
    {
      delegationEnabledTime?: string(name='DelegationEnabledTime', description='The time when the member was specified as a delegated administrator account.', example='1616652684164'),
      servicePrincipal?: string(name='ServicePrincipal', description='The identifier of the trusted service.', example='cloudfw.aliyuncs.com'),
      status?: string(name='Status', description='The status of the trusted service. Valid values:

*   ENABLED: enabled
*   DISABLED: disabled', example='ENABLED'),
    }
  ](name='DelegatedService')
  }(name='DelegatedServices', description='The information about the trusted services.

> If the value of this parameter is empty, the member is not specified as a delegated administrator account.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D9C03B94-9396-4794-A74B-13DC437556A6'),
}

model ListDelegatedServicesForAccountResponse = {
  headers: map[string]string(name='headers'),
  body: ListDelegatedServicesForAccountResponseBody(name='body'),
}

async function listDelegatedServicesForAccount(request: ListDelegatedServicesForAccountRequest): ListDelegatedServicesForAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDelegatedServicesForAccount', 'POST', '/', 'json', false, 'json', request);
}

model ListFoldersForParentRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
  parentFolderId?: string(name='ParentFolderId', description='The ID of the parent folder.

If you leave this parameter empty, the information of the first-level subfolders of the Root folder is queried.', example='r-b1****', position='Query'),
  queryKeyword?: string(name='QueryKeyword', description='The keyword used for the query, such as a folder name.

Fuzzy match is supported.', example='rdFolder', position='Query'),
}

model ListFoldersForParentResponseBody = {
  folders?: {
    folder?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the folder was created.', example='2015-01-23T12:33:18Z'),
      folderId?: string(name='FolderId', description='The ID of the folder.', example='rd-evic31****'),
      folderName?: string(name='FolderName', description='The name of the folder.', example='project-1'),
    }
  ](name='Folder')
  }(name='Folders', description='The information of the folders.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='5'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7B8A4E7D-6CFF-471D-84DF-195A7A241ECB'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListFoldersForParentResponse = {
  headers: map[string]string(name='headers'),
  body: ListFoldersForParentResponseBody(name='body'),
}

/**
  * You can call this API operation to view the information of only the first-level subfolders of a folder.
  *
 */
async function listFoldersForParent(request: ListFoldersForParentRequest): ListFoldersForParentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFoldersForParent', 'POST', '/', 'json', false, 'json', request);
}

model ListHandshakesForAccountRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
}

model ListHandshakesForAccountResponseBody = {
  handshakes?: {
    handshake?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the invitation was created. The time is displayed in UTC.', example='2018-08-10T09:55:41Z'),
      expireTime?: string(name='ExpireTime', description='The time when the invitation expires. The time is displayed in UTC.', example='2018-08-24T09:55:41Z'),
      handshakeId?: string(name='HandshakeId', description='The ID of the invitation.', example='h-4N57QZzCTtES****'),
      masterAccountId?: string(name='MasterAccountId', description='The ID of the management account of the resource directory.', example='172841235500****'),
      masterAccountName?: string(name='MasterAccountName', description='The name of the management account of the resource directory.', example='CompanyA'),
      modifyTime?: string(name='ModifyTime', description='The time when the invitation was modified. The time is displayed in UTC.', example='2018-08-10T09:55:41Z'),
      note?: string(name='Note', description='The description of the invitation.', example='Welcome'),
      resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-abcdef****'),
      status?: string(name='Status', description='The status of the invitation. Valid values:

*   Pending: The invitation is waiting for confirmation.
*   Accepted: The invitation is accepted.
*   Cancelled: The invitation is canceled.
*   Declined: The invitation is rejected.
*   Expired: The invitation expires.', example='Pending'),
      targetEntity?: string(name='TargetEntity', description='The ID or logon email address of the invited Alibaba Cloud account.', example='someone@example.com'),
      targetType?: string(name='TargetType', description='The type of the invited Alibaba Cloud account. Valid values:

*   Account: indicates the ID of the account.
*   Email: indicates the logon email address of the account.', example='Email'),
    }
  ](name='Handshake')
  }(name='Handshakes', description='The information of the invitations.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
  totalCount?: int32(name='TotalCount', description='The total number of invitations.', example='2'),
}

model ListHandshakesForAccountResponse = {
  headers: map[string]string(name='headers'),
  body: ListHandshakesForAccountResponseBody(name='body'),
}

async function listHandshakesForAccount(request: ListHandshakesForAccountRequest): ListHandshakesForAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHandshakesForAccount', 'POST', '/', 'json', false, 'json', request);
}

model ListHandshakesForResourceDirectoryRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
}

model ListHandshakesForResourceDirectoryResponseBody = {
  handshakes?: {
    handshake?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the invitation was created. The time is displayed in UTC.', example='2018-08-10T09:55:41Z'),
      expireTime?: string(name='ExpireTime', description='The time when the invitation expires. The time is displayed in UTC.', example='2018-08-24T09:55:41Z'),
      handshakeId?: string(name='HandshakeId', description='The ID of the invitation.', example='h-ycm4rp****'),
      masterAccountId?: string(name='MasterAccountId', description='The ID of the management account of the resource directory.', example='172841235500****'),
      masterAccountName?: string(name='MasterAccountName', description='The name of the management account of the resource directory.', example='Alice'),
      modifyTime?: string(name='ModifyTime', description='The time when the invitation was modified. The time is displayed in UTC.', example='2018-08-10T09:55:41Z'),
      note?: string(name='Note', description='The description of the invitation.', example='Welcome'),
      resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-abcdef****'),
      status?: string(name='Status', description='The status of the invitation. Valid values:

*   Pending: The invitation is waiting for confirmation.
*   Accepted: The invitation is accepted.
*   Cancelled: The invitation is canceled.
*   Declined: The invitation is rejected.
*   Expired: The invitation expires.', example='Pending'),
      targetEntity?: string(name='TargetEntity', description='The ID or logon email address of the invited account.', example='someone@example.com'),
      targetType?: string(name='TargetType', description='The type of the invited account. Valid values:

*   Account: indicates the ID of the account.
*   Email: indicates the logon email address of the account.', example='Email'),
    }
  ](name='Handshake')
  }(name='Handshakes', description='The information of the invitations.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListHandshakesForResourceDirectoryResponse = {
  headers: map[string]string(name='headers'),
  body: ListHandshakesForResourceDirectoryResponseBody(name='body'),
}

async function listHandshakesForResourceDirectory(request: ListHandshakesForResourceDirectoryRequest): ListHandshakesForResourceDirectoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHandshakesForResourceDirectory', 'POST', '/', 'json', false, 'json', request);
}

model ListMessageContactVerificationsRequest {
  contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model ListMessageContactVerificationsResponseBody = {
  contactVerifications?: [ 
    {
      contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****'),
      target?: string(name='Target', example='someone***@example.com'),
    }
  ](name='ContactVerifications'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='CD76D376-2517-4924-92C5-DBC52262F93A'),
  totalCount?: int32(name='TotalCount', example='48'),
}

model ListMessageContactVerificationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListMessageContactVerificationsResponseBody(name='body'),
}

async function listMessageContactVerifications(request: ListMessageContactVerificationsRequest): ListMessageContactVerificationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMessageContactVerifications', 'POST', '/', 'json', false, 'json', request);
}

model ListMessageContactsRequest {
  contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****', position='Query'),
  member?: string(name='Member', example='fd-ZDNPiT****', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model ListMessageContactsResponseBody = {
  contacts?: [ 
    {
      associatedDate?: string(name='AssociatedDate', example='2023-03-27 17:19:21'),
      contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****'),
      createDate?: string(name='CreateDate', example='2023-03-27 17:19:21'),
      emailAddress?: string(name='EmailAddress', example='someone***@example.com'),
      members?: [ string ](name='Members'),
      messageTypes?: [ string ](name='MessageTypes'),
      name?: string(name='Name', example='tom'),
      phoneNumber?: string(name='PhoneNumber', example='86-139****1234'),
      status?: string(name='Status', example='Active'),
      title?: string(name='Title', example='TechnicalDirector'),
    }
  ](name='Contacts'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='95060F1D-6990-4645-8920-A81D1BBFE992'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model ListMessageContactsResponse = {
  headers: map[string]string(name='headers'),
  body: ListMessageContactsResponseBody(name='body'),
}

async function listMessageContacts(request: ListMessageContactsRequest): ListMessageContactsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMessageContacts', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used to start the next query.', example='caeba0bbb2be03f84eb48b699f0a****', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The Alibaba Cloud account IDs of the members. This parameter specifies a filter condition for the query.

> If you want to query the tags that are added to the members in a resource directory, you must configure both the `ResourceId` and `ResourceType` parameters and set the `ResourceType` parameter to `Account` in your request.', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the objects whose tags you want to query. This parameter specifies a filter condition for the query. Valid values:

*   Account: member', example='Account', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='k1'),
      value?: string(name='Value', description='The value of the tag.', example='v1'),
    }
  ](name='Tag', description='The tags. This parameter specifies a filter condition for the query.

You can specify a maximum of 20 tags.', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='Indicates whether the next query is required.```` Valid values:

*   If the value of this parameter is empty (`"NextToken": ""`), all results are returned, and the `next query` is not required.
*   If the value of this parameter is not empty, the next query is required, and the value is the token used to start the next query.````', example='caeba0bbb2be03f84eb48b699f0a****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8054B059-6B36-53BF-AA45-B8C9A0ED05AB'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The Alibaba Cloud account ID of the member.', example='1098***'),
      resourceType?: string(name='ResourceType', description='The type of the object whose tags are queried. Valid values:

*   Account: member', example='Account'),
      tagKey?: string(name='TagKey', description='The key of the tag.', example='k1'),
      tagValue?: string(name='TagValue', description='The value of the tag.', example='k1'),
    }
  ](name='TagResources', description='The tags.'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ListTargetAttachmentsForControlPolicyRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', minimum=1, maximum=200000, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100. Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  policyId: string(name='PolicyId', description='The ID of the access control policy.', example='cp-jExXAqIYkwHN****', position='Query'),
}

model ListTargetAttachmentsForControlPolicyResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B32BD3D6-1089-41F3-8E70-E0079BC7D760'),
  targetAttachments?: {
    targetAttachment?: [ 
    {
      attachDate?: string(name='AttachDate', description='The time when the access control policy was attached to the object.', example='2021-03-19T02:56:24Z'),
      targetId?: string(name='TargetId', description='The ID of the object.', example='fd-ZDNPiT****'),
      targetName?: string(name='TargetName', description='The name of the object.', example='Dev_Department'),
      targetType?: string(name='TargetType', description='The type of the object. Valid values:

*   Root: Root folder
*   Folder: subfolder of the Root folder
*   Account: member', example='Folder'),
    }
  ](name='TargetAttachment')
  }(name='TargetAttachments', description='The information about the objects to which the access control policy is attached.'),
  totalCount?: int32(name='TotalCount', description='The total number of objects to which the access control policy is attached.', example='1'),
}

model ListTargetAttachmentsForControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ListTargetAttachmentsForControlPolicyResponseBody(name='body'),
}

async function listTargetAttachmentsForControlPolicy(request: ListTargetAttachmentsForControlPolicyRequest): ListTargetAttachmentsForControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTargetAttachmentsForControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ListTrustedServiceStatusRequest {
  adminAccountId?: string(name='AdminAccountId', example='177242285274****', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model ListTrustedServiceStatusResponseBody = {
  enabledServicePrincipals?: {
    enabledServicePrincipal?: [ 
    {
      enableTime?: string(name='EnableTime', example='2019-02-18T15:32:10.473Z'),
      servicePrincipal?: string(name='ServicePrincipal', example='config.aliyuncs.com'),
    }
  ](name='EnabledServicePrincipal')
  }(name='EnabledServicePrincipals'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='CD76D376-2517-4924-92C5-DBC52262F93A'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListTrustedServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ListTrustedServiceStatusResponseBody(name='body'),
}

/**
  * The time when the trusted service was enabled.
  *
 */
async function listTrustedServiceStatus(request: ListTrustedServiceStatusRequest): ListTrustedServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTrustedServiceStatus', 'POST', '/', 'json', false, 'json', request);
}

model MoveAccountRequest {
  accountId: string(name='AccountId', description='The Alibaba Cloud account ID of the member that you want to move.', example='12323344****', position='Query'),
  destinationFolderId: string(name='DestinationFolderId', description='The ID of the destination folder.', example='fd-bVaRIG****', position='Query'),
}

model MoveAccountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model MoveAccountResponse = {
  headers: map[string]string(name='headers'),
  body: MoveAccountResponseBody(name='body'),
}

async function moveAccount(request: MoveAccountRequest): MoveAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveAccount', 'POST', '/', 'json', false, 'json', request);
}

model RegisterDelegatedAdministratorRequest {
  accountId: string(name='AccountId', example='181761095690****', position='Query'),
  servicePrincipal: string(name='ServicePrincipal', example='cloudfw.aliyuncs.com', position='Query'),
}

model RegisterDelegatedAdministratorResponseBody = {
  requestId?: string(name='RequestId', example='0A45FC8F-54D2-4A65-8338-25E5DEBDA304'),
}

model RegisterDelegatedAdministratorResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterDelegatedAdministratorResponseBody(name='body'),
}

async function registerDelegatedAdministrator(request: RegisterDelegatedAdministratorRequest): RegisterDelegatedAdministratorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterDelegatedAdministrator', 'POST', '/', 'json', false, 'json', request);
}

model RemoveCloudAccountRequest {
  accountId: string(name='AccountId', description='The Alibaba Cloud account ID of the member.', example='177242285274****', position='Query'),
}

model RemoveCloudAccountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model RemoveCloudAccountResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveCloudAccountResponseBody(name='body'),
}

async function removeCloudAccount(request: RemoveCloudAccountRequest): RemoveCloudAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveCloudAccount', 'POST', '/', 'json', false, 'json', request);
}

model RetryChangeAccountEmailRequest {
  accountId: string(name='AccountId', description='The Alibaba Cloud account ID of the member.', example='181761095690****', position='Query'),
}

model RetryChangeAccountEmailResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model RetryChangeAccountEmailResponse = {
  headers: map[string]string(name='headers'),
  body: RetryChangeAccountEmailResponseBody(name='body'),
}

async function retryChangeAccountEmail(request: RetryChangeAccountEmailRequest): RetryChangeAccountEmailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RetryChangeAccountEmail', 'POST', '/', 'json', false, 'json', request);
}

model SendEmailVerificationForMessageContactRequest {
  contactId?: string(name='ContactId', example='c-5gsZAGt***PGduDF', position='Query'),
  emailAddress?: string(name='EmailAddress', example='someone***@example.com', position='Query'),
}

model SendEmailVerificationForMessageContactResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='7B8A4E7D-6CFF-471D-84DF-195A7A241ECB'),
}

model SendEmailVerificationForMessageContactResponse = {
  headers: map[string]string(name='headers'),
  body: SendEmailVerificationForMessageContactResponseBody(name='body'),
}

async function sendEmailVerificationForMessageContact(request: SendEmailVerificationForMessageContactRequest): SendEmailVerificationForMessageContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendEmailVerificationForMessageContact', 'POST', '/', 'json', false, 'json', request);
}

model SendPhoneVerificationForMessageContactRequest {
  contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****', position='Query'),
  phoneNumber?: string(name='PhoneNumber', example='86-139****1234', position='Query'),
}

model SendPhoneVerificationForMessageContactResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='CD76D376-2517-4924-92C5-DBC52262F93A'),
}

model SendPhoneVerificationForMessageContactResponse = {
  headers: map[string]string(name='headers'),
  body: SendPhoneVerificationForMessageContactResponseBody(name='body'),
}

async function sendPhoneVerificationForMessageContact(request: SendPhoneVerificationForMessageContactRequest): SendPhoneVerificationForMessageContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendPhoneVerificationForMessageContact', 'POST', '/', 'json', false, 'json', request);
}

model SendVerificationCodeForBindSecureMobilePhoneRequest {
  accountId: string(name='AccountId', description='The Alibaba Cloud account ID of the member.', example='138660628348****', position='Query'),
  secureMobilePhone: string(name='SecureMobilePhone', description='The mobile phone number that you want to bind to the member for security purposes.

Specify the mobile phone number in the \\<Country code>-\\<Mobile phone number> format.

> Mobile phone numbers in the `86-<Mobile phone number>` format in the Chinese mainland are not supported.', example='xx-13900001234', position='Query'),
}

model SendVerificationCodeForBindSecureMobilePhoneResponseBody = {
  expirationDate?: string(name='ExpirationDate', description='The time when the verification code expires.', example='2021-12-17T07:38:41.747Z'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DCD43660-75DD-5D15-B342-1B83FCA5B913'),
}

model SendVerificationCodeForBindSecureMobilePhoneResponse = {
  headers: map[string]string(name='headers'),
  body: SendVerificationCodeForBindSecureMobilePhoneResponseBody(name='body'),
}

/**
  * To ensure that the system can record the operators of management operations, you must use a RAM user or RAM role to which the AliyunResourceDirectoryFullAccess policy is attached within the management account of your resource directory to call this API operation.
  *
 */
async function sendVerificationCodeForBindSecureMobilePhone(request: SendVerificationCodeForBindSecureMobilePhoneRequest): SendVerificationCodeForBindSecureMobilePhoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendVerificationCodeForBindSecureMobilePhone', 'POST', '/', 'json', false, 'json', request);
}

model SendVerificationCodeForEnableRDRequest {
  secureMobilePhone?: string(name='SecureMobilePhone', description='The mobile phone number that is bound to the newly created account. If you leave this parameter empty, the mobile phone number that is bound to the current account is used.

Specify the mobile phone number in the `<Country code>-<Mobile phone number>` format.

> Mobile phone numbers in the `86-<Mobile phone number>` format in the Chinese mainland are not supported.', example='xx-13900001234', position='Query'),
}

model SendVerificationCodeForEnableRDResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EC2FE94D-A4A2-51A1-A493-5C273A36C46A'),
}

model SendVerificationCodeForEnableRDResponse = {
  headers: map[string]string(name='headers'),
  body: SendVerificationCodeForEnableRDResponseBody(name='body'),
}

/**
  * Each Alibaba Cloud account can be used to send a maximum of 100 verification codes per day.
  *
 */
async function sendVerificationCodeForEnableRD(request: SendVerificationCodeForEnableRDRequest): SendVerificationCodeForEnableRDResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendVerificationCodeForEnableRD', 'POST', '/', 'json', false, 'json', request);
}

model SetMemberDeletionPermissionRequest {
  status: string(name='Status', description='Specifies whether to enable the member deletion feature. Valid values:

*   Enabled: enables the member deletion feature.
*   Disabled: disables the member deletion feature.', example='Enabled', position='Query'),
}

model SetMemberDeletionPermissionResponseBody = {
  managementAccountId?: string(name='ManagementAccountId', description='The ID of the management account of the resource directory.', example='151266687691****'),
  memberDeletionStatus?: string(name='MemberDeletionStatus', description='The status of the member deletion feature. Valid values:

*   Enabled: The feature is enabled.
*   Disabled: The feature is disabled.', example='Enabled'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C55A4CAA-9039-1DDF-91CE-FCC134513D29'),
  resourceDirectoryId?: string(name='ResourceDirectoryId', description='The ID of the resource directory.', example='rd-3G****'),
}

model SetMemberDeletionPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: SetMemberDeletionPermissionResponseBody(name='body'),
}

/**
  * Members of the resource account type can be deleted only after the member deletion feature is enabled.
  *
 */
async function setMemberDeletionPermission(request: SetMemberDeletionPermissionRequest): SetMemberDeletionPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetMemberDeletionPermission', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  resourceId: [ string ](name='ResourceId', description='The Alibaba Cloud account IDs of the members.

You can specify a maximum of 50 IDs.', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the objects to which you want to add tags. Valid values:

*   Account: member', example='Account', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', description='The key of the tag.

A tag key can be a maximum of 128 characters in length. It cannot contain `http://` or `https://` and cannot start with `acs:` or `aliyun`.', example='k1'),
      value?: string(name='Value', description='The value of the tag.

A tag value can be a maximum of 128 characters in length. It cannot contain `http://` or `https://` and cannot start with `acs:`.', example='v1'),
    }
  ](name='Tag', description='The tags.

You can specify a maximum of 20 tags.', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='E7747EDF-EDDC-5B38-9B6A-6392B9C92B1C'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to remove all tags from the specified members. Valid values:

*   false (default value)
*   true', example='false', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The Alibaba Cloud account IDs of the members.

You can specify a maximum of 50 IDs.', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the objects from which you want to remove tags. Valid values:

*   Account: member', example='Account', position='Query'),
  tagKey?: [ string ](name='TagKey', description='The tag keys.

You can specify a maximum of 20 tag keys.

> If you set the `All` parameter to `true`, you do not need to specify tag keys.', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='E7747EDF-EDDC-5B38-9B6A-6392B9C92B1C'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAccountRequest {
  accountId: string(name='AccountId', example='12323344****', position='Query'),
  newAccountType?: string(name='NewAccountType', example='ResourceAccount', position='Query'),
  newDisplayName?: string(name='NewDisplayName', example='admin', position='Query'),
}

model UpdateAccountResponseBody = {
  account?: {
    accountId?: string(name='AccountId', example='12323344****'),
    accountName?: string(name='AccountName', example='ecs-manager@aliyun.com'),
    displayName?: string(name='DisplayName', example='admin'),
    folderId?: string(name='FolderId', example='fd-bVaRIG****'),
    joinMethod?: string(name='JoinMethod', example='created'),
    joinTime?: string(name='JoinTime', example='2015-01-23T12:33:18Z'),
    modifyTime?: string(name='ModifyTime', example='2015-01-23T12:33:18Z'),
    resourceDirectoryId?: string(name='ResourceDirectoryId', example='rd-k3****'),
    status?: string(name='Status', example='CreateSuccess'),
    type?: string(name='Type', example='ResourceAccount'),
  }(name='Account'),
  requestId?: string(name='RequestId', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model UpdateAccountResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAccountResponseBody(name='body'),
}

async function updateAccount(request: UpdateAccountRequest): UpdateAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAccount', 'POST', '/', 'json', false, 'json', request);
}

model UpdateControlPolicyRequest {
  newDescription?: string(name='NewDescription', description='The new description of the access control policy.

The description must be 1 to 1,024 characters in length. The description can contain letters, digits, underscores (\\_), and hyphens (-) and must start with a letter.', example='ExampleControlPolicy', position='Query'),
  newPolicyDocument?: string(name='NewPolicyDocument', description='The new document of the access control policy.

The document can be a maximum of 4,096 characters in length.

For more information about the languages of access control policies, see [Languages of access control policies](~~179096~~).

For more information about the examples of access control policies, see [Examples of custom access control policies](~~181474~~).', example='{"Version":"1","Statement":[{"Effect":"Deny","Action":["ram:UpdateRole","ram:DeleteRole","ram:AttachPolicyToRole","ram:DetachPolicyFromRole"],"Resource":"acs:ram:*:*:role/ResourceDirectoryAccountAccessRole"}]}', position='Query'),
  newPolicyName?: string(name='NewPolicyName', description='The new name of the access control policy.

The name must be 1 to 128 characters in length. The name can contain letters, digits, and hyphens (-) and must start with a letter.', example='NewControlPolicy', position='Query'),
  policyId: string(name='PolicyId', description='The ID of the access control policy.', example='cp-jExXAqIYkwHN****', position='Query'),
}

model UpdateControlPolicyResponseBody = {
  controlPolicy?: {
    attachmentCount?: string(name='AttachmentCount', description='The number of times that the access control policy is referenced.', example='0'),
    createDate?: string(name='CreateDate', description='The time when the access control policy was created.', example='2021-03-18T09:24:19Z'),
    description?: string(name='Description', description='The description of the access control policy.', example='ExampleControlPolicy'),
    effectScope?: string(name='EffectScope', description='The effective scope of the access control policy. Valid values:

*   All: The access control policy is in effect for Alibaba Cloud accounts, RAM users, and RAM roles.
*   RAM: The access control policy is in effect only for RAM users and RAM roles.', example='RAM'),
    policyId?: string(name='PolicyId', description='The ID of the access control policy.', example='cp-jExXAqIYkwHN****'),
    policyName?: string(name='PolicyName', description='The name of the access control policy.', example='NewControlPolicy'),
    policyType?: string(name='PolicyType', description='The type of the access control policy. Valid values:

*   System: system access control policy
*   Custom: custom access control policy', example='Custom'),
    updateDate?: string(name='UpdateDate', description='The time when the access control policy was updated.', example='2021-03-18T10:04:55Z'),
  }(name='ControlPolicy', description='The details of the access control policy.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2DFCE4C9-04A9-4C83-BB14-FE791275EC53'),
}

model UpdateControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateControlPolicyResponseBody(name='body'),
}

async function updateControlPolicy(request: UpdateControlPolicyRequest): UpdateControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model UpdateFolderRequest {
  folderId: string(name='FolderId', description='The ID of the folder.', example='fd-u8B321****', position='Query'),
  newFolderName: string(name='NewFolderName', description='The new name of the folder.

The name must be 1 to 24 characters in length and can contain letters, digits, underscores (\\_), periods (.), and hyphens (-).', example='rdFolder', position='Query'),
}

model UpdateFolderResponseBody = {
  folder?: {
    createTime?: string(name='CreateTime', description='The time when the folder was created.', example='2019-02-19T09:34:50.757Z'),
    folderId?: string(name='FolderId', description='The ID of the folder.', example='fd-u8B321****'),
    folderName?: string(name='FolderName', description='The name of the folder.', example='rdFolder'),
    parentFolderId?: string(name='ParentFolderId', description='The ID of the parent folder.', example='r-b1****'),
  }(name='Folder', description='The information about the folder.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C2CBCA30-C8DD-423E-B4AD-4FB694C9180C'),
}

model UpdateFolderResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFolderResponseBody(name='body'),
}

async function updateFolder(request: UpdateFolderRequest): UpdateFolderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFolder', 'POST', '/', 'json', false, 'json', request);
}

model UpdateMessageContactRequest {
  contactId?: string(name='ContactId', example='c-qL4HqKONzOM7****', position='Query'),
  emailAddress?: string(name='EmailAddress', example='someone***@example.com', position='Query'),
  messageTypes?: [ string ](name='MessageTypes', position='Query'),
  name?: string(name='Name', example='tom', position='Query'),
  phoneNumber?: string(name='PhoneNumber', example='86-139****1234', position='Query'),
  title?: string(name='Title', example='TechnicalDirector', position='Query'),
}

model UpdateMessageContactResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='9B34724D-54B0-4A51-B34D-4512372FE1BE'),
}

model UpdateMessageContactResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateMessageContactResponseBody(name='body'),
}

async function updateMessageContact(request: UpdateMessageContactRequest): UpdateMessageContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMessageContact', 'POST', '/', 'json', false, 'json', request);
}

