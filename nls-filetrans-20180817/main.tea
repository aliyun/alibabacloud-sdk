/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('nls-filetrans', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model GetTaskResultRequest {
  taskId?: string(name='TaskId'),
}

model GetTaskResultResponseBody = {
  taskId?: string(name='TaskId'),
  requestId?: string(name='RequestId'),
  statusText?: string(name='StatusText'),
  bizDuration?: int32(name='BizDuration'),
  solveTime?: long(name='SolveTime'),
  statusCode?: int32(name='StatusCode'),
  result?: {
    words?: [ 
      {
        endTime?: int32(name='EndTime'),
        word?: string(name='Word'),
        beginTime?: int32(name='BeginTime'),
        channelId?: int32(name='ChannelId'),
      }
    ](name='Words'),
    paragraphs?: [ 
      {
        endTime?: int32(name='EndTime'),
        beginTime?: int32(name='BeginTime'),
        channelId?: int32(name='ChannelId'),
        text?: string(name='Text'),
      }
    ](name='Paragraphs'),
    sentences?: [ 
      {
        endTime?: int32(name='EndTime'),
        beginTime?: int32(name='BeginTime'),
        channelId?: int32(name='ChannelId'),
        emotionValue?: float(name='EmotionValue'),
        text?: string(name='Text'),
        speechRate?: int32(name='SpeechRate'),
        speakerId?: string(name='SpeakerId'),
        silenceDuration?: int32(name='SilenceDuration'),
      }
    ](name='Sentences'),
  }(name='Result'),
}

model GetTaskResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetTaskResultResponseBody(name='body'),
}

async function getTaskResultWithOptions(request: GetTaskResultRequest, runtime: Util.RuntimeOptions): GetTaskResultResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetTaskResult', '2018-08-17', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getTaskResult(request: GetTaskResultRequest): GetTaskResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTaskResultWithOptions(request, runtime);
}

model SubmitTaskRequest {
  task?: string(name='Task'),
}

model SubmitTaskResponseBody = {
  taskId?: string(name='TaskId'),
  requestId?: string(name='RequestId'),
  statusText?: string(name='StatusText'),
  statusCode?: int32(name='StatusCode'),
}

model SubmitTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitTaskResponseBody(name='body'),
}

async function submitTaskWithOptions(request: SubmitTaskRequest, runtime: Util.RuntimeOptions): SubmitTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitTask', '2018-08-17', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitTask(request: SubmitTaskRequest): SubmitTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitTaskWithOptions(request, runtime);
}

