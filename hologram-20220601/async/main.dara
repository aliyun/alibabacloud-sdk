/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Hologram';
  @version = '2022-06-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ChangeResourceGroupRequest {
  instanceId?: string(name='instanceId', description='The instance ID.', example='hgprecn-cn-zvp25ysv3006', position='Body'),
  newResourceGroupId?: string(name='newResourceGroupId', description='new resource group id', example='rg-acfmxwerqwerasfd', position='Body'),
}

model ChangeResourceGroupResponseBody = {
  data?: boolean(name='Data', description='The returned data.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
  requestId?: string(name='RequestId', description='Id of the request', example='AB71198A-2DB1-511B-AE4D-690BAA97F076'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ChangeResourceGroup  ChangeResourceGroupRequest
  * @return ChangeResourceGroupResponse
 */
async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ChangeResourceGroup', 'POST', '/api/v1/tag/changeResourceGroup', 'json', false, 'json', request);
}

model CreateHoloWarehouseRequest {
  instanceId: string(name='instanceId', description='The instance ID. This parameter is required.

This parameter is required.', example='hgprecn-cn-i7m2v08uu00a', position='Path'),
  cpu: string(name='cpu', description='The specifications of the virtual warehouse. The number of vCPUs must be an integer multiple of 16 CPUs. Minimum value: 16.

This parameter is required.', example='32', position='Body'),
  name: string(name='name', description='The name of the virtual warehouse.

This parameter is required.', example='my_warehouse', position='Body'),
}

model CreateHoloWarehouseResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
  requestId?: string(name='RequestId', description='Id of the request', example='2A8DEF6E-067E-5DB0-BAE1-2894266E6C6A'),
}

model CreateHoloWarehouseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateHoloWarehouseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateHoloWarehouse  CreateHoloWarehouseRequest
  * @return CreateHoloWarehouseResponse
 */
async function createHoloWarehouse(request: CreateHoloWarehouseRequest): CreateHoloWarehouseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateHoloWarehouse', 'POST', '/api/v1/instances/{instanceId}/createHoloWarehouse', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  autoPay?: boolean(name='autoPay', description='Specifies whether to enable auto-payment. Default value: true. Valid values:

*   true
*   false

>  The default value is true. If the balance of your account is insufficient, you can set this parameter to false. In this case, an unpaid order is generated. You can log on to the Expenses and Costs console to pay for the order.', example='true', position='Body'),
  autoRenew?: boolean(name='autoRenew', description='Specifies whether to enable monthly auto-renewal. The default value is false. Valid values:

*   true
*   false', example='false', position='Body'),
  chargeType: string(name='chargeType', description='The billing method of the instance. Valid values:

*   PrePaid: subscription
*   PostPaid: pay-as-you-go

>  This parameter is invalid for Hologres Shared Cluster instances. Hologres Shared Cluster instances have fixed specifications and are pay-as-you-go instances.

This parameter is required.', example='PostPaid', position='Body'),
  coldStorageSize?: long(name='coldStorageSize', description='The infrequent access (IA) storage space of the instance. Unit: GB.

>  This parameter is invalid for pay-as-you-go instances.', example='500', position='Body'),
  cpu?: long(name='cpu', description='The instance specifications. Valid values:

*   8-core 32GB (number of compute nodes: 1)
*   32-core 128GB (number of compute nodes: 2)
*   64-core 256GB (number of compute nodes: 4)
*   96-core 384GB (number of compute nodes: 6)
*   128-core 512GB (number of compute nodes: 8)
*   Others

> 

*   Set this parameter to the number of cores.

*   If you want to set this parameter to specifications with more than 1,024 GB, you must submit a ticket.

*   This parameter is invalid for Hologres Shared Cluster instances.

*   The specifications of 8-core 32GB (number of compute nodes: 1) are for trial use only and cannot be used for production.', example='64', position='Body'),
  duration?: long(name='duration', description='The validity period of the instance that you want to purchase. For example, you can specify a validity period of two months.

>  You do not need to configure this parameter for pay-as-you-go instances.', example='2', position='Body'),
  enableServerlessComputing?: boolean(name='enableServerlessComputing', description='Specifies whether to enable the Serverless Computing feature.

Valid values:

*   true
*   false', example='true', position='Body'),
  gatewayCount?: long(name='gatewayCount', description='The number of gateways. Valid values: 2 to 50.

>  This parameter is required only for virtual warehouse instances.', example='4', minimum=2, maximum=50, position='Body'),
  initialDatabases?: string(name='initialDatabases', description='The initial database.', example='chatbot', position='Body'),
  instanceName: string(name='instanceName', description='The name of the instance. The name must be 2 to 64 characters in length.

This parameter is required.', example='my_holo', position='Body'),
  instanceType: string(name='instanceType', description='The category of the instance. Valid values:

*   Standard: general-purpose instance
*   Follower: read-only secondary instance
*   Warehouse: virtual warehouse instance
*   Shared: Hologres Shared Cluster instance

This parameter is required.', example='Standard', position='Body'),
  leaderInstanceId?: string(name='leaderInstanceId', description='The ID of the primary instance. This parameter is required for read-only secondary instances.

>  The primary and secondary instances must meet the following requirements:

*   The primary instance is in the Running state.

*   The primary instance and secondary instances are deployed in the same region.

*   The primary instance and secondary instances are deployed in the same zone.

*   Less than 10 secondary instances are associated with the primary instance.

*   The primary instance and secondary instances belong to the same Alibaba Cloud account.', example='hgpostcn-cn-lbj3aworq112', position='Body'),
  pricingCycle?: string(name='pricingCycle', description='The billing cycle. Valid values:

*   Month
*   Hour

> 

*   This parameter can only be set to Month for subscription instances.

*   This parameter can only be set to Hour for pay-as-you-go instances.

*   By default, this parameter is set to Hour for Hologres Shared Cluster instances.', example='Month', position='Body'),
  regionId: string(name='regionId', description='The ID of the region. You can obtain region IDs in [Endpoints](https://www.alibabacloud.com/help/en/maxcompute/user-guide/endpoints).

This parameter is required.', example='cn-hangzhou', position='Body'),
  resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group. If you do not specify this parameter, the default resource group of the account is used.', example='""', position='Body'),
  storageSize?: long(name='storageSize', description='The standard storage space of the instance. Unit: GB.

>  This parameter is invalid for pay-as-you-go instances.', example='500', position='Body'),
  storageType?: string(name='storageType', position='Body'),
  vSwitchId: string(name='vSwitchId', description='The ID of the vSwitch. The zone in which the vSwitch resides must be the same as the zone in which the Hologres instance resides.

This parameter is required.', example='vsw-2vccsiymtxxxxxx', position='Body'),
  vpcId: string(name='vpcId', description='The ID of the virtual private cloud (VPC). The region in which the VPC resides must be the same as the region in which the Hologres instance resides.

This parameter is required.', example='vpc-t4netc3y5xxxx', position='Body'),
  zoneId: string(name='zoneId', description='The ID of the zone. For more information, see the "Operation description" section in this topic.

This parameter is required.', example='cn-hangzhou-h', position='Body'),
}

model CreateInstanceResponseBody = {
  data?: {
    code?: string(name='Code', description='The error code returned.', example='InvalidVpcOrVSwitch.NotAvailable'),
    instanceId?: string(name='InstanceId', description='The instance ID.', example='hgpostcn-cn-xxxxxx'),
    message?: string(name='Message', description='The error details.', example='Vpc is not available'),
    orderId?: string(name='OrderId', description='The order ID.', example='217523224780172'),
    success?: string(name='Success', description='Indicates whether the instance was created.

*   true
*   false', example='true'),
  }(name='Data', description='The returned data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='null'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='null'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9CC37B9F-F4B4-5FF1-939B-AEE78DC70130'),
}

model CreateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceResponseBody(name='body'),
}

/**
  * @description > Before you call this operation, make sure that you understand the billing method and pricing of Hologres because this operation is charged.
  * *   For more information about the billing details of Hologres, see [Pricing](https://www.alibabacloud.com/help/en/hologres/developer-reference/api-hologram-2022-06-01-createinstance).
  * *   When you purchase a Hologres instance, you must specify the region and zone in which the Hologres instance resides. A region may correspond to multiple zones. Example:
  * <!---->
  *     cn-hangzhou: cn-hangzhou-h, cn-hangzhou-j
  *        cn-shanghai: cn-shanghai-e, cn-shanghai-f
  *        cn-beijing: cn-beijing-i, cn-beijing-g
  *        cn-zhangjiakou: cn-zhangjiakou-b
  *        cn-shenzhen: cn-shenzhen-e
  *        cn-hongkong: cn-hongkong-b
  *        cn-shanghai-finance-1: cn-shanghai-finance-1z
  *        ap-northeast-1: ap-northeast-1a
  *        ap-southeast-1: ap-southeast-1c
  *        ap-southeast-3: ap-southeast-3b
  *        ap-southeast-5: ap-southeast-5b
  *        ap-south-1: ap-south-1b
  *        eu-central-1: eu-central-1a
  *        us-east-1: us-east-1a
  *        us-west-1: us-west-1b
  * @param request  the request parameters of CreateInstance  CreateInstanceRequest
  * @return CreateInstanceResponse
 */
async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstance', 'POST', '/api/v1/instances/create', 'json', false, 'json', request);
}

model DeleteHoloWarehouseRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='hgprecn-cn-i7m2v08uu00a', position='Path'),
  name: string(name='name', description='The name of the virtual warehouse.

This parameter is required.', example='my_warehouse', position='Body'),
}

model DeleteHoloWarehouseResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2A8DEF6E-067E-5DB0-BAE1-2894266E6C6A'),
}

model DeleteHoloWarehouseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteHoloWarehouseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteHoloWarehouse  DeleteHoloWarehouseRequest
  * @return DeleteHoloWarehouseResponse
 */
async function deleteHoloWarehouse(request: DeleteHoloWarehouseRequest): DeleteHoloWarehouseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteHoloWarehouse', 'POST', '/api/v1/instances/{instanceId}/deleteHoloWarehouse', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceId?: string(name='instanceId', description='The instance ID.', example='hgpostcn-cn-7mz2vmu30003', position='Path'),
  regionId?: string(name='RegionId', description='The ID of the region in which the Hologres instance resides.', example='cn-hangzhou', position='Query'),
}

model DeleteInstanceResponseBody = {
  data?: boolean(name='Data', description='The returned result, which indicates whether the request was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='null'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='null'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status Code', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CB13FFDD-2DF8-5396-A848-2D6A31245B6D'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DeleteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceResponseBody(name='body'),
}

/**
  * @description > Before you call this operation, read the documentation and make sure that you understand the prerequisites and impacts of this operation.
  * *   After you delete a Hologres instance, data and objects in the instance cannot be restored. Proceed with caution. For more information, see [Billing overview](https://www.alibabacloud.com/help/zh/hologres/product-overview/billing-overview?spm=a2c63.p38356.0.0.efc33b87i5pDl7).
  * *   You can delete only pay-as-you-go instances.
  * @param request  the request parameters of DeleteInstance  DeleteInstanceRequest
  * @return DeleteInstanceResponse
 */
async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstance', 'POST', '/api/v1/instances/{instanceId}/delete', 'json', false, 'json', request);
}

model DisableHiveAccessRequest {
  instanceId?: string(name='instanceId', description='The instance ID.', example='hgprecn-cn-tl330rv9k00e', position='Path'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-beijing', position='Query'),
}

model DisableHiveAccessResponseBody = {
  data?: boolean(name='Data', description='The returned result.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='404'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='82B7A554-4D00-50DF-95D9-B59E7B4D5489'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
}

model DisableHiveAccessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableHiveAccessResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableHiveAccess  DisableHiveAccessRequest
  * @return DisableHiveAccessResponse
 */
async function disableHiveAccess(request: DisableHiveAccessRequest): DisableHiveAccessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DisableHiveAccess', 'POST', '/api/v1/instances/{instanceId}/disableHiveAccess', 'json', false, 'json', request);
}

model EnableHiveAccessRequest {
  instanceId?: string(name='instanceId', description='The instance ID.', example='hgpostcn-cn-zpr3426vm002', position='Path'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model EnableHiveAccessResponseBody = {
  data?: boolean(name='Data', description='The returned data.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='404'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='EA8F0084-5831-5907-BB31-BD05D2617844'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model EnableHiveAccessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableHiveAccessResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableHiveAccess  EnableHiveAccessRequest
  * @return EnableHiveAccessResponse
 */
async function enableHiveAccess(request: EnableHiveAccessRequest): EnableHiveAccessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EnableHiveAccess', 'POST', '/api/v1/instances/{instanceId}/enableHiveAccess', 'json', false, 'json', request);
}

model GetInstanceRequest {
  instanceId?: string(name='instanceId', description='The ID of the instance. This parameter is required.', example='hgprecn-cn-i7m2v08uu00a', position='Path'),
}

model GetInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code that is returned if the request failed.', example='404'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  instance?: {
    autoRenewal?: string(name='AutoRenewal', description='Indicates whether auto-renewal is enabled.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
    coldStorage?: long(name='ColdStorage', description='The cold storage capacity of the instance. Unit: GB. Standard SSD is used for hot storage, and HDD is used for cold storage.', example='800'),
    commodityCode?: string(name='CommodityCode', description='The commodity code.

Valid values:

*   hologram_maxcomputeAccelerate_public_cn

    <!-- -->

    :

    <!-- -->

    China site/Lakehouse Acceleration Edition

    <!-- -->

    .

*   hologram_combo_public_cn

    <!-- -->

    :

    <!-- -->

    China site/Subscription

    <!-- -->

    .

*   hologram_prepay_public_intl

    <!-- -->

    :

    <!-- -->

    International site/Subscription

    <!-- -->

    .

*   hologram_storage_dp_cn

    <!-- -->

    :

    <!-- -->

    China site/Storage plan

    <!-- -->

    .

*   hologram_postpay_public_cn

    <!-- -->

    :

    <!-- -->

    China site/Pay-as-you-go

    <!-- -->

    .

*   hologram_postpay_public_intl

    <!-- -->

    :

    <!-- -->

    International site/Pay-as-you-go

    <!-- -->

*   hologram_maxcomputeAccelerate_public_intl

    <!-- -->

    :

    <!-- -->

    International site/Lakehouse Acceleration Edition

    <!-- -->

    .

*   hologram_cu_dp_cn

    <!-- -->

    :

    <!-- -->

    China site/Compute plan

    <!-- -->', example='hologram_combo_public_cn'),
    computeNodeCount?: long(name='ComputeNodeCount', description='The number of compute nodes. In a typical configuration, a node has 16 CPU cores and 32 GB of memory.', example='2'),
    cpu?: long(name='Cpu', description='The number of CPU cores.', example='32'),
    creationTime?: string(name='CreationTime', description='The time when the instance was created.', example='2021-02-03T13:06:06Z'),
    disk?: string(name='Disk', description='The amount of data that can be stored in the disk of the Standard storage class. Unit: GB.', example='500'),
    enableHiveAccess?: string(name='EnableHiveAccess', description='Indicates whether data lake acceleration is enabled.', example='true'),
    enableServerless?: boolean(name='EnableServerless', description='EnableServerless', example='true'),
    endpoints?: [ 
      {
        alternativeEndpoints?: string(name='AlternativeEndpoints', description='The endpoint. This parameter is returned if both the AnyTunnel and SingleTunnel modes are enabled for an instance, and the instance is switched from the AnyTunnel mode to the SingleTunnel mode. In this case, two endpoints are returned.', example='hgprecn-cn-uqm362o1b001-cn-hangzhou-internal.hologres.aliyuncs.com:80'),
        enabled?: boolean(name='Enabled', description='Indicates whether the network is enabled.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
        endpoint?: string(name='Endpoint', description='The endpoint.', example='hgprecn-cn-uqm362o1b001-cn-hangzhou-internal.hologres.aliyuncs.com:80'),
        type?: string(name='Type', description='The network type.

Valid values:

*   VPCSingleTunnel

    <!-- -->

    :

    <!-- -->

    virtual private cloud (VPC)

    <!-- -->

    .

*   Intranet

    <!-- -->

    :

    <!-- -->

    internal network

    <!-- -->

    .

*   VPCAnyTunnel

    <!-- -->

    :

    <!-- -->

    not supported by new instances

    <!-- -->

*   Internet

    <!-- -->

    :

    <!-- -->

    Internet

    <!-- -->

    .', example='Internet'),
        vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-bp1jqwp2ys6kp7tc9t983'),
        vpcId?: string(name='VpcId', description='The ID of the VPC to which the instance belongs.', example='vpc-uf66jjber3hgvwhki3wna'),
        vpcInstanceId?: string(name='VpcInstanceId', description='The ID of the instance that is deployed in the VPC.', example='hgprecn-cn-uqm362o1b001-frontend-st'),
      }
    ](name='Endpoints', description='The list of endpoints.'),
    expirationTime?: string(name='ExpirationTime', description='The expiration time. This parameter is invalid for pay-as-you-go instances.', example='2021-02-03T13:06:06Z'),
    gatewayCount?: long(name='GatewayCount', description='The number of gateway nodes.', example='2'),
    gatewayCpu?: long(name='GatewayCpu', description='The number of CPU cores of the gateway. Unit: core.', example='4'),
    gatewayMemory?: long(name='GatewayMemory', description='The size of memory resources of the gateway. Unit: GB.', example='16'),
    instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance.

Valid values:

*   PostPaid

    <!-- -->

    :

    <!-- -->

    pay-as-you-go

    <!-- -->

    .

*   PrePaid

    <!-- -->

    :

    <!-- -->

    subscription

    <!-- -->

    .', example='PrePaid'),
    instanceId?: string(name='InstanceId', description='The instance ID.', example='hgpostcn-cn-tl32s6cgw00b'),
    instanceName?: string(name='InstanceName', description='The instance name. The instance name must be 2 to 64 characters in length.', example='test'),
    instanceOwner?: string(name='InstanceOwner', description='The owner of the instance.', example='12345678900000'),
    instanceStatus?: string(name='InstanceStatus', description='The status of the instance.

Valid values:

*   Creating

    <!-- -->

    <!-- -->

    <!-- -->

*   Running

    <!-- -->

    <!-- -->

    <!-- -->

*   Suspended

    <!-- -->

    <!-- -->

    <!-- -->

*   Allocating

    <!-- -->

    <!-- -->

    <!-- -->', example='Running'),
    instanceType?: string(name='InstanceType', description='The type of the instance.

Valid values:

*   Follower

    <!-- -->

    :

    <!-- -->

    read-only secondary instance

    <!-- -->

    .

*   Standard

    <!-- -->

    :

    <!-- -->

    normal instance

    <!-- -->

    .', example='Standard'),
    leaderInstanceId?: string(name='LeaderInstanceId', description='The ID of the primary instance.', example='hgpostcn-cn-i7m2ncd6w002'),
    memory?: long(name='Memory', description='The memory size. Unit: GB.', example='128'),
    regionId?: string(name='RegionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
    replicaRole?: string(name='ReplicaRole', description='Disaster recovery instance role. 
* Active: Primary disaster recovery instance.
* Passive: Disaster tolerance instance.
* PreActive: Primary disaster recovery instance not yet in final state.', example='Active'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aekzuq7hpybze2i'),
    storageType?: string(name='StorageType', description='The storage type.

*   redundant: 3 copies
*   local: single copy', example='redundant'),
    suspendReason?: string(name='SuspendReason', description='The reason for the suspension.

Valid values:

*   Indebet

    <!-- -->

    :

    <!-- -->

    The instance has an overdue payment

    <!-- -->

    .

*   Manual

    <!-- -->

    :

    <!-- -->

    The instance is manually suspended

    <!-- -->

    .

*   Overdue

    <!-- -->

    :

    <!-- -->

    The instance has expired

    <!-- -->

    .', example='Manual'),
    tags?: [ 
      {
        key?: string(name='Key', description='The key of tag N.', example='tag'),
        value?: string(name='Value', description='The value of tag N.', example='value'),
      }
    ](name='Tags', description='The instance tag.'),
    version?: string(name='Version', description='The instance version.', example='r1.3.37'),
    zoneId?: string(name='ZoneId', description='The ID of the zone where the instance resides.', example='cn-hangzhou-h'),
  }(name='Instance', description='The information about the instance.'),
  requestId?: string(name='RequestId', description='The request ID.', example='865A02C2-B374-5DD4-9B34-0CA15DA1AEBD'),
  success?: boolean(name='Success', description='The request result, which indicates whether the request was successful.', example='true'),
}

model GetInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstance  GetInstanceRequest
  * @return GetInstanceResponse
 */
async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstance', 'GET', '/api/v1/instances/{instanceId}', 'json', false, 'json', request);
}

model GetWarehouseDetailRequest {
  instanceId?: string(name='instanceId', description='The instance ID.', example='hgprecn-cn-i7m2ucpyu005', position='Path'),
}

model GetWarehouseDetailResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D3AE84AB-0873-5FC7-A4C4-8CF869D2FA70'),
  warehouseDetail?: {
    remainingCpu?: string(name='RemainingCpu', description='The remaining unallocated computing resources of the virtual warehouse instance.', example='32'),
    reservedCpu?: string(name='ReservedCpu', description='The reserved computing resources. The amount of computing resources in all running virtual warehouses in an instance cannot exceed the amount of reserved computing resources in the virtual warehouses.', example='64'),
    timedElasticCpu?: string(name='TimedElasticCpu'),
    warehouseList?: [ 
      {
        cpu?: long(name='Cpu', description='The number of CPU cores.', example='32'),
        defaultWarehouse?: boolean(name='DefaultWarehouse'),
        elasticCpu?: long(name='ElasticCpu'),
        id?: long(name='Id', description='The ID.', example='2'),
        mem?: long(name='Mem', description='The memory capacity.', example='128'),
        name?: string(name='Name', description='The name of the virtual warehouse instance.', example='MyWarehouse'),
        nodeCount?: long(name='NodeCount', description='The number of compute nodes.', example='2'),
        rebalanceStatus?: string(name='RebalanceStatus'),
        status?: string(name='Status', description='The status.

Valid values:

*   kRunning

    <!-- -->

    <!-- -->

    <!-- -->

*   kSuspended

    <!-- -->

    <!-- -->

    <!-- -->

*   kInit

    <!-- -->

    <!-- -->

    <!-- -->

*   kFailed

    <!-- -->

    <!-- -->

    <!-- -->

*   kAllocating

    <!-- -->

    <!-- -->

    <!-- -->', example='kRunning'),
      }
    ](name='WarehouseList', description='The list of virtual warehouses.'),
  }(name='WarehouseDetail', description='The returned values.'),
}

model GetWarehouseDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWarehouseDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetWarehouseDetail  GetWarehouseDetailRequest
  * @return GetWarehouseDetailResponse
 */
async function getWarehouseDetail(request: GetWarehouseDetailRequest): GetWarehouseDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWarehouseDetail', 'GET', '/api/v1/instances/{instanceId}/getWarehouseDetail', 'json', false, 'json', request);
}

model ListBackupDataRequest {
  backupType?: string(name='backupType', description='The backup type. Specific backup data is filtered based on the type. If you leave this parameter empty, all backup data is returned.

Valid values:

*   redundant_remote
*   remote
*   redundant
*   full_remote
*   local
*   full', example='redundant', position='Query'),
  instanceId?: string(name='instanceId', description='The instance ID.', example='hgprecn-cn-wwoxxxxx', position='Query'),
}

model ListBackupDataResponseBody = {
  backupDataList?: [ 
    {
      backupType?: string(name='BackupType', description='The backup type. In general, the following two types are supported: local backup and remote backup. In the local backup type, snapshots reside in the same region as your instance. The following two sub-types are available: full (single backup, single replica) and redundant (zone-redundant storage, multiple replicas). In the remote backup type, snapshots and your instance reside in different regions. Remote backups are the replicas of the backups of the full or redundant type in another region. The values local and remote do not represent specific types, but are used only for data filtering. The value local indicates all local backups, and the value remote indicates all remote backups.', example='redundant'),
      coldDataSize?: long(name='ColdDataSize', description='The size of cold data. Unit: bytes.', example='32413521'),
      dataDesc?: string(name='DataDesc', description='The description of the backup data.', example='demo'),
      dataGran?: string(name='DataGran', description='The backup granularity.

Valid values:

*   instance', example='instance'),
      dataSize?: long(name='DataSize', description='The size of the backup data. Unit: bytes.', example='76085723136'),
      dataTime?: string(name='DataTime', description='The snapshot time. The value format of this parameter follows the same standard as that of the StartTime parameter.', example='2024-10-28T12:23:37.000+00:00'),
      endTime?: string(name='EndTime', description='The end time of the backup task. The value format of this parameter follows the same standard as that of the StartTime parameter.', example='2024-10-28T12:27:34.000+00:00'),
      id?: long(name='Id', description='The unique ID of the backup.', example='1780805690994479105'),
      instanceId?: string(name='InstanceId', description='The instance ID.', example='hgpostcn-cn-pe33jdxxxxx'),
      instanceName?: string(name='InstanceName', description='The name of the instance.', example='my-hologres-dw'),
      instanceRegion?: string(name='InstanceRegion', description='The region in which the instance resides.', example='cn-hangzhou'),
      instanceType?: string(name='InstanceType', description='The type of the instance.

Valid values:

*   Warehouse: virtual warehouse instance
*   Standard: general-purpose instance', example='Warehouse'),
      instanceZoneId?: string(name='InstanceZoneId', description='The zone in which the instance resides.', example='cn-hangzhou-j'),
      snapshotRegion?: string(name='SnapshotRegion', description='The region in which the backup data resides.', example='cn-hangzhou'),
      snapshotZoneId?: string(name='SnapshotZoneId', description='The zone in which the backup data resides. In zone-redundant storage mode, backup data is stored in different zones, including the current zone.', example='cn-hangzhou-j'),
      startTime?: string(name='StartTime', description='The start time of the backup task. The time follows the ISO 8601 standard in the YYYY-MM-DDTHH:mm:ss.SSSTZ format. The time is displayed in UTC (the same below).', example='2024-10-28T11:19:56.000+00:00'),
      status?: string(name='Status', description='The status of the backup task.

Valid values:

*   processing
*   completed
*   failed', example='completed'),
      triggerType?: string(name='TriggerType', description='The mode in which the backup task is triggered.

Valid values:

*   scheduled: periodic backup
*   manual: manual backup', example='scheduled'),
    }
  ](name='BackupDataList', description='The backups.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4AA0C48F-B5BB-5FF9-A43B-6B91E0715D46'),
}

model ListBackupDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBackupDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListBackupData  ListBackupDataRequest
  * @return ListBackupDataResponse
 */
async function listBackupData(request: ListBackupDataRequest): ListBackupDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListBackupData', 'GET', '/api/v1/backups', 'json', false, 'json', request);
}

model ListInstancesRequest {
  cmsInstanceType?: string(name='cmsInstanceType', example='standard', position='Body'),
  resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group.', example='rg-acfmvscak73zmby', position='Body'),
  tag?: [ 
    {
      key?: string(name='key', description='The tag key.', example='mytag'),
      value?: string(name='value', description='The tag value.', example='value'),
    }
  ](name='tag', description='The tags to add to the resource.', position='Body'),
}

model ListInstancesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='404'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  instanceList?: [ 
    {
      commodityCode?: string(name='CommodityCode', description='The commodity code, which is the same as that on the Billing Management page.', example='hologram_postpay_public_cn'),
      creationTime?: string(name='CreationTime', description='The time when the cluster was created.', example='2022-12-16T02:24:05Z'),
      enableHiveAccess?: string(name='EnableHiveAccess', description='Indicates whether lakehouse acceleration is enabled.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
      endpoints?: [ 
        {
          enabled?: boolean(name='Enabled', description='Indicates whether the endpoint is enabled.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
          endpoint?: string(name='Endpoint', description='The endpoint.', example='hgpostcn-cn-aaab9ad2d8fb-cn-hangzhou-internal.hologres.aliyuncs.com:80'),
          type?: string(name='Type', description='The network type.

Valid values:

*   VPCSingleTunnel

    <!-- -->

    :

    <!-- -->

    virtual private cloud (VPC)

    <!-- -->

    .

*   Intranet

    <!-- -->

    :

    <!-- -->

    internal network

    <!-- -->

*   VPCAnyTunnel

    <!-- -->

    : This value is not supported by new instances

    <!-- -->

    <!-- -->

    .

*   Internet

    <!-- -->

    :

    <!-- -->

    Internet

    <!-- -->

    .', example='Internet'),
          vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-wz9oap28raidjevhuszg4'),
          vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-uf6mrahzyu7uorlqqpz5f'),
          vpcInstanceId?: string(name='VpcInstanceId', description='The ID of the VPC to which the instance belongs.', example='hgpostcn-cn-wwo3665tx004-frontend-st'),
        }
      ](name='Endpoints', description='The list of endpoints.'),
      expirationTime?: string(name='ExpirationTime', description='The time when the cluster expires.', example='2023-05-04T16:00:00.000Z'),
      instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Valid values:

Valid values:

*   PostPaid

    <!-- -->

    :

    <!-- -->

    pay-as-you-go

    <!-- -->

    .

*   PrePaid

    <!-- -->

    :

    <!-- -->

    subscription

    <!-- -->

    .', example='PrePaid'),
      instanceId?: string(name='InstanceId', description='The instance ID.', example='hgpostcn-cn-aaab9ad2d8fb'),
      instanceName?: string(name='InstanceName', description='The name of the instance.', example='test_instance'),
      instanceStatus?: string(name='InstanceStatus', description='The status of the instance.

Valid values:

*   Creating

    <!-- -->

    <!-- -->

    <!-- -->

*   Running

    <!-- -->

    <!-- -->

    <!-- -->

*   Suspended

    <!-- -->

    <!-- -->

    <!-- -->

*   Allocating

    <!-- -->

    <!-- -->

    <!-- -->', example='Running'),
      instanceType?: string(name='InstanceType', description='The type of the instance.

Valid values:

*   Follower

    <!-- -->

    :

    <!-- -->

    read-only secondary instance

    <!-- -->

    .

*   Standard

    <!-- -->

    :

    <!-- -->

    normal instance

    <!-- -->

    .', example='Standard'),
      leaderInstanceId?: string(name='LeaderInstanceId', description='The ID of the primary instance.', example='hgprecn-cn-2r42sqvxm006'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmvscak73zmby'),
      storageType?: string(name='StorageType'),
      suspendReason?: string(name='SuspendReason', description='The reason for the suspension.', example='Manual'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='tag'),
          value?: string(name='Value', description='The tag value.', example='value'),
        }
      ](name='Tags', description='The tags that are added to the resource.'),
      version?: string(name='Version', description='The version of the cluster.', example='1.3.37'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
    }
  ](name='InstanceList', description='The instances.'),
  requestId?: string(name='RequestId', description='The request ID.', example='D1303CD4-AA70-5998-8025-F55B22C50840'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstances  ListInstancesRequest
  * @return ListInstancesResponse
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstances', 'POST', '/api/v1/instances', 'json', false, 'json', request);
}

model ListWarehousesRequest {
  instanceId?: string(name='instanceId', description='The instance ID.', example='hgpostcn-cn-x0r382joi001', position='Path'),
}

model ListWarehousesResponseBody = {
  warehouseList?: [ 
    {
      cpu?: long(name='Cpu', description='The number of CPU cores.', example='32'),
      id?: long(name='Id', description='The ID.', example='3'),
      mem?: long(name='Mem', description='The memory capacity.', example='128'),
      name?: string(name='Name', description='The name of the virtual warehouse instance.', example='MyWarehouse'),
      nodeCount?: long(name='NodeCount', description='The number of compute nodes.', example='2'),
      status?: string(name='Status', description='The status.

Valid values:

*   kRunning

    <!-- -->

    <!-- -->

    <!-- -->

*   kSuspended

    <!-- -->

    <!-- -->

    <!-- -->

*   kInit

    <!-- -->

    <!-- -->

    <!-- -->

*   kFailed

    <!-- -->

    <!-- -->

    <!-- -->

*   kAllocating

    <!-- -->

    <!-- -->

    <!-- -->', example='kRunning'),
    }
  ](name='WarehouseList', description='The list of virtual warehouse instances.'),
  requestId?: string(name='requestId', description='The request ID.', example='819A7F0F-2951-540F-BD94-6A41ECF0281F'),
}

model ListWarehousesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWarehousesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWarehouses  ListWarehousesRequest
  * @return ListWarehousesResponse
 */
async function listWarehouses(request: ListWarehousesRequest): ListWarehousesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWarehouses', 'GET', '/api/v1/instances/{instanceId}/listWarehouses', 'json', false, 'json', request);
}

model RebalanceHoloWarehouseRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='hgprecn-cn-i7m2v08uu00a', position='Path'),
  name: string(name='name', description='The name of the virtual warehouse.

This parameter is required.', example='test_oss', position='Body'),
}

model RebalanceHoloWarehouseResponseBody = {
  data?: string(name='Data', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
  requestId?: string(name='RequestId', description='Id of the request', example='C0EA5844-AB00-5653-8711-CD9FD1798412'),
}

model RebalanceHoloWarehouseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RebalanceHoloWarehouseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RebalanceHoloWarehouse  RebalanceHoloWarehouseRequest
  * @return RebalanceHoloWarehouseResponse
 */
async function rebalanceHoloWarehouse(request: RebalanceHoloWarehouseRequest): RebalanceHoloWarehouseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RebalanceHoloWarehouse', 'POST', '/api/v1/instances/{instanceId}/rebalanceHoloWarehouse', 'json', false, 'json', request);
}

model RenameHoloWarehouseRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='hgprecn-cn-i7m2v08uu00a', position='Path'),
  name: string(name='name', description='The original name of the virtual warehouse.

This parameter is required.', example='my_warehouse', position='Body'),
  newWarehouseName: string(name='newWarehouseName', description='The new name of the virtual warehouse.

This parameter is required.', example='new_name', position='Body'),
}

model RenameHoloWarehouseResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
  requestId?: string(name='RequestId', description='Id of the request', example='2A8DEF6E-067E-5DB0-BAE1-2894266E6C6A'),
}

model RenameHoloWarehouseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenameHoloWarehouseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RenameHoloWarehouse  RenameHoloWarehouseRequest
  * @return RenameHoloWarehouseResponse
 */
async function renameHoloWarehouse(request: RenameHoloWarehouseRequest): RenameHoloWarehouseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RenameHoloWarehouse', 'POST', '/api/v1/instances/{instanceId}/renameHoloWarehouse', 'json', false, 'json', request);
}

model RenewInstanceRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.

This parameter is required.', example='hgprecn-cn-i7m2v08uu00a', position='Path'),
  autoRenew?: boolean(name='autoRenew', description='Specifies whether to enable monthly auto-renewal. The default value is false. Valid values:

*   true
*   false

>  If you enable auto-renewal for an instance for which auto-renewal is enabled, an error is reported.', example='true', position='Body'),
  duration: int32(name='duration', description='The renewal duration. Unit: month.

This parameter is required.', example='2', position='Body'),
}

model RenewInstanceResponseBody = {
  data?: {
    code?: string(name='Code', description='The error code returned.', example='InvalidChargeType.UnRenewable'),
    message?: string(name='Message', description='The error details.', example='InvalidChargeType.UnRenewable'),
    orderId?: string(name='OrderId', description='The ID of the order.', example='221625608580893'),
    success?: boolean(name='Success', description='Indicates whether the renewal was successful.

*   true
*   false', example='true'),
  }(name='Data', description='The returned data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='null'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='null'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D3AE84AB-0873-5FC7-A4C4-8CF869D2FA70'),
  success?: string(name='Success', description='The request result, which indicates whether the request was successful.', example='false'),
}

model RenewInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenewInstanceResponseBody(name='body'),
}

/**
  * @description >  Before you call this operation, make sure that you understand the billing method and pricing of Hologres because this operation is charged.
  * *   For more information about the billing of Hologres, see [Billing overview](https://www.alibabacloud.com/help/zh/hologres/product-overview/billing-overview).
  * *   For more information about how to renew a Hologres instance, see [Manage renewals](https://www.alibabacloud.com/help/zh/hologres/product-overview/manage-renewals?spm=a2c63.p38356.0.0.38e731c9VAwtDP).
  * *   You can renew only subscription instances.
  * @param request  the request parameters of RenewInstance  RenewInstanceRequest
  * @return RenewInstanceResponse
 */
async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RenewInstance', 'POST', '/api/v1/instances/{instanceId}/renew', 'json', false, 'json', request);
}

model RestartHoloWarehouseRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='hgprecn-cn-i7m2v08uu00a', position='Path'),
  name: string(name='name', description='The name of the virtual warehouse.

This parameter is required.', example='my_warehouse', position='Body'),
}

model RestartHoloWarehouseResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
  requestId?: string(name='RequestId', description='Id of the request', example='2A8DEF6E-067E-5DB0-BAE1-2894266E6C6A'),
}

model RestartHoloWarehouseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartHoloWarehouseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RestartHoloWarehouse  RestartHoloWarehouseRequest
  * @return RestartHoloWarehouseResponse
 */
async function restartHoloWarehouse(request: RestartHoloWarehouseRequest): RestartHoloWarehouseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RestartHoloWarehouse', 'POST', '/api/v1/instances/{instanceId}/restartHoloWarehouse', 'json', false, 'json', request);
}

model RestartInstanceRequest {
  instanceId?: string(name='instanceId', description='The instance ID.', example='hgprecn-cn-i7m2ucpyu005', position='Path'),
}

model RestartInstanceResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the operation was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='404'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='36291497-CDB0-53DC-8CD7-762E054F57A6'),
  success?: boolean(name='Success', description='The request result, which indicates whether the request was successful.', example='true'),
}

model RestartInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RestartInstance  RestartInstanceRequest
  * @return RestartInstanceResponse
 */
async function restartInstance(request: RestartInstanceRequest): RestartInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RestartInstance', 'POST', '/api/v1/instances/{instanceId}/restart', 'json', false, 'json', request);
}

model ResumeHoloWarehouseRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='hgprecn-cn-i7m2v08uu00a', position='Path'),
  name: string(name='name', description='The name of the virtual warehouse.

This parameter is required.', example='my_warehouse', position='Body'),
}

model ResumeHoloWarehouseResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
  requestId?: string(name='RequestId', description='Id of the request', example='2A8DEF6E-067E-5DB0-BAE1-2894266E6C6A'),
}

model ResumeHoloWarehouseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResumeHoloWarehouseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResumeHoloWarehouse  ResumeHoloWarehouseRequest
  * @return ResumeHoloWarehouseResponse
 */
async function resumeHoloWarehouse(request: ResumeHoloWarehouseRequest): ResumeHoloWarehouseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ResumeHoloWarehouse', 'POST', '/api/v1/instances/{instanceId}/resumeHoloWarehouse', 'json', false, 'json', request);
}

model ResumeInstanceRequest {
  instanceId?: string(name='instanceId', description='The instance ID.', example='hgpostcn-cn-j672yny9g001', position='Path'),
}

model ResumeInstanceResponseBody = {
  data?: boolean(name='Data', description='The returned result, which indicates whether the operation was successful.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='404'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='D3AE84AB-0873-5FC7-A4C4-8CF869D2FA70'),
  success?: boolean(name='Success', description='The request result, which indicates whether the request was successful.', example='true'),
}

model ResumeInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResumeInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResumeInstance  ResumeInstanceRequest
  * @return ResumeInstanceResponse
 */
async function resumeInstance(request: ResumeInstanceRequest): ResumeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ResumeInstance', 'POST', '/api/v1/instances/{instanceId}/resume', 'json', false, 'json', request);
}

model ScaleHoloWarehouseRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='hgprecn-cn-i7m2v08uu00a', position='Path'),
  cpu: long(name='cpu', description='The specifications of the virtual warehouse. The number of vCPUs must be an integer multiple of 16.

This parameter is required.', example='64', position='Body'),
  name: string(name='name', description='The name of the virtual warehouse.

This parameter is required.', example='my_warehouse', position='Body'),
}

model ScaleHoloWarehouseResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
  requestId?: string(name='RequestId', description='Id of the request', example='2A8DEF6E-067E-5DB0-BAE1-2894266E6C6A'),
}

model ScaleHoloWarehouseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ScaleHoloWarehouseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ScaleHoloWarehouse  ScaleHoloWarehouseRequest
  * @return ScaleHoloWarehouseResponse
 */
async function scaleHoloWarehouse(request: ScaleHoloWarehouseRequest): ScaleHoloWarehouseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ScaleHoloWarehouse', 'POST', '/api/v1/instances/{instanceId}/scaleHoloWarehouse', 'json', false, 'json', request);
}

model ScaleInstanceRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.

This parameter is required.', example='hgprecn-cn-xxxxxxx', position='Path'),
  coldStorageSize?: long(name='coldStorageSize', description='The infrequent access (IA) storage space of the instance. Unit: GB.

> Ignore this parameter for pay-as-you-go instances.', example='1000G', position='Body'),
  cpu?: long(name='cpu', description='The specifications of the instance. Valid values:

*   8-core 32GB (number of compute nodes: 1)
*   16-core 64GB (number of compute nodes: 1)
*   32-core 128GB (number of compute nodes: 2)
*   64-core 256GB (number of compute nodes: 4)
*   96-core 384GB (number of compute nodes: 6)
*   128-core 512GB (number of compute nodes: 8)
*   Others

> 

*   Set this parameter to the number of cores.

*   If you want to set this parameter to specifications with more than 1,024 compute units (CUs), you must submit a ticket.

*   This parameter is invalid for Hologres Shared Cluster instances.

*   The specifications of 8-core 32GB (number of compute nodes: 1) are for trial use only and cannot be used for production.', example='128', position='Body'),
  enableServerlessComputing?: boolean(name='enableServerlessComputing', description='是否开启ServerlessComputing', example='true', position='Body'),
  gatewayCount?: long(name='gatewayCount', description='The number of gateways. Valid values: 2 to 50.

> This parameter is required only for virtual warehouse instances.', example='4', position='Body'),
  scaleType: string(name='scaleType', description='The specification change type. Valid values:

*   UPGRADE
*   DOWNGRADE

> 

*   If you set this parameter to UPGRADE, the new specifications must be higher than the original specifications. You must configure at least one of the cpu, storageSize, and coldStorageSize parameters. If you leave a parameter empty, the related configuration remains unchanged.

*   If you set this parameter to DOWNGRADE, the new specifications must be lower than the original specifications. You must configure at least one of the cpu, storageSize, and coldStorageSize parameters. If you leave a parameter empty, the related configuration remains unchanged.

This parameter is required.', example='UPGRADE', position='Body'),
  storageSize?: long(name='storageSize', description='The standard storage space of the instance. Unit: GB.

> Ignore this parameter for pay-as-you-go instances.', example='1000G', position='Body'),
}

model ScaleInstanceResponseBody = {
  data?: {
    code?: string(name='Code', description='The error code returned.', example='InvalidScaleType.Unsupported'),
    message?: string(name='Message', description='The error details.', example='null'),
    orderId?: string(name='OrderId', description='The ID of the order.', example='219183853450000'),
    success?: boolean(name='Success', description='Indicates whether the change to specifications was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
  }(name='Data', description='The returned data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='null'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='null'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D3AE84AB-0873-5FC7-A4C4-8CF869D2FA70'),
}

model ScaleInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ScaleInstanceResponseBody(name='body'),
}

/**
  * @description > Before you call this operation, make sure that you understand the billing method and pricing of Hologres because this operation is charged.
  * *   For more information about the billing of Hologres, see [Billing overview](https://www.alibabacloud.com/help/zh/hologres/product-overview/billing-overview).
  * *   During the change of computing resource specifications of a Hologres instance, the instance is unavailable. During the change of storage resource specifications of a Hologres instance, the instance can work normally. Do not frequently change instance specifications. For more information, see [Upgrade or downgrade instance specifications](https://www.alibabacloud.com/help/en/hologres/product-overview/upgrade-or-downgrade-instance-specifications).
  * @param request  the request parameters of ScaleInstance  ScaleInstanceRequest
  * @return ScaleInstanceResponse
 */
async function scaleInstance(request: ScaleInstanceRequest): ScaleInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ScaleInstance', 'POST', '/api/v1/instances/{instanceId}/scale', 'json', false, 'json', request);
}

model StopInstanceRequest {
  instanceId?: string(name='instanceId', description='The instance ID.', example='hgpostcn-cn-lbj33559x001', position='Path'),
}

model StopInstanceResponseBody = {
  data?: boolean(name='Data', description='The returned result, which indicates whether the operation was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='404'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='2A8DEF6E-067E-5DB0-BAE1-2894266E6C6A'),
  success?: boolean(name='Success', description='The request result, which indicates whether the request was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
}

model StopInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopInstance  StopInstanceRequest
  * @return StopInstanceResponse
 */
async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopInstance', 'POST', '/api/v1/instances/{instanceId}/stop', 'json', false, 'json', request);
}

model SuspendHoloWarehouseRequest {
  instanceId: string(name='instanceId', description='The instance ID.

This parameter is required.', example='hgprecn-cn-i7m2v08uu00a', position='Path'),
  name: string(name='name', description='The name of the virtual warehouse.

This parameter is required.', example='my_warehouse', position='Body'),
}

model SuspendHoloWarehouseResponseBody = {
  data?: string(name='Data', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
  requestId?: string(name='RequestId', description='Id of the request', example='2A8DEF6E-067E-5DB0-BAE1-2894266E6C6A'),
}

model SuspendHoloWarehouseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SuspendHoloWarehouseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SuspendHoloWarehouse  SuspendHoloWarehouseRequest
  * @return SuspendHoloWarehouseResponse
 */
async function suspendHoloWarehouse(request: SuspendHoloWarehouseRequest): SuspendHoloWarehouseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SuspendHoloWarehouse', 'POST', '/api/v1/instances/{instanceId}/suspendHoloWarehouse', 'json', false, 'json', request);
}

model UpdateInstanceNameRequest {
  instanceId?: string(name='instanceId', description='The instance ID.', example='hgpostcn-cn-zpr30pupt004', position='Path'),
  instanceName?: string(name='instanceName', description='The new name of the instance. The name must be 2 to 64 characters in length.', example='new_name', position='Body'),
}

model UpdateInstanceNameResponseBody = {
  data?: boolean(name='Data', description='The returned result, which indicates whether the operation was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='404'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='C6B55032-D41A-5FE0-9C07-8BD81C88422E'),
  success?: boolean(name='Success', description='The request result, which indicates whether the request was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
}

model UpdateInstanceNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateInstanceName  UpdateInstanceNameRequest
  * @return UpdateInstanceNameResponse
 */
async function updateInstanceName(request: UpdateInstanceNameRequest): UpdateInstanceNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstanceName', 'POST', '/api/v1/instances/{instanceId}/instanceName', 'json', false, 'json', request);
}

model UpdateInstanceNetworkTypeRequest {
  instanceId?: string(name='instanceId', description='The instance ID.', example='hgprecn-cn-lbj35pw74002', position='Path'),
  anyTunnelToSingleTunnel?: string(name='anyTunnelToSingleTunnel', description='Specifies whether to change the network type from AnyTunnel to SingleTunnel. This parameter is invalid for new instances. For new instances, this parameter is set to null by default.

Valid values:

*   others/null: The network type is not changed from AnyTunnel to SingleTunnel.
*   true: The network type is changed from AnyTunnel to SingleTunnel.', example='true', position='Body'),
  networkTypes?: string(name='networkTypes', description='A list of network types that you want to enable. The network types are randomly ordered in the list. For example, the Internet, Intranet, and VPCSingleTunnel network types are enabled. If you want to disable the Internet type, set this parameter to Intranet,VPCSingleTunnel.

Valid values:

*   VPCSingleTunnel: virtual private cloud (VPC).
*   Intranet: internal network.
*   VPCAnyTunnel: compatibility requirements. This value is not supported by new instances.
*   Internet: Internet.', example='Internet,VPCSingleTunnel', position='Body'),
  vSwitchId?: string(name='vSwitchId', description='The ID of the vSwitch.', example='vsw-2vccsiymtqr9aavew0vo3', position='Body'),
  vpcId?: string(name='vpcId', description='The ID of the VPC.', example='vpc-t4netc3y5etlondfb5ra7', position='Body'),
  vpcOwnerId?: string(name='vpcOwnerId', description='The ID of the Alibaba Cloud account to which the VPC belongs.', example='1999365732646672', position='Body'),
  vpcRegionId?: string(name='vpcRegionId', description='The region in which the VPC resides.', example='cn-hangzhou', position='Body'),
}

model UpdateInstanceNetworkTypeResponseBody = {
  data?: string(name='Data', description='The returned result, which indicates whether the operation was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code.', example='404'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='9CC37B9F-F4B4-5FF1-939B-AEE78DC70130'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

Valid values:

*   true
*   false', example='true'),
}

model UpdateInstanceNetworkTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceNetworkTypeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateInstanceNetworkType  UpdateInstanceNetworkTypeRequest
  * @return UpdateInstanceNetworkTypeResponse
 */
async function updateInstanceNetworkType(request: UpdateInstanceNetworkTypeRequest): UpdateInstanceNetworkTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstanceNetworkType', 'POST', '/api/v1/instances/{instanceId}/network', 'json', false, 'json', request);
}

