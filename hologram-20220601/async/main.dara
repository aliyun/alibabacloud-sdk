/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Hologram';
  @version = '2022-06-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ChangeResourceGroupRequest {
  instanceId?: string(name='instanceId', example='hgprecn-cn-zvp25ysv3006', position='Body'),
  newResourceGroupId?: string(name='newResourceGroupId', example='rg-acfmxwerqwerasfd', position='Body'),
}

model ChangeResourceGroupResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', description='Id of the request', example='AB71198A-2DB1-511B-AE4D-690BAA97F076'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ChangeResourceGroup', 'POST', '/api/v1/tag/changeResourceGroup', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  autoPay?: boolean(name='autoPay', description='Specifies whether to enable auto-payment. Default value: true. Valid values:

*   true
*   false

> The default value is true. If the balance of your account is insufficient, you can set this parameter to false. In this case, an unpaid order is generated. You can log on to the User Center to pay for the order.', example='true', position='Body'),
  autoRenew?: boolean(name='autoRenew', description='Specifies whether to enable monthly auto-renewal. Default value: false. Valid values:

*   true
*   false', example='false', position='Body'),
  chargeType: string(name='chargeType', description='The billing method of the instance. Valid values:

*   PrePaid: subscription
*   PostPaid: pay-as-you-go

> This parameter is invalid for shared instances. Shared instances have fixed specifications and are pay-as-you-go instances.', example='PostPaid', position='Body'),
  coldStorageSize?: long(name='coldStorageSize', description='The infrequent access (IA) storage space of the instance. Unit: GB.

> This parameter is invalid for pay-as-you-go instances.', example='500', position='Body'),
  cpu?: long(name='cpu', description='The instance specifications. Valid values:

*   8-core 32 GB (number of compute nodes: 1)
*   16-core 64 GB (number of compute nodes: 1)
*   32-core 128 GB (number of compute nodes: 2)
*   64-core 256 GB (number of compute nodes: 4)
*   96-core 384 GB (number of compute nodes: 6)
*   128-core 512 GB (number of compute nodes: 8)
*   Others

> 

*   Set this parameter to the number of cores.

*   If you want to set this parameter to specifications with more than 1,024 compute units (CUs), you must submit a ticket.

*   If you want to purchase a shared instance, you do not need to configure this parameter.

*   The specifications of 8-core 32 GB (number of compute nodes: 1) are for trial use only and cannot be used for production.', example='64', position='Body'),
  duration?: long(name='duration', description='The validity period of the instance that you want to purchase. For example, you can specify a validity period of two months.

> You do not need to configure this parameter for pay-as-you-go instances.', example='2', position='Body'),
  enableServerlessComputing?: boolean(name='enableServerlessComputing', position='Body'),
  gatewayCount?: long(name='gatewayCount', description='The number of gateways. Valid values: 2 to 50.

> This parameter is required only for virtual warehouse instances.', example='4', minimum=2, maximum=50, position='Body'),
  initialDatabases?: string(name='initialDatabases', position='Body'),
  instanceName: string(name='instanceName', description='The name of the Hologres instance that you want to purchase. The name must be 2 to 64 characters in length.', example='my_holo', position='Body'),
  instanceType: string(name='instanceType', description='The type of the instance. Valid values:

*   Standard: general-purpose instance
*   Follower: read-only secondary instance
*   Warehouse: virtual warehouse instance
*   Shared: shared instance', example='Standard', position='Body'),
  leaderInstanceId?: string(name='leaderInstanceId', description='The ID of the primary instance. This parameter is required for read-only secondary instances.

> The primary instance and secondary instances must meet the following requirements:

*   The primary instance is in the Running state.

*   The primary instance and secondary instances are deployed in the same region.

*   The primary instance and secondary instances are deployed in the same zone.

*   Less than 10 secondary instances are associated with the primary instance.

*   The primary and secondary instances belong to the same Alibaba Cloud account.', example='hgpostcn-cn-lbj3aworq112', position='Body'),
  pricingCycle?: string(name='pricingCycle', description='The billing cycle. Valid values:

*   Month
*   Hour

> 

*   This parameter can only be set to Month for subscription instances.

*   This parameter can only be set to Hour for pay-as-you-go instances.

*   By default, this parameter is set to Hour for shared instances.', example='Month', position='Body'),
  regionId: string(name='regionId', description='The ID of the region. You can go to the [OpenAPI Explorer](https://api.aliyun.com/product/Hologram) or the Usage notes section to view the ID of the region.', example='cn-hangzhou', position='Body'),
  resourceGroupId?: string(name='resourceGroupId', description='The resource group. If you do not specify this parameter, the default resource group of the account is used.', example='""', position='Body'),
  storageSize?: long(name='storageSize', description='The standard storage space of the instance. Unit: GB.

> This parameter is invalid for pay-as-you-go instances.', example='500', position='Body'),
  vSwitchId: string(name='vSwitchId', description='The ID of the vSwitch. The zone in which the vSwitch resides must be the same as the zone in which the instance resides.', example='vsw-2vccsiymtxxxxxx', position='Body'),
  vpcId: string(name='vpcId', description='The ID of the virtual private cloud (VPC). The region in which the VPC resides must be the same as the region in which the Hologres instance resides.', example='vpc-t4netc3y5xxxx', position='Body'),
  zoneId: string(name='zoneId', description='The ID of the zone. For more information about how to obtain the ID of the zone, see the Usage notes section.', example='cn-hangzhou-h', position='Body'),
}

model CreateInstanceResponseBody = {
  data?: {
    code?: string(name='Code', description='The error code returned.', example='InvalidVpcOrVSwitch.NotAvailable'),
    instanceId?: string(name='InstanceId', description='The instance ID.', example='hgpostcn-cn-xxxxxx'),
    message?: string(name='Message', description='The error details.'),
    orderId?: string(name='OrderId', description='The order ID.', example='217523224780172'),
    success?: string(name='Success', description='Indicates whether the instance was created.

*   true
*   false', example='true'),
  }(name='Data', description='The returned data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='null'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='null'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9CC37B9F-F4B4-5FF1-939B-AEE78DC70130'),
}

model CreateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceResponseBody(name='body'),
}

/**
  * > Before you call this operation, make sure that you understand the billing method and pricing of Hologres because this operation is charged.
  * *   For more information about the billing details of Hologres, see [Pricing](https://www.alibabacloud.com/help/en/hologres/developer-reference/api-hologram-2022-06-01-createinstance).
  * *   When you purchase a Hologres instance, you must specify the region and zone in which the Hologres instance resides. A region may correspond to multiple zones. Example:
  * <!---->
  *     cn-hangzhou: cn-hangzhou-h, cn-hangzhou-j
  *        cn-shanghai: cn-shanghai-e, cn-shanghai-f
  *        cn-beijing: cn-beijing-i, cn-beijing-g
  *        cn-zhangjiakou: cn-zhangjiakou-b
  *        cn-shenzhen: cn-shenzhen-e
  *        cn-hongkong: cn-hongkong-b
  *        cn-shanghai-finance-1: cn-shanghai-finance-1z
  *        ap-northeast-1: ap-northeast-1a
  *        ap-southeast-1: ap-southeast-1c
  *        ap-southeast-3: ap-southeast-3b
  *        ap-southeast-5: ap-southeast-5b
  *        ap-south-1: ap-south-1b
  *        eu-central-1: eu-central-1a
  *        us-east-1: us-east-1a
  *        us-west-1: us-west-1b
  *
 */
async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstance', 'POST', '/api/v1/instances/create', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceId?: string(name='instanceId', description='The instance ID.', example='hgpostcn-cn-7mz2vmu30003', position='Path'),
  regionId?: string(name='RegionId', description='The ID of the region in which the Hologres instance resides.', example='cn-hangzhou', position='Query'),
}

model DeleteInstanceResponseBody = {
  data?: boolean(name='Data', description='The returned result, which indicates whether the request was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='null'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='null'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status Code', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CB13FFDD-2DF8-5396-A848-2D6A31245B6D'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model DeleteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceResponseBody(name='body'),
}

/**
  * > Before you call this operation, read the documentation and make sure that you understand the prerequisites and impacts of this operation.
  * *   After you delete a Hologres instance, data and objects in the instance cannot be restored. Proceed with caution. For more information, see [Billing overview](https://www.alibabacloud.com/help/en/hologres/product-overview/billing-overview#section-h6a-x58-jc0).
  * *   You can delete only pay-as-you-go instances.
  * *   If you want to unsubscribe from a subscription instance, submit a ticket.[](https://help.aliyun.com/document_detail/150284.html#section-ogc-9vc-858)
  *
 */
async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteInstance', 'POST', '/api/v1/instances/{instanceId}/delete', 'json', false, 'json', request);
}

model DisableHiveAccessRequest {
  instanceId?: string(name='instanceId', example='hgprecn-cn-tl330rv9k00e', position='Path'),
  regionId?: string(name='RegionId', example='cn-beijing', position='Query'),
}

model DisableHiveAccessResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='404'),
  errorMessage?: string(name='ErrorMessage', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', description='Id of the request', example='82B7A554-4D00-50DF-95D9-B59E7B4D5489'),
  success?: boolean(name='Success', example='true'),
}

model DisableHiveAccessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableHiveAccessResponseBody(name='body'),
}

async function disableHiveAccess(request: DisableHiveAccessRequest): DisableHiveAccessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DisableHiveAccess', 'POST', '/api/v1/instances/{instanceId}/disableHiveAccess', 'json', false, 'json', request);
}

model EnableHiveAccessRequest {
  instanceId?: string(name='instanceId', example='hgpostcn-cn-zpr3426vm002', position='Path'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model EnableHiveAccessResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='404'),
  errorMessage?: string(name='ErrorMessage', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', description='Id of the request', example='EA8F0084-5831-5907-BB31-BD05D2617844'),
  success?: boolean(name='Success', example='true'),
}

model EnableHiveAccessResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableHiveAccessResponseBody(name='body'),
}

async function enableHiveAccess(request: EnableHiveAccessRequest): EnableHiveAccessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EnableHiveAccess', 'POST', '/api/v1/instances/{instanceId}/enableHiveAccess', 'json', false, 'json', request);
}

model GetInstanceRequest {
  instanceId?: string(name='instanceId', description='The ID of the instance. This parameter is required.', example='hgprecn-cn-i7m2v08uu00a', position='Path'),
}

model GetInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code that is returned if the request failed.', example='404'),
  errorMessage?: string(name='ErrorMessage', description='The error message.', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  instance?: {
    autoRenewal?: string(name='AutoRenewal', description='Indicates whether auto-renewal is enabled.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
    coldStorage?: long(name='ColdStorage', description='The cold storage capacity of the instance. Unit: GB. Standard SSD is used for hot storage, and HDD is used for cold storage.', example='800'),
    commodityCode?: string(name='CommodityCode', description='The commodity code.

Valid values:

*   hologram_maxcomputeAccelerate_public_cn

    <!-- -->

    :

    <!-- -->

    China site/Lakehouse Acceleration Edition

    <!-- -->

    .

*   hologram_combo_public_cn

    <!-- -->

    :

    <!-- -->

    China site/Subscription

    <!-- -->

    .

*   hologram_prepay_public_intl

    <!-- -->

    :

    <!-- -->

    International site/Subscription

    <!-- -->

    .

*   hologram_storage_dp_cn

    <!-- -->

    :

    <!-- -->

    China site/Storage plan

    <!-- -->

    .

*   hologram_postpay_public_cn

    <!-- -->

    :

    <!-- -->

    China site/Pay-as-you-go

    <!-- -->

    .

*   hologram_postpay_public_intl

    <!-- -->

    :

    <!-- -->

    International site/Pay-as-you-go

    <!-- -->

*   hologram_maxcomputeAccelerate_public_intl

    <!-- -->

    :

    <!-- -->

    International site/Lakehouse Acceleration Edition

    <!-- -->

    .

*   hologram_cu_dp_cn

    <!-- -->

    :

    <!-- -->

    China site/Compute plan

    <!-- -->', example='hologram_combo_public_cn'),
    computeNodeCount?: long(name='ComputeNodeCount', description='The number of compute nodes. In a typical configuration, a node has 16 CPU cores and 32 GB of memory.', example='2'),
    cpu?: long(name='Cpu', description='The number of CPU cores.', example='32'),
    creationTime?: string(name='CreationTime', description='The time when the instance was created.', example='2021-02-03T13:06:06Z'),
    disk?: string(name='Disk', description='The amount of data that can be stored in the disk of the Standard storage class. Unit: GB.', example='500'),
    enableHiveAccess?: string(name='EnableHiveAccess', description='Indicates whether data lake acceleration is enabled.', example='true'),
    enableServerless?: boolean(name='EnableServerless'),
    endpoints?: [ 
      {
        alternativeEndpoints?: string(name='AlternativeEndpoints', description='The endpoint. This parameter is returned if both the AnyTunnel and SingleTunnel modes are enabled for an instance, and the instance is switched from the AnyTunnel mode to the SingleTunnel mode. In this case, two endpoints are returned.', example='hgprecn-cn-uqm362o1b001-cn-hangzhou-internal.hologres.aliyuncs.com:80'),
        enabled?: boolean(name='Enabled', description='Indicates whether the network is enabled.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
        endpoint?: string(name='Endpoint', description='The endpoint.', example='hgprecn-cn-uqm362o1b001-cn-hangzhou-internal.hologres.aliyuncs.com:80'),
        type?: string(name='Type', description='The network type.

Valid values:

*   VPCSingleTunnel

    <!-- -->

    :

    <!-- -->

    virtual private cloud (VPC)

    <!-- -->

    .

*   Intranet

    <!-- -->

    :

    <!-- -->

    internal network

    <!-- -->

    .

*   VPCAnyTunnel

    <!-- -->

    :

    <!-- -->

    not supported by new instances

    <!-- -->

*   Internet

    <!-- -->

    :

    <!-- -->

    Internet

    <!-- -->

    .', example='Internet'),
        vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-bp1jqwp2ys6kp7tc9t983'),
        vpcId?: string(name='VpcId', description='The ID of the VPC to which the instance belongs.', example='vpc-uf66jjber3hgvwhki3wna'),
        vpcInstanceId?: string(name='VpcInstanceId', description='The ID of the instance that is deployed in the VPC.', example='hgprecn-cn-uqm362o1b001-frontend-st'),
      }
    ](name='Endpoints', description='The list of endpoints.'),
    expirationTime?: string(name='ExpirationTime', description='The expiration time. This parameter is invalid for pay-as-you-go instances.', example='2021-02-03T13:06:06Z'),
    gatewayCount?: long(name='GatewayCount', description='The number of gateway nodes.', example='2'),
    gatewayCpu?: long(name='GatewayCpu', description='The number of CPU cores of the gateway. Unit: core.', example='4'),
    gatewayMemory?: long(name='GatewayMemory', description='The size of memory resources of the gateway. Unit: GB.', example='16'),
    instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance.

Valid values:

*   PostPaid

    <!-- -->

    :

    <!-- -->

    pay-as-you-go

    <!-- -->

    .

*   PrePaid

    <!-- -->

    :

    <!-- -->

    subscription

    <!-- -->

    .', example='PrePaid'),
    instanceId?: string(name='InstanceId', description='The instance ID.', example='hgpostcn-cn-tl32s6cgw00b'),
    instanceName?: string(name='InstanceName', description='The instance name. The instance name must be 2 to 64 characters in length.', example='test'),
    instanceOwner?: string(name='InstanceOwner', description='The owner of the instance.', example='12345678900000'),
    instanceStatus?: string(name='InstanceStatus', description='The status of the instance.

Valid values:

*   Creating

    <!-- -->

    <!-- -->

    <!-- -->

*   Running

    <!-- -->

    <!-- -->

    <!-- -->

*   Suspended

    <!-- -->

    <!-- -->

    <!-- -->

*   Allocating

    <!-- -->

    <!-- -->

    <!-- -->', example='Running'),
    instanceType?: string(name='InstanceType', description='The type of the instance.

Valid values:

*   Follower

    <!-- -->

    :

    <!-- -->

    read-only secondary instance

    <!-- -->

    .

*   Standard

    <!-- -->

    :

    <!-- -->

    normal instance

    <!-- -->

    .', example='Standard'),
    leaderInstanceId?: string(name='LeaderInstanceId', description='The ID of the primary instance.', example='hgpostcn-cn-i7m2ncd6w002'),
    memory?: long(name='Memory', description='The memory size. Unit: GB.', example='128'),
    regionId?: string(name='RegionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
    replicaRole?: string(name='ReplicaRole'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aekzuq7hpybze2i'),
    suspendReason?: string(name='SuspendReason', description='The reason for the suspension.

Valid values:

*   Indebet

    <!-- -->

    :

    <!-- -->

    The instance has an overdue payment

    <!-- -->

    .

*   Manual

    <!-- -->

    :

    <!-- -->

    The instance is manually suspended

    <!-- -->

    .

*   Overdue

    <!-- -->

    :

    <!-- -->

    The instance has expired

    <!-- -->

    .', example='Manual'),
    tags?: [ 
      {
        key?: string(name='Key', description='The key of tag N.', example='tag'),
        value?: string(name='Value', description='The value of tag N.', example='value'),
      }
    ](name='Tags', description='The instance tag.'),
    version?: string(name='Version', description='The instance version.', example='r1.3.37'),
    zoneId?: string(name='ZoneId', description='The ID of the zone where the instance resides.', example='cn-hangzhou-h'),
  }(name='Instance', description='The information about the instance.'),
  requestId?: string(name='RequestId', description='The request ID.', example='865A02C2-B374-5DD4-9B34-0CA15DA1AEBD'),
  success?: boolean(name='Success', description='The request result, which indicates whether the request was successful.', example='true'),
}

model GetInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceResponseBody(name='body'),
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstance', 'GET', '/api/v1/instances/{instanceId}', 'json', false, 'json', request);
}

model GetWarehouseDetailRequest {
  instanceId?: string(name='instanceId', example='hgprecn-cn-i7m2ucpyu005', position='Path'),
}

model GetWarehouseDetailResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='D3AE84AB-0873-5FC7-A4C4-8CF869D2FA70'),
  warehouseDetail?: {
    remainingCpu?: string(name='RemainingCpu', example='32'),
    reservedCpu?: string(name='ReservedCpu', example='64'),
    warehouseList?: [ 
      {
        cpu?: long(name='Cpu', description='cpu', example='32'),
        id?: long(name='Id', description='id', example='2'),
        mem?: long(name='Mem', example='128'),
        name?: string(name='Name', example='MyWarehouse'),
        nodeCount?: long(name='NodeCount', example='2'),
        status?: string(name='Status', example='kRunning'),
      }
    ](name='WarehouseList'),
  }(name='WarehouseDetail'),
}

model GetWarehouseDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWarehouseDetailResponseBody(name='body'),
}

async function getWarehouseDetail(request: GetWarehouseDetailRequest): GetWarehouseDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWarehouseDetail', 'GET', '/api/v1/instances/{instanceId}/getWarehouseDetail', 'json', false, 'json', request);
}

model ListInstancesRequest {
  cmsInstanceType?: string(name='cmsInstanceType', position='Body'),
  resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group.', example='rg-acfmvscak73zmby', position='Body'),
  tag?: [ 
    {
      key?: string(name='key', description='The tag key.', example='mytag'),
      value?: string(name='value', description='The tag value.', example='value'),
    }
  ](name='tag', description='The tags to add to the resource.', position='Body'),
}

model ListInstancesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='404'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  instanceList?: [ 
    {
      commodityCode?: string(name='CommodityCode', description='The commodity code, which is the same as that on the Billing Management page.', example='hologram_postpay_public_cn'),
      creationTime?: string(name='CreationTime', description='The time when the cluster was created.', example='2022-12-16T02:24:05Z'),
      enableHiveAccess?: string(name='EnableHiveAccess', description='Indicates whether lakehouse acceleration is enabled.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
      endpoints?: [ 
        {
          enabled?: boolean(name='Enabled', description='Indicates whether the endpoint is enabled.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
          endpoint?: string(name='Endpoint', description='The endpoint.', example='hgpostcn-cn-aaab9ad2d8fb-cn-hangzhou-internal.hologres.aliyuncs.com:80'),
          type?: string(name='Type', description='The network type.

Valid values:

*   VPCSingleTunnel

    <!-- -->

    :

    <!-- -->

    virtual private cloud (VPC)

    <!-- -->

    .

*   Intranet

    <!-- -->

    :

    <!-- -->

    internal network

    <!-- -->

*   VPCAnyTunnel

    <!-- -->

    : This value is not supported by new instances

    <!-- -->

    <!-- -->

    .

*   Internet

    <!-- -->

    :

    <!-- -->

    Internet

    <!-- -->

    .', example='Internet'),
          vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-wz9oap28raidjevhuszg4'),
          vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-uf6mrahzyu7uorlqqpz5f'),
          vpcInstanceId?: string(name='VpcInstanceId', description='The ID of the VPC to which the instance belongs.', example='hgpostcn-cn-wwo3665tx004-frontend-st'),
        }
      ](name='Endpoints', description='The list of endpoints.'),
      expirationTime?: string(name='ExpirationTime', description='The time when the cluster expires.', example='2023-05-04T16:00:00.000Z'),
      instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Valid values:

Valid values:

*   PostPaid

    <!-- -->

    :

    <!-- -->

    pay-as-you-go

    <!-- -->

    .

*   PrePaid

    <!-- -->

    :

    <!-- -->

    subscription

    <!-- -->

    .', example='PrePaid'),
      instanceId?: string(name='InstanceId', description='The instance ID.', example='hgpostcn-cn-aaab9ad2d8fb'),
      instanceName?: string(name='InstanceName', description='The name of the instance.', example='test_instance'),
      instanceStatus?: string(name='InstanceStatus', description='The status of the instance.

Valid values:

*   Creating

    <!-- -->

    <!-- -->

    <!-- -->

*   Running

    <!-- -->

    <!-- -->

    <!-- -->

*   Suspended

    <!-- -->

    <!-- -->

    <!-- -->

*   Allocating

    <!-- -->

    <!-- -->

    <!-- -->', example='Running'),
      instanceType?: string(name='InstanceType', description='The type of the instance.

Valid values:

*   Follower

    <!-- -->

    :

    <!-- -->

    read-only secondary instance

    <!-- -->

    .

*   Standard

    <!-- -->

    :

    <!-- -->

    normal instance

    <!-- -->

    .', example='Standard'),
      leaderInstanceId?: string(name='LeaderInstanceId', description='The ID of the primary instance.', example='hgprecn-cn-2r42sqvxm006'),
      regionId?: string(name='RegionId'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmvscak73zmby'),
      suspendReason?: string(name='SuspendReason', description='The reason for the suspension.', example='Manual'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='tag'),
          value?: string(name='Value', description='The tag value.', example='value'),
        }
      ](name='Tags', description='The tags that are added to the resource.'),
      version?: string(name='Version', description='The version of the cluster.', example='1.3.37'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='InstanceList', description='The list of queried instances.'),
  requestId?: string(name='RequestId', description='The request ID.', example='D1303CD4-AA70-5998-8025-F55B22C50840'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstances', 'POST', '/api/v1/instances', 'json', false, 'json', request);
}

model ListWarehousesRequest {
  instanceId?: string(name='instanceId', example='hgpostcn-cn-x0r382joi001', position='Path'),
}

model ListWarehousesResponseBody = {
  warehouseList?: [ 
    {
      cpu?: long(name='Cpu', description='cpu', example='32'),
      id?: long(name='Id', description='id', example='3'),
      mem?: long(name='Mem', example='128'),
      name?: string(name='Name', example='MyWarehouse'),
      nodeCount?: long(name='NodeCount', example='2'),
      status?: string(name='Status', example='kRunning'),
    }
  ](name='WarehouseList'),
  requestId?: string(name='requestId', description='Id of the request', example='819A7F0F-2951-540F-BD94-6A41ECF0281F'),
}

model ListWarehousesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWarehousesResponseBody(name='body'),
}

async function listWarehouses(request: ListWarehousesRequest): ListWarehousesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListWarehouses', 'GET', '/api/v1/instances/{instanceId}/listWarehouses', 'json', false, 'json', request);
}

model RenewInstanceRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='hgprecn-cn-i7m2v08uu00a', position='Path'),
  autoRenew?: boolean(name='autoRenew', description='Specifies whether to enable monthly auto-renewal. The default value is false. Valid values:

*   true
*   false

>  If you enable auto-renewal for an instance for which auto-renewal is enabled, an error is reported.', example='true', position='Body'),
  duration: int32(name='duration', description='The renewal duration. Unit: month.', example='2', position='Body'),
}

model RenewInstanceResponseBody = {
  data?: {
    code?: string(name='Code', description='The error code returned.', example='InvalidChargeType.UnRenewable'),
    message?: string(name='Message', description='The error details.'),
    orderId?: string(name='OrderId', description='The ID of the order.', example='221625608580893'),
    success?: boolean(name='Success', description='Indicates whether the renewal was successful.

*   true
*   false', example='true'),
  }(name='Data', description='The returned data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='null'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='null'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D3AE84AB-0873-5FC7-A4C4-8CF869D2FA70'),
  success?: string(name='Success', description='The request result, which indicates whether the request was successful.', example='false'),
}

model RenewInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenewInstanceResponseBody(name='body'),
}

/**
  * > Before you call this operation, make sure that you understand the billing method and pricing of Hologres because this operation is charged.
  * *   For more information about billing details of Hologres, see [Pricing](https://www.alibabacloud.com/help/en/hologres/product-overview/billing-overview).
  * *   For more information about how to renew a Hologres instance, see [Manage renewals](https://www.alibabacloud.com/help/en/hologres/product-overview/manage-renewals?spm=a2c63.p38356.0.0.73f27c8d1Q0FUi).
  * *   You can renew only subscription instances.
  *
 */
async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RenewInstance', 'POST', '/api/v1/instances/{instanceId}/renew', 'json', false, 'json', request);
}

model RestartInstanceRequest {
  instanceId?: string(name='instanceId', description='The instance ID.', example='hgprecn-cn-i7m2ucpyu005', position='Path'),
}

model RestartInstanceResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the operation was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='404'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='36291497-CDB0-53DC-8CD7-762E054F57A6'),
  success?: boolean(name='Success', description='The request result, which indicates whether the request was successful.', example='true'),
}

model RestartInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartInstanceResponseBody(name='body'),
}

async function restartInstance(request: RestartInstanceRequest): RestartInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RestartInstance', 'POST', '/api/v1/instances/{instanceId}/restart', 'json', false, 'json', request);
}

model ResumeInstanceRequest {
  instanceId?: string(name='instanceId', description='The instance ID.', example='hgpostcn-cn-j672yny9g001', position='Path'),
}

model ResumeInstanceResponseBody = {
  data?: boolean(name='Data', description='The returned result, which indicates whether the operation was successful.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='404'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='D3AE84AB-0873-5FC7-A4C4-8CF869D2FA70'),
  success?: boolean(name='Success', description='The request result, which indicates whether the request was successful.', example='true'),
}

model ResumeInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResumeInstanceResponseBody(name='body'),
}

async function resumeInstance(request: ResumeInstanceRequest): ResumeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ResumeInstance', 'POST', '/api/v1/instances/{instanceId}/resume', 'json', false, 'json', request);
}

model ScaleInstanceRequest {
  instanceId: string(name='instanceId', description='The ID of the instance.', example='hgprecn-cn-xxxxxxx', position='Path'),
  coldStorageSize?: long(name='coldStorageSize', description='The infrequent access (IA) storage space of the instance. Unit: GB.

> Ignore this parameter for pay-as-you-go instances.', example='1000G', position='Body'),
  cpu?: long(name='cpu', description='The specifications of the instance. Valid values:

*   8-core 32GB (number of compute nodes: 1)
*   16-core 64GB (number of compute nodes: 1)
*   32-core 128GB (number of compute nodes: 2)
*   64-core 256GB (number of compute nodes: 4)
*   96-core 384GB (number of compute nodes: 6)
*   128-core 512GB (number of compute nodes: 8)
*   Others

> 

*   Set this parameter to the number of cores.

*   If you want to set this parameter to specifications with more than 1,024 compute units (CUs), you must submit a ticket.

*   This parameter is invalid for Hologres Shared Cluster instances.

*   The specifications of 8-core 32GB (number of compute nodes: 1) are for trial use only and cannot be used for production.', example='128', position='Body'),
  enableServerlessComputing?: boolean(name='enableServerlessComputing', position='Body'),
  gatewayCount?: long(name='gatewayCount', description='The number of gateways. Valid values: 2 to 50.

> This parameter is required only for virtual warehouse instances.', example='4', position='Body'),
  scaleType: string(name='scaleType', description='The specification change type. Valid values:

*   UPGRADE
*   DOWNGRADE

> 

*   If you set this parameter to UPGRADE, the new specifications must be higher than the original specifications. You must configure at least one of the cpu, storageSize, and coldStorageSize parameters. If you leave a parameter empty, the related configuration remains unchanged.

*   If you set this parameter to DOWNGRADE, the new specifications must be lower than the original specifications. You must configure at least one of the cpu, storageSize, and coldStorageSize parameters. If you leave a parameter empty, the related configuration remains unchanged.', example='UPGRADE', position='Body'),
  storageSize?: long(name='storageSize', description='The standard storage space of the instance. Unit: GB.

> Ignore this parameter for pay-as-you-go instances.', example='1000G', position='Body'),
}

model ScaleInstanceResponseBody = {
  data?: {
    code?: string(name='Code', description='The error code returned.', example='InvalidScaleType.Unsupported'),
    message?: string(name='Message', description='The error details.', example='null'),
    orderId?: string(name='OrderId', description='The ID of the order.', example='219183853450000'),
    success?: boolean(name='Success', description='Indicates whether the change to specifications was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
  }(name='Data', description='The returned data.'),
  errorCode?: string(name='ErrorCode', description='The error code returned.', example='null'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned.', example='null'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D3AE84AB-0873-5FC7-A4C4-8CF869D2FA70'),
}

model ScaleInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ScaleInstanceResponseBody(name='body'),
}

/**
  * > Before you call this operation, make sure that you understand the billing method and pricing of Hologres because this operation is charged.
  * *   For more information about the billing of Hologres, see [Billing overview](https://www.alibabacloud.com/help/zh/hologres/product-overview/billing-overview).
  * *   During the change of computing resource specifications of a Hologres instance, the instance is unavailable. During the change of storage resource specifications of a Hologres instance, the instance can work normally. Do not frequently change instance specifications. For more information, see [Upgrade or downgrade instance specifications](https://www.alibabacloud.com/help/en/hologres/product-overview/upgrade-or-downgrade-instance-specifications).
  *
 */
async function scaleInstance(request: ScaleInstanceRequest): ScaleInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ScaleInstance', 'POST', '/api/v1/instances/{instanceId}/scale', 'json', false, 'json', request);
}

model StopInstanceRequest {
  instanceId?: string(name='instanceId', description='The instance ID.', example='hgpostcn-cn-lbj33559x001', position='Path'),
}

model StopInstanceResponseBody = {
  data?: boolean(name='Data', description='The returned result, which indicates whether the operation was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='404'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='2A8DEF6E-067E-5DB0-BAE1-2894266E6C6A'),
  success?: boolean(name='Success', description='The request result, which indicates whether the request was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
}

model StopInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopInstanceResponseBody(name='body'),
}

async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopInstance', 'POST', '/api/v1/instances/{instanceId}/stop', 'json', false, 'json', request);
}

model UpdateInstanceNameRequest {
  instanceId?: string(name='instanceId', description='The instance ID.', example='hgpostcn-cn-zpr30pupt004', position='Path'),
  instanceName?: string(name='instanceName', description='The new name of the instance.', example='new_name', position='Body'),
}

model UpdateInstanceNameResponseBody = {
  data?: boolean(name='Data', description='The returned result, which indicates whether the operation was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='404'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='C6B55032-D41A-5FE0-9C07-8BD81C88422E'),
  success?: boolean(name='Success', description='The request result, which indicates whether the request was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
}

model UpdateInstanceNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceNameResponseBody(name='body'),
}

async function updateInstanceName(request: UpdateInstanceNameRequest): UpdateInstanceNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstanceName', 'POST', '/api/v1/instances/{instanceId}/instanceName', 'json', false, 'json', request);
}

model UpdateInstanceNetworkTypeRequest {
  instanceId?: string(name='instanceId', description='The instance ID.', example='hgprecn-cn-lbj35pw74002', position='Path'),
  anyTunnelToSingleTunnel?: string(name='anyTunnelToSingleTunnel', description='Specifies whether to change the network type from AnyTunnel to SingleTunnel. This parameter is invalid for new instances. For new instances, this parameter is set to null by default.

Valid values:

*   others/null

    <!-- -->

    <!-- -->

    <!-- -->

*   true

    <!-- -->

    <!-- -->

    <!-- -->', example='true', position='Body'),
  networkTypes?: string(name='networkTypes', description='A list of network types that you want to enable. The list of enabled network types is randomly ordered. For example, the Internet, internal network, and VPCSingleTunnel network types are enabled. If you want to disable the Internet type, set this parameter to Intranet,VPCSingleTunnel.', example='Internet,VPCSingleTunnel', position='Body'),
  vSwitchId?: string(name='vSwitchId', description='The vSwitch ID.', example='vsw-2vccsiymtqr9aavew0vo3', position='Body'),
  vpcId?: string(name='vpcId', description='The ID of the VPC to which the instance belongs.', example='vpc-t4netc3y5etlondfb5ra7', position='Body'),
  vpcOwnerId?: string(name='vpcOwnerId', description='The owner ID of the VPC, which is the ID of the Alibaba Cloud account.', example='1999365732646672', position='Body'),
  vpcRegionId?: string(name='vpcRegionId', description='The region ID of the VPC.', example='cn-hangzhou', position='Body'),
}

model UpdateInstanceNetworkTypeResponseBody = {
  data?: string(name='Data', description='The returned result, which indicates whether the operation was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='404'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='9CC37B9F-F4B4-5FF1-939B-AEE78DC70130'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
}

model UpdateInstanceNetworkTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceNetworkTypeResponseBody(name='body'),
}

async function updateInstanceNetworkType(request: UpdateInstanceNetworkTypeRequest): UpdateInstanceNetworkTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstanceNetworkType', 'POST', '/api/v1/instances/{instanceId}/network', 'json', false, 'json', request);
}

