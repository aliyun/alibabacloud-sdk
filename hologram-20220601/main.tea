/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('hologram', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model GetInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', example='404'),
  errorMessage?: string(name='ErrorMessage', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  instance?: {
    autoRenewal?: string(name='AutoRenewal', example='true'),
    coldStorage?: long(name='ColdStorage', example='800'),
    commodityCode?: string(name='CommodityCode', example='hologram_combo_public_cn'),
    computeNodeCount?: long(name='ComputeNodeCount', example='2'),
    cpu?: long(name='Cpu', example='32'),
    creationTime?: string(name='CreationTime', example='2021-02-03T13:06:06Z'),
    disk?: string(name='Disk', example='500'),
    enableHiveAccess?: string(name='EnableHiveAccess', example='true'),
    endpoints?: [ 
      {
        alternativeEndpoints?: string(name='AlternativeEndpoints', example='hgprecn-cn-uqm362o1b001-cn-hangzhou-internal.hologres.aliyuncs.com:80'),
        enabled?: boolean(name='Enabled', example='true'),
        endpoint?: string(name='Endpoint', example='hgprecn-cn-uqm362o1b001-cn-hangzhou-internal.hologres.aliyuncs.com:80'),
        type?: string(name='Type', example='Internet'),
        vSwitchId?: string(name='VSwitchId', example='vsw-bp1jqwp2ys6kp7tc9t983'),
        vpcId?: string(name='VpcId', description='VPC ID', example='vpc-uf66jjber3hgvwhki3wna'),
        vpcInstanceId?: string(name='VpcInstanceId', example='hgprecn-cn-uqm362o1b001-frontend-st'),
      }
    ](name='Endpoints'),
    expirationTime?: string(name='ExpirationTime', example='2021-02-03T13:06:06Z'),
    gatewayCount?: long(name='GatewayCount'),
    gatewayCpu?: long(name='GatewayCpu'),
    gatewayMemory?: long(name='GatewayMemory'),
    instanceChargeType?: string(name='InstanceChargeType', example='PrePaid'),
    instanceId?: string(name='InstanceId', example='hgpostcn-cn-tl32s6cgw00b'),
    instanceName?: string(name='InstanceName', example='test'),
    instanceOwner?: string(name='InstanceOwner', example='12345678900000'),
    instanceStatus?: string(name='InstanceStatus', example='Running'),
    instanceType?: string(name='InstanceType', example='Standard'),
    leaderInstanceId?: string(name='LeaderInstanceId', example='hgpostcn-cn-i7m2ncd6w002'),
    memory?: long(name='Memory', example='128'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzuq7hpybze2i'),
    suspendReason?: string(name='SuspendReason', example='Manual'),
    tags?: [ 
      {
        key?: string(name='Key', example='tag'),
        value?: string(name='Value', example='value'),
      }
    ](name='Tags'),
    version?: string(name='Version', example='r1.3.37'),
    zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
  }(name='Instance'),
  requestId?: string(name='RequestId', description='Id of the request', example='865A02C2-B374-5DD4-9B34-0CA15DA1AEBD'),
  success?: boolean(name='Success', example='true'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstanceWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetInstance',
    version = '2022-06-01',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${OpenApiUtil.getEncodeParam(instanceId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstance(instanceId: string): GetInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getInstanceWithOptions(instanceId, headers, runtime);
}

model ListInstancesRequest {
  resourceGroupId?: string(name='resourceGroupId', example='rg-acfmvscak73zmby'),
  tag?: [ 
    {
      key?: string(name='key', example='mytag'),
      value?: string(name='value', example='value'),
    }
  ](name='tag'),
}

model ListInstancesResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  instanceList?: [ 
    {
      commodityCode?: string(name='CommodityCode', example='hologram_postpay_public_cn'),
      creationTime?: string(name='CreationTime', example='2022-12-16T02:24:05Z'),
      enableHiveAccess?: string(name='EnableHiveAccess', example='true'),
      endpoints?: [ 
        {
          enabled?: boolean(name='Enabled', example='true'),
          endpoint?: string(name='Endpoint', example='hgpostcn-cn-aaab9ad2d8fb-cn-hangzhou-internal.hologres.aliyuncs.com:80'),
          type?: string(name='Type', example='Internet'),
          vSwitchId?: string(name='VSwitchId', example='vsw-wz9oap28raidjevhuszg4'),
          vpcId?: string(name='VpcId', description='VPC IDã€‚', example='vpc-uf6mrahzyu7uorlqqpz5f'),
          vpcInstanceId?: string(name='VpcInstanceId', example='hgpostcn-cn-wwo3665tx004-frontend-st'),
        }
      ](name='Endpoints'),
      expirationTime?: string(name='ExpirationTime', example='2023-05-04T16:00:00.000Z'),
      instanceChargeType?: string(name='InstanceChargeType', example='PrePaid'),
      instanceId?: string(name='InstanceId', example='hgpostcn-cn-aaab9ad2d8fb'),
      instanceName?: string(name='InstanceName', example='test_instance'),
      instanceStatus?: string(name='InstanceStatus', example='Running'),
      instanceType?: string(name='InstanceType', example='Standard'),
      leaderInstanceId?: string(name='LeaderInstanceId', example='hgprecn-cn-2r42sqvxm006'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmvscak73zmby'),
      suspendReason?: string(name='SuspendReason', example='Manual'),
      tags?: [ 
        {
          key?: string(name='Key', example='tag'),
          value?: string(name='Value', example='value'),
        }
      ](name='Tags'),
      version?: string(name='Version', example='1.3.37'),
    }
  ](name='InstanceList'),
  requestId?: string(name='RequestId', description='Id of the request', example='D1303CD4-AA70-5998-8025-F55B22C50840'),
  success?: string(name='Success', example='true'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstancesWithOptions(request: ListInstancesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.resourceGroupId)) {
    body['resourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tag)) {
    body['tag'] = request.tag;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListInstances',
    version = '2022-06-01',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listInstancesWithOptions(request, headers, runtime);
}

model RestartInstanceResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', description='Id of the request', example='36291497-CDB0-53DC-8CD7-762E054F57A6'),
  success?: boolean(name='Success', example='true'),
}

model RestartInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestartInstanceResponseBody(name='body'),
}

async function restartInstanceWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): RestartInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RestartInstance',
    version = '2022-06-01',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${OpenApiUtil.getEncodeParam(instanceId)}/restart`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function restartInstance(instanceId: string): RestartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return restartInstanceWithOptions(instanceId, headers, runtime);
}

model ResumeInstanceResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', description='Id of the request', example='D3AE84AB-0873-5FC7-A4C4-8CF869D2FA70'),
  success?: boolean(name='Success', example='true'),
}

model ResumeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResumeInstanceResponseBody(name='body'),
}

async function resumeInstanceWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ResumeInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ResumeInstance',
    version = '2022-06-01',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${OpenApiUtil.getEncodeParam(instanceId)}/resume`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resumeInstance(instanceId: string): ResumeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return resumeInstanceWithOptions(instanceId, headers, runtime);
}

model StopInstanceResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', description='Id of the request', example='2A8DEF6E-067E-5DB0-BAE1-2894266E6C6A'),
  success?: boolean(name='Success', example='true'),
}

model StopInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopInstanceResponseBody(name='body'),
}

async function stopInstanceWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StopInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StopInstance',
    version = '2022-06-01',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${OpenApiUtil.getEncodeParam(instanceId)}/stop`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopInstance(instanceId: string): StopInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopInstanceWithOptions(instanceId, headers, runtime);
}

model UpdateInstanceNameRequest {
  instanceName?: string(name='instanceName', example='new_name'),
}

model UpdateInstanceNameResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', description='Id of the request', example='C6B55032-D41A-5FE0-9C07-8BD81C88422E'),
  success?: boolean(name='Success', example='true'),
}

model UpdateInstanceNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateInstanceNameResponseBody(name='body'),
}

async function updateInstanceNameWithOptions(instanceId: string, request: UpdateInstanceNameRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateInstanceNameResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceName)) {
    body['instanceName'] = request.instanceName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateInstanceName',
    version = '2022-06-01',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${OpenApiUtil.getEncodeParam(instanceId)}/instanceName`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateInstanceName(instanceId: string, request: UpdateInstanceNameRequest): UpdateInstanceNameResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateInstanceNameWithOptions(instanceId, request, headers, runtime);
}

model UpdateInstanceNetworkTypeRequest {
  anyTunnelToSingleTunnel?: string(name='anyTunnelToSingleTunnel', example='true'),
  networkTypes?: string(name='networkTypes', example='Internet,VPCSingleTunnel'),
  vSwitchId?: string(name='vSwitchId', example='vsw-2vccsiymtqr9aavew0vo3'),
  vpcId?: string(name='vpcId', description='VPC IDã€‚', example='vpc-t4netc3y5etlondfb5ra7'),
  vpcOwnerId?: string(name='vpcOwnerId', example='1999365732646672'),
  vpcRegionId?: string(name='vpcRegionId', description='vpc regionIdã€‚', example='cn-hangzhou'),
}

model UpdateInstanceNetworkTypeResponseBody = {
  data?: string(name='Data', example='true'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', description='Id of the request', example='9CC37B9F-F4B4-5FF1-939B-AEE78DC70130'),
  success?: boolean(name='Success', example='true'),
}

model UpdateInstanceNetworkTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateInstanceNetworkTypeResponseBody(name='body'),
}

async function updateInstanceNetworkTypeWithOptions(instanceId: string, request: UpdateInstanceNetworkTypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateInstanceNetworkTypeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.anyTunnelToSingleTunnel)) {
    body['anyTunnelToSingleTunnel'] = request.anyTunnelToSingleTunnel;
  }
  if (!Util.isUnset(request.networkTypes)) {
    body['networkTypes'] = request.networkTypes;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    body['vSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    body['vpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vpcOwnerId)) {
    body['vpcOwnerId'] = request.vpcOwnerId;
  }
  if (!Util.isUnset(request.vpcRegionId)) {
    body['vpcRegionId'] = request.vpcRegionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateInstanceNetworkType',
    version = '2022-06-01',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${OpenApiUtil.getEncodeParam(instanceId)}/network`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateInstanceNetworkType(instanceId: string, request: UpdateInstanceNetworkTypeRequest): UpdateInstanceNetworkTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateInstanceNetworkTypeWithOptions(instanceId, request, headers, runtime);
}

