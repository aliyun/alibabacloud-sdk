/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('hologram', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateInstanceRequest {
  autoPay?: boolean(name='autoPay', example='true'),
  autoRenew?: boolean(name='autoRenew', example='false'),
  chargeType?: string(name='chargeType', example='PostPaid'),
  coldStorageSize?: long(name='coldStorageSize', example='500'),
  cpu?: long(name='cpu', example='64'),
  duration?: long(name='duration', example='2'),
  gatewayCount?: long(name='gatewayCount', example='4'),
  instanceName?: string(name='instanceName', example='my_holo'),
  instanceType?: string(name='instanceType', example='Standard'),
  leaderInstanceId?: string(name='leaderInstanceId', example='hgpostcn-cn-lbj3aworq112'),
  pricingCycle?: string(name='pricingCycle', example='Month'),
  regionId?: string(name='regionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='resourceGroupId', example='""'),
  storageSize?: long(name='storageSize', example='500'),
  vSwitchId?: string(name='vSwitchId', example='vsw-2vccsiymtxxxxxx'),
  vpcId?: string(name='vpcId', example='vpc-t4netc3y5xxxx'),
  zoneId?: string(name='zoneId', example='cn-hangzhou-h'),
}

model CreateInstanceResponseBody = {
  data?: {
    code?: string(name='Code', example='InvalidVpcOrVSwitch.NotAvailable'),
    instanceId?: string(name='InstanceId', example='hgpostcn-cn-xxxxxx'),
    message?: string(name='Message'),
    orderId?: string(name='OrderId', example='217523224780172'),
    success?: string(name='Success', example='true'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='null'),
  errorMessage?: string(name='ErrorMessage', example='null'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', description='Id of the request', example='9CC37B9F-F4B4-5FF1-939B-AEE78DC70130'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoPay)) {
    body['autoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.autoRenew)) {
    body['autoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.chargeType)) {
    body['chargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.coldStorageSize)) {
    body['coldStorageSize'] = request.coldStorageSize;
  }
  if (!Util.isUnset(request.cpu)) {
    body['cpu'] = request.cpu;
  }
  if (!Util.isUnset(request.duration)) {
    body['duration'] = request.duration;
  }
  if (!Util.isUnset(request.gatewayCount)) {
    body['gatewayCount'] = request.gatewayCount;
  }
  if (!Util.isUnset(request.instanceName)) {
    body['instanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.instanceType)) {
    body['instanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.leaderInstanceId)) {
    body['leaderInstanceId'] = request.leaderInstanceId;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    body['pricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.regionId)) {
    body['regionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['resourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.storageSize)) {
    body['storageSize'] = request.storageSize;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    body['vSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    body['vpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    body['zoneId'] = request.zoneId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstance',
    version = '2022-06-01',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createInstanceWithOptions(request, headers, runtime);
}

model DeleteInstanceRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteInstanceResponseBody = {
  data?: boolean(name='Data', example='true'),
  errorCode?: string(name='ErrorCode', example='null'),
  errorMessage?: string(name='ErrorMessage', example='null'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', description='Id of the request', example='CB13FFDD-2DF8-5396-A848-2D6A31245B6D'),
  success?: boolean(name='Success', example='true'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstanceWithOptions(instanceId: string, request: DeleteInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstance',
    version = '2022-06-01',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${OpenApiUtil.getEncodeParam(instanceId)}/delete`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteInstance(instanceId: string, request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteInstanceWithOptions(instanceId, request, headers, runtime);
}

model GetInstanceResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='404'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  instance?: {
    autoRenewal?: string(name='AutoRenewal', description='Indicates whether auto-renewal is enabled.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
    coldStorage?: long(name='ColdStorage', description='The cold storage capacity of the instance. Unit: GB. Standard SSD is used for hot storage, and HDD is used for cold storage.', example='800'),
    commodityCode?: string(name='CommodityCode', description='The commodity code.

Valid values:

*   hologram_maxcomputeAccelerate_public_cn

    <!-- -->

    :

    <!-- -->

    China site/Lakehouse Acceleration Edition

    <!-- -->

    .

*   hologram_combo_public_cn

    <!-- -->

    :

    <!-- -->

    China site/Subscription

    <!-- -->

    .

*   hologram_prepay_public_intl

    <!-- -->

    :

    <!-- -->

    International site/Subscription

    <!-- -->

    .

*   hologram_storage_dp_cn

    <!-- -->

    :

    <!-- -->

    China site/Storage plan

    <!-- -->

    .

*   hologram_postpay_public_cn

    <!-- -->

    :

    <!-- -->

    China site/Pay-as-you-go

    <!-- -->

    .

*   hologram_postpay_public_intl

    <!-- -->

    :

    <!-- -->

    International site/Pay-as-you-go

    <!-- -->

*   hologram_maxcomputeAccelerate_public_intl

    <!-- -->

    :

    <!-- -->

    International site/Lakehouse Acceleration Edition

    <!-- -->

    .

*   hologram_cu_dp_cn

    <!-- -->

    :

    <!-- -->

    China site/Compute plan

    <!-- -->', example='hologram_combo_public_cn'),
    computeNodeCount?: long(name='ComputeNodeCount', description='The number of compute nodes. In a typical configuration, a node has 16 vCPUs and 32 GB of memory.', example='2'),
    cpu?: long(name='Cpu', description='The number of vCPUs.', example='32'),
    creationTime?: string(name='CreationTime', description='The creation time.', example='2021-02-03T13:06:06Z'),
    disk?: string(name='Disk', description='The amount of data that can be stored in the disk of the Standard storage class. Unit: GB.', example='500'),
    enableHiveAccess?: string(name='EnableHiveAccess', description='Indicates whether data lake acceleration is enabled.', example='true'),
    endpoints?: [ 
      {
        alternativeEndpoints?: string(name='AlternativeEndpoints', description='The endpoint. This parameter is returned if both the AnyTunnel and SingleTunnel modes are enabled for an instance, and the instance is switched from the AnyTunnel mode to the SingleTunnel mode. In this case, two endpoints are returned.', example='hgprecn-cn-uqm362o1b001-cn-hangzhou-internal.hologres.aliyuncs.com:80'),
        enabled?: boolean(name='Enabled', description='Indicates whether the network is enabled.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
        endpoint?: string(name='Endpoint', description='The endpoint.', example='hgprecn-cn-uqm362o1b001-cn-hangzhou-internal.hologres.aliyuncs.com:80'),
        type?: string(name='Type', description='The network type.

Valid values:

*   VPCSingleTunnel

    <!-- -->

    :

    <!-- -->

    virtual private cloud (VPC)

    <!-- -->

    .

*   Intranet

    <!-- -->

    :

    <!-- -->

    internal network

    <!-- -->

    .

*   VPCAnyTunnel

    <!-- -->

    :

    <!-- -->

    not supported by new instances

    <!-- -->

*   Internet

    <!-- -->

    :

    <!-- -->

    Internet

    <!-- -->

    .', example='Internet'),
        vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-bp1jqwp2ys6kp7tc9t983'),
        vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-uf66jjber3hgvwhki3wna'),
        vpcInstanceId?: string(name='VpcInstanceId', description='The ID of VPC to which the instance belongs.', example='hgprecn-cn-uqm362o1b001-frontend-st'),
      }
    ](name='Endpoints', description='The list of endpoints.'),
    expirationTime?: string(name='ExpirationTime', description='The expiration time. This parameter is invalid for pay-as-you-go instances.', example='2021-02-03T13:06:06Z'),
    gatewayCount?: long(name='GatewayCount', description='网关节点数量。', example='2'),
    gatewayCpu?: long(name='GatewayCpu', description='网关cpu资源。
单位：core。', example='4'),
    gatewayMemory?: long(name='GatewayMemory', description='网关内存资源。
单位：GB。', example='16'),
    instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance.

Valid values:

*   PostPaid

    <!-- -->

    :

    <!-- -->

    pay-as-you-go

    <!-- -->

    .

*   PrePaid

    <!-- -->

    :

    <!-- -->

    subscription

    <!-- -->

    .', example='PrePaid'),
    instanceId?: string(name='InstanceId', description='The instance ID.', example='hgpostcn-cn-tl32s6cgw00b'),
    instanceName?: string(name='InstanceName', description='The instance name. The instance name must be 2 to 64 characters in length.', example='test'),
    instanceOwner?: string(name='InstanceOwner', description='The owner of the instance.', example='12345678900000'),
    instanceStatus?: string(name='InstanceStatus', description='The status of the instance.

Valid values:

*   Creating

    <!-- -->

    <!-- -->

    <!-- -->

*   Running

    <!-- -->

    <!-- -->

    <!-- -->

*   Suspended

    <!-- -->

    <!-- -->

    <!-- -->

*   Allocating

    <!-- -->

    <!-- -->

    <!-- -->', example='Running'),
    instanceType?: string(name='InstanceType', description='The type of the instance.

Valid values:

*   Follower

    <!-- -->

    :

    <!-- -->

    read-only secondary instance

    <!-- -->

    .

*   Standard

    <!-- -->

    :

    <!-- -->

    normal instance

    <!-- -->

    .', example='Standard'),
    leaderInstanceId?: string(name='LeaderInstanceId', description='The ID of the primary instance.', example='hgpostcn-cn-i7m2ncd6w002'),
    memory?: long(name='Memory', description='The memory size. Unit: GB.', example='128'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aekzuq7hpybze2i'),
    suspendReason?: string(name='SuspendReason', description='The reason for the suspension.', example='Manual'),
    tags?: [ 
      {
        key?: string(name='Key', description='The tag key.', example='tag'),
        value?: string(name='Value', description='The tag value.', example='value'),
      }
    ](name='Tags', description='The instance tag.'),
    version?: string(name='Version', description='The instance version.', example='r1.3.37'),
    zoneId?: string(name='ZoneId', description='The ID of the zone where the instance resides.', example='cn-hangzhou-h'),
  }(name='Instance', description='The details of the instance.'),
  requestId?: string(name='RequestId', description='The request ID.', example='865A02C2-B374-5DD4-9B34-0CA15DA1AEBD'),
  success?: boolean(name='Success', description='The request result, which indicates whether the request was successful.', example='true'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstanceWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetInstance',
    version = '2022-06-01',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${OpenApiUtil.getEncodeParam(instanceId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstance(instanceId: string): GetInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getInstanceWithOptions(instanceId, headers, runtime);
}

model ListInstancesRequest {
  cmsInstanceType?: string(name='cmsInstanceType'),
  resourceGroupId?: string(name='resourceGroupId', description='The ID of the resource group.', example='rg-acfmvscak73zmby'),
  tag?: [ 
    {
      key?: string(name='key', description='The tag key.', example='mytag'),
      value?: string(name='value', description='The tag value.', example='value'),
    }
  ](name='tag', description='The tags to add to the resource.'),
}

model ListInstancesResponseBody = {
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='404'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  instanceList?: [ 
    {
      commodityCode?: string(name='CommodityCode', description='The commodity code, which is the same as that on the Billing Management page.', example='hologram_postpay_public_cn'),
      creationTime?: string(name='CreationTime', description='The time when the cluster was created.', example='2022-12-16T02:24:05Z'),
      enableHiveAccess?: string(name='EnableHiveAccess', description='Indicates whether lakehouse acceleration is enabled.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
      endpoints?: [ 
        {
          enabled?: boolean(name='Enabled', description='Indicates whether the endpoint is enabled.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
          endpoint?: string(name='Endpoint', description='The endpoint.', example='hgpostcn-cn-aaab9ad2d8fb-cn-hangzhou-internal.hologres.aliyuncs.com:80'),
          type?: string(name='Type', description='The network type.

Valid values:

*   VPCSingleTunnel

    <!-- -->

    :

    <!-- -->

    virtual private cloud (VPC)

    <!-- -->

    .

*   Intranet

    <!-- -->

    :

    <!-- -->

    internal network

    <!-- -->

*   VPCAnyTunnel

    <!-- -->

    : This value is not supported by new instances

    <!-- -->

    <!-- -->

    .

*   Internet

    <!-- -->

    :

    <!-- -->

    Internet

    <!-- -->

    .', example='Internet'),
          vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-wz9oap28raidjevhuszg4'),
          vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-uf6mrahzyu7uorlqqpz5f'),
          vpcInstanceId?: string(name='VpcInstanceId', description='The ID of the VPC to which the instance belongs.', example='hgpostcn-cn-wwo3665tx004-frontend-st'),
        }
      ](name='Endpoints', description='The list of endpoints.'),
      expirationTime?: string(name='ExpirationTime', description='The time when the cluster expires.', example='2023-05-04T16:00:00.000Z'),
      instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Valid values:

Valid values:

*   PostPaid

    <!-- -->

    :

    <!-- -->

    pay-as-you-go

    <!-- -->

    .

*   PrePaid

    <!-- -->

    :

    <!-- -->

    subscription

    <!-- -->

    .', example='PrePaid'),
      instanceId?: string(name='InstanceId', description='The instance ID.', example='hgpostcn-cn-aaab9ad2d8fb'),
      instanceName?: string(name='InstanceName', description='The name of the instance.', example='test_instance'),
      instanceStatus?: string(name='InstanceStatus', description='The status of the instance.

Valid values:

*   Creating

    <!-- -->

    <!-- -->

    <!-- -->

*   Running

    <!-- -->

    <!-- -->

    <!-- -->

*   Suspended

    <!-- -->

    <!-- -->

    <!-- -->

*   Allocating

    <!-- -->

    <!-- -->

    <!-- -->', example='Running'),
      instanceType?: string(name='InstanceType', description='The type of the instance.

Valid values:

*   Follower

    <!-- -->

    :

    <!-- -->

    read-only secondary instance

    <!-- -->

    .

*   Standard

    <!-- -->

    :

    <!-- -->

    normal instance

    <!-- -->

    .', example='Standard'),
      leaderInstanceId?: string(name='LeaderInstanceId', description='The ID of the primary instance.', example='hgprecn-cn-2r42sqvxm006'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmvscak73zmby'),
      suspendReason?: string(name='SuspendReason', description='The reason for the suspension.', example='Manual'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='tag'),
          value?: string(name='Value', description='The tag value.', example='value'),
        }
      ](name='Tags', description='The tags that are added to the resource.'),
      version?: string(name='Version', description='The version of the cluster.', example='1.3.37'),
    }
  ](name='InstanceList', description='The list of queried instances.'),
  requestId?: string(name='RequestId', description='The request ID.', example='D1303CD4-AA70-5998-8025-F55B22C50840'),
  success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstancesWithOptions(request: ListInstancesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cmsInstanceType)) {
    body['cmsInstanceType'] = request.cmsInstanceType;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['resourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tag)) {
    body['tag'] = request.tag;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListInstances',
    version = '2022-06-01',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listInstancesWithOptions(request, headers, runtime);
}

model RenewInstanceRequest {
  autoRenew?: boolean(name='autoRenew', example='true'),
  duration?: int32(name='duration', example='2'),
}

model RenewInstanceResponseBody = {
  data?: {
    code?: string(name='Code', example='InvalidChargeType.UnRenewable'),
    message?: string(name='Message'),
    orderId?: string(name='OrderId', example='221625608580893'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='null'),
  errorMessage?: string(name='ErrorMessage', example='null'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', description='Id of the request', example='D3AE84AB-0873-5FC7-A4C4-8CF869D2FA70'),
  success?: string(name='Success', example='false'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewInstanceResponseBody(name='body'),
}

async function renewInstanceWithOptions(instanceId: string, request: RenewInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RenewInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoRenew)) {
    body['autoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.duration)) {
    body['duration'] = request.duration;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RenewInstance',
    version = '2022-06-01',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${OpenApiUtil.getEncodeParam(instanceId)}/renew`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function renewInstance(instanceId: string, request: RenewInstanceRequest): RenewInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return renewInstanceWithOptions(instanceId, request, headers, runtime);
}

model RestartInstanceResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the operation was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='404'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='36291497-CDB0-53DC-8CD7-762E054F57A6'),
  success?: boolean(name='Success', description='The request result, which indicates whether the request was successful.', example='true'),
}

model RestartInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestartInstanceResponseBody(name='body'),
}

async function restartInstanceWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): RestartInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RestartInstance',
    version = '2022-06-01',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${OpenApiUtil.getEncodeParam(instanceId)}/restart`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function restartInstance(instanceId: string): RestartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return restartInstanceWithOptions(instanceId, headers, runtime);
}

model ResumeInstanceResponseBody = {
  data?: boolean(name='Data', description='The returned result, which indicates whether the operation was successful.', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='404'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='D3AE84AB-0873-5FC7-A4C4-8CF869D2FA70'),
  success?: boolean(name='Success', description='The request result, which indicates whether the request was successful.', example='true'),
}

model ResumeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResumeInstanceResponseBody(name='body'),
}

async function resumeInstanceWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ResumeInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ResumeInstance',
    version = '2022-06-01',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${OpenApiUtil.getEncodeParam(instanceId)}/resume`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resumeInstance(instanceId: string): ResumeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return resumeInstanceWithOptions(instanceId, headers, runtime);
}

model ScaleInstanceRequest {
  coldStorageSize?: long(name='coldStorageSize', example='1000G'),
  cpu?: long(name='cpu', example='128'),
  scaleType?: string(name='scaleType', example='UPGRADE'),
  storageSize?: long(name='storageSize', example='1000G'),
}

model ScaleInstanceResponseBody = {
  data?: {
    code?: string(name='Code', example='InvalidScaleType.Unsupported'),
    message?: string(name='Message'),
    orderId?: string(name='OrderId', example='219183853450000'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='null'),
  errorMessage?: string(name='ErrorMessage', example='null'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', description='Id of the request', example='D3AE84AB-0873-5FC7-A4C4-8CF869D2FA70'),
}

model ScaleInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ScaleInstanceResponseBody(name='body'),
}

async function scaleInstanceWithOptions(instanceId: string, request: ScaleInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ScaleInstanceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.coldStorageSize)) {
    body['coldStorageSize'] = request.coldStorageSize;
  }
  if (!Util.isUnset(request.cpu)) {
    body['cpu'] = request.cpu;
  }
  if (!Util.isUnset(request.scaleType)) {
    body['scaleType'] = request.scaleType;
  }
  if (!Util.isUnset(request.storageSize)) {
    body['storageSize'] = request.storageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ScaleInstance',
    version = '2022-06-01',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${OpenApiUtil.getEncodeParam(instanceId)}/scale`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function scaleInstance(instanceId: string, request: ScaleInstanceRequest): ScaleInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return scaleInstanceWithOptions(instanceId, request, headers, runtime);
}

model StopInstanceResponseBody = {
  data?: boolean(name='Data', description='The returned result, which indicates whether the operation was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='404'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='2A8DEF6E-067E-5DB0-BAE1-2894266E6C6A'),
  success?: boolean(name='Success', description='The request result, which indicates whether the request was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
}

model StopInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopInstanceResponseBody(name='body'),
}

async function stopInstanceWithOptions(instanceId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StopInstanceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StopInstance',
    version = '2022-06-01',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${OpenApiUtil.getEncodeParam(instanceId)}/stop`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopInstance(instanceId: string): StopInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopInstanceWithOptions(instanceId, headers, runtime);
}

model UpdateInstanceNameRequest {
  instanceName?: string(name='instanceName', description='The new name of the instance.', example='new_name'),
}

model UpdateInstanceNameResponseBody = {
  data?: boolean(name='Data', description='The returned result, which indicates whether the operation was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='404'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='C6B55032-D41A-5FE0-9C07-8BD81C88422E'),
  success?: boolean(name='Success', description='The request result, which indicates whether the request was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
}

model UpdateInstanceNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateInstanceNameResponseBody(name='body'),
}

async function updateInstanceNameWithOptions(instanceId: string, request: UpdateInstanceNameRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateInstanceNameResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.instanceName)) {
    body['instanceName'] = request.instanceName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateInstanceName',
    version = '2022-06-01',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${OpenApiUtil.getEncodeParam(instanceId)}/instanceName`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateInstanceName(instanceId: string, request: UpdateInstanceNameRequest): UpdateInstanceNameResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateInstanceNameWithOptions(instanceId, request, headers, runtime);
}

model UpdateInstanceNetworkTypeRequest {
  anyTunnelToSingleTunnel?: string(name='anyTunnelToSingleTunnel', description='Specifies whether to change the network type from AnyTunnel to SingleTunnel. This parameter is invalid for new instances. For new instances, this parameter is set to null by default.

Valid values:

*   others/null

    <!-- -->

    <!-- -->

    <!-- -->

*   true

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
  networkTypes?: string(name='networkTypes', description='A list of network types that you want to enable. The list of enabled network types is randomly ordered. For example, the Internet, internal network, and VPCSingleTunnel network types are enabled. If you want to disable the Internet type, set this parameter to Intranet,VPCSingleTunnel.', example='Internet,VPCSingleTunnel'),
  vSwitchId?: string(name='vSwitchId', description='The vSwitch ID.', example='vsw-2vccsiymtqr9aavew0vo3'),
  vpcId?: string(name='vpcId', description='The ID of the VPC to which the instance belongs.', example='vpc-t4netc3y5etlondfb5ra7'),
  vpcOwnerId?: string(name='vpcOwnerId', description='The owner ID of the VPC, which is the ID of the Alibaba Cloud account.', example='1999365732646672'),
  vpcRegionId?: string(name='vpcRegionId', description='The region ID of the VPC.', example='cn-hangzhou'),
}

model UpdateInstanceNetworkTypeResponseBody = {
  data?: string(name='Data', description='The returned result, which indicates whether the operation was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
  errorCode?: string(name='ErrorCode', description='The error code returned if the request failed.', example='404'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request failed.', example='Internal server error.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='9CC37B9F-F4B4-5FF1-939B-AEE78DC70130'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
}

model UpdateInstanceNetworkTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateInstanceNetworkTypeResponseBody(name='body'),
}

async function updateInstanceNetworkTypeWithOptions(instanceId: string, request: UpdateInstanceNetworkTypeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateInstanceNetworkTypeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.anyTunnelToSingleTunnel)) {
    body['anyTunnelToSingleTunnel'] = request.anyTunnelToSingleTunnel;
  }
  if (!Util.isUnset(request.networkTypes)) {
    body['networkTypes'] = request.networkTypes;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    body['vSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    body['vpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vpcOwnerId)) {
    body['vpcOwnerId'] = request.vpcOwnerId;
  }
  if (!Util.isUnset(request.vpcRegionId)) {
    body['vpcRegionId'] = request.vpcRegionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateInstanceNetworkType',
    version = '2022-06-01',
    protocol = 'HTTPS',
    pathname = `/api/v1/instances/${OpenApiUtil.getEncodeParam(instanceId)}/network`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateInstanceNetworkType(instanceId: string, request: UpdateInstanceNetworkTypeRequest): UpdateInstanceNetworkTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateInstanceNetworkTypeWithOptions(instanceId, request, headers, runtime);
}

