/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @signatureAlgorithm = 'v2';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'arms.aliyuncs.com',
    cn-beijing-finance-1 = 'arms.aliyuncs.com',
    cn-beijing-finance-pop = 'arms.aliyuncs.com',
    cn-beijing-gov-1 = 'arms.aliyuncs.com',
    cn-beijing-nu16-b01 = 'arms.aliyuncs.com',
    cn-edge-1 = 'arms.aliyuncs.com',
    cn-fujian = 'arms.aliyuncs.com',
    cn-haidian-cm12-c01 = 'arms.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'arms.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'arms.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'arms.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'arms.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'arms.aliyuncs.com',
    cn-hangzhou-test-306 = 'arms.aliyuncs.com',
    cn-hongkong-finance-pop = 'arms.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'arms.aliyuncs.com',
    cn-qingdao-nebula = 'arms.aliyuncs.com',
    cn-shanghai-et15-b01 = 'arms.aliyuncs.com',
    cn-shanghai-et2-b01 = 'arms.aliyuncs.com',
    cn-shanghai-inner = 'arms.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'arms.aliyuncs.com',
    cn-shenzhen-inner = 'arms.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'arms.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'arms.aliyuncs.com',
    cn-wuhan = 'arms.aliyuncs.com',
    cn-yushanfang = 'arms.aliyuncs.com',
    cn-zhangbei = 'arms.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'arms.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'arms.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'arms.aliyuncs.com',
    eu-west-1-oxs = 'arms.aliyuncs.com',
    me-east-1 = 'arms.aliyuncs.com',
    rus-west-1-pop = 'arms.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('arms', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CallChainInfo {
  additionalInfo?: string(name='AdditionalInfo'),
  appName?: string(name='AppName'),
  appType?: string(name='AppType'),
  children?: [
    CallChainInfo
  ](name='Children'),
  haveSpan?: boolean(name='HaveSpan'),
  logMap?: map[string]object(name='LogMap'),
  logTime?: long(name='LogTime'),
  parentSpanId?: string(name='ParentSpanId'),
  pid?: string(name='Pid'),
  regionId?: string(name='RegionId'),
  resultCode?: string(name='ResultCode'),
  rpc?: string(name='Rpc'),
  rpcId?: string(name='RpcId'),
  rpcType?: long(name='RpcType'),
  serverIp?: string(name='ServerIp'),
  span?: long(name='Span'),
  spanId?: string(name='SpanId'),
  tagMap?: map[string]string(name='TagMap'),
  traceId?: string(name='TraceId'),
}

model GrafanaWorkspace {
  commercial?: boolean(name='commercial'),
  deployType?: string(name='deployType'),
  description?: string(name='description'),
  endTime?: float(name='endTime', example='1652803200000'),
  gmtCreate?: float(name='gmtCreate', example='创建时间'),
  grafanaVersion?: string(name='grafanaVersion'),
  grafanaWorkspaceDomain?: string(name='grafanaWorkspaceDomain'),
  grafanaWorkspaceEdition?: string(name='grafanaWorkspaceEdition', example='experts_edition/advanced_edition/standard'),
  grafanaWorkspaceId?: string(name='grafanaWorkspaceId', example='g-thisisademo666'),
  grafanaWorkspaceIp?: string(name='grafanaWorkspaceIp', example='127.0.0.1:3000'),
  grafanaWorkspaceName?: string(name='grafanaWorkspaceName'),
  maxAccount?: string(name='maxAccount', example='10'),
  ntmId?: string(name='ntmId'),
  personalDomain?: string(name='personalDomain'),
  personalDomainPrefix?: string(name='personalDomainPrefix'),
  privateDomain?: string(name='privateDomain'),
  privateIp?: string(name='privateIp'),
  protocol?: string(name='protocol', example='http/https'),
  regionId?: string(name='regionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='resourceGroupId'),
  shareSynced?: boolean(name='shareSynced'),
  snatIp?: string(name='snatIp', example='1.1.1.1'),
  status?: string(name='status', example='Starting/Running/Stop/DeleteSucceed'),
  tags?: [ 
    {
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='tags'),
  upgradeVersion?: [ string ](name='upgradeVersion'),
  userId?: string(name='userId', example='66666666'),
}

model GrafanaWorkspaceAccount {
  accountId?: long(name='accountId', example='1'),
  accountNotes?: string(name='accountNotes'),
  aliyunUid?: string(name='aliyunUid', example='131243781293'),
  aliyunUserName?: string(name='aliyunUserName', example='test'),
  gmtCreate?: float(name='gmtCreate', example='创建时间'),
  orgs?: [
    GrafanaWorkspaceUserOrg
  ](name='orgs'),
  type?: string(name='type', example='aliyun'),
}

model GrafanaWorkspaceAlertNotification {
  id?: long(name='id', example='1'),
  isArms?: boolean(name='isArms', example='true'),
  isDefault?: boolean(name='isDefault', example='true'),
  name?: string(name='name', example='test'),
  sendReminder?: boolean(name='sendReminder', example='true'),
  settings?: string(name='settings', example='{}'),
  type?: string(name='type', example='Email'),
  uid?: string(name='uid', example='Xfdf******'),
}

model GrafanaWorkspaceArmsAlertConfig {
  armsAlertsEnable?: string(name='armsAlertsEnable', example='true'),
  armsAlertsWebhookUrl?: string(name='armsAlertsWebhookUrl'),
}

model GrafanaWorkspaceCustomDomain {
  cert?: string(name='cert', example='protocol为http时无需填写;'),
  date?: long(name='date', example='1688627798017'),
  domain?: string(name='domain', example='mydomain.com'),
  grafanaWorkspaceId?: string(name='grafanaWorkspaceId', example='grafana-cn-***********'),
  id?: long(name='id', example='1'),
  key?: string(name='key', example='protocol为http时无需填写;'),
  privateZone?: string(name='privateZone', example='true'),
  protocol?: string(name='protocol', example='https'),
  status?: string(name='status', example='CreateSucceed'),
  uri?: string(name='uri', example='/'),
}

model GrafanaWorkspaceDashboardReport {
  gmtCreate?: long(name='gmtCreate', example='1680861352600'),
  grafanaWorkspaceId?: string(name='grafanaWorkspaceId', example='grafana-cn-**********'),
  id?: long(name='id', example='1'),
  lastSendTime?: long(name='lastSendTime', example='1680861352600'),
  msg?: string(name='msg'),
  name?: string(name='name'),
  reportChannelTarget?: string(name='reportChannelTarget', example='******@aliyun.com'),
  reportChannelType?: string(name='reportChannelType', example='Email'),
  reportStyle?: string(name='reportStyle', example='Grid,Simple'),
  reportType?: string(name='reportType', example='Image'),
  status?: string(name='status'),
  triggerDay?: string(name='triggerDay', example='1'),
  triggerTime?: string(name='triggerTime', example='12:25'),
  triggerType?: string(name='triggerType', example='ByWeek'),
  url?: string(name='url', example='Dashboard URL'),
  userId?: string(name='userId'),
}

model GrafanaWorkspaceDashboardSync {
  dashboardTitle?: string(name='dashboardTitle', example='testTitle'),
  dashboardURL?: string(name='dashboardURL', example='https://g.console.aliyun.com/d/1098370038733503-14960236-422-3/ack-pro-apiserver'),
  dashboardUid?: string(name='dashboardUid', example='xxxdvxsea'),
  folderId?: string(name='folderId', example='123456'),
  folderTitle?: string(name='folderTitle', example='test'),
  folderURL?: string(name='folderURL', example='https://g.console.aliyun.com/d/1098370038733503-14960236-422-3/ack-pro-apiserver'),
  folderUid?: string(name='folderUid', example='vxeupqn'),
  orgId?: string(name='orgId', example='1'),
  orgName?: string(name='orgName', example='user123'),
  type?: string(name='type', example='normal'),
}

model GrafanaWorkspaceDataBackup {
  gmtCreate?: long(name='gmtCreate', example='1680861352600'),
  gmtModified?: long(name='gmtModified', example='1680861352600'),
  grafanaWorkspaceId?: string(name='grafanaWorkspaceId', example='grafana-cn-**********'),
  id?: long(name='id', example='1'),
  msg?: string(name='msg'),
  processName?: string(name='processName'),
  processStatus?: string(name='processStatus'),
  subType?: string(name='subType', example='User'),
  userId?: string(name='userId'),
}

model GrafanaWorkspaceIniBackup {
  ext?: string(name='ext'),
  gmtCreate?: long(name='gmtCreate', example='1680861352600'),
  gmtModified?: long(name='gmtModified', example='1680861352600'),
  grafanaWorkspaceId?: string(name='grafanaWorkspaceId', example='grafana-cn-**********'),
  id?: long(name='id', example='1'),
  msg?: string(name='msg'),
  processName?: string(name='processName'),
  processStatus?: string(name='processStatus'),
  subType?: string(name='subType', example='User'),
  userId?: string(name='userId'),
}

model GrafanaWorkspaceIniProperty {
  defaultValue?: string(name='defaultValue'),
  description?: string(name='description'),
  example?: string(name='example'),
  key?: string(name='key'),
  secret?: boolean(name='secret'),
  value?: string(name='value'),
}

model GrafanaWorkspaceIniSection {
  propertys?: [
    GrafanaWorkspaceIniProperty
  ](name='propertys'),
  section?: string(name='section'),
}

model GrafanaWorkspaceIntegration {
  datasourceAmount?: long(name='datasourceAmount'),
  integrationId?: string(name='integrationId'),
  integrationName?: string(name='integrationName'),
  previews?: [
    GrafanaWorkspaceIntegrationPreview
  ](name='previews'),
  status?: string(name='status'),
  supportRegions?: [ string ](name='supportRegions'),
}

model GrafanaWorkspaceIntegrationDataSource {
  clusterType?: string(name='clusterType'),
  datasourceId?: string(name='datasourceId'),
  datasourceName?: string(name='datasourceName'),
  datasourceUrl?: string(name='datasourceUrl'),
  description?: string(name='description'),
  exploreUrl?: string(name='exploreUrl'),
  folderUrl?: string(name='folderUrl'),
  regionId?: string(name='regionId'),
  status?: string(name='status'),
  type?: string(name='type'),
}

model GrafanaWorkspaceIntegrationDetail {
  dataSources?: [
    GrafanaWorkspaceIntegrationDataSource
  ](name='dataSources'),
  integrationId?: string(name='integrationId'),
  status?: string(name='status'),
}

model GrafanaWorkspaceIntegrationPreview {
  id?: string(name='id'),
  image?: string(name='image'),
  name?: string(name='name'),
  thumbnail?: string(name='thumbnail'),
}

model GrafanaWorkspaceMoveProcess {
  gmtCreate?: long(name='gmtCreate', example='1680861352600'),
  gmtModified?: long(name='gmtModified', example='1680861352600'),
  grafanaWorkspaceId?: string(name='grafanaWorkspaceId', example='grafana-cn-**********'),
  id?: long(name='id', example='1'),
  msg?: string(name='msg'),
  processName?: string(name='processName'),
  processStatus?: string(name='processStatus'),
  subType?: string(name='subType', example='User'),
  userId?: string(name='userId'),
}

model GrafanaWorkspaceNews {
  date?: long(name='date'),
  description?: string(name='description'),
  image?: string(name='image'),
  link?: string(name='link'),
  title?: string(name='title'),
}

model GrafanaWorkspaceOperateLog {
  date?: float(name='date'),
  detail?: string(name='detail'),
  grafanaWorkspaceId?: string(name='grafanaWorkspaceId'),
  id?: long(name='id'),
  operatorId?: string(name='operatorId'),
}

model GrafanaWorkspaceOrg {
  id?: long(name='id', example='1'),
  name?: string(name='name', example='main org'),
}

model GrafanaWorkspaceTrans {
  apiUrl?: string(name='apiUrl'),
  authType?: string(name='authType'),
  gmtCreate?: float(name='gmtCreate'),
  gmtModified?: float(name='gmtModified'),
  grafanaWorkspaceId?: string(name='grafanaWorkspaceId'),
  id?: long(name='id'),
  msg?: string(name='msg'),
  processStatus?: string(name='processStatus'),
  transDetails?: [
    GrafanaWorkspaceTransDetail
  ](name='transDetails'),
  userId?: string(name='userId'),
}

model GrafanaWorkspaceTransDetail {
  dashboardAmount?: int32(name='dashboardAmount'),
  dataSourceAmount?: int32(name='dataSourceAmount'),
  original?: long(name='original'),
  originalName?: string(name='originalName'),
  target?: long(name='target'),
  targetName?: string(name='targetName'),
}

model GrafanaWorkspaceUserCert {
  id?: string(name='id', example='8096753'),
  name?: string(name='name', example='cert-7700050 [grafana.tongtong-max.cn]'),
}

model GrafanaWorkspaceUserOrg {
  orgId?: long(name='orgId', example='1'),
  orgName?: string(name='orgName', example='main org'),
  role?: string(name='role', example='admin'),
}

model GrafanaWorkspaceVpcConfig {
  fcConfig?: string(name='fcConfig', example='fc、ansm'),
  id?: long(name='id', example='1'),
  installMsg?: string(name='installMsg'),
  installStatus?: string(name='installStatus', example='CreateSucceed'),
  name?: string(name='name', example='北京VPC-A通道'),
  regionId?: string(name='regionId', example='cn-beijing'),
  securityGroupId?: string(name='securityGroupId', example='sg-6we94uvybteyc******'),
  userId?: string(name='userId', example='10983***********'),
  vSwitchId?: string(name='vSwitchId', example='vsw-6we3**********'),
  vpcId?: string(name='vpcId', example='vpc-6wehr2x**********'),
}

model GrafanaWorkspaceVpcRegion {
  regionId?: string(name='regionId', example='cn-beijing'),
  regionName?: string(name='regionName', example='华北2（北京）'),
}

model GrafanaWorkspaceVpcRegionDetail {
  fcConfig?: string(name='fcConfig', example='fc、ansm'),
  id?: long(name='id', example='配置ID'),
  installStatus?: string(name='installStatus', example='Uninitialized'),
  name?: string(name='name', example='vpc-abc*****'),
  regionId?: string(name='regionId', example='cn-beijing'),
  securityGroupId?: string(name='securityGroupId'),
  securityGroupIds?: [ string ](name='securityGroupIds'),
  userId?: string(name='userId', example='10988**********'),
  vSwitchId?: string(name='vSwitchId'),
  vSwitchIds?: [ string ](name='vSwitchIds'),
  vpcId?: string(name='vpcId', example='vpc-2ze4siu98**********'),
}

model QueryDataResponse {
  results?: string(name='results'),
}

model AddAliClusterIdsToPrometheusGlobalViewRequest {
  clusterIds?: string(name='ClusterIds', description='The IDs of clusters. Separate multiple IDs with commas (,).', example='cd1d55bef19904324a20ed0ebb86caa5c,c5b48729918ab4745a24482ac29d0973a, c00a94896641449098bf24931e4166003, cd174485c09384060ba542bc1be1185a4'),
  globalViewClusterId?: string(name='GlobalViewClusterId', description='The ID of the global aggregation instance.', example='global-v2-cn-1478326682034601-vss8pd0i'),
  groupName?: string(name='GroupName', description='The name of the global aggregation instance.', example='zyGlobalView'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model AddAliClusterIdsToPrometheusGlobalViewResponseBody = {
  code?: int32(name='Code'),
  data?: {
    info?: string(name='Info', description='The Info-level information.', example='{regionId: the region where the aggregation instance resides. globalViewClusterId: the ID of the aggregation instance. failedClusterIds: the ID of the cluster that failed to be added. A cluster may fail to be added because the specified cluster ID is invalid or the cluster is added across continents.}'),
    msg?: string(name='Msg', description='The additional information.', example='OK'),
    success?: boolean(name='Success', description='Indicates whether the request was successful.

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
  }(name='Data', description='The information about the array object.'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='F7781D4A-2818-41E7-B7BB-79D809E9****'),
}

model AddAliClusterIdsToPrometheusGlobalViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddAliClusterIdsToPrometheusGlobalViewResponseBody(name='body'),
}

async function addAliClusterIdsToPrometheusGlobalViewWithOptions(request: AddAliClusterIdsToPrometheusGlobalViewRequest, runtime: Util.RuntimeOptions): AddAliClusterIdsToPrometheusGlobalViewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterIds)) {
    query['ClusterIds'] = request.clusterIds;
  }
  if (!Util.isUnset(request.globalViewClusterId)) {
    query['GlobalViewClusterId'] = request.globalViewClusterId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddAliClusterIdsToPrometheusGlobalView',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addAliClusterIdsToPrometheusGlobalView(request: AddAliClusterIdsToPrometheusGlobalViewRequest): AddAliClusterIdsToPrometheusGlobalViewResponse {
  var runtime = new Util.RuntimeOptions{};
  return addAliClusterIdsToPrometheusGlobalViewWithOptions(request, runtime);
}

model AddGrafanaRequest {
  clusterId?: string(name='ClusterId', description='The ID of the Container Service for Kubernetes (ACK) cluster.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  integration?: string(name='Integration', description='The abbreviation of the software that is supported by Application Real-Time Monitoring Service (ARMS). Valid values (case-insensitive): `ASM`, `IoT`, and `Flink`.', example='asm'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model AddGrafanaResponseBody = {
  data?: string(name='Data', description='Indicates whether the call was successful.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
}

model AddGrafanaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddGrafanaResponseBody(name='body'),
}

async function addGrafanaWithOptions(request: AddGrafanaRequest, runtime: Util.RuntimeOptions): AddGrafanaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.integration)) {
    query['Integration'] = request.integration;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddGrafana',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addGrafana(request: AddGrafanaRequest): AddGrafanaResponse {
  var runtime = new Util.RuntimeOptions{};
  return addGrafanaWithOptions(request, runtime);
}

model AddIntegrationRequest {
  clusterId?: string(name='ClusterId', description='The ID of an Alibaba Cloud Container Service for Kubernetes cluster.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  integration?: string(name='Integration', description='The software abbreviation that is supported by ARMS. Valid values (case-insensitive): `ASM`, `IoT`, and `Flink`.', example='asm'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
}

model AddIntegrationResponseBody = {
  code?: int32(name='Code', description='状态码。200为成功，其他状态码为异常。', example='200'),
  data?: string(name='Data', description='Indicates whether the integration was successful.', example='success'),
  message?: string(name='Message', description='返回结果的提示信息。', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
}

model AddIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddIntegrationResponseBody(name='body'),
}

/**
  * @deprecated : AddIntegration is deprecated, please use ARMS::2019-08-08::InstallAddon instead.
  *
  * @param request AddIntegrationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AddIntegrationResponse
 */
// Deprecated
async function addIntegrationWithOptions(request: AddIntegrationRequest, runtime: Util.RuntimeOptions): AddIntegrationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.integration)) {
    query['Integration'] = request.integration;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddIntegration',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated : AddIntegration is deprecated, please use ARMS::2019-08-08::InstallAddon instead.
  *
  * @param request AddIntegrationRequest
  * @return AddIntegrationResponse
 */
// Deprecated
async function addIntegration(request: AddIntegrationRequest): AddIntegrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return addIntegrationWithOptions(request, runtime);
}

model AddPrometheusGlobalViewRequest {
  clusters?: string(name='Clusters', description='The queried global aggregation instances. The value is a JSON string.'),
  groupName?: string(name='GroupName', description='The name of the aggregation instance.', example='zyGlobalView'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-aek2eq4pecazwfy'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='http.status_code'),
      value?: string(name='Value', description='The tag value.', example='200'),
    }
  ](name='Tag', description='The list of tags.'),
}

model AddPrometheusGlobalViewResponseBody = {
  code?: int32(name='Code'),
  data?: {
    info?: {
      failedInstances?: string(name='FailedInstances', description='The list of instances that failed to be added.', example='\\[{"sourceName": "Data source name- ArmsPrometheus","sourceType":"AlibabaPrometheus","userId":"UserID","clusterId":"ClusterId",}]'),
      globalViewClusterId?: string(name='GlobalViewClusterId', description='The ID of the global aggregation instance.', example='global-v2-cn-1483223059272121-jmjjfznz'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    }(name='Info', description='The Info-level information.'),
    msg?: string(name='Msg', description='The additional information.', example='OK'),
    success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
  }(name='Data', description='The information about the array object.'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model AddPrometheusGlobalViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddPrometheusGlobalViewResponseBody(name='body'),
}

async function addPrometheusGlobalViewWithOptions(request: AddPrometheusGlobalViewRequest, runtime: Util.RuntimeOptions): AddPrometheusGlobalViewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusters)) {
    query['Clusters'] = request.clusters;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddPrometheusGlobalView',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addPrometheusGlobalView(request: AddPrometheusGlobalViewRequest): AddPrometheusGlobalViewResponse {
  var runtime = new Util.RuntimeOptions{};
  return addPrometheusGlobalViewWithOptions(request, runtime);
}

model AddPrometheusGlobalViewByAliClusterIdsRequest {
  clusterIds?: string(name='ClusterIds', example='cd1d55bef19904324a20ed0ebb86caa5c,c5b48729918ab4745a24482ac29d0973a, c00a94896641449098bf24931e4166003, cd174485c09384060ba542bc1be1185a4'),
  groupName?: string(name='GroupName', example='zyGlobalView'),
  productCode?: string(name='ProductCode', example='adcp'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model AddPrometheusGlobalViewByAliClusterIdsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    info?: string(name='Info'),
    msg?: string(name='Msg', example='success'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3A0EA2AF-C9B3-555C-B9D5-5DD8F5EF98A9'),
}

model AddPrometheusGlobalViewByAliClusterIdsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddPrometheusGlobalViewByAliClusterIdsResponseBody(name='body'),
}

async function addPrometheusGlobalViewByAliClusterIdsWithOptions(request: AddPrometheusGlobalViewByAliClusterIdsRequest, runtime: Util.RuntimeOptions): AddPrometheusGlobalViewByAliClusterIdsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterIds)) {
    query['ClusterIds'] = request.clusterIds;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddPrometheusGlobalViewByAliClusterIds',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addPrometheusGlobalViewByAliClusterIds(request: AddPrometheusGlobalViewByAliClusterIdsRequest): AddPrometheusGlobalViewByAliClusterIdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addPrometheusGlobalViewByAliClusterIdsWithOptions(request, runtime);
}

model AddPrometheusInstanceRequest {
  name?: string(name='Name', example='notificationpolicy_test'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  type?: string(name='Type', example='RW'),
}

model AddPrometheusInstanceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', description='The returned struct. { "RequestId": the request ID, "Data": "{ "clusterType": the cluster type, "remoteWriteUrl": the public URL for remote write, "internetGrafanaUrl": the internal URL for Grafana, "authToken": indicates whether authentication is enabled, "internetPushGatewayUrl": the internal URL for Pushgateway, "clusterId": the cluster ID, "internetRemoteReadUrl": the internal URL for remote read, "remoteReadUrl": the public URL for remote read, "grafanaUrl": the public URL for Grafana, "pushGatewayUrl": the public URL for Pushgateway, "internetRemoteWriteUrl": the internal URL for remote write}" }', example='{
  "RequestId": "1293091C-54AD-50FE-B787-E314B94B35AB",
  "Data": "{
  "clusterType":"remote-write-prometheus",
  "remoteWriteUrl":"http://cn-hu/api/v3/write",
  "internetGrafanaUrl":"https://cn-hanga/cn-hangzhou",
  "authToken":false,
  "internetPushGatewayUrl":"https://cangzhou/api/v2",
  "clusterId":"vrju1lj3sa|123456",
  "internetRemoteReadUrl":"https://cn-hangzh67cn-hangzhou/api/v1/read",
  "remoteReadUrl":"http://cn-hanou/api/v1/read",
  "grafanaUrl":"http://cn-angzhou",
  "pushGatewayUrl":"htt1lj3sa/cn-hangzhou/api/v2",
  "internetRemoteWriteUrl":"httpsngzhou/api/v3/write"}"
}'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9319A57D-2D9E-472A-B69B-CF3CD16D****'),
  success?: boolean(name='Success', example='true'),
}

model AddPrometheusInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddPrometheusInstanceResponseBody(name='body'),
}

async function addPrometheusInstanceWithOptions(request: AddPrometheusInstanceRequest, runtime: Util.RuntimeOptions): AddPrometheusInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddPrometheusInstance',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addPrometheusInstance(request: AddPrometheusInstanceRequest): AddPrometheusInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addPrometheusInstanceWithOptions(request, runtime);
}

model AddPrometheusIntegrationRequest {
  clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance. Only a Prometheus instance for Container Service or a Prometheus instance for ECS is supported.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  integrationType?: string(name='IntegrationType', description='The type of the integration.', example='kafka, mysql, redis, snmp, emr, nubela, and tidb'),
  param?: string(name='Param', description='The configurations of the exporter. The value is a JSON string.', example='{"port":"5554","name":"kafka-test12","kafka_instance":"kafka-test","__label_value":"kafka-test","scrape_interval":33,"metrics_path":"/metrics","__label_key":"kafka-test"}'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model AddPrometheusIntegrationResponseBody = {
  code?: int32(name='Code', description='The status code or error code.', example='200'),
  data?: {
    instanceId?: long(name='InstanceId', description='The ID of the exporter.', example='2829'),
    instanceName?: string(name='InstanceName', description='The name of the exporter.', example='hw-cloud02'),
  }(name='Data', description='The struct returned.'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='3703B98C-335E-5BA7-972E-F90E9E768A85'),
}

model AddPrometheusIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddPrometheusIntegrationResponseBody(name='body'),
}

async function addPrometheusIntegrationWithOptions(request: AddPrometheusIntegrationRequest, runtime: Util.RuntimeOptions): AddPrometheusIntegrationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.integrationType)) {
    query['IntegrationType'] = request.integrationType;
  }
  if (!Util.isUnset(request.param)) {
    query['Param'] = request.param;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddPrometheusIntegration',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addPrometheusIntegration(request: AddPrometheusIntegrationRequest): AddPrometheusIntegrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return addPrometheusIntegrationWithOptions(request, runtime);
}

model AddPrometheusRemoteWriteRequest {
  clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance. Only a Prometheus instance for Container Service or a Prometheus instance for ECS is supported.', example='cc7a37ee31aea4ed1a059eff8034b\\*\\*\\*\\* or vpc-xxxxx'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  remoteWriteYaml?: string(name='RemoteWriteYaml', description='The details of the remote write configuration item. Specify the value in the YAML format.', example='remote_write:
  - name: rw1
    url: "http://cn-hangzhou-intranet.arms.aliyuncs.com/prometheus/uid/xx/cn-hangzhou/api/v3/write"
    basic_auth:
      username: xxx
      password: xxx
    write_relabel_configs:
      - source_labels: [ instance_id ]
        separator: ;
        regex: si
        replacement: $1
        action: keep
  - name: rw2
    url: "http://cn-hangzhou-intranet.arms.aliyuncs.com/prometheus/uid/xx/cn-hangzhou/api/v3/write"
    basic_auth:
      username: xxx
      password: xxx
    write_relabel_configs:
      - source_labels: [ xx ]
        separator: ;
        regex: yyy
        replacement: $1
        action: keep'),
}

model AddPrometheusRemoteWriteResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  data?: string(name='Data', description='The name of the remote write configuration item. If the request fails, an error message is returned.', example='1'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C518054-852F-4023-ABC1-4AF95FF7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model AddPrometheusRemoteWriteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddPrometheusRemoteWriteResponseBody(name='body'),
}

async function addPrometheusRemoteWriteWithOptions(request: AddPrometheusRemoteWriteRequest, runtime: Util.RuntimeOptions): AddPrometheusRemoteWriteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.remoteWriteYaml)) {
    body['RemoteWriteYaml'] = request.remoteWriteYaml;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddPrometheusRemoteWrite',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addPrometheusRemoteWrite(request: AddPrometheusRemoteWriteRequest): AddPrometheusRemoteWriteResponse {
  var runtime = new Util.RuntimeOptions{};
  return addPrometheusRemoteWriteWithOptions(request, runtime);
}

model AddRecordingRuleRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  ruleYaml?: string(name='RuleYaml', description='The custom recording rule. The value is in the YAML format.', example='groups: - name: "recording_demo"   rules:   - expr: "sum(jvm_memory_max_bytes)"     record: "rate_coredns_demo"'),
}

model AddRecordingRuleResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data', description='The status of the response.', example='success'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='The request ID.', example='9FEA6D00-317F-45E3-9004-7FB8B0B7****'),
}

model AddRecordingRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddRecordingRuleResponseBody(name='body'),
}

async function addRecordingRuleWithOptions(request: AddRecordingRuleRequest, runtime: Util.RuntimeOptions): AddRecordingRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ruleYaml)) {
    query['RuleYaml'] = request.ruleYaml;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddRecordingRule',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addRecordingRule(request: AddRecordingRuleRequest): AddRecordingRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addRecordingRuleWithOptions(request, runtime);
}

model AddTagToFlinkClusterRequest {
  clusterId?: string(name='ClusterId', example='c5defa51f******c92bd2ef5fb093269'),
  flinkWorkSpaceId?: string(name='FlinkWorkSpaceId', example='ab18f***93744d'),
  flinkWorkSpaceName?: string(name='FlinkWorkSpaceName', example='flink-demo'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxyexli2****'),
  targetUserId?: string(name='TargetUserId', example='198608******7619'),
}

model AddTagToFlinkClusterResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='false'),
  requestId?: string(name='RequestId', description='Id of the request', example='2FC13182-B9AF-4E6B-BE51-72669B7C****'),
  success?: boolean(name='Success', example='true'),
}

model AddTagToFlinkClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddTagToFlinkClusterResponseBody(name='body'),
}

async function addTagToFlinkClusterWithOptions(request: AddTagToFlinkClusterRequest, runtime: Util.RuntimeOptions): AddTagToFlinkClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.flinkWorkSpaceId)) {
    query['FlinkWorkSpaceId'] = request.flinkWorkSpaceId;
  }
  if (!Util.isUnset(request.flinkWorkSpaceName)) {
    query['FlinkWorkSpaceName'] = request.flinkWorkSpaceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.targetUserId)) {
    query['TargetUserId'] = request.targetUserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddTagToFlinkCluster',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addTagToFlinkCluster(request: AddTagToFlinkClusterRequest): AddTagToFlinkClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTagToFlinkClusterWithOptions(request, runtime);
}

model AppendInstancesToPrometheusGlobalViewRequest {
  clusters?: string(name='Clusters', description='The list of global aggregation instances. The value is a JSON string.', example='\\[ { "sourceName": "Data source name- ArmsPrometheus No.1", "sourceType":"AlibabaPrometheus", "userId":"UserID", "clusterId":"ClusterId", }, { "sourceName": "Data source name - MetrcStore No.2", "sourceType":"MetricStore", "dataSource":"Remote read endpoint of the MetricStore", "extras":{ "username":"BasicAuthUsername", "password":"BasicAuthPassword" } }, { "sourceName": "Custom ", "sourceType":"CustomPrometheus", "dataSource":"Remote read endpoint of the self-managed Prometheus data source", "extras":{ "username":"BasicAuthUsername", "password":"BasicAuthPassword" } }, { "sourceName": "Other one ", "sourceType":"Others", "dataSource":"Endpoint of another data source such as Tencent remote read", "headers":{ "AnyHeaderToFill":"Headers to be filled" }, "extras":{ "username":"BasicAuthUsername", "password":"BasicAuthPassword" } } // ....... more addre ]'),
  globalViewClusterId?: string(name='GlobalViewClusterId', description='The ID of the global aggregation instance.', example='global-v2-cn-1670100631025794-6gjc0qgb'),
  groupName?: string(name='GroupName', description='The name of the global aggregation instance.', example='zyGlobalView'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model AppendInstancesToPrometheusGlobalViewResponseBody = {
  code?: int32(name='Code'),
  data?: {
    info?: string(name='Info', description='The Info-level information.', example='{regionId: the region where the aggregation instance resides. globalViewClusterId: the ID of the aggregation instance. failedInstances: the ID of the object that failed to be added.}'),
    msg?: string(name='Msg', description='The additional information.', example='OK'),
    success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   `true`: The call was successful.
*   `false`: The call failed.', example='True'),
  }(name='Data', description='The information about the array object.'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='27E653FA-5958-45BE-8AA9-14D884DC****'),
}

model AppendInstancesToPrometheusGlobalViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AppendInstancesToPrometheusGlobalViewResponseBody(name='body'),
}

async function appendInstancesToPrometheusGlobalViewWithOptions(request: AppendInstancesToPrometheusGlobalViewRequest, runtime: Util.RuntimeOptions): AppendInstancesToPrometheusGlobalViewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusters)) {
    query['Clusters'] = request.clusters;
  }
  if (!Util.isUnset(request.globalViewClusterId)) {
    query['GlobalViewClusterId'] = request.globalViewClusterId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AppendInstancesToPrometheusGlobalView',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function appendInstancesToPrometheusGlobalView(request: AppendInstancesToPrometheusGlobalViewRequest): AppendInstancesToPrometheusGlobalViewResponse {
  var runtime = new Util.RuntimeOptions{};
  return appendInstancesToPrometheusGlobalViewWithOptions(request, runtime);
}

model ApplyScenarioRequest {
  appId?: string(name='AppId', description='The ID of the application.', example='b590lhguqs@28f515462f******'),
  config?: map[string]any(name='Config', description='The configuration of the business monitoring job. The value is a JSON string. For more information about this parameter, see the following additional information about the **Config** parameter.', example='{"rpcType":"0","nameMatchType":"EQUALS","service":"/api/pop/test","operator":"and","filterItems":[{"type":"HttpHeaders","key":"uid","opt":"==","value":"123456789"}],"group":{"type":"HttpRequestParameters","key":"name"}}'),
  name?: string(name='Name', description='The name of the business monitoring job.', example='ScenarioName'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-zhangjaikou'),
  scenario?: string(name='Scenario', description='The scenario where you want to use the business monitoring job. Valid values:

*   `USER-DEFINED`: user-defined. This is the default value.
*   `EDAS-ROLLOUT`: application release in Enterprise Distributed Application Service (EDAS)
*   `OAM-ROLLOUT`: application release based on Open Application Model (OAM)
*   `MSC-CANARY`: canary release based on Microservice Engine (MSE)', example='USER-DEFINED'),
  sign?: string(name='Sign', description='The code of the business monitoring job. This parameter is not required when you create a business monitoring job. However, this parameter is required when you update a business monitoring job.', example='a9f8****'),
  snDump?: boolean(name='SnDump', description='Specifies whether to record business parameters to the trace marked with the coloring sign.

*   `true`
*   `false`: This is the default value.', example='false'),
  snForce?: boolean(name='SnForce', description='Specifies whether traffic in the trace marked with the coloring sign is all collected.

*   `true`
*   `false`: This is the default value.', example='false'),
  snStat?: boolean(name='SnStat', description='Specifies whether to count traffic based on the coloring sign.

*   `true`
*   `false`: This is the default value.', example='false'),
  snTransfer?: boolean(name='SnTransfer', description='Specifies whether the coloring sign is transparently passed down to downstream application nodes in the trace.

*   `true`
*   `false`: This is the default value.', example='false'),
  updateOption?: boolean(name='UpdateOption', description='Specifies whether the operation is an update operation.

*   `true`: update
*   `false`: insert', example='false'),
}

model ApplyScenarioShrinkRequest {
  appId?: string(name='AppId', description='The ID of the application.', example='b590lhguqs@28f515462f******'),
  configShrink?: string(name='Config', description='The configuration of the business monitoring job. The value is a JSON string. For more information about this parameter, see the following additional information about the **Config** parameter.', example='{"rpcType":"0","nameMatchType":"EQUALS","service":"/api/pop/test","operator":"and","filterItems":[{"type":"HttpHeaders","key":"uid","opt":"==","value":"123456789"}],"group":{"type":"HttpRequestParameters","key":"name"}}'),
  name?: string(name='Name', description='The name of the business monitoring job.', example='ScenarioName'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-zhangjaikou'),
  scenario?: string(name='Scenario', description='The scenario where you want to use the business monitoring job. Valid values:

*   `USER-DEFINED`: user-defined. This is the default value.
*   `EDAS-ROLLOUT`: application release in Enterprise Distributed Application Service (EDAS)
*   `OAM-ROLLOUT`: application release based on Open Application Model (OAM)
*   `MSC-CANARY`: canary release based on Microservice Engine (MSE)', example='USER-DEFINED'),
  sign?: string(name='Sign', description='The code of the business monitoring job. This parameter is not required when you create a business monitoring job. However, this parameter is required when you update a business monitoring job.', example='a9f8****'),
  snDump?: boolean(name='SnDump', description='Specifies whether to record business parameters to the trace marked with the coloring sign.

*   `true`
*   `false`: This is the default value.', example='false'),
  snForce?: boolean(name='SnForce', description='Specifies whether traffic in the trace marked with the coloring sign is all collected.

*   `true`
*   `false`: This is the default value.', example='false'),
  snStat?: boolean(name='SnStat', description='Specifies whether to count traffic based on the coloring sign.

*   `true`
*   `false`: This is the default value.', example='false'),
  snTransfer?: boolean(name='SnTransfer', description='Specifies whether the coloring sign is transparently passed down to downstream application nodes in the trace.

*   `true`
*   `false`: This is the default value.', example='false'),
  updateOption?: boolean(name='UpdateOption', description='Specifies whether the operation is an update operation.

*   `true`: update
*   `false`: insert', example='false'),
}

model ApplyScenarioResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EA24D522-AD35-47B8-8CB2-ADBC38******'),
  result?: string(name='Result', description='The code of the business monitoring job, which is the coloring sign.', example='2b97****'),
}

model ApplyScenarioResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyScenarioResponseBody(name='body'),
}

async function applyScenarioWithOptions(tmpReq: ApplyScenarioRequest, runtime: Util.RuntimeOptions): ApplyScenarioResponse {
  Util.validateModel(tmpReq);
  var request = new ApplyScenarioShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.config)) {
    request.configShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.config, 'Config', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.configShrink)) {
    query['Config'] = request.configShrink;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.scenario)) {
    query['Scenario'] = request.scenario;
  }
  if (!Util.isUnset(request.sign)) {
    query['Sign'] = request.sign;
  }
  if (!Util.isUnset(request.snDump)) {
    query['SnDump'] = request.snDump;
  }
  if (!Util.isUnset(request.snForce)) {
    query['SnForce'] = request.snForce;
  }
  if (!Util.isUnset(request.snStat)) {
    query['SnStat'] = request.snStat;
  }
  if (!Util.isUnset(request.snTransfer)) {
    query['SnTransfer'] = request.snTransfer;
  }
  if (!Util.isUnset(request.updateOption)) {
    query['UpdateOption'] = request.updateOption;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyScenario',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyScenario(request: ApplyScenarioRequest): ApplyScenarioResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyScenarioWithOptions(request, runtime);
}

model BindPrometheusGrafanaInstanceRequest {
  clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  grafanaInstanceId?: string(name='GrafanaInstanceId', description='The ID of the Grafana workspace.', example='grafana-bp1*****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Prometheus instance belongs.', example='rg-acfmxyexli2****'),
}

model BindPrometheusGrafanaInstanceResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the request was successful.

*   true
*   false', example='true'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='27E653FA-5958-45BE-8AA9-14D884DC****'),
}

model BindPrometheusGrafanaInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindPrometheusGrafanaInstanceResponseBody(name='body'),
}

async function bindPrometheusGrafanaInstanceWithOptions(request: BindPrometheusGrafanaInstanceRequest, runtime: Util.RuntimeOptions): BindPrometheusGrafanaInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.grafanaInstanceId)) {
    query['GrafanaInstanceId'] = request.grafanaInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindPrometheusGrafanaInstance',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindPrometheusGrafanaInstance(request: BindPrometheusGrafanaInstanceRequest): BindPrometheusGrafanaInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindPrometheusGrafanaInstanceWithOptions(request, runtime);
}

model BlockAlarmNotificationRequest {
  alarmId?: long(name='AlarmId', example='133'),
  handlerId?: long(name='HandlerId', example='2044049'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  timeout?: long(name='Timeout', example='180'),
}

model BlockAlarmNotificationResponseBody = {
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='626037F5-FDEB-45B0-804C-B3C92797****'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model BlockAlarmNotificationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BlockAlarmNotificationResponseBody(name='body'),
}

async function blockAlarmNotificationWithOptions(request: BlockAlarmNotificationRequest, runtime: Util.RuntimeOptions): BlockAlarmNotificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alarmId)) {
    query['AlarmId'] = request.alarmId;
  }
  if (!Util.isUnset(request.handlerId)) {
    query['HandlerId'] = request.handlerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BlockAlarmNotification',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function blockAlarmNotification(request: BlockAlarmNotificationRequest): BlockAlarmNotificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return blockAlarmNotificationWithOptions(request, runtime);
}

model ChangeAlarmSeverityRequest {
  alarmId?: long(name='AlarmId', example='155'),
  handlerId?: long(name='HandlerId', example='2046076'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  severity?: string(name='Severity', example='P1'),
}

model ChangeAlarmSeverityResponseBody = {
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='F7781D4A-2818-41E7-B7BB-79D809E9****'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model ChangeAlarmSeverityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeAlarmSeverityResponseBody(name='body'),
}

async function changeAlarmSeverityWithOptions(request: ChangeAlarmSeverityRequest, runtime: Util.RuntimeOptions): ChangeAlarmSeverityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alarmId)) {
    query['AlarmId'] = request.alarmId;
  }
  if (!Util.isUnset(request.handlerId)) {
    query['HandlerId'] = request.handlerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.severity)) {
    query['Severity'] = request.severity;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeAlarmSeverity',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeAlarmSeverity(request: ChangeAlarmSeverityRequest): ChangeAlarmSeverityResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeAlarmSeverityWithOptions(request, runtime);
}

model ChangeResourceGroupRequest {
  newResourceGroupId?: string(name='NewResourceGroupId', description='The ID of the new resource group. You can view the available resource groups in the Resource Management console.', example='rg-aek2vezare****'),
  regionId?: string(name='RegionId', description='The region ID of the resource.', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', description='The resource ID.', example='ggxw4lnjuz@cfd34a78f******'),
  resourceType?: string(name='ResourceType', description='The resource type.', example='APPLICATION'),
}

model ChangeResourceGroupResponseBody = {
  code?: string(name='Code', description='The status code or error code.', example='200'),
  data?: {
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aek2vezare****'),
    resourceId?: string(name='ResourceId', description='The resource ID.', example='ggxw4lnjuz@cfd34a78f******'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='46355DD8-FC56-40C5-BFC6-269DE4F9****'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroupWithOptions(request: ChangeResourceGroupRequest, runtime: Util.RuntimeOptions): ChangeResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.newResourceGroupId)) {
    query['NewResourceGroupId'] = request.newResourceGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeResourceGroup',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeResourceGroupWithOptions(request, runtime);
}

model CheckCommercialStatusRequest {
  regionId?: string(name='RegionId', description='The region ID. Default value: cn-hangzhou.', example='cn-hangzhou'),
  service?: string(name='Service', description='Sub-services:
- apm: Application Monitoring
- rum: Real User Monitoring
- prometheus: Managed Service for Prometheus
- xtrace: Managed Service for OpenTelemetry', example='apm'),
}

model CheckCommercialStatusResponseBody = {
  data?: string(name='Data', description='The returned struct.', example='True'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1A474FF8-7861-4D00-81B5-5BC3DA4E****'),
}

model CheckCommercialStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckCommercialStatusResponseBody(name='body'),
}

/**
  * You can call this operation to check whether ARMS is available for commercial use in a region.
  *
  * @param request CheckCommercialStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CheckCommercialStatusResponse
 */
async function checkCommercialStatusWithOptions(request: CheckCommercialStatusRequest, runtime: Util.RuntimeOptions): CheckCommercialStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckCommercialStatus',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to check whether ARMS is available for commercial use in a region.
  *
  * @param request CheckCommercialStatusRequest
  * @return CheckCommercialStatusResponse
 */
async function checkCommercialStatus(request: CheckCommercialStatusRequest): CheckCommercialStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkCommercialStatusWithOptions(request, runtime);
}

model CheckServiceStatusRequest {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-beijing'),
  svcCode?: string(name='SvcCode', description='The service code of an Alibaba Cloud service. The service code of Managed Service for Prometheus is prometheus.', example='prometheus'),
}

model CheckServiceStatusResponseBody = {
  data?: string(name='Data', description='Indicates whether the request was successful. Valid values:

*   true.
*   false.', example='true'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to find logs and troubleshoot issues.', example='5710C923-AD09-4293-9E11-DCBE3D15F8D4'),
}

model CheckServiceStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckServiceStatusResponseBody(name='body'),
}

async function checkServiceStatusWithOptions(request: CheckServiceStatusRequest, runtime: Util.RuntimeOptions): CheckServiceStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.svcCode)) {
    query['SvcCode'] = request.svcCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckServiceStatus',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkServiceStatus(request: CheckServiceStatusRequest): CheckServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkServiceStatusWithOptions(request, runtime);
}

model ClaimAlarmRequest {
  alarmId?: long(name='AlarmId', example='30'),
  handlerId?: long(name='HandlerId', example='2046076'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ClaimAlarmResponseBody = {
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='6A9AEA84-7186-4D8D-B498-4585C6A2****'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model ClaimAlarmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ClaimAlarmResponseBody(name='body'),
}

async function claimAlarmWithOptions(request: ClaimAlarmRequest, runtime: Util.RuntimeOptions): ClaimAlarmResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alarmId)) {
    query['AlarmId'] = request.alarmId;
  }
  if (!Util.isUnset(request.handlerId)) {
    query['HandlerId'] = request.handlerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ClaimAlarm',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function claimAlarm(request: ClaimAlarmRequest): ClaimAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  return claimAlarmWithOptions(request, runtime);
}

model CloseAlarmRequest {
  alarmId?: long(name='AlarmId', example='163'),
  handlerId?: long(name='HandlerId', example='2048065'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  solution?: string(name='Solution'),
}

model CloseAlarmResponseBody = {
  code?: long(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='46355DD8-FC56-40C5-BFC6-269DE4F9****'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='True'),
}

model CloseAlarmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloseAlarmResponseBody(name='body'),
}

async function closeAlarmWithOptions(request: CloseAlarmRequest, runtime: Util.RuntimeOptions): CloseAlarmResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alarmId)) {
    query['AlarmId'] = request.alarmId;
  }
  if (!Util.isUnset(request.handlerId)) {
    query['HandlerId'] = request.handlerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.solution)) {
    query['Solution'] = request.solution;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CloseAlarm',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function closeAlarm(request: CloseAlarmRequest): CloseAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  return closeAlarmWithOptions(request, runtime);
}

model ConfigAppRequest {
  appIds?: string(name='AppIds', description='The process identifier (PID) of the application. Separate multiple PIDs with commas (,).', example='iioe7jcnuk@582846f37******,atc889zkcf@d8deedfa9bf******'),
  enable?: string(name='Enable', description='Specifies whether to turn on or off the main switch of the ARMS agent. The monitoring stops after the switch is turned off. If you do not specify this parameter, the main switch status of the ARMS agent is queried.

*   `true`: turns on the switch
*   `false`: turns off the switch', example='true'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  type?: string(name='Type', description='The type of the application. Set the value to **TRACE**.', example='TRACE'),
}

model ConfigAppResponseBody = {
  data?: string(name='Data', description='The result of turning on or off the main switch of the ARMS agent or the main switch status of the ARMS agent. Indicates whether the request was successful. Valid values: success failed The main switch status of the ARMS agent. Valid values: true false', example='abc@def success\\nghi@jkl success\\n'),
  requestId?: string(name='RequestId', description='The request ID.', example='16AF921B-8187-489F-9913-43C808B4****'),
}

model ConfigAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigAppResponseBody(name='body'),
}

/**
  * ****
  *
  * @param request ConfigAppRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ConfigAppResponse
 */
async function configAppWithOptions(request: ConfigAppRequest, runtime: Util.RuntimeOptions): ConfigAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appIds)) {
    query['AppIds'] = request.appIds;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfigApp',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ****
  *
  * @param request ConfigAppRequest
  * @return ConfigAppResponse
 */
async function configApp(request: ConfigAppRequest): ConfigAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return configAppWithOptions(request, runtime);
}

model CreateAlertContactRequest {
  contactName?: string(name='ContactName', description='The name of the alert contact.', example='JohnDoe'),
  dingRobotWebhookUrl?: string(name='DingRobotWebhookUrl', description='The webhook URL of the DingTalk chatbot. For more information about how to obtain the URL, see [Configure a DingTalk chatbot to send alert notifications](https://www.alibabacloud.com/help/zh/doc-detail/106247.htm). You must specify at least one of the following parameters: PhoneNum, Email, and DingRobotWebhookUrl.

>  Enter `alert` in the custom keyword field of DingTalk chatbot security settings.', example='https://oapi.dingtalk.com/robot/send?access_token=91f2f6****'),
  email?: string(name='Email', description='The email address of the alert contact. You must specify at least one of the following parameters: PhoneNum, Email, and DingRobotWebhookUrl.', example='someone@example.com'),
  phoneNum?: string(name='PhoneNum', description='The mobile number of the alert contact. You must specify at least one of the following parameters: PhoneNum, Email, and DingRobotWebhookUrl.', example='1381111****'),
  regionId?: string(name='RegionId', description='The ID of the region. Set the value to `cn-hangzhou`.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. You can obtain the resource group ID in the **Resource Management** console.', example='rg-aek2eq4peca****'),
  systemNoc?: boolean(name='SystemNoc', description='Specifies whether the alert contact receives system notifications. Valid values:

*   `true`: The alert contact receives system notifications.
*   `false`: The alert contact does not receive system notifications.', example='true'),
}

model CreateAlertContactResponseBody = {
  contactId?: string(name='ContactId', description='The ID of the alert contact.', example='102**'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E9C9DA3D-10FE-472E-9EEF-2D0A3E41****'),
}

model CreateAlertContactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAlertContactResponseBody(name='body'),
}

/**
  * This operation is no longer maintained. To create or modify an alert contact, call the CreateOrUpdateContact operation provided by the new version of the Alert Management module.
  *
  * @param request CreateAlertContactRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateAlertContactResponse
 */
async function createAlertContactWithOptions(request: CreateAlertContactRequest, runtime: Util.RuntimeOptions): CreateAlertContactResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactName)) {
    query['ContactName'] = request.contactName;
  }
  if (!Util.isUnset(request.dingRobotWebhookUrl)) {
    query['DingRobotWebhookUrl'] = request.dingRobotWebhookUrl;
  }
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  if (!Util.isUnset(request.phoneNum)) {
    query['PhoneNum'] = request.phoneNum;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.systemNoc)) {
    query['SystemNoc'] = request.systemNoc;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAlertContact',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation is no longer maintained. To create or modify an alert contact, call the CreateOrUpdateContact operation provided by the new version of the Alert Management module.
  *
  * @param request CreateAlertContactRequest
  * @return CreateAlertContactResponse
 */
async function createAlertContact(request: CreateAlertContactRequest): CreateAlertContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAlertContactWithOptions(request, runtime);
}

model CreateAlertContactGroupRequest {
  contactGroupName?: string(name='ContactGroupName', example='TestGroup'),
  contactIds?: string(name='ContactIds', example='12* 23* 34*'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model CreateAlertContactGroupResponseBody = {
  contactGroupId?: string(name='ContactGroupId', example='446*'),
  requestId?: string(name='RequestId', example='70675725-8F11-4817-8106-CFE0AD71****'),
}

model CreateAlertContactGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAlertContactGroupResponseBody(name='body'),
}

async function createAlertContactGroupWithOptions(request: CreateAlertContactGroupRequest, runtime: Util.RuntimeOptions): CreateAlertContactGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactGroupName)) {
    query['ContactGroupName'] = request.contactGroupName;
  }
  if (!Util.isUnset(request.contactIds)) {
    query['ContactIds'] = request.contactIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAlertContactGroup',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAlertContactGroup(request: CreateAlertContactGroupRequest): CreateAlertContactGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAlertContactGroupWithOptions(request, runtime);
}

model CreateDispatchRuleRequest {
  dispatchRule?: string(name='DispatchRule', description='## Additional information about the **DispatchRule** parameter

**JSON string example and description**

```

{
  "system": false,        // Specifies whether the dispatch rule is editable. Valid values: true: not editable. false: editable. 
  "ruleid": 10282,           // The ID of the dispatch rule. 
  "name": "Prometheus Alert",   // The name of the dispatch policy. 
  "labelMatchExpressionGrid": {
    "labelMatchExpressionGroups": [     // Sets the dispatch rule. 
      {
        "labelMatchExpressions": [
          {
            "key": "_aliyun_arms_involvedObject_kind", // The key of the tag of the dispatch rule. For more information, see the next section. 
            "value": "app",                              // The value of the tag. 
            "operator": "eq"                             // The operator used in the dispatch rule. Valid values: eq: equals to. re: matches a regular expression. 
          }
        ]
      }
    ]
  },
  "dispatchType": "CREATE_ALERT/DISCARD_ALERT",    // The alert handling method. Valid values: CREATE_ALERT: generates an alert. DISCARD_ALERT: discards the alert event and generates no alert. 
  "isRecover": true,               // Specifies whether to send the restored alert. Valid values: true: sends the alert. false: does not send the alert. 
  "groupRules": [                  // Sets the event group. 
    {
      "groupId": 1,               // The ID of the group. 
      "groupingFields": [         // The fields that are used to group events. Events with the same field content are assigned to a group. Alerts with the same specified grouping field are sent to the handler in separate notifications. 
        "alertname"
      ],
      "groupWait": 10,                 // The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler. 
      "groupInterval": 15,             // The grouping interval. During the silence period of repeated alerts, if new alerts are generated, they will be sent after the group waiting time. 
      "repeatInterval": 20             // The silence period of repeated alerts. All alerts are repeatedly sent at specified intervals until the alerts are cleared. 
    }
  ],
  "notifyRules": [            // Sets the notification rule. 
    {
      "notifyObjects": [
        {
          "notifyType": "ARMS_CONTACT",     // The type of the alert contact. Valid values: ARMS_CONTACT: contact. ARMS_CONTACT_GROUP: contact group. 
          "name": "JohnDoe",                // The name of the contact or contact group. 
          "notifyObjectId": 1               // The ID of the contact or contact group. 
        },
        {
          "notifyType": "ARMS_CONTACT_GROUP",
          "name": "JohnDoe_group",
          "notifyObjectId": 2
        }
      ],
      "notifyChannels":["dingTalk","wechat","webhook","email"]     // The notification method. Valid values: dingTalk, sms, webhook, email, and wechat. 
    },
  ],
}
```

**Enumerated keys of the tag of the dispatch rule**

*   `_aliyun_arms_userid`: user ID
*   `_aliyun_arms_involvedObject_kind`: type of the associated object
*   `_aliyun_arms_involvedObject_id`: ID of the associated object
*   `_aliyun_arms_involvedObject_name`: name of the associated object
*   `_aliyun_arms_alert_name`: alert name
*   `_aliyun_arms_alert_rule_id`: alert rule ID
*   `_aliyun_arms_alert_type`: alert type
*   `_aliyun_arms_alert_level`: alert severity', example='{   "system": false,   "ruleid": 10282,   "name": "Prometheus Alert",   "labelMatchExpressionGrid": {     "labelMatchExpressionGroups": [       {         "labelMatchExpressions": [           {             "key": "_aliyun_arms_involvedObject_kind",             "value": "app",             "operator": "eq"           }         ]       }     ]   },   "dispatchType": "CREATE_ALERT/DISCARD_ALERT",   "isRecover": true,   "groupRules": [     {       "groupId": 1,       "groupingFields": [         "alertname"       ],       "groupWait": 10,       "groupInterval": 15,       "repeatInterval": 20     }   ],   "notifyRules": [     {       "notifyObjects": [         {           "notifyType": "ARMS_CONTACT",           "name": "JohnDoe",           "notifyObjectId": 1         },         {           "notifyType": "ARMS_CONTACT_GROUP",           "name": "JohnDoe_group",           "notifyObjectId": 2         }       ],       "notifyChannels":["dingTalk","wechat","webhook","email"]     },   ], }'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model CreateDispatchRuleResponseBody = {
  dispatchRuleId?: long(name='DispatchRuleId', example='10413'),
  requestId?: string(name='RequestId', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
}

model CreateDispatchRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDispatchRuleResponseBody(name='body'),
}

async function createDispatchRuleWithOptions(request: CreateDispatchRuleRequest, runtime: Util.RuntimeOptions): CreateDispatchRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dispatchRule)) {
    query['DispatchRule'] = request.dispatchRule;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDispatchRule',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDispatchRule(request: CreateDispatchRuleRequest): CreateDispatchRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDispatchRuleWithOptions(request, runtime);
}

model CreateEnvCustomJobRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values: zh and en. Default value: zh.', example='zh'),
  configYaml?: string(name='ConfigYaml', description='The YAML configuration string of the custom job.', example='Refer to supplementary instructions.'),
  customJobName?: string(name='CustomJobName', description='The name of the custom job.', example='customJob1'),
  environmentId?: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxxx'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model CreateEnvCustomJobResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: string(name='Data', description='The name of the custom job that was created, or the exception information.', example='cutomJob1'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C518054-852F-4023-ABC1-4AF95FF7****'),
}

model CreateEnvCustomJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEnvCustomJobResponseBody(name='body'),
}

async function createEnvCustomJobWithOptions(request: CreateEnvCustomJobRequest, runtime: Util.RuntimeOptions): CreateEnvCustomJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunLang)) {
    query['AliyunLang'] = request.aliyunLang;
  }
  if (!Util.isUnset(request.customJobName)) {
    query['CustomJobName'] = request.customJobName;
  }
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.configYaml)) {
    body['ConfigYaml'] = request.configYaml;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateEnvCustomJob',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEnvCustomJob(request: CreateEnvCustomJobRequest): CreateEnvCustomJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEnvCustomJobWithOptions(request, runtime);
}

model CreateEnvPodMonitorRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values: zh and en. Default value: zh.', example='zh'),
  configYaml?: string(name='ConfigYaml', description='The YAML configuration string of the PodMonitor.', example='Refer to supplementary instructions.'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request.', example='true'),
  environmentId?: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxxx'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model CreateEnvPodMonitorResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    matchedMsg?: string(name='MatchedMsg', description='Indicates whether targets are matched.', example='Match successful.'),
    matchedTargetCount?: string(name='MatchedTargetCount', description='The number of matched targets.', example='1'),
    namespace?: string(name='Namespace', description='The namespace.', example='arms-prom'),
    podMonitorName?: string(name='PodMonitorName', description='The name of the created PodMonitor.', example='arms-admin-pm1'),
  }(name='Data', description='The returned result, which indicates whether the operation was successful.'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
}

model CreateEnvPodMonitorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEnvPodMonitorResponseBody(name='body'),
}

async function createEnvPodMonitorWithOptions(request: CreateEnvPodMonitorRequest, runtime: Util.RuntimeOptions): CreateEnvPodMonitorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunLang)) {
    query['AliyunLang'] = request.aliyunLang;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.configYaml)) {
    body['ConfigYaml'] = request.configYaml;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateEnvPodMonitor',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEnvPodMonitor(request: CreateEnvPodMonitorRequest): CreateEnvPodMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEnvPodMonitorWithOptions(request, runtime);
}

model CreateEnvServiceMonitorRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values: zh and en. Default value: zh.', example='zh'),
  configYaml?: string(name='ConfigYaml', description='The YAML configuration string of the ServiceMonitor.', example='Refer to supplementary instructions.'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request.', example='true'),
  environmentId?: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxxx'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model CreateEnvServiceMonitorResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    matchedMsg?: string(name='MatchedMsg', description='Indicates whether targets are matched.', example='Match successful.'),
    matchedTargetCount?: int32(name='MatchedTargetCount', description='The number of matched targets.', example='1'),
    namespace?: string(name='Namespace', description='The namespace.', example='arms-prom'),
    serviceMonitorName?: string(name='ServiceMonitorName', description='The name of the created ServiceMonitor.', example='arms-admin1'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
}

model CreateEnvServiceMonitorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEnvServiceMonitorResponseBody(name='body'),
}

async function createEnvServiceMonitorWithOptions(request: CreateEnvServiceMonitorRequest, runtime: Util.RuntimeOptions): CreateEnvServiceMonitorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunLang)) {
    query['AliyunLang'] = request.aliyunLang;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.configYaml)) {
    body['ConfigYaml'] = request.configYaml;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateEnvServiceMonitor',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEnvServiceMonitor(request: CreateEnvServiceMonitorRequest): CreateEnvServiceMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEnvServiceMonitorWithOptions(request, runtime);
}

model CreateEnvironmentRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values: zh and en. Default value: zh.', example='zh'),
  bindResourceId?: string(name='BindResourceId', description='The ID of the resource bound to the environment, such as the container ID or VPC ID. For a Cloud environment, specify the region ID.', example='c6e9dec475dca4a50a188411d8cbxxx'),
  environmentName?: string(name='EnvironmentName', description='The name of the environment.', example='env1'),
  environmentSubType?: string(name='EnvironmentSubType', description='The subtype of the environment. Valid values:

*   CS: Container Service for Kubernetes (ACK)
*   ECS: Elastic Compute Service (ECS)
*   Cloud: cloud service', example='ECS, ACK, etc.'),
  environmentType?: string(name='EnvironmentType', description='The type of the environment. Valid values:

*   CS: Container Service
*   ECS: Elastic Compute Service
*   Cloud: cloud service', example='CS'),
  managedType?: string(name='ManagedType', description='type of managed: 
- none: not managed. default value of prometheus for ACK.
- agent: managed agent. default value of  promehtues for ASK/ACS/AckOne.
- agent-exproter: maanged agent and exporter. default of prometheus for Cloud.', example='none'),
  prometheusInstanceId?: string(name='PrometheusInstanceId', description='the ID of prometheus instance bound to the environment. If not provided, please call the InitEnvironment interface to complete the initialization of the storage instance.', example='c6e9dec475dca4a50a188411d8cbxxx'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The tags of the instance. You can specify this parameter to manage tags for the instance.'),
}

model CreateEnvironmentResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The ID of the created environment.', example='env-xxxxx'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='16AF921B-8187-489F-9913-43C808B4****'),
}

model CreateEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEnvironmentResponseBody(name='body'),
}

async function createEnvironmentWithOptions(request: CreateEnvironmentRequest, runtime: Util.RuntimeOptions): CreateEnvironmentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunLang)) {
    query['AliyunLang'] = request.aliyunLang;
  }
  if (!Util.isUnset(request.bindResourceId)) {
    query['BindResourceId'] = request.bindResourceId;
  }
  if (!Util.isUnset(request.environmentName)) {
    query['EnvironmentName'] = request.environmentName;
  }
  if (!Util.isUnset(request.environmentSubType)) {
    query['EnvironmentSubType'] = request.environmentSubType;
  }
  if (!Util.isUnset(request.environmentType)) {
    query['EnvironmentType'] = request.environmentType;
  }
  if (!Util.isUnset(request.managedType)) {
    query['ManagedType'] = request.managedType;
  }
  if (!Util.isUnset(request.prometheusInstanceId)) {
    query['PrometheusInstanceId'] = request.prometheusInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEnvironment',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEnvironment(request: CreateEnvironmentRequest): CreateEnvironmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEnvironmentWithOptions(request, runtime);
}

model CreateGrafanaWorkspaceRequest {
  aliyunLang?: string(name='AliyunLang', example='zh'),
  description?: string(name='Description', example='test'),
  grafanaVersion?: string(name='GrafanaVersion', example='10.0.x'),
  grafanaWorkspaceEdition?: string(name='GrafanaWorkspaceEdition', example='experts_edition'),
  grafanaWorkspaceName?: string(name='GrafanaWorkspaceName', example='testgrafana'),
  password?: string(name='Password', example='Test123456!'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxyexli2****'),
  tags?: [ 
    {
      key?: string(name='Key', example='TestKey'),
      value?: string(name='Value', example='TestValue'),
    }
  ](name='Tags'),
}

model CreateGrafanaWorkspaceShrinkRequest {
  aliyunLang?: string(name='AliyunLang', example='zh'),
  description?: string(name='Description', example='test'),
  grafanaVersion?: string(name='GrafanaVersion', example='10.0.x'),
  grafanaWorkspaceEdition?: string(name='GrafanaWorkspaceEdition', example='experts_edition'),
  grafanaWorkspaceName?: string(name='GrafanaWorkspaceName', example='testgrafana'),
  password?: string(name='Password', example='Test123456!'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxyexli2****'),
  tagsShrink?: string(name='Tags'),
}

model CreateGrafanaWorkspaceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: GrafanaWorkspace(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='D80ADAAC-8C32-5479-BD14-C28CF832****'),
  success?: boolean(name='Success', example='true'),
  traceId?: string(name='TraceId', example='eac0a8048716731735000007137d000b'),
}

model CreateGrafanaWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGrafanaWorkspaceResponseBody(name='body'),
}

async function createGrafanaWorkspaceWithOptions(tmpReq: CreateGrafanaWorkspaceRequest, runtime: Util.RuntimeOptions): CreateGrafanaWorkspaceResponse {
  Util.validateModel(tmpReq);
  var request = new CreateGrafanaWorkspaceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.aliyunLang)) {
    query['AliyunLang'] = request.aliyunLang;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.grafanaVersion)) {
    query['GrafanaVersion'] = request.grafanaVersion;
  }
  if (!Util.isUnset(request.grafanaWorkspaceEdition)) {
    query['GrafanaWorkspaceEdition'] = request.grafanaWorkspaceEdition;
  }
  if (!Util.isUnset(request.grafanaWorkspaceName)) {
    query['GrafanaWorkspaceName'] = request.grafanaWorkspaceName;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateGrafanaWorkspace',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createGrafanaWorkspace(request: CreateGrafanaWorkspaceRequest): CreateGrafanaWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createGrafanaWorkspaceWithOptions(request, runtime);
}

model CreateIntegrationRequest {
  autoRecover?: boolean(name='AutoRecover', example='true'),
  description?: string(name='Description', example='测试'),
  integrationName?: string(name='IntegrationName', example='云监控集成'),
  integrationProductType?: string(name='IntegrationProductType', example='CLOUD_MONITOR'),
  recoverTime?: long(name='RecoverTime', example='300'),
  regionId?: string(name='RegionId'),
}

model CreateIntegrationResponseBody = {
  integration?: {
    autoRecover?: boolean(name='AutoRecover', example='true'),
    description?: string(name='Description', example='测试'),
    integrationId?: long(name='IntegrationId', example='1234'),
    integrationName?: string(name='IntegrationName', example='云监控集成'),
    integrationProductType?: string(name='IntegrationProductType', example='CLOUD_MONITOR'),
    recoverTime?: long(name='RecoverTime', example='300'),
  }(name='Integration'),
  requestId?: string(name='RequestId', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model CreateIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIntegrationResponseBody(name='body'),
}

async function createIntegrationWithOptions(request: CreateIntegrationRequest, runtime: Util.RuntimeOptions): CreateIntegrationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoRecover)) {
    body['AutoRecover'] = request.autoRecover;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.integrationName)) {
    body['IntegrationName'] = request.integrationName;
  }
  if (!Util.isUnset(request.integrationProductType)) {
    body['IntegrationProductType'] = request.integrationProductType;
  }
  if (!Util.isUnset(request.recoverTime)) {
    body['RecoverTime'] = request.recoverTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateIntegration',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createIntegration(request: CreateIntegrationRequest): CreateIntegrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIntegrationWithOptions(request, runtime);
}

model CreateOrUpdateAlertRuleRequest {
  alertCheckType?: string(name='AlertCheckType', description='The alert check type of the Prometheus alert rule. Valid values:

*   STATIC: a static threshold value. If you set the parameter to STATIC, you must specify the **MetricsKey** parameter. For more information, see the **Correspondence between AlertGroup and MetricsKey for Prometheus Service** table.
*   CUSTOM: a custom PromQL statement. If you set the parameter to CUSTOM, you must specify the **PromQL**, **Duration**, and **Message** parameters to create a Prometheus alert rule.', example='STATIC'),
  alertGroup?: long(name='AlertGroup', description='The alert contact group ID of the Prometheus alert rule. Valid values:

*   \\-1: custom PromQL
*   1: Kubernetes load
*   15: Kubernetes node', example='-1'),
  alertId?: long(name='AlertId', description='The ID of the alert rule.

*   If you do not specify this parameter, a new alert rule is created.
*   If you specify this parameter, the specified alert rule is modified.', example='546xxx'),
  alertName?: string(name='AlertName', description='The name of the alert rule.', example='Alert Rule Demo'),
  alertPiplines?: string(name='AlertPiplines', description='Alarm Notification Channel Configuration. Used for compatibility with legacy rules.'),
  alertRuleContent?: string(name='AlertRuleContent', description='The content of the Application Monitoring or Browser Monitoring alert rule. The following code provides an example of the **AlertRuleContent** parameter. For more information about the meaning of each field, see the supplementary description.

```json
{ 
    "Condition": "OR", 
     "AlertRuleItems": [ 
             { "Operator": "CURRENT_LTE",
                 "MetricKey": "appstat.jvm.threadcount", 
                 "Value": 1000, 
                 "Aggregate": "AVG",
                  "N": 1
            } 
       ]  
  }
```

> The conditional fields vary depending on the values of the **MetricsType** and **AlertRuleItems.MetricKey** parameters. For more information about the types of metrics supported by Application Monitoring and Browser Monitoring and the alert rule fields corresponding to each metric, see the supplementary description.', example='{ "Condition": "OR", "AlertRuleItems": [ { "Operator": "CURRENT_LTE",  "MetricKey": "appstat.jvm.threadcount",  "Value": 1000,  "Aggregate": "AVG",   "N": 1  }  ]  }'),
  alertStatus?: string(name='AlertStatus', description='The status of the alert rule. Valid values:

*   RUNNING (default)
*   STOPPED', example='RUNNING'),
  alertType?: string(name='AlertType', description='The type of the alert rule. Valid values:

*   APPLICATION_MONITORING_ALERT_RULE: alert rule for Application Monitoring
*   BROWSER_MONITORING_ALERT_RULE: alert rule for Browser Monitoring
*   PROMETHEUS_MONITORING_ALERT_RULE: alert rule for Prometheus Service

Valid values:

*   PROMETHEUS_MONITORING_ALERT_RULE
*   APPLICATION_MONITORING_ALERT_RULE
*   BROWSER_MONITORING_ALERT_RULE
*   prometheus monitoring alert
*   application monitoring alert
*   browser monitoring alert', example='APPLICATION_MONITORING_ALERT_RULE'),
  annotations?: string(name='Annotations', description='The annotations of the Prometheus alert rule.', example='\\[ { "Value": "PolarDB slow queries", "Name": "\\_aliyun_display_name" }'),
  autoAddNewApplication?: boolean(name='AutoAddNewApplication', description='Specifies whether to apply the alert rule to new applications that are created in Application Monitoring or Browser Monitoring. Valid values:

*   `true`: enables the health check feature.
*   `false`: disables the automatic backup feature.', example='false'),
  clusterId?: string(name='ClusterId', description='The ID of the monitored cluster.', example='ceba9b9ea5b924dd0b6726d2de6******'),
  dataConfig?: string(name='DataConfig', description='Data Configuration. The dataRevision field specifies the data repair method when there is no data for the metric.

- Fill with zero: 0
- Fill with one: 1
- Fill with null: 2 (default, does not trigger an alarm)', example='{
    "dataRevision": 2
}'),
  duration?: long(name='Duration', description='The duration of the Prometheus alert rule. Unit: minutes.', example='1'),
  filters?: string(name='Filters', description='The filter conditions of the Application Monitoring or Browser Monitoring alert rule. The following code shows the format of matching rules:

    "DimFilters": [ 
    { 
     "FilterOpt": "ALL",
     "FilterValues": [],         // The value of the filter condition. 
     "FilterKey": "rootIp"     // The key of the filter condition. 
    }
    ]

Valid values of **FilterOpt**:

*   STATIC: matches the value of the specified dimension.
*   ALL: matches the values of all dimensions.
*   DISABLE: aggregates the values of all dimensions.', example='{"DimFilters": [             {               "FilterOpt": "ALL",               "FilterValues": [],               "FilterKey": "rootIp"             }           ]         }'),
  labels?: string(name='Labels', description='The tags of the Prometheus alert rule.', example='[  { "Value": "cms_polardb",             "Name": "_aliyun_cloud_product"           }         ]'),
  level?: string(name='Level', description='The severity level of the Prometheus alert rule.

*   P1: Alert notifications are sent for major issues that affect the availability of core business, have a huge impact, and may lead to serious consequences.
*   P2: Alert notifications are sent for service errors that affect the system availability with relatively limited impact.
*   P3: Alert notifications are sent for issues that may cause service errors or negative effects, or alert notifications for services that are relatively less important.
*   P4: Alert notifications are sent for low-priority issues that do not affect your business.
*   Default: Alert notifications are sent regardless of alert levels.', example='P2'),
  markTags?: [ 
    {
      key?: string(name='Key', description='The Tag Key.', example='service'),
      value?: string(name='Value', description='The Tag Value.', example='proudct'),
    }
  ](name='MarkTags', description='Application Tags. Used for application monitoring alert rules, to filter applications associated with alert rules.'),
  message?: string(name='Message', description='The alert message of the Prometheus alert rule.', example='Namespace: {{$labels.namespace}} / Pod: {{$labels.pod_name}} / Container: {{$labels.container}} Memory usage exceeds 80%. Current value: {{ printf \\\\\\\\\\"%.2f\\\\\\\\\\" $value }}%'),
  metricsKey?: string(name='MetricsKey', description='The alert metrics. If you set the **AlertCheckType** parameter to **STATIC** when you create a Prometheus alert rule, you must specify the **MetricsKey** parameter.

> Alert metrics vary depending on the value of the **AlertGroup** parameter. For more information about the correspondence between **AlertGroup** and **MetricsKey**, see the supplementary description.', example='pop.status.error'),
  metricsType?: string(name='MetricsType', description='The metric type of the Application Monitoring or Browser Monitoring alert rule. For more information, see the following table.', example='jvm'),
  notice?: string(name='Notice', description='Effective Time and Notification Time. Used for compatibility with legacy rules.'),
  notifyMode?: string(name='NotifyMode', description='Notification Mode. Normal mode or Simplified mode.', example='NORMAL_MODE'),
  notifyStrategy?: string(name='NotifyStrategy', description='The notification policy.

*   If you set this parameter to null, no notification policy is specified. After you create an alert rule, you can create a notification policy and specify match rules and match conditions. For example, you can specify the name of the alert rule as the match condition. When the alert rule is triggered, an alert event is generated and an alert notification is sent to the contacts or contact groups that are specified in the notification policy.
*   To specify a notification policy, set this parameter to the ID of the notification policy. Application Real-Time Monitoring Service (ARMS) automatically adds a match rule to the notification policy and specifies the ID of the alert rule as the match condition. The name of the alert rule is also displayed. This way, the alert events that are generated based on the alert rule can be matched by the specified notification policy.', example='569xxx'),
  pids?: string(name='Pids', description='The process ID (PID) that is associated with the Application Monitoring or Browser Monitoring alert rule.', example='["b590lhguqs@40d8deedfa9******"]'),
  promQL?: string(name='PromQL', description='The PromQL statement of the Prometheus alert rule.', example='node_memory_MemAvailable_bytes{} / node_memory_MemTotal_bytes{} * 100'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='owner'),
      value?: string(name='Value', description='The tag value.', example='John'),
    }
  ](name='Tags', description='The list of tags.'),
}

model CreateOrUpdateAlertRuleResponseBody = {
  alertRule?: {
    alertCheckType?: string(name='AlertCheckType', description='The alert check type of the Prometheus alert rule. Valid values:

*   STATIC: a static threshold value.
*   CUSTOM: a custom PromQL statement.', example='STATIC'),
    alertGroup?: long(name='AlertGroup', description='The alert contact group ID of the Prometheus alert rule. Valid values:

*   \\-1: custom PromQL
*   1: Kubernetes load
*   15: Kubernetes node', example='-1'),
    alertId?: float(name='AlertId', description='The ID of the alert rule.', example='5510445'),
    alertName?: string(name='AlertName', description='The name of the alert rule.', example='arms-test'),
    alertRuleContent?: {
      alertRuleItems?: [ 
        {
          aggregate?: string(name='Aggregate', description='The aggregation method of the alert condition. Valid values:

*   AVG: calculates the average value
*   SUM: calculates the total value
*   MAX: selects the maximum value
*   MIN: selects the minimum value', example='AVG'),
          metricKey?: string(name='MetricKey', description='The metric of the alert condition.', example='appstat.jvm.non_heap_used'),
          n?: float(name='N', description='Indicates the last N minutes.', example='1'),
          operator?: string(name='Operator', description='The comparison operator that was used to compare the metric value with the threshold. Valid values:

*   CURRENT_GTE: greater than or equal to
*   CURRENT_LTE: less than or equal to
*   PREVIOUS_UP: the increase percentage compared with the last period
*   PREVIOUS_DOWN: the decrease percentage compared with the last period
*   HOH_UP: the increase percentage compared with the last hour
*   HOH_DOWN: the decrease percentage compared with the last hour
*   DOD_UP: the increase percentage compared with the last day
*   DOD_DOWN: the decrease percentage compared with the last day', example='CURRENT_GTE'),
          value?: string(name='Value', description='The threshold of the alert condition.', example='1'),
        }
      ](name='AlertRuleItems', description='The trigger conditions of the Application Monitoring or Browser Monitoring alert rule.'),
      condition?: string(name='Condition', description='The relationship between multiple alert conditions that were specified for the Application Monitoring or Browser Monitoring alert rule. Valid values:

*   OR: meets any of the specified conditions.
*   AND: meets all the specified conditions.', example='"|"'),
    }(name='AlertRuleContent', description='The content of the Application Monitoring or Browser Monitoring alert rule.'),
    alertStatus?: string(name='AlertStatus', description='The status of the alert rule. Valid values:

*   RUNNING
*   STOPPED
*   PAUSED

> The PAUSED status indicates that the alert rule is abnormal and is actively paused by the system. The alert rule may be paused because that it is not unique or the associated cluster has been deleted.', example='RUNNING'),
    alertType?: string(name='AlertType', description='The type of the alert rule. Valid values:

*   APPLICATION_MONITORING_ALERT_RULE: alert rule for Application Monitoring
*   BROWSER_MONITORING_ALERT_RULE: alert rule for Browser Monitoring
*   PROMETHEUS_MONITORING_ALERT_RULE: alert rule for Prometheus Service', example='APPLICATION_MONITORING_ALERT_RULE'),
    annotations?: [ 
      {
        name?: string(name='Name', description='The key of the annotation.', example='123'),
        value?: string(name='Value', description='The value of the annotation.', example='abc'),
      }
    ](name='Annotations', description='The annotations of the Prometheus alert rule.'),
    autoAddNewApplication?: boolean(name='AutoAddNewApplication', description='Indicates whether the alert rule was applied to new applications that were created in Application Monitoring or Browser Monitoring. Valid values:

*   `true`: enables the health check feature.
*   `false`: disables the automatic backup feature.', example='false'),
    clusterId?: string(name='ClusterId', description='The ID of the monitored cluster.', example='ceba9b9ea5b924dd0b6726d2de6******'),
    createdTime?: long(name='CreatedTime', description='The timestamp generated when the alert rule was created. Unit: seconds.', example='1641438611000'),
    duration?: string(name='Duration', description='The duration of the Prometheus alert rule. Unit: minutes.', example='1'),
    extend?: string(name='Extend', description='The extended fields.', example='{\\\\"alarmContext\\\\":\\\\"{\\\\\\\\\\"content\\\\\\\\\\":\\\\\\\\Alert name: $Alert name\\\\\\\\\\\\nFilter condition: $Filter condition\\\\\\\\\\\\nAlert time: $Alert time\\\\\\\\\\\\nAlert content: $Alert content\\\\\\\\\\\\nNote: The alert persists before you receive an email that reminds you to clear the alert. You will be reminded of the alert again 24 hours later. \\\\\\\\\\",\\\\\\\\\\"subTitle\\\\\\\\\\":\\\\\\\\\\"\\\\\\\\\\"}\\\\",\\\\"alertWays\\\\":\\\\"\\[0,1]\\\\",\\\\"contactGroupIds\\\\":\\\\"381,5075\\\\",\\\\"notice\\\\":\\\\"{\\\\\\\\\\"endTime\\\\\\\\\\":1480607940000,\\\\\\\\\\"noticeEndTime\\\\\\\\\\":1480607940000,\\\\\\\\\\"noticeStartTime\\\\\\\\\\":1480521600000,\\\\\\\\\\"startTime\\\\\\\\\\":1480521600000}\\\\"}'),
    filters?: {
      customSLSFilters?: [ 
        {
          key?: string(name='Key', description='The key of the filter condition.', example='username'),
          opt?: string(name='Opt', description='The logical operator of the filter condition. Valid values:

*   \\=: equal to
*   not: not equal to', example='='),
          show?: boolean(name='Show', description='Indicates whether this filter condition was displayed on the frontend.', example='false'),
          t?: string(name='T', description='The log type of Browser Monitoring. This field was not included in other filter conditions.', example='null'),
          value?: string(name='Value', description='The value of the filter condition.', example='test'),
        }
      ](name='CustomSLSFilters', description='The custom filter condition of the Browser Monitoring alert rule.'),
      customSLSGroupByDimensions?: [ string ](name='CustomSLSGroupByDimensions', description='The information of the aggregation dimension.'),
      customSLSWheres?: [ string ](name='CustomSLSWheres', description='The details of the custom filter condition.'),
      dimFilters?: [ 
        {
          filterKey?: string(name='FilterKey', description='The key of the filter condition.', example='rootIp'),
          filterOpt?: string(name='FilterOpt', description='The logical operator of the filter condition.', example='ALL'),
          filterValues?: [ string ](name='FilterValues', description='The details of the filter condition.'),
        }
      ](name='DimFilters', description='The information about each filter condition of the Application Monitoring or Browser Monitoring alert rule.'),
    }(name='Filters', description='The filter conditions of the Application Monitoring or Browser Monitoring alert rule.'),
    labels?: [ 
      {
        name?: string(name='Name', description='The tag key.', example='123'),
        value?: string(name='Value', description='The tag value.', example='abc'),
      }
    ](name='Labels', description='The tags of the Prometheus alert rule.'),
    level?: string(name='Level', description='The severity level of the Prometheus alert rule.

*   P1: Alert notifications are sent for major issues that affect the availability of core business, have a huge impact, and may lead to serious consequences.
*   P2: Alert notifications are sent for service errors that affect the system availability with relatively limited impact.
*   P3: Alert notifications are sent for issues that may cause service errors or negative effects, or alert notifications for services that are relatively less important.
*   P4: Alert notifications are sent for low-priority issues that do not affect your business.
*   Default: Alert notifications are sent regardless of alert levels.', example='P2'),
    message?: string(name='Message', description='The alert message of the Prometheus alert rule.', example='Namespace: {{$labels.namespace}} / Pod: {{$labels.pod_name}} / Container: {{$labels.container}} Memory usage exceeds 80%. Current value: {{ printf \\\\\\\\\\"%.2f\\\\\\\\\\" $value }}%'),
    metricsType?: string(name='MetricsType', description='The metric type of the Application Monitoring or Browser Monitoring alert rule.', example='JVM'),
    notifyMode?: string(name='NotifyMode', description='Notification Mode.', example='NORMAL_MODE'),
    notifyStrategy?: string(name='NotifyStrategy', description='The name of the notification policy.', example='ALERT_MANAGER'),
    pids?: [ string ](name='Pids', description='The process ID (PID) that was associated with the Application Monitoring or Browser Monitoring alert rule.'),
    promQL?: string(name='PromQL', description='The PromQL statement of the Prometheus alert rule.', example='node_memory_MemAvailable_bytes{} / node_memory_MemTotal_bytes{} * 100'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    tags?: [ 
      {
        key?: string(name='Key', description='The tag key.', example='owner'),
        value?: string(name='Value', description='The tag value.', example='John'),
      }
    ](name='Tags', description='The list of tags.'),
    updatedTime?: long(name='UpdatedTime', description='The timestamp generated when the alert rule was updated. Unit: seconds.', example='1641438611000'),
    userId?: string(name='UserId', description='The ID of the Alibaba Cloud account.', example='1131971649******'),
  }(name='AlertRule', description='The details of the alert rule.'),
  requestId?: string(name='RequestId', description='The request ID.', example='337B8F7E-0A64-5768-9225-E9B3CF******'),
}

model CreateOrUpdateAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrUpdateAlertRuleResponseBody(name='body'),
}

async function createOrUpdateAlertRuleWithOptions(request: CreateOrUpdateAlertRuleRequest, runtime: Util.RuntimeOptions): CreateOrUpdateAlertRuleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.alertCheckType)) {
    body['AlertCheckType'] = request.alertCheckType;
  }
  if (!Util.isUnset(request.alertGroup)) {
    body['AlertGroup'] = request.alertGroup;
  }
  if (!Util.isUnset(request.alertId)) {
    body['AlertId'] = request.alertId;
  }
  if (!Util.isUnset(request.alertName)) {
    body['AlertName'] = request.alertName;
  }
  if (!Util.isUnset(request.alertPiplines)) {
    body['AlertPiplines'] = request.alertPiplines;
  }
  if (!Util.isUnset(request.alertRuleContent)) {
    body['AlertRuleContent'] = request.alertRuleContent;
  }
  if (!Util.isUnset(request.alertStatus)) {
    body['AlertStatus'] = request.alertStatus;
  }
  if (!Util.isUnset(request.alertType)) {
    body['AlertType'] = request.alertType;
  }
  if (!Util.isUnset(request.annotations)) {
    body['Annotations'] = request.annotations;
  }
  if (!Util.isUnset(request.autoAddNewApplication)) {
    body['AutoAddNewApplication'] = request.autoAddNewApplication;
  }
  if (!Util.isUnset(request.clusterId)) {
    body['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dataConfig)) {
    body['DataConfig'] = request.dataConfig;
  }
  if (!Util.isUnset(request.duration)) {
    body['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.filters)) {
    body['Filters'] = request.filters;
  }
  if (!Util.isUnset(request.labels)) {
    body['Labels'] = request.labels;
  }
  if (!Util.isUnset(request.level)) {
    body['Level'] = request.level;
  }
  if (!Util.isUnset(request.markTags)) {
    body['MarkTags'] = request.markTags;
  }
  if (!Util.isUnset(request.message)) {
    body['Message'] = request.message;
  }
  if (!Util.isUnset(request.metricsKey)) {
    body['MetricsKey'] = request.metricsKey;
  }
  if (!Util.isUnset(request.metricsType)) {
    body['MetricsType'] = request.metricsType;
  }
  if (!Util.isUnset(request.notice)) {
    body['Notice'] = request.notice;
  }
  if (!Util.isUnset(request.notifyMode)) {
    body['NotifyMode'] = request.notifyMode;
  }
  if (!Util.isUnset(request.notifyStrategy)) {
    body['NotifyStrategy'] = request.notifyStrategy;
  }
  if (!Util.isUnset(request.pids)) {
    body['Pids'] = request.pids;
  }
  if (!Util.isUnset(request.promQL)) {
    body['PromQL'] = request.promQL;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.tags)) {
    body['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateOrUpdateAlertRule',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOrUpdateAlertRule(request: CreateOrUpdateAlertRuleRequest): CreateOrUpdateAlertRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrUpdateAlertRuleWithOptions(request, runtime);
}

model CreateOrUpdateContactRequest {
  contactId?: long(name='ContactId', description='The ID of the alert contact.

*   If you do not specify this parameter, a new alert contact is created.
*   If you specify this parameter, the specified alert contact is modified.', example='123'),
  contactName?: string(name='ContactName', description='The name of the alert contact.', example='JohnDoe'),
  dingRobotUrl?: string(name='DingRobotUrl', description='The webhook URL of the DingTalk chatbot.', example='https://oapi.dingtalk.com/robot/send?access_token=69d4e0******'),
  email?: string(name='Email', description='The email address of the alert contact.

> You must specify at least one of the **Phone** and **Email** parameters. Each mobile number or email address can be used for only one alert contact.', example='someone@example.com'),
  isEmailVerify?: boolean(name='IsEmailVerify', description='Specifies whether the email address is verified.', example='true'),
  phone?: string(name='Phone', description='The mobile number of the alert contact.

> You must specify at least one of the **Phone** and **Email** parameters. Each mobile number or email address can be used for only one alert contact.', example='1381111****'),
  reissueSendNotice?: long(name='ReissueSendNotice', description='The operation that you want to perform if phone calls fail to be answered. Valid values:

*   0: No operation is performed.
*   1: A phone call is made again.
*   2: A text message is sent.
*   3 (default value): The global default value is used.', example='3'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxyexli2****'),
}

model CreateOrUpdateContactResponseBody = {
  alertContact?: {
    contactId?: float(name='ContactId', description='The ID of the alert contact.', example='123'),
    contactName?: string(name='ContactName', description='The name of the alert contact.', example='JohnDoe'),
    dingRobotUrl?: string(name='DingRobotUrl', description='The webhook URL of the DingTalk chatbot.', example='https://test1.com'),
    email?: string(name='Email', description='The email address of the alert contact.', example='someone@example.com'),
    isVerify?: boolean(name='IsVerify', description='Indicates whether the mobile number was verified. Valid values:

*   `false` (default value): No
*   `true`: Yes

You can call the **SendTTSVerifyLink** operation to verify the mobile number of an alert contact. Only verified mobile numbers can be specified in a notification policy to receive phone calls.', example='false'),
    phone?: string(name='Phone', description='The mobile number of the alert contact.', example='1381111****'),
    reissueSendNotice?: long(name='ReissueSendNotice', description='The operation that you want to perform if phone calls fail to be answered. Valid values: 0: No operation is performed. 1: A phone call is made again. 2: A text message is sent. 3 (default value): The global default value is used.', example='3'),
    isEmailVerify?: boolean(name='isEmailVerify', description='Indicates whether the email address was verified.', example='true'),
  }(name='AlertContact', description='The object of the alert contact.'),
  requestId?: string(name='RequestId', description='The request ID.', example='E9C9DA3D-10FE-472E-9EEF-2D0A3E41****'),
}

model CreateOrUpdateContactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrUpdateContactResponseBody(name='body'),
}

async function createOrUpdateContactWithOptions(request: CreateOrUpdateContactRequest, runtime: Util.RuntimeOptions): CreateOrUpdateContactResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dingRobotUrl)) {
    query['DingRobotUrl'] = request.dingRobotUrl;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.contactId)) {
    body['ContactId'] = request.contactId;
  }
  if (!Util.isUnset(request.contactName)) {
    body['ContactName'] = request.contactName;
  }
  if (!Util.isUnset(request.email)) {
    body['Email'] = request.email;
  }
  if (!Util.isUnset(request.isEmailVerify)) {
    body['IsEmailVerify'] = request.isEmailVerify;
  }
  if (!Util.isUnset(request.phone)) {
    body['Phone'] = request.phone;
  }
  if (!Util.isUnset(request.reissueSendNotice)) {
    body['ReissueSendNotice'] = request.reissueSendNotice;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateOrUpdateContact',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOrUpdateContact(request: CreateOrUpdateContactRequest): CreateOrUpdateContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrUpdateContactWithOptions(request, runtime);
}

model CreateOrUpdateContactGroupRequest {
  contactGroupId?: long(name='ContactGroupId', description='The ID of the alert contact group.

*   If you do not specify this parameter, an alert contact group is created.
*   If you specify this parameter, the specified alert contact group is modified.', example='123'),
  contactGroupName?: string(name='ContactGroupName', description='The name of the alert contact group.', example='TestGroup'),
  contactIds?: string(name='ContactIds', description='The ID of the contact that you want to add to the contact group. Separate multiple IDs with commas (,).', example='[1,2,3]'),
}

model CreateOrUpdateContactGroupResponseBody = {
  alertContactGroup?: {
    contactGroupId?: float(name='ContactGroupId', description='The ID of the alert contact group.', example='123'),
    contactGroupName?: string(name='ContactGroupName', description='The name of the alert contact group.', example='TestGroup'),
    contactIds?: string(name='ContactIds', description='The IDs of the contacts that are included in the alert contact group.', example='[1,2,3]'),
  }(name='AlertContactGroup', description='The information about the alert contact group.'),
  requestId?: string(name='RequestId', description='The request ID.', example='9319A57D-2D9E-472A-B69B-CF3CD16D****'),
}

model CreateOrUpdateContactGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrUpdateContactGroupResponseBody(name='body'),
}

async function createOrUpdateContactGroupWithOptions(request: CreateOrUpdateContactGroupRequest, runtime: Util.RuntimeOptions): CreateOrUpdateContactGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.contactGroupId)) {
    body['ContactGroupId'] = request.contactGroupId;
  }
  if (!Util.isUnset(request.contactGroupName)) {
    body['ContactGroupName'] = request.contactGroupName;
  }
  if (!Util.isUnset(request.contactIds)) {
    body['ContactIds'] = request.contactIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateOrUpdateContactGroup',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOrUpdateContactGroup(request: CreateOrUpdateContactGroupRequest): CreateOrUpdateContactGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrUpdateContactGroupWithOptions(request, runtime);
}

model CreateOrUpdateEventBridgeIntegrationRequest {
  accessKey?: string(name='AccessKey', description='The AccessKey ID that is used to connect to EventBridge.', example='abc******************'),
  accessSecret?: string(name='AccessSecret', description='The AccessKey secret that is used to connect to EventBridge.', example='abc******************'),
  description?: string(name='Description', description='The description of the EventBridge integration.', example='test'),
  endpoint?: string(name='Endpoint', description='The public endpoint of EventBridge.', example='http://xxxxx'),
  eventBusName?: string(name='EventBusName', description='The name of the event bus.', example='EventBus_Test'),
  eventBusRegionId?: string(name='EventBusRegionId', description='The region ID of the event bus.', example='cn-hangzhou'),
  id?: long(name='Id', description='The ID of the EventBridge integration.

*   If you do not specify this parameter, an EventBridge integration is created.
*   If you specify this parameter, the specified EventBridge integration is modified.', example='123'),
  name?: string(name='Name', description='The name of the EventBridge integration.', example='EventBridge_Test'),
  source?: string(name='Source', description='The event source.', example='arms'),
}

model CreateOrUpdateEventBridgeIntegrationResponseBody = {
  eventBridgeIntegration?: {
    accessKey?: string(name='AccessKey', description='The AccessKey ID that is used to connect to EventBridge.', example='abc******************'),
    accessSecret?: string(name='AccessSecret', description='The AccessKey secret that is used to connect to EventBridge.', example='abc******************'),
    description?: string(name='Description', description='The description of the EventBridge integration.', example='test'),
    endpoint?: string(name='Endpoint', description='The public endpoint of EventBridge.', example='http://xxxxx'),
    eventBusName?: string(name='EventBusName', description='The name of the event bus.', example='EventBus_Test'),
    eventBusRegionId?: string(name='EventBusRegionId', description='The region ID of the event bus.', example='cn-hangzhou'),
    id?: long(name='Id', description='The ID of the EventBridge integration.', example='123'),
    name?: string(name='Name', description='The name of the EventBridge integration.', example='EventBridge_Test'),
    source?: string(name='Source', description='The event source.', example='arms'),
  }(name='EventBridgeIntegration', description='The information about the EventBridge integration.'),
  requestId?: string(name='RequestId', description='The request ID.', example='2B289756-E791-5842-BCBD-AD414C******'),
}

model CreateOrUpdateEventBridgeIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrUpdateEventBridgeIntegrationResponseBody(name='body'),
}

async function createOrUpdateEventBridgeIntegrationWithOptions(request: CreateOrUpdateEventBridgeIntegrationRequest, runtime: Util.RuntimeOptions): CreateOrUpdateEventBridgeIntegrationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accessKey)) {
    body['AccessKey'] = request.accessKey;
  }
  if (!Util.isUnset(request.accessSecret)) {
    body['AccessSecret'] = request.accessSecret;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.endpoint)) {
    body['Endpoint'] = request.endpoint;
  }
  if (!Util.isUnset(request.eventBusName)) {
    body['EventBusName'] = request.eventBusName;
  }
  if (!Util.isUnset(request.eventBusRegionId)) {
    body['EventBusRegionId'] = request.eventBusRegionId;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.source)) {
    body['Source'] = request.source;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateOrUpdateEventBridgeIntegration',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOrUpdateEventBridgeIntegration(request: CreateOrUpdateEventBridgeIntegrationRequest): CreateOrUpdateEventBridgeIntegrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrUpdateEventBridgeIntegrationWithOptions(request, runtime);
}

model CreateOrUpdateIMRobotRequest {
  cardTemplate?: string(name='CardTemplate', description='The configurations of the alert card template. For more information about the parameters in the template, see the following section.', example='{     "button": [         "claim",         "close",         "follow",         "send_itsm",         "block",         "unResolvedIncident"     ],     "field": [         {             "fieldName": "alarmName",             "visible": true         },         {             "fieldName": "notificationPolicy",             "visible": true         },         {             "fieldName": "alarmContent",             "visible": true         },         {             "fieldName": "alarmTime",             "visible": true         },         {             "fieldName": "seriesChart",             "visible": true         },         {             "fieldName": "includeEvent",             "visible": true         },         {             "fieldName": "assigned",             "visible": true         },         {             "fieldName": "similarAlarm",             "visible": true         },         {             "fieldName": "operator",             "visible": true         }     ] }'),
  dailyNoc?: boolean(name='DailyNoc', description='Specifies whether to send daily statistics. Valid values:

*   `false` (default): Daily statistics are not sent.
*   `true`: Daily statistics are sent. If you set the value to `true`, the **DailyNocTime** parameter is required.', example='true'),
  dailyNocTime?: string(name='DailyNocTime', description='The points in time at which the daily statistics are sent. Separate multiple points in time with commas (,). The points in time are in the HH:SS format. The information that ARMS sends at the specified points in time includes the total number of alerts generated on the current day, the number of cleared alerts, and the number of alerts to be cleared.', example='09:30,17:00'),
  dingSignKey?: string(name='DingSignKey', description='The signature key of DingTalk. If you specify a signature key, DingTalk authentication is performed by using the signature key. If you do not specify a signature key, a whitelist is used for authentication by default. The keyword of the whitelist is **Alert**.', example='******'),
  enableOutgoing?: boolean(name='EnableOutgoing', description='Specifies whether to enable the Outgoing feature.', example='true'),
  robotAddress?: string(name='RobotAddress', description='The webhook URL of the IM chatbot.', example='https://oapi.dingtalk.com/robot/send?access_token=e1a049121******'),
  robotId?: long(name='RobotId', description='The ID of the IM chatbot.

- If you do not specify the parameter, a new IM chatbot is created.
- If you specify this parameter, the specified IM chatbot is modified.', example='123'),
  robotName?: string(name='RobotName', description='The name of the IM chatbot.', example='Chatbot name'),
  token?: string(name='Token', description='The token required to enable the Outgoing feature.', example='1656558719183be1245ab44********'),
  type?: string(name='Type', description='The type of the IM chatbot. Valid values:

*   `dingding`: DingTalk chatbot
*   `wechat`: WeCom chatbot', example='dingding'),
}

model CreateOrUpdateIMRobotResponseBody = {
  alertRobot?: {
    cardTemplate?: string(name='CardTemplate', description='The configurations of the alert card template.', example='{     "button": [         "claim",         "close",         "follow",         "send_itsm",         "block",         "unResolvedIncident"     ],     "field": [         {             "fieldName": "alarmName",             "visible": true         },         {             "fieldName": "notificationPolicy",             "visible": true         },         {             "fieldName": "alarmContent",             "visible": true         },         {             "fieldName": "alarmTime",             "visible": true         },         {             "fieldName": "seriesChart",             "visible": true         },         {             "fieldName": "includeEvent",             "visible": true         },         {             "fieldName": "assigned",             "visible": true         },         {             "fieldName": "similarAlarm",             "visible": true         },         {             "fieldName": "operator",             "visible": true         }     ] }'),
    dailyNoc?: boolean(name='DailyNoc', description='Indicates whether daily statistics are sent. Valid values:

*   `false` (default): Daily statistics are not sent.
*   `true`: Daily statistics are sent.', example='true'),
    dailyNocTime?: string(name='DailyNocTime', description='The point in time at which the daily statistics are sent. The information that ARMS sends at the specified points in time includes the total number of alerts generated on the current day, the number of cleared alerts, and the number of alerts to be cleared.', example='09:30,17:00'),
    enableOutgoing?: boolean(name='EnableOutgoing', description='Indicates whether the Outgoing feature is enabled.', example='true'),
    robotAddress?: string(name='RobotAddress', description='The webhook URL of the IM chatbot.', example='https://oapi.dingtalk.com/robot/send?access_token=e1a049121******'),
    robotId?: float(name='RobotId', description='The ID of the IM chatbot.', example='123'),
    robotName?: string(name='RobotName', description='The name of the IM chatbot.', example='Chatbot name'),
    token?: string(name='Token', description='The token required to enable the Outgoing feature.', example='1656558719183be1245ab44********'),
    type?: string(name='Type', description='The type of the IM chatbot. Valid values:

*   `dingding`: DingTalk chatbot
*   `wechat`: WeCom chatbot', example='dingding'),
  }(name='AlertRobot', description='The information about the IM chatbot.'),
  requestId?: string(name='RequestId', description='The request ID.', example='16AF921B-8187-489F-9913-43C808B4****'),
}

model CreateOrUpdateIMRobotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrUpdateIMRobotResponseBody(name='body'),
}

async function createOrUpdateIMRobotWithOptions(request: CreateOrUpdateIMRobotRequest, runtime: Util.RuntimeOptions): CreateOrUpdateIMRobotResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cardTemplate)) {
    body['CardTemplate'] = request.cardTemplate;
  }
  if (!Util.isUnset(request.dailyNoc)) {
    body['DailyNoc'] = request.dailyNoc;
  }
  if (!Util.isUnset(request.dailyNocTime)) {
    body['DailyNocTime'] = request.dailyNocTime;
  }
  if (!Util.isUnset(request.dingSignKey)) {
    body['DingSignKey'] = request.dingSignKey;
  }
  if (!Util.isUnset(request.enableOutgoing)) {
    body['EnableOutgoing'] = request.enableOutgoing;
  }
  if (!Util.isUnset(request.robotAddress)) {
    body['RobotAddress'] = request.robotAddress;
  }
  if (!Util.isUnset(request.robotId)) {
    body['RobotId'] = request.robotId;
  }
  if (!Util.isUnset(request.robotName)) {
    body['RobotName'] = request.robotName;
  }
  if (!Util.isUnset(request.token)) {
    body['Token'] = request.token;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateOrUpdateIMRobot',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOrUpdateIMRobot(request: CreateOrUpdateIMRobotRequest): CreateOrUpdateIMRobotResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrUpdateIMRobotWithOptions(request, runtime);
}

model CreateOrUpdateNotificationPolicyRequest {
  directedMode?: boolean(name='DirectedMode', description='Specifies whether to enable simple mode.'),
  escalationPolicyId?: long(name='EscalationPolicyId', description='The ID of the escalation policy.', example='123'),
  groupRule?: string(name='GroupRule', description='An array of alert event group objects.

*   If you do not specify the groupingFields field, all alerts will be sent to contacts based on `alertname`.

*   If you specify the groupingFields field, alerts with the same field will be sent to contacts in one notification.

    Sample statement:

```

{ 
"groupWait":5,    // The waiting time for grouping. 
"groupInterval":30,     // The time interval of grouping. 
"groupingFields":["alertname"]       // The field that is used to group alert events. 
}
```', example='{ 	"groupWait":5, 	"groupInterval":30, 	"groupingFields":["alertname"] }'),
  id?: long(name='Id', description='The ID of the notification policy.

*   If you do not specify this parameter, a new notification policy is created.
*   If you specify this parameter, the specified notification policy is modified.', example='1234'),
  integrationId?: long(name='IntegrationId', description='The integration ID of the ticket system to which alerts are pushed.', example='34'),
  matchingRules?: string(name='MatchingRules', description='The matching rules. Sample statement:

```

[
 {
 "matchingConditions": [
 { 
 "value": "test",    // The value of the matching condition. 
 "key": "alertname",     // The key of the matching condition. 
 "operator": "eq"   // The logical operator of the matching condition, including eq (equal to), neq (not equal to), in (contains), nin (does not contain), re (regular expression match), and nre (regular expression mismatch).   
 }
 ]
 } 
 ]
```', example='[ 		 { 		 "matchingConditions": [          { 		 "value": "test", 		 "key": "alertname", 		 "operator": "eq"         }       ]     }   ]'),
  name?: string(name='Name', description='The name of the notification policy.', example='notificationpolicy_test'),
  notifyRule?: string(name='NotifyRule', description='An array of notification rule objects. Format:

    { 
     "notifyStartTime":"00:00",      // The start time of the notification window. 
     "notifyEndTime":"23:59",       // The end time of the notification window. 
     "notifyChannels":["dingTalk", "email", "sms", "tts", "webhook"],       // The notification methods. Valid values: dingTalk, email, sms, tts, and webhook. 
     "notifyObjects":[{       // An array of notification objects. 
     "notifyObjectType":"CONTACT",       // The type of the notification object. Valid values: CONTACT (contact), CONTACT_GROUP (contact group), ARMS_CONTACT (ARMS contact), ARMS_CONTACT_GROUP (ARMS contact group), DING_ROBOT_GROUP (DingTalk, Lark, WeCom, or IM chatbot), and CONTACT_SCHEDULE (user on duty defined by a schedule). 
     "notifyObjectId":123,       // The ID of the notification object. 
     "notifyObjectName":"test"       // The name of the notification object. 
     "notifyChannels": [ // The notification methods specified for a contact. Valid values: email, sms, and tts.
                    "email",		
                    "sms",
                    "tts"
                ],
     }]', example='{     "notifyStartTime":"00:00",     "notifyEndTime":"23:59",     "notifyChannels":[         "dingTalk",         "email",         "sms",         "tts",         "webhook"     ],     "notifyObjects":[         {             "notifyObjectType":"CONTACT",             "notifyObjectId":123,             "notifyObjectName":"test"         }     ] }'),
  notifyTemplate?: string(name='NotifyTemplate', description='The notification template. The default notification template is provided below the table.', example='{{if .commonLabels.clustername }}

 &gt;  Cluster Name: {{ .commonLabels.clustername }} 

 {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}

 &gt;  App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} 

 {{ end }}{{ for .alerts }} &gt;  {{ .annotations.message }} {{if .generatorURL }} [Details]({{.generatorURL}})  {{end}} {{if .annotations._aliyun_arms_insights_analyze_link }}[&lt;font color=\\"#ff0000\\"&gt;diagnostic analysis&lt;/font&gt;]({{ .annotations._aliyun_arms_insights_analyze_link}}){{ end }}{{if  eq "1" .labels._aliyun_arms_denoise_code }} (Important:{{.labels._aliyun_arms_important_reason }}) {{end}}

{{end}}'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  repeat?: boolean(name='Repeat', description='Specifies whether to resend a notification for a long-lasting unresolved alert. Default value: true. Valid values:

*   `true`: If you set this parameter to `true`, you must set **RepeatInterval**.
*   `false`: If you set this parameter to `false`, you must set **EscalationPolicyId**.', example='true'),
  repeatInterval?: long(name='RepeatInterval', description='The time interval at which a notification is resent for a long-lasting unresolved alert. Unit: seconds.', example='600'),
  sendRecoverMessage?: boolean(name='SendRecoverMessage', description='Indicates whether the system sends a notification to the contacts when the status of an alert changes to Resolved. Default value: true. Valid values:

*   `true`: The system sends a notification.
*   `false`: The system does not send a notification.', example='true'),
}

model CreateOrUpdateNotificationPolicyResponseBody = {
  notificationPolicy?: {
    directedMode?: boolean(name='DirectedMode', description='极简模式'),
    escalationPolicyId?: long(name='EscalationPolicyId', description='The ID of the escalation policy.', example='123'),
    groupRule?: {
      groupInterval?: long(name='GroupInterval', description='The time interval of grouping. Unit: seconds. Default value: 30.', example='30'),
      groupWait?: long(name='GroupWait', description='The waiting time for grouping. Unit: seconds. Default value: 5.', example='5'),
      groupingFields?: [ string ](name='GroupingFields', description='The field that is used for grouping.'),
    }(name='GroupRule', description='An array of alert event group objects.'),
    id?: long(name='Id', description='The ID of the notification policy.', example='1234'),
    integrationId?: long(name='IntegrationId', description='The integration ID of the ticket system to which alerts are pushed.', example='34'),
    matchingRules?: [ 
      {
        matchingConditions?: [ 
          {
            key?: string(name='Key', description='The key of the matching condition.', example='altertname'),
            operator?: string(name='Operator', description='The logical operator of the matching condition. Valid values:

*   `eq`: equal to
*   `neq`: not equal to
*   `in`: contains
*   `nin`: does not contain
*   `re`: regular expression match
*   `nre`: regular expression mismatch', example='eq'),
            value?: string(name='Value', description='The value of the matching condition.', example='test'),
          }
        ](name='MatchingConditions', description='An array of alert event matching condition objects.'),
      }
    ](name='MatchingRules', description='An array of alert event matching rule objects.'),
    name?: string(name='Name', description='The name of the notification policy.', example='notificationpolicy_test'),
    notifyRule?: {
      notifyChannels?: [ string ](name='NotifyChannels', description='The notification methods. Valid values: 

- `dingTalk`: DingTalk
- `email`: email
- `sms`: text message
- `tts`: phone call
- `webhook`: webhook'),
      notifyEndTime?: string(name='NotifyEndTime', description='The end time of the notification window.', example='23:59'),
      notifyObjects?: [ 
        {
          notifyChannels?: [ string ](name='NotifyChannels', description='通知对象为联系人时的单独的联系方式'),
          notifyObjectId?: long(name='NotifyObjectId', description='The ID of the notification contact.', example='123'),
          notifyObjectName?: string(name='NotifyObjectName', description='The name of the notification contact.', example='test'),
          notifyObjectType?: string(name='NotifyObjectType', description='The type of the notification contact. Valid values: 

- CONTACT: an individual contact
- CONTACT_GROUP: a contact group
- DING_ROBOT: an instant messaging (IM) robot
- CONTACT_SCHEDULE: a person on duty based on an established schedule', example='CONTACT'),
        }
      ](name='NotifyObjects', description='An array of notification contact objects.'),
      notifyStartTime?: string(name='NotifyStartTime', description='The start time of the notification window.', example='00:00'),
    }(name='NotifyRule', description='An array of notification rule objects.'),
    notifyTemplate?: {
      emailContent?: string(name='EmailContent', description='The content of the alert notification sent through email.', example='Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
Notification Policy: {{ .dispatchRuleName }}
Alert Time: {{ .startTime }}
Description: {{ for .alerts }} {{ .annotations.message }}  {{if .generatorURL }}  &lt;a href="{{.generatorURL}}" > Details&lt;/a&gt;
 {{ end }} {{ end }}'),
      emailRecoverContent?: string(name='EmailRecoverContent', description='The content of the alert resolution notification sent through email.', example='Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
Notification Policy: {{ .dispatchRuleName }}
Recover Time: {{ .endTime }}
Description: {{ for .alerts }} {{ .annotations.message }}  {{if .generatorURL }} &lt;a href="{{.generatorURL}}" > Details&lt;/a&gt;
 {{ end }} {{ end }}'),
      emailRecoverTitle?: string(name='EmailRecoverTitle', description='The title of the alert resolution notification sent through email.', example='{{ .commonLabels.alertname }}'),
      emailTitle?: string(name='EmailTitle', description='The title of the alert notification sent through email.', example='{{ .commonLabels.alertname }}'),
      robotContent?: string(name='RobotContent', description='The content of the alert notification sent by the IM robot.', example='{{if .commonLabels.clustername }}

 &gt;  Cluster Name: {{ .commonLabels.clustername }} 

 {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}

 &gt;  App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} 

 {{ end }}{{ for .alerts }} &gt;  {{ .annotations.message }} {{if .generatorURL }} [Details]({{.generatorURL}})  {{end}} {{if .annotations._aliyun_arms_insights_analyze_link }}[&lt;font color=\\"#ff0000\\"&gt;diagnostic analysis&lt;/font&gt;]({{ .annotations._aliyun_arms_insights_analyze_link}}){{ end }}{{if  eq "1" .labels._aliyun_arms_denoise_code }} (Important:{{.labels._aliyun_arms_important_reason }}) {{end}}

{{end}}'),
      smsContent?: string(name='SmsContent', description='The content of the alert notification sent through text message.', example='{{ .level }}Alert Occurs
Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
Notification Policy: {{ .dispatchRuleName }}
Alert Time: {{ .startTime }}
Description: {{ for .alerts }} {{ .annotations.message }} {{ end }}'),
      smsRecoverContent?: string(name='SmsRecoverContent', description='The content of the alert resolution notification sent through text message.', example='Alert Recovery Notification
Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
Notification Policy: {{ .dispatchRuleName }}
Recover Time: {{ .endTime }}
Description: {{ for .alerts }} {{ .annotations.message }} {{ end }}'),
      ttsContent?: string(name='TtsContent', description='The content of the alert notification by phone.', example='Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
Notification Policy: {{ .dispatchRuleName }}
Alert Time: {{ .startTime }}
Description: {{ for .alerts }} {{ .annotations.message }} {{ end }}'),
      ttsRecoverContent?: string(name='TtsRecoverContent', description='The content of the alert resolution notification by phone.', example='Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
Notification Policy: {{ .dispatchRuleName }}
Recover Time: {{ .endTime }}
Description: {{ for .alerts }} {{ .annotations.message }} {{ end }}'),
    }(name='NotifyTemplate', description='An array of notification template objects.'),
    repeat?: boolean(name='Repeat', description='Indicates whether a notification is resent for a long-lasting unresolved alert. Default value: true. Valid values:  

- `true`: The system resends a notification for a long-lasting unresolved alert at a specified time interval.
- `false`: The system sends a notification for a long-lasting unresolved alert based on an escalation policy.', example='true'),
    repeatInterval?: long(name='RepeatInterval', description='The time interval at which a notification is resent for a long-lasting unresolved alert. Unit: seconds.', example='600'),
    sendRecoverMessage?: boolean(name='SendRecoverMessage', description='Indicates whether the system sends a notification to the contacts when the status of an alert changes to Resolved. Default value: true. Valid values:   

- `true`: The system sends a notification.
- `false`: The system does not send a notification.', example='true'),
  }(name='NotificationPolicy', description='An array of notification policy objects.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
}

model CreateOrUpdateNotificationPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrUpdateNotificationPolicyResponseBody(name='body'),
}

async function createOrUpdateNotificationPolicyWithOptions(request: CreateOrUpdateNotificationPolicyRequest, runtime: Util.RuntimeOptions): CreateOrUpdateNotificationPolicyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.directedMode)) {
    body['DirectedMode'] = request.directedMode;
  }
  if (!Util.isUnset(request.escalationPolicyId)) {
    body['EscalationPolicyId'] = request.escalationPolicyId;
  }
  if (!Util.isUnset(request.groupRule)) {
    body['GroupRule'] = request.groupRule;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.integrationId)) {
    body['IntegrationId'] = request.integrationId;
  }
  if (!Util.isUnset(request.matchingRules)) {
    body['MatchingRules'] = request.matchingRules;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.notifyRule)) {
    body['NotifyRule'] = request.notifyRule;
  }
  if (!Util.isUnset(request.notifyTemplate)) {
    body['NotifyTemplate'] = request.notifyTemplate;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.repeat)) {
    body['Repeat'] = request.repeat;
  }
  if (!Util.isUnset(request.repeatInterval)) {
    body['RepeatInterval'] = request.repeatInterval;
  }
  if (!Util.isUnset(request.sendRecoverMessage)) {
    body['SendRecoverMessage'] = request.sendRecoverMessage;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateOrUpdateNotificationPolicy',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOrUpdateNotificationPolicy(request: CreateOrUpdateNotificationPolicyRequest): CreateOrUpdateNotificationPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrUpdateNotificationPolicyWithOptions(request, runtime);
}

model CreateOrUpdateSilencePolicyRequest {
  id?: long(name='Id', description='The ID of the silence policy.

*   If you do not configure this parameter, a new silence policy is created.
*   If you configure this parameter, the specified silence policy is modified.', example='1234'),
  matchingRules?: string(name='MatchingRules', description='The matching rules. The following code shows the format of matching rules:

    [
         {
    	 "matchingConditions": [
    	 {
    	 "value": "test", // The value of the matching condition. 
    	 "key": "altertname", // The key of the matching condition. 
    	 "operator": "eq" // The logical operator of the matching condition, including eq (equal to), neq (not equal to), in (contains), nin (does not contain), re (regular expression match), and nre (regular expression mismatch).   
    	 }
    	 ]
         }
    	 ]', example='[ 	 { 	 "matchingConditions": [ 	 { 	 "value": "test", 	 "key": "altertname", 	 "operator": "eq" 	 } 	 ]      } 	 ]'),
  name?: string(name='Name', description='The name of the silence policy.', example='silencepolicy_test'),
  regionId?: string(name='RegionId'),
}

model CreateOrUpdateSilencePolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
  silencePolicy?: {
    id?: long(name='Id', description='The ID of the silence policy.', example='1234'),
    matchingRules?: [ 
      {
        matchingConditions?: [ 
          {
            key?: string(name='Key', description='The key of the matching condition.', example='altertname'),
            operator?: string(name='Operator', description='The logical operator of the matching condition. Valid values:

*   `eq`: equal to
*   `neq`: not equal to
*   `in`: contains
*   `nin`: does not contain
*   `re`: regular expression match
*   `nre`: regular expression mismatch', example='eq'),
            value?: string(name='Value', description='The value of the matching condition.', example='test'),
          }
        ](name='MatchingConditions', description='A list of matching conditions.'),
      }
    ](name='MatchingRules', description='A list of matching rules.'),
    name?: string(name='Name', description='The name of the silence policy.', example='silencepolicy_test'),
  }(name='SilencePolicy', description='A list of silence policies.'),
}

model CreateOrUpdateSilencePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrUpdateSilencePolicyResponseBody(name='body'),
}

async function createOrUpdateSilencePolicyWithOptions(request: CreateOrUpdateSilencePolicyRequest, runtime: Util.RuntimeOptions): CreateOrUpdateSilencePolicyResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.matchingRules)) {
    body['MatchingRules'] = request.matchingRules;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateOrUpdateSilencePolicy',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOrUpdateSilencePolicy(request: CreateOrUpdateSilencePolicyRequest): CreateOrUpdateSilencePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrUpdateSilencePolicyWithOptions(request, runtime);
}

model CreateOrUpdateWebhookContactRequest {
  bizHeaders?: string(name='BizHeaders', description='The HTTP request headers.', example='[{"Content-Type":"application/json;charset=utf-8"}]'),
  bizParams?: string(name='BizParams', description='The parameters in the HTTP request.', example='[{"content":"mike"}]'),
  body?: string(name='Body', description='The notification template that is sent when an alert is triggered. This parameter is required if the **Method** parameter is set to **Post**. You can use the `$content` placeholder to specify the notification content. The content cannot exceed 500 characters in length. For more information, see [Variable description of a notification template](~~251834~~).\\\\', example='{ "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Alert time":"{{ .startTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }'),
  method?: string(name='Method', description='The HTTP request method.

*   Post
*   Get', example='Post'),
  recoverBody?: string(name='RecoverBody', description='The notification template that is sent when an alert is resolved. This parameter is required if the **Method** parameter is set to **Post**. You can use the `$content` placeholder to specify the notification content. The content cannot exceed 500 characters in length. For more information, see [Variable description of a notification template](~~251834~~).', example='{ "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Recovery time":"{{ .endTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }'),
  url?: string(name='Url', description='The URL of the HTTP request **method**.', example='https://oapi.dingtalk.com/robot/send?access_token=e1a049121******'),
  webhookId?: long(name='WebhookId', description='The ID of the webhook alert contact.

*   If you do not specify this parameter, a new webhook alert contact is created.
* If you specify this parameter, the specified webhook alert contact is modified.', example='123'),
  webhookName?: string(name='WebhookName', description='The name of the webhook alert contact.', example='Webhook alert'),
}

model CreateOrUpdateWebhookContactResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='16AF921B-8187-489F-9913-43C808B4****'),
  webhookContact?: {
    webhook?: {
      bizHeaders?: string(name='BizHeaders', description='The HTTP request headers.', example='[{"Content-Type":"application/json;charset=utf-8"}]'),
      bizParams?: string(name='BizParams', description='The parameters in the HTTP request.', example='[{"content":"mike"}]'),
      body?: string(name='Body', description='The alert notification template.', example='{ "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Alert time":"{{ .startTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }'),
      method?: string(name='Method', description='The HTTP request method.

*   Post
*   Get', example='Post'),
      recoverBody?: string(name='RecoverBody', description='The notification template for clearing alerts.', example='{ "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Recovery time":"{{ .endTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }'),
      url?: string(name='Url', description='The URL of the request method.', example='https://oapi.dingtalk.com/robot/send?access_token=e1a049121******'),
    }(name='Webhook', description='The information about the webhook alert contact.'),
    webhookId?: float(name='WebhookId', description='The ID of the webhook alert contact.', example='123'),
    webhookName?: string(name='WebhookName', description='The name of the webhook alert contact.', example='Webhook alert'),
  }(name='WebhookContact', description='The returned webhook alert contact.'),
}

model CreateOrUpdateWebhookContactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrUpdateWebhookContactResponseBody(name='body'),
}

async function createOrUpdateWebhookContactWithOptions(request: CreateOrUpdateWebhookContactRequest, runtime: Util.RuntimeOptions): CreateOrUpdateWebhookContactResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.bizHeaders)) {
    body['BizHeaders'] = request.bizHeaders;
  }
  if (!Util.isUnset(request.bizParams)) {
    body['BizParams'] = request.bizParams;
  }
  if (!Util.isUnset(request.body)) {
    body['Body'] = request.body;
  }
  if (!Util.isUnset(request.method)) {
    body['Method'] = request.method;
  }
  if (!Util.isUnset(request.recoverBody)) {
    body['RecoverBody'] = request.recoverBody;
  }
  if (!Util.isUnset(request.url)) {
    body['Url'] = request.url;
  }
  if (!Util.isUnset(request.webhookId)) {
    body['WebhookId'] = request.webhookId;
  }
  if (!Util.isUnset(request.webhookName)) {
    body['WebhookName'] = request.webhookName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateOrUpdateWebhookContact',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOrUpdateWebhookContact(request: CreateOrUpdateWebhookContactRequest): CreateOrUpdateWebhookContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrUpdateWebhookContactWithOptions(request, runtime);
}

model CreatePrometheusAlertRuleRequest {
  alertName?: string(name='AlertName', example='Prometheus_Alert'),
  annotations?: string(name='Annotations', example='[{"Value": "xxx","Name": "description"}]'),
  clusterId?: string(name='ClusterId', example='c0bad479465464e1d8c1e641b0afb****'),
  dispatchRuleId?: long(name='DispatchRuleId', example='10282'),
  duration?: string(name='Duration'),
  expression?: string(name='Expression', example='100 * (sum(rate(container_cpu_usage_seconds_total[1m])) by (pod_name) / sum(label_replace(kube_pod_container_resource_limits_cpu_cores, \\"pod_name\\", \\"$1\\", \\"pod\\", \\"(.*)\\")) by (pod_name))>75'),
  labels?: string(name='Labels', example='[{"Value": "critical","Name": "severity"}]'),
  message?: string(name='Message'),
  notifyType?: string(name='NotifyType', example='ALERT_MANAGER'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
  type?: string(name='Type', example='101'),
}

model CreatePrometheusAlertRuleResponseBody = {
  code?: long(name='Code'),
  message?: string(name='Message'),
  prometheusAlertRule?: {
    alertId?: long(name='AlertId', example='3888704'),
    alertName?: string(name='AlertName', example='Prometheus_Alert'),
    annotations?: [ 
      {
        name?: string(name='Name', example='message'),
        value?: string(name='Value'),
      }
    ](name='Annotations'),
    clusterId?: string(name='ClusterId', example='c0bad479465464e1d8c1e641b0afb****'),
    dispatchRuleId?: long(name='DispatchRuleId', example='10282'),
    duration?: string(name='Duration'),
    expression?: string(name='Expression', example='100 * (sum(rate(container_cpu_usage_seconds_total[1m])) by (pod_name) / sum(label_replace(kube_pod_container_resource_limits_cpu_cores, \\"pod_name\\", \\"$1\\", \\"pod\\", \\"(.*)\\")) by (pod_name))>75'),
    labels?: [ 
      {
        name?: string(name='Name', example='severity'),
        value?: string(name='Value', example='critical'),
      }
    ](name='Labels'),
    message?: string(name='Message'),
    notifyType?: string(name='NotifyType', example='ALERT_MANAGER'),
    status?: int32(name='Status', example='1'),
    type?: string(name='Type'),
  }(name='PrometheusAlertRule'),
  requestId?: string(name='RequestId', example='9FEA6D00-317F-45E3-9004-7FB8B0B7****'),
  success?: boolean(name='Success'),
}

model CreatePrometheusAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePrometheusAlertRuleResponseBody(name='body'),
}

async function createPrometheusAlertRuleWithOptions(request: CreatePrometheusAlertRuleRequest, runtime: Util.RuntimeOptions): CreatePrometheusAlertRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alertName)) {
    query['AlertName'] = request.alertName;
  }
  if (!Util.isUnset(request.annotations)) {
    query['Annotations'] = request.annotations;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dispatchRuleId)) {
    query['DispatchRuleId'] = request.dispatchRuleId;
  }
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.expression)) {
    query['Expression'] = request.expression;
  }
  if (!Util.isUnset(request.labels)) {
    query['Labels'] = request.labels;
  }
  if (!Util.isUnset(request.message)) {
    query['Message'] = request.message;
  }
  if (!Util.isUnset(request.notifyType)) {
    query['NotifyType'] = request.notifyType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreatePrometheusAlertRule',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPrometheusAlertRule(request: CreatePrometheusAlertRuleRequest): CreatePrometheusAlertRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPrometheusAlertRuleWithOptions(request, runtime);
}

model CreatePrometheusInstanceRequest {
  allSubClustersSuccess?: boolean(name='AllSubClustersSuccess', description='To edit a GlobalView aggregated instance, do you require all passed child instances to be verified successfully before creating a GlobalView instance (optional, default to false):
- true
- false', example='true'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster. This parameter is required if you set ClusterType to aliyun-cs.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  clusterName?: string(name='ClusterName', description='The name of the cluster. This parameter is required if you set ClusterType to remote-write, ecs, or global-view.', example='clusterNameOfTest'),
  clusterType?: string(name='ClusterType', description='Types include:
- remote-write: General-purpose Instance
- ecs: Prometheus for ECS
- global-view: Global Aggregation Instance
- aliyun-cs: Prometheus Instance for Container Service
- cloud-product: Prometheus for cloud monitor
- cloud-monitor: Prometheus for enterprise cloud monitor
- flink: Prometheus for Flink', example='remote-write'),
  duration?: int32(name='Duration'),
  grafanaInstanceId?: string(name='GrafanaInstanceId', description='The ID of the Grafana dedicated instance. This parameter is available if you set ClusterType to ecs.', example='grafana-bp1*****'),
  regionId?: string(name='RegionId', description='The region ID. If you create a Prometheus instance for a cloud service in China, set this parameter to cn-shanghai.', example='cn-shanghai'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the custom resource group. You can specify this parameter to bind the instance to the resource group.', example='rg-acfmxyexli2****'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group. This parameter is required if you set ClusterType to ecs or create an ASK managed cluster.', example='sg-bp1********'),
  subClustersJson?: string(name='SubClustersJson', description='The child instances of the Prometheus instance for GlobalView. The value is a JSON string.', example='[ { "headers":{ }, "regionId":"cn-hangzhou", "sourceType":"AlibabaPrometheus", "extras":{ }, "clusterId":"c39a1048921e04f***********", "sourceName":"arms-luyao-test", "dataSource":"", "userId":"1672753***********" }, { "headers":{ }, "regionId":"cn-beijing", "sourceType":"AlibabaPrometheus", "extras":{ }, "clusterId":"c6b6485496d5b40***********", "sourceName":"agent-321-test", "dataSource":"", "userId":"1672753***********" }, { "headers":{ }, "regionId":"cn-zhangjiakou", "sourceType":"AlibabaPrometheus", "extras":{ }, "clusterId":"c261a4f3200c446***********", "sourceName":"zaifeng-cardinality-01", "dataSource":"", "userId":"1672753***********" } ]'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', description='The tags of the instance. You can specify this parameter to manage tags for the instance.', example='[
    {
        "labelName":"labelValue"
    },
    {
        "testName":"clusterA"
    }
]'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch. This parameter is required if you set ClusterType to ecs or create an ASK managed cluster.', example='vsw-bp1*********'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC). This parameter is required if you set ClusterType to ecs or create a serverless Kubernetes (ASK) managed cluster.', example='vpc-rpn**********'),
}

model CreatePrometheusInstanceResponseBody = {
  code?: int32(name='Code', description='The status code that is returned. Valid values:

*   `2XX: The request is successful.`
*   `3XX: A redirection message is returned.`
*   `4XX: The request is invalid.`
*   `5XX: A server error occurred.`', example='200'),
  data?: string(name='Data', description='The ID of the created Prometheus instance.', example='qduukd****'),
  message?: string(name='Message', description='The error message that is returned if the request failed.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='70675725-8F11-4817-8106-CFE0AD71****'),
}

model CreatePrometheusInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePrometheusInstanceResponseBody(name='body'),
}

async function createPrometheusInstanceWithOptions(request: CreatePrometheusInstanceRequest, runtime: Util.RuntimeOptions): CreatePrometheusInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allSubClustersSuccess)) {
    query['AllSubClustersSuccess'] = request.allSubClustersSuccess;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.clusterType)) {
    query['ClusterType'] = request.clusterType;
  }
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.grafanaInstanceId)) {
    query['GrafanaInstanceId'] = request.grafanaInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.subClustersJson)) {
    query['SubClustersJson'] = request.subClustersJson;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreatePrometheusInstance',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPrometheusInstance(request: CreatePrometheusInstanceRequest): CreatePrometheusInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPrometheusInstanceWithOptions(request, runtime);
}

model CreatePrometheusMonitoringRequest {
  clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  configYaml?: string(name='ConfigYaml', description='The monitoring configuration. Specify a YAML string.', example='Please refer to the supplementary explanation of the request parameters.'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  status?: string(name='Status', description='The status of the monitoring configuration. Valid values: run and stop. Default value: run. This parameter is not available if the Type parameter is set to Probe.', example='run'),
  type?: string(name='Type', description='The type of the monitoring configuration. 
Valid values for a Prometheus instance for Container Service: serviceMonitor, podMonitor, customJob, and probe. 
Valid values for a Prometheus instance for ECS: customJob and probe.', example='serviceMonitor'),
}

model CreatePrometheusMonitoringResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The name of the monitoring configuration that was added, or the exception information.', example='name1'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='21E85B16-75A6-429A-9F65-8AAC9A54****'),
}

model CreatePrometheusMonitoringResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePrometheusMonitoringResponseBody(name='body'),
}

async function createPrometheusMonitoringWithOptions(request: CreatePrometheusMonitoringRequest, runtime: Util.RuntimeOptions): CreatePrometheusMonitoringResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.configYaml)) {
    body['ConfigYaml'] = request.configYaml;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreatePrometheusMonitoring',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPrometheusMonitoring(request: CreatePrometheusMonitoringRequest): CreatePrometheusMonitoringResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPrometheusMonitoringWithOptions(request, runtime);
}

model CreateRetcodeAppRequest {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. You can obtain the resource group ID in the **Resource Management** console.', example='rg-acfmxyexli2****'),
  retcodeAppName?: string(name='RetcodeAppName', description='The name of the application that is monitored by Browser Monitoring.', example='SdkTest'),
  retcodeAppType?: string(name='RetcodeAppType', description='The site type.', example='mini_dd'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The list of tags.'),
}

model CreateRetcodeAppResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  data?: string(name='Data', description='The response parameters.', example='cs80w0n7u3@6455f403dba2f0a'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A5EC8221-08F2-4C95-9AF1-49FD998C647A'),
  retcodeAppDataBean?: {
    appId?: long(name='AppId', description='The application ID.', example='135143'),
    pid?: string(name='Pid', description='PID.', example='aokcdqn3ly@a195c6d6421****'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.

If this parameter is left empty, the default resource group is used. You can view the resource group ID on the Resource Group page in the Resource Management console.', example='rg-acfmxyexli2****'),
    tags?: {
      tags?: [ 
      {
        key?: string(name='Key', description='The tag key.', example='TestKey'),
        value?: string(name='Value', description='The tag value.', example='TestValue'),
      }
    ](name='Tags')
    }(name='Tags', description='The tags.'),
  }(name='RetcodeAppDataBean', description='The return detail.'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='True'),
}

model CreateRetcodeAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRetcodeAppResponseBody(name='body'),
}

async function createRetcodeAppWithOptions(request: CreateRetcodeAppRequest, runtime: Util.RuntimeOptions): CreateRetcodeAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.retcodeAppName)) {
    query['RetcodeAppName'] = request.retcodeAppName;
  }
  if (!Util.isUnset(request.retcodeAppType)) {
    query['RetcodeAppType'] = request.retcodeAppType;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRetcodeApp',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRetcodeApp(request: CreateRetcodeAppRequest): CreateRetcodeAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRetcodeAppWithOptions(request, runtime);
}

model CreateSyntheticTaskRequest {
  commonParam?: {
    alarmFlag?: string(name='AlarmFlag', example='1'),
    alertList?: [ 
      {
        isCritical?: long(name='IsCritical', example='true'),
        name?: string(name='Name', example='PING_SET'),
        symbols?: long(name='Symbols', example='1'),
      }
    ](name='AlertList'),
    alertNotifierId?: string(name='AlertNotifierId', example='123'),
    alertPolicyId?: string(name='AlertPolicyId', example='1234'),
    monitorSamples?: long(name='MonitorSamples', example='0'),
    startExecutionTime?: long(name='StartExecutionTime', example='2022-07-20 10'),
  }(name='CommonParam'),
  download?: {
    connectionTimeout?: double(name='ConnectionTimeout', example='200'),
    downloadCustomHeaderContent?: string(name='DownloadCustomHeaderContent'),
    downloadCustomHost?: long(name='DownloadCustomHost', example='1'),
    downloadCustomHostIp?: string(name='DownloadCustomHostIp', example='ipv4:192.168.2.1,192.168.2.5:img.a.com|192.168.2.1[8080]:img.a.com'),
    downloadIgnoreCertificateError?: string(name='DownloadIgnoreCertificateError'),
    downloadKernel?: long(name='DownloadKernel', example='1'),
    downloadRedirection?: long(name='DownloadRedirection'),
    downloadTransmissionSize?: long(name='DownloadTransmissionSize'),
    monitorTimeout?: long(name='MonitorTimeout'),
    quickProtocol?: string(name='QuickProtocol', example='1'),
    validateKeywords?: string(name='ValidateKeywords'),
    verifyWay?: long(name='VerifyWay', example='0'),
    whiteList?: string(name='WhiteList', example='[{\\"src\\":\\"211.154.166.174\\"}]'),
  }(name='Download'),
  extendInterval?: {
    days?: [ long ](name='Days'),
    endHour?: long(name='EndHour', example='23'),
    endMinute?: long(name='EndMinute', example='00'),
    endTime?: string(name='EndTime', example='2022-08-20 10'),
    startHour?: long(name='StartHour', example='00'),
    startMinute?: long(name='StartMinute', example='00'),
    startTime?: string(name='StartTime', example='2022-07-20 10'),
  }(name='ExtendInterval'),
  intervalTime?: string(name='IntervalTime', example='5'),
  intervalType?: string(name='IntervalType', example='0'),
  ipType?: long(name='IpType', example='0'),
  monitorList?: [ 
    {
      cityCode?: long(name='CityCode', example='1100101'),
      monitorType?: long(name='MonitorType', example='IDC'),
      netServiceId?: long(name='NetServiceId', example='18'),
    }
  ](name='MonitorList'),
  navigation?: {
    DNSHijackWhiteList?: string(name='DNSHijackWhiteList'),
    elementBlacklist?: string(name='ElementBlacklist'),
    executeActiveX?: long(name='ExecuteActiveX', example='3'),
    executeApplication?: long(name='ExecuteApplication', example='1'),
    executeScript?: long(name='ExecuteScript', example='1'),
    filterInvalidIP?: long(name='FilterInvalidIP', example='1'),
    flowHijackJumpTimes?: long(name='FlowHijackJumpTimes'),
    flowHijackLogo?: string(name='FlowHijackLogo'),
    monitorTimeout?: string(name='MonitorTimeout', example='20'),
    navAutomaticScrolling?: string(name='NavAutomaticScrolling', example='1'),
    navCustomHeader?: string(name='NavCustomHeader', example='0'),
    navCustomHeaderContent?: string(name='NavCustomHeaderContent', example='Host:www.example.com|Referer:www.example.com'),
    navCustomHost?: long(name='NavCustomHost', example='1'),
    navCustomHostIp?: string(name='NavCustomHostIp', example='ipv4:192.168.2.1,192.168.2.5:img.a.com|192.168.2.1[8080]:img.a.com'),
    navDisableCache?: long(name='NavDisableCache', example='1'),
    navDisableCompression?: string(name='NavDisableCompression', example='1'),
    navIgnoreCertificateError?: long(name='NavIgnoreCertificateError', example='1'),
    navRedirection?: long(name='NavRedirection', example='1'),
    navReturnElement?: long(name='NavReturnElement', example='2'),
    pageTamper?: string(name='PageTamper'),
    processName?: string(name='ProcessName', example='ssh'),
    QUICDomain?: string(name='QUICDomain', example='www.example.com'),
    QUICVersion?: long(name='QUICVersion', example='0'),
    requestHeader?: long(name='RequestHeader', example='0'),
    responseHeader?: long(name='ResponseHeader', example='0'),
    slowElementThreshold?: double(name='SlowElementThreshold', example='5'),
    verifyStringBlacklist?: string(name='VerifyStringBlacklist'),
    verifyStringWhiteList?: string(name='VerifyStringWhiteList'),
    waitCompletionTime?: double(name='WaitCompletionTime'),
  }(name='Navigation'),
  net?: {
    netDNSNs?: string(name='NetDNSNs', example='114.114.XX.XX'),
    netDNSQueryMethod?: long(name='NetDNSQueryMethod', example='1'),
    netDNSServer?: long(name='NetDNSServer', example='0'),
    netDNSSwitch?: long(name='NetDNSSwitch', example='1'),
    netDNSTimeout?: long(name='NetDNSTimeout', example='5'),
    netDigSwitch?: long(name='NetDigSwitch', example='0'),
    netICMPActive?: long(name='NetICMPActive', example='0'),
    netICMPDataCut?: long(name='NetICMPDataCut', example='0'),
    netICMPInterval?: long(name='NetICMPInterval', example='1'),
    netICMPNum?: long(name='NetICMPNum', example='4'),
    netICMPSize?: long(name='NetICMPSize', example='32'),
    netICMPSwitch?: long(name='NetICMPSwitch', example='1'),
    netICMPTimeout?: long(name='NetICMPTimeout'),
    netTraceRouteNum?: long(name='NetTraceRouteNum', example='20'),
    netTraceRouteSwitch?: long(name='NetTraceRouteSwitch', example='1'),
    netTraceRouteTimeout?: long(name='NetTraceRouteTimeout', example='60'),
    whiteList?: string(name='WhiteList', example='www.aliyun.com:202.0.3.55|203.3.44.67'),
  }(name='Net'),
  protocol?: {
    characterEncoding?: long(name='CharacterEncoding', example='0'),
    customHost?: long(name='CustomHost', example='1'),
    customHostIp?: string(name='CustomHostIp', example='ipv4:192.168.2.1,192.168.2.5:img.a.com|192.168.2.1[8080]:img.a.com'),
    protocolConnectionTime?: long(name='ProtocolConnectionTime', example='3'),
    protocolMonitorTimeout?: string(name='ProtocolMonitorTimeout', example='30'),
    receivedDataSize?: long(name='ReceivedDataSize'),
    requestContent?: {
      body?: {
        formData?: [ 
          {
            key?: string(name='Key', example='appId'),
            value?: string(name='Value', example='3425'),
          }
        ](name='FormData'),
        language?: string(name='Language', example='json'),
        mode?: string(name='Mode', example='form-data'),
        raw?: string(name='Raw', example='content'),
        urlEncoding?: [ 
          {
            key?: string(name='Key', example='appId'),
            value?: string(name='Value', example='11080'),
          }
        ](name='UrlEncoding'),
      }(name='Body'),
      header?: [ 
        {
          key?: string(name='Key', example='regionId'),
          value?: string(name='Value', example='cn-hangzhou'),
        }
      ](name='Header'),
      method?: string(name='Method', example='POST'),
    }(name='RequestContent'),
    verifyContent?: string(name='VerifyContent'),
    verifyWay?: long(name='VerifyWay', example='0'),
  }(name='Protocol'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  taskName?: string(name='TaskName'),
  taskType?: long(name='TaskType', example='0'),
  updateTask?: boolean(name='UpdateTask', example='false'),
  url?: string(name='Url', example='https://www.example.com'),
}

model CreateSyntheticTaskShrinkRequest {
  commonParamShrink?: string(name='CommonParam'),
  downloadShrink?: string(name='Download'),
  extendIntervalShrink?: string(name='ExtendInterval'),
  intervalTime?: string(name='IntervalTime', example='5'),
  intervalType?: string(name='IntervalType', example='0'),
  ipType?: long(name='IpType', example='0'),
  monitorListShrink?: string(name='MonitorList'),
  navigationShrink?: string(name='Navigation'),
  netShrink?: string(name='Net'),
  protocolShrink?: string(name='Protocol'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  taskName?: string(name='TaskName'),
  taskType?: long(name='TaskType', example='0'),
  updateTask?: boolean(name='UpdateTask', example='false'),
  url?: string(name='Url', example='https://www.example.com'),
}

model CreateSyntheticTaskResponseBody = {
  code?: string(name='Code', example='1001'),
  data?: {
    taskId?: long(name='TaskId', example='1234'),
  }(name='Data'),
  msg?: string(name='Msg', example='null'),
  requestId?: string(name='RequestId', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
}

model CreateSyntheticTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSyntheticTaskResponseBody(name='body'),
}

async function createSyntheticTaskWithOptions(tmpReq: CreateSyntheticTaskRequest, runtime: Util.RuntimeOptions): CreateSyntheticTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateSyntheticTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.commonParam)) {
    request.commonParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.commonParam, 'CommonParam', 'json');
  }
  if (!Util.isUnset(tmpReq.download)) {
    request.downloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.download, 'Download', 'json');
  }
  if (!Util.isUnset(tmpReq.extendInterval)) {
    request.extendIntervalShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extendInterval, 'ExtendInterval', 'json');
  }
  if (!Util.isUnset(tmpReq.monitorList)) {
    request.monitorListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.monitorList, 'MonitorList', 'json');
  }
  if (!Util.isUnset(tmpReq.navigation)) {
    request.navigationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.navigation, 'Navigation', 'json');
  }
  if (!Util.isUnset(tmpReq.net)) {
    request.netShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.net, 'Net', 'json');
  }
  if (!Util.isUnset(tmpReq.protocol)) {
    request.protocolShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.protocol, 'Protocol', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.commonParamShrink)) {
    query['CommonParam'] = request.commonParamShrink;
  }
  if (!Util.isUnset(request.downloadShrink)) {
    query['Download'] = request.downloadShrink;
  }
  if (!Util.isUnset(request.extendIntervalShrink)) {
    query['ExtendInterval'] = request.extendIntervalShrink;
  }
  if (!Util.isUnset(request.intervalTime)) {
    query['IntervalTime'] = request.intervalTime;
  }
  if (!Util.isUnset(request.intervalType)) {
    query['IntervalType'] = request.intervalType;
  }
  if (!Util.isUnset(request.ipType)) {
    query['IpType'] = request.ipType;
  }
  if (!Util.isUnset(request.monitorListShrink)) {
    query['MonitorList'] = request.monitorListShrink;
  }
  if (!Util.isUnset(request.navigationShrink)) {
    query['Navigation'] = request.navigationShrink;
  }
  if (!Util.isUnset(request.netShrink)) {
    query['Net'] = request.netShrink;
  }
  if (!Util.isUnset(request.protocolShrink)) {
    query['Protocol'] = request.protocolShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  if (!Util.isUnset(request.updateTask)) {
    query['UpdateTask'] = request.updateTask;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSyntheticTask',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSyntheticTask(request: CreateSyntheticTaskRequest): CreateSyntheticTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSyntheticTaskWithOptions(request, runtime);
}

model CreateTimingSyntheticTaskRequest {
  availableAssertions?: [ 
    {
      expect?: string(name='Expect', example='200'),
      operator?: string(name='Operator', example='eq'),
      target?: string(name='Target', example='key'),
      type?: string(name='Type', example='DnsARecord'),
    }
  ](name='AvailableAssertions'),
  commonSetting?: {
    customHost?: {
      hosts?: [ 
        {
          domain?: string(name='Domain', example='www.aliyun.com'),
          ipType?: int32(name='IpType', example='0'),
          ips?: [ string ](name='Ips'),
        }
      ](name='Hosts'),
      selectType?: int32(name='SelectType', example='0'),
    }(name='CustomHost'),
    customVPCSetting?: {
      regionId?: string(name='RegionId'),
      secureGroupId?: string(name='SecureGroupId'),
      vSwitchId?: string(name='VSwitchId'),
      vpcId?: string(name='VpcId'),
    }(name='CustomVPCSetting'),
    ipType?: int32(name='IpType', example='0'),
    isOpenTrace?: boolean(name='IsOpenTrace'),
    monitorSamples?: int32(name='MonitorSamples', example='0'),
    traceClientType?: int32(name='TraceClientType'),
    xtraceRegion?: string(name='XtraceRegion'),
  }(name='CommonSetting'),
  customPeriod?: {
    endHour?: int32(name='EndHour', example='22'),
    startHour?: int32(name='StartHour', example='8'),
  }(name='CustomPeriod'),
  frequency?: string(name='Frequency', example='5m'),
  monitorCategory?: int32(name='MonitorCategory', example='1'),
  monitorConf?: {
    apiHTTP?: {
      checkCert?: boolean(name='CheckCert'),
      connectTimeout?: long(name='ConnectTimeout', example='5000'),
      method?: string(name='Method', example='GET'),
      requestBody?: {
        content?: string(name='Content', example='{
  "key1": "value1",
  "key2": "value2"
}'),
        type?: string(name='Type', example='application/json'),
      }(name='RequestBody'),
      requestHeaders?: map[string]string(name='RequestHeaders'),
      targetUrl?: string(name='TargetUrl', example='http://www.demo.com/api/list'),
      timeout?: long(name='Timeout', example='10000'),
    }(name='ApiHTTP'),
    fileDownload?: {
      connectionTimeout?: long(name='ConnectionTimeout', example='5000'),
      customHeaderContent?: map[string]string(name='CustomHeaderContent'),
      downloadKernel?: int32(name='DownloadKernel', example='1'),
      ignoreCertificateAuthError?: int32(name='IgnoreCertificateAuthError', example='1'),
      ignoreCertificateCanceledError?: int32(name='IgnoreCertificateCanceledError', example='1'),
      ignoreCertificateOutOfDateError?: int32(name='IgnoreCertificateOutOfDateError', example='1'),
      ignoreCertificateStatusError?: int32(name='IgnoreCertificateStatusError', example='1'),
      ignoreCertificateUntrustworthyError?: int32(name='IgnoreCertificateUntrustworthyError', example='1'),
      ignoreCertificateUsingError?: int32(name='IgnoreCertificateUsingError', example='1'),
      ignoreInvalidHostError?: int32(name='IgnoreInvalidHostError', example='1'),
      monitorTimeout?: long(name='MonitorTimeout', example='60000'),
      quickProtocol?: int32(name='QuickProtocol', example='1'),
      redirection?: int32(name='Redirection', example='1'),
      targetUrl?: string(name='TargetUrl', example='https://img.alicdn.com/tfs/TB13DzOjXP7gK0jSZFjXXc5aXXa-212-48.png'),
      transmissionSize?: long(name='TransmissionSize', example='2048'),
      validateKeywords?: string(name='ValidateKeywords'),
      verifyWay?: int32(name='VerifyWay'),
      whiteList?: string(name='WhiteList'),
    }(name='FileDownload'),
    netDNS?: {
      dnsServerIpType?: int32(name='DnsServerIpType', example='0'),
      nsServer?: string(name='NsServer', example='114.114.114.114'),
      queryMethod?: int32(name='QueryMethod', example='0'),
      targetUrl?: string(name='TargetUrl', example='www.aliyun.com'),
      timeout?: long(name='Timeout', example='5000'),
    }(name='NetDNS'),
    netICMP?: {
      interval?: long(name='Interval', example='200'),
      packageNum?: int32(name='PackageNum', example='4'),
      packageSize?: int32(name='PackageSize', example='32'),
      splitPackage?: boolean(name='SplitPackage', example='true'),
      targetUrl?: string(name='TargetUrl', example='www.example.com'),
      timeout?: long(name='Timeout', example='20000'),
      tracertEnable?: boolean(name='TracertEnable', example='true'),
      tracertNumMax?: int32(name='TracertNumMax', example='20'),
      tracertTimeout?: long(name='TracertTimeout', example='60000'),
    }(name='NetICMP'),
    netTCP?: {
      connectTimes?: int32(name='ConnectTimes', example='4'),
      interval?: long(name='Interval', example='200'),
      targetUrl?: string(name='TargetUrl', example='www.example.com'),
      timeout?: long(name='Timeout', example='20000'),
      tracertEnable?: boolean(name='TracertEnable', example='true'),
      tracertNumMax?: int32(name='TracertNumMax', example='20'),
      tracertTimeout?: long(name='TracertTimeout', example='60000'),
    }(name='NetTCP'),
    stream?: {
      customHeaderContent?: map[string]string(name='CustomHeaderContent'),
      playerType?: int32(name='PlayerType'),
      streamAddressType?: int32(name='StreamAddressType'),
      streamMonitorTimeout?: int32(name='StreamMonitorTimeout'),
      streamType?: int32(name='StreamType'),
      targetUrl?: string(name='TargetUrl'),
      whiteList?: string(name='WhiteList'),
    }(name='Stream'),
    website?: {
      automaticScrolling?: int32(name='AutomaticScrolling', example='0'),
      customHeader?: int32(name='CustomHeader', example='0'),
      customHeaderContent?: map[string]string(name='CustomHeaderContent'),
      DNSHijackWhitelist?: string(name='DNSHijackWhitelist'),
      disableCache?: int32(name='DisableCache', example='1'),
      disableCompression?: int32(name='DisableCompression', example='0'),
      elementBlacklist?: string(name='ElementBlacklist'),
      filterInvalidIP?: int32(name='FilterInvalidIP', example='0'),
      flowHijackJumpTimes?: int32(name='FlowHijackJumpTimes'),
      flowHijackLogo?: string(name='FlowHijackLogo'),
      ignoreCertificateError?: int32(name='IgnoreCertificateError', example='1'),
      monitorTimeout?: long(name='MonitorTimeout', example='20000'),
      pageTamper?: string(name='PageTamper'),
      redirection?: int32(name='Redirection', example='1'),
      slowElementThreshold?: long(name='SlowElementThreshold', example='5000'),
      targetUrl?: string(name='TargetUrl', example='https://www.aliyun.com'),
      verifyStringBlacklist?: string(name='VerifyStringBlacklist'),
      verifyStringWhitelist?: string(name='VerifyStringWhitelist'),
      waitCompletionTime?: long(name='WaitCompletionTime', example='5000'),
    }(name='Website'),
  }(name='MonitorConf'),
  monitors?: [ 
    {
      cityCode?: string(name='CityCode', example='100023'),
      clientType?: int32(name='ClientType', example='1'),
      operatorCode?: string(name='OperatorCode', example='1'),
    }
  ](name='Monitors'),
  name?: string(name='Name', example='demo-test'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='xxxx'),
  tags?: [ 
    {
      key?: string(name='Key', example='Key'),
      value?: string(name='Value', example='500'),
    }
  ](name='Tags'),
  taskType?: int32(name='TaskType', example='4'),
}

model CreateTimingSyntheticTaskShrinkRequest {
  availableAssertionsShrink?: string(name='AvailableAssertions'),
  commonSettingShrink?: string(name='CommonSetting'),
  customPeriodShrink?: string(name='CustomPeriod'),
  frequency?: string(name='Frequency', example='5m'),
  monitorCategory?: int32(name='MonitorCategory', example='1'),
  monitorConfShrink?: string(name='MonitorConf'),
  monitorsShrink?: string(name='Monitors'),
  name?: string(name='Name', example='demo-test'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='xxxx'),
  tagsShrink?: string(name='Tags'),
  taskType?: int32(name='TaskType', example='4'),
}

model CreateTimingSyntheticTaskResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    status?: string(name='Status', example='RUNNING'),
    taskId?: string(name='TaskId', example='5308a2691f59422c8c3b7aeccec9cd3b'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='53B5874D-EBC1-5567-B787-E4B7267F5CEB'),
  success?: boolean(name='Success', example='true'),
}

model CreateTimingSyntheticTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTimingSyntheticTaskResponseBody(name='body'),
}

async function createTimingSyntheticTaskWithOptions(tmpReq: CreateTimingSyntheticTaskRequest, runtime: Util.RuntimeOptions): CreateTimingSyntheticTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateTimingSyntheticTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.availableAssertions)) {
    request.availableAssertionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.availableAssertions, 'AvailableAssertions', 'json');
  }
  if (!Util.isUnset(tmpReq.commonSetting)) {
    request.commonSettingShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.commonSetting, 'CommonSetting', 'json');
  }
  if (!Util.isUnset(tmpReq.customPeriod)) {
    request.customPeriodShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.customPeriod, 'CustomPeriod', 'json');
  }
  if (!Util.isUnset(tmpReq.monitorConf)) {
    request.monitorConfShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.monitorConf, 'MonitorConf', 'json');
  }
  if (!Util.isUnset(tmpReq.monitors)) {
    request.monitorsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.monitors, 'Monitors', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.availableAssertionsShrink)) {
    query['AvailableAssertions'] = request.availableAssertionsShrink;
  }
  if (!Util.isUnset(request.commonSettingShrink)) {
    query['CommonSetting'] = request.commonSettingShrink;
  }
  if (!Util.isUnset(request.customPeriodShrink)) {
    query['CustomPeriod'] = request.customPeriodShrink;
  }
  if (!Util.isUnset(request.frequency)) {
    query['Frequency'] = request.frequency;
  }
  if (!Util.isUnset(request.monitorCategory)) {
    query['MonitorCategory'] = request.monitorCategory;
  }
  if (!Util.isUnset(request.monitorConfShrink)) {
    query['MonitorConf'] = request.monitorConfShrink;
  }
  if (!Util.isUnset(request.monitorsShrink)) {
    query['Monitors'] = request.monitorsShrink;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTimingSyntheticTask',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTimingSyntheticTask(request: CreateTimingSyntheticTaskRequest): CreateTimingSyntheticTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTimingSyntheticTaskWithOptions(request, runtime);
}

model CreateWebhookRequest {
  body?: string(name='Body', description='The notification template that is sent when an alert is triggered. This parameter is required if the **Method** parameter is set to **Post**. You can use the $content placeholder to specify the notification content. The content cannot exceed 500 characters in length.', example='{ "Alert Name": "{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster Name": "{{ .commonLabels.clustername }} {{ end }}{{if eq " app" .commonLabels._aliyun_arms_involvedObject_kind }}", "Application Name": "{{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}", "Notification Policy": "{{ .dispatchRuleName }}", "Alarm Time": "{{ .startTime }}", "Alert Content": "{{ for .alerts }} {{ .annotations.message }} {{ end }}" }'),
  contactName?: string(name='ContactName', description='The name of the contact.', example='WebhookAlert'),
  httpHeaders?: string(name='HttpHeaders', description='The HTTP request header.', example='[{"Content-Type":"application/json"}]'),
  httpParams?: string(name='HttpParams', description='The parameters in the HTTP request.', example='[{"name":"mike"}]'),
  method?: string(name='Method', description='The HTTP request method.

*   `Get`
*   `Post`', example='Post'),
  recoverBody?: string(name='RecoverBody', description='The notification template that is sent when an alert is resolved. This parameter is required if the **Method** parameter is set to **Post**. You can use the $content placeholder to specify the notification content. The content cannot exceed 500 characters in length.', example='{ "Alert Name": "{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster Name": "{{ .commonLabels.clustername }} {{ end }}{{if eq " app" .commonLabels._aliyun_arms_involvedObject_kind }}", "Application Name": "{{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}", "Notification Policy": "{{ .dispatchRuleName }}", "Alarm Time": "{{ .startTime }}", "Alert Content": "{{ for .alerts }} {{ .annotations.message }} {{ end }}" }'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  url?: string(name='Url', description='The URL of the request **method**.', example='https://oapi.dingtalk.com/robot/send?access_token=e1a049121ddbfce1ca963d115ef88cc7219583c4fb79fe6e398fbfb688******'),
}

model CreateWebhookResponseBody = {
  contactId?: string(name='ContactId', description='The ID of the contact for webhook alerts.', example='48716'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='16AF921B-8187-489F-9913-43C808B4****'),
}

model CreateWebhookResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWebhookResponseBody(name='body'),
}

async function createWebhookWithOptions(request: CreateWebhookRequest, runtime: Util.RuntimeOptions): CreateWebhookResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.body)) {
    query['Body'] = request.body;
  }
  if (!Util.isUnset(request.contactName)) {
    query['ContactName'] = request.contactName;
  }
  if (!Util.isUnset(request.httpHeaders)) {
    query['HttpHeaders'] = request.httpHeaders;
  }
  if (!Util.isUnset(request.httpParams)) {
    query['HttpParams'] = request.httpParams;
  }
  if (!Util.isUnset(request.method)) {
    query['Method'] = request.method;
  }
  if (!Util.isUnset(request.recoverBody)) {
    query['RecoverBody'] = request.recoverBody;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateWebhook',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createWebhook(request: CreateWebhookRequest): CreateWebhookResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWebhookWithOptions(request, runtime);
}

model DelAuthTokenRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model DelAuthTokenResponseBody = {
  data?: string(name='Data', description='Indicates whether the call was successful.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='A5EC8221-08F2-4C95-9AF1-49FD998C647A'),
}

model DelAuthTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DelAuthTokenResponseBody(name='body'),
}

async function delAuthTokenWithOptions(request: DelAuthTokenRequest, runtime: Util.RuntimeOptions): DelAuthTokenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DelAuthToken',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function delAuthToken(request: DelAuthTokenRequest): DelAuthTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return delAuthTokenWithOptions(request, runtime);
}

model DeleteAddonReleaseRequest {
  environmentId?: string(name='EnvironmentId', description='Environment ID.', example='env-xxx'),
  force?: boolean(name='Force', description='Whether to be forcibly deleted. The default value is false.', example='false'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  releaseName?: string(name='ReleaseName', description='Name of Release.', example='agent-822567d4-2449'),
}

model DeleteAddonReleaseResponseBody = {
  code?: int32(name='Code', description='Status code: 200 indicates success.', example='200'),
  data?: string(name='Data', description='Return a message.', example='success'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='F7781D4A-2818-41E7-B7BB-79D809E9****'),
  success?: boolean(name='Success', description='Indicates whether the alert rule was deleted. Valid values:

*   `true`: The alert rule was deleted.
*   `false`: The alert rule failed to be deleted.', example='true'),
}

model DeleteAddonReleaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAddonReleaseResponseBody(name='body'),
}

async function deleteAddonReleaseWithOptions(request: DeleteAddonReleaseRequest, runtime: Util.RuntimeOptions): DeleteAddonReleaseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.releaseName)) {
    query['ReleaseName'] = request.releaseName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAddonRelease',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAddonRelease(request: DeleteAddonReleaseRequest): DeleteAddonReleaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAddonReleaseWithOptions(request, runtime);
}

model DeleteAlertContactRequest {
  contactId?: long(name='ContactId', description='The ID of the alert contact.', example='123'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DeleteAlertContactResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the call was successful.

*   `true`: The call was successful.
*   `false`: The call failed.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request. You can query logs and troubleshoot issues based on the ID.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
}

model DeleteAlertContactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAlertContactResponseBody(name='body'),
}

/**
  * ********
  *
  * @param request DeleteAlertContactRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteAlertContactResponse
 */
async function deleteAlertContactWithOptions(request: DeleteAlertContactRequest, runtime: Util.RuntimeOptions): DeleteAlertContactResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactId)) {
    query['ContactId'] = request.contactId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAlertContact',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ********
  *
  * @param request DeleteAlertContactRequest
  * @return DeleteAlertContactResponse
 */
async function deleteAlertContact(request: DeleteAlertContactRequest): DeleteAlertContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAlertContactWithOptions(request, runtime);
}

model DeleteAlertContactGroupRequest {
  contactGroupId?: long(name='ContactGroupId', description='The ID of the alert contact group.', example='123'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DeleteAlertContactGroupResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the call was successful.

*   `true`: The call was successful.
*   `false`: The call failed.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model DeleteAlertContactGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAlertContactGroupResponseBody(name='body'),
}

async function deleteAlertContactGroupWithOptions(request: DeleteAlertContactGroupRequest, runtime: Util.RuntimeOptions): DeleteAlertContactGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactGroupId)) {
    query['ContactGroupId'] = request.contactGroupId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAlertContactGroup',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAlertContactGroup(request: DeleteAlertContactGroupRequest): DeleteAlertContactGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAlertContactGroupWithOptions(request, runtime);
}

model DeleteAlertRuleRequest {
  alertId?: long(name='AlertId', description='Indicates whether the alert rule was successfully deleted.

*   `true`: The specified data is deleted.
*   `false`: The specified data fails to be deleted.', example='123'),
}

model DeleteAlertRuleResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the call was successful.

*   `true`: The call was successful.
*   `false`: The call failed.', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model DeleteAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAlertRuleResponseBody(name='body'),
}

async function deleteAlertRuleWithOptions(request: DeleteAlertRuleRequest, runtime: Util.RuntimeOptions): DeleteAlertRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alertId)) {
    query['AlertId'] = request.alertId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAlertRule',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAlertRule(request: DeleteAlertRuleRequest): DeleteAlertRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAlertRuleWithOptions(request, runtime);
}

model DeleteAlertRulesRequest {
  alertIds?: string(name='AlertIds', example='[123, 234]'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteAlertRulesResponseBody = {
  isSuccess?: boolean(name='IsSuccess', example='true'),
  requestId?: string(name='RequestId', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model DeleteAlertRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAlertRulesResponseBody(name='body'),
}

async function deleteAlertRulesWithOptions(request: DeleteAlertRulesRequest, runtime: Util.RuntimeOptions): DeleteAlertRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alertIds)) {
    query['AlertIds'] = request.alertIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAlertRules',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAlertRules(request: DeleteAlertRulesRequest): DeleteAlertRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAlertRulesWithOptions(request, runtime);
}

model DeleteAppListRequest {
  pids?: [ string ](name='Pids', description='The PIDs of the applications monitored by ARMS Application Monitoring.'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model DeleteAppListResponseBody = {
  code?: long(name='Code', description='The HTTP status code. 2XX indicates that the request was successful. 3XX indicates that the request was redirected. 4XX indicates that a request error occurred. 5XX indicates that a server error occurred.', example='200'),
  data?: string(name='Data', description='The returned message.', example='"{\\"code\\":200,\\"data\\":\\"{\\\\\\"code\\\\\\":200,\\\\\\"data\\\\\\":true,\\\\\\"errorCode\\\\ \\":\\\\\\"Deletion of application successful\\\\\\",\\\\\\"Message\\\\\\":\\\\\\"Deletion of application successful\\\\\\",\\\\\\"Successful\\\\\\":true,\\ \\\\"traceId\\\\\\":\\\\\\"0bc1667516940677164677396d0088\\\\\\"}\\",\\"errorCode\\":\\"Batch deletion of applications successful\\",\\"message\\":\\"Batch deletion of applications successful\\ ",\\"Success\\":true,\\"traceId\\":\\"210f470416940677161213505e0e7a\\"}"'),
  message?: string(name='Message', description='The error message returned when the request parameters are invalid.', example='"Deletion of application successful"'),
  requestId?: string(name='RequestId', description='The request ID.', example='4B446DF2-3DDD-4B5B-8E3F-D5225120****'),
  success?: boolean(name='Success', description='Indicates whether the specified applications are deleted. Valid values:

*   `true`: The applications are deleted.
*   `false`: The applications failed to be deleted.', example='true'),
}

model DeleteAppListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppListResponseBody(name='body'),
}

async function deleteAppListWithOptions(request: DeleteAppListRequest, runtime: Util.RuntimeOptions): DeleteAppListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pids)) {
    query['Pids'] = request.pids;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAppList',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAppList(request: DeleteAppListRequest): DeleteAppListResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAppListWithOptions(request, runtime);
}

model DeleteCmsExporterRequest {
  clusterId?: string(name='ClusterId', example='cc7a37ee31aea4ed1a059eff8034b****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteCmsExporterResponseBody = {
  data?: string(name='Data', example='success'),
  requestId?: string(name='RequestId', example='27E653FA-5958-45BE-8AA9-14D884DC****'),
}

model DeleteCmsExporterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCmsExporterResponseBody(name='body'),
}

/**
  * @deprecated : DeleteCmsExporter is deprecated, please use ARMS::2019-08-08::DeleteAddonRelease instead.
  *
  * @param request DeleteCmsExporterRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteCmsExporterResponse
 */
// Deprecated
async function deleteCmsExporterWithOptions(request: DeleteCmsExporterRequest, runtime: Util.RuntimeOptions): DeleteCmsExporterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCmsExporter',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated : DeleteCmsExporter is deprecated, please use ARMS::2019-08-08::DeleteAddonRelease instead.
  *
  * @param request DeleteCmsExporterRequest
  * @return DeleteCmsExporterResponse
 */
// Deprecated
async function deleteCmsExporter(request: DeleteCmsExporterRequest): DeleteCmsExporterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCmsExporterWithOptions(request, runtime);
}

model DeleteContactRequest {
  contactId?: long(name='ContactId', description='The operation that you want to perform. Set the value to **DeleteContact**.', example='123'),
}

model DeleteContactResponseBody = {
  isSuccess?: boolean(name='IsSuccess', example='true'),
  requestId?: string(name='RequestId', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model DeleteContactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteContactResponseBody(name='body'),
}

async function deleteContactWithOptions(request: DeleteContactRequest, runtime: Util.RuntimeOptions): DeleteContactResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactId)) {
    query['ContactId'] = request.contactId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteContact',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteContact(request: DeleteContactRequest): DeleteContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteContactWithOptions(request, runtime);
}

model DeleteContactGroupRequest {
  contactGroupId?: long(name='ContactGroupId', description='The ID of the alert contact group.', example='123'),
}

model DeleteContactGroupResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the alert contact group was deleted. Valid values:

*   `true`
*   `false`', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model DeleteContactGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteContactGroupResponseBody(name='body'),
}

async function deleteContactGroupWithOptions(request: DeleteContactGroupRequest, runtime: Util.RuntimeOptions): DeleteContactGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactGroupId)) {
    query['ContactGroupId'] = request.contactGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteContactGroup',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteContactGroup(request: DeleteContactGroupRequest): DeleteContactGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteContactGroupWithOptions(request, runtime);
}

model DeleteDispatchRuleRequest {
  id?: string(name='Id', example='12345'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteDispatchRuleResponseBody = {
  requestId?: string(name='RequestId', example='16AF921B-8187-489F-9913-43C808B4****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDispatchRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDispatchRuleResponseBody(name='body'),
}

async function deleteDispatchRuleWithOptions(request: DeleteDispatchRuleRequest, runtime: Util.RuntimeOptions): DeleteDispatchRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDispatchRule',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDispatchRule(request: DeleteDispatchRuleRequest): DeleteDispatchRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDispatchRuleWithOptions(request, runtime);
}

model DeleteEnvCustomJobRequest {
  customJobName?: string(name='CustomJobName', description='Custom job name.', example='job1'),
  environmentId?: string(name='EnvironmentId', description='Environment ID.', example='env-xxx'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model DeleteEnvCustomJobResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The returned result.', example='success'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='2FC13182-B9AF-4E6B-BE51-72669B7C****'),
}

model DeleteEnvCustomJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEnvCustomJobResponseBody(name='body'),
}

async function deleteEnvCustomJobWithOptions(request: DeleteEnvCustomJobRequest, runtime: Util.RuntimeOptions): DeleteEnvCustomJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.customJobName)) {
    query['CustomJobName'] = request.customJobName;
  }
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEnvCustomJob',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEnvCustomJob(request: DeleteEnvCustomJobRequest): DeleteEnvCustomJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEnvCustomJobWithOptions(request, runtime);
}

model DeleteEnvPodMonitorRequest {
  environmentId?: string(name='EnvironmentId', description='Environment instance ID.', example='env-xxxxxx'),
  namespace?: string(name='Namespace', description='The namespace where podMonitor is located', example='arms-prom'),
  podMonitorName?: string(name='PodMonitorName', description='PodMonitor name.', example='arms-admin-pm1'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model DeleteEnvPodMonitorResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The data returned.', example='success'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='626037F5-FDEB-45B0-804C-B3C92797****'),
}

model DeleteEnvPodMonitorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEnvPodMonitorResponseBody(name='body'),
}

async function deleteEnvPodMonitorWithOptions(request: DeleteEnvPodMonitorRequest, runtime: Util.RuntimeOptions): DeleteEnvPodMonitorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.podMonitorName)) {
    query['PodMonitorName'] = request.podMonitorName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEnvPodMonitor',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEnvPodMonitor(request: DeleteEnvPodMonitorRequest): DeleteEnvPodMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEnvPodMonitorWithOptions(request, runtime);
}

model DeleteEnvServiceMonitorRequest {
  environmentId?: string(name='EnvironmentId', description='Environment instance ID.', example='env-xxxxxx'),
  namespace?: string(name='Namespace', description='The name of the namespace.', example='arms-prom'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  serviceMonitorName?: string(name='ServiceMonitorName', description='ServiceMonitor name.', example='arms-admin1'),
}

model DeleteEnvServiceMonitorResponseBody = {
  code?: int32(name='Code', description='The status code or error code.', example='200'),
  data?: string(name='Data', description='The returned data.', example='success'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='78901766-3806-4E96-8E47-CFEF59E4****'),
}

model DeleteEnvServiceMonitorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEnvServiceMonitorResponseBody(name='body'),
}

async function deleteEnvServiceMonitorWithOptions(request: DeleteEnvServiceMonitorRequest, runtime: Util.RuntimeOptions): DeleteEnvServiceMonitorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceMonitorName)) {
    query['ServiceMonitorName'] = request.serviceMonitorName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEnvServiceMonitor',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEnvServiceMonitor(request: DeleteEnvServiceMonitorRequest): DeleteEnvServiceMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEnvServiceMonitorWithOptions(request, runtime);
}

model DeleteEnvironmentRequest {
  deletePromInstance?: boolean(name='DeletePromInstance', description='cascade delete Prometheus instance.', example='true'),
  environmentId?: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxxx'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model DeleteEnvironmentResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The result of the operation.', example='success'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model DeleteEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEnvironmentResponseBody(name='body'),
}

async function deleteEnvironmentWithOptions(request: DeleteEnvironmentRequest, runtime: Util.RuntimeOptions): DeleteEnvironmentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deletePromInstance)) {
    query['DeletePromInstance'] = request.deletePromInstance;
  }
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEnvironment',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEnvironment(request: DeleteEnvironmentRequest): DeleteEnvironmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEnvironmentWithOptions(request, runtime);
}

model DeleteEnvironmentFeatureRequest {
  environmentId?: string(name='EnvironmentId', example='env-xxx'),
  featureName?: string(name='FeatureName', example='metric-agent'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteEnvironmentFeatureResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='2A0CEDF1-06FE-44AC-8E21-21A5BE65****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteEnvironmentFeatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEnvironmentFeatureResponseBody(name='body'),
}

async function deleteEnvironmentFeatureWithOptions(request: DeleteEnvironmentFeatureRequest, runtime: Util.RuntimeOptions): DeleteEnvironmentFeatureResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.featureName)) {
    query['FeatureName'] = request.featureName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEnvironmentFeature',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEnvironmentFeature(request: DeleteEnvironmentFeatureRequest): DeleteEnvironmentFeatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEnvironmentFeatureWithOptions(request, runtime);
}

model DeleteEventBridgeIntegrationRequest {
  id?: long(name='Id', description='The ID of the EventBridge integration. You can call the **ListEventBridgeIntegrations** operation to query the ID.', example='123'),
}

model DeleteEventBridgeIntegrationResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the EventBridge integration is deleted.

*   `true`
*   `false`', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='2B289756-E791-5842-BCBD-AD414C******'),
}

model DeleteEventBridgeIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEventBridgeIntegrationResponseBody(name='body'),
}

async function deleteEventBridgeIntegrationWithOptions(request: DeleteEventBridgeIntegrationRequest, runtime: Util.RuntimeOptions): DeleteEventBridgeIntegrationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEventBridgeIntegration',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEventBridgeIntegration(request: DeleteEventBridgeIntegrationRequest): DeleteEventBridgeIntegrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEventBridgeIntegrationWithOptions(request, runtime);
}

model DeleteGrafanaResourceRequest {
  clusterId?: string(name='ClusterId', description='The instance ID.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  clusterName?: string(name='ClusterName', description='The instance name.', example='clusterNameOfTest'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model DeleteGrafanaResourceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', description='The returned message.', example='delete success.'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='771DC66C-C5E0-59BC-A983-DD18FEE9EFFA'),
}

model DeleteGrafanaResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGrafanaResourceResponseBody(name='body'),
}

async function deleteGrafanaResourceWithOptions(request: DeleteGrafanaResourceRequest, runtime: Util.RuntimeOptions): DeleteGrafanaResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.clusterId)) {
    body['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterName)) {
    body['ClusterName'] = request.clusterName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGrafanaResource',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteGrafanaResource(request: DeleteGrafanaResourceRequest): DeleteGrafanaResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGrafanaResourceWithOptions(request, runtime);
}

model DeleteGrafanaWorkspaceRequest {
  grafanaWorkspaceId?: string(name='GrafanaWorkspaceId', example='grafana-rnglkcdrntlhk0****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteGrafanaWorkspaceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='27E653FA-5958-45BE-8AA9-14D884DC****'),
  success?: boolean(name='Success', example='true'),
  traceId?: string(name='TraceId', example='eac0a8048716731735000007137d000b'),
}

model DeleteGrafanaWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGrafanaWorkspaceResponseBody(name='body'),
}

async function deleteGrafanaWorkspaceWithOptions(request: DeleteGrafanaWorkspaceRequest, runtime: Util.RuntimeOptions): DeleteGrafanaWorkspaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.grafanaWorkspaceId)) {
    query['GrafanaWorkspaceId'] = request.grafanaWorkspaceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGrafanaWorkspace',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteGrafanaWorkspace(request: DeleteGrafanaWorkspaceRequest): DeleteGrafanaWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGrafanaWorkspaceWithOptions(request, runtime);
}

model DeleteIMRobotRequest {
  robotId?: long(name='RobotId', description='The ID of the IM chatbot.', example='123'),
}

model DeleteIMRobotResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the call was successful.

*   `true`: The call was successful.
*   `false`: The call failed.', example='true'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to find logs and troubleshoot issues.', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model DeleteIMRobotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIMRobotResponseBody(name='body'),
}

async function deleteIMRobotWithOptions(request: DeleteIMRobotRequest, runtime: Util.RuntimeOptions): DeleteIMRobotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.robotId)) {
    query['RobotId'] = request.robotId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIMRobot',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteIMRobot(request: DeleteIMRobotRequest): DeleteIMRobotResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIMRobotWithOptions(request, runtime);
}

model DeleteIntegrationRequest {
  clusterId?: string(name='ClusterId', description='The ID of the ACK cluster.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  integration?: string(name='Integration', description='The abbreviation of the software that is supported by Application Real-Time Monitoring Service (ARMS). Valid values (case-insensitive): `ASM`, `IoT`, and `Flink`.', example='asm'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model DeleteIntegrationResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: string(name='Data', description='Indicates whether the call was successful.', example='success'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
}

model DeleteIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIntegrationResponseBody(name='body'),
}

/**
  * @deprecated : DeleteIntegration is deprecated, please use ARMS::2019-08-08::DeleteAddonRelease instead.
  *
  * @param request DeleteIntegrationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteIntegrationResponse
 */
// Deprecated
async function deleteIntegrationWithOptions(request: DeleteIntegrationRequest, runtime: Util.RuntimeOptions): DeleteIntegrationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.integration)) {
    query['Integration'] = request.integration;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIntegration',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated : DeleteIntegration is deprecated, please use ARMS::2019-08-08::DeleteAddonRelease instead.
  *
  * @param request DeleteIntegrationRequest
  * @return DeleteIntegrationResponse
 */
// Deprecated
async function deleteIntegration(request: DeleteIntegrationRequest): DeleteIntegrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIntegrationWithOptions(request, runtime);
}

model DeleteIntegrationsRequest {
  integrationId?: long(name='IntegrationId', example='1234'),
}

model DeleteIntegrationsResponseBody = {
  isSuccess?: boolean(name='IsSuccess', example='true'),
  requestId?: string(name='RequestId', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model DeleteIntegrationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIntegrationsResponseBody(name='body'),
}

async function deleteIntegrationsWithOptions(request: DeleteIntegrationsRequest, runtime: Util.RuntimeOptions): DeleteIntegrationsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIntegrations',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteIntegrations(request: DeleteIntegrationsRequest): DeleteIntegrationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIntegrationsWithOptions(request, runtime);
}

model DeleteNotificationPolicyRequest {
  id?: long(name='Id', description='Deletes a notification policy based on its ID.', example='1234'),
}

model DeleteNotificationPolicyResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='The ID of the request.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the notification policy.', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
}

model DeleteNotificationPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNotificationPolicyResponseBody(name='body'),
}

async function deleteNotificationPolicyWithOptions(request: DeleteNotificationPolicyRequest, runtime: Util.RuntimeOptions): DeleteNotificationPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNotificationPolicy',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteNotificationPolicy(request: DeleteNotificationPolicyRequest): DeleteNotificationPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNotificationPolicyWithOptions(request, runtime);
}

model DeletePrometheusAlertRuleRequest {
  alertId?: long(name='AlertId', description='Indicates whether the alert rule was deleted. Valid values:

*   `true`: The alert rule was deleted.
*   `false`: The alert rule failed to be deleted.', example='3888704'),
  clusterId?: string(name='ClusterId'),
}

model DeletePrometheusAlertRuleResponseBody = {
  code?: long(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='9FEA6D00-317F-45E3-9004-7FB8B0B7****'),
  success?: boolean(name='Success', description='The ID of the request.', example='true'),
}

model DeletePrometheusAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePrometheusAlertRuleResponseBody(name='body'),
}

async function deletePrometheusAlertRuleWithOptions(request: DeletePrometheusAlertRuleRequest, runtime: Util.RuntimeOptions): DeletePrometheusAlertRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alertId)) {
    query['AlertId'] = request.alertId;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePrometheusAlertRule',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePrometheusAlertRule(request: DeletePrometheusAlertRuleRequest): DeletePrometheusAlertRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePrometheusAlertRuleWithOptions(request, runtime);
}

model DeletePrometheusGlobalViewRequest {
  globalViewClusterId?: string(name='GlobalViewClusterId', description='The ID of the global aggregation instance.', example='global-v2-cn-1670100631025794-amaykca4'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model DeletePrometheusGlobalViewResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data', description='The response parameters in the JSON format.', example='{"Success":true,"Msg":"OK"}'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='337B8F7E-0A64-5768-9225-E9B3CF******'),
}

model DeletePrometheusGlobalViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePrometheusGlobalViewResponseBody(name='body'),
}

async function deletePrometheusGlobalViewWithOptions(request: DeletePrometheusGlobalViewRequest, runtime: Util.RuntimeOptions): DeletePrometheusGlobalViewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.globalViewClusterId)) {
    query['GlobalViewClusterId'] = request.globalViewClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePrometheusGlobalView',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePrometheusGlobalView(request: DeletePrometheusGlobalViewRequest): DeletePrometheusGlobalViewResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePrometheusGlobalViewWithOptions(request, runtime);
}

model DeletePrometheusIntegrationRequest {
  clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance. Only a Prometheus instance for Container Service or a Prometheus instance for ECS is supported.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  instanceId?: long(name='InstanceId', description='The ID of the exporter.', example='2875'),
  integrationType?: string(name='IntegrationType', description='The type of the integration.', example='kafka and mysql.'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model DeletePrometheusIntegrationResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  data?: string(name='Data', description='success or an error message.', example='success'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='19F54318-CC92-5567-BF66-CB029EC44C84'),
}

model DeletePrometheusIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePrometheusIntegrationResponseBody(name='body'),
}

async function deletePrometheusIntegrationWithOptions(request: DeletePrometheusIntegrationRequest, runtime: Util.RuntimeOptions): DeletePrometheusIntegrationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.integrationType)) {
    query['IntegrationType'] = request.integrationType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePrometheusIntegration',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePrometheusIntegration(request: DeletePrometheusIntegrationRequest): DeletePrometheusIntegrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePrometheusIntegrationWithOptions(request, runtime);
}

model DeletePrometheusMonitoringRequest {
  clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  monitoringName?: string(name='MonitoringName', description='The name of the monitoring configuration.', example='customJob1'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  type?: string(name='Type', description='The type of the monitoring configuration. 
Valid values for a Prometheus instance for Container Service: serviceMonitor, podMonitor, customJob, and probe. 
Valid values for a Prometheus instance for ECS: customJob and probe.', example='probe'),
}

model DeletePrometheusMonitoringResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The result of the operation.', example='success'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='4D6C358A-A58B-4F4B-94CE-F5AAF023****'),
}

model DeletePrometheusMonitoringResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePrometheusMonitoringResponseBody(name='body'),
}

async function deletePrometheusMonitoringWithOptions(request: DeletePrometheusMonitoringRequest, runtime: Util.RuntimeOptions): DeletePrometheusMonitoringResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.monitoringName)) {
    query['MonitoringName'] = request.monitoringName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePrometheusMonitoring',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePrometheusMonitoring(request: DeletePrometheusMonitoringRequest): DeletePrometheusMonitoringResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePrometheusMonitoringWithOptions(request, runtime);
}

model DeletePrometheusRemoteWriteRequest {
  clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance. Only a Prometheus instance for Container Service or a Prometheus instance for ECS is supported.', example='cc7a37ee31aea4ed1a059eff8034b\\*\\*\\*\\* or vpc-xxxx'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  remoteWriteNames?: string(name='RemoteWriteNames', description='The names of the remote write configuration items that you want to delete. Separate configuration items with commas (,).', example='name1,name2'),
}

model DeletePrometheusRemoteWriteResponseBody = {
  code?: int32(name='Code', description='The status code or error code.', example='200'),
  data?: string(name='Data', description='The remote write configuration items. If the request fails, an error message is returned.', example='1'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='9319A57D-2D9E-472A-B69B-CF3CD16D****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model DeletePrometheusRemoteWriteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePrometheusRemoteWriteResponseBody(name='body'),
}

async function deletePrometheusRemoteWriteWithOptions(request: DeletePrometheusRemoteWriteRequest, runtime: Util.RuntimeOptions): DeletePrometheusRemoteWriteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.remoteWriteNames)) {
    query['RemoteWriteNames'] = request.remoteWriteNames;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePrometheusRemoteWrite',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePrometheusRemoteWrite(request: DeletePrometheusRemoteWriteRequest): DeletePrometheusRemoteWriteResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePrometheusRemoteWriteWithOptions(request, runtime);
}

model DeleteRetcodeAppRequest {
  appId?: string(name='AppId', description='The application ID.', example='1231'),
  appName?: string(name='AppName', description='The name of the application.', example='test-app'),
  pid?: string(name='Pid', description='The process identifier (PID) of the application.', example='aokcdqn3ly@741623b4e91****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model DeleteRetcodeAppResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  data?: string(name='Data', description='Indicates whether the Browser Monitoring task was deleted. Valid values:

*   `true`
*   `false`', example='true'),
  message?: string(name='Message', description='The message returned for the operation. Valid values:

*   **Success** is returned if the operation is successful.
*   An error message is returned if the operation fails.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='01FF8DD9-A09C-47A1-895A-B6E321BE77B6'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

true: The request was successful.

false: The request failed.', example='true'),
}

model DeleteRetcodeAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRetcodeAppResponseBody(name='body'),
}

async function deleteRetcodeAppWithOptions(request: DeleteRetcodeAppRequest, runtime: Util.RuntimeOptions): DeleteRetcodeAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.pid)) {
    query['Pid'] = request.pid;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRetcodeApp',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRetcodeApp(request: DeleteRetcodeAppRequest): DeleteRetcodeAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRetcodeAppWithOptions(request, runtime);
}

model DeleteScenarioRequest {
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-zhangjaikou'),
  scenarioId?: long(name='ScenarioId', description='The ID of the business monitoring job. You can obtain the ID by calling the ListScenario operation.', example='132'),
}

model DeleteScenarioResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EA24D522-AD35-47B8-8CB2-ADBC382B****'),
  result?: boolean(name='Result', description='Indicates whether the request is successful.

*   `true`: successful
*   `false`: failed', example='true'),
}

model DeleteScenarioResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteScenarioResponseBody(name='body'),
}

async function deleteScenarioWithOptions(request: DeleteScenarioRequest, runtime: Util.RuntimeOptions): DeleteScenarioResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.scenarioId)) {
    query['ScenarioId'] = request.scenarioId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteScenario',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteScenario(request: DeleteScenarioRequest): DeleteScenarioResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteScenarioWithOptions(request, runtime);
}

model DeleteSilencePolicyRequest {
  id?: long(name='Id', description='The ID of the request.', example='1234'),
}

model DeleteSilencePolicyResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the silence policy was deleted successfully. Valid values:

*   `true`: The silence policy was deleted successfully.
*   `false`: The silence policy failed to be deleted.', example='true'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **DeleteSilencePolicy**.', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
}

model DeleteSilencePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSilencePolicyResponseBody(name='body'),
}

async function deleteSilencePolicyWithOptions(request: DeleteSilencePolicyRequest, runtime: Util.RuntimeOptions): DeleteSilencePolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSilencePolicy',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSilencePolicy(request: DeleteSilencePolicyRequest): DeleteSilencePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSilencePolicyWithOptions(request, runtime);
}

model DeleteSourceMapRequest {
  fidList?: [ string ](name='FidList'),
  pid?: string(name='Pid', example='atc889zkcf@d8deedfa9bf****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteSourceMapShrinkRequest {
  fidListShrink?: string(name='FidList'),
  pid?: string(name='Pid', example='atc889zkcf@d8deedfa9bf****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DeleteSourceMapResponseBody = {
  data?: string(name='Data', example='success'),
  requestId?: string(name='RequestId', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
}

model DeleteSourceMapResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSourceMapResponseBody(name='body'),
}

async function deleteSourceMapWithOptions(tmpReq: DeleteSourceMapRequest, runtime: Util.RuntimeOptions): DeleteSourceMapResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteSourceMapShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.fidList)) {
    request.fidListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.fidList, 'FidList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.fidListShrink)) {
    query['FidList'] = request.fidListShrink;
  }
  if (!Util.isUnset(request.pid)) {
    query['Pid'] = request.pid;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSourceMap',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSourceMap(request: DeleteSourceMapRequest): DeleteSourceMapResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSourceMapWithOptions(request, runtime);
}

model DeleteSyntheticTaskRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  taskIds?: [ string ](name='TaskIds'),
}

model DeleteSyntheticTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
  result?: string(name='Result', example='true'),
}

model DeleteSyntheticTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSyntheticTaskResponseBody(name='body'),
}

async function deleteSyntheticTaskWithOptions(request: DeleteSyntheticTaskRequest, runtime: Util.RuntimeOptions): DeleteSyntheticTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.taskIds)) {
    query['TaskIds'] = request.taskIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSyntheticTask',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSyntheticTask(request: DeleteSyntheticTaskRequest): DeleteSyntheticTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSyntheticTaskWithOptions(request, runtime);
}

model DeleteTimingSyntheticTaskRequest {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-aek2eq4peca****'),
  taskId?: string(name='TaskId', description='The ID of the synthetic monitoring task.', example='5308a2691f59422c8c3b7aeccec9cd3b'),
}

model DeleteTimingSyntheticTaskResponseBody = {
  code?: long(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the synthetic monitoring task was deleted. true: The synthetic monitoring task was deleted. false: The synthetic monitoring task failed to be deleted.', example='true'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
}

model DeleteTimingSyntheticTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTimingSyntheticTaskResponseBody(name='body'),
}

async function deleteTimingSyntheticTaskWithOptions(request: DeleteTimingSyntheticTaskRequest, runtime: Util.RuntimeOptions): DeleteTimingSyntheticTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTimingSyntheticTask',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTimingSyntheticTask(request: DeleteTimingSyntheticTaskRequest): DeleteTimingSyntheticTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTimingSyntheticTaskWithOptions(request, runtime);
}

model DeleteTraceAppRequest {
  appId?: string(name='AppId', description='The ID of the application that you want to delete. You can call the SearchTraceAppByName operation to query the application ID. For more information, see [SearchTraceAppByName](~~130676~~).', example='5406**'),
  deleteReason?: {
    reasonIds?: [ 
      {
        id?: int32(name='Id', description='The ID of the reason for deletion.', example='0'),
        name?: string(name='Name', description='A description of the reason for removal.', example='The function is not perfect, and the root cause of the problem cannot be located.'),
      }
    ](name='ReasonIds', description='Reasons Ids.'),
    remark?: string(name='Remark', description='Additional remarks when none of the reasons for removal provided are met.', example='The business scenario cannot be satisfied.'),
  }(name='DeleteReason', description='The reason(s) to delete application.'),
  pid?: string(name='Pid', description='The PID of the application. For more information about how to query the PID, see [QueryMetricByPage](https://www.alibabacloud.com/help/zh/doc-detail/186100.htm?spm=a2cdw.13409063.0.0.7a72281f0bkTfx#title-imy-7gj-qhr).', example='9w0sc5gxxz@edcsd447c2f****'),
  regionId?: string(name='RegionId', description='The ID of the region in which the application is located.', example='cn-hangzhou'),
  type?: string(name='Type', description='The type of the application that you want to delete. You can call the SearchTraceAppByName operation to query the application type. For more information, see [SearchTraceAppByName](~~130676~~). Valid values:

*   `TRACE`: Application Monitoring
*   `RETCODE`: frontend monitoring', example='TRACE'),
}

model DeleteTraceAppShrinkRequest {
  appId?: string(name='AppId', description='The ID of the application that you want to delete. You can call the SearchTraceAppByName operation to query the application ID. For more information, see [SearchTraceAppByName](~~130676~~).', example='5406**'),
  deleteReasonShrink?: string(name='DeleteReason', description='The reason(s) to delete application.'),
  pid?: string(name='Pid', description='The PID of the application. For more information about how to query the PID, see [QueryMetricByPage](https://www.alibabacloud.com/help/zh/doc-detail/186100.htm?spm=a2cdw.13409063.0.0.7a72281f0bkTfx#title-imy-7gj-qhr).', example='9w0sc5gxxz@edcsd447c2f****'),
  regionId?: string(name='RegionId', description='The ID of the region in which the application is located.', example='cn-hangzhou'),
  type?: string(name='Type', description='The type of the application that you want to delete. You can call the SearchTraceAppByName operation to query the application type. For more information, see [SearchTraceAppByName](~~130676~~). Valid values:

*   `TRACE`: Application Monitoring
*   `RETCODE`: frontend monitoring', example='TRACE'),
}

model DeleteTraceAppResponseBody = {
  code?: long(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The response in JSON format, including the HTTP status code, error code, response message, and trace ID.', example='"{\\\\"code\\\\":200,\\\\"data\\\\":\\\\"{\\\\\\\\\\"code\\\\\\\\\\":200,\\\\\\\\\\"data\\\\\\\\\\":true,\\\\\\\\\\"errorCode\\\\\\\\\\":\\\\\\\\\\"The application is deleted\\\\\\\\\\",\\\\\\\\\\"message\\\\\\\\\\":\\\\\\\\\\"The application is deleted\\\\\\\\\\",\\\\\\\\\\"success\\\\\\\\\\":true,\\\\\\\\\\"traceId\\\\\\\\\\":\\\\\\\\\\"0bc0594d15954826692915817e\\*\\*\\*\\*\\\\\\\\\\"}\\\\",\\\\"errorCode\\\\":\\\\"The application is deleted\\\\",\\\\"message\\\\":\\\\"The application is deleted\\\\",\\\\"success\\\\":true,\\\\"traceId\\\\":\\\\"0ab2646915954826692568137d\\*\\*\\*\\*\\\\"}'),
  message?: string(name='Message', description='The returned message.', example='Internal error. Please try again. Contact the DingTalk service account if the issue                              persists after multiple retries.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='46355DD8-FC56-40C5-BFC6-269DE4F9****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

true: The request was successful.

false: The request failed.', example='true'),
}

model DeleteTraceAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTraceAppResponseBody(name='body'),
}

async function deleteTraceAppWithOptions(tmpReq: DeleteTraceAppRequest, runtime: Util.RuntimeOptions): DeleteTraceAppResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteTraceAppShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deleteReason)) {
    request.deleteReasonShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deleteReason, 'DeleteReason', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.deleteReasonShrink)) {
    query['DeleteReason'] = request.deleteReasonShrink;
  }
  if (!Util.isUnset(request.pid)) {
    query['Pid'] = request.pid;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTraceApp',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTraceApp(request: DeleteTraceAppRequest): DeleteTraceAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTraceAppWithOptions(request, runtime);
}

model DeleteWebhookContactRequest {
  webhookId?: long(name='WebhookId', description='The ID of the webhook alert contact.', example='123'),
}

model DeleteWebhookContactResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the webhook alert contact was deleted.

*   `true`
*   `false`', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model DeleteWebhookContactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWebhookContactResponseBody(name='body'),
}

async function deleteWebhookContactWithOptions(request: DeleteWebhookContactRequest, runtime: Util.RuntimeOptions): DeleteWebhookContactResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.webhookId)) {
    query['WebhookId'] = request.webhookId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWebhookContact',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteWebhookContact(request: DeleteWebhookContactRequest): DeleteWebhookContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWebhookContactWithOptions(request, runtime);
}

model DescribeAddonReleaseRequest {
  environmentId?: string(name='EnvironmentId', description='Environment ID.', example='env-xxx'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  releaseName?: string(name='ReleaseName', description='Name of Release.', example='agent-822567d4-2449'),
}

model DescribeAddonReleaseResponseBody = {
  code?: string(name='Code', description='Status code: 200 indicates success.', example='200'),
  data?: {
    config?: string(name='Config', description='Config of the Release.', example='{"host":"mysql-service.default","port":3306,"username":"root","password":"roots"}'),
    release?: {
      addonName?: string(name='AddonName', description='Name of Addon.', example='mysql'),
      alertRuleCount?: long(name='AlertRuleCount', description='Number of alarm groups.', example='1'),
      conditions?: [ 
        {
          firstTransitionTime?: string(name='FirstTransitionTime', description='First transition time.', example='2018-01-31T14:32:19Z'),
          lastTransitionTime?: string(name='LastTransitionTime', description='Last transition time.', example='2018-01-31T14:32:19Z'),
          message?: string(name='Message', description='COndition details.', example='xxxx'),
          reason?: string(name='Reason', description='Reason of failure.', example='xxxx'),
          status?: string(name='Status', description='Condition status.', example='True'),
          type?: string(name='Type', description='Condition type.', example='Loaded'),
        }
      ](name='Conditions', description='Condition list.'),
      createTime?: string(name='CreateTime', description='Create time.', example='2023-09-22T16:56:29+08:00'),
      dashboardCount?: long(name='DashboardCount', description='Number of dashboard.', example='1'),
      environmentId?: string(name='EnvironmentId', description='Environment ID.', example='env-xxxx'),
      exporterCount?: long(name='ExporterCount', description='Number of Exporter.', example='2'),
      haveConfig?: boolean(name='HaveConfig', description='Whether there is configuration.', example='true'),
      installUserId?: string(name='InstallUserId', description='User ID of the installation.', example='23810923891'),
      language?: string(name='Language', description='Language.', example='zh'),
      managed?: boolean(name='Managed'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-heyuan'),
      releaseId?: string(name='ReleaseId', description='Release ID.', example='be29c093-3fd6-4fb6-9430-797030cc183a'),
      releaseName?: string(name='ReleaseName', description='Name of Release.', example='mysql-1695372983039'),
      scene?: string(name='Scene', description='Scene.', example='database'),
      status?: string(name='Status', description='Status of Release.', example='0'),
      updateTime?: string(name='UpdateTime', description='Update time.', example='2023-09-22T16:56:29+08:00'),
      userID?: string(name='UserID', description='User ID.', example='13818734031'),
      version?: string(name='Version', description='Version of Addon.', example='0.0.1'),
    }(name='Release', description='Release Detail.'),
  }(name='Data', description='The struct returned.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='78901766-3806-4E96-8E47-CFEF59E4****'),
  success?: string(name='Success', description='Indicates whether the alert rule was deleted. Valid values:

*   `true`: The alert rule was deleted.
*   `false`: The alert rule failed to be deleted.', example='true'),
}

model DescribeAddonReleaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAddonReleaseResponseBody(name='body'),
}

async function describeAddonReleaseWithOptions(request: DescribeAddonReleaseRequest, runtime: Util.RuntimeOptions): DescribeAddonReleaseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.releaseName)) {
    query['ReleaseName'] = request.releaseName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAddonRelease',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAddonRelease(request: DescribeAddonReleaseRequest): DescribeAddonReleaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAddonReleaseWithOptions(request, runtime);
}

model DescribeContactGroupsRequest {
  contactGroupName?: string(name='ContactGroupName', description='The name of the alert contact group.', example='TestGroup'),
  groupIds?: string(name='GroupIds', description='The ID of the alert contact group.', example='12345'),
  isDetail?: boolean(name='IsDetail', description='Specifies whether to return all the alert contacts in the queried alert contact group. Valid values:

*   `false`
*   `true`', example='true'),
  page?: long(name='Page', description='The number of the page to return.', example='1'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  size?: long(name='Size', description='The number of alert contact groups displayed on each page.', example='20'),
}

model DescribeContactGroupsResponseBody = {
  pageBean?: {
    alertContactGroups?: [ 
      {
        armsContactGroupId?: long(name='ArmsContactGroupId', description='The ID of the alert contact group.', example='83261'),
        contactGroupId?: float(name='ContactGroupId', description='The ID of the alert contact group.', example='123'),
        contactGroupName?: string(name='ContactGroupName', description='The name of the alert contact group.', example='TestGroup'),
        contacts?: [ 
          {
            armsContactId?: long(name='ArmsContactId', description='The ID of the alert contact.', example='100117'),
            contactId?: float(name='ContactId', description='The ID of the alert contact.', example='456'),
            contactName?: string(name='ContactName', description='The name of the alert contact.', example='John Doe'),
            email?: string(name='Email', description='The email address of the alert contact.', example='someone@example.com'),
            phone?: string(name='Phone', description='The mobile number of the alert contact.', example='1381111****'),
          }
        ](name='Contacts', description='The contact information. If the **IsDetail** parameter is set to `false`, no **contact** information is displayed.'),
      }
    ](name='AlertContactGroups', description='The name of the alert contact group.'),
    page?: long(name='Page', description='The page number of the returned page.', example='1'),
    size?: long(name='Size', description='The number of alert contact groups displayed on each page.', example='20'),
    total?: long(name='Total', description='The total number of alert contact groups.', example='1'),
  }(name='PageBean', description='The objects that were returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4D6C358A-A58B-4F4B-94CE-F5AAF023****'),
}

model DescribeContactGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeContactGroupsResponseBody(name='body'),
}

async function describeContactGroupsWithOptions(request: DescribeContactGroupsRequest, runtime: Util.RuntimeOptions): DescribeContactGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactGroupName)) {
    query['ContactGroupName'] = request.contactGroupName;
  }
  if (!Util.isUnset(request.groupIds)) {
    query['GroupIds'] = request.groupIds;
  }
  if (!Util.isUnset(request.isDetail)) {
    query['IsDetail'] = request.isDetail;
  }
  if (!Util.isUnset(request.page)) {
    query['Page'] = request.page;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.size)) {
    query['Size'] = request.size;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeContactGroups',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeContactGroups(request: DescribeContactGroupsRequest): DescribeContactGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeContactGroupsWithOptions(request, runtime);
}

model DescribeContactsRequest {
  contactIds?: string(name='ContactIds', description='The ID of the alert contact that you want to query. Separate multiple contact IDs with spaces.', example='123,321'),
  contactName?: string(name='ContactName', description='The name of the alert contact.', example='John Doe'),
  email?: string(name='Email', description='The email address of the alert contact.', example='someone@example.com'),
  page?: long(name='Page', description='The number of the page to return.', example='1'),
  phone?: string(name='Phone', description='The mobile number of the alert contact.', example='1381111*****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  size?: long(name='Size', description='The number of alert contacts to return on each page.', example='20'),
  verbose?: string(name='Verbose', description='Specifies whether to return redundant information.', example='true'),
}

model DescribeContactsResponseBody = {
  pageBean?: {
    alertContacts?: [ 
      {
        armsContactId?: long(name='ArmsContactId', description='The ID of the alert contact.', example='100147'),
        contactId?: float(name='ContactId', description='The ID of the alert contact.', example='123'),
        contactName?: string(name='ContactName', description='The name of the alert contact.', example='John Doe'),
        email?: string(name='Email', description='The email address of the alert contact.', example='someone@example.com'),
        isEmailVerify?: boolean(name='IsEmailVerify', description='Indicates whether the email address was verified.', example='true'),
        isVerify?: boolean(name='IsVerify', description='Indicates whether the mobile number was verified. Valid values:

*   `false`: no
*   `true`: yes', example='false'),
        phone?: string(name='Phone', description='The mobile number of the alert contact.', example='1381111****'),
        reissueSendNotice?: long(name='ReissueSendNotice', description='The operation that you want to perform if phone calls fail to be answered. Valid values:

*   0: No operation is performed.
*   1: A phone call is made again.
*   2: A text message is sent.
*   3 (default value): The global default value is used.', example='3'),
      }
    ](name='AlertContacts', description='The alert contacts.'),
    page?: long(name='Page', description='The page number of the returned page.', example='1'),
    size?: long(name='Size', description='The number of alert contacts returned per page.', example='20'),
    total?: long(name='Total', description='The total number of alert contacts.', example='1'),
  }(name='PageBean', description='The objects that were returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='21E85B16-75A6-429A-9F65-8AAC9A54****'),
}

model DescribeContactsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeContactsResponseBody(name='body'),
}

async function describeContactsWithOptions(request: DescribeContactsRequest, runtime: Util.RuntimeOptions): DescribeContactsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactIds)) {
    query['ContactIds'] = request.contactIds;
  }
  if (!Util.isUnset(request.contactName)) {
    query['ContactName'] = request.contactName;
  }
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  if (!Util.isUnset(request.page)) {
    query['Page'] = request.page;
  }
  if (!Util.isUnset(request.phone)) {
    query['Phone'] = request.phone;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.size)) {
    query['Size'] = request.size;
  }
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeContacts',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeContacts(request: DescribeContactsRequest): DescribeContactsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeContactsWithOptions(request, runtime);
}

model DescribeDispatchRuleRequest {
  id?: string(name='Id', description='The ID of the dispatch policy.', example='12345'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model DescribeDispatchRuleResponseBody = {
  dispatchRule?: {
    dispatchType?: string(name='DispatchType', description='Alarm handling method.

CREATE_ALERT: Generate an alert.

DISCARD_ALERT: Discard the alarm event, that is, no alarm.', example='CREATE_ALERT'),
    groupRules?: [ 
      {
        groupId?: long(name='GroupId', description='The ID of the group.', example='1'),
        groupInterval?: long(name='GroupInterval', description='The grouping interval.', example='15'),
        groupWaitTime?: long(name='GroupWaitTime', description='The waiting time for grouping.', example='10'),
        groupingFields?: [ string ](name='GroupingFields', description='The grouping fields.'),
        repeatInterval?: long(name='RepeatInterval', description='The time interval at which a notification is resent for a long-lasting unresolved alert. Unit: seconds.', example='20'),
      }
    ](name='GroupRules', description='The information about groups.'),
    isRecover?: boolean(name='IsRecover', description='Whether to send recovered alerts.
true: send.
false: do not send.', example='true'),
    labelMatchExpressionGrid?: {
      labelMatchExpressionGroups?: [ 
        {
          labelMatchExpressions?: [ 
            {
              key?: string(name='Key', description='The key of the tag of the dispatch rule. Valid values:

*   `_aliyun_arms_userid`: user ID
*   `_aliyun_arms_involvedObject_kind`: type of the associated object
*   `_aliyun_arms_involvedObject_id`: ID of the associated object
*   `_aliyun_arms_involvedObject_name`: name of the associated object
*   `_aliyun_arms_alert_name`: alert name
*   `_aliyun_arms_alert_rule_id`: alert rule ID
*   `_aliyun_arms_alert_type`: alert type
*   `_aliyun_arms_alert_level`: alert severity', example='_aliyun_arms_involvedObject_kind'),
              operator?: string(name='Operator', description='The operator used in the dispatch rule. Valid values:

*   `eq`: equals to.
*   `re`: matches a regular expression.', example='eq'),
              value?: string(name='Value', description='The value of the tag.', example='app'),
            }
          ](name='LabelMatchExpressions', description='The collection of conditions of the dispatch rule.'),
        }
      ](name='LabelMatchExpressionGroups', description='The collection of dispatch rules.'),
    }(name='LabelMatchExpressionGrid', description='The information about the dispatch rule.'),
    name?: string(name='Name', description='The name of the dispatch policy.', example='Prometheus Alert'),
    notifyRules?: [ 
      {
        notifyChannels?: [ string ](name='NotifyChannels', description='The notification method Array.'),
        notifyObjects?: [ 
          {
            name?: string(name='Name', description='The name of the contact or contact group.', example='JohnDoe'),
            notifyObjectId?: string(name='NotifyObjectId', description='The ID of the contact or contact group.', example='1'),
            notifyType?: string(name='NotifyType', description='The type of the alert contact. Valid values:

- `CONTACT`: contact
- `CONTACT_GROUP`: contact group', example='CONTACT'),
          }
        ](name='NotifyObjects', description='The collection of alert contacts.'),
      }
    ](name='NotifyRules', description='The collection of notification methods.'),
    ruleId?: long(name='RuleId', description='The ID of the dispatch rule.', example='10282'),
    state?: string(name='State', description='Indicates whether the dispatch policy is enabled. Valid values: 

- `true`: enabled
- `false`: disabled', example='true'),
  }(name='DispatchRule', description='The struct returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model DescribeDispatchRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDispatchRuleResponseBody(name='body'),
}

async function describeDispatchRuleWithOptions(request: DescribeDispatchRuleRequest, runtime: Util.RuntimeOptions): DescribeDispatchRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDispatchRule',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDispatchRule(request: DescribeDispatchRuleRequest): DescribeDispatchRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDispatchRuleWithOptions(request, runtime);
}

model DescribeEnvCustomJobRequest {
  customJobName?: string(name='CustomJobName', description='The name of the custom job.', example='customJob1'),
  encryptYaml?: boolean(name='EncryptYaml', description='Specifies whether to return the encrypted YAML string.', example='true'),
  environmentId?: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxxx'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model DescribeEnvCustomJobResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    configYaml?: string(name='ConfigYaml', description='If the request parameter EncryptYaml is set to true, a Base64-encoded YAML string is returned. Otherwise, a plaintext YAML string is returned.', example='Refer to supplementary instructions.'),
    customJobName?: string(name='CustomJobName', description='The name of the custom job.', example='customJob1'),
    environmentId?: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxx'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    status?: string(name='Status', description='The status of the custom job. Valid values: run and stop.', example='run'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='6A9AEA84-7186-4D8D-B498-4585C6A2****'),
}

model DescribeEnvCustomJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEnvCustomJobResponseBody(name='body'),
}

async function describeEnvCustomJobWithOptions(request: DescribeEnvCustomJobRequest, runtime: Util.RuntimeOptions): DescribeEnvCustomJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.customJobName)) {
    query['CustomJobName'] = request.customJobName;
  }
  if (!Util.isUnset(request.encryptYaml)) {
    query['EncryptYaml'] = request.encryptYaml;
  }
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEnvCustomJob',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEnvCustomJob(request: DescribeEnvCustomJobRequest): DescribeEnvCustomJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnvCustomJobWithOptions(request, runtime);
}

model DescribeEnvPodMonitorRequest {
  environmentId?: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxx'),
  namespace?: string(name='Namespace', description='The namespace where the PodMonitor is located.', example='arms-prom'),
  podMonitorName?: string(name='PodMonitorName', description='The name of the PodMonitor.', example='arms-admin-pm1'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model DescribeEnvPodMonitorResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    configYaml?: string(name='ConfigYaml', description='The YAML configuration string of the PodMonitor.', example='Refer to supplementary instructions.'),
    environmentId?: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxx'),
    namespace?: string(name='Namespace', description='The namespace.', example='arms-prom'),
    podMonitorName?: string(name='PodMonitorName', description='The name of the PodMonitor.', example='podMonitor1'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    status?: string(name='Status', description='The status of the PodMonitor. Valid values: run and stop.', example='run'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
}

model DescribeEnvPodMonitorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEnvPodMonitorResponseBody(name='body'),
}

async function describeEnvPodMonitorWithOptions(request: DescribeEnvPodMonitorRequest, runtime: Util.RuntimeOptions): DescribeEnvPodMonitorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.podMonitorName)) {
    query['PodMonitorName'] = request.podMonitorName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEnvPodMonitor',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEnvPodMonitor(request: DescribeEnvPodMonitorRequest): DescribeEnvPodMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnvPodMonitorWithOptions(request, runtime);
}

model DescribeEnvServiceMonitorRequest {
  environmentId?: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxx'),
  namespace?: string(name='Namespace', description='The namespace where the ServiceMonitor is located.', example='arms-prom'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  serviceMonitorName?: string(name='ServiceMonitorName', description='The name of the ServiceMonitor.', example='arms-admin1'),
}

model DescribeEnvServiceMonitorResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: {
    configYaml?: string(name='ConfigYaml', description='The YAML configuration string of the ServiceMonitor.', example='Refer to supplementary instructions.'),
    environmentId?: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxx'),
    namespace?: string(name='Namespace', description='The namespace.', example='arms-prom'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    serviceMonitorName?: string(name='ServiceMonitorName', description='The name of the ServiceMonitor.', example='serviceMonitor1'),
    status?: string(name='Status', description='The status of the ServiceMonitor. Valid values: run and stop.', example='run'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='40B10E04-81E8-4643-970D-F1B38F2E****'),
}

model DescribeEnvServiceMonitorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEnvServiceMonitorResponseBody(name='body'),
}

async function describeEnvServiceMonitorWithOptions(request: DescribeEnvServiceMonitorRequest, runtime: Util.RuntimeOptions): DescribeEnvServiceMonitorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceMonitorName)) {
    query['ServiceMonitorName'] = request.serviceMonitorName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEnvServiceMonitor',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEnvServiceMonitor(request: DescribeEnvServiceMonitorRequest): DescribeEnvServiceMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnvServiceMonitorWithOptions(request, runtime);
}

model DescribeEnvironmentRequest {
  environmentId?: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxx'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model DescribeEnvironmentResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: {
    bindResourceId?: string(name='BindResourceId', description='The ID of the resource associated with the environment, such as the ACK cluster ID or VPC ID.', example='vpc-xxxxx'),
    bindResourceProfile?: string(name='BindResourceProfile', description='The profile of the resource.', example='Default'),
    bindResourceStatus?: string(name='BindResourceStatus', description='The status of the resource.', example='running'),
    bindResourceStoreDuration?: string(name='BindResourceStoreDuration', description='The retention period of the resource. Unit: days.', example='15'),
    bindResourceType?: string(name='BindResourceType', description='The resource type.', example='ECS'),
    bindVpcCidr?: string(name='BindVpcCidr', description='The VPC CIDR block.', example='192.168.0.0/16'),
    dbInstanceStatus?: string(name='DbInstanceStatus'),
    environmentId?: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxx'),
    environmentName?: string(name='EnvironmentName', description='The environment name.', example='env1'),
    environmentSubType?: string(name='EnvironmentSubType', description='Environment subtypes:
- CS: Currently supports ACK.
- ECS: ECS is currently supported.
- Cloud: Currently supports Cloud.', example='ACK'),
    environmentType?: string(name='EnvironmentType', description='The type of the environment. Valid values:

*   CS: Container Service for Kubernetes (ACK)
*   ECS: Elastic Compute Service
*   Cloud: cloud service', example='CS'),
    grafaDataSourceName?: string(name='GrafaDataSourceName', description='The name of the Grafana data source.', example='datasource1'),
    grafanaDatasourceUid?: string(name='GrafanaDatasourceUid', description='The unique ID of the Grafana data source.', example='zuvw'),
    grafanaFolderTitle?: string(name='GrafanaFolderTitle', description='The name of the Grafana directory.', example='folder1'),
    grafanaFolderUid?: string(name='GrafanaFolderUid', description='The unique ID of the Grafana directory.', example='xyz'),
    grafanaFolderUrl?: string(name='GrafanaFolderUrl', description='The URL of the Grafana directory.', example='https://g.console.aliyun.com/dashboards/f/xxx/yyyy'),
    managedType?: string(name='ManagedType', description='managed type:
- none: unmanaged. The default value for ACK clusters.
- agent: managed agent (including KSM). The default values for ASK, ACS, and AckOne clusters.
- agent-exporter: managed agent and exporters. The default value for the cloud service type.', example='none'),
    prometheusInstanceId?: string(name='PrometheusInstanceId', description='The ID of the Prometheus instance.', example='xxxxyyyyyzzzzz'),
    prometheusInstanceName?: string(name='PrometheusInstanceName', description='The name of the Prometheus instance.', example='name1'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aek2vezare****'),
    tags?: [ 
      {
        key?: string(name='Key', description='The key of the tag.', example='user1'),
        value?: string(name='Value', description='The value of the tag.', example='p_dev'),
      }
    ](name='Tags', description='The tags.'),
    userId?: string(name='UserId', description='The user ID.', example='13002222xxxx'),
    vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-8vb02uk57qbcktqcvqqqj'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model DescribeEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEnvironmentResponseBody(name='body'),
}

async function describeEnvironmentWithOptions(request: DescribeEnvironmentRequest, runtime: Util.RuntimeOptions): DescribeEnvironmentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEnvironment',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEnvironment(request: DescribeEnvironmentRequest): DescribeEnvironmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnvironmentWithOptions(request, runtime);
}

model DescribeEnvironmentFeatureRequest {
  environmentId?: string(name='EnvironmentId', description='The environment ID.', example='env-xxx'),
  featureName?: string(name='FeatureName', description='The name of the feature.

Valid values:

*   app-agent-pilot

    <!-- -->

    <!-- -->

    <!-- -->

*   metric-agent

    <!-- -->

    <!-- -->

    <!-- -->', example='metric-agent'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model DescribeEnvironmentFeatureResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    feature?: {
      alias?: string(name='Alias', description='The alias of the feature.', example='Prometheus agent.'),
      config?: map[string]string(name='Config', description='The configuration of the feature.'),
      description?: string(name='Description', description='The description of the feature.', example='Collect Metric data using the Prometheus collection specification.'),
      environmentId?: string(name='EnvironmentId', description='The environment ID.', example='env-xxxxx'),
      icon?: string(name='Icon', description='The URL of the icon.', example='http://xxx'),
      language?: string(name='Language', description='The language.', example='zh'),
      latestVersion?: string(name='LatestVersion', description='The latest version number.', example='1.1.17'),
      managed?: boolean(name='Managed'),
      name?: string(name='Name', description='The name of the feature.', example='metric-agent'),
      status?: string(name='Status', description='The status.', example='Success'),
      version?: string(name='Version', description='The version number.', example='1.1.17'),
    }(name='Feature', description='The installation information of the feature.'),
    featureStatus?: {
      featureContainers?: [ 
        {
          args?: [ string ](name='Args', description='The container parameters.'),
          image?: string(name='Image', description='The image of the container.', example='registry-cn-hangzhou-vpc.ack.aliyuncs.com/acs/arms-prometheus-agent:v4.0.0'),
          name?: string(name='Name', description='The name of the container.', example='arms-prometheus-operator'),
        }
      ](name='FeatureContainers', description='The containers of the feature.'),
      name?: string(name='Name', description='The Kubernetes resource name of the feature.', example='arms-prometheus-ack-arms-prometheus'),
      namespace?: string(name='Namespace', description='The namespace.', example='arms-prom'),
      status?: string(name='Status', description='The status of the agent. Valid values:

*   Success: The agent is running.
*   Failed: The agent failed to run.
*   Not Found: The agent is not installed.', example='Success'),
    }(name='FeatureStatus', description='The status of the feature.'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='01FF8DD9-A09C-47A1-895A-B6E321BE77B6'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model DescribeEnvironmentFeatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEnvironmentFeatureResponseBody(name='body'),
}

async function describeEnvironmentFeatureWithOptions(request: DescribeEnvironmentFeatureRequest, runtime: Util.RuntimeOptions): DescribeEnvironmentFeatureResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.featureName)) {
    query['FeatureName'] = request.featureName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEnvironmentFeature',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEnvironmentFeature(request: DescribeEnvironmentFeatureRequest): DescribeEnvironmentFeatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnvironmentFeatureWithOptions(request, runtime);
}

model DescribeIMRobotsRequest {
  page?: long(name='Page', description='The number of the page to return.', example='1'),
  robotIds?: string(name='RobotIds', description='The chatbot IDs.', example='123'),
  robotName?: string(name='RobotName', description='The name of the IM chatbot.', example='Chatbot name'),
  size?: long(name='Size', description='The number of IM chatbots to return on each page.', example='20'),
}

model DescribeIMRobotsResponseBody = {
  pageBean?: {
    alertIMRobots?: [ 
      {
        createTime?: string(name='CreateTime', description='The time when the IM chatbot was created.', example='2023-01-16 17:21:48'),
        dailyNoc?: boolean(name='DailyNoc', description='Indicates whether daily statistics are sent. Valid values:

*   `false` (default): Daily statistics are not sent.
*   `true`: Daily statistics are sent.', example='true'),
        dailyNocTime?: string(name='DailyNocTime', description='The point in time at which the daily statistics are sent. The information that ARMS sends at the specified points in time includes the total number of alerts generated on the current day, the number of cleared alerts, and the number of alerts to be cleared.', example='09:30,17:30'),
        dingSignKey?: string(name='DingSignKey', description='The signature key of DingTalk. If you specify a signature key, DingTalk authentication is performed by using the signature key. If you do not specify a signature key, a whitelist is used for authentication by default. The keyword of the whitelist is **Alert**.', example='******'),
        dispatchRules?: [ 
          {
            id?: long(name='id', description='The ID of the notification policy.', example='12345'),
            name?: string(name='name', description='The name of the notification policy.', example='Notification policy test'),
          }
        ](name='DispatchRules', description='The notification policies.'),
        robotAddr?: string(name='RobotAddr', description='The webhook URL of the IM chatbot.', example='https://oapi.dingtalk.com/robot/send?access_token=e1a049121******'),
        robotId?: float(name='RobotId', description='The ID of the IM chatbot.', example='123'),
        robotName?: string(name='RobotName', description='The name of the IM chatbot.', example='Chatbot name'),
        type?: string(name='Type', description='The type of the IM chatbot. Valid values:

*   `dingding`: DingTalk chatbot
*   `wechat`: WeCom chatbot', example='dingding'),
      }
    ](name='AlertIMRobots', description='The queried IM chatbots.'),
    page?: long(name='Page', description='The page number of the returned page.', example='1'),
    size?: long(name='Size', description='The number of IM chatbots returned per page.', example='20'),
    total?: long(name='Total', description='The total number of queried IM chatbots.', example='1'),
  }(name='PageBean', description='The returned objects.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4D6C358A-A58B-4F4B-94CE-F5AAF023****'),
}

model DescribeIMRobotsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeIMRobotsResponseBody(name='body'),
}

async function describeIMRobotsWithOptions(request: DescribeIMRobotsRequest, runtime: Util.RuntimeOptions): DescribeIMRobotsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.page)) {
    query['Page'] = request.page;
  }
  if (!Util.isUnset(request.robotIds)) {
    query['RobotIds'] = request.robotIds;
  }
  if (!Util.isUnset(request.robotName)) {
    query['RobotName'] = request.robotName;
  }
  if (!Util.isUnset(request.size)) {
    query['Size'] = request.size;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIMRobots',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeIMRobots(request: DescribeIMRobotsRequest): DescribeIMRobotsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIMRobotsWithOptions(request, runtime);
}

model DescribePrometheusAlertRuleRequest {
  alertId?: long(name='AlertId', description='The ID of the alert rule. You can call the ListPrometheusAlertRules operation to query the ID of the alert rule.', example='3888704'),
  clusterId?: string(name='ClusterId'),
}

model DescribePrometheusAlertRuleResponseBody = {
  code?: long(name='Code'),
  message?: string(name='Message'),
  prometheusAlertRule?: {
    alertId?: long(name='AlertId', description='The ID of the alert rule.', example='3888704'),
    alertName?: string(name='AlertName', description='The name of the alert rule.', example='Prometheus_Alert'),
    annotations?: [ 
      {
        name?: string(name='Name', description='The name of the annotation.', example='message'),
        value?: string(name='Value', description='The value of the annotation.', example='The CPU utilization of ${{$labels.pod_name}} has exceeded 80%. Current value: {{$value}}%'),
      }
    ](name='Annotations', description='The annotations of the alert rule.'),
    clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='c0bad479465464e1d8c1e641b0afb****'),
    dispatchRuleId?: long(name='DispatchRuleId', description='The ID of the notification policy. This parameter is returned if the **NotifyType** parameter is set to `DISPATCH_RULE`.', example='10282'),
    duration?: string(name='Duration', description='The duration of the alert. Valid values: 1 to 1440. Unit: minutes.', example='1m'),
    expression?: string(name='Expression', description='The expression of the alert rule.', example='100 * (sum(rate(container_cpu_usage_seconds_total[1m])) by (pod_name) / sum(label_replace(kube_pod_container_resource_limits_cpu_cores, \\"pod_name\\", \\"$1\\", \\"pod\\", \\"(.*)\\")) by (pod_name))>75'),
    labels?: [ 
      {
        name?: string(name='Name', description='The name of the tag.', example='severity'),
        value?: string(name='Value', description='The value of the tag.', example='critical'),
      }
    ](name='Labels', description='The tags of the alert rule.'),
    message?: string(name='Message', description='The alert message. Tags can be referenced in the {{$labels.xxx}} format.', example='The CPU utilization of ${{$labels.pod_name}} has exceeded 80%. Current value: {{$value}}%'),
    notifyType?: string(name='NotifyType', description='The method of that is used to send alert notifications. Valid values:

*   `ALERT_MANAGER`: Alert notifications are sent by Operation Center.
*   `DISPATCH_RULE`: Alert notifications are sent based on the specified notification policy.', example='ALERT_MANAGER'),
    status?: int32(name='Status', description='Indicates whether the alert rule is enabled. Valid values:

*   `1`: The alert rule is enabled.
*   `0`: The alert rule is disabled.', example='1'),
    type?: string(name='Type', description='The type of the alert rule.', example='Kubernetes component alert'),
  }(name='PrometheusAlertRule', description='The returned struct.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9FEA6D00-317F-45E3-9004-7FB8B0B7****'),
  success?: boolean(name='Success'),
}

model DescribePrometheusAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePrometheusAlertRuleResponseBody(name='body'),
}

async function describePrometheusAlertRuleWithOptions(request: DescribePrometheusAlertRuleRequest, runtime: Util.RuntimeOptions): DescribePrometheusAlertRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alertId)) {
    query['AlertId'] = request.alertId;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePrometheusAlertRule',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePrometheusAlertRule(request: DescribePrometheusAlertRuleRequest): DescribePrometheusAlertRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePrometheusAlertRuleWithOptions(request, runtime);
}

model DescribeTraceLicenseKeyRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model DescribeTraceLicenseKeyResponseBody = {
  licenseKey?: string(name='LicenseKey', example='b590lhguqs@3a75d95f218****'),
  requestId?: string(name='RequestId', example='29053944-6FE5-4240-8927-10095ECE****'),
}

model DescribeTraceLicenseKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTraceLicenseKeyResponseBody(name='body'),
}

async function describeTraceLicenseKeyWithOptions(request: DescribeTraceLicenseKeyRequest, runtime: Util.RuntimeOptions): DescribeTraceLicenseKeyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTraceLicenseKey',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTraceLicenseKey(request: DescribeTraceLicenseKeyRequest): DescribeTraceLicenseKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTraceLicenseKeyWithOptions(request, runtime);
}

model DescribeWebhookContactsRequest {
  contactIds?: string(name='ContactIds', description='The ID of the alert contact.', example='123'),
  page?: long(name='Page', description='The number of the page to return.', example='1'),
  size?: long(name='Size', description='The number of alert contacts displayed on each page.', example='20'),
  webhookName?: string(name='WebhookName', description='The name of the webhook alert contact.', example='Webhook name'),
}

model DescribeWebhookContactsResponseBody = {
  pageBean?: {
    page?: long(name='Page', description='The page number of the returned page.', example='1'),
    size?: long(name='Size', description='The number of alert contacts displayed on each page.', example='20'),
    total?: long(name='Total', description='The total number of alert contacts.', example='1'),
    webhookContacts?: [ 
      {
        webhook?: {
          bizHeaders?: map[string]any(name='BizHeaders', description='The header of the HTTP request.', example='[{"Content-Type":"application/json"}]'),
          bizParams?: map[string]any(name='BizParams', description='The parameters in the HTTP request.', example='[{"content:"mike"}]'),
          body?: string(name='Body', description='The alert notification template.', example='{ "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Alert time":"{{ .startTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }'),
          method?: string(name='Method', description='The HTTP request method.

*   Get
*   Post', example='Post'),
          recoverBody?: string(name='RecoverBody', description='The notification template for clearing alerts.', example='{ "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Recovery time":"{{ .endTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }'),
          url?: string(name='Url', description='The URL of the request method.', example='https://oapi.dingtalk.com/robot/send?access_token=91f2f6****'),
        }(name='Webhook', description='The details of the webhook alert contact.'),
        webhookId?: float(name='WebhookId', description='The ID of the webhook alert contact.', example='123'),
        webhookName?: string(name='WebhookName', description='The name of the webhook alert contact.', example='Webhook name'),
      }
    ](name='WebhookContacts', description='The list of webhook alert contacts.'),
  }(name='PageBean', description='The returned objects.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4D6C358A-A58B-4F4B-94CE-F5AAF023****'),
}

model DescribeWebhookContactsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeWebhookContactsResponseBody(name='body'),
}

async function describeWebhookContactsWithOptions(request: DescribeWebhookContactsRequest, runtime: Util.RuntimeOptions): DescribeWebhookContactsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebhookContacts',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebhookContacts(request: DescribeWebhookContactsRequest): DescribeWebhookContactsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebhookContactsWithOptions(request, runtime);
}

model EnableMetricRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='ccfa5e34a5c1f4ce6b916a40a12151d88'),
  dropMetric?: string(name='DropMetric', description='Enable metric name.', example='kube_pod_container_status_ready'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model EnableMetricResponseBody = {
  code?: long(name='Code', description='The HTTP status code returned for the request. Valid values:

*   2XX: The request is successful.
*   3XX: A redirection message is returned.
*   4XX: The request is invalid.
*   5XX: A server error occurs.', example='200'),
  data?: string(name='Data', description='The returned struct.', example='success'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='0231DA4B-3D11-5433-9376-3B5B46C7228D'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   `true`: The call was successful.
*   `false`: The call failed.', example='true'),
}

model EnableMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableMetricResponseBody(name='body'),
}

async function enableMetricWithOptions(request: EnableMetricRequest, runtime: Util.RuntimeOptions): EnableMetricResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dropMetric)) {
    query['DropMetric'] = request.dropMetric;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableMetric',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableMetric(request: EnableMetricRequest): EnableMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableMetricWithOptions(request, runtime);
}

model GetAgentDownloadUrlRequest {
  regionId?: string(name='RegionId', description='The download URL of the ARMS agent.', example='cn-hangzhou'),
}

model GetAgentDownloadUrlResponseBody = {
  armsAgentDownloadUrl?: string(name='ArmsAgentDownloadUrl', description='The ID of the request.', example='http://arms-apm-hangzhou.oss-cn-hangzhou-internal.aliyuncs.com/2.7.1.1/'),
  requestId?: string(name='RequestId', description='Obtains the download URL of the Application Real-Time Monitoring Service (ARMS) agent.', example='14043452-D486-4EA1-80C9-BA73FB81****'),
}

model GetAgentDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAgentDownloadUrlResponseBody(name='body'),
}

async function getAgentDownloadUrlWithOptions(request: GetAgentDownloadUrlRequest, runtime: Util.RuntimeOptions): GetAgentDownloadUrlResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAgentDownloadUrl',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAgentDownloadUrl(request: GetAgentDownloadUrlRequest): GetAgentDownloadUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAgentDownloadUrlWithOptions(request, runtime);
}

model GetAlertRulesRequest {
  alertIds?: string(name='AlertIds', description='The unique IDs of alert rules.

*   If you do not specify this parameter, the API operation does not filter alert rules based on their IDs.
*   If you specify this parameter, the API operation returns only the information of the specified alert rules. Other filter conditions also take effect.

> When you call the GetAlertRules operation, you can specify other request parameters to obtain the AlertIds parameter from the response. Then, you can specify the AlertIds parameter to query the specified alert rules.', example='["12345"]'),
  alertNames?: string(name='AlertNames', description='The names of alert rules. When you create alert rules of the new version, you cannot specify duplicate names. However, existing alert rules may have duplicate names. Therefore, the **AlertName** parameter does not uniquely identify an alert rule.

*   If you do not specify this parameter, the API operation does not filter alert rules based on their names.
*   If you specify this parameter, the API operation returns only the information of the specified alert rules. Other filter conditions also take effect.', example='["test"]'),
  alertStatus?: string(name='AlertStatus', description='The status of the alert rule. Valid values:

*   RUNNING
*   STOPPED
*   PAUSED

> The **PAUSED** status indicates that the alert rule is abnormal and is actively paused by the system. The alert rule may be paused because that it is not unique or the associated cluster has been deleted.', example='RUNNING'),
  alertType?: string(name='AlertType', description='The type of the alert rule.

*   APPLICATION_MONITORING_ALERT_RULE: alert rule for Application Monitoring
*   BROWSER_MONITORING_ALERT_RULE: an alert rule for Browser Monitoring.
*   PROMETHEUS_MONITORING_ALERT_RULE: alert rule for Managed Service for Prometheus.', example='APPLICATION_MONITORING_ALERT_RULE'),
  clusterId?: string(name='ClusterId', description='The ID of the monitored cluster.', example='ceba9b9ea5b924dd0b6726d2de6******'),
  page?: long(name='Page', description='The number of the page to return.', example='1'),
  productCode?: string(name='ProductCode', description='You do not need to configure this parameter.', example='null'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  size?: long(name='Size', description='The number of alert rules to return on each page.', example='20'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='type'),
      value?: string(name='Value', description='The tag value.', example='prod'),
    }
  ](name='Tags', description='The list of tags.'),
}

model GetAlertRulesResponseBody = {
  pageBean?: {
    alertRules?: [ 
      {
        alertCheckType?: string(name='AlertCheckType', description='The alert check type of the Prometheus alert rule. Valid values:

*   STATIC: static threshold value
*   CUSTOM: custom PromQL statement', example='STATIC'),
        alertGroup?: long(name='AlertGroup', description='The ID of the alert contact group to which the alert rule belongs. Valid values:

*   \\-1: custom PromQL
*   1: Kubernetes load
*   15: Kubernetes node', example='1'),
        alertId?: float(name='AlertId', description='The ID of the alert rule.', example='5730***'),
        alertName?: string(name='AlertName', description='The name of the alert rule.', example='arms-test'),
        alertRuleContent?: {
          alertRuleItems?: [ 
            {
              aggregate?: string(name='Aggregate', description='The aggregation method of the alert condition. Valid values:

*   AVG: calculates the average value
*   SUM: calculates the total value
*   MAX: selects the maximum value
*   MIN: selects the minimum value', example='AVG'),
              metricKey?: string(name='MetricKey', description='The metric of the alert condition.', example='appstat.jvm.non_heap_used'),
              n?: float(name='N', description='Indicates the last N minutes.', example='1'),
              operator?: string(name='Operator', description='The comparison operator that was used to compare the metric value with the threshold. Valid values:

*   CURRENT_GTE: greater than or equal to
*   CURRENT_LTE: less than or equal to
*   PREVIOUS_UP: the increase percentage compared with the last period
*   PREVIOUS_DOWN: the decrease percentage compared with the last period
*   HOH_UP: the increase percentage compared with the last hour
*   HOH_DOWN: the decrease percentage compared with the last hour
*   DOD_UP: the increase percentage compared with the last day
*   DOD_DOWN: the decrease percentage compared with the last day', example='CURRENT_GTE'),
              value?: string(name='Value', description='The threshold of the alert condition.', example='1'),
            }
          ](name='AlertRuleItems', description='The trigger conditions of the Application Monitoring or Browser Monitoring alert rule.'),
          condition?: string(name='Condition', description='The relationship between multiple alert conditions specified for the Application Monitoring or Browser Monitoring alert rule. Valid values:

*   OR: meets any of the specified conditions.
*   AND: meets all the specified conditions.', example='OR'),
        }(name='AlertRuleContent', description='The content of the Application Monitoring or Browser Monitoring alert rule.'),
        alertStatus?: string(name='AlertStatus', description='The status of the alert rule. Valid values:

*   RUNNING
*   STOPPED
*   PAUSED

> The **PAUSED** status indicates that the alert rule is abnormal and is actively paused by the system. The alert rule may be paused because that it is not unique or the associated cluster has been deleted.', example='RUNNING'),
        alertType?: string(name='AlertType', description='The type of the alert rule.

*   APPLICATION_MONITORING_ALERT_RULE: alert rule for Application Monitoring
*   BROWSER_MONITORING_ALERT_RULE: alert rule for Browser Monitoring
*   PROMETHEUS_MONITORING_ALERT_RULE: alert rule for Managed Service for Prometheus', example='APPLICATION_MONITORING_ALERT_RULE'),
        annotations?: [ 
          {
            name?: string(name='Name', description='The key of the annotation.', example='123'),
            value?: string(name='Value', description='The value of the annotation.', example='abc'),
          }
        ](name='Annotations', description='The annotations of the Prometheus alert rule.'),
        autoAddNewApplication?: boolean(name='AutoAddNewApplication', description='Indicates whether the alert rule was applied to new applications that were created in Application Monitoring or Browser Monitoring. Valid values:

*   `true`
*   `false`', example='false'),
        clusterId?: string(name='ClusterId', description='The cluster ID of the Prometheus alert rule.', example='ceba9b9ea5b924dd0b6726d2de6******'),
        createdTime?: long(name='CreatedTime', description='The time when the alert rule was created. The value is a timestamp. Unit: milliseconds.', example='1640333981000'),
        duration?: string(name='Duration', description='The duration of the Prometheus alert rule.', example='1'),
        extend?: string(name='Extend', description='The extended fields.

> For existing Application Monitoring alert rules, the fields contained information such as contacts, alert template, and notification content.', example='{\\\\"alarmContext\\\\":\\\\"{\\\\\\\\\\"content\\\\\\\\\\":\\\\\\\\Alert name: $Alert name\\\\\\\\\\\\nFilter condition: $Filter condition\\\\\\\\\\\\nAlert time: $Alert time\\\\\\\\\\\\nAlert content: $Alert content\\\\\\\\\\\\nNote: The alert persists before you receive an email that reminds you to clear the alert. You will be reminded of the alert again 24 hours later. \\\\\\\\\\",\\\\\\\\\\"subTitle\\\\\\\\\\":\\\\\\\\\\"\\\\\\\\\\"}\\\\",\\\\"alertWays\\\\":\\\\"\\[0,1]\\\\",\\\\"contactGroupIds\\\\":\\\\"381,5075\\\\",\\\\"notice\\\\":\\\\"{\\\\\\\\\\"endTime\\\\\\\\\\":1480607940000,\\\\\\\\\\"noticeEndTime\\\\\\\\\\":1480607940000,\\\\\\\\\\"noticeStartTime\\\\\\\\\\":1480521600000,\\\\\\\\\\"startTime\\\\\\\\\\":1480521600000}\\\\"}'),
        filters?: {
          customSLSFilters?: [ 
            {
              key?: string(name='Key', description='The key of the filter condition.', example='username'),
              opt?: string(name='Opt', description='The logical operator of the filter condition. Valid values:

*   \\=: equal to
*   not: not equal to', example='='),
              show?: boolean(name='Show', description='Indicates whether this filter condition was displayed on the frontend.', example='false'),
              t?: string(name='T', description='Indicates the log type of Browser Monitoring. This field was not included in other filter conditions.', example='null'),
              value?: string(name='Value', description='The value of the filter condition.', example='test'),
            }
          ](name='CustomSLSFilters', description='The custom filter condition of the Browser Monitoring alert rule.'),
          customSLSGroupByDimensions?: [ string ](name='CustomSLSGroupByDimensions', description='The information of the aggregation dimension.'),
          customSLSWheres?: [ string ](name='CustomSLSWheres', description='The details of the custom filter condition.'),
          dimFilters?: [ 
            {
              filterKey?: string(name='FilterKey', description='The key of the filter condition.', example='rootIp'),
              filterOpt?: string(name='FilterOpt', description='The logical operator of the filter condition.', example='ALL'),
              filterValues?: [ string ](name='FilterValues', description='The details of the filter condition.'),
            }
          ](name='DimFilters', description='The information about each filter condition of the Application Monitoring or Browser Monitoring alert rule.'),
        }(name='Filters', description='The filter conditions of the Application Monitoring or Browser Monitoring alert rule.'),
        labels?: [ 
          {
            name?: string(name='Name', description='The tag key.', example='123'),
            value?: string(name='Value', description='The tag value.', example='abc'),
          }
        ](name='Labels', description='The tags of the Prometheus alert rule.'),
        level?: string(name='Level', description='The severity level of the Prometheus alert rule.

*   P1: Alert notifications are sent for major issues that affect the availability of core business, have a huge impact, and may lead to serious consequences.
*   P2: Alert notifications are sent for service errors that affect the system availability with relatively limited impact.
*   P3: Alert notifications are sent for issues that may cause service errors or negative effects, or alert notifications for services that are relatively less important.
*   P4: Alert notifications are sent for low-priority issues that do not affect your business.
*   Default: Alert notifications are sent regardless of alert levels.', example='P2'),
        message?: string(name='Message', description='The alert message of the Prometheus alert rule.', example='Namespace: {{$labels.namespace}} / Pod: {{$labels.pod_name}} / Container: {{$labels.container}} CPU usage: {{$labels.metrics_params_opt_label_value}} {{$labels.metrics_params_value}}%. Current value: {{ printf "%.2f" $value }}%'),
        metricsType?: string(name='MetricsType', description='The metric type of the Application Monitoring or Browser Monitoring alert rule.', example='JVM'),
        notifyStrategy?: string(name='NotifyStrategy', description='The name of the notification policy.', example='ALERT_MANAGER'),
        pids?: [ string ](name='Pids', description='The process ID (PID) that was associated with the Application Monitoring or Browser Monitoring alert rule.'),
        promQL?: string(name='PromQL', description='The PromQL statement of the Prometheus alert rule.', example='node_memory_MemAvailable_bytes{} / node_memory_MemTotal_bytes{} * 100'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
        tags?: [ 
          {
            key?: string(name='Key', description='The tag key.', example='type'),
            value?: string(name='Value', description='The tag value.', example='prod'),
          }
        ](name='Tags', description='The list of tags.'),
        updatedTime?: long(name='UpdatedTime', description='The time when the alert rule was updated. The value is a timestamp. Unit: milliseconds.', example='1640333981000'),
        userId?: string(name='UserId', description='The ID of the Alibaba Cloud account to which the resource belongs.', example='1131971649******'),
      }
    ](name='AlertRules', description='The list of alert rules.'),
    page?: long(name='Page', description='The number of pages returned.', example='1'),
    size?: long(name='Size', description='The number of alert rules returned per page.', example='20'),
    total?: long(name='Total', description='The total number of queried alert rules.', example='1'),
  }(name='PageBean', description='The pages returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='337B8F7E-0A64-5768-9225-E9B3CF******'),
}

model GetAlertRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAlertRulesResponseBody(name='body'),
}

async function getAlertRulesWithOptions(request: GetAlertRulesRequest, runtime: Util.RuntimeOptions): GetAlertRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alertIds)) {
    query['AlertIds'] = request.alertIds;
  }
  if (!Util.isUnset(request.alertNames)) {
    query['AlertNames'] = request.alertNames;
  }
  if (!Util.isUnset(request.alertStatus)) {
    query['AlertStatus'] = request.alertStatus;
  }
  if (!Util.isUnset(request.alertType)) {
    query['AlertType'] = request.alertType;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.page)) {
    query['Page'] = request.page;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.size)) {
    query['Size'] = request.size;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAlertRules',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAlertRules(request: GetAlertRulesRequest): GetAlertRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAlertRulesWithOptions(request, runtime);
}

model GetAppApiByPageRequest {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  endTime?: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1600066800000'),
  intervalMills?: int32(name='IntervalMills', description='The time interval between the data shards to be queried. Unit: milliseconds. Minimum value: 60000. Maximum value: 2147483647.', example='60000'),
  PId?: string(name='PId', description='The process identifier (PID) of the application. For information about how to obtain a PID, see [Obtain the PID of an application](https://www.alibabacloud.com/help/zh/doc-detail/186100.htm?spm=a2cdw.13409063.0.0.7a72281f0bkTfx#title-imy-7gj-qhr).', example='a2n80plglh@745eddxxx'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. This parameter is no longer supported. The number of entries to return on each page. Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. Unit: milliseconds.', example='1600063200000'),
}

model GetAppApiByPageResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned for the request. Valid values:

*   2XX: The request was successful.
*   3XX: A redirection message was returned.
*   4XX: The request was invalid.
*   5XX: A server error occurred.', example='200'),
  data?: {
    completed?: boolean(name='Completed', description='Is completed.', example='false'),
    items?: [  map[string]any ](name='Items', description='The data entries.'),
    page?: int32(name='Page', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    total?: string(name='Total', description='The total number of returned entries.', example='0'),
  }(name='Data', description='The struct returned.'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B6A00968-82A8-4F14-9D1B-B53827DB****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   `true`: The call was successful.
*   `false`: The call failed.', example='true'),
}

model GetAppApiByPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAppApiByPageResponseBody(name='body'),
}

async function getAppApiByPageWithOptions(request: GetAppApiByPageRequest, runtime: Util.RuntimeOptions): GetAppApiByPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.intervalMills)) {
    query['IntervalMills'] = request.intervalMills;
  }
  if (!Util.isUnset(request.PId)) {
    query['PId'] = request.PId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAppApiByPage',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAppApiByPage(request: GetAppApiByPageRequest): GetAppApiByPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAppApiByPageWithOptions(request, runtime);
}

model GetAppJVMConfigRequest {
  endTime?: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1480607940000'),
  pid?: string(name='Pid', description='The ID of the application.

Log on to the **ARMS console**. In the left-side navigation pane, choose **Application Monitoring** > **Applications**. On the **Applications** page, click the name of an application. The URL in the address bar contains the process ID (PID) of the application. The PID is indicated in the pid=xxx format. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is eb4zdose6v%409781be0f44d\\*\\*\\*\\*, you must replace %40 with an at sign (@) to obtain eb4zdose6v@9781be0f44d\\*\\*\\*\\*.', example='atc889zkcf@d8deedfa9bf****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  startTime?: long(name='StartTime', description='The start time of the call method.', example='1480521600000'),
}

model GetAppJVMConfigResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  jvmInfoList?: [ 
    {
      agentVersion?: string(name='AgentVersion', description='Agent version.', example='1.7.0-SNAPSHOT_3.0.3_3756244'),
      hostName?: string(name='HostName', description='The name of the elastic container instance.', example='host_name'),
      ip?: string(name='Ip', description='Ip address.', example='47.91.59.244'),
      pid?: string(name='Pid', description='The PID.', example='dsv9zcel92@1455182510c5369'),
      procId?: string(name='ProcId', description='Process Id.', example='1'),
      vmArgs?: string(name='VmArgs', description='Java VM config.', example='[-javaagent:/home/admin/.opt/ArmsAgent/arms-bootstrap-1.7.0-SNAPSHOT.jar, -Doneagent.plugin.arms-agent.enabled=true, -Darms.licenseKey=[******], -Darms.agent.env=K8s, -Darms.agent.podinfo.path=/etc/podinfo, -Darms.appName=productservice, -Doneagent.region=cn-hangzhou, -Dproject.name=Product]'),
    }
  ](name='JvmInfoList', description='Java VM info list.'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model GetAppJVMConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAppJVMConfigResponseBody(name='body'),
}

async function getAppJVMConfigWithOptions(request: GetAppJVMConfigRequest, runtime: Util.RuntimeOptions): GetAppJVMConfigResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAppJVMConfig',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAppJVMConfig(request: GetAppJVMConfigRequest): GetAppJVMConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAppJVMConfigWithOptions(request, runtime);
}

model GetAuthTokenRequest {
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model GetAuthTokenResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The returned authentication token.', example='eyJhbGciOiJIUzI1NiJ9******'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model GetAuthTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAuthTokenResponseBody(name='body'),
}

async function getAuthTokenWithOptions(request: GetAuthTokenRequest, runtime: Util.RuntimeOptions): GetAuthTokenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAuthToken',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAuthToken(request: GetAuthTokenRequest): GetAuthTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAuthTokenWithOptions(request, runtime);
}

model GetCloudClusterAllUrlRequest {
  clusterId?: string(name='ClusterId', description='The ID of the CloudMonitor instance.', example='ca9676014babd4'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-beijing'),
}

model GetCloudClusterAllUrlResponseBody = {
  code?: int32(name='Code', description='状态码。200为成功，其他状态码为异常。', example='200'),
  data?: [ 
    {
      productCode?: string(name='ProductCode', description='The identifier of the cloud service.', example='amp'),
      region?: string(name='Region', description='The region ID.', example='cn-hangzhou'),
      remoteUrl?: {
        authToken?: boolean(name='AuthToken', description='Indicates whether authentication is enabled.', example='true'),
        grafanaUrl?: string(name='GrafanaUrl', description='The internal URL for Grafana.', example='"http://cn-hangzhou-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"'),
        internetGrafanaUrl?: string(name='InternetGrafanaUrl', description='The public URL for Grafana.', example='"http://cn-hangzhou.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"'),
        internetPushGatewayUrl?: string(name='InternetPushGatewayUrl', description='The public URL for Pushgateway.', example='"http://cn-hangzhou.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"'),
        internetRemoteReadUrl?: string(name='InternetRemoteReadUrl', description='The public URL for remote read.', example='"http://cn-hangzhou.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"'),
        internetRemoteWriteUrl?: string(name='InternetRemoteWriteUrl', description='The public URL for remote write.', example='"http://cn-hangzhou.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"'),
        pushGatewayUrl?: string(name='PushGatewayUrl', description='The internal URL for Pushgateway.', example='"http://cn-hangzhou-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"'),
        remoteReadUrl?: string(name='RemoteReadUrl', description='The internal URL for remote read.', example='"http://cn-hangzhou-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"'),
        remoteWriteUrl?: string(name='RemoteWriteUrl', description='The internal URL for remote write.', example='"http://cn-hangzhou-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"'),
        token?: string(name='Token', description='The token value used for authentication.', example='"eyJhbGciOiJIUzI1NiJ9.DKEIFJSL.KYK6uOtNVxTVHXJbH5MNqlsAuUtKzNlUvmAIiKc-QXw"'),
      }(name='RemoteUrl', description='The URLs for remote read and write. The value is a JSON string.'),
    }
  ](name='Data', description='An array object.'),
  message?: string(name='Message', description='详细信息。', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='99A663CB-8D7B-4B0D-A006-03C8EE38E7BB'),
  success?: boolean(name='Success', description='操作是否成功：true：操作成功                                 false：操作失败', example='true'),
}

model GetCloudClusterAllUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCloudClusterAllUrlResponseBody(name='body'),
}

/**
  * @deprecated : GetCloudClusterAllUrl is deprecated, please use ARMS::2019-08-08::GetRemoteWriteUrl instead.
  *
  * @param request GetCloudClusterAllUrlRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetCloudClusterAllUrlResponse
 */
// Deprecated
async function getCloudClusterAllUrlWithOptions(request: GetCloudClusterAllUrlRequest, runtime: Util.RuntimeOptions): GetCloudClusterAllUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCloudClusterAllUrl',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated : GetCloudClusterAllUrl is deprecated, please use ARMS::2019-08-08::GetRemoteWriteUrl instead.
  *
  * @param request GetCloudClusterAllUrlRequest
  * @return GetCloudClusterAllUrlResponse
 */
// Deprecated
async function getCloudClusterAllUrl(request: GetCloudClusterAllUrlRequest): GetCloudClusterAllUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCloudClusterAllUrlWithOptions(request, runtime);
}

model GetClusterAllUrlRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  regionId?: string(name='RegionId', description='The region ID. Default value: cn-hangzhou.', example='cn-hangzhou'),
}

model GetClusterAllUrlResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data', description='The response parameters in the JSON format.', example='{
  "RequestId": "41877338-646B-5DD6-BFBE-F89F1E7245AD",
  "Data": "{\\"clusterType\\":\\"ManagedKubernetes\\",\\"remoteWriteUrl\\":\\"http:/" }'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='The request ID.', example='40B10E04-81E8-4643-970D-F1B38F2E****'),
  success?: boolean(name='Success'),
}

model GetClusterAllUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClusterAllUrlResponseBody(name='body'),
}

async function getClusterAllUrlWithOptions(request: GetClusterAllUrlRequest, runtime: Util.RuntimeOptions): GetClusterAllUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetClusterAllUrl',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getClusterAllUrl(request: GetClusterAllUrlRequest): GetClusterAllUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getClusterAllUrlWithOptions(request, runtime);
}

model GetCommercialStatusRequest {
  commodityCode?: string(name='CommodityCode', example='arms_app_post'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model GetCommercialStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='49C82193-E991-5F6A-AF3E-1664D8D05CA3'),
  userAndCommodityStatus?: {
    basic?: boolean(name='Basic', example='false'),
    chargeType?: string(name='ChargeType', example='usage'),
    enable?: boolean(name='Enable', example='true'),
    extraInfo?: map[string]any(name='ExtraInfo', example='info'),
    freeDays?: long(name='FreeDays', example='10'),
    lable?: string(name='Lable', example='NEW'),
    status?: string(name='Status', example='Normal'),
  }(name='UserAndCommodityStatus'),
}

model GetCommercialStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCommercialStatusResponseBody(name='body'),
}

async function getCommercialStatusWithOptions(request: GetCommercialStatusRequest, runtime: Util.RuntimeOptions): GetCommercialStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commodityCode)) {
    query['CommodityCode'] = request.commodityCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCommercialStatus',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCommercialStatus(request: GetCommercialStatusRequest): GetCommercialStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCommercialStatusWithOptions(request, runtime);
}

model GetExploreUrlRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='c9cc4c5e220f8461f9d71b6ec6e******'),
  expression?: string(name='Expression', description='The query statement that corresponds to the data source.', example='{app="buy2"}'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  type?: string(name='Type', description='The type of the Grafana data source.', example='prometheus'),
}

model GetExploreUrlResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data', description='Response parameters', example='-'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='The request ID.', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
  success?: boolean(name='Success'),
}

model GetExploreUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetExploreUrlResponseBody(name='body'),
}

async function getExploreUrlWithOptions(request: GetExploreUrlRequest, runtime: Util.RuntimeOptions): GetExploreUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.expression)) {
    query['Expression'] = request.expression;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetExploreUrl',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getExploreUrl(request: GetExploreUrlRequest): GetExploreUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getExploreUrlWithOptions(request, runtime);
}

model GetGrafanaWorkspaceRequest {
  aliyunLang?: string(name='AliyunLang', example='zh'),
  grafanaWorkspaceId?: string(name='GrafanaWorkspaceId', example='grafana-cn-4xl3g******'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model GetGrafanaWorkspaceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: GrafanaWorkspace(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='2C3F217B-9AAE-5D51-974D-48********'),
  success?: boolean(name='Success', example='true'),
  traceId?: string(name='TraceId', example='eac0a8048716731735000007137d000b'),
}

model GetGrafanaWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGrafanaWorkspaceResponseBody(name='body'),
}

async function getGrafanaWorkspaceWithOptions(request: GetGrafanaWorkspaceRequest, runtime: Util.RuntimeOptions): GetGrafanaWorkspaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunLang)) {
    query['AliyunLang'] = request.aliyunLang;
  }
  if (!Util.isUnset(request.grafanaWorkspaceId)) {
    query['GrafanaWorkspaceId'] = request.grafanaWorkspaceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetGrafanaWorkspace',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGrafanaWorkspace(request: GetGrafanaWorkspaceRequest): GetGrafanaWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGrafanaWorkspaceWithOptions(request, runtime);
}

model GetIntegrationStateRequest {
  clusterId?: string(name='ClusterId', example='cc7a37ee31aea4ed1a059eff8034b****'),
  integration?: string(name='Integration', example='asm'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model GetIntegrationStateResponseBody = {
  code?: int32(name='Code', description='状态码。200为成功，其他状态码为异常。', example='200'),
  message?: string(name='Message', description='返回结果的提示信息。', example='success'),
  requestId?: string(name='RequestId', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
  state?: boolean(name='State', example='true'),
}

model GetIntegrationStateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIntegrationStateResponseBody(name='body'),
}

/**
  * @deprecated : GetIntegrationState is deprecated, please use ARMS::2019-08-08::DescribeAddonRelease instead.
  *
  * @param request GetIntegrationStateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetIntegrationStateResponse
 */
// Deprecated
async function getIntegrationStateWithOptions(request: GetIntegrationStateRequest, runtime: Util.RuntimeOptions): GetIntegrationStateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.integration)) {
    query['Integration'] = request.integration;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetIntegrationState',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated : GetIntegrationState is deprecated, please use ARMS::2019-08-08::DescribeAddonRelease instead.
  *
  * @param request GetIntegrationStateRequest
  * @return GetIntegrationStateResponse
 */
// Deprecated
async function getIntegrationState(request: GetIntegrationStateRequest): GetIntegrationStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getIntegrationStateWithOptions(request, runtime);
}

model GetManagedPrometheusStatusRequest {
  clusterId?: string(name='ClusterId', description='The ID of the ASK cluster. This parameter is required if the ClusterType parameter is set to ask.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  clusterType?: string(name='ClusterType', description='The type of the monitoring object. Valid values: ask , acs , one and ecs.', example='ask'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Prometheus instance belongs.', example='rg-acfmxyexli2****'),
  vpcId?: string(name='VpcId', description='This parameter is required if the ClusterType parameter is set to ecs.', example='vpc-***'),
}

model GetManagedPrometheusStatusResponseBody = {
  code?: int32(name='Code', description='The status code or error code.', example='200'),
  data?: string(name='Data', description='The status of the Prometheus instance.

*   Installing: The Prometheus instance is created and the Prometheus agent has no registration information.
*   Succeed: The Prometheus instance is created and the Prometheus agent is registered.
*   Failure: The Prometheus instance failed to be created or the Prometheus agent failed to be registered.
*   Unknown: No status of the Prometheus instance is available.', example='Installing'),
  message?: string(name='Message', description='The returned message.', example='Successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='F7781D4A-2818-41E7-B7BB-79D809E9****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model GetManagedPrometheusStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetManagedPrometheusStatusResponseBody(name='body'),
}

async function getManagedPrometheusStatusWithOptions(request: GetManagedPrometheusStatusRequest, runtime: Util.RuntimeOptions): GetManagedPrometheusStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterType)) {
    query['ClusterType'] = request.clusterType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetManagedPrometheusStatus',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getManagedPrometheusStatus(request: GetManagedPrometheusStatusRequest): GetManagedPrometheusStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getManagedPrometheusStatusWithOptions(request, runtime);
}

model GetMultipleTraceRequest {
  endTime?: long(name='EndTime', example='1663999380000'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: long(name='StartTime', example='1657692507000'),
  traceIDs?: [ string ](name='TraceIDs', example='ac1400a115951745017447033d****'),
}

model GetMultipleTraceResponseBody = {
  multiCallChainInfos?: [ 
    {
      spans?: [ 
        {
          duration?: long(name='Duration', example='11'),
          haveStack?: boolean(name='HaveStack', example='true'),
          logEventList?: [ 
            {
              tagEntryList?: [ 
                {
                  key?: string(name='Key', example='http.status.code'),
                  value?: string(name='Value', example='200'),
                }
              ](name='TagEntryList'),
              timestamp?: long(name='Timestamp', example='1595174501747'),
            }
          ](name='LogEventList'),
          operationName?: string(name='OperationName', example='/demo/queryNotExistDB/11'),
          parentSpanId?: string(name='ParentSpanId', example='18'),
          resultCode?: string(name='ResultCode', example='1'),
          rpcId?: string(name='RpcId', example='0.1'),
          rpcType?: int32(name='RpcType', example='0'),
          serviceIp?: string(name='ServiceIp', example='172.20.XX.XX'),
          serviceName?: string(name='ServiceName', example='arms-k8s-demo-subcomponent'),
          spanId?: string(name='SpanId', example='1234'),
          tagEntryList?: [ 
            {
              key?: string(name='Key', example='http.status.code'),
              value?: string(name='Value', example='200'),
            }
          ](name='TagEntryList'),
          timestamp?: long(name='Timestamp', example='1595174501747'),
          traceID?: string(name='TraceID', example='ac1400a115951745017447033d****'),
        }
      ](name='Spans'),
      traceID?: string(name='TraceID', example='ac1400a115951745017447033d****'),
    }
  ](name='MultiCallChainInfos'),
  requestId?: string(name='RequestId', example='2983BEF7-4A0D-47A2-94A2-8E9C5E63****'),
}

model GetMultipleTraceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMultipleTraceResponseBody(name='body'),
}

async function getMultipleTraceWithOptions(request: GetMultipleTraceRequest, runtime: Util.RuntimeOptions): GetMultipleTraceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.traceIDs)) {
    query['TraceIDs'] = request.traceIDs;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMultipleTrace',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMultipleTrace(request: GetMultipleTraceRequest): GetMultipleTraceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMultipleTraceWithOptions(request, runtime);
}

model GetOnCallSchedulesDetailRequest {
  endTime?: string(name='EndTime', description='The date on which the shift ends. Format: `yyyy-MM-dd`.', example='2022-10-30'),
  id?: long(name='Id', description='The ID of the scheduling policy.', example='1234'),
  startTime?: string(name='StartTime', description='The date from which the shift starts. Format: `yyyy-MM-dd`.', example='2022-10-01'),
}

model GetOnCallSchedulesDetailResponseBody = {
  data?: {
    alertRobotId?: long(name='AlertRobotId', description='The URL of the DingTalk chatbot, which is used to receive notifications about shift changes.', example='https://oapi.dingtalk.com/robot/send?access_token=69d4e009547e11069c6513309414937b7bf0482fb9284125b5******'),
    description?: string(name='Description', description='The description of the scheduling policy.', example='Test'),
    id?: long(name='Id', description='The ID of the scheduling policy.', example='1234'),
    name?: string(name='Name', description='The name of the scheduling policy.', example='Scheduling policy test'),
    renderedFinnalEntries?: [ 
      {
        end?: string(name='End', description='The date on which the user completed shift work.', example='2022-10-30'),
        simpleContact?: {
          id?: long(name='Id', description='The ID of the user on duty.', example='123'),
          name?: string(name='Name', description='The name of the user on duty.', example='Employee 1'),
        }(name='SimpleContact', description='The information about the user on duty.'),
        start?: string(name='Start', description='The date from which the user started shift work.', example='2022-10-01'),
      }
    ](name='RenderedFinnalEntries', description='The information about the final user on duty.'),
    renderedLayerEntries?: [[ 
      {
        start?: string(name='Start', description='The date from which the scheduled user was supposed to start shift work.', example='2022-10-01'),
        end?: string(name='End', description='The date on which the scheduled user was supposed to complete shift work.', example='2022-10-30'),
        simpleContact?: {
          id?: long(name='Id', description='The ID of the scheduled user.', example='123'),
          name?: string(name='Name', description='The name of the scheduled user.', example='Employee 1'),
        }(name='SimpleContact', description='The information about the scheduled user.'),
      }
    ]    ](name='RenderedLayerEntries', description='The scheduled users on duty within a time range.'),
    renderedSubstitudeEntries?: [ 
      {
        end?: string(name='End', description='The date on which the substitute was supposed to complete shift work.', example='2022-10-30'),
        simpleContact?: {
          id?: long(name='Id', description='The ID of the substitute.', example='234'),
          name?: string(name='Name', description='The name of the substitute.', example='Employee 2'),
        }(name='SimpleContact', description='The information about the substitute.'),
        start?: string(name='Start', description='The date from which the substitute was supposed to start shift work.', example='2022-10-01'),
      }
    ](name='RenderedSubstitudeEntries', description='The information about the substitutes within a time range.'),
    scheduleLayers?: [ 
      {
        contactIds?: [ long ](name='ContactIds', description='The ID list of users on duty.'),
        restrictions?: [ 
          {
            endTimeOfDay?: string(name='EndTimeOfDay', description='The end time of the shift per day.', example='18:00'),
            restrictionType?: string(name='RestrictionType', description='The type of the limit. Valid values:

*   daily_restriction
*   weekly_restriction', example='daily_restriction'),
            startTimeOfDay?: string(name='StartTimeOfDay', description='The start time of the shift per day.', example='09:00'),
          }
        ](name='Restrictions', description='The limit on the time of the shift.'),
        rotationType?: string(name='RotationType', description='The type of the shift. Valid values:

*   DAY
*   WEEK
*   CUSTOM', example='DAY'),
        shiftLength?: long(name='ShiftLength', description='The shift cycle. Unit: hours.', example='8'),
        startTime?: string(name='StartTime', description='The date on which the shift change took effect.', example='2022-10-01'),
      }
    ](name='ScheduleLayers', description='The information about the shift.'),
  }(name='Data', description='The information about the scheduling policy.'),
  requestId?: string(name='RequestId', description='The request ID.', example='21E85B16-75A6-429A-9F65-8AAC9A54****'),
}

model GetOnCallSchedulesDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOnCallSchedulesDetailResponseBody(name='body'),
}

async function getOnCallSchedulesDetailWithOptions(request: GetOnCallSchedulesDetailRequest, runtime: Util.RuntimeOptions): GetOnCallSchedulesDetailResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOnCallSchedulesDetail',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOnCallSchedulesDetail(request: GetOnCallSchedulesDetailRequest): GetOnCallSchedulesDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOnCallSchedulesDetailWithOptions(request, runtime);
}

model GetPrometheusApiTokenRequest {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model GetPrometheusApiTokenResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
  token?: string(name='Token', description='The token required for integrating Prometheus Service.', example='6dcbb77ef4ba6ef5466b5debf9e2****'),
}

model GetPrometheusApiTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPrometheusApiTokenResponseBody(name='body'),
}

/**
  * None.
  *
  * @param request GetPrometheusApiTokenRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetPrometheusApiTokenResponse
 */
async function getPrometheusApiTokenWithOptions(request: GetPrometheusApiTokenRequest, runtime: Util.RuntimeOptions): GetPrometheusApiTokenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPrometheusApiToken',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * None.
  *
  * @param request GetPrometheusApiTokenRequest
  * @return GetPrometheusApiTokenResponse
 */
async function getPrometheusApiToken(request: GetPrometheusApiTokenRequest): GetPrometheusApiTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPrometheusApiTokenWithOptions(request, runtime);
}

model GetPrometheusGlobalViewRequest {
  globalViewClusterId?: string(name='GlobalViewClusterId', description='The ID of the global aggregation instance.', example='global-v2-cn-1478326682034601-vss8pd0i'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model GetPrometheusGlobalViewResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', description='The returned struct.', example='{ "clusterId":"The ID of the global aggregation instance.", "groupName":"The name of the global aggregation instance.", "dataSources":\\[ { "sourceName":"The name of the data source.- ArmsPrometheus No.1", "sourceType":"AlibabaPrometheus", "userId":"UserID", "clusterId":"ClusterId" }, // more datasources ] }'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='743AD493-D006-53BD-AAEC-DDCE7FB68EA7'),
}

model GetPrometheusGlobalViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPrometheusGlobalViewResponseBody(name='body'),
}

async function getPrometheusGlobalViewWithOptions(request: GetPrometheusGlobalViewRequest, runtime: Util.RuntimeOptions): GetPrometheusGlobalViewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.globalViewClusterId)) {
    query['GlobalViewClusterId'] = request.globalViewClusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPrometheusGlobalView',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPrometheusGlobalView(request: GetPrometheusGlobalViewRequest): GetPrometheusGlobalViewResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPrometheusGlobalViewWithOptions(request, runtime);
}

model GetPrometheusInstanceRequest {
  clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='c77f6f2397ea74672872acf5e31374a27'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model GetPrometheusInstanceResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  data?: {
    authToken?: string(name='AuthToken', description='auth token string.', example='ad32dxxxx'),
    clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='c589a1b8db05c4561aefbb898ca8fb1cf'),
    clusterName?: string(name='ClusterName', description='The name of the monitoring object.', example='prom1'),
    clusterType?: string(name='ClusterType', description='*   remote-write: Prometheus instance for Remote Write
*   ecs: Prometheus instances for ECS
*   cloud-monitor: Prometheus instance for cloud services (Chinese mainland)
*   cloud-monitor: Prometheus instance for cloud services (regions outside the Chinese mainland)
*   global-view: Prometheus instance for GlobalView
*   aliyun-cs: Prometheus instance for Container Service', example='remote-write'),
    grafanaInstanceId?: string(name='GrafanaInstanceId', description='The ID of the Grafana workspace.', example='grafana-rnggfvhlcdl6m71***'),
    httpApiInterUrl?: string(name='HttpApiInterUrl', description='http api internet url.', example='http://cn-beijing.arms.aliyuncs.com:9090/api/v1/prometheus/xxx/cn-beijing'),
    httpApiIntraUrl?: string(name='HttpApiIntraUrl', description='http api intranet url.', example='http://cn-beijing-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/xxx/cn-beijing'),
    paymentType?: string(name='PaymentType', description='The billing method. Valid values:

*   PREPAY: subscription
*   POSTPAY: pay-as-you-go', example='PREPAY'),
    pushGatewayInterUrl?: string(name='PushGatewayInterUrl', description='push gateway internet url.', example='http://cn-beijing.arms.aliyuncs.com/prometheus/xxx/api/v2'),
    pushGatewayIntraUrl?: string(name='PushGatewayIntraUrl', description='push gateway intranet url.', example='http://cn-beijing-intranet.arms.aliyuncs.com/prometheus/xxx/api/v2'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-beijing'),
    remoteReadInterUrl?: string(name='RemoteReadInterUrl', description='remote read internet url.', example='http://cn-beijing.arms.aliyuncs.com:9090/api/v1/prometheus/xxx/api/v1/read'),
    remoteReadIntraUrl?: string(name='RemoteReadIntraUrl', description='remote read intranet url.', example='http://cn-beijing-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/xxx/api/v1/read'),
    remoteWriteInterUrl?: string(name='RemoteWriteInterUrl', description='remote write internet url.', example='http://cn-beijing.arms.aliyuncs.com/prometheus/xxx/api/v3/write'),
    remoteWriteIntraUrl?: string(name='RemoteWriteIntraUrl', description='remote write intranet url.', example='http://cn-beijing-intranet.arms.aliyuncs.com/prometheus/xxx/api/v3/write'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-aek2vezare****'),
    resourceType?: string(name='ResourceType', description='The type of the resource. Set the value to PROMETHEUS.', example='PROMETHEUS'),
    securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-8vbdgmf4nraiqa9bx0jo'),
    subClustersJson?: string(name='SubClustersJson', description='The child instances of the Prometheus instance for GlobalView. The value is a JSON string.', example='\\[{"headers":{},"regionId":"cn-hangzhou","sourceType":"AlibabaPrometheus","extras":{},"clusterId":"c39a1048921e04fceb039db2fbb73\\*\\*\\*","sourceName":"arms-luyao-test","dataSource":"","userId":"167275301789\\*\\*\\*"},{"headers":{},"regionId":"cn-beijing","sourceType":"AlibabaPrometheus","extras":{},"clusterId":"c6b6485496d5b400abde22cb47b5\\*\\*\\*\\*","sourceName":"agent-321-test","dataSource":"","userId":"1672753017899\\*\\*\\*"},{"headers":{},"regionId":"cn-zhangjiakou","sourceType":"AlibabaPrometheus","extras":{},"clusterId":"c261a4f3200c446659133f1ade789b15e","sourceName":"zaifeng-cardinality-01","dataSource":"","userId":"167275301789\\*\\*\\*"}]'),
    tags?: [ 
      {
        tagKey?: string(name='TagKey', description='The tag key of the instance.', example='tag1'),
        tagValue?: string(name='TagValue', description='The tag value of the instance.', example='tagValue1'),
      }
    ](name='Tags', description='The tags of the instance.'),
    userId?: string(name='UserId', description='The user ID.', example='167275301789****'),
    vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-f8z73vcja1tqnw90aav5a'),
    vpcId?: string(name='VpcId', description='The virtual private cloud (VPC) where the monitoring object resides.', example='vpc-8vb02uk57qbcktqcvqqqj'),
  }(name='Data', description='The returned information.'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='52C422FD-6B43-524D-B8A1-A4693294318C'),
}

model GetPrometheusInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPrometheusInstanceResponseBody(name='body'),
}

async function getPrometheusInstanceWithOptions(request: GetPrometheusInstanceRequest, runtime: Util.RuntimeOptions): GetPrometheusInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPrometheusInstance',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPrometheusInstance(request: GetPrometheusInstanceRequest): GetPrometheusInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPrometheusInstanceWithOptions(request, runtime);
}

model GetPrometheusIntegrationRequest {
  clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance. Only a Prometheus instance for Container Service or a Prometheus instance for ECS is supported.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  instanceId?: long(name='InstanceId', description='The exporter ID.', example='2893'),
  integrationType?: string(name='IntegrationType', description='The type of the integration.', example='kafka, mysql, redis, snmp, emr, nubela, and tidb'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model GetPrometheusIntegrationResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  data?: {
    canDelete?: boolean(name='CanDelete', description='Indicates whether the exporter can be deleted.', example='true'),
    canEditor?: boolean(name='CanEditor', description='Indicates whether the exporter can be modified.', example='true'),
    clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='c589a1b8db05c4561aefbb898ca8fb1cf'),
    containerName?: string(name='ContainerName', description='The container name.', example='kafka-exporter-1'),
    describe?: string(name='Describe', description='The description of the exporter.', example='"{}"'),
    exporterType?: string(name='ExporterType', description='The type of the exporter.', example='tidb-exporter'),
    instanceId?: long(name='InstanceId', description='The exporter ID.', example='2893'),
    instanceName?: string(name='InstanceName', description='The name of the exporter.', example='lpd-skyeye'),
    integrationType?: string(name='IntegrationType', description='The type of the integration.', example='tidb'),
    namespace?: string(name='Namespace', description='The namespace.', example='arms-prom'),
    needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether an upgrade is required.', example='True'),
    param?: string(name='Param', description='The configurations of the exporter. The value is a JSON string.', example='{
      "port": "5554",
      "name": "kafka-test12",
      "kafka_instance": "kafka-test",
      "__label_value": "kafka-test",
      "scrape_interval": 33,
      "metrics_path": "/metrics",
      "__label_key": "kafka-test"
}'),
    showDescribe?: boolean(name='ShowDescribe', description='Indicates whether the description is displayed.', example='true'),
    showLog?: string(name='ShowLog', description='Indicates whether the exporter logs are displayed.', example='true'),
    status?: string(name='Status', description='The status of the exporter.', example='installed'),
    target?: string(name='Target', description='The monitored IP address.', example='127.0.0.1:3422'),
    version?: string(name='Version', description='The version information.', example='1.0.0'),
  }(name='Data', description='The struct returned.'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='9BEF2832-9D95-5E3E-9B10-74887CA17B94'),
}

model GetPrometheusIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPrometheusIntegrationResponseBody(name='body'),
}

async function getPrometheusIntegrationWithOptions(request: GetPrometheusIntegrationRequest, runtime: Util.RuntimeOptions): GetPrometheusIntegrationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.integrationType)) {
    query['IntegrationType'] = request.integrationType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPrometheusIntegration',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPrometheusIntegration(request: GetPrometheusIntegrationRequest): GetPrometheusIntegrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPrometheusIntegrationWithOptions(request, runtime);
}

model GetPrometheusMonitoringRequest {
  clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  monitoringName?: string(name='MonitoringName', description='The name of the monitoring configuration.', example='customJob1'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  type?: string(name='Type', description='The type of the monitoring configuration. 
Valid values for a Prometheus instance for Container Service: serviceMonitor, podMonitor, customJob, and probe. 
Valid values for a Prometheus instance for ECS: customJob and probe.', example='customJob'),
}

model GetPrometheusMonitoringResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    clusterId?: string(name='ClusterId', description='Prometheus Instance ID.', example='c589a1b8db05c4561aefbb898ca8fb1cf'),
    configYaml?: string(name='ConfigYaml', description='The monitoring configuration. The value is a YAML string.'),
    monitoringName?: string(name='MonitoringName', description='The name of the monitoring configuration.', example='customJob1'),
    status?: string(name='Status', description='The status of the monitoring configuration. Valid values: run and stop.', example='run'),
    type?: string(name='Type', description='The type of the monitoring configuration. Valid values: serviceMonitor, podMonitor, customJob, and probe.', example='serviceMonitor'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
}

model GetPrometheusMonitoringResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPrometheusMonitoringResponseBody(name='body'),
}

async function getPrometheusMonitoringWithOptions(request: GetPrometheusMonitoringRequest, runtime: Util.RuntimeOptions): GetPrometheusMonitoringResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.monitoringName)) {
    query['MonitoringName'] = request.monitoringName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPrometheusMonitoring',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPrometheusMonitoring(request: GetPrometheusMonitoringRequest): GetPrometheusMonitoringResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPrometheusMonitoringWithOptions(request, runtime);
}

model GetPrometheusRemoteWriteRequest {
  clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance. Only a Prometheus instance for Container Service or a Prometheus instance for ECS is supported.', example='cc7a37ee31aea4ed1a059eff8034b\\*\\*\\*\\* or vpc-\\*\\*\\*'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  remoteWriteName?: string(name='RemoteWriteName', description='The name of the remote write configuration item.', example='rw1'),
}

model GetPrometheusRemoteWriteResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='c589a1b8db05c4561aefbb898ca8fb1cf'),
    remoteWriteName?: string(name='RemoteWriteName', description='The name of the remote write configuration item.', example='abc123'),
    remoteWriteYaml?: string(name='RemoteWriteYaml', description='The details of the remote write configuration item. The value is in the YAML format.', example='remote_write:
  - name: rw1
    url: "http://cn-hangzhou-intranet.arms.aliyuncs.com/prometheus/uid/xx/cn-hangzhou/api/v3/write"
    basic_auth:
      username: xxx
      password: xxx
    write_relabel_configs:
      - source_labels: [ instance_id ]
        separator: ;
        regex: si
        replacement: $1
        action: keep'),
  }(name='Data', description='The details of the remote write configuration item.', example='name: rw1
url: "http://cn-hangzhou-intranet.arms.aliyuncs.com/prometheus/uid/xx/cn-hangzhou/api/v3/write"
basic_auth: username: xxx
password: xxx
write_relabel_configs: - source_labels: [instance_id]
separator: ;
regex: si
replacement: $1
action: keep'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='40B10E04-81E8-4643-970D-F1B38F2E****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model GetPrometheusRemoteWriteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPrometheusRemoteWriteResponseBody(name='body'),
}

async function getPrometheusRemoteWriteWithOptions(request: GetPrometheusRemoteWriteRequest, runtime: Util.RuntimeOptions): GetPrometheusRemoteWriteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.remoteWriteName)) {
    query['RemoteWriteName'] = request.remoteWriteName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPrometheusRemoteWrite',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPrometheusRemoteWrite(request: GetPrometheusRemoteWriteRequest): GetPrometheusRemoteWriteResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPrometheusRemoteWriteWithOptions(request, runtime);
}

model GetRecordingRuleRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model GetRecordingRuleResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', description='The recording rule.', example='--- groups: - name: "recording_demo"   rules:   - expr: "sum(jvm_memory_max_bytes)"     record: "rate_coredns_demo"'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9FEA6D00-317F-45E3-9004-7FB8B0B7****'),
}

model GetRecordingRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRecordingRuleResponseBody(name='body'),
}

async function getRecordingRuleWithOptions(request: GetRecordingRuleRequest, runtime: Util.RuntimeOptions): GetRecordingRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRecordingRule',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRecordingRule(request: GetRecordingRuleRequest): GetRecordingRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRecordingRuleWithOptions(request, runtime);
}

model GetRetcodeAppByPidRequest {
  pid?: string(name='Pid', description='The PID of the application. To obtain the PID of the application, perform the following steps: Log on to the Application Real-Time Monitoring Service (ARMS) console. In the left-side navigation pane, choose **Browser Monitoring** > **Browser Monitoring**. On the Browser Monitoring page, click the name of the application. The URL in the address bar contains the PID of the application. The PID is in the pid=xxx format. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is xxx%4074xxx, you must replace %40 with the at sign (@) to obtain xxx@74xxx.', example='b590lhguqs@9781be0f44dXXXX'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The list of tags.'),
}

model GetRetcodeAppByPidResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='2983BEF7-4A0D-47A2-94A2-8E9C5E63****'),
  retcodeApp?: {
    appId?: string(name='AppId', description='The ID of the application. The parameter is an auto-increment parameter.', example='2787XXXX'),
    appName?: string(name='AppName', description='The name of the application that is monitored by Browser Monitoring.', example='testRetcodeAppXXXX'),
    pid?: string(name='Pid', description='The process identifier (PID) of the application.', example='b590lhguqs@9781be0f44dXXXX'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. You can obtain the resource group ID in the **Resource Management** console.', example='rg-acfmxidtzXXXX'),
    retcodeAppType?: string(name='RetcodeAppType', description='The type of the application that is monitored by Browser Monitoring. Valid values:

*   `web`: web application
*   `weex`: Weex mobile app
*   `mini_dd`: DingTalk mini program
*   `mini_alipay`: Alipay mini program
*   `mini_wx`: WeChat mini program
*   `mini_common`: mini program on other platforms', example='web'),
    tags?: [ 
      {
        key?: string(name='Key', description='The key of the tag.', example='testKey'),
        value?: string(name='Value', description='The value of the tag.', example='testValue'),
      }
    ](name='Tags', description='The tags that are attached to the instance.'),
  }(name='RetcodeApp', description='The returned application data.'),
}

model GetRetcodeAppByPidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRetcodeAppByPidResponseBody(name='body'),
}

async function getRetcodeAppByPidWithOptions(request: GetRetcodeAppByPidRequest, runtime: Util.RuntimeOptions): GetRetcodeAppByPidResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRetcodeAppByPid',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRetcodeAppByPid(request: GetRetcodeAppByPidRequest): GetRetcodeAppByPidResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRetcodeAppByPidWithOptions(request, runtime);
}

model GetRetcodeDataByQueryRequest {
  from?: long(name='From', example='1668687302'),
  pid?: string(name='Pid', example='atc889zkcf@d8deedfa9bf****'),
  query?: string(name='Query', example='t : pv|select sum(times) as pv , approx_distinct(uid) as uv , (date-date%3600000) as date  group by date'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  to?: long(name='To', example='1668688000'),
}

model GetRetcodeDataByQueryResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='{"total":0,"auth":false,"pageSize":20,"completed":true,"page":1,"items":[]}'),
  message?: string(name='Message', example='Internal error. Please try again. Contact the DingTalk service account if the issue                              persists after multiple retries.'),
  requestId?: string(name='RequestId', example='2A0CEDF1-06FE-44AC-8E21-21A5BE65****'),
  success?: boolean(name='Success', example='true'),
}

model GetRetcodeDataByQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRetcodeDataByQueryResponseBody(name='body'),
}

async function getRetcodeDataByQueryWithOptions(request: GetRetcodeDataByQueryRequest, runtime: Util.RuntimeOptions): GetRetcodeDataByQueryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.pid)) {
    query['Pid'] = request.pid;
  }
  if (!Util.isUnset(request.query)) {
    query['Query'] = request.query;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.to)) {
    query['To'] = request.to;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRetcodeDataByQuery',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRetcodeDataByQuery(request: GetRetcodeDataByQueryRequest): GetRetcodeDataByQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRetcodeDataByQueryWithOptions(request, runtime);
}

model GetRetcodeLogstoreRequest {
  pid?: string(name='Pid', example='atc889zkcf@d8deedfa9bf****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model GetRetcodeLogstoreResponseBody = {
  data?: {
    message?: string(name='Message', example='retcode app or task can not be found!'),
    retcodeSLSConfig?: {
      logstore?: string(name='Logstore', example='log-test-220431'),
      project?: string(name='Project', example='test-project'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }(name='RetcodeSLSConfig'),
    status?: string(name='Status', example='true'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
}

model GetRetcodeLogstoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRetcodeLogstoreResponseBody(name='body'),
}

async function getRetcodeLogstoreWithOptions(request: GetRetcodeLogstoreRequest, runtime: Util.RuntimeOptions): GetRetcodeLogstoreResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pid)) {
    query['Pid'] = request.pid;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRetcodeLogstore',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRetcodeLogstore(request: GetRetcodeLogstoreRequest): GetRetcodeLogstoreResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRetcodeLogstoreWithOptions(request, runtime);
}

model GetRetcodeShareUrlRequest {
  pid?: string(name='Pid', description='The process identifier (PID) of the application. For more information about how to obtain the PID, see [Obtain the PID of an application](https://www.alibabacloud.com/help/zh/doc-detail/186100.htm?spm=a2cdw.13409063.0.0.7a72281f0bkTfx#title-imy-7gj-qhr).', example='iioe7jcnuk@582846f37******'),
}

model GetRetcodeShareUrlResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='01FF8DD9-A09C-47A1-895A-B6E321BE77B6'),
  url?: string(name='Url', description='The logon-free URL of the application.', example='http://arms-daily.console.aliyun.com:8080/shareapi/retcode.json?login_arms_t3h_token=XXXxxx&action=RetcodeAction&eventSubmitDoGetData=1'),
}

model GetRetcodeShareUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRetcodeShareUrlResponseBody(name='body'),
}

async function getRetcodeShareUrlWithOptions(request: GetRetcodeShareUrlRequest, runtime: Util.RuntimeOptions): GetRetcodeShareUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pid)) {
    query['Pid'] = request.pid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRetcodeShareUrl',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRetcodeShareUrl(request: GetRetcodeShareUrlRequest): GetRetcodeShareUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRetcodeShareUrlWithOptions(request, runtime);
}

model GetSourceMapInfoRequest {
  ascendingSequence?: boolean(name='AscendingSequence', example='true'),
  edition?: string(name='Edition', example='0.0.0'),
  ID?: string(name='ID', example='atc889zkcf@d8deedfa9bf****/0.0.0/test.sourcemap.js'),
  keyword?: string(name='Keyword', example='test'),
  orderField?: string(name='OrderField', example='version'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model GetSourceMapInfoResponseBody = {
  requestId?: string(name='RequestId', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
  sourceMapList?: [ 
    {
      fid?: string(name='Fid', example='atc889zkcf@d8deedfa9bf****/0.0.0/test.sourcemap.js'),
      fileName?: string(name='FileName', example='test.sourcemap.js'),
      size?: string(name='Size', example='201223'),
      uploadTime?: string(name='UploadTime', example='1590657842000'),
      version?: string(name='Version', example='0.0.0'),
    }
  ](name='SourceMapList'),
}

model GetSourceMapInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSourceMapInfoResponseBody(name='body'),
}

async function getSourceMapInfoWithOptions(request: GetSourceMapInfoRequest, runtime: Util.RuntimeOptions): GetSourceMapInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ascendingSequence)) {
    query['AscendingSequence'] = request.ascendingSequence;
  }
  if (!Util.isUnset(request.edition)) {
    query['Edition'] = request.edition;
  }
  if (!Util.isUnset(request.ID)) {
    query['ID'] = request.ID;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.orderField)) {
    query['OrderField'] = request.orderField;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSourceMapInfo',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSourceMapInfo(request: GetSourceMapInfoRequest): GetSourceMapInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSourceMapInfoWithOptions(request, runtime);
}

model GetStackRequest {
  endTime?: long(name='EndTime', description='The end time of the call method.', example='1653641800'),
  pid?: string(name='Pid', description='The process identifier (PID) of the application. For more information about how to obtain the PID, see [Obtain the PID of an application](https://www.alibabacloud.com/help/zh/doc-detail/186100.htm?spm=a2cdw.13409063.0.0.7a72281f0bkTfx#title-imy-7gj-qhr).', example='eb4zdose6v@36bab313a******'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  rpcID?: string(name='RpcID', description='The ID of the remote procedure call (RPC) mode. You can obtain the ID by calling the **GetTrace** operation.', example='0.1'),
  startTime?: long(name='StartTime', description='The start time of the call method.', example='1653555396'),
  traceID?: string(name='TraceID', description='The trace ID. You can log on to the Application Real-Time Monitoring Service (ARMS) console and obtain the trace ID on the **Trace Query** page.', example='0a5800611641470044457853******'),
}

model GetStackResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='B34C3A43-A901-5F94-9DAD-758CE4******'),
  stackInfo?: [ 
    {
      api?: string(name='Api', description='The name of the operation.', example='Tomcat Servlet Process'),
      duration?: long(name='Duration', description='The duration. Unit: milliseconds.', example='32'),
      exception?: string(name='Exception', description='The error message.', example='java.lang.NullPointerException'),
      extInfo?: {
        info?: string(name='Info', description='The content of the custom parameter.', example='input=254275&amp;'),
        type?: string(name='Type', description='The type of the custom parameter.', example='41'),
      }(name='ExtInfo', description='The information about the array object.'),
      line?: string(name='Line', description='The number of rows in the method stack information.', example='34'),
      rpcId?: string(name='RpcId', description='The ID of the RPC mode.', example='0.1'),
      serviceName?: string(name='ServiceName', description='The name of the service.', example='/com/test'),
      startTime?: long(name='StartTime', description='The start time of the call method.', example='1653555396'),
    }
  ](name='StackInfo', description='The information of the method stack.'),
}

model GetStackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetStackResponseBody(name='body'),
}

async function getStackWithOptions(request: GetStackRequest, runtime: Util.RuntimeOptions): GetStackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pid)) {
    query['Pid'] = request.pid;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.rpcID)) {
    query['RpcID'] = request.rpcID;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.traceID)) {
    query['TraceID'] = request.traceID;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetStack',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getStack(request: GetStackRequest): GetStackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStackWithOptions(request, runtime);
}

model GetSyntheticMonitorsRequest {
  filter?: {
    monitorCategory?: int32(name='MonitorCategory', description='The type of the monitoring point. Valid values: 1: PC. 2: mobile device.', example='1'),
    network?: int32(name='Network', description='The network type. Valid values: 1: private network. 2: Internet.', example='1'),
    taskType?: int32(name='TaskType', description='The type of the monitoring task. Valid values:

1: ICMP. 2: TCP. 3: DNS. 4: HTTP. 5: website speed. 6: file download.', example='1'),
  }(name='Filter', description='The query conditions.'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model GetSyntheticMonitorsShrinkRequest {
  filterShrink?: string(name='Filter', description='The query conditions.'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model GetSyntheticMonitorsResponseBody = {
  code?: long(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: [ 
    {
      available?: string(name='Available', description='Indicates whether the monitoring point is available. Valid values: true and false.', example='true'),
      canBeSelected?: boolean(name='CanBeSelected', description='Indicates whether the monitoring point is selected. Valid values: true and false.', example='true'),
      city?: string(name='City', description='The city.', example='Beijing'),
      cityCode?: string(name='CityCode', description='The city code.', example='1100101'),
      clientType?: int32(name='ClientType', description='The client type of the monitoring point. Valid values: 1: data center. 2: Internet. 3: mobile device. 4: ECS instance.', example='1'),
      country?: string(name='Country', description='The country.', example='China'),
      ipv6?: int32(name='Ipv6', description='Indicates whether IPv6 is supported. Valid values: 0: IPv6 is not supported. 1: IPv6 is supported.', example='0'),
      operator?: string(name='Operator', description='The carrier.', example='Alibaba Cloud'),
      operatorCode?: string(name='OperatorCode', description='The carrier code.', example='1'),
      region?: string(name='Region', description='The region.', example='Beijing'),
    }
  ](name='Data', description='The list of monitoring points.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='2FD473FF-5398-5A85-9BF6-7AB45561522F'),
}

model GetSyntheticMonitorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSyntheticMonitorsResponseBody(name='body'),
}

async function getSyntheticMonitorsWithOptions(tmpReq: GetSyntheticMonitorsRequest, runtime: Util.RuntimeOptions): GetSyntheticMonitorsResponse {
  Util.validateModel(tmpReq);
  var request = new GetSyntheticMonitorsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.filter)) {
    request.filterShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filter, 'Filter', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSyntheticMonitors',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSyntheticMonitors(request: GetSyntheticMonitorsRequest): GetSyntheticMonitorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSyntheticMonitorsWithOptions(request, runtime);
}

model GetSyntheticTaskDetailRequest {
  regionId?: string(name='RegionId', description='地域ID。默认为cn-hangzhou。', example='cn-hangzhou'),
  taskId?: string(name='TaskId', description='云拨测任务ID。', example='123'),
}

model GetSyntheticTaskDetailResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。', example='4D6C358A-A58B-4F4B-94CE-F5AAF023****'),
  taskDetail?: {
    commonParam?: {
      alarmFlag?: long(name='AlarmFlag', example='1'),
      alertList?: [ 
        {
          generalAlert?: string(name='GeneralAlert', example='1'),
          isCritical?: string(name='IsCritical', example='0'),
          name?: string(name='Name', example='alert-test'),
          seriousAlert?: string(name='SeriousAlert', example='1'),
          symbols?: string(name='Symbols', example='1'),
        }
      ](name='AlertList'),
      alertNotifierId?: string(name='AlertNotifierId', example='1'),
      alertPolicyId?: string(name='AlertPolicyId', example='1'),
      monitorSamples?: string(name='MonitorSamples', example='1'),
      startExecutionTime?: string(name='StartExecutionTime', example='1664427128'),
    }(name='CommonParam'),
    download?: {
      connectionTimeout?: long(name='ConnectionTimeout', example='200'),
      downloadCustomHeaderContent?: string(name='DownloadCustomHeaderContent', example='char'),
      downloadCustomHost?: long(name='DownloadCustomHost', example='0'),
      downloadCustomHostIp?: string(name='DownloadCustomHostIp', example='168.23.45.1'),
      downloadKernel?: long(name='DownloadKernel', example='1'),
      downloadRedirect?: long(name='DownloadRedirect', example='1'),
      downloadTransmissionSize?: long(name='DownloadTransmissionSize', example='20'),
      monitorTimeout?: long(name='MonitorTimeout', example='12'),
      quickProtocol?: string(name='QuickProtocol', example='1'),
      validateKeywords?: string(name='ValidateKeywords', example='test'),
      verifyWay?: long(name='VerifyWay', example='0'),
      whiteList?: string(name='WhiteList', example='[{\\"src\\":\\"211.154.166.174\\"}]'),
    }(name='Download', description='文件下载任务。'),
    extendInterval?: {
      days?: [ long ](name='Days', description='拨测执行周期。

- -1：每天
- 0：周日
- 1：周一
- 2：周二
- 3：周三
- 4：周四
- 5：周五
- 6：周六'),
      endMinute?: long(name='EndMinute', description='当天结束分钟数。', example='20'),
      endTime?: string(name='EndTime', example='2022-05-03 11:40'),
      endhour?: long(name='Endhour', description='当天结束小时数。', example='12'),
      startHour?: long(name='StartHour', description='当天开始拨测时间的小时数。', example='9'),
      startMinute?: long(name='StartMinute', description='当天开始拨测时间的分钟数。', example='20'),
      startTime?: string(name='StartTime', example='2022-02-26 11:40'),
    }(name='ExtendInterval', description='自定义扩展频率。'),
    intervalTime?: long(name='IntervalTime', description='拨测频率，单位为分钟。可选频率如下：

- 1
- 5
- 10
- 15
- 20
- 30
- 60
- 120
- 180
- 240
- 360
- 480
- 720
- 1440', example='20'),
    intervalType?: long(name='IntervalType', example='0'),
    ipType?: long(name='IpType', example='0'),
    monitorList?: [ 
      {
        cityCode?: long(name='CityCode', description='城市编码。'),
        monitorType?: long(name='MonitorType'),
        netServiceId?: long(name='NetServiceId'),
        sendCount?: long(name='SendCount'),
      }
    ](name='MonitorList'),
    monitorListString?: string(name='MonitorListString', example='12'),
    nav?: {
      dnsHijackWhitelist?: string(name='DnsHijackWhitelist', example='119.119.53.156'),
      elementBlacklist?: string(name='ElementBlacklist', example='test'),
      executeActiveX?: long(name='ExecuteActiveX', example='3'),
      executeApplet?: long(name='ExecuteApplet', example='1'),
      executeScript?: long(name='ExecuteScript', example='1'),
      filterInvalidIP?: long(name='FilterInvalidIP', example='1'),
      flowHijackJumpTimes?: long(name='FlowHijackJumpTimes', example='12'),
      flowHijackLogo?: string(name='FlowHijackLogo', example='target'),
      monitorTimeout?: long(name='MonitorTimeout', example='20'),
      navAutomaticScrolling?: long(name='NavAutomaticScrolling', example='1'),
      navCustomHeader?: string(name='NavCustomHeader', example='0'),
      navCustomHeaderContent?: string(name='NavCustomHeaderContent', example='content'),
      navCustomHost?: long(name='NavCustomHost', example='1'),
      navCustomHostIp?: string(name='NavCustomHostIp'),
      navDisableCache?: long(name='NavDisableCache', example='1'),
      navDisableCompression?: long(name='NavDisableCompression', example='0'),
      navIgnoreCertificateError?: long(name='NavIgnoreCertificateError', example='1'),
      navRedirect?: long(name='NavRedirect', example='1'),
      navReturnElement?: long(name='NavReturnElement', example='1'),
      pageTampering?: string(name='PageTampering', example='content'),
      processName?: string(name='ProcessName', example='ssh'),
      quicDomain?: string(name='QuicDomain', example='www.example.com'),
      quicVersion?: long(name='QuicVersion', example='0'),
      requestHeader?: long(name='RequestHeader', example='0'),
      slowElementThreshold?: long(name='SlowElementThreshold', example='30'),
      verifyStringBlacklist?: string(name='VerifyStringBlacklist', example='test'),
      verifyStringWhitelist?: string(name='VerifyStringWhitelist', example='test'),
      waitCompletionTime?: long(name='WaitCompletionTime', example='20'),
    }(name='Nav'),
    net?: {
      netDigSwitch?: long(name='NetDigSwitch', example='0'),
      netDnsNs?: string(name='NetDnsNs', example='189.12.32.124'),
      netDnsQueryMethod?: string(name='NetDnsQueryMethod', example='1'),
      netDnsServer?: long(name='NetDnsServer', example='0'),
      netDnsSwitch?: long(name='NetDnsSwitch', example='0'),
      netDnsTimeout?: string(name='NetDnsTimeout', example='10'),
      netIcmpActive?: long(name='NetIcmpActive', example='0'),
      netIcmpDataCut?: long(name='NetIcmpDataCut', example='0'),
      netIcmpInterval?: long(name='NetIcmpInterval', example='10'),
      netIcmpNum?: long(name='NetIcmpNum', example='10'),
      netIcmpSize?: long(name='NetIcmpSize', example='30'),
      netIcmpSwitch?: long(name='NetIcmpSwitch', example='0'),
      netIcmpTimeout?: long(name='NetIcmpTimeout', example='20'),
      netTraceRouteNum?: long(name='NetTraceRouteNum', example='30'),
      netTraceRouteSwitch?: long(name='NetTraceRouteSwitch', example='0'),
      netTraceRouteTimeout?: long(name='NetTraceRouteTimeout', example='20'),
      whiteList?: string(name='WhiteList', example='119.119.53.156/32'),
    }(name='Net'),
    protocol?: {
      characterEncoding?: long(name='CharacterEncoding', example='0'),
      customHost?: long(name='CustomHost', example='1'),
      customHostIp?: string(name='CustomHostIp', example='119.119.53.156'),
      protocolConnectionTimeout?: long(name='ProtocolConnectionTimeout', example='20'),
      protocolMonitorTimeout?: long(name='ProtocolMonitorTimeout', example='30'),
      receivedDataSize?: long(name='ReceivedDataSize', example='30'),
      requestContent?: {
        body?: {
          formdata?: {
            key?: string(name='Key', example='appId'),
            value?: string(name='Value', example='3425'),
          }(name='Formdata'),
          language?: string(name='Language', example='xml'),
          mode?: string(name='Mode', example='form-data'),
          raw?: string(name='Raw', example='content'),
          urlencoded?: {
            key?: string(name='Key', example='appId'),
            value?: string(name='Value', example='11080'),
          }(name='Urlencoded'),
        }(name='Body'),
        header?: [ 
          {
            key?: string(name='Key', example='regionId'),
            value?: string(name='Value', example='cn-hangzhou'),
          }
        ](name='Header'),
        method?: string(name='Method', example='POST'),
      }(name='RequestContent'),
      verifyContent?: string(name='VerifyContent', example='list'),
      verifyWay?: long(name='VerifyWay', example='0'),
    }(name='Protocol'),
    taskId?: long(name='TaskId', description='云拨测任务ID。', example='19584'),
    taskName?: string(name='TaskName', description='任务名称。', example='net-test'),
    taskType?: long(name='TaskType', example='0'),
    url?: string(name='Url', description='拨测地址。', example='www.example.com'),
  }(name='TaskDetail', description='任务详情。'),
}

model GetSyntheticTaskDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSyntheticTaskDetailResponseBody(name='body'),
}

async function getSyntheticTaskDetailWithOptions(request: GetSyntheticTaskDetailRequest, runtime: Util.RuntimeOptions): GetSyntheticTaskDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSyntheticTaskDetail',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSyntheticTaskDetail(request: GetSyntheticTaskDetailRequest): GetSyntheticTaskDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSyntheticTaskDetailWithOptions(request, runtime);
}

model GetSyntheticTaskListRequest {
  direction?: string(name='Direction', example='asc'),
  order?: string(name='Order', example='CreateTime'),
  pageNum?: long(name='PageNum', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  taskName?: string(name='TaskName', example='net-test'),
  taskStatus?: string(name='TaskStatus', example='1'),
  taskType?: string(name='TaskType', example='0'),
  url?: string(name='Url', example='https://www.example.com'),
}

model GetSyntheticTaskListResponseBody = {
  pageInfo?: {
    hasNextPage?: string(name='HasNextPage', example='false'),
    hasPreviousPage?: boolean(name='HasPreviousPage', example='true'),
    isFirstPage?: boolean(name='IsFirstPage', example='true'),
    isLastPage?: boolean(name='IsLastPage', example='true'),
    list?: [ 
      {
        createTime?: string(name='CreateTime', example='1634005438000'),
        monitorNumber?: long(name='MonitorNumber', example='2'),
        taskId?: string(name='TaskId', example='2118709'),
        taskName?: string(name='TaskName', example='net-test'),
        taskStatus?: string(name='TaskStatus', example='0'),
        taskType?: long(name='TaskType', example='0'),
        taskTypeName?: string(name='TaskTypeName'),
        url?: string(name='Url', example='www.example.com'),
        usable?: float(name='Usable', example='0.80'),
      }
    ](name='List'),
    navigateFirstPage?: string(name='NavigateFirstPage', example='1'),
    navigateLastPage?: string(name='NavigateLastPage', example='3'),
    navigatePageNums?: string(name='NavigatePageNums', example='1,2,3'),
    nextPage?: string(name='NextPage', example='3'),
    pages?: string(name='Pages', example='10'),
    prepage?: string(name='Prepage', example='1'),
    size?: long(name='Size', example='10'),
    total?: long(name='Total', example='15'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
}

model GetSyntheticTaskListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSyntheticTaskListResponseBody(name='body'),
}

async function getSyntheticTaskListWithOptions(request: GetSyntheticTaskListRequest, runtime: Util.RuntimeOptions): GetSyntheticTaskListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.taskStatus)) {
    query['TaskStatus'] = request.taskStatus;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSyntheticTaskList',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSyntheticTaskList(request: GetSyntheticTaskListRequest): GetSyntheticTaskListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSyntheticTaskListWithOptions(request, runtime);
}

model GetSyntheticTaskMonitorsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model GetSyntheticTaskMonitorsResponseBody = {
  code?: string(name='Code', example='1001'),
  data?: [ 
    {
      busy?: long(name='Busy', example='0'),
      city?: string(name='City'),
      cityCode?: long(name='CityCode', example='1100101'),
      clientType?: long(name='ClientType', example='1'),
      district?: string(name='District'),
      netServiceId?: long(name='NetServiceId', example='18'),
      netServiceName?: string(name='NetServiceName', example='XXX'),
    }
  ](name='Data'),
  msg?: string(name='Msg', example='null'),
  requestId?: string(name='RequestId', example='21E85B16-75A6-429A-9F65-8AAC9A54****'),
}

model GetSyntheticTaskMonitorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSyntheticTaskMonitorsResponseBody(name='body'),
}

async function getSyntheticTaskMonitorsWithOptions(request: GetSyntheticTaskMonitorsRequest, runtime: Util.RuntimeOptions): GetSyntheticTaskMonitorsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSyntheticTaskMonitors',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSyntheticTaskMonitors(request: GetSyntheticTaskMonitorsRequest): GetSyntheticTaskMonitorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSyntheticTaskMonitorsWithOptions(request, runtime);
}

model GetTimingSyntheticTaskRequest {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  taskId?: string(name='TaskId', description='The ID of the synthetic monitoring task.', example='856566a9cb2a4cafa05aa95ed0ec8f21'),
}

model GetTimingSyntheticTaskResponseBody = {
  code?: long(name='Code', description='The status code returned. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    availableAssertions?: [ 
      {
        expect?: string(name='Expect', description='The expected value.', example='100'),
        operator?: string(name='Operator', description='The condition. gt: greater than. gte: greater than or equal to. lt: less than. lte: less than or equal to. eq: equal to. neq: not equal to. ctn: contain. nctn: does not contain. exist: exist. n_exist: does not exist. belong: belong to. n_belong: does not belong to. reg_match: regular expression.', example='gt'),
        target?: string(name='Target', description='The check target. If you set the type parameter to HttpResCode, HttpResBody, or HttpResponseTime, you do not need to set the target parameter. If you set the type parameter to HttpResHead, you must specify the key in the header. If you set the type parameter to HttpResBodyJson, use jsonPath.', example='key'),
        type?: string(name='Type', description='The assertion type. Valid values: HttpResCode, HttpResHead, HttpResBody, HttpResBodyJson, HttpResponseTime, IcmpPackLoss (packet loss rate), IcmpPackMaxLatency (maximum packet latency), IcmpPackAvgLatency (average packet latency), TraceRouteHops (number of hops), DnsARecord (A record), DnsCName (CNAME), websiteTTFB (time to first packet), websiteTTLB (time to last packet), websiteFST (first paint time), websiteFFST (first meaningful paint), websiteOnload (full loaded time). For more information, see the following description.', example='websiteTTLB'),
      }
    ](name='AvailableAssertions', description='The list of assertions.'),
    commonSetting?: {
      customHost?: {
        hosts?: [ 
          {
            domain?: string(name='Domain', description='The domain name.', example='www.aliyun.com'),
            ipType?: int32(name='IpType', description='The IP version. Valid values:

*   0: A version is automatically selected.
*   1: IPv4
*   2: IPv6', example='0'),
            ips?: [ string ](name='Ips', description='The list of IP addresses.'),
          }
        ](name='Hosts', description='The list of hosts.'),
        selectType?: int32(name='SelectType', description='The selection mode. 0: Random. 1: Polling.', example='0'),
      }(name='CustomHost', description='The custom host.'),
      customVPCSetting?: {
        regionId?: string(name='RegionId'),
        secureGroupId?: string(name='SecureGroupId'),
        vSwitchId?: string(name='VSwitchId'),
        vpcId?: string(name='VpcId'),
      }(name='CustomVPCSetting'),
      ipType?: int32(name='IpType', description='The IP version. Valid values:

*   0: A version is automatically selected.
*   1: IPv4
*   2: IPv6', example='0'),
      isOpenTrace?: boolean(name='IsOpenTrace', description='是否开启链路追踪。', example='true'),
      monitorSamples?: int32(name='MonitorSamples', description='Specifies whether to evenly distribute monitoring samples. Valid values:

*   0: No
*   1: Yes', example='0'),
      traceClientType?: int32(name='TraceClientType', description='链路追踪客户端类型：

- 0：ARMS Agent
- 1：OpenTelemetry
- 2：Jaeger', example='1'),
      xtraceRegion?: string(name='XtraceRegion', description='链路数据上报region。', example='cn-hangzhou'),
    }(name='CommonSetting', description='The general settings.'),
    customPeriod?: {
      endHour?: long(name='EndHour', description='The hour at which the test ends. Valid values: 0 to 24.', example='22'),
      startHour?: long(name='StartHour', description='The hour at which the test starts. Valid values: 0 to 24.', example='14'),
    }(name='CustomPeriod', description='The custom cycle.'),
    frequency?: string(name='Frequency', description='The detection frequency. Valid values: 1m, 5m, 10m, 15m, 20m, 30m, 1h, 2h, 3h, 4h, 6h, 8h, 12h, and 24h.', example='5m'),
    monitorCategory?: long(name='MonitorCategory', description='The detection point type. 1: PC. 2: mobile device.', example='1'),
    monitorConf?: {
      apiHTTP?: {
        checkCert?: boolean(name='CheckCert'),
        connectTimeout?: long(name='ConnectTimeout', description='The connection timeout period. Unit: milliseconds. Default value: 5000. Minimum value: 1000. Maximum value: 300000.', example='5000'),
        method?: string(name='Method', description='The request method.

*   POST
*   GET', example='POST'),
        requestBody?: {
          content?: string(name='Content', description='The content of the request body. Format: JSON string. The parameter is required if the type parameter is set to text/plain, application/json, application/xml, or text/html. Format: JSON string.', example='text/plain'),
          type?: string(name='Type', description='The type of the request body. Valid values: text/plain, application/json, application/x-www-form-urlencoded, multipart/form-data, application/xml, and text/html.', example='multipart/form-data'),
        }(name='RequestBody', description='The HTTP request body.'),
        requestHeaders?: map[string]string(name='RequestHeaders', description='The HTTP request header.'),
        targetUrl?: string(name='TargetUrl', description='The URL for synthetic monitoring.', example='http://127.0.0.1:8090/api/list'),
        timeout?: long(name='Timeout', description='The timeout period. Unit: milliseconds. Default value: 10000. Minimum value: 1000. Maximum value: 300000.', example='10000'),
      }(name='ApiHTTP', description='The HTTP(S) synthetic test parameters.'),
      fileDownload?: {
        connectionTimeout?: long(name='ConnectionTimeout', description='The connection timeout period. Unit: milliseconds. Minimum value: 1000. Maximum value: 120000. Default value: 5000.', example='5000'),
        customHeaderContent?: map[string]string(name='CustomHeaderContent', description='The content of the custom request header.'),
        downloadKernel?: long(name='DownloadKernel', description='The kernel type.

*   1: curl
*   0: WinInet', example='0'),
        ignoreCertificateAuthError?: int32(name='IgnoreCertificateAuthError', description='Specifies whether to ignore CA certificate authentication errors. 0: No. 1: Yes. Default value: 1.', example='0'),
        ignoreCertificateCanceledError?: int32(name='IgnoreCertificateCanceledError', description='Specifies whether to ignore certificate revocation errors. 0: No. 1: Yes. Default value: 1.', example='0'),
        ignoreCertificateOutOfDateError?: int32(name='IgnoreCertificateOutOfDateError', description='Specifies whether to ignore certificate invalidity. 0: No. 1: Yes. Default value: 1.', example='0'),
        ignoreCertificateStatusError?: int32(name='IgnoreCertificateStatusError', description='Specifies whether to ignore certificate status errors. 0: No. 1: Yes. Default value: 1.', example='0'),
        ignoreCertificateUntrustworthyError?: int32(name='IgnoreCertificateUntrustworthyError', description='Specifies whether to ignore certificate incredibility. 0: No. 1: Yes. Default value: 1.', example='0'),
        ignoreCertificateUsingError?: int32(name='IgnoreCertificateUsingError', description='Specifies whether to ignore certificate usage errors. 0: No. 1: Yes. Default value: 1.', example='0'),
        ignoreInvalidHostError?: int32(name='IgnoreInvalidHostError', description='Specifies whether to ignore host invalidity. 0: No. 1: Yes. Default value: 1.', example='0'),
        monitorTimeout?: long(name='MonitorTimeout', description='The monitoring timeout period. Unit: milliseconds. Minimum value: 1000. Maximum value: 120000. Default value: 60000.', example='6000'),
        quickProtocol?: long(name='QuickProtocol', description='The QUIC protocol type.

*   1: http1
*   2: http2
*   3: http3', example='1'),
        redirection?: int32(name='Redirection', description='Specifies whether to support redirection. 0: No. 1: Yes. Default value: 1.', example='0'),
        targetUrl?: string(name='TargetUrl', description='The file download URL.', example='https://********'),
        transmissionSize?: long(name='TransmissionSize', description='The maximum file size of a single transfer. Unit: KB. Minimum value: 1. Maximum value: 20480. Valid values: 2048.', example='2048'),
        validateKeywords?: string(name='ValidateKeywords', description='验证关键词。', example='success'),
        verifyWay?: int32(name='VerifyWay', description='验证方式。

- 0：不验证 
- 1：验证字符串 
- 2：MD5验证', example='0'),
        whiteList?: string(name='WhiteList', description='DNS劫持白名单。匹配规则支持IP、IP通配符、子网掩码和CNAME，可以填写多个匹配规则，多个匹配规则以竖线（|）隔开。例如：www.aliyun.com:203.0.3.55|203.3.44.67，表示www.aliyun.com域名下除203.0.3.55和203.3.44.67之外的其他IP都是被劫持的。', example='www.aliyun.com:203.0.3.55|203.3.44.67'),
      }(name='FileDownload', description='The file download parameters.'),
      netDNS?: {
        dnsServerIpType?: int32(name='DnsServerIpType', description='The IP version of the DNS server. 0: IPv4. 1: IPv6. 2: A version is automatically selected. Default value: 0.', example='0'),
        nsServer?: string(name='NsServer', description='The IP address of the DNS server. Default value: 114.114.114.114.', example='114.114.114.114'),
        queryMethod?: int32(name='QueryMethod', description='The DNS query. 0: recursive, 1: iterative. Default value: 0.', example='0'),
        targetUrl?: string(name='TargetUrl', description='The destination domain name.', example='www.aliyun.com'),
        timeout?: long(name='Timeout', description='The timeout period for the DNS synthetic test. Unit: milliseconds. The minimum value is 1000 and the maximum value is 45000. Default value: 5000.', example='5000'),
      }(name='NetDNS', description='The DNS synthetic test parameters. This parameter is required if the TaskType parameter is set to 3.'),
      netICMP?: {
        interval?: int32(name='Interval', description='The interval at which ICMP packets are sent. Unit: milliseconds. Minimum value: 200. Maximum value: 2000. Default value: 200.', example='200'),
        packageNum?: int32(name='PackageNum', description='The number of ICMP packets that are sent. Minimum value: 1. Maximum value: 50. Default value: 4.', example='4'),
        packageSize?: int32(name='PackageSize', description='The size of each ICMP packet. Unit: bytes. Valid values: 32, 64, 128, 256, 512, 1024.', example='1024'),
        splitPackage?: boolean(name='SplitPackage', description='Specifies whether to split ICMP packets. Default value: true.', example='true'),
        targetUrl?: string(name='TargetUrl', description='The destination host IP address or domain name', example='www.aliyun.com'),
        timeout?: long(name='Timeout', description='The timeout period for the TCP synthetic test. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 20000.', example='2000'),
        tracertEnable?: boolean(name='TracertEnable', description='Specifies whether to enable the tracert command. Default value: true.', example='true'),
        tracertNumMax?: int32(name='TracertNumMax', description='The maximum number of hops for tracert. Minimum value: 1. Maximum value: 128. Default value: 64.', example='64'),
        tracertTimeout?: long(name='TracertTimeout', description='The timeout period of tracert. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 60000.', example='60000'),
      }(name='NetICMP', description='The ICMP synthetic test parameters. This parameter is required if the TaskType parameter is set to 1.'),
      netTCP?: {
        connectTimes?: int32(name='ConnectTimes', description='The number of TCP connections that are established in a test. Minimum value: 1. Maximum value: 16. Default value: 4.', example='4'),
        interval?: long(name='Interval', description='The interval at which TCP connections are established. Unit: milliseconds. Minimum value: 200. Maximum value: 10000. Default value: 200.', example='200'),
        targetUrl?: string(name='TargetUrl', description='The destination host IP address.', example='127.0.0.1:8888'),
        timeout?: long(name='Timeout', description='The timeout period for the TCP synthetic test. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 20000.', example='20000'),
        tracertEnable?: boolean(name='TracertEnable', description='Specifies whether to enable the tracert command. Default value: true.', example='true'),
        tracertNumMax?: int32(name='TracertNumMax', description='The maximum number of hops for tracert. Minimum value: 1. Maximum value: 128. Default value: 20.', example='20'),
        tracertTimeout?: long(name='TracertTimeout', description='The timeout period of tracert. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 60000.', example='60000'),
      }(name='NetTCP', description='The TCP synthetic tests parameters. This parameter is required if the TaskType parameter is set to 2.'),
      stream?: {
        customHeaderContent?: map[string]string(name='CustomHeaderContent', description='自定义header，JSON Map格式。'),
        playerType?: int32(name='PlayerType', description='播放器，不传默认12。

- 12：VLC
- 2：FlashPlayer', example='12'),
        streamAddressType?: int32(name='StreamAddressType', description='资源地址类型：

- 1：资源地址。
- 0：页面地址。不传默认0。', example='0'),
        streamMonitorTimeout?: int32(name='StreamMonitorTimeout', description='监测时长，单位秒，最长支持60s，不传默认60。', example='30'),
        streamType?: int32(name='StreamType', description='音视频标志：0-视频，1-音频。', example='0'),
        targetUrl?: string(name='TargetUrl', description='流媒体资源地址。', example='http://www.aliyun.com/stream/test.mp4'),
        whiteList?: string(name='WhiteList', description='DNS劫持白名单。匹配规则支持IP、IP通配符、子网掩码和CNAME，可以填写多个匹配规则，多个匹配规则以竖线（|）隔开。例如：www.aliyun.com:203.0.3.55|203.3.44.67，表示www.aliyun.com域名下除203.0.3.55和203.3.44.67之外的其他IP都是被劫持的。', example='www.aliyun.com:203.0.3.55|203.3.44.67'),
      }(name='Stream', description='流媒体拨测配置。'),
      website?: {
        automaticScrolling?: int32(name='AutomaticScrolling', description='Specifies whether to automatically scroll up and down the screen to load a page. 0: No. 1: Yes. Default value: 0.', example='0'),
        customHeader?: int32(name='CustomHeader', description='Specifies whether to create a custom header. 0: No. 1: The first packet is modified. 2: All packets are modified. Default value: 0.', example='0'),
        customHeaderContent?: map[string]string(name='CustomHeaderContent', description='The custom header. Format: JSON map.'),
        DNSHijackWhitelist?: string(name='DNSHijackWhitelist', description='域名（例如www.aliyun.com）解析时，解析出的IP地址或者CNAME不在DNS劫持白名单内，用户就会访问失败或者返回一个非Aliyun的目标IP；若解析结果中的IP或者CNAME在DNS白名单内，则会被认定为没有发生DNS劫持。

填写格式：域名:匹配规则。匹配规则支持IP、IP通配符、子网掩码和CNAME，可以填写多个匹配规则，多个匹配规则以竖线（|）隔开。例如：www.aliyun.com:203.0.3.55|203.3.44.67，表示www.aliyun.com域名下除203.0.3.55和203.3.44.67之外的其他IP都是被劫持的。', example='www.aliyun.com:203.0.3.55|203.3.44.67'),
        disableCache?: int32(name='DisableCache', description='Specifies whether to disable the cache. 0: No. 1: Yes. Default value: 1.', example='1'),
        disableCompression?: int32(name='DisableCompression', description='Specifies whether to accept compressed files based on the HTTP Accept-Encoding request header. 0: No. 1: Yes. Default value: 0.', example='0'),
        elementBlacklist?: string(name='ElementBlacklist', description='在页面加载过程中如果出现元素黑名单中配置的元素，不会请求加载该元素 。', example='www.example.com/a.jpg'),
        filterInvalidIP?: int32(name='FilterInvalidIP', description='Specifies whether to exclude invalid IP addresses.

*   1: No
*   0: Yes', example='0'),
        flowHijackJumpTimes?: int32(name='FlowHijackJumpTimes', description='识别元素：设置浏览页面元素总个数。', example='0'),
        flowHijackLogo?: string(name='FlowHijackLogo', description='劫持标识：设置匹配的关键信息。填写劫持判断关键字或关键元素，允许带星号（*）。', example='aliyun'),
        ignoreCertificateError?: int32(name='IgnoreCertificateError', description='Specifies whether to ignore SSL certificate errors during browsing. 0: No. 1: Yes. Default value: 1.', example='0'),
        monitorTimeout?: int32(name='MonitorTimeout', description='The monitoring timeout period. Unit: milliseconds. Default value: 20000. Minimum value: 5000. Maximum value: 300000.', example='20000'),
        pageTamper?: string(name='PageTamper', description='监测页面出现了域名设置之外的元素都属于页面被篡改。常见的表现形式为弹出广告、浮动广告、跳转等。

填写格式：域名:元素。元素支持填写通配符，可以填写多个元素，多个元素以竖线（|）隔开。例如：www.aliyun.com:|/cc/bb/a.gif|/vv/bb/cc.jpg，表示www.aliyun.com域名下除基础文档、/cc/bb/a.gif和/vv/bb/cc.jpg之外的其他元素都属于页面被篡改。', example='www.aliyun.com:|/cc/bb/a.gif|/vv/bb/cc.jpg'),
        redirection?: int32(name='Redirection', description='Specifies whether to continue browsing after redirection. 0: No, 1:Yes. Default value: 1.', example='1'),
        slowElementThreshold?: long(name='SlowElementThreshold', description='The time threshold that is used to define a slow element. Unit: milliseconds. Default value: 5000. Minimum value: 1. Maximum value: 300000.', example='5000'),
        targetUrl?: string(name='TargetUrl', description='The destination URL.', example='http://www.aliyun.com'),
        verifyStringBlacklist?: string(name='VerifyStringBlacklist', description='验证字符串即监测页面源代码中的某个任意字符串。若客户端返回的源码中包含任一黑名单中的字符串则报650验证字符串失败的错误。多个字符串以竖线（|）隔开。', example='error'),
        verifyStringWhitelist?: string(name='VerifyStringWhitelist', description='验证字符串即监测页面源代码中的某个任意字符串。客户端返回的源码必须包含所有白名单中的字符串，否则报650验证字符串失败的错误。多个字符串以竖线（|）隔开。', example='success'),
        waitCompletionTime?: long(name='WaitCompletionTime', description='The maximum waiting time. Unit: milliseconds. Default value: 5000. Minimum value: 5000. Maximum value: 300000.', example='5000'),
      }(name='Website', description='The website-speed measurement parameters.'),
    }(name='MonitorConf', description='The monitoring configurations.'),
    monitors?: [ 
      {
        cityCode?: string(name='CityCode', description='The city code.', example='110100'),
        clientType?: int32(name='ClientType', description='The client type of the monitoring point. Valid values: 1: data center. 2: Internet. 3: mobile device. 4: ECS instance.', example='1'),
        operatorCode?: string(name='OperatorCode', description='The carrier code.', example='1'),
      }
    ](name='Monitors', description='The list of monitoring points.'),
    name?: string(name='Name', description='The name of the task.', example='AlibabaCloud DNS Task'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='default'),
    status?: string(name='Status', description='CREATING: The task is being created. RUNNING: The task is running. PARTIAL_RUNNING: The task is partially running. STOP: The task is stopped. LIMIT_STOP: The task is stopped due to quota insufficiency. EXCEPTION: The task is abnormal. DELETE: The task is deleted. DELETE_EXCEPTION: The task failed to be deleted.', example='RUNNING'),
    tags?: [ 
      {
        key?: string(name='Key', description='The key of the tag.', example='user1'),
        value?: string(name='Value', description='The value of the tag.', example='myweb'),
      }
    ](name='Tags', description='The tag.'),
    taskId?: string(name='TaskId', description='The ID of the synthetic monitoring task.', example='5308a2691f59422c8c3b7aeccec9cd3b'),
    taskType?: int32(name='TaskType', description='The type of the task. Valid values:

ICMP TCP DNS HTTP Website speed measurement File download', example='5'),
  }(name='Data', description='The struct returned.'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='E13430A6-57A9-56E9-9D8D-28FE8DEBCA40'),
}

model GetTimingSyntheticTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTimingSyntheticTaskResponseBody(name='body'),
}

async function getTimingSyntheticTaskWithOptions(request: GetTimingSyntheticTaskRequest, runtime: Util.RuntimeOptions): GetTimingSyntheticTaskResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTimingSyntheticTask',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTimingSyntheticTask(request: GetTimingSyntheticTaskRequest): GetTimingSyntheticTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTimingSyntheticTaskWithOptions(request, runtime);
}

model GetTraceRequest {
  endTime?: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.

> If the ID of the trace is 30 characters in length, this parameter is optional. Otherwise, this parameter is required.', example='1623827603000'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. Unit: milliseconds.

> If the ID of the trace is 30 characters in length, this parameter is optional. Otherwise, this parameter is required.', example='1623827602000'),
  traceID?: string(name='TraceID', description='The trace ID. You can log on to the ARMS console and obtain the trace ID on the **Trace Query** page or **Interface Snapshot** tab.', example='ac14001a15954493811405707d****'),
}

model GetTraceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='6A9AEA84-7186-4D8D-B498-4585C6A2****'),
  spans?: [ 
    {
      children?: [  map[string]any ](name='Children', description='The child spans of the current span.'),
      duration?: long(name='Duration', description='The amount of time consumed by the trace. Unit: milliseconds.', example='1000'),
      haveStack?: boolean(name='HaveStack', description='Indicates whether a method stack was provided.

*   `true`: A method stack was provided.
*   `false`: No method stack was provided.', example='false'),
      logEventList?: [ 
        {
          tagEntryList?: [ 
            {
              key?: string(name='Key', description='The key of the tag.', example='http.status.code'),
              value?: string(name='Value', description='The value of the tag.', example='200'),
            }
          ](name='TagEntryList', description='The tags of the trace.'),
          timestamp?: long(name='Timestamp', description='The timestamp when the log event was generated.', example='1590388651'),
        }
      ](name='LogEventList', description='The log events in the trace.'),
      operationName?: string(name='OperationName', description='The name of the traced span.', example='/api/demo'),
      parentSpanId?: string(name='ParentSpanId', description='The ID of the parent span.', example='18'),
      resultCode?: string(name='ResultCode', description='The status code.', example='222'),
      rpcId?: string(name='RpcId', description='The ID of the RPC mode.', example='0'),
      rpcType?: int32(name='RpcType', description='The type of the remote procedure call (RPC) mode.

- 0 http
- 25 http_client
- 1 hsf_client
- 2 hsf
- 40 local
- 41 async
- 52 DB2
- 53 Informix
- 54 SequoiaDB
- 55 Gbase
- 56 GaussDB
- 57 KingBase
- 58 infuxdb
- 59 clickhouse
- 60 mysql
- 61 mysql
- 62 oracle
- 63 postgresql
- 64 mongodb
- 65 ppas
- 66 sqlserver
- 67 mariadb
- 68 dmdb
- 69 oceanbase
- 70 redis
- 71 memcached
- 72 elasticsearch
- 73 kudu
- 4 tddl
- 5 tair
- 13 mq_client
- 252 mq
- 23 kafka_client
- 256 kafka
- 3 notify_client
- 254 notify
- 7 dubbo_client
- 8 dubbo
- 11 dsf_client
- 12 dsf
- 9 grpc
- 10 grpc_client
- 16 thrift
- 17 thrift_client
- 18 sofa
- 19 sofa_client
- -1 unknown
- 98 user_method
- 100 root
- 101 client
- 102 server
- 103 producer
- 104 consumer
- 105 db
- 106 xtrace_other
- 1301 schedulerx
- 1302 XXL_Job
- 1303 Spring_Scheduled
- 1304 Quartz
- 1305 ElasticJob
- 1308 Jdk_Timer', example='1'),
      serviceIp?: string(name='ServiceIp', description='The IP address of the host where the application resides.', example='172.20.XX.XX'),
      serviceName?: string(name='ServiceName', description='The name of the application.', example='arms-demo'),
      spanId?: string(name='SpanId', description='The span ID.', example='1234'),
      tagEntryList?: [ 
        {
          key?: string(name='Key', description='The key of the tag.', example='http.status.code'),
          value?: string(name='Value', description='The value of the tag.', example='200'),
        }
      ](name='TagEntryList', description='The tags of the trace.'),
      timestamp?: long(name='Timestamp', description='The timestamp generated when the span was generated.', example='1590388651'),
      traceID?: string(name='TraceID', description='The trace ID.', example='ac14001a15954493811405707d****'),
    }
  ](name='Spans', description='The details of the trace.'),
}

model GetTraceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTraceResponseBody(name='body'),
}

/**
  * > You must use Application Real-Time Monitoring Service (ARMS) SDK for Java V2.7.24.
  *
  * @param request GetTraceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetTraceResponse
 */
async function getTraceWithOptions(request: GetTraceRequest, runtime: Util.RuntimeOptions): GetTraceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.traceID)) {
    query['TraceID'] = request.traceID;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTrace',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You must use Application Real-Time Monitoring Service (ARMS) SDK for Java V2.7.24.
  *
  * @param request GetTraceRequest
  * @return GetTraceResponse
 */
async function getTrace(request: GetTraceRequest): GetTraceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTraceWithOptions(request, runtime);
}

model GetTraceAppRequest {
  pid?: string(name='Pid', description='The process identifier (PID) of the application. For more information about how to obtain the PID, see [Obtain the PID of an application](https://www.alibabacloud.com/help/zh/doc-detail/186100.htm?spm=a2cdw.13409063.0.0.7a72281f0bkTfx#title-imy-7gj-qhr).', example='b590lhguqs@d8deedfa9bf****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The list of tags.'),
}

model GetTraceAppResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D80ADAAC-8C32-5479-BD14-C28CF832****'),
  traceApp?: {
    appId?: long(name='AppId', description='The application ID.', example='123'),
    appName?: string(name='AppName', description='The name of the application.', example='arms-k8s-demo'),
    createTime?: long(name='CreateTime', description='The timestamp generated when the task was created.', example='1576599253000'),
    labels?: [ string ](name='Labels', description='The aliases of the application.'),
    pid?: string(name='Pid', description='The process identifier (PID) of the application.', example='b590lhguqs@d8deedfa9bf****'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****'),
    show?: boolean(name='Show', description='Indicates whether the application is displayed in the Application Real-Time Monitoring Service (ARMS) console. Valid values:

*   `true`: yes
*   `false`: no', example='true'),
    source?: string(name='Source', description='The source of the application.', example='ACSK8S'),
    tags?: [ 
      {
        key?: string(name='Key', description='The tag key.', example='TestKey'),
        value?: string(name='Value', description='The tag value.', example='TestValue'),
      }
    ](name='Tags', description='A list of key-value pairs.'),
    type?: string(name='Type', description='The type of the monitoring task. Valid values:

*   `TRACE`: Application Monitoring
*   `RETCODE`: Browser Monitoring', example='TRACE'),
    updateTime?: long(name='UpdateTime', description='The timestamp generated when the task information was updated.', example='1635700348000'),
    userId?: string(name='UserId', description='The user ID.', example='113197164949****'),
  }(name='TraceApp', description='The information about the array object.'),
}

model GetTraceAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTraceAppResponseBody(name='body'),
}

async function getTraceAppWithOptions(request: GetTraceAppRequest, runtime: Util.RuntimeOptions): GetTraceAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pid)) {
    query['Pid'] = request.pid;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTraceApp',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTraceApp(request: GetTraceAppRequest): GetTraceAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTraceAppWithOptions(request, runtime);
}

model ImportAppAlertRulesRequest {
  contactGroupIds?: string(name='ContactGroupIds', description='The IDs of the alert contact groups. The value must be a JSON array.', example='[123, 234]'),
  isAutoStart?: boolean(name='IsAutoStart', description='Specifies whether to enable the alert rule after it is created. Default value: `false`.

*   `true`: enables the alert rule.
*   `false`: disables the alert rule.', example='true'),
  pids?: string(name='Pids', description='The process identifiers (PIDs) of the applications associated with the alert rule. The value must be a JSON array. For more information about how to obtain the PID, see [Obtain the PID of an application](~~186100#section-bkl-3j6-ezg~~).', example='["atc889zkcf@d8deedfa9bfxxxx", "acd129bfcf@d5daebfa6cdxxxx"]'),
  regionId?: string(name='RegionId', description='The ID of the region where the associated applications reside.', example='cn-hangzhou'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='type'),
      value?: string(name='Value', description='The tag value.', example='prod'),
    }
  ](name='Tags', description='The list of tags.'),
  templageAlertConfig?: string(name='TemplageAlertConfig', description='The configurations of the alert template based on which you want to create an alert rule. The value must be a JSON string. You must set at least one of the **TemplateAlertId** and **TemplageAlertConfig** parameters. If you set both parameters, the **TemplateAlertId** parameter prevails. For more information about the TemplageAlertConfig parameter, see the following **additional information about the TemplageAlertConfig parameter**.', example='[ { "contactGroupIds": "381", "alertType": 5, "alarmContext": { "subTitle": "", "content": "Alarm name: $alarm name\\nFilter condition: $filter\\nAlarm time : $Alarm time\\nAlarm content: $Alarm content\\nNote: Before the recovery email is received, the alarm is in continuous alarm, and you will be reminded again after 24 hours!" }, "alertLevel": "WARN", " metricParam": { "appId": "70901", "pid": "atc889zkcf@d8deedfa9bf****", "type": "TXN", "dimensions": [ { "type": "STATIC", "value ": "\\\\/hello_test_api_address\\\\/test1", "key": "rpc" } ] }, "alertWay": [ "SMS", "MAIL", "DING_ROBOT" ], "alertRule": { "rules" : [ { "measure": "appstat.txn.rt", "alias": "Entry call response time_ms", "aggregates": "AVG", "nValue": 1, "value": 1, "operator ": "CURRENT_GTE" } ], "operator": "|" }, "title": "Alarm template alarm name", "config": "{\\"continuous\\":false,\\"dataRevision\\":2, \\"ownerId\\":\\"123412341234\\"}", "notice": { "noticeStartTime": 1480521600000, "startTime": 1480521600000, "endTime": 1480607940000, "noticeEndTime": 1480607940000 }, "stat us": "NON " } ]'),
  templateAlertId?: string(name='TemplateAlertId', description='The ID of the alert template. You must set at least one of the **TemplateAlertId** and **TemplageAlertConfig** parameters. If you set both parameters, the **TemplateAlertId** parameter prevails.', example='324324234'),
}

model ImportAppAlertRulesResponseBody = {
  data?: string(name='Data', description='The ID of the alert rule.', example='[12174**]'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
}

model ImportAppAlertRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportAppAlertRulesResponseBody(name='body'),
}

/**
  * >  You can call the **ImportAppAlertRules** operation to import only the alert rules that are generated by Application Real-Time Monitoring Service (ARMS) for application monitoring and browser monitoring. This operation cannot be used to import custom alert rules, alert rules for Prometheus monitoring, or default emergency alert rules.
  *
  * @param request ImportAppAlertRulesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ImportAppAlertRulesResponse
 */
async function importAppAlertRulesWithOptions(request: ImportAppAlertRulesRequest, runtime: Util.RuntimeOptions): ImportAppAlertRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactGroupIds)) {
    query['ContactGroupIds'] = request.contactGroupIds;
  }
  if (!Util.isUnset(request.isAutoStart)) {
    query['IsAutoStart'] = request.isAutoStart;
  }
  if (!Util.isUnset(request.pids)) {
    query['Pids'] = request.pids;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  if (!Util.isUnset(request.templageAlertConfig)) {
    query['TemplageAlertConfig'] = request.templageAlertConfig;
  }
  if (!Util.isUnset(request.templateAlertId)) {
    query['TemplateAlertId'] = request.templateAlertId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportAppAlertRules',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  You can call the **ImportAppAlertRules** operation to import only the alert rules that are generated by Application Real-Time Monitoring Service (ARMS) for application monitoring and browser monitoring. This operation cannot be used to import custom alert rules, alert rules for Prometheus monitoring, or default emergency alert rules.
  *
  * @param request ImportAppAlertRulesRequest
  * @return ImportAppAlertRulesResponse
 */
async function importAppAlertRules(request: ImportAppAlertRulesRequest): ImportAppAlertRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return importAppAlertRulesWithOptions(request, runtime);
}

model InitEnvironmentRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values: zh and en. Default value: zh.', example='zh'),
  environmentId?: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxx'),
  managedType?: string(name='ManagedType', description='type of managed:
- none: not managed. default value of prometheus for ACK.
- agent: managed agent. default value of promehtues for ASK/ACS/AckOne.
- agent-exproter: maanged agent and exporter. default of prometheus for Cloud.', example='agent'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model InitEnvironmentResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The result of the operation.', example='success'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='4D6C358A-A58B-4F4B-94CE-F5AAF023****'),
}

model InitEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitEnvironmentResponseBody(name='body'),
}

async function initEnvironmentWithOptions(request: InitEnvironmentRequest, runtime: Util.RuntimeOptions): InitEnvironmentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunLang)) {
    query['AliyunLang'] = request.aliyunLang;
  }
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.managedType)) {
    query['ManagedType'] = request.managedType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InitEnvironment',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function initEnvironment(request: InitEnvironmentRequest): InitEnvironmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return initEnvironmentWithOptions(request, runtime);
}

model InstallAddonRequest {
  addonVersion?: string(name='AddonVersion', description='Version of Addon.', example='0.0.1'),
  aliyunLang?: string(name='AliyunLang', description='Locale, the default is Chinese zh.', example='zh'),
  dryRun?: boolean(name='DryRun', description='Whether to test run. The default value is false.', example='false'),
  environmentId?: string(name='EnvironmentId', description='Environment ID.', example='env-xxx'),
  name?: string(name='Name', description='Name of Addon.', example='mysql'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  releaseName?: string(name='ReleaseName', description='The release name after installation, if not specified, generates the default rule name.', example='mysql-xxxxx'),
  values?: string(name='Values', description='Config information.', example='{"host":"mysql-service.default","port":3306,"username":"root","password":"roots"}'),
}

model InstallAddonResponseBody = {
  code?: int32(name='Code', description='Status code: 200 indicates success.', example='200'),
  data?: {
    addonName?: string(name='AddonName', description='Addon name.', example='mysql'),
    alertRuleCount?: long(name='AlertRuleCount', description='Number of alarm groups.', example='1'),
    conditions?: [ 
      {
        firstTransitionTime?: string(name='FirstTransitionTime', description='First transition time.', example='2018-01-31T14:32:19Z'),
        lastTransitionTime?: string(name='LastTransitionTime', description='Last transition time.', example='2018-01-31T14:32:19Z'),
        message?: string(name='Message', description='Details.', example='xxxx'),
        reason?: string(name='Reason', description='Reason of failure.', example='xxxx'),
        status?: string(name='Status', description='Condition status.', example='True'),
        type?: string(name='Type', description='Condition type.', example='Loaded'),
      }
    ](name='Conditions', description='Condition list.'),
    createTime?: string(name='CreateTime', description='Created time.', example='2023-09-22T16:56:29+08:00'),
    dashboardCount?: long(name='DashboardCount', description='Number of dashboard.', example='1'),
    environmentId?: string(name='EnvironmentId', description='Environment ID.', example='env-xxxx'),
    exporterCount?: long(name='ExporterCount', description='Number of Exporter.', example='2'),
    haveConfig?: boolean(name='HaveConfig', description='Whether there is configuration.', example='true'),
    installUserId?: string(name='InstallUserId', description='User ID of the installation.', example='123456'),
    language?: string(name='Language', description='Language.', example='zh'),
    managed?: boolean(name='Managed'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-heyuan'),
    releaseId?: string(name='ReleaseId', description='Release ID.', example='be29c093-3fd6-4fb6-9430-797030cc183a'),
    releaseName?: string(name='ReleaseName', description='Name of Release.', example='mysql-1695372983039'),
    scene?: string(name='Scene', description='Scene.', example='database'),
    status?: string(name='Status', description='Status of Release.', example='0'),
    updateTime?: string(name='UpdateTime', description='Update time.', example='2023-09-22T16:56:29+08:00'),
    userId?: string(name='UserId', description='User ID.', example='111'),
    version?: string(name='Version', description='The version number.', example='0.0.1'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   `true`: The call was successful.
*   `false`: The call failed.', example='true'),
}

model InstallAddonResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InstallAddonResponseBody(name='body'),
}

async function installAddonWithOptions(request: InstallAddonRequest, runtime: Util.RuntimeOptions): InstallAddonResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addonVersion)) {
    query['AddonVersion'] = request.addonVersion;
  }
  if (!Util.isUnset(request.aliyunLang)) {
    query['AliyunLang'] = request.aliyunLang;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.releaseName)) {
    query['ReleaseName'] = request.releaseName;
  }
  if (!Util.isUnset(request.values)) {
    query['Values'] = request.values;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InstallAddon',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function installAddon(request: InstallAddonRequest): InstallAddonResponse {
  var runtime = new Util.RuntimeOptions{};
  return installAddonWithOptions(request, runtime);
}

model InstallCmsExporterRequest {
  clusterId?: string(name='ClusterId', example='cc7a37ee31aea4ed1a059eff8034b****'),
  cmsArgs?: string(name='CmsArgs', example='hologres#cen'),
  directArgs?: string(name='DirectArgs', example='hologres#cen'),
  enableTag?: boolean(name='EnableTag', example='false'),
  regionId?: string(name='RegionId', example='cn-beijing'),
}

model InstallCmsExporterResponseBody = {
  data?: string(name='Data', example='success'),
  requestId?: string(name='RequestId', example='E7A04B0D-E2CA-59BB-8A9D-D5D349C22BF1'),
}

model InstallCmsExporterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InstallCmsExporterResponseBody(name='body'),
}

/**
  * @deprecated : InstallCmsExporter is deprecated, please use ARMS::2019-08-08::InstallAddon instead.
  *
  * @param request InstallCmsExporterRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return InstallCmsExporterResponse
 */
// Deprecated
async function installCmsExporterWithOptions(request: InstallCmsExporterRequest, runtime: Util.RuntimeOptions): InstallCmsExporterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.cmsArgs)) {
    query['CmsArgs'] = request.cmsArgs;
  }
  if (!Util.isUnset(request.directArgs)) {
    query['DirectArgs'] = request.directArgs;
  }
  if (!Util.isUnset(request.enableTag)) {
    query['EnableTag'] = request.enableTag;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InstallCmsExporter',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated : InstallCmsExporter is deprecated, please use ARMS::2019-08-08::InstallAddon instead.
  *
  * @param request InstallCmsExporterRequest
  * @return InstallCmsExporterResponse
 */
// Deprecated
async function installCmsExporter(request: InstallCmsExporterRequest): InstallCmsExporterResponse {
  var runtime = new Util.RuntimeOptions{};
  return installCmsExporterWithOptions(request, runtime);
}

model InstallEnvironmentFeatureRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values: zh and en. Default value: zh.', example='zh'),
  config?: string(name='Config', description='The metadata of the feature.', example='{\\"continuous\\":true,\\"dataRevision\\":2}'),
  environmentId?: string(name='EnvironmentId', description='The environment ID.', example='env-xxx'),
  featureName?: string(name='FeatureName', description='The name of the feature.

Valid values:

*   app-agent-pilot

    <!-- -->

    <!-- -->

    <!-- -->

*   metric-agent

    <!-- -->

    <!-- -->

    <!-- -->', example='metric-agent'),
  featureVersion?: string(name='FeatureVersion', description='The version of the feature.', example='1.1.17'),
  region?: string(name='Region', description='The region ID of the feature.', example='cn-shenzhen'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model InstallEnvironmentFeatureResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The release ID.', example='83FCC44C-A056-18AF-A902-7043E723F0D9'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4C518054-852F-4023-ABC1-4AF95FF7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model InstallEnvironmentFeatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InstallEnvironmentFeatureResponseBody(name='body'),
}

async function installEnvironmentFeatureWithOptions(request: InstallEnvironmentFeatureRequest, runtime: Util.RuntimeOptions): InstallEnvironmentFeatureResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunLang)) {
    query['AliyunLang'] = request.aliyunLang;
  }
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.featureName)) {
    query['FeatureName'] = request.featureName;
  }
  if (!Util.isUnset(request.featureVersion)) {
    query['FeatureVersion'] = request.featureVersion;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InstallEnvironmentFeature',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function installEnvironmentFeature(request: InstallEnvironmentFeatureRequest): InstallEnvironmentFeatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return installEnvironmentFeatureWithOptions(request, runtime);
}

model InstallManagedPrometheusRequest {
  clusterId?: string(name='ClusterId', description='The ID of the ACK cluster.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  clusterName?: string(name='ClusterName', description='The name of the ECS instance. If you set the ClusterType parameter to ecs, you must configure this parameter.', example='prd-ecs'),
  clusterType?: string(name='ClusterType', description='The cluster type.

Valid values:

*   ecs

    <!-- -->

    <!-- -->

    <!-- -->

*   one

    <!-- -->

    <!-- -->

    <!-- -->

*   ask

    <!-- -->

    <!-- -->

    <!-- -->

*   pro

    <!-- -->

    <!-- -->

    <!-- -->', example='ask'),
  grafanaInstanceId?: string(name='GrafanaInstanceId', description='The ID of the Grafana workspace used by the ASK cluster or ECS instance. If you set the value to free or leave the parameter empty, a shared Grafana workspace is used.', example='grafana-bp1*****'),
  kubeConfig?: string(name='KubeConfig', description='This parameter is not supported.', example='-'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Prometheus instance belongs.', example='rg-acfmxyexli2****'),
  securityGroupId?: string(name='SecurityGroupId', description='The security group of the ASK cluster or ECS instance.', example='sg-bp1********'),
  vSwitchId?: string(name='VSwitchId', description='The vSwitch used by the ASK cluster or ECS instance.', example='vsw-bp1*********'),
  vpcId?: string(name='VpcId', description='The virtual private cloud (VPC) where the ASK cluster or ECS instance resides.', example='vpc-xxxxxx'),
}

model InstallManagedPrometheusResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  data?: string(name='Data', description='The response content. The status of the Prometheus instance is returned.', example='success'),
  message?: string(name='Message', description='The error message returned if the Prometheus instance fails to be created.', example='vpcId is blank'),
  requestId?: string(name='RequestId', description='The request ID.', example='String	2A0CEDF1-06FE-44AC-8E21-21A5BE65****'),
  success?: boolean(name='Success', description='Indicates whether the Prometheus instance was created.', example='true'),
}

model InstallManagedPrometheusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InstallManagedPrometheusResponseBody(name='body'),
}

/**
  * If you call the operation to monitor an ASK cluster or an ECS instance, a Prometheus agent is installed in the ASK cluster or ECS instance. Make sure that the ASK cluster or ECS instance has no Prometheus agent installed in advance.
  *
  * @param request InstallManagedPrometheusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return InstallManagedPrometheusResponse
 */
async function installManagedPrometheusWithOptions(request: InstallManagedPrometheusRequest, runtime: Util.RuntimeOptions): InstallManagedPrometheusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.clusterType)) {
    query['ClusterType'] = request.clusterType;
  }
  if (!Util.isUnset(request.grafanaInstanceId)) {
    query['GrafanaInstanceId'] = request.grafanaInstanceId;
  }
  if (!Util.isUnset(request.kubeConfig)) {
    query['KubeConfig'] = request.kubeConfig;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InstallManagedPrometheus',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If you call the operation to monitor an ASK cluster or an ECS instance, a Prometheus agent is installed in the ASK cluster or ECS instance. Make sure that the ASK cluster or ECS instance has no Prometheus agent installed in advance.
  *
  * @param request InstallManagedPrometheusRequest
  * @return InstallManagedPrometheusResponse
 */
async function installManagedPrometheus(request: InstallManagedPrometheusRequest): InstallManagedPrometheusResponse {
  var runtime = new Util.RuntimeOptions{};
  return installManagedPrometheusWithOptions(request, runtime);
}

model ListActivatedAlertsRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: `1`.', example='1'),
  filter?: string(name='Filter', description='The filter condition in the `{"key":"value"}`format. You must specify the `key` and `value` of the filter condition.', example='{"alertname":"Container CPU usage is greater than 80%"}'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: `10`.', example='10'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model ListActivatedAlertsResponseBody = {
  page?: {
    alerts?: [ 
      {
        alertId?: string(name='AlertId', description='The ID of the alert rule.', example='3888704'),
        alertName?: string(name='AlertName', description='The name of the alert rule.', example='Container CPU usage is greater than 80%'),
        alertType?: string(name='AlertType', description='The type of the alert.', example='PROMETHEUS_MONITORING_ALERT_RULE'),
        count?: int32(name='Count', description='The number of times that the alert event was received.', example='598'),
        createTime?: long(name='CreateTime', description='The timestamp when the alert rule was created.', example='1616466300000'),
        dispatchRules?: [ 
          {
            ruleId?: int32(name='RuleId', description='The ID of the notification policy.', example='7021'),
            ruleName?: string(name='RuleName', description='The name of the notification policy.', example='NotificationPolicy1'),
          }
        ](name='DispatchRules', description='The notification policies.'),
        endsAt?: long(name='EndsAt', description='The timestamp when the alert was ended.', example='1616502540000'),
        expandFields?: map[string]any(name='ExpandFields', description='The extended fields that indicate the following tags:

*   The tags that are carried in the metrics of the alert rule expression.
*   The tags that are created based on the alert rule.
*   The default tags of Application Real-Time Monitoring Service (ARMS).'),
        integrationName?: string(name='IntegrationName', description='The name of the object that is associated with the alert.', example='testphp2'),
        integrationType?: string(name='IntegrationType', description='The type of the service integration that generated the alert.', example='PROMETHEUS'),
        involvedObjectKind?: string(name='InvolvedObjectKind', description='The type of the object that is associated with the alert.', example='cluster'),
        involvedObjectName?: string(name='InvolvedObjectName', description='The name of the service integration that generated the alert.', example='Test integration-prometheus'),
        message?: string(name='Message', description='The description of the alert.', example='Alarm name: PodRestart_testphp2,\\n Pod night-test-group-1-1-5f5d6f4d84-pszns is restart, Value: 133.33%, 1.33%'),
        severity?: string(name='Severity', description='The level of the alert. Valid values:

*   `critical`
*   `error`
*   `warn`
*   `page`', example='critical'),
        startsAt?: long(name='StartsAt', description='The timestamp when the alert was generated.', example='1616466300000'),
        status?: string(name='Status', description='The status of the alert. Valid values:

*   `Active`
*   `Inhibited`
*   `Silenced`
*   `Resolved`', example='Active'),
      }
    ](name='Alerts', description='The alerts that have been triggered.'),
    page?: int32(name='Page', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    total?: int32(name='Total', description='The total number of entries returned.', example='5'),
  }(name='Page', description='The struct returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BDB74B8F-4123-482A-ABB7-7F440349****'),
}

model ListActivatedAlertsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListActivatedAlertsResponseBody(name='body'),
}

async function listActivatedAlertsWithOptions(request: ListActivatedAlertsRequest, runtime: Util.RuntimeOptions): ListActivatedAlertsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListActivatedAlerts',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listActivatedAlerts(request: ListActivatedAlertsRequest): ListActivatedAlertsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listActivatedAlertsWithOptions(request, runtime);
}

model ListAddonReleasesRequest {
  addonName?: string(name='AddonName', description='Name of Addon.', example='mysql'),
  environmentId?: string(name='EnvironmentId', description='Environment instance ID.', example='env-xxx'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model ListAddonReleasesResponseBody = {
  code?: int32(name='Code', description='Status code: 200 indicates success.', example='200'),
  data?: {
    releases?: [ 
      {
        addonName?: string(name='AddonName', description='Name of Addon.', example='mysql'),
        alertRuleCount?: long(name='AlertRuleCount', description='Number of alarm groups.', example='1'),
        conditions?: [ 
          {
            firstTransitionTime?: string(name='FirstTransitionTime', description='First transition time.', example='2018-01-31T14:32:19Z'),
            lastTransitionTime?: string(name='LastTransitionTime', description='Last transition time.', example='2018-01-31T14:32:19Z'),
            message?: string(name='Message', description='Details.', example='xxxx'),
            reason?: string(name='Reason', description='Reason of failure.', example='xxxx'),
            status?: string(name='Status', description='Condition status.', example='True'),
            type?: string(name='Type', description='Condition type.', example='Loaded'),
          }
        ](name='Conditions', description='Condition list.'),
        createTime?: string(name='CreateTime', description='Created time.', example='2023-09-22T16:56:29+08:00'),
        dashboardCount?: long(name='DashboardCount', description='Number of dashboard.', example='1'),
        environmentId?: string(name='EnvironmentId', description='Environment instance ID.', example='env-xxxx'),
        exporterCount?: long(name='ExporterCount', description='Number of Exporter.', example='2'),
        haveConfig?: boolean(name='HaveConfig', description='Whether there is configuration.', example='true'),
        installUserId?: string(name='InstallUserId', description='User ID of the installation.', example='1268790592387'),
        language?: string(name='Language', description='Language.', example='zh'),
        managed?: boolean(name='Managed'),
        regionId?: string(name='RegionId', description='The ID of the region.', example='cn-heyuan'),
        releaseId?: string(name='ReleaseId', description='Release ID.', example='be29c093-3fd6-4fb6-9430-797030cc183a'),
        releaseName?: string(name='ReleaseName', description='Name of Release.', example='mysql-1695372983039'),
        scene?: string(name='Scene', description='Scene.', example='database'),
        status?: string(name='Status', description='Status of Release.', example='0'),
        updateTime?: string(name='UpdateTime', description='Update time.', example='2023-09-22T16:56:29+08:00'),
        userId?: string(name='UserId', description='User ID.', example='111'),
        version?: string(name='Version', description='Version of Addon.', example='0.0.1'),
      }
    ](name='Releases', description='Release list.'),
    total?: long(name='Total', description='The total number of entries returned.', example='12'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='E9C9DA3D-10FE-472E-9EEF-2D0A3E41****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model ListAddonReleasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAddonReleasesResponseBody(name='body'),
}

async function listAddonReleasesWithOptions(request: ListAddonReleasesRequest, runtime: Util.RuntimeOptions): ListAddonReleasesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addonName)) {
    query['AddonName'] = request.addonName;
  }
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAddonReleases',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAddonReleases(request: ListAddonReleasesRequest): ListAddonReleasesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAddonReleasesWithOptions(request, runtime);
}

model ListAddonsRequest {
  aliyunLang?: string(name='AliyunLang', description='Language,the default language is Chinese.', example='zh'),
  category?: string(name='Category', description='Category filter.', example='database'),
  regexp?: boolean(name='Regexp', description='Whether to enable regular matching.', example='false'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  search?: string(name='Search', description='A query field can be queried by name or description.', example='mysql'),
}

model ListAddonsResponseBody = {
  code?: int32(name='Code', description='Status code: 200 indicates success.', example='200'),
  data?: [ 
    {
      alias?: string(name='Alias', description='Ailas of the Addon.', example='MySQL'),
      categories?: [ string ](name='Categories', description='Categories list.'),
      dashboards?: [ 
        {
          description?: string(name='Description', description='Description of the dashboard.', example='MySQL monitors the market information, monitoring the connection information, usage information and other indicators'),
          name?: string(name='Name', description='Name of the dashboard.', example='mysql-overview'),
          url?: string(name='Url', description='URL of the dashboard.', example='http://xxxx'),
        }
      ](name='Dashboards', description='Dashboard list.'),
      description?: string(name='Description', description='Description of the Addon.', example='Monitor database indicators with MySQL Exporter'),
      environments?: [ 
        {
          dependencies?: {
            features?: map[string]boolean(name='Features', description='Name of the Feature.'),
            services?: [ string ](name='Services', description='Service list.'),
          }(name='Dependencies', description='Dependency list.'),
          description?: string(name='Description', description='Description of environment.', example='The MySQL service is deployed in a Kubernetes cluster.'),
          enable?: boolean(name='Enable', description='Whether to enable it.', example='true'),
          label?: string(name='Label', description='Label of the environment.', example='Container'),
          name?: string(name='Name', description='Name of the environment.', example='CS'),
          policies?: {
            alertDefaultStatus?: string(name='AlertDefaultStatus', description='Default alert status.', example='default'),
            defaultInstall?: boolean(name='DefaultInstall', description='Default install status.', example='false'),
            enableServiceAccount?: boolean(name='EnableServiceAccount', description='Whether to enable a service account.', example='false.'),
            metricCheckRule?: {
              promQL?: [ string ](name='PromQL', description='PromQL list.'),
            }(name='MetricCheckRule', description='Metric check rule PromQL.'),
            needRestartAfterIntegration?: boolean(name='NeedRestartAfterIntegration', description='Whether to restart after integration.', example='false'),
            protocols?: [ 
              {
                description?: string(name='Description', description='Description of the Protocol.', example='ARMS'),
                icon?: string(name='Icon', description='Icon address.', example='http://xxxxxxx'),
                label?: string(name='Label', description='Label of the Protocol.', example='ARMS'),
                name?: string(name='Name', description='Name of the Protocol.', example='arms'),
              }
            ](name='Protocols', description='Protocol list.'),
            targetAddonName?: string(name='TargetAddonName', description='Target Addon name.', example='cloud-rds-mysql'),
          }(name='Policies', description='Policies list.'),
        }
      ](name='Environments', description='Environment list.'),
      icon?: string(name='Icon', description='Icon address.', example='http://xxxx'),
      keywords?: [ string ](name='Keywords', description='Keyword list.'),
      language?: string(name='Language', description='Language.', example='zh'),
      latestReleaseCreateTime?: string(name='LatestReleaseCreateTime', description='Last installation time.', example='2023-09-22T16:56:29+08:00'),
      name?: string(name='Name', description='Name of the Addon.', example='mysql'),
      once?: boolean(name='Once', description='Whether to install it only once.', example='false'),
      scene?: string(name='Scene', description='Scene of the Addon.', example='database'),
      version?: string(name='Version', description='Version of the Addon.', example='0.0.1'),
      weight?: string(name='Weight', description='Weight of the Addon.', example='857'),
    }
  ](name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='78901766-3806-4E96-8E47-CFEF59E4****'),
  success?: boolean(name='Success', description='Indicates whether the alert rule was deleted. Valid values:

*   `true`: The alert rule was deleted.
*   `false`: The alert rule failed to be deleted.', example='true'),
}

model ListAddonsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAddonsResponseBody(name='body'),
}

async function listAddonsWithOptions(request: ListAddonsRequest, runtime: Util.RuntimeOptions): ListAddonsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunLang)) {
    query['AliyunLang'] = request.aliyunLang;
  }
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.regexp)) {
    query['Regexp'] = request.regexp;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.search)) {
    query['Search'] = request.search;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAddons',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAddons(request: ListAddonsRequest): ListAddonsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAddonsWithOptions(request, runtime);
}

model ListAlertEventsRequest {
  alertName?: string(name='AlertName', description='The name of the alert.', example='Test-triggered alert'),
  endTime?: string(name='EndTime', description='The end time of the alert events that you want to query. Specify the time in the YYYY-MM-DD HH:mm:ss format.', example='2021-12-22 23:59:59'),
  matchingConditions?: string(name='MatchingConditions', description='The list of matching conditions.', example='[         {           "value": "ARMS_NOTIFICATION",           "key": "clustername",           "operator": "eq"         }       ]     },{       "matchingConditions": [         {           "value": "test",           "key": "alertname",           "operator": "eq"         }       ]'),
  page?: long(name='Page', description='The number of the page to return.', example='1'),
  size?: long(name='Size', description='The number of entries to return on each page.', example='20'),
  startTime?: string(name='StartTime', description='The start time of the alert events that you want to query. Specify the time in the YYYY-MM-DD HH:mm:ss format.', example='2021-12-19 00:00:00'),
  status?: string(name='Status', description='The status of the alert events. Valid values:

*   Active
*   Silenced
*   Resolved', example='Active'),
}

model ListAlertEventsResponseBody = {
  pageBean?: {
    events?: [ 
      {
        alarms?: [ 
          {
            alarmId?: long(name='AlarmId', description='The ID of the alert.', example='77444'),
            alarmName?: string(name='AlarmName', description='The name of the alert.', example='Test-triggered alert'),
            createTime?: string(name='CreateTime', description='The time when the alert was created.', example='2021-12-20 07:10:18'),
            state?: int32(name='State', description='The status of the alert. Valid values:

*   0: The alert is pending.
*   1: The alert is being handled.
*   2: The alert is cleared.', example='0'),
          }
        ](name='Alarms', description='The list of associated alerts.'),
        alertName?: string(name='AlertName', description='The name of the alert.', example='Test-triggered alert'),
        annotations?: string(name='Annotations', description='The list of annotations.', example='[{\\"Name\\":\\"annotation-a\\",\\"Value\\":\\"annotation a value\\"}]'),
        description?: string(name='Description', description='The description of the alert event.', example='Test'),
        endTime?: string(name='EndTime', description='The end time of the alert event.', example='2021-12-20 17:42:16'),
        generatorURL?: string(name='GeneratorURL', description='The URL of the alert event.', example='https://xxx.xx/'),
        handlerName?: string(name='HandlerName', description='The user who handled the alert.', example='Tom'),
        integrationName?: string(name='IntegrationName', description='The name of the alert integration.', example='Custom integration'),
        integrationType?: string(name='IntegrationType', description='The type of the alert integration.', example='CUSTOM'),
        labels?: string(name='Labels', description='The list of tags.', example='[{\\"name\\":\\"severity\\",\\"value\\":\\"error\\"}]'),
        receiveTime?: string(name='ReceiveTime', description='The time when the alert event was received.', example='2021-12-20 17:42:16'),
        severity?: string(name='Severity', description='The severity level of the alert. Valid value:

*   critical: P1
*   error: P2
*   warning: P3
*   page: P4
*   default: P6', example='critical'),
        startTime?: string(name='StartTime', description='The start time of the alert event.', example='2021-12-20 17:42:16'),
        status?: string(name='Status', description='The status of the alert event. Valid values:

*   Active
*   Silenced
*   Resolved', example='Active'),
      }
    ](name='Events', description='The list of information about historical alert events.'),
    page?: long(name='Page', description='The number of the page returned.', example='1'),
    size?: long(name='Size', description='The number of entries returned per page.', example='20'),
    total?: long(name='Total', description='The total number of returned entries.', example='24'),
  }(name='PageBean', description='The struct returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2FC13182-B9AF-4E6B-BE51-72669B7C****'),
}

model ListAlertEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAlertEventsResponseBody(name='body'),
}

async function listAlertEventsWithOptions(request: ListAlertEventsRequest, runtime: Util.RuntimeOptions): ListAlertEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alertName)) {
    query['AlertName'] = request.alertName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.matchingConditions)) {
    query['MatchingConditions'] = request.matchingConditions;
  }
  if (!Util.isUnset(request.page)) {
    query['Page'] = request.page;
  }
  if (!Util.isUnset(request.size)) {
    query['Size'] = request.size;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAlertEvents',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAlertEvents(request: ListAlertEventsRequest): ListAlertEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAlertEventsWithOptions(request, runtime);
}

model ListAlertsRequest {
  alertName?: string(name='AlertName', description='The name of the alert rule.', example='Test alert'),
  dispatchRuleId?: long(name='DispatchRuleId', description='The ID of the notification policy.', example='12345'),
  endTime?: string(name='EndTime', description='The end time of the alert sending history that you want to query. Specify the time in the `YYYY-MM-DD HH:mm:ss` format.', example='2021-12-22 23:59:59'),
  integrationType?: string(name='IntegrationType', description='The integration type.

*   ARMS
*   CLOUD_MONITOR
*   MSE
*   ARMS_CLOUD_DIALTEST
*   PROMETHEUS
*   LOG_SERVICE
*   CUSTOM
*   ARMS_PROMETHEUS
*   ARMS_APP_MON
*   ARMS_FRONT_MON
*   ARMS_CUSTOM
*   XTRACE
*   GRAFANA
*   ZABBIX
*   SKYWALKING
*   EVENT_BRIDGE
*   NAGIOS
*   OPENFALCON
*   ARMS_INSIGHTS', example='ARMS_APP_MON'),
  page?: long(name='Page', description='The number of the page to return.', example='1'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  severity?: string(name='Severity', description='The severity level of the alert. Valid values: P6, P5, P4, P3, P2, and P1. The preceding values are listed in ascending order of severity.', example='P6'),
  showActivities?: boolean(name='ShowActivities', description='Specifies whether to query the activities that correspond to alerts. Valid values:

*   `false` (default value): The activities are not queried.
*   `true`: The activities in the last three days are queried.', example='true'),
  showEvents?: boolean(name='ShowEvents', description='Specifies whether to query the events that correspond to alerts. Valid values:

*   `false` (default value): The events are not queried.
*   `true`: The events are queried.', example='true'),
  size?: long(name='Size', description='The number of alerts to return on each page.', example='20'),
  startTime?: string(name='StartTime', description='The start time of the alert sending history that you want to query. Specify the time in the `YYYY-MM-DD HH:mm:ss` format.', example='2021-12-10 00:00:00'),
  state?: long(name='State', description='The status of the alert. Valid values:

*   0: The alert is pending.
*   1: The alert is being handled.
*   2: The alert is handled.', example='2'),
}

model ListAlertsResponseBody = {
  pageBean?: {
    listAlerts?: [ 
      {
        acknowledgeTime?: long(name='AcknowledgeTime'),
        activities?: [ 
          {
            content?: string(name='Content', description='The content of the alert notification.', example='\\[Notification policy: Send notifications to DingTalk groups] Host monitoring. Host IP address: 10.76.XX.XX. Average memory usage of the host in the last 1 minute ≥ 1.0%. Current value: 84.7454%.'),
            description?: string(name='Description', description='The description of the activity.', example='\\[Alert Claimed] The alert is claimed'),
            handlerName?: string(name='HandlerName', description='The name of the handler.', example='O\\&M Engineer A'),
            time?: string(name='Time', description='The operation time of the activity.', example='2021-12-20 19:08:57'),
            type?: long(name='Type', description='The type of the activity. Valid values:

*   1: The alert is claimed.
*   2: The alert is disclaimed.
*   3: A comment is added for the alert.
*   4: The alert is disabled.
*   5: An alert notification is sent.', example='1'),
          }
        ](name='Activities', description='The list of activities.'),
        alertEvents?: [ 
          {
            alertName?: string(name='AlertName', description='The name of the event.', example='Test-triggered alert'),
            annotations?: string(name='Annotations', description='The annotations.', example='{ "_aliyun_arms_alert_value":"4.0" "_aliyun_arms_alert_traceId":"ac10c43116421327442277073d5461-105075299"}'),
            description?: string(name='Description', description='The description of the event.', example='Host monitoring. Host IP address: 10.76.XX.XX. Average memory usage of the host in the last 1 minute ≥ 1.0%. Current value: 84.7454%.'),
            endTime?: string(name='EndTime', description='The time when the event ended.', example='2022-01-19 17:10:31'),
            generatorURL?: string(name='GeneratorURL', description='The URL of the event.', example='http://arms.console.aliyun.com'),
            integrationName?: string(name='IntegrationName', description='The name of the integration that corresponds to the alert event.', example='ARMS'),
            integrationType?: string(name='IntegrationType', description='The type of the integration that corresponds to the alert event. Valid values:

*   ARMS
*   CLOUD_MONITOR
*   MSE
*   ARMS_CLOUD_DIALTEST
*   PROMETHEUS
*   LOG_SERVICE
*   CUSTOM
*   ARMS_PROMETHEUS
*   ARMS_APP_MON
*   ARMS_FRONT_MON
*   ARMS_CUSTOM
*   XTRACE
*   GRAFANA
*   ZABBIX
*   SKYWALKING
*   EVENT_BRIDGE
*   NAGIOS
*   OPENFALCON
*   ARMS_INSIGHTS', example='ARMS_APP_MON'),
            labels?: string(name='Labels', description='The tags.', example='{ "severity":"warning" "_aliyun_arms_alert_level":"ERROR" "_aliyun_arms_entropy":"0.30170457417889235"}'),
            receiveTime?: string(name='ReceiveTime', description='The time when the event was created.', example='2022-01-19 17:05:42'),
            severity?: string(name='Severity', description='The severity level of the event. Valid values:

*   critical
*   error
*   warning
*   info', example='warning'),
            startTime?: string(name='StartTime', description='The time when the event started.', example='2022-01-18 00:14:00'),
            state?: string(name='State', description='The status of the event. Valid values:

*   Active: The event is not cleared.
*   Silenced: The event is silenced.
*   Resolved: The event is cleared.', example='Active'),
          }
        ](name='AlertEvents', description='The list of events.'),
        alertId?: long(name='AlertId', description='The alert ID.', example='2279'),
        alertName?: string(name='AlertName', description='The name of the alert rule.', example='Test alert'),
        createTime?: string(name='CreateTime', description='The time when the alert was created.', example='2022-01-18 00:21:35'),
        describe?: string(name='Describe'),
        dispatchRuleId?: float(name='DispatchRuleId', description='The ID of the notification policy.', example='12345'),
        dispatchRuleName?: string(name='DispatchRuleName', description='The name of the notification policy.', example='DingTalk Notification'),
        handler?: string(name='Handler'),
        notifyRobots?: string(name='NotifyRobots'),
        owner?: string(name='Owner'),
        recoverTime?: long(name='RecoverTime'),
        severity?: string(name='Severity', description='The severity level of the alert. Valid values: P6, P5, P4, P3, P2, and P1. The preceding values are listed in ascending order of severity.', example='P6'),
        solution?: string(name='Solution', description='The Alert solution.', example='--'),
        state?: long(name='State', description='The status of the alert. Valid values:

*   0: The alert is pending.
*   1: The alert is being handled.
*   2: The alert is handled.', example='0'),
      }
    ](name='ListAlerts', description='The alerts for which the alert sending history is queried.'),
    page?: long(name='Page', description='The page number of the returned page.', example='1'),
    size?: long(name='Size', description='The number of alerts returned per page.', example='20'),
    total?: long(name='Total', description='The total number of queried alerts.', example='1'),
  }(name='PageBean', description='The information about the array object.'),
  requestId?: string(name='RequestId', description='The request ID.', example='2FC13182-B9AF-4E6B-BE51-72669B7C****'),
}

model ListAlertsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAlertsResponseBody(name='body'),
}

async function listAlertsWithOptions(request: ListAlertsRequest, runtime: Util.RuntimeOptions): ListAlertsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alertName)) {
    query['AlertName'] = request.alertName;
  }
  if (!Util.isUnset(request.dispatchRuleId)) {
    query['DispatchRuleId'] = request.dispatchRuleId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.integrationType)) {
    query['IntegrationType'] = request.integrationType;
  }
  if (!Util.isUnset(request.page)) {
    query['Page'] = request.page;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.severity)) {
    query['Severity'] = request.severity;
  }
  if (!Util.isUnset(request.showActivities)) {
    query['ShowActivities'] = request.showActivities;
  }
  if (!Util.isUnset(request.showEvents)) {
    query['ShowEvents'] = request.showEvents;
  }
  if (!Util.isUnset(request.size)) {
    query['Size'] = request.size;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.state)) {
    query['State'] = request.state;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAlerts',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAlerts(request: ListAlertsRequest): ListAlertsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAlertsWithOptions(request, runtime);
}

model ListClusterFromGrafanaRequest {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model ListClusterFromGrafanaResponseBody = {
  promClusterList?: [ 
    {
      agentStatus?: string(name='AgentStatus', description='The status of the Prometheus agent on the cluster. Valid values:

*   INSTALL_FAILED: The Prometheus agent failed to be installed.
*   INSTALL_SUCCEED: The Prometheus agent was installed.
*   NOT_REGISTER: You have not registered an Alibaba Cloud account.', example='INSTALL_FAILED'),
      clusterId?: string(name='ClusterId', description='The cluster ID.', example='c0df7ad9db0ed43128925ca04774c469e'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='ay-ads-hangzhou'),
      clusterType?: string(name='ClusterType', description='The type of the cluster.', example='cloud-product-prometheus'),
      controllerId?: string(name='ControllerId', description='The controller ID.', example='1092'),
      createTime?: long(name='CreateTime', description='The time when the dashboard was created.', example='2021-12-09T02:05:04Z'),
      extra?: string(name='Extra', description='The extended fields. This parameter is a JSON string.', example='{\\"app_id\\":\\"bbd\\",\\"task_id\\":\\"4305ba5bf14942daa6e553ed91f46988\\"}'),
      id?: long(name='Id', description='The ID of a database in the cluster.', example='16136'),
      installTime?: long(name='InstallTime', description='The timestamp when the Prometheus agent was installed.', example='1653532518000'),
      isControllerInstalled?: boolean(name='IsControllerInstalled', description='Indicates whether the Prometheus agent was installed. Valid values:

*   true: The Prometheus agent was installed.
*   false: The Prometheus agent was not installed.', example='true'),
      lastHeartBeatTime?: long(name='LastHeartBeatTime', description='The time when the last heartbeat was reported.', example='1653532518000'),
      nodeNum?: int32(name='NodeNum', description='The number of nodes.', example='3'),
      options?: string(name='Options', description='The custom parameter.', example='{\\"Option\\": [\\"betaTestApproved\\"]}'),
      pluginsJsonArray?: string(name='PluginsJsonArray', description='The list of nodejsonar logs.', example='{}'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-beijing'),
      stateJson?: string(name='StateJson', description='The information about applications deployed in the cluster.', example='{}'),
      updateTime?: long(name='UpdateTime', description='The time when the dashboard was updated.', example='2021-11-16T08:49:34Z'),
      userId?: string(name='UserId', description='The ID of the Alibaba Cloud account to which the cluster belongs.', example='1247285**'),
    }
  ](name='PromClusterList', description='The cluster information.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='6849D41E-EED4-5C00-89F9-6047BBD9DCB4'),
}

model ListClusterFromGrafanaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClusterFromGrafanaResponseBody(name='body'),
}

async function listClusterFromGrafanaWithOptions(request: ListClusterFromGrafanaRequest, runtime: Util.RuntimeOptions): ListClusterFromGrafanaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClusterFromGrafana',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listClusterFromGrafana(request: ListClusterFromGrafanaRequest): ListClusterFromGrafanaResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClusterFromGrafanaWithOptions(request, runtime);
}

model ListCmsInstancesRequest {
  clusterId?: string(name='ClusterId', example='n9p9o9o3se'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  typeFilter?: string(name='TypeFilter', example='direct'),
}

model ListCmsInstancesResponseBody = {
  data?: {
    enableTag?: boolean(name='EnableTag', example='true'),
    products?: [ 
      {
        descr?: string(name='Descr', example='-'),
        id?: string(name='Id', example='20210'),
        instance?: string(name='Instance', example='cloudserver'),
        name?: string(name='Name', example='hologres'),
        prod?: string(name='Prod', example='face'),
        source?: string(name='Source', example='arms'),
        state?: string(name='State', example='true'),
        time?: string(name='Time', example='1647852021000'),
        type?: string(name='Type', example='HOLOGRES'),
        url?: string(name='Url', example='https://g.console.aliyun.com/d/1098370038733503-35894-565/cms-hologres?orgId\\u003d9\\u0026refresh\\u003d60s'),
      }
    ](name='Products'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='E7A04B0D-E2CA-59BB-8A9D-D5D349C22BF1'),
}

model ListCmsInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCmsInstancesResponseBody(name='body'),
}

/**
  * @deprecated : ListCmsInstances is deprecated, please use ARMS::2019-08-08::ListEnvironmentAddons instead.
  *
  * @param request ListCmsInstancesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListCmsInstancesResponse
 */
// Deprecated
async function listCmsInstancesWithOptions(request: ListCmsInstancesRequest, runtime: Util.RuntimeOptions): ListCmsInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.typeFilter)) {
    query['TypeFilter'] = request.typeFilter;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCmsInstances',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated : ListCmsInstances is deprecated, please use ARMS::2019-08-08::ListEnvironmentAddons instead.
  *
  * @param request ListCmsInstancesRequest
  * @return ListCmsInstancesResponse
 */
// Deprecated
async function listCmsInstances(request: ListCmsInstancesRequest): ListCmsInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCmsInstancesWithOptions(request, runtime);
}

model ListDashboardsRequest {
  clusterId?: string(name='ClusterId', description='The ID of the ACK cluster.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  clusterType?: string(name='ClusterType', description='Valid values: ACK, ASK, cloud-product-prometheus, and Node. You can query the dashboards of a virtual cluster by specifying the cluster type. For InfluxDB, set this parameter to `cloud-product-prometheus`.', example='Node'),
  dashboardName?: string(name='DashboardName', description='The unique names of the dashboards. You can query dashboards by specifying their names. The **dashboard title** can be changed whereas the **dashboard name** cannot. You can specify multiple names and separate them with commas (,), for example, `k8s-event,k8s-overview`. A dashboard may have multiple versions. If you want to specify a version, you can add version information after the name, for example, `k8s-event:v1,k8s-overview:latest`.', example='k8s-node-overview'),
  language?: string(name='Language', description='The language of the Grafana dashboards. Valid values: en and zh. Default value: en.', example='en'),
  product?: string(name='Product', description='The code of the cloud service. This parameter is required if you set the ClusterType parameter to `cloud-product-prometheus`. The following cloud services are available: Serverless App Engine, Microservices Engine, Message Queue for Apache RocketMQ, Lindorm, Message Queue for Apache Kafka, ApsaraDB for ClickHouse, Data Lake Analytics, Message Queue for RabbitMQ, ApsaraDB for MongoDB, Time Series Database (TSDB) for InfluxDB, MSE Cloud-native Gateway, Grafana Service, SchedulerX, Global Transaction Service, Enterprise Distributed Application Service, Machine Learning Platform for AI - Elastic Algorithm Service (EAS), Application High Availability Service, and Performance Testing.', example='xxxx'),
  recreateSwitch?: boolean(name='RecreateSwitch', description='Specifies whether to create or query a virtual cluster. This parameter provides backward compatibility.', example='false'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  title?: string(name='Title', description='The dashboard title. The dashboard title can be changed. We recommend that you specify the **DashboardName** parameter.', example='ApiServer'),
}

model ListDashboardsResponseBody = {
  dashboardVos?: [ 
    {
      dashboardType?: string(name='DashboardType', description='The type of the Grafana dashboard. This parameter has the same effect as the Exporter parameter whereas provides clearer implication.', example='Node'),
      exporter?: string(name='Exporter', description='The type of the exporter access source. Valid values:

*   Prometheus
*   Node
*   GPU
*   Redis
*   MySQL
*   Kafka
*   NGINX V2
*   Nginx
*   ZooKeeper
*   MongoDB
*   RabbitMQ
*   PostgreSQL
*   Kubernetes
*   Client Library
*   Elasticsearch
*   RocketMQ', example='Nginx'),
      httpUrl?: string(name='HttpUrl', description='The URL of the Grafana dashboard.', example='http://g.console.aliyun.com/d/1131971649496228-*****-59/ApiServer?orgId=3**&refresh=60s'),
      httpsUrl?: string(name='HttpsUrl', description='The URL of the Grafana dashboard.', example='http://g.console.aliyun.com/d/1131971649496228-*****-59/ApiServer?orgId=3**&refresh=60s'),
      i18nChild?: {
        dashboardType?: string(name='DashboardType', description='The type of the Grafana dashboard. This parameter has the same effect as the Exporter parameter whereas provides clearer implication.', example='Node'),
        exporter?: string(name='Exporter', description='The type of the exporter access source. Valid values:

*   Prometheus
*   Node
*   GPU
*   Redis
*   MySQL
*   Kafka
*   NGINX V2
*   Nginx
*   ZooKeeper
*   MongoDB
*   RabbitMQ
*   PostgreSQL
*   Kubernetes
*   Client Library
*   Elasticsearch
*   RocketMQ', example='Nginx'),
        httpUrl?: string(name='HttpUrl', description='The URL of the Grafana dashboard.', example='http://g.console.aliyun.com/d/1131971649496228-*****-59/ApiServer?orgId=3**&refresh=60s'),
        httpsUrl?: string(name='HttpsUrl', description='The URL of the Grafana dashboard.', example='http://g.console.aliyun.com/d/1131971649496228-*****-59/ApiServer?orgId=3**&refresh=60s'),
        id?: string(name='Id', description='The ID of the Grafana dashboard. The value is unique only when you install the Grafana dashboard.', example='1100**'),
        isArmsExporter?: boolean(name='IsArmsExporter', description='Indicates whether the exporter was provided by ARMS. Valid values:

*   `true`: The exporter is provided by ARMS.
*   `false`: The exporter is not provided by ARMS.', example='false'),
        kind?: string(name='Kind', description='The category of the Grafana dashboard. Valid values: BASIC, THIRD, LIMIT, and CUSTOM.', example='BASIC'),
        language?: string(name='Language', description='The language of the Grafana dashboard.', example='zh'),
        name?: string(name='Name', description='The name of the Grafana dashboard. This parameter is different from the **Title** parameter as this parameter cannot be changed.', example='k8s-node-overview'),
        needUpdate?: boolean(name='NeedUpdate', description='Indicates whether the Grafana dashboard has a new version that was available for upgrade.', example='false'),
        tags?: [ string ](name='Tags', description='The tags of the Grafana dashboard.'),
        time?: string(name='Time', description='The timestamp when the Grafana dashboard was created.', example='1590136924'),
        title?: string(name='Title', description='The title of the Grafana dashboard.', example='ApiServer'),
        type?: string(name='Type', description='The type of the Grafana dashboard. Valid values:

*   `dash-db`: a dashboard
*   `dash-folder`: a folder that can include a dashboard', example='dash-db'),
        uid?: string(name='Uid', description='The unique identifier of a dashboard when multiple Grafana dashboards were installed. It is a unique business ID displayed on the page.', example='1131971649496228-*****-59'),
        url?: string(name='Url', description='The complete URL of the Grafana dashboard.', example='http://g.console.aliyun.com/d/1131971649496228-*****-59/ApiServer?orgId=3**&refresh=60s'),
        version?: string(name='Version', description='The version of the Grafana dashboard. The combination of version and name uniquely identifies a dashboard.', example='v2'),
      }(name='I18nChild', description='The information about the Grafana dashboard.'),
      id?: string(name='Id', description='The ID of the Grafana dashboard. The value is unique only when you install the Grafana dashboard.', example='1100**'),
      isArmsExporter?: boolean(name='IsArmsExporter', description='Indicates whether the exporter was provided by ARMS. Valid values:

*   `true`: The exporter is provided by ARMS.
*   `false`: The exporter is not provided by ARMS.', example='false'),
      kind?: string(name='Kind', description='The type of the dashboard. Valid values: BASIC, THIRD, LIMIT, and CUSTOM. BASIC indicates a basic dashboard. THIRD indicates a third-party dashboard. LIMIT indicates a time-limited free dashboard. CUSTOM indicates a custom dashboard.', example='BASIC'),
      language?: string(name='Language', description='The language of the Grafana dashboard.', example='en'),
      name?: string(name='Name', description='The name of the Grafana dashboard. This parameter is different from the **Title** parameter as this parameter cannot be changed.', example='k8s-node-overview'),
      needUpdate?: boolean(name='NeedUpdate', description='Indicates whether the Grafana dashboard has a new version that was available for upgrade.', example='false'),
      tags?: [ string ](name='Tags', description='The tags of the Grafana dashboard.'),
      time?: string(name='Time', description='The timestamp when the Grafana dashboard was created. Unit: seconds.', example='1590136924'),
      title?: string(name='Title', description='The title of the Grafana dashboard.', example='ApiServer'),
      type?: string(name='Type', description='The type of the Grafana dashboard. Valid values:

*   `dash-db`: a dashboard
*   `dash-folder`: a folder that can include a dashboard', example='dash-db'),
      uid?: string(name='Uid', description='The unique identifier of a dashboard when multiple Grafana dashboards were installed. It is a unique business ID displayed on the page.', example='1131971649496228-*****-59'),
      url?: string(name='Url', description='The complete URL of the Grafana dashboard.', example='http://g.console.aliyun.com/d/1131971649496228-*****-59/ApiServer?orgId=3**&refresh=60s'),
      version?: string(name='Version', description='The version of the Grafana dashboard. The combination of version and name uniquely identifies a dashboard.', example='v2'),
    }
  ](name='DashboardVos', description='The information about the Grafana dashboard.'),
  environmentId?: string(name='EnvironmentId'),
  prometheusServiceOpened?: string(name='PrometheusServiceOpened', description='The indicators of whether the Prometheus service has been activated.', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='2A0CEDF1-06FE-44AC-8E21-21A5BE65****'),
}

model ListDashboardsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDashboardsResponseBody(name='body'),
}

/**
  * None.
  *
  * @param request ListDashboardsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListDashboardsResponse
 */
async function listDashboardsWithOptions(request: ListDashboardsRequest, runtime: Util.RuntimeOptions): ListDashboardsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterType)) {
    query['ClusterType'] = request.clusterType;
  }
  if (!Util.isUnset(request.dashboardName)) {
    query['DashboardName'] = request.dashboardName;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.product)) {
    query['Product'] = request.product;
  }
  if (!Util.isUnset(request.recreateSwitch)) {
    query['RecreateSwitch'] = request.recreateSwitch;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDashboards',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * None.
  *
  * @param request ListDashboardsRequest
  * @return ListDashboardsResponse
 */
async function listDashboards(request: ListDashboardsRequest): ListDashboardsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDashboardsWithOptions(request, runtime);
}

model ListDashboardsByNameRequest {
  clusterId?: string(name='ClusterId', example='cc7a37ee31aea4ed1a059eff8034b****'),
  clusterType?: string(name='ClusterType', example='cloud-product-prometheus'),
  dashBoardName?: string(name='DashBoardName', example='edas-ingress-url'),
  dashBoardVersion?: string(name='DashBoardVersion', example='latest'),
  dataSourceType?: string(name='DataSourceType', example='loki'),
  groupName?: string(name='GroupName', example='EDAS'),
  onlyQuery?: boolean(name='OnlyQuery', example='true'),
  productCode?: string(name='ProductCode', example='edas'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListDashboardsByNameResponseBody = {
  code?: int32(name='Code', description='状态码。说明 200表示成功。', example='200'),
  data?: string(name='Data', example='[{"name":"Edas Ingress Url Analysis","type":"edas-ingress-url-analysis","url":"https://g.console.aliyun.com/d/1036052989950239-11040375-66-3/edas-ingress-url-analysis?var-clusterId=29ksa&var-regionId=cn-hangzhou"}]'),
  message?: string(name='Message', description='返回结果的提示信息。', example='success'),
  requestId?: string(name='RequestId', example='2983BEF7-4A0D-47A2-94A2-8E9C5E63****'),
}

model ListDashboardsByNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDashboardsByNameResponseBody(name='body'),
}

async function listDashboardsByNameWithOptions(request: ListDashboardsByNameRequest, runtime: Util.RuntimeOptions): ListDashboardsByNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterType)) {
    query['ClusterType'] = request.clusterType;
  }
  if (!Util.isUnset(request.dashBoardName)) {
    query['DashBoardName'] = request.dashBoardName;
  }
  if (!Util.isUnset(request.dashBoardVersion)) {
    query['DashBoardVersion'] = request.dashBoardVersion;
  }
  if (!Util.isUnset(request.dataSourceType)) {
    query['DataSourceType'] = request.dataSourceType;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.onlyQuery)) {
    query['OnlyQuery'] = request.onlyQuery;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDashboardsByName',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDashboardsByName(request: ListDashboardsByNameRequest): ListDashboardsByNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDashboardsByNameWithOptions(request, runtime);
}

model ListDispatchRuleRequest {
  name?: string(name='Name', example='Prod'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  system?: boolean(name='System', example='true'),
}

model ListDispatchRuleResponseBody = {
  dispatchRules?: [ 
    {
      name?: string(name='Name', example='Prod'),
      ruleId?: long(name='RuleId', example='10282'),
      state?: string(name='State', example='true'),
    }
  ](name='DispatchRules'),
  requestId?: string(name='RequestId', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model ListDispatchRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDispatchRuleResponseBody(name='body'),
}

async function listDispatchRuleWithOptions(request: ListDispatchRuleRequest, runtime: Util.RuntimeOptions): ListDispatchRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.system)) {
    query['System'] = request.system;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDispatchRule',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDispatchRule(request: ListDispatchRuleRequest): ListDispatchRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDispatchRuleWithOptions(request, runtime);
}

model ListEnvCustomJobsRequest {
  encryptYaml?: boolean(name='EncryptYaml', description='Specifies whether to return the encrypted YAML string.', example='true'),
  environmentId?: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxx'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model ListEnvCustomJobsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: [ 
    {
      addonName?: string(name='AddonName', description='The name of the component to which the custom job belongs.', example='mysql'),
      addonReleaseName?: string(name='AddonReleaseName', description='The instance name of the component.', example='mysql1'),
      addonVersion?: string(name='AddonVersion', description='The version of the component.', example='1.1.0'),
      configYaml?: string(name='ConfigYaml', description='If the request parameter EncryptYaml is set to true, a Base64-encoded YAML string is returned. Otherwise, a plaintext YAML string is returned.', example='Refer to supplementary instructions.'),
      creationTimestamp?: string(name='CreationTimestamp', description='The time when the custom job was created. The value of this parameter is a timestamp.', example='2022-01-01T10:11:34Z'),
      customJobName?: string(name='CustomJobName', description='The name of the custom job.', example='job1'),
      environmentId?: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxx'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
      scrapeConfigs?: [ 
        {
          jobName?: string(name='JobName', description='The name of the job.', example='custom-sd-demo'),
          metricsPath?: string(name='MetricsPath', description='The path of the metric.', example='/metrics'),
          scrapeDiscoverys?: [ string ](name='ScrapeDiscoverys', description='The service discovery methods.'),
          scrapeInterval?: string(name='ScrapeInterval', description='The capture interval.', example='30s'),
        }
      ](name='ScrapeConfigs', description='The capture configurations.'),
      status?: string(name='Status', description='The status of the custom job.', example='run'),
    }
  ](name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='2A0CEDF1-06FE-44AC-8E21-21A5BE65****'),
}

model ListEnvCustomJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnvCustomJobsResponseBody(name='body'),
}

async function listEnvCustomJobsWithOptions(request: ListEnvCustomJobsRequest, runtime: Util.RuntimeOptions): ListEnvCustomJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.encryptYaml)) {
    query['EncryptYaml'] = request.encryptYaml;
  }
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEnvCustomJobs',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEnvCustomJobs(request: ListEnvCustomJobsRequest): ListEnvCustomJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEnvCustomJobsWithOptions(request, runtime);
}

model ListEnvPodMonitorsRequest {
  environmentId?: string(name='EnvironmentId', description='The environment ID.', example='env-xxxxx'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model ListEnvPodMonitorsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: [ 
    {
      addonName?: string(name='AddonName', description='The name of the component to which the PodMonitor belongs.', example='mysql'),
      addonReleaseName?: string(name='AddonReleaseName', description='The instance name of the component.', example='mysql1'),
      addonVersion?: string(name='AddonVersion', description='The version of the component.', example='1.0.5'),
      configYaml?: string(name='ConfigYaml', description='The YAML configuration string.', example='Refer to supplementary instructions.'),
      creationTimestamp?: string(name='CreationTimestamp', description='The time when the PodMonitor was created. The value of this parameter is a timestamp.', example='2011-01-02T11:34:22Z'),
      endpoints?: [ 
        {
          interval?: string(name='Interval', description='The collection interval.', example='30s'),
          matchedTargetCount?: int32(name='MatchedTargetCount', description='The number of pods that match the PodMonitor endpoint.', example='1'),
          path?: string(name='Path', description='The collection path.', example='/metrics'),
          port?: string(name='Port', description='The external port.', example='9182'),
          targetPort?: int32(name='TargetPort', description='The destination port.', example='3306'),
        }
      ](name='Endpoints', description='The endpoints of the PodMonitor.'),
      environmentId?: string(name='EnvironmentId', description='The environment ID.', example='env-xxxxx'),
      namespace?: string(name='Namespace', description='The namespace.', example='arms-prom'),
      podMonitorName?: string(name='PodMonitorName', description='The name of the PodMonitor.', example='pm1'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-beijing'),
      status?: string(name='Status', description='The status of the PodMonitor.', example='run'),
    }
  ](name='Data', description='The result of the operation.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C518054-852F-4023-ABC1-4AF95FF7****'),
}

model ListEnvPodMonitorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnvPodMonitorsResponseBody(name='body'),
}

async function listEnvPodMonitorsWithOptions(request: ListEnvPodMonitorsRequest, runtime: Util.RuntimeOptions): ListEnvPodMonitorsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEnvPodMonitors',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEnvPodMonitors(request: ListEnvPodMonitorsRequest): ListEnvPodMonitorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEnvPodMonitorsWithOptions(request, runtime);
}

model ListEnvServiceMonitorsRequest {
  environmentId?: string(name='EnvironmentId', description='The environment ID.', example='env-xxxxx'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model ListEnvServiceMonitorsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: [ 
    {
      addonName?: string(name='AddonName', description='The name of the component to which the ServiceMonitor belongs.', example='mysql'),
      addonReleaseName?: string(name='AddonReleaseName', description='The instance name of the component.', example='mysql1'),
      addonVersion?: string(name='AddonVersion', description='The version of the component.', example='1.1.0'),
      configYaml?: string(name='ConfigYaml', description='The YAML configuration string.', example='Refer to supplementary instructions.'),
      creationTimestamp?: string(name='CreationTimestamp', description='The time when the ServiceMonitor was created. The value of this parameter is a timestamp.', example='2011-10-11T22:32:11Z'),
      endpoints?: [ 
        {
          interval?: string(name='Interval', description='The collection interval.', example='30s'),
          matchedTargetCount?: int32(name='MatchedTargetCount', description='The number of pods that match the ServiceMonitor endpoint.', example='1'),
          path?: string(name='Path', description='The collection path.', example='/metrics'),
          port?: string(name='Port', description='The external port.', example='9101'),
          targetPort?: int32(name='TargetPort', description='The destination port.', example='443'),
        }
      ](name='Endpoints', description='The endpoints of the ServiceMonitor.'),
      environmentId?: string(name='EnvironmentId', description='The environment ID.', example='env-xxxxx'),
      matchedServiceCount?: int32(name='MatchedServiceCount', description='The number of matched services.', example='1'),
      namespace?: string(name='Namespace', description='The namespace.', example='arms-prom'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-beijing'),
      serviceMonitorName?: string(name='ServiceMonitorName', description='The name of the ServiceMonitor.', example='sm1'),
      status?: string(name='Status', description='The status of the ServiceMonitor.', example='run'),
    }
  ](name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='1A474FF8-7861-4D00-81B5-5BC3DA4E****'),
}

model ListEnvServiceMonitorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnvServiceMonitorsResponseBody(name='body'),
}

async function listEnvServiceMonitorsWithOptions(request: ListEnvServiceMonitorsRequest, runtime: Util.RuntimeOptions): ListEnvServiceMonitorsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEnvServiceMonitors',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEnvServiceMonitors(request: ListEnvServiceMonitorsRequest): ListEnvServiceMonitorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEnvServiceMonitorsWithOptions(request, runtime);
}

model ListEnvironmentDashboardsRequest {
  addonName?: string(name='AddonName', description='Name of Addon.AddonName and Scene are required.', example='trace-java'),
  environmentId?: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxx'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  scene?: string(name='Scene', description='Scene of Addon.AddonName and Scene are required', example='database'),
}

model ListEnvironmentDashboardsResponseBody = {
  code?: int32(name='Code', description='Status code: 200 indicates success.', example='200'),
  data?: {
    dashboards?: [ 
      {
        folderUid?: string(name='FolderUid', description='Dashboard folder UID.', example='1374923841627893'),
        region?: string(name='Region', description='The region ID.', example='cn-hangzhou'),
        tags?: [ string ](name='Tags', description='List of tabs on the dashboard.'),
        title?: string(name='Title', description='The title on the dashboard.', example='kafka-instance'),
        uid?: string(name='Uid', description='The UID on the dashboard.', example='1537863211936042'),
        url?: string(name='Url', description='The URL on the dashboard.', example='http://xxx'),
      }
    ](name='Dashboards', description='List of dashboard.'),
    total?: long(name='Total', description='Totle of the dashboards.', example='1'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='A5EC8221-08F2-4C95-9AF1-49FD998C647A'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   `true`: The call was successful.
*   `false`: The call failed.', example='true'),
}

model ListEnvironmentDashboardsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnvironmentDashboardsResponseBody(name='body'),
}

async function listEnvironmentDashboardsWithOptions(request: ListEnvironmentDashboardsRequest, runtime: Util.RuntimeOptions): ListEnvironmentDashboardsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addonName)) {
    query['AddonName'] = request.addonName;
  }
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.scene)) {
    query['Scene'] = request.scene;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEnvironmentDashboards',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEnvironmentDashboards(request: ListEnvironmentDashboardsRequest): ListEnvironmentDashboardsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEnvironmentDashboardsWithOptions(request, runtime);
}

model ListEnvironmentFeaturesRequest {
  environmentId?: string(name='EnvironmentId', example='env-xxx'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListEnvironmentFeaturesResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      alias?: string(name='Alias'),
      config?: map[string]string(name='Config'),
      description?: string(name='Description'),
      environmentId?: string(name='EnvironmentId', example='env-xxxxx'),
      icon?: string(name='Icon', example='http://xxx'),
      language?: string(name='Language', example='zh'),
      latestVersion?: string(name='LatestVersion', example='1.1.17'),
      managed?: boolean(name='Managed'),
      name?: string(name='Name', example='metric-agent'),
      status?: string(name='Status', example='Success'),
      version?: string(name='Version', example='1.1.17'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='40B10E04-81E8-4643-970D-F1B38F2E****'),
  success?: boolean(name='Success', example='true'),
}

model ListEnvironmentFeaturesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnvironmentFeaturesResponseBody(name='body'),
}

async function listEnvironmentFeaturesWithOptions(request: ListEnvironmentFeaturesRequest, runtime: Util.RuntimeOptions): ListEnvironmentFeaturesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEnvironmentFeatures',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEnvironmentFeatures(request: ListEnvironmentFeaturesRequest): ListEnvironmentFeaturesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEnvironmentFeaturesWithOptions(request, runtime);
}

model ListEnvironmentsRequest {
  addonName?: string(name='AddonName', description='The add-on name. You must specify at least one of the AddonName and EnvironmentType parameters.', example='trace-java'),
  bindResourceId?: string(name='BindResourceId', description='绑定的资源ID。', example='cff30f0d67d7542dfb05bd114b4b1d7af'),
  environmentType?: string(name='EnvironmentType', description='The environment type. You must specify at least one of the AddonName and EnvironmentType parameters.

Valid values:

*   CS

    <!-- -->

    :

    <!-- -->

    Container Service for Kubernetes (ACK)

    <!-- -->

*   ECS

    <!-- -->

    :

    <!-- -->

    Elastic Compute Service (ECS)

    <!-- -->

*   Cloud

    <!-- -->

    :

    <!-- -->

    cloud service

    <!-- -->', example='CS'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aekzfurdatohtka'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='env'),
      value?: string(name='Value', description='The tag value.', example='gfn_web_outbound_add'),
    }
  ](name='Tag', description='The tags.'),
}

model ListEnvironmentsShrinkRequest {
  addonName?: string(name='AddonName', description='The add-on name. You must specify at least one of the AddonName and EnvironmentType parameters.', example='trace-java'),
  bindResourceId?: string(name='BindResourceId', description='绑定的资源ID。', example='cff30f0d67d7542dfb05bd114b4b1d7af'),
  environmentType?: string(name='EnvironmentType', description='The environment type. You must specify at least one of the AddonName and EnvironmentType parameters.

Valid values:

*   CS

    <!-- -->

    :

    <!-- -->

    Container Service for Kubernetes (ACK)

    <!-- -->

*   ECS

    <!-- -->

    :

    <!-- -->

    Elastic Compute Service (ECS)

    <!-- -->

*   Cloud

    <!-- -->

    :

    <!-- -->

    cloud service

    <!-- -->', example='CS'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aekzfurdatohtka'),
  tagShrink?: string(name='Tag', description='The tags.'),
}

model ListEnvironmentsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    environments?: [ 
      {
        addons?: [ 
          {
            alias?: string(name='Alias', description='The alias of the add-on.', example='MySQL Exporter'),
            description?: string(name='Description', description='The description of the add-on.', example='Collect mysql indicator information'),
            icon?: string(name='Icon', description='The URL of the icon.', example='http://xxxx'),
            name?: string(name='Name', description='The name of the add-on.', example='metric-agent'),
          }
        ](name='Addons', description='The queried add-ons.'),
        bindResourceId?: string(name='BindResourceId', description='The ID of the resource associated with the environment, such as the ACK cluster ID or VPC ID.', example='vpc-bp1bgo8ronn'),
        bindResourceProfile?: string(name='BindResourceProfile', description='The profile of the resource.', example='xxx'),
        bindResourceType?: string(name='BindResourceType', description='The resource type.', example='VPC'),
        bindVpcCidr?: string(name='BindVpcCidr', description='The CIDR block that is bound to the VPC.', example='172.16.0.0/12'),
        createTime?: string(name='CreateTime', description='The time when the VPC was created.', example='2023-03-24 11:58:35 +0800'),
        createdUserId?: string(name='CreatedUserId', description='The ID of the user that created the VPC.', example='12378523784982'),
        environmentId?: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxx'),
        environmentName?: string(name='EnvironmentName', description='The name of the environment.', example='feiliks-biz-prod-edas'),
        environmentType?: string(name='EnvironmentType', description='The type of the environment. Valid values:

*   CS: Container Service for Kubernetes (ACK)
*   ECS: Elastic Compute Service (ECS)
*   Cloud: cloud service', example='CS'),
        features?: [ 
          {
            alias?: string(name='Alias', description='The alias of the feature.', example='Prometheus Agent'),
            description?: string(name='Description', description='The description of the feature.', example='Collect Metric data using the Prometheus collection specification'),
            icon?: string(name='Icon', description='The URL of the feature icon.', example='http://xxx'),
            name?: string(name='Name', description='The name of the feature.', example='metirc-agent'),
          }
        ](name='Features', description='The features.'),
        grafanaDatasourceUid?: string(name='GrafanaDatasourceUid', description='The unique ID of the Grafana data source.', example='12374890'),
        grafanaFolderTitle?: string(name='GrafanaFolderTitle', description='The name of the Grafana directory.', example='filepath'),
        grafanaFolderUid?: string(name='GrafanaFolderUid', description='The unique ID of the Grafana directory.', example='1798319482935'),
        latestReleaseCreateTime?: string(name='LatestReleaseCreateTime', description='The time when the add-on was last created.', example='2023-09-22T16:56:29+08:00'),
        managedType?: string(name='ManagedType', description='type of managed: 
- none: not managed. default value of prometheus for ACK.
- agent: managed agent. default value of  promehtues for ASK/ACS/AckOne.
- agent-exproter: maanged agent and exporter. default of prometheus for Cloud.', example='agent'),
        prometheusId?: long(name='PrometheusId', description='The ID of the Prometheus service.', example='124769812'),
        prometheusInstanceId?: string(name='PrometheusInstanceId', description='The ID of the Prometheus instance.', example='vpc-m5e4alj2i24ndbn'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-zhangjiakou'),
        releaseCount?: int32(name='ReleaseCount', description='The number of installed add-ons.', example='122'),
        resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmvt3xpr5aema'),
        tags?: [ 
          {
            key?: string(name='Key', description='The tag key.', example='fpx-tag'),
            value?: string(name='Value', description='The tag value.', example='cn-beijing'),
          }
        ](name='Tags', description='The tags of the environment resource.'),
        userId?: string(name='UserId', description='The user ID.', example='13990957477389'),
      }
    ](name='Environments', description='The queried environments.'),
    total?: long(name='Total', description='The total number of returned entries.', example='12'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model ListEnvironmentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnvironmentsResponseBody(name='body'),
}

async function listEnvironmentsWithOptions(tmpReq: ListEnvironmentsRequest, runtime: Util.RuntimeOptions): ListEnvironmentsResponse {
  Util.validateModel(tmpReq);
  var request = new ListEnvironmentsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tag)) {
    request.tagShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tag, 'Tag', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.addonName)) {
    query['AddonName'] = request.addonName;
  }
  if (!Util.isUnset(request.bindResourceId)) {
    query['BindResourceId'] = request.bindResourceId;
  }
  if (!Util.isUnset(request.environmentType)) {
    query['EnvironmentType'] = request.environmentType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tagShrink)) {
    query['Tag'] = request.tagShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEnvironments',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEnvironments(request: ListEnvironmentsRequest): ListEnvironmentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEnvironmentsWithOptions(request, runtime);
}

model ListEscalationPoliciesRequest {
  name?: string(name='Name', description='The name of the escalation policy.', example='prod escalation policy'),
  page?: long(name='Page', description='The number of the page to return.', example='1'),
  size?: long(name='Size', description='The number of entries to return on each page.', example='20'),
}

model ListEscalationPoliciesResponseBody = {
  pageBean?: {
    escalationPolicies?: [ 
      {
        id?: long(name='Id', description='The ID of the escalation policy.', example='1234'),
        name?: string(name='Name', description='The name of the escalation policy.', example='prod escalation policy'),
      }
    ](name='EscalationPolicies', description='The list of escalation policies.'),
    page?: long(name='Page', description='The page number of the returned page.', example='1'),
    size?: long(name='Size', description='The number of entries returned per page.', example='20'),
    total?: long(name='Total', description='The total number of returned entries.', example='1'),
  }(name='PageBean', description='The returned objects.'),
  requestId?: string(name='RequestId', description='The request ID.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
}

model ListEscalationPoliciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEscalationPoliciesResponseBody(name='body'),
}

async function listEscalationPoliciesWithOptions(request: ListEscalationPoliciesRequest, runtime: Util.RuntimeOptions): ListEscalationPoliciesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEscalationPolicies',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEscalationPolicies(request: ListEscalationPoliciesRequest): ListEscalationPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEscalationPoliciesWithOptions(request, runtime);
}

model ListEventBridgeIntegrationsRequest {
  name?: string(name='Name', description='The name of the EventBridge integration.', example='EventBridge_Test'),
  page?: long(name='Page', description='The number of the page to return.', example='1'),
  size?: long(name='Size', description='The number of entries to return on each page.', example='15'),
}

model ListEventBridgeIntegrationsResponseBody = {
  pageBean?: {
    eventBridgeIntegrations?: [ 
      {
        description?: string(name='Description', description='The description of the EventBridge integration.', example='test'),
        id?: long(name='Id', description='The ID of the EventBridge integration.', example='123'),
        name?: string(name='Name', description='The name of the EventBridge integration.', example='EventBridge_Test'),
      }
    ](name='EventBridgeIntegrations', description='The EventBridge integrations.'),
    page?: long(name='Page', description='The number of the returned page.', example='1'),
    size?: long(name='Size', description='The number of entries returned per page.', example='15'),
    total?: long(name='Total', description='The total number of EventBridge integrations that are returned.', example='1'),
  }(name='PageBean', description='The information about EventBridge integrations that is returned on each page.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2B289756-E791-5842-BCBD-AD414C******'),
}

model ListEventBridgeIntegrationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEventBridgeIntegrationsResponseBody(name='body'),
}

async function listEventBridgeIntegrationsWithOptions(request: ListEventBridgeIntegrationsRequest, runtime: Util.RuntimeOptions): ListEventBridgeIntegrationsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEventBridgeIntegrations',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listEventBridgeIntegrations(request: ListEventBridgeIntegrationsRequest): ListEventBridgeIntegrationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEventBridgeIntegrationsWithOptions(request, runtime);
}

model ListGrafanaWorkspaceRequest {
  aliyunLang?: string(name='AliyunLang', example='zh'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxyexli2****'),
  tags?: [ 
    {
      key?: string(name='Key', example='TestKey'),
      value?: string(name='Value', example='TestValue'),
    }
  ](name='Tags'),
}

model ListGrafanaWorkspaceShrinkRequest {
  aliyunLang?: string(name='AliyunLang', example='zh'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxyexli2****'),
  tagsShrink?: string(name='Tags'),
}

model ListGrafanaWorkspaceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [
    GrafanaWorkspace
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0080BE65-167F-5CB6-A691-14E2EFD474BC'),
  success?: boolean(name='Success', example='True'),
  traceId?: string(name='TraceId', example='eac0a8048716731735000007137d000b'),
}

model ListGrafanaWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGrafanaWorkspaceResponseBody(name='body'),
}

async function listGrafanaWorkspaceWithOptions(tmpReq: ListGrafanaWorkspaceRequest, runtime: Util.RuntimeOptions): ListGrafanaWorkspaceResponse {
  Util.validateModel(tmpReq);
  var request = new ListGrafanaWorkspaceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.aliyunLang)) {
    query['AliyunLang'] = request.aliyunLang;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGrafanaWorkspace',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGrafanaWorkspace(request: ListGrafanaWorkspaceRequest): ListGrafanaWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGrafanaWorkspaceWithOptions(request, runtime);
}

model ListInsightsEventsRequest {
  endTime?: string(name='EndTime', description='The details of the event.', example='1480607940000'),
  insightsTypes?: string(name='InsightsTypes', description='Average response-time spikes of application services.', example='errorIncrease,topErrorIncrease,topExceptionIncrease,topRtIncrease,rtIncrease'),
  pid?: string(name='Pid', description='The types of the events that you want to query. Separate multiple event types with commas (,). If you do not specify this parameter, all events are queried.

*   errorIncrease: API error-rate spike events. Examples: HTTP API error-rate spike events and Dubbo API error-rate spike events.
*   topErrorIncrease: the top five API error-rate spike events with the highest traffic.
*   topRtIncrease: API response-time spike events. Examples: HTTP API response-time spike events and Dubbo API response-time spike events.
*   rtIncrease: the top five API response-time spike events with the highest traffic.', example='aokcdqn3ly@a195c6d6421****'),
  regionId?: string(name='RegionId', description='The end of the time range to query. The value is a timestamp.', example='cn-hangzhou'),
  startTime?: string(name='StartTime', description='The ID of the request.', example='1595174400000'),
}

model ListInsightsEventsResponseBody = {
  insightsEvents?: [ 
    {
      date?: long(name='Date', description='The time when the event occurred. The value is a timestamp.', example='1658890560'),
      desc?: string(name='Desc', description='The description of the event.', example='The severity of the event.'),
      level?: string(name='Level', description='The severity of the event.', example='P3'),
      pid?: string(name='Pid', description='The ID of the application associated with the event.', example='dsv9zcel92@7da413b******'),
      problemId?: string(name='ProblemId', description='Problem identification.', example='erep3o9zue@01ebe697ab70566|@1499161100890550|@cn-hangzhou|@1701841800000|@1701842040000|@daa6c51a-3c44-4d57-9548-4e212c******'),
      title?: string(name='Title', description='The title of the event.', example='The type of the event.'),
      type?: string(name='Type', description='The type of the event.', example='rtIncrease'),
    }
  ](name='InsightsEvents', description='The event details.'),
  requestId?: string(name='RequestId', description='The title of the event.', example='6F1174DC-6085-5353-AAE7-D4ADCD******'),
}

model ListInsightsEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInsightsEventsResponseBody(name='body'),
}

async function listInsightsEventsWithOptions(request: ListInsightsEventsRequest, runtime: Util.RuntimeOptions): ListInsightsEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.insightsTypes)) {
    query['InsightsTypes'] = request.insightsTypes;
  }
  if (!Util.isUnset(request.pid)) {
    query['Pid'] = request.pid;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInsightsEvents',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInsightsEvents(request: ListInsightsEventsRequest): ListInsightsEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInsightsEventsWithOptions(request, runtime);
}

model ListIntegrationRequest {
  integrationName?: string(name='IntegrationName', example='云监控集成'),
  integrationProductType?: string(name='IntegrationProductType', example='CLOUD_MONITOR'),
  isDetail?: boolean(name='IsDetail', example='true'),
  page?: long(name='Page', example='1'),
  size?: long(name='Size', example='10'),
}

model ListIntegrationResponseBody = {
  pageInfo?: {
    integrations?: [ 
      {
        apiEndpoint?: string(name='ApiEndpoint', example='https://alerts.aliyuncs.com/api/v1/integrations/custom/ymQBN******'),
        createTime?: string(name='CreateTime', example='2022-06-18'),
        integrationDetail?: {
          autoRecover?: boolean(name='AutoRecover', example='true'),
          description?: string(name='Description', example='测试'),
          duplicateKey?: string(name='DuplicateKey', example='LABEL.alertname::LABEL.severity'),
          extendedFieldRedefineRules?: [  map[string]any ](name='ExtendedFieldRedefineRules'),
          fieldRedefineRules?: [  map[string]any ](name='FieldRedefineRules'),
          initiativeRecoverField?: string(name='InitiativeRecoverField', example='$.status'),
          initiativeRecoverValue?: string(name='InitiativeRecoverValue', example='ok'),
          recoverTime?: long(name='RecoverTime', example='300'),
          stat?: [ long ](name='Stat'),
        }(name='IntegrationDetail'),
        integrationId?: long(name='IntegrationId', example='1234'),
        integrationName?: string(name='IntegrationName', example='云监控集成'),
        integrationProductType?: string(name='IntegrationProductType', example='CLOUD_MONITOR'),
        liveness?: string(name='Liveness', example='ready'),
        shortToken?: string(name='ShortToken', example='ymQBN******'),
        state?: boolean(name='State', example='true'),
      }
    ](name='Integrations'),
    page?: long(name='Page', example='1'),
    size?: long(name='Size', example='10'),
    total?: long(name='Total', example='1'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model ListIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIntegrationResponseBody(name='body'),
}

async function listIntegrationWithOptions(request: ListIntegrationRequest, runtime: Util.RuntimeOptions): ListIntegrationResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIntegration',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listIntegration(request: ListIntegrationRequest): ListIntegrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIntegrationWithOptions(request, runtime);
}

model ListNotificationPoliciesRequest {
  directedMode?: boolean(name='DirectedMode', description='Specifies whether to enable simple mode.'),
  ids?: string(name='Ids', description='The ID of the notification policy.', example='12345'),
  isDetail?: boolean(name='IsDetail', description='Specifies whether to query the details about notification policies. Valid values:

*   `true`: Details about notification policies are queried.
*   `false`: Details about notification policies are not queried.', example='false'),
  name?: string(name='Name', description='The name of the notification policy.', example='notificationpolicy_test'),
  page?: long(name='Page', description='The number of the page to return.', example='1'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  size?: long(name='Size', description='The number of entries to return on each page.', example='20'),
}

model ListNotificationPoliciesResponseBody = {
  pageBean?: {
    notificationPolicies?: [ 
      {
        directedMode?: boolean(name='DirectedMode', description='Indicates whether simple mode is enabled.'),
        escalationPolicyId?: long(name='EscalationPolicyId', description='The ID of the escalation policy.', example='123'),
        groupRule?: {
          groupInterval?: long(name='GroupInterval', description='The time interval of grouping. Unit: seconds. Default value: 30.', example='30'),
          groupWait?: long(name='GroupWait', description='The waiting time for grouping. Unit: seconds. Default value: 5.', example='5'),
          groupingFields?: [ string ](name='GroupingFields', description='The fields that are used to group events.

*   If this parameter is not returned, all alert notifications are sent to the alert contacts that belong to the `alertname` group. By default, this parameter is not returned.
*   If this parameter is returned, alerts with the same fields are sent to the alert contacts in one notification.'),
        }(name='GroupRule', description='The grouping rule for alert events.'),
        id?: long(name='Id', description='The ID of the notification policy.', example='1234'),
        integrationId?: long(name='IntegrationId', description='The integration ID of the ticket system to which alerts are pushed.', example='34'),
        matchingRules?: [ 
          {
            matchingConditions?: [ 
              {
                key?: string(name='Key', description='The key of the matching condition.', example='altertname'),
                operator?: string(name='Operator', description='The logical operator of the matching condition. Valid values:

*   `eq`: equal to
*   `neq`: not equal to
*   `in`: contains
*   `nin`: does not contain
*   `re`: regular expression match
*   `nre`: regular expression mismatch', example='eq'),
                value?: string(name='Value', description='The value of the matching condition.', example='test'),
              }
            ](name='MatchingConditions', description='The matching conditions.'),
          }
        ](name='MatchingRules', description='The matching rules for alert events.'),
        name?: string(name='Name', description='The name of the notification policy.', example='notificationpolicy_test'),
        notifyRule?: {
          notifyChannels?: [ string ](name='NotifyChannels', description='The notification methods.'),
          notifyEndTime?: string(name='NotifyEndTime', description='The end time of the notification window.', example='23:59'),
          notifyObjects?: [ 
            {
              notifyChannels?: [ string ](name='NotifyChannels', description='The notification methods specified for a contact.'),
              notifyObjectId?: long(name='NotifyObjectId', description='The ID of the notification object.', example='123'),
              notifyObjectName?: string(name='NotifyObjectName', description='The name of the notification object.', example='test'),
              notifyObjectType?: string(name='NotifyObjectType', description='The type of the notification object. Valid values:

*   CONTACT: an individual contact
*   CONTACT_GROUP: a contact group
*   DING_ROBOT: an instant messaging (IM) chatbot
*   CONTACT_SCHEDULE: a person on duty based on an established schedule', example='CONTACT'),
            }
          ](name='NotifyObjects', description='The notification objects.'),
          notifyStartTime?: string(name='NotifyStartTime', description='The start time of the notification window.', example='00:00'),
        }(name='NotifyRule', description='The notification rules.'),
        notifyTemplate?: {
          emailContent?: string(name='EmailContent', description='The content of the alert notification sent by email.', example='Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
Notification Policy: {{ .dispatchRuleName }}
Alert Time: {{ .startTime }}
Description: {{ for .alerts }} {{ .annotations.message }}  {{if .generatorURL }}  &lt;a href="{{.generatorURL}}" > Details&lt;/a&gt;
 {{ end }} {{ end }}'),
          emailRecoverContent?: string(name='EmailRecoverContent', description='The content of the alert resolution notification sent by email.', example='Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
Notification Policy: {{ .dispatchRuleName }}
Recover Time: {{ .endTime }}
Description: {{ for .alerts }} {{ .annotations.message }}  {{if .generatorURL }} &lt;a href="{{.generatorURL}}" > Details&lt;/a&gt;
 {{ end }} {{ end }}'),
          emailRecoverTitle?: string(name='EmailRecoverTitle', description='The title of the alert resolution notification sent by email.', example='{{ .commonLabels.alertname }}'),
          emailTitle?: string(name='EmailTitle', description='The title of the alert notification sent by email.', example='{{ .commonLabels.alertname }}'),
          robotContent?: string(name='RobotContent', description='The content of the alert notification sent by an IM chatbot.', example='{{if .commonLabels.clustername }}

 &gt;  Cluster Name: {{ .commonLabels.clustername }} 

 {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}

 &gt;  App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} 

 {{ end }}{{ for .alerts }} &gt;  {{ .annotations.message }} {{if .generatorURL }} [Details]({{.generatorURL}})  {{end}} {{if .annotations._aliyun_arms_insights_analyze_link }}[&lt;font color=\\"#ff0000\\"&gt;diagnostic analysis&lt;/font&gt;]({{ .annotations._aliyun_arms_insights_analyze_link}}){{ end }}{{if  eq "1" .labels._aliyun_arms_denoise_code }} (Important:{{.labels._aliyun_arms_important_reason }}) {{end}}

{{end}}'),
          smsContent?: string(name='SmsContent', description='The content of the alert notification sent by text message.', example='{{ .level }}Alert Occurs
Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
Notification Policy: {{ .dispatchRuleName }}
Alert Time: {{ .startTime }}
Description: {{ for .alerts }} {{ .annotations.message }} {{ end }}'),
          smsRecoverContent?: string(name='SmsRecoverContent', description='The content of the alert resolution notification sent by text message.', example='Alert Recovery Notification
Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
Notification Policy: {{ .dispatchRuleName }}
Recover Time: {{ .endTime }}
Description: {{ for .alerts }} {{ .annotations.message }} {{ end }}'),
          ttsContent?: string(name='TtsContent', description='The content of the alert notification sent by phone.', example='Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
Notification Policy: {{ .dispatchRuleName }}
Alert Time: {{ .startTime }}
Description: {{ for .alerts }} {{ .annotations.message }} {{ end }}'),
          ttsRecoverContent?: string(name='TtsRecoverContent', description='The content of the alert resolution notification sent by phone.', example='Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
Notification Policy: {{ .dispatchRuleName }}
Recover Time: {{ .endTime }}
Description: {{ for .alerts }} {{ .annotations.message }} {{ end }}'),
        }(name='NotifyTemplate', description='The notification templates.'),
        repeat?: boolean(name='Repeat', description='Indicates whether the system resends notifications for a long-lasting unresolved alert. Valid values:

*   `true` (default): The system resends notifications for a long-lasting unresolved alert at a specified time interval.
*   `false`: The system resends notifications for a long-lasting unresolved alert based on an escalation policy.', example='true'),
        repeatInterval?: long(name='RepeatInterval', description='The time interval at which notifications are resent for a long-lasting unresolved alert. Unit: seconds.', example='600'),
        sendRecoverMessage?: boolean(name='SendRecoverMessage', description='Indicates whether the status of an alert automatically changes to Resolved when all events related to the alert change to the Restored state. The system sends a notification to the alert contacts when the alert status changes to Resolved.

*   `true` (default): The system sends a notification.
*   `false`: The system does not send a notification.', example='true'),
      }
    ](name='NotificationPolicies', description='The queried notification policies.'),
    page?: long(name='Page', description='The number of the page returned.', example='1'),
    size?: long(name='Size', description='The number of entries that are returned on each page.', example='20'),
    total?: long(name='Total', description='The number of notification policies that are returned.', example='24'),
  }(name='PageBean', description='The returned pages.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
}

model ListNotificationPoliciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNotificationPoliciesResponseBody(name='body'),
}

async function listNotificationPoliciesWithOptions(request: ListNotificationPoliciesRequest, runtime: Util.RuntimeOptions): ListNotificationPoliciesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.directedMode)) {
    query['DirectedMode'] = request.directedMode;
  }
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.isDetail)) {
    query['IsDetail'] = request.isDetail;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.page)) {
    query['Page'] = request.page;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.size)) {
    query['Size'] = request.size;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListNotificationPolicies',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNotificationPolicies(request: ListNotificationPoliciesRequest): ListNotificationPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNotificationPoliciesWithOptions(request, runtime);
}

model ListOnCallSchedulesRequest {
  name?: string(name='Name', description='The name of the scheduling policy.', example='OnCallSchedule_test'),
  page?: long(name='Page', description='The number of the page to return.', example='1'),
  size?: long(name='Size', description='The number of entries to return on each page.', example='20'),
}

model ListOnCallSchedulesResponseBody = {
  pageBean?: {
    onCallSchedules?: [ 
      {
        description?: string(name='Description', description='The description of the scheduling policy.', example='Test scheduling policy'),
        id?: long(name='Id', description='The ID of the scheduling policy.', example='1234'),
        name?: string(name='Name', description='The name of the scheduling policy.', example='OnCallSchedule_test'),
      }
    ](name='OnCallSchedules', description='The information about the scheduling policy.'),
    page?: long(name='Page', description='The page number of the returned page.', example='1'),
    size?: long(name='Size', description='The number of entries returned per page.', example='20'),
    total?: long(name='Total', description='The total number of returned entries.', example='1'),
  }(name='PageBean', description='The objects that were returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
}

model ListOnCallSchedulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOnCallSchedulesResponseBody(name='body'),
}

async function listOnCallSchedulesWithOptions(request: ListOnCallSchedulesRequest, runtime: Util.RuntimeOptions): ListOnCallSchedulesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOnCallSchedules',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOnCallSchedules(request: ListOnCallSchedulesRequest): ListOnCallSchedulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOnCallSchedulesWithOptions(request, runtime);
}

model ListPrometheusAlertRulesRequest {
  clusterId?: string(name='ClusterId', example='c0bad479465464e1d8c1e641b0afb****'),
  matchExpressions?: string(name='MatchExpressions', example='[{"key":"severity","value":"critical","operator":"re"}]'),
  name?: string(name='Name', example='Prometheus_Alert'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  status?: int32(name='Status', example='1'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
  type?: string(name='Type'),
}

model ListPrometheusAlertRulesResponseBody = {
  code?: long(name='Code'),
  message?: string(name='Message'),
  prometheusAlertRules?: [ 
    {
      alertId?: long(name='AlertId', example='3888704'),
      alertName?: string(name='AlertName', example='Prometheus_Alert'),
      annotations?: [ 
        {
          name?: string(name='Name', example='message'),
          value?: string(name='Value'),
        }
      ](name='Annotations'),
      clusterId?: string(name='ClusterId', example='c0bad479465464e1d8c1e641b0afb****'),
      dispatchRuleId?: long(name='DispatchRuleId', example='10282'),
      duration?: string(name='Duration', example='1m'),
      expression?: string(name='Expression', example='100 * (sum(rate(container_cpu_usage_seconds_total[1m])) by (pod_name) / sum(label_replace(kube_pod_container_resource_limits_cpu_cores, \\"pod_name\\", \\"$1\\", \\"pod\\", \\"(.*)\\")) by (pod_name))>75'),
      labels?: [ 
        {
          name?: string(name='Name', example='severity'),
          value?: string(name='Value', example='critical'),
        }
      ](name='Labels'),
      message?: string(name='Message'),
      notifyType?: string(name='NotifyType', example='ALERT_MANAGER'),
      status?: int32(name='Status', example='1'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      type?: string(name='Type'),
    }
  ](name='PrometheusAlertRules'),
  requestId?: string(name='RequestId', example='9FEA6D00-317F-45E3-9004-7FB8B0B7****'),
  success?: boolean(name='Success'),
}

model ListPrometheusAlertRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrometheusAlertRulesResponseBody(name='body'),
}

async function listPrometheusAlertRulesWithOptions(request: ListPrometheusAlertRulesRequest, runtime: Util.RuntimeOptions): ListPrometheusAlertRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.matchExpressions)) {
    query['MatchExpressions'] = request.matchExpressions;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPrometheusAlertRules',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPrometheusAlertRules(request: ListPrometheusAlertRulesRequest): ListPrometheusAlertRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPrometheusAlertRulesWithOptions(request, runtime);
}

model ListPrometheusAlertTemplatesRequest {
  clusterId?: string(name='ClusterId', example='c0bad479465464e1d8c1e641b0afb****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListPrometheusAlertTemplatesResponseBody = {
  prometheusAlertTemplates?: [ 
    {
      alertName?: string(name='AlertName'),
      annotations?: [ 
        {
          name?: string(name='Name', example='message'),
          value?: string(name='Value'),
        }
      ](name='Annotations'),
      description?: string(name='Description'),
      duration?: string(name='Duration', example='1m'),
      expression?: string(name='Expression', example='node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes * 100 < 10'),
      labels?: [ 
        {
          name?: string(name='Name', example='severity'),
          value?: string(name='Value', example='warning'),
        }
      ](name='Labels'),
      type?: string(name='Type'),
      version?: string(name='Version', example='1.0'),
    }
  ](name='PrometheusAlertTemplates'),
  requestId?: string(name='RequestId', example='9FEA6D00-317F-45E3-9004-7FB8B0B7****'),
}

model ListPrometheusAlertTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrometheusAlertTemplatesResponseBody(name='body'),
}

async function listPrometheusAlertTemplatesWithOptions(request: ListPrometheusAlertTemplatesRequest, runtime: Util.RuntimeOptions): ListPrometheusAlertTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPrometheusAlertTemplates',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPrometheusAlertTemplates(request: ListPrometheusAlertTemplatesRequest): ListPrometheusAlertTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPrometheusAlertTemplatesWithOptions(request, runtime);
}

model ListPrometheusGlobalViewRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model ListPrometheusGlobalViewResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='DBDCE95A-A0DD-5FC5-97CC-EEFC3D814385'),
}

model ListPrometheusGlobalViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrometheusGlobalViewResponseBody(name='body'),
}

async function listPrometheusGlobalViewWithOptions(request: ListPrometheusGlobalViewRequest, runtime: Util.RuntimeOptions): ListPrometheusGlobalViewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPrometheusGlobalView',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPrometheusGlobalView(request: ListPrometheusGlobalViewRequest): ListPrometheusGlobalViewResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPrometheusGlobalViewWithOptions(request, runtime);
}

model ListPrometheusInstanceByTagAndResourceGroupIdRequest {
  regionId?: string(name='RegionId', description='The region ID of the Prometheus instance.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='fpx-tag'),
      value?: string(name='Value', description='The value of the tag.', example='fvt-tag-value'),
    }
  ](name='Tag', description='The tags.'),
}

model ListPrometheusInstanceByTagAndResourceGroupIdResponseBody = {
  code?: string(name='Code', description='The response code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: {
    prometheusInstances?: [ 
      {
        authToken?: string(name='AuthToken', description='Auth Token string.', example='ad32dxxxx'),
        clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='c9d5dda1aeca64220853ace304baeb03d'),
        clusterName?: string(name='ClusterName', description='The name of the Prometheus instance.', example='prom1'),
        clusterType?: string(name='ClusterType', description='The type of the cluster. Valid values: remote-write: Prometheus instance for remote write.

*   ecs: Prometheus instances for ECS.
*   cloud-monitor: Prometheus instance for Alibaba Cloud services in the Chinese mainland.
*   cloud-product: Prometheus instance for Alibaba Cloud services outside China.
*   global-view: Prometheus instance for GlobalView.
*   aliyun-cs: Prometheus instance for Container Service.', example='ecs'),
        grafanaInstanceId?: string(name='GrafanaInstanceId', description='The ID of the Grafana workspace.', example='grafana-rnggfvhlcdl6m71l**'),
        httpApiInterUrl?: string(name='HttpApiInterUrl', description='HTTP Api internet url.', example='http://cn-beijing.arms.aliyuncs.com:9090/api/v1/prometheus/xxx/cn-beijing'),
        httpApiIntraUrl?: string(name='HttpApiIntraUrl', description='HTTP Api intranet url.', example='http://cn-beijing-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/xxx/cn-beijing'),
        paymentType?: string(name='PaymentType', description='The billing method. Valid values:

*   PREPAY: subscription.
*   POSTPAY: pay-as-you-go.', example='POSTPAY'),
        pushGatewayInterUrl?: string(name='PushGatewayInterUrl', description='Push Gateway internet url.', example='http://cn-beijing.arms.aliyuncs.com/prometheus/xxx/api/v2'),
        pushGatewayIntraUrl?: string(name='PushGatewayIntraUrl', description='Push Gateway intranet url.', example='http://cn-beijing-intranet.arms.aliyuncs.com/prometheus/xxx/api/v2'),
        regionId?: string(name='RegionId', description='The region ID of the Prometheus instance.', example='cn-shanghai'),
        remoteReadInterUrl?: string(name='RemoteReadInterUrl', description='Remote Read internet url.', example='http://cn-beijing.arms.aliyuncs.com:9090/api/v1/prometheus/xxx/api/v1/read'),
        remoteReadIntraUrl?: string(name='RemoteReadIntraUrl', description='Remote Read intranet url.', example='http://cn-beijing-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/xxx/api/v1/read'),
        remoteWriteInterUrl?: string(name='RemoteWriteInterUrl', description='Remote Write internet url.', example='http://cn-beijing.arms.aliyuncs.com/prometheus/xxx/api/v3/write'),
        remoteWriteIntraUrl?: string(name='RemoteWriteIntraUrl', description='Remote Write intranet url.', example='http://cn-beijing-intranet.arms.aliyuncs.com/prometheus/xxx/api/v3/write'),
        resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Prometheus instance belongs.', example='rg-acfmz7nocpeidcy'),
        resourceType?: string(name='ResourceType', description='Resource type.', example='PROMETHEUS'),
        securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-f8zd1toc10wmbi1v5rom'),
        subClustersJson?: string(name='SubClustersJson', description='The child instances of the Prometheus instance for GlobalView instance. The value is a JSON string.', example='\\[ { "headers": {}, "regionId": "cn-hangzhou", "sourceType": "AlibabaPrometheus", "extras": {}, "clusterId": "c39a1048921e04fceb039db2fb\\*\\*\\*\\*", "sourceName": "arms-luyao-test", "dataSource": "", "userId": "167275301789\\*\\*\\*\\*" }, { "headers": {}, "regionId": "cn-beijing", "sourceType": "AlibabaPrometheus", "extras": {}, "clusterId": "c6b6485496d5b400abde22cb47b5\\*\\*\\*\\*", "sourceName": "agent-321-test", "dataSource": "", "userId": "167275301789\\*\\*\\*\\*" }, { "headers": {}, "regionId": "cn-zhangjiakou", "sourceType": "AlibabaPrometheus", "extras": {}, "clusterId": "c261a4f3200c446659133f1ade78\\*\\*\\*\\*", "sourceName": "zaifeng-cardinality-01", "dataSource": "", "userId": "167275301789\\*\\*\\*\\*" } ]'),
        tags?: [ 
          {
            tagKey?: string(name='TagKey', description='The key of the tag.', example='ac-cus-tag-3'),
            tagValue?: string(name='TagValue', description='The value of the tag.', example='asg-2vc8qq7x89o11rus9uvu'),
          }
        ](name='Tags', description='The tags.'),
        userId?: string(name='UserId', description='The ID of the user.', example='1672753017899***'),
        vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-f8z73vcja1tqnw90aav5a'),
        vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-8vbtp1fsm8mir18l8rl0u'),
      }
    ](name='PrometheusInstances', description='The queried Prometheus instances.'),
  }(name='Data', description='The struct returned.'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='4789C3E9-A85A-524B-B97B-9D2B14BA06BC'),
}

model ListPrometheusInstanceByTagAndResourceGroupIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrometheusInstanceByTagAndResourceGroupIdResponseBody(name='body'),
}

async function listPrometheusInstanceByTagAndResourceGroupIdWithOptions(request: ListPrometheusInstanceByTagAndResourceGroupIdRequest, runtime: Util.RuntimeOptions): ListPrometheusInstanceByTagAndResourceGroupIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPrometheusInstanceByTagAndResourceGroupId',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPrometheusInstanceByTagAndResourceGroupId(request: ListPrometheusInstanceByTagAndResourceGroupIdRequest): ListPrometheusInstanceByTagAndResourceGroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPrometheusInstanceByTagAndResourceGroupIdWithOptions(request, runtime);
}

model ListPrometheusInstancesRequest {
  clusterType?: string(name='ClusterType', description='Optional instance types (if left blank, all types of instances will be queried):
- cloud-product-prometheus 
- ManagedKubernetes
- satellite
- Ask
- remote-write-prometheus
- cloud-monitor-cmee
- ExternalKubernetes
- vpc-prometheus
- cloud-monitor-direct
- Edge Kubernetes', example='cloud-product-prometheus'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  showGlobalView?: boolean(name='ShowGlobalView', description='Specifies whether to query global aggregation instances. Valid values:

*   true
*   false', example='true'),
}

model ListPrometheusInstancesResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The Prometheus instances in the region in the JSON format.', example='[{"agentStatus":"0","clusterId":"global-v2-cn-1672753017899-dmjnwtzz","clusterName":"test-GlobalView","clusterType":"GlobalViewV2","commercialConfig":{},"createTime":1656579981000,"id":13785300,"isAdvancedClusterInstalled":false,"isClusterRunning":true,"isControllerInstalled":true,"isIntegrationCenter":false,"regionId":"cn-hongkong","updateTime":1657616273000,"userId":"1672753017899"},{"agentStatus":"0","clusterId":"51a123a61a8f31f0","clusterName":"cloud-product-prometheus_cn-qingdao","clusterType":"cloud-product-prometheus","commercialConfig":{},"controllerId":"51a123a61a8f31f0","createTime":1653532488000,"id":13746658,"isAdvancedClusterInstalled":false,"isClusterRunning":true,"isControllerInstalled":true,"isIntegrationCenter":false,"regionId":"cn-qingdao","updateTime":1653532518000,"userId":"1672753017899"}]'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='E9C9DA3D-10FE-472E-9EEF-2D0A3E41****'),
}

model ListPrometheusInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrometheusInstancesResponseBody(name='body'),
}

async function listPrometheusInstancesWithOptions(request: ListPrometheusInstancesRequest, runtime: Util.RuntimeOptions): ListPrometheusInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterType)) {
    query['ClusterType'] = request.clusterType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.showGlobalView)) {
    query['ShowGlobalView'] = request.showGlobalView;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPrometheusInstances',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPrometheusInstances(request: ListPrometheusInstancesRequest): ListPrometheusInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPrometheusInstancesWithOptions(request, runtime);
}

model ListPrometheusIntegrationRequest {
  clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance. Only aliyun-cs and ecs instances are supported.', example='c77f6f2397ea74672872acf5e31374a27'),
  integrationType?: string(name='IntegrationType', description='The integration type.', example='kafka, mysql, redis, snmp, emr, nubela, and tidb'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model ListPrometheusIntegrationResponseBody = {
  code?: int32(name='Code', description='The response code. The status code 200 indicates that the request was successful.', example='200'),
  data?: [ 
    {
      canDelete?: boolean(name='CanDelete', description='Indicates whether the exporter can be deleted.', example='true'),
      canEditor?: boolean(name='CanEditor', description='Indicates whether the exporter can be edited.', example='true'),
      clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='c589a1b8db05c4561aefbb898ca8fb1cf'),
      containerName?: string(name='ContainerName', description='The name of the container.', example='container-1'),
      describe?: string(name='Describe', description='The description of the exporter.', example='"{}"'),
      exporterType?: string(name='ExporterType', description='The type of the exporter.', example='kafka-exporter'),
      instanceId?: long(name='InstanceId', description='The exporter ID.', example='29374'),
      instanceName?: string(name='InstanceName', description='The name of the exporter.', example='inet'),
      integrationType?: string(name='IntegrationType', description='The integration type.', example='Kafka, mysql, redis, snmp, emr, nubela, and tidb'),
      namespace?: string(name='Namespace', description='The namespace.', example='arms-prom'),
      needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether an upgrade is required.', example='true'),
      param?: string(name='Param', description='The configurations of the exporter. The value is a JSON string.', example='{
      "port": "5554",
      "name": "kafka-test12",
      "kafka_instance": "kafka-test",
      "__label_value": "kafka-test",
      "scrape_interval": 33,
      "metrics_path": "/metrics",
      "__label_key": "kafka-test"
}'),
      podName?: string(name='PodName', description='The pod name of the exporter.', example='kafka-exporter-1'),
      showDescribe?: boolean(name='ShowDescribe', description='Indicates whether the description is displayed.', example='true'),
      showLog?: boolean(name='ShowLog', description='Indicates whether the exporter logs are displayed.', example='true'),
      status?: string(name='Status', description='The state of the exporter.', example='installed'),
      target?: string(name='Target', description='The monitored IP address.', example='121.40.62.240:3342'),
      version?: string(name='Version', description='The version number.', example='1.0.0'),
    }
  ](name='Data', description='The queried exporters.'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='1F1D8840-5330-5804-A8DB-C3C5C5CED6BB'),
}

model ListPrometheusIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrometheusIntegrationResponseBody(name='body'),
}

async function listPrometheusIntegrationWithOptions(request: ListPrometheusIntegrationRequest, runtime: Util.RuntimeOptions): ListPrometheusIntegrationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.integrationType)) {
    query['IntegrationType'] = request.integrationType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPrometheusIntegration',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPrometheusIntegration(request: ListPrometheusIntegrationRequest): ListPrometheusIntegrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPrometheusIntegrationWithOptions(request, runtime);
}

model ListPrometheusMonitoringRequest {
  clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  regionId?: string(name='RegionId', description='The region ID. Default value: `cn-hangzhou`.', example='cn-hangzhou'),
  type?: string(name='Type', description='The type of the monitoring configuration. Valid values for a Prometheus instance for Container Service: serviceMonitor, podMonitor, customJob, and probe. Valid values for a Prometheus instance for ECS: customJob and probe.', example='serviceMonitor'),
}

model ListPrometheusMonitoringResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: [ 
    {
      clusterId?: string(name='ClusterId', description='Prometheus Instance ID.', example='c589a1b8db05c4561aefbb898ca8fb1cf'),
      configYaml?: string(name='ConfigYaml', description='The monitoring configuration. The value is a YAML string.'),
      monitoringName?: string(name='MonitoringName', description='The name of the monitoring configuration.', example='podMonitor1'),
      status?: string(name='Status', description='The status of the monitoring configuration.', example='run'),
      type?: string(name='Type', description='The type of the monitoring configuration.', example='podMonitor'),
    }
  ](name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='D80ADAAC-8C32-5479-BD14-C28CF832****'),
}

model ListPrometheusMonitoringResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrometheusMonitoringResponseBody(name='body'),
}

async function listPrometheusMonitoringWithOptions(request: ListPrometheusMonitoringRequest, runtime: Util.RuntimeOptions): ListPrometheusMonitoringResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPrometheusMonitoring',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPrometheusMonitoring(request: ListPrometheusMonitoringRequest): ListPrometheusMonitoringResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPrometheusMonitoringWithOptions(request, runtime);
}

model ListPrometheusRemoteWritesRequest {
  clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance. Only a Prometheus instance for Container Service or a Prometheus instance for ECS is supported.', example='cc7a37ee31aea4ed1a059eff8034b\\*\\*\\*\\* or vpc-\\*\\*\\*\\*'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model ListPrometheusRemoteWritesResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  data?: [ 
    {
      clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='c589a1b8db05c4561aefbb898ca8fb1cf'),
      remoteWriteName?: string(name='RemoteWriteName', description='The name of the remote write configuration item.', example='abc123'),
      remoteWriteYaml?: string(name='RemoteWriteYaml', description='The information about the queried remote write configuration item of the Prometheus instance. The information is displayed in the YAML format.', example='remote_write:
  - name: rw1
    url: "http://cn-hangzhou-intranet.arms.aliyuncs.com/prometheus/uid/xx/cn-hangzhou/api/v3/write"
    basic_auth:
      username: xxx
      password: xxx
    write_relabel_configs:
      - source_labels: [ instance_id ]
        separator: ;
        regex: si
        replacement: $1
        action: keep'),
    }
  ](name='Data', description='The remote write configuration items returned.', example='[
  {
    "name": "TiDBxxx",
    "yaml": "remote_write:\\\\n- basic_auth: {password: \\"******\\", username: xxx}\\\\n  name: TiDBxxx\\\\n  write_relabel_configs:\\\\n  - regex: si-6e2ca86444db4e55a7c1\\\\n    source_labels: [instance_id]\\\\n    action: keep\\\\n    separator: ;\\\\n    replacement: $1\\\\n  url: http://xxx:8080/prometheus/xxx/ddd/cn-hangzhou/api/v3/write\\\\n"
  },
  {
    "name": "TiDBxxx1",
    "yaml": "remote_write:\\\\n- basic_auth: {password: \\"******\\", username: xxx}\\\\n  name: TiDBxxx1\\\\n  write_relabel_configs:\\\\n  - regex: si-6e2ca86444db4e55a7c1\\\\n    source_labels: [instance_id]\\\\n    action: keep\\\\n    separator: ;\\\\n    replacement: $1\\\\n  url: http://xxx:8080/prometheus/xxx/ddd/cn-hangzhou/api/v3/write\\\\n"
  }
]'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='9319A57D-2D9E-472A-B69B-CF3CD16D****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model ListPrometheusRemoteWritesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrometheusRemoteWritesResponseBody(name='body'),
}

async function listPrometheusRemoteWritesWithOptions(request: ListPrometheusRemoteWritesRequest, runtime: Util.RuntimeOptions): ListPrometheusRemoteWritesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPrometheusRemoteWrites',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPrometheusRemoteWrites(request: ListPrometheusRemoteWritesRequest): ListPrometheusRemoteWritesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPrometheusRemoteWritesWithOptions(request, runtime);
}

model ListRetcodeAppsRequest {
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. You can obtain the resource group ID in the **Resource Management** console.', example='rg-acfmxyexli2****'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The tags.'),
}

model ListRetcodeAppsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='99A663CB-8D7B-4B0D-A006-03C8EE38E7BB'),
  retcodeApps?: [ 
    {
      appId?: long(name='AppId', description='The ID of the application. The parameter is an auto-increment parameter.', example='16064'),
      appName?: string(name='AppName', description='The name of the application.', example='A1'),
      nickName?: string(name='NickName', description='The alias of the application monitored by Browser Monitoring.', example='B1'),
      pid?: string(name='Pid', description='The PID of the application.', example='atc889zkcf@d8deedfa9bf****'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****'),
      retcodeAppType?: string(name='RetcodeAppType', description='The type of the application. Valid values:

*   `web`: web application
*   `weex`: Weex mobile app
*   `mini_dd`: DingTalk mini program
*   `mini_alipay`: Alipay mini program
*   `mini_wx`: WeChat mini program
*   `mini_common`: mini program on other platforms', example='web'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='TestKey'),
          value?: string(name='Value', description='The tag value.', example='TestValue'),
        }
      ](name='Tags', description='The tags.'),
    }
  ](name='RetcodeApps', description='The list of applications monitored by Browser Monitoring.'),
}

model ListRetcodeAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRetcodeAppsResponseBody(name='body'),
}

/**
  * ****
  *
  * @param request ListRetcodeAppsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListRetcodeAppsResponse
 */
async function listRetcodeAppsWithOptions(request: ListRetcodeAppsRequest, runtime: Util.RuntimeOptions): ListRetcodeAppsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRetcodeApps',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ****
  *
  * @param request ListRetcodeAppsRequest
  * @return ListRetcodeAppsResponse
 */
async function listRetcodeApps(request: ListRetcodeAppsRequest): ListRetcodeAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRetcodeAppsWithOptions(request, runtime);
}

model ListScenarioRequest {
  appId?: string(name='AppId', description='The ID of the application.', example='b590lhguqs@28f515462******'),
  name?: string(name='Name', description='The name of the business monitoring job.', example='pro-content'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-zhangjaikou'),
  scenario?: string(name='Scenario', description='The scenario where the business monitoring job is used. Valid values:

*   `USER-DEFINED`: user-defined. This is the default value.
*   `EDAS-ROLLOUT`: application release in Enterprise Distributed Application Service (EDAS)
*   `OAM-ROLLOUT`: application release based on Open Application Model (OAM)
*   `MSC-CANARY`: canary release based on Microservice Engine (MSE)', example='USER-DEFINED'),
  sign?: string(name='Sign', description='The code of the business monitoring job. Set this parameter when you know the code of the business monitoring job you want to query.', example='a9f8****'),
}

model ListScenarioResponseBody = {
  armsScenarios?: [ 
    {
      appId?: string(name='AppId', description='The ID of the application.', example='b590lhguqs@28f515462******'),
      createTime?: string(name='CreateTime', description='The time when the business monitoring job was created.', example='1585214916000'),
      extensions?: string(name='Extensions', description='The extended information. The value is a JSON string.', example='{"_MODE": "CUSTOM-TRANSACTION","_SCENARIO": "USER-DEFINED"}'),
      id?: long(name='Id', description='The ID of the business monitoring job.', example='132'),
      name?: string(name='Name', description='The name of the business monitoring job.', example='k8s_deployment_css-guns-vip-main-prod_silence'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-zhangjiakou'),
      sign?: string(name='Sign', description='The code of the business monitoring job.', example='a9f8****'),
      updateTime?: string(name='UpdateTime', description='The time when the business monitoring job was updated.', example='1585214916000'),
      userId?: string(name='UserId', description='The ID of the user.', example='113197164949****'),
    }
  ](name='ArmsScenarios', description='The detailed information of the business monitoring job.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='98027D1F-3AEB-492C-A4AA-E9217992****'),
}

model ListScenarioResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListScenarioResponseBody(name='body'),
}

async function listScenarioWithOptions(request: ListScenarioRequest, runtime: Util.RuntimeOptions): ListScenarioResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.scenario)) {
    query['Scenario'] = request.scenario;
  }
  if (!Util.isUnset(request.sign)) {
    query['Sign'] = request.sign;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListScenario',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listScenario(request: ListScenarioRequest): ListScenarioResponse {
  var runtime = new Util.RuntimeOptions{};
  return listScenarioWithOptions(request, runtime);
}

model ListSilencePoliciesRequest {
  isDetail?: boolean(name='IsDetail', description='The operation that you want to perform. Set the value to **ListSilencePolicies**.', example='true'),
  name?: string(name='Name', description='An array of matching condition objects.', example='silencepolicy_test'),
  page?: long(name='Page', description='The number of entries to return on each page.', example='1'),
  regionId?: string(name='RegionId'),
  size?: long(name='Size', description='The ID of the silence policy.', example='20'),
}

model ListSilencePoliciesResponseBody = {
  pageBean?: {
    page?: long(name='Page', description='The name of the silence policy.', example='1'),
    silencePolicies?: [ 
      {
        id?: long(name='Id', description='The name of the silence policy.', example='123'),
        matchingRules?: [ 
          {
            matchingConditions?: [ 
              {
                key?: string(name='Key', example='altertname'),
                operator?: string(name='Operator', example='eq'),
                value?: string(name='Value', example='test'),
              }
            ](name='MatchingConditions', description='The ID of the request.'),
          }
        ](name='MatchingRules', description='Specifies whether to query the details of a silence policy. Valid values:

*   `true`: Details of the silence policy are queried.
*   `false`: Details of the silence policy are not queried.'),
        name?: string(name='Name', description='An array of returned objects.', example='silencepolicy_test'),
      }
    ](name='SilencePolicies', description='The number of silence policies that were returned.'),
    size?: long(name='Size', description='The number of entries that were returned on each page.', example='20'),
    total?: long(name='Total', description='An array of matching rule objects.', example='1'),
  }(name='PageBean', description='The value of the matching condition.'),
  requestId?: string(name='RequestId', description='The logical operator of the matching condition. Valid values:

*   `eq`: equal to.
*   `neq`: not equal to.
*   `in`: contains.
*   `nin`: does not contain.
*   `re`: regular expression match.
*   `nre`: regular expression mismatch.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
}

model ListSilencePoliciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSilencePoliciesResponseBody(name='body'),
}

async function listSilencePoliciesWithOptions(request: ListSilencePoliciesRequest, runtime: Util.RuntimeOptions): ListSilencePoliciesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.isDetail)) {
    query['IsDetail'] = request.isDetail;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.page)) {
    query['Page'] = request.page;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.size)) {
    query['Size'] = request.size;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSilencePolicies',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSilencePolicies(request: ListSilencePoliciesRequest): ListSilencePoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSilencePoliciesWithOptions(request, runtime);
}

model ListSyntheticDetailRequest {
  advancedFilters?: [ 
    {
      key?: string(name='Key', example='taskType'),
      opType?: string(name='OpType', example='eq'),
      value?: any(name='Value', example='1'),
    }
  ](name='AdvancedFilters'),
  category?: string(name='Category', example='SYNTHETIC'),
  detail?: string(name='Detail', example='ICMP_LIST'),
  endTime?: long(name='EndTime', example='1684480557772'),
  exactFilters?: [ 
    {
      key?: string(name='Key'),
      opType?: string(name='OpType'),
      value?: any(name='Value'),
    }
  ](name='ExactFilters'),
  filters?: map[string]string(name='Filters'),
  order?: string(name='Order', example='DESC'),
  orderBy?: string(name='OrderBy', example='timestamp'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: long(name='StartTime', example='1684110343127'),
  syntheticType?: int32(name='SyntheticType', example='1'),
}

model ListSyntheticDetailShrinkRequest {
  advancedFiltersShrink?: string(name='AdvancedFilters'),
  category?: string(name='Category', example='SYNTHETIC'),
  detail?: string(name='Detail', example='ICMP_LIST'),
  endTime?: long(name='EndTime', example='1684480557772'),
  exactFiltersShrink?: string(name='ExactFilters'),
  filtersShrink?: string(name='Filters'),
  order?: string(name='Order', example='DESC'),
  orderBy?: string(name='OrderBy', example='timestamp'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  startTime?: long(name='StartTime', example='1684110343127'),
  syntheticType?: int32(name='SyntheticType', example='1'),
}

model ListSyntheticDetailResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    items?: [ map[string]any ](name='Items'),
    page?: int32(name='Page', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    taskCreateTime?: long(name='TaskCreateTime'),
    total?: int32(name='Total', example='12'),
  }(name='Data'),
  message?: string(name='Message', example='null'),
  requestId?: string(name='RequestId', description='Id of the request', example='70675725-8F11-4817-8106-CFE0AD71****'),
}

model ListSyntheticDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSyntheticDetailResponseBody(name='body'),
}

async function listSyntheticDetailWithOptions(tmpReq: ListSyntheticDetailRequest, runtime: Util.RuntimeOptions): ListSyntheticDetailResponse {
  Util.validateModel(tmpReq);
  var request = new ListSyntheticDetailShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.advancedFilters)) {
    request.advancedFiltersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.advancedFilters, 'AdvancedFilters', 'json');
  }
  if (!Util.isUnset(tmpReq.exactFilters)) {
    request.exactFiltersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.exactFilters, 'ExactFilters', 'json');
  }
  if (!Util.isUnset(tmpReq.filters)) {
    request.filtersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filters, 'Filters', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSyntheticDetail',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSyntheticDetail(request: ListSyntheticDetailRequest): ListSyntheticDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSyntheticDetailWithOptions(request, runtime);
}

model ListTimingSyntheticTasksRequest {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****'),
  search?: {
    name?: string(name='Name', description='The task name.', example='AlibabaCloud DNS Task'),
    order?: int32(name='Order', description='The order by which tasks are sorted. 1: ascending order. -1: descending order.', example='1'),
    orderField?: string(name='OrderField', description='The condition by which tasks are sorted. You can sort tasks by gmtCreate, gmtModified, status, or monitorCount.', example='status'),
    page?: int32(name='Page', description='The page number. This parameter is required.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. This parameter is required.', example='10'),
    status?: string(name='Status', description='The task status. CREATING: The task is being created. RUNNING: The task is running. PARTIAL_RUNNING: The task is partially running. STOP: The task is stopped. LIMIT_STOP: The task is stopped due to quota limit. EXCEPTION: The task is abnormal. DELETE: The task is deleted. DELETE_EXCEPTION: An exception occurs while deleting the task.', example='CREATING'),
    taskIds?: [ string ](name='TaskIds', description='The task IDs.'),
    taskTypes?: [ int32 ](name='TaskTypes', description='The task types.'),
  }(name='Search', description='The search keyword.'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='mark'),
      value?: string(name='Value', description='The tag value.', example='value1111'),
    }
  ](name='Tags', description='The tags.'),
}

model ListTimingSyntheticTasksShrinkRequest {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****'),
  searchShrink?: string(name='Search', description='The search keyword.'),
  tagsShrink?: string(name='Tags', description='The tags.'),
}

model ListTimingSyntheticTasksResponseBody = {
  code?: long(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    items?: [ 
      {
        frequency?: string(name='Frequency', description='The detection frequency. Valid values: 1m, 5m, 10m, 15m, 20m, 30m, 1h, 2h, 3h, 4h, 6h, 8h, 12h, and 24h.', example='1m'),
        gmtCreate?: string(name='GmtCreate', description='The time when the task was created.', example='1671454758000'),
        gmtModified?: string(name='GmtModified', description='The time when the task was modified.', example='1673085633000'),
        monitorCategory?: int32(name='MonitorCategory', description='The detection point type. 1: PC. 2: mobile device.', example='1'),
        monitorNum?: string(name='MonitorNum', description='The number of detection points.', example='10'),
        name?: string(name='Name', description='The task name.', example='AlibabaCloud DNS Task'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
        resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aekzgwtq5vxxxxx'),
        status?: string(name='Status', description='The task status. CREATING: The task is being created. RUNNING: The task is running. PARTIAL_RUNNING: The task is partially running. STOP: The task is stopped. LIMIT_STOP: The task is stopped due to quota limit. EXCEPTION: The task is abnormal. DELETE: The task is deleted. DELETE_EXCEPTION: An exception occurs while deleting the task.', example='RUNNING'),
        tags?: [ 
          {
            key?: string(name='Key', description='The tag key.', example='key'),
            value?: string(name='Value', description='The tag value.', example='value'),
          }
        ](name='Tags', description='The tags.'),
        taskId?: string(name='TaskId', description='The ID of the synthetic monitoring task.', example='5308a2691f59422c8c3b7aeccec9cd3b'),
        taskType?: int32(name='TaskType', description='The type of the task. Valid values:

1: ICMP. 2: TCP. 3: DNS. 4: HTTP. 5: website speed. 6: file download.', example='1'),
        url?: string(name='Url', description='The URL for synthetic monitoring.', example='https://www.example.com'),
      }
    ](name='Items', description='The queried tasks.'),
    page?: int32(name='Page', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    total?: int32(name='Total', description='The total number of tasks.', example='100'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='730E90FE-996A-5638-99F3-4F0F9038CC6C'),
}

model ListTimingSyntheticTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTimingSyntheticTasksResponseBody(name='body'),
}

async function listTimingSyntheticTasksWithOptions(tmpReq: ListTimingSyntheticTasksRequest, runtime: Util.RuntimeOptions): ListTimingSyntheticTasksResponse {
  Util.validateModel(tmpReq);
  var request = new ListTimingSyntheticTasksShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.search)) {
    request.searchShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.search, 'Search', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTimingSyntheticTasks',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTimingSyntheticTasks(request: ListTimingSyntheticTasksRequest): ListTimingSyntheticTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTimingSyntheticTasksWithOptions(request, runtime);
}

model ListTraceAppsRequest {
  appType?: string(name='AppType', description='The type of the application that is associated with the alert rule. Valid values:

*   `TRACE`: Application Monitoring
*   `EBPF`: Application Monitoring eBPF Edition', example='TRACE'),
  region?: string(name='Region', description='The region ID.', example='cn-hangzhou'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxyexli2****'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The tags.'),
}

model ListTraceAppsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned for the request. Valid values:

*   `2XX`: The request is successful.
*   `3XX`: A redirection message is returned.
*   `4XX`: The request is invalid.
*   `5XX`: A server error occurs.', example='200'),
  message?: string(name='Message', description='The error message returned if the request parameters are invalid.', example='Internal error. Please try again. Contact the DingTalk service account if the issue persists after multiple retries.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40B10E04-81E8-4643-970D-F1B38F2E****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   `true`: The call was successful.
*   `false`: The call failed.', example='true'),
  traceApps?: [ 
    {
      appId?: long(name='AppId', description='The application ID.', example='123'),
      appName?: string(name='AppName', description='The name of the application.', example='test-app'),
      clusterId?: string(name='ClusterId', description='The cluster ID.', example='cc7a37ee31aea4ed1a059eff8034b****'),
      createTime?: long(name='CreateTime', description='The time when the monitoring task was created. The value is a timestamp. Unit: milliseconds.', example='1529667762000'),
      labels?: [ string ](name='Labels', description='The tags of the application.'),
      language?: string(name='Language', description='The language.', example='PHP'),
      namespace?: string(name='Namespace', description='The namespace.', example='default'),
      pid?: string(name='Pid', description='The process identifier (PID) of the application.', example='a5f9bdeb-2627-4dbe-9247-****'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='Resource group'),
      show?: boolean(name='Show', description='Indicates whether the application is displayed in the Application Real-Time Monitoring Service (ARMS) console. Valid values:

*   `true`: yes
*   `false`: no', example='true'),
      source?: string(name='Source', description='The source of the application.', example='ACK'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='TestKey'),
          value?: string(name='Value', description='The tag value.', example='TestValue'),
        }
      ](name='Tags', description='The tags.'),
      type?: string(name='Type', description='The type of the monitoring task. Valid values:

*   `TRACE`: Application Monitoring
*   `RETCODE`: Browser Monitoring', example='TRACE'),
      updateTime?: long(name='UpdateTime', description='The time when the monitoring task was updated. The value is a timestamp. Unit: milliseconds.', example='1529667762000'),
      userId?: string(name='UserId', description='The user ID.', example='113197164949****'),
      workloadKind?: string(name='WorkloadKind', description='The type of the workload.', example='Deployment'),
      workloadName?: string(name='WorkloadName', description='The name of the workload.', example='nginx-deployment'),
    }
  ](name='TraceApps', description='The queried application monitoring tasks.'),
}

model ListTraceAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTraceAppsResponseBody(name='body'),
}

async function listTraceAppsWithOptions(request: ListTraceAppsRequest, runtime: Util.RuntimeOptions): ListTraceAppsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appType)) {
    query['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTraceApps',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTraceApps(request: ListTraceAppsRequest): ListTraceAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTraceAppsWithOptions(request, runtime);
}

model ManageGetRecordingRuleRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  queryUserId?: string(name='QueryUserId', description='The user ID.', example='876345234'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model ManageGetRecordingRuleResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: string(name='Data', description='The returned message.', example='--- groups: - name: "recording_demo"   rules:   - expr: "sum(jvm_memory_max_bytes)"     record: "rate_coredns_demo"'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model ManageGetRecordingRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ManageGetRecordingRuleResponseBody(name='body'),
}

async function manageGetRecordingRuleWithOptions(request: ManageGetRecordingRuleRequest, runtime: Util.RuntimeOptions): ManageGetRecordingRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.queryUserId)) {
    query['QueryUserId'] = request.queryUserId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ManageGetRecordingRule',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function manageGetRecordingRule(request: ManageGetRecordingRuleRequest): ManageGetRecordingRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return manageGetRecordingRuleWithOptions(request, runtime);
}

model ManageRecordingRuleRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='cf09705f5a82f454db0d50420b6b4e904'),
  queryUserId?: string(name='QueryUserId', description='The user ID.', example='87348589207'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  ruleYaml?: string(name='RuleYaml', description='The recording rule.', example='groups:\\n- interval: 60s\\n  name: auto_analyzer_recording_rule_60s\\n  rules:\\n  - expr: sum(node_cpu_seconds_total)\\n    record: sum:node_cpu_seconds_total:recording_rule_hash_f341458c0f7d\\n'),
}

model ManageRecordingRuleResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: string(name='Data', description='The result of the operation.', example='success'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to troubleshoot issues.', example='CD782AEC-A676-529F-8F26-0ED0FF0EF1EA'),
}

model ManageRecordingRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ManageRecordingRuleResponseBody(name='body'),
}

async function manageRecordingRuleWithOptions(request: ManageRecordingRuleRequest, runtime: Util.RuntimeOptions): ManageRecordingRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.queryUserId)) {
    query['QueryUserId'] = request.queryUserId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ruleYaml)) {
    query['RuleYaml'] = request.ruleYaml;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ManageRecordingRule',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function manageRecordingRule(request: ManageRecordingRuleRequest): ManageRecordingRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return manageRecordingRuleWithOptions(request, runtime);
}

model OpenArmsDefaultSLRRequest {
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model OpenArmsDefaultSLRResponseBody = {
  data?: string(name='Data', description='The returned result.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='53CACA70-2CF7-490C-BD06-1A2AE4EB****'),
}

model OpenArmsDefaultSLRResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenArmsDefaultSLRResponseBody(name='body'),
}

async function openArmsDefaultSLRWithOptions(request: OpenArmsDefaultSLRRequest, runtime: Util.RuntimeOptions): OpenArmsDefaultSLRResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenArmsDefaultSLR',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openArmsDefaultSLR(request: OpenArmsDefaultSLRRequest): OpenArmsDefaultSLRResponse {
  var runtime = new Util.RuntimeOptions{};
  return openArmsDefaultSLRWithOptions(request, runtime);
}

model OpenArmsServiceSecondVersionRequest {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  type?: string(name='Type', description='The type of the service. Valid values:

*   `arms`: ARMS
*   `arms_app`: Application Monitoring
*   `arms_web`: Browser Monitoring
*   `prometheus_monitor`: Managed Service for Prometheus
*   `synthetic_post`: Synthetic Monitoring', example='arms'),
}

model OpenArmsServiceSecondVersionResponseBody = {
  orderId?: string(name='OrderId', description='The service ID that is returned if the service is activated.', example='20896874992****'),
  requestId?: string(name='RequestId', description='The request ID.', example='9ED50893-F3C4-42DF-ABB2-C200BE******'),
}

model OpenArmsServiceSecondVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenArmsServiceSecondVersionResponseBody(name='body'),
}

/**
  * The **OpenArmsServiceSecondVersion** operation supports the following sub-service editions:
  * *   Application Monitoring: Basic Edition
  * *   Browser Monitoring: Basic Edition
  * *   Synthetic Monitoring: Pro Edition (pay-as-you-go)
  * *   Prometheus Service: Pro Edition
  *
  * @param request OpenArmsServiceSecondVersionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return OpenArmsServiceSecondVersionResponse
 */
async function openArmsServiceSecondVersionWithOptions(request: OpenArmsServiceSecondVersionRequest, runtime: Util.RuntimeOptions): OpenArmsServiceSecondVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenArmsServiceSecondVersion',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The **OpenArmsServiceSecondVersion** operation supports the following sub-service editions:
  * *   Application Monitoring: Basic Edition
  * *   Browser Monitoring: Basic Edition
  * *   Synthetic Monitoring: Pro Edition (pay-as-you-go)
  * *   Prometheus Service: Pro Edition
  *
  * @param request OpenArmsServiceSecondVersionRequest
  * @return OpenArmsServiceSecondVersionResponse
 */
async function openArmsServiceSecondVersion(request: OpenArmsServiceSecondVersionRequest): OpenArmsServiceSecondVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return openArmsServiceSecondVersionWithOptions(request, runtime);
}

model OpenVClusterRequest {
  clusterType?: string(name='ClusterType', description='The type of the cluster. For cloud services, set this parameter to `cloud-product-prometheus`.', example='cloud-product-prometheus'),
  length?: int32(name='Length', description='The length of the cluster ID. Default value: 10.', example='10'),
  product?: string(name='Product', description='The name of the cloud service. This parameter is required if you set ClusterType to `cloud-product-prometheus`. Valid values: influxdb, mongodb, and DLA. You cannot specify multiple service names.', example='influxdb'),
  recreateSwitch?: boolean(name='RecreateSwitch', description='Specifies whether to create or query a virtual cluster. This parameter provides backward compatibility.', example='false'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model OpenVClusterResponseBody = {
  data?: string(name='Data', description='The cluster ID. The value is a string.', example='rre59xelcx'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to find logs and troubleshoot issues.', example='42E58E4D-ACAD-4400-8FAF-F762340AE5B3'),
}

model OpenVClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenVClusterResponseBody(name='body'),
}

async function openVClusterWithOptions(request: OpenVClusterRequest, runtime: Util.RuntimeOptions): OpenVClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterType)) {
    query['ClusterType'] = request.clusterType;
  }
  if (!Util.isUnset(request.length)) {
    query['Length'] = request.length;
  }
  if (!Util.isUnset(request.product)) {
    query['Product'] = request.product;
  }
  if (!Util.isUnset(request.recreateSwitch)) {
    query['RecreateSwitch'] = request.recreateSwitch;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenVCluster',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openVCluster(request: OpenVClusterRequest): OpenVClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return openVClusterWithOptions(request, runtime);
}

model OpenXtraceDefaultSLRRequest {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model OpenXtraceDefaultSLRResponseBody = {
  data?: string(name='Data', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='53CACA70-2CF7-490C-BD06-1A2AE4EB****'),
}

model OpenXtraceDefaultSLRResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenXtraceDefaultSLRResponseBody(name='body'),
}

async function openXtraceDefaultSLRWithOptions(request: OpenXtraceDefaultSLRRequest, runtime: Util.RuntimeOptions): OpenXtraceDefaultSLRResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenXtraceDefaultSLR',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openXtraceDefaultSLR(request: OpenXtraceDefaultSLRRequest): OpenXtraceDefaultSLRResponse {
  var runtime = new Util.RuntimeOptions{};
  return openXtraceDefaultSLRWithOptions(request, runtime);
}

model QueryAppMetadataRequest {
  metaIds?: string(name='MetaIds', description='The list of metadata IDs. Separate multiple IDs with commas (,).', example='4c9dd447,3c76c565'),
  metaType?: string(name='MetaType', description='The metadata type. Valid values: sql: obtains an SQL statement based on sqlId exception: obtains the exception stack based on exceptionId', example='sql'),
  pid?: string(name='Pid', description='The process identifier (PID) of the application. For more information about how to obtain the PID, see "Obtain the PID of an application."', example='ggxw4lnjuz@54364d85b97dc56'),
  regionId?: string(name='RegionId', description='The region ID. Default value: cn-hangzhou.', example='cn-hangzhou'),
}

model QueryAppMetadataResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned for the request. Valid values:

*   2XX: The request is successful.
*   3XX: A redirection message is returned.
*   4XX: The request is invalid.
*   5XX: A server error occurs.', example='200'),
  data?: map[string]any(name='Data', description='The returned struct.', example='{\\"408d5533\\": \\"SELECT * FROM user_base_info\\"}'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='51877BAC-330C-5845-BDFD-C7859AD33FB7'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   `true`: The call was successful.
*   `false`: The call failed.', example='True'),
}

model QueryAppMetadataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAppMetadataResponseBody(name='body'),
}

async function queryAppMetadataWithOptions(request: QueryAppMetadataRequest, runtime: Util.RuntimeOptions): QueryAppMetadataResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAppMetadata',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAppMetadata(request: QueryAppMetadataRequest): QueryAppMetadataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAppMetadataWithOptions(request, runtime);
}

model QueryAppTopologyRequest {
  appType?: string(name='AppType', description='The application type', example='TRACE'),
  db?: string(name='Db', description='The database domain name.', example='rm-xxx.mysql.rds.aliyuncs.com:3306'),
  dbName?: string(name='DbName', description='The name of the database.', example='orders'),
  endTime?: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1671952708499'),
  filters?: map[string]string(name='Filters', description='The filter conditions.'),
  pid?: string(name='Pid', description='The ID of the application.

Log on to the **ARMS console**. In the left-side navigation pane, choose **Browser Monitoring** > **Browser Monitoring**. On the Browser Monitoring page, click the name of an application. The URL in the address bar contains the process ID (PID) of the application. The PID is indicated in the pid=xxx format. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is eb4zdose6v%409781be0f44d\\*\\*\\*\\*, you must replace %40 with an at sign (@) to obtain eb4zdose6v@9781be0f44d\\*\\*\\*\\*.', example='atc889zkcf@d8deedfa9bf****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  rpc?: string(name='Rpc', description='RPC interface name.', example='/eventCenter'),
  startTime?: long(name='StartTime', description='The start of the time range to query. Unit: milliseconds.', example='1595568910000'),
  type?: string(name='Type', description='The type kind of topology.', example='apm_apps_v2'),
}

model QueryAppTopologyShrinkRequest {
  appType?: string(name='AppType', description='The application type', example='TRACE'),
  db?: string(name='Db', description='The database domain name.', example='rm-xxx.mysql.rds.aliyuncs.com:3306'),
  dbName?: string(name='DbName', description='The name of the database.', example='orders'),
  endTime?: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1671952708499'),
  filtersShrink?: string(name='Filters', description='The filter conditions.'),
  pid?: string(name='Pid', description='The ID of the application.

Log on to the **ARMS console**. In the left-side navigation pane, choose **Browser Monitoring** > **Browser Monitoring**. On the Browser Monitoring page, click the name of an application. The URL in the address bar contains the process ID (PID) of the application. The PID is indicated in the pid=xxx format. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is eb4zdose6v%409781be0f44d\\*\\*\\*\\*, you must replace %40 with an at sign (@) to obtain eb4zdose6v@9781be0f44d\\*\\*\\*\\*.', example='atc889zkcf@d8deedfa9bf****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  rpc?: string(name='Rpc', description='RPC interface name.', example='/eventCenter'),
  startTime?: long(name='StartTime', description='The start of the time range to query. Unit: milliseconds.', example='1595568910000'),
  type?: string(name='Type', description='The type kind of topology.', example='apm_apps_v2'),
}

model QueryAppTopologyResponseBody = {
  code?: long(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  data?: any(name='Data', description='The returned struct.', example='"Data": {
    "nodes": [
      {
        "data": {
          "duration": 0.2254335260115607,
          "requests": 1211,
          "type": "MYSQL",
          "errors": 0
        },
        "id": "ggxw4lnjuz@c0507xxxx##MYSQL",
        "label": "mysql-pod:3306(cart_db)"
      }
    ],
    "edges": [
      {
        "data": {
          "duration": 0.03333333333333333,
          "requests": 600,
          "type": "UNKNOWN",
          "errors": 0
        },
        "id": "1974097372",
        "source": "ggxw4lnjuz@456xxxxx",
        "target": "ggxw4lnjuz@c0507xxxx"
      }
    ]
  }'),
  message?: string(name='Message', description='The returned message.', example='Internal error. Please try again. Contact the DingTalk service account if the issue                              persists after multiple retries.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='true'),
}

model QueryAppTopologyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAppTopologyResponseBody(name='body'),
}

async function queryAppTopologyWithOptions(tmpReq: QueryAppTopologyRequest, runtime: Util.RuntimeOptions): QueryAppTopologyResponse {
  Util.validateModel(tmpReq);
  var request = new QueryAppTopologyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.filters)) {
    request.filtersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.filters, 'Filters', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.appType)) {
    query['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.db)) {
    query['Db'] = request.db;
  }
  if (!Util.isUnset(request.dbName)) {
    query['DbName'] = request.dbName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.filtersShrink)) {
    query['Filters'] = request.filtersShrink;
  }
  if (!Util.isUnset(request.pid)) {
    query['Pid'] = request.pid;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.rpc)) {
    query['Rpc'] = request.rpc;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAppTopology',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAppTopology(request: QueryAppTopologyRequest): QueryAppTopologyResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAppTopologyWithOptions(request, runtime);
}

model QueryCommercialUsageRequest {
  advancedFilters?: [ 
    {
      key?: string(name='Key', example='regionId'),
      opType?: string(name='OpType', example='eq'),
      value?: string(name='Value', example='cn-hangzhou'),
    }
  ](name='AdvancedFilters'),
  dimensions?: [ string ](name='Dimensions'),
  endTime?: long(name='EndTime', example='1699286400000'),
  intervalInSec?: int32(name='IntervalInSec', example='3600'),
  measures?: [ string ](name='Measures'),
  metric?: string(name='Metric', example='USAGEFEE.STAT'),
  order?: string(name='Order', example='ASC'),
  orderBy?: string(name='OrderBy', example='dataType'),
  queryType?: string(name='QueryType', example='instantQuery'),
  startTime?: long(name='StartTime', example='1699200000000'),
}

model QueryCommercialUsageResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    complete?: boolean(name='Complete', example='true'),
    items?: [  map[string]any ](name='Items'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='99A663CB-8D7B-4B0D-A006-03C8EE38E7BB'),
  success?: boolean(name='Success', example='true'),
}

model QueryCommercialUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCommercialUsageResponseBody(name='body'),
}

async function queryCommercialUsageWithOptions(request: QueryCommercialUsageRequest, runtime: Util.RuntimeOptions): QueryCommercialUsageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.advancedFilters)) {
    query['AdvancedFilters'] = request.advancedFilters;
  }
  if (!Util.isUnset(request.dimensions)) {
    query['Dimensions'] = request.dimensions;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.intervalInSec)) {
    query['IntervalInSec'] = request.intervalInSec;
  }
  if (!Util.isUnset(request.measures)) {
    query['Measures'] = request.measures;
  }
  if (!Util.isUnset(request.metric)) {
    query['Metric'] = request.metric;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.queryType)) {
    query['QueryType'] = request.queryType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryCommercialUsage',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCommercialUsage(request: QueryCommercialUsageRequest): QueryCommercialUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCommercialUsageWithOptions(request, runtime);
}

model QueryMetricByPageRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: `1`.', example='1'),
  customFilters?: [ string ](name='CustomFilters', description='Custom filter conditions.'),
  dimensions?: [ string ](name='Dimensions', description='The dimensions of the metric that you want to query.', example='["detector_browser","detector_device"]'),
  endTime?: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1667546895000'),
  filters?: [ 
    {
      key?: string(name='Key', description='The key of the filter condition. You must set the key to `pid` or `regionId`.', example='pid'),
      value?: string(name='Value', description='The value of the filter condition. You must set the value of the `pid` or `regionId` condition. For information about how to obtain the `pid`, see the "Obtain the PID of an application" section.', example='xxx@74xxx'),
    }
  ](name='Filters', description='The filter conditions.'),
  intervalInSec?: int32(name='IntervalInSec', description='The time interval at which data entries are aggregated. Unit: milliseconds. Minimum value: 60000.', example='100000'),
  measures?: [ string ](name='Measures', description='The measures of the metric that you want to query.', example='pv'),
  metric?: string(name='Metric', description='The metric that you want to query. You cannot specify a custom metric. For more information, see the "Application monitoring metrics that can be queried" section.', example='appstat.host'),
  order?: string(name='Order', description='The order in which measures are sorted. Valid values:

*   `ASC`: ascending order
*   `DESC`: descending order

> If you do not specify the parameter, data is not sorted.', example='ASC'),
  orderBy?: string(name='OrderBy', description='The dimension from which metrics are sorted. You can set this parameter to a supported dimension.', example='pid'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. This parameter is no longer supported. The number of entries to return on each page.', example='10'),
  startTime?: long(name='StartTime', description='The start of the time range to query. Unit: milliseconds.', example='1667287695000'),
}

model QueryMetricByPageResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned for the request. Valid values:

*   2XX: The request was successful.
*   3XX: A redirection message was returned.
*   4XX: The request was invalid.
*   5XX: A server error occurred.', example='200'),
  data?: {
    completed?: boolean(name='Completed', description='Whether the paging query ends.

true: end.
false: Need to continue pagination (continue to query after CurrentPage+1).', example='false'),
    items?: [  map[string]any ](name='Items', description='The data entries returned.'),
    page?: int32(name='Page', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='1'),
    total?: int32(name='Total', description='The total number of entries returned.', example='2'),
  }(name='Data', description='The information about the array object.'),
  message?: string(name='Message', description='The error message returned if the call fails.', example='StartTime is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The request ID.', example='687F9CB7-4798-57BF-A6EE-E6CC76******'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   `true`: The call was successful.
*   `false`: The call failed.', example='true'),
}

model QueryMetricByPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMetricByPageResponseBody(name='body'),
}

async function queryMetricByPageWithOptions(request: QueryMetricByPageRequest, runtime: Util.RuntimeOptions): QueryMetricByPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.customFilters)) {
    query['CustomFilters'] = request.customFilters;
  }
  if (!Util.isUnset(request.dimensions)) {
    query['Dimensions'] = request.dimensions;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.filters)) {
    query['Filters'] = request.filters;
  }
  if (!Util.isUnset(request.intervalInSec)) {
    query['IntervalInSec'] = request.intervalInSec;
  }
  if (!Util.isUnset(request.measures)) {
    query['Measures'] = request.measures;
  }
  if (!Util.isUnset(request.metric)) {
    query['Metric'] = request.metric;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.orderBy)) {
    query['OrderBy'] = request.orderBy;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryMetricByPage',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMetricByPage(request: QueryMetricByPageRequest): QueryMetricByPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMetricByPageWithOptions(request, runtime);
}

model QueryPromInstallStatusRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model QueryPromInstallStatusResponseBody = {
  data?: {
    isControllerInstalled?: boolean(name='isControllerInstalled', description='Indicates whether the call was successful. Valid values:

true: The call was successful. false: The call fails.', example='true'),
  }(name='Data', description='The returned struct.'),
  requestId?: string(name='RequestId', description='The request ID.', example='27E653FA-5958-45BE-8AA9-14D884DC****'),
}

model QueryPromInstallStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPromInstallStatusResponseBody(name='body'),
}

async function queryPromInstallStatusWithOptions(request: QueryPromInstallStatusRequest, runtime: Util.RuntimeOptions): QueryPromInstallStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryPromInstallStatus',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPromInstallStatus(request: QueryPromInstallStatusRequest): QueryPromInstallStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPromInstallStatusWithOptions(request, runtime);
}

model QueryReleaseMetricRequest {
  changeOrderId?: string(name='ChangeOrderId', example='a341a2f2-ed07-4257-aae9-dfb1be******'),
  createTime?: long(name='CreateTime', example='1634005438000'),
  metricType?: string(name='MetricType', example='SystemContrast'),
  pid?: string(name='Pid', example='8b46d03f-5947-449d-90fd-3a96c2******'),
  proxyUserId?: string(name='ProxyUserId', example='null'),
  releaseEndTime?: long(name='ReleaseEndTime', example='1632798718632'),
  releaseStartTime?: long(name='ReleaseStartTime', example='1632798686692'),
  service?: string(name='Service', example='clothservice'),
}

model QueryReleaseMetricResponseBody = {
  data?: string(name='Data', example='{"data":{"SystemCpuUser":{"all":[{"date":1632798718000,"val":4.3277,"dim":"SystemCpuUser"},{"date":1632798733000,"val":8.1091,"dim":"SystemCpuUser"}]},"SystemMemUtil":{"all":[{"date":1632798718000,"val":73.4227,"dim":"SystemMemUtil"},{"date":1632798733000,"val":93.0977,"dim":"SystemMemUtil"}]}},"success":true}'),
  requestId?: string(name='RequestId', example='46355DD8-FC56-40C5-BFC6-269DE4F9****'),
}

model QueryReleaseMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryReleaseMetricResponseBody(name='body'),
}

async function queryReleaseMetricWithOptions(request: QueryReleaseMetricRequest, runtime: Util.RuntimeOptions): QueryReleaseMetricResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.changeOrderId)) {
    query['ChangeOrderId'] = request.changeOrderId;
  }
  if (!Util.isUnset(request.createTime)) {
    query['CreateTime'] = request.createTime;
  }
  if (!Util.isUnset(request.metricType)) {
    query['MetricType'] = request.metricType;
  }
  if (!Util.isUnset(request.pid)) {
    query['Pid'] = request.pid;
  }
  if (!Util.isUnset(request.proxyUserId)) {
    query['ProxyUserId'] = request.proxyUserId;
  }
  if (!Util.isUnset(request.releaseEndTime)) {
    query['ReleaseEndTime'] = request.releaseEndTime;
  }
  if (!Util.isUnset(request.releaseStartTime)) {
    query['ReleaseStartTime'] = request.releaseStartTime;
  }
  if (!Util.isUnset(request.service)) {
    query['Service'] = request.service;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryReleaseMetric',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryReleaseMetric(request: QueryReleaseMetricRequest): QueryReleaseMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryReleaseMetricWithOptions(request, runtime);
}

model RemoveAliClusterIdsFromPrometheusGlobalViewRequest {
  clusterIds?: string(name='ClusterIds', description='The IDs of clusters. Separate multiple IDs with commas (,).', example='cd1d55bef19904324a20ed0ebb86caa5c,c5b48729918ab4745a24482ac29d0973a, c00a94896641449098bf24931e4166003, cd174485c09384060ba542bc1be1185a4'),
  globalViewClusterId?: string(name='GlobalViewClusterId', description='The ID of the global aggregation instance.', example='global-v2-cn-1670100631025794-amaykca4'),
  groupName?: string(name='GroupName', description='The name of the global aggregation instance.', example='zyGlobalView'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    info?: string(name='Info', description='The Info-level information.', example='{regionId: the region where the global aggregation instance resides. globalViewClusterId: the ID of the global aggregation instance. failedClusterIds: the IDs of the clusters that failed to be added. A cluster may fail to be added if the specified cluster ID is invalid.}'),
    msg?: string(name='Msg', description='The additional information.', example='OK'),
    success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='F7781D4A-2818-41E7-B7BB-79D809E9****'),
}

model RemoveAliClusterIdsFromPrometheusGlobalViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody(name='body'),
}

async function removeAliClusterIdsFromPrometheusGlobalViewWithOptions(request: RemoveAliClusterIdsFromPrometheusGlobalViewRequest, runtime: Util.RuntimeOptions): RemoveAliClusterIdsFromPrometheusGlobalViewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterIds)) {
    query['ClusterIds'] = request.clusterIds;
  }
  if (!Util.isUnset(request.globalViewClusterId)) {
    query['GlobalViewClusterId'] = request.globalViewClusterId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveAliClusterIdsFromPrometheusGlobalView',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeAliClusterIdsFromPrometheusGlobalView(request: RemoveAliClusterIdsFromPrometheusGlobalViewRequest): RemoveAliClusterIdsFromPrometheusGlobalViewResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeAliClusterIdsFromPrometheusGlobalViewWithOptions(request, runtime);
}

model RemoveSourcesFromPrometheusGlobalViewRequest {
  globalViewClusterId?: string(name='GlobalViewClusterId', example='global-v2-cn-1478326682034601-vss8pd0i'),
  groupName?: string(name='GroupName', example='zyGlobalView'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  sourceNames?: string(name='SourceNames', example='localPrometheusClusterName,testCumterPrometheusName'),
}

model RemoveSourcesFromPrometheusGlobalViewResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    info?: string(name='Info'),
    msg?: string(name='Msg', example='OK'),
    success?: boolean(name='Success', example='True'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9319A57D-2D9E-472A-B69B-CF3CD16D****'),
}

model RemoveSourcesFromPrometheusGlobalViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveSourcesFromPrometheusGlobalViewResponseBody(name='body'),
}

async function removeSourcesFromPrometheusGlobalViewWithOptions(request: RemoveSourcesFromPrometheusGlobalViewRequest, runtime: Util.RuntimeOptions): RemoveSourcesFromPrometheusGlobalViewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.globalViewClusterId)) {
    query['GlobalViewClusterId'] = request.globalViewClusterId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.sourceNames)) {
    query['SourceNames'] = request.sourceNames;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveSourcesFromPrometheusGlobalView',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeSourcesFromPrometheusGlobalView(request: RemoveSourcesFromPrometheusGlobalViewRequest): RemoveSourcesFromPrometheusGlobalViewResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeSourcesFromPrometheusGlobalViewWithOptions(request, runtime);
}

model RestartEnvironmentFeatureRequest {
  environmentId?: string(name='EnvironmentId', example='env-xxx'),
  featureName?: string(name='FeatureName', example='metric-agent'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model RestartEnvironmentFeatureResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='success'),
  message?: string(name='Message', example='success.'),
  requestId?: string(name='RequestId', description='Id of the request', example='2983BEF7-4A0D-47A2-94A2-8E9C5E63****'),
  success?: boolean(name='Success', example='true'),
}

model RestartEnvironmentFeatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartEnvironmentFeatureResponseBody(name='body'),
}

async function restartEnvironmentFeatureWithOptions(request: RestartEnvironmentFeatureRequest, runtime: Util.RuntimeOptions): RestartEnvironmentFeatureResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.featureName)) {
    query['FeatureName'] = request.featureName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RestartEnvironmentFeature',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function restartEnvironmentFeature(request: RestartEnvironmentFeatureRequest): RestartEnvironmentFeatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartEnvironmentFeatureWithOptions(request, runtime);
}

model SaveTraceAppConfigRequest {
  pid?: string(name='Pid', description='The ID of the application.

Log on to the **ARMS console**. In the left-side navigation pane, choose **Application Monitoring** > **Applications**. On the **Applications** page, click the name of an application. The URL in the address bar contains the process ID (PID) of the application. The PID is indicated in the pid=xxx format. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is eb4zdose6v%409781be0f44d\\*\\*\\*\\*, you must replace %40 with an at sign (@) to obtain eb4zdose6v@9781be0f44d\\*\\*\\*\\*.', example='a2n80plglh@745eddxxx'),
  settings?: [ 
    {
      key?: string(name='Key', description='The values of the settings that you want to modify. For information about the supported settings, see the following items:

*   Trace sampling settings
*   Main switch settings
*   Threshold settings
*   Advanced settings
*   Thread settings
*   Memory snapshot settings
*   URL convergence settings
*   Business log association settings
*   Business monitoring settings', example='sampling.enable'),
      value?: string(name='Value', description='The values of the settings that you want to modify. For information about the supported settings, see the following items:

*   Trace sampling settings
*   Main switch settings
*   Threshold settings
*   Advanced settings
*   Thread settings
*   Memory snapshot settings
*   URL convergence settings
*   Business log association settings
*   Business monitoring settings', example='true'),
    }
  ](name='Settings', description='The settings of Application Monitoring.'),
}

model SaveTraceAppConfigResponseBody = {
  code?: long(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  data?: string(name='Data', description='Indicates whether the call was successful.', example='success'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model SaveTraceAppConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveTraceAppConfigResponseBody(name='body'),
}

async function saveTraceAppConfigWithOptions(request: SaveTraceAppConfigRequest, runtime: Util.RuntimeOptions): SaveTraceAppConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pid)) {
    query['Pid'] = request.pid;
  }
  if (!Util.isUnset(request.settings)) {
    query['Settings'] = request.settings;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SaveTraceAppConfig',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function saveTraceAppConfig(request: SaveTraceAppConfigRequest): SaveTraceAppConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveTraceAppConfigWithOptions(request, runtime);
}

model SearchAlertContactRequest {
  contactIds?: string(name='ContactIds', description='The ID of the alert contact.', example='[12345]'),
  contactName?: string(name='ContactName', description='The name of the alert contact.', example='John Doe'),
  currentPage?: string(name='CurrentPage', description='The number of the page to return.', example='1'),
  email?: string(name='Email', description='The email address of the alert contact.', example='someone@example.com'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.', example='20'),
  phone?: string(name='Phone', description='The mobile number of the alert contact.', example='1381111*****'),
  regionId?: string(name='RegionId', description='The ID of the region. Set the value to `cn-hangzhou`.', example='cn-hangzhou'),
}

model SearchAlertContactResponseBody = {
  pageBean?: {
    contacts?: [ 
      {
        contactId?: long(name='ContactId', description='The ID of the alert contact.', example='123'),
        contactName?: string(name='ContactName', description='The name of the alert contact.', example='John Doe'),
        content?: string(name='Content', description='The contact group to which the contact belongs. If your contacts are added to multiple contact groups, the contact groups are separated by vertical bars (|).', example='Default Group | SRE Group'),
        createTime?: long(name='CreateTime', description='The timestamp generated when the alert contact was created.', example='1572349025000'),
        dingRobot?: string(name='DingRobot', description='The webhook URL of the DingTalk chatbot.', example='https://oapi.dingtalk.com/robot/send?access_token=91f2f6****'),
        email?: string(name='Email', description='The email address of the alert contact.', example='someone@example.com'),
        phone?: string(name='Phone', description='The mobile number of the alert contact.', example='1381111*****'),
        resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****'),
        systemNoc?: boolean(name='SystemNoc', description='Indicates whether the alert contact receives system notifications. Valid values:

*   `true`: The alert contact receives system notifications.
*   `false`: The alert contact does not receive system notifications.', example='false'),
        updateTime?: long(name='UpdateTime', description='The timestamp generated when the alert contact was updated.', example='1580258717000'),
        userId?: string(name='UserId', description='The ID of the user.', example='113197164949****'),
        webhook?: string(name='Webhook', description='The information about the webhook.', example='{\\"body\\":\\"{   \\\\\\"msg_type\\\\\\": \\\\\\"text\\\\\\",   \\\\\\"content\\\\\\": {     \\\\\\"text\\\\\\": \\\\\\"$content\\\\\\"   } }\\",\\"header\\":{\\"Arms-Content-Type\\":\\"json\\"},\\"method\\":\\"post\\",\\"params\\":{},\\"url\\":\\"https://***",\\"userId\\":\\"1131971649***\\"}",'),
      }
    ](name='Contacts', description='The information about the alert contacts.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='23'),
  }(name='PageBean', description='The returned struct.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='21E85B16-75A6-429A-9F65-8AAC9A54****'),
}

model SearchAlertContactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchAlertContactResponseBody(name='body'),
}

/**
  * This operation is no longer maintained. To query alert contacts, call the DescribeContacts operation provided by the new version of Alert Management.
  *
  * @param request SearchAlertContactRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SearchAlertContactResponse
 */
async function searchAlertContactWithOptions(request: SearchAlertContactRequest, runtime: Util.RuntimeOptions): SearchAlertContactResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactIds)) {
    query['ContactIds'] = request.contactIds;
  }
  if (!Util.isUnset(request.contactName)) {
    query['ContactName'] = request.contactName;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.phone)) {
    query['Phone'] = request.phone;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchAlertContact',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation is no longer maintained. To query alert contacts, call the DescribeContacts operation provided by the new version of Alert Management.
  *
  * @param request SearchAlertContactRequest
  * @return SearchAlertContactResponse
 */
async function searchAlertContact(request: SearchAlertContactRequest): SearchAlertContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchAlertContactWithOptions(request, runtime);
}

model SearchAlertContactGroupRequest {
  contactGroupIds?: string(name='ContactGroupIds', description='The ID of the alert contact group. You can query multiple alert contact groups at a time. Separate multiple group IDs with commas (,).', example='746'),
  contactGroupName?: string(name='ContactGroupName', description='The name of the alert contact group.', example='TestGroup'),
  contactId?: long(name='ContactId', description='The ID of the alert contact. You can call the SearchAlertContact operation to query the contact IDs. For more information, see [SearchAlertContact](~~130703~~).', example='123'),
  contactName?: string(name='ContactName', description='The name of the alert contact.', example='John Doe'),
  isDetail?: boolean(name='IsDetail', description='Specifies whether to return all alert contacts in the queried alert contact group. By default, not all alert contacts are returned.', example='true'),
  regionId?: string(name='RegionId', description='The ID of the region. Default value: `cn-hangzhou`.', example='cn-hangzhou'),
}

model SearchAlertContactGroupResponseBody = {
  contactGroups?: [ 
    {
      contactGroupId?: long(name='ContactGroupId', description='The ID of the alert contact group.', example='746'),
      contactGroupName?: string(name='ContactGroupName', description='The name of the alert contact group.', example='TestGroup'),
      contacts?: [ 
        {
          contactId?: long(name='ContactId', description='The ID of the alert contact.', example='123'),
          contactName?: string(name='ContactName', description='The name of the alert contact.', example='John Doe'),
          createTime?: long(name='CreateTime', description='The time when the alert contact group list was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1572349025000'),
          dingRobot?: string(name='DingRobot', description='The webhook URL of the DingTalk chatbot.', example='https://oapi.dingtalk.com/robot/send?access_token=91f2f6****'),
          email?: string(name='Email', description='The email address of the alert contact.', example='someone@example.com'),
          phone?: string(name='Phone', description='The mobile number of the alert contact.', example='1381111*****'),
          systemNoc?: boolean(name='SystemNoc', description='Indicates whether the alert contact receives system notifications. Valid values:

*   true: receives system notifications.
*   false: does not receive system notifications.', example='false'),
          updateTime?: long(name='UpdateTime', description='The time when the alert contact group was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1580258717000'),
          userId?: string(name='UserId', description='The ID of the user.', example='113197164949****'),
        }
      ](name='Contacts', description='The alert contact list.'),
      createTime?: long(name='CreateTime', description='The time when the alert contact group list was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1529668855000'),
      updateTime?: long(name='UpdateTime', description='The time when the alert contact group was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1529668855000'),
      userId?: string(name='UserId', description='The ID of the user.', example='113197164949****'),
    }
  ](name='ContactGroups', description='The information about the alert contact groups.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4D6C358A-A58B-4F4B-94CE-F5AAF023****'),
}

model SearchAlertContactGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchAlertContactGroupResponseBody(name='body'),
}

/**
  * The operation is no longer maintained. Call the DescribeContactGroups operation in the alert management module to query alert contact groups.
  *
  * @param request SearchAlertContactGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SearchAlertContactGroupResponse
 */
async function searchAlertContactGroupWithOptions(request: SearchAlertContactGroupRequest, runtime: Util.RuntimeOptions): SearchAlertContactGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactGroupIds)) {
    query['ContactGroupIds'] = request.contactGroupIds;
  }
  if (!Util.isUnset(request.contactGroupName)) {
    query['ContactGroupName'] = request.contactGroupName;
  }
  if (!Util.isUnset(request.contactId)) {
    query['ContactId'] = request.contactId;
  }
  if (!Util.isUnset(request.contactName)) {
    query['ContactName'] = request.contactName;
  }
  if (!Util.isUnset(request.isDetail)) {
    query['IsDetail'] = request.isDetail;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchAlertContactGroup',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The operation is no longer maintained. Call the DescribeContactGroups operation in the alert management module to query alert contact groups.
  *
  * @param request SearchAlertContactGroupRequest
  * @return SearchAlertContactGroupResponse
 */
async function searchAlertContactGroup(request: SearchAlertContactGroupRequest): SearchAlertContactGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchAlertContactGroupWithOptions(request, runtime);
}

model SearchAlertHistoriesRequest {
  alertId?: long(name='AlertId', description='The ID of the alert rule. You can call the SearchAlertRules operation and view the `Id` parameter in the response. For more information, see [SearchAlertRules](~~175825~~).', example='123'),
  alertType?: int32(name='AlertType', description='The type of the alert rule. Valid values:

*   `1`: a custom alert rule that is used to monitor drill-down data sets
*   `3`: a custom alert rule that is used to monitor tiled data sets
*   `4`: an alert rule that is used to monitor web pages, including the default alert rule for browser monitoring
*   `5`: an alert rule that is used to monitor applications, including the default alert rule for application monitoring
*   `6`: the default alert rule for browser monitoring
*   `7`: the default alert rule for application monitoring
*   `8`: a Tracing Analysis alert rule
*   `101`: a Prometheus alert rule', example='4'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: `1`.', example='1'),
  endTime?: long(name='EndTime', description='The end of the time range to query. The value is a UNIX timestamp of the LONG data type. Unit: milliseconds. The default value is the current time.', example='1579499626000'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: `10`.', example='10'),
  regionId?: string(name='RegionId', description='The ID of the region. Default value: `cn-hangzhou`.', example='cn-hangzhou'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. The value is a UNIX timestamp of the LONG data type. Unit: milliseconds. The default value is 10 minutes before the current time.', example='1595568910000'),
}

model SearchAlertHistoriesResponseBody = {
  pageBean?: {
    alarmHistories?: [ 
      {
        alarmContent?: string(name='AlarmContent', description='The content of the alert notification.', example='"Alert name: Alert1\\nAlert time: 2020-07-24 12:14:00\\nAlert content: A total of four alerts are triggered: \\*\\*\\*\\*"'),
        alarmResponseCode?: int32(name='AlarmResponseCode', description='The response code returned after the alert notification was sent.', example='200'),
        alarmSources?: string(name='AlarmSources', description='The webhook URL, such as the webhook URL of a DingTalk chatbot.', example='https://oapi.dingtalk.com/robot/send?access_token=91f2f65002fefe0ab9b71e6590c5ca504348cad742ff01e9c8ab204439ca****'),
        alarmTime?: long(name='AlarmTime', description='The time when the alert notification was sent.', example='1595564179000'),
        alarmType?: int32(name='AlarmType', description='The type of the alert rule. Default value: 4. Valid values:

*   `1`: a custom alert rule that is used to monitor drill-down data sets
*   `3`: a custom alert rule that is used to monitor tiled data sets
*   `4`: an alert rule that is used to monitor web pages, including the default alert rule for browser monitoring
*   `5`: an alert rule that is used to monitor applications, including the default alert rule for application monitoring
*   `6`: the default alert rule for browser monitoring
*   `7`: the default alert rule for application monitoring
*   `8`: a Tracing Analysis alert rule
*   `101`: a Prometheus alert rule', example='4'),
        emails?: string(name='Emails', description='The email address of the alert contact.', example='someone@example.com'),
        id?: long(name='Id', description='The ID of the alert notification.', example='123'),
        phones?: string(name='Phones', description='The mobile phone number of the alert contact.', example='1381111****'),
        strategyId?: string(name='StrategyId', description='The internal fields.', example='""'),
        target?: string(name='Target', description='The internal fields.', example='""'),
        userId?: string(name='UserId', description='The ID of the user.', example='113197164949****'),
      }
    ](name='AlarmHistories', description='The information about alert records.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='2'),
  }(name='PageBean', description='The returned struct.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2FC13182-B9AF-4E6B-BE51-72669B7C****'),
}

model SearchAlertHistoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchAlertHistoriesResponseBody(name='body'),
}

/**
  * This operation is no longer maintained. To query alert records, call the ListAlerts operation provided by the new version of Alert Management.
  *
  * @param request SearchAlertHistoriesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SearchAlertHistoriesResponse
 */
async function searchAlertHistoriesWithOptions(request: SearchAlertHistoriesRequest, runtime: Util.RuntimeOptions): SearchAlertHistoriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alertId)) {
    query['AlertId'] = request.alertId;
  }
  if (!Util.isUnset(request.alertType)) {
    query['AlertType'] = request.alertType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchAlertHistories',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation is no longer maintained. To query alert records, call the ListAlerts operation provided by the new version of Alert Management.
  *
  * @param request SearchAlertHistoriesRequest
  * @return SearchAlertHistoriesResponse
 */
async function searchAlertHistories(request: SearchAlertHistoriesRequest): SearchAlertHistoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchAlertHistoriesWithOptions(request, runtime);
}

model SearchAlertRulesRequest {
  alertRuleId?: string(name='AlertRuleId', description='The id of AlertRule.', example='12345'),
  appType?: string(name='AppType', description='The type of the application that is associated with the alert rule. Valid values:

*   `TRACE`: application
*   `RETCODE`: browser', example='TRACE'),
  currentPage?: int32(name='CurrentPage', description='The page number of the page to return. Default value: `1`.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return per page. Default value: `10`.', example='20'),
  pid?: string(name='Pid', description='The process identifier (PID) of the application that is associated with the alert rule. For more information about how to obtain the PID, see [Obtain the PID of an application](https://help.aliyun.com/document_detail/186100.html?spm=a2c4g.11186623.6.792.1b50654cqcDPyk#title-imy-7gj-qhr).', example='atc889zkcf@d8deedfa9bf****'),
  regionId?: string(name='RegionId', description='The region ID of the alert data. For more information about the mappings between **RegionId** and **SystemRegionId**, see the detailed description below the table.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. You can obtain the resource group ID in the **Resource Management** console.', example='rg-acfmxyexli2****'),
  systemRegionId?: string(name='SystemRegionId', description='The region ID of the alert rule. For more information about the mappings between **RegionId** and **SystemRegionId**, see the detailed description below the table.', example='cn-hangzhou'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of the tag. The following system preset fields are provided:

*   traceId: the ID of the trace.
*   serverApp: the name of the server application.
*   clientApp: the name of the client application.
*   service: the name of the operation.
*   rpc: the type of the call.
*   msOfSpan: the duration exceeds a specific value.
*   clientIp: the IP address of the client.
*   serverIp: the IP address of the server.
*   isError: specifies whether the call is abnormal.
*   hasTprof: contains only thread profiling.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The list of tags.'),
  title?: string(name='Title', description='The alert rule name.', example='AlertRuleTitle'),
  type?: string(name='Type', description='The alert rule type. Valid values:

*   `1`: custom alert rules that are used to monitor drill-down data sets
*   `3`: custom alert rules that are used to monitor tiled data sets
*   `4`: alert rules that are used to monitor the browser, including the default frontend alert rules
*   `5`: alert rules that are used to monitor applications, including the default application alert rules
*   `6`: the default browser alert rules
*   `7`: the default application alert rules
*   `8`: Tracing Analysis alert rules
*   `101`: Prometheus alert rules', example='4'),
}

model SearchAlertRulesResponseBody = {
  pageBean?: {
    alertRules?: [ 
      {
        alarmContext?: {
          alarmContentSubTitle?: string(name='AlarmContentSubTitle', description='The sub-title of the alert notification content.', example='TestSubTitle'),
          alarmContentTemplate?: string(name='AlarmContentTemplate', description='The template of the alert notification.', example='Alert name: $Alert name\\nFilter condition: $Filter\\nAlert time: $Alert time\\nAlert content: $Alert content\\nNote: The alert persists until a reply email is received. The system will remind you again in 24 hours.'),
          content?: string(name='Content', description='The content of the alert notification.', example='Alert name: $Alert name\\nFilter condition: $Filter\\nAlert time: $Alert time\\nAlert content: $Alert content\\nNote: The alert persists until a reply email is received. The system will remind you again in 24 hours.'),
          subTitle?: string(name='SubTitle', description='The sub-title of the alert notification.', example='test'),
        }(name='AlarmContext', description='The format of the alert notification.'),
        alertLevel?: string(name='AlertLevel', description='The severity of the alerts. Only the value `WARN` is supported.', example='WARN'),
        alertRule?: {
          operator?: string(name='Operator', description='The logical operator between conditions. Valid values: `&`: AND. `|`: OR.', example='|'),
          rules?: [ 
            {
              aggregates?: string(name='Aggregates', description='The aggregation logic of the metric data of the alert rule. Valid values:

*   `AVG`: calculates the average value for each minute
*   `SUM`: calculates the total value for each minute
*   `MAX`: calculates the maximum value for each minute
*   `MIN`: calculates the minimum value for each minute', example='AVG'),
              alias?: string(name='Alias', description='The displayed description of the alert metric.', example='response time_ms'),
              measure?: string(name='Measure', description='The metric based on which alerts are triggered. For more information, see the "[Alert metrics](https://help.aliyun.com/document_detail/175825.html#h2-url-4)" section in this topic.', example='appstat.jvm.SystemDiskFree'),
              NValue?: int32(name='NValue', description='The time range when data is requested. Unit: minutes. For example, a value of 5 indicates that the alert rule applies to the data in the last 5 minutes.', example='5'),
              operator?: string(name='Operator', description='The operation logic of the condition. Valid values:

*   CURRENT_GTE: greater than or equal to
*   CURRENT_LTE: less than or equal to
*   PREVIOUS_UP: the increase percentage compared with the last period
*   PREVIOUS_DOWN: the decrease percentage compared with the last period
*   HOH_UP: the increase percentage compared with the last hour
*   HOH_DOWN: the decrease percentage compared with the last hour
*   DOD_UP: the increase percentage compared with the last day
*   DOD_DOWN: the decrease percentage compared with the last day', example='CURRENT_GTE'),
              value?: float(name='Value', description='The threshold of the condition.', example='30'),
            }
          ](name='Rules', description='The condition of the alert rule.'),
        }(name='AlertRule', description='The conditions of the alert rule. Multiple conditions are separated by the AND or OR logical operators.'),
        alertTitle?: string(name='AlertTitle', description='The name of the alert rule.', example='TestAlertRule'),
        alertType?: int32(name='AlertType', description='The type of the alert rule. Valid values:

*   `1`: custom alert rules that are used to monitor drill-down data sets
*   `3`: custom alert rules that are used to monitor tiled data sets
*   `4`: alert rules that are used to monitor the browser, including the default frontend alert rules
*   `5`: alert rules that are used to monitor applications, including the default application alert rules
*   `6`: the default browser alert rules
*   `7`: the default application alert rules
*   `8`: Tracing Analysis alert rules
*   `101`: Prometheus alert rules', example='4'),
        alertVersion?: int32(name='AlertVersion', description='The version of the alert rule. Default value: `1`.', example='1'),
        alertWays?: [ string ](name='AlertWays', description='Sending method of alarm notification.'),
        config?: string(name='Config', description='The configuration items of the alert rule. The value is a JSON string.

The configuration item **continuous** indicates whether alert notifications are continuously sent. Valid values:

*   `true`: Alert notifications are sent every minute.
*   `false`: The alert silence feature is enabled.

The configuration item **dataRevision** indicates the data revision policy that is used if no data is obtained or the data is null. Default value: 2. Valid values:

*   `0`: overwrites the data by using the value 0
*   `1`: overwrites the data by using the value 1
*   `2`: overwrites the data by using the value null. This value indicates that no alert is triggered if no data exists', example='{\\"continuous\\":true,\\"dataRevision\\":2}'),
        contactGroupIdList?: string(name='ContactGroupIdList', description='The ID of the contact group. Multiple IDs are separated by commas (,).', example='381*,572*'),
        contactGroupIds?: string(name='ContactGroupIds', description='The IDs of the alert contact groups. The value is a JSON array.', example='[123, 234]'),
        createTime?: long(name='CreateTime', description='The timestamp that shows when the alert rule was created.', example='1579508519683'),
        hostByAlertManager?: boolean(name='HostByAlertManager', description='Indicates whether the alert is sent through the alert center. Valid values:

*   `true`
*   `false`', example='true'),
        id?: long(name='Id', description='The ID of the alert rule.', example='123'),
        metricParam?: {
          appGroupId?: string(name='AppGroupId', description='The ID of the application group that is associated with the alert rule. This parameter is applicable to Enterprise Distributed Application Service (EDAS) applications.', example='DEFAULT'),
          appId?: string(name='AppId', description='The auto-increment ID of the ARMS application. You can ignore this ID.', example='123'),
          dimensions?: [ 
            {
              key?: string(name='Key', description='The key of the dimension. Valid values:

*   `rpc`: the name of the API
*   `rpcType`: the type of the API call, such as HTTP or DUBBO
*   `endpoint`: the name of the database
*   `rootIp`: the IP address of the host', example='rootIp'),
              type?: string(name='Type', description='The type of the dimension. Valid values:

*   `STATIC`: checks only the value of this dimension. In this case, you must set the **dimensions.value** parameter.
*   `ALL`: checks the values of all dimensions. The metrics of all API calls are checked. If an API call triggers an alert, the name of the API is displayed in the alert notification. In this case, you do not need to set the **dimensions.value** parameter.
*   `DISABLE`: aggregates the values of all dimensions. In this case, you do not need to set the **dimensions.value** parameter.', example='DISABLE'),
              value?: string(name='Value', description='The value of the dimension.', example='"127.0.0.1"'),
            }
          ](name='Dimensions', description='The dimensions in the condition.'),
          pid?: string(name='Pid', description='The PID of the application that is associated with the alert rule.', example='9870ca99-8105-4da7-a3a4-d72dd1b1****'),
          type?: string(name='Type', description='The type of the metric. Valid values:

*   `txn`: the number of API calls during application monitoring
*   `txn_type`: the types of API calls during application monitoring
*   `db`: database metrics
*   `jvm`: Java virtual machine (JVM) metrics
*   `host`: host metrics
*   `exception`: API call errors', example='DB'),
        }(name='MetricParam', description='The information about the application that is associated with the alert rule.'),
        notice?: {
          endTime?: long(name='EndTime', description='The end of the time range when the alert rule takes effect within 24 hours per day. This value is a UNIX timestamp. The year, month, and day that are indicated by the timestamp are not displayed in this value. Only the hour, minute, and second are displayed.', example='1480607940000'),
          noticeEndTime?: long(name='NoticeEndTime', description='The end of the time range when alert notifications are sent based on the alert rule within 24 hours per day. This value is a UNIX timestamp. The year, month, and day that are indicated by the timestamp are not displayed in this value. Only the hour, minute, and second are displayed.', example='1480607940000'),
          noticeStartTime?: long(name='NoticeStartTime', description='The beginning of the time range when alert notifications are sent based on the alert rule within 24 hours per day. This value is a UNIX timestamp. The year, month, and day that are indicated by the timestamp are not displayed in this value. Only the hour, minute, and second are displayed.', example='1480521600000'),
          startTime?: long(name='StartTime', description='The beginning of the time range when the alert rule takes effect within 24 hours per day. This value is a UNIX timestamp. The year, month, and day that are indicated by the timestamp are not displayed in this value. Only the hour, minute, and second are displayed.', example='1480521600000'),
        }(name='Notice', description='The time ranges when the alert rule takes effect and when alert notifications are sent.'),
        regionId?: string(name='RegionId', description='The ID of the region to which the alert rule belongs.', example='cn-hangzhou'),
        resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****'),
        status?: string(name='Status', description='The status of the alert rule. `RUNNING`: The alert rule is enabled. `STOPPED`: The alert rule is disabled.', example='RUNNING'),
        taskId?: long(name='TaskId', description='The ID of the Application Real-Time Monitoring Service (ARMS) task that is associated with the alert rule.', example='123'),
        taskStatus?: string(name='TaskStatus', description='The status of the task. This parameter is hidden from users.', example='""'),
        title?: string(name='Title', description='The name of the alert.', example='AlertTest'),
        updateTime?: long(name='UpdateTime', description='The timestamp that shows when the alert rule was updated.', example='1480521600000'),
        userId?: string(name='UserId', description='The ID of the user to which the alert rule belongs.', example='113197164949****'),
      }
    ](name='AlertRules', description='The details of the alert rules.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='23'),
  }(name='PageBean', description='The returned struct.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model SearchAlertRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchAlertRulesResponseBody(name='body'),
}

/**
  * The current operation is no longer maintained. You can call the GetAlertRules operation of Alert Management (New) to query existing alert rules.
  *
  * @param request SearchAlertRulesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SearchAlertRulesResponse
 */
async function searchAlertRulesWithOptions(request: SearchAlertRulesRequest, runtime: Util.RuntimeOptions): SearchAlertRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alertRuleId)) {
    query['AlertRuleId'] = request.alertRuleId;
  }
  if (!Util.isUnset(request.appType)) {
    query['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pid)) {
    query['Pid'] = request.pid;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.systemRegionId)) {
    query['SystemRegionId'] = request.systemRegionId;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchAlertRules',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The current operation is no longer maintained. You can call the GetAlertRules operation of Alert Management (New) to query existing alert rules.
  *
  * @param request SearchAlertRulesRequest
  * @return SearchAlertRulesResponse
 */
async function searchAlertRules(request: SearchAlertRulesRequest): SearchAlertRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchAlertRulesWithOptions(request, runtime);
}

model SearchEventsRequest {
  alertId?: long(name='AlertId', description='The ID of the alert rule. You can call the SearchAlertRules operation and view the `Id` parameter in the response. For more information, see [SearchAlertRules](~~175825~~).', example='123'),
  alertType?: int32(name='AlertType', description='The type of the alert rule. Valid values:

*   `1`: custom alert rules to monitor drill-down data sets
*   `3`: custom alert rules to monitor tiled data sets
*   `4`: alert rules to monitor the frontend, including the default frontend alert rules
*   `5`: alert rules to monitor applications, including the default application alert rules
*   `6`: the default frontend alert rules
*   `7`: the default application alert rules
*   `8`: Tracing Analysis alert rules
*   `101`: Prometheus alert rules', example='4'),
  appType?: string(name='AppType', description='The type of the application that is associated with the alert rule. Valid values:

*   `TRACE`: application monitoring
*   `RETCODE`: frontend monitoring', example='TRACE'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: `1`.', example='1'),
  endTime?: long(name='EndTime', description='The end of the time range to query. Specify a UNIX timestamp of the LONG data type, in milliseconds. The default value is the current time.', example='1595568970000'),
  isTrigger?: int32(name='IsTrigger', description='Specifies whether the alert event is triggered. If you do not set this parameter, all alert events are queried. Valid values:

*   `1`: The event is triggered.
*   `0`: The event is not triggered.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: `10`.', example='10'),
  pid?: string(name='Pid', description='The process identifier (PID) of the application that is associated with the alert rule.', example='atc889zkcf@d8deedfa9bf****'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. Specify a UNIX timestamp of the LONG data type, in milliseconds. The default value is 10 minutes before the current time.', example='1595565300000'),
}

model SearchEventsResponseBody = {
  isTrigger?: int32(name='IsTrigger', description='Specifies whether the alert event is triggered. If you do not set this parameter, all alert events are queried. Valid values:

*   `1`: The event is triggered.
*   `0`: The event is not triggered.', example='0'),
  pageBean?: {
    event?: [ 
      {
        alertId?: long(name='AlertId', description='The ID of the alert rule that is associated with the event.', example='123'),
        alertName?: string(name='AlertName', description='The name of the alert rule that is associated with the event.', example='alertName'),
        alertRule?: string(name='AlertRule', description='The condition of the alert rule.', example='{\\"operator\\":\\"&\\",\\"rules\\":[{\\"aggregates\\":\\"AVG\\",\\"alias\\":\\"JVM_线程总数\\",\\"measure\\":\\"appstat.jvm.ThreadCount\\",\\"nValue\\":1,\\"operator\\":\\"HOH_DOWN\\",\\"value\\":50.0}]}'),
        alertType?: int32(name='AlertType', description='The type of the alert rule. This parameter is not returned. Valid values:

*   `1`: custom alert rules to monitor drill-down data sets
*   `3`: custom alert rules to monitor tiled data sets
*   `4`: alert rules to monitor the frontend, including the default frontend alert rules
*   `5`: alert rules to monitor applications, including the default application alert rules
*   `6`: the default frontend alert rules
*   `7`: the default application alert rules
*   `8`: Tracing Analysis alert rules
*   `101`: Prometheus alert rules', example='4'),
        eventLevel?: string(name='EventLevel', description='The severity of the event.', example='1'),
        eventTime?: long(name='EventTime', description='The timestamp when the event occurred.', example='1595569020000'),
        id?: long(name='Id', description='The ID of the event record.', example='123'),
        links?: [ string ](name='Links', description='The list of event URLs.'),
        message?: string(name='Message', description='The event content. The parameter value is a JSON string. Each key indicates a dimension and each value indicates the alert content in the dimension.', example='unknow紧急报警\\nip：172.27.XX.XX\\n应用名 = test\\nRegion = cn-shenzhen\\n异常信息 = {\\"timestamp\\"：\\"1615447972235\\"}'),
      }
    ](name='Event', description='The information about the alert events.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
  }(name='PageBean', description='The struct returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='32940175-181B-4B93-966E-4BB69176****'),
}

model SearchEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchEventsResponseBody(name='body'),
}

/**
  * Alert event records are different from alert notification records. Alert events are recorded every minute after an alert rule filters data. Alert events can be classified based on whether they are triggered or not. If a triggered event is not in the silence period, an alert notification is sent.
  *
  * @param request SearchEventsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SearchEventsResponse
 */
async function searchEventsWithOptions(request: SearchEventsRequest, runtime: Util.RuntimeOptions): SearchEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alertId)) {
    query['AlertId'] = request.alertId;
  }
  if (!Util.isUnset(request.alertType)) {
    query['AlertType'] = request.alertType;
  }
  if (!Util.isUnset(request.appType)) {
    query['AppType'] = request.appType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.isTrigger)) {
    query['IsTrigger'] = request.isTrigger;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pid)) {
    query['Pid'] = request.pid;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchEvents',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Alert event records are different from alert notification records. Alert events are recorded every minute after an alert rule filters data. Alert events can be classified based on whether they are triggered or not. If a triggered event is not in the silence period, an alert notification is sent.
  *
  * @param request SearchEventsRequest
  * @return SearchEventsResponse
 */
async function searchEvents(request: SearchEventsRequest): SearchEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchEventsWithOptions(request, runtime);
}

model SearchRetcodeAppByPageRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='5'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. You can obtain the resource group ID in the **Resource Management** console.', example='rg-acfmxyexli2****'),
  retcodeAppId?: string(name='RetcodeAppId', description='The ID of the application.

Log on to the **ARMS console**. In the left-side navigation pane, choose **Browser Monitoring** > **Browser Monitoring**. On the Browser Monitoring page, click the name of an application. The URL in the browser address bar contains the pid of this application in the format of `pid=xxx`. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is `xxx%4074xxx`, you must replace **%40** with the at sign (@). The actual PID is `xxx@74xxx`.', example='eb4zdose6v@9781be0f44d****'),
  retcodeAppName?: string(name='RetcodeAppName', description='The name of the application that is monitored by Browser Monitoring.', example='App1'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The tags.'),
}

model SearchRetcodeAppByPageResponseBody = {
  pageBean?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='2'),
    retcodeApps?: [ 
      {
        appId?: long(name='AppId', description='The ID of the application. The parameter is an auto-increment parameter.', example='16064'),
        appName?: string(name='AppName', description='The name of the application.', example='a3'),
        createTime?: long(name='CreateTime', description='The time when the task was created.', example='1545363321000'),
        nickName?: string(name='NickName', description='The alias of the application.', example='c1'),
        pid?: string(name='Pid', description='The PID of the application.', example='eb4zdose6v@9781be0f44d****'),
        regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
        resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****'),
        retcodeAppType?: string(name='RetcodeAppType', description='The type of the application. Valid values:

*   `web`: web application
*   `weex`: Weex mobile app
*   `mini_dd`: DingTalk mini program
*   `mini_alipay`: Alipay mini program
*   `mini_wx`: WeChat mini program
*   `mini_common`: mini program on other platforms', example='web'),
        tags?: [ 
          {
            key?: string(name='Key', description='The tag key.', example='TestKey'),
            value?: string(name='Value', description='The tag value.', example='TestValue'),
          }
        ](name='Tags', description='The tags.'),
        type?: string(name='Type', description='The type of the monitoring task. Valid values:

*   `TRACE`: Application Monitoring
*   `RETCODE`: Browser Monitoring', example='RETCODE'),
        updateTime?: long(name='UpdateTime', description='The time when the task was updated.', example='1545363321000'),
        userId?: string(name='UserId', description='The ID of the user.', example='12341234'),
      }
    ](name='RetcodeApps', description='The Browser Monitoring tasks that are returned.'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='8'),
  }(name='PageBean', description='The returned page information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='626037F5-FDEB-45B0-804C-B3C92797A64E'),
}

model SearchRetcodeAppByPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchRetcodeAppByPageResponseBody(name='body'),
}

async function searchRetcodeAppByPageWithOptions(request: SearchRetcodeAppByPageRequest, runtime: Util.RuntimeOptions): SearchRetcodeAppByPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.retcodeAppId)) {
    query['RetcodeAppId'] = request.retcodeAppId;
  }
  if (!Util.isUnset(request.retcodeAppName)) {
    query['RetcodeAppName'] = request.retcodeAppName;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchRetcodeAppByPage',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchRetcodeAppByPage(request: SearchRetcodeAppByPageRequest): SearchRetcodeAppByPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchRetcodeAppByPageWithOptions(request, runtime);
}

model SearchTraceAppByNameRequest {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The list of tags.'),
  traceAppName?: string(name='TraceAppName', description='The name of the application.

> If you do not specify this parameter, all application monitoring tasks in the specified region are queried.', example='test-app'),
}

model SearchTraceAppByNameResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F7781D4A-2818-41E7-B7BB-79D809E9****'),
  traceApps?: [ 
    {
      appId?: long(name='AppId', description='The application ID.', example='123'),
      appName?: string(name='AppName', description='The name of the application.', example='test-app'),
      createTime?: long(name='CreateTime', description='The timestamp generated when the task was created.', example='1593486786000'),
      labels?: [ string ](name='Labels', description='The aliases of the application.'),
      pid?: string(name='Pid', description='The process identifier (PID) of the application.', example='a5f9bdeb-2627-4dbe-9247-****'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****'),
      show?: boolean(name='Show', description='Indicates whether the application is displayed in the Application Real-Time Monitoring Service (ARMS) console. Valid values:

*   `true`: yes
*   `false`: no', example='true'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='TestKey'),
          value?: string(name='Value', description='The tag value.', example='TestValue'),
        }
      ](name='Tags', description='A list of tags.'),
      type?: string(name='Type', description='The type of the monitoring task. Valid values:

*   `TRACE`: Application Monitoring
*   `RETCODE`: Browser Monitoring', example='TRACE'),
      updateTime?: long(name='UpdateTime', description='The timestamp generated when the task information was updated.', example='1593486786000'),
      userId?: string(name='UserId', description='The user ID.', example='113197164949****'),
    }
  ](name='TraceApps', description='The information about the monitoring task.'),
}

model SearchTraceAppByNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchTraceAppByNameResponseBody(name='body'),
}

async function searchTraceAppByNameWithOptions(request: SearchTraceAppByNameRequest, runtime: Util.RuntimeOptions): SearchTraceAppByNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  if (!Util.isUnset(request.traceAppName)) {
    query['TraceAppName'] = request.traceAppName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchTraceAppByName',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchTraceAppByName(request: SearchTraceAppByNameRequest): SearchTraceAppByNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchTraceAppByNameWithOptions(request, runtime);
}

model SearchTraceAppByPageRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: `1`.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: `10`.', example='10'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxyexli2****'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='A list of tags.'),
  traceAppName?: string(name='TraceAppName', description='The name of the application.', example='test-app'),
}

model SearchTraceAppByPageResponseBody = {
  pageBean?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='3'),
    traceApps?: [ 
      {
        appId?: long(name='AppId', description='The application ID.', example='123'),
        appName?: string(name='AppName', description='The name of the application.', example='test-app'),
        createTime?: long(name='CreateTime', description='The timestamp generated when the task was created.', example='1531291867000'),
        labels?: [ string ](name='Labels', description='The aliases of the application.'),
        pid?: string(name='Pid', description='The process identifier (PID) of the application.', example='atc889zkcf@d8deedfa9bf****'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
        resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxyexli2****'),
        show?: boolean(name='Show', description='Indicates whether the application is displayed in the Application Real-Time Monitoring Service (ARMS) console. Valid values:

*   `true`: yes
*   `false`: no', example='true'),
        tags?: [ 
          {
            key?: string(name='Key', description='The tag key.', example='TestKey'),
            value?: string(name='Value', description='The tag value.', example='TestValue'),
          }
        ](name='Tags', description='A list of tags.'),
        type?: string(name='Type', description='The type of the monitoring task. Valid values:

*   `TRACE`: Application Monitoring
*   `RETCODE`: Browser Monitoring', example='TRACE'),
        updateTime?: long(name='UpdateTime', description='The timestamp generated when the task information was updated.', example='1531291867000'),
        userId?: string(name='UserId', description='The user ID.', example='113197164949****'),
      }
    ](name='TraceApps', description='The information about the monitoring task.'),
  }(name='PageBean', description='The information about the array object.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4B446DF2-3DDD-4B5B-8E3F-D5225120****'),
}

model SearchTraceAppByPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchTraceAppByPageResponseBody(name='body'),
}

async function searchTraceAppByPageWithOptions(request: SearchTraceAppByPageRequest, runtime: Util.RuntimeOptions): SearchTraceAppByPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  if (!Util.isUnset(request.traceAppName)) {
    query['TraceAppName'] = request.traceAppName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchTraceAppByPage',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchTraceAppByPage(request: SearchTraceAppByPageRequest): SearchTraceAppByPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchTraceAppByPageWithOptions(request, runtime);
}

model SearchTracesRequest {
  endTime?: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1595210400000'),
  exclusionFilters?: [ 
    {
      key?: string(name='Key', description='The key that is used to filter the query results.', example='http.status_code'),
      value?: string(name='Value', description='The value of the key that is used to filter the query results.', example='404'),
    }
  ](name='ExclusionFilters', description='The filter conditions.'),
  minDuration?: long(name='MinDuration', description='The minimum amount of time consumed by traces. Unit: milliseconds.', example='2'),
  operationName?: string(name='OperationName', description='The name of the traced span.', example='/demo/queryNotExistDB/11'),
  pid?: string(name='Pid', description='The application ID.', example='b590lhguqs@9781be0f44dXXXX'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  reverse?: boolean(name='Reverse', description='Specifies whether to sort the query results in chronological order or reverse chronological order. Default value: `false`.

*   `true`: sorts the query results in reverse chronological order.
*   `false`: sorts the query results in chronological order.', example='false'),
  serviceIp?: string(name='ServiceIp', description='The IP address of the host where the application resides.', example='172.20.XX.XX'),
  serviceName?: string(name='ServiceName', description='The name of the application.', example='arms-k8s-demo-subcomponent'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. Unit: milliseconds.', example='1595174400000'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. The following system preset fields are provided:

*   serverApp: the name of the server application.
*   clientApp: the name of the client application.
*   service: the name of the operation.
*   rpc: the type of the call.
*   msOfSpan: the duration exceeds a specific value.
*   clientIp: the IP address of the client.
*   serverIp: the IP address of the server.
*   isError: specifies whether the call is abnormal.
*   hasTprof: contains only thread profiling.', example='http.status_code'),
      value?: string(name='Value', description='The value of the tag.', example='200'),
    }
  ](name='Tag', description='The list of tags.'),
}

model SearchTracesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C518054-852F-4023-ABC1-4AF95FF7****'),
  traceInfos?: [ 
    {
      duration?: long(name='Duration', description='The amount of time consumed by the trace. Unit: milliseconds.', example='6'),
      operationName?: string(name='OperationName', description='The name of the traced span.', example='get***'),
      serviceIp?: string(name='ServiceIp', description='The IP address of the host where the application resides.', example='172.20.**.**'),
      serviceName?: string(name='ServiceName', description='The name of the application.', example='arms-k8s-demo-subcomponent'),
      timestamp?: long(name='Timestamp', description='The timestamp.', example='1595174436993'),
      traceID?: string(name='TraceID', description='The trace ID.', example='ac1400a115951744369937024d****'),
    }
  ](name='TraceInfos', description='The details of the returned traces.'),
}

model SearchTracesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchTracesResponseBody(name='body'),
}

/**
  * > A maximum of 100 data entries can be returned each time this operation is called. If you want to query all existing traces, we recommend that you call the SearchTracesByPage operation. For more information, see [SearchTracesByPage](~~175866~~).
  *
  * @param request SearchTracesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SearchTracesResponse
 */
async function searchTracesWithOptions(request: SearchTracesRequest, runtime: Util.RuntimeOptions): SearchTracesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.exclusionFilters)) {
    query['ExclusionFilters'] = request.exclusionFilters;
  }
  if (!Util.isUnset(request.minDuration)) {
    query['MinDuration'] = request.minDuration;
  }
  if (!Util.isUnset(request.operationName)) {
    query['OperationName'] = request.operationName;
  }
  if (!Util.isUnset(request.pid)) {
    query['Pid'] = request.pid;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reverse)) {
    query['Reverse'] = request.reverse;
  }
  if (!Util.isUnset(request.serviceIp)) {
    query['ServiceIp'] = request.serviceIp;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchTraces',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > A maximum of 100 data entries can be returned each time this operation is called. If you want to query all existing traces, we recommend that you call the SearchTracesByPage operation. For more information, see [SearchTracesByPage](~~175866~~).
  *
  * @param request SearchTracesRequest
  * @return SearchTracesResponse
 */
async function searchTraces(request: SearchTracesRequest): SearchTracesResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchTracesWithOptions(request, runtime);
}

model SearchTracesByPageRequest {
  endTime?: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1595210400000'),
  exclusionFilters?: [ 
    {
      key?: string(name='Key', description='The key that is used to filter the query results.', example='http.status_code'),
      value?: string(name='Value', description='The value of the key that is used to filter the query results.', example='404'),
    }
  ](name='ExclusionFilters', description='The filter conditions.'),
  isError?: boolean(name='IsError', description='Specifies whether to include the traces of abnormal calls.

*   `true`: No
*   `false` (default): Yes', example='false'),
  minDuration?: long(name='MinDuration', description='The minimum amount of time consumed by traces. Unit: milliseconds.', example='2'),
  operationName?: string(name='OperationName', description='The name of the traced span.', example='/demo/queryNotExistDB/11'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100.', example='5'),
  pid?: string(name='Pid', description='The application ID.', example='b590lhguqs@9781be0f44dXXXX'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  reverse?: boolean(name='Reverse', description='Specifies whether to sort the query results in chronological order or reverse chronological order. Default value: `false`.

*   `true`: sorts the query results in reverse chronological order.
*   `false`: sorts the query results in chronological order.', example='false'),
  serviceIp?: string(name='ServiceIp', description='The IP address of the host where the application resides.', example='172.20.XX.XX'),
  serviceName?: string(name='ServiceName', description='The name of the application.', example='arms-k8s-demo-subcomponent'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. Unit: milliseconds.', example='1595174400000'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of the tag. The following system preset fields are provided:

*   traceId: the ID of the trace.
*   serverApp: the name of the server application.
*   clientApp: the name of the client application.
*   service: the name of the API operation.
*   rpc: the type of the call.
*   msOfSpan: the duration exceeds a specific value.
*   clientIp: the IP address of the client.
*   serverIp: the IP address of the server.
*   isError: specifies whether the call is abnormal.
*   hasTprof: contains only thread profiling.', example='http.status_code'),
      value?: string(name='Value', description='The value of the tag.', example='200'),
    }
  ](name='Tags', description='The tags.'),
}

model SearchTracesByPageResponseBody = {
  pageBean?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='5'),
    total?: int32(name='Total', description='The total number of returned entries.', example='1601'),
    traceInfos?: [ 
      {
        duration?: long(name='Duration', description='The amount of time consumed by the trace. Unit: milliseconds.', example='679'),
        operationName?: string(name='OperationName', description='The name of the traced span.', example='/demo/queryException/12'),
        serviceIp?: string(name='ServiceIp', description='The IP address of the host where the application resides.', example='172.20.XX.XX'),
        serviceName?: string(name='ServiceName', description='The name of the application.', example='arms-k8s-demo-subcomponent'),
        timestamp?: long(name='Timestamp', description='The timestamp.', example='1595174436994'),
        traceID?: string(name='TraceID', description='The trace ID.', example='ac1400a115951744369947025d****'),
      }
    ](name='TraceInfos', description='The details of the returned traces.'),
  }(name='PageBean', description='The returned struct.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C518054-852F-4023-ABC1-4AF95FF7****'),
}

model SearchTracesByPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchTracesByPageResponseBody(name='body'),
}

async function searchTracesByPageWithOptions(request: SearchTracesByPageRequest, runtime: Util.RuntimeOptions): SearchTracesByPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.exclusionFilters)) {
    query['ExclusionFilters'] = request.exclusionFilters;
  }
  if (!Util.isUnset(request.isError)) {
    query['IsError'] = request.isError;
  }
  if (!Util.isUnset(request.minDuration)) {
    query['MinDuration'] = request.minDuration;
  }
  if (!Util.isUnset(request.operationName)) {
    query['OperationName'] = request.operationName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pid)) {
    query['Pid'] = request.pid;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reverse)) {
    query['Reverse'] = request.reverse;
  }
  if (!Util.isUnset(request.serviceIp)) {
    query['ServiceIp'] = request.serviceIp;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchTracesByPage',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchTracesByPage(request: SearchTracesByPageRequest): SearchTracesByPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchTracesByPageWithOptions(request, runtime);
}

model SendTTSVerifyLinkRequest {
  contactId?: long(name='ContactId', description='The ID of the alert contact.', example='123'),
  phone?: string(name='Phone', description='The mobile number of the alert contact.', example='1381111****'),
}

model SendTTSVerifyLinkResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the text message was sent.

*   `true`
*   `false`', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='21E85B16-75A6-429A-9F65-8AAC9A54****'),
}

model SendTTSVerifyLinkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendTTSVerifyLinkResponseBody(name='body'),
}

/**
  * After you receive the text message, verify the mobile number as prompted. Before you can specify a mobile phone number in a notification policy, you must verify the mobile phone number.
  *
  * @param request SendTTSVerifyLinkRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SendTTSVerifyLinkResponse
 */
async function sendTTSVerifyLinkWithOptions(request: SendTTSVerifyLinkRequest, runtime: Util.RuntimeOptions): SendTTSVerifyLinkResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.contactId)) {
    body['ContactId'] = request.contactId;
  }
  if (!Util.isUnset(request.phone)) {
    body['Phone'] = request.phone;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendTTSVerifyLink',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * After you receive the text message, verify the mobile number as prompted. Before you can specify a mobile phone number in a notification policy, you must verify the mobile phone number.
  *
  * @param request SendTTSVerifyLinkRequest
  * @return SendTTSVerifyLinkResponse
 */
async function sendTTSVerifyLink(request: SendTTSVerifyLinkRequest): SendTTSVerifyLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendTTSVerifyLinkWithOptions(request, runtime);
}

model SetRetcodeShareStatusRequest {
  appName?: string(name='AppName', description='The name of the application that is monitored by Browser Monitoring.', example='test-app'),
  pid?: string(name='Pid', description='The process identifier (PID) of the application. For more information, see [Obtain the PID of an application](https://www.alibabacloud.com/help/zh/doc-detail/186100.htm?spm=a2cdw.13409063.0.0.7a72281f0bkTfx#title-imy-7gj-qhr).', example='atc889zkcf@d8deedfa9bf****'),
  status?: boolean(name='Status', description='Specifies whether to turn on or turn off the logon-free sharing switch. Valid values:

*   `true`: Turn on the switch.
*   `false`: Turn off the switch.', example='true'),
}

model SetRetcodeShareStatusResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the call is successful. Valid values:

*   `true`: The call is successful.
*   `false`: The call fails.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='40B10E04-81E8-4643-970D-F1B38F2E****'),
}

model SetRetcodeShareStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetRetcodeShareStatusResponseBody(name='body'),
}

async function setRetcodeShareStatusWithOptions(request: SetRetcodeShareStatusRequest, runtime: Util.RuntimeOptions): SetRetcodeShareStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.pid)) {
    query['Pid'] = request.pid;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetRetcodeShareStatus',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setRetcodeShareStatus(request: SetRetcodeShareStatusRequest): SetRetcodeShareStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setRetcodeShareStatusWithOptions(request, runtime);
}

model StartAlertRequest {
  alertId?: string(name='AlertId', example='1610***'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model StartAlertResponseBody = {
  isSuccess?: boolean(name='IsSuccess', example='true'),
  requestId?: string(name='RequestId', example='27E653FA-5958-45BE-8AA9-14D884DC****'),
}

model StartAlertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartAlertResponseBody(name='body'),
}

async function startAlertWithOptions(request: StartAlertRequest, runtime: Util.RuntimeOptions): StartAlertResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alertId)) {
    query['AlertId'] = request.alertId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartAlert',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startAlert(request: StartAlertRequest): StartAlertResponse {
  var runtime = new Util.RuntimeOptions{};
  return startAlertWithOptions(request, runtime);
}

model StartTimingSyntheticTaskRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  taskIds?: [ string ](name='TaskIds'),
}

model StartTimingSyntheticTaskShrinkRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  taskIdsShrink?: string(name='TaskIds'),
}

model StartTimingSyntheticTaskResponseBody = {
  code?: long(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='2A0CEDF1-06FE-44AC-8E21-21A5BE65****'),
}

model StartTimingSyntheticTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartTimingSyntheticTaskResponseBody(name='body'),
}

async function startTimingSyntheticTaskWithOptions(tmpReq: StartTimingSyntheticTaskRequest, runtime: Util.RuntimeOptions): StartTimingSyntheticTaskResponse {
  Util.validateModel(tmpReq);
  var request = new StartTimingSyntheticTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.taskIds)) {
    request.taskIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.taskIds, 'TaskIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.taskIdsShrink)) {
    query['TaskIds'] = request.taskIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartTimingSyntheticTask',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startTimingSyntheticTask(request: StartTimingSyntheticTaskRequest): StartTimingSyntheticTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return startTimingSyntheticTaskWithOptions(request, runtime);
}

model StopAlertRequest {
  alertId?: string(name='AlertId', description='The ID of the alert rule.', example='1610***'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model StopAlertResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the request is successful. Valid values:

*   `true`: The request is successful.
*   `false`: The request fails.', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='27E653FA-5958-45BE-8AA9-14D884DC****'),
}

model StopAlertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopAlertResponseBody(name='body'),
}

async function stopAlertWithOptions(request: StopAlertRequest, runtime: Util.RuntimeOptions): StopAlertResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alertId)) {
    query['AlertId'] = request.alertId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopAlert',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopAlert(request: StopAlertRequest): StopAlertResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopAlertWithOptions(request, runtime);
}

model StopTimingSyntheticTaskRequest {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  taskIds?: [ string ](name='TaskIds', description='The task IDs.'),
}

model StopTimingSyntheticTaskShrinkRequest {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  taskIdsShrink?: string(name='TaskIds', description='The task IDs.'),
}

model StopTimingSyntheticTaskResponseBody = {
  code?: long(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
}

model StopTimingSyntheticTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopTimingSyntheticTaskResponseBody(name='body'),
}

async function stopTimingSyntheticTaskWithOptions(tmpReq: StopTimingSyntheticTaskRequest, runtime: Util.RuntimeOptions): StopTimingSyntheticTaskResponse {
  Util.validateModel(tmpReq);
  var request = new StopTimingSyntheticTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.taskIds)) {
    request.taskIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.taskIds, 'TaskIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.taskIdsShrink)) {
    query['TaskIds'] = request.taskIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopTimingSyntheticTask',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopTimingSyntheticTask(request: StopTimingSyntheticTaskRequest): StopTimingSyntheticTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopTimingSyntheticTaskWithOptions(request, runtime);
}

model SwitchSyntheticTaskStatusRequest {
  switchStatus?: long(name='SwitchStatus', example='0'),
  taskIds?: [ long ](name='TaskIds'),
}

model SwitchSyntheticTaskStatusResponseBody = {
  requestId?: string(name='RequestId', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
  result?: string(name='Result', example='true'),
}

model SwitchSyntheticTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchSyntheticTaskStatusResponseBody(name='body'),
}

async function switchSyntheticTaskStatusWithOptions(request: SwitchSyntheticTaskStatusRequest, runtime: Util.RuntimeOptions): SwitchSyntheticTaskStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.switchStatus)) {
    query['SwitchStatus'] = request.switchStatus;
  }
  if (!Util.isUnset(request.taskIds)) {
    query['TaskIds'] = request.taskIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SwitchSyntheticTaskStatus',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function switchSyntheticTaskStatus(request: SwitchSyntheticTaskStatusRequest): SwitchSyntheticTaskStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchSyntheticTaskStatusWithOptions(request, runtime);
}

model SyncRecordingRulesRequest {
  clusterId?: string(name='ClusterId', description='The ID of the cluster whose aggregation rule you want to synchronize.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  regionId?: string(name='RegionId', description='The ID of the region. The destination region can be the same as the source region.', example='cn-hangzhou'),
  targetClusters?: string(name='TargetClusters', description='The IDs of clusters to which you want to synchronize the aggregation rule.', example='{     "cn":[         "c06ca68cd16f14f52bb07772eda***",         "c33dd70a0ac184c1b879d807ab2***",         "c384cf7e4dcb543e6ac8c7d4dd3***"     ],     "us":[         "ce30f833bc4a04a56a06b070319***"     ],     "jp":[      ],     "ap":[      ],     "gov":[      ],     "finance":[      ] }'),
}

model SyncRecordingRulesResponseBody = {
  code?: int32(name='Code', description='状态码。200表示成功。', example='200'),
  data?: string(name='Data', description='The struct returned.', example='{ "data":\\[ "c06ca68cd16f14f52bb07772eda\\*\\*\\*", "c33dd70a0ac184c1b879d807ab2\\*\\*\\*", "c384cf7e4dcb543e6ac8c7d4dd3\\*\\*\\*", "ce30f833bc4a04a56a06b070319\\*\\*\\*" ], "message":"IDs of Clusters to which the aggregation rule failed to be synchronized", "success":true }'),
  message?: string(name='Message', description='返回结果的提示信息。', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
}

model SyncRecordingRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncRecordingRulesResponseBody(name='body'),
}

async function syncRecordingRulesWithOptions(request: SyncRecordingRulesRequest, runtime: Util.RuntimeOptions): SyncRecordingRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.targetClusters)) {
    query['TargetClusters'] = request.targetClusters;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SyncRecordingRules',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function syncRecordingRules(request: SyncRecordingRulesRequest): SyncRecordingRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncRecordingRulesWithOptions(request, runtime);
}

model TagResourcesRequest {
  resourceId?: [ string ](name='ResourceId', description='The resource IDs. You can specify a maximum of 50 resource IDs.'),
  resourceType?: string(name='ResourceType', description='The type of the ARMS resources for which you want to modify tags. Valid values: WEB: Browser Monitoring APPLICATION: Application Monitoring PROMETHEUS: Managed Service for Prometheus SYNTHETICTASK: Synthetic Monitoring ALERTRULE: Application Monitoring alert rules PROMETHEUSALERTRULE: Prometheus alert rules', example='PROMETHEUS'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='Key1'),
      value?: string(name='Value', description='The value of the tag.', example='Test1'),
    }
  ](name='Tag', description='The tags to add to the resource. You can specify a maximum of 20 tags.'),
}

model TagResourcesResponseBody = {
  data?: string(name='Data', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='05919CF2-B8A1-588D-B3DB-89B3********'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UninstallManagedPrometheusRequest {
  clusterId?: string(name='ClusterId', description='The ID of the ASK cluster. This parameter is required if the ClusterType parameter is set to ask.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  clusterType?: string(name='ClusterType', description='The type of the monitoring object. Valid values: ask and ecs.', example='ask'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Prometheus instance belongs.', example='rg-acfmxyexli2****'),
  vpcId?: string(name='VpcId', description='The virtual private cloud (VPC) where the ASK cluster or ECS instance resides.', example='vpc-rpn**********'),
}

model UninstallManagedPrometheusResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  data?: string(name='Data', description='The response content. The status of the Prometheus instance is returned.', example='success'),
  message?: string(name='Message', description='The error message that is returned if the request fails.', example='vpcId is blank'),
  requestId?: string(name='RequestId', description='The request ID.', example='2A0CEDF1-06FE-44AC-8E21-21A5BE65****'),
  success?: boolean(name='Success', description='Indicates whether the Prometheus instance was removed.', example='true'),
}

model UninstallManagedPrometheusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UninstallManagedPrometheusResponseBody(name='body'),
}

/**
  * Make sure that the ASK cluster or ECS instance is monitored in Managed Service for Prometheus.
  *
  * @param request UninstallManagedPrometheusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UninstallManagedPrometheusResponse
 */
async function uninstallManagedPrometheusWithOptions(request: UninstallManagedPrometheusRequest, runtime: Util.RuntimeOptions): UninstallManagedPrometheusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterType)) {
    query['ClusterType'] = request.clusterType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UninstallManagedPrometheus',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Make sure that the ASK cluster or ECS instance is monitored in Managed Service for Prometheus.
  *
  * @param request UninstallManagedPrometheusRequest
  * @return UninstallManagedPrometheusResponse
 */
async function uninstallManagedPrometheus(request: UninstallManagedPrometheusRequest): UninstallManagedPrometheusResponse {
  var runtime = new Util.RuntimeOptions{};
  return uninstallManagedPrometheusWithOptions(request, runtime);
}

model UninstallPromClusterRequest {
  aliyunLang?: string(name='AliyunLang', description='Language environment(If left blank, defaults to zh):
- zh
- en', example='en'),
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='c0bad479465464e1d8c1e641b0afb****'),
  regionId?: string(name='RegionId', description='The region ID. Default value: cn-hangzhou.', example='cn-hangzhou'),
}

model UninstallPromClusterResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='Indicates whether the request was successful.', example='true'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to find logs and troubleshoot issues.', example='53980F48-DE82-53A1-9ADE-D2629226DD9A'),
}

model UninstallPromClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UninstallPromClusterResponseBody(name='body'),
}

async function uninstallPromClusterWithOptions(request: UninstallPromClusterRequest, runtime: Util.RuntimeOptions): UninstallPromClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunLang)) {
    query['AliyunLang'] = request.aliyunLang;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UninstallPromCluster',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function uninstallPromCluster(request: UninstallPromClusterRequest): UninstallPromClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return uninstallPromClusterWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to delete all tags. This parameter takes effect only when the TagKey.N parameter is not specified. Valid values:

*   true
*   false

Default value: false.', example='False'),
  resourceId?: [ string ](name='ResourceId', description='The resource IDs. You can specify a maximum of 50 resource IDs.'),
  resourceType?: string(name='ResourceType', description='The type of the ARMS resources for which you want to modify tags.', example='PROMETHEUS'),
  tagKey?: [ string ](name='TagKey', description='The tag keys. You can specify a maximum of 20 tag keys.'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='TestKey'),
      value?: string(name='Value', description='The value of the tag.', example='TestValue'),
    }
  ](name='Tags', description='The list of tags.'),
}

model UntagResourcesResponseBody = {
  data?: string(name='Data', description='The returned struct.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='FC183B5E-C9AD-5E9E-937F-*******'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateAlertContactRequest {
  contactId?: long(name='ContactId', description='The ID of the alert contact to be updated. You can call the SearchAlertContact operation to query the contact ID. For more information, see [SearchAlertContact](~~130703~~).', example='123'),
  contactName?: string(name='ContactName', description='The new name of the alert contact.', example='John Doe'),
  dingRobotWebhookUrl?: string(name='DingRobotWebhookUrl', description='The new webhook URL of the DingTalk chatbot. For more information, see [Configure a DingTalk chatbot to send alert notifications](~~106247~~). You must specify at least one of the following parameters: PhoneNum, Email, and DingRobotWebhookUrl.

>  If you do not specify this parameter, the original parameter value is deleted. If you specify this parameter, the original parameter value is updated.', example='https://oapi.dingtalk.com/robot/send?access_token=91f2f6****'),
  email?: string(name='Email', description='The new email address of the alert contact. You must specify at least one of the following parameters: PhoneNum, Email, and DingRobotWebhookUrl.

>  If you do not specify this parameter, the original parameter value is deleted. If you specify this parameter, the original parameter value is updated.', example='someone@example.com'),
  phoneNum?: string(name='PhoneNum', description='The new mobile phone number of the alert contact. You must specify at least one of the following parameters: PhoneNum, Email, and DingRobotWebhookUrl.

>  If you do not specify this parameter, the original parameter value is deleted. If you specify this parameter, the original parameter value is updated.', example='1381111****'),
  regionId?: string(name='RegionId', description='The ID of the region. Set the value to `cn-hangzhou`.', example='cn-hangzhou'),
  systemNoc?: boolean(name='SystemNoc', description='Specifies whether the alert contact receives system notifications. Valid values:

*   `true`: The alert contact receives system notifications.
*   `false`: The alert contact does not receive system notifications.', example='true'),
}

model UpdateAlertContactResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the alert contact was updated. Valid values:

*   true: The alert contact was updated.
*   false: The alert contact failed to be updated.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1A474FF8-7861-4D00-81B5-5BC3DA4E****'),
}

model UpdateAlertContactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAlertContactResponseBody(name='body'),
}

/**
  * This operation is no longer maintained. To create or modify an alert contact, call the CreateOrUpdateContact operation provided by the new version of Alert Management.
  *
  * @param request UpdateAlertContactRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateAlertContactResponse
 */
async function updateAlertContactWithOptions(request: UpdateAlertContactRequest, runtime: Util.RuntimeOptions): UpdateAlertContactResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactId)) {
    query['ContactId'] = request.contactId;
  }
  if (!Util.isUnset(request.contactName)) {
    query['ContactName'] = request.contactName;
  }
  if (!Util.isUnset(request.dingRobotWebhookUrl)) {
    query['DingRobotWebhookUrl'] = request.dingRobotWebhookUrl;
  }
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  if (!Util.isUnset(request.phoneNum)) {
    query['PhoneNum'] = request.phoneNum;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.systemNoc)) {
    query['SystemNoc'] = request.systemNoc;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAlertContact',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation is no longer maintained. To create or modify an alert contact, call the CreateOrUpdateContact operation provided by the new version of Alert Management.
  *
  * @param request UpdateAlertContactRequest
  * @return UpdateAlertContactResponse
 */
async function updateAlertContact(request: UpdateAlertContactRequest): UpdateAlertContactResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAlertContactWithOptions(request, runtime);
}

model UpdateAlertContactGroupRequest {
  contactGroupId?: long(name='ContactGroupId', description='The ID of the alert contact group.', example='123'),
  contactGroupName?: string(name='ContactGroupName', description='The name of the alert contact group.', example='TestGroup'),
  contactIds?: string(name='ContactIds', description='The ID of the alert contact.', example='123 234 345'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
}

model UpdateAlertContactGroupResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the call was successful.

*   `true`: The call was successful.
*   `false`: The call failed.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9319A57D-2D9E-472A-B69B-CF3CD16D****'),
}

model UpdateAlertContactGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAlertContactGroupResponseBody(name='body'),
}

async function updateAlertContactGroupWithOptions(request: UpdateAlertContactGroupRequest, runtime: Util.RuntimeOptions): UpdateAlertContactGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactGroupId)) {
    query['ContactGroupId'] = request.contactGroupId;
  }
  if (!Util.isUnset(request.contactGroupName)) {
    query['ContactGroupName'] = request.contactGroupName;
  }
  if (!Util.isUnset(request.contactIds)) {
    query['ContactIds'] = request.contactIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAlertContactGroup',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAlertContactGroup(request: UpdateAlertContactGroupRequest): UpdateAlertContactGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAlertContactGroupWithOptions(request, runtime);
}

model UpdateAlertRuleRequest {
  alertId?: long(name='AlertId', description='The ID of the alert rule.', example='1234567'),
  contactGroupIds?: string(name='ContactGroupIds', description='The IDs of the alert contact groups. The value must be a JSON array.', example='[123, 234]'),
  isAutoStart?: boolean(name='IsAutoStart', description='Specifies whether to enable the alert rule after it is created. Default value: `false`.

*   `true`: enables the alert rule.
*   `false`: disables the alert rule.', example='true'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  templageAlertConfig?: string(name='TemplageAlertConfig', description='The configurations of the alert template based on which you want to create an alert rule. The value must be a JSON string. You must set at least one of the **TemplateAlertId** and **TemplageAlertConfig** parameters. If you set both parameters, the **TemplateAlertId** parameter prevails. For more information about the TemplageAlertConfig parameter, see the following **additional information about the TemplageAlertConfig parameter**.', example='[ { "contactGroupIds": "381", "alertType": 5, "alarmContext": { "subTitle": "", "content": "Alarm name: $alarm name\\nFilter condition: $filter\\nAlarm time : $Alarm time\\nAlarm content: $Alarm content\\nNote: Before the recovery email is received, the alarm is in continuous alarm, and you will be reminded again after 24 hours!" }, "alertLevel": "WARN", " metricParam": { "appId": "70901", "pid": "atc889zkcf@d8deedfa9bf****", "type": "TXN", "dimensions": [ { "type": "STATIC", "value ": "\\\\/hello_test_api_address\\\\/test1", "key": "rpc" } ] }, "alertWay": [ "SMS", "MAIL", "DING_ROBOT" ], "alertRule": { "rules" : [ { "measure": "appstat.txn.rt", "alias": "Entry call response time_ms", "aggregates": "AVG", "nValue": 1, "value": 1, "operator ": "CURRENT_GTE" } ], "operator": "|" }, "title": "Alarm template alarm name", "config": "{\\"continuous\\":false,\\"dataRevision\\":2, \\"ownerId\\":\\"123412341234\\"}", "notice": { "noticeStartTime": 1480521600000, "startTime": 1480521600000, "endTime": 1480607940000, "noticeEndTime": 1480607940000 }, "stat us": "NON " } ]'),
}

model UpdateAlertRuleResponseBody = {
  alertId?: long(name='AlertId', description='The ID of the alert rule.', example='1234567'),
  data?: string(name='Data', description='The struct returned.', example='-'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6A9AEA84-7186-4D8D-B498-4585C6A2****'),
}

model UpdateAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAlertRuleResponseBody(name='body'),
}

async function updateAlertRuleWithOptions(request: UpdateAlertRuleRequest, runtime: Util.RuntimeOptions): UpdateAlertRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alertId)) {
    query['AlertId'] = request.alertId;
  }
  if (!Util.isUnset(request.contactGroupIds)) {
    query['ContactGroupIds'] = request.contactGroupIds;
  }
  if (!Util.isUnset(request.isAutoStart)) {
    query['IsAutoStart'] = request.isAutoStart;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.templageAlertConfig)) {
    query['TemplageAlertConfig'] = request.templageAlertConfig;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAlertRule',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAlertRule(request: UpdateAlertRuleRequest): UpdateAlertRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAlertRuleWithOptions(request, runtime);
}

model UpdateDispatchRuleRequest {
  dispatchRule?: string(name='DispatchRule', description='## Additional information about the **DispatchRule** parameter

**JSON string example and description**

```

{
  "id": 123,           // The ID of the dispatch policy. 
  "system": false,        // Specifies whether the dispatch rule is editable. Valid values: true: not editable. false: editable. 
  "ruleid": 10282,           // The ID of the dispatch rule. 
  "name": "Prometheus Alert",   // The name of the dispatch policy. 
  "labelMatchExpressionGrid": {
    "labelMatchExpressionGroups": [     // Sets the dispatch rule. 
      {
        "labelMatchExpressions": [
          {
            "key": "_aliyun_arms_involvedObject_kind",   // The key of the tag of the dispatch rule. For more information, see the next section. 
            "value": "app",                              // The value of the tag. 
            "operator": "eq"                             // The operator used in the dispatch rule. Valid values: eq: equals to. re: matches a regular expression. 
          }
        ]
      }
    ]
  },
  "dispatchType": "CREATE_ALERT/DISCARD_ALERT",    // The alert handling method. Valid values: CREATE_ALERT: generates an alert. DISCARD_ALERT: discards the alert event and generates no alert.
  "isRecover": true,               // Specifies whether to send the restored alert. Valid values: true: sends the alert. false: does not send the alert. 
  "groupRules": [                  // Sets the event group. 
    {
      "groupId": 1,               // The ID of the group. 
      "groupingFields": [         // The fields that are used to group events. Events with the same field content are assigned to a group. Alerts with the same specified grouping field are sent to the handler in separate notifications. 
        "alertname"
      ],
      "groupWait": 10,                 // The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler. 
      "groupInterval": 15,             // The grouping interval. During the silence period of repeated alerts, if new alerts are generated, they will be sent after the group waiting time. 
      "repeatInterval": 20             // The silence period of repeated alerts. All alerts are repeatedly sent at specified intervals until the alerts are cleared. 
    }
  ],
  "notifyRules": [            // Sets the notification rule. 
    {
      "notifyObjects": [
        {
          "notifyType": "ARMS_CONTACT",     // The type of the alert contact. Valid values: ARMS_CONTACT: contact. ARMS_CONTACT_GROUP: contact group. 
          "name": "JohnDoe",                // The name of the contact or contact group. 
          "notifyObjectId": 1               // The ID of the contact or contact group. 
        },
        {
          "notifyType": "ARMS_CONTACT_GROUP",
          "name": "JohnDoe_group",
          "notifyObjectId": 2
        }
      ],
      "notifyChannels":["dingTalk","wechat","webhook","email"]     // The notification method. Valid values: dingTalk, sms, webhook, email, and wechat. 
    },
  ],
}
```

**Enumerated keys of the tag of the dispatch rule**

*   `_aliyun_arms_userid`: user ID
*   `_aliyun_arms_involvedObject_kind`: type of the associated object
*   `_aliyun_arms_involvedObject_id`: ID of the associated object
*   `_aliyun_arms_involvedObject_name`: name of the associated object
*   `_aliyun_arms_alert_name`: alert name
*   `_aliyun_arms_alert_rule_id`: alert rule ID
*   `_aliyun_arms_alert_type`: alert type
*   `_aliyun_arms_alert_level`: alert severity', example='{   "id": 123,     "system": false,   "ruleid": 10282,   "name": "Prometheus Alert",   "labelMatchExpressionGrid": {     "labelMatchExpressionGroups": [       {         "labelMatchExpressions": [           {             "key": "_aliyun_arms_involvedObject_kind",             "value": "app",             "operator": "eq"           }         ]       }     ]   },   "dispatchType": "CREATE_ALERT/DISCARD_ALERT",   "isRecover": true,   "groupRules": [     {       "groupId": 1,       "groupingFields": [         "alertname"       ],       "groupWait": 10,       "groupInterval": 15,       "repeatInterval": 20     }   ],   "notifyRules": [     {       "notifyObjects": [         {           "notifyType": "ARMS_CONTACT",           "name": "JohnDoe",           "notifyObjectId": 1         },         {           "notifyType": "ARMS_CONTACT_GROUP",           "name": "JohnDoe_group",           "notifyObjectId": 2         }       ],       "notifyChannels":["dingTalk","wechat","webhook","email"]     },   ], }'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model UpdateDispatchRuleResponseBody = {
  requestId?: string(name='RequestId', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDispatchRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDispatchRuleResponseBody(name='body'),
}

async function updateDispatchRuleWithOptions(request: UpdateDispatchRuleRequest, runtime: Util.RuntimeOptions): UpdateDispatchRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dispatchRule)) {
    query['DispatchRule'] = request.dispatchRule;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDispatchRule',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDispatchRule(request: UpdateDispatchRuleRequest): UpdateDispatchRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDispatchRuleWithOptions(request, runtime);
}

model UpdateEnvCustomJobRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values: zh and en. Default value: zh.', example='zh'),
  configYaml?: string(name='ConfigYaml', description='The YAML configuration string.', example='Refer to supplementary instructions.'),
  customJobName?: string(name='CustomJobName', description='The name of the custom job.', example='customJob1'),
  environmentId?: string(name='EnvironmentId', description='The environment ID.', example='env-xxxxx'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  status?: string(name='Status', description='The status of the custom job. Valid values: run and stop.', example='run'),
}

model UpdateEnvCustomJobResponseBody = {
  code?: int32(name='Code', description='The status code or error code.', example='200'),
  data?: string(name='Data', description='The result of the operation.', example='success'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model UpdateEnvCustomJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEnvCustomJobResponseBody(name='body'),
}

async function updateEnvCustomJobWithOptions(request: UpdateEnvCustomJobRequest, runtime: Util.RuntimeOptions): UpdateEnvCustomJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunLang)) {
    query['AliyunLang'] = request.aliyunLang;
  }
  if (!Util.isUnset(request.customJobName)) {
    query['CustomJobName'] = request.customJobName;
  }
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.configYaml)) {
    body['ConfigYaml'] = request.configYaml;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEnvCustomJob',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateEnvCustomJob(request: UpdateEnvCustomJobRequest): UpdateEnvCustomJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEnvCustomJobWithOptions(request, runtime);
}

model UpdateEnvPodMonitorRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values: zh and en. Default value: zh.', example='zh'),
  configYaml?: string(name='ConfigYaml', description='The YAML configuration string.', example='Refer to supplementary instructions.'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request.', example='true'),
  environmentId?: string(name='EnvironmentId', description='The environment ID.', example='env-xxxxx'),
  namespace?: string(name='Namespace', description='The namespace where the PodMonitor is located.', example='arms-prom'),
  podMonitorName?: string(name='PodMonitorName', description='The name of the PodMonitor.', example='arms-admin-pm1'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model UpdateEnvPodMonitorResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    matchedMsg?: string(name='MatchedMsg', description='Indicates whether targets are matched.', example='Match successful.'),
    matchedTargetCount?: string(name='MatchedTargetCount', description='The number of matched targets.', example='1'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model UpdateEnvPodMonitorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEnvPodMonitorResponseBody(name='body'),
}

async function updateEnvPodMonitorWithOptions(request: UpdateEnvPodMonitorRequest, runtime: Util.RuntimeOptions): UpdateEnvPodMonitorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunLang)) {
    query['AliyunLang'] = request.aliyunLang;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.podMonitorName)) {
    query['PodMonitorName'] = request.podMonitorName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.configYaml)) {
    body['ConfigYaml'] = request.configYaml;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEnvPodMonitor',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateEnvPodMonitor(request: UpdateEnvPodMonitorRequest): UpdateEnvPodMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEnvPodMonitorWithOptions(request, runtime);
}

model UpdateEnvServiceMonitorRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values: zh and en. Default value: zh.', example='zh'),
  configYaml?: string(name='ConfigYaml', description='The YAML configuration string.', example='Refer to supplementary instructions.'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request.', example='true'),
  environmentId?: string(name='EnvironmentId', description='The environment ID.', example='env-xxxxx'),
  namespace?: string(name='Namespace', description='The namespace where the ServiceMonitor is located.', example='arms-prom'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  serviceMonitorName?: string(name='ServiceMonitorName', description='The name of the ServiceMonitor.', example='serviceMonitor1'),
}

model UpdateEnvServiceMonitorResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    matchedMsg?: string(name='MatchedMsg', description='Indicates whether targets are matched.', example='Match successful.'),
    matchedTargetCount?: string(name='MatchedTargetCount', description='The number of matched targets.', example='1'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='1A474FF8-7861-4D00-81B5-5BC3DA4E****'),
}

model UpdateEnvServiceMonitorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEnvServiceMonitorResponseBody(name='body'),
}

async function updateEnvServiceMonitorWithOptions(request: UpdateEnvServiceMonitorRequest, runtime: Util.RuntimeOptions): UpdateEnvServiceMonitorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunLang)) {
    query['AliyunLang'] = request.aliyunLang;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.serviceMonitorName)) {
    query['ServiceMonitorName'] = request.serviceMonitorName;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.configYaml)) {
    body['ConfigYaml'] = request.configYaml;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEnvServiceMonitor',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateEnvServiceMonitor(request: UpdateEnvServiceMonitorRequest): UpdateEnvServiceMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEnvServiceMonitorWithOptions(request, runtime);
}

model UpdateEnvironmentRequest {
  aliyunLang?: string(name='AliyunLang', description='Locale, the default is Chinese zh | en.', example='zh'),
  environmentId?: string(name='EnvironmentId', description='Environment ID.', example='env-xxxxx'),
  environmentName?: string(name='EnvironmentName', description='Environment name.', example='env1'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model UpdateEnvironmentResponseBody = {
  code?: int32(name='Code', description='The status code or error code.', example='200'),
  data?: string(name='Data', description='The data returned.', example='success'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='70675725-8F11-4817-8106-CFE0AD71****'),
}

model UpdateEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEnvironmentResponseBody(name='body'),
}

async function updateEnvironmentWithOptions(request: UpdateEnvironmentRequest, runtime: Util.RuntimeOptions): UpdateEnvironmentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunLang)) {
    query['AliyunLang'] = request.aliyunLang;
  }
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.environmentName)) {
    query['EnvironmentName'] = request.environmentName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEnvironment',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateEnvironment(request: UpdateEnvironmentRequest): UpdateEnvironmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEnvironmentWithOptions(request, runtime);
}

model UpdateGrafanaWorkspaceRequest {
  aliyunLang?: string(name='AliyunLang', example='zh'),
  description?: string(name='Description'),
  grafanaWorkspaceId?: string(name='GrafanaWorkspaceId', example='grafana-cn-4xl3g******'),
  grafanaWorkspaceName?: string(name='GrafanaWorkspaceName', example='testGrafana'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model UpdateGrafanaWorkspaceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='16AF921B-8187-489F-9913-43C808B4****'),
  success?: boolean(name='Success', example='true'),
  traceId?: string(name='TraceId', example='eac0a8048716731735000007137d000b'),
}

model UpdateGrafanaWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGrafanaWorkspaceResponseBody(name='body'),
}

async function updateGrafanaWorkspaceWithOptions(request: UpdateGrafanaWorkspaceRequest, runtime: Util.RuntimeOptions): UpdateGrafanaWorkspaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunLang)) {
    query['AliyunLang'] = request.aliyunLang;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.grafanaWorkspaceId)) {
    query['GrafanaWorkspaceId'] = request.grafanaWorkspaceId;
  }
  if (!Util.isUnset(request.grafanaWorkspaceName)) {
    query['GrafanaWorkspaceName'] = request.grafanaWorkspaceName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGrafanaWorkspace',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGrafanaWorkspace(request: UpdateGrafanaWorkspaceRequest): UpdateGrafanaWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGrafanaWorkspaceWithOptions(request, runtime);
}

model UpdateGrafanaWorkspaceVersionRequest {
  aliyunLang?: string(name='AliyunLang', example='zh'),
  grafanaVersion?: string(name='GrafanaVersion', example='10.0.x'),
  grafanaWorkspaceId?: string(name='GrafanaWorkspaceId', example='grafana-cn-4xl3g******'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model UpdateGrafanaWorkspaceVersionResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='2A0CEDF1-06FE-44AC-8E21-21A5BE65****'),
  success?: boolean(name='Success', example='true'),
  traceId?: string(name='TraceId', example='eac0a8048716731735000007137d000b'),
}

model UpdateGrafanaWorkspaceVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGrafanaWorkspaceVersionResponseBody(name='body'),
}

async function updateGrafanaWorkspaceVersionWithOptions(request: UpdateGrafanaWorkspaceVersionRequest, runtime: Util.RuntimeOptions): UpdateGrafanaWorkspaceVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunLang)) {
    query['AliyunLang'] = request.aliyunLang;
  }
  if (!Util.isUnset(request.grafanaVersion)) {
    query['GrafanaVersion'] = request.grafanaVersion;
  }
  if (!Util.isUnset(request.grafanaWorkspaceId)) {
    query['GrafanaWorkspaceId'] = request.grafanaWorkspaceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGrafanaWorkspaceVersion',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGrafanaWorkspaceVersion(request: UpdateGrafanaWorkspaceVersionRequest): UpdateGrafanaWorkspaceVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGrafanaWorkspaceVersionWithOptions(request, runtime);
}

model UpdateIntegrationRequest {
  autoRecover?: boolean(name='AutoRecover', description='Specifies whether to automatically clear alert events. Valid values:

*   true (default)
*   false', example='true'),
  description?: string(name='Description', description='The description of the alert integration.', example='Test'),
  duplicateKey?: string(name='DuplicateKey', description='The fields whose values are deduplicated.', example='LABEL.dimensions::LABEL.ruleId'),
  extendedFieldRedefineRules?: string(name='ExtendedFieldRedefineRules', description='The extended mapped fields are mapped to the fields of ARMS alerts. For more information, see the description of the ExtendedFieldRedefineRules parameter.', example='[
    {
        "redefineType":"EXTRACT",
        "matchExpression":null,
        "fieldName":"dimensions",
        "expression":null,
        "mappingRuleList":[

        ],
        "name":"dimensions",
        "integrationId":1234,
        "jsonPath":"$.dimensions",
        "id":10013,
        "fieldType":"LABEL"
    },
    {
        "redefineType":"EXTRACT",
        "matchExpression":null,
        "fieldName":"expression",
        "expression":null,
        "mappingRuleList":[

        ],
        "name":"expression",
        "integrationId":1234,
        "jsonPath":"$.expression",
        "id":10014,
        "fieldType":"LABEL"
    }
]'),
  fieldRedefineRules?: string(name='FieldRedefineRules', description='The predefined mapped fields are mapped to the fields of ARMS alerts. The predefined mapped fields were generated when the alert integration was created. For more information, see the description of the FieldRedefineRules parameter.', example='\\[ { "redefineType":"EXTRACT", "matchExpression":null, "fieldName":"alertname", "expression":null, "mappingRuleList":\\[ ], "name":"Alert name", "integrationId":1234, "jsonPath":"$.alertName", "id":10001, "fieldType":"LABEL" }, { "redefineType":"MAP", "matchExpression":null, "fieldName":"severity", "expression":null, "mappingRuleList":\\[ { "mappingValue":"critical", "mappingName":"P1", "mappingType":"MAP", "originValue":"CRITICAL" }, { "mappingValue":"error", "mappingName":"P2", "mappingType":"MAP", "originValue":"WARN" }, { "mappingValue":"warning", "mappingName":"P3", "mappingType":"MAP", "originValue":"INFO" } ], "name":"Alert level", "integrationId":1234, "jsonPath":"$.triggerLevel", "id":10002, "fieldType":"LABEL" }, { "redefineType":"EXTRACT", "matchExpression":null, "fieldName":"message", "expression":"{{$labels.namespace}} / {{$labels.dimensions}} Alert content {{ $labels.alertname }}, Current value {{$value}}.", "mappingRuleList":\\[ ], "name":"Alert description", "integrationId":1234, "jsonPath":null, "id":10003, "fieldType":"ANNOTATION" }, { "redefineType":"EXTRACT", "matchExpression":null, "fieldName":"value", "expression":null, "mappingRuleList":\\[ ], "name":"Alert sample value", "integrationId":1234, "jsonPath":"$.curValue", "id":10004, "fieldType":"ANNOTATION" }, { "redefineType":"EXTRACT", "matchExpression":null, "fieldName":"source", "expression":null, "mappingRuleList":\\[ ], "name":"Source", "integrationId":1234, "jsonPath":null, "id":10007, "fieldType":"LABEL" }, { "redefineType":"ADD", "matchExpression":null, "fieldName":"generatorUrl", "expression":"https://cloudmonitor.console.aliyun.com/index.htm#/alarmInfo/name={{$labels.ruleId}}\\&searchValue=\\&searchType=name\\&searchProduct=/history/all/searchKey:{{$labels.ruleId}},startTime:{{sub $startsAt 300000}},endTime:{{$endsAt}}", "mappingRuleList":\\[ ], "name":"Event URL", "integrationId":1234, "jsonPath":"https://cloudmonitor.console.aliyun.com/index.htm#/alarmInfo/name={{$labels.ruleId}}\\&searchValue=\\&searchType=name\\&searchProduct=/history/all/searchKey:{{$labels.ruleId}},startTime:{{sub $startsAt 300000}},endTime:{{$endsAt}}", "id":10012, "fieldType":"GENERATE_URL" } ]'),
  initiativeRecoverField?: string(name='InitiativeRecoverField', description='The field for clearing alert events. The system queries alert events based on the field of alert clearing events and clears the alert events.

> Only the Log Service alert integration supports the parameter.', example='$.status'),
  initiativeRecoverValue?: string(name='InitiativeRecoverValue', description='The value of the field for clearing alert events. The system queries alert events based on the field of alert clearing events and clears the alert events.

> Only the Log Service alert integration supports the parameter.', example='ok'),
  integrationId?: long(name='IntegrationId', description='The ID of the alert integration.', example='1234'),
  integrationName?: string(name='IntegrationName', description='The name of the alert integration.', example='CloudMonitor integration'),
  integrationProductType?: string(name='IntegrationProductType', description='The service of the alert integration. Valid values:

*   CLOUD_MONITOR: CloudMonitor
*   LOG_SERVICE: Log Service', example='CLOUD_MONITOR'),
  liveness?: string(name='Liveness', description='The activity of the alert integration', example='ready'),
  recoverTime?: long(name='RecoverTime', description='The period of time within which alert events are automatically cleared. Unit: seconds. Default value: 300.', example='300'),
  stat?: string(name='Stat', description='The total number of alert events and the number of abnormal alert events in the last hour.', example='[0,0]'),
  state?: boolean(name='State', description='Indicates whether the alert integration was enabled. Valid values:

*   true
*   false', example='true'),
}

model UpdateIntegrationResponseBody = {
  integration?: {
    apiEndpoint?: string(name='ApiEndpoint', description='The endpoint of the alert integration.', example='https://alerts.aliyuncs.com/api/v1/integrations/custom/ymQBN******'),
    autoRecover?: boolean(name='AutoRecover', description='Indicates whether alert events are automatically cleared. Valid values:

*   true (default)
*   false', example='true'),
    description?: string(name='Description', description='The description of the alert integration.', example='Test'),
    duplicateKey?: string(name='DuplicateKey', description='The fields whose values are deduplicated.', example='LABEL.dimensions::LABEL.ruleId'),
    extendedFieldRedefineRules?: [  map[string]any ](name='ExtendedFieldRedefineRules', description='The extended mapped fields of the alert source.'),
    fieldRedefineRules?: [  map[string]any ](name='FieldRedefineRules', description='The predefined mapped fields of the alert source.'),
    initiativeRecoverField?: string(name='InitiativeRecoverField', description='The field for clearing alert events. The system queries alert events based on the field of alert clearing events and clears the alert events.

> Only Log Service supports this parameter.', example='$.status'),
    initiativeRecoverValue?: string(name='InitiativeRecoverValue', description='The value of the field for clearing alert events. The system queries alert events based on the field of alert clearing events and clears the alert events.

> Only Log Service supports this parameter.', example='ok'),
    integrationId?: long(name='IntegrationId', description='The ID of the alert integration.', example='1234'),
    integrationName?: string(name='IntegrationName', description='The name of the alert integration.', example='CloudMonitor integration'),
    integrationProductType?: string(name='IntegrationProductType', description='The service of the alert integration. Valid values:

*   CLOUD_MONITOR: CloudMonitor
*   LOG_SERVICE: Log Service', example='CLOUD_MONITOR'),
    liveness?: string(name='Liveness', description='The activity of the alert integration', example='ready'),
    recoverTime?: long(name='RecoverTime', description='The time when alert events are automatically cleared. Unit: seconds. Default value: 300.', example='300'),
    shortToken?: string(name='ShortToken', description='The authentication token of the alert integration.', example='ymQBN******'),
    stat?: [ long ](name='Stat', description='The total number of alert events and the number of abnormal alert events in the last hour.'),
    state?: boolean(name='State', description='Indicates whether the alert integration is enabled. Valid values:

*   true
*   false', example='true'),
  }(name='Integration', description='The Information about the alert integration.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model UpdateIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIntegrationResponseBody(name='body'),
}

async function updateIntegrationWithOptions(request: UpdateIntegrationRequest, runtime: Util.RuntimeOptions): UpdateIntegrationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoRecover)) {
    body['AutoRecover'] = request.autoRecover;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.duplicateKey)) {
    body['DuplicateKey'] = request.duplicateKey;
  }
  if (!Util.isUnset(request.extendedFieldRedefineRules)) {
    body['ExtendedFieldRedefineRules'] = request.extendedFieldRedefineRules;
  }
  if (!Util.isUnset(request.fieldRedefineRules)) {
    body['FieldRedefineRules'] = request.fieldRedefineRules;
  }
  if (!Util.isUnset(request.initiativeRecoverField)) {
    body['InitiativeRecoverField'] = request.initiativeRecoverField;
  }
  if (!Util.isUnset(request.initiativeRecoverValue)) {
    body['InitiativeRecoverValue'] = request.initiativeRecoverValue;
  }
  if (!Util.isUnset(request.integrationId)) {
    body['IntegrationId'] = request.integrationId;
  }
  if (!Util.isUnset(request.integrationName)) {
    body['IntegrationName'] = request.integrationName;
  }
  if (!Util.isUnset(request.integrationProductType)) {
    body['IntegrationProductType'] = request.integrationProductType;
  }
  if (!Util.isUnset(request.liveness)) {
    body['Liveness'] = request.liveness;
  }
  if (!Util.isUnset(request.recoverTime)) {
    body['RecoverTime'] = request.recoverTime;
  }
  if (!Util.isUnset(request.stat)) {
    body['Stat'] = request.stat;
  }
  if (!Util.isUnset(request.state)) {
    body['State'] = request.state;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateIntegration',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateIntegration(request: UpdateIntegrationRequest): UpdateIntegrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateIntegrationWithOptions(request, runtime);
}

model UpdateMetricDropRequest {
  clusterId?: string(name='ClusterId', example='c3ca36c8e2693403d85c0d9f8bb1d7b6c'),
  metricDrop?: string(name='MetricDrop', example='apiserver_request_duration_seconds_bucket
etcd_request_duration_seconds_bucket
apiserver_request_total
container_tasks_state'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
}

model UpdateMetricDropResponseBody = {
  code?: long(name='Code', example='200'),
  data?: string(name='Data', example='true'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='CCCA4B88-BD7B-5A38-89AF-C09293BD4187'),
  success?: boolean(name='Success', example='true'),
}

model UpdateMetricDropResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMetricDropResponseBody(name='body'),
}

async function updateMetricDropWithOptions(request: UpdateMetricDropRequest, runtime: Util.RuntimeOptions): UpdateMetricDropResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.metricDrop)) {
    query['MetricDrop'] = request.metricDrop;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMetricDrop',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMetricDrop(request: UpdateMetricDropRequest): UpdateMetricDropResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMetricDropWithOptions(request, runtime);
}

model UpdatePrometheusAlertRuleRequest {
  alertId?: long(name='AlertId', example='3888704'),
  alertName?: string(name='AlertName', example='Prometheus_Alert'),
  annotations?: string(name='Annotations', example='[{"Value": "xxx","Name": "description"}]'),
  clusterId?: string(name='ClusterId', example='c0bad479465464e1d8c1e641b0afb****'),
  dispatchRuleId?: long(name='DispatchRuleId', example='10282'),
  duration?: string(name='Duration', example='1'),
  expression?: string(name='Expression', example='100 * (sum(rate(container_cpu_usage_seconds_total[1m])) by (pod_name) / sum(label_replace(kube_pod_container_resource_limits_cpu_cores, \\"pod_name\\", \\"$1\\", \\"pod\\", \\"(.*)\\")) by (pod_name))>75'),
  labels?: string(name='Labels', example='[{"Value": "critical","Name": "severity"}]'),
  message?: string(name='Message'),
  notifyType?: string(name='NotifyType', example='ALERT_MANAGER'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
  type?: string(name='Type'),
}

model UpdatePrometheusAlertRuleResponseBody = {
  code?: long(name='Code'),
  message?: string(name='Message'),
  prometheusAlertRule?: {
    alertId?: long(name='AlertId', example='3888704'),
    alertName?: string(name='AlertName', example='Prometheus_Alert'),
    annotations?: [ 
      {
        name?: string(name='Name', example='message'),
        value?: string(name='Value'),
      }
    ](name='Annotations'),
    clusterId?: string(name='ClusterId', example='c0bad479465464e1d8c1e641b0afb****'),
    dispatchRuleId?: long(name='DispatchRuleId', example='10282'),
    duration?: string(name='Duration', example='1'),
    expression?: string(name='Expression', example='100 * (sum(rate(container_cpu_usage_seconds_total[1m])) by (pod_name) / sum(label_replace(kube_pod_container_resource_limits_cpu_cores, \\"pod_name\\", \\"$1\\", \\"pod\\", \\"(.*)\\")) by (pod_name))>75'),
    labels?: [ 
      {
        name?: string(name='Name', example='severity'),
        value?: string(name='Value', example='critical'),
      }
    ](name='Labels'),
    message?: string(name='Message'),
    notifyType?: string(name='NotifyType', example='ALERT_MANAGER'),
    status?: int32(name='Status', example='1'),
    type?: string(name='Type'),
  }(name='PrometheusAlertRule'),
  requestId?: string(name='RequestId', example='9FEA6D00-317F-45E3-9004-7FB8B0B7****'),
  success?: boolean(name='Success'),
}

model UpdatePrometheusAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePrometheusAlertRuleResponseBody(name='body'),
}

async function updatePrometheusAlertRuleWithOptions(request: UpdatePrometheusAlertRuleRequest, runtime: Util.RuntimeOptions): UpdatePrometheusAlertRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alertId)) {
    query['AlertId'] = request.alertId;
  }
  if (!Util.isUnset(request.alertName)) {
    query['AlertName'] = request.alertName;
  }
  if (!Util.isUnset(request.annotations)) {
    query['Annotations'] = request.annotations;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.dispatchRuleId)) {
    query['DispatchRuleId'] = request.dispatchRuleId;
  }
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.expression)) {
    query['Expression'] = request.expression;
  }
  if (!Util.isUnset(request.labels)) {
    query['Labels'] = request.labels;
  }
  if (!Util.isUnset(request.message)) {
    query['Message'] = request.message;
  }
  if (!Util.isUnset(request.notifyType)) {
    query['NotifyType'] = request.notifyType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePrometheusAlertRule',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updatePrometheusAlertRule(request: UpdatePrometheusAlertRuleRequest): UpdatePrometheusAlertRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePrometheusAlertRuleWithOptions(request, runtime);
}

model UpdatePrometheusGlobalViewRequest {
  allSubClustersSuccess?: boolean(name='AllSubClustersSuccess', description='To edit a GlobalView aggregated instance, do you require all passed child instances to be verified successfully before creating a GlobalView instance (optional, default to false):
- true
- false', example='true'),
  clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='global****'),
  groupName?: string(name='GroupName', description='The name of the global aggregation instance.', example='zyGlobalView'),
  mostRegionId?: string(name='MostRegionId', description='The region ID of the global aggregation instance.', example='cn-hangzhou'),
  regionId?: string(name='RegionId', description='The ID of the region in which the Prometheus instance resides.', example='cn-shenzhen'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Prometheus instance belongs.', example='rg-acfmxyexli2****'),
  subClustersJson?: string(name='SubClustersJson', description='The data sources of the Prometheus instance for GlobalView.', example='[ { "headers":{ }, "regionId":"cn-hangzhou", "sourceType":"AlibabaPrometheus", "extras":{ }, "clusterId":"c39a1048921e04f***********", "sourceName":"arms-luyao-test", "dataSource":"", "userId":"1672753***********" }, { "headers":{ }, "regionId":"cn-beijing", "sourceType":"AlibabaPrometheus", "extras":{ }, "clusterId":"c6b6485496d5b40***********", "sourceName":"agent-321-test", "dataSource":"", "userId":"1672753***********" }, { "headers":{ }, "regionId":"cn-zhangjiakou", "sourceType":"AlibabaPrometheus", "extras":{ }, "clusterId":"c261a4f3200c446***********", "sourceName":"zaifeng-cardinality-01", "dataSource":"", "userId":"1672753***********" } ]'),
}

model UpdatePrometheusGlobalViewResponseBody = {
  code?: int32(name='Code', description='The response code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    failedInstances?: [ 
      {
        clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cdb65ed2d527345*********'),
        sourceName?: string(name='SourceName', description='The name of the data source.', example='sourcename-test'),
        sourceType?: string(name='SourceType', description='The type of the data source. AlibabaPrometheus MetricStore CustomPrometheus', example='AlibabaPrometheus'),
        userId?: string(name='UserId', description='The user ID.', example='23784673825*******'),
      }
    ](name='FailedInstances', description='The data sources that failed to be updated.'),
    success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The error message that is returned if the request failed.', example='message'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='E9C9DA3D-10FE-472E-9EEF-2D0A3E41****'),
}

model UpdatePrometheusGlobalViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePrometheusGlobalViewResponseBody(name='body'),
}

async function updatePrometheusGlobalViewWithOptions(request: UpdatePrometheusGlobalViewRequest, runtime: Util.RuntimeOptions): UpdatePrometheusGlobalViewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allSubClustersSuccess)) {
    query['AllSubClustersSuccess'] = request.allSubClustersSuccess;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.mostRegionId)) {
    query['MostRegionId'] = request.mostRegionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.subClustersJson)) {
    query['SubClustersJson'] = request.subClustersJson;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePrometheusGlobalView',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updatePrometheusGlobalView(request: UpdatePrometheusGlobalViewRequest): UpdatePrometheusGlobalViewResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePrometheusGlobalViewWithOptions(request, runtime);
}

model UpdatePrometheusIntegrationRequest {
  clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance. Only a Prometheus instance for Container Service or a Prometheus instance for ECS is supported.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  instanceId?: long(name='InstanceId', description='The exporter ID.', example='2893'),
  integrationType?: string(name='IntegrationType', description='The type of the integration.', example='kafka, mysql, redis, snmp, emr, nubela, and tidb'),
  param?: string(name='Param', description='The configurations of the exporter. The value is a JSON string.', example='{
      "port": "5554",
      "name": "kafka-test12",
      "kafka_instance": "kafka-test",
      "__label_value": "kafka-test",
      "scrape_interval": 33,
      "metrics_path": "/metrics",
      "__label_key": "kafka-test"
}'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
}

model UpdatePrometheusIntegrationResponseBody = {
  code?: int32(name='Code', description='The status code or error code.', example='200'),
  data?: {
    instanceId?: long(name='InstanceId', description='The exporter ID.', example='2866'),
    instanceName?: string(name='InstanceName', description='The exporter name.', example='inet'),
  }(name='Data', description='The struct returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful'),
  requestId?: string(name='RequestId', description='Id of the request', example='2DB771C3-D1BB-5363-8A5F-ADB2AF2948DB'),
}

model UpdatePrometheusIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePrometheusIntegrationResponseBody(name='body'),
}

async function updatePrometheusIntegrationWithOptions(request: UpdatePrometheusIntegrationRequest, runtime: Util.RuntimeOptions): UpdatePrometheusIntegrationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.integrationType)) {
    query['IntegrationType'] = request.integrationType;
  }
  if (!Util.isUnset(request.param)) {
    query['Param'] = request.param;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePrometheusIntegration',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updatePrometheusIntegration(request: UpdatePrometheusIntegrationRequest): UpdatePrometheusIntegrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePrometheusIntegrationWithOptions(request, runtime);
}

model UpdatePrometheusMonitoringRequest {
  clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  configYaml?: string(name='ConfigYaml', description='The monitoring configuration. Specify a YAML string.'),
  monitoringName?: string(name='MonitoringName', description='The name of the monitoring configuration.', example='podMonitor1'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  type?: string(name='Type', description='The type of the monitoring configuration. 
Valid values for a Prometheus instance for Container Service: serviceMonitor, podMonitor, customJob, and probe. 
Valid values for a Prometheus instance for ECS: customJob and probe.', example='podMonitor'),
}

model UpdatePrometheusMonitoringResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The result of the operation.', example='success'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='626037F5-FDEB-45B0-804C-B3C92797****'),
}

model UpdatePrometheusMonitoringResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePrometheusMonitoringResponseBody(name='body'),
}

async function updatePrometheusMonitoringWithOptions(request: UpdatePrometheusMonitoringRequest, runtime: Util.RuntimeOptions): UpdatePrometheusMonitoringResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.monitoringName)) {
    query['MonitoringName'] = request.monitoringName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.configYaml)) {
    body['ConfigYaml'] = request.configYaml;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePrometheusMonitoring',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updatePrometheusMonitoring(request: UpdatePrometheusMonitoringRequest): UpdatePrometheusMonitoringResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePrometheusMonitoringWithOptions(request, runtime);
}

model UpdatePrometheusMonitoringStatusRequest {
  clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  monitoringName?: string(name='MonitoringName', description='The name of the monitoring configuration.', example='customJob1'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  status?: string(name='Status', description='The status of the monitoring configuration. Valid values: run and stop.', example='run'),
  type?: string(name='Type', description='The type of the monitoring configuration. 
Valid values for a Prometheus instance for Container Service: serviceMonitor, podMonitor, and customJob. 
Valid value for a Prometheus instance for ECS: customJob. 
The status of probe cannot be modified.', example='customJob'),
}

model UpdatePrometheusMonitoringStatusResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The result of the operation.', example='success'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='21E85B16-75A6-429A-9F65-8AAC9A54****'),
}

model UpdatePrometheusMonitoringStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePrometheusMonitoringStatusResponseBody(name='body'),
}

async function updatePrometheusMonitoringStatusWithOptions(request: UpdatePrometheusMonitoringStatusRequest, runtime: Util.RuntimeOptions): UpdatePrometheusMonitoringStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.monitoringName)) {
    query['MonitoringName'] = request.monitoringName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePrometheusMonitoringStatus',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updatePrometheusMonitoringStatus(request: UpdatePrometheusMonitoringStatusRequest): UpdatePrometheusMonitoringStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePrometheusMonitoringStatusWithOptions(request, runtime);
}

model UpdatePrometheusRemoteWriteRequest {
  clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  remoteWriteName?: string(name='RemoteWriteName', description='The name of the remote write configuration item.', example='rw1'),
  remoteWriteYaml?: string(name='RemoteWriteYaml', description='The remote write configuration. Specify the value in the YAML format.', example='remote_write:
  - name: rw1
    url: "http://cn-hangzhou-intranet.arms.aliyuncs.com/prometheus/uid/xx/cn-hangzhou/api/v3/write"
    basic_auth:
      username: xxx
      password: xxx
    write_relabel_configs:
      - source_labels: [ instance_id ]
        separator: ;
        regex: si
        replacement: $1
        action: keep'),
}

model UpdatePrometheusRemoteWriteResponseBody = {
  code?: int32(name='Code', description='The status code. A value of 200 indicates that the request is successful.', example='200'),
  data?: string(name='Data', description='The name of the remote write configuration that was modified, or the exception information.', example='rw1'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='2A0CEDF1-06FE-44AC-8E21-21A5BE65****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model UpdatePrometheusRemoteWriteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePrometheusRemoteWriteResponseBody(name='body'),
}

async function updatePrometheusRemoteWriteWithOptions(request: UpdatePrometheusRemoteWriteRequest, runtime: Util.RuntimeOptions): UpdatePrometheusRemoteWriteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.remoteWriteName)) {
    query['RemoteWriteName'] = request.remoteWriteName;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.remoteWriteYaml)) {
    body['RemoteWriteYaml'] = request.remoteWriteYaml;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePrometheusRemoteWrite',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updatePrometheusRemoteWrite(request: UpdatePrometheusRemoteWriteRequest): UpdatePrometheusRemoteWriteResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePrometheusRemoteWriteWithOptions(request, runtime);
}

model UpdateTimingSyntheticTaskRequest {
  availableAssertions?: [ 
    {
      expect?: string(name='Expect', description='The expected value.', example='200'),
      operator?: string(name='Operator', description='The condition. gt: greater than. gte: greater than or equal to. lt: less than. lte: less than or equal to. eq: equal to. neq: not equal to. ctn: contain. nctn: does not contain. exist: exist. n_exist: does not exist. belong: belong to. n_belong: does not belong to. reg_match: regular expression.', example='eq'),
      target?: string(name='Target', description='The check target. If you set the type parameter to HttpResCode, HttpResBody, or HttpResponseTime, you do not need to set the target parameter. If you set the type parameter to HttpResHead, you must specify the key in the header. If you set the type parameter to HttpResBodyJson, use jsonPath.', example='HttpResponseTime'),
      type?: string(name='Type', description='The assertion type. Valid values: HttpResCode, HttpResHead, HttpResBody, HttpResBodyJson, HttpResponseTime, IcmpPackLoss (packet loss rate), IcmpPackMaxLatency (maximum packet latency), IcmpPackAvgLatency (average packet latency), TraceRouteHops (number of hops), DnsARecord (A record), DnsCName (CNAME), websiteTTFB (time to first packet), websiteTTLB (time to last packet), websiteFST (first paint time), websiteFFST (first meaningful paint), websiteOnload (full loaded time). For more information, see the following description.', example='TraceRouteHops'),
    }
  ](name='AvailableAssertions', description='The list of assertions.'),
  commonSetting?: {
    customHost?: {
      hosts?: [ 
        {
          domain?: string(name='Domain', description='The domain name.', example='www.aliyun.com'),
          ipType?: int32(name='IpType', description='The IP version. Valid values:

*   0: A version is automatically selected.
*   1: IPv4
*   2: IPv6', example='0'),
          ips?: [ string ](name='Ips', description='The list of IP addresses.'),
        }
      ](name='Hosts', description='The list of hosts.'),
      selectType?: int32(name='SelectType', description='The selection mode. 0: Random. 1: Polling.', example='0'),
    }(name='CustomHost', description='The custom host.'),
    customVPCSetting?: {
      regionId?: string(name='RegionId'),
      secureGroupId?: string(name='SecureGroupId'),
      vSwitchId?: string(name='VSwitchId'),
      vpcId?: string(name='VpcId'),
    }(name='CustomVPCSetting'),
    ipType?: int32(name='IpType', description='The IP version. Valid values:

*   0: A version is automatically selected.
*   1: IPv4
*   2: IPv6', example='0'),
    isOpenTrace?: boolean(name='IsOpenTrace', description='是否开启链路追踪。', example='true'),
    monitorSamples?: int32(name='MonitorSamples', description='Specifies whether to evenly distribute monitoring samples. Valid values:

*   0: No
*   1: Yes', example='0'),
    traceClientType?: int32(name='TraceClientType', description='链路追踪客户端类型：

- 0：ARMS Agent
- 1：OpenTelemetry
- 2：Jaeger', example='1'),
    xtraceRegion?: string(name='XtraceRegion', description='链路数据上报region。', example='cn-hangzhou'),
  }(name='CommonSetting', description='The general settings.'),
  customPeriod?: {
    endHour?: int32(name='EndHour', description='The hour at which the test ends. Valid values: 0 to 24.', example='22'),
    startHour?: int32(name='StartHour', description='The hour at which the test starts. Valid values: 0 to 24.', example='14'),
  }(name='CustomPeriod', description='The custom cycle.'),
  frequency?: string(name='Frequency', description='The detection frequency. Valid values: 1m, 5m, 10m, 15m, 20m, 30m, 1h, 2h, 3h, 4h, 6h, 8h, 12h, and 24h.', example='5m'),
  monitorConf?: {
    apiHTTP?: {
      checkCert?: boolean(name='CheckCert'),
      connectTimeout?: long(name='ConnectTimeout', description='The connection timeout period. Unit: milliseconds. Default value: 5000. Minimum value: 1000. Maximum value: 300000.', example='5000'),
      method?: string(name='Method', description='The request method.

*   POST
*   GET', example='POST'),
      requestBody?: {
        content?: string(name='Content', description='The content of the request body. Format: JSON string. The parameter is required if the type parameter is set to text/plain, application/json, application/xml, or text/html. Format: JSON string.', example='{
      "key1": "value1",
      "key2": "value2"
}'),
        type?: string(name='Type', description='The type of the request body. Valid values: text/plain, application/json, application/x-www-form-urlencoded, multipart/form-data, application/xml, and text/html.', example='application/json'),
      }(name='RequestBody', description='The HTTP request body.'),
      requestHeaders?: map[string]string(name='RequestHeaders', description='The custom header field.'),
      targetUrl?: string(name='TargetUrl', description='The URL or request path for synthetic monitoring.', example='https://********'),
      timeout?: long(name='Timeout', description='The timeout period. Unit: milliseconds. Default value: 10000. Minimum value: 1000. Maximum value: 300000.', example='5000'),
    }(name='ApiHTTP', description='The HTTP(S) synthetic test parameters.'),
    fileDownload?: {
      connectionTimeout?: long(name='ConnectionTimeout', description='The connection timeout period. Unit: milliseconds. Minimum value: 1000. Maximum value: 120000. Default value: 5000.', example='5000'),
      customHeaderContent?: map[string]string(name='CustomHeaderContent', description='The content of the custom request header.'),
      downloadKernel?: int32(name='DownloadKernel', description='The kernel type.

*   1: curl
*   0: WinInet', example='0'),
      ignoreCertificateAuthError?: int32(name='IgnoreCertificateAuthError', description='Specifies whether to ignore CA certificate authentication errors. 0: No. 1: Yes. Default value: 1.', example='0'),
      ignoreCertificateCanceledError?: int32(name='IgnoreCertificateCanceledError', description='Specifies whether to ignore certificate revocation errors. 0: No. 1: Yes. Default value: 1.', example='0'),
      ignoreCertificateOutOfDateError?: int32(name='IgnoreCertificateOutOfDateError', description='Specifies whether to ignore certificate invalidity. 0: No. 1: Yes. Default value: 1.', example='0'),
      ignoreCertificateStatusError?: int32(name='IgnoreCertificateStatusError', description='Specifies whether to ignore certificate status errors. 0: No. 1: Yes. Default value: 1.', example='0'),
      ignoreCertificateUntrustworthyError?: int32(name='IgnoreCertificateUntrustworthyError', description='Specifies whether to ignore certificate incredibility. 0: No. 1: Yes. Default value: 1.', example='0'),
      ignoreCertificateUsingError?: int32(name='IgnoreCertificateUsingError', description='Specifies whether to ignore certificate usage errors. 0: No. 1: Yes. Default value: 1.', example='0'),
      ignoreInvalidHostError?: int32(name='IgnoreInvalidHostError', description='Specifies whether to ignore host invalidity. 0: No. 1: Yes. Default value: 1.', example='0'),
      monitorTimeout?: long(name='MonitorTimeout', description='The monitoring timeout period. Unit: milliseconds. Minimum value: 1000. Maximum value: 120000. Default value: 60000.', example='60000'),
      quickProtocol?: int32(name='QuickProtocol', description='The QUIC protocol type.

*   1: http1
*   2: http2
*   3: http3', example='1'),
      redirection?: int32(name='Redirection', description='Specifies whether to support redirection. 0: No. 1: Yes. Default value: 1.', example='0'),
      targetUrl?: string(name='TargetUrl', description='The file download URL.', example='https://img.alicdn.com/tfs/TB13DzOjXP7gK0jSZFjXXc5aXXa-212-48.png'),
      transmissionSize?: long(name='TransmissionSize', description='The maximum file size of a single transfer. Unit: KB. Minimum value: 1. Maximum value: 20480. Valid values: 2048.', example='2048'),
      validateKeywords?: string(name='ValidateKeywords', description='验证关键词。', example='aliyun'),
      verifyWay?: int32(name='VerifyWay', description='验证方式。

- 0：不验证 
- 1：验证字符串 
- 2：MD5验证', example='0'),
      whiteList?: string(name='WhiteList', description='DNS劫持白名单。匹配规则支持IP、IP通配符、子网掩码和CNAME，可以填写多个匹配规则，多个匹配规则以竖线（|）隔开。例如：www.aliyun.com:203.0.3.55|203.3.44.67，表示www.aliyun.com域名下除203.0.3.55和203.3.44.67之外的其他IP都是被劫持的。', example='www.aliyun.com:203.0.3.55|203.3.44.67'),
    }(name='FileDownload', description='The file download parameters.'),
    netDNS?: {
      dig?: int32(name='Dig', description='Specifies whether to use dig to display the data. 0: No. 1: Yes.', example='0'),
      dnsServerIpType?: int32(name='DnsServerIpType', description='The IP version of the DNS server. 0: IPv4. 1: IPv6. 2: A version is automatically selected. Default value: 0.', example='0'),
      nsServer?: string(name='NsServer', description='The IP address of the DNS server. Default value: 114.114.114.114.', example='114.114.114.114'),
      queryMethod?: int32(name='QueryMethod', description='The DNS query. 0: recursive, 1: iterative. Default value: 0.', example='0'),
      targetUrl?: string(name='TargetUrl', description='The destination domain name.', example='www.aliyun.com'),
      timeout?: long(name='Timeout', description='The timeout period for the DNS synthetic test. Unit: milliseconds. The minimum value is 1000 and the maximum value is 45000. Default value: 5000.', example='1000'),
    }(name='NetDNS', description='The DNS synthetic test parameters.'),
    netICMP?: {
      interval?: long(name='Interval', description='The interval at which ICMP packets are sent. Unit: milliseconds. Minimum value: 200. Maximum value: 10000.', example='300'),
      packageNum?: int32(name='PackageNum', description='The number of ICMP packets that are sent. Minimum value: 1. Maximum value: 50. Default value: 4.', example='4'),
      packageSize?: int32(name='PackageSize', description='The size of each ICMP packet. Unit: bytes. Valid values: 32, 64, 128, 256, 512, 1024.', example='32'),
      splitPackage?: boolean(name='SplitPackage', description='Specifies whether to split ICMP packets. Default value: true.', example='true'),
      targetUrl?: string(name='TargetUrl', description='The destination host IP address or domain name. Port numbers, protocol headers, or request paths are not supported.', example='www.aliyun.com'),
      timeout?: long(name='Timeout', description='The timeout period for the TCP synthetic test. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 20000.', example='5000'),
      tracertEnable?: boolean(name='TracertEnable', description='Specifies whether to enable the tracert command. Default value: true.', example='true'),
      tracertNumMax?: int32(name='TracertNumMax', description='The maximum number of hops for tracert. Minimum value: 1. Maximum value: 128. Default value: 64.', example='20'),
      tracertTimeout?: long(name='TracertTimeout', description='The timeout period of tracert. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 60000.', example='60000'),
    }(name='NetICMP', description='The ICMP synthetic test parameters.'),
    netTCP?: {
      connectTimes?: int32(name='ConnectTimes', description='The number of TCP connections that are established in a test. Minimum value: 1. Maximum value: 16. Default value: 4.', example='4'),
      interval?: long(name='Interval', description='The interval at which TCP connections are established. Unit: milliseconds. Minimum value: 200. Maximum value: 10000. Default value: 200.', example='300'),
      targetUrl?: string(name='TargetUrl', description='The destination host IP address.', example='127.0.0.1:8888'),
      timeout?: long(name='Timeout', description='The timeout period for the TCP synthetic test. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 20000.', example='1000'),
      tracertEnable?: boolean(name='TracertEnable', description='Specifies whether to enable the tracert command. Default value: true.', example='true'),
      tracertNumMax?: int32(name='TracertNumMax', description='The maximum number of hops for tracert. Minimum value: 1. Maximum value: 128. Default value: 20.', example='20'),
      tracertTimeout?: long(name='TracertTimeout', description='The timeout period of tracert. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 60000.', example='1000'),
    }(name='NetTCP', description='The TCP synthetic tests parameters. This parameter is required if the TaskType parameter is set to 2.'),
    stream?: {
      customHeaderContent?: map[string]string(name='CustomHeaderContent', description='自定义header，JSON Map格式。'),
      playerType?: int32(name='PlayerType', description='播放器，不传默认12。

- 12：VLC
- 2：FlashPlayer', example='2'),
      streamAddressType?: int32(name='StreamAddressType', description='资源地址类型：

- 1：资源地址。
- 0：页面地址。不传默认0。', example='1'),
      streamMonitorTimeout?: int32(name='StreamMonitorTimeout', description='监测时长，单位秒，最长支持60s，不传默认60。', example='30'),
      streamType?: int32(name='StreamType', description='音视频标志：0-视频，1-音频。', example='0'),
      targetUrl?: string(name='TargetUrl', description='流媒体地址。', example='http://www.aliyun.com/stream/test.mp4'),
      whiteList?: string(name='WhiteList', description='DNS劫持白名单。匹配规则支持IP、IP通配符、子网掩码和CNAME，可以填写多个匹配规则，多个匹配规则以竖线（|）隔开。例如：www.aliyun.com:203.0.3.55|203.3.44.67，表示www.aliyun.com域名下除203.0.3.55和203.3.44.67之外的其他IP都是被劫持的。', example='www.aliyun.com:203.0.3.55|203.3.44.67'),
    }(name='Stream', description='流媒体拨测配置。'),
    website?: {
      automaticScrolling?: int32(name='AutomaticScrolling', description='Specifies whether to automatically scroll up and down the screen to load a page. 0: No. 1: Yes. Default value: 0.', example='0'),
      customHeader?: int32(name='CustomHeader', description='Specifies whether to create a custom header. 0: No. 1: The first packet is modified. 2: All packets are modified. Default value: 0.', example='0'),
      customHeaderContent?: map[string]string(name='CustomHeaderContent', description='The custom header. Format: JSON map.'),
      DNSHijackWhitelist?: string(name='DNSHijackWhitelist', description='域名（例如www.aliyun.com）解析时，解析出的IP地址或者CNAME不在DNS劫持白名单内，用户就会访问失败或者返回一个非Aliyun的目标IP；若解析结果中的IP或者CNAME在DNS白名单内，则会被认定为没有发生DNS劫持。

填写格式：域名:匹配规则。匹配规则支持IP、IP通配符、子网掩码和CNAME，可以填写多个匹配规则，多个匹配规则以竖线（|）隔开。例如：www.aliyun.com:203.0.3.55|203.3.44.67，表示www.aliyun.com域名下除203.0.3.55和203.3.44.67之外的其他IP都是被劫持的。', example='www.aliyun.com:203.0.3.55|203.3.44.67'),
      disableCache?: int32(name='DisableCache', description='Specifies whether to disable the cache. 0: No. 1: Yes. Default value: 1.', example='0'),
      disableCompression?: int32(name='DisableCompression', description='Specifies whether to accept compressed files based on the HTTP Accept-Encoding request header. 0: No. 1: Yes. Default value: 0.', example='0'),
      elementBlacklist?: string(name='ElementBlacklist', description='在页面加载过程中如果出现元素黑名单中配置的元素，不会请求加载该元素 。', example='a.jpg'),
      filterInvalidIP?: int32(name='FilterInvalidIP', description='Specifies whether to filter invalid IP addresses.

*   1: No
*   0: Yes', example='0'),
      flowHijackJumpTimes?: int32(name='FlowHijackJumpTimes', description='识别元素：设置浏览页面元素总个数。', example='1'),
      flowHijackLogo?: string(name='FlowHijackLogo', description='劫持标识：设置匹配的关键信息。填写劫持判断关键字或关键元素，允许带星号（*）。', example='aliyun'),
      ignoreCertificateError?: int32(name='IgnoreCertificateError', description='Specifies whether to ignore SSL certificate errors during browsing. 0: No. 1: Yes. Default value: 1.', example='0'),
      monitorTimeout?: long(name='MonitorTimeout', description='The monitoring timeout period. Unit: milliseconds. Minimum value: 5000. Maximum value: 300000. Default value: 40000.', example='20000'),
      pageTamper?: string(name='PageTamper', description='监测页面出现了域名设置之外的元素都属于页面被篡改。常见的表现形式为弹出广告、浮动广告、跳转等。', example='www.aliyun.com:|/cc/bb/a.gif|/vv/bb/cc.jpg'),
      redirection?: int32(name='Redirection', description='Specifies whether to continue browsing after redirection. 0: No, 1:Yes. Default value: 1.', example='0'),
      slowElementThreshold?: long(name='SlowElementThreshold', description='The time threshold that is used to define a slow element. Unit: milliseconds. Default value: 5000. Minimum value: 1. Maximum value: 300000.', example='5000'),
      targetUrl?: string(name='TargetUrl', description='The destination URL.', example='https://********'),
      verifyStringBlacklist?: string(name='VerifyStringBlacklist', description='验证字符串即监测页面源代码中的某个任意字符串。若客户端返回的源码中包含任一黑名单中的字符串则报650验证字符串失败的错误。多个字符串以竖线（|）隔开。', example='error'),
      verifyStringWhitelist?: string(name='VerifyStringWhitelist', description='验证字符串即监测页面源代码中的某个任意字符串。客户端返回的源码必须包含所有白名单中的字符串，否则报650验证字符串失败的错误。多个字符串以竖线（|）隔开。', example='success'),
      waitCompletionTime?: long(name='WaitCompletionTime', description='The maximum waiting time. Unit: milliseconds. Default value: 5000. Minimum value: 5000. Maximum value: 300000.', example='5000'),
    }(name='Website', description='The website-speed measurement parameters.'),
  }(name='MonitorConf', description='The monitoring configurations.'),
  monitors?: [ 
    {
      cityCode?: string(name='CityCode', description='The city code.', example='100001'),
      clientType?: int32(name='ClientType', description='The client type of the monitoring point. Valid values: 1: data center. 2: Internet. 3: mobile device. 4: ECS instance.', example='4'),
      operatorCode?: string(name='OperatorCode', description='The carrier code.', example='1'),
    }
  ](name='Monitors', description='The list of monitoring points.'),
  name?: string(name='Name', description='The name of the task.', example='AlibabaCloud DNS Task'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxyexli2****'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='key'),
      value?: string(name='Value', description='The value of the tag.', example='value'),
    }
  ](name='Tags', description='The list of tags.'),
  taskId?: string(name='TaskId', description='The ID of the synthetic monitoring task.', example='5308a2691f59422c8c3b7aeccxxxxxxx'),
}

model UpdateTimingSyntheticTaskShrinkRequest {
  availableAssertionsShrink?: string(name='AvailableAssertions', description='The list of assertions.'),
  commonSettingShrink?: string(name='CommonSetting', description='The general settings.'),
  customPeriodShrink?: string(name='CustomPeriod', description='The custom cycle.'),
  frequency?: string(name='Frequency', description='The detection frequency. Valid values: 1m, 5m, 10m, 15m, 20m, 30m, 1h, 2h, 3h, 4h, 6h, 8h, 12h, and 24h.', example='5m'),
  monitorConfShrink?: string(name='MonitorConf', description='The monitoring configurations.'),
  monitorsShrink?: string(name='Monitors', description='The list of monitoring points.'),
  name?: string(name='Name', description='The name of the task.', example='AlibabaCloud DNS Task'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxyexli2****'),
  tagsShrink?: string(name='Tags', description='The list of tags.'),
  taskId?: string(name='TaskId', description='The ID of the synthetic monitoring task.', example='5308a2691f59422c8c3b7aeccxxxxxxx'),
}

model UpdateTimingSyntheticTaskResponseBody = {
  code?: long(name='Code', description='The status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: {
    taskId?: string(name='TaskId', description='The task ID.', example='1eeb351722c84e05b52c82fd0dc9953e'),
  }(name='Data', description='The struct returned.'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='F7781D4A-2818-41E7-B7BB-79D809E9****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model UpdateTimingSyntheticTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTimingSyntheticTaskResponseBody(name='body'),
}

async function updateTimingSyntheticTaskWithOptions(tmpReq: UpdateTimingSyntheticTaskRequest, runtime: Util.RuntimeOptions): UpdateTimingSyntheticTaskResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateTimingSyntheticTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.availableAssertions)) {
    request.availableAssertionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.availableAssertions, 'AvailableAssertions', 'json');
  }
  if (!Util.isUnset(tmpReq.commonSetting)) {
    request.commonSettingShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.commonSetting, 'CommonSetting', 'json');
  }
  if (!Util.isUnset(tmpReq.customPeriod)) {
    request.customPeriodShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.customPeriod, 'CustomPeriod', 'json');
  }
  if (!Util.isUnset(tmpReq.monitorConf)) {
    request.monitorConfShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.monitorConf, 'MonitorConf', 'json');
  }
  if (!Util.isUnset(tmpReq.monitors)) {
    request.monitorsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.monitors, 'Monitors', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.availableAssertionsShrink)) {
    query['AvailableAssertions'] = request.availableAssertionsShrink;
  }
  if (!Util.isUnset(request.commonSettingShrink)) {
    query['CommonSetting'] = request.commonSettingShrink;
  }
  if (!Util.isUnset(request.customPeriodShrink)) {
    query['CustomPeriod'] = request.customPeriodShrink;
  }
  if (!Util.isUnset(request.frequency)) {
    query['Frequency'] = request.frequency;
  }
  if (!Util.isUnset(request.monitorConfShrink)) {
    query['MonitorConf'] = request.monitorConfShrink;
  }
  if (!Util.isUnset(request.monitorsShrink)) {
    query['Monitors'] = request.monitorsShrink;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTimingSyntheticTask',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTimingSyntheticTask(request: UpdateTimingSyntheticTaskRequest): UpdateTimingSyntheticTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTimingSyntheticTaskWithOptions(request, runtime);
}

model UpdateWebhookRequest {
  body?: string(name='Body', description='The notification template that is sent when an alert is triggered. This parameter is required if the **Method** parameter is set to **Post**. You can use the $content placeholder to specify the notification content. The content cannot exceed 500 characters in length.', example='{ "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Alert time":"{{ .startTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }'),
  contactId?: long(name='ContactId', description='The ID of the webhook alert contact. You can call the **SearchAlertContact** operation to obtain the ID.', example='48716'),
  contactName?: string(name='ContactName', description='The name of the webhook alert contact.', example='Webhook alert'),
  httpHeaders?: string(name='HttpHeaders', description='The HTTP request headers.', example='[{"Content-Type":"application/json"}]'),
  httpParams?: string(name='HttpParams', description='The parameters in the HTTP request.', example='[{"name":"mike"}]'),
  method?: string(name='Method', description='The HTTP request method. Valid values:

*   `Get`
*   `Post`', example='Post'),
  recoverBody?: string(name='RecoverBody', description='The notification template that is sent when an alert is resolved. This parameter is required if the **Method** parameter is set to **Post**. You can use the $content placeholder to specify the notification content. The content cannot exceed 500 characters in length.', example='{ "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Recovery time":"{{ .endTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  url?: string(name='Url', description='The URL of the HTTP request method.', example='https://oapi.dingtalk.com/robot/send?access_token=e1a049121ddbfce1ca963d115ef88cc7219583c4fb79fe6e398fbfb688******'),
}

model UpdateWebhookResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='The result returned. Valid values:

*   `true`: The modification is successful.
*   `false`: The modification fails.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='16AF921B-8187-489F-9913-43C808B4****'),
}

model UpdateWebhookResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWebhookResponseBody(name='body'),
}

/**
  * This operation is no longer maintained. Call the CreateOrUpdateWebhookContact operation in the new alter management module to create or modify a webhook alert contact.
  *
  * @param request UpdateWebhookRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateWebhookResponse
 */
async function updateWebhookWithOptions(request: UpdateWebhookRequest, runtime: Util.RuntimeOptions): UpdateWebhookResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.body)) {
    query['Body'] = request.body;
  }
  if (!Util.isUnset(request.contactId)) {
    query['ContactId'] = request.contactId;
  }
  if (!Util.isUnset(request.contactName)) {
    query['ContactName'] = request.contactName;
  }
  if (!Util.isUnset(request.httpHeaders)) {
    query['HttpHeaders'] = request.httpHeaders;
  }
  if (!Util.isUnset(request.httpParams)) {
    query['HttpParams'] = request.httpParams;
  }
  if (!Util.isUnset(request.method)) {
    query['Method'] = request.method;
  }
  if (!Util.isUnset(request.recoverBody)) {
    query['RecoverBody'] = request.recoverBody;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateWebhook',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation is no longer maintained. Call the CreateOrUpdateWebhookContact operation in the new alter management module to create or modify a webhook alert contact.
  *
  * @param request UpdateWebhookRequest
  * @return UpdateWebhookResponse
 */
async function updateWebhook(request: UpdateWebhookRequest): UpdateWebhookResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWebhookWithOptions(request, runtime);
}

model UpgradeAddonReleaseRequest {
  addonVersion?: string(name='AddonVersion', description='Version of Addon.', example='0.0.2'),
  dryRun?: boolean(name='DryRun', description='Whether to pre-check this request.', example='false'),
  environmentId?: string(name='EnvironmentId', description='Environment ID.', example='env-xxx'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  releaseName?: string(name='ReleaseName', description='The name of Release.', example='mysql-1695372983039'),
  values?: string(name='Values', description='Metadata information.', example='{"host":"mysql-service.default","port":3306,"username":"root","password":"roots"}'),
}

model UpgradeAddonReleaseResponseBody = {
  code?: int32(name='Code', description='The status code. 200 indicates success.', example='200'),
  data?: string(name='Data', description='Return a message.', example='success'),
  message?: string(name='Message', description='The information returned when the request parameter is incorrect.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='27E653FA-5958-45BE-8AA9-14D884DC****'),
  success?: boolean(name='Success', description='Whether the call was successful.', example='true'),
}

model UpgradeAddonReleaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeAddonReleaseResponseBody(name='body'),
}

async function upgradeAddonReleaseWithOptions(request: UpgradeAddonReleaseRequest, runtime: Util.RuntimeOptions): UpgradeAddonReleaseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addonVersion)) {
    query['AddonVersion'] = request.addonVersion;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.releaseName)) {
    query['ReleaseName'] = request.releaseName;
  }
  if (!Util.isUnset(request.values)) {
    query['Values'] = request.values;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeAddonRelease',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeAddonRelease(request: UpgradeAddonReleaseRequest): UpgradeAddonReleaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeAddonReleaseWithOptions(request, runtime);
}

model UpgradeEnvironmentFeatureRequest {
  aliyunLang?: string(name='AliyunLang', example='zh'),
  environmentId?: string(name='EnvironmentId', example='env-xxx'),
  featureName?: string(name='FeatureName', example='metric-agent'),
  featureVersion?: string(name='FeatureVersion', example='1.1.17'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  values?: string(name='Values', example='{"PodAnnotation":"run"}'),
}

model UpgradeEnvironmentFeatureResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: map[string]string(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='01FF8DD9-A09C-47A1-895A-B6E321BE77B6'),
  success?: boolean(name='Success', example='true'),
}

model UpgradeEnvironmentFeatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeEnvironmentFeatureResponseBody(name='body'),
}

async function upgradeEnvironmentFeatureWithOptions(request: UpgradeEnvironmentFeatureRequest, runtime: Util.RuntimeOptions): UpgradeEnvironmentFeatureResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunLang)) {
    query['AliyunLang'] = request.aliyunLang;
  }
  if (!Util.isUnset(request.environmentId)) {
    query['EnvironmentId'] = request.environmentId;
  }
  if (!Util.isUnset(request.featureName)) {
    query['FeatureName'] = request.featureName;
  }
  if (!Util.isUnset(request.featureVersion)) {
    query['FeatureVersion'] = request.featureVersion;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.values)) {
    query['Values'] = request.values;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeEnvironmentFeature',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeEnvironmentFeature(request: UpgradeEnvironmentFeatureRequest): UpgradeEnvironmentFeatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeEnvironmentFeatureWithOptions(request, runtime);
}

model UploadRequest {
  edition?: string(name='Edition', description='The version of the SourceMap file.', example='0.0.0'),
  file?: string(name='File', description='The content of the SourceMap file.', example='test file content'),
  fileName?: string(name='FileName', description='The name of the SourceMap file.', example='test.js.map'),
  pid?: string(name='Pid', description='The application ID.

Log on to the **ARMS console**. In the left-side navigation pane, choose **Browser Monitoring** > **Browser Monitoring**. On the Browser Monitoring page, click the name of an application. The URL in the address bar contains the process ID (PID) of the application. The PID is indicated in the pid=xxx format. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is eb4zdose6v%409781be0f44d\\*\\*\\*\\*, you must replace %40 with @ to obtain eb4zdose6v@9781be0f44d\\*\\*\\*\\*.', example='b590lhguqs@8cc3f6354******'),
  regionId?: string(name='RegionId', description='The ID of the region to which the SourceMap file is uploaded.', example='cn-hangzhou'),
  version?: string(name='Version', description='We recommend that you do not specify this parameter.', example='null'),
}

model UploadResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
  uploadResult?: {
    fid?: string(name='Fid', description='The ID of the SourceMap file.', example='123'),
    fileName?: string(name='FileName', description='The name of the SourceMap file.', example='test.js.map'),
    uploadTime?: string(name='UploadTime', description='The time when the file was uploaded.', example='1650272251'),
  }(name='UploadResult', description='The returned data.'),
}

model UploadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadResponseBody(name='body'),
}

async function uploadWithOptions(request: UploadRequest, runtime: Util.RuntimeOptions): UploadResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.edition)) {
    query['Edition'] = request.edition;
  }
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.pid)) {
    query['Pid'] = request.pid;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.version)) {
    query['Version'] = request.version;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.file)) {
    body['File'] = request.file;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'Upload',
    version = '2019-08-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upload(request: UploadRequest): UploadResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadWithOptions(request, runtime);
}

