/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ARMS';
  @version = '2019-08-08';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'arms.aliyuncs.com',
    cn-beijing-finance-1 = 'arms.aliyuncs.com',
    cn-beijing-finance-pop = 'arms.aliyuncs.com',
    cn-beijing-gov-1 = 'arms.aliyuncs.com',
    cn-beijing-nu16-b01 = 'arms.aliyuncs.com',
    cn-edge-1 = 'arms.aliyuncs.com',
    cn-fujian = 'arms.aliyuncs.com',
    cn-haidian-cm12-c01 = 'arms.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'arms.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'arms.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'arms.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'arms.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'arms.aliyuncs.com',
    cn-hangzhou-test-306 = 'arms.aliyuncs.com',
    cn-hongkong-finance-pop = 'arms.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'arms.aliyuncs.com',
    cn-qingdao-nebula = 'arms.aliyuncs.com',
    cn-shanghai-et15-b01 = 'arms.aliyuncs.com',
    cn-shanghai-et2-b01 = 'arms.aliyuncs.com',
    cn-shanghai-inner = 'arms.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'arms.aliyuncs.com',
    cn-shenzhen-inner = 'arms.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'arms.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'arms.aliyuncs.com',
    cn-wuhan = 'arms.aliyuncs.com',
    cn-yushanfang = 'arms.aliyuncs.com',
    cn-zhangbei = 'arms.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'arms.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'arms.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'arms.aliyuncs.com',
    eu-west-1-oxs = 'arms.aliyuncs.com',
    me-east-1 = 'arms.aliyuncs.com',
    rus-west-1-pop = 'arms.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CallChainInfo {
  additionalInfo?: string(name='AdditionalInfo'),
  appName?: string(name='AppName'),
  appType?: string(name='AppType'),
  children?: [
    CallChainInfo
  ](name='Children'),
  haveSpan?: boolean(name='HaveSpan'),
  logMap?: map[string]map[string]any(name='LogMap'),
  logTime?: long(name='LogTime'),
  parentSpanId?: string(name='ParentSpanId'),
  pid?: string(name='Pid'),
  regionId?: string(name='RegionId'),
  resultCode?: string(name='ResultCode'),
  rpc?: string(name='Rpc'),
  rpcId?: string(name='RpcId'),
  rpcType?: long(name='RpcType'),
  serverIp?: string(name='ServerIp'),
  span?: long(name='Span'),
  spanId?: string(name='SpanId'),
  tagMap?: map[string]string(name='TagMap'),
  traceId?: string(name='TraceId'),
}

model GrafanaWorkspace {
  commercial?: boolean(name='commercial'),
  deployType?: string(name='deployType'),
  description?: string(name='description'),
  endTime?: float(name='endTime', example='1652803200000'),
  gmtCreate?: float(name='gmtCreate', example='创建时间'),
  grafanaVersion?: string(name='grafanaVersion'),
  grafanaWorkspaceDomain?: string(name='grafanaWorkspaceDomain'),
  grafanaWorkspaceEdition?: string(name='grafanaWorkspaceEdition', example='experts_edition/advanced_edition/standard'),
  grafanaWorkspaceId?: string(name='grafanaWorkspaceId', example='g-thisisademo666'),
  grafanaWorkspaceIp?: string(name='grafanaWorkspaceIp', example='127.0.0.1:3000'),
  grafanaWorkspaceName?: string(name='grafanaWorkspaceName'),
  maxAccount?: string(name='maxAccount', example='10'),
  ntmId?: string(name='ntmId'),
  personalDomain?: string(name='personalDomain'),
  personalDomainPrefix?: string(name='personalDomainPrefix'),
  privateDomain?: string(name='privateDomain'),
  privateIp?: string(name='privateIp'),
  protocol?: string(name='protocol', example='http/https'),
  regionId?: string(name='regionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='resourceGroupId'),
  shareSynced?: boolean(name='shareSynced'),
  snatIp?: string(name='snatIp', example='1.1.1.1'),
  status?: string(name='status', example='Starting/Running/Stop/DeleteSucceed'),
  tags?: [ 
    {
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='tags'),
  upgradeVersion?: [ string ](name='upgradeVersion'),
  userId?: string(name='userId', example='66666666'),
}

model GrafanaWorkspaceAccount {
  accountId?: long(name='accountId', example='1'),
  accountNotes?: string(name='accountNotes'),
  aliyunUid?: string(name='aliyunUid', example='131243781293'),
  aliyunUserName?: string(name='aliyunUserName', example='test'),
  gmtCreate?: float(name='gmtCreate', example='创建时间'),
  orgs?: [
    GrafanaWorkspaceUserOrg
  ](name='orgs'),
}

model GrafanaWorkspaceAlertNotification {
  id?: long(name='id', example='1'),
  isArms?: boolean(name='isArms', example='true'),
  isDefault?: boolean(name='isDefault', example='true'),
  name?: string(name='name', example='test'),
  sendReminder?: boolean(name='sendReminder', example='true'),
  settings?: string(name='settings', example='{}'),
  type?: string(name='type', example='Email'),
  uid?: string(name='uid', example='Xfdf******'),
}

model GrafanaWorkspaceArmsAlertConfig {
  armsAlertsEnable?: string(name='armsAlertsEnable', example='true'),
  armsAlertsWebhookUrl?: string(name='armsAlertsWebhookUrl'),
}

model GrafanaWorkspaceCustomDomain {
  cert?: string(name='cert', example='protocol为http时无需填写;'),
  date?: long(name='date', example='1688627798017'),
  domain?: string(name='domain', example='mydomain.com'),
  grafanaWorkspaceId?: string(name='grafanaWorkspaceId', example='grafana-cn-***********'),
  id?: long(name='id', example='1'),
  key?: string(name='key', example='protocol为http时无需填写;'),
  privateZone?: string(name='privateZone', example='true'),
  protocol?: string(name='protocol', example='https'),
  status?: string(name='status', example='CreateSucceed'),
  uri?: string(name='uri', example='/'),
}

model GrafanaWorkspaceDashboardReport {
  gmtCreate?: long(name='gmtCreate', example='1680861352600'),
  grafanaWorkspaceId?: string(name='grafanaWorkspaceId', example='grafana-cn-**********'),
  id?: long(name='id', example='1'),
  lastSendTime?: long(name='lastSendTime', example='1680861352600'),
  msg?: string(name='msg'),
  name?: string(name='name'),
  reportChannelTarget?: string(name='reportChannelTarget', example='******@aliyun.com'),
  reportChannelType?: string(name='reportChannelType', example='Email'),
  reportStyle?: string(name='reportStyle', example='Grid,Simple'),
  reportType?: string(name='reportType', example='Image'),
  status?: string(name='status'),
  triggerDay?: string(name='triggerDay', example='1'),
  triggerTime?: string(name='triggerTime', example='12:25'),
  triggerType?: string(name='triggerType', example='ByWeek'),
  url?: string(name='url', example='Dashboard URL'),
  userId?: string(name='userId'),
}

model GrafanaWorkspaceDashboardSync {
  dashboardTitle?: string(name='dashboardTitle', example='testTitle'),
  dashboardURL?: string(name='dashboardURL', example='https://g.console.aliyun.com/d/1098370038733503-14960236-422-3/ack-pro-apiserver'),
  dashboardUid?: string(name='dashboardUid', example='xxxdvxsea'),
  folderId?: string(name='folderId', example='123456'),
  folderTitle?: string(name='folderTitle', example='test'),
  folderURL?: string(name='folderURL', example='https://g.console.aliyun.com/d/1098370038733503-14960236-422-3/ack-pro-apiserver'),
  folderUid?: string(name='folderUid', example='vxeupqn'),
  orgId?: string(name='orgId', example='1'),
  orgName?: string(name='orgName', example='user123'),
  type?: string(name='type', example='normal'),
}

model GrafanaWorkspaceDataBackup {
  gmtCreate?: long(name='gmtCreate', example='1680861352600'),
  gmtModified?: long(name='gmtModified', example='1680861352600'),
  grafanaWorkspaceId?: string(name='grafanaWorkspaceId', example='grafana-cn-**********'),
  id?: long(name='id', example='1'),
  msg?: string(name='msg'),
  processName?: string(name='processName'),
  processStatus?: string(name='processStatus'),
  subType?: string(name='subType', example='User'),
  userId?: string(name='userId'),
}

model GrafanaWorkspaceIniBackup {
  ext?: string(name='ext'),
  gmtCreate?: long(name='gmtCreate', example='1680861352600'),
  gmtModified?: long(name='gmtModified', example='1680861352600'),
  grafanaWorkspaceId?: string(name='grafanaWorkspaceId', example='grafana-cn-**********'),
  id?: long(name='id', example='1'),
  msg?: string(name='msg'),
  processName?: string(name='processName'),
  processStatus?: string(name='processStatus'),
  subType?: string(name='subType', example='User'),
  userId?: string(name='userId'),
}

model GrafanaWorkspaceIniProperty {
  defaultValue?: string(name='defaultValue'),
  description?: string(name='description'),
  example?: string(name='example'),
  key?: string(name='key'),
  secret?: boolean(name='secret'),
  value?: string(name='value'),
}

model GrafanaWorkspaceIniSection {
  propertys?: [
    GrafanaWorkspaceIniProperty
  ](name='propertys'),
  section?: string(name='section'),
}

model GrafanaWorkspaceIntegration {
  datasourceAmount?: long(name='datasourceAmount'),
  integrationId?: string(name='integrationId'),
  integrationName?: string(name='integrationName'),
  previews?: [
    GrafanaWorkspaceIntegrationPreview
  ](name='previews'),
  status?: string(name='status'),
  supportRegions?: [ string ](name='supportRegions'),
}

model GrafanaWorkspaceIntegrationDataSource {
  clusterType?: string(name='clusterType'),
  datasourceId?: string(name='datasourceId'),
  datasourceName?: string(name='datasourceName'),
  datasourceUrl?: string(name='datasourceUrl'),
  description?: string(name='description'),
  exploreUrl?: string(name='exploreUrl'),
  folderUrl?: string(name='folderUrl'),
  regionId?: string(name='regionId'),
  status?: string(name='status'),
  type?: string(name='type'),
}

model GrafanaWorkspaceIntegrationDetail {
  dataSources?: [
    GrafanaWorkspaceIntegrationDataSource
  ](name='dataSources'),
  integrationId?: string(name='integrationId'),
  status?: string(name='status'),
}

model GrafanaWorkspaceIntegrationPreview {
  id?: string(name='id'),
  image?: string(name='image'),
  name?: string(name='name'),
  thumbnail?: string(name='thumbnail'),
}

model GrafanaWorkspaceNews {
  date?: long(name='date'),
  description?: string(name='description'),
  image?: string(name='image'),
  link?: string(name='link'),
  title?: string(name='title'),
}

model GrafanaWorkspaceOperateLog {
  date?: float(name='date'),
  detail?: string(name='detail'),
  grafanaWorkspaceId?: string(name='grafanaWorkspaceId'),
  id?: long(name='id'),
  operatorId?: string(name='operatorId'),
}

model GrafanaWorkspaceOrg {
  id?: long(name='id', example='1'),
  name?: string(name='name', example='main org'),
}

model GrafanaWorkspaceTrans {
  apiUrl?: string(name='apiUrl'),
  authType?: string(name='authType'),
  gmtCreate?: float(name='gmtCreate'),
  gmtModified?: float(name='gmtModified'),
  grafanaWorkspaceId?: string(name='grafanaWorkspaceId'),
  id?: long(name='id'),
  msg?: string(name='msg'),
  processStatus?: string(name='processStatus'),
  transDetails?: [
    GrafanaWorkspaceTransDetail
  ](name='transDetails'),
  userId?: string(name='userId'),
}

model GrafanaWorkspaceTransDetail {
  dashboardAmount?: int32(name='dashboardAmount'),
  dataSourceAmount?: int32(name='dataSourceAmount'),
  original?: long(name='original'),
  originalName?: string(name='originalName'),
  target?: long(name='target'),
  targetName?: string(name='targetName'),
}

model GrafanaWorkspaceUserCert {
  id?: string(name='id', example='8096753'),
  name?: string(name='name', example='cert-7700050 [grafana.tongtong-max.cn]'),
}

model GrafanaWorkspaceUserOrg {
  orgId?: long(name='orgId', example='1'),
  orgName?: string(name='orgName', example='main org'),
  role?: string(name='role', example='admin'),
}

model GrafanaWorkspaceVpcConfig {
  fcConfig?: string(name='fcConfig', example='fc、ansm'),
  id?: long(name='id', example='1'),
  installMsg?: string(name='installMsg'),
  installStatus?: string(name='installStatus', example='CreateSucceed'),
  name?: string(name='name', example='北京VPC-A通道'),
  regionId?: string(name='regionId', example='cn-beijing'),
  securityGroupId?: string(name='securityGroupId', example='sg-6we94uvybteyc******'),
  userId?: string(name='userId', example='10983***********'),
  vSwitchId?: string(name='vSwitchId', example='vsw-6we3**********'),
  vpcId?: string(name='vpcId', example='vpc-6wehr2x**********'),
}

model GrafanaWorkspaceVpcRegion {
  regionId?: string(name='regionId', example='cn-beijing'),
  regionName?: string(name='regionName', example='华北2（北京）'),
}

model GrafanaWorkspaceVpcRegionDetail {
  fcConfig?: string(name='fcConfig', example='fc、ansm'),
  id?: long(name='id', example='配置ID'),
  installStatus?: string(name='installStatus', example='Uninitialized'),
  name?: string(name='name', example='vpc-abc*****'),
  regionId?: string(name='regionId', example='cn-beijing'),
  securityGroupId?: string(name='securityGroupId'),
  securityGroupIds?: [ string ](name='securityGroupIds'),
  userId?: string(name='userId', example='10988**********'),
  vSwitchId?: string(name='vSwitchId'),
  vSwitchIds?: [ string ](name='vSwitchIds'),
  vpcId?: string(name='vpcId', example='vpc-2ze4siu98**********'),
}

model QueryDataResponse {
  results?: string(name='results'),
}

model AddAliClusterIdsToPrometheusGlobalViewRequest {
  clusterIds: string(name='ClusterIds', description='The IDs of clusters. Separate multiple IDs with commas (,).', example='cd1d55bef19904324a20ed0ebb86caa5c,c5b48729918ab4745a24482ac29d0973a, c00a94896641449098bf24931e4166003, cd174485c09384060ba542bc1be1185a4', position='Query'),
  globalViewClusterId: string(name='GlobalViewClusterId', description='The ID of the global aggregation instance.', example='global-v2-cn-1478326682034601-vss8pd0i', position='Query'),
  groupName: string(name='GroupName', description='The name of the global aggregation instance.', example='zyGlobalView', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model AddAliClusterIdsToPrometheusGlobalViewResponseBody = {
  code?: int32(name='Code'),
  data?: {
    info?: string(name='Info', description='The Info-level information.', example='{regionId: the region where the aggregation instance resides. globalViewClusterId: the ID of the aggregation instance. failedClusterIds: the ID of the cluster that failed to be added. A cluster may fail to be added because the specified cluster ID is invalid or the cluster is added across continents.}'),
    msg?: string(name='Msg', description='The additional information.', example='OK'),
    success?: boolean(name='Success', description='Indicates whether the request was successful.

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
  }(name='Data', description='The information about the array object.'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='F7781D4A-2818-41E7-B7BB-79D809E9****'),
}

model AddAliClusterIdsToPrometheusGlobalViewResponse = {
  headers: map[string]string(name='headers'),
  body: AddAliClusterIdsToPrometheusGlobalViewResponseBody(name='body'),
}

async function addAliClusterIdsToPrometheusGlobalView(request: AddAliClusterIdsToPrometheusGlobalViewRequest): AddAliClusterIdsToPrometheusGlobalViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAliClusterIdsToPrometheusGlobalView', 'POST', '/', 'json', false, 'json', request);
}

model AddGrafanaRequest {
  clusterId: string(name='ClusterId', description='The ID of the Container Service for Kubernetes (ACK) cluster.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  integration: string(name='Integration', description='The abbreviation of the software that is supported by Application Real-Time Monitoring Service (ARMS). Valid values (case-insensitive): `ASM`, `IoT`, and `Flink`.', example='asm', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model AddGrafanaResponseBody = {
  data?: string(name='Data', description='Indicates whether the call was successful.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
}

model AddGrafanaResponse = {
  headers: map[string]string(name='headers'),
  body: AddGrafanaResponseBody(name='body'),
}

async function addGrafana(request: AddGrafanaRequest): AddGrafanaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddGrafana', 'POST', '/', 'json', false, 'json', request);
}

model AddIntegrationRequest {
  clusterId: string(name='ClusterId', description='The ID of an Alibaba Cloud Container Service for Kubernetes cluster.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  integration: string(name='Integration', description='The software abbreviation that is supported by ARMS. Valid values (case-insensitive): `ASM`, `IoT`, and `Flink`.', example='asm', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
}

model AddIntegrationResponseBody = {
  code?: int32(name='Code', description='状态码。200为成功，其他状态码为异常。', example='200'),
  data?: string(name='Data', description='Indicates whether the integration was successful.', example='success'),
  message?: string(name='Message', description='返回结果的提示信息。', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
}

model AddIntegrationResponse = {
  headers: map[string]string(name='headers'),
  body: AddIntegrationResponseBody(name='body'),
}

async function addIntegration(request: AddIntegrationRequest): AddIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddIntegration', 'POST', '/', 'json', false, 'json', request);
}

model AddPrometheusGlobalViewRequest {
  clusters: string(name='Clusters', description='The queried global aggregation instances. The value is a JSON string.', position='Query'),
  groupName: string(name='GroupName', description='The name of the aggregation instance.', example='zyGlobalView', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-aek2eq4pecazwfy', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='http.status_code'),
      value?: string(name='Value', description='The tag value.', example='200'),
    }
  ](name='Tag', description='The list of tags.', position='Query'),
}

model AddPrometheusGlobalViewResponseBody = {
  code?: int32(name='Code'),
  data?: {
    info?: {
      failedInstances?: string(name='FailedInstances', description='The list of instances that failed to be added.', example='\\[{"sourceName": "Data source name- ArmsPrometheus","sourceType":"AlibabaPrometheus","userId":"UserID","clusterId":"ClusterId",}]'),
      globalViewClusterId?: string(name='GlobalViewClusterId', description='The ID of the global aggregation instance.', example='global-v2-cn-1483223059272121-jmjjfznz'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    }(name='Info', description='The Info-level information.'),
    msg?: string(name='Msg', description='The additional information.', example='OK'),
    success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
  }(name='Data', description='The information about the array object.'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model AddPrometheusGlobalViewResponse = {
  headers: map[string]string(name='headers'),
  body: AddPrometheusGlobalViewResponseBody(name='body'),
}

async function addPrometheusGlobalView(request: AddPrometheusGlobalViewRequest): AddPrometheusGlobalViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddPrometheusGlobalView', 'POST', '/', 'json', false, 'json', request);
}

model AddPrometheusGlobalViewByAliClusterIdsRequest {
  clusterIds: string(name='ClusterIds', example='cd1d55bef19904324a20ed0ebb86caa5c,c5b48729918ab4745a24482ac29d0973a, c00a94896641449098bf24931e4166003, cd174485c09384060ba542bc1be1185a4', position='Query'),
  groupName: string(name='GroupName', example='zyGlobalView', position='Query'),
  productCode?: string(name='ProductCode', example='adcp', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model AddPrometheusGlobalViewByAliClusterIdsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    info?: string(name='Info'),
    msg?: string(name='Msg', example='success'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3A0EA2AF-C9B3-555C-B9D5-5DD8F5EF98A9'),
}

model AddPrometheusGlobalViewByAliClusterIdsResponse = {
  headers: map[string]string(name='headers'),
  body: AddPrometheusGlobalViewByAliClusterIdsResponseBody(name='body'),
}

async function addPrometheusGlobalViewByAliClusterIds(request: AddPrometheusGlobalViewByAliClusterIdsRequest): AddPrometheusGlobalViewByAliClusterIdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddPrometheusGlobalViewByAliClusterIds', 'POST', '/', 'json', false, 'json', request);
}

model AddPrometheusInstanceRequest {
  name: string(name='Name', example='notificationpolicy_test', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  type: string(name='Type', example='RW', position='Query'),
}

model AddPrometheusInstanceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', description='The returned struct. { "RequestId": the request ID, "Data": "{ "clusterType": the cluster type, "remoteWriteUrl": the public URL for remote write, "internetGrafanaUrl": the internal URL for Grafana, "authToken": indicates whether authentication is enabled, "internetPushGatewayUrl": the internal URL for Pushgateway, "clusterId": the cluster ID, "internetRemoteReadUrl": the internal URL for remote read, "remoteReadUrl": the public URL for remote read, "grafanaUrl": the public URL for Grafana, "pushGatewayUrl": the public URL for Pushgateway, "internetRemoteWriteUrl": the internal URL for remote write}" }', example='{
  "RequestId": "1293091C-54AD-50FE-B787-E314B94B35AB",
  "Data": "{
  "clusterType":"remote-write-prometheus",
  "remoteWriteUrl":"http://cn-hu/api/v3/write",
  "internetGrafanaUrl":"https://cn-hanga/cn-hangzhou",
  "authToken":false,
  "internetPushGatewayUrl":"https://cangzhou/api/v2",
  "clusterId":"vrju1lj3sa|123456",
  "internetRemoteReadUrl":"https://cn-hangzh67cn-hangzhou/api/v1/read",
  "remoteReadUrl":"http://cn-hanou/api/v1/read",
  "grafanaUrl":"http://cn-angzhou",
  "pushGatewayUrl":"htt1lj3sa/cn-hangzhou/api/v2",
  "internetRemoteWriteUrl":"httpsngzhou/api/v3/write"}"
}'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9319A57D-2D9E-472A-B69B-CF3CD16D****'),
  success?: boolean(name='Success', example='true'),
}

model AddPrometheusInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: AddPrometheusInstanceResponseBody(name='body'),
}

async function addPrometheusInstance(request: AddPrometheusInstanceRequest): AddPrometheusInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddPrometheusInstance', 'POST', '/', 'json', false, 'json', request);
}

model AddPrometheusIntegrationRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance. Only aliyun-cs and ecs instances are supported.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  integrationType: string(name='IntegrationType', description='The integration type.', example='kafka, mysql, redis, snmp, emr, nubela, and tidb', position='Query'),
  param: string(name='Param', description='The configurations of the exporter. The value is a JSON string.', example='{"port":"5554","name":"kafka-test12","kafka_instance":"kafka-test","__label_value":"kafka-test","scrape_interval":33,"metrics_path":"/metrics","__label_key":"kafka-test"}', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model AddPrometheusIntegrationResponseBody = {
  code?: int32(name='Code', description='The status code or error code.', example='200'),
  data?: {
    instanceId?: long(name='InstanceId', description='The exporter ID.', example='2829'),
    instanceName?: string(name='InstanceName', description='The exporter name.', example='hw-cloud02'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='3703B98C-335E-5BA7-972E-F90E9E768A85'),
}

model AddPrometheusIntegrationResponse = {
  headers: map[string]string(name='headers'),
  body: AddPrometheusIntegrationResponseBody(name='body'),
}

async function addPrometheusIntegration(request: AddPrometheusIntegrationRequest): AddPrometheusIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddPrometheusIntegration', 'POST', '/', 'json', false, 'json', request);
}

model AddPrometheusRemoteWriteRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance. Only aliyun-cs and ecs instances are supported.', example='cc7a37ee31aea4ed1a059eff8034b\\*\\*\\*\\* or vpc-xxxxx', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  remoteWriteYaml: string(name='RemoteWriteYaml', description='The remote write configuration. Specify the value in the YAML format.', example='remote_write:
  - name: rw1
    url: "http://cn-hangzhou-intranet.arms.aliyuncs.com/prometheus/uid/xx/cn-hangzhou/api/v3/write"
    basic_auth:
      username: xxx
      password: xxx
    write_relabel_configs:
      - source_labels: [ instance_id ]
        separator: ;
        regex: si
        replacement: $1
        action: keep
  - name: rw2
    url: "http://cn-hangzhou-intranet.arms.aliyuncs.com/prometheus/uid/xx/cn-hangzhou/api/v3/write"
    basic_auth:
      username: xxx
      password: xxx
    write_relabel_configs:
      - source_labels: [ xx ]
        separator: ;
        regex: yyy
        replacement: $1
        action: keep', position='Body'),
}

model AddPrometheusRemoteWriteResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: string(name='Data', description='The name of the remote write configuration that was added, or the exception information.', example='1'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C518054-852F-4023-ABC1-4AF95FF7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model AddPrometheusRemoteWriteResponse = {
  headers: map[string]string(name='headers'),
  body: AddPrometheusRemoteWriteResponseBody(name='body'),
}

async function addPrometheusRemoteWrite(request: AddPrometheusRemoteWriteRequest): AddPrometheusRemoteWriteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddPrometheusRemoteWrite', 'POST', '/', 'json', true, 'form', request);
}

model AddRecordingRuleRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  ruleYaml: string(name='RuleYaml', description='The custom recording rule. The value is in the YAML format.', example='groups: - name: "recording_demo"   rules:   - expr: "sum(jvm_memory_max_bytes)"     record: "rate_coredns_demo"', position='Query'),
}

model AddRecordingRuleResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data', description='The status of the response.', example='success'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='The request ID.', example='9FEA6D00-317F-45E3-9004-7FB8B0B7****'),
}

model AddRecordingRuleResponse = {
  headers: map[string]string(name='headers'),
  body: AddRecordingRuleResponseBody(name='body'),
}

async function addRecordingRule(request: AddRecordingRuleRequest): AddRecordingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddRecordingRule', 'POST', '/', 'json', false, 'json', request);
}

model AppendInstancesToPrometheusGlobalViewRequest {
  clusters: string(name='Clusters', description='The list of global aggregation instances. The value is a JSON string.', example='\\[ { "sourceName": "Data source name- ArmsPrometheus No.1", "sourceType":"AlibabaPrometheus", "userId":"UserID", "clusterId":"ClusterId", }, { "sourceName": "Data source name - MetrcStore No.2", "sourceType":"MetricStore", "dataSource":"Remote read endpoint of the MetricStore", "extras":{ "username":"BasicAuthUsername", "password":"BasicAuthPassword" } }, { "sourceName": "Custom ", "sourceType":"CustomPrometheus", "dataSource":"Remote read endpoint of the self-managed Prometheus data source", "extras":{ "username":"BasicAuthUsername", "password":"BasicAuthPassword" } }, { "sourceName": "Other one ", "sourceType":"Others", "dataSource":"Endpoint of another data source such as Tencent remote read", "headers":{ "AnyHeaderToFill":"Headers to be filled" }, "extras":{ "username":"BasicAuthUsername", "password":"BasicAuthPassword" } } // ....... more addre ]', position='Query'),
  globalViewClusterId: string(name='GlobalViewClusterId', description='The ID of the global aggregation instance.', example='global-v2-cn-1670100631025794-6gjc0qgb', position='Query'),
  groupName: string(name='GroupName', description='The name of the global aggregation instance.', example='zyGlobalView', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model AppendInstancesToPrometheusGlobalViewResponseBody = {
  code?: int32(name='Code'),
  data?: {
    info?: string(name='Info', description='The Info-level information.', example='{regionId: the region where the aggregation instance resides. globalViewClusterId: the ID of the aggregation instance. failedInstances: the ID of the object that failed to be added.}'),
    msg?: string(name='Msg', description='The additional information.', example='OK'),
    success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   `true`: The call was successful.
*   `false`: The call failed.', example='True'),
  }(name='Data', description='The information about the array object.'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='27E653FA-5958-45BE-8AA9-14D884DC****'),
}

model AppendInstancesToPrometheusGlobalViewResponse = {
  headers: map[string]string(name='headers'),
  body: AppendInstancesToPrometheusGlobalViewResponseBody(name='body'),
}

async function appendInstancesToPrometheusGlobalView(request: AppendInstancesToPrometheusGlobalViewRequest): AppendInstancesToPrometheusGlobalViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AppendInstancesToPrometheusGlobalView', 'POST', '/', 'json', false, 'json', request);
}

model ApplyScenarioRequest {
  appId: string(name='AppId', example='b590lhguqs@28f515462f******', position='Query'),
  config: map[string]any(name='Config', example='{"rpcType":"0","nameMatchType":"EQUALS","service":"/api/pop/test","operator":"and","filterItems":[{"type":"HttpHeaders","key":"uid","opt":"==","value":"123456789"}],"group":{"type":"HttpRequestParameters","key":"name"}}', shrink='json', position='Query'),
  name: string(name='Name', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  scenario?: string(name='Scenario', example='USER-DEFINED', position='Query'),
  sign?: string(name='Sign', example='a9f8****', position='Query'),
  snDump?: boolean(name='SnDump', example='false', position='Query'),
  snForce?: boolean(name='SnForce', example='false', position='Query'),
  snStat?: boolean(name='SnStat', example='false', position='Query'),
  snTransfer?: boolean(name='SnTransfer', example='false', position='Query'),
  updateOption: boolean(name='UpdateOption', example='false', position='Query'),
}

model ApplyScenarioResponseBody = {
  requestId?: string(name='RequestId', example='EA24D522-AD35-47B8-8CB2-ADBC38******'),
  result?: string(name='Result', example='2b97****'),
}

model ApplyScenarioResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyScenarioResponseBody(name='body'),
}

async function applyScenario(request: ApplyScenarioRequest): ApplyScenarioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyScenario', 'POST', '/', 'json', false, 'json', request);
}

model BindPrometheusGrafanaInstanceRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  grafanaInstanceId: string(name='GrafanaInstanceId', description='The ID of the Grafana workspace.', example='grafana-bp1*****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Prometheus instance belongs.', example='rg-acfmxyexli2****', position='Query'),
}

model BindPrometheusGrafanaInstanceResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='27E653FA-5958-45BE-8AA9-14D884DC****'),
}

model BindPrometheusGrafanaInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: BindPrometheusGrafanaInstanceResponseBody(name='body'),
}

async function bindPrometheusGrafanaInstance(request: BindPrometheusGrafanaInstanceRequest): BindPrometheusGrafanaInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindPrometheusGrafanaInstance', 'POST', '/', 'json', false, 'json', request);
}

model ChangeResourceGroupRequest {
  newResourceGroupId: string(name='NewResourceGroupId', description='The ID of the new resource group. You can view the available resource groups in the Resource Management console.', example='rg-aek2vezare****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the resource.', example='cn-hangzhou', position='Query'),
  resourceId: string(name='ResourceId', description='The resource ID.', example='ggxw4lnjuz@cfd34a78f******', position='Query'),
  resourceType?: string(name='ResourceType', description='The resource type.', example='APPLICATION', position='Query'),
}

model ChangeResourceGroupResponseBody = {
  code?: string(name='Code', description='The status code or error code.', example='200'),
  data?: {
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aek2vezare****'),
    resourceId?: string(name='ResourceId', description='The resource ID.', example='ggxw4lnjuz@cfd34a78f******'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='46355DD8-FC56-40C5-BFC6-269DE4F9****'),
}

model ChangeResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model CheckServiceStatusRequest {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-beijing', position='Query'),
  svcCode: string(name='SvcCode', description='The service code of an Alibaba Cloud service. The service code of Prometheus Service is prometheus.', example='prometheus', position='Query'),
}

model CheckServiceStatusResponseBody = {
  data?: string(name='Data', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='5710C923-AD09-4293-9E11-DCBE3D15F8D4'),
}

model CheckServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: CheckServiceStatusResponseBody(name='body'),
}

async function checkServiceStatus(request: CheckServiceStatusRequest): CheckServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckServiceStatus', 'POST', '/', 'json', false, 'json', request);
}

model ConfigAppRequest {
  appIds: string(name='AppIds', description='The process identifier (PID) of the application. Separate multiple PIDs with commas (,).', example='iioe7jcnuk@582846f37******,atc889zkcf@d8deedfa9bf******', position='Query'),
  enable?: string(name='Enable', description='Specifies whether to turn on or turn off the main switch of the ARMS agent. The monitoring stops after the switch is turned off. If you do not specify this parameter, the main switch status of the ARMS agent is queried.

*   `true`
*   `false`', example='true', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  type?: string(name='Type', description='The type of the application. Set the value to **TRACE**.', example='TRACE', position='Query'),
}

model ConfigAppResponseBody = {
  data?: string(name='Data', description='The result of turning on or turning off the main switch of the ARMS agent or the main switch status of the ARMS agent.', example='abc@def success\\nghi@jkl success\\n'),
  requestId?: string(name='RequestId', description='The request ID.', example='16AF921B-8187-489F-9913-43C808B4****'),
}

model ConfigAppResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigAppResponseBody(name='body'),
}

/**
  * ****
  *
 */
async function configApp(request: ConfigAppRequest): ConfigAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigApp', 'POST', '/', 'json', false, 'json', request);
}

model CreateAlertContactRequest {
  contactName?: string(name='ContactName', example='JohnDoe', position='Query'),
  dingRobotWebhookUrl?: string(name='DingRobotWebhookUrl', example='https://oapi.dingtalk.com/robot/send?access_token=91f2f6****', position='Query'),
  email?: string(name='Email', example='someone@example.com', position='Query'),
  phoneNum?: string(name='PhoneNum', example='1381111****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aek2eq4peca****', position='Query'),
  systemNoc?: boolean(name='SystemNoc', example='true', position='Query'),
}

model CreateAlertContactResponseBody = {
  contactId?: string(name='ContactId', example='102**'),
  requestId?: string(name='RequestId', example='E9C9DA3D-10FE-472E-9EEF-2D0A3E41****'),
}

model CreateAlertContactResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAlertContactResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
 */
async function createAlertContact(request: CreateAlertContactRequest): CreateAlertContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAlertContact', 'POST', '/', 'json', false, 'json', request);
}

model CreateAlertContactGroupRequest {
  contactGroupName: string(name='ContactGroupName', example='TestGroup', position='Query'),
  contactIds?: string(name='ContactIds', example='12* 23* 34*', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model CreateAlertContactGroupResponseBody = {
  contactGroupId?: string(name='ContactGroupId', example='446*'),
  requestId?: string(name='RequestId', example='70675725-8F11-4817-8106-CFE0AD71****'),
}

model CreateAlertContactGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAlertContactGroupResponseBody(name='body'),
}

async function createAlertContactGroup(request: CreateAlertContactGroupRequest): CreateAlertContactGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAlertContactGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateDispatchRuleRequest {
  dispatchRule: string(name='DispatchRule', description='## Additional information about the **DispatchRule** parameter

**JSON string example and description**

```

{
  "system": false,        // Specifies whether the dispatch rule is editable. Valid values: true: not editable. false: editable. 
  "ruleid": 10282,           // The ID of the dispatch rule. 
  "name": "Prometheus Alert",   // The name of the dispatch policy. 
  "labelMatchExpressionGrid": {
    "labelMatchExpressionGroups": [     // Sets the dispatch rule. 
      {
        "labelMatchExpressions": [
          {
            "key": "_aliyun_arms_involvedObject_kind", // The key of the tag of the dispatch rule. For more information, see the next section. 
            "value": "app",                              // The value of the tag. 
            "operator": "eq"                             // The operator used in the dispatch rule. Valid values: eq: equals to. re: matches a regular expression. 
          }
        ]
      }
    ]
  },
  "dispatchType": "CREATE_ALERT/DISCARD_ALERT",    // The alert handling method. Valid values: CREATE_ALERT: generates an alert. DISCARD_ALERT: discards the alert event and generates no alert. 
  "isRecover": true,               // Specifies whether to send the restored alert. Valid values: true: sends the alert. false: does not send the alert. 
  "groupRules": [                  // Sets the event group. 
    {
      "groupId": 1,               // The ID of the group. 
      "groupingFields": [         // The fields that are used to group events. Events with the same field content are assigned to a group. Alerts with the same specified grouping field are sent to the handler in separate notifications. 
        "alertname"
      ],
      "groupWait": 10,                 // The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler. 
      "groupInterval": 15,             // The grouping interval. During the silence period of repeated alerts, if new alerts are generated, they will be sent after the group waiting time. 
      "repeatInterval": 20             // The silence period of repeated alerts. All alerts are repeatedly sent at specified intervals until the alerts are cleared. 
    }
  ],
  "notifyRules": [            // Sets the notification rule. 
    {
      "notifyObjects": [
        {
          "notifyType": "ARMS_CONTACT",     // The type of the alert contact. Valid values: ARMS_CONTACT: contact. ARMS_CONTACT_GROUP: contact group. 
          "name": "JohnDoe",                // The name of the contact or contact group. 
          "notifyObjectId": 1               // The ID of the contact or contact group. 
        },
        {
          "notifyType": "ARMS_CONTACT_GROUP",
          "name": "JohnDoe_group",
          "notifyObjectId": 2
        }
      ],
      "notifyChannels":["dingTalk","wechat","webhook","email"]     // The notification method. Valid values: dingTalk, sms, webhook, email, and wechat. 
    },
  ],
}
```

**Enumerated keys of the tag of the dispatch rule**

*   `_aliyun_arms_userid`: user ID
*   `_aliyun_arms_involvedObject_kind`: type of the associated object
*   `_aliyun_arms_involvedObject_id`: ID of the associated object
*   `_aliyun_arms_involvedObject_name`: name of the associated object
*   `_aliyun_arms_alert_name`: alert name
*   `_aliyun_arms_alert_rule_id`: alert rule ID
*   `_aliyun_arms_alert_type`: alert type
*   `_aliyun_arms_alert_level`: alert severity', example='{   "system": false,   "ruleid": 10282,   "name": "Prometheus Alert",   "labelMatchExpressionGrid": {     "labelMatchExpressionGroups": [       {         "labelMatchExpressions": [           {             "key": "_aliyun_arms_involvedObject_kind",             "value": "app",             "operator": "eq"           }         ]       }     ]   },   "dispatchType": "CREATE_ALERT/DISCARD_ALERT",   "isRecover": true,   "groupRules": [     {       "groupId": 1,       "groupingFields": [         "alertname"       ],       "groupWait": 10,       "groupInterval": 15,       "repeatInterval": 20     }   ],   "notifyRules": [     {       "notifyObjects": [         {           "notifyType": "ARMS_CONTACT",           "name": "JohnDoe",           "notifyObjectId": 1         },         {           "notifyType": "ARMS_CONTACT_GROUP",           "name": "JohnDoe_group",           "notifyObjectId": 2         }       ],       "notifyChannels":["dingTalk","wechat","webhook","email"]     },   ], }', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model CreateDispatchRuleResponseBody = {
  dispatchRuleId?: long(name='DispatchRuleId', example='10413'),
  requestId?: string(name='RequestId', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
}

model CreateDispatchRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDispatchRuleResponseBody(name='body'),
}

async function createDispatchRule(request: CreateDispatchRuleRequest): CreateDispatchRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDispatchRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateIntegrationRequest {
  autoRecover?: boolean(name='AutoRecover', example='true', position='Body'),
  description?: string(name='Description', example='测试', position='Body'),
  integrationName: string(name='IntegrationName', example='云监控集成', position='Body'),
  integrationProductType: string(name='IntegrationProductType', example='CLOUD_MONITOR', position='Body'),
  recoverTime?: long(name='RecoverTime', example='300', position='Body'),
}

model CreateIntegrationResponseBody = {
  integration?: {
    autoRecover?: boolean(name='AutoRecover', example='true'),
    description?: string(name='Description', example='测试'),
    integrationId?: long(name='IntegrationId', example='1234'),
    integrationName?: string(name='IntegrationName', example='云监控集成'),
    integrationProductType?: string(name='IntegrationProductType', example='CLOUD_MONITOR'),
    recoverTime?: long(name='RecoverTime', example='300'),
  }(name='Integration'),
  requestId?: string(name='RequestId', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model CreateIntegrationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIntegrationResponseBody(name='body'),
}

async function createIntegration(request: CreateIntegrationRequest): CreateIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIntegration', 'POST', '/', 'json', true, 'form', request);
}

model CreateOrUpdateAlertRuleRequest {
  alertCheckType?: string(name='AlertCheckType', description='The alert check type of the Prometheus alert rule. Valid values:

*   STATIC: a static threshold value. If you set the parameter to STATIC, you must specify the **MetricsKey** parameter. For more information, see the **Correspondence between AlertGroup and MetricsKey for Prometheus Service** table.
*   CUSTOM: a custom PromQL statement. If you set the parameter to CUSTOM, you must specify the **PromQL**, **Duration**, and **Message** parameters to create a Prometheus alert rule.', example='STATIC', position='Body'),
  alertGroup?: long(name='AlertGroup', description='The alert contact group ID of the Prometheus alert rule. Valid values:

*   \\-1: custom PromQL
*   1: Kubernetes load
*   15: Kubernetes node', example='-1', position='Body'),
  alertId?: long(name='AlertId', description='The ID of the alert rule.

*   If you do not specify this parameter, a new alert rule is created.
*   If you specify this parameter, the specified alert rule is modified.', example='546xxx', position='Body'),
  alertName: string(name='AlertName', description='The name of the alert rule.', example='Alert Rule Demo', position='Body'),
  alertRuleContent?: string(name='AlertRuleContent', description='The content of the Application Monitoring or Browser Monitoring alert rule. The following code provides an example of the **AlertRuleContent** parameter. For more information about the meaning of each field, see the supplementary description.

```json
{ 
    "Condition": "OR", 
     "AlertRuleItems": [ 
             { "Operator": "CURRENT_LTE",
                 "MetricKey": "appstat.jvm.threadcount", 
                 "Value": 1000, 
                 "Aggregate": "AVG",
                  "N": 1
            } 
       ]  
  }
```

> The conditional fields vary depending on the values of the **MetricsType** and **AlertRuleItems.MetricKey** parameters. For more information about the types of metrics supported by Application Monitoring and Browser Monitoring and the alert rule fields corresponding to each metric, see the supplementary description.', example='{ "Condition": "OR", "AlertRuleItems": [ { "Operator": "CURRENT_LTE",  "MetricKey": "appstat.jvm.threadcount",  "Value": 1000,  "Aggregate": "AVG",   "N": 1  }  ]  }', position='Body'),
  alertStatus?: string(name='AlertStatus', description='The status of the alert rule. Valid values:

*   RUNNING (default)
*   STOPPED', example='RUNNING', position='Body'),
  alertType: string(name='AlertType', description='The type of the alert rule.

*   APPLICATION_MONITORING_ALERT_RULE: an alert rule of Application Monitoring
*   BROWSER_MONITORING_ALERT_RULE: an alert rule of Browser Monitoring
*   PROMETHEUS_MONITORING_ALERT_RULE: an alert rule of Prometheus Service

Valid values:

*   PROMETHEUS_MONITORING_ALERT_RULE
*   APPLICATION_MONITORING_ALERT_RULE
*   BROWSER_MONITORING_ALERT_RULE
*   prometheus monitoring alert
*   application monitoring alert
*   browser monitoring alert', example='APPLICATION_MONITORING_ALERT_RULE', position='Body'),
  annotations?: string(name='Annotations', description='The annotations of the Prometheus alert rule.', example='\\[ { "Value": "PolarDB slow queries", "Name": "\\_aliyun_display_name" }', position='Body'),
  autoAddNewApplication?: boolean(name='AutoAddNewApplication', description='Specifies whether to apply the alert rule to new applications that are created in Application Monitoring or Browser Monitoring. Valid values:

*   `true`: yes
*   `false`: no', example='false', position='Body'),
  clusterId?: string(name='ClusterId', description='The cluster ID of the Prometheus alert rule.', example='ceba9b9ea5b924dd0b6726d2de6******', position='Body'),
  duration?: long(name='Duration', description='The duration of the Prometheus alert rule. Unit: minutes.', example='1', position='Body'),
  filters?: string(name='Filters', description='The filter conditions of the Application Monitoring or Browser Monitoring alert rule. The name must meet the following format requirements:

    "DimFilters": [ 
    { 
     "FilterOpt": "ALL",
     "FilterValues": [],         // The value of the filter condition. 
     "FilterKey": "rootIp"     // The key of the filter condition. 
    }
    ]

Valid values of **FilterOpt**:

*   STATIC: matches the value of the specified dimension.
*   ALL: matches the values of all dimensions.
*   DISABLE: aggregates the values of all dimensions.', example='{"DimFilters": [             {               "FilterOpt": "ALL",               "FilterValues": [],               "FilterKey": "rootIp"             }           ]         }', position='Body'),
  labels?: string(name='Labels', description='The tags of the Prometheus alert rule.', example='[  { "Value": "cms_polardb",             "Name": "_aliyun_cloud_product"           }         ]', position='Body'),
  level?: string(name='Level', description='The severity level of the Prometheus alert rule.

*   P1: Alert notifications are sent for major issues that affect the availability of core business, have a huge impact, and may lead to serious consequences.
*   P2: Alert notifications are sent for service errors that affect the system availability with relatively limited impact.
*   P3: Alert notifications are sent for issues that may cause service errors or negative effects, or alert notifications for services that are relatively less important.
*   P4: Alert notifications are sent for low-priority issues that do not affect your business.
*   Default: Alert notifications are sent regardless of alert levels.', example='P2', position='Body'),
  message?: string(name='Message', description='The alert message of the Prometheus alert rule.', example='Namespace: {{$labels.namespace}} / Pod: {{$labels.pod_name}} / Container: {{$labels.container}} Memory usage exceeds 80%. Current value: {{ printf \\\\\\\\\\"%.2f\\\\\\\\\\" $value }}%', position='Body'),
  metricsKey?: string(name='MetricsKey', description='The alert metrics. If you set the **AlertCheckType** parameter to **STATIC** when you create a Prometheus alert rule, you must specify the **MetricsKey** parameter.

> Alert metrics vary depending on the value of the **AlertGroup** parameter. For more information about the correspondence between **AlertGroup** and **MetricsKey**, see the supplementary description.', example='pop.status.error', position='Body'),
  metricsType?: string(name='MetricsType', description='The metric type of the Application Monitoring or Browser Monitoring alert rule. For more information, see the following table.', example='jvm', position='Body'),
  notifyStrategy?: string(name='NotifyStrategy', description='The notification policy.

*   If you set this parameter to null, no notification policy is specified. After you create an alert rule, you can create a notification policy and specify match rules and match conditions. For example, you can specify the name of the alert rule as the match condition. If the alert rule is triggered, an alert event is generated and an alert notification is sent to the contacts or contact groups that are specified in the notification policy.
*   To specify a notification policy, set this parameter to the ID of the notification policy. Application Real-Time Monitoring Service (ARMS) automatically adds a match rule to the notification policy and specifies the ID of the alert rule as the match condition. The name of the alert rule is also displayed. This way, the alert events that are generated based on the alert rule can be matched by the specified notification policy.', example='569xxx', position='Body'),
  pids?: string(name='Pids', description='The process ID (PID) that is associated with the Application Monitoring or Browser Monitoring alert rule.', example='["b590lhguqs@40d8deedfa9******"]', position='Body'),
  promQL?: string(name='PromQL', description='The PromQL statement of the Prometheus alert rule.', example='node_memory_MemAvailable_bytes{} / node_memory_MemTotal_bytes{} * 100', position='Body'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Body'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Body'),
}

model CreateOrUpdateAlertRuleResponseBody = {
  alertRule?: {
    alertCheckType?: string(name='AlertCheckType', description='The alert check type of the Prometheus alert rule. Valid values:

*   STATIC: a static threshold value.
*   CUSTOM: a custom PromQL statement.', example='STATIC'),
    alertGroup?: long(name='AlertGroup', description='The alert contact group ID of the Prometheus alert rule. Valid values:

*   \\-1: custom PromQL
*   1: Kubernetes load
*   15: Kubernetes node', example='-1'),
    alertId?: float(name='AlertId', description='The ID of the alert rule.', example='5510445'),
    alertName?: string(name='AlertName', description='The name of the alert rule.', example='arms-test'),
    alertRuleContent?: {
      alertRuleItems?: [ 
        {
          aggregate?: string(name='Aggregate', description='The aggregation method of the alert condition. Valid values:

*   AVG: calculates the average value
*   SUM: calculates the total value
*   MAX: selects the maximum value
*   MIN: selects the minimum value', example='AVG'),
          metricKey?: string(name='MetricKey', description='The metric of the alert condition.', example='appstat.jvm.non_heap_used'),
          n?: float(name='N', description='Indicates the last N minutes.', example='1'),
          operator?: string(name='Operator', description='The comparison operator that was used to compare the metric value with the threshold. Valid values:

*   CURRENT_GTE: greater than or equal to
*   CURRENT_LTE: less than or equal to
*   PREVIOUS_UP: the increase percentage compared with the last period
*   PREVIOUS_DOWN: the decrease percentage compared with the last period
*   HOH_UP: the increase percentage compared with the last hour
*   HOH_DOWN: the decrease percentage compared with the last hour
*   DOD_UP: the increase percentage compared with the last day
*   DOD_DOWN: the decrease percentage compared with the last day', example='CURRENT_GTE'),
          value?: string(name='Value', description='The threshold of the alert condition.', example='1'),
        }
      ](name='AlertRuleItems', description='The trigger conditions of the Application Monitoring or Browser Monitoring alert rule.'),
      condition?: string(name='Condition', description='The relationship between multiple alert conditions that were specified for the Application Monitoring or Browser Monitoring alert rule. Valid values:

*   OR: meets any of the specified conditions.
*   AND: meets all the specified conditions.', example='"|"'),
    }(name='AlertRuleContent', description='The content of the Application Monitoring or Browser Monitoring alert rule.'),
    alertStatus?: string(name='AlertStatus', description='The status of the alert rule. Valid values:

*   RUNNING
*   STOPPED
*   PAUSED

> The **PAUSED** status indicates that the alert rule was abnormal and was paused by the system. The alert rule might be paused because it was not unique or the associated cluster was deleted.', example='RUNNING'),
    alertType?: string(name='AlertType', description='The type of the alert rule.

*   APPLICATION_MONITORING_ALERT_RULE: an alert rule of Application Monitoring
*   BROWSER_MONITORING_ALERT_RULE: an alert rule of Browser Monitoring
*   PROMETHEUS_MONITORING_ALERT_RULE: an alert rule of Prometheus Service', example='APPLICATION_MONITORING_ALERT_RULE'),
    annotations?: [ 
      {
        name?: string(name='Name', description='The key of the annotation.', example='123'),
        value?: string(name='Value', description='The value of the annotation.', example='abc'),
      }
    ](name='Annotations', description='The annotations of the Prometheus alert rule.'),
    autoAddNewApplication?: boolean(name='AutoAddNewApplication', description='Indicates whether the alert rule was applied to new applications that were created in Application Monitoring or Browser Monitoring. Valid values:

*   `true`: yes
*   `false`: no', example='false'),
    clusterId?: string(name='ClusterId', description='The cluster ID of the Prometheus alert rule.', example='ceba9b9ea5b924dd0b6726d2de6******'),
    createdTime?: long(name='CreatedTime', description='The timestamp generated when the alert rule was created. Unit: seconds.', example='1641438611000'),
    duration?: string(name='Duration', description='The duration of the Prometheus alert rule. Unit: minutes.', example='1'),
    extend?: string(name='Extend', description='The extended fields.', example='{\\\\"alarmContext\\\\":\\\\"{\\\\\\\\\\"content\\\\\\\\\\":\\\\\\\\Alert name: $Alert name\\\\\\\\\\\\nFilter condition: $Filter condition\\\\\\\\\\\\nAlert time: $Alert time\\\\\\\\\\\\nAlert content: $Alert content\\\\\\\\\\\\nNote: The alert persists before you receive an email that reminds you to clear the alert. You will be reminded of the alert again 24 hours later. \\\\\\\\\\",\\\\\\\\\\"subTitle\\\\\\\\\\":\\\\\\\\\\"\\\\\\\\\\"}\\\\",\\\\"alertWays\\\\":\\\\"\\[0,1]\\\\",\\\\"contactGroupIds\\\\":\\\\"381,5075\\\\",\\\\"notice\\\\":\\\\"{\\\\\\\\\\"endTime\\\\\\\\\\":1480607940000,\\\\\\\\\\"noticeEndTime\\\\\\\\\\":1480607940000,\\\\\\\\\\"noticeStartTime\\\\\\\\\\":1480521600000,\\\\\\\\\\"startTime\\\\\\\\\\":1480521600000}\\\\"}'),
    filters?: {
      customSLSFilters?: [ 
        {
          key?: string(name='Key', description='The key of the filter condition.', example='username'),
          opt?: string(name='Opt', description='The logical operator of the filter condition. Valid values:

*   \\=: equal to
*   not: not equal to', example='='),
          show?: boolean(name='Show', description='Indicates whether this filter condition was displayed on the frontend.', example='false'),
          t?: string(name='T', description='The log type of Browser Monitoring. This field was not included in other filter conditions.', example='null'),
          value?: string(name='Value', description='The value of the filter condition.', example='test'),
        }
      ](name='CustomSLSFilters', description='The custom filter condition of the Browser Monitoring alert rule.'),
      customSLSGroupByDimensions?: [ string ](name='CustomSLSGroupByDimensions', description='The information of the aggregation dimension.'),
      customSLSWheres?: [ string ](name='CustomSLSWheres', description='The details of the custom filter condition.'),
      dimFilters?: [ 
        {
          filterKey?: string(name='FilterKey', description='The key of the filter condition.', example='rootIp'),
          filterOpt?: string(name='FilterOpt', description='The logical operator of the filter condition.', example='ALL'),
          filterValues?: [ string ](name='FilterValues', description='The details of the filter condition.'),
        }
      ](name='DimFilters', description='The information about each filter condition of the Application Monitoring or Browser Monitoring alert rule.'),
    }(name='Filters', description='The filter conditions of the Application Monitoring or Browser Monitoring alert rule.'),
    labels?: [ 
      {
        name?: string(name='Name', description='The tag key.', example='123'),
        value?: string(name='Value', description='The tag value.', example='abc'),
      }
    ](name='Labels', description='The tags of the Prometheus alert rule.'),
    level?: string(name='Level', description='The severity level of the Prometheus alert rule.

*   P1: Alert notifications are sent for major issues that affect the availability of core business, have a huge impact, and may lead to serious consequences.
*   P2: Alert notifications are sent for service errors that affect the system availability with relatively limited impact.
*   P3: Alert notifications are sent for issues that may cause service errors or negative effects, or alert notifications for services that are relatively less important.
*   P4: Alert notifications are sent for low-priority issues that do not affect your business.
*   Default: Alert notifications are sent regardless of alert levels.', example='P2'),
    message?: string(name='Message', description='The alert message of the Prometheus alert rule.', example='Namespace: {{$labels.namespace}} / Pod: {{$labels.pod_name}} / Container: {{$labels.container}} Memory usage exceeds 80%. Current value: {{ printf \\\\\\\\\\"%.2f\\\\\\\\\\" $value }}%'),
    metricsType?: string(name='MetricsType', description='The metric type of the Application Monitoring or Browser Monitoring alert rule.', example='JVM'),
    notifyStrategy?: string(name='NotifyStrategy', description='The name of the notification policy.', example='ALERT_MANAGER'),
    pids?: [ string ](name='Pids', description='The process ID (PID) that was associated with the Application Monitoring or Browser Monitoring alert rule.'),
    promQL?: string(name='PromQL', description='The PromQL statement of the Prometheus alert rule.', example='node_memory_MemAvailable_bytes{} / node_memory_MemTotal_bytes{} * 100'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    tags?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Tags'),
    updatedTime?: long(name='UpdatedTime', description='The timestamp generated when the alert rule was updated. Unit: seconds.', example='1641438611000'),
    userId?: string(name='UserId', description='The ID of the Alibaba Cloud account.', example='1131971649******'),
  }(name='AlertRule', description='The details of the alert rule.'),
  requestId?: string(name='RequestId', description='The request ID.', example='337B8F7E-0A64-5768-9225-E9B3CF******'),
}

model CreateOrUpdateAlertRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrUpdateAlertRuleResponseBody(name='body'),
}

async function createOrUpdateAlertRule(request: CreateOrUpdateAlertRuleRequest): CreateOrUpdateAlertRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrUpdateAlertRule', 'POST', '/', 'json', true, 'form', request);
}

model CreateOrUpdateContactRequest {
  contactId?: long(name='ContactId', description='The ID of the alert contact.

*   If you do not specify this parameter, a new alert contact is created.
*   If you specify this parameter, the specified alert contact is modified.', example='123', position='Body'),
  contactName: string(name='ContactName', description='The name of the alert contact.', example='JohnDoe', position='Body'),
  dingRobotUrl?: string(name='DingRobotUrl', description='The webhook URL of the DingTalk chatbot.', example='https://oapi.dingtalk.com/robot/send?access_token=69d4e0******', position='Query'),
  email?: string(name='Email', description='The email address of the alert contact.

> You must specify at least one of the **Phone** and **Email** parameters. Each mobile number or email address can be used for only one alert contact.', example='someone@example.com', position='Body'),
  isEmailVerify?: boolean(name='IsEmailVerify', description='Specifies whether the email address is verified.', example='true', position='Body'),
  phone?: string(name='Phone', description='The mobile number of the alert contact.

> You must specify at least one of the **Phone** and **Email** parameters. Each mobile number or email address can be used for only one alert contact.', example='1381111****', position='Body'),
  reissueSendNotice?: long(name='ReissueSendNotice', description='The operation that you want to perform if phone calls fail to be answered. Valid values:

*   0: No operation is performed.
*   1: A phone call is made again.
*   2: A text message is sent.
*   3 (default value): The global default value is used.', example='3', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxyexli2****', position='Query'),
}

model CreateOrUpdateContactResponseBody = {
  alertContact?: {
    contactId?: float(name='ContactId', description='The ID of the alert contact.', example='123'),
    contactName?: string(name='ContactName', description='The name of the alert contact.', example='JohnDoe'),
    dingRobotUrl?: string(name='DingRobotUrl', description='The webhook URL of the DingTalk chatbot.', example='https://test1.com'),
    email?: string(name='Email', description='The email address of the alert contact.', example='someone@example.com'),
    isVerify?: boolean(name='IsVerify', description='Indicates whether the mobile number was verified. Valid values:

*   `false` (default value): No
*   `true`: Yes

You can call the **SendTTSVerifyLink** operation to verify the mobile number of an alert contact. Only verified mobile numbers can be specified in a notification policy to receive phone calls.', example='false'),
    phone?: string(name='Phone', description='The mobile number of the alert contact.', example='1381111****'),
    reissueSendNotice?: long(name='ReissueSendNotice', description='The operation that you want to perform if phone calls fail to be answered. Valid values: 0: No operation is performed. 1: A phone call is made again. 2: A text message is sent. 3 (default value): The global default value is used.', example='3'),
    isEmailVerify?: boolean(name='isEmailVerify', description='Indicates whether the email address was verified.', example='true'),
  }(name='AlertContact', description='The object of the alert contact.'),
  requestId?: string(name='RequestId', description='The request ID.', example='E9C9DA3D-10FE-472E-9EEF-2D0A3E41****'),
}

model CreateOrUpdateContactResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrUpdateContactResponseBody(name='body'),
}

async function createOrUpdateContact(request: CreateOrUpdateContactRequest): CreateOrUpdateContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrUpdateContact', 'POST', '/', 'json', true, 'form', request);
}

model CreateOrUpdateContactGroupRequest {
  contactGroupId?: long(name='ContactGroupId', description='The ID of the alert contact group.

*   If you do not specify this parameter, an alert contact group is created.
*   If you specify this parameter, the specified alert contact group is modified.', example='123', position='Body'),
  contactGroupName: string(name='ContactGroupName', description='The name of the alert contact group.', example='TestGroup', position='Body'),
  contactIds?: string(name='ContactIds', description='The ID of the contact that you want to add to the contact group. Separate multiple IDs with commas (,).', example='[1,2,3]', position='Body'),
}

model CreateOrUpdateContactGroupResponseBody = {
  alertContactGroup?: {
    contactGroupId?: float(name='ContactGroupId', description='The ID of the alert contact group.', example='123'),
    contactGroupName?: string(name='ContactGroupName', description='The name of the alert contact group.', example='TestGroup'),
    contactIds?: string(name='ContactIds', description='The IDs of the contacts that are included in the alert contact group.', example='[1,2,3]'),
  }(name='AlertContactGroup', description='The information about the alert contact group.'),
  requestId?: string(name='RequestId', description='The request ID.', example='9319A57D-2D9E-472A-B69B-CF3CD16D****'),
}

model CreateOrUpdateContactGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrUpdateContactGroupResponseBody(name='body'),
}

async function createOrUpdateContactGroup(request: CreateOrUpdateContactGroupRequest): CreateOrUpdateContactGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrUpdateContactGroup', 'POST', '/', 'json', true, 'form', request);
}

model CreateOrUpdateEventBridgeIntegrationRequest {
  accessKey?: string(name='AccessKey', description='The AccessKey ID that is used to connect to EventBridge.', example='abc******************', position='Body'),
  accessSecret?: string(name='AccessSecret', description='The AccessKey secret that is used to connect to EventBridge.', example='abc******************', position='Body'),
  description?: string(name='Description', description='The description of the EventBridge integration.', example='test', position='Body'),
  endpoint?: string(name='Endpoint', description='The public endpoint of EventBridge.', example='http://xxxxx', position='Body'),
  eventBusName?: string(name='EventBusName', description='The name of the event bus.', example='EventBus_Test', position='Body'),
  eventBusRegionId?: string(name='EventBusRegionId', description='The region ID of the event bus.', example='cn-hangzhou', position='Body'),
  id?: long(name='Id', description='The ID of the EventBridge integration.

*   If you do not specify this parameter, an EventBridge integration is created.
*   If you specify this parameter, the specified EventBridge integration is modified.', example='123', position='Body'),
  name?: string(name='Name', description='The name of the EventBridge integration.', example='EventBridge_Test', position='Body'),
  source?: string(name='Source', description='The event source.', example='arms', position='Body'),
}

model CreateOrUpdateEventBridgeIntegrationResponseBody = {
  eventBridgeIntegration?: {
    accessKey?: string(name='AccessKey', description='The AccessKey ID that is used to connect to EventBridge.', example='abc******************'),
    accessSecret?: string(name='AccessSecret', description='The AccessKey secret that is used to connect to EventBridge.', example='abc******************'),
    description?: string(name='Description', description='The description of the EventBridge integration.', example='test'),
    endpoint?: string(name='Endpoint', description='The public endpoint of EventBridge.', example='http://xxxxx'),
    eventBusName?: string(name='EventBusName', description='The name of the event bus.', example='EventBus_Test'),
    eventBusRegionId?: string(name='EventBusRegionId', description='The region ID of the event bus.', example='cn-hangzhou'),
    id?: long(name='Id', description='The ID of the EventBridge integration.', example='123'),
    name?: string(name='Name', description='The name of the EventBridge integration.', example='EventBridge_Test'),
    source?: string(name='Source', description='The event source.', example='arms'),
  }(name='EventBridgeIntegration', description='The information about the EventBridge integration.'),
  requestId?: string(name='RequestId', description='The request ID.', example='2B289756-E791-5842-BCBD-AD414C******'),
}

model CreateOrUpdateEventBridgeIntegrationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrUpdateEventBridgeIntegrationResponseBody(name='body'),
}

async function createOrUpdateEventBridgeIntegration(request: CreateOrUpdateEventBridgeIntegrationRequest): CreateOrUpdateEventBridgeIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrUpdateEventBridgeIntegration', 'POST', '/', 'json', true, 'form', request);
}

model CreateOrUpdateIMRobotRequest {
  cardTemplate?: string(name='CardTemplate', description='The configurations of the alert card template. For more information about the parameters in the template, see the following section.', example='{     "button": [         "claim",         "close",         "follow",         "send_itsm",         "block",         "unResolvedIncident"     ],     "field": [         {             "fieldName": "alarmName",             "visible": true         },         {             "fieldName": "notificationPolicy",             "visible": true         },         {             "fieldName": "alarmContent",             "visible": true         },         {             "fieldName": "alarmTime",             "visible": true         },         {             "fieldName": "seriesChart",             "visible": true         },         {             "fieldName": "includeEvent",             "visible": true         },         {             "fieldName": "assigned",             "visible": true         },         {             "fieldName": "similarAlarm",             "visible": true         },         {             "fieldName": "operator",             "visible": true         }     ] }', position='Body'),
  dailyNoc?: boolean(name='DailyNoc', description='Specifies whether to send daily statistics. Valid values:

*   `false` (default): Daily statistics are not sent.
*   `true`: Daily statistics are sent. If you set the value to `true`, the **DailyNocTime** parameter is required.', example='true', position='Body'),
  dailyNocTime?: string(name='DailyNocTime', description='The points in time at which the daily statistics are sent. Separate multiple points in time with commas (,). The points in time are in the HH:SS format. The information that ARMS sends at the specified points in time includes the total number of alerts generated on the current day, the number of cleared alerts, and the number of alerts to be cleared.', example='09:30,17:00', position='Body'),
  dingSignKey?: string(name='DingSignKey', description='The signature key of DingTalk. If you specify a signature key, DingTalk authentication is performed by using the signature key. If you do not specify a signature key, a whitelist is used for authentication by default. The keyword of the whitelist is **Alert**.', example='******', position='Body'),
  enableOutgoing?: boolean(name='EnableOutgoing', description='Specifies whether to enable the Outgoing feature.', example='true', position='Body'),
  robotAddress: string(name='RobotAddress', description='The webhook URL of the IM chatbot.', example='https://oapi.dingtalk.com/robot/send?access_token=e1a049121******', position='Body'),
  robotId?: long(name='RobotId', description='The ID of the IM chatbot.

- If you do not specify the parameter, a new IM chatbot is created.
- If you specify this parameter, the specified IM chatbot is modified.', example='123', position='Body'),
  robotName: string(name='RobotName', description='The name of the IM chatbot.', example='Chatbot name', position='Body'),
  token?: string(name='Token', description='The token required to enable the Outgoing feature.', example='1656558719183be1245ab44********', position='Body'),
  type?: string(name='Type', description='The type of the IM chatbot. Valid values:

*   `dingding`: DingTalk chatbot
*   `wechat`: WeCom chatbot', example='dingding', position='Body'),
}

model CreateOrUpdateIMRobotResponseBody = {
  alertRobot?: {
    cardTemplate?: string(name='CardTemplate', description='The configurations of the alert card template.', example='{     "button": [         "claim",         "close",         "follow",         "send_itsm",         "block",         "unResolvedIncident"     ],     "field": [         {             "fieldName": "alarmName",             "visible": true         },         {             "fieldName": "notificationPolicy",             "visible": true         },         {             "fieldName": "alarmContent",             "visible": true         },         {             "fieldName": "alarmTime",             "visible": true         },         {             "fieldName": "seriesChart",             "visible": true         },         {             "fieldName": "includeEvent",             "visible": true         },         {             "fieldName": "assigned",             "visible": true         },         {             "fieldName": "similarAlarm",             "visible": true         },         {             "fieldName": "operator",             "visible": true         }     ] }'),
    dailyNoc?: boolean(name='DailyNoc', description='Indicates whether daily statistics are sent. Valid values:

*   `false` (default): Daily statistics are not sent.
*   `true`: Daily statistics are sent.', example='true'),
    dailyNocTime?: string(name='DailyNocTime', description='The point in time at which the daily statistics are sent. The information that ARMS sends at the specified points in time includes the total number of alerts generated on the current day, the number of cleared alerts, and the number of alerts to be cleared.', example='09:30,17:00'),
    enableOutgoing?: boolean(name='EnableOutgoing', description='Indicates whether the Outgoing feature is enabled.', example='true'),
    robotAddress?: string(name='RobotAddress', description='The webhook URL of the IM chatbot.', example='https://oapi.dingtalk.com/robot/send?access_token=e1a049121******'),
    robotId?: float(name='RobotId', description='The ID of the IM chatbot.', example='123'),
    robotName?: string(name='RobotName', description='The name of the IM chatbot.', example='Chatbot name'),
    token?: string(name='Token', description='The token required to enable the Outgoing feature.', example='1656558719183be1245ab44********'),
    type?: string(name='Type', description='The type of the IM chatbot. Valid values:

*   `dingding`: DingTalk chatbot
*   `wechat`: WeCom chatbot', example='dingding'),
  }(name='AlertRobot', description='The information about the IM chatbot.'),
  requestId?: string(name='RequestId', description='The request ID.', example='16AF921B-8187-489F-9913-43C808B4****'),
}

model CreateOrUpdateIMRobotResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrUpdateIMRobotResponseBody(name='body'),
}

async function createOrUpdateIMRobot(request: CreateOrUpdateIMRobotRequest): CreateOrUpdateIMRobotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrUpdateIMRobot', 'POST', '/', 'json', true, 'form', request);
}

model CreateOrUpdateNotificationPolicyRequest {
  escalationPolicyId?: long(name='EscalationPolicyId', description='The ID of the escalation policy.', example='123', position='Body'),
  groupRule?: string(name='GroupRule', description='An array of alert event group objects.

*   If you do not specify the groupingFields field, all alerts will be sent to contacts based on `alertname`.

*   If you specify the groupingFields field, alerts with the same field will be sent to contacts in one notification.

    Sample statement:

```

{ 
"groupWait":5,    // The waiting time for grouping. 
"groupInterval":30,     // The time interval of grouping. 
"groupingFields":["alertname"]       // The field that is used to group alert events. 
}
```', example='{ 	"groupWait":5, 	"groupInterval":30, 	"groupingFields":["alertname"] }', position='Body'),
  id?: long(name='Id', description='The ID of the notification policy.

*   If you do not specify this parameter, a new notification policy is created.
*   If you specify this parameter, the specified notification policy is modified.', example='1234', position='Body'),
  integrationId?: long(name='IntegrationId', description='The integration ID of the ticket system to which alerts are pushed.', example='34', position='Body'),
  matchingRules?: string(name='MatchingRules', description='The matching rules. Sample statement:

```

[
 {
 "matchingConditions": [
 { 
 "value": "test",    // The value of the matching condition. 
 "key": "alertname",     // The key of the matching condition. 
 "operator": "eq"   // The logical operator of the matching condition, including eq (equal to), neq (not equal to), in (contains), nin (does not contain), re (regular expression match), and nre (regular expression mismatch).   
 }
 ]
 } 
 ]
```', example='[ 		 { 		 "matchingConditions": [          { 		 "value": "test", 		 "key": "alertname", 		 "operator": "eq"         }       ]     }   ]', position='Body'),
  name: string(name='Name', description='The name of the notification policy.', example='notificationpolicy_test', position='Body'),
  notifyRule: string(name='NotifyRule', description='An array of notification rule objects. Format:

    { 
     "notifyStartTime":"00:00",      // The start time of the notification window. 
     "notifyEndTime":"23:59",       // The end time of the notification window. 
     "notifyChannels":["dingTalk", "email", "sms", "tts", "webhook"],       // The notification methods. Valid values: dingTalk, email, sms, tts, and webhook. 
     "notifyObjects":[{       // An array of notification objects. 
     "notifyObjectType":"CONTACT",       // The type of the notification object. Valid values: CONTACT (contact), CONTACT_GROUP (contact group), ARMS_CONTACT (ARMS contact), ARMS_CONTACT_GROUP (ARMS contact group), DING_ROBOT_GROUP (DingTalk, Lark, WeCom, or IM chatbot), and CONTACT_SCHEDULE (user on duty defined by a schedule). 
     "notifyObjectId":123,       // The ID of the notification object. 
     "notifyObjectName":"test"       // The name of the notification object. 
     "notifyChannels": [ // The notification methods specified for a contact. Valid values: email, sms, and tts.
                    "email",		
                    "sms",
                    "tts"
                ],
     }]', example='{     "notifyStartTime":"00:00",     "notifyEndTime":"23:59",     "notifyChannels":[         "dingTalk",         "email",         "sms",         "tts",         "webhook"     ],     "notifyObjects":[         {             "notifyObjectType":"CONTACT",             "notifyObjectId":123,             "notifyObjectName":"test"         }     ] }', position='Body'),
  notifyTemplate?: string(name='NotifyTemplate', description='The notification template. The default notification template is provided below the table.', example='{{if .commonLabels.clustername }}

 &gt;  Cluster Name: {{ .commonLabels.clustername }} 

 {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}

 &gt;  App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} 

 {{ end }}{{ for .alerts }} &gt;  {{ .annotations.message }} {{if .generatorURL }} [Details]({{.generatorURL}})  {{end}} {{if .annotations._aliyun_arms_insights_analyze_link }}[&lt;font color=\\"#ff0000\\"&gt;diagnostic analysis&lt;/font&gt;]({{ .annotations._aliyun_arms_insights_analyze_link}}){{ end }}{{if  eq "1" .labels._aliyun_arms_denoise_code }} (Important:{{.labels._aliyun_arms_important_reason }}) {{end}}

{{end}}', position='Body'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Body'),
  repeat?: boolean(name='Repeat', description='Specifies whether to resend a notification for a long-lasting unresolved alert. Default value: true. Valid values:

*   `true`: If you set this parameter to `true`, you must set **RepeatInterval**.
*   `false`: If you set this parameter to `false`, you must set **EscalationPolicyId**.', example='true', position='Body'),
  repeatInterval?: long(name='RepeatInterval', description='The time interval at which a notification is resent for a long-lasting unresolved alert. Unit: seconds.', example='600', position='Body'),
  sendRecoverMessage?: boolean(name='SendRecoverMessage', description='Indicates whether the system sends a notification to the contacts when the status of an alert changes to Resolved. Default value: true. Valid values:

*   `true`: The system sends a notification.
*   `false`: The system does not send a notification.', example='true', position='Body'),
}

model CreateOrUpdateNotificationPolicyResponseBody = {
  notificationPolicy?: {
    escalationPolicyId?: long(name='EscalationPolicyId', description='The ID of the escalation policy.', example='123'),
    groupRule?: {
      groupInterval?: long(name='GroupInterval', description='The time interval of grouping. Unit: seconds. Default value: 30.', example='30'),
      groupWait?: long(name='GroupWait', description='The waiting time for grouping. Unit: seconds. Default value: 5.', example='5'),
      groupingFields?: [ string ](name='GroupingFields', description='The field that is used for grouping.'),
    }(name='GroupRule', description='An array of alert event group objects.'),
    id?: long(name='Id', description='The ID of the notification policy.', example='1234'),
    integrationId?: long(name='IntegrationId', description='The integration ID of the ticket system to which alerts are pushed.', example='34'),
    matchingRules?: [ 
      {
        matchingConditions?: [ 
          {
            key?: string(name='Key', description='The key of the matching condition.', example='altertname'),
            operator?: string(name='Operator', description='The logical operator of the matching condition. Valid values:

*   `eq`: equal to
*   `neq`: not equal to
*   `in`: contains
*   `nin`: does not contain
*   `re`: regular expression match
*   `nre`: regular expression mismatch', example='eq'),
            value?: string(name='Value', description='The value of the matching condition.', example='test'),
          }
        ](name='MatchingConditions', description='An array of alert event matching condition objects.'),
      }
    ](name='MatchingRules', description='An array of alert event matching rule objects.'),
    name?: string(name='Name', description='The name of the notification policy.', example='notificationpolicy_test'),
    notifyRule?: {
      notifyChannels?: [ string ](name='NotifyChannels', description='The notification methods. Valid values: 

- `dingTalk`: DingTalk
- `email`: email
- `sms`: text message
- `tts`: phone call
- `webhook`: webhook'),
      notifyEndTime?: string(name='NotifyEndTime', description='The end time of the notification window.', example='23:59'),
      notifyObjects?: [ 
        {
          notifyChannels?: [ string ](name='NotifyChannels', description='通知对象为联系人时的单独的联系方式'),
          notifyObjectId?: long(name='NotifyObjectId', description='The ID of the notification contact.', example='123'),
          notifyObjectName?: string(name='NotifyObjectName', description='The name of the notification contact.', example='test'),
          notifyObjectType?: string(name='NotifyObjectType', description='The type of the notification contact. Valid values: 

- CONTACT: an individual contact
- CONTACT_GROUP: a contact group
- DING_ROBOT: an instant messaging (IM) robot
- CONTACT_SCHEDULE: a person on duty based on an established schedule', example='CONTACT'),
        }
      ](name='NotifyObjects', description='An array of notification contact objects.'),
      notifyStartTime?: string(name='NotifyStartTime', description='The start time of the notification window.', example='00:00'),
    }(name='NotifyRule', description='An array of notification rule objects.'),
    notifyTemplate?: {
      emailContent?: string(name='EmailContent', description='The content of the alert notification sent through email.', example='Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
Notification Policy: {{ .dispatchRuleName }}
Alert Time: {{ .startTime }}
Description: {{ for .alerts }} {{ .annotations.message }}  {{if .generatorURL }}  &lt;a href="{{.generatorURL}}" > Details&lt;/a&gt;
 {{ end }} {{ end }}'),
      emailRecoverContent?: string(name='EmailRecoverContent', description='The content of the alert resolution notification sent through email.', example='Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
Notification Policy: {{ .dispatchRuleName }}
Recover Time: {{ .endTime }}
Description: {{ for .alerts }} {{ .annotations.message }}  {{if .generatorURL }} &lt;a href="{{.generatorURL}}" > Details&lt;/a&gt;
 {{ end }} {{ end }}'),
      emailRecoverTitle?: string(name='EmailRecoverTitle', description='The title of the alert resolution notification sent through email.', example='{{ .commonLabels.alertname }}'),
      emailTitle?: string(name='EmailTitle', description='The title of the alert notification sent through email.', example='{{ .commonLabels.alertname }}'),
      robotContent?: string(name='RobotContent', description='The content of the alert notification sent by the IM robot.', example='{{if .commonLabels.clustername }}

 &gt;  Cluster Name: {{ .commonLabels.clustername }} 

 {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}

 &gt;  App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} 

 {{ end }}{{ for .alerts }} &gt;  {{ .annotations.message }} {{if .generatorURL }} [Details]({{.generatorURL}})  {{end}} {{if .annotations._aliyun_arms_insights_analyze_link }}[&lt;font color=\\"#ff0000\\"&gt;diagnostic analysis&lt;/font&gt;]({{ .annotations._aliyun_arms_insights_analyze_link}}){{ end }}{{if  eq "1" .labels._aliyun_arms_denoise_code }} (Important:{{.labels._aliyun_arms_important_reason }}) {{end}}

{{end}}'),
      smsContent?: string(name='SmsContent', description='The content of the alert notification sent through text message.', example='{{ .level }}Alert Occurs
Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
Notification Policy: {{ .dispatchRuleName }}
Alert Time: {{ .startTime }}
Description: {{ for .alerts }} {{ .annotations.message }} {{ end }}'),
      smsRecoverContent?: string(name='SmsRecoverContent', description='The content of the alert resolution notification sent through text message.', example='Alert Recovery Notification
Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
Notification Policy: {{ .dispatchRuleName }}
Recover Time: {{ .endTime }}
Description: {{ for .alerts }} {{ .annotations.message }} {{ end }}'),
      ttsContent?: string(name='TtsContent', description='The content of the alert notification by phone.', example='Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
Notification Policy: {{ .dispatchRuleName }}
Alert Time: {{ .startTime }}
Description: {{ for .alerts }} {{ .annotations.message }} {{ end }}'),
      ttsRecoverContent?: string(name='TtsRecoverContent', description='The content of the alert resolution notification by phone.', example='Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
Notification Policy: {{ .dispatchRuleName }}
Recover Time: {{ .endTime }}
Description: {{ for .alerts }} {{ .annotations.message }} {{ end }}'),
    }(name='NotifyTemplate', description='An array of notification template objects.'),
    repeat?: boolean(name='Repeat', description='Indicates whether a notification is resent for a long-lasting unresolved alert. Default value: true. Valid values:  

- `true`: The system resends a notification for a long-lasting unresolved alert at a specified time interval.
- `false`: The system sends a notification for a long-lasting unresolved alert based on an escalation policy.', example='true'),
    repeatInterval?: long(name='RepeatInterval', description='The time interval at which a notification is resent for a long-lasting unresolved alert. Unit: seconds.', example='600'),
    sendRecoverMessage?: boolean(name='SendRecoverMessage', description='Indicates whether the system sends a notification to the contacts when the status of an alert changes to Resolved. Default value: true. Valid values:   

- `true`: The system sends a notification.
- `false`: The system does not send a notification.', example='true'),
  }(name='NotificationPolicy', description='An array of notification policy objects.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
}

model CreateOrUpdateNotificationPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrUpdateNotificationPolicyResponseBody(name='body'),
}

async function createOrUpdateNotificationPolicy(request: CreateOrUpdateNotificationPolicyRequest): CreateOrUpdateNotificationPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrUpdateNotificationPolicy', 'POST', '/', 'json', true, 'form', request);
}

model CreateOrUpdateSilencePolicyRequest {
  id?: long(name='Id', description='The ID of the silence policy.

*   If you do not configure this parameter, a new silence policy is created.
*   If you configure this parameter, the specified silence policy is modified.', example='1234', position='Body'),
  matchingRules?: string(name='MatchingRules', description='The matching rules. The following code shows the format of matching rules:

    [
         {
    	 "matchingConditions": [
    	 {
    	 "value": "test", // The value of the matching condition. 
    	 "key": "altertname", // The key of the matching condition. 
    	 "operator": "eq" // The logical operator of the matching condition, including eq (equal to), neq (not equal to), in (contains), nin (does not contain), re (regular expression match), and nre (regular expression mismatch).   
    	 }
    	 ]
         }
    	 ]', example='[ 	 { 	 "matchingConditions": [ 	 { 	 "value": "test", 	 "key": "altertname", 	 "operator": "eq" 	 } 	 ]      } 	 ]', position='Body'),
  name: string(name='Name', description='The name of the silence policy.', example='silencepolicy_test', position='Body'),
  regionId?: string(name='RegionId', position='Body'),
}

model CreateOrUpdateSilencePolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
  silencePolicy?: {
    id?: long(name='Id', description='The ID of the silence policy.', example='1234'),
    matchingRules?: [ 
      {
        matchingConditions?: [ 
          {
            key?: string(name='Key', description='The key of the matching condition.', example='altertname'),
            operator?: string(name='Operator', description='The logical operator of the matching condition. Valid values:

*   `eq`: equal to
*   `neq`: not equal to
*   `in`: contains
*   `nin`: does not contain
*   `re`: regular expression match
*   `nre`: regular expression mismatch', example='eq'),
            value?: string(name='Value', description='The value of the matching condition.', example='test'),
          }
        ](name='MatchingConditions', description='A list of matching conditions.'),
      }
    ](name='MatchingRules', description='A list of matching rules.'),
    name?: string(name='Name', description='The name of the silence policy.', example='silencepolicy_test'),
  }(name='SilencePolicy', description='A list of silence policies.'),
}

model CreateOrUpdateSilencePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrUpdateSilencePolicyResponseBody(name='body'),
}

async function createOrUpdateSilencePolicy(request: CreateOrUpdateSilencePolicyRequest): CreateOrUpdateSilencePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrUpdateSilencePolicy', 'POST', '/', 'json', true, 'form', request);
}

model CreateOrUpdateWebhookContactRequest {
  bizHeaders?: string(name='BizHeaders', description='The HTTP request headers.', example='[{"Content-Type":"application/json;charset=utf-8"}]', position='Body'),
  bizParams?: string(name='BizParams', description='The parameters in the HTTP request.', example='[{"content":"mike"}]', position='Body'),
  body?: string(name='Body', description='The notification template that is sent when an alert is triggered. This parameter is required if the **Method** parameter is set to **Post**. You can use the `$content` placeholder to specify the notification content. The content cannot exceed 500 characters in length. For more information, see [Variable description of a notification template](~~251834~~).\\\\', example='{ "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Alert time":"{{ .startTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }', position='Body'),
  method: string(name='Method', description='The HTTP request method.

*   Post
*   Get', example='Post', position='Body'),
  recoverBody?: string(name='RecoverBody', description='The notification template that is sent when an alert is resolved. This parameter is required if the **Method** parameter is set to **Post**. You can use the `$content` placeholder to specify the notification content. The content cannot exceed 500 characters in length. For more information, see [Variable description of a notification template](~~251834~~).', example='{ "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Recovery time":"{{ .endTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }', position='Body'),
  url: string(name='Url', description='The URL of the HTTP request **method**.', example='https://oapi.dingtalk.com/robot/send?access_token=e1a049121******', position='Body'),
  webhookId?: long(name='WebhookId', description='The ID of the webhook alert contact.

*   If you do not specify this parameter, a new webhook alert contact is created.
* If you specify this parameter, the specified webhook alert contact is modified.', example='123', position='Body'),
  webhookName: string(name='WebhookName', description='The name of the webhook alert contact.', example='Webhook alert', position='Body'),
}

model CreateOrUpdateWebhookContactResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='16AF921B-8187-489F-9913-43C808B4****'),
  webhookContact?: {
    webhook?: {
      bizHeaders?: string(name='BizHeaders', description='The HTTP request headers.', example='[{"Content-Type":"application/json;charset=utf-8"}]'),
      bizParams?: string(name='BizParams', description='The parameters in the HTTP request.', example='[{"content":"mike"}]'),
      body?: string(name='Body', description='The alert notification template.', example='{ "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Alert time":"{{ .startTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }'),
      method?: string(name='Method', description='The HTTP request method.

*   Post
*   Get', example='Post'),
      recoverBody?: string(name='RecoverBody', description='The notification template for clearing alerts.', example='{ "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Recovery time":"{{ .endTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }'),
      url?: string(name='Url', description='The URL of the request method.', example='https://oapi.dingtalk.com/robot/send?access_token=e1a049121******'),
    }(name='Webhook', description='The information about the webhook alert contact.'),
    webhookId?: float(name='WebhookId', description='The ID of the webhook alert contact.', example='123'),
    webhookName?: string(name='WebhookName', description='The name of the webhook alert contact.', example='Webhook alert'),
  }(name='WebhookContact', description='The returned webhook alert contact.'),
}

model CreateOrUpdateWebhookContactResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrUpdateWebhookContactResponseBody(name='body'),
}

async function createOrUpdateWebhookContact(request: CreateOrUpdateWebhookContactRequest): CreateOrUpdateWebhookContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrUpdateWebhookContact', 'POST', '/', 'json', true, 'form', request);
}

model CreatePrometheusAlertRuleRequest {
  alertName: string(name='AlertName', example='Prometheus_Alert', position='Query'),
  annotations?: string(name='Annotations', example='[{"Value": "xxx","Name": "description"}]', position='Query'),
  clusterId: string(name='ClusterId', example='c0bad479465464e1d8c1e641b0afb****', position='Query'),
  dispatchRuleId?: long(name='DispatchRuleId', example='10282', position='Query'),
  duration: string(name='Duration', position='Query'),
  expression: string(name='Expression', example='100 * (sum(rate(container_cpu_usage_seconds_total[1m])) by (pod_name) / sum(label_replace(kube_pod_container_resource_limits_cpu_cores, \\"pod_name\\", \\"$1\\", \\"pod\\", \\"(.*)\\")) by (pod_name))>75', position='Query'),
  labels?: string(name='Labels', example='[{"Value": "critical","Name": "severity"}]', position='Query'),
  message: string(name='Message', position='Query'),
  notifyType?: string(name='NotifyType', example='ALERT_MANAGER', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Query'),
  type?: string(name='Type', example='101', position='Query'),
}

model CreatePrometheusAlertRuleResponseBody = {
  code?: long(name='Code'),
  message?: string(name='Message'),
  prometheusAlertRule?: {
    alertId?: long(name='AlertId', example='3888704'),
    alertName?: string(name='AlertName', example='Prometheus_Alert'),
    annotations?: [ 
      {
        name?: string(name='Name', example='message'),
        value?: string(name='Value'),
      }
    ](name='Annotations'),
    clusterId?: string(name='ClusterId', example='c0bad479465464e1d8c1e641b0afb****'),
    dispatchRuleId?: long(name='DispatchRuleId', example='10282'),
    duration?: string(name='Duration'),
    expression?: string(name='Expression', example='100 * (sum(rate(container_cpu_usage_seconds_total[1m])) by (pod_name) / sum(label_replace(kube_pod_container_resource_limits_cpu_cores, \\"pod_name\\", \\"$1\\", \\"pod\\", \\"(.*)\\")) by (pod_name))>75'),
    labels?: [ 
      {
        name?: string(name='Name', example='severity'),
        value?: string(name='Value', example='critical'),
      }
    ](name='Labels'),
    message?: string(name='Message'),
    notifyType?: string(name='NotifyType', example='ALERT_MANAGER'),
    status?: int32(name='Status', example='1'),
    type?: string(name='Type'),
  }(name='PrometheusAlertRule'),
  requestId?: string(name='RequestId', example='9FEA6D00-317F-45E3-9004-7FB8B0B7****'),
  success?: boolean(name='Success'),
}

model CreatePrometheusAlertRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePrometheusAlertRuleResponseBody(name='body'),
}

async function createPrometheusAlertRule(request: CreatePrometheusAlertRuleRequest): CreatePrometheusAlertRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePrometheusAlertRule', 'POST', '/', 'json', false, 'json', request);
}

model CreatePrometheusInstanceRequest {
  allSubClustersSuccess?: boolean(name='AllSubClustersSuccess', position='Query'),
  clusterId?: string(name='ClusterId', description='The cluster ID. This parameter is required if you set the ClusterType parameter to aliyun-cs��.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  clusterName?: string(name='ClusterName', description='The name of the cluster. This parameter is required if you set the ClusterType parameter to remote-write, ecs, or global-view.', example='clusterNameOfTest', position='Query'),
  clusterType: string(name='ClusterType', description='The type of the Prometheus instance. The following types are provided: remote-write (Prometheus instance for Remote Write) ecs (Prometheus instance for ECS) cloud-monitor� (Prometheus instance for Alibaba Cloud services in China) cloud-product (Prometheus instance for Alibaba Cloud services outside China) global-view (Prometheus instance for GlobalView) aliyun-cs�� (Prometheus instances for Container Service)', example='remote-write', position='Query'),
  grafanaInstanceId?: string(name='GrafanaInstanceId', description='The ID of the Grafana dedicated instance. This parameter is available if you set the ClusterType parameter to ecs.', example='grafana-bp1*****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. If you create a Prometheus instance for cloud services in China, set the value to cn-shanghai.', example='cn-shanghai', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the custom resource group. You can configure this parameter to bind the instance to the resource group.', example='rg-acfmxyexli2****', position='Query'),
  securityGroupId?: string(name='SecurityGroupId', description='The security group. This parameter is required if you set the clusterType parameter to ecs or create an ASK managed cluster.', example='sg-bp1********', position='Query'),
  subClustersJson?: string(name='SubClustersJson', description='The child instances of the global aggregation instance. The value is a JSON string.', example='The information about the instances to be aggregated. This parameter must be specified when clusterType is set to global-view. Example: \\[ { "headers":{ }, "regionId":"cn-hangzhou", "sourceType":"AlibabaPrometheus", "extras":{ }, "clusterId":"c39a1048921e04f\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*", "sourceName":"arms-luyao-test", "dataSource":"", "userId":"1672753\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*" }, { "headers":{ }, "regionId":"cn-beijing", "sourceType":"AlibabaPrometheus", "extras":{ }, "clusterId":"c6b6485496d5b40\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*", "sourceName":"agent-321-test", "dataSource":"", "userId":"1672753\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*" }, { "headers":{ }, "regionId":"cn-zhangjiakou", "sourceType":"AlibabaPrometheus", "extras":{ }, "clusterId":"c261a4f3200c446\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*", "sourceName":"zaifeng-cardinality-01", "dataSource":"", "userId":"1672753\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*" } ]', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', description='The tags of the instance. You can configure this parameter to manage tags for the instance.', example='[
    {
        "labelName":"labelValue"
    },
    {
        "testName":"clusterA"
    }
]', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The vSwitch. This parameter is required if you set the clusterType parameter to ecs or create an ASK managed cluster.', example='vsw-bp1*********', position='Query'),
  vpcId?: string(name='VpcId', description='The virtual private cloud (VPC). This parameter is required if you set the clusterType parameter to ecs or create a serverless Kubernetes (ASK) managed cluster.', example='vpc-rpn**********', position='Query'),
}

model CreatePrometheusInstanceResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned for the request. Valid values:

*   `2XX`: The request is successful.
*   `3XX`: A redirection message is returned.
*   `4XX`: The request is invalid.
*   `5XX`: A server error occurs.', example='200'),
  data?: string(name='Data', description='The ID of the created Prometheus instance.', example='qduukd****'),
  message?: string(name='Message', description='The error message returned if the call fails.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='70675725-8F11-4817-8106-CFE0AD71****'),
}

model CreatePrometheusInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePrometheusInstanceResponseBody(name='body'),
}

async function createPrometheusInstance(request: CreatePrometheusInstanceRequest): CreatePrometheusInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePrometheusInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreatePrometheusMonitoringRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  configYaml: string(name='ConfigYaml', description='The monitoring configuration. Specify a YAML string.', example='Please refer to the supplementary explanation of the request parameters.', position='Body'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  status?: string(name='Status', description='The status of the monitoring configuration. Valid values: run and stop. 
When not transmitted, the default value: run.
Probe does not support status, this field set empty.', example='run', position='Query'),
  type: string(name='Type', description='The type of the monitoring configuration. 
Valid values for a Prometheus instance for Container Service: ServiceMonitor, PodMonitor, CustomJob, and Probe. 
Valid values for a Prometheus instance for ECS: CustomJob and Probe.', example='serviceMonitor', position='Query'),
}

model CreatePrometheusMonitoringResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The name of the remote write configuration that was added, or the exception information.', example='name1'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='21E85B16-75A6-429A-9F65-8AAC9A54****'),
}

model CreatePrometheusMonitoringResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePrometheusMonitoringResponseBody(name='body'),
}

async function createPrometheusMonitoring(request: CreatePrometheusMonitoringRequest): CreatePrometheusMonitoringResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePrometheusMonitoring', 'POST', '/', 'json', true, 'form', request);
}

model CreateRetcodeAppRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxyexli2****', position='Query'),
  retcodeAppName: string(name='RetcodeAppName', example='SdkTest', position='Query'),
  retcodeAppType: string(name='RetcodeAppType', example='mini_dd', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', example='TestKey'),
      value?: string(name='Value', example='TestValue'),
    }
  ](name='Tags', position='Query'),
}

model CreateRetcodeAppResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A5EC8221-08F2-4C95-9AF1-49FD998C647A'),
  retcodeAppDataBean?: {
    appId?: long(name='AppId', example='135143'),
    pid?: string(name='Pid', example='aokcdqn3ly@a195c6d6421****'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxyexli2****'),
    tags?: {
      tags?: [ 
      {
        key?: string(name='Key', example='TestKey'),
        value?: string(name='Value', example='TestValue'),
      }
    ](name='Tags')
    }(name='Tags'),
  }(name='RetcodeAppDataBean'),
  success?: boolean(name='Success'),
}

model CreateRetcodeAppResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRetcodeAppResponseBody(name='body'),
}

async function createRetcodeApp(request: CreateRetcodeAppRequest): CreateRetcodeAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRetcodeApp', 'POST', '/', 'json', false, 'json', request);
}

model CreateSyntheticTaskRequest {
  commonParam?: {
    alarmFlag?: string(name='AlarmFlag', example='1'),
    alertList?: [ 
      {
        isCritical?: long(name='IsCritical', example='true'),
        name?: string(name='Name', example='PING_SET'),
        symbols?: long(name='Symbols', example='1'),
      }
    ](name='AlertList'),
    alertNotifierId?: string(name='AlertNotifierId', example='123'),
    alertPolicyId?: string(name='AlertPolicyId', example='1234'),
    monitorSamples?: long(name='MonitorSamples', example='0'),
    startExecutionTime?: long(name='StartExecutionTime', example='2022-07-20 10'),
  }(name='CommonParam', shrink='json', position='Query'),
  download?: {
    connectionTimeout?: double(name='ConnectionTimeout', example='200'),
    downloadCustomHeaderContent?: string(name='DownloadCustomHeaderContent'),
    downloadCustomHost?: long(name='DownloadCustomHost', example='1'),
    downloadCustomHostIp?: string(name='DownloadCustomHostIp', example='ipv4:192.168.2.1,192.168.2.5:img.a.com|192.168.2.1[8080]:img.a.com'),
    downloadIgnoreCertificateError?: string(name='DownloadIgnoreCertificateError'),
    downloadKernel?: long(name='DownloadKernel', example='1'),
    downloadRedirection?: long(name='DownloadRedirection'),
    downloadTransmissionSize?: long(name='DownloadTransmissionSize'),
    monitorTimeout?: long(name='MonitorTimeout'),
    quickProtocol?: string(name='QuickProtocol', example='1'),
    validateKeywords?: string(name='ValidateKeywords'),
    verifyWay?: long(name='VerifyWay', example='0'),
    whiteList?: string(name='WhiteList', example='[{\\"src\\":\\"211.154.166.174\\"}]'),
  }(name='Download', shrink='json', position='Query'),
  extendInterval?: {
    days?: [ long ](name='Days'),
    endHour?: long(name='EndHour', example='23'),
    endMinute?: long(name='EndMinute', example='00'),
    endTime?: string(name='EndTime', example='2022-08-20 10'),
    startHour?: long(name='StartHour', example='00'),
    startMinute?: long(name='StartMinute', example='00'),
    startTime?: string(name='StartTime', example='2022-07-20 10'),
  }(name='ExtendInterval', shrink='json', position='Query'),
  intervalTime: string(name='IntervalTime', example='5', position='Query'),
  intervalType: string(name='IntervalType', example='0', position='Query'),
  ipType: long(name='IpType', example='0', position='Query'),
  monitorList: [ 
    {
      cityCode: long(name='CityCode', example='1100101'),
      monitorType: long(name='MonitorType', example='IDC'),
      netServiceId: long(name='NetServiceId', example='18'),
    }
  ](name='MonitorList', shrink='json', position='Query'),
  navigation?: {
    DNSHijackWhiteList?: string(name='DNSHijackWhiteList'),
    elementBlacklist?: string(name='ElementBlacklist'),
    executeActiveX?: long(name='ExecuteActiveX', example='3'),
    executeApplication?: long(name='ExecuteApplication', example='1'),
    executeScript?: long(name='ExecuteScript', example='1'),
    filterInvalidIP?: long(name='FilterInvalidIP', example='1'),
    flowHijackJumpTimes?: long(name='FlowHijackJumpTimes'),
    flowHijackLogo?: string(name='FlowHijackLogo'),
    monitorTimeout?: string(name='MonitorTimeout', example='20'),
    navAutomaticScrolling?: string(name='NavAutomaticScrolling', example='1'),
    navCustomHeader?: string(name='NavCustomHeader', example='0'),
    navCustomHeaderContent?: string(name='NavCustomHeaderContent', example='Host:www.example.com|Referer:www.example.com'),
    navCustomHost?: long(name='NavCustomHost', example='1'),
    navCustomHostIp?: string(name='NavCustomHostIp', example='ipv4:192.168.2.1,192.168.2.5:img.a.com|192.168.2.1[8080]:img.a.com'),
    navDisableCache?: long(name='NavDisableCache', example='1'),
    navDisableCompression?: string(name='NavDisableCompression', example='1'),
    navIgnoreCertificateError?: long(name='NavIgnoreCertificateError', example='1'),
    navRedirection?: long(name='NavRedirection', example='1'),
    navReturnElement?: long(name='NavReturnElement', example='2'),
    pageTamper?: string(name='PageTamper'),
    processName?: string(name='ProcessName', example='ssh'),
    QUICDomain?: string(name='QUICDomain', example='www.example.com'),
    QUICVersion?: long(name='QUICVersion', example='0'),
    requestHeader?: long(name='RequestHeader', example='0'),
    responseHeader?: long(name='ResponseHeader', example='0'),
    slowElementThreshold?: double(name='SlowElementThreshold', example='5'),
    verifyStringBlacklist?: string(name='VerifyStringBlacklist'),
    verifyStringWhiteList?: string(name='VerifyStringWhiteList'),
    waitCompletionTime?: double(name='WaitCompletionTime'),
  }(name='Navigation', shrink='json', position='Query'),
  net?: {
    netDNSNs?: string(name='NetDNSNs', example='114.114.XX.XX'),
    netDNSQueryMethod?: long(name='NetDNSQueryMethod', example='1'),
    netDNSServer?: long(name='NetDNSServer', example='0'),
    netDNSSwitch?: long(name='NetDNSSwitch', example='1'),
    netDNSTimeout?: long(name='NetDNSTimeout', example='5'),
    netDigSwitch?: long(name='NetDigSwitch', example='0'),
    netICMPActive?: long(name='NetICMPActive', example='0'),
    netICMPDataCut?: long(name='NetICMPDataCut', example='0'),
    netICMPInterval?: long(name='NetICMPInterval', example='1'),
    netICMPNum?: long(name='NetICMPNum', example='4'),
    netICMPSize?: long(name='NetICMPSize', example='32'),
    netICMPSwitch?: long(name='NetICMPSwitch', example='1'),
    netICMPTimeout?: long(name='NetICMPTimeout'),
    netTraceRouteNum?: long(name='NetTraceRouteNum', example='20'),
    netTraceRouteSwitch?: long(name='NetTraceRouteSwitch', example='1'),
    netTraceRouteTimeout?: long(name='NetTraceRouteTimeout', example='60'),
    whiteList?: string(name='WhiteList', example='www.aliyun.com:202.0.3.55|203.3.44.67'),
  }(name='Net', shrink='json', position='Query'),
  protocol?: {
    characterEncoding?: long(name='CharacterEncoding', example='0'),
    customHost?: long(name='CustomHost', example='1'),
    customHostIp?: string(name='CustomHostIp', example='ipv4:192.168.2.1,192.168.2.5:img.a.com|192.168.2.1[8080]:img.a.com'),
    protocolConnectionTime?: long(name='ProtocolConnectionTime', example='3'),
    protocolMonitorTimeout?: string(name='ProtocolMonitorTimeout', example='30'),
    receivedDataSize?: long(name='ReceivedDataSize'),
    requestContent?: {
      body?: {
        formData?: [ 
          {
            key?: string(name='Key', example='appId'),
            value?: string(name='Value', example='3425'),
          }
        ](name='FormData'),
        language?: string(name='Language', example='json'),
        mode?: string(name='Mode', example='form-data'),
        raw?: string(name='Raw', example='content'),
        urlEncoding?: [ 
          {
            key?: string(name='Key', example='appId'),
            value?: string(name='Value', example='11080'),
          }
        ](name='UrlEncoding'),
      }(name='Body'),
      header?: [ 
        {
          key?: string(name='Key', example='regionId'),
          value?: string(name='Value', example='cn-hangzhou'),
        }
      ](name='Header'),
      method?: string(name='Method', example='POST'),
    }(name='RequestContent'),
    verifyContent?: string(name='VerifyContent'),
    verifyWay?: long(name='VerifyWay', example='0'),
  }(name='Protocol', shrink='json', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  taskName: string(name='TaskName', position='Query'),
  taskType: long(name='TaskType', example='0', position='Query'),
  updateTask?: boolean(name='UpdateTask', example='false', position='Query'),
  url: string(name='Url', example='https://www.example.com', position='Query'),
}

model CreateSyntheticTaskResponseBody = {
  code?: string(name='Code', example='1001'),
  data?: {
    taskId?: long(name='TaskId', example='1234'),
  }(name='Data'),
  msg?: string(name='Msg', example='null'),
  requestId?: string(name='RequestId', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
}

model CreateSyntheticTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSyntheticTaskResponseBody(name='body'),
}

async function createSyntheticTask(request: CreateSyntheticTaskRequest): CreateSyntheticTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSyntheticTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateWebhookRequest {
  body: string(name='Body', position='Query'),
  contactName: string(name='ContactName', position='Query'),
  httpHeaders?: string(name='HttpHeaders', example='[{"Content-Type":"application/json"}]', position='Query'),
  httpParams?: string(name='HttpParams', example='[{"name":"mike"}]', position='Query'),
  method: string(name='Method', example='Post', position='Query'),
  recoverBody?: string(name='RecoverBody', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  url: string(name='Url', example='https://oapi.dingtalk.com/robot/send?access_token=e1a049121ddbfce1ca963d115ef88cc7219583c4fb79fe6e398fbfb688******', position='Query'),
}

model CreateWebhookResponseBody = {
  contactId?: string(name='ContactId', example='48716'),
  requestId?: string(name='RequestId', example='16AF921B-8187-489F-9913-43C808B4****'),
}

model CreateWebhookResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWebhookResponseBody(name='body'),
}

async function createWebhook(request: CreateWebhookRequest): CreateWebhookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWebhook', 'POST', '/', 'json', false, 'json', request);
}

model DelAuthTokenRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DelAuthTokenResponseBody = {
  data?: string(name='Data', description='Indicates whether the call was successful.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='A5EC8221-08F2-4C95-9AF1-49FD998C647A'),
}

model DelAuthTokenResponse = {
  headers: map[string]string(name='headers'),
  body: DelAuthTokenResponseBody(name='body'),
}

async function delAuthToken(request: DelAuthTokenRequest): DelAuthTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DelAuthToken', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAlertContactRequest {
  contactId: long(name='ContactId', example='123', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteAlertContactResponseBody = {
  isSuccess?: boolean(name='IsSuccess', example='true'),
  requestId?: string(name='RequestId', example='78901766-3806-4E96-8E47-CFEF59E4****'),
}

model DeleteAlertContactResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAlertContactResponseBody(name='body'),
}

async function deleteAlertContact(request: DeleteAlertContactRequest): DeleteAlertContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAlertContact', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAlertContactGroupRequest {
  contactGroupId: long(name='ContactGroupId', example='123', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteAlertContactGroupResponseBody = {
  isSuccess?: boolean(name='IsSuccess', example='true'),
  requestId?: string(name='RequestId', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model DeleteAlertContactGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAlertContactGroupResponseBody(name='body'),
}

async function deleteAlertContactGroup(request: DeleteAlertContactGroupRequest): DeleteAlertContactGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAlertContactGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAlertRuleRequest {
  alertId: long(name='AlertId', description='Indicates whether the alert rule was successfully deleted.

*   `true`: The specified data is deleted.
*   `false`: The specified data fails to be deleted.', example='123', position='Query'),
}

model DeleteAlertRuleResponseBody = {
  isSuccess?: boolean(name='IsSuccess', example='true'),
  requestId?: string(name='RequestId', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model DeleteAlertRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAlertRuleResponseBody(name='body'),
}

async function deleteAlertRule(request: DeleteAlertRuleRequest): DeleteAlertRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAlertRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAlertRulesRequest {
  alertIds: string(name='AlertIds', example='[123, 234]', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteAlertRulesResponseBody = {
  isSuccess?: boolean(name='IsSuccess', example='true'),
  requestId?: string(name='RequestId', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model DeleteAlertRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAlertRulesResponseBody(name='body'),
}

async function deleteAlertRules(request: DeleteAlertRulesRequest): DeleteAlertRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAlertRules', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCmsExporterRequest {
  clusterId: string(name='ClusterId', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteCmsExporterResponseBody = {
  data?: string(name='Data', example='success'),
  requestId?: string(name='RequestId', example='27E653FA-5958-45BE-8AA9-14D884DC****'),
}

model DeleteCmsExporterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCmsExporterResponseBody(name='body'),
}

async function deleteCmsExporter(request: DeleteCmsExporterRequest): DeleteCmsExporterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCmsExporter', 'POST', '/', 'json', false, 'json', request);
}

model DeleteContactRequest {
  contactId: long(name='ContactId', description='The operation that you want to perform. Set the value to **DeleteContact**.', example='123', position='Query'),
}

model DeleteContactResponseBody = {
  isSuccess?: boolean(name='IsSuccess', example='true'),
  requestId?: string(name='RequestId', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model DeleteContactResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteContactResponseBody(name='body'),
}

async function deleteContact(request: DeleteContactRequest): DeleteContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteContact', 'POST', '/', 'json', false, 'json', request);
}

model DeleteContactGroupRequest {
  contactGroupId: long(name='ContactGroupId', example='123', position='Query'),
}

model DeleteContactGroupResponseBody = {
  isSuccess?: boolean(name='IsSuccess', example='true'),
  requestId?: string(name='RequestId', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model DeleteContactGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteContactGroupResponseBody(name='body'),
}

async function deleteContactGroup(request: DeleteContactGroupRequest): DeleteContactGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteContactGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDispatchRuleRequest {
  id: string(name='Id', example='12345', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteDispatchRuleResponseBody = {
  requestId?: string(name='RequestId', example='16AF921B-8187-489F-9913-43C808B4****'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDispatchRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDispatchRuleResponseBody(name='body'),
}

async function deleteDispatchRule(request: DeleteDispatchRuleRequest): DeleteDispatchRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDispatchRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEventBridgeIntegrationRequest {
  id?: long(name='Id', description='The ID of the EventBridge integration. You can call the **ListEventBridgeIntegrations** operation to query the ID.', example='123', position='Body'),
}

model DeleteEventBridgeIntegrationResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the EventBridge integration is deleted.

*   `true`
*   `false`', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='2B289756-E791-5842-BCBD-AD414C******'),
}

model DeleteEventBridgeIntegrationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEventBridgeIntegrationResponseBody(name='body'),
}

async function deleteEventBridgeIntegration(request: DeleteEventBridgeIntegrationRequest): DeleteEventBridgeIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEventBridgeIntegration', 'POST', '/', 'json', true, 'form', request);
}

model DeleteGrafanaResourceRequest {
  clusterId: string(name='ClusterId', description='The instance ID.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Body'),
  clusterName: string(name='ClusterName', description='The instance name.', example='clusterNameOfTest', position='Body'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DeleteGrafanaResourceResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', description='The returned message.', example='delete success.'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='771DC66C-C5E0-59BC-A983-DD18FEE9EFFA'),
}

model DeleteGrafanaResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGrafanaResourceResponseBody(name='body'),
}

async function deleteGrafanaResource(request: DeleteGrafanaResourceRequest): DeleteGrafanaResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGrafanaResource', 'POST', '/', 'json', true, 'form', request);
}

model DeleteIMRobotRequest {
  robotId: long(name='RobotId', example='123', position='Query'),
}

model DeleteIMRobotResponseBody = {
  isSuccess?: boolean(name='IsSuccess', example='true'),
  requestId?: string(name='RequestId', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model DeleteIMRobotResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIMRobotResponseBody(name='body'),
}

async function deleteIMRobot(request: DeleteIMRobotRequest): DeleteIMRobotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIMRobot', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIntegrationRequest {
  clusterId: string(name='ClusterId', description='The ID of the ACK cluster.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  integration: string(name='Integration', description='The abbreviation of the software that is supported by Application Real-Time Monitoring Service (ARMS). Valid values (case-insensitive): `ASM`, `IoT`, and `Flink`.', example='asm', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DeleteIntegrationResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data', description='Indicates whether the call was successful.', example='success'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='The request ID.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
}

model DeleteIntegrationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIntegrationResponseBody(name='body'),
}

async function deleteIntegration(request: DeleteIntegrationRequest): DeleteIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIntegration', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIntegrationsRequest {
  integrationId: long(name='IntegrationId', example='1234', position='Query'),
}

model DeleteIntegrationsResponseBody = {
  isSuccess?: boolean(name='IsSuccess', example='true'),
  requestId?: string(name='RequestId', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model DeleteIntegrationsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIntegrationsResponseBody(name='body'),
}

async function deleteIntegrations(request: DeleteIntegrationsRequest): DeleteIntegrationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIntegrations', 'GET', '/', 'json', false, 'json', request);
}

model DeleteNotificationPolicyRequest {
  id: long(name='Id', description='Deletes a notification policy based on its ID.', example='1234', position='Query'),
}

model DeleteNotificationPolicyResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='The ID of the request.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the notification policy.', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
}

model DeleteNotificationPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNotificationPolicyResponseBody(name='body'),
}

async function deleteNotificationPolicy(request: DeleteNotificationPolicyRequest): DeleteNotificationPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNotificationPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeletePrometheusAlertRuleRequest {
  alertId: long(name='AlertId', description='Indicates whether the alert rule was deleted. Valid values:

*   `true`: The alert rule was deleted.
*   `false`: The alert rule failed to be deleted.', example='3888704', minimum=0, position='Query'),
  clusterId?: string(name='ClusterId', position='Query'),
}

model DeletePrometheusAlertRuleResponseBody = {
  code?: long(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='9FEA6D00-317F-45E3-9004-7FB8B0B7****'),
  success?: boolean(name='Success', description='The ID of the request.', example='true'),
}

model DeletePrometheusAlertRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePrometheusAlertRuleResponseBody(name='body'),
}

async function deletePrometheusAlertRule(request: DeletePrometheusAlertRuleRequest): DeletePrometheusAlertRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePrometheusAlertRule', 'POST', '/', 'json', false, 'json', request);
}

model DeletePrometheusGlobalViewRequest {
  globalViewClusterId: string(name='GlobalViewClusterId', description='The ID of the global aggregation instance.', example='global-v2-cn-1670100631025794-amaykca4', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DeletePrometheusGlobalViewResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data', description='The response parameters in the JSON format.', example='{"Success":true,"Msg":"OK"}'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='337B8F7E-0A64-5768-9225-E9B3CF******'),
}

model DeletePrometheusGlobalViewResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePrometheusGlobalViewResponseBody(name='body'),
}

async function deletePrometheusGlobalView(request: DeletePrometheusGlobalViewRequest): DeletePrometheusGlobalViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePrometheusGlobalView', 'POST', '/', 'json', false, 'json', request);
}

model DeletePrometheusIntegrationRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance. Only aliyun-cs and ecs instances are supported.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  instanceId?: long(name='InstanceId', description='The ID of the exporter that is integrated into the Prometheus instance.', example='2875', position='Query'),
  integrationType: string(name='IntegrationType', description='The integration type.', example='Kafka and MySQL.', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DeletePrometheusIntegrationResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  data?: string(name='Data', description='The success or failure information.', example='success'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='19F54318-CC92-5567-BF66-CB029EC44C84'),
}

model DeletePrometheusIntegrationResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePrometheusIntegrationResponseBody(name='body'),
}

async function deletePrometheusIntegration(request: DeletePrometheusIntegrationRequest): DeletePrometheusIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePrometheusIntegration', 'POST', '/', 'json', false, 'json', request);
}

model DeletePrometheusMonitoringRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  monitoringName: string(name='MonitoringName', description='The name of the monitoring configuration.', example='customJob1', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  type: string(name='Type', description='The type of the monitoring configuration. Valid values for a Prometheus instance for Container Service: ServiceMonitor, PodMonitor, CustomJob, and Probe. Valid values for a Prometheus instance for ECS: CustomJob and Probe.', example='probe', position='Query'),
}

model DeletePrometheusMonitoringResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The result of the operation.', example='success'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='4D6C358A-A58B-4F4B-94CE-F5AAF023****'),
}

model DeletePrometheusMonitoringResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePrometheusMonitoringResponseBody(name='body'),
}

async function deletePrometheusMonitoring(request: DeletePrometheusMonitoringRequest): DeletePrometheusMonitoringResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePrometheusMonitoring', 'POST', '/', 'json', false, 'json', request);
}

model DeletePrometheusRemoteWriteRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b\\*\\*\\*\\* or vpc-xxxx', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  remoteWriteNames: string(name='RemoteWriteNames', description='The names of the remote write configuration items that you want to delete. Separate configuration items with commas (,).', example='name1,name2', position='Query'),
}

model DeletePrometheusRemoteWriteResponseBody = {
  code?: int32(name='Code', description='The status code or error code.', example='200'),
  data?: string(name='Data', description='The number of remote write configuration items that are deleted, or an error message.', example='1'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='9319A57D-2D9E-472A-B69B-CF3CD16D****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model DeletePrometheusRemoteWriteResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePrometheusRemoteWriteResponseBody(name='body'),
}

async function deletePrometheusRemoteWrite(request: DeletePrometheusRemoteWriteRequest): DeletePrometheusRemoteWriteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePrometheusRemoteWrite', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRetcodeAppRequest {
  appId?: string(name='AppId', description='The application ID.', example='1231', position='Query'),
  appName?: string(name='AppName', description='The name of the application.', example='test-app', position='Query'),
  pid: string(name='Pid', description='The process identifier (PID) of the application.', example='aokcdqn3ly@741623b4e91****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DeleteRetcodeAppResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  data?: string(name='Data', description='Indicates whether the Browser Monitoring task was deleted. Valid values:

*   `true`
*   `false`', example='true'),
  message?: string(name='Message', description='The message returned for the operation. Valid values:

*   **Success** is returned if the operation is successful.
*   An error message is returned if the operation fails.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='01FF8DD9-A09C-47A1-895A-B6E321BE77B6'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

true: The request was successful.

false: The request failed.', example='true'),
}

model DeleteRetcodeAppResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRetcodeAppResponseBody(name='body'),
}

async function deleteRetcodeApp(request: DeleteRetcodeAppRequest): DeleteRetcodeAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRetcodeApp', 'POST', '/', 'json', false, 'json', request);
}

model DeleteScenarioRequest {
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-zhangjaikou', position='Query'),
  scenarioId: long(name='ScenarioId', description='The ID of the business monitoring job. You can obtain the ID by calling the ListScenario operation.', example='132', minimum=1, position='Query'),
}

model DeleteScenarioResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EA24D522-AD35-47B8-8CB2-ADBC382B****'),
  result?: boolean(name='Result', description='Indicates whether the request is successful.

*   `true`: successful
*   `false`: failed', example='true'),
}

model DeleteScenarioResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteScenarioResponseBody(name='body'),
}

async function deleteScenario(request: DeleteScenarioRequest): DeleteScenarioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteScenario', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSilencePolicyRequest {
  id: long(name='Id', description='The ID of the request.', example='1234', position='Query'),
}

model DeleteSilencePolicyResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the silence policy was deleted successfully. Valid values:

*   `true`: The silence policy was deleted successfully.
*   `false`: The silence policy failed to be deleted.', example='true'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **DeleteSilencePolicy**.', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
}

model DeleteSilencePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSilencePolicyResponseBody(name='body'),
}

async function deleteSilencePolicy(request: DeleteSilencePolicyRequest): DeleteSilencePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSilencePolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSourceMapRequest {
  fidList: [ string ](name='FidList', shrink='json', position='Query'),
  pid: string(name='Pid', example='atc889zkcf@d8deedfa9bf****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteSourceMapResponseBody = {
  data?: string(name='Data', example='success'),
  requestId?: string(name='RequestId', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
}

model DeleteSourceMapResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSourceMapResponseBody(name='body'),
}

async function deleteSourceMap(request: DeleteSourceMapRequest): DeleteSourceMapResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSourceMap', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSyntheticTaskRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  taskIds: [ string ](name='TaskIds', position='Query'),
}

model DeleteSyntheticTaskResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
  result?: string(name='Result', example='true'),
}

model DeleteSyntheticTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSyntheticTaskResponseBody(name='body'),
}

async function deleteSyntheticTask(request: DeleteSyntheticTaskRequest): DeleteSyntheticTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSyntheticTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTraceAppRequest {
  appId: string(name='AppId', description='The ID of the application that you want to delete. You can call the SearchTraceAppByName operation to query the application ID. For more information, see [SearchTraceAppByName](~~130676~~).', example='5406**', position='Query'),
  deleteReason?: {
    reasonIds?: [ 
      {
        id?: int32(name='Id'),
        name?: string(name='Name'),
      }
    ](name='ReasonIds'),
    remark?: string(name='Remark'),
  }(name='DeleteReason', shrink='json', position='Query'),
  pid: string(name='Pid', description='The PID of the application that you want to delete. For more information about how to obtain the PID, see [Obtain the PID of an application](https://www.alibabacloud.com/help/zh/doc-detail/186100.htm?spm=a2cdw.13409063.0.0.7a72281f0bkTfx#title-imy-7gj-qhr).', example='9w0sc5gxxz@edcsd447c2f****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  type: string(name='Type', description='The type of the application that you want to delete. You can call the SearchTraceAppByName operation to query the application type. For more information, see [SearchTraceAppByName](~~130676~~). Valid values:

*   `TRACE`: application monitoring
*   `RETCODE`: frontend monitoring', example='TRACE', position='Query'),
}

model DeleteTraceAppResponseBody = {
  code?: long(name='Code'),
  data?: string(name='Data', description='The response in JSON format, including the HTTP status code, error code, response message, and trace ID.', example='{\\"code\\":200,\\"data\\":\\"{\\\\\\"code\\\\\\":200,\\\\\\"data\\\\\\":true,\\\\\\"errorCode\\\\\\":\\\\\\"Application deleted.\\\\\\",\\\\\\"message\\\\\\":\\\\\\"Application deleted.\\\\\\",\\\\\\"success\\\\\\":true,\\\\\\"traceId\\\\\\":\\\\\\"0bc0594d15954826692915817e****\\\\\\"}\\",\\"errorCode\\":\\"Application deleted.\\",\\"message\\":\\"Application deleted.\\",\\"success\\":true,\\"traceId\\":\\"0ab2646915954826692568137d****\\"}'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='46355DD8-FC56-40C5-BFC6-269DE4F9****'),
  success?: boolean(name='Success'),
}

model DeleteTraceAppResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTraceAppResponseBody(name='body'),
}

async function deleteTraceApp(request: DeleteTraceAppRequest): DeleteTraceAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTraceApp', 'POST', '/', 'json', false, 'json', request);
}

model DeleteWebhookContactRequest {
  webhookId: long(name='WebhookId', example='123', position='Query'),
}

model DeleteWebhookContactResponseBody = {
  isSuccess?: boolean(name='IsSuccess', example='true'),
  requestId?: string(name='RequestId', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model DeleteWebhookContactResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWebhookContactResponseBody(name='body'),
}

async function deleteWebhookContact(request: DeleteWebhookContactRequest): DeleteWebhookContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWebhookContact', 'POST', '/', 'json', false, 'json', request);
}

model DescribeContactGroupsRequest {
  contactGroupName?: string(name='ContactGroupName', description='The ID of the alert contact.', example='TestGroup', position='Query'),
  groupIds?: string(name='GroupIds', example='12345', position='Query'),
  isDetail?: boolean(name='IsDetail', example='true', position='Query'),
  page: long(name='Page', description='The ID of the alert contact group.', example='1', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  size: long(name='Size', example='20', position='Query'),
}

model DescribeContactGroupsResponseBody = {
  pageBean?: {
    alertContactGroups?: [ 
      {
        armsContactGroupId?: long(name='ArmsContactGroupId', example='83261'),
        contactGroupId?: float(name='ContactGroupId', example='123'),
        contactGroupName?: string(name='ContactGroupName', example='TestGroup'),
        contacts?: [ 
          {
            armsContactId?: long(name='ArmsContactId', example='100117'),
            contactId?: float(name='ContactId', example='456'),
            contactName?: string(name='ContactName', example='John Doe'),
            email?: string(name='Email', example='someone@example.com'),
            phone?: string(name='Phone', example='1381111****'),
          }
        ](name='Contacts'),
      }
    ](name='AlertContactGroups'),
    page?: long(name='Page', example='1'),
    size?: long(name='Size', example='20'),
    total?: long(name='Total', example='1'),
  }(name='PageBean'),
  requestId?: string(name='RequestId', example='4D6C358A-A58B-4F4B-94CE-F5AAF023****'),
}

model DescribeContactGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeContactGroupsResponseBody(name='body'),
}

async function describeContactGroups(request: DescribeContactGroupsRequest): DescribeContactGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeContactGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeContactsRequest {
  contactIds?: string(name='ContactIds', example='123,321', position='Query'),
  contactName?: string(name='ContactName', description='Indicates whether the email address was verified.', example='John Doe', position='Query'),
  email?: string(name='Email', example='someone@example.com', position='Query'),
  page: long(name='Page', example='1', position='Query'),
  phone?: string(name='Phone', description='The ID of the alert contact.', example='1381111*****', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  size: long(name='Size', example='20', position='Query'),
  verbose?: string(name='Verbose', example='true', position='Query'),
}

model DescribeContactsResponseBody = {
  pageBean?: {
    alertContacts?: [ 
      {
        armsContactId?: long(name='ArmsContactId', example='100147'),
        contactId?: float(name='ContactId', example='123'),
        contactName?: string(name='ContactName', example='John Doe'),
        email?: string(name='Email', example='someone@example.com'),
        isEmailVerify?: boolean(name='IsEmailVerify', example='true'),
        isVerify?: boolean(name='IsVerify', example='false'),
        phone?: string(name='Phone', example='1381111****'),
        reissueSendNotice?: long(name='ReissueSendNotice', example='3'),
      }
    ](name='AlertContacts'),
    page?: long(name='Page', example='1'),
    size?: long(name='Size', example='20'),
    total?: long(name='Total', example='1'),
  }(name='PageBean'),
  requestId?: string(name='RequestId', example='21E85B16-75A6-429A-9F65-8AAC9A54****'),
}

model DescribeContactsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeContactsResponseBody(name='body'),
}

async function describeContacts(request: DescribeContactsRequest): DescribeContactsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeContacts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDispatchRuleRequest {
  id: string(name='Id', description='The value of the tag.', example='12345', position='Query'),
  regionId: string(name='RegionId', description='The operation that you want to perform. Set the value to DescribeDispatchRule.', example='cn-hangzhou', position='Query'),
}

model DescribeDispatchRuleResponseBody = {
  dispatchRule?: {
    dispatchType?: string(name='DispatchType', example='CREATE_ALERT'),
    groupRules?: [ 
      {
        groupId?: long(name='GroupId', description='The struct returned.', example='1'),
        groupInterval?: long(name='GroupInterval', description='The information about the dispatch rule.', example='15'),
        groupWaitTime?: long(name='GroupWaitTime', description='The information about groups.', example='10'),
        groupingFields?: [ string ](name='GroupingFields', description='Queries the information about a dispatch policy.'),
        repeatInterval?: long(name='RepeatInterval', example='20'),
      }
    ](name='GroupRules', description='The ID of the region.'),
    isRecover?: boolean(name='IsRecover', example='true'),
    labelMatchExpressionGrid?: {
      labelMatchExpressionGroups?: [ 
        {
          labelMatchExpressions?: [ 
            {
              key?: string(name='Key', example='_aliyun_arms_involvedObject_kind'),
              operator?: string(name='Operator', example='eq'),
              value?: string(name='Value', example='app'),
            }
          ](name='LabelMatchExpressions'),
        }
      ](name='LabelMatchExpressionGroups'),
    }(name='LabelMatchExpressionGrid'),
    name?: string(name='Name', description='The grouping interval.', example='Prometheus Alert'),
    notifyRules?: [ 
      {
        notifyChannels?: [ string ](name='NotifyChannels'),
        notifyObjects?: [ 
          {
            name?: string(name='Name', example='JohnDoe'),
            notifyObjectId?: string(name='NotifyObjectId', example='1'),
            notifyType?: string(name='NotifyType', example='CONTACT'),
          }
        ](name='NotifyObjects'),
      }
    ](name='NotifyRules'),
    ruleId?: long(name='RuleId', description='The waiting time for grouping.', example='10282'),
    state?: string(name='State', description='The grouping fields.', example='true'),
  }(name='DispatchRule', description='The collection of dispatch rules.'),
  requestId?: string(name='RequestId', description='The ID of the dispatch policy.', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model DescribeDispatchRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDispatchRuleResponseBody(name='body'),
}

async function describeDispatchRule(request: DescribeDispatchRuleRequest): DescribeDispatchRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDispatchRule', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIMRobotsRequest {
  page: long(name='Page', description='The number of the page to return.', example='1', position='Query'),
  robotIds?: string(name='RobotIds', description='The chatbot IDs.', example='123', position='Query'),
  robotName?: string(name='RobotName', description='The name of the IM chatbot.', example='Chatbot name', position='Query'),
  size: long(name='Size', description='The number of IM chatbots to return on each page.', example='20', position='Query'),
}

model DescribeIMRobotsResponseBody = {
  pageBean?: {
    alertIMRobots?: [ 
      {
        createTime?: string(name='CreateTime', description='The time when the IM chatbot was created.', example='2023-01-16 17:21:48'),
        dailyNoc?: boolean(name='DailyNoc', description='Indicates whether daily statistics are sent. Valid values:

*   `false` (default): Daily statistics are not sent.
*   `true`: Daily statistics are sent.', example='true'),
        dailyNocTime?: string(name='DailyNocTime', description='The point in time at which the daily statistics are sent. The information that ARMS sends at the specified points in time includes the total number of alerts generated on the current day, the number of cleared alerts, and the number of alerts to be cleared.', example='09:30,17:30'),
        dingSignKey?: string(name='DingSignKey', description='The signature key of DingTalk. If you specify a signature key, DingTalk authentication is performed by using the signature key. If you do not specify a signature key, a whitelist is used for authentication by default. The keyword of the whitelist is **Alert**.', example='******'),
        dispatchRules?: [ 
          {
            id?: long(name='id', description='The ID of the notification policy.', example='12345'),
            name?: string(name='name', description='The name of the notification policy.', example='Notification policy test'),
          }
        ](name='DispatchRules', description='The notification policies.'),
        robotAddr?: string(name='RobotAddr', description='The webhook URL of the IM chatbot.', example='https://oapi.dingtalk.com/robot/send?access_token=e1a049121******'),
        robotId?: float(name='RobotId', description='The ID of the IM chatbot.', example='123'),
        robotName?: string(name='RobotName', description='The name of the IM chatbot.', example='Chatbot name'),
        type?: string(name='Type', description='The type of the IM chatbot. Valid values:

*   `dingding`: DingTalk chatbot
*   `wechat`: WeCom chatbot', example='dingding'),
      }
    ](name='AlertIMRobots', description='The queried IM chatbots.'),
    page?: long(name='Page', description='The page number of the returned page.', example='1'),
    size?: long(name='Size', description='The number of IM chatbots returned per page.', example='20'),
    total?: long(name='Total', description='The total number of queried IM chatbots.', example='1'),
  }(name='PageBean', description='The returned objects.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4D6C358A-A58B-4F4B-94CE-F5AAF023****'),
}

model DescribeIMRobotsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIMRobotsResponseBody(name='body'),
}

async function describeIMRobots(request: DescribeIMRobotsRequest): DescribeIMRobotsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIMRobots', 'POST', '/', 'json', false, 'json', request);
}

model DescribePrometheusAlertRuleRequest {
  alertId: long(name='AlertId', description='The ID of the alert rule. You can call the ListPrometheusAlertRules operation to query the ID of the alert rule.', example='3888704', position='Query'),
  clusterId?: string(name='ClusterId', position='Query'),
}

model DescribePrometheusAlertRuleResponseBody = {
  code?: long(name='Code'),
  message?: string(name='Message'),
  prometheusAlertRule?: {
    alertId?: long(name='AlertId', description='The ID of the alert rule.', example='3888704'),
    alertName?: string(name='AlertName', description='The name of the alert rule.', example='Prometheus_Alert'),
    annotations?: [ 
      {
        name?: string(name='Name', description='The name of the annotation.', example='message'),
        value?: string(name='Value', description='The value of the annotation.', example='The CPU utilization of ${{$labels.pod_name}} has exceeded 80%. Current value: {{$value}}%'),
      }
    ](name='Annotations', description='The annotations of the alert rule.'),
    clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='c0bad479465464e1d8c1e641b0afb****'),
    dispatchRuleId?: long(name='DispatchRuleId', description='The ID of the notification policy. This parameter is returned if the **NotifyType** parameter is set to `DISPATCH_RULE`.', example='10282'),
    duration?: string(name='Duration', description='The duration of the alert. Valid values: 1 to 1440. Unit: minutes.', example='1m'),
    expression?: string(name='Expression', description='The expression of the alert rule.', example='100 * (sum(rate(container_cpu_usage_seconds_total[1m])) by (pod_name) / sum(label_replace(kube_pod_container_resource_limits_cpu_cores, \\"pod_name\\", \\"$1\\", \\"pod\\", \\"(.*)\\")) by (pod_name))>75'),
    labels?: [ 
      {
        name?: string(name='Name', description='The name of the tag.', example='severity'),
        value?: string(name='Value', description='The value of the tag.', example='critical'),
      }
    ](name='Labels', description='The tags of the alert rule.'),
    message?: string(name='Message', description='The alert message. Tags can be referenced in the {{$labels.xxx}} format.', example='The CPU utilization of ${{$labels.pod_name}} has exceeded 80%. Current value: {{$value}}%'),
    notifyType?: string(name='NotifyType', description='The method of that is used to send alert notifications. Valid values:

*   `ALERT_MANAGER`: Alert notifications are sent by Operation Center.
*   `DISPATCH_RULE`: Alert notifications are sent based on the specified notification policy.', example='ALERT_MANAGER'),
    status?: int32(name='Status', description='Indicates whether the alert rule is enabled. Valid values:

*   `1`: The alert rule is enabled.
*   `0`: The alert rule is disabled.', example='1'),
    type?: string(name='Type', description='The type of the alert rule.', example='Kubernetes component alert'),
  }(name='PrometheusAlertRule', description='The returned struct.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9FEA6D00-317F-45E3-9004-7FB8B0B7****'),
  success?: boolean(name='Success'),
}

model DescribePrometheusAlertRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePrometheusAlertRuleResponseBody(name='body'),
}

async function describePrometheusAlertRule(request: DescribePrometheusAlertRuleRequest): DescribePrometheusAlertRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePrometheusAlertRule', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTraceLicenseKeyRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DescribeTraceLicenseKeyResponseBody = {
  licenseKey?: string(name='LicenseKey', example='b590lhguqs@3a75d95f218****'),
  requestId?: string(name='RequestId', example='29053944-6FE5-4240-8927-10095ECE****'),
}

model DescribeTraceLicenseKeyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTraceLicenseKeyResponseBody(name='body'),
}

async function describeTraceLicenseKey(request: DescribeTraceLicenseKeyRequest): DescribeTraceLicenseKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTraceLicenseKey', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebhookContactsRequest {
  contactIds?: string(name='ContactIds', description='The ID of the alert contact.', example='123', position='Query'),
  page: long(name='Page', description='The number of the page to return.', example='1', position='Query'),
  size: long(name='Size', description='The number of alert contacts displayed on each page.', example='20', position='Query'),
  webhookName?: string(name='WebhookName', description='The name of the webhook alert contact.', example='Webhook name', position='Query'),
}

model DescribeWebhookContactsResponseBody = {
  pageBean?: {
    page?: long(name='Page', description='The page number of the returned page.', example='1'),
    size?: long(name='Size', description='The number of alert contacts displayed on each page.', example='20'),
    total?: long(name='Total', description='The total number of alert contacts.', example='1'),
    webhookContacts?: [ 
      {
        webhook?: {
          bizHeaders?: map[string]any(name='BizHeaders', description='The header of the HTTP request.', example='[{"Content-Type":"application/json"}]'),
          bizParams?: map[string]any(name='BizParams', description='The parameters in the HTTP request.', example='[{"content:"mike"}]'),
          body?: string(name='Body', description='The alert notification template.', example='{ "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Alert time":"{{ .startTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }'),
          method?: string(name='Method', description='The HTTP request method.

*   Get
*   Post', example='Post'),
          recoverBody?: string(name='RecoverBody', description='The notification template for clearing alerts.', example='{ "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Recovery time":"{{ .endTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }'),
          url?: string(name='Url', description='The URL of the request method.', example='https://oapi.dingtalk.com/robot/send?access_token=91f2f6****'),
        }(name='Webhook', description='The details of the webhook alert contact.'),
        webhookId?: float(name='WebhookId', description='The ID of the webhook alert contact.', example='123'),
        webhookName?: string(name='WebhookName', description='The name of the webhook alert contact.', example='Webhook name'),
      }
    ](name='WebhookContacts', description='The list of webhook alert contacts.'),
  }(name='PageBean', description='The returned objects.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4D6C358A-A58B-4F4B-94CE-F5AAF023****'),
}

model DescribeWebhookContactsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebhookContactsResponseBody(name='body'),
}

async function describeWebhookContacts(request: DescribeWebhookContactsRequest): DescribeWebhookContactsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebhookContacts', 'GET', '/', 'json', false, 'json', request);
}

model EnableMetricRequest {
  clusterId: string(name='ClusterId', example='ccfa5e34a5c1f4ce6b916a40a12151d88', position='Query'),
  dropMetric?: string(name='DropMetric', example='kube_pod_container_status_ready', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model EnableMetricResponseBody = {
  code?: long(name='Code', example='200'),
  data?: string(name='Data', example='success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='0231DA4B-3D11-5433-9376-3B5B46C7228D'),
  success?: boolean(name='Success', example='true'),
}

model EnableMetricResponse = {
  headers: map[string]string(name='headers'),
  body: EnableMetricResponseBody(name='body'),
}

async function enableMetric(request: EnableMetricRequest): EnableMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableMetric', 'POST', '/', 'json', false, 'json', request);
}

model GetAgentDownloadUrlRequest {
  regionId: string(name='RegionId', description='The download URL of the ARMS agent.', example='cn-hangzhou', position='Query'),
}

model GetAgentDownloadUrlResponseBody = {
  armsAgentDownloadUrl?: string(name='ArmsAgentDownloadUrl', description='The ID of the request.', example='http://arms-apm-hangzhou.oss-cn-hangzhou-internal.aliyuncs.com/2.7.1.1/'),
  requestId?: string(name='RequestId', description='Obtains the download URL of the Application Real-Time Monitoring Service (ARMS) agent.', example='14043452-D486-4EA1-80C9-BA73FB81****'),
}

model GetAgentDownloadUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetAgentDownloadUrlResponseBody(name='body'),
}

async function getAgentDownloadUrl(request: GetAgentDownloadUrlRequest): GetAgentDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAgentDownloadUrl', 'GET', '/', 'json', false, 'json', request);
}

model GetAlertRulesRequest {
  alertIds?: string(name='AlertIds', example='["12345"]', position='Query'),
  alertNames?: string(name='AlertNames', example='["test"]', position='Query'),
  alertStatus?: string(name='AlertStatus', example='RUNNING', position='Query'),
  alertType: string(name='AlertType', example='APPLICATION_MONITORING_ALERT_RULE', position='Query'),
  clusterId?: string(name='ClusterId', example='ceba9b9ea5b924dd0b6726d2de6******', position='Query'),
  page: long(name='Page', example='1', position='Query'),
  productCode?: string(name='ProductCode', example='null', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  size: long(name='Size', example='20', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Query'),
}

model GetAlertRulesResponseBody = {
  pageBean?: {
    alertRules?: [ 
      {
        alertCheckType?: string(name='AlertCheckType', example='STATIC'),
        alertGroup?: long(name='AlertGroup', example='1'),
        alertId?: float(name='AlertId', example='5730***'),
        alertName?: string(name='AlertName', example='arms-test'),
        alertRuleContent?: {
          alertRuleItems?: [ 
            {
              aggregate?: string(name='Aggregate', example='AVG'),
              metricKey?: string(name='MetricKey', example='appstat.jvm.non_heap_used'),
              n?: float(name='N', example='1'),
              operator?: string(name='Operator', example='CURRENT_GTE'),
              value?: string(name='Value', example='1'),
            }
          ](name='AlertRuleItems'),
          condition?: string(name='Condition', example='OR'),
        }(name='AlertRuleContent'),
        alertStatus?: string(name='AlertStatus', example='RUNNING'),
        alertType?: string(name='AlertType', example='APPLICATION_MONITORING_ALERT_RULE'),
        annotations?: [ 
          {
            name?: string(name='Name', example='123'),
            value?: string(name='Value', example='abc'),
          }
        ](name='Annotations'),
        autoAddNewApplication?: boolean(name='AutoAddNewApplication', example='false'),
        clusterId?: string(name='ClusterId', example='ceba9b9ea5b924dd0b6726d2de6******'),
        createdTime?: long(name='CreatedTime', example='1640333981000'),
        duration?: string(name='Duration', example='1'),
        extend?: string(name='Extend'),
        filters?: {
          customSLSFilters?: [ 
            {
              key?: string(name='Key', example='username'),
              opt?: string(name='Opt', example='='),
              show?: boolean(name='Show', example='false'),
              t?: string(name='T', example='null'),
              value?: string(name='Value', example='test'),
            }
          ](name='CustomSLSFilters'),
          customSLSGroupByDimensions?: [ string ](name='CustomSLSGroupByDimensions'),
          customSLSWheres?: [ string ](name='CustomSLSWheres'),
          dimFilters?: [ 
            {
              filterKey?: string(name='FilterKey', example='rootIp'),
              filterOpt?: string(name='FilterOpt', example='ALL'),
              filterValues?: [ string ](name='FilterValues'),
            }
          ](name='DimFilters'),
        }(name='Filters'),
        labels?: [ 
          {
            name?: string(name='Name', example='123'),
            value?: string(name='Value', example='abc'),
          }
        ](name='Labels'),
        level?: string(name='Level', example='P2'),
        message?: string(name='Message'),
        metricsType?: string(name='MetricsType', example='JVM'),
        notifyStrategy?: string(name='NotifyStrategy', example='ALERT_MANAGER'),
        pids?: [ string ](name='Pids'),
        promQL?: string(name='PromQL', example='node_memory_MemAvailable_bytes{} / node_memory_MemTotal_bytes{} * 100'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        tags?: [ 
          {
            key?: string(name='Key'),
            value?: string(name='Value'),
          }
        ](name='Tags'),
        updatedTime?: long(name='UpdatedTime', example='1640333981000'),
        userId?: string(name='UserId', example='1131971649******'),
      }
    ](name='AlertRules'),
    page?: long(name='Page', example='1'),
    size?: long(name='Size', example='20'),
    total?: long(name='Total', example='1'),
  }(name='PageBean'),
  requestId?: string(name='RequestId', example='337B8F7E-0A64-5768-9225-E9B3CF******'),
}

model GetAlertRulesResponse = {
  headers: map[string]string(name='headers'),
  body: GetAlertRulesResponseBody(name='body'),
}

async function getAlertRules(request: GetAlertRulesRequest): GetAlertRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAlertRules', 'POST', '/', 'json', false, 'json', request);
}

model GetAppApiByPageRequest {
  currentPage?: int32(name='CurrentPage', description='The number of entries to return on each page.', example='1', minimum=1, maximum=2147483647, position='Query'),
  endTime?: long(name='EndTime', description='The operation that you want to perform. Set the value to `GetAppApiByPage`.', example='1600066800000', minimum=0, maximum=9223372036854775806, position='Query'),
  intervalMills?: int32(name='IntervalMills', description='The time interval between the data shards to be queried. Unit: milliseconds. Minimum value: 60000.', example='60000', minimum=0, maximum=2147483647, position='Query'),
  pId: string(name='PId', description='The ID of the region.', example='a2n80plglh@745eddxxx', position='Query'),
  pageSize?: int32(name='PageSize', description='The message returned.', example='10', minimum=1, maximum=2147483647, position='Query'),
  regionId: string(name='RegionId', description='The process identifier (PID) of the application. For more information about how to obtain the PID, see [Obtain the PID of an application](https://www.alibabacloud.com/help/zh/doc-detail/186100.htm?spm=a2cdw.13409063.0.0.7a72281f0bkTfx#title-imy-7gj-qhr).', example='cn-hangzhou', position='Query'),
  startTime?: long(name='StartTime', description='The HTTP status code returned for the request. Valid values:

*   2XX: The request is successful.
*   3XX: A redirection message is returned.
*   4XX: The request is invalid.
*   5XX: A server error occurs.', example='1600063200000', minimum=0, maximum=9223372036854775806, position='Query'),
}

model GetAppApiByPageResponseBody = {
  code?: int32(name='Code', description='The number of entries returned per page.', example='200'),
  data?: {
    completed?: boolean(name='Completed'),
    items?: [  map[string]any ](name='Items'),
    page?: int32(name='Page', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: string(name='Total', example='0'),
  }(name='Data'),
  message?: string(name='Message', description='The number of the page to return.', example='message'),
  requestId?: string(name='RequestId', description='The struct returned.', example='B6A00968-82A8-4F14-9D1B-B53827DB****'),
  success?: boolean(name='Success', description='The ID of the request.', example='true'),
}

model GetAppApiByPageResponse = {
  headers: map[string]string(name='headers'),
  body: GetAppApiByPageResponseBody(name='body'),
}

async function getAppApiByPage(request: GetAppApiByPageRequest): GetAppApiByPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAppApiByPage', 'POST', '/', 'json', false, 'json', request);
}

model GetAuthTokenRequest {
  clusterId: string(name='ClusterId', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model GetAuthTokenResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', description='The returned authentication token.', example='eyJhbGciOiJIUzI1NiJ9******'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
  success?: boolean(name='Success', example='true'),
}

model GetAuthTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetAuthTokenResponseBody(name='body'),
}

async function getAuthToken(request: GetAuthTokenRequest): GetAuthTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAuthToken', 'POST', '/', 'json', false, 'json', request);
}

model GetCloudClusterAllUrlRequest {
  clusterId?: string(name='ClusterId', description='The ID of the CloudMonitor instance.', example='ca9676014babd4', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-beijing', position='Query'),
}

model GetCloudClusterAllUrlResponseBody = {
  code?: int32(name='Code', description='状态码。200为成功，其他状态码为异常。', example='200'),
  data?: [ 
    {
      productCode?: string(name='ProductCode', description='The identifier of the cloud service.', example='amp'),
      region?: string(name='Region', description='The region ID.', example='cn-hangzhou'),
      remoteUrl?: {
        authToken?: boolean(name='AuthToken', description='Indicates whether authentication is enabled.', example='true'),
        grafanaUrl?: string(name='GrafanaUrl', description='The internal URL for Grafana.', example='"http://cn-hangzhou-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"'),
        internetGrafanaUrl?: string(name='InternetGrafanaUrl', description='The public URL for Grafana.', example='"http://cn-hangzhou.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"'),
        internetPushGatewayUrl?: string(name='InternetPushGatewayUrl', description='The public URL for Pushgateway.', example='"http://cn-hangzhou.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"'),
        internetRemoteReadUrl?: string(name='InternetRemoteReadUrl', description='The public URL for remote read.', example='"http://cn-hangzhou.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"'),
        internetRemoteWriteUrl?: string(name='InternetRemoteWriteUrl', description='The public URL for remote write.', example='"http://cn-hangzhou.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"'),
        pushGatewayUrl?: string(name='PushGatewayUrl', description='The internal URL for Pushgateway.', example='"http://cn-hangzhou-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"'),
        remoteReadUrl?: string(name='RemoteReadUrl', description='The internal URL for remote read.', example='"http://cn-hangzhou-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"'),
        remoteWriteUrl?: string(name='RemoteWriteUrl', description='The internal URL for remote write.', example='"http://cn-hangzhou-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"'),
        token?: string(name='Token', description='The token value used for authentication.', example='"eyJhbGciOiJIUzI1NiJ9.DKEIFJSL.KYK6uOtNVxTVHXJbH5MNqlsAuUtKzNlUvmAIiKc-QXw"'),
      }(name='RemoteUrl', description='The URLs for remote read and write. The value is a JSON string.'),
    }
  ](name='Data', description='An array object.'),
  message?: string(name='Message', description='详细信息。', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='99A663CB-8D7B-4B0D-A006-03C8EE38E7BB'),
  success?: boolean(name='Success', description='操作是否成功：true：操作成功                                 false：操作失败', example='true'),
}

model GetCloudClusterAllUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetCloudClusterAllUrlResponseBody(name='body'),
}

async function getCloudClusterAllUrl(request: GetCloudClusterAllUrlRequest): GetCloudClusterAllUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCloudClusterAllUrl', 'POST', '/', 'json', false, 'json', request);
}

model GetClusterAllUrlRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. Default value: cn-hangzhou.', example='cn-hangzhou', position='Query'),
}

model GetClusterAllUrlResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data', description='The response parameters in the JSON format.', example='{
  "RequestId": "41877338-646B-5DD6-BFBE-F89F1E7245AD",
  "Data": "{\\"clusterType\\":\\"ManagedKubernetes\\",\\"remoteWriteUrl\\":\\"http:/" }'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='The request ID.', example='40B10E04-81E8-4643-970D-F1B38F2E****'),
  success?: boolean(name='Success'),
}

model GetClusterAllUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetClusterAllUrlResponseBody(name='body'),
}

async function getClusterAllUrl(request: GetClusterAllUrlRequest): GetClusterAllUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetClusterAllUrl', 'POST', '/', 'json', false, 'json', request);
}

model GetExploreUrlRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c9cc4c5e220f8461f9d71b6ec6e******', position='Query'),
  expression?: string(name='Expression', description='The query statement that corresponds to the data source.', example='{app="buy2"}', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  type: string(name='Type', description='The type of the Grafana data source.', example='prometheus', position='Query'),
}

model GetExploreUrlResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data', description='Response parameters', example='-'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='The request ID.', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
  success?: boolean(name='Success'),
}

model GetExploreUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetExploreUrlResponseBody(name='body'),
}

async function getExploreUrl(request: GetExploreUrlRequest): GetExploreUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetExploreUrl', 'POST', '/', 'json', false, 'json', request);
}

model GetIntegrationStateRequest {
  clusterId: string(name='ClusterId', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  integration: string(name='Integration', example='asm', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model GetIntegrationStateResponseBody = {
  code?: int32(name='Code', description='状态码。200为成功，其他状态码为异常。', example='200'),
  message?: string(name='Message', description='返回结果的提示信息。', example='success'),
  requestId?: string(name='RequestId', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
  state?: boolean(name='State', example='true'),
}

model GetIntegrationStateResponse = {
  headers: map[string]string(name='headers'),
  body: GetIntegrationStateResponseBody(name='body'),
}

async function getIntegrationState(request: GetIntegrationStateRequest): GetIntegrationStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIntegrationState', 'POST', '/', 'json', false, 'json', request);
}

model GetManagedPrometheusStatusRequest {
  clusterId: string(name='ClusterId', description='__null__', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  clusterType: string(name='ClusterType', example='ask', position='Query'),
  regionId: string(name='RegionId', description='code!=200', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxyexli2****', position='Query'),
  vpcId?: string(name='VpcId', example='vpc-***', position='Query'),
}

model GetManagedPrometheusStatusResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='Installing'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='F7781D4A-2818-41E7-B7BB-79D809E9****'),
  success?: boolean(name='Success', example='true'),
}

model GetManagedPrometheusStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetManagedPrometheusStatusResponseBody(name='body'),
}

async function getManagedPrometheusStatus(request: GetManagedPrometheusStatusRequest): GetManagedPrometheusStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetManagedPrometheusStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetMultipleTraceRequest {
  endTime?: long(name='EndTime', example='1663999380000', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  startTime?: long(name='StartTime', example='1657692507000', position='Query'),
  traceIDs?: [ string ](name='TraceIDs', example='ac1400a115951745017447033d****', position='Query'),
}

model GetMultipleTraceResponseBody = {
  multiCallChainInfos?: [ 
    {
      spans?: [ 
        {
          duration?: long(name='Duration', example='11'),
          haveStack?: boolean(name='HaveStack', example='true'),
          logEventList?: [ 
            {
              tagEntryList?: [ 
                {
                  key?: string(name='Key', example='http.status.code'),
                  value?: string(name='Value', example='200'),
                }
              ](name='TagEntryList'),
              timestamp?: long(name='Timestamp', example='1595174501747'),
            }
          ](name='LogEventList'),
          operationName?: string(name='OperationName', example='/demo/queryNotExistDB/11'),
          parentSpanId?: string(name='ParentSpanId', example='18'),
          resultCode?: string(name='ResultCode', example='1'),
          rpcId?: string(name='RpcId', example='0.1'),
          rpcType?: int32(name='RpcType', example='0'),
          serviceIp?: string(name='ServiceIp', example='172.20.XX.XX'),
          serviceName?: string(name='ServiceName', example='arms-k8s-demo-subcomponent'),
          spanId?: string(name='SpanId', example='1234'),
          tagEntryList?: [ 
            {
              key?: string(name='Key', example='http.status.code'),
              value?: string(name='Value', example='200'),
            }
          ](name='TagEntryList'),
          timestamp?: long(name='Timestamp', example='1595174501747'),
          traceID?: string(name='TraceID', example='ac1400a115951745017447033d****'),
        }
      ](name='Spans'),
      traceID?: string(name='TraceID', example='ac1400a115951745017447033d****'),
    }
  ](name='MultiCallChainInfos'),
  requestId?: string(name='RequestId', example='2983BEF7-4A0D-47A2-94A2-8E9C5E63****'),
}

model GetMultipleTraceResponse = {
  headers: map[string]string(name='headers'),
  body: GetMultipleTraceResponseBody(name='body'),
}

async function getMultipleTrace(request: GetMultipleTraceRequest): GetMultipleTraceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMultipleTrace', 'POST', '/', 'json', false, 'json', request);
}

model GetOnCallSchedulesDetailRequest {
  endTime?: string(name='EndTime', description='The date on which the shift ends. Format: `yyyy-MM-dd`.', example='2022-10-30', position='Query'),
  id: long(name='Id', description='The ID of the scheduling policy.', example='1234', position='Query'),
  startTime?: string(name='StartTime', description='The date from which the shift starts. Format: `yyyy-MM-dd`.', example='2022-10-01', position='Query'),
}

model GetOnCallSchedulesDetailResponseBody = {
  data?: {
    alertRobotId?: long(name='AlertRobotId', description='The URL of the DingTalk chatbot, which is used to receive notifications about shift changes.', example='https://oapi.dingtalk.com/robot/send?access_token=69d4e009547e11069c6513309414937b7bf0482fb9284125b5******'),
    description?: string(name='Description', description='The description of the scheduling policy.', example='Test'),
    id?: long(name='Id', description='The ID of the scheduling policy.', example='1234'),
    name?: string(name='Name', description='The name of the scheduling policy.', example='Scheduling policy test'),
    renderedFinnalEntries?: [ 
      {
        end?: string(name='End', description='The date on which the user completed shift work.', example='2022-10-30'),
        simpleContact?: {
          id?: long(name='Id', description='The ID of the user on duty.', example='123'),
          name?: string(name='Name', description='The name of the user on duty.', example='Employee 1'),
        }(name='SimpleContact', description='The information about the user on duty.'),
        start?: string(name='Start', description='The date from which the user started shift work.', example='2022-10-01'),
      }
    ](name='RenderedFinnalEntries', description='The information about the final user on duty.'),
    renderedLayerEntries?: [[ 
      {
        start?: string(name='Start', description='The date from which the scheduled user was supposed to start shift work.', example='2022-10-01'),
        end?: string(name='End', description='The date on which the scheduled user was supposed to complete shift work.', example='2022-10-30'),
        simpleContact?: {
          id?: long(name='Id', description='The ID of the scheduled user.', example='123'),
          name?: string(name='Name', description='The name of the scheduled user.', example='Employee 1'),
        }(name='SimpleContact', description='The information about the scheduled user.'),
      }
    ]    ](name='RenderedLayerEntries', description='The scheduled users on duty within a time range.'),
    renderedSubstitudeEntries?: [ 
      {
        end?: string(name='End', description='The date on which the substitute was supposed to complete shift work.', example='2022-10-30'),
        simpleContact?: {
          id?: long(name='Id', description='The ID of the substitute.', example='234'),
          name?: string(name='Name', description='The name of the substitute.', example='Employee 2'),
        }(name='SimpleContact', description='The information about the substitute.'),
        start?: string(name='Start', description='The date from which the substitute was supposed to start shift work.', example='2022-10-01'),
      }
    ](name='RenderedSubstitudeEntries', description='The information about the substitutes within a time range.'),
    scheduleLayers?: [ 
      {
        contactIds?: [ long ](name='ContactIds', description='The ID list of users on duty.'),
        restrictions?: [ 
          {
            endTimeOfDay?: string(name='EndTimeOfDay', description='The end time of the shift per day.', example='18:00'),
            restrictionType?: string(name='RestrictionType', description='The type of the limit. Valid values:

*   daily_restriction
*   weekly_restriction', example='daily_restriction'),
            startTimeOfDay?: string(name='StartTimeOfDay', description='The start time of the shift per day.', example='09:00'),
          }
        ](name='Restrictions', description='The limit on the time of the shift.'),
        rotationType?: string(name='RotationType', description='The type of the shift. Valid values:

*   DAY
*   WEEK
*   CUSTOM', example='DAY'),
        shiftLength?: long(name='ShiftLength', description='The shift cycle. Unit: hours.', example='8'),
        startTime?: string(name='StartTime', description='The date on which the shift change took effect.', example='2022-10-01'),
      }
    ](name='ScheduleLayers', description='The information about the shift.'),
  }(name='Data', description='The information about the scheduling policy.'),
  requestId?: string(name='RequestId', description='The request ID.', example='21E85B16-75A6-429A-9F65-8AAC9A54****'),
}

model GetOnCallSchedulesDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetOnCallSchedulesDetailResponseBody(name='body'),
}

async function getOnCallSchedulesDetail(request: GetOnCallSchedulesDetailRequest): GetOnCallSchedulesDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOnCallSchedulesDetail', 'GET', '/', 'json', false, 'json', request);
}

model GetPrometheusApiTokenRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model GetPrometheusApiTokenResponseBody = {
  requestId?: string(name='RequestId', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
  token?: string(name='Token', example='6dcbb77ef4ba6ef5466b5debf9e2****'),
}

model GetPrometheusApiTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetPrometheusApiTokenResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
 */
async function getPrometheusApiToken(request: GetPrometheusApiTokenRequest): GetPrometheusApiTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPrometheusApiToken', 'POST', '/', 'json', false, 'json', request);
}

model GetPrometheusGlobalViewRequest {
  globalViewClusterId: string(name='GlobalViewClusterId', description='The ID of the global aggregation instance.', example='global-v2-cn-1478326682034601-vss8pd0i', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetPrometheusGlobalViewResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', description='The returned struct.', example='{ "clusterId":"The ID of the global aggregation instance.", "groupName":"The name of the global aggregation instance.", "dataSources":\\[ { "sourceName":"The name of the data source.- ArmsPrometheus No.1", "sourceType":"AlibabaPrometheus", "userId":"UserID", "clusterId":"ClusterId" }, // more datasources ] }'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='743AD493-D006-53BD-AAEC-DDCE7FB68EA7'),
}

model GetPrometheusGlobalViewResponse = {
  headers: map[string]string(name='headers'),
  body: GetPrometheusGlobalViewResponseBody(name='body'),
}

async function getPrometheusGlobalView(request: GetPrometheusGlobalViewRequest): GetPrometheusGlobalViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPrometheusGlobalView', 'POST', '/', 'json', false, 'json', request);
}

model GetPrometheusInstanceRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance.', example='c77f6f2397ea74672872acf5e31374a27', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetPrometheusInstanceResponseBody = {
  code?: int32(name='Code', description='The status code returned. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: {
    clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='c589a1b8db05c4561aefbb898ca8fb1cf'),
    clusterName?: string(name='ClusterName', description='The name of the cluster.', example='prom1'),
    clusterType?: string(name='ClusterType', description='The instance type. Valid values: remote-write (Prometheus instance for Remote Write), ecs (Prometheus instance for ECS), cloud-monitor (Prometheus instance for Alibaba Cloud services in China), cloud-product (Prometheus instance for Alibaba Cloud services outside China), global-view (Prometheus instance for GlobalView), aliyun-cs (Prometheus instance for Container Service).', example='remote-write'),
    grafanaInstanceId?: string(name='GrafanaInstanceId', description='The ID of the Grafana workspace.', example='grafana-rnggfvhlcdl6m71***'),
    paymentType?: string(name='PaymentType', description='The billing method. Valid values: PREPAY (subscription) and POSTPAY (pay-as-you-go).', example='PREPAY'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-beijing'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-aek2vezare****'),
    resourceType?: string(name='ResourceType', description='The type of the resource. Valid value: PROMETHEUS.', example='PROMETHEUS'),
    securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-8vbdgmf4nraiqa9bx0jo'),
    subClustersJson?: string(name='SubClustersJson', description='The child instances of the global aggregation instance. The value is a JSON string.', example='\\[{"headers":{},"regionId":"cn-hangzhou","sourceType":"AlibabaPrometheus","extras":{},"clusterId":"c39a1048921e04fceb039db2fbb73\\*\\*\\*","sourceName":"arms-luyao-test","dataSource":"","userId":"167275301789\\*\\*\\*"},{"headers":{},"regionId":"cn-beijing","sourceType":"AlibabaPrometheus","extras":{},"clusterId":"c6b6485496d5b400abde22cb47b5\\*\\*\\*\\*","sourceName":"agent-321-test","dataSource":"","userId":"1672753017899\\*\\*\\*"},{"headers":{},"regionId":"cn-zhangjiakou","sourceType":"AlibabaPrometheus","extras":{},"clusterId":"c261a4f3200c446659133f1ade789b15e","sourceName":"zaifeng-cardinality-01","dataSource":"","userId":"167275301789\\*\\*\\*"}]'),
    tags?: [ 
      {
        tagKey?: string(name='TagKey', description='The tag key.', example='tag1'),
        tagValue?: string(name='TagValue', description='The tag value.', example='tagValue1'),
      }
    ](name='Tags', description='The tags that are bound to the instance.'),
    userId?: string(name='UserId', description='The user ID.', example='167275301789****'),
    vSwitchId?: string(name='VSwitchId', description='The ID of the VSwitch.', example='vsw-f8z73vcja1tqnw90aav5a'),
    vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) in which the instance resides.', example='vpc-8vb02uk57qbcktqcvqqqj'),
  }(name='Data', description='The returned information.'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='52C422FD-6B43-524D-B8A1-A4693294318C'),
}

model GetPrometheusInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetPrometheusInstanceResponseBody(name='body'),
}

async function getPrometheusInstance(request: GetPrometheusInstanceRequest): GetPrometheusInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPrometheusInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetPrometheusIntegrationRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance. Only aliyun-cs and ecs instances are supported.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  instanceId: long(name='InstanceId', description='The ID of the exporter that is integrated into the Prometheus instance.', example='2893', position='Query'),
  integrationType: string(name='IntegrationType', description='The integration type.', example='kafka, mysql, redis, snmp, emr, nubela, and tidb', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetPrometheusIntegrationResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  data?: {
    canDelete?: boolean(name='CanDelete', description='Indicates whether the exporter can be deleted.', example='true'),
    canEditor?: boolean(name='CanEditor', description='Indicates whether the exporter can be edited.', example='true'),
    clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='c589a1b8db05c4561aefbb898ca8fb1cf'),
    containerName?: string(name='ContainerName', description='The name of the container.', example='kafka-exporter-1'),
    describe?: string(name='Describe', description='The description of the exporter.', example='"{}"'),
    exporterType?: string(name='ExporterType', description='The type of the exporter.', example='tidb-exporter'),
    instanceId?: long(name='InstanceId', description='The exporter ID.', example='2893'),
    instanceName?: string(name='InstanceName', description='The name of the exporter.', example='lpd-skyeye'),
    integrationType?: string(name='IntegrationType', description='The integration type.', example='tidb'),
    namespace?: string(name='Namespace', description='The namespace.', example='arms-prom'),
    needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether an upgrade is required.', example='True'),
    param?: string(name='Param', description='The configurations of the exporter. The value is a JSON string.', example='{
      "port": "5554",
      "name": "kafka-test12",
      "kafka_instance": "kafka-test",
      "__label_value": "kafka-test",
      "scrape_interval": 33,
      "metrics_path": "/metrics",
      "__label_key": "kafka-test"
}'),
    showDescribe?: boolean(name='ShowDescribe', description='Indicates whether the description is displayed.', example='true'),
    showLog?: string(name='ShowLog', description='Indicates whether the exporter logs are displayed.', example='true'),
    status?: string(name='Status', description='The status of the exporter.', example='installed'),
    target?: string(name='Target', description='The monitored IP address.', example='127.0.0.1:3422'),
    version?: string(name='Version', description='The version number.', example='1.0.0'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='9BEF2832-9D95-5E3E-9B10-74887CA17B94'),
}

model GetPrometheusIntegrationResponse = {
  headers: map[string]string(name='headers'),
  body: GetPrometheusIntegrationResponseBody(name='body'),
}

async function getPrometheusIntegration(request: GetPrometheusIntegrationRequest): GetPrometheusIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPrometheusIntegration', 'POST', '/', 'json', false, 'json', request);
}

model GetPrometheusMonitoringRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  monitoringName: string(name='MonitoringName', description='The name of the monitoring configuration.', example='customJob1', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  type: string(name='Type', description='The type of the monitoring configuration. Valid values for a Prometheus instance for Container Service: ServiceMonitor, PodMonitor, CustomJob, and Probe. Valid values for a Prometheus instance for ECS: CustomJob and Probe.', example='customJob', position='Query'),
}

model GetPrometheusMonitoringResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    clusterId?: string(name='ClusterId', description='Prometheus实例ID。', example='c589a1b8db05c4561aefbb898ca8fb1cf'),
    configYaml?: string(name='ConfigYaml', description='The monitoring configuration. The value is a YAML string.'),
    monitoringName?: string(name='MonitoringName', description='The name of the monitoring configuration.', example='customJob1'),
    status?: string(name='Status', description='The status of the monitoring configuration. Valid values: run and stop.', example='run'),
    type?: string(name='Type', description='The type of the monitoring configuration. Valid values: ServiceMonitor, PodMonitor, CustomJob, and Probe.', example='serviceMonitor'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
}

model GetPrometheusMonitoringResponse = {
  headers: map[string]string(name='headers'),
  body: GetPrometheusMonitoringResponseBody(name='body'),
}

async function getPrometheusMonitoring(request: GetPrometheusMonitoringRequest): GetPrometheusMonitoringResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPrometheusMonitoring', 'POST', '/', 'json', false, 'json', request);
}

model GetPrometheusRemoteWriteRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b\\*\\*\\*\\* or vpc-\\*\\*\\*', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  remoteWriteName: string(name='RemoteWriteName', description='The name of the remote write configuration.', example='rw1', position='Query'),
}

model GetPrometheusRemoteWriteResponseBody = {
  code?: int32(name='Code', description='The status code returned. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='c589a1b8db05c4561aefbb898ca8fb1cf'),
    remoteWriteName?: string(name='RemoteWriteName', description='The name of the remote write configuration.', example='abc123'),
    remoteWriteYaml?: string(name='RemoteWriteYaml', description='The remote write configuration. The configuration is displayed in the YAML format.', example='remote_write:
  - name: rw1
    url: "http://cn-hangzhou-intranet.arms.aliyuncs.com/prometheus/uid/xx/cn-hangzhou/api/v3/write"
    basic_auth:
      username: xxx
      password: xxx
    write_relabel_configs:
      - source_labels: [ instance_id ]
        separator: ;
        regex: si
        replacement: $1
        action: keep'),
  }(name='Data', description='The queried remote write configuration.', example='name: rw1
url: "http://cn-hangzhou-intranet.arms.aliyuncs.com/prometheus/uid/xx/cn-hangzhou/api/v3/write"
basic_auth: username: xxx
password: xxx
write_relabel_configs: - source_labels: [instance_id]
separator: ;
regex: si
replacement: $1
action: keep'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='40B10E04-81E8-4643-970D-F1B38F2E****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model GetPrometheusRemoteWriteResponse = {
  headers: map[string]string(name='headers'),
  body: GetPrometheusRemoteWriteResponseBody(name='body'),
}

async function getPrometheusRemoteWrite(request: GetPrometheusRemoteWriteRequest): GetPrometheusRemoteWriteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPrometheusRemoteWrite', 'POST', '/', 'json', false, 'json', request);
}

model GetRecordingRuleRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetRecordingRuleResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', description='The recording rule.', example='--- groups: - name: "recording_demo"   rules:   - expr: "sum(jvm_memory_max_bytes)"     record: "rate_coredns_demo"'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9FEA6D00-317F-45E3-9004-7FB8B0B7****'),
}

model GetRecordingRuleResponse = {
  headers: map[string]string(name='headers'),
  body: GetRecordingRuleResponseBody(name='body'),
}

async function getRecordingRule(request: GetRecordingRuleRequest): GetRecordingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRecordingRule', 'POST', '/', 'json', false, 'json', request);
}

model GetRetcodeAppByPidRequest {
  pid?: string(name='Pid', description='The PID of the application. To obtain the PID of the application, perform the following steps: Log on to the Application Real-Time Monitoring Service (ARMS) console. In the left-side navigation pane, choose **Browser Monitoring** > **Browser Monitoring**. On the Browser Monitoring page, click the name of the application. The URL in the address bar contains the PID of the application. The PID is in the pid=xxx format. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is xxx%4074xxx, you must replace %40 with the at sign (@) to obtain xxx@74xxx.', example='b590lhguqs@9781be0f44dXXXX', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The list of tags.', position='Query'),
}

model GetRetcodeAppByPidResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='2983BEF7-4A0D-47A2-94A2-8E9C5E63****'),
  retcodeApp?: {
    appId?: string(name='AppId', description='The ID of the application. The parameter is an auto-increment parameter.', example='2787XXXX'),
    appName?: string(name='AppName', description='The name of the application that is monitored by Browser Monitoring.', example='testRetcodeAppXXXX'),
    pid?: string(name='Pid', description='The process identifier (PID) of the application.', example='b590lhguqs@9781be0f44dXXXX'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. You can obtain the resource group ID in the **Resource Management** console.', example='rg-acfmxidtzXXXX'),
    retcodeAppType?: string(name='RetcodeAppType', description='The type of the application that is monitored by Browser Monitoring. Valid values:

*   `web`: web application
*   `weex`: Weex mobile app
*   `mini_dd`: DingTalk mini program
*   `mini_alipay`: Alipay mini program
*   `mini_wx`: WeChat mini program
*   `mini_common`: mini program on other platforms', example='web'),
    tags?: [ 
      {
        key?: string(name='Key', description='The key of the tag.', example='testKey'),
        value?: string(name='Value', description='The value of the tag.', example='testValue'),
      }
    ](name='Tags', description='The tags that are attached to the instance.'),
  }(name='RetcodeApp', description='The returned application data.'),
}

model GetRetcodeAppByPidResponse = {
  headers: map[string]string(name='headers'),
  body: GetRetcodeAppByPidResponseBody(name='body'),
}

async function getRetcodeAppByPid(request: GetRetcodeAppByPidRequest): GetRetcodeAppByPidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRetcodeAppByPid', 'GET', '/', 'json', false, 'json', request);
}

model GetRetcodeDataByQueryRequest {
  from: long(name='From', example='1668687302', position='Query'),
  pid: string(name='Pid', example='atc889zkcf@d8deedfa9bf****', position='Query'),
  query: string(name='Query', example='t : pv|select sum(times) as pv , approx_distinct(uid) as uv , (date-date%3600000) as date  group by date', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  to: long(name='To', example='1668688000', position='Query'),
}

model GetRetcodeDataByQueryResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='{"total":0,"auth":false,"pageSize":20,"completed":true,"page":1,"items":[]}'),
  message?: string(name='Message', example='Internal error. Please try again. Contact the DingTalk service account if the issue                              persists after multiple retries.'),
  requestId?: string(name='RequestId', example='2A0CEDF1-06FE-44AC-8E21-21A5BE65****'),
  success?: boolean(name='Success', example='true'),
}

model GetRetcodeDataByQueryResponse = {
  headers: map[string]string(name='headers'),
  body: GetRetcodeDataByQueryResponseBody(name='body'),
}

async function getRetcodeDataByQuery(request: GetRetcodeDataByQueryRequest): GetRetcodeDataByQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRetcodeDataByQuery', 'POST', '/', 'json', false, 'json', request);
}

model GetRetcodeLogstoreRequest {
  pid: string(name='Pid', example='atc889zkcf@d8deedfa9bf****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model GetRetcodeLogstoreResponseBody = {
  data?: {
    message?: string(name='Message', example='retcode app or task can not be found!'),
    retcodeSLSConfig?: {
      logstore?: string(name='Logstore', example='log-test-220431'),
      project?: string(name='Project', example='test-project'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }(name='RetcodeSLSConfig'),
    status?: string(name='Status', example='true'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
}

model GetRetcodeLogstoreResponse = {
  headers: map[string]string(name='headers'),
  body: GetRetcodeLogstoreResponseBody(name='body'),
}

async function getRetcodeLogstore(request: GetRetcodeLogstoreRequest): GetRetcodeLogstoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRetcodeLogstore', 'POST', '/', 'json', false, 'json', request);
}

model GetRetcodeShareUrlRequest {
  pid: string(name='Pid', description='The logon-free URL of the application.', example='iioe7jcnuk@582846f37******', position='Query'),
}

model GetRetcodeShareUrlResponseBody = {
  requestId?: string(name='RequestId', description='Queries the logon-free URL of a Browser Monitoring application.', example='01FF8DD9-A09C-47A1-895A-B6E321BE77B6'),
  url?: string(name='Url', description='The ID of the request.', example='http://arms-daily.console.aliyun.com:8080/shareapi/retcode.json?login_arms_t3h_token=XXXxxx&action=RetcodeAction&eventSubmitDoGetData=1'),
}

model GetRetcodeShareUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetRetcodeShareUrlResponseBody(name='body'),
}

async function getRetcodeShareUrl(request: GetRetcodeShareUrlRequest): GetRetcodeShareUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRetcodeShareUrl', 'POST', '/', 'json', false, 'json', request);
}

model GetSourceMapInfoRequest {
  ascendingSequence?: boolean(name='AscendingSequence', example='true', position='Query'),
  edition?: string(name='Edition', example='0.0.0', position='Query'),
  id: string(name='ID', example='atc889zkcf@d8deedfa9bf****/0.0.0/test.sourcemap.js', position='Query'),
  keyword?: string(name='Keyword', example='test', position='Query'),
  orderField?: string(name='OrderField', example='version', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model GetSourceMapInfoResponseBody = {
  requestId?: string(name='RequestId', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
  sourceMapList?: [ 
    {
      fid?: string(name='Fid', example='atc889zkcf@d8deedfa9bf****/0.0.0/test.sourcemap.js'),
      fileName?: string(name='FileName', example='test.sourcemap.js'),
      size?: string(name='Size', example='201223'),
      uploadTime?: string(name='UploadTime', example='1590657842000'),
      version?: string(name='Version', example='0.0.0'),
    }
  ](name='SourceMapList'),
}

model GetSourceMapInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetSourceMapInfoResponseBody(name='body'),
}

async function getSourceMapInfo(request: GetSourceMapInfoRequest): GetSourceMapInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSourceMapInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetStackRequest {
  endTime?: long(name='EndTime', description='The end time of the call method.', example='1653641800', position='Query'),
  pid?: string(name='Pid', description='The process identifier (PID) of the application. For more information about how to obtain the PID, see [Obtain the PID of an application](https://www.alibabacloud.com/help/zh/doc-detail/186100.htm?spm=a2cdw.13409063.0.0.7a72281f0bkTfx#title-imy-7gj-qhr).', example='eb4zdose6v@36bab313a******', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  rpcID: string(name='RpcID', description='The ID of the remote procedure call (RPC) mode. You can obtain the ID by calling the **GetTrace** operation.', example='0.1', position='Query'),
  startTime?: long(name='StartTime', description='The start time of the call method.', example='1653555396', position='Query'),
  traceID: string(name='TraceID', description='The trace ID. You can log on to the Application Real-Time Monitoring Service (ARMS) console and obtain the trace ID on the **Trace Query** page.', example='0a5800611641470044457853******', position='Query'),
}

model GetStackResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='B34C3A43-A901-5F94-9DAD-758CE4******'),
  stackInfo?: [ 
    {
      api?: string(name='Api', description='The name of the operation.', example='Tomcat Servlet Process'),
      duration?: long(name='Duration', description='The duration. Unit: milliseconds.', example='32'),
      exception?: string(name='Exception', description='The error message.', example='java.lang.NullPointerException'),
      extInfo?: {
        info?: string(name='Info', description='The content of the custom parameter.', example='input=254275&amp;'),
        type?: string(name='Type', description='The type of the custom parameter.', example='41'),
      }(name='ExtInfo', description='The information about the array object.'),
      line?: string(name='Line', description='The number of rows in the method stack information.', example='34'),
      rpcId?: string(name='RpcId', description='The ID of the RPC mode.', example='0.1'),
      serviceName?: string(name='ServiceName', description='The name of the service.', example='/com/test'),
      startTime?: long(name='StartTime', description='The start time of the call method.', example='1653555396'),
    }
  ](name='StackInfo', description='The information of the method stack.'),
}

model GetStackResponse = {
  headers: map[string]string(name='headers'),
  body: GetStackResponseBody(name='body'),
}

async function getStack(request: GetStackRequest): GetStackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStack', 'POST', '/', 'json', false, 'json', request);
}

model GetSyntheticTaskDetailRequest {
  regionId?: string(name='RegionId', description='地域ID。默认为cn-hangzhou。', example='cn-hangzhou', position='Query'),
  taskId?: string(name='TaskId', description='云拨测任务ID。', example='123', position='Query'),
}

model GetSyntheticTaskDetailResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。', example='4D6C358A-A58B-4F4B-94CE-F5AAF023****'),
  taskDetail?: {
    commonParam?: {
      alarmFlag?: long(name='AlarmFlag', example='1'),
      alertList?: [ 
        {
          generalAlert?: string(name='GeneralAlert', example='1'),
          isCritical?: string(name='IsCritical', example='0'),
          name?: string(name='Name', example='alert-test'),
          seriousAlert?: string(name='SeriousAlert', example='1'),
          symbols?: string(name='Symbols', example='1'),
        }
      ](name='AlertList'),
      alertNotifierId?: string(name='AlertNotifierId', example='1'),
      alertPolicyId?: string(name='AlertPolicyId', example='1'),
      monitorSamples?: string(name='MonitorSamples', example='1'),
      startExecutionTime?: string(name='StartExecutionTime', example='1664427128'),
    }(name='CommonParam'),
    download?: {
      connectionTimeout?: long(name='ConnectionTimeout', example='200'),
      downloadCustomHeaderContent?: string(name='DownloadCustomHeaderContent', example='char'),
      downloadCustomHost?: long(name='DownloadCustomHost', example='0'),
      downloadCustomHostIp?: string(name='DownloadCustomHostIp', example='168.23.45.1'),
      downloadKernel?: long(name='DownloadKernel', example='1'),
      downloadRedirect?: long(name='DownloadRedirect', example='1'),
      downloadTransmissionSize?: long(name='DownloadTransmissionSize', example='20'),
      monitorTimeout?: long(name='MonitorTimeout', example='12'),
      quickProtocol?: string(name='QuickProtocol', example='1'),
      validateKeywords?: string(name='ValidateKeywords', example='test'),
      verifyWay?: long(name='VerifyWay', example='0'),
      whiteList?: string(name='WhiteList', example='[{\\"src\\":\\"211.154.166.174\\"}]'),
    }(name='Download', description='文件下载任务。'),
    extendInterval?: {
      days?: [ long ](name='Days', description='拨测执行周期。

- -1：每天
- 0：周日
- 1：周一
- 2：周二
- 3：周三
- 4：周四
- 5：周五
- 6：周六'),
      endMinute?: long(name='EndMinute', description='当天结束分钟数。', example='20'),
      endTime?: string(name='EndTime', example='2022-05-03 11:40'),
      endhour?: long(name='Endhour', description='当天结束小时数。', example='12'),
      startHour?: long(name='StartHour', description='当天开始拨测时间的小时数。', example='9'),
      startMinute?: long(name='StartMinute', description='当天开始拨测时间的分钟数。', example='20'),
      startTime?: string(name='StartTime', example='2022-02-26 11:40'),
    }(name='ExtendInterval', description='自定义扩展频率。'),
    intervalTime?: long(name='IntervalTime', description='拨测频率，单位为分钟。可选频率如下：

- 1
- 5
- 10
- 15
- 20
- 30
- 60
- 120
- 180
- 240
- 360
- 480
- 720
- 1440', example='20'),
    intervalType?: long(name='IntervalType', example='0'),
    ipType?: long(name='IpType', example='0'),
    monitorList?: [ 
      {
        cityCode?: long(name='CityCode', description='城市编码。'),
        monitorType?: long(name='MonitorType'),
        netServiceId?: long(name='NetServiceId'),
        sendCount?: long(name='SendCount'),
      }
    ](name='MonitorList'),
    monitorListString?: string(name='MonitorListString', example='12'),
    nav?: {
      dnsHijackWhitelist?: string(name='DnsHijackWhitelist', example='119.119.53.156'),
      elementBlacklist?: string(name='ElementBlacklist', example='test'),
      executeActiveX?: long(name='ExecuteActiveX', example='3'),
      executeApplet?: long(name='ExecuteApplet', example='1'),
      executeScript?: long(name='ExecuteScript', example='1'),
      filterInvalidIP?: long(name='FilterInvalidIP', example='1'),
      flowHijackJumpTimes?: long(name='FlowHijackJumpTimes', example='12'),
      flowHijackLogo?: string(name='FlowHijackLogo', example='target'),
      monitorTimeout?: long(name='MonitorTimeout', example='20'),
      navAutomaticScrolling?: long(name='NavAutomaticScrolling', example='1'),
      navCustomHeader?: string(name='NavCustomHeader', example='0'),
      navCustomHeaderContent?: string(name='NavCustomHeaderContent', example='content'),
      navCustomHost?: long(name='NavCustomHost', example='1'),
      navCustomHostIp?: string(name='NavCustomHostIp'),
      navDisableCache?: long(name='NavDisableCache', example='1'),
      navDisableCompression?: long(name='NavDisableCompression', example='0'),
      navIgnoreCertificateError?: long(name='NavIgnoreCertificateError', example='1'),
      navRedirect?: long(name='NavRedirect', example='1'),
      navReturnElement?: long(name='NavReturnElement', example='1'),
      pageTampering?: string(name='PageTampering', example='content'),
      processName?: string(name='ProcessName', example='ssh'),
      quicDomain?: string(name='QuicDomain', example='www.example.com'),
      quicVersion?: long(name='QuicVersion', example='0'),
      requestHeader?: long(name='RequestHeader', example='0'),
      slowElementThreshold?: long(name='SlowElementThreshold', example='30'),
      verifyStringBlacklist?: string(name='VerifyStringBlacklist', example='test'),
      verifyStringWhitelist?: string(name='VerifyStringWhitelist', example='test'),
      waitCompletionTime?: long(name='WaitCompletionTime', example='20'),
    }(name='Nav'),
    net?: {
      netDigSwitch?: long(name='NetDigSwitch', example='0'),
      netDnsNs?: string(name='NetDnsNs', example='189.12.32.124'),
      netDnsQueryMethod?: string(name='NetDnsQueryMethod', example='1'),
      netDnsServer?: long(name='NetDnsServer', example='0'),
      netDnsSwitch?: long(name='NetDnsSwitch', example='0'),
      netDnsTimeout?: string(name='NetDnsTimeout', example='10'),
      netIcmpActive?: long(name='NetIcmpActive', example='0'),
      netIcmpDataCut?: long(name='NetIcmpDataCut', example='0'),
      netIcmpInterval?: long(name='NetIcmpInterval', example='10'),
      netIcmpNum?: long(name='NetIcmpNum', example='10'),
      netIcmpSize?: long(name='NetIcmpSize', example='30'),
      netIcmpSwitch?: long(name='NetIcmpSwitch', example='0'),
      netIcmpTimeout?: long(name='NetIcmpTimeout', example='20'),
      netTraceRouteNum?: long(name='NetTraceRouteNum', example='30'),
      netTraceRouteSwitch?: long(name='NetTraceRouteSwitch', example='0'),
      netTraceRouteTimeout?: long(name='NetTraceRouteTimeout', example='20'),
      whiteList?: string(name='WhiteList', example='119.119.53.156/32'),
    }(name='Net'),
    protocol?: {
      characterEncoding?: long(name='CharacterEncoding', example='0'),
      customHost?: long(name='CustomHost', example='1'),
      customHostIp?: string(name='CustomHostIp', example='119.119.53.156'),
      protocolConnectionTimeout?: long(name='ProtocolConnectionTimeout', example='20'),
      protocolMonitorTimeout?: long(name='ProtocolMonitorTimeout', example='30'),
      receivedDataSize?: long(name='ReceivedDataSize', example='30'),
      requestContent?: {
        body?: {
          formdata?: {
            key?: string(name='Key', example='appId'),
            value?: string(name='Value', example='3425'),
          }(name='Formdata'),
          language?: string(name='Language', example='xml'),
          mode?: string(name='Mode', example='form-data'),
          raw?: string(name='Raw', example='content'),
          urlencoded?: {
            key?: string(name='Key', example='appId'),
            value?: string(name='Value', example='11080'),
          }(name='Urlencoded'),
        }(name='Body'),
        header?: [ 
          {
            key?: string(name='Key', example='regionId'),
            value?: string(name='Value', example='cn-hangzhou'),
          }
        ](name='Header'),
        method?: string(name='Method', example='POST'),
      }(name='RequestContent'),
      verifyContent?: string(name='VerifyContent', example='list'),
      verifyWay?: long(name='VerifyWay', example='0'),
    }(name='Protocol'),
    taskId?: long(name='TaskId', description='云拨测任务ID。', example='19584'),
    taskName?: string(name='TaskName', description='任务名称。', example='net-test'),
    taskType?: long(name='TaskType', example='0'),
    url?: string(name='Url', description='拨测地址。', example='www.example.com'),
  }(name='TaskDetail', description='任务详情。'),
}

model GetSyntheticTaskDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetSyntheticTaskDetailResponseBody(name='body'),
}

async function getSyntheticTaskDetail(request: GetSyntheticTaskDetailRequest): GetSyntheticTaskDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSyntheticTaskDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetSyntheticTaskListRequest {
  direction?: string(name='Direction', example='asc', position='Query'),
  order?: string(name='Order', example='CreateTime', position='Query'),
  pageNum?: long(name='PageNum', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  taskName?: string(name='TaskName', example='net-test', position='Query'),
  taskStatus?: string(name='TaskStatus', example='1', position='Query'),
  taskType?: string(name='TaskType', example='0', position='Query'),
  url?: string(name='Url', example='https://www.example.com', position='Query'),
}

model GetSyntheticTaskListResponseBody = {
  pageInfo?: {
    hasNextPage?: string(name='HasNextPage', example='false'),
    hasPreviousPage?: boolean(name='HasPreviousPage', example='true'),
    isFirstPage?: boolean(name='IsFirstPage', example='true'),
    isLastPage?: boolean(name='IsLastPage', example='true'),
    list?: [ 
      {
        createTime?: string(name='CreateTime', example='1634005438000'),
        monitorNumber?: long(name='MonitorNumber', example='2'),
        taskId?: string(name='TaskId', example='2118709'),
        taskName?: string(name='TaskName', example='net-test'),
        taskStatus?: string(name='TaskStatus', example='0'),
        taskType?: long(name='TaskType', example='0'),
        taskTypeName?: string(name='TaskTypeName'),
        url?: string(name='Url', example='www.example.com'),
        usable?: float(name='Usable', example='0.80'),
      }
    ](name='List'),
    navigateFirstPage?: string(name='NavigateFirstPage', example='1'),
    navigateLastPage?: string(name='NavigateLastPage', example='3'),
    navigatePageNums?: string(name='NavigatePageNums', example='1,2,3'),
    nextPage?: string(name='NextPage', example='3'),
    pages?: string(name='Pages', example='10'),
    prepage?: string(name='Prepage', example='1'),
    size?: long(name='Size', example='10'),
    total?: long(name='Total', example='15'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
}

model GetSyntheticTaskListResponse = {
  headers: map[string]string(name='headers'),
  body: GetSyntheticTaskListResponseBody(name='body'),
}

async function getSyntheticTaskList(request: GetSyntheticTaskListRequest): GetSyntheticTaskListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSyntheticTaskList', 'POST', '/', 'json', false, 'json', request);
}

model GetSyntheticTaskMonitorsRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model GetSyntheticTaskMonitorsResponseBody = {
  code?: string(name='Code', example='1001'),
  data?: [ 
    {
      busy?: long(name='Busy', example='0'),
      city?: string(name='City'),
      cityCode?: long(name='CityCode', example='1100101'),
      clientType?: long(name='ClientType', example='1'),
      district?: string(name='District'),
      netServiceId?: long(name='NetServiceId', example='18'),
      netServiceName?: string(name='NetServiceName', example='XXX'),
    }
  ](name='Data'),
  msg?: string(name='Msg', example='null'),
  requestId?: string(name='RequestId', example='21E85B16-75A6-429A-9F65-8AAC9A54****'),
}

model GetSyntheticTaskMonitorsResponse = {
  headers: map[string]string(name='headers'),
  body: GetSyntheticTaskMonitorsResponseBody(name='body'),
}

async function getSyntheticTaskMonitors(request: GetSyntheticTaskMonitorsRequest): GetSyntheticTaskMonitorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSyntheticTaskMonitors', 'POST', '/', 'json', false, 'json', request);
}

model GetTraceRequest {
  endTime?: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.

> If the ID of the trace is 30 characters in length, this parameter is optional. Otherwise, this parameter is required.', example='1623827603000', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. Unit: milliseconds.

> If the ID of the trace is 30 characters in length, this parameter is optional. Otherwise, this parameter is required.', example='1623827602000', position='Query'),
  traceID: string(name='TraceID', description='The trace ID. You can log on to the ARMS console and obtain the trace ID on the **Trace Query** page or **Interface Snapshot** tab.', example='ac14001a15954493811405707d****', position='Query'),
}

model GetTraceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='6A9AEA84-7186-4D8D-B498-4585C6A2****'),
  spans?: [ 
    {
      children?: [  map[string]any ](name='Children', description='The child spans of the current span.'),
      duration?: long(name='Duration', description='The amount of time consumed by the trace. Unit: milliseconds.', example='1000'),
      haveStack?: boolean(name='HaveStack', description='Indicates whether a method stack was provided.

*   `true`: A method stack was provided.
*   `false`: No method stack was provided.', example='false'),
      logEventList?: [ 
        {
          tagEntryList?: [ 
            {
              key?: string(name='Key', description='The key of the tag.', example='http.status.code'),
              value?: string(name='Value', description='The value of the tag.', example='200'),
            }
          ](name='TagEntryList', description='The tags of the trace.'),
          timestamp?: long(name='Timestamp', description='The timestamp when the log event was generated.', example='1590388651'),
        }
      ](name='LogEventList', description='The log events in the trace.'),
      operationName?: string(name='OperationName', description='The name of the traced span.', example='/api/demo'),
      parentSpanId?: string(name='ParentSpanId', description='The ID of the parent span.', example='18'),
      resultCode?: string(name='ResultCode', description='The status code.', example='222'),
      rpcId?: string(name='RpcId', description='The ID of the RPC mode.', example='0'),
      rpcType?: int32(name='RpcType', description='The type of the remote procedure call (RPC) mode.

*   0: HTTP entry
*   25: HTTP call
*   1: High-speed Service Framework (HSF) call
*   2: HSF provision
*   40: on-premises API call
*   60: MySQL call
*   62: Oracle call
*   63: PostgreSQL call
*   70: Redis call
*   4: Taobao Distributed Data Layer (TDDL) call
*   5: Tair call
*   13: MetaQ message sending
*   252: MetaQ message receiving
*   3: notification sending
*   254: notification receiving
*   7: Apache Dubbo call
*   8: Apache Dubbo provision
*   19: SOFARPC call
*   18: SOFARPC provision
*   11: Distributed Service Framework (DSF) call
*   12: DSF provision
*   \\-1: unknown call', example='1'),
      serviceIp?: string(name='ServiceIp', description='The IP address of the host where the application resides.', example='172.20.XX.XX'),
      serviceName?: string(name='ServiceName', description='The name of the application.', example='arms-demo'),
      spanId?: string(name='SpanId', description='The span ID.', example='1234'),
      tagEntryList?: [ 
        {
          key?: string(name='Key', description='The key of the tag.', example='http.status.code'),
          value?: string(name='Value', description='The value of the tag.', example='200'),
        }
      ](name='TagEntryList', description='The tags of the trace.'),
      timestamp?: long(name='Timestamp', description='The timestamp generated when the span was generated.', example='1590388651'),
      traceID?: string(name='TraceID', description='The trace ID.', example='ac14001a15954493811405707d****'),
    }
  ](name='Spans', description='The details of the trace.'),
}

model GetTraceResponse = {
  headers: map[string]string(name='headers'),
  body: GetTraceResponseBody(name='body'),
}

/**
  * > You must use Application Real-Time Monitoring Service (ARMS) SDK for Java V2.7.24.
  *
 */
async function getTrace(request: GetTraceRequest): GetTraceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrace', 'POST', '/', 'json', false, 'json', request);
}

model GetTraceAppRequest {
  pid: string(name='Pid', description='The process identifier (PID) of the application. For more information about how to obtain the PID, see [Obtain the PID of an application](https://www.alibabacloud.com/help/zh/doc-detail/186100.htm?spm=a2cdw.13409063.0.0.7a72281f0bkTfx#title-imy-7gj-qhr).', example='b590lhguqs@d8deedfa9bf****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Query'),
}

model GetTraceAppResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D80ADAAC-8C32-5479-BD14-C28CF832****'),
  traceApp?: {
    appId?: long(name='AppId', description='The application ID.', example='123'),
    appName?: string(name='AppName', description='The name of the application.', example='arms-k8s-demo'),
    createTime?: long(name='CreateTime', description='The timestamp generated when the task was created.', example='1576599253000'),
    labels?: [ string ](name='Labels', description='The aliases of the application.'),
    pid?: string(name='Pid', description='The process identifier (PID) of the application.', example='b590lhguqs@d8deedfa9bf****'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****'),
    show?: boolean(name='Show', description='Indicates whether the application is displayed in the Application Real-Time Monitoring Service (ARMS) console. Valid values:

*   `true`: yes
*   `false`: no', example='true'),
    source?: string(name='Source', description='The source of the application.', example='ACSK8S'),
    tags?: [ 
      {
        key?: string(name='Key', description='The tag key.', example='TestKey'),
        value?: string(name='Value', description='The tag value.', example='TestValue'),
      }
    ](name='Tags', description='A list of key-value pairs.'),
    type?: string(name='Type', description='The type of the monitoring task. Valid values:

*   `TRACE`: Application Monitoring
*   `RETCODE`: Browser Monitoring', example='TRACE'),
    updateTime?: long(name='UpdateTime', description='The timestamp generated when the task information was updated.', example='1635700348000'),
    userId?: string(name='UserId', description='The user ID.', example='113197164949****'),
  }(name='TraceApp', description='The information about the array object.'),
}

model GetTraceAppResponse = {
  headers: map[string]string(name='headers'),
  body: GetTraceAppResponseBody(name='body'),
}

async function getTraceApp(request: GetTraceAppRequest): GetTraceAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTraceApp', 'POST', '/', 'json', false, 'json', request);
}

model ImportAppAlertRulesRequest {
  contactGroupIds?: string(name='ContactGroupIds', description='## Additional information about the **TemplageAlertConfig** parameter

**JSON string example and description**

```

[
  {

    "contactGroupIds": "381",                         // The ID of the alert contact group. Multiple IDs are separated by commas (,). You can ignore this parameter in the alert template configuration. The value is automatically generated when ARMS creates the alert rule based on the alert template. 
    "alertType": 5,                                // The alert type. Valid values: 4 and 5. A value of 4 indicates browser monitoring. A value of 5 indicates application monitoring. 
    "alarmContext": {                                // The template of the alert notification. 
      "subTitle": "",
      "content": "Alert name: $alert name\\nFilter condition: $filter\\nAlert time: $alert time\\nAlert content: $alert content\\nNote: The alert remains being triggered until a reply email is received. The system will remind you 24 hours later."
    },
    "alertLevel": "WARN",                              // The alert severity. Valid values: FATAL, ERROR, and WARN. 
    "metricParam": {
      "appId": "70901",                              // The ID of the associated application. You can specify an arbitrary value in the alert template configuration. The actual value is automatically generated when ARMS creates the alert rule based on the alert template. 
      "pid": "atc889zkcf@d8deedfa9bf****",            // The PID of the associated application. You can specify an arbitrary value in the alert template configuration. The actual value is automatically generated when ARMS creates the alert rule based on the alert template. 
      "type": "TXN",                                   // The type of the alert metric. For more information, see the following section. 
      "dimensions": [                                 // The information about the associated dimension. For more information, see the following section. 
        {
          "type": "STATIC",
          "value": "\\/hello_test_api_address\\/test1",
          "key": "rpc"
        }
      ]
    },
    "alertWay": [                                      // The notification method. Valid values: SMS, MAIL, and DING_ROBOT. 
      "SMS",
      "MAIL",
      "DING_ROBOT"
    ],
    "alertRule": {
      "rules": [                                          // The conditions of the alert rule.
        {
          "measure": "appstat.txn.rt",                     // The metric based on which alerts are triggered. For more information, see the following section. 
          "alias": "the response time of API calls in milliseconds",                 // The display parameter of the alert metric. You do not need to set this parameter for an alert template. 
          "aggregates": "AVG",                            // The aggregation logic of the alert rule. Valid values: AVG, SUM, MIN, and MAX. 
          "nValue": 1,                                    // The time range to query. 
          "value": 1,                                     // The threshold of the condition. 
          "operator": "CURRENT_GTE"                       // The operation logic of the condition. Valid values: CURRENT_GTE: greater than or equal to. CURRENT_LTE: less than or equal to. PREVIOUS_UP: the minute-to-minute increase percentage. PREVIOUS_DOWN: the minute-to-minute decrease percentage. HOH_UP: the increase percentage compared with the previous hour. HOH_DOWN: the decrease percentage compared with the previous hour. DOD_UP: the increase percentage compared with the last day. DOD_DOWN: the decrease percentage compared with the last day. 
        }
      ],
      "operator": "|"                                    // The logical operator between conditions. Valid values: &: AND. |: OR. 
    },
    "title": "Template alert name",                              // The alert name. An alert rule name in the format of {title}-Application name is generated when ARMS creates the alert rule based on the alert template. 
    "config": "{\\"continuous\\":false,\\"dataRevision\\":2,\\"ownerId\\":\\"123412341234\\"}",          // If the continuous parameter is set to true, ARMS sends alert notifications without interruption. If the continuous parameter is set to false, an alert silence period of 24 hours is enabled. The dataRevision parameter specifies the data revision policy to be used if no data is obtained or the data is null. Valid values: 0: overwrites the data by using the value 0. 1: overwrites the data by using the value 1. 2: overwrites the data by using the value null, which means that no alert is triggered if no data exists. 
    "notice": {                                                                                  // The noticeStartTime and noticeEndTime parameters specify the time range when alert notifications are sent. The startTime and endTime parameters specify the time range when the alert rule takes effect. The values are UNIX timestamps in milliseconds. Each timestamp indicates a point in time on the current day. For example, the 1565964097071 timestamp indicates 22:01:37 on August 16, 2019. 
      "noticeStartTime": 1480521600000,
      "startTime": 1480521600000,
      "endTime": 1480607940000,
      "noticeEndTime": 1480607940000
    },
    "status": "NON"                                        // The status of the alert rule. You can ignore this parameter in the alert template configuration. The value is automatically generated when ARMS creates the alert rule based on the alert template. 
  }
]
            
```

**Description of the Measure, Dimension, and metricParam.type parameters**

The **metricParam.type** parameter specifies the unique type of each alert rule. Each type of alert rules can use a dimension for the conditions. Multiple conditions can be set for each type of alert rules. Each condition can use multiple metrics of the same type for calculation.****

The **Dimensions.type** parameter has the following valid values:

*   `STATIC`: checks only the value of this dimension. In this case, you must set the **dimensions.value** parameter.
*   `ALL`: checks the values of all dimensions. The metrics of all API operations are checked. If an operation triggers an alert, the operation name is displayed in the alert notification. In this case, you do not need to set the **dimensions.value** parameter.
*   `DISABLE`: aggregates the values of all dimensions. In this case, you do not need to set the **dimensions.value** parameter.

**Alert metrics**

*   Alert type (metricParam.type): TXN

    *   Dimension (dimensions.key): rpc

    *   Metrics (alertRule.rules.measure):

        *   appstat.txn.rt: the response time of API calls in milliseconds
        *   appstat.txn.count: the number of API calls
        *   appstat.txn.errcount: the number of API call errors

*   Alert type (metricParam.type): TXN_TYPE

    *   Dimension (dimensions.key): rpcType

    *   Metrics (alertRule.rules.measure):

        *   appstat.incall.rt: the response time of API calls for the services that are provided by the application, in milliseconds
        *   appstat.incall.count: the number of API calls for the services that are provided by the application
        *   appstat.incall.error: the number of API call errors for the services that are provided by the application
        *   appstat.outcall.rt: the response time of API calls for the services on which the application depends, in milliseconds
        *   appstat.outcall.count: the number of API calls for the services on which the application depends
        *   appstat.outcall.error: the number of API call errors for the services on which the application depends

*   Alert type (metricParam.type): DB

    *   Dimension (dimensions.key): endpoint

    *   Metrics (alertRule.rules.measure):

        *   appstat.database.rt: the response time of API calls for the database
        *   appstat.database.count: the number of API calls for the database
        *   appstat.database.errcount: the number of API call errors for the database

*   Alert type (metricParam.type): JVM

    *   Dimension (dimensions.key): rootIp

    *   Metrics (alertRule.rules.measure):

        *   appstat.jvm.heap_used: the total memory space in the JVM heap, in bytes
        *   appstat.jvm.GcPsScavengeCount: the number of garbage collections (GCs) in JVM
        *   appstat.jvm.GcPsMarkSweepCount: the number of tag deletions in JVM
        *   appstat.jvm.GcG1OldGenCount: the number of Garbage-First (G1) GCs in the old generation
        *   appstat.jvm.GcG1YoungGenCount: the number of G1 GCs in the young generation
        *   appstat.jvm.gc.YoungGcCountInstant: the number of GCs in the young generation
        *   appstat.jvm.gc.OldGcCountInstant: the number of full heap GCs (Full GCs) in JVM
        *   appstat.jvm.gc.YoungGcTimeInstant: the time that is consumed for the GCs in the young generation, in milliseconds
        *   appstat.jvm.gc.OldGcTimeInstant: the time that is consumed for the Full GCs in JVM, in milliseconds
        *   appstat.jvm.ThreadCount: the total number of JVM threads
        *   appstat.jvm.non_heap_used: the used space of the non-heap JVM memory, in bytes
        *   appstat.jvm.non_heap_max: the maximum space of the non-heap JVM memory, in bytes
        *   appstat.jvm.non_heap_init: the initial space of the non-heap JVM memory, in bytes
        *   appstat.jvm.non_heap_committed: the submitted space of the non-heap JVM memory, in bytes

*   Alert type (metricParam.type): HOST

    *   Dimension (dimensions.key): rootIp

    *   Metrics (alertRule.rules.measure):

        *   appstat.jvm.SystemCpuUser: the used CPU of the host, in percentage
        *   appstat.jvm.SystemMemFree: the idle memory space of the host, in bytes
        *   appstat.jvm.SystemDiskFree: the idle disk space of the host, in bytes
        *   appstat.jvm.SystemNetInErrs: the number of error messages that is received by the host
        *   appstat.jvm.SystemNetOutErrs: the number of error messages that is sent by the host
        *   appstat.jvm.SystemLoad: the system load of the host

*   Alert type (metricParam.type): EXCEPTION

    *   Dimension (dimensions.key): rpc

    *   Metrics (alertRule.rules.measure):

        *   appstat.exception.rt: the response time of abnormal API calls for the application, in milliseconds
        *   appstat.exception.count: the number of abnormal API calls for the application', example='[123, 234]', position='Query'),
  isAutoStart?: boolean(name='IsAutoStart', example='true', position='Query'),
  pids: string(name='Pids', description='The operation that you want to perform. Set the value to **ImportAppAlertRules**.', example='["atc889zkcf@d8deedfa9bfxxxx", "acd129bfcf@d5daebfa6cdxxxx"]', position='Query'),
  regionId: string(name='RegionId', description='Specifies whether to enable the alert rule after it is created. Default value: `false`.

*   `true`: enables the alert rule.
*   `false`: disables the alert rule.', example='cn-hangzhou', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Query'),
  templageAlertConfig?: string(name='TemplageAlertConfig', position='Query'),
  templateAlertId?: string(name='TemplateAlertId', description='The ID of the request.', example='324324234', position='Query'),
}

model ImportAppAlertRulesResponseBody = {
  data?: string(name='Data', example='[12174**]'),
  requestId?: string(name='RequestId', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
}

model ImportAppAlertRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ImportAppAlertRulesResponseBody(name='body'),
}

/**
  * The ID of the region where the associated applications reside.
  *
 */
async function importAppAlertRules(request: ImportAppAlertRulesRequest): ImportAppAlertRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportAppAlertRules', 'POST', '/', 'json', false, 'json', request);
}

model InstallCmsExporterRequest {
  clusterId: string(name='ClusterId', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  cmsArgs?: string(name='CmsArgs', example='hologres#cen', position='Query'),
  directArgs?: string(name='DirectArgs', example='hologres#cen', position='Query'),
  enableTag?: boolean(name='EnableTag', example='false', position='Query'),
  regionId: string(name='RegionId', example='cn-beijing', position='Query'),
}

model InstallCmsExporterResponseBody = {
  data?: string(name='Data', example='success'),
  requestId?: string(name='RequestId', example='E7A04B0D-E2CA-59BB-8A9D-D5D349C22BF1'),
}

model InstallCmsExporterResponse = {
  headers: map[string]string(name='headers'),
  body: InstallCmsExporterResponseBody(name='body'),
}

async function installCmsExporter(request: InstallCmsExporterRequest): InstallCmsExporterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallCmsExporter', 'POST', '/', 'json', false, 'json', request);
}

model InstallManagedPrometheusRequest {
  clusterId?: string(name='ClusterId', description='The response object.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  clusterName?: string(name='ClusterName', description='The request ID.', example='prd-ecs', position='Query'),
  clusterType: string(name='ClusterType', description='The response content. In most cases, the installation status of the Prometheus agent is returned.', example='ask', position='Query'),
  grafanaInstanceId?: string(name='GrafanaInstanceId', description='success=false', example='grafana-bp1*****', position='Query'),
  kubeConfig?: string(name='KubeConfig', description='__null__', example='-', position='Query'),
  regionId?: string(name='RegionId', description='The parameter is not supported.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Prometheus实例的资源组ID。', example='rg-acfmxyexli2****', position='Query'),
  securityGroupId: string(name='SecurityGroupId', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='sg-bp1********', position='Query'),
  vSwitchId: string(name='VSwitchId', description='The error message returned if the Prometheus agent failed to be installed.', example='vsw-bp1*********', position='Query'),
  vpcId: string(name='VpcId', description='Indicates whether the Prometheus agent was installed.', example='vpc-xxxxxx', position='Query'),
}

model InstallManagedPrometheusResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='success'),
  message?: string(name='Message', example='vpcId is blank'),
  requestId?: string(name='RequestId', example='String	2A0CEDF1-06FE-44AC-8E21-21A5BE65****'),
  success?: boolean(name='Success', example='true'),
}

model InstallManagedPrometheusResponse = {
  headers: map[string]string(name='headers'),
  body: InstallManagedPrometheusResponseBody(name='body'),
}

/**
  * $.parameters[5].schema.example
  *
 */
async function installManagedPrometheus(request: InstallManagedPrometheusRequest): InstallManagedPrometheusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallManagedPrometheus', 'POST', '/', 'json', false, 'json', request);
}

model ListActivatedAlertsRequest {
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  filter?: string(name='Filter', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListActivatedAlertsResponseBody = {
  page?: {
    alerts?: [ 
      {
        alertId?: string(name='AlertId', example='3888704'),
        alertName?: string(name='AlertName'),
        alertType?: string(name='AlertType'),
        count?: int32(name='Count', example='598'),
        createTime?: long(name='CreateTime', example='1616466300000'),
        dispatchRules?: [ 
          {
            ruleId?: int32(name='RuleId', example='7021'),
            ruleName?: string(name='RuleName'),
          }
        ](name='DispatchRules'),
        endsAt?: long(name='EndsAt', example='1616502540000'),
        expandFields?: map[string]any(name='ExpandFields'),
        integrationName?: string(name='IntegrationName', example='testphp2'),
        integrationType?: string(name='IntegrationType', example='PROMETHEUS'),
        involvedObjectKind?: string(name='InvolvedObjectKind', example='cluster'),
        involvedObjectName?: string(name='InvolvedObjectName'),
        message?: string(name='Message'),
        severity?: string(name='Severity', example='critical'),
        startsAt?: long(name='StartsAt', example='1616466300000'),
        status?: string(name='Status', example='Active'),
      }
    ](name='Alerts'),
    page?: int32(name='Page', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='5'),
  }(name='Page'),
  requestId?: string(name='RequestId', example='BDB74B8F-4123-482A-ABB7-7F440349****'),
}

model ListActivatedAlertsResponse = {
  headers: map[string]string(name='headers'),
  body: ListActivatedAlertsResponseBody(name='body'),
}

async function listActivatedAlerts(request: ListActivatedAlertsRequest): ListActivatedAlertsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListActivatedAlerts', 'POST', '/', 'json', false, 'json', request);
}

model ListAlertEventsRequest {
  alertName?: string(name='AlertName', description='The name of the alert.', example='Test-triggered alert', position='Query'),
  endTime?: string(name='EndTime', description='The end time of the alert events that you want to query. Specify the time in the YYYY-MM-DD HH:mm:ss format.', example='2021-12-22 23:59:59', position='Query'),
  matchingConditions?: string(name='MatchingConditions', description='The list of matching conditions.', example='[         {           "value": "ARMS_NOTIFICATION",           "key": "clustername",           "operator": "eq"         }       ]     },{       "matchingConditions": [         {           "value": "test",           "key": "alertname",           "operator": "eq"         }       ]', position='Query'),
  page: long(name='Page', description='The number of the page to return.', example='1', position='Query'),
  size: long(name='Size', description='The number of entries to return on each page.', example='20', position='Query'),
  startTime?: string(name='StartTime', description='The start time of the alert events that you want to query. Specify the time in the YYYY-MM-DD HH:mm:ss format.', example='2021-12-19 00:00:00', position='Query'),
  status?: string(name='Status', description='The status of the alert events. Valid values:

*   Active
*   Silenced
*   Resolved', example='Active', position='Query'),
}

model ListAlertEventsResponseBody = {
  pageBean?: {
    events?: [ 
      {
        alarms?: [ 
          {
            alarmId?: long(name='AlarmId', description='The ID of the alert.', example='77444'),
            alarmName?: string(name='AlarmName', description='The name of the alert.', example='Test-triggered alert'),
            createTime?: string(name='CreateTime', description='The time when the alert was created.', example='2021-12-20 07:10:18'),
            state?: int32(name='State', description='The status of the alert. Valid values:

*   0: The alert is pending.
*   1: The alert is being handled.
*   2: The alert is cleared.', example='0'),
          }
        ](name='Alarms', description='The list of associated alerts.'),
        alertName?: string(name='AlertName', description='The name of the alert.', example='Test-triggered alert'),
        annotations?: string(name='Annotations', description='The list of annotations.', example='[{\\"Name\\":\\"annotation-a\\",\\"Value\\":\\"annotation a value\\"}]'),
        description?: string(name='Description', description='The description of the alert event.', example='Test'),
        endTime?: string(name='EndTime', description='The end time of the alert event.', example='2021-12-20 17:42:16'),
        generatorURL?: string(name='GeneratorURL', description='The URL of the alert event.', example='https://xxx.xx/'),
        handlerName?: string(name='HandlerName', description='The user who handled the alert.', example='Tom'),
        integrationName?: string(name='IntegrationName', description='The name of the alert integration.', example='Custom integration'),
        integrationType?: string(name='IntegrationType', description='The type of the alert integration.', example='CUSTOM'),
        labels?: string(name='Labels', description='The list of tags.', example='[{\\"name\\":\\"severity\\",\\"value\\":\\"error\\"}]'),
        receiveTime?: string(name='ReceiveTime', description='The time when the alert event was received.', example='2021-12-20 17:42:16'),
        severity?: string(name='Severity', description='The severity level of the alert. Valid value:

*   critical: P1
*   error: P2
*   warning: P3
*   page: P4
*   default: P6', example='critical'),
        startTime?: string(name='StartTime', description='The start time of the alert event.', example='2021-12-20 17:42:16'),
        status?: string(name='Status', description='The status of the alert event. Valid values:

*   Active
*   Silenced
*   Resolved', example='Active'),
      }
    ](name='Events', description='The list of information about historical alert events.'),
    page?: long(name='Page', description='The number of the page returned.', example='1'),
    size?: long(name='Size', description='The number of entries returned per page.', example='20'),
    total?: long(name='Total', description='The total number of returned entries.', example='24'),
  }(name='PageBean', description='The struct returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2FC13182-B9AF-4E6B-BE51-72669B7C****'),
}

model ListAlertEventsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAlertEventsResponseBody(name='body'),
}

async function listAlertEvents(request: ListAlertEventsRequest): ListAlertEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAlertEvents', 'POST', '/', 'json', false, 'json', request);
}

model ListAlertsRequest {
  alertName?: string(name='AlertName', example='测试触发的告警', position='Query'),
  dispatchRuleId?: long(name='DispatchRuleId', example='12345', position='Query'),
  endTime?: string(name='EndTime', example='2021-12-22 23:59:59', position='Query'),
  integrationType?: string(name='IntegrationType', example='ARMS_APP_MON', position='Query'),
  page: long(name='Page', example='1', position='Query'),
  severity?: string(name='Severity', example='P6', position='Query'),
  showActivities?: boolean(name='ShowActivities', example='true', position='Query'),
  showEvents?: boolean(name='ShowEvents', example='true', position='Query'),
  size: long(name='Size', example='20', position='Query'),
  startTime?: string(name='StartTime', example='2021-12-10 00:00:00', position='Query'),
  state?: long(name='State', example='2', position='Query'),
}

model ListAlertsResponseBody = {
  pageBean?: {
    listAlerts?: [ 
      {
        activities?: [ 
          {
            content?: string(name='Content'),
            description?: string(name='Description'),
            handlerName?: string(name='HandlerName'),
            time?: string(name='Time', example='2021-12-20 19:08:57'),
            type?: long(name='Type', example='1'),
          }
        ](name='Activities'),
        alertEvents?: [ 
          {
            alertName?: string(name='AlertName'),
            annotations?: string(name='Annotations', example='{ "_aliyun_arms_alert_value":"4.0" "_aliyun_arms_alert_traceId":"ac10c43116421327442277073d5461-105075299"}'),
            description?: string(name='Description'),
            endTime?: string(name='EndTime', example='2022-01-19 17:10:31'),
            generatorURL?: string(name='GeneratorURL', example='http://arms.console.aliyun.com'),
            integrationName?: string(name='IntegrationName', example='ARMS'),
            integrationType?: string(name='IntegrationType', example='ARMS_APP_MON'),
            labels?: string(name='Labels', example='{ "severity":"warning" "_aliyun_arms_alert_level":"ERROR" "_aliyun_arms_entropy":"0.30170457417889235"}'),
            receiveTime?: string(name='ReceiveTime', example='2022-01-19 17:05:42'),
            severity?: string(name='Severity', example='warning'),
            startTime?: string(name='StartTime', example='2022-01-18 00:14:00'),
            state?: string(name='State', example='Active'),
          }
        ](name='AlertEvents'),
        alertId?: long(name='AlertId', example='2279'),
        alertName?: string(name='AlertName', example='测试触发的告警'),
        createTime?: string(name='CreateTime', example='2022-01-18 00:21:35'),
        dispatchRuleId?: float(name='DispatchRuleId', example='12345'),
        dispatchRuleName?: string(name='DispatchRuleName', example='某某通知策略'),
        severity?: string(name='Severity', example='P6'),
        solution?: string(name='Solution'),
        state?: long(name='State', example='0'),
      }
    ](name='ListAlerts'),
    page?: long(name='Page', example='1'),
    size?: long(name='Size', example='20'),
    total?: long(name='Total', example='1'),
  }(name='PageBean'),
  requestId?: string(name='RequestId', example='2FC13182-B9AF-4E6B-BE51-72669B7C****'),
}

model ListAlertsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAlertsResponseBody(name='body'),
}

async function listAlerts(request: ListAlertsRequest): ListAlertsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAlerts', 'POST', '/', 'json', false, 'json', request);
}

model ListClusterFromGrafanaRequest {
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model ListClusterFromGrafanaResponseBody = {
  promClusterList?: [ 
    {
      agentStatus?: string(name='AgentStatus', description='The status of the Prometheus agent on the cluster. Valid values:

*   INSTALL_FAILED: The Prometheus agent failed to be installed.
*   INSTALL_SUCCEED: The Prometheus agent was installed.
*   NOT_REGISTER: You have not registered an Alibaba Cloud account.', example='INSTALL_FAILED'),
      clusterId?: string(name='ClusterId', description='The cluster ID.', example='c0df7ad9db0ed43128925ca04774c469e'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='ay-ads-hangzhou'),
      clusterType?: string(name='ClusterType', description='The type of the cluster.', example='cloud-product-prometheus'),
      controllerId?: string(name='ControllerId', description='The controller ID.', example='1092'),
      createTime?: long(name='CreateTime', description='The time when the dashboard was created.', example='2021-12-09T02:05:04Z'),
      extra?: string(name='Extra', description='The extended fields. This parameter is a JSON string.', example='{\\"app_id\\":\\"bbd\\",\\"task_id\\":\\"4305ba5bf14942daa6e553ed91f46988\\"}'),
      id?: long(name='Id', description='The ID of a database in the cluster.', example='16136'),
      installTime?: long(name='InstallTime', description='The timestamp when the Prometheus agent was installed.', example='1653532518000'),
      isControllerInstalled?: boolean(name='IsControllerInstalled', description='Indicates whether the Prometheus agent was installed. Valid values:

*   true: The Prometheus agent was installed.
*   false: The Prometheus agent was not installed.', example='true'),
      lastHeartBeatTime?: long(name='LastHeartBeatTime', description='The time when the last heartbeat was reported.', example='1653532518000'),
      nodeNum?: int32(name='NodeNum', description='The number of nodes.', example='3'),
      options?: string(name='Options', description='The custom parameter.', example='{\\"Option\\": [\\"betaTestApproved\\"]}'),
      pluginsJsonArray?: string(name='PluginsJsonArray', description='The list of nodejsonar logs.', example='{}'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-beijing'),
      stateJson?: string(name='StateJson', description='The information about applications deployed in the cluster.', example='{}'),
      updateTime?: long(name='UpdateTime', description='The time when the dashboard was updated.', example='2021-11-16T08:49:34Z'),
      userId?: string(name='UserId', description='The ID of the Alibaba Cloud account to which the cluster belongs.', example='1247285**'),
    }
  ](name='PromClusterList', description='The cluster information.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='6849D41E-EED4-5C00-89F9-6047BBD9DCB4'),
}

model ListClusterFromGrafanaResponse = {
  headers: map[string]string(name='headers'),
  body: ListClusterFromGrafanaResponseBody(name='body'),
}

async function listClusterFromGrafana(request: ListClusterFromGrafanaRequest): ListClusterFromGrafanaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusterFromGrafana', 'POST', '/', 'json', false, 'json', request);
}

model ListCmsInstancesRequest {
  clusterId: string(name='ClusterId', example='n9p9o9o3se', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  typeFilter?: string(name='TypeFilter', example='direct', position='Query'),
}

model ListCmsInstancesResponseBody = {
  data?: {
    enableTag?: boolean(name='EnableTag', example='true'),
    products?: [ 
      {
        descr?: string(name='Descr', example='-'),
        id?: string(name='Id', example='20210'),
        instance?: string(name='Instance', example='cloudserver'),
        name?: string(name='Name', example='hologres'),
        prod?: string(name='Prod', example='face'),
        source?: string(name='Source', example='arms'),
        state?: string(name='State', example='true'),
        time?: string(name='Time', example='1647852021000'),
        type?: string(name='Type', example='HOLOGRES'),
        url?: string(name='Url', example='https://g.console.aliyun.com/d/1098370038733503-35894-565/cms-hologres?orgId\\u003d9\\u0026refresh\\u003d60s'),
      }
    ](name='Products'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='E7A04B0D-E2CA-59BB-8A9D-D5D349C22BF1'),
}

model ListCmsInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListCmsInstancesResponseBody(name='body'),
}

async function listCmsInstances(request: ListCmsInstancesRequest): ListCmsInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCmsInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListDashboardsRequest {
  clusterId?: string(name='ClusterId', description='The ID of the ACK cluster.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  clusterType?: string(name='ClusterType', description='Valid values: ACK, ASK, cloud-product-prometheus, and Node. You can query the dashboards of a virtual cluster by specifying the cluster type. For InfluxDB, set this parameter to `cloud-product-prometheus`.', example='Node', position='Query'),
  dashboardName?: string(name='DashboardName', description='The unique names of the dashboards. You can query dashboards by specifying their names. The **dashboard title** can be changed whereas the **dashboard name** cannot. You can specify multiple names and separate them with commas (,), for example, `k8s-event,k8s-overview`. A dashboard may have multiple versions. If you want to specify a version, you can add version information after the name, for example, `k8s-event:v1,k8s-overview:latest`.', example='k8s-node-overview', position='Query'),
  language?: string(name='Language', description='The language of the returned Grafana dashboard. Valid values: en and zh. Default value: en.', example='en', position='Query'),
  product?: string(name='Product', description='The cloud service code. This parameter is required if you set the ClusterType parameter to `cloud-product-prometheus`. The following cloud services are available: Serverless App Engine, Microservices Engine, Message Queue for Apache RocketMQ, Lindorm, Message Queue for Apache Kafka, ApsaraDB for ClickHouse, Data Lake Analytics, Message Queue for RabbitMQ, ApsaraDB for MongoDB, Time Series Database (TSDB) for InfluxDB, MSE Cloud-native Gateway, Grafana Service, SchedulerX, Global Transaction Service, Enterprise Distributed Application Service, Machine Learning Platform for AI - Elastic Algorithm Service (EAS), Application High Availability Service, and Performance Testing.', example='xxxx', position='Query'),
  recreateSwitch?: boolean(name='RecreateSwitch', description='Specifies whether to create or query a virtual cluster. This parameter provides backward compatibility.', example='false', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  title?: string(name='Title', description='The dashboard title. The dashboard title can be changed. We recommend that you specify the **DashboardName** parameter.', example='ApiServer', position='Query'),
}

model ListDashboardsResponseBody = {
  dashboardVos?: [ 
    {
      dashboardType?: string(name='DashboardType', description='The type of the Grafana dashboard. This parameter has the same effect as the Exporter parameter whereas provides clearer implication.', example='Node'),
      exporter?: string(name='Exporter', description='The type of the exporter access source. Valid values:

*   Prometheus
*   Node
*   GPU
*   Redis
*   MySQL
*   Kafka
*   NGINX V2
*   Nginx
*   ZooKeeper
*   MongoDB
*   RabbitMQ
*   PostgreSQL
*   Kubernetes
*   Client Library
*   Elasticsearch
*   RocketMQ', example='Nginx'),
      httpUrl?: string(name='HttpUrl', description='The URL of the Grafana dashboard.', example='http://g.console.aliyun.com/d/1131971649496228-*****-59/ApiServer?orgId=3**&refresh=60s'),
      httpsUrl?: string(name='HttpsUrl', description='The URL of the Grafana dashboard.', example='http://g.console.aliyun.com/d/1131971649496228-*****-59/ApiServer?orgId=3**&refresh=60s'),
      i18nChild?: {
        dashboardType?: string(name='DashboardType', description='The type of the Grafana dashboard. This parameter has the same effect as the Exporter parameter whereas provides clearer implication.', example='Node'),
        exporter?: string(name='Exporter', description='The type of the exporter access source. Valid values:

*   Prometheus
*   Node
*   GPU
*   Redis
*   MySQL
*   Kafka
*   NGINX V2
*   Nginx
*   ZooKeeper
*   MongoDB
*   RabbitMQ
*   PostgreSQL
*   Kubernetes
*   Client Library
*   Elasticsearch
*   RocketMQ', example='Nginx'),
        httpUrl?: string(name='HttpUrl', description='The URL of the Grafana dashboard.', example='http://g.console.aliyun.com/d/1131971649496228-*****-59/ApiServer?orgId=3**&refresh=60s'),
        httpsUrl?: string(name='HttpsUrl', description='The URL of the Grafana dashboard.', example='http://g.console.aliyun.com/d/1131971649496228-*****-59/ApiServer?orgId=3**&refresh=60s'),
        id?: string(name='Id', description='The ID of the Grafana dashboard. The value is unique only when you install the Grafana dashboard.', example='1100**'),
        isArmsExporter?: boolean(name='IsArmsExporter', description='Indicates whether the exporter was provided by ARMS. Valid values:

*   `true`: The exporter is provided by ARMS.
*   `false`: The exporter is not provided by ARMS.', example='false'),
        kind?: string(name='Kind', description='The category of the Grafana dashboard. Valid values: BASIC, THIRD, LIMIT, and CUSTOM.', example='BASIC'),
        language?: string(name='Language', description='The language of the Grafana dashboard.', example='zh'),
        name?: string(name='Name', description='The name of the Grafana dashboard. This parameter is different from the **Title** parameter as this parameter cannot be changed.', example='k8s-node-overview'),
        needUpdate?: boolean(name='NeedUpdate', description='Indicates whether the Grafana dashboard has a new version that was available for upgrade.', example='false'),
        tags?: [ string ](name='Tags', description='The tags of the Grafana dashboard.'),
        time?: string(name='Time', description='The timestamp when the Grafana dashboard was created.', example='1590136924'),
        title?: string(name='Title', description='The title of the Grafana dashboard.', example='ApiServer'),
        type?: string(name='Type', description='The type of the Grafana dashboard. Valid values:

*   `dash-db`: a dashboard
*   `dash-folder`: a folder that can include a dashboard', example='dash-db'),
        uid?: string(name='Uid', description='The unique identifier of a dashboard when multiple Grafana dashboards were installed. It is a unique business ID displayed on the page.', example='1131971649496228-*****-59'),
        url?: string(name='Url', description='The complete URL of the Grafana dashboard.', example='http://g.console.aliyun.com/d/1131971649496228-*****-59/ApiServer?orgId=3**&refresh=60s'),
        version?: string(name='Version', description='The version of the Grafana dashboard. The combination of version and name uniquely identifies a dashboard.', example='v2'),
      }(name='I18nChild', description='The information about the Grafana dashboards.'),
      id?: string(name='Id', description='The ID of the Grafana dashboard. The value is unique only when you install the Grafana dashboard.', example='1100**'),
      isArmsExporter?: boolean(name='IsArmsExporter', description='Indicates whether the exporter was provided by ARMS. Valid values:

*   `true`: The exporter is provided by ARMS.
*   `false`: The exporter is not provided by ARMS.', example='false'),
      kind?: string(name='Kind', description='The type of the dashboard. Valid values: BASIC, THIRD, LIMIT, and CUSTOM. BASIC indicates a basic dashboard. THIRD indicates a third-party dashboard. LIMIT indicates a time-limited free dashboard. CUSTOM indicates a custom dashboard.', example='BASIC'),
      language?: string(name='Language', description='The language of the Grafana dashboard.', example='en'),
      name?: string(name='Name', description='The name of the Grafana dashboard. This parameter is different from the **Title** parameter as this parameter cannot be changed.', example='k8s-node-overview'),
      needUpdate?: boolean(name='NeedUpdate', description='Indicates whether the Grafana dashboard has a new version that was available for upgrade.', example='false'),
      tags?: [ string ](name='Tags', description='The tags of the Grafana dashboard.'),
      time?: string(name='Time', description='The timestamp generated when the Grafana dashboard was created. Unit: seconds', example='1590136924'),
      title?: string(name='Title', description='The title of the Grafana dashboard.', example='ApiServer'),
      type?: string(name='Type', description='The type of the Grafana dashboard. Valid values:

*   `dash-db`: a dashboard
*   `dash-folder`: a folder that can include a dashboard', example='dash-db'),
      uid?: string(name='Uid', description='The unique identifier of a dashboard when multiple Grafana dashboards were installed. It is a unique business ID displayed on the page.', example='1131971649496228-*****-59'),
      url?: string(name='Url', description='The complete URL of the Grafana dashboard.', example='http://g.console.aliyun.com/d/1131971649496228-*****-59/ApiServer?orgId=3**&refresh=60s'),
      version?: string(name='Version', description='The version of the Grafana dashboard. The combination of version and name uniquely identifies a dashboard.', example='v2'),
    }
  ](name='DashboardVos', description='The information about the Grafana dashboard.'),
  requestId?: string(name='RequestId', description='The request ID.', example='2A0CEDF1-06FE-44AC-8E21-21A5BE65****'),
}

model ListDashboardsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDashboardsResponseBody(name='body'),
}

/**
  * None.
  *
 */
async function listDashboards(request: ListDashboardsRequest): ListDashboardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDashboards', 'POST', '/', 'json', false, 'json', request);
}

model ListDashboardsByNameRequest {
  clusterId?: string(name='ClusterId', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  clusterType?: string(name='ClusterType', example='cloud-product-prometheus', position='Query'),
  dashBoardName?: string(name='DashBoardName', example='edas-ingress-url', position='Query'),
  dashBoardVersion?: string(name='DashBoardVersion', example='latest', position='Query'),
  dataSourceType?: string(name='DataSourceType', example='loki', position='Query'),
  groupName?: string(name='GroupName', example='EDAS', position='Query'),
  onlyQuery?: boolean(name='OnlyQuery', example='true', position='Query'),
  productCode?: string(name='ProductCode', example='edas', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListDashboardsByNameResponseBody = {
  code?: int32(name='Code', description='状态码。说明 200表示成功。', example='200'),
  data?: string(name='Data', example='[{"name":"Edas Ingress Url Analysis","type":"edas-ingress-url-analysis","url":"https://g.console.aliyun.com/d/1036052989950239-11040375-66-3/edas-ingress-url-analysis?var-clusterId=29ksa&var-regionId=cn-hangzhou"}]'),
  message?: string(name='Message', description='返回结果的提示信息。', example='success'),
  requestId?: string(name='RequestId', example='2983BEF7-4A0D-47A2-94A2-8E9C5E63****'),
}

model ListDashboardsByNameResponse = {
  headers: map[string]string(name='headers'),
  body: ListDashboardsByNameResponseBody(name='body'),
}

async function listDashboardsByName(request: ListDashboardsByNameRequest): ListDashboardsByNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDashboardsByName', 'POST', '/', 'json', false, 'json', request);
}

model ListDispatchRuleRequest {
  name?: string(name='Name', example='Prod', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  system?: boolean(name='System', example='true', position='Query'),
}

model ListDispatchRuleResponseBody = {
  dispatchRules?: [ 
    {
      name?: string(name='Name', example='Prod'),
      ruleId?: long(name='RuleId', example='10282'),
      state?: string(name='State', example='true'),
    }
  ](name='DispatchRules'),
  requestId?: string(name='RequestId', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model ListDispatchRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ListDispatchRuleResponseBody(name='body'),
}

async function listDispatchRule(request: ListDispatchRuleRequest): ListDispatchRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDispatchRule', 'POST', '/', 'json', false, 'json', request);
}

model ListEscalationPoliciesRequest {
  name?: string(name='Name', description='The name of the escalation policy.', example='prod escalation policy', position='Query'),
  page: long(name='Page', description='The number of the page to return.', example='1', position='Query'),
  size: long(name='Size', description='The number of entries to return on each page.', example='20', position='Query'),
}

model ListEscalationPoliciesResponseBody = {
  pageBean?: {
    escalationPolicies?: [ 
      {
        id?: long(name='Id', description='The ID of the escalation policy.', example='1234'),
        name?: string(name='Name', description='The name of the escalation policy.', example='prod escalation policy'),
      }
    ](name='EscalationPolicies', description='The list of escalation policies.'),
    page?: long(name='Page', description='The page number of the returned page.', example='1'),
    size?: long(name='Size', description='The number of entries returned per page.', example='20'),
    total?: long(name='Total', description='The total number of returned entries.', example='1'),
  }(name='PageBean', description='The returned objects.'),
  requestId?: string(name='RequestId', description='The request ID.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
}

model ListEscalationPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: ListEscalationPoliciesResponseBody(name='body'),
}

async function listEscalationPolicies(request: ListEscalationPoliciesRequest): ListEscalationPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEscalationPolicies', 'GET', '/', 'json', false, 'json', request);
}

model ListEventBridgeIntegrationsRequest {
  name?: string(name='Name', description='The name of the EventBridge integration.', example='EventBridge_Test', position='Query'),
  page: long(name='Page', description='The number of the page to return.', example='1', position='Query'),
  size: long(name='Size', description='The number of entries to return on each page.', example='15', position='Query'),
}

model ListEventBridgeIntegrationsResponseBody = {
  pageBean?: {
    eventBridgeIntegrations?: [ 
      {
        description?: string(name='Description', description='The description of the EventBridge integration.', example='test'),
        id?: long(name='Id', description='The ID of the EventBridge integration.', example='123'),
        name?: string(name='Name', description='The name of the EventBridge integration.', example='EventBridge_Test'),
      }
    ](name='EventBridgeIntegrations', description='The EventBridge integrations.'),
    page?: long(name='Page', description='The number of the returned page.', example='1'),
    size?: long(name='Size', description='The number of entries returned per page.', example='15'),
    total?: long(name='Total', description='The total number of EventBridge integrations that are returned.', example='1'),
  }(name='PageBean', description='The information about EventBridge integrations that is returned on each page.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2B289756-E791-5842-BCBD-AD414C******'),
}

model ListEventBridgeIntegrationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListEventBridgeIntegrationsResponseBody(name='body'),
}

async function listEventBridgeIntegrations(request: ListEventBridgeIntegrationsRequest): ListEventBridgeIntegrationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEventBridgeIntegrations', 'GET', '/', 'json', false, 'json', request);
}

model ListInsightsEventsRequest {
  endTime: string(name='EndTime', description='The details of the event.', example='1480607940000', position='Query'),
  insightsTypes?: string(name='InsightsTypes', description='Average response-time spikes of application services.', example='errorIncrease,topErrorIncrease,topExceptionIncrease,topRtIncrease,rtIncrease', position='Query'),
  pid?: string(name='Pid', description='The types of the events that you want to query. Separate multiple event types with commas (,). If you do not specify this parameter, all events are queried.

*   errorIncrease: API error-rate spike events. Examples: HTTP API error-rate spike events and Dubbo API error-rate spike events.
*   topErrorIncrease: the top five API error-rate spike events with the highest traffic.
*   topRtIncrease: API response-time spike events. Examples: HTTP API response-time spike events and Dubbo API response-time spike events.
*   rtIncrease: the top five API response-time spike events with the highest traffic.', example='aokcdqn3ly@a195c6d6421****', position='Query'),
  regionId: string(name='RegionId', description='The end of the time range to query. The value is a timestamp.', example='cn-hangzhou', position='Query'),
  startTime: string(name='StartTime', description='The ID of the request.', example='1595174400000', position='Query'),
}

model ListInsightsEventsResponseBody = {
  insightsEvents?: [ 
    {
      date?: long(name='Date', description='The time at which the event occurred. The value is a timestamp.', example='1658890560'),
      desc?: string(name='Desc', description='The ID of the application associated with the event.', example='The severity of the event.'),
      level?: string(name='Level', description='Queries the abnormal Insights events within a specified period of time.', example='P3'),
      pid?: string(name='Pid', description='auditing', example='dsv9zcel92@7da413b******'),
      title?: string(name='Title', description='The overall response time of the \\[HTTP] service of the application \\[sd] spikes at \\[2022-07-27 10:57:00]', example='The type of the event.'),
      type?: string(name='Type', description='The time at which the event occurred. The value is a timestamp.', example='rtIncrease'),
    }
  ](name='InsightsEvents', description='The description of the event.'),
  requestId?: string(name='RequestId', description='The title of the event.', example='6F1174DC-6085-5353-AAE7-D4ADCD******'),
}

model ListInsightsEventsResponse = {
  headers: map[string]string(name='headers'),
  body: ListInsightsEventsResponseBody(name='body'),
}

async function listInsightsEvents(request: ListInsightsEventsRequest): ListInsightsEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInsightsEvents', 'POST', '/', 'json', false, 'json', request);
}

model ListIntegrationRequest {
  integrationName?: string(name='IntegrationName', example='云监控集成', position='Query'),
  integrationProductType: string(name='IntegrationProductType', example='CLOUD_MONITOR', position='Query'),
  isDetail?: boolean(name='IsDetail', example='true', position='Query'),
  page: long(name='Page', example='1', position='Query'),
  size: long(name='Size', example='10', position='Query'),
}

model ListIntegrationResponseBody = {
  pageInfo?: {
    integrations?: [ 
      {
        apiEndpoint?: string(name='ApiEndpoint', example='https://alerts.aliyuncs.com/api/v1/integrations/custom/ymQBN******'),
        createTime?: string(name='CreateTime', example='2022-06-18'),
        integrationDetail?: {
          autoRecover?: boolean(name='AutoRecover', example='true'),
          description?: string(name='Description', example='测试'),
          duplicateKey?: string(name='DuplicateKey', example='LABEL.alertname::LABEL.severity'),
          extendedFieldRedefineRules?: [  map[string]any ](name='ExtendedFieldRedefineRules'),
          fieldRedefineRules?: [  map[string]any ](name='FieldRedefineRules'),
          initiativeRecoverField?: string(name='InitiativeRecoverField', example='$.status'),
          initiativeRecoverValue?: string(name='InitiativeRecoverValue', example='ok'),
          recoverTime?: long(name='RecoverTime', example='300'),
          stat?: [ long ](name='Stat'),
        }(name='IntegrationDetail'),
        integrationId?: long(name='IntegrationId', example='1234'),
        integrationName?: string(name='IntegrationName', example='云监控集成'),
        integrationProductType?: string(name='IntegrationProductType', example='CLOUD_MONITOR'),
        liveness?: string(name='Liveness', example='ready'),
        shortToken?: string(name='ShortToken', example='ymQBN******'),
        state?: boolean(name='State', example='true'),
      }
    ](name='Integrations'),
    page?: long(name='Page', example='1'),
    size?: long(name='Size', example='10'),
    total?: long(name='Total', example='1'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model ListIntegrationResponse = {
  headers: map[string]string(name='headers'),
  body: ListIntegrationResponseBody(name='body'),
}

async function listIntegration(request: ListIntegrationRequest): ListIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIntegration', 'GET', '/', 'json', false, 'json', request);
}

model ListNotificationPoliciesRequest {
  ids?: string(name='Ids', description='The ID of the notification policy.', example='12345', position='Query'),
  isDetail?: boolean(name='IsDetail', description='Specifies whether to query the details about notification policies. Valid values:

*   `true`: Details about notification policies are queried.
*   `false`: Details about notification policies are not queried.', example='false', position='Query'),
  name?: string(name='Name', description='The name of the notification policy.', example='notificationpolicy_test', position='Query'),
  page: long(name='Page', description='The number of the page to return.', example='1', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  size: long(name='Size', description='The number of entries to return on each page.', example='20', position='Query'),
}

model ListNotificationPoliciesResponseBody = {
  pageBean?: {
    notificationPolicies?: [ 
      {
        escalationPolicyId?: long(name='EscalationPolicyId', description='The ID of the escalation rule.', example='123'),
        groupRule?: {
          groupInterval?: long(name='GroupInterval', description='The time interval for grouping. Unit: seconds. Default value: 30.', example='30'),
          groupWait?: long(name='GroupWait', description='The waiting time for grouping. Unit: seconds. Default value: 5.', example='5'),
          groupingFields?: [ string ](name='GroupingFields', description='The fields that are used to group events.'),
        }(name='GroupRule', description='The grouping rule for alert events.'),
        id?: long(name='Id', description='The ID of the notification policy.', example='1234'),
        integrationId?: long(name='IntegrationId', description='The integration ID of the ticket system to which alerts are pushed.', example='34'),
        matchingRules?: [ 
          {
            matchingConditions?: [ 
              {
                key?: string(name='Key', description='The key of the matching condition.', example='altertname'),
                operator?: string(name='Operator', description='The logical operator of the matching condition. Valid values:

*   `eq`: equal to.
*   `neq`: not equal to.
*   `in`: contains.
*   `nin`: does not contain.
*   `re`: regular expression match.
*   `nre`: regular expression mismatch.', example='eq'),
                value?: string(name='Value', description='The value of the matching condition.', example='test'),
              }
            ](name='MatchingConditions', description='The alert event matching conditions.'),
          }
        ](name='MatchingRules', description='The alert event matching rules.'),
        name?: string(name='Name', description='The name of the notification policy.', example='notificationpolicy_test'),
        notifyRule?: {
          notifyChannels?: [ string ](name='NotifyChannels', description='The notification method.'),
          notifyEndTime?: string(name='NotifyEndTime', description='The end time of the notification window.', example='23:59'),
          notifyObjects?: [ 
            {
              notifyChannels?: [ string ](name='NotifyChannels', description='通知对象为联系人时单独的联系方式'),
              notifyObjectId?: long(name='NotifyObjectId', description='The ID of the contact.', example='123'),
              notifyObjectName?: string(name='NotifyObjectName', description='The name of the contact.', example='test'),
              notifyObjectType?: string(name='NotifyObjectType', description='The type of the contact. Valid values: 

- CONTACT: an individual contact
- CONTACT_GROUP: a contact group
- DING_ROBOT: an instant messaging (IM) robot
- CONTACT_SCHEDULE: a person on duty based on an established schedule', example='CONTACT'),
            }
          ](name='NotifyObjects', description='The contacts.'),
          notifyStartTime?: string(name='NotifyStartTime', description='The start time of the notification window.', example='00:00'),
        }(name='NotifyRule', description='The notification rules.'),
        notifyTemplate?: {
          emailContent?: string(name='EmailContent', description='The content of the alert notification sent by email.', example='Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
Notification Policy: {{ .dispatchRuleName }}
Alert Time: {{ .startTime }}
Description: {{ for .alerts }} {{ .annotations.message }}  {{if .generatorURL }}  &lt;a href="{{.generatorURL}}" > Details&lt;/a&gt;
 {{ end }} {{ end }}'),
          emailRecoverContent?: string(name='EmailRecoverContent', description='The content of the alert resolution notification sent by email.', example='Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
Notification Policy: {{ .dispatchRuleName }}
Recover Time: {{ .endTime }}
Description: {{ for .alerts }} {{ .annotations.message }}  {{if .generatorURL }} &lt;a href="{{.generatorURL}}" > Details&lt;/a&gt;
 {{ end }} {{ end }}'),
          emailRecoverTitle?: string(name='EmailRecoverTitle', description='The title of the alert resolution notification sent by email.', example='{{ .commonLabels.alertname }}'),
          emailTitle?: string(name='EmailTitle', description='The title of the alert notification sent by email.', example='{{ .commonLabels.alertname }}'),
          robotContent?: string(name='RobotContent', description='The content of the alert notification sent by an IM robot.', example='{{if .commonLabels.clustername }}

 &gt;  Cluster Name: {{ .commonLabels.clustername }} 

 {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}

 &gt;  App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} 

 {{ end }}{{ for .alerts }} &gt;  {{ .annotations.message }} {{if .generatorURL }} [Details]({{.generatorURL}})  {{end}} {{if .annotations._aliyun_arms_insights_analyze_link }}[&lt;font color=\\"#ff0000\\"&gt;diagnostic analysis&lt;/font&gt;]({{ .annotations._aliyun_arms_insights_analyze_link}}){{ end }}{{if  eq "1" .labels._aliyun_arms_denoise_code }} (Important:{{.labels._aliyun_arms_important_reason }}) {{end}}

{{end}}'),
          smsContent?: string(name='SmsContent', description='The content of the alert notification sent by text message.', example='{{ .level }}Alert Occurs
Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
Notification Policy: {{ .dispatchRuleName }}
Alert Time: {{ .startTime }}
Description: {{ for .alerts }} {{ .annotations.message }} {{ end }}'),
          smsRecoverContent?: string(name='SmsRecoverContent', description='The content of the alert resolution notification sent by text message.', example='Alert Recovery Notification
Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
Notification Policy: {{ .dispatchRuleName }}
Recover Time: {{ .endTime }}
Description: {{ for .alerts }} {{ .annotations.message }} {{ end }}'),
          ttsContent?: string(name='TtsContent', description='The content of the alert notification sent by phone.', example='Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
Notification Policy: {{ .dispatchRuleName }}
Alert Time: {{ .startTime }}
Description: {{ for .alerts }} {{ .annotations.message }} {{ end }}'),
          ttsRecoverContent?: string(name='TtsRecoverContent', description='The content of the alert resolution notification sent by phone.', example='Alert Name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }}
Cluster Name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels._aliyun_arms_involvedObject_kind }}
App Name: {{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}
Notification Policy: {{ .dispatchRuleName }}
Recover Time: {{ .endTime }}
Description: {{ for .alerts }} {{ .annotations.message }} {{ end }}'),
        }(name='NotifyTemplate', description='The notification templates.'),
        repeat?: boolean(name='Repeat', description='Indicates whether the system repeatedly sends notifications for a long-lasting unresolved alert. Default value: true. Valid values:  

- `true`: The system repeatedly sends notifications for a long-lasting unresolved alert at a specified time interval.
- `false`: The system sends a notification for a long-lasting unresolved alert based on an escalation policy.', example='true'),
        repeatInterval?: long(name='RepeatInterval', description='The time interval at which notifications are sent for a long-lasting unresolved alert. Unit: seconds.', example='600'),
        sendRecoverMessage?: boolean(name='SendRecoverMessage', description='Specifies whether the status of an alert automatically changes to Resolved when all events related to the alert change to the Restored state. The system notifies contacts when the alert status changes to Resolved.  

- `true`: The system sends a notification. This is the default value.
- `false`: The system does not send a notification.', example='true'),
      }
    ](name='NotificationPolicies', description='The information about the notification policies.'),
    page?: long(name='Page', description='The number of the page returned.', example='1'),
    size?: long(name='Size', description='The number of entries that are returned on each page.', example='20'),
    total?: long(name='Total', description='The number of notification policies that are returned.', example='24'),
  }(name='PageBean', description='The pages that are returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
}

model ListNotificationPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: ListNotificationPoliciesResponseBody(name='body'),
}

async function listNotificationPolicies(request: ListNotificationPoliciesRequest): ListNotificationPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNotificationPolicies', 'POST', '/', 'json', false, 'json', request);
}

model ListOnCallSchedulesRequest {
  name?: string(name='Name', description='The name of the scheduling policy.', example='OnCallSchedule_test', position='Query'),
  page: long(name='Page', description='The number of the page to return.', example='1', position='Query'),
  size: long(name='Size', description='The number of entries to return on each page.', example='20', position='Query'),
}

model ListOnCallSchedulesResponseBody = {
  pageBean?: {
    onCallSchedules?: [ 
      {
        description?: string(name='Description', description='The description of the scheduling policy.', example='Test scheduling policy'),
        id?: long(name='Id', description='The ID of the scheduling policy.', example='1234'),
        name?: string(name='Name', description='The name of the scheduling policy.', example='OnCallSchedule_test'),
      }
    ](name='OnCallSchedules', description='The information about the scheduling policy.'),
    page?: long(name='Page', description='The page number of the returned page.', example='1'),
    size?: long(name='Size', description='The number of entries returned per page.', example='20'),
    total?: long(name='Total', description='The total number of returned entries.', example='1'),
  }(name='PageBean', description='The objects that were returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
}

model ListOnCallSchedulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListOnCallSchedulesResponseBody(name='body'),
}

async function listOnCallSchedules(request: ListOnCallSchedulesRequest): ListOnCallSchedulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOnCallSchedules', 'GET', '/', 'json', false, 'json', request);
}

model ListPrometheusAlertRulesRequest {
  clusterId: string(name='ClusterId', example='c0bad479465464e1d8c1e641b0afb****', position='Query'),
  matchExpressions?: string(name='MatchExpressions', example='[{"key":"severity","value":"critical","operator":"re"}]', position='Query'),
  name?: string(name='Name', example='Prometheus_Alert', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  status?: int32(name='Status', example='1', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Query'),
  type?: string(name='Type', position='Query'),
}

model ListPrometheusAlertRulesResponseBody = {
  code?: long(name='Code'),
  message?: string(name='Message'),
  prometheusAlertRules?: [ 
    {
      alertId?: long(name='AlertId', example='3888704'),
      alertName?: string(name='AlertName', example='Prometheus_Alert'),
      annotations?: [ 
        {
          name?: string(name='Name', example='message'),
          value?: string(name='Value'),
        }
      ](name='Annotations'),
      clusterId?: string(name='ClusterId', example='c0bad479465464e1d8c1e641b0afb****'),
      dispatchRuleId?: long(name='DispatchRuleId', example='10282'),
      duration?: string(name='Duration', example='1m'),
      expression?: string(name='Expression', example='100 * (sum(rate(container_cpu_usage_seconds_total[1m])) by (pod_name) / sum(label_replace(kube_pod_container_resource_limits_cpu_cores, \\"pod_name\\", \\"$1\\", \\"pod\\", \\"(.*)\\")) by (pod_name))>75'),
      labels?: [ 
        {
          name?: string(name='Name', example='severity'),
          value?: string(name='Value', example='critical'),
        }
      ](name='Labels'),
      message?: string(name='Message'),
      notifyType?: string(name='NotifyType', example='ALERT_MANAGER'),
      status?: int32(name='Status', example='1'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      type?: string(name='Type'),
    }
  ](name='PrometheusAlertRules'),
  requestId?: string(name='RequestId', example='9FEA6D00-317F-45E3-9004-7FB8B0B7****'),
  success?: boolean(name='Success'),
}

model ListPrometheusAlertRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPrometheusAlertRulesResponseBody(name='body'),
}

async function listPrometheusAlertRules(request: ListPrometheusAlertRulesRequest): ListPrometheusAlertRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrometheusAlertRules', 'POST', '/', 'json', false, 'json', request);
}

model ListPrometheusAlertTemplatesRequest {
  clusterId?: string(name='ClusterId', example='c0bad479465464e1d8c1e641b0afb****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListPrometheusAlertTemplatesResponseBody = {
  prometheusAlertTemplates?: [ 
    {
      alertName?: string(name='AlertName'),
      annotations?: [ 
        {
          name?: string(name='Name', example='message'),
          value?: string(name='Value'),
        }
      ](name='Annotations'),
      description?: string(name='Description'),
      duration?: string(name='Duration', example='1m'),
      expression?: string(name='Expression', example='node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes * 100 < 10'),
      labels?: [ 
        {
          name?: string(name='Name', example='severity'),
          value?: string(name='Value', example='warning'),
        }
      ](name='Labels'),
      type?: string(name='Type'),
      version?: string(name='Version', example='1.0'),
    }
  ](name='PrometheusAlertTemplates'),
  requestId?: string(name='RequestId', example='9FEA6D00-317F-45E3-9004-7FB8B0B7****'),
}

model ListPrometheusAlertTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPrometheusAlertTemplatesResponseBody(name='body'),
}

async function listPrometheusAlertTemplates(request: ListPrometheusAlertTemplatesRequest): ListPrometheusAlertTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrometheusAlertTemplates', 'POST', '/', 'json', false, 'json', request);
}

model ListPrometheusGlobalViewRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListPrometheusGlobalViewResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='DBDCE95A-A0DD-5FC5-97CC-EEFC3D814385'),
}

model ListPrometheusGlobalViewResponse = {
  headers: map[string]string(name='headers'),
  body: ListPrometheusGlobalViewResponseBody(name='body'),
}

async function listPrometheusGlobalView(request: ListPrometheusGlobalViewRequest): ListPrometheusGlobalViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrometheusGlobalView', 'POST', '/', 'json', false, 'json', request);
}

model ListPrometheusInstanceByTagAndResourceGroupIdRequest {
  regionId: string(name='RegionId', description='code!=200', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='http://arms.${regionId}.aliyun-inc.com:8099/prometheus/ListPrometheusInstanceByTagAndResourceGroupId.json', example='rg-acfmxyexli2****', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='fpx-tag'),
      value?: string(name='Value', example='fvt-tag-value'),
    }
  ](name='Tag', position='Query'),
}

model ListPrometheusInstanceByTagAndResourceGroupIdResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    prometheusInstances?: [ 
      {
        clusterId?: string(name='ClusterId', example='c9d5dda1aeca64220853ace304baeb03d'),
        clusterName?: string(name='ClusterName', example='prom1'),
        clusterType?: string(name='ClusterType', example='ecs'),
        grafanaInstanceId?: string(name='GrafanaInstanceId', example='grafana-rnggfvhlcdl6m71l**'),
        paymentType?: string(name='PaymentType', example='POSTPAY'),
        regionId?: string(name='RegionId', example='cn-shanghai'),
        resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmz7nocpeidcy'),
        resourceType?: string(name='ResourceType', description='资源类型', example='PROMETHEUS'),
        securityGroupId?: string(name='SecurityGroupId', example='sg-f8zd1toc10wmbi1v5rom'),
        subClustersJson?: string(name='SubClustersJson'),
        tags?: [ 
          {
            tagKey?: string(name='TagKey', example='ac-cus-tag-3'),
            tagValue?: string(name='TagValue', example='asg-2vc8qq7x89o11rus9uvu'),
          }
        ](name='Tags'),
        userId?: string(name='UserId', example='1672753017899***'),
        vSwitchId?: string(name='VSwitchId', example='vsw-f8z73vcja1tqnw90aav5a'),
        vpcId?: string(name='VpcId', example='vpc-8vbtp1fsm8mir18l8rl0u'),
      }
    ](name='PrometheusInstances'),
  }(name='Data'),
  message?: string(name='Message', example='message'),
  requestId?: string(name='RequestId', example='4789C3E9-A85A-524B-B97B-9D2B14BA06BC'),
}

model ListPrometheusInstanceByTagAndResourceGroupIdResponse = {
  headers: map[string]string(name='headers'),
  body: ListPrometheusInstanceByTagAndResourceGroupIdResponseBody(name='body'),
}

async function listPrometheusInstanceByTagAndResourceGroupId(request: ListPrometheusInstanceByTagAndResourceGroupIdRequest): ListPrometheusInstanceByTagAndResourceGroupIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrometheusInstanceByTagAndResourceGroupId', 'POST', '/', 'json', false, 'json', request);
}

model ListPrometheusInstancesRequest {
  clusterType?: string(name='ClusterType', description='实例类型', example='cloud-product-prometheus', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  showGlobalView: boolean(name='ShowGlobalView', description='Specifies whether to query global aggregation instances. Valid values:

*   true
*   false', example='true', position='Query'),
}

model ListPrometheusInstancesResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', description='The queried Prometheus instances. The value is a JSON string.', example='[{"agentStatus":"0","clusterId":"global-v2-cn-1672753017899-dmjnwtzz","clusterName":"test-GlobalView","clusterType":"GlobalViewV2","commercialConfig":{},"createTime":1656579981000,"id":13785300,"isAdvancedClusterInstalled":false,"isClusterRunning":true,"isControllerInstalled":true,"isIntegrationCenter":false,"regionId":"cn-hongkong","updateTime":1657616273000,"userId":"1672753017899"},{"agentStatus":"0","clusterId":"51a123a61a8f31f0","clusterName":"cloud-product-prometheus_cn-qingdao","clusterType":"cloud-product-prometheus","commercialConfig":{},"controllerId":"51a123a61a8f31f0","createTime":1653532488000,"id":13746658,"isAdvancedClusterInstalled":false,"isClusterRunning":true,"isControllerInstalled":true,"isIntegrationCenter":false,"regionId":"cn-qingdao","updateTime":1653532518000,"userId":"1672753017899"}]'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='E9C9DA3D-10FE-472E-9EEF-2D0A3E41****'),
}

model ListPrometheusInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPrometheusInstancesResponseBody(name='body'),
}

async function listPrometheusInstances(request: ListPrometheusInstancesRequest): ListPrometheusInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrometheusInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListPrometheusIntegrationRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance. Only aliyun-cs and ecs instances are supported.', example='c77f6f2397ea74672872acf5e31374a27', position='Query'),
  integrationType: string(name='IntegrationType', description='The integration type.', example='kafka, mysql, redis, snmp, emr, nubela, and tidb', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model ListPrometheusIntegrationResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: [ 
    {
      canDelete?: boolean(name='CanDelete', description='Indicates whether the exporter can be deleted.', example='true'),
      canEditor?: boolean(name='CanEditor', description='Indicates whether the exporter can be edited.', example='true'),
      clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='c589a1b8db05c4561aefbb898ca8fb1cf'),
      containerName?: string(name='ContainerName', description='The name of the container.', example='container-1'),
      describe?: string(name='Describe', description='The description of the exporter.', example='"{}"'),
      exporterType?: string(name='ExporterType', description='The type of the exporter.', example='kafka-exporter'),
      instanceId?: long(name='InstanceId', description='The exporter ID.', example='29374'),
      instanceName?: string(name='InstanceName', description='The name of the exporter.', example='inet'),
      integrationType?: string(name='IntegrationType', description='The integration type.', example='kafka, mysql, redis, snmp, emr, nubela, and tidb'),
      namespace?: string(name='Namespace', description='The namespace.', example='arms-prom'),
      needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether an upgrade is required.', example='true'),
      param?: string(name='Param', description='The configurations of the exporter. The value is a JSON string.', example='{
      "port": "5554",
      "name": "kafka-test12",
      "kafka_instance": "kafka-test",
      "__label_value": "kafka-test",
      "scrape_interval": 33,
      "metrics_path": "/metrics",
      "__label_key": "kafka-test"
}'),
      podName?: string(name='PodName', description='The pod name of the exporter.', example='kafka-exporter-1'),
      showDescribe?: boolean(name='ShowDescribe', description='Indicates whether the description is displayed.', example='true'),
      showLog?: boolean(name='ShowLog', description='Indicates whether the exporter logs are displayed.', example='true'),
      status?: string(name='Status', description='The status of the exporter.', example='installed'),
      target?: string(name='Target', description='The monitored IP address.', example='121.40.62.240:3342'),
      version?: string(name='Version', description='The version number.', example='1.0.0'),
    }
  ](name='Data', description='The queried exporters.'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='1F1D8840-5330-5804-A8DB-C3C5C5CED6BB'),
}

model ListPrometheusIntegrationResponse = {
  headers: map[string]string(name='headers'),
  body: ListPrometheusIntegrationResponseBody(name='body'),
}

async function listPrometheusIntegration(request: ListPrometheusIntegrationRequest): ListPrometheusIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrometheusIntegration', 'POST', '/', 'json', false, 'json', request);
}

model ListPrometheusMonitoringRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. Default value: `cn-hangzhou`.', example='cn-hangzhou', position='Query'),
  type?: string(name='Type', description='The type of the monitoring configuration. Valid values for a Prometheus instance for Container Service: ServiceMonitor, PodMonitor, CustomJob, and Probe. Valid values for a Prometheus instance for ECS: CustomJob and Probe.', example='serviceMonitor', position='Query'),
}

model ListPrometheusMonitoringResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: [ 
    {
      clusterId?: string(name='ClusterId', description='Prometheus实例ID。', example='c589a1b8db05c4561aefbb898ca8fb1cf'),
      configYaml?: string(name='ConfigYaml', description='The monitoring configuration. The value is a YAML string.'),
      monitoringName?: string(name='MonitoringName', description='The name of the monitoring configuration.', example='podMonitor1'),
      status?: string(name='Status', description='The status of the monitoring configuration.', example='run'),
      type?: string(name='Type', description='The type of the monitoring configuration.', example='podMonitor'),
    }
  ](name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='D80ADAAC-8C32-5479-BD14-C28CF832****'),
}

model ListPrometheusMonitoringResponse = {
  headers: map[string]string(name='headers'),
  body: ListPrometheusMonitoringResponseBody(name='body'),
}

async function listPrometheusMonitoring(request: ListPrometheusMonitoringRequest): ListPrometheusMonitoringResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrometheusMonitoring', 'POST', '/', 'json', false, 'json', request);
}

model ListPrometheusRemoteWritesRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance. Only aliyun-cs and ecs instances are supported.', example='cc7a37ee31aea4ed1a059eff8034b\\*\\*\\*\\* or vpc-\\*\\*\\*\\*', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model ListPrometheusRemoteWritesResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  data?: [ 
    {
      clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='c589a1b8db05c4561aefbb898ca8fb1cf'),
      remoteWriteName?: string(name='RemoteWriteName', description='The name of the remote write configuration.', example='abc123'),
      remoteWriteYaml?: string(name='RemoteWriteYaml', description='The remote write configuration. The configuration is displayed in the YAML format.', example='Please refer to the supplementary explanation of the request parameters.'),
    }
  ](name='Data', description='The queried remote write configurations.', example='[
  {
    "name": "TiDBxxx",
    "yaml": "remote_write:\\\\n- basic_auth: {password: \\"******\\", username: xxx}\\\\n  name: TiDBxxx\\\\n  write_relabel_configs:\\\\n  - regex: si-6e2ca86444db4e55a7c1\\\\n    source_labels: [instance_id]\\\\n    action: keep\\\\n    separator: ;\\\\n    replacement: $1\\\\n  url: http://xxx:8080/prometheus/xxx/ddd/cn-hangzhou/api/v3/write\\\\n"
  },
  {
    "name": "TiDBxxx1",
    "yaml": "remote_write:\\\\n- basic_auth: {password: \\"******\\", username: xxx}\\\\n  name: TiDBxxx1\\\\n  write_relabel_configs:\\\\n  - regex: si-6e2ca86444db4e55a7c1\\\\n    source_labels: [instance_id]\\\\n    action: keep\\\\n    separator: ;\\\\n    replacement: $1\\\\n  url: http://xxx:8080/prometheus/xxx/ddd/cn-hangzhou/api/v3/write\\\\n"
  }
]'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='9319A57D-2D9E-472A-B69B-CF3CD16D****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model ListPrometheusRemoteWritesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPrometheusRemoteWritesResponseBody(name='body'),
}

async function listPrometheusRemoteWrites(request: ListPrometheusRemoteWritesRequest): ListPrometheusRemoteWritesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrometheusRemoteWrites', 'POST', '/', 'json', false, 'json', request);
}

model ListRetcodeAppsRequest {
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. You can obtain the resource group ID in the **Resource Management** console.', example='rg-acfmxyexli2****', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The tags.', position='Query'),
}

model ListRetcodeAppsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='99A663CB-8D7B-4B0D-A006-03C8EE38E7BB'),
  retcodeApps?: [ 
    {
      appId?: long(name='AppId', description='The ID of the application. The parameter is an auto-increment parameter.', example='16064'),
      appName?: string(name='AppName', description='The name of the application.', example='A1'),
      nickName?: string(name='NickName', description='The alias of the application monitored by Browser Monitoring.', example='B1'),
      pid?: string(name='Pid', description='The PID of the application.', example='atc889zkcf@d8deedfa9bf****'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****'),
      retcodeAppType?: string(name='RetcodeAppType', description='The type of the application. Valid values:

*   `web`: web application
*   `weex`: Weex mobile app
*   `mini_dd`: DingTalk mini program
*   `mini_alipay`: Alipay mini program
*   `mini_wx`: WeChat mini program
*   `mini_common`: mini program on other platforms', example='web'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='TestKey'),
          value?: string(name='Value', description='The tag value.', example='TestValue'),
        }
      ](name='Tags', description='The tags.'),
    }
  ](name='RetcodeApps', description='The list of applications monitored by Browser Monitoring.'),
}

model ListRetcodeAppsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRetcodeAppsResponseBody(name='body'),
}

/**
  * ****
  *
 */
async function listRetcodeApps(request: ListRetcodeAppsRequest): ListRetcodeAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRetcodeApps', 'POST', '/', 'json', false, 'json', request);
}

model ListScenarioRequest {
  appId: string(name='AppId', description='The ID of the application.', example='b590lhguqs@28f515462******', position='Query'),
  name: string(name='Name', description='The name of the business monitoring job.', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-zhangjaikou', position='Query'),
  scenario?: string(name='Scenario', description='The scenario where the business monitoring job is used. Valid values:

*   `USER-DEFINED`: user-defined. This is the default value.
*   `EDAS-ROLLOUT`: application release in Enterprise Distributed Application Service (EDAS)
*   `OAM-ROLLOUT`: application release based on Open Application Model (OAM)
*   `MSC-CANARY`: canary release based on Microservice Engine (MSE)', example='USER-DEFINED', position='Query'),
  sign?: string(name='Sign', description='The code of the business monitoring job. Set this parameter when you know the code of the business monitoring job you want to query.', example='a9f8****', position='Query'),
}

model ListScenarioResponseBody = {
  armsScenarios?: [ 
    {
      appId?: string(name='AppId', description='The ID of the application.', example='b590lhguqs@28f515462******'),
      createTime?: string(name='CreateTime', description='The time when the business monitoring job was created.', example='1585214916000'),
      extensions?: string(name='Extensions', description='The extended information. The value is a JSON string.', example='{"_MODE": "CUSTOM-TRANSACTION","_SCENARIO": "USER-DEFINED"}'),
      id?: long(name='Id', description='The ID of the business monitoring job.', example='132'),
      name?: string(name='Name', description='The name of the business monitoring job.'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-zhangjiakou'),
      sign?: string(name='Sign', description='The code of the business monitoring job.', example='a9f8****'),
      updateTime?: string(name='UpdateTime', description='The time when the business monitoring job was updated.', example='1585214916000'),
      userId?: string(name='UserId', description='The ID of the user.', example='113197164949****'),
    }
  ](name='ArmsScenarios', description='The detailed information of the business monitoring job.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='98027D1F-3AEB-492C-A4AA-E9217992****'),
}

model ListScenarioResponse = {
  headers: map[string]string(name='headers'),
  body: ListScenarioResponseBody(name='body'),
}

async function listScenario(request: ListScenarioRequest): ListScenarioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListScenario', 'POST', '/', 'json', false, 'json', request);
}

model ListSilencePoliciesRequest {
  isDetail?: boolean(name='IsDetail', description='The operation that you want to perform. Set the value to **ListSilencePolicies**.', example='true', position='Query'),
  name?: string(name='Name', description='An array of matching condition objects.', example='silencepolicy_test', position='Query'),
  page: long(name='Page', description='The number of entries to return on each page.', example='1', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  size: long(name='Size', description='The ID of the silence policy.', example='20', position='Query'),
}

model ListSilencePoliciesResponseBody = {
  pageBean?: {
    page?: long(name='Page', description='The name of the silence policy.', example='1'),
    silencePolicies?: [ 
      {
        id?: long(name='Id', description='The name of the silence policy.', example='123'),
        matchingRules?: [ 
          {
            matchingConditions?: [ 
              {
                key?: string(name='Key', example='altertname'),
                operator?: string(name='Operator', example='eq'),
                value?: string(name='Value', example='test'),
              }
            ](name='MatchingConditions', description='The ID of the request.'),
          }
        ](name='MatchingRules', description='Specifies whether to query the details of a silence policy. Valid values:

*   `true`: Details of the silence policy are queried.
*   `false`: Details of the silence policy are not queried.'),
        name?: string(name='Name', description='An array of returned objects.', example='silencepolicy_test'),
      }
    ](name='SilencePolicies', description='The number of silence policies that were returned.'),
    size?: long(name='Size', description='The number of entries that were returned on each page.', example='20'),
    total?: long(name='Total', description='An array of matching rule objects.', example='1'),
  }(name='PageBean', description='The value of the matching condition.'),
  requestId?: string(name='RequestId', description='The logical operator of the matching condition. Valid values:

*   `eq`: equal to.
*   `neq`: not equal to.
*   `in`: contains.
*   `nin`: does not contain.
*   `re`: regular expression match.
*   `nre`: regular expression mismatch.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
}

model ListSilencePoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSilencePoliciesResponseBody(name='body'),
}

async function listSilencePolicies(request: ListSilencePoliciesRequest): ListSilencePoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSilencePolicies', 'POST', '/', 'json', false, 'json', request);
}

model ListTraceAppsRequest {
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxyexli2****', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The tags.', position='Query'),
}

model ListTraceAppsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned for the request. Valid values:

*   `2XX`: The request is successful.
*   `3XX`: A redirection message is returned.
*   `4XX`: The request is invalid.
*   `5XX`: A server error occurs.', example='200'),
  message?: string(name='Message', description='The error message returned if the request parameters are invalid.', example='Internal error. Please try again. Contact the DingTalk service account if the issue persists after multiple retries.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40B10E04-81E8-4643-970D-F1B38F2E****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   `true`: The call was successful.
*   `false`: The call failed.', example='true'),
  traceApps?: [ 
    {
      appId?: long(name='AppId', description='The application ID.', example='123'),
      appName?: string(name='AppName', description='The name of the application.', example='test-app'),
      createTime?: long(name='CreateTime', description='The time when the monitoring task was created. The value is a timestamp. Unit: milliseconds.', example='1529667762000'),
      labels?: [ string ](name='Labels', description='The labels of the application.'),
      pid?: string(name='Pid', description='The process identifier (PID) of the application.', example='a5f9bdeb-2627-4dbe-9247-****'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='Resource group'),
      show?: boolean(name='Show', description='Indicates whether the application is displayed in the Application Real-Time Monitoring Service (ARMS) console. Valid values:

*   `true`: yes
*   `false`: no', example='true'),
      source?: string(name='Source', description='The application source.', example='ACK'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='TestKey'),
          value?: string(name='Value', description='The tag value.', example='TestValue'),
        }
      ](name='Tags', description='The tags.'),
      type?: string(name='Type', description='The type of the monitoring task. Valid values:

*   `TRACE`: Application Monitoring
*   `RETCODE`: Browser Monitoring', example='TRACE'),
      updateTime?: long(name='UpdateTime', description='The time when the monitoring task was updated. The value is a timestamp. Unit: milliseconds.', example='1529667762000'),
      userId?: string(name='UserId', description='The user ID.', example='113197164949****'),
    }
  ](name='TraceApps', description='The list of Application Monitoring tasks.'),
}

model ListTraceAppsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTraceAppsResponseBody(name='body'),
}

async function listTraceApps(request: ListTraceAppsRequest): ListTraceAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTraceApps', 'POST', '/', 'json', false, 'json', request);
}

model ManageGetRecordingRuleRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  queryUserId: string(name='QueryUserId', description='The user ID.', example='876345234', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model ManageGetRecordingRuleResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data', description='The returned message.', example='--- groups: - name: "recording_demo"   rules:   - expr: "sum(jvm_memory_max_bytes)"     record: "rate_coredns_demo"'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model ManageGetRecordingRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ManageGetRecordingRuleResponseBody(name='body'),
}

async function manageGetRecordingRule(request: ManageGetRecordingRuleRequest): ManageGetRecordingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ManageGetRecordingRule', 'POST', '/', 'json', false, 'json', request);
}

model ManageRecordingRuleRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='cf09705f5a82f454db0d50420b6b4e904', position='Query'),
  queryUserId: string(name='QueryUserId', description='The user ID.', example='87348589207', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  ruleYaml: string(name='RuleYaml', description='The recording rule.', example='groups:\\n- interval: 60s\\n  name: auto_analyzer_recording_rule_60s\\n  rules:\\n  - expr: sum(node_cpu_seconds_total)\\n    record: sum:node_cpu_seconds_total:recording_rule_hash_f341458c0f7d\\n', position='Query'),
}

model ManageRecordingRuleResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', description='The result of the operation.', example='success'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to troubleshoot issues.', example='CD782AEC-A676-529F-8F26-0ED0FF0EF1EA'),
}

model ManageRecordingRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ManageRecordingRuleResponseBody(name='body'),
}

async function manageRecordingRule(request: ManageRecordingRuleRequest): ManageRecordingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ManageRecordingRule', 'POST', '/', 'json', false, 'json', request);
}

model OpenArmsDefaultSLRRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model OpenArmsDefaultSLRResponseBody = {
  data?: string(name='Data', example='true'),
  requestId?: string(name='RequestId', example='53CACA70-2CF7-490C-BD06-1A2AE4EB****'),
}

model OpenArmsDefaultSLRResponse = {
  headers: map[string]string(name='headers'),
  body: OpenArmsDefaultSLRResponseBody(name='body'),
}

async function openArmsDefaultSLR(request: OpenArmsDefaultSLRRequest): OpenArmsDefaultSLRResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenArmsDefaultSLR', 'POST', '/', 'json', false, 'json', request);
}

model OpenArmsServiceSecondVersionRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  type: string(name='Type', example='arms', position='Query'),
}

model OpenArmsServiceSecondVersionResponseBody = {
  orderId?: string(name='OrderId', example='20896874992****'),
  requestId?: string(name='RequestId', example='9ED50893-F3C4-42DF-ABB2-C200BE******'),
}

model OpenArmsServiceSecondVersionResponse = {
  headers: map[string]string(name='headers'),
  body: OpenArmsServiceSecondVersionResponseBody(name='body'),
}

async function openArmsServiceSecondVersion(request: OpenArmsServiceSecondVersionRequest): OpenArmsServiceSecondVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenArmsServiceSecondVersion', 'POST', '/', 'json', false, 'json', request);
}

model OpenVClusterRequest {
  clusterType: string(name='ClusterType', description='The type of the cluster. For cloud services, set this parameter to `cloud-product-prometheus`.', example='cloud-product-prometheus', position='Query'),
  length?: int32(name='Length', description='The length of the cluster ID. Default value: 10.', example='10', position='Query'),
  product?: string(name='Product', description='The name of the cloud service. This parameter must be specified when ClusterType is set to `cloud-product-prometheus`. Valid values: influxdb, mongodb, and DLA. You cannot specify multiple service names.', example='influxdb', position='Query'),
  recreateSwitch?: boolean(name='RecreateSwitch', description='Specifies whether to create or query a virtual cluster. This parameter provides backward compatibility.', example='false', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model OpenVClusterResponseBody = {
  data?: string(name='Data', description='The cluster ID.', example='rre59xelcx'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='42E58E4D-ACAD-4400-8FAF-F762340AE5B3'),
}

model OpenVClusterResponse = {
  headers: map[string]string(name='headers'),
  body: OpenVClusterResponseBody(name='body'),
}

async function openVCluster(request: OpenVClusterRequest): OpenVClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenVCluster', 'POST', '/', 'json', false, 'json', request);
}

model OpenXtraceDefaultSLRRequest {
  regionId: string(name='RegionId', description='Indicates whether the request was successful. Valid values:

*   `true`: The request was successful.
*   `false`: The request failed.', example='cn-hangzhou', position='Query'),
}

model OpenXtraceDefaultSLRResponseBody = {
  data?: string(name='Data', description='The ID of the request.', example='true'),
  requestId?: string(name='RequestId', description='Activates the service-linked role AliyunServiceRoleForXtrace for Tracing Analysis.', example='53CACA70-2CF7-490C-BD06-1A2AE4EB****'),
}

model OpenXtraceDefaultSLRResponse = {
  headers: map[string]string(name='headers'),
  body: OpenXtraceDefaultSLRResponseBody(name='body'),
}

async function openXtraceDefaultSLR(request: OpenXtraceDefaultSLRRequest): OpenXtraceDefaultSLRResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenXtraceDefaultSLR', 'POST', '/', 'json', false, 'json', request);
}

model QueryMetricByPageRequest {
  regionId: string(name='RegionId', position='Host'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: `1`.', example='1', minimum=1, maximum=2147483647, position='Query'),
  customFilters?: [ string ](name='CustomFilters', description='Custom filter conditions.', position='Query'),
  dimensions?: [ string ](name='Dimensions', description='The dimensions of the metric that you want to query.', example='["detector_browser","detector_device"]', position='Query'),
  endTime: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1667546895000', minimum=0, maximum=9223372036854775806, position='Query'),
  filters?: [ 
    {
      key?: string(name='Key', description='The key of the filter condition. You must set the key to `pid` or `regionId`.', example='pid'),
      value?: string(name='Value', description='The value of the filter condition. You must set the value of the `pid` or `regionId` condition. For information about how to obtain the `pid`, see the "Obtain the PID of an application" section.', example='xxx@74xxx'),
    }
  ](name='Filters', description='The filter conditions.', position='Query'),
  intervalInSec?: int32(name='IntervalInSec', description='The time interval at which data entries are aggregated. Unit: milliseconds. Minimum value: 60000.', example='100000', minimum=0, maximum=2147483647, position='Query'),
  measures?: [ string ](name='Measures', description='The measures of the metric that you want to query.', example='pv', position='Query'),
  metric: string(name='Metric', description='The metric that you want to query. You cannot specify a custom metric. For more information, see the "Application monitoring metrics that can be queried" section.', example='appstat.host', position='Query'),
  order?: string(name='Order', description='The order in which measures are sorted. Valid values:

*   `ASC`: ascending order
*   `DESC`: descending order

> If you do not specify the parameter, data is not sorted.', example='ASC', position='Query'),
  orderBy?: string(name='OrderBy', description='The dimension from which metrics are sorted. You can set this parameter to a supported dimension.', example='pid', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. This parameter is no longer supported. The number of entries to return on each page.', example='10', minimum=1, maximum=2147483647, position='Query'),
  startTime: long(name='StartTime', description='The start of the time range to query. Unit: milliseconds.', example='1667287695000', minimum=0, maximum=9223372036854775806, position='Query'),
}

model QueryMetricByPageResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned for the request. Valid values:

*   2XX: The request was successful.
*   3XX: A redirection message was returned.
*   4XX: The request was invalid.
*   5XX: A server error occurred.', example='200'),
  data?: {
    completed?: boolean(name='Completed'),
    items?: [  map[string]any ](name='Items', description='The data entries returned.'),
    page?: int32(name='Page', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='1'),
    total?: int32(name='Total', description='The total number of entries returned.', example='2'),
  }(name='Data', description='The information about the array object.'),
  message?: string(name='Message', description='The error message returned if the call fails.', example='StartTime is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The request ID.', example='687F9CB7-4798-57BF-A6EE-E6CC76******'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   `true`: The call was successful.
*   `false`: The call failed.', example='true'),
}

model QueryMetricByPageResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMetricByPageResponseBody(name='body'),
}

async function queryMetricByPage(request: QueryMetricByPageRequest): QueryMetricByPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMetricByPage', 'POST', '/', 'json', false, 'json', request);
}

model QueryPromInstallStatusRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model QueryPromInstallStatusResponseBody = {
  data?: {
    isControllerInstalled?: boolean(name='isControllerInstalled', description='Indicates whether the call was successful. Valid values:

true: The call was successful. false: The call fails.', example='true'),
  }(name='Data', description='The returned struct.'),
  requestId?: string(name='RequestId', description='The request ID.', example='27E653FA-5958-45BE-8AA9-14D884DC****'),
}

model QueryPromInstallStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPromInstallStatusResponseBody(name='body'),
}

async function queryPromInstallStatus(request: QueryPromInstallStatusRequest): QueryPromInstallStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPromInstallStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryReleaseMetricRequest {
  regionId: string(name='RegionId', position='Host'),
  changeOrderId: string(name='ChangeOrderId', example='a341a2f2-ed07-4257-aae9-dfb1be******', position='Query'),
  createTime?: long(name='CreateTime', example='1634005438000', position='Query'),
  metricType?: string(name='MetricType', example='SystemContrast', position='Query'),
  pid: string(name='Pid', example='8b46d03f-5947-449d-90fd-3a96c2******', position='Query'),
  proxyUserId?: string(name='ProxyUserId', example='null', position='Query'),
  releaseEndTime: long(name='ReleaseEndTime', example='1632798718632', position='Query'),
  releaseStartTime: long(name='ReleaseStartTime', example='1632798686692', position='Query'),
  service?: string(name='Service', example='clothservice', position='Query'),
}

model QueryReleaseMetricResponseBody = {
  data?: string(name='Data', example='{"data":{"SystemCpuUser":{"all":[{"date":1632798718000,"val":4.3277,"dim":"SystemCpuUser"},{"date":1632798733000,"val":8.1091,"dim":"SystemCpuUser"}]},"SystemMemUtil":{"all":[{"date":1632798718000,"val":73.4227,"dim":"SystemMemUtil"},{"date":1632798733000,"val":93.0977,"dim":"SystemMemUtil"}]}},"success":true}'),
  requestId?: string(name='RequestId', example='46355DD8-FC56-40C5-BFC6-269DE4F9****'),
}

model QueryReleaseMetricResponse = {
  headers: map[string]string(name='headers'),
  body: QueryReleaseMetricResponseBody(name='body'),
}

async function queryReleaseMetric(request: QueryReleaseMetricRequest): QueryReleaseMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryReleaseMetric', 'POST', '/', 'json', false, 'json', request);
}

model RemoveAliClusterIdsFromPrometheusGlobalViewRequest {
  clusterIds: string(name='ClusterIds', description='The IDs of clusters. Separate multiple IDs with commas (,).', example='cd1d55bef19904324a20ed0ebb86caa5c,c5b48729918ab4745a24482ac29d0973a, c00a94896641449098bf24931e4166003, cd174485c09384060ba542bc1be1185a4', position='Query'),
  globalViewClusterId: string(name='GlobalViewClusterId', description='The ID of the global aggregation instance.', example='global-v2-cn-1670100631025794-amaykca4', position='Query'),
  groupName: string(name='GroupName', description='The name of the global aggregation instance.', example='zyGlobalView', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    info?: string(name='Info', description='The Info-level information.', example='{regionId: the region where the global aggregation instance resides. globalViewClusterId: the ID of the global aggregation instance. failedClusterIds: the IDs of the clusters that failed to be added. A cluster may fail to be added if the specified cluster ID is invalid.}'),
    msg?: string(name='Msg', description='The additional information.', example='OK'),
    success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='F7781D4A-2818-41E7-B7BB-79D809E9****'),
}

model RemoveAliClusterIdsFromPrometheusGlobalViewResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody(name='body'),
}

async function removeAliClusterIdsFromPrometheusGlobalView(request: RemoveAliClusterIdsFromPrometheusGlobalViewRequest): RemoveAliClusterIdsFromPrometheusGlobalViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveAliClusterIdsFromPrometheusGlobalView', 'POST', '/', 'json', false, 'json', request);
}

model RemoveSourcesFromPrometheusGlobalViewRequest {
  globalViewClusterId: string(name='GlobalViewClusterId', example='global-v2-cn-1478326682034601-vss8pd0i', position='Query'),
  groupName: string(name='GroupName', example='zyGlobalView', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  sourceNames: string(name='SourceNames', example='localPrometheusClusterName,testCumterPrometheusName', position='Query'),
}

model RemoveSourcesFromPrometheusGlobalViewResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    info?: string(name='Info'),
    msg?: string(name='Msg', example='OK'),
    success?: boolean(name='Success', example='True'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='9319A57D-2D9E-472A-B69B-CF3CD16D****'),
}

model RemoveSourcesFromPrometheusGlobalViewResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveSourcesFromPrometheusGlobalViewResponseBody(name='body'),
}

async function removeSourcesFromPrometheusGlobalView(request: RemoveSourcesFromPrometheusGlobalViewRequest): RemoveSourcesFromPrometheusGlobalViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveSourcesFromPrometheusGlobalView', 'POST', '/', 'json', false, 'json', request);
}

model SaveTraceAppConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  pid: string(name='Pid', example='a2n80plglh@745eddxxx', position='Query'),
  settings?: [ 
    {
      key?: string(name='Key', example='sampling.enable'),
      value?: string(name='Value', example='true'),
    }
  ](name='Settings', position='Query'),
}

model SaveTraceAppConfigResponseBody = {
  code?: long(name='Code'),
  data?: string(name='Data', example='success'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='78901766-3806-4E96-8E47-CFEF59E4****'),
  success?: boolean(name='Success'),
}

model SaveTraceAppConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SaveTraceAppConfigResponseBody(name='body'),
}

async function saveTraceAppConfig(request: SaveTraceAppConfigRequest): SaveTraceAppConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveTraceAppConfig', 'POST', '/', 'json', false, 'json', request);
}

model SearchAlertContactRequest {
  contactIds?: string(name='ContactIds', example='[12345]', position='Query'),
  contactName?: string(name='ContactName', example='John Doe', position='Query'),
  currentPage?: string(name='CurrentPage', example='1', position='Query'),
  email?: string(name='Email', example='someone@example.com', position='Query'),
  pageSize?: string(name='PageSize', example='20', position='Query'),
  phone?: string(name='Phone', example='1381111*****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model SearchAlertContactResponseBody = {
  pageBean?: {
    contacts?: [ 
      {
        contactId?: long(name='ContactId', example='123'),
        contactName?: string(name='ContactName', example='John Doe'),
        content?: string(name='Content'),
        createTime?: long(name='CreateTime', example='1572349025000'),
        dingRobot?: string(name='DingRobot', example='https://oapi.dingtalk.com/robot/send?access_token=91f2f6****'),
        email?: string(name='Email', example='someone@example.com'),
        phone?: string(name='Phone', example='1381111*****'),
        resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxyexli2****'),
        systemNoc?: boolean(name='SystemNoc', example='false'),
        updateTime?: long(name='UpdateTime', example='1580258717000'),
        userId?: string(name='UserId', example='113197164949****'),
        webhook?: string(name='Webhook', example='{\\"body\\":\\"{   \\\\\\"msg_type\\\\\\": \\\\\\"text\\\\\\",   \\\\\\"content\\\\\\": {     \\\\\\"text\\\\\\": \\\\\\"$content\\\\\\"   } }\\",\\"header\\":{\\"Arms-Content-Type\\":\\"json\\"},\\"method\\":\\"post\\",\\"params\\":{},\\"url\\":\\"https://***",\\"userId\\":\\"1131971649***\\"}",'),
      }
    ](name='Contacts'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='23'),
  }(name='PageBean'),
  requestId?: string(name='RequestId', example='21E85B16-75A6-429A-9F65-8AAC9A54****'),
}

model SearchAlertContactResponse = {
  headers: map[string]string(name='headers'),
  body: SearchAlertContactResponseBody(name='body'),
}

/**
  * The ID of the resource group.
  *
 */
async function searchAlertContact(request: SearchAlertContactRequest): SearchAlertContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchAlertContact', 'POST', '/', 'json', false, 'json', request);
}

model SearchAlertContactGroupRequest {
  contactGroupIds?: string(name='ContactGroupIds', example='746', position='Query'),
  contactGroupName?: string(name='ContactGroupName', example='TestGroup', position='Query'),
  contactId?: long(name='ContactId', example='123', position='Query'),
  contactName?: string(name='ContactName', example='John Doe', position='Query'),
  isDetail?: boolean(name='IsDetail', example='true', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model SearchAlertContactGroupResponseBody = {
  contactGroups?: [ 
    {
      contactGroupId?: long(name='ContactGroupId', example='746'),
      contactGroupName?: string(name='ContactGroupName', example='TestGroup'),
      contacts?: [ 
        {
          contactId?: long(name='ContactId', example='123'),
          contactName?: string(name='ContactName', example='John Doe'),
          createTime?: long(name='CreateTime', example='1572349025000'),
          dingRobot?: string(name='DingRobot', example='https://oapi.dingtalk.com/robot/send?access_token=91f2f6****'),
          email?: string(name='Email', example='someone@example.com'),
          phone?: string(name='Phone', example='1381111*****'),
          systemNoc?: boolean(name='SystemNoc', example='false'),
          updateTime?: long(name='UpdateTime', example='1580258717000'),
          userId?: string(name='UserId', example='113197164949****'),
        }
      ](name='Contacts'),
      createTime?: long(name='CreateTime', example='1529668855000'),
      updateTime?: long(name='UpdateTime', example='1529668855000'),
      userId?: string(name='UserId', example='113197164949****'),
    }
  ](name='ContactGroups'),
  requestId?: string(name='RequestId', example='4D6C358A-A58B-4F4B-94CE-F5AAF023****'),
}

model SearchAlertContactGroupResponse = {
  headers: map[string]string(name='headers'),
  body: SearchAlertContactGroupResponseBody(name='body'),
}

/**
  * The mobile number of the alert contact.
  *
 */
async function searchAlertContactGroup(request: SearchAlertContactGroupRequest): SearchAlertContactGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchAlertContactGroup', 'POST', '/', 'json', false, 'json', request);
}

model SearchAlertHistoriesRequest {
  alertId?: long(name='AlertId', description='The ID of the alert rule. You can call the SearchAlertRules operation and view the `Id` parameter in the response. For more information, see [SearchAlertRules](~~175825~~).', example='123', position='Query'),
  alertType?: int32(name='AlertType', description='The type of the alert rule. Valid values:

*   `1`: a custom alert rule that is used to monitor drill-down data sets
*   `3`: a custom alert rule that is used to monitor tiled data sets
*   `4`: an alert rule that is used to monitor web pages, including the default alert rule for browser monitoring
*   `5`: an alert rule that is used to monitor applications, including the default alert rule for application monitoring
*   `6`: the default alert rule for browser monitoring
*   `7`: the default alert rule for application monitoring
*   `8`: a Tracing Analysis alert rule
*   `101`: a Prometheus alert rule', example='4', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: `1`.', example='1', position='Query'),
  endTime?: long(name='EndTime', description='The end of the time range to query. The value is a UNIX timestamp of the LONG data type. Unit: milliseconds. The default value is the current time.', example='1579499626000', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: `10`.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. Default value: `cn-hangzhou`.', example='cn-hangzhou', position='Query'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. The value is a UNIX timestamp of the LONG data type. Unit: milliseconds. The default value is 10 minutes before the current time.', example='1595568910000', position='Query'),
}

model SearchAlertHistoriesResponseBody = {
  pageBean?: {
    alarmHistories?: [ 
      {
        alarmContent?: string(name='AlarmContent', description='The content of the alert notification.', example='"Alert name: Alert1\\nAlert time: 2020-07-24 12:14:00\\nAlert content: A total of four alerts are triggered: \\*\\*\\*\\*"'),
        alarmResponseCode?: int32(name='AlarmResponseCode', description='The response code returned after the alert notification was sent.', example='200'),
        alarmSources?: string(name='AlarmSources', description='The webhook URL, such as the webhook URL of a DingTalk chatbot.', example='https://oapi.dingtalk.com/robot/send?access_token=91f2f65002fefe0ab9b71e6590c5ca504348cad742ff01e9c8ab204439ca****'),
        alarmTime?: long(name='AlarmTime', description='The time when the alert notification was sent.', example='1595564179000'),
        alarmType?: int32(name='AlarmType', description='The type of the alert rule. Default value: 4. Valid values:

*   `1`: a custom alert rule that is used to monitor drill-down data sets
*   `3`: a custom alert rule that is used to monitor tiled data sets
*   `4`: an alert rule that is used to monitor web pages, including the default alert rule for browser monitoring
*   `5`: an alert rule that is used to monitor applications, including the default alert rule for application monitoring
*   `6`: the default alert rule for browser monitoring
*   `7`: the default alert rule for application monitoring
*   `8`: a Tracing Analysis alert rule
*   `101`: a Prometheus alert rule', example='4'),
        emails?: string(name='Emails', description='The email address of the alert contact.', example='someone@example.com'),
        id?: long(name='Id', description='The ID of the alert notification.', example='123'),
        phones?: string(name='Phones', description='The mobile phone number of the alert contact.', example='1381111****'),
        strategyId?: string(name='StrategyId', description='The internal fields.', example='""'),
        target?: string(name='Target', description='The internal fields.', example='""'),
        userId?: string(name='UserId', description='The ID of the user.', example='113197164949****'),
      }
    ](name='AlarmHistories', description='The information about alert records.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='2'),
  }(name='PageBean', description='The returned struct.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2FC13182-B9AF-4E6B-BE51-72669B7C****'),
}

model SearchAlertHistoriesResponse = {
  headers: map[string]string(name='headers'),
  body: SearchAlertHistoriesResponseBody(name='body'),
}

/**
  * This operation is no longer maintained. To query alert records, call the ListAlerts operation provided by the new version of Alert Management.
  *
 */
async function searchAlertHistories(request: SearchAlertHistoriesRequest): SearchAlertHistoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchAlertHistories', 'POST', '/', 'json', false, 'json', request);
}

model SearchAlertRulesRequest {
  alertRuleId?: string(name='AlertRuleId', example='12345', position='Query'),
  appType?: string(name='AppType', description='The type of the application that is associated with the alert rule. Valid values:

*   `TRACE`: application
*   `RETCODE`: browser', example='TRACE', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The page number of the page to return. Default value: `1`.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return per page. Default value: `10`.', example='20', position='Query'),
  pid?: string(name='Pid', description='The process identifier (PID) of the application that is associated with the alert rule. For more information about how to obtain the PID, see [Obtain the PID of an application](https://help.aliyun.com/document_detail/186100.html?spm=a2c4g.11186623.6.792.1b50654cqcDPyk#title-imy-7gj-qhr).', example='atc889zkcf@d8deedfa9bf****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the alert data. For more information about the mappings between **RegionId** and **SystemRegionId**, see the detailed description below the table.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxyexli2****', position='Query'),
  systemRegionId?: string(name='SystemRegionId', description='The region ID of the alert rule. For more information about the mappings between **RegionId** and **SystemRegionId**, see the detailed description below the table.', example='cn-hangzhou', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of the tag. The following system preset fields are provided:

*   traceId: the ID of the trace.
*   serverApp: the name of the server application.
*   clientApp: the name of the client application.
*   service: the name of the operation.
*   rpc: the type of the call.
*   msOfSpan: the duration exceeds a specific value.
*   clientIp: the IP address of the client.
*   serverIp: the IP address of the server.
*   isError: specifies whether the call is abnormal.
*   hasTprof: contains only thread profiling.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The list of tags.', position='Query'),
  title?: string(name='Title', description='The alert rule name.', example='AlertRuleTitle', position='Query'),
  type?: string(name='Type', description='The alert rule type. Valid values:

*   `1`: custom alert rules that are used to monitor drill-down data sets
*   `3`: custom alert rules that are used to monitor tiled data sets
*   `4`: alert rules that are used to monitor the browser, including the default frontend alert rules
*   `5`: alert rules that are used to monitor applications, including the default application alert rules
*   `6`: the default browser alert rules
*   `7`: the default application alert rules
*   `8`: Tracing Analysis alert rules
*   `101`: Prometheus alert rules', example='4', position='Query'),
}

model SearchAlertRulesResponseBody = {
  pageBean?: {
    alertRules?: [ 
      {
        alarmContext?: {
          alarmContentSubTitle?: string(name='AlarmContentSubTitle', description='The sub-title of the alert notification content.', example='TestSubTitle'),
          alarmContentTemplate?: string(name='AlarmContentTemplate', description='The template of the alert notification.', example='Alert name: $Alert name\\nFilter condition: $Filter\\nAlert time: $Alert time\\nAlert content: $Alert content\\nNote: The alert persists until a reply email is received. The system will remind you again in 24 hours.'),
          content?: string(name='Content', description='The content of the alert notification.', example='Alert name: $Alert name\\nFilter condition: $Filter\\nAlert time: $Alert time\\nAlert content: $Alert content\\nNote: The alert persists until a reply email is received. The system will remind you again in 24 hours.'),
          subTitle?: string(name='SubTitle', description='The sub-title of the alert notification.', example='test'),
        }(name='AlarmContext', description='The format of the alert notification.'),
        alertLevel?: string(name='AlertLevel', description='The severity of the alerts. Only the value `WARN` is supported.', example='WARN'),
        alertRule?: {
          operator?: string(name='Operator', description='The logical operator between conditions. Valid values: `&`: AND. `|`: OR.', example='|'),
          rules?: [ 
            {
              aggregates?: string(name='Aggregates', description='The aggregation logic of the metric data of the alert rule. Valid values:

*   `AVG`: calculates the average value for each minute
*   `SUM`: calculates the total value for each minute
*   `MAX`: calculates the maximum value for each minute
*   `MIN`: calculates the minimum value for each minute', example='AVG'),
              alias?: string(name='Alias', description='The displayed description of the alert metric.', example='response time_ms'),
              measure?: string(name='Measure', description='The metric based on which alerts are triggered. For more information, see the "[Alert metrics](https://help.aliyun.com/document_detail/175825.html#h2-url-4)" section in this topic.', example='appstat.jvm.SystemDiskFree'),
              nValue?: int32(name='NValue', description='The time range when data is requested. Unit: minutes. For example, a value of 5 indicates that the alert rule applies to the data in the last 5 minutes.', example='5'),
              operator?: string(name='Operator', description='The operation logic of the condition. Valid values:

*   CURRENT_GTE: greater than or equal to
*   CURRENT_LTE: less than or equal to
*   PREVIOUS_UP: the increase percentage compared with the last period
*   PREVIOUS_DOWN: the decrease percentage compared with the last period
*   HOH_UP: the increase percentage compared with the last hour
*   HOH_DOWN: the decrease percentage compared with the last hour
*   DOD_UP: the increase percentage compared with the last day
*   DOD_DOWN: the decrease percentage compared with the last day', example='CURRENT_GTE'),
              value?: float(name='Value', description='The threshold of the condition.', example='30'),
            }
          ](name='Rules', description='The condition of the alert rule.'),
        }(name='AlertRule', description='The conditions of the alert rule. Multiple conditions are separated by the AND or OR logical operators.'),
        alertTitle?: string(name='AlertTitle', description='The name of the alert rule.', example='TestAlertRule'),
        alertType?: int32(name='AlertType', description='The type of the alert rule. Valid values:

*   `1`: custom alert rules that are used to monitor drill-down data sets
*   `3`: custom alert rules that are used to monitor tiled data sets
*   `4`: alert rules that are used to monitor the browser, including the default frontend alert rules
*   `5`: alert rules that are used to monitor applications, including the default application alert rules
*   `6`: the default browser alert rules
*   `7`: the default application alert rules
*   `8`: Tracing Analysis alert rules
*   `101`: Prometheus alert rules', example='4'),
        alertVersion?: int32(name='AlertVersion', description='The version of the alert rule. Default value: `1`.', example='1'),
        alertWays?: [ string ](name='AlertWays'),
        config?: string(name='Config', description='The configuration items of the alert rule. The value is a JSON string.

The configuration item **continuous** indicates whether alert notifications are continuously sent. Valid values:

*   `true`: Alert notifications are sent every minute.
*   `false`: The alert silence feature is enabled.

The configuration item **dataRevision** indicates the data revision policy that is used if no data is obtained or the data is null. Default value: 2. Valid values:

*   `0`: overwrites the data by using the value 0
*   `1`: overwrites the data by using the value 1
*   `2`: overwrites the data by using the value null. This value indicates that no alert is triggered if no data exists', example='{\\"continuous\\":true,\\"dataRevision\\":2}'),
        contactGroupIdList?: string(name='ContactGroupIdList', description='The ID of the contact group. Multiple IDs are separated by commas (,).', example='381*,572*'),
        contactGroupIds?: string(name='ContactGroupIds', description='The IDs of the alert contact groups. The value is a JSON array.', example='[123, 234]'),
        createTime?: long(name='CreateTime', description='The timestamp that shows when the alert rule was created.', example='1579508519683'),
        hostByAlertManager?: boolean(name='HostByAlertManager', description='Indicates whether the alert is sent through the alert center. Valid values:

*   `true`
*   `false`', example='true'),
        id?: long(name='Id', description='The ID of the alert rule.', example='123'),
        metricParam?: {
          appGroupId?: string(name='AppGroupId', description='The ID of the application group that is associated with the alert rule. This parameter is applicable to Enterprise Distributed Application Service (EDAS) applications.', example='DEFAULT'),
          appId?: string(name='AppId', description='The auto-increment ID of the ARMS application. You can ignore this ID.', example='123'),
          dimensions?: [ 
            {
              key?: string(name='Key', description='The key of the dimension. Valid values:

*   `rpc`: the name of the API
*   `rpcType`: the type of the API call, such as HTTP or DUBBO
*   `endpoint`: the name of the database
*   `rootIp`: the IP address of the host', example='rootIp'),
              type?: string(name='Type', description='The type of the dimension. Valid values:

*   `STATIC`: checks only the value of this dimension. In this case, you must set the **dimensions.value** parameter.
*   `ALL`: checks the values of all dimensions. The metrics of all API calls are checked. If an API call triggers an alert, the name of the API is displayed in the alert notification. In this case, you do not need to set the **dimensions.value** parameter.
*   `DISABLE`: aggregates the values of all dimensions. In this case, you do not need to set the **dimensions.value** parameter.', example='DISABLE'),
              value?: string(name='Value', description='The value of the dimension.', example='"127.0.0.1"'),
            }
          ](name='Dimensions', description='The dimensions in the condition.'),
          pid?: string(name='Pid', description='The PID of the application that is associated with the alert rule.', example='9870ca99-8105-4da7-a3a4-d72dd1b1****'),
          type?: string(name='Type', description='The type of the metric. Valid values:

*   `txn`: the number of API calls during application monitoring
*   `txn_type`: the types of API calls during application monitoring
*   `db`: database metrics
*   `jvm`: Java virtual machine (JVM) metrics
*   `host`: host metrics
*   `exception`: API call errors', example='DB'),
        }(name='MetricParam', description='The information about the application that is associated with the alert rule.'),
        notice?: {
          endTime?: long(name='EndTime', description='The end of the time range when the alert rule takes effect within 24 hours per day. This value is a UNIX timestamp. The year, month, and day that are indicated by the timestamp are not displayed in this value. Only the hour, minute, and second are displayed.', example='1480607940000'),
          noticeEndTime?: long(name='NoticeEndTime', description='The end of the time range when alert notifications are sent based on the alert rule within 24 hours per day. This value is a UNIX timestamp. The year, month, and day that are indicated by the timestamp are not displayed in this value. Only the hour, minute, and second are displayed.', example='1480607940000'),
          noticeStartTime?: long(name='NoticeStartTime', description='The beginning of the time range when alert notifications are sent based on the alert rule within 24 hours per day. This value is a UNIX timestamp. The year, month, and day that are indicated by the timestamp are not displayed in this value. Only the hour, minute, and second are displayed.', example='1480521600000'),
          startTime?: long(name='StartTime', description='The beginning of the time range when the alert rule takes effect within 24 hours per day. This value is a UNIX timestamp. The year, month, and day that are indicated by the timestamp are not displayed in this value. Only the hour, minute, and second are displayed.', example='1480521600000'),
        }(name='Notice', description='The time ranges when the alert rule takes effect and when alert notifications are sent.'),
        regionId?: string(name='RegionId', description='The ID of the region to which the alert rule belongs.', example='cn-hangzhou'),
        resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxyexli2****'),
        status?: string(name='Status', description='The status of the alert rule. `RUNNING`: The alert rule is enabled. `STOPPED`: The alert rule is disabled.', example='RUNNING'),
        taskId?: long(name='TaskId', description='The ID of the Application Real-Time Monitoring Service (ARMS) task that is associated with the alert rule.', example='123'),
        taskStatus?: string(name='TaskStatus', description='The status of the task. This parameter is hidden from users.', example='""'),
        title?: string(name='Title', description='The name of the alert.', example='AlertTest'),
        updateTime?: long(name='UpdateTime', description='The timestamp that shows when the alert rule was updated.', example='1480521600000'),
        userId?: string(name='UserId', description='The ID of the user to which the alert rule belongs.', example='113197164949****'),
      }
    ](name='AlertRules', description='The details of the alert rules.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='23'),
  }(name='PageBean', description='The returned struct.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model SearchAlertRulesResponse = {
  headers: map[string]string(name='headers'),
  body: SearchAlertRulesResponseBody(name='body'),
}

/**
  * The current operation is no longer maintained. You can call the GetAlertRules operation of Alert Management (New) to query existing alert rules.
  *
 */
async function searchAlertRules(request: SearchAlertRulesRequest): SearchAlertRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchAlertRules', 'POST', '/', 'json', false, 'json', request);
}

model SearchEventsRequest {
  alertId?: long(name='AlertId', description='The ID of the region.', example='123', position='Query'),
  alertType?: int32(name='AlertType', description='The total number of entries returned.', example='4', position='Query'),
  appType?: string(name='AppType', description='The type of the alert rule. This parameter is not returned. Valid values:

*   `1`: custom alert rules to monitor drill-down data sets
*   `3`: custom alert rules to monitor tiled data sets
*   `4`: alert rules to monitor the frontend, including the default frontend alert rules
*   `5`: alert rules to monitor applications, including the default application alert rules
*   `6`: the default frontend alert rules
*   `7`: the default application alert rules
*   `8`: Tracing Analysis alert rules
*   `101`: Prometheus alert rules', example='TRACE', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The ID of the alert rule. You can call the SearchAlertRules operation and view the `Id` parameter in the response. For more information, see [SearchAlertRules](~~175825~~).', example='1', position='Query'),
  endTime?: long(name='EndTime', description='Specifies whether the alert event is triggered. If you do not set this parameter, all alert events are queried. Valid values:

*   `1`: The event is triggered.
*   `0`: The event is not triggered.', example='1595568970000', position='Query'),
  isTrigger?: int32(name='IsTrigger', description='The timestamp when the event occurred.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The information about the alert events.', example='10', position='Query'),
  pid?: string(name='Pid', description='The type of the application that is associated with the alert rule. Valid values:

*   `TRACE`: application monitoring
*   `RETCODE`: frontend monitoring', example='atc889zkcf@d8deedfa9bf****', position='Query'),
  regionId: string(name='RegionId', description='Specifies whether the alert event is triggered. If you do not set this parameter, all alert events are queried. Valid values:

*   `1`: The event is triggered.
*   `0`: The event is not triggered.', example='cn-hangzhou', position='Query'),
  startTime?: long(name='StartTime', description='The number of entries returned per page.', example='1595565300000', position='Query'),
}

model SearchEventsResponseBody = {
  isTrigger?: int32(name='IsTrigger', description='The process identifier (PID) of the application that is associated with the alert rule.', example='0'),
  pageBean?: {
    event?: [ 
      {
        alertId?: long(name='AlertId', example='123'),
        alertName?: string(name='AlertName', example='alertName'),
        alertRule?: string(name='AlertRule', description='The ID of the request.'),
        alertType?: int32(name='AlertType', description='The name of the alert rule that is associated with the event.', example='4'),
        eventLevel?: string(name='EventLevel', description='The number of entries to return on each page. Default value: `10`.', example='1'),
        eventTime?: long(name='EventTime', description='The struct returned.', example='1595569020000'),
        id?: long(name='Id', example='123'),
        links?: [ string ](name='Links'),
        message?: string(name='Message', description='The condition of the alert rule.'),
      }
    ](name='Event', description='The ID of the event record.'),
    pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: `1`.', example='1'),
    pageSize?: int32(name='PageSize', description='The type of the alert rule. Valid values:

*   `1`: custom alert rules to monitor drill-down data sets
*   `3`: custom alert rules to monitor tiled data sets
*   `4`: alert rules to monitor the frontend, including the default frontend alert rules
*   `5`: alert rules to monitor applications, including the default application alert rules
*   `6`: the default frontend alert rules
*   `7`: the default application alert rules
*   `8`: Tracing Analysis alert rules
*   `101`: Prometheus alert rules', example='10'),
    totalCount?: int32(name='TotalCount', description='The beginning of the time range to query. Specify a UNIX timestamp of the LONG data type, in milliseconds. The default value is 10 minutes before the current time.', example='2'),
  }(name='PageBean', description='The event content. The parameter value is a JSON string. Each key indicates a dimension and each value indicates the alert content in the dimension.'),
  requestId?: string(name='RequestId', description='The severity of the event.', example='32940175-181B-4B93-966E-4BB69176****'),
}

model SearchEventsResponse = {
  headers: map[string]string(name='headers'),
  body: SearchEventsResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to `SearchEvents`.
  *
 */
async function searchEvents(request: SearchEventsRequest): SearchEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchEvents', 'POST', '/', 'json', false, 'json', request);
}

model SearchRetcodeAppByPageRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='5', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. You can obtain the resource group ID in the **Resource Management** console.', example='rg-acfmxyexli2****', position='Query'),
  retcodeAppId?: string(name='RetcodeAppId', description='The ID of the application.

Log on to the **ARMS console**. In the left-side navigation pane, choose **Browser Monitoring** > **Browser Monitoring**. On the Browser Monitoring page, click the name of an application. The URL in the browser address bar contains the pid of this application in the format of `pid=xxx`. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is `xxx%4074xxx`, you must replace **%40** with the at sign (@). The actual PID is `xxx@74xxx`.', example='eb4zdose6v@9781be0f44d****', position='Query'),
  retcodeAppName?: string(name='RetcodeAppName', description='The name of the application that is monitored by Browser Monitoring.', example='App1', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The tags.', position='Query'),
}

model SearchRetcodeAppByPageResponseBody = {
  pageBean?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='2'),
    retcodeApps?: [ 
      {
        appId?: long(name='AppId', description='The ID of the application. The parameter is an auto-increment parameter.', example='16064'),
        appName?: string(name='AppName', description='The name of the application.', example='a3'),
        createTime?: long(name='CreateTime', description='The time when the task was created.', example='1545363321000'),
        nickName?: string(name='NickName', description='The alias of the application.', example='c1'),
        pid?: string(name='Pid', description='The PID of the application.', example='eb4zdose6v@9781be0f44d****'),
        regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
        resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****'),
        retcodeAppType?: string(name='RetcodeAppType', description='The type of the application. Valid values:

*   `web`: web application
*   `weex`: Weex mobile app
*   `mini_dd`: DingTalk mini program
*   `mini_alipay`: Alipay mini program
*   `mini_wx`: WeChat mini program
*   `mini_common`: mini program on other platforms', example='web'),
        tags?: [ 
          {
            key?: string(name='Key', description='The tag key.', example='TestKey'),
            value?: string(name='Value', description='The tag value.', example='TestValue'),
          }
        ](name='Tags', description='The tags.'),
        type?: string(name='Type', description='The type of the monitoring task. Valid values:

*   `TRACE`: Application Monitoring
*   `RETCODE`: Browser Monitoring', example='RETCODE'),
        updateTime?: long(name='UpdateTime', description='The time when the task was updated.', example='1545363321000'),
        userId?: string(name='UserId', description='The ID of the user.', example='12341234'),
      }
    ](name='RetcodeApps', description='The Browser Monitoring tasks that are returned.'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='8'),
  }(name='PageBean', description='The returned page information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='626037F5-FDEB-45B0-804C-B3C92797A64E'),
}

model SearchRetcodeAppByPageResponse = {
  headers: map[string]string(name='headers'),
  body: SearchRetcodeAppByPageResponseBody(name='body'),
}

async function searchRetcodeAppByPage(request: SearchRetcodeAppByPageRequest): SearchRetcodeAppByPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchRetcodeAppByPage', 'POST', '/', 'json', false, 'json', request);
}

model SearchTraceAppByNameRequest {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The list of tags.', position='Query'),
  traceAppName?: string(name='TraceAppName', description='The name of the application.

> If you do not specify this parameter, all application monitoring tasks in the specified region are queried.', example='test-app', position='Query'),
}

model SearchTraceAppByNameResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F7781D4A-2818-41E7-B7BB-79D809E9****'),
  traceApps?: [ 
    {
      appId?: long(name='AppId', description='The application ID.', example='123'),
      appName?: string(name='AppName', description='The name of the application.', example='test-app'),
      createTime?: long(name='CreateTime', description='The timestamp generated when the task was created.', example='1593486786000'),
      labels?: [ string ](name='Labels', description='The aliases of the application.'),
      pid?: string(name='Pid', description='The process identifier (PID) of the application.', example='a5f9bdeb-2627-4dbe-9247-****'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****'),
      show?: boolean(name='Show', description='Indicates whether the application is displayed in the Application Real-Time Monitoring Service (ARMS) console. Valid values:

*   `true`: yes
*   `false`: no', example='true'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='TestKey'),
          value?: string(name='Value', description='The tag value.', example='TestValue'),
        }
      ](name='Tags', description='A list of tags.'),
      type?: string(name='Type', description='The type of the monitoring task. Valid values:

*   `TRACE`: Application Monitoring
*   `RETCODE`: Browser Monitoring', example='TRACE'),
      updateTime?: long(name='UpdateTime', description='The timestamp generated when the task information was updated.', example='1593486786000'),
      userId?: string(name='UserId', description='The user ID.', example='113197164949****'),
    }
  ](name='TraceApps', description='The information about the monitoring task.'),
}

model SearchTraceAppByNameResponse = {
  headers: map[string]string(name='headers'),
  body: SearchTraceAppByNameResponseBody(name='body'),
}

/**
  * ***
  *
 */
async function searchTraceAppByName(request: SearchTraceAppByNameRequest): SearchTraceAppByNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchTraceAppByName', 'POST', '/', 'json', false, 'json', request);
}

model SearchTraceAppByPageRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: `1`.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: `10`.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxyexli2****', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='A list of tags.', position='Query'),
  traceAppName?: string(name='TraceAppName', description='The name of the application.', example='test-app', position='Query'),
}

model SearchTraceAppByPageResponseBody = {
  pageBean?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='3'),
    traceApps?: [ 
      {
        appId?: long(name='AppId', description='The application ID.', example='123'),
        appName?: string(name='AppName', description='The name of the application.', example='test-app'),
        createTime?: long(name='CreateTime', description='The timestamp generated when the task was created.', example='1531291867000'),
        labels?: [ string ](name='Labels', description='The aliases of the application.'),
        pid?: string(name='Pid', description='The process identifier (PID) of the application.', example='atc889zkcf@d8deedfa9bf****'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
        resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxyexli2****'),
        show?: boolean(name='Show', description='Indicates whether the application is displayed in the Application Real-Time Monitoring Service (ARMS) console. Valid values:

*   `true`: yes
*   `false`: no', example='true'),
        tags?: [ 
          {
            key?: string(name='Key', description='The tag key.', example='TestKey'),
            value?: string(name='Value', description='The tag value.', example='TestValue'),
          }
        ](name='Tags', description='A list of tags.'),
        type?: string(name='Type', description='The type of the monitoring task. Valid values:

*   `TRACE`: Application Monitoring
*   `RETCODE`: Browser Monitoring', example='TRACE'),
        updateTime?: long(name='UpdateTime', description='The timestamp generated when the task information was updated.', example='1531291867000'),
        userId?: string(name='UserId', description='The user ID.', example='113197164949****'),
      }
    ](name='TraceApps', description='The information about the monitoring task.'),
  }(name='PageBean', description='The information about the array object.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4B446DF2-3DDD-4B5B-8E3F-D5225120****'),
}

model SearchTraceAppByPageResponse = {
  headers: map[string]string(name='headers'),
  body: SearchTraceAppByPageResponseBody(name='body'),
}

async function searchTraceAppByPage(request: SearchTraceAppByPageRequest): SearchTraceAppByPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchTraceAppByPage', 'POST', '/', 'json', false, 'json', request);
}

model SearchTracesRequest {
  endTime: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1595210400000', position='Query'),
  exclusionFilters?: [ 
    {
      key?: string(name='Key', description='The key that is used to filter the query results.', example='http.status_code'),
      value?: string(name='Value', description='The value of the key that is used to filter the query results.', example='404'),
    }
  ](name='ExclusionFilters', description='The filter conditions.', position='Query'),
  minDuration?: long(name='MinDuration', description='The minimum amount of time consumed by traces. Unit: milliseconds.', example='2', position='Query'),
  operationName?: string(name='OperationName', description='The name of the traced span.', example='/demo/queryNotExistDB/11', position='Query'),
  pid?: string(name='Pid', description='The application ID.', example='b590lhguqs@9781be0f44dXXXX', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  reverse?: boolean(name='Reverse', description='Specifies whether to sort the query results in chronological order or reverse chronological order. Default value: `false`.

*   `true`: sorts the query results in reverse chronological order.
*   `false`: sorts the query results in chronological order.', example='false', position='Query'),
  serviceIp?: string(name='ServiceIp', description='The IP address of the host where the application resides.', example='172.20.XX.XX', position='Query'),
  serviceName?: string(name='ServiceName', description='The name of the application.', example='arms-k8s-demo-subcomponent', position='Query'),
  startTime: long(name='StartTime', description='The beginning of the time range to query. Unit: milliseconds.', example='1595174400000', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. The following system preset fields are provided:

*   serverApp: the name of the server application.
*   clientApp: the name of the client application.
*   service: the name of the operation.
*   rpc: the type of the call.
*   msOfSpan: the duration exceeds a specific value.
*   clientIp: the IP address of the client.
*   serverIp: the IP address of the server.
*   isError: specifies whether the call is abnormal.
*   hasTprof: contains only thread profiling.', example='http.status_code'),
      value?: string(name='Value', description='The value of the tag.', example='200'),
    }
  ](name='Tag', description='The list of tags.', position='Query'),
}

model SearchTracesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C518054-852F-4023-ABC1-4AF95FF7****'),
  traceInfos?: [ 
    {
      duration?: long(name='Duration', description='The amount of time consumed by the trace. Unit: milliseconds.', example='6'),
      operationName?: string(name='OperationName', description='The name of the traced span.', example='get***'),
      serviceIp?: string(name='ServiceIp', description='The IP address of the host where the application resides.', example='172.20.**.**'),
      serviceName?: string(name='ServiceName', description='The name of the application.', example='arms-k8s-demo-subcomponent'),
      timestamp?: long(name='Timestamp', description='The timestamp.', example='1595174436993'),
      traceID?: string(name='TraceID', description='The trace ID.', example='ac1400a115951744369937024d****'),
    }
  ](name='TraceInfos', description='The details of the returned traces.'),
}

model SearchTracesResponse = {
  headers: map[string]string(name='headers'),
  body: SearchTracesResponseBody(name='body'),
}

/**
  * > A maximum of 100 data entries can be returned each time this operation is called. If you want to query all existing traces, we recommend that you call the SearchTracesByPage operation. For more information, see [SearchTracesByPage](~~175866~~).
  *
 */
async function searchTraces(request: SearchTracesRequest): SearchTracesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchTraces', 'POST', '/', 'json', false, 'json', request);
}

model SearchTracesByPageRequest {
  endTime: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1595210400000', position='Query'),
  exclusionFilters?: [ 
    {
      key?: string(name='Key', description='The key that is used to filter the query results.', example='http.status_code'),
      value?: string(name='Value', description='The value of the key that is used to filter the query results.', example='404'),
    }
  ](name='ExclusionFilters', description='The filter conditions.', position='Query'),
  isError?: boolean(name='IsError', description='是否过滤错误的调用链。
- `true`：过滤
- `false`（默认）：不过滤', example='false', position='Query'),
  minDuration?: long(name='MinDuration', description='The minimum amount of time consumed by traces. Unit: milliseconds.', example='2', position='Query'),
  operationName?: string(name='OperationName', description='The name of the traced span.', example='/demo/queryNotExistDB/11', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100.', example='5', position='Query'),
  pid?: string(name='Pid', description='The application ID.', example='b590lhguqs@9781be0f44dXXXX', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  reverse?: boolean(name='Reverse', description='Specifies whether to sort the query results in chronological order or reverse chronological order. Default value: `false`.

*   `true`: sorts the query results in reverse chronological order.
*   `false`: sorts the query results in chronological order.', example='false', position='Query'),
  serviceIp?: string(name='ServiceIp', description='The IP address of the host where the application resides.', example='172.20.XX.XX', position='Query'),
  serviceName?: string(name='ServiceName', description='The name of the application.', example='arms-k8s-demo-subcomponent', position='Query'),
  startTime: long(name='StartTime', description='The beginning of the time range to query. Unit: milliseconds.', example='1595174400000', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of the tag. The following system preset fields are provided:

*   traceId: the ID of the trace.
*   serverApp: the name of the server application.
*   clientApp: the name of the client application.
*   service: the name of the operation.
*   rpc: the type of the call.
*   msOfSpan: the duration exceeds a specific value.
*   clientIp: the IP address of the client.
*   serverIp: the IP address of the server.
*   isError: specifies whether the call is abnormal.
*   hasTprof: contains only thread profiling.', example='http.status_code'),
      value?: string(name='Value', description='The value of the tag.', example='200'),
    }
  ](name='Tags', description='The list of tags.', position='Query'),
}

model SearchTracesByPageResponseBody = {
  pageBean?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='5'),
    total?: int32(name='Total', description='The total number of returned entries.', example='1601'),
    traceInfos?: [ 
      {
        duration?: long(name='Duration', description='The amount of time consumed by the trace. Unit: milliseconds.', example='679'),
        operationName?: string(name='OperationName', description='The name of the traced span.', example='/demo/queryException/12'),
        serviceIp?: string(name='ServiceIp', description='The IP address of the host where the application resides.', example='172.20.XX.XX'),
        serviceName?: string(name='ServiceName', description='The name of the application.', example='arms-k8s-demo-subcomponent'),
        timestamp?: long(name='Timestamp', description='The timestamp.', example='1595174436994'),
        traceID?: string(name='TraceID', description='The trace ID.', example='ac1400a115951744369947025d****'),
      }
    ](name='TraceInfos', description='The details of the returned traces.'),
  }(name='PageBean', description='The returned struct.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C518054-852F-4023-ABC1-4AF95FF7****'),
}

model SearchTracesByPageResponse = {
  headers: map[string]string(name='headers'),
  body: SearchTracesByPageResponseBody(name='body'),
}

async function searchTracesByPage(request: SearchTracesByPageRequest): SearchTracesByPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchTracesByPage', 'POST', '/', 'json', false, 'json', request);
}

model SendTTSVerifyLinkRequest {
  contactId: long(name='ContactId', description='The ID of the alert contact.', example='123', position='Body'),
  phone: string(name='Phone', description='The mobile number of the alert contact.', example='1381111****', position='Body'),
}

model SendTTSVerifyLinkResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the text message was sent.

*   `true`
*   `false`', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='21E85B16-75A6-429A-9F65-8AAC9A54****'),
}

model SendTTSVerifyLinkResponse = {
  headers: map[string]string(name='headers'),
  body: SendTTSVerifyLinkResponseBody(name='body'),
}

/**
  * After you receive the text message, verify the mobile number as prompted. Before you can specify a mobile phone number in a notification policy, you must verify the mobile phone number.
  *
 */
async function sendTTSVerifyLink(request: SendTTSVerifyLinkRequest): SendTTSVerifyLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendTTSVerifyLink', 'POST', '/', 'json', true, 'form', request);
}

model SetRetcodeShareStatusRequest {
  appName?: string(name='AppName', description='Turns on or turns off logon-free sharing for an application monitored by Browser Monitoring.', example='test-app', position='Query'),
  pid?: string(name='Pid', description='Indicates whether the call is successful. Valid values:

*   `true`: The call is successful.
*   `false`: The call fails.', example='atc889zkcf@d8deedfa9bf****', position='Query'),
  status: boolean(name='Status', description='SetRetcodeShareStatus', example='true', position='Query'),
}

model SetRetcodeShareStatusResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='The ID of the application. Log on to the ARMS console. In the left-side navigation pane, choose **Browser Monitoring** > **Browser Monitoring**. On the Browser Monitoring page, click the name of an application. The URL in the address bar contains the process ID (PID) of the application. The PID is indicated in the pid=xxx format. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is xxx%4074xxx, you must replace %40 with the at sign (@) to obtain xxx@74xxx.', example='true'),
  requestId?: string(name='RequestId', description='Specifies whether to turn on logon-free sharing. Valid values:

*   `true`: turns on logon-free sharing.
*   `false`: turns off logon-free sharing.', example='40B10E04-81E8-4643-970D-F1B38F2E****'),
}

model SetRetcodeShareStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SetRetcodeShareStatusResponseBody(name='body'),
}

async function setRetcodeShareStatus(request: SetRetcodeShareStatusRequest): SetRetcodeShareStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetRetcodeShareStatus', 'POST', '/', 'json', false, 'json', request);
}

model StartAlertRequest {
  alertId: string(name='AlertId', example='1610***', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model StartAlertResponseBody = {
  isSuccess?: boolean(name='IsSuccess', example='true'),
  requestId?: string(name='RequestId', example='27E653FA-5958-45BE-8AA9-14D884DC****'),
}

model StartAlertResponse = {
  headers: map[string]string(name='headers'),
  body: StartAlertResponseBody(name='body'),
}

async function startAlert(request: StartAlertRequest): StartAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartAlert', 'POST', '/', 'json', false, 'json', request);
}

model StopAlertRequest {
  alertId: string(name='AlertId', example='1610***', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model StopAlertResponseBody = {
  isSuccess?: boolean(name='IsSuccess', example='true'),
  requestId?: string(name='RequestId', example='27E653FA-5958-45BE-8AA9-14D884DC****'),
}

model StopAlertResponse = {
  headers: map[string]string(name='headers'),
  body: StopAlertResponseBody(name='body'),
}

async function stopAlert(request: StopAlertRequest): StopAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopAlert', 'POST', '/', 'json', false, 'json', request);
}

model SwitchSyntheticTaskStatusRequest {
  switchStatus?: long(name='SwitchStatus', example='0', position='Query'),
  taskIds?: [ long ](name='TaskIds', position='Query'),
}

model SwitchSyntheticTaskStatusResponseBody = {
  requestId?: string(name='RequestId', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
  result?: string(name='Result', example='true'),
}

model SwitchSyntheticTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchSyntheticTaskStatusResponseBody(name='body'),
}

async function switchSyntheticTaskStatus(request: SwitchSyntheticTaskStatusRequest): SwitchSyntheticTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchSyntheticTaskStatus', 'POST', '/', 'json', false, 'json', request);
}

model SyncRecordingRulesRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster whose aggregation rule you want to synchronize.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. The destination region can be the same as the source region.', example='cn-hangzhou', position='Query'),
  targetClusters: string(name='TargetClusters', description='The IDs of clusters to which you want to synchronize the aggregation rule.', example='{     "cn":[         "c06ca68cd16f14f52bb07772eda***",         "c33dd70a0ac184c1b879d807ab2***",         "c384cf7e4dcb543e6ac8c7d4dd3***"     ],     "us":[         "ce30f833bc4a04a56a06b070319***"     ],     "jp":[      ],     "ap":[      ],     "gov":[      ],     "finance":[      ] }', position='Query'),
}

model SyncRecordingRulesResponseBody = {
  code?: int32(name='Code', description='状态码。200表示成功。', example='200'),
  data?: string(name='Data', description='The struct returned.', example='{ "data":\\[ "c06ca68cd16f14f52bb07772eda\\*\\*\\*", "c33dd70a0ac184c1b879d807ab2\\*\\*\\*", "c384cf7e4dcb543e6ac8c7d4dd3\\*\\*\\*", "ce30f833bc4a04a56a06b070319\\*\\*\\*" ], "message":"IDs of Clusters to which the aggregation rule failed to be synchronized", "success":true }'),
  message?: string(name='Message', description='返回结果的提示信息。', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
}

model SyncRecordingRulesResponse = {
  headers: map[string]string(name='headers'),
  body: SyncRecordingRulesResponseBody(name='body'),
}

async function syncRecordingRules(request: SyncRecordingRulesRequest): SyncRecordingRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncRecordingRules', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId: string(name='RegionId', position='Host'),
  resourceId: [ string ](name='ResourceId', description='Schema of Response', position='Query'),
  resourceType: string(name='ResourceType', description='The resource type.

WEB-front-end monitoring
APPLICATION-Application Monitoring
PROMETHEUS-PROM monitoring
SYNTHETICTASK-Cloud dial test
ALERTRULE - Application Monitoring Similar
PROMETHEUSALERTRULE - Prometheus monitoring', example='PROMETHEUS', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', description='http://arms.${regionId}.aliyun-inc.com:8099/tag/TagResources.json', example='Key1'),
      value?: string(name='Value', example='Test1'),
    }
  ](name='Tag', description='The returned result.', position='Query'),
}

model TagResourcesResponseBody = {
  data?: string(name='Data', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='05919CF2-B8A1-588D-B3DB-89B3********'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UninstallManagedPrometheusRequest {
  clusterId?: string(name='ClusterId', description='__null__', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  clusterType: string(name='ClusterType', example='ask', position='Query'),
  regionId: string(name='RegionId', description='code!=200', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxyexli2****', position='Query'),
  vpcId: string(name='VpcId', example='vpc-rpn**********', position='Query'),
}

model UninstallManagedPrometheusResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='success'),
  message?: string(name='Message', example='vpcId is blank'),
  requestId?: string(name='RequestId', example='2A0CEDF1-06FE-44AC-8E21-21A5BE65****'),
  success?: boolean(name='Success', example='true'),
}

model UninstallManagedPrometheusResponse = {
  headers: map[string]string(name='headers'),
  body: UninstallManagedPrometheusResponseBody(name='body'),
}

/**
  * The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.
  *
 */
async function uninstallManagedPrometheus(request: UninstallManagedPrometheusRequest): UninstallManagedPrometheusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UninstallManagedPrometheus', 'POST', '/', 'json', false, 'json', request);
}

model UninstallPromClusterRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c0bad479465464e1d8c1e641b0afb****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. Default value: cn-hangzhou.', example='cn-hangzhou', position='Query'),
}

model UninstallPromClusterResponseBody = {
  code?: int32(name='Code', description='The status code returned. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='Indicates whether the request was successful.', example='true'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='53980F48-DE82-53A1-9ADE-D2629226DD9A'),
}

model UninstallPromClusterResponse = {
  headers: map[string]string(name='headers'),
  body: UninstallPromClusterResponseBody(name='body'),
}

async function uninstallPromCluster(request: UninstallPromClusterRequest): UninstallPromClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UninstallPromCluster', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  regionId: string(name='RegionId', position='Host'),
  all?: boolean(name='All', description='Specifies whether to delete all tags. This parameter takes effect only when the TagKey.N parameter is not specified. Valid values:

*   true
*   false

Default value: false.', example='False', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The resource IDs. You can specify a maximum of 50 resource IDs.', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the ARMS resources for which you want to modify tags.', example='PROMETHEUS', position='Query'),
  tagKey?: [ string ](name='TagKey', description='The tag keys. You can specify a maximum of 20 tag keys.', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='TestKey'),
      value?: string(name='Value', description='The value of the tag.', example='TestValue'),
    }
  ](name='Tags', description='The list of tags.', position='Query'),
}

model UntagResourcesResponseBody = {
  data?: string(name='Data', description='The returned struct.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='FC183B5E-C9AD-5E9E-937F-*******'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAlertContactRequest {
  contactId: long(name='ContactId', example='123', position='Query'),
  contactName?: string(name='ContactName', example='John Doe', position='Query'),
  dingRobotWebhookUrl?: string(name='DingRobotWebhookUrl', example='https://oapi.dingtalk.com/robot/send?access_token=91f2f6****', position='Query'),
  email?: string(name='Email', example='someone@example.com', position='Query'),
  phoneNum?: string(name='PhoneNum', example='1381111****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  systemNoc?: boolean(name='SystemNoc', example='true', position='Query'),
}

model UpdateAlertContactResponseBody = {
  isSuccess?: boolean(name='IsSuccess', example='true'),
  requestId?: string(name='RequestId', example='1A474FF8-7861-4D00-81B5-5BC3DA4E****'),
}

model UpdateAlertContactResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAlertContactResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
 */
async function updateAlertContact(request: UpdateAlertContactRequest): UpdateAlertContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAlertContact', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAlertContactGroupRequest {
  contactGroupId: long(name='ContactGroupId', example='123', position='Query'),
  contactGroupName: string(name='ContactGroupName', example='TestGroup', position='Query'),
  contactIds?: string(name='ContactIds', example='123 234 345', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model UpdateAlertContactGroupResponseBody = {
  isSuccess?: boolean(name='IsSuccess', example='true'),
  requestId?: string(name='RequestId', example='9319A57D-2D9E-472A-B69B-CF3CD16D****'),
}

model UpdateAlertContactGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAlertContactGroupResponseBody(name='body'),
}

async function updateAlertContactGroup(request: UpdateAlertContactGroupRequest): UpdateAlertContactGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAlertContactGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAlertRuleRequest {
  alertId: long(name='AlertId', example='1234567', position='Query'),
  contactGroupIds?: string(name='ContactGroupIds', example='[123, 234]', position='Query'),
  isAutoStart?: boolean(name='IsAutoStart', example='true', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  templageAlertConfig: string(name='TemplageAlertConfig', position='Query'),
}

model UpdateAlertRuleResponseBody = {
  alertId?: long(name='AlertId', example='1234567'),
  data?: string(name='Data', example='-'),
  requestId?: string(name='RequestId', example='6A9AEA84-7186-4D8D-B498-4585C6A2****'),
}

model UpdateAlertRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAlertRuleResponseBody(name='body'),
}

async function updateAlertRule(request: UpdateAlertRuleRequest): UpdateAlertRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAlertRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDispatchRuleRequest {
  dispatchRule: string(name='DispatchRule', description='## Additional information about the **DispatchRule** parameter

**JSON string example and description**

```

{
  "id": 123,           // The ID of the dispatch policy. 
  "system": false,        // Specifies whether the dispatch rule is editable. Valid values: true: not editable. false: editable. 
  "ruleid": 10282,           // The ID of the dispatch rule. 
  "name": "Prometheus Alert",   // The name of the dispatch policy. 
  "labelMatchExpressionGrid": {
    "labelMatchExpressionGroups": [     // Sets the dispatch rule. 
      {
        "labelMatchExpressions": [
          {
            "key": "_aliyun_arms_involvedObject_kind",   // The key of the tag of the dispatch rule. For more information, see the next section. 
            "value": "app",                              // The value of the tag. 
            "operator": "eq"                             // The operator used in the dispatch rule. Valid values: eq: equals to. re: matches a regular expression. 
          }
        ]
      }
    ]
  },
  "dispatchType": "CREATE_ALERT/DISCARD_ALERT",    // The alert handling method. Valid values: CREATE_ALERT: generates an alert. DISCARD_ALERT: discards the alert event and generates no alert.
  "isRecover": true,               // Specifies whether to send the restored alert. Valid values: true: sends the alert. false: does not send the alert. 
  "groupRules": [                  // Sets the event group. 
    {
      "groupId": 1,               // The ID of the group. 
      "groupingFields": [         // The fields that are used to group events. Events with the same field content are assigned to a group. Alerts with the same specified grouping field are sent to the handler in separate notifications. 
        "alertname"
      ],
      "groupWait": 10,                 // The duration for which the system waits after the first alert is sent. After the duration, all alerts are sent in a single notification to the handler. 
      "groupInterval": 15,             // The grouping interval. During the silence period of repeated alerts, if new alerts are generated, they will be sent after the group waiting time. 
      "repeatInterval": 20             // The silence period of repeated alerts. All alerts are repeatedly sent at specified intervals until the alerts are cleared. 
    }
  ],
  "notifyRules": [            // Sets the notification rule. 
    {
      "notifyObjects": [
        {
          "notifyType": "ARMS_CONTACT",     // The type of the alert contact. Valid values: ARMS_CONTACT: contact. ARMS_CONTACT_GROUP: contact group. 
          "name": "JohnDoe",                // The name of the contact or contact group. 
          "notifyObjectId": 1               // The ID of the contact or contact group. 
        },
        {
          "notifyType": "ARMS_CONTACT_GROUP",
          "name": "JohnDoe_group",
          "notifyObjectId": 2
        }
      ],
      "notifyChannels":["dingTalk","wechat","webhook","email"]     // The notification method. Valid values: dingTalk, sms, webhook, email, and wechat. 
    },
  ],
}
```

**Enumerated keys of the tag of the dispatch rule**

*   `_aliyun_arms_userid`: user ID
*   `_aliyun_arms_involvedObject_kind`: type of the associated object
*   `_aliyun_arms_involvedObject_id`: ID of the associated object
*   `_aliyun_arms_involvedObject_name`: name of the associated object
*   `_aliyun_arms_alert_name`: alert name
*   `_aliyun_arms_alert_rule_id`: alert rule ID
*   `_aliyun_arms_alert_type`: alert type
*   `_aliyun_arms_alert_level`: alert severity', example='{   "id": 123,     "system": false,   "ruleid": 10282,   "name": "Prometheus Alert",   "labelMatchExpressionGrid": {     "labelMatchExpressionGroups": [       {         "labelMatchExpressions": [           {             "key": "_aliyun_arms_involvedObject_kind",             "value": "app",             "operator": "eq"           }         ]       }     ]   },   "dispatchType": "CREATE_ALERT/DISCARD_ALERT",   "isRecover": true,   "groupRules": [     {       "groupId": 1,       "groupingFields": [         "alertname"       ],       "groupWait": 10,       "groupInterval": 15,       "repeatInterval": 20     }   ],   "notifyRules": [     {       "notifyObjects": [         {           "notifyType": "ARMS_CONTACT",           "name": "JohnDoe",           "notifyObjectId": 1         },         {           "notifyType": "ARMS_CONTACT_GROUP",           "name": "JohnDoe_group",           "notifyObjectId": 2         }       ],       "notifyChannels":["dingTalk","wechat","webhook","email"]     },   ], }', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model UpdateDispatchRuleResponseBody = {
  requestId?: string(name='RequestId', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDispatchRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDispatchRuleResponseBody(name='body'),
}

async function updateDispatchRule(request: UpdateDispatchRuleRequest): UpdateDispatchRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDispatchRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateIntegrationRequest {
  autoRecover?: boolean(name='AutoRecover', description='Specifies whether to automatically clear alert events. Valid values:

*   true (default)
*   false', example='true', position='Body'),
  description?: string(name='Description', description='The description of the alert integration.', example='Test', position='Body'),
  duplicateKey?: string(name='DuplicateKey', description='The fields whose values are deduplicated.', example='LABEL.dimensions::LABEL.ruleId', position='Body'),
  extendedFieldRedefineRules?: string(name='ExtendedFieldRedefineRules', description='The extended mapped fields are mapped to the fields of ARMS alerts. For more information, see the description of the ExtendedFieldRedefineRules parameter.', example='[
    {
        "redefineType":"EXTRACT",
        "matchExpression":null,
        "fieldName":"dimensions",
        "expression":null,
        "mappingRuleList":[

        ],
        "name":"dimensions",
        "integrationId":1234,
        "jsonPath":"$.dimensions",
        "id":10013,
        "fieldType":"LABEL"
    },
    {
        "redefineType":"EXTRACT",
        "matchExpression":null,
        "fieldName":"expression",
        "expression":null,
        "mappingRuleList":[

        ],
        "name":"expression",
        "integrationId":1234,
        "jsonPath":"$.expression",
        "id":10014,
        "fieldType":"LABEL"
    }
]', position='Body'),
  fieldRedefineRules?: string(name='FieldRedefineRules', description='The predefined mapped fields are mapped to the fields of ARMS alerts. The predefined mapped fields were generated when the alert integration was created. For more information, see the description of the FieldRedefineRules parameter.', example='\\[ { "redefineType":"EXTRACT", "matchExpression":null, "fieldName":"alertname", "expression":null, "mappingRuleList":\\[ ], "name":"Alert name", "integrationId":1234, "jsonPath":"$.alertName", "id":10001, "fieldType":"LABEL" }, { "redefineType":"MAP", "matchExpression":null, "fieldName":"severity", "expression":null, "mappingRuleList":\\[ { "mappingValue":"critical", "mappingName":"P1", "mappingType":"MAP", "originValue":"CRITICAL" }, { "mappingValue":"error", "mappingName":"P2", "mappingType":"MAP", "originValue":"WARN" }, { "mappingValue":"warning", "mappingName":"P3", "mappingType":"MAP", "originValue":"INFO" } ], "name":"Alert level", "integrationId":1234, "jsonPath":"$.triggerLevel", "id":10002, "fieldType":"LABEL" }, { "redefineType":"EXTRACT", "matchExpression":null, "fieldName":"message", "expression":"{{$labels.namespace}} / {{$labels.dimensions}} Alert content {{ $labels.alertname }}, Current value {{$value}}.", "mappingRuleList":\\[ ], "name":"Alert description", "integrationId":1234, "jsonPath":null, "id":10003, "fieldType":"ANNOTATION" }, { "redefineType":"EXTRACT", "matchExpression":null, "fieldName":"value", "expression":null, "mappingRuleList":\\[ ], "name":"Alert sample value", "integrationId":1234, "jsonPath":"$.curValue", "id":10004, "fieldType":"ANNOTATION" }, { "redefineType":"EXTRACT", "matchExpression":null, "fieldName":"source", "expression":null, "mappingRuleList":\\[ ], "name":"Source", "integrationId":1234, "jsonPath":null, "id":10007, "fieldType":"LABEL" }, { "redefineType":"ADD", "matchExpression":null, "fieldName":"generatorUrl", "expression":"https://cloudmonitor.console.aliyun.com/index.htm#/alarmInfo/name={{$labels.ruleId}}\\&searchValue=\\&searchType=name\\&searchProduct=/history/all/searchKey:{{$labels.ruleId}},startTime:{{sub $startsAt 300000}},endTime:{{$endsAt}}", "mappingRuleList":\\[ ], "name":"Event URL", "integrationId":1234, "jsonPath":"https://cloudmonitor.console.aliyun.com/index.htm#/alarmInfo/name={{$labels.ruleId}}\\&searchValue=\\&searchType=name\\&searchProduct=/history/all/searchKey:{{$labels.ruleId}},startTime:{{sub $startsAt 300000}},endTime:{{$endsAt}}", "id":10012, "fieldType":"GENERATE_URL" } ]', position='Body'),
  initiativeRecoverField?: string(name='InitiativeRecoverField', description='The field for clearing alert events. The system queries alert events based on the field of alert clearing events and clears the alert events.

> Only the Log Service alert integration supports the parameter.', example='$.status', position='Body'),
  initiativeRecoverValue?: string(name='InitiativeRecoverValue', description='The value of the field for clearing alert events. The system queries alert events based on the field of alert clearing events and clears the alert events.

> Only the Log Service alert integration supports the parameter.', example='ok', position='Body'),
  integrationId: long(name='IntegrationId', description='The ID of the alert integration.', example='1234', position='Body'),
  integrationName: string(name='IntegrationName', description='The name of the alert integration.', example='CloudMonitor integration', position='Body'),
  integrationProductType: string(name='IntegrationProductType', description='The service of the alert integration. Valid values:

*   CLOUD_MONITOR: CloudMonitor
*   LOG_SERVICE: Log Service', example='CLOUD_MONITOR', position='Body'),
  liveness?: string(name='Liveness', description='The activity of the alert integration', example='ready', position='Body'),
  recoverTime?: long(name='RecoverTime', description='The period of time within which alert events are automatically cleared. Unit: seconds. Default value: 300.', example='300', position='Body'),
  stat?: string(name='Stat', description='The total number of alert events and the number of abnormal alert events in the last hour.', example='[0,0]', position='Body'),
  state?: boolean(name='State', description='Indicates whether the alert integration was enabled. Valid values:

*   true
*   false', example='true', position='Body'),
}

model UpdateIntegrationResponseBody = {
  integration?: {
    apiEndpoint?: string(name='ApiEndpoint', description='The endpoint of the alert integration.', example='https://alerts.aliyuncs.com/api/v1/integrations/custom/ymQBN******'),
    autoRecover?: boolean(name='AutoRecover', description='Indicates whether alert events are automatically cleared. Valid values:

*   true (default)
*   false', example='true'),
    description?: string(name='Description', description='The description of the alert integration.', example='Test'),
    duplicateKey?: string(name='DuplicateKey', description='The fields whose values are deduplicated.', example='LABEL.dimensions::LABEL.ruleId'),
    extendedFieldRedefineRules?: [  map[string]any ](name='ExtendedFieldRedefineRules', description='The extended mapped fields of the alert source.'),
    fieldRedefineRules?: [  map[string]any ](name='FieldRedefineRules', description='The predefined mapped fields of the alert source.'),
    initiativeRecoverField?: string(name='InitiativeRecoverField', description='The field for clearing alert events. The system queries alert events based on the field of alert clearing events and clears the alert events.

> Only Log Service supports this parameter.', example='$.status'),
    initiativeRecoverValue?: string(name='InitiativeRecoverValue', description='The value of the field for clearing alert events. The system queries alert events based on the field of alert clearing events and clears the alert events.

> Only Log Service supports this parameter.', example='ok'),
    integrationId?: long(name='IntegrationId', description='The ID of the alert integration.', example='1234'),
    integrationName?: string(name='IntegrationName', description='The name of the alert integration.', example='CloudMonitor integration'),
    integrationProductType?: string(name='IntegrationProductType', description='The service of the alert integration. Valid values:

*   CLOUD_MONITOR: CloudMonitor
*   LOG_SERVICE: Log Service', example='CLOUD_MONITOR'),
    liveness?: string(name='Liveness', description='The activity of the alert integration', example='ready'),
    recoverTime?: long(name='RecoverTime', description='The time when alert events are automatically cleared. Unit: seconds. Default value: 300.', example='300'),
    shortToken?: string(name='ShortToken', description='The authentication token of the alert integration.', example='ymQBN******'),
    stat?: [ long ](name='Stat', description='The total number of alert events and the number of abnormal alert events in the last hour.'),
    state?: boolean(name='State', description='Indicates whether the alert integration is enabled. Valid values:

*   true
*   false', example='true'),
  }(name='Integration', description='The Information about the alert integration.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model UpdateIntegrationResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateIntegrationResponseBody(name='body'),
}

async function updateIntegration(request: UpdateIntegrationRequest): UpdateIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIntegration', 'POST', '/', 'json', true, 'form', request);
}

model UpdatePrometheusAlertRuleRequest {
  alertId: long(name='AlertId', example='3888704', position='Query'),
  alertName: string(name='AlertName', example='Prometheus_Alert', position='Query'),
  annotations?: string(name='Annotations', example='[{"Value": "xxx","Name": "description"}]', position='Query'),
  clusterId: string(name='ClusterId', example='c0bad479465464e1d8c1e641b0afb****', position='Query'),
  dispatchRuleId?: long(name='DispatchRuleId', example='10282', position='Query'),
  duration: string(name='Duration', example='1', position='Query'),
  expression: string(name='Expression', example='100 * (sum(rate(container_cpu_usage_seconds_total[1m])) by (pod_name) / sum(label_replace(kube_pod_container_resource_limits_cpu_cores, \\"pod_name\\", \\"$1\\", \\"pod\\", \\"(.*)\\")) by (pod_name))>75', position='Query'),
  labels?: string(name='Labels', example='[{"Value": "critical","Name": "severity"}]', position='Query'),
  message: string(name='Message', position='Query'),
  notifyType?: string(name='NotifyType', example='ALERT_MANAGER', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Query'),
  type?: string(name='Type', position='Query'),
}

model UpdatePrometheusAlertRuleResponseBody = {
  code?: long(name='Code'),
  message?: string(name='Message'),
  prometheusAlertRule?: {
    alertId?: long(name='AlertId', example='3888704'),
    alertName?: string(name='AlertName', example='Prometheus_Alert'),
    annotations?: [ 
      {
        name?: string(name='Name', example='message'),
        value?: string(name='Value'),
      }
    ](name='Annotations'),
    clusterId?: string(name='ClusterId', example='c0bad479465464e1d8c1e641b0afb****'),
    dispatchRuleId?: long(name='DispatchRuleId', example='10282'),
    duration?: string(name='Duration', example='1'),
    expression?: string(name='Expression', example='100 * (sum(rate(container_cpu_usage_seconds_total[1m])) by (pod_name) / sum(label_replace(kube_pod_container_resource_limits_cpu_cores, \\"pod_name\\", \\"$1\\", \\"pod\\", \\"(.*)\\")) by (pod_name))>75'),
    labels?: [ 
      {
        name?: string(name='Name', example='severity'),
        value?: string(name='Value', example='critical'),
      }
    ](name='Labels'),
    message?: string(name='Message'),
    notifyType?: string(name='NotifyType', example='ALERT_MANAGER'),
    status?: int32(name='Status', example='1'),
    type?: string(name='Type'),
  }(name='PrometheusAlertRule'),
  requestId?: string(name='RequestId', example='9FEA6D00-317F-45E3-9004-7FB8B0B7****'),
  success?: boolean(name='Success'),
}

model UpdatePrometheusAlertRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePrometheusAlertRuleResponseBody(name='body'),
}

async function updatePrometheusAlertRule(request: UpdatePrometheusAlertRuleRequest): UpdatePrometheusAlertRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePrometheusAlertRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePrometheusGlobalViewRequest {
  allSubClustersSuccess?: boolean(name='AllSubClustersSuccess', description='创建GlobalView时，是否要求所有子实例都校验成功时，才创建GlobalView实例。默认是false，即可以部分成功。', example='true', position='Query'),
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance.', example='global****', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
  mostRegionId?: string(name='MostRegionId', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-shenzhen', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Prometheus instance belongs.', example='rg-acfmxyexli2****', position='Query'),
  subClustersJson: string(name='SubClustersJson', description='The data sources of the global aggregation instance.', example='\\[ { "headers":{ }, "regionId":"cn-hangzhou", "sourceType":"AlibabaPrometheus", "extras":{ }, "clusterId":"c39a1048921e04f\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*", "sourceName":"arms-luyao-test", "dataSource":"", "userId":"1672753\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*" }, { "headers":{ }, "regionId":"cn-beijing", "sourceType":"AlibabaPrometheus", "extras":{ }, "clusterId":"c6b6485496d5b40\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*", "sourceName":"agent-321-test", "dataSource":"", "userId":"1672753\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*" }, { "headers":{ }, "regionId":"cn-zhangjiakou", "sourceType":"AlibabaPrometheus", "extras":{ }, "clusterId":"c261a4f3200c446\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*", "sourceName":"zaifeng-cardinality-01", "dataSource":"", "userId":"1672753\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*" } ]', position='Query'),
}

model UpdatePrometheusGlobalViewResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    failedInstances?: [ 
      {
        clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cdb65ed2d527345*********'),
        sourceName?: string(name='SourceName', description='The name of the data source.', example='sourcename-test'),
        sourceType?: string(name='SourceType', description='The type of the data source. Valid values:

*   AlibabaPrometheus
*   MetricStore
*   CustomPrometheus', example='AlibabaPrometheus'),
        userId?: string(name='UserId', description='The user ID.', example='23784673825*******'),
      }
    ](name='FailedInstances', description='The Prometheus instances or data sources that failed to be updated.'),
    success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The error message returned if the Prometheus agent failed to be installed.', example='message'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='E9C9DA3D-10FE-472E-9EEF-2D0A3E41****'),
}

model UpdatePrometheusGlobalViewResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePrometheusGlobalViewResponseBody(name='body'),
}

async function updatePrometheusGlobalView(request: UpdatePrometheusGlobalViewRequest): UpdatePrometheusGlobalViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePrometheusGlobalView', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePrometheusIntegrationRequest {
  clusterId: string(name='ClusterId', description='arms-hz-central', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  instanceId?: long(name='InstanceId', example='2893', position='Query'),
  integrationType: string(name='IntegrationType', position='Query'),
  param: string(name='Param', example='{
      "port": "5554",
      "name": "kafka-test12",
      "kafka_instance": "kafka-test",
      "__label_value": "kafka-test",
      "scrape_interval": 33,
      "metrics_path": "/metrics",
      "__label_key": "kafka-test"
}', position='Query'),
  regionId: string(name='RegionId', description='success=false', example='cn-hangzhou', position='Query'),
}

model UpdatePrometheusIntegrationResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    instanceId?: long(name='InstanceId', example='2866'),
    instanceName?: string(name='InstanceName', example='inet'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='2DB771C3-D1BB-5363-8A5F-ADB2AF2948DB'),
}

model UpdatePrometheusIntegrationResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePrometheusIntegrationResponseBody(name='body'),
}

async function updatePrometheusIntegration(request: UpdatePrometheusIntegrationRequest): UpdatePrometheusIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePrometheusIntegration', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePrometheusMonitoringRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  configYaml: string(name='ConfigYaml', description='The monitoring configuration. Specify a YAML string.', position='Body'),
  monitoringName: string(name='MonitoringName', description='The name of the monitoring configuration.', example='podMonitor1', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  type: string(name='Type', description='The type of the monitoring configuration. Valid values for a Prometheus instance for Container Service: ServiceMonitor, PodMonitor, CustomJob, and Probe. Valid values for a Prometheus instance for ECS: CustomJob and Probe.', example='podMonitor', position='Query'),
}

model UpdatePrometheusMonitoringResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The result of the operation.', example='success'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='626037F5-FDEB-45B0-804C-B3C92797****'),
}

model UpdatePrometheusMonitoringResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePrometheusMonitoringResponseBody(name='body'),
}

async function updatePrometheusMonitoring(request: UpdatePrometheusMonitoringRequest): UpdatePrometheusMonitoringResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePrometheusMonitoring', 'POST', '/', 'json', true, 'form', request);
}

model UpdatePrometheusMonitoringStatusRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  monitoringName: string(name='MonitoringName', description='The name of the monitoring configuration.', example='customJob1', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  status: string(name='Status', description='The status of the monitoring configuration. Valid values: run and stop.', example='run', position='Query'),
  type: string(name='Type', description='The type of the monitoring configuration. Valid values for a Prometheus instance for Container Service: ServiceMonitor, PodMonitor, and CustomJob. Valid value for a Prometheus instance for ECS: CustomJob. The status of Probe cannot be modified.', example='customJob', position='Query'),
}

model UpdatePrometheusMonitoringStatusResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The result of the operation.', example='success'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='21E85B16-75A6-429A-9F65-8AAC9A54****'),
}

model UpdatePrometheusMonitoringStatusResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePrometheusMonitoringStatusResponseBody(name='body'),
}

async function updatePrometheusMonitoringStatus(request: UpdatePrometheusMonitoringStatusRequest): UpdatePrometheusMonitoringStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePrometheusMonitoringStatus', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePrometheusRemoteWriteRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  remoteWriteName: string(name='RemoteWriteName', description='The name of the remote write configuration.', example='rw1', position='Query'),
  remoteWriteYaml: string(name='RemoteWriteYaml', description='The remote write configuration. Specify the value in the YAML format.', example='remote_write:
  - name: rw1
    url: "http://cn-hangzhou-intranet.arms.aliyuncs.com/prometheus/uid/xx/cn-hangzhou/api/v3/write"
    basic_auth:
      username: xxx
      password: xxx
    write_relabel_configs:
      - source_labels: [ instance_id ]
        separator: ;
        regex: si
        replacement: $1
        action: keep', position='Body'),
}

model UpdatePrometheusRemoteWriteResponseBody = {
  code?: int32(name='Code', description='The status code returned. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The name of the remote write configuration item or the exception information.', example='rw1'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='2A0CEDF1-06FE-44AC-8E21-21A5BE65****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   `true`: The call was successful.
*   `false`: The call failed.', example='true'),
}

model UpdatePrometheusRemoteWriteResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePrometheusRemoteWriteResponseBody(name='body'),
}

async function updatePrometheusRemoteWrite(request: UpdatePrometheusRemoteWriteRequest): UpdatePrometheusRemoteWriteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePrometheusRemoteWrite', 'POST', '/', 'json', true, 'form', request);
}

model UpdateWebhookRequest {
  body: string(name='Body', position='Query'),
  contactId: long(name='ContactId', example='48716', minimum=0, maximum=9223372036854775807, position='Query'),
  contactName: string(name='ContactName', position='Query'),
  httpHeaders?: string(name='HttpHeaders', example='[{"Content-Type":"application/json"}]', position='Query'),
  httpParams?: string(name='HttpParams', example='[{"name":"mike"}]', position='Query'),
  method: string(name='Method', example='Post', position='Query'),
  recoverBody?: string(name='RecoverBody', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  url: string(name='Url', example='https://oapi.dingtalk.com/robot/send?access_token=e1a049121ddbfce1ca963d115ef88cc7219583c4fb79fe6e398fbfb688******', position='Query'),
}

model UpdateWebhookResponseBody = {
  isSuccess?: boolean(name='IsSuccess', example='true'),
  requestId?: string(name='RequestId', example='16AF921B-8187-489F-9913-43C808B4****'),
}

model UpdateWebhookResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateWebhookResponseBody(name='body'),
}

/**
  * The ID of the request.
  *
 */
async function updateWebhook(request: UpdateWebhookRequest): UpdateWebhookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWebhook', 'POST', '/', 'json', false, 'json', request);
}

model UploadRequest {
  edition?: string(name='Edition', description='The version of the SourceMap file.', example='0.0.0', position='Query'),
  file?: string(name='File', description='The content of the SourceMap file.', example='test file content', position='Body'),
  fileName: string(name='FileName', description='The name of the SourceMap file.', example='test.js.map', position='Query'),
  pid: string(name='Pid', description='The application ID.

Log on to the **ARMS console**. In the left-side navigation pane, choose **Browser Monitoring** > **Browser Monitoring**. On the Browser Monitoring page, click the name of an application. The URL in the address bar contains the process ID (PID) of the application. The PID is indicated in the pid=xxx format. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is eb4zdose6v%409781be0f44d\\*\\*\\*\\*, you must replace %40 with @ to obtain eb4zdose6v@9781be0f44d\\*\\*\\*\\*.', example='b590lhguqs@8cc3f6354******', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the SourceMap file is uploaded.', example='cn-hangzhou', position='Query'),
  version?: string(name='Version', description='We recommend that you do not specify this parameter.', example='null', position='Query'),
}

model UploadResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
  uploadResult?: {
    fid?: string(name='Fid', description='The ID of the SourceMap file.', example='123'),
    fileName?: string(name='FileName', description='The name of the SourceMap file.', example='test.js.map'),
    uploadTime?: string(name='UploadTime', description='The time when the file was uploaded.', example='1650272251'),
  }(name='UploadResult', description='The returned data.'),
}

model UploadResponse = {
  headers: map[string]string(name='headers'),
  body: UploadResponseBody(name='body'),
}

async function upload(request: UploadRequest): UploadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Upload', 'POST', '/', 'json', true, 'form', request);
}

