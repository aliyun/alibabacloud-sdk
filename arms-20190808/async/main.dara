/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ARMS';
  @version = '2019-08-08';
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-2-pop' = 'arms.aliyuncs.com',
    'cn-beijing-finance-1' = 'arms.aliyuncs.com',
    'cn-beijing-finance-pop' = 'arms.aliyuncs.com',
    'cn-beijing-gov-1' = 'arms.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'arms.aliyuncs.com',
    'cn-edge-1' = 'arms.aliyuncs.com',
    'cn-fujian' = 'arms.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'arms.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'arms.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'arms.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'arms.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'arms.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'arms.aliyuncs.com',
    'cn-hangzhou-test-306' = 'arms.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'arms.aliyuncs.com',
    'cn-huhehaote-nebula-1' = 'arms.aliyuncs.com',
    'cn-qingdao-nebula' = 'arms.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'arms.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'arms.aliyuncs.com',
    'cn-shanghai-inner' = 'arms.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'arms.aliyuncs.com',
    'cn-shenzhen-inner' = 'arms.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'arms.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'arms.aliyuncs.com',
    'cn-wuhan' = 'arms.aliyuncs.com',
    'cn-yushanfang' = 'arms.aliyuncs.com',
    'cn-zhangbei' = 'arms.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'arms.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'arms.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'arms.aliyuncs.com',
    'eu-west-1-oxs' = 'arms.aliyuncs.com',
    'me-east-1' = 'arms.aliyuncs.com',
    'rus-west-1-pop' = 'arms.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CallChainInfo {
  additionalInfo?: string(name='AdditionalInfo'),
  appName?: string(name='AppName'),
  appType?: string(name='AppType'),
  children?: [
    CallChainInfo
  ](name='Children'),
  haveSpan?: boolean(name='HaveSpan'),
  logMap?: map[string]map[string]any(name='LogMap'),
  logTime?: long(name='LogTime'),
  parentSpanId?: string(name='ParentSpanId'),
  pid?: string(name='Pid'),
  regionId?: string(name='RegionId'),
  resultCode?: string(name='ResultCode'),
  rpc?: string(name='Rpc'),
  rpcId?: string(name='RpcId'),
  rpcType?: long(name='RpcType'),
  serverIp?: string(name='ServerIp'),
  span?: long(name='Span'),
  spanId?: string(name='SpanId'),
  tagMap?: map[string]string(name='TagMap'),
  traceId?: string(name='TraceId'),
}

model GrafanaWorkspace {
  commercial?: boolean(name='commercial'),
  deployType?: string(name='deployType'),
  description?: string(name='description'),
  endTime?: float(name='endTime', example='1652803200000'),
  gmtCreate?: float(name='gmtCreate', example='创建时间'),
  grafanaVersion?: string(name='grafanaVersion'),
  grafanaWorkspaceDomain?: string(name='grafanaWorkspaceDomain'),
  grafanaWorkspaceDomainStatus?: string(name='grafanaWorkspaceDomainStatus', example='on'),
  grafanaWorkspaceEdition?: string(name='grafanaWorkspaceEdition', example='experts_edition/advanced_edition/standard'),
  grafanaWorkspaceId?: string(name='grafanaWorkspaceId', example='g-thisisademo666'),
  grafanaWorkspaceIp?: string(name='grafanaWorkspaceIp', example='127.0.0.1:3000'),
  grafanaWorkspaceName?: string(name='grafanaWorkspaceName'),
  maxAccount?: string(name='maxAccount', example='10'),
  ntmId?: string(name='ntmId'),
  personalDomain?: string(name='personalDomain'),
  personalDomainPrefix?: string(name='personalDomainPrefix'),
  privateDomain?: string(name='privateDomain'),
  privateIp?: string(name='privateIp'),
  protocol?: string(name='protocol', example='http/https'),
  regionId?: string(name='regionId', example='cn-hangzhou'),
  resourceGroupId?: string(name='resourceGroupId'),
  shareSynced?: boolean(name='shareSynced'),
  snatIp?: string(name='snatIp', example='1.1.1.1'),
  status?: string(name='status', example='Starting/Running/Stop/DeleteSucceed'),
  tags?: [ 
    {
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='tags'),
  upgradeVersion?: [ string ](name='upgradeVersion'),
  userId?: string(name='userId', example='66666666'),
}

model GrafanaWorkspaceAccount {
  accountId?: long(name='accountId', example='1'),
  accountNotes?: string(name='accountNotes'),
  aliyunUid?: string(name='aliyunUid', example='131243781293'),
  aliyunUserName?: string(name='aliyunUserName', example='test'),
  gmtCreate?: float(name='gmtCreate', example='创建时间'),
  orgs?: [
    GrafanaWorkspaceUserOrg
  ](name='orgs'),
  type?: string(name='type', example='aliyun'),
}

model GrafanaWorkspaceAlertNotification {
  id?: long(name='id', example='1'),
  isArms?: boolean(name='isArms', example='true'),
  isDefault?: boolean(name='isDefault', example='true'),
  name?: string(name='name', example='test'),
  sendReminder?: boolean(name='sendReminder', example='true'),
  settings?: string(name='settings', example='{}'),
  type?: string(name='type', example='Email'),
  uid?: string(name='uid', example='Xfdf******'),
}

model GrafanaWorkspaceArmsAlertConfig {
  armsAlertsEnable?: string(name='armsAlertsEnable', example='true'),
  armsAlertsWebhookUrl?: string(name='armsAlertsWebhookUrl'),
}

model GrafanaWorkspaceCustomDomain {
  cert?: string(name='cert', example='protocol为http时无需填写;'),
  date?: long(name='date', example='1688627798017'),
  domain?: string(name='domain', example='mydomain.com'),
  grafanaWorkspaceId?: string(name='grafanaWorkspaceId', example='grafana-cn-***********'),
  id?: long(name='id', example='1'),
  key?: string(name='key', example='protocol为http时无需填写;'),
  privateZone?: string(name='privateZone', example='true'),
  protocol?: string(name='protocol', example='https'),
  status?: string(name='status', example='CreateSucceed'),
  uri?: string(name='uri', example='/'),
}

model GrafanaWorkspaceDashboardReport {
  gmtCreate?: long(name='gmtCreate', example='1680861352600'),
  grafanaWorkspaceId?: string(name='grafanaWorkspaceId', example='grafana-cn-**********'),
  id?: long(name='id', example='1'),
  lastSendTime?: long(name='lastSendTime', example='1680861352600'),
  msg?: string(name='msg'),
  name?: string(name='name'),
  reportChannelTarget?: string(name='reportChannelTarget', example='******@aliyun.com'),
  reportChannelType?: string(name='reportChannelType', example='Email'),
  reportStyle?: string(name='reportStyle', example='Grid,Simple'),
  reportType?: string(name='reportType', example='Image'),
  status?: string(name='status'),
  triggerDay?: string(name='triggerDay', example='1'),
  triggerTime?: string(name='triggerTime', example='12:25'),
  triggerType?: string(name='triggerType', example='ByWeek'),
  url?: string(name='url', example='Dashboard URL'),
  userId?: string(name='userId'),
}

model GrafanaWorkspaceDashboardSync {
  dashboardTitle?: string(name='dashboardTitle', example='testTitle'),
  dashboardURL?: string(name='dashboardURL', example='https://g.console.aliyun.com/d/1098370038733503-14960236-422-3/ack-pro-apiserver'),
  dashboardUid?: string(name='dashboardUid', example='xxxdvxsea'),
  folderId?: string(name='folderId', example='123456'),
  folderTitle?: string(name='folderTitle', example='test'),
  folderURL?: string(name='folderURL', example='https://g.console.aliyun.com/d/1098370038733503-14960236-422-3/ack-pro-apiserver'),
  folderUid?: string(name='folderUid', example='vxeupqn'),
  orgId?: string(name='orgId', example='1'),
  orgName?: string(name='orgName', example='user123'),
  type?: string(name='type', example='normal'),
}

model GrafanaWorkspaceDataBackup {
  gmtCreate?: long(name='gmtCreate', example='1680861352600'),
  gmtModified?: long(name='gmtModified', example='1680861352600'),
  grafanaWorkspaceId?: string(name='grafanaWorkspaceId', example='grafana-cn-**********'),
  id?: long(name='id', example='1'),
  msg?: string(name='msg'),
  processName?: string(name='processName'),
  processStatus?: string(name='processStatus'),
  subType?: string(name='subType', example='User'),
  userId?: string(name='userId'),
}

model GrafanaWorkspaceIniBackup {
  ext?: string(name='ext'),
  gmtCreate?: long(name='gmtCreate', example='1680861352600'),
  gmtModified?: long(name='gmtModified', example='1680861352600'),
  grafanaWorkspaceId?: string(name='grafanaWorkspaceId', example='grafana-cn-**********'),
  id?: long(name='id', example='1'),
  msg?: string(name='msg'),
  processName?: string(name='processName'),
  processStatus?: string(name='processStatus'),
  subType?: string(name='subType', example='User'),
  userId?: string(name='userId'),
}

model GrafanaWorkspaceIniProperty {
  defaultValue?: string(name='defaultValue'),
  description?: string(name='description'),
  example?: string(name='example'),
  key?: string(name='key'),
  secret?: boolean(name='secret'),
  value?: string(name='value'),
}

model GrafanaWorkspaceIniSection {
  propertys?: [
    GrafanaWorkspaceIniProperty
  ](name='propertys'),
  section?: string(name='section'),
}

model GrafanaWorkspaceIntegration {
  datasourceAmount?: long(name='datasourceAmount'),
  integrationId?: string(name='integrationId'),
  integrationName?: string(name='integrationName'),
  previews?: [
    GrafanaWorkspaceIntegrationPreview
  ](name='previews'),
  status?: string(name='status'),
  supportRegions?: [ string ](name='supportRegions'),
}

model GrafanaWorkspaceIntegrationDataSource {
  clusterType?: string(name='clusterType'),
  datasourceId?: string(name='datasourceId'),
  datasourceName?: string(name='datasourceName'),
  datasourceUrl?: string(name='datasourceUrl'),
  description?: string(name='description'),
  exploreUrl?: string(name='exploreUrl'),
  extra?: map[string]string(name='extra'),
  folderUrl?: string(name='folderUrl'),
  regionId?: string(name='regionId'),
  status?: string(name='status'),
  type?: string(name='type'),
}

model GrafanaWorkspaceIntegrationDetail {
  dataSources?: [
    GrafanaWorkspaceIntegrationDataSource
  ](name='dataSources'),
  integrationId?: string(name='integrationId'),
  status?: string(name='status'),
}

model GrafanaWorkspaceIntegrationPreview {
  id?: string(name='id'),
  image?: string(name='image'),
  name?: string(name='name'),
  thumbnail?: string(name='thumbnail'),
}

model GrafanaWorkspaceMoveProcess {
  gmtCreate?: long(name='gmtCreate', example='1680861352600'),
  gmtModified?: long(name='gmtModified', example='1680861352600'),
  grafanaWorkspaceId?: string(name='grafanaWorkspaceId', example='grafana-cn-**********'),
  id?: long(name='id', example='1'),
  msg?: string(name='msg'),
  processName?: string(name='processName'),
  processStatus?: string(name='processStatus'),
  subType?: string(name='subType', example='User'),
  userId?: string(name='userId'),
}

model GrafanaWorkspaceNews {
  date?: long(name='date'),
  description?: string(name='description'),
  image?: string(name='image'),
  link?: string(name='link'),
  title?: string(name='title'),
}

model GrafanaWorkspaceOperateLog {
  date?: float(name='date'),
  detail?: string(name='detail'),
  grafanaWorkspaceId?: string(name='grafanaWorkspaceId'),
  id?: long(name='id'),
  operatorId?: string(name='operatorId'),
}

model GrafanaWorkspaceOrg {
  id?: long(name='id', example='1'),
  name?: string(name='name', example='main org'),
}

model GrafanaWorkspaceTrans {
  apiUrl?: string(name='apiUrl'),
  authType?: string(name='authType'),
  gmtCreate?: float(name='gmtCreate'),
  gmtModified?: float(name='gmtModified'),
  grafanaWorkspaceId?: string(name='grafanaWorkspaceId'),
  id?: long(name='id'),
  msg?: string(name='msg'),
  processStatus?: string(name='processStatus'),
  transDetails?: [
    GrafanaWorkspaceTransDetail
  ](name='transDetails'),
  userId?: string(name='userId'),
}

model GrafanaWorkspaceTransDetail {
  dashboardAmount?: int32(name='dashboardAmount'),
  dataSourceAmount?: int32(name='dataSourceAmount'),
  original?: long(name='original'),
  originalName?: string(name='originalName'),
  target?: long(name='target'),
  targetName?: string(name='targetName'),
}

model GrafanaWorkspaceUserCert {
  id?: string(name='id', example='8096753'),
  name?: string(name='name', example='cert-7700050 [grafana.tongtong-max.cn]'),
}

model GrafanaWorkspaceUserOrg {
  orgId?: long(name='orgId', example='1'),
  orgName?: string(name='orgName', example='main org'),
  role?: string(name='role', example='admin'),
}

model GrafanaWorkspaceVpcConfig {
  fcConfig?: string(name='fcConfig', example='fc、ansm'),
  id?: long(name='id', example='1'),
  installMsg?: string(name='installMsg'),
  installStatus?: string(name='installStatus', example='CreateSucceed'),
  name?: string(name='name', example='北京VPC-A通道'),
  regionId?: string(name='regionId', example='cn-beijing'),
  securityGroupId?: string(name='securityGroupId', example='sg-6we94uvybteyc******'),
  userId?: string(name='userId', example='10983***********'),
  vSwitchId?: string(name='vSwitchId', example='vsw-6we3**********'),
  vpcId?: string(name='vpcId', example='vpc-6wehr2x**********'),
}

model GrafanaWorkspaceVpcRegion {
  regionId?: string(name='regionId', example='cn-beijing'),
  regionName?: string(name='regionName', example='华北2（北京）'),
}

model GrafanaWorkspaceVpcRegionDetail {
  fcConfig?: string(name='fcConfig', example='fc、ansm'),
  id?: long(name='id', example='配置ID'),
  installStatus?: string(name='installStatus', example='Uninitialized'),
  name?: string(name='name', example='vpc-abc*****'),
  regionId?: string(name='regionId', example='cn-beijing'),
  securityGroupId?: string(name='securityGroupId'),
  securityGroupIds?: [ string ](name='securityGroupIds'),
  userId?: string(name='userId', example='10988**********'),
  vSwitchId?: string(name='vSwitchId'),
  vSwitchIds?: [ string ](name='vSwitchIds'),
  vpcId?: string(name='vpcId', example='vpc-2ze4siu98**********'),
}

model QueryDataResponse {
  results?: string(name='results'),
}

model AddAliClusterIdsToPrometheusGlobalViewRequest {
  clusterIds: string(name='ClusterIds', description='The IDs of clusters. Separate multiple IDs with commas (,).', example='cd1d55bef19904324a20ed0ebb86caa5c,c5b48729918ab4745a24482ac29d0973a, c00a94896641449098bf24931e4166003, cd174485c09384060ba542bc1be1185a4', position='Query'),
  globalViewClusterId: string(name='GlobalViewClusterId', description='The ID of the global aggregation instance.', example='global-v2-cn-1478326682034601-vss8pd0i', position='Query'),
  groupName: string(name='GroupName', description='The name of the global aggregation instance.', example='zyGlobalView', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model AddAliClusterIdsToPrometheusGlobalViewResponseBody = {
  code?: int32(name='Code', description='Status code. 200 is success, other status codes are exceptions.', example='200'),
  data?: {
    info?: string(name='Info', description='The Info-level information.', example='{regionId: the region where the aggregation instance resides. globalViewClusterId: the ID of the aggregation instance. failedClusterIds: the ID of the cluster that failed to be added. A cluster may fail to be added because the specified cluster ID is invalid or the cluster is added across continents.}'),
    msg?: string(name='Msg', description='The additional information.', example='OK'),
    success?: boolean(name='Success', description='Indicates whether the request was successful.

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
  }(name='Data', description='The information about the array object.'),
  message?: string(name='Message', description='Returns a hint message for the result.', example='success'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='F7781D4A-2818-41E7-B7BB-79D809E9****'),
}

model AddAliClusterIdsToPrometheusGlobalViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddAliClusterIdsToPrometheusGlobalViewResponseBody(name='body'),
}

async function addAliClusterIdsToPrometheusGlobalView(request: AddAliClusterIdsToPrometheusGlobalViewRequest): AddAliClusterIdsToPrometheusGlobalViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAliClusterIdsToPrometheusGlobalView', 'POST', '/', 'json', false, 'json', request);
}

model AddGrafanaRequest {
  clusterId: string(name='ClusterId', description='The ID of the Container Service for Kubernetes (ACK) cluster.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  integration: string(name='Integration', description='The abbreviation of the software that is supported by Application Real-Time Monitoring Service (ARMS). Valid values (case-insensitive): `ASM`, `IoT`, and `Flink`.', example='asm', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model AddGrafanaResponseBody = {
  data?: string(name='Data', description='Indicates whether the call was successful.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
}

model AddGrafanaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddGrafanaResponseBody(name='body'),
}

async function addGrafana(request: AddGrafanaRequest): AddGrafanaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddGrafana', 'POST', '/', 'json', false, 'json', request);
}

model AddIntegrationRequest {
  clusterId: string(name='ClusterId', description='The ID of the Container Service for Kubernetes (ACK) cluster.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  integration: string(name='Integration', description='The abbreviation of the software that is supported by Application Real-Time Monitoring Service (ARMS). Valid values (case-insensitive): `ASM`, `IoT`, and `Flink`.', example='asm', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model AddIntegrationResponseBody = {
  code?: int32(name='Code', description='Status code. 200 means success, other status codes are exceptions.', example='200'),
  data?: string(name='Data', description='Indicates whether the call was successful.', example='success'),
  message?: string(name='Message', description='The prompt information of the returned result.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
}

model AddIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddIntegrationResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function addIntegration(request: AddIntegrationRequest): AddIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddIntegration', 'POST', '/', 'json', false, 'json', request);
}

model AddPrometheusGlobalViewRequest {
  clusters: string(name='Clusters', description='The queried global aggregation instances. The value is a JSON string.', example='[         {             "sourceName": "Data source name- ArmsPrometheus No.1",             "sourceType":"AlibabaPrometheus",             "userId":"UserID",             "clusterId":"ClusterId",         },         {             "sourceName": "Data source name - MetrcStore No.2",             "sourceType":"MetricStore",             "dataSource":"MetricStore remote read address",             "extras":{                 "username":"BasicAuthUsername",                 "password":"BasicAuthPassword"             }         },         {             "sourceName": "Custom ",             "sourceType":"CustomPrometheus",             "dataSource":"Build your own Prometheus data source remoteread address",             "extras":{                 "username":"BasicAuthUsername",                 "password":"BasicAuthPassword"             }         },         {           	"sourceName": "Other one ",             "sourceType":"Others",             "dataSource":"Other data sources such as Tencent remoteread address",             "headers":{                 "AnyHeaderToFill":"Headers to be populated"             },             "extras":{                 "username":"BasicAuthUsername",                 "password":"BasicAuthPassword"             }         }   // ....... more addre ]', position='Query'),
  groupName: string(name='GroupName', description='The name of the aggregation instance.', example='zyGlobalView', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-aek2eq4pecazwfy', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='http.status_code'),
      value?: string(name='Value', description='The tag value.', example='200'),
    }
  ](name='Tag', description='The list of tags.', position='Query'),
}

model AddPrometheusGlobalViewResponseBody = {
  code?: int32(name='Code', description='状态码。说明 200表示成功。', example='200'),
  data?: {
    info?: {
      failedInstances?: string(name='FailedInstances', description='The list of instances that failed to be added.', example='\\[{"sourceName": "Data source name- ArmsPrometheus","sourceType":"AlibabaPrometheus","userId":"UserID","clusterId":"ClusterId",}]'),
      globalViewClusterId?: string(name='GlobalViewClusterId', description='The ID of the global aggregation instance.', example='global-v2-cn-1483223059272121-jmjjfznz'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    }(name='Info', description='The Info-level information.'),
    msg?: string(name='Msg', description='The additional information.', example='OK'),
    success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
  }(name='Data', description='The information about the array object.'),
  message?: string(name='Message', description='返回结果的提示信息。', example='success'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model AddPrometheusGlobalViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddPrometheusGlobalViewResponseBody(name='body'),
}

async function addPrometheusGlobalView(request: AddPrometheusGlobalViewRequest): AddPrometheusGlobalViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddPrometheusGlobalView', 'POST', '/', 'json', false, 'json', request);
}

model AddPrometheusGlobalViewByAliClusterIdsRequest {
  clusterIds: string(name='ClusterIds', description='The IDs of clusters. Separate multiple IDs with commas (,).', example='cd1d55bef19904324a20ed0ebb86caa5c,c5b48729918ab4745a24482ac29d0973a, c00a94896641449098bf24931e4166003, cd174485c09384060ba542bc1be1185a4', position='Query'),
  groupName: string(name='GroupName', description='The name of the global aggregation instance.', example='zyGlobalView', position='Query'),
  productCode?: string(name='ProductCode', description='The identifier to identify the service if custom dashboards are created for the specified clusters.', example='adcp', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model AddPrometheusGlobalViewByAliClusterIdsResponseBody = {
  code?: int32(name='Code', description='Status code. 200 is success, other status codes are exceptions.', example='200'),
  data?: {
    info?: string(name='Info', description='The Info-level information.', example='{regionId: the region where the aggregation instance resides. globalViewClusterId: the ID of the aggregation instance. failedClusterIds: the ID of the cluster that failed to be added. A cluster may fail to be added because the specified cluster ID is invalid or the cluster is added across continents.}'),
    msg?: string(name='Msg', description='The additional information.', example='success'),
    success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
  }(name='Data', description='The struct returned.'),
  message?: string(name='Message', description='Returns a hint message for the result.', example='success'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='3A0EA2AF-C9B3-555C-B9D5-5DD8F5EF98A9'),
}

model AddPrometheusGlobalViewByAliClusterIdsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddPrometheusGlobalViewByAliClusterIdsResponseBody(name='body'),
}

async function addPrometheusGlobalViewByAliClusterIds(request: AddPrometheusGlobalViewByAliClusterIdsRequest): AddPrometheusGlobalViewByAliClusterIdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddPrometheusGlobalViewByAliClusterIds', 'POST', '/', 'json', false, 'json', request);
}

model AddPrometheusInstanceRequest {
  name: string(name='Name', description='The name of the Prometheus instance for Remote Write.', example='notificationpolicy_test', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  type: string(name='Type', description='The type of the Prometheus instance. Only Prometheus instances for Remote Write is supported. Set the value to RW.', example='RW', position='Query'),
}

model AddPrometheusInstanceResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The struct returned. { "RequestId": the request ID, "Data": "{ "clusterType": the cluster type, "remoteWriteUrl": the public URL for remote write, "internetGrafanaUrl": the internal URL for Grafana, "authToken": indicates whether authentication is enabled, "internetPushGatewayUrl": the internal URL for Pushgateway, "clusterId": the cluster ID, "internetRemoteReadUrl": the internal URL for remote read, "remoteReadUrl": the public URL for remote read, "grafanaUrl": the public URL for Grafana, "pushGatewayUrl": the public URL for Pushgateway, "internetRemoteWriteUrl": the internal URL for remote write}" }', example='{
  "RequestId": "1293091C-54AD-50FE-B787-E314B94B35AB",
  "Data": "{
  "clusterType":"remote-write-prometheus",
  "remoteWriteUrl":"http://cn-hu/api/v3/write",
  "internetGrafanaUrl":"https://cn-hanga/cn-hangzhou",
  "authToken":false,
  "internetPushGatewayUrl":"https://cangzhou/api/v2",
  "clusterId":"vrju1lj3sa|123456",
  "internetRemoteReadUrl":"https://cn-hangzh67cn-hangzhou/api/v1/read",
  "remoteReadUrl":"http://cn-hanou/api/v1/read",
  "grafanaUrl":"http://cn-angzhou",
  "pushGatewayUrl":"htt1lj3sa/cn-hangzhou/api/v2",
  "internetRemoteWriteUrl":"httpsngzhou/api/v3/write"}"
}'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9319A57D-2D9E-472A-B69B-CF3CD16D****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model AddPrometheusInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddPrometheusInstanceResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function addPrometheusInstance(request: AddPrometheusInstanceRequest): AddPrometheusInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddPrometheusInstance', 'POST', '/', 'json', false, 'json', request);
}

model AddPrometheusIntegrationRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance. Only a Prometheus instance for Container Service or a Prometheus instance for ECS is supported.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  integrationType: string(name='IntegrationType', description='The type of the integration.', example='kafka, mysql, redis, snmp, emr, nubela, and tidb', position='Query'),
  param: string(name='Param', description='The configurations of the exporter. The value is a JSON string.', example='{"port":"5554","name":"kafka-test12","kafka_instance":"kafka-test","__label_value":"kafka-test","scrape_interval":33,"metrics_path":"/metrics","__label_key":"kafka-test"}', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model AddPrometheusIntegrationResponseBody = {
  code?: int32(name='Code', description='The status code or error code.', example='200'),
  data?: {
    instanceId?: long(name='InstanceId', description='The ID of the exporter.', example='2829'),
    instanceName?: string(name='InstanceName', description='The name of the exporter.', example='hw-cloud02'),
  }(name='Data', description='The struct returned.'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='3703B98C-335E-5BA7-972E-F90E9E768A85'),
}

model AddPrometheusIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddPrometheusIntegrationResponseBody(name='body'),
}

async function addPrometheusIntegration(request: AddPrometheusIntegrationRequest): AddPrometheusIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddPrometheusIntegration', 'POST', '/', 'json', false, 'json', request);
}

model AddRecordingRuleRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  ruleYaml: string(name='RuleYaml', description='The custom recording rule. The value is in the YAML format.', example='groups: - name: "recording_demo"   rules:   - expr: "sum(jvm_memory_max_bytes)"     record: "rate_coredns_demo"', position='Query'),
}

model AddRecordingRuleResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The status of the response.', example='success'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9FEA6D00-317F-45E3-9004-7FB8B0B7****'),
}

model AddRecordingRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddRecordingRuleResponseBody(name='body'),
}

async function addRecordingRule(request: AddRecordingRuleRequest): AddRecordingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddRecordingRule', 'POST', '/', 'json', false, 'json', request);
}

model AddTagToFlinkClusterRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance.', example='c5defa51f******c92bd2ef5fb093269', position='Query'),
  flinkWorkSpaceId: string(name='FlinkWorkSpaceId', description='The ID of the Flink workspace.', example='ab18f***93744d', position='Query'),
  flinkWorkSpaceName: string(name='FlinkWorkSpaceName', description='The name of the Flink workspace.', example='flink-demo', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****', position='Query'),
  targetUserId: string(name='TargetUserId', description='The ID of the Alibaba Cloud account to which the Flink workspace belongs.', example='198608******7619', position='Query'),
}

model AddTagToFlinkClusterResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: string(name='Data', description='Indicates whether the business logic was executed. Valid values:

*   true
*   false', example='false'),
  requestId?: string(name='RequestId', description='The request ID.', example='2FC13182-B9AF-4E6B-BE51-72669B7C****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model AddTagToFlinkClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddTagToFlinkClusterResponseBody(name='body'),
}

async function addTagToFlinkCluster(request: AddTagToFlinkClusterRequest): AddTagToFlinkClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTagToFlinkCluster', 'POST', '/', 'json', false, 'json', request);
}

model AppendInstancesToPrometheusGlobalViewRequest {
  clusters: string(name='Clusters', description='The list of global aggregation instances. The value is a JSON string.', example='\\[ { "sourceName": "Data source name- ArmsPrometheus No.1", "sourceType":"AlibabaPrometheus", "userId":"UserID", "clusterId":"ClusterId", }, { "sourceName": "Data source name - MetrcStore No.2", "sourceType":"MetricStore", "dataSource":"Remote read endpoint of the MetricStore", "extras":{ "username":"BasicAuthUsername", "password":"BasicAuthPassword" } }, { "sourceName": "Custom ", "sourceType":"CustomPrometheus", "dataSource":"Remote read endpoint of the self-managed Prometheus data source", "extras":{ "username":"BasicAuthUsername", "password":"BasicAuthPassword" } }, { "sourceName": "Other one ", "sourceType":"Others", "dataSource":"Endpoint of another data source such as Tencent remote read", "headers":{ "AnyHeaderToFill":"Headers to be filled" }, "extras":{ "username":"BasicAuthUsername", "password":"BasicAuthPassword" } } // ....... more addre ]', position='Query'),
  globalViewClusterId: string(name='GlobalViewClusterId', description='The ID of the global aggregation instance.', example='global-v2-cn-1670100631025794-6gjc0qgb', position='Query'),
  groupName: string(name='GroupName', description='The name of the global aggregation instance.', example='zyGlobalView', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model AppendInstancesToPrometheusGlobalViewResponseBody = {
  code?: int32(name='Code', description='Status code. 200 means success, other status codes are exceptions.', example='200'),
  data?: {
    info?: string(name='Info', description='The Info-level information.', example='{regionId: the region where the aggregation instance resides. globalViewClusterId: the ID of the aggregation instance. failedInstances: the ID of the object that failed to be added.}'),
    msg?: string(name='Msg', description='The additional information.', example='OK'),
    success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   `true`: The call was successful.
*   `false`: The call failed.', example='True'),
  }(name='Data', description='The information about the array object.'),
  message?: string(name='Message', description='Additional message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='27E653FA-5958-45BE-8AA9-14D884DC****'),
}

model AppendInstancesToPrometheusGlobalViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AppendInstancesToPrometheusGlobalViewResponseBody(name='body'),
}

async function appendInstancesToPrometheusGlobalView(request: AppendInstancesToPrometheusGlobalViewRequest): AppendInstancesToPrometheusGlobalViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AppendInstancesToPrometheusGlobalView', 'POST', '/', 'json', false, 'json', request);
}

model ApplyScenarioRequest {
  appId: string(name='AppId', description='The ID of the application.', example='b590lhguqs@28f515462f******', position='Query'),
  config: map[string]any(name='Config', description='The configuration of the business monitoring job. The value is a JSON string. For more information about this parameter, see the following additional information about the **Config** parameter.', example='{"rpcType":"0","nameMatchType":"EQUALS","service":"/api/pop/test","operator":"and","filterItems":[{"type":"HttpHeaders","key":"uid","opt":"==","value":"123456789"}],"group":{"type":"HttpRequestParameters","key":"name"}}', shrink='json', position='Query'),
  name: string(name='Name', description='The name of the business monitoring job.', example='ScenarioName', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-zhangjaikou', position='Query'),
  scenario?: string(name='Scenario', description='The scenario where you want to use the business monitoring job. Valid values:

*   `USER-DEFINED`: user-defined. This is the default value.
*   `EDAS-ROLLOUT`: application release in Enterprise Distributed Application Service (EDAS)
*   `OAM-ROLLOUT`: application release based on Open Application Model (OAM)
*   `MSC-CANARY`: canary release based on Microservice Engine (MSE)', example='USER-DEFINED', position='Query'),
  sign?: string(name='Sign', description='The code of the business monitoring job. This parameter is not required when you create a business monitoring job. However, this parameter is required when you update a business monitoring job.', example='a9f8****', position='Query'),
  snDump?: boolean(name='SnDump', description='Specifies whether to record business parameters to the trace marked with the coloring sign.

*   `true`
*   `false`: This is the default value.', example='false', position='Query'),
  snForce?: boolean(name='SnForce', description='Specifies whether traffic in the trace marked with the coloring sign is all collected.

*   `true`
*   `false`: This is the default value.', example='false', position='Query'),
  snStat?: boolean(name='SnStat', description='Specifies whether to count traffic based on the coloring sign.

*   `true`
*   `false`: This is the default value.', example='false', position='Query'),
  snTransfer?: boolean(name='SnTransfer', description='Specifies whether the coloring sign is transparently passed down to downstream application nodes in the trace.

*   `true`
*   `false`: This is the default value.', example='false', position='Query'),
  updateOption: boolean(name='UpdateOption', description='Specifies whether the operation is an update operation.

*   `true`: update
*   `false`: insert', example='false', position='Query'),
}

model ApplyScenarioResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EA24D522-AD35-47B8-8CB2-ADBC38******'),
  result?: string(name='Result', description='The code of the business monitoring job, which is the coloring sign.', example='2b97****'),
}

model ApplyScenarioResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyScenarioResponseBody(name='body'),
}

async function applyScenario(request: ApplyScenarioRequest): ApplyScenarioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyScenario', 'POST', '/', 'json', false, 'json', request);
}

model BindPrometheusGrafanaInstanceRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  grafanaInstanceId: string(name='GrafanaInstanceId', description='The ID of the Grafana workspace.', example='grafana-bp1*****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Prometheus instance belongs.', example='rg-acfmxyexli2****', position='Query'),
}

model BindPrometheusGrafanaInstanceResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the request was successful.

*   true
*   false', example='true'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='27E653FA-5958-45BE-8AA9-14D884DC****'),
}

model BindPrometheusGrafanaInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindPrometheusGrafanaInstanceResponseBody(name='body'),
}

async function bindPrometheusGrafanaInstance(request: BindPrometheusGrafanaInstanceRequest): BindPrometheusGrafanaInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindPrometheusGrafanaInstance', 'POST', '/', 'json', false, 'json', request);
}

model BlockAlarmNotificationRequest {
  alarmId: long(name='AlarmId', description='The ID of the alert.

For more information about how to obtain the ID of an alert, see [ListAlertEvents](~~2612346~~).', example='133', position='Query'),
  handlerId?: long(name='HandlerId', description='The ID of the alert handler.', example='2044049', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  timeout: long(name='Timeout', description='The number of seconds that elapse before alert notifications are blocked. Unit: seconds.', example='180', position='Query'),
}

model BlockAlarmNotificationResponseBody = {
  code?: long(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='626037F5-FDEB-45B0-804C-B3C92797****'),
  result?: boolean(name='Result', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model BlockAlarmNotificationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BlockAlarmNotificationResponseBody(name='body'),
}

async function blockAlarmNotification(request: BlockAlarmNotificationRequest): BlockAlarmNotificationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BlockAlarmNotification', 'POST', '/', 'json', false, 'json', request);
}

model ChangeAlarmSeverityRequest {
  alarmId: long(name='AlarmId', description='The ID of the alert.

For more information about how to obtain the ID of an alert, see [ListAlertEvents](~~2612346~~).', example='155', position='Query'),
  handlerId?: long(name='HandlerId', description='The ID of the handler.', example='2046076', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  severity: string(name='Severity', description='The severity level of the alert. Valid values: P1, P2, P3, and P4. P4 indicates the lowest severity, whereas P1 indicates the highest severity.', example='P1', position='Query'),
}

model ChangeAlarmSeverityResponseBody = {
  code?: long(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='F7781D4A-2818-41E7-B7BB-79D809E9****'),
  result?: boolean(name='Result', description='Indicates whether the severity level was modified.

- `true`: The severity level was modified.
- `false`: The severity level failed to be modified.', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

- true
- false', example='true'),
}

model ChangeAlarmSeverityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeAlarmSeverityResponseBody(name='body'),
}

async function changeAlarmSeverity(request: ChangeAlarmSeverityRequest): ChangeAlarmSeverityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeAlarmSeverity', 'POST', '/', 'json', false, 'json', request);
}

model ChangeResourceGroupRequest {
  newResourceGroupId: string(name='NewResourceGroupId', description='The ID of the new resource group. You can view the available resource groups in the Resource Management console.', example='rg-aek2vezare****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceId: string(name='ResourceId', description='The resource ID.', example='ggxw4lnjuz@cfd34a78f******', position='Query'),
  resourceType?: string(name='ResourceType', description='The resource type.', example='APPLICATION', position='Query'),
}

model ChangeResourceGroupResponseBody = {
  code?: string(name='Code', description='The status code or error code.', example='200'),
  data?: {
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aek2vezare****'),
    resourceId?: string(name='ResourceId', description='The resource ID.', example='ggxw4lnjuz@cfd34a78f******'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='46355DD8-FC56-40C5-BFC6-269DE4F9****'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model CheckCommercialStatusRequest {
  regionId?: string(name='RegionId', description='The region ID. Default value: cn-hangzhou.', example='cn-hangzhou', position='Query'),
  service: string(name='Service', description='The ARMS sub-service. Valid values:

*   apm: Application Monitoring
*   rum: RUM
*   prometheus: Managed Service for Prometheus
*   xtrace: Managed Service for OpenTelemetry', example='apm', position='Query'),
}

model CheckCommercialStatusResponseBody = {
  data?: string(name='Data', description='The returned struct.', example='True'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1A474FF8-7861-4D00-81B5-5BC3DA4E****'),
}

model CheckCommercialStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckCommercialStatusResponseBody(name='body'),
}

/**
  * You can call this operation to check whether ARMS is available for commercial use in a region.
  *
 */
async function checkCommercialStatus(request: CheckCommercialStatusRequest): CheckCommercialStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckCommercialStatus', 'GET', '/', 'json', false, 'json', request);
}

model CheckServiceStatusRequest {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-beijing', position='Query'),
  svcCode: string(name='SvcCode', description='The service code of an Alibaba Cloud service. The service code of Managed Service for Prometheus is prometheus.', example='prometheus', position='Query'),
}

model CheckServiceStatusResponseBody = {
  data?: string(name='Data', description='Indicates whether the request was successful. Valid values:

*   true.
*   false.', example='true'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to find logs and troubleshoot issues.', example='5710C923-AD09-4293-9E11-DCBE3D15F8D4'),
}

model CheckServiceStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckServiceStatusResponseBody(name='body'),
}

async function checkServiceStatus(request: CheckServiceStatusRequest): CheckServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckServiceStatus', 'POST', '/', 'json', false, 'json', request);
}

model ClaimAlarmRequest {
  alarmId: long(name='AlarmId', description='The ID of the alert.

For more information about how to obtain the ID of an alert, see [ListAlertEvents](~~2612346~~).', example='30', position='Query'),
  handlerId?: long(name='HandlerId', description='The ID of the handler.', example='2046076', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model ClaimAlarmResponseBody = {
  code?: long(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='6A9AEA84-7186-4D8D-B498-4585C6A2****'),
  result?: boolean(name='Result', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

`true`

`false`', example='true'),
}

model ClaimAlarmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ClaimAlarmResponseBody(name='body'),
}

async function claimAlarm(request: ClaimAlarmRequest): ClaimAlarmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ClaimAlarm', 'POST', '/', 'json', false, 'json', request);
}

model CloseAlarmRequest {
  alarmId: long(name='AlarmId', description='The ID of the alert.

For more information about how to obtain the ID of an alert, see [ListAlertEvents](~~2612346~~).', example='163', position='Query'),
  handlerId?: long(name='HandlerId', description='The ID of the alert handler.', example='2048065', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  solution?: string(name='Solution', description='The alert solution.', example='Restart Repair', position='Query'),
}

model CloseAlarmResponseBody = {
  code?: long(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='46355DD8-FC56-40C5-BFC6-269DE4F9****'),
  result?: boolean(name='Result', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='True'),
}

model CloseAlarmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloseAlarmResponseBody(name='body'),
}

async function closeAlarm(request: CloseAlarmRequest): CloseAlarmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloseAlarm', 'POST', '/', 'json', false, 'json', request);
}

model ConfigAppRequest {
  appIds: string(name='AppIds', description='The process identifier (PID) of the application. Separate multiple PIDs with commas (,).', example='iioe7jcnuk@582846f37******,atc889zkcf@d8deedfa9bf******', position='Query'),
  enable?: string(name='Enable', description='Specifies whether to turn on or off the main switch of the ARMS agent. The monitoring stops after the switch is turned off. If you do not specify this parameter, the main switch status of the ARMS agent is queried.

*   `true`: turns on the switch
*   `false`: turns off the switch', example='true', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  type?: string(name='Type', description='The type of the application. Set the value to **TRACE**.', example='TRACE', position='Query'),
}

model ConfigAppResponseBody = {
  data?: string(name='Data', description='The result of turning on or off the main switch of the ARMS agent or the main switch status of the ARMS agent. Indicates whether the request was successful. Valid values: success failed The main switch status of the ARMS agent. Valid values: true false', example='abc@def success\\nghi@jkl success\\n'),
  requestId?: string(name='RequestId', description='The request ID.', example='16AF921B-8187-489F-9913-43C808B4****'),
}

model ConfigAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfigAppResponseBody(name='body'),
}

/**
  * ****
  *
 */
async function configApp(request: ConfigAppRequest): ConfigAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigApp', 'POST', '/', 'json', false, 'json', request);
}

model CreateAlertContactRequest {
  contactName?: string(name='ContactName', description='The name of the alert contact.', example='JohnDoe', position='Query'),
  dingRobotWebhookUrl?: string(name='DingRobotWebhookUrl', description='The webhook URL of the DingTalk chatbot. For more information about how to obtain the URL, see [Configure a DingTalk chatbot to send alert notifications](https://www.alibabacloud.com/help/zh/doc-detail/106247.htm). You must specify at least one of the following parameters: PhoneNum, Email, and DingRobotWebhookUrl.

>  Enter `alert` in the custom keyword field of DingTalk chatbot security settings.', example='https://oapi.dingtalk.com/robot/send?access_token=91f2f6****', position='Query'),
  email?: string(name='Email', description='The email address of the alert contact. You must specify at least one of the following parameters: PhoneNum, Email, and DingRobotWebhookUrl.', example='someone@example.com', position='Query'),
  phoneNum?: string(name='PhoneNum', description='The mobile number of the alert contact. You must specify at least one of the following parameters: PhoneNum, Email, and DingRobotWebhookUrl.', example='1381111****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. Set the value to `cn-hangzhou`.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. You can obtain the resource group ID in the **Resource Management** console.', example='rg-aek2eq4peca****', position='Query'),
  systemNoc?: boolean(name='SystemNoc', description='Specifies whether the alert contact receives system notifications. Valid values:

*   `true`: The alert contact receives system notifications.
*   `false`: The alert contact does not receive system notifications.', example='true', position='Query'),
}

model CreateAlertContactResponseBody = {
  contactId?: string(name='ContactId', description='The ID of the alert contact.', example='102**'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E9C9DA3D-10FE-472E-9EEF-2D0A3E41****'),
}

model CreateAlertContactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAlertContactResponseBody(name='body'),
}

/**
  * This operation is no longer maintained. To create or modify an alert contact, call the CreateOrUpdateContact operation provided by the new version of the Alert Management module.
  *
 */
async function createAlertContact(request: CreateAlertContactRequest): CreateAlertContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAlertContact', 'POST', '/', 'json', false, 'json', request);
}

model CreateAlertContactGroupRequest {
  contactGroupName: string(name='ContactGroupName', description='The name of the alert contact group.', example='TestGroup', position='Query'),
  contactIds?: string(name='ContactIds', description='The IDs of contacts in the contact group. Separate multiple contact IDs with spaces. You can call the SearchAlertContact operation to query the contact IDs. For more information, see [SearchAlertContact](~~130703~~).', example='12* 23* 34*', position='Query'),
  regionId: string(name='RegionId', description='The region ID. Default value: `cn-hangzhou`.', example='cn-hangzhou', position='Query'),
}

model CreateAlertContactGroupResponseBody = {
  contactGroupId?: string(name='ContactGroupId', description='The ID of the alert contact group.', example='446*'),
  requestId?: string(name='RequestId', description='The request ID.', example='70675725-8F11-4817-8106-CFE0AD71****'),
}

model CreateAlertContactGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAlertContactGroupResponseBody(name='body'),
}

/**
  * The current API operation is no longer maintained. Call the CreateOrUpdateContactGroup operation of the new Alert Management module to create or modify alert contact groups.
  *
 */
async function createAlertContactGroup(request: CreateAlertContactGroupRequest): CreateAlertContactGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAlertContactGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateDispatchRuleRequest {
  dispatchRule: string(name='DispatchRule', description='The dispatch rule configuration. The value is a JSON string. For more information about this parameter, see the following **additional information about the DispatchRule parameter**.', example='{   "system": false,   "ruleid": 10282,   "name": "Prometheus Alert",   "labelMatchExpressionGrid": {     "labelMatchExpressionGroups": [       {         "labelMatchExpressions": [           {             "key": "_aliyun_arms_involvedObject_kind",             "value": "app",             "operator": "eq"           }         ]       }     ]   },   "dispatchType": "CREATE_ALERT/DISCARD_ALERT",   "isRecover": true,   "groupRules": [     {       "groupId": 1,       "groupingFields": [         "alertname"       ],       "groupWait": 10,       "groupInterval": 15,       "repeatInterval": 20     }   ],   "notifyRules": [     {       "notifyObjects": [         {           "notifyType": "ARMS_CONTACT",           "name": "JohnDoe",           "notifyObjectId": 1         },         {           "notifyType": "ARMS_CONTACT_GROUP",           "name": "JohnDoe_group",           "notifyObjectId": 2         }       ],       "notifyChannels":["dingTalk","wechat","webhook","email"]     },   ], }', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model CreateDispatchRuleResponseBody = {
  dispatchRuleId?: long(name='DispatchRuleId', description='The ID of the dispatch policy.', example='10413'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
}

model CreateDispatchRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDispatchRuleResponseBody(name='body'),
}

async function createDispatchRule(request: CreateDispatchRuleRequest): CreateDispatchRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDispatchRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateEnvCustomJobRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values: zh and en. Default value: zh.', example='zh', position='Query'),
  configYaml: string(name='ConfigYaml', description='The YAML configuration string of the custom job.', example='Refer to supplementary instructions.', position='Body'),
  customJobName: string(name='CustomJobName', description='The name of the custom job.', example='customJob1', position='Query'),
  environmentId: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxxx', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model CreateEnvCustomJobResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: string(name='Data', description='The name of the custom job that was created, or the exception information.', example='cutomJob1'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C518054-852F-4023-ABC1-4AF95FF7****'),
}

model CreateEnvCustomJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEnvCustomJobResponseBody(name='body'),
}

async function createEnvCustomJob(request: CreateEnvCustomJobRequest): CreateEnvCustomJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEnvCustomJob', 'POST', '/', 'json', true, 'form', request);
}

model CreateEnvPodMonitorRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values: zh and en. Default value: zh.', example='zh', position='Query'),
  configYaml: string(name='ConfigYaml', description='The YAML configuration string of the PodMonitor.', example='Refer to supplementary instructions.', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request.', example='true', position='Query'),
  environmentId: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxxx', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model CreateEnvPodMonitorResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    matchedMsg?: string(name='MatchedMsg', description='Indicates whether targets are matched.', example='Match successful.'),
    matchedTargetCount?: string(name='MatchedTargetCount', description='The number of matched targets.', example='1'),
    namespace?: string(name='Namespace', description='The namespace.', example='arms-prom'),
    podMonitorName?: string(name='PodMonitorName', description='The name of the created PodMonitor.', example='arms-admin-pm1'),
  }(name='Data', description='The returned result, which indicates whether the operation was successful.'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
}

model CreateEnvPodMonitorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEnvPodMonitorResponseBody(name='body'),
}

async function createEnvPodMonitor(request: CreateEnvPodMonitorRequest): CreateEnvPodMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEnvPodMonitor', 'POST', '/', 'json', true, 'form', request);
}

model CreateEnvServiceMonitorRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values:

*   zh (default): Chinese
*   en: English', example='zh', position='Query'),
  configYaml: string(name='ConfigYaml', description='The YAML configuration file of the ServiceMonitor.', example='Refer to supplementary instructions.', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. The system checks whether the format is valid and whether targets are matched.', example='true', position='Query'),
  environmentId: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxxx', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model CreateEnvServiceMonitorResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    matchedMsg?: string(name='MatchedMsg', description='Indicates whether targets are matched.', example='Match successful.'),
    matchedTargetCount?: int32(name='MatchedTargetCount', description='The number of matched targets.', example='1'),
    namespace?: string(name='Namespace', description='The namespace.', example='arms-prom'),
    serviceMonitorName?: string(name='ServiceMonitorName', description='The name of the created ServiceMonitor.', example='arms-admin1'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
}

model CreateEnvServiceMonitorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEnvServiceMonitorResponseBody(name='body'),
}

async function createEnvServiceMonitor(request: CreateEnvServiceMonitorRequest): CreateEnvServiceMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEnvServiceMonitor', 'POST', '/', 'json', true, 'form', request);
}

model CreateEnvironmentRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Default value: zh.

Valid values:
*   en: English
*   zh: Chinese', example='zh', position='Query'),
  bindResourceId: string(name='BindResourceId', description='The ID of the resource bound to the environment, such as the container ID or VPC ID. For a Cloud environment, specify the region ID.', example='c6e9dec475dca4a50a188411d8cbxxx', position='Query'),
  environmentName: string(name='EnvironmentName', description='The name of the environment.', example='env1', position='Query'),
  environmentSubType: string(name='EnvironmentSubType', description='The subtype of the environment. Valid values:

*   CS: Container Service for Kubernetes (ACK) or Distributed Cloud Container Platform for Kubernetes (ACK One)
*   ECS: ECS
*   Cloud: cloud service', example='ECS, ACK, etc.', position='Query'),
  environmentType: string(name='EnvironmentType', description='The type of the environment. Valid values:

*   CS: Container Service
*   ECS: Elastic Compute Service
*   Cloud: cloud service', example='CS', position='Query'),
  feePackage?: string(name='FeePackage', description='The payable resource plan.

*   If the EnvironmentType parameter is set to CS, set the value to CS_Basic or CS_Pro. Default value: CS_Basic.
*   Otherwise, leave the parameter empty.', example='CS_Basic', position='Query'),
  grafanaWorkspaceId?: string(name='GrafanaWorkspaceId', description='The ID of the Grafana workspace associated with the environment. If this parameter is left empty, the default shared Grafana workspace is used.', example='grafana-rnglkcdrntlhk0****', position='Query'),
  initEnvironment?: boolean(name='InitEnvironment', description='Specifies whether to initialize the environment.', example='false', position='Query'),
  managedType?: string(name='ManagedType', description='Specifies whether agents or exporters are managed. Valid values:

*   none: No. By default, no managed agents or exporters are provided for ACK clusters.
*   agent: Agents are managed. By default, managed agents are provided for ASK clusters, ACS clusters, and ACK One clusters.
*   agent-exporter: Agents and exporters are managed. By default, managed agents and exporters are provided for cloud services.', example='none', position='Query'),
  prometheusInstanceId?: string(name='PrometheusInstanceId', description='The ID of the Prometheus instance. If no Prometheus instance is created, call the InitEnvironment operation.', example='c6e9dec475dca4a50a188411d8cbxxx', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The tags of the instance. You can specify this parameter to manage tags for the instance.', position='Query'),
}

model CreateEnvironmentResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The ID of the created environment.', example='env-xxxxx'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='16AF921B-8187-489F-9913-43C808B4****'),
}

model CreateEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEnvironmentResponseBody(name='body'),
}

async function createEnvironment(request: CreateEnvironmentRequest): CreateEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEnvironment', 'POST', '/', 'json', false, 'json', request);
}

model CreateGrafanaWorkspaceRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values: zh and en. Default value: zh.', example='zh', position='Query'),
  description?: string(name='Description', description='The description of the workspace', example='test', position='Query'),
  grafanaVersion: string(name='GrafanaVersion', example='10.0.x', position='Query'),
  grafanaWorkspaceEdition: string(name='GrafanaWorkspaceEdition', description='The edition.

**Valid values:**

*   standard: `Beta Edition or Standard Edition`
*   personal_edition: Developer Edition
*   experts_edition: Pro Edition
*   advanced_edition: Advanced Edition', example='experts_edition', position='Query'),
  grafanaWorkspaceName: string(name='GrafanaWorkspaceName', description='The name of the Grafana workspace.', example='testgrafana', position='Query'),
  password?: string(name='Password', description='The password of the workspace. The password must be 8 to 30 characters in length. It must include at least three of the following characters types: uppercase letter, lowercase letter, digit, and special character. Special characters include () \\" ~ ! @ # $ % ^ & \\* - \\_ + =.', example='Test123456!', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxyexli2****', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The list of tags.', shrink='json', position='Query'),
}

model CreateGrafanaWorkspaceResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: GrafanaWorkspace(name='Data'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='D80ADAAC-8C32-5479-BD14-C28CF832****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
  traceId?: string(name='TraceId', description='The ID of the trace.', example='eac0a8048716731735000007137d000b'),
}

model CreateGrafanaWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGrafanaWorkspaceResponseBody(name='body'),
}

/**
  * Before you call the operation, make sure that you have learned about the billing methods and [pricing](https://www.alibabacloud.com/help/zh/grafana/product-overview/billing-4?spm=a2c4g.11186623.0.0.14c2d253B3SDbt) of Managed Service for Grafana.
  * > 
  * *   To create workspaces, you must complete real-name verification.
  * *   Regular users can create workspaces only in Managed Service for Grafana Developer Edition, Pro Edition, and Advanced Edition. `These editions charge fees.`
  * *   Internal users can create workspaces only in Managed Service for Grafana Beta Edition and Standard Edition. `These editions do not charge fees.`
  *
 */
async function createGrafanaWorkspace(request: CreateGrafanaWorkspaceRequest): CreateGrafanaWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGrafanaWorkspace', 'POST', '/', 'json', false, 'json', request);
}

model CreateIntegrationRequest {
  autoRecover?: boolean(name='AutoRecover', description='Specifies whether to automatically clear alert events. Default value: true. Valid values:

*   true
*   false', example='true', position='Body'),
  description?: string(name='Description', description='The description of the alert integration.', example='Test', position='Body'),
  integrationName: string(name='IntegrationName', description='The name of the alert integration.', example='CloudMonitor integration', position='Body'),
  integrationProductType: string(name='IntegrationProductType', description='The service of the alert integration. Valid values:

*   CLOUD_MONITOR: CloudMonitor
*   LOG_SERVICE: Log Service', example='CLOUD_MONITOR', position='Body'),
  recoverTime?: long(name='RecoverTime', description='The period of time within which alert events are automatically cleared. Unit: seconds. Default value: 300.', example='300', position='Body'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model CreateIntegrationResponseBody = {
  integration?: {
    autoRecover?: boolean(name='AutoRecover', description='Indicates whether alert events are automatically cleared. Default value: true. Valid values:

*   true
*   false', example='true'),
    description?: string(name='Description', description='The description of the alert integration.', example='Test'),
    integrationId?: long(name='IntegrationId', description='The ID of the alert integration.', example='1234'),
    integrationName?: string(name='IntegrationName', description='The name of the alert integration.', example='CloudMonitor integration'),
    integrationProductType?: string(name='IntegrationProductType', description='The service of the alert integration. Valid values:

*   CLOUD_MONITOR: CloudMonitor
*   LOG_SERVICE: Log Service', example='CLOUD_MONITOR'),
    recoverTime?: long(name='RecoverTime', description='The period of time within which alert events are automatically cleared. Unit: seconds. Default value: 300.', example='300'),
  }(name='Integration', description='The returned information about the alert integration.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model CreateIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIntegrationResponseBody(name='body'),
}

async function createIntegration(request: CreateIntegrationRequest): CreateIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIntegration', 'POST', '/', 'json', true, 'form', request);
}

model CreateOrUpdateAlertRuleRequest {
  alertCheckType?: string(name='AlertCheckType', description='The alert check type of the Prometheus alert rule. Valid values:

*   STATIC: a static threshold value. If you set the parameter to STATIC, you must specify the **MetricsKey** parameter. For more information, see the **Correspondence between AlertGroup and MetricsKey for Prometheus Service** table.
*   CUSTOM: a custom PromQL statement. If you set the parameter to CUSTOM, you must specify the **PromQL**, **Duration**, and **Message** parameters to create a Prometheus alert rule.', example='STATIC', position='Body'),
  alertGroup?: long(name='AlertGroup', description='The alert contact group ID of the Prometheus alert rule. Valid values:

*   \\-1: custom PromQL
*   1: Kubernetes load
*   15: Kubernetes node', example='-1', position='Body'),
  alertId?: long(name='AlertId', description='The ID of the alert rule.

*   If you do not specify this parameter, a new alert rule is created.
*   If you specify this parameter, the specified alert rule is modified.', example='546xxx', position='Body'),
  alertName: string(name='AlertName', description='The name of the alert rule.', example='Alert Rule Demo', position='Body'),
  alertPiplines?: string(name='AlertPiplines', description='The configuration of the alert sending channel. This parameter is used to be compatible with the old version of the rule.', example='-', position='Body'),
  alertRuleContent?: string(name='AlertRuleContent', description='The content of the Application Monitoring or Browser Monitoring alert rule. The following code provides an example of the **AlertRuleContent** parameter. For more information about the meaning of each field, see the supplementary description.

```json
{ 
    "Condition": "OR",
     "AlertRuleItems": [
             { "Operator": "CURRENT_LTE",
                 "MetricKey": "appstat.jvm.threadcount",
                 "Value": 1000,
                 "Aggregate": "AVG",
                  "N": 10,
                  "Tolerability": 169
            } 
       ]  
  }
```

>  The filter conditions specified by the **AlertRuleItems.MetricKey** field depends on the value of the **MetricsType** parameter. For more information about the types of metrics supported by Application Monitoring and Browser Monitoring and the alert rule fields corresponding to each metric, see the supplementary description.', example='{ "Condition": "OR", "AlertRuleItems": [ { "Operator": "CURRENT_LTE",  "MetricKey": "appstat.jvm.threadcount",  "Value": 1000,  "Aggregate": "AVG",   "N": 1  }  ]  }', position='Body'),
  alertStatus?: string(name='AlertStatus', description='The status of the alert rule. Valid values:

*   RUNNING (default)
*   STOPPED', example='RUNNING', position='Body'),
  alertType: string(name='AlertType', description='The type of the alert rule. Valid values:

*   APPLICATION_MONITORING_ALERT_RULE: alert rule for Application Monitoring
*   BROWSER_MONITORING_ALERT_RULE: alert rule for Browser Monitoring
*   PROMETHEUS_MONITORING_ALERT_RULE: alert rule for Managed Service for Prometheus
*   XTRACE_MONITORING_ALERT_RULE: alert rule for Managed Service for OpenTelemetry
*   EBPF_MONITORING_ALERT_RULE: alert rule for Application Monitoring eBPF Edition
*   RUM_MONITORING_ALERT_RULE: alert rule for Real User Monitoring', example='APPLICATION_MONITORING_ALERT_RULE', position='Body'),
  annotations?: string(name='Annotations', description='The annotations of the Prometheus alert rule.', example='\\[ { "Value": "PolarDB slow queries", "Name": "\\_aliyun_display_name" }', position='Body'),
  autoAddNewApplication?: boolean(name='AutoAddNewApplication', description='Specifies whether to apply the alert rule to new applications that are created in Application Monitoring or Browser Monitoring. Valid values:

*   `true`: enables the health check feature.
*   `false`: disables the automatic backup feature.', example='false', position='Body'),
  autoAddTargetConfig?: string(name='AutoAddTargetConfig', description='The configurations that are automatically appended to monitor the application based on the specified alert rule. autoAddMatchType: the matching mode. Valid values: REGULAR and NOT_REGULAR. autoAddMatchExp: the regular expression', example='{\\"autoAddMatchType\\":\\"REGULAR\\",\\"autoAddMatchExp\\":\\".*cbw.*\\"}', position='Body'),
  clusterId?: string(name='ClusterId', description='The ID of the monitored cluster.', example='ceba9b9ea5b924dd0b6726d2de6******', position='Body'),
  dataConfig?: string(name='DataConfig', description='Data Configuration. The dataRevision field specifies the data repair method when there is no data for the metric.

- Fill with zero: 0
- Fill with one: 1
- Fill with null: 2 (default, does not trigger an alarm)', example='{
    "dataRevision": 2
}', position='Body'),
  duration?: long(name='Duration', description='The duration of the Prometheus alert rule, in minutes, in the range of [0,1440].', example='1', position='Body'),
  filters?: string(name='Filters', description='The filter conditions of the Application Monitoring or Browser Monitoring alert rule. Format:

    "DimFilters": [ 
    { 
     "FilterOpt": "ALL",
    "FilterValues": [],         //The value of the filter condition.
    "FilterKey": "rootIp"     //The key of the filter condition.
    }
    ]

Valid values of **FilterOpt**:

*   STATIC: matches the value of the specified dimension.
*   ALL: traverses all dimension values. Dynamic thresholds do not support traversal.
*   DISABLE: aggregates the values of all dimensions.', example='{"DimFilters": [             {               "FilterOpt": "ALL",               "FilterValues": [],               "FilterKey": "rootIp"             }           ]         }', position='Body'),
  labels?: string(name='Labels', description='The tags of the Prometheus alert rule.', example='[  { "Value": "cms_polardb",             "Name": "_aliyun_cloud_product"           }         ]', position='Body'),
  level?: string(name='Level', description='The severity level of the Prometheus alert rule.

*   P1: Alert notifications are sent for major issues that affect the availability of core business, have a huge impact, and may lead to serious consequences.
*   P2: Alert notifications are sent for service errors that affect the system availability with relatively limited impact.
*   P3: Alert notifications are sent for issues that may cause service errors or negative effects, or alert notifications for services that are relatively less important.
*   P4: Alert notifications are sent for low-priority issues that do not affect your business.
*   Default: Alert notifications are sent regardless of alert levels.', example='P2', position='Body'),
  markTags?: [ 
    {
      key?: string(name='Key', description='The Tag Key.', example='service'),
      value?: string(name='Value', description='The Tag Value.', example='proudct'),
    }
  ](name='MarkTags', description='Application Tags. Used for application monitoring alert rules, to filter applications associated with alert rules.', position='Body'),
  message?: string(name='Message', description='The alert message of the Prometheus alert rule.', example='Namespace: {{$labels.namespace}} / Pod: {{$labels.pod_name}} / Container: {{$labels.container}} Memory usage exceeds 80%. Current value: {{ printf \\\\\\\\\\"%.2f\\\\\\\\\\" $value }}%', position='Body'),
  metricsKey?: string(name='MetricsKey', description='The alert metrics. If you set the **AlertCheckType** parameter to **STATIC** when you create a Prometheus alert rule, you must specify the **MetricsKey** parameter.

> Alert metrics vary depending on the value of the **AlertGroup** parameter. For more information about the correspondence between **AlertGroup** and **MetricsKey**, see the supplementary description.', example='pop.status.error', position='Body'),
  metricsType?: string(name='MetricsType', description='The metric type of the Application Monitoring or Browser Monitoring alert rule. For more information, see the following table.', example='jvm', position='Body'),
  notice?: string(name='Notice', description='The effective time and notification time. This parameter is used to be compatible with the old version of the rule.', example='-', position='Body'),
  notifyMode?: string(name='NotifyMode', description='The notification mode. You can specify the normal mode or simple mode.

Valid values:

*   DIRECTED_MODE
*   NORMAL_MODE', example='NORMAL_MODE', position='Body'),
  notifyStrategy?: string(name='NotifyStrategy', description='The notification policy.

*   If you set this parameter to null, no notification policy is specified. After you create an alert rule, you can create a notification policy and specify match rules and match conditions. For example, you can specify the name of the alert rule as the match condition. When the alert rule is triggered, an alert event is generated and an alert notification is sent to the contacts or contact groups that are specified in the notification policy.
*   To specify a notification policy, set this parameter to the ID of the notification policy. Application Real-Time Monitoring Service (ARMS) automatically adds a match rule to the notification policy and specifies the ID of the alert rule as the match condition. The name of the alert rule is also displayed. This way, the alert events that are generated based on the alert rule can be matched by the specified notification policy.', example='569xxx', position='Body'),
  pids?: string(name='Pids', description='The process ID (PID) that is associated with the Application Monitoring or Browser Monitoring alert rule.', example='["b590lhguqs@40d8deedfa9******"]', position='Body'),
  product?: string(name='Product', description='When creating a Prometheus alert rule, the backend will verify whether this product exists, which is used to distinguish cloud product filtering queries.', example='clickhouse', position='Body'),
  promQL?: string(name='PromQL', description='The PromQL statement of the Prometheus alert rule.', example='node_memory_MemAvailable_bytes{} / node_memory_MemTotal_bytes{} * 100', position='Body'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Body'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='owner'),
      value?: string(name='Value', description='The tag value.', example='John'),
    }
  ](name='Tags', description='The list of tags.', position='Body'),
}

model CreateOrUpdateAlertRuleResponseBody = {
  alertRule?: {
    alertCheckType?: string(name='AlertCheckType', description='The alert check type of the Prometheus alert rule. Valid values:

*   STATIC: a static threshold value.
*   CUSTOM: a custom PromQL statement.', example='STATIC'),
    alertGroup?: long(name='AlertGroup', description='The alert contact group ID of the Prometheus alert rule. Valid values:

*   \\-1: custom PromQL
*   1: Kubernetes load
*   15: Kubernetes node', example='-1'),
    alertId?: float(name='AlertId', description='The ID of the alert rule.', example='5510445'),
    alertName?: string(name='AlertName', description='The name of the alert rule.', example='arms-test'),
    alertRuleContent?: {
      alertRuleItems?: [ 
        {
          aggregate?: string(name='Aggregate', description='The aggregation method of the alert condition. Valid values:

*   AVG: calculates the average value
*   SUM: calculates the total value
*   MAX: selects the maximum value
*   MIN: selects the minimum value', example='AVG'),
          metricKey?: string(name='MetricKey', description='The metric of the alert condition.', example='appstat.jvm.non_heap_used'),
          n?: float(name='N', description='Indicates the last N minutes.', example='1'),
          operator?: string(name='Operator', description='The comparison operator that was used to compare the metric value with the threshold. Valid values:

*   CURRENT_GTE: greater than or equal to
*   CURRENT_LTE: less than or equal to
*   PREVIOUS_UP: the increase percentage compared with the last period
*   PREVIOUS_DOWN: the decrease percentage compared with the last period
*   HOH_UP: the increase percentage compared with the last hour
*   HOH_DOWN: the decrease percentage compared with the last hour
*   DOD_UP: the increase percentage compared with the last day
*   DOD_DOWN: the decrease percentage compared with the last day', example='CURRENT_GTE'),
          value?: string(name='Value', description='The threshold of the alert condition.', example='1'),
        }
      ](name='AlertRuleItems', description='The trigger conditions of the Application Monitoring or Browser Monitoring alert rule.'),
      condition?: string(name='Condition', description='The relationship between multiple alert conditions that were specified for the Application Monitoring or Browser Monitoring alert rule. Valid values:

*   OR: meets any of the specified conditions.
*   AND: meets all the specified conditions.', example='"|"'),
    }(name='AlertRuleContent', description='The content of the Application Monitoring or Browser Monitoring alert rule.'),
    alertStatus?: string(name='AlertStatus', description='The status of the alert rule. Valid values:

*   RUNNING
*   STOPPED
*   PAUSED

> The PAUSED status indicates that the alert rule is abnormal and is actively paused by the system. The alert rule may be paused because that it is not unique or the associated cluster has been deleted.', example='RUNNING'),
    alertType?: string(name='AlertType', description='The type of the alert rule. Valid values:

*   APPLICATION_MONITORING_ALERT_RULE: alert rule for Application Monitoring
*   BROWSER_MONITORING_ALERT_RULE: alert rule for Browser Monitoring
*   PROMETHEUS_MONITORING_ALERT_RULE: alert rule for Prometheus Service', example='APPLICATION_MONITORING_ALERT_RULE'),
    annotations?: [ 
      {
        name?: string(name='Name', description='The key of the annotation.', example='123'),
        value?: string(name='Value', description='The value of the annotation.', example='abc'),
      }
    ](name='Annotations', description='The annotations of the Prometheus alert rule.'),
    autoAddNewApplication?: boolean(name='AutoAddNewApplication', description='Indicates whether the alert rule was applied to new applications that were created in Application Monitoring or Browser Monitoring. Valid values:

*   `true`: enables the health check feature.
*   `false`: disables the automatic backup feature.', example='false'),
    clusterId?: string(name='ClusterId', description='The ID of the monitored cluster.', example='ceba9b9ea5b924dd0b6726d2de6******'),
    createdTime?: long(name='CreatedTime', description='The timestamp generated when the alert rule was created. Unit: seconds.', example='1641438611000'),
    duration?: string(name='Duration', description='The duration of the Prometheus alert rule. Unit: minutes.', example='1'),
    extend?: string(name='Extend', description='The extended fields.', example='{\\\\"alarmContext\\\\":\\\\"{\\\\\\\\\\"content\\\\\\\\\\":\\\\\\\\Alert name: $Alert name\\\\\\\\\\\\nFilter condition: $Filter condition\\\\\\\\\\\\nAlert time: $Alert time\\\\\\\\\\\\nAlert content: $Alert content\\\\\\\\\\\\nNote: The alert persists before you receive an email that reminds you to clear the alert. You will be reminded of the alert again 24 hours later. \\\\\\\\\\",\\\\\\\\\\"subTitle\\\\\\\\\\":\\\\\\\\\\"\\\\\\\\\\"}\\\\",\\\\"alertWays\\\\":\\\\"\\[0,1]\\\\",\\\\"contactGroupIds\\\\":\\\\"381,5075\\\\",\\\\"notice\\\\":\\\\"{\\\\\\\\\\"endTime\\\\\\\\\\":1480607940000,\\\\\\\\\\"noticeEndTime\\\\\\\\\\":1480607940000,\\\\\\\\\\"noticeStartTime\\\\\\\\\\":1480521600000,\\\\\\\\\\"startTime\\\\\\\\\\":1480521600000}\\\\"}'),
    filters?: {
      customSLSFilters?: [ 
        {
          key?: string(name='Key', description='The key of the filter condition.', example='username'),
          opt?: string(name='Opt', description='The logical operator of the filter condition. Valid values:

*   \\=: equal to
*   not: not equal to', example='='),
          show?: boolean(name='Show', description='Indicates whether this filter condition was displayed on the frontend.', example='false'),
          t?: string(name='T', description='The log type of Browser Monitoring. This field was not included in other filter conditions.', example='null'),
          value?: string(name='Value', description='The value of the filter condition.', example='test'),
        }
      ](name='CustomSLSFilters', description='The custom filter condition of the Browser Monitoring alert rule.'),
      customSLSGroupByDimensions?: [ string ](name='CustomSLSGroupByDimensions', description='The information of the aggregation dimension.'),
      customSLSWheres?: [ string ](name='CustomSLSWheres', description='The details of the custom filter condition.'),
      dimFilters?: [ 
        {
          filterKey?: string(name='FilterKey', description='The key of the filter condition.', example='rootIp'),
          filterOpt?: string(name='FilterOpt', description='The logical operator of the filter condition.', example='ALL'),
          filterValues?: [ string ](name='FilterValues', description='The details of the filter condition.'),
        }
      ](name='DimFilters', description='The information about each filter condition of the Application Monitoring or Browser Monitoring alert rule.'),
    }(name='Filters', description='The filter conditions of the Application Monitoring or Browser Monitoring alert rule.'),
    labels?: [ 
      {
        name?: string(name='Name', description='The tag key.', example='123'),
        value?: string(name='Value', description='The tag value.', example='abc'),
      }
    ](name='Labels', description='The tags of the Prometheus alert rule.'),
    level?: string(name='Level', description='The severity level of the Prometheus alert rule.

*   P1: Alert notifications are sent for major issues that affect the availability of core business, have a huge impact, and may lead to serious consequences.
*   P2: Alert notifications are sent for service errors that affect the system availability with relatively limited impact.
*   P3: Alert notifications are sent for issues that may cause service errors or negative effects, or alert notifications for services that are relatively less important.
*   P4: Alert notifications are sent for low-priority issues that do not affect your business.
*   Default: Alert notifications are sent regardless of alert levels.', example='P2'),
    message?: string(name='Message', description='The alert message of the Prometheus alert rule.', example='Namespace: {{$labels.namespace}} / Pod: {{$labels.pod_name}} / Container: {{$labels.container}} Memory usage exceeds 80%. Current value: {{ printf \\\\\\\\\\"%.2f\\\\\\\\\\" $value }}%'),
    metricsType?: string(name='MetricsType', description='The metric type of the Application Monitoring or Browser Monitoring alert rule.', example='JVM'),
    notifyMode?: string(name='NotifyMode', description='Notification Mode.', example='NORMAL_MODE'),
    notifyStrategy?: string(name='NotifyStrategy', description='The name of the notification policy.', example='ALERT_MANAGER'),
    pids?: [ string ](name='Pids', description='The process ID (PID) that was associated with the Application Monitoring or Browser Monitoring alert rule.'),
    promQL?: string(name='PromQL', description='The PromQL statement of the Prometheus alert rule.', example='node_memory_MemAvailable_bytes{} / node_memory_MemTotal_bytes{} * 100'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    tags?: [ 
      {
        key?: string(name='Key', description='The tag key.', example='owner'),
        value?: string(name='Value', description='The tag value.', example='John'),
      }
    ](name='Tags', description='The list of tags.'),
    updatedTime?: long(name='UpdatedTime', description='The timestamp generated when the alert rule was updated. Unit: seconds.', example='1641438611000'),
    userId?: string(name='UserId', description='The ID of the Alibaba Cloud account.', example='1131971649******'),
  }(name='AlertRule', description='The details of the alert rule.'),
  requestId?: string(name='RequestId', description='The request ID.', example='337B8F7E-0A64-5768-9225-E9B3CF******'),
}

model CreateOrUpdateAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrUpdateAlertRuleResponseBody(name='body'),
}

async function createOrUpdateAlertRule(request: CreateOrUpdateAlertRuleRequest): CreateOrUpdateAlertRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrUpdateAlertRule', 'POST', '/', 'json', true, 'form', request);
}

model CreateOrUpdateContactRequest {
  contactId?: long(name='ContactId', description='The ID of the alert contact.

*   If you do not specify this parameter, a new alert contact is created.
*   If you specify this parameter, the specified alert contact is modified.', example='123', position='Body'),
  contactName: string(name='ContactName', description='The name of the alert contact.', example='JohnDoe', position='Body'),
  corpUserId?: string(name='CorpUserId', description='The ID of the alert contact that is shown to the enterprise when the contact is mentioned with the at sign (@) by a third-party instant messaging (IM) tool.', example='A123221', position='Body'),
  dingRobotUrl?: string(name='DingRobotUrl', description='The webhook URL of the DingTalk chatbot.', example='https://oapi.dingtalk.com/robot/send?access_token=69d4e0******', position='Query'),
  email?: string(name='Email', description='The email address of the alert contact.

> You must specify at least one of the **Phone** and **Email** parameters. Each mobile number or email address can be used for only one alert contact.', example='someone@example.com', position='Body'),
  isEmailVerify?: boolean(name='IsEmailVerify', description='Specifies whether the email address is verified.', example='true', position='Body'),
  phone?: string(name='Phone', description='The mobile number of the alert contact.

> You must specify at least one of the **Phone** and **Email** parameters. Each mobile number or email address can be used for only one alert contact.', example='1381111****', position='Body'),
  reissueSendNotice?: long(name='ReissueSendNotice', description='The operation that you want to perform if phone calls fail to be answered. Valid values:

*   0: No operation is performed.
*   1: A phone call is made again.
*   2: A text message is sent.
*   3 (default value): The global default value is used.', example='3', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxyexli2****', position='Query'),
}

model CreateOrUpdateContactResponseBody = {
  alertContact?: {
    contactId?: float(name='ContactId', description='The ID of the alert contact.', example='123'),
    contactName?: string(name='ContactName', description='The name of the alert contact.', example='JohnDoe'),
    dingRobotUrl?: string(name='DingRobotUrl', description='The webhook URL of the DingTalk chatbot.', example='https://test1.com'),
    email?: string(name='Email', description='The email address of the alert contact.', example='someone@example.com'),
    isVerify?: boolean(name='IsVerify', description='Indicates whether the mobile number was verified. Valid values:

*   `false` (default value): No
*   `true`: Yes

You can call the **SendTTSVerifyLink** operation to verify the mobile number of an alert contact. Only verified mobile numbers can be specified in a notification policy to receive phone calls.', example='false'),
    phone?: string(name='Phone', description='The mobile number of the alert contact.', example='1381111****'),
    reissueSendNotice?: long(name='ReissueSendNotice', description='The operation that you want to perform if phone calls fail to be answered. Valid values: 0: No operation is performed. 1: A phone call is made again. 2: A text message is sent. 3 (default value): The global default value is used.', example='3'),
    isEmailVerify?: boolean(name='isEmailVerify', description='Indicates whether the email address was verified.', example='true'),
  }(name='AlertContact', description='The object of the alert contact.'),
  requestId?: string(name='RequestId', description='The request ID.', example='E9C9DA3D-10FE-472E-9EEF-2D0A3E41****'),
}

model CreateOrUpdateContactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrUpdateContactResponseBody(name='body'),
}

async function createOrUpdateContact(request: CreateOrUpdateContactRequest): CreateOrUpdateContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrUpdateContact', 'POST', '/', 'json', true, 'form', request);
}

model CreateOrUpdateContactGroupRequest {
  contactGroupId?: long(name='ContactGroupId', description='The ID of the alert contact group.

*   If you do not specify this parameter, an alert contact group is created.
*   If you specify this parameter, the specified alert contact group is modified.', example='123', position='Body'),
  contactGroupName: string(name='ContactGroupName', description='The name of the alert contact group.', example='TestGroup', position='Body'),
  contactIds?: string(name='ContactIds', description='The ID of the contact that you want to add to the contact group. Separate multiple IDs with commas (,).', example='[1,2,3]', position='Body'),
}

model CreateOrUpdateContactGroupResponseBody = {
  alertContactGroup?: {
    contactGroupId?: float(name='ContactGroupId', description='The ID of the alert contact group.', example='123'),
    contactGroupName?: string(name='ContactGroupName', description='The name of the alert contact group.', example='TestGroup'),
    contactIds?: string(name='ContactIds', description='The IDs of the contacts that are included in the alert contact group.', example='[1,2,3]'),
  }(name='AlertContactGroup', description='The information about the alert contact group.'),
  requestId?: string(name='RequestId', description='The request ID.', example='9319A57D-2D9E-472A-B69B-CF3CD16D****'),
}

model CreateOrUpdateContactGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrUpdateContactGroupResponseBody(name='body'),
}

async function createOrUpdateContactGroup(request: CreateOrUpdateContactGroupRequest): CreateOrUpdateContactGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrUpdateContactGroup', 'POST', '/', 'json', true, 'form', request);
}

model CreateOrUpdateEventBridgeIntegrationRequest {
  accessKey?: string(name='AccessKey', description='The AccessKey ID that is used to connect to EventBridge.', example='abc******************', position='Body'),
  accessSecret?: string(name='AccessSecret', description='The AccessKey secret that is used to connect to EventBridge.', example='abc******************', position='Body'),
  description?: string(name='Description', description='The description of the EventBridge integration.', example='test', position='Body'),
  endpoint?: string(name='Endpoint', description='The public endpoint of EventBridge.', example='http://xxxxx', position='Body'),
  eventBusName?: string(name='EventBusName', description='The name of the event bus.', example='EventBus_Test', position='Body'),
  eventBusRegionId?: string(name='EventBusRegionId', description='The region ID of the event bus.', example='cn-hangzhou', position='Body'),
  id?: long(name='Id', description='The ID of the EventBridge integration.

*   If you do not specify this parameter, an EventBridge integration is created.
*   If you specify this parameter, the specified EventBridge integration is modified.', example='123', position='Body'),
  name: string(name='Name', description='The name of the EventBridge integration.', example='EventBridge_Test', position='Body'),
  source?: string(name='Source', description='The event source.', example='arms', position='Body'),
}

model CreateOrUpdateEventBridgeIntegrationResponseBody = {
  eventBridgeIntegration?: {
    accessKey?: string(name='AccessKey', description='The AccessKey ID that is used to connect to EventBridge.', example='abc******************'),
    accessSecret?: string(name='AccessSecret', description='The AccessKey secret that is used to connect to EventBridge.', example='abc******************'),
    description?: string(name='Description', description='The description of the EventBridge integration.', example='test'),
    endpoint?: string(name='Endpoint', description='The public endpoint of EventBridge.', example='http://xxxxx'),
    eventBusName?: string(name='EventBusName', description='The name of the event bus.', example='EventBus_Test'),
    eventBusRegionId?: string(name='EventBusRegionId', description='The region ID of the event bus.', example='cn-hangzhou'),
    id?: long(name='Id', description='The ID of the EventBridge integration.', example='123'),
    name?: string(name='Name', description='The name of the EventBridge integration.', example='EventBridge_Test'),
    source?: string(name='Source', description='The event source.', example='arms'),
  }(name='EventBridgeIntegration', description='The information about the EventBridge integration.'),
  requestId?: string(name='RequestId', description='The request ID.', example='2B289756-E791-5842-BCBD-AD414C******'),
}

model CreateOrUpdateEventBridgeIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrUpdateEventBridgeIntegrationResponseBody(name='body'),
}

async function createOrUpdateEventBridgeIntegration(request: CreateOrUpdateEventBridgeIntegrationRequest): CreateOrUpdateEventBridgeIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrUpdateEventBridgeIntegration', 'POST', '/', 'json', true, 'form', request);
}

model CreateOrUpdateIMRobotRequest {
  cardTemplate?: string(name='CardTemplate', description='The configurations of the alert card template. For more information about the parameters in the template, see the following section.', example='{     "button": [         "claim",         "close",         "follow",         "send_itsm",         "block",         "unResolvedIncident"     ],     "field": [         {             "fieldName": "alarmName",             "visible": true         },         {             "fieldName": "notificationPolicy",             "visible": true         },         {             "fieldName": "alarmContent",             "visible": true         },         {             "fieldName": "alarmTime",             "visible": true         },         {             "fieldName": "seriesChart",             "visible": true         },         {             "fieldName": "includeEvent",             "visible": true         },         {             "fieldName": "assigned",             "visible": true         },         {             "fieldName": "similarAlarm",             "visible": true         },         {             "fieldName": "operator",             "visible": true         }     ] }', position='Body'),
  dailyNoc?: boolean(name='DailyNoc', description='Specifies whether to send daily statistics. Valid values:

*   `false` (default): Daily statistics are not sent.
*   `true`: Daily statistics are sent. If you set the value to `true`, the **DailyNocTime** parameter is required.', example='true', position='Body'),
  dailyNocTime?: string(name='DailyNocTime', description='The points in time at which the daily statistics are sent. Separate multiple points in time with commas (,). The points in time are in the HH:SS format. The information that ARMS sends at the specified points in time includes the total number of alerts generated on the current day, the number of cleared alerts, and the number of alerts to be cleared.', example='09:30,17:00', position='Body'),
  dingSignKey?: string(name='DingSignKey', description='The signature key of DingTalk. If you specify a signature key, DingTalk authentication is performed by using the signature key. If you do not specify a signature key, a whitelist is used for authentication by default. The keyword of the whitelist is **Alert**.', example='******', position='Body'),
  enableOutgoing?: boolean(name='EnableOutgoing', description='Specifies whether to enable the Outgoing feature.', example='true', position='Body'),
  robotAddress: string(name='RobotAddress', description='The webhook URL of the IM chatbot.', example='https://oapi.dingtalk.com/robot/send?access_token=e1a049121******', position='Body'),
  robotId?: long(name='RobotId', description='The ID of the IM chatbot.
> If you do not specify the parameter, a new IM chatbot is created.', example='123', position='Body'),
  robotName: string(name='RobotName', description='The name of the IM chatbot.', example='Chatbot name', position='Body'),
  token?: string(name='Token', description='The token required to enable the Outgoing feature.', example='1656558719183be1245ab44********', position='Body'),
  type: string(name='Type', description='The type of the IM chatbot. Valid values:

*   `dingding`: DingTalk chatbot
*   `wechat`: WeCom chatbot
*   `feishu`: Lark chatbot', example='dingding', position='Body'),
}

model CreateOrUpdateIMRobotResponseBody = {
  alertRobot?: {
    cardTemplate?: string(name='CardTemplate', description='The configurations of the alert card template.', example='{     "button": [         "claim",         "close",         "follow",         "send_itsm",         "block",         "unResolvedIncident"     ],     "field": [         {             "fieldName": "alarmName",             "visible": true         },         {             "fieldName": "notificationPolicy",             "visible": true         },         {             "fieldName": "alarmContent",             "visible": true         },         {             "fieldName": "alarmTime",             "visible": true         },         {             "fieldName": "seriesChart",             "visible": true         },         {             "fieldName": "includeEvent",             "visible": true         },         {             "fieldName": "assigned",             "visible": true         },         {             "fieldName": "similarAlarm",             "visible": true         },         {             "fieldName": "operator",             "visible": true         }     ] }'),
    dailyNoc?: boolean(name='DailyNoc', description='Indicates whether daily statistics are sent. Valid values:

*   `false` (default): Daily statistics are not sent.
*   `true`: Daily statistics are sent.', example='true'),
    dailyNocTime?: string(name='DailyNocTime', description='The point in time at which the daily statistics are sent. The information that ARMS sends at the specified points in time includes the total number of alerts generated on the current day, the number of cleared alerts, and the number of alerts to be cleared.', example='09:30,17:00'),
    enableOutgoing?: boolean(name='EnableOutgoing', description='Indicates whether the Outgoing feature is enabled.', example='true'),
    robotAddress?: string(name='RobotAddress', description='The webhook URL of the IM chatbot.', example='https://oapi.dingtalk.com/robot/send?access_token=e1a049121******'),
    robotId?: float(name='RobotId', description='The ID of the IM chatbot.', example='123'),
    robotName?: string(name='RobotName', description='The name of the IM chatbot.', example='Chatbot name'),
    token?: string(name='Token', description='The token required to enable the Outgoing feature.', example='1656558719183be1245ab44********'),
    type?: string(name='Type', description='The type of the IM chatbot. Valid values:

*   `dingding`: DingTalk chatbot
*   `wechat`: WeCom chatbot', example='dingding'),
  }(name='AlertRobot', description='The information about the IM chatbot.'),
  requestId?: string(name='RequestId', description='The request ID.', example='16AF921B-8187-489F-9913-43C808B4****'),
}

model CreateOrUpdateIMRobotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrUpdateIMRobotResponseBody(name='body'),
}

async function createOrUpdateIMRobot(request: CreateOrUpdateIMRobotRequest): CreateOrUpdateIMRobotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrUpdateIMRobot', 'POST', '/', 'json', true, 'form', request);
}

model CreateOrUpdateNotificationPolicyRequest {
  directedMode?: boolean(name='DirectedMode', description='Specifies whether to enable simple mode.', example='false', position='Body'),
  escalationPolicyId?: long(name='EscalationPolicyId', description='The ID of the escalation policy.', example='123', position='Body'),
  groupRule?: string(name='GroupRule', description='An array of alert event group objects.

*   If you do not specify the groupingFields field, all alerts will be sent to contacts based on `alertname`.
*   If you specify the groupingFields field, alerts with the same field will be sent to contacts in one notification.

Sample statement:

    { 
    "groupWait":5,    // The waiting time for grouping. 
    "groupInterval":30,     // The time interval of grouping. 
    "groupingFields":["alertname"]       // The field that is used to group alert events. 
    }', example='{ 	"groupWait":5, 	"groupInterval":30, 	"groupingFields":["alertname"] }', position='Body'),
  id?: long(name='Id', description='The ID of the notification policy.

*   If you do not specify this parameter, a new notification policy is created.
*   If you specify this parameter, the specified notification policy is modified.', example='1234', position='Body'),
  integrationId?: long(name='IntegrationId', description='The integration ID of the ticket system to which alerts are pushed.', example='34', position='Body'),
  matchingRules?: string(name='MatchingRules', description='The matching rules. Format:

    [
     {
     "matchingConditions": [
     { 
     "value": "test",    // The value of the matching condition. 
     "key": "alertname",     // The key of the matching condition. 
     "operator": "eq"   // The logical operator of the matching condition, including eq (equal to), neq (not equal to), in (contains), nin (does not contain), re (regular expression match), and nre (regular expression mismatch).   
     }
     ]
     } 
     ]', example='[ 		 { 		 "matchingConditions": [          { 		 "value": "test", 		 "key": "alertname", 		 "operator": "eq"         }       ]     }   ]', position='Body'),
  name: string(name='Name', description='The name of the notification policy.', example='notificationpolicy_test', position='Body'),
  notifyRule: string(name='NotifyRule', description='An array of notification rule objects. Format:

    { 
     "notifyStartTime":"00:00",      // The start time of the notification window. 
     "notifyEndTime":"23:59",       // The end time of the notification window. 
     "notifyChannels":["dingTalk", "email", "sms", "tts", "webhook"],       // The notification methods. Valid values: dingTalk, email, sms, tts, and webhook. 
     "notifyObjects":[{       // An array of notification objects. 
     "notifyObjectType":"CONTACT",       // The type of the notification object. Valid values: CONTACT (contact), CONTACT_GROUP (contact group), ARMS_CONTACT (ARMS contact), ARMS_CONTACT_GROUP (ARMS contact group), DING_ROBOT_GROUP (DingTalk, Lark, WeCom, or IM robot), and CONTACT_SCHEDULE (user on duty defined by a schedule). 
     "notifyObjectId":123,       // The ID of the notification object. 
     "notifyObjectName":"test"       // The name of the notification object. 
     }]', example='{     "notifyStartTime":"00:00",     "notifyEndTime":"23:59",     "notifyChannels":[         "dingTalk",         "email",         "sms",         "tts",         "webhook"     ],     "notifyObjects":[         {             "notifyObjectType":"CONTACT",             "notifyObjectId":123,             "notifyObjectName":"test"         }     ] }', position='Body'),
  notifyTemplate?: string(name='NotifyTemplate', description='The notification template. The default notification template is provided below the table.', example='"robotContent":"{{if .commonLabels.clustername }} > Cluster name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }} > Application name: {{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }}{{ for .alerts }} > {{.annotations.message}} {{if .generatorURL }} \\[Link]\\({{.generatorURL}}) {{ end }} {{if eq "true" .labels.\\_aliyun_arms_is_denoise_filtered }} (Suspected noise) {{end}} {{end}}"', position='Body'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Body'),
  repeat?: boolean(name='Repeat', description='Specifies whether to resend a notification for a long-lasting unresolved alert. Default value: true. Valid values:

*   `true`: If you set this parameter to `true`, you must set **RepeatInterval**.
*   `false`: If you set this parameter to `false`, you must set **EscalationPolicyId**.', example='true', position='Body'),
  repeatInterval?: long(name='RepeatInterval', description='The time interval at which a notification is resent for a long-lasting unresolved alert. Unit: seconds.', example='600', position='Body'),
  sendRecoverMessage?: boolean(name='SendRecoverMessage', description='Specifies whether the status of an alert automatically changes to Resolved when all events related to the alert change to the Restored state. ARMS notifies contacts when the alert status changes to Resolved.

*   `true`: The system sends a notification.
*   `false`: The system does not send a notification.', example='true', position='Body'),
  state?: string(name='State', description='Specifies whether to enable the notification policy. Valid values: enable and disable.', example='enable', position='Body'),
}

model CreateOrUpdateNotificationPolicyResponseBody = {
  notificationPolicy?: {
    directedMode?: boolean(name='DirectedMode', description='Specifies whether to enable simple mode.', example='false'),
    escalationPolicyId?: long(name='EscalationPolicyId', description='The ID of the escalation policy.', example='123'),
    groupRule?: {
      groupInterval?: long(name='GroupInterval', description='The time interval of grouping. Unit: seconds. Default value: 30.', example='30'),
      groupWait?: long(name='GroupWait', description='The waiting time for grouping. Unit: seconds. Default value: 5.', example='5'),
      groupingFields?: [ string ](name='GroupingFields', description='An array of alert event group objects.

*   If you do not specify the groupingFields field, all alerts will be sent to contacts based on `alertname`.
*   If you specify the groupingFields field, alerts with the same field will be sent to contacts in one notification.'),
    }(name='GroupRule', description='An array of alert event group objects.'),
    id?: long(name='Id', description='The ID of the notification policy.', example='1234'),
    integrationId?: long(name='IntegrationId', description='The integration ID of the ticket system to which alerts are pushed.', example='34'),
    matchingRules?: [ 
      {
        matchingConditions?: [ 
          {
            key?: string(name='Key', description='The key of the matching condition.', example='altertname'),
            operator?: string(name='Operator', description='The logical operator of the matching condition. Valid values:

*   `eq`: equal to
*   `neq`: not equal to
*   `in`: contains
*   `nin`: does not contain
*   `re`: regular expression match
*   `nre`: regular expression mismatch', example='eq'),
            value?: string(name='Value', description='The value of the matching condition.', example='test'),
          }
        ](name='MatchingConditions', description='The matching conditions.'),
      }
    ](name='MatchingRules', description='The matching rules.'),
    name?: string(name='Name', description='The name of the notification policy.', example='notificationpolicy_test'),
    notifyRule?: {
      notifyChannels?: [ string ](name='NotifyChannels', description='The notification method.'),
      notifyEndTime?: string(name='NotifyEndTime', description='The end time of the notification window.', example='23:59'),
      notifyObjects?: [ 
        {
          notifyChannels?: [ string ](name='NotifyChannels', description='The notification methods specified for a contact.'),
          notifyObjectId?: long(name='NotifyObjectId', description='The ID of the notification object.', example='123'),
          notifyObjectName?: string(name='NotifyObjectName', description='The name of the notification object.', example='test'),
          notifyObjectType?: string(name='NotifyObjectType', description='The type of the notification object. Valid values:

*   CONTACT: contact
*   CONTACT_GROUP: contact group
*   ARMS_CONTACT: ARMS contact
*   ARMS_CONTACT_GROUP: ARMS contact group
*   DING_ROBOT_GROUP: DingTalk, Lark, WeCom, or IM robot
*   CONTACT_SCHEDULE: user on duty defined by a schedule', example='CONTACT'),
        }
      ](name='NotifyObjects', description='An array of notification objects.'),
      notifyStartTime?: string(name='NotifyStartTime', description='The start time of the notification window.', example='00:00'),
    }(name='NotifyRule', description='An array of notification rule objects.'),
    notifyTemplate?: {
      emailContent?: string(name='EmailContent', description='The content of the alert notification sent through email.', example='Alert name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }} Cluster name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }} Application name: {{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }} Notification policy: {{ .dispatchRuleName }} Alert time: {{ .startTime }} Alert content: {{ for .alerts }} {{.annotations.message}} {{if .generatorURL }} \\<a href="{{.generatorURL}}" >Link\\</a> {{end}} {{end}}'),
      emailRecoverContent?: string(name='EmailRecoverContent', description='The content of the alert resolution notification sent through email.', example='Alert name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }} Cluster name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }} Application name: {{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }} Notification policy: {{ .dispatchRuleName }} Alert resolution time: {{ .endTime }} Alert content: {{ for .alerts }} {{.annotations.message}} {{if .generatorURL }} \\<a href="{{.generatorURL}}" >Link\\</a> {{end}} {{end}}'),
      emailRecoverTitle?: string(name='EmailRecoverTitle', description='The title of the alert resolution notification sent through email.', example='{{ .commonLabels.alertname }}'),
      emailTitle?: string(name='EmailTitle', description='The title of the alert notification sent through email.', example='{{ .commonLabels.alertname }}'),
      robotContent?: string(name='RobotContent', description='The content of the alert notification sent by the IM robot.', example='{{if .commonLabels.clustername }} > Cluster name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }} > Application name: {{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }}{{ for .alerts }}> {{.annotations.message}} {{if .generatorURL }} \\[Link]\\({{.generatorURL}}) {{ end }} {{if eq "true" .labels.\\_aliyun_arms_is_denoise_filtered }} (Suspected noise) {{end}} {{end}}'),
      smsContent?: string(name='SmsContent', description='The content of the alert notification sent through text message.', example='\\<SmsContent>Notification on the occurrence of a {{ .level }} alert. Alert name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }} Cluster name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }} Application name: {{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }} Notification policy: {{ .dispatchRuleName }} Alert time: {{ .startTime }} Alert content: {{ for .alerts }} {{.annotations.message}} {{ end }}\\</SmsContent>'),
      smsRecoverContent?: string(name='SmsRecoverContent', description='The content of the alert resolution notification sent through text message.', example='\\<SmsRecoverContent>Alert resolution notification. Alert name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }} Cluster name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }} Application name: {{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }} Notification policy: {{ .dispatchRuleName }} Alert resolution time: {{ .endTime }} Alert content: {{ for .alerts }} {{.annotations.message}} {{ end }}\\</SmsRecoverContent>'),
      ttsContent?: string(name='TtsContent', description='The content of the alert notification by phone.', example='\\<TtsContent>Alert name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }} Cluster name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }} Application name: {{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }} Notification policy: {{ .dispatchRuleName }} Alert time: {{ .startTime }} Alert content: {{ for .alerts }} {{.annotations.message}} {{ end }}\\</TtsContent>'),
      ttsRecoverContent?: string(name='TtsRecoverContent', description='The content of the alert resolution notification by phone.', example='\\<TtsRecoverContent>Alert name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }} Cluster name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }} Application name: {{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }} Notification policy: {{ .dispatchRuleName }} Alert resolution time: {{ .endTime }} Alert content: {{ for .alerts }} {{.annotations.message}} {{ end }}\\</TtsRecoverContent>'),
    }(name='NotifyTemplate', description='The notification template.'),
    repeat?: boolean(name='Repeat', description='Indicates whether a notification is resent for a long-lasting unresolved alert. Default value: true. Valid values:

*   `true`: The system resends a notification for a long-lasting unresolved alert at a specified time interval.
*   `false`: The system sends a notification for a long-lasting unresolved alert based on an escalation policy.', example='true'),
    repeatInterval?: long(name='RepeatInterval', description='The time interval at which a notification is resent for a long-lasting unresolved alert. Unit: seconds.', example='600'),
    sendRecoverMessage?: boolean(name='SendRecoverMessage', description='Indicates whether the status of an alert automatically changes to Resolved when all events related to the alert change to the Restored state. ARMS notifies contacts when the alert status changes to Resolved.

*   `true`: The system sends a notification.
*   `false`: The system does not send a notification.', example='true'),
    state?: string(name='State', description='Indicates whether the notification policy is enabled. Valid values: enable and disable.', example='enable'),
  }(name='NotificationPolicy', description='An array of notification policy objects.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
}

model CreateOrUpdateNotificationPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrUpdateNotificationPolicyResponseBody(name='body'),
}

async function createOrUpdateNotificationPolicy(request: CreateOrUpdateNotificationPolicyRequest): CreateOrUpdateNotificationPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrUpdateNotificationPolicy', 'POST', '/', 'json', true, 'form', request);
}

model CreateOrUpdateSilencePolicyRequest {
  effectiveTimeType?: string(name='EffectiveTimeType', description='The effective duration of the silence policy. Valid values: PERMANENT, CUSTOM_TIME, and CYCLE_EFFECT.', example='PERMANENT', position='Query'),
  id?: long(name='Id', description='The ID of the silence policy.

*   If you do not configure this parameter, a new silence policy is created.
*   If you configure this parameter, the specified silence policy is modified.', example='1234', position='Body'),
  matchingRules?: string(name='MatchingRules', description='The matching rules. The following code shows the format of matching rules:

    [
         {
    	 "matchingConditions": [
    	 {
    	 "value": "test", // The value of the matching condition. 
    	 "key": "altertname", // The key of the matching condition. 
    	 "operator": "eq" // The logical operator of the matching condition, including eq (equal to), neq (not equal to), in (contains), nin (does not contain), re (regular expression match), and nre (regular expression mismatch).   
    	 }
    	 ]
         }
    	 ]', example='[ 	 { 	 "matchingConditions": [ 	 { 	 "value": "test", 	 "key": "altertname", 	 "operator": "eq" 	 } 	 ]      } 	 ]', position='Body'),
  name: string(name='Name', description='The name of the silence policy.', example='silencepolicy_test', position='Body'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Body'),
  state?: string(name='State', description='Specifies whether to enable the silence policy. Valid values: enable and disable.', example='enable', position='Body'),
  timePeriod?: string(name='TimePeriod', description='The recurring period. This parameter is required when EffectiveTimeType is set to CYCLE_EFFECT. DAY: The silence policy is effective by day. WEEK: The silence policy is effective by week.', example='DAY', position='Query'),
  timeSlots?: string(name='TimeSlots', description='The time period during which the silence policy is effective. If you set EffectiveTimeType to CUSTOM_TIME, specify a custom time period in the following format: \\[{"startTime":"2024-08-04 22:13","endTime":"2024-08-04 22:21"}] If you set EffectiveTimeType to CYCLE_EFFECT and TimePeriod to DAY, specify a custom time period in the following format: \\[{"startTime":"22:13","endTime":"22:21"}]. The start time cannot be later than the end time. If you set EffectiveTimeType to CYCLE_EFFECT and TimePeriod to WEEK, specify a custom time period in the following format: \\[{"startWeek":"1", "endWeek":"2" "startTime":"22:13","endTime":"22:21"}]. Valid values of startWeek and endWeek: 1 to 7. The start time cannot be later than the end time.', example='[{"startTime":"2024-08-04 22:13","endTime":"2024-08-04 22:21"}]', position='Query'),
}

model CreateOrUpdateSilencePolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
  silencePolicy?: {
    effectiveTimeType?: string(name='EffectiveTimeType'),
    id?: long(name='Id', description='The ID of the silence policy.', example='1234'),
    matchingRules?: [ 
      {
        matchingConditions?: [ 
          {
            key?: string(name='Key', description='The key of the matching condition.', example='altertname'),
            operator?: string(name='Operator', description='The logical operator of the matching condition. Valid values:

*   `eq`: equal to
*   `neq`: not equal to
*   `in`: contains
*   `nin`: does not contain
*   `re`: regular expression match
*   `nre`: regular expression mismatch', example='eq'),
            value?: string(name='Value', description='The value of the matching condition.', example='test'),
          }
        ](name='MatchingConditions', description='A list of matching conditions.'),
      }
    ](name='MatchingRules', description='A list of matching rules.'),
    name?: string(name='Name', description='The name of the silence policy.', example='silencepolicy_test'),
    state?: string(name='State', description='Specifies whether to enable the silence policy. Valid values: enable and disable.', example='enable'),
    timePeriod?: string(name='TimePeriod'),
    timeSlots?: string(name='TimeSlots'),
  }(name='SilencePolicy', description='A list of silence policies.'),
}

model CreateOrUpdateSilencePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrUpdateSilencePolicyResponseBody(name='body'),
}

async function createOrUpdateSilencePolicy(request: CreateOrUpdateSilencePolicyRequest): CreateOrUpdateSilencePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrUpdateSilencePolicy', 'POST', '/', 'json', true, 'form', request);
}

model CreateOrUpdateWebhookContactRequest {
  bizHeaders?: string(name='BizHeaders', description='The HTTP request headers.', example='[{"Content-Type":"application/json;charset=utf-8"}]', position='Body'),
  bizParams?: string(name='BizParams', description='The parameters in the HTTP request.', example='[{"content":"mike"}]', position='Body'),
  body?: string(name='Body', description='The notification template that is sent when an alert is triggered. This parameter is required if the **Method** parameter is set to **Post**. You can use the `$content` placeholder to specify the notification content. The content cannot exceed 500 characters in length. For more information, see [Variable description of a notification template](~~251834~~).\\\\', example='{ "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Alert time":"{{ .startTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }', position='Body'),
  method: string(name='Method', description='The HTTP request method.

*   Post
*   Get', example='Post', position='Body'),
  recoverBody?: string(name='RecoverBody', description='The notification template that is sent when an alert is resolved. This parameter is required if the **Method** parameter is set to **Post**. You can use the `$content` placeholder to specify the notification content. The content cannot exceed 500 characters in length. For more information, see [Variable description of a notification template](~~251834~~).', example='{ "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Recovery time":"{{ .endTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }', position='Body'),
  url: string(name='Url', description='The URL of the HTTP request **method**.', example='https://oapi.dingtalk.com/robot/send?access_token=e1a049121******', position='Body'),
  webhookId?: long(name='WebhookId', description='The ID of the webhook alert contact.

*   If you do not specify this parameter, a new webhook alert contact is created.
* If you specify this parameter, the specified webhook alert contact is modified.', example='123', position='Body'),
  webhookName: string(name='WebhookName', description='The name of the webhook alert contact.', example='Webhook alert', position='Body'),
}

model CreateOrUpdateWebhookContactResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='16AF921B-8187-489F-9913-43C808B4****'),
  webhookContact?: {
    webhook?: {
      bizHeaders?: string(name='BizHeaders', description='The HTTP request headers.', example='[{"Content-Type":"application/json;charset=utf-8"}]'),
      bizParams?: string(name='BizParams', description='The parameters in the HTTP request.', example='[{"content":"mike"}]'),
      body?: string(name='Body', description='The alert notification template.', example='{ "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Alert time":"{{ .startTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }'),
      method?: string(name='Method', description='The HTTP request method.

*   Post
*   Get', example='Post'),
      recoverBody?: string(name='RecoverBody', description='The notification template for clearing alerts.', example='{ "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Recovery time":"{{ .endTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }'),
      url?: string(name='Url', description='The URL of the request method.', example='https://oapi.dingtalk.com/robot/send?access_token=e1a049121******'),
    }(name='Webhook', description='The information about the webhook alert contact.'),
    webhookId?: float(name='WebhookId', description='The ID of the webhook alert contact.', example='123'),
    webhookName?: string(name='WebhookName', description='The name of the webhook alert contact.', example='Webhook alert'),
  }(name='WebhookContact', description='The returned webhook alert contact.'),
}

model CreateOrUpdateWebhookContactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrUpdateWebhookContactResponseBody(name='body'),
}

async function createOrUpdateWebhookContact(request: CreateOrUpdateWebhookContactRequest): CreateOrUpdateWebhookContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrUpdateWebhookContact', 'POST', '/', 'json', true, 'form', request);
}

model CreatePrometheusAlertRuleRequest {
  alertName: string(name='AlertName', description='The name of the alert rule.', example='Prometheus_Alert', position='Query'),
  annotations?: string(name='Annotations', description='The annotations that are described in a JSON string. You must specify the name and value of each annotation.', example='[{"Value": "xxx","Name": "description"}]', position='Query'),
  clusterId: string(name='ClusterId', description='The ID of the cluster.', example='c0bad479465464e1d8c1e641b0afb****', position='Query'),
  dispatchRuleId?: long(name='DispatchRuleId', description='The ID of the notification policy. This parameter is required if the NotifyType parameter is set to `DISPATCH_RULE`.', example='10282', position='Query'),
  duration: string(name='Duration', description='The duration. The value ranges from 1 to 1440 minutes.', example='10m', position='Query'),
  expression: string(name='Expression', description='The expression of the alert rule. The expression must follow the PromQL syntax.', example='100 * (sum(rate(container_cpu_usage_seconds_total[1m])) by (pod_name) / sum(label_replace(kube_pod_container_resource_limits_cpu_cores, \\"pod_name\\", \\"$1\\", \\"pod\\", \\"(.*)\\")) by (pod_name))>75', position='Query'),
  labels?: string(name='Labels', description='The tags that are described in a JSON string. You must specify the name and value of each tag.', example='[{"Value": "critical","Name": "severity"}]', position='Query'),
  message: string(name='Message', description='The content of the alert notification. Tags can be referenced in the {{$labels.xxx}} format.', example='The CPU utilization of ${{$labels.pod_name}} has exceeded 80%. Current value: {{$value}}%', position='Query'),
  notifyType?: string(name='NotifyType', description='The method that is used to send alert notifications. Valid values:

- `ALERT_MANAGER`: Alert notifications are sent by Operation Center. This is the default value.
- `DISPATCH_RULE`: Alert notifications are sent based on the specified notification policy.', example='ALERT_MANAGER', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='type'),
      value?: string(name='Value', description='The tag value.', example='value1'),
    }
  ](name='Tags', description='The tags.', position='Query'),
  type?: string(name='Type', description='The type of the alert rule. Valid values:

- 99: custom alert
- 101: Prometheus Service alert', example='101', position='Query'),
}

model CreatePrometheusAlertRuleResponseBody = {
  code?: long(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='success'),
  prometheusAlertRule?: {
    alertId?: long(name='AlertId', description='The ID of the alert rule.', example='3888704'),
    alertName?: string(name='AlertName', description='The name of the alert rule.', example='Prometheus_Alert'),
    annotations?: [ 
      {
        name?: string(name='Name', description='The name of the annotation.', example='message'),
        value?: string(name='Value', description='The value of the annotation.', example='The CPU utilization of ${{$labels.pod_name}} has exceeded 80%. Current value: {{$value}}%'),
      }
    ](name='Annotations', description='The annotations of the alert rule.'),
    clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='c0bad479465464e1d8c1e641b0afb****'),
    dispatchRuleId?: long(name='DispatchRuleId', description='The ID of the notification policy.', example='10282'),
    duration?: string(name='Duration', description='The duration. The value ranges from 1 to 1440 minutes.', example='10m'),
    expression?: string(name='Expression', description='The expression of the alert rule.', example='100 * (sum(rate(container_cpu_usage_seconds_total[1m])) by (pod_name) / sum(label_replace(kube_pod_container_resource_limits_cpu_cores, \\"pod_name\\", \\"$1\\", \\"pod\\", \\"(.*)\\")) by (pod_name))>75'),
    labels?: [ 
      {
        name?: string(name='Name', description='The name of the tag.', example='severity'),
        value?: string(name='Value', description='The value of the tag.', example='critical'),
      }
    ](name='Labels', description='The tags of the alert rule.'),
    message?: string(name='Message', description='The content of the alert notification. Tags can be referenced in the {{$labels.xxx}} format.', example='The CPU utilization of ${{$labels.pod_name}} has exceeded 80%. Current value: {{$value}}%'),
    notifyType?: string(name='NotifyType', description='The method that is used to send alert notifications. Valid values:

- ALERT_MANAGER: Alert notifications are sent by Operation Center.
- DISPATCH_RULE: Alert notifications are sent based on the specified notification policy.', example='ALERT_MANAGER'),
    status?: int32(name='Status', description='Indicates whether the alert rule is enabled. Valid values:

- `1`: The alert rule is enabled.
- `0`: The alert rule is disabled.', example='1'),
    type?: string(name='Type', description='The type of the alert rule.', example='Kubernetes component alert'),
  }(name='PrometheusAlertRule', description='The returned struct.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9FEA6D00-317F-45E3-9004-7FB8B0B7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreatePrometheusAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePrometheusAlertRuleResponseBody(name='body'),
}

async function createPrometheusAlertRule(request: CreatePrometheusAlertRuleRequest): CreatePrometheusAlertRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePrometheusAlertRule', 'POST', '/', 'json', false, 'json', request);
}

model CreatePrometheusInstanceRequest {
  allSubClustersSuccess?: boolean(name='AllSubClustersSuccess', description='Does it require all child instances to be verified successfully before creating a GlobalView instance. The default is false, which means partial success is possible.', example='true', position='Query'),
  archiveDuration?: int32(name='ArchiveDuration', description='The number of days for which data is automatically archived after the storage expires. Valid values: 60, 90, 180, and 365. 0 indicates that the data is not archived.', example='90', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the ACK cluster. This parameter is required if you set the ClusterType parameter to aliyun-cs.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  clusterName?: string(name='ClusterName', description='The name of the created cluster. This parameter is required if you set the ClusterType parameter to remote-write or ecs.', example='clusterNameOfTest', position='Query'),
  clusterType: string(name='ClusterType', description='The type of the Prometheus instance. Valid values:

*   remote-write: Prometheus instance for Remote Write
*   ecs (unavailable): Prometheus instance for ECS
*   global-view: Prometheus instance for GlobalView
*   aliyun-cs: Prometheus instance for Container Service
*   cloud-product (unavailable): Prometheus instance for Alibaba Cloud services
*   cloud-monitor (unavailable): Prometheus instance for Hybrid Cloud Monitoring
*   flink (unavailable): Prometheus instance for Flink', example='remote-write', position='Query'),
  duration?: int32(name='Duration', description='The data storage duration. Unit: days.', example='90', position='Query'),
  grafanaInstanceId?: string(name='GrafanaInstanceId', description='The ID of the Grafana dedicated instance. This parameter is available if you set the ClusterType parameter to ecs.', example='grafana-bp1*****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. If you use a Prometheus instance to monitor an Alibaba Cloud service in China, this parameter must be set to cn-shanghai.', example='cn-shanghai', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the custom resource group. You can configure this parameter to bind the instance to the resource group.', example='rg-acfmxyexli2****', position='Query'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group. This parameter is required if you set the ClusterType parameter to ecs.', example='sg-bp1********', position='Query'),
  subClustersJson?: string(name='SubClustersJson', description='JSON string for child instances of the globalView instance.', example='When the clusterType is global view, this parameter needs to be passed: a list of information about the clusters that need to be aggregated.
Example:
[
  {
    "Headers":{

    },
    "RegionId": "cn hangzhou",
    "SourceType": "Alibaba Prometheus",
    "Extras":{

    },
    "ClusterId": "c39a1048921e04f ****************",
    "SourceName": "test1",
    "DataSource": "",
    "UserId": "1672753 ******************"
  },
  {
    "Headers":{

    },
    "RegionId": "cn beijing",
    "SourceType": "Alibaba Prometheus",
    "Extras":{

    },
    "ClusterId": "c6b6485496d5b40 ****************",
    "SourceName": "test2",
    "DataSource": "",
    "UserId": "1672753 ******************"
  },
  {
    "Headers":{

    },
    "RegionId": "cn zhangjiakou",
    "SourceType": "Alibaba Prometheus",
    "Extras":{

    },
    "ClusterId": "c261a4f3200c446 ****************",
    "SourceName": "test3",
    "DataSource": "",
    "UserId": "1672753 ******************"
  }
]', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', description='The tags of the instance. You can configure this parameter to manage tags for the instance.', example='[
    {
        "labelName":"labelValue"
    },
    {
        "testName":"clusterA"
    }
]', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch. This parameter is required if you set the ClusterType parameter to ecs.', example='vsw-bp1*********', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of virtual private cloud (VPC). This parameter is required if you set the ClusterType parameter to ecs.', example='vpc-rpn**********', position='Query'),
}

model CreatePrometheusInstanceResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The ID of the created Prometheus instance.', example='qduukd****'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='70675725-8F11-4817-8106-CFE0AD71****'),
}

model CreatePrometheusInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePrometheusInstanceResponseBody(name='body'),
}

async function createPrometheusInstance(request: CreatePrometheusInstanceRequest): CreatePrometheusInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePrometheusInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreatePrometheusMonitoringRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  configYaml: string(name='ConfigYaml', description='The monitoring configuration. Specify a YAML string.', example='Please refer to the supplementary explanation of the request parameters.', position='Body'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  status?: string(name='Status', description='The status of the monitoring configuration. Valid values: run and stop. Default value: run. This parameter is not available if the Type parameter is set to Probe.', example='run', position='Query'),
  type: string(name='Type', description='The type of the monitoring configuration. 
Valid values for a Prometheus instance for Container Service: serviceMonitor, podMonitor, customJob, and probe. 
Valid values for a Prometheus instance for ECS: customJob and probe.', example='serviceMonitor', position='Query'),
}

model CreatePrometheusMonitoringResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The name of the monitoring configuration that was added, or the exception information.', example='name1'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='21E85B16-75A6-429A-9F65-8AAC9A54****'),
}

model CreatePrometheusMonitoringResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePrometheusMonitoringResponseBody(name='body'),
}

async function createPrometheusMonitoring(request: CreatePrometheusMonitoringRequest): CreatePrometheusMonitoringResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePrometheusMonitoring', 'POST', '/', 'json', true, 'form', request);
}

model CreateRetcodeAppRequest {
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. You can obtain the resource group ID in the **Resource Management** console.', example='rg-acfmxyexli2****', position='Query'),
  retcodeAppName: string(name='RetcodeAppName', description='The name of the application.', example='SdkTest', position='Query'),
  retcodeAppType: string(name='RetcodeAppType', description='The type of the application. Valid values:

*   `web`: web application
*   `weex`: Weex mobile app
*   `mini_dd`: DingTalk mini program
*   `mini_alipay`: Alipay mini program
*   `mini_wx`: WeChat mini program
*   `mini_common`: mini program on other platforms', example='mini_dd', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The tags that you want to add to the task.', position='Query'),
}

model CreateRetcodeAppResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  data?: string(name='Data', description='The response parameters.', example='bdidt76ehx@d5cf1cd3f7df411'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='A5EC8221-08F2-4C95-9AF1-49FD998C647A'),
  retcodeAppDataBean?: {
    appId?: long(name='AppId', description='The application ID.', example='135143'),
    pid?: string(name='Pid', description='The process identifier (PID) of the application.', example='aokcdqn3ly@a195c6d6421****'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****'),
    tags?: {
      tags?: [ 
      {
        key?: string(name='Key', description='The tag key.', example='TestKey'),
        value?: string(name='Value', description='The tag value.', example='TestValue'),
      }
    ](name='Tags')
    }(name='Tags', description='The tags of the task.'),
  }(name='RetcodeAppDataBean', description='The information of the Browser Monitoring task.'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

- true: The call was successful.
- false: The call failed.', example='True'),
}

model CreateRetcodeAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRetcodeAppResponseBody(name='body'),
}

async function createRetcodeApp(request: CreateRetcodeAppRequest): CreateRetcodeAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRetcodeApp', 'POST', '/', 'json', false, 'json', request);
}

model CreateRumAppRequest {
  appGroup?: string(name='AppGroup', description='The name of the application group.', example='default', position='Query'),
  appName: string(name='AppName', description='The application name.', example='test-app', position='Query'),
  description?: string(name='Description', description='The description of the application.', example='Monitoring description', position='Query'),
  nickName?: string(name='NickName', description='The nick name.', example='test-app', position='Query'),
  packageName?: string(name='PackageName', description='The name of the Android application package. This parameter is required if you create an Android application.', example='com.xxxx.xxxxxx', position='Query'),
  realRegionId?: string(name='RealRegionId', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****', position='Query'),
  siteType: string(name='SiteType', description='The application type. Valid values: web, miniapp, ios, and android.', example='web', position='Query'),
  source?: string(name='Source', description='The source. This is a reserved parameter.', example='arms', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='app'),
      value?: string(name='Value', description='The tag value.', example='ecs'),
    }
  ](name='Tag', description='The list of tags. You can specify a maximum of 20 tags.', shrink='json', position='Query'),
}

model CreateRumAppResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. 2XX indicates that the request was successful. 3XX indicates that the request was redirected. 4XX indicates that a request error occurred. 5XX indicates that a server error occurred.', example='200'),
  data?: {
    cdnDomain?: string(name='CdnDomain', description='The SDK Domain.', example='bxxxxxxx-sdk.rum.aliyuncs.com/v2/browser-sdk.js'),
    endpoint?: string(name='Endpoint', description='The endpoint of the event target.', example='xxxxxxxx-default-cn.rum.aliyuncs.com'),
    pid?: string(name='Pid', description='The application ID.', example='avccccxxxx@24cxxxxbf384dc6'),
  }(name='Data', description='The application ID and domain names. This parameter is returned if the application is created. Multiple domain names are separated with commas (,).', example='ggxxxnjuz@xxxx,xxxxxx-default-cn.rum.aliyuncs.com'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The error message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='1A474FF8-7861-4D00-81B5-5BC3DA4E****'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model CreateRumAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRumAppResponseBody(name='body'),
}

async function createRumApp(request: CreateRumAppRequest): CreateRumAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRumApp', 'POST', '/', 'json', false, 'json', request);
}

model CreateRumUploadFileUrlRequest {
  appName?: string(name='AppName', description='The application name.', example='test-app', position='Query'),
  contentType?: string(name='ContentType', description='The type of the file. You can set this parameter to "application/zip", "text/plain", or an empty string.', example='text/plain', position='Query'),
  fileName: string(name='FileName', description='The file name.', example='test.js.map', position='Query'),
  pid: string(name='Pid', description='The process ID (PID) of the application.', example='iioe7jcnuk@582846f37******', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  sourcemapType?: string(name='SourcemapType', description='The file type. Valid values: source-map: SourceMap files. mapping: symbol table files for Android. dsym: dSYM files for iOS.', example='source-map', position='Query'),
  uuid?: string(name='Uuid', description='The file ID.', example='125bdb39-a415-4503-bd96-e293925fc64c', position='Query'),
  versionId?: string(name='VersionId', description='The version number of the file.', example='1.0.0', position='Query'),
}

model CreateRumUploadFileUrlResponseBody = {
  code?: int32(name='Code', description='The response code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The file upload URL.', example='http://arms-rum-v2.oss-cn-hangzhou.aliyuncs.com/113197164xxxxx28/b590lhguqs%40f93xxxxxbf31d3/1.0.0-robots.txt?Expires=1713847079&OSSAccessKeyId=STS.NT6XvoxkyqA&Signature=6ptYX4OTjLMrsleTlA2t97'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The error message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model CreateRumUploadFileUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRumUploadFileUrlResponseBody(name='body'),
}

/**
  * This operation returns a file upload URL. You can use the file upload URL to upload files. For more information, see [Use a URL to upload files](~~2579659~~).
  *
 */
async function createRumUploadFileUrl(request: CreateRumUploadFileUrlRequest): CreateRumUploadFileUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRumUploadFileUrl', 'POST', '/', 'json', false, 'json', request);
}

model CreateSyntheticTaskRequest {
  commonParam?: {
    alarmFlag?: string(name='AlarmFlag', description='Specifies whether to create an alert rule.

*   1: creates an alert.
*   0: does not create an alert.', example='1'),
    alertList?: [ 
      {
        isCritical?: long(name='IsCritical', description='Specifies whether the condition must be met.', example='true'),
        name?: string(name='Name', description='The name of the alert rule.

For network synthetic monitoring, use the following names:

*   Latency: PING_SET
*   Packet loss rate: PING_LOST_RATE
*   Hijacking: HIJACKPER', example='PING_SET'),
        symbols?: long(name='Symbols', description='Specifies how the condition is evaluated. Valid values:

*   1: greater than
*   0: less than', example='1'),
      }
    ](name='AlertList', description='The alert parameters.'),
    alertNotifierId?: string(name='AlertNotifierId', description='The ID of the alert recipient. Separate multiple recipients with commas (,).', example='123'),
    alertPolicyId?: string(name='AlertPolicyId', description='The ID of the notification policy.', example='1234'),
    monitorSamples?: long(name='MonitorSamples', description='Specifies whether to evenly distribute monitoring samples. Valid values:

*   0: no
*   1: yes', example='0'),
    startExecutionTime?: long(name='StartExecutionTime', description='The time when execution starts.', example='2022-07-20 10'),
  }(name='CommonParam', description='The common parameters.', shrink='json', position='Query'),
  download?: {
    connectionTimeout?: double(name='ConnectionTimeout', description='The connection timeout period.', example='200'),
    downloadCustomHeaderContent?: string(name='DownloadCustomHeaderContent', description='The items to be ignored in a certificate error. Pass the values of the check boxes that are separated with vertical bars (|).', example='Host:www.example.com|Referer:www.example.com'),
    downloadCustomHost?: long(name='DownloadCustomHost', description='The custom host mode.

*   1: round robin
*   0: random', example='1'),
    downloadCustomHostIp?: string(name='DownloadCustomHostIp', description='The custom host IP address. You can enter multiple IP addresses. Separate the IP addresses with commas (,).', example='ipv4:192.168.2.1,192.168.2.5:img.a.com|192.168.2.1[8080]:img.a.com'),
    downloadIgnoreCertificateError?: string(name='DownloadIgnoreCertificateError', description='The items to be ignored in a certificate error. Pass the values of the check boxes that are separated with vertical bars (|).', example='1|2|4'),
    downloadKernel?: long(name='DownloadKernel', description='The kernel type.

*   1: curl
*   0: WinInet', example='1'),
    downloadRedirection?: long(name='DownloadRedirection', description='Specifies whether to support redirection.', example='0'),
    downloadTransmissionSize?: long(name='DownloadTransmissionSize', description='The size of the download file. Unit: KB.', example='10240'),
    monitorTimeout?: long(name='MonitorTimeout', description='The monitoring duration.', example='30'),
    quickProtocol?: string(name='QuickProtocol', description='The QUIC protocol type.

*   1: http1
*   2: http2
*   3: http3', example='1'),
    validateKeywords?: string(name='ValidateKeywords', description='The keyword that is used in verification.', example='keyword'),
    verifyWay?: long(name='VerifyWay', description='The verification method.

*   0: no verification
*   1: string verification
*   2: MD5 verification', example='0'),
    whiteList?: string(name='WhiteList', description='The whitelist for DNS hijacking.', example='[{\\"src\\":\\"211.154.166.174\\"}]'),
  }(name='Download', description='The file download task.', shrink='json', position='Query'),
  extendInterval?: {
    days?: [ long ](name='Days', description='The day on which synthetic monitoring is performed.'),
    endHour?: long(name='EndHour', description='The hour at which synthetic monitoring ends.', example='23'),
    endMinute?: long(name='EndMinute', description='The minute at which synthetic monitoring ends.', example='00'),
    endTime?: string(name='EndTime', description='The time when synthetic monitoring ends. The format is `yyyy-MM-dd HH`.', example='2022-08-20 10'),
    startHour?: long(name='StartHour', description='The hour at which synthetic monitoring starts.', example='00'),
    startMinute?: long(name='StartMinute', description='The minute at which synthetic monitoring starts.', example='00'),
    startTime?: string(name='StartTime', description='The time when synthetic monitoring starts. The format is `yyyy-MM-dd HH`.', example='2022-07-20 10'),
  }(name='ExtendInterval', description='The frequency.', shrink='json', position='Query'),
  intervalTime: string(name='IntervalTime', description='The interval at which synthetic monitoring is performed. Unit: minutes. Valid values:

*   1
*   5
*   10
*   15
*   20
*   30
*   60
*   120
*   180
*   240
*   360
*   480
*   720
*   1440', example='5', position='Query'),
  intervalType: string(name='IntervalType', description='The interval type.

*   0: daily
*   1: custom frequency', example='0', position='Query'),
  ipType: long(name='IpType', description='The IP address type:

*   0: an automatic IP address
*   1: IPv4
*   2: IPv6', example='0', position='Query'),
  monitorList: [ 
    {
      cityCode: long(name='CityCode', description='The ID of the city to which the monitoring point belongs.', example='1100101'),
      monitorType: long(name='MonitorType', description='The carrier type:

*   IDC
*   LastMilie', example='IDC'),
      netServiceId: long(name='NetServiceId', description='The ID of the carrier.', example='18'),
    }
  ](name='MonitorList', description='The list of monitoring points.', shrink='json', position='Query'),
  navigation?: {
    DNSHijackWhiteList?: string(name='DNSHijackWhiteList', description='The whitelist for DNS hijacking.', example='www.aliyun.com:202.0.3.55|203.3.44.67'),
    elementBlacklist?: string(name='ElementBlacklist', description='The element blacklist.', example='*.a.com'),
    executeActiveX?: long(name='ExecuteActiveX', description='Specifies whether to execute ActiveX.

*   3: yes
*   0: no

>  This parameter is supported only by IE Full Elements.', example='3'),
    executeApplication?: long(name='ExecuteApplication', description='Specifies whether to run applets.

*   1: yes
*   0: no

>  This parameter is supported only by IE Full Elements.', example='1'),
    executeScript?: long(name='ExecuteScript', description='Specifies whether to execute scripts.

*   1: yes
*   0: no

>  This parameter is supported only by IE Full Elements.', example='1'),
    filterInvalidIP?: long(name='FilterInvalidIP', description='Specifies whether to filter invalid IP addresses.

*   1: no
*   0: yes', example='1'),
    flowHijackJumpTimes?: long(name='FlowHijackJumpTimes', description='The element that is used in DNS hijacking.', example='50'),
    flowHijackLogo?: string(name='FlowHijackLogo', description='The tag that is used in DNS hijacking.', example='test'),
    monitorTimeout?: string(name='MonitorTimeout', description='The timeout period of monitoring. Unit: seconds.', example='20'),
    navAutomaticScrolling?: string(name='NavAutomaticScrolling', description='Specifies whether to automatically scroll up and down the screen to load a page.

*   1: yes
*   0: no', example='1'),
    navCustomHeader?: string(name='NavCustomHeader', description='The method that is used to customize the header. Valid values:

*   0: disables the customer header.
*   1: modifies the first package.
*   2: modifies all packages.', example='0'),
    navCustomHeaderContent?: string(name='NavCustomHeaderContent', description='The format of the custom header. You can specify multiple fields. Separate the fields with vertical bars (|).', example='Host:www.example.com|Referer:www.example.com'),
    navCustomHost?: long(name='NavCustomHost', description='The custom host mode.

*   1: round robin
*   0: random', example='1'),
    navCustomHostIp?: string(name='NavCustomHostIp', description='The custom host IP address. You can enter multiple IP addresses. Separate the IP addresses with commas (,).', example='ipv4:192.168.2.1,192.168.2.5:img.a.com|192.168.2.1[8080]:img.a.com'),
    navDisableCache?: long(name='NavDisableCache', description='Specifies whether to disable caching.

*   1: disable
*   0: enable', example='1'),
    navDisableCompression?: string(name='NavDisableCompression', description='Specifies whether to enable the feature of using the Accept-Encoding field to determine whether to accept compressed files.

*   1: disable
*   0: enable', example='1'),
    navIgnoreCertificateError?: long(name='NavIgnoreCertificateError', description='Specifies whether to ignore certificate errors during certificate verification in the SSL handshake and continue browsing.

*   1: ignore
*   0: does not ignore', example='1'),
    navRedirection?: long(name='NavRedirection', description='Specifies whether to continue browsing after a redirection occurs.

*   1: yes
*   0: no', example='1'),
    navReturnElement?: long(name='NavReturnElement', description='Specifies whether to return the elements on the page.

*   1: no. Returns the basic document data.
*   2: yes. Returns all document data.', example='2'),
    pageTamper?: string(name='PageTamper', description='The web page defacement.', example='www.example.com:202.0.3.55|203.3.44.67'),
    processName?: string(name='ProcessName', description='The process ID.', example='ssh'),
    QUICDomain?: string(name='QUICDomain', description='The domain name of the QUIC request element.

>  This parameter is supported by all elements of only Chrome', example='www.example.com'),
    QUICVersion?: long(name='QUICVersion', description='The Quick UDP Internet Connections (QUIC) protocol version. Default value: 0. Valid values:

*
*   35
*   39
*   43
*   44

>  This parameter is supported by all elements of only Chrome', example='0'),
    requestHeader?: long(name='RequestHeader', description='Specifies whether to return the request header.

*   0: does not return the response header.
*   1: returns the basic document header.
*   2: returns all headers.', example='0'),
    responseHeader?: long(name='ResponseHeader', description='The method that is used to return the response header. Valid values:

*   0: does not return the response header.
*   1: returns the basic document header.
*   2: returns all headers.', example='0'),
    slowElementThreshold?: double(name='SlowElementThreshold', description='The time threshold that is used to define a slow element. Unit: seconds.', example='5'),
    verifyStringBlacklist?: string(name='VerifyStringBlacklist', description='The blacklist for string verification.', example='Regex:*.example|expalme|'),
    verifyStringWhiteList?: string(name='VerifyStringWhiteList', description='The whitelist for string verification.', example='Regex:*.example|expalme|'),
    waitCompletionTime?: double(name='WaitCompletionTime', description='The timeout period of waiting for the monitoring to complete.', example='15'),
  }(name='Navigation', description='The monitoring items that are associated with the browse tasks.', shrink='json', position='Query'),
  net?: {
    netDNSNs?: string(name='NetDNSNs', description='The DNS server.', example='114.114.XX.XX'),
    netDNSQueryMethod?: long(name='NetDNSQueryMethod', description='The DNS query method. Valid values:

*   1: recursion
*   2: iteration', example='1'),
    netDNSServer?: long(name='NetDNSServer', description='The IP address type of the DNS server.

*   0: IPv4
*   1: IPv6
*   2: an automatic IP address', example='0'),
    netDNSSwitch?: long(name='NetDNSSwitch', description='Specifies whether to enable domain name system (DNS) monitoring.

*   0: Off.
*   1: On. You must set DNS parameters if you want to enable DNS monitoring.', example='1'),
    netDNSTimeout?: long(name='NetDNSTimeout', description='The timeout period of DNS monitoring. Default value: 5 seconds. Valid values: 0 to 45 seconds.', example='5'),
    netDigSwitch?: long(name='NetDigSwitch', description='Specifies whether to display the data in the DIG format. Valid values:

*   0: no
*   1: yes', example='0'),
    netICMPActive?: long(name='NetICMPActive', description='The protocol type. Valid values:

*   0: ICMP
*   1: TCP', example='0'),
    netICMPDataCut?: long(name='NetICMPDataCut', description='Specifies whether to split packages.

*   0: no
*   1: yes', example='0'),
    netICMPInterval?: long(name='NetICMPInterval', description='The interval at which the network synthetic monitoring task is executed. Unit: seconds.', example='1'),
    netICMPNum?: long(name='NetICMPNum', description='The number of packages.', example='4'),
    netICMPSize?: long(name='NetICMPSize', description='The package size.', example='32'),
    netICMPSwitch?: long(name='NetICMPSwitch', description='Specifies whether to enable ping monitoring.

*   0: Off.
*   1: On. You must set Internet control message protocol (ICMP) parameters if you want to enable ping monitoring.', example='1'),
    netICMPTimeout?: long(name='NetICMPTimeout', description='The timeout period of Ping monitoring.', example='20'),
    netTraceRouteNum?: long(name='NetTraceRouteNum', description='The maximum number of active monitoring points.', example='20'),
    netTraceRouteSwitch?: long(name='NetTraceRouteSwitch', description='Specifies whether to enable tracert monitoring.

*   0: Off.
*   1: On. You must set the tracert parameters if you want to enable tracert monitoring.', example='1'),
    netTraceRouteTimeout?: long(name='NetTraceRouteTimeout', description='The timeout period of tracert monitoring. Valid values: 0 to 300 seconds.', example='60'),
    whiteList?: string(name='WhiteList', description='The whitelist for DNS hijacking. The format is `Domain name: Matching rule`.

>  Wireless application protocol (WAP) networks do not support DNS hijacking.', example='www.aliyun.com:202.0.3.55|203.3.44.67'),
  }(name='Net', description='The network synthetic monitoring task.', shrink='json', position='Query'),
  protocol?: {
    characterEncoding?: long(name='CharacterEncoding', description='The encoding format.

*   0: UTF-8
*   1: GBK
*   2: GB2312
*   3: Unicode', example='0'),
    customHost?: long(name='CustomHost', description='The custom host mode.

*   1: round robin
*   0: random', example='1'),
    customHostIp?: string(name='CustomHostIp', description='The custom host IP address. You can enter multiple IP addresses. Separate the IP addresses with commas (,).', example='ipv4:192.168.2.1,192.168.2.5:img.a.com|192.168.2.1[8080]:img.a.com'),
    protocolConnectionTime?: long(name='ProtocolConnectionTime', description='The connection timeout period of the protocol. Unit: seconds.', example='3'),
    protocolMonitorTimeout?: string(name='ProtocolMonitorTimeout', description='The timeout period of API performance synthetic monitoring. Unit: seconds.', example='30'),
    receivedDataSize?: long(name='ReceivedDataSize', description='The size of the received data. This parameter is required when you set the value of the VerifyWay parameter to 2.', example='500'),
    requestContent?: {
      body?: {
        formData?: [ 
          {
            key?: string(name='Key', description='The key of **form-data**.', example='appId'),
            value?: string(name='Value', description='The value of **form-data**.', example='3425'),
          }
        ](name='FormData', description='The data that is passed when the **Mode** parameter is set to **form-data**.'),
        language?: string(name='Language', description='The language that is selected when the Mode parameter is set to raw.

*   json
*   xml
*   javascript
*   html
*   text', example='json'),
        mode?: string(name='Mode', description='The data type of the content.

*   form-data
*   x-www-form-urlencoded
*   raw', example='form-data'),
        raw?: string(name='Raw', description='The data that is passed when the **Mode** parameter is set to **raw**.', example='content'),
        urlEncoding?: [ 
          {
            key?: string(name='Key', description='The key of **x-www-form-urlencoded**.', example='appId'),
            value?: string(name='Value', description='The value of **x-www-form-urlencoded**.', example='11080'),
          }
        ](name='UrlEncoding', description='The data that is passed when the **Mode** parameter is set to **x-www-form-urlencoded**.'),
      }(name='Body', description='The custom body of a request to initiate an API performance synthetic monitoring task.'),
      header?: [ 
        {
          key?: string(name='Key', description='The key of the request header.', example='regionId'),
          value?: string(name='Value', description='The value of the request header.', example='cn-hangzhou'),
        }
      ](name='Header', description='The custom header of a request to initiate an API performance synthetic monitoring task.'),
      method?: string(name='Method', description='The request method.

*   POST
*   GET', example='POST'),
    }(name='RequestContent', description='The request content, including the request header and request body.'),
    verifyContent?: string(name='VerifyContent', description='The verification string.', example='"code":200'),
    verifyWay?: long(name='VerifyWay', description='The method that is used to verify the response content.

*   0: no verification.
*   1: exact match with the verification string.
*   2: partial match with the verification string.
*   3: MD5 verification.', example='0'),
  }(name='Protocol', description='The API performance synthetic monitoring task.', shrink='json', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the application is located.', example='cn-hangzhou', position='Query'),
  taskName: string(name='TaskName', description='The name of the task. To update a synthetic monitoring task, enter the task name and set the **UpdateTask** parameter to **true**.', example='Network synthetic monitoring task', position='Query'),
  taskType: long(name='TaskType', description='The type of the monitoring task. Valid values:

1.  3: web page performance - IE
2.  34: web Page Performance - Chrome
3.  0: network quality
4.  40: file download
5.  7:API performance', example='0', position='Query'),
  updateTask?: boolean(name='UpdateTask', description='Specifies whether to update existing synthetic monitoring tasks.

*   true: updates existing synthetic monitoring tasks.
*   false: creates new synthetic monitoring tasks.', example='false', position='Query'),
  url: string(name='Url', description='The URL for synthetic monitoring.', example='https://www.example.com', position='Query'),
}

model CreateSyntheticTaskResponseBody = {
  code?: string(name='Code', description='The status code returned.

*   1001: The request was successful.
*   1002: The request failed.
*   1003: Parameter errors occurred.
*   1004: Authentication failed.
*   1006: The task does not exist.
*   1099: Internal errors occurred.', example='1001'),
  data?: {
    taskId?: long(name='TaskId', description='The ID of the synthetic monitoring task.', example='1234'),
  }(name='Data', description='The information about the synthetic monitoring task.'),
  msg?: string(name='Msg', description='The message that is returned when the task failed to be created.', example='null'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
}

model CreateSyntheticTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSyntheticTaskResponseBody(name='body'),
}

async function createSyntheticTask(request: CreateSyntheticTaskRequest): CreateSyntheticTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSyntheticTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateTimingSyntheticTaskRequest {
  availableAssertions?: [ 
    {
      expect: string(name='Expect', description='The expected value.', example='200'),
      operator: string(name='Operator', description='The condition. gt: greater than. gte: greater than or equal to. lt: less than. lte: less than or equal to. eq: equal to. neq: not equal to. ctn: contain. nctn: does not contain. exist: exist. n_exist: does not exist. belong: belong to. n_belong: does not belong to. reg_match: regular expression.', example='eq'),
      target?: string(name='Target', description='The check target. If you set the type parameter to HttpResCode, HttpResBody, or HttpResponseTime, you do not need to set the target parameter. If you set the type parameter to HttpResHead, you must specify the key in the header. If you set the type parameter to HttpResBodyJson, use jsonPath.', example='key'),
      type: string(name='Type', description='The assertion type. Valid values: HttpResCode, HttpResHead, HttpResBody, HttpResBodyJson, HttpResponseTime, IcmpPackLoss (packet loss rate), IcmpPackMaxLatency (maximum packet latency), IcmpPackAvgLatency (average packet latency), TraceRouteHops (number of hops), DnsARecord (A record), DnsCName (CNAME), websiteTTFB (time to first packet), websiteTTLB (time to last packet), websiteFST (first paint time), websiteFFST (first meaningful paint), websiteOnload (full loaded time). For more information, see the following description.', example='DnsARecord'),
    }
  ](name='AvailableAssertions', description='The list of assertions.', shrink='json', position='Query'),
  commonSetting?: {
    customHost?: {
      hosts: [ 
        {
          domain: string(name='Domain', description='The domain name.', example='www.aliyun.com'),
          ipType: int32(name='IpType', description='The IP version. Valid values:

*   0: A version is automatically selected.
*   1: IPv4.
*   2: IPv6.', example='0'),
          ips: [ string ](name='Ips', description='The list of IP addresses.'),
        }
      ](name='Hosts', description='The list of hosts.'),
      selectType: int32(name='SelectType', description='The selection mode. Valid values:

*   0: random
*   1: polling', example='0'),
    }(name='CustomHost', description='The custom host settings.'),
    customPrometheusSetting?: {
      prometheusClusterId?: string(name='PrometheusClusterId', description='A reserved parameter.', example='null'),
      prometheusClusterRegion?: string(name='PrometheusClusterRegion', description='A reserved parameter.', example='null'),
      prometheusLabels?: map[string]string(name='PrometheusLabels', description='A reserved parameter.'),
    }(name='CustomPrometheusSetting', description='The reserved parameters.'),
    customVPCSetting?: {
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
      secureGroupId?: string(name='SecureGroupId', description='The ID of the security group to which the client belongs. The security group specifies the inbound and outbound rules of the client for the VPC. You need to allow the security group to which the client belongs to access the security group to which the VPC belongs. Otherwise, the client cannot access resources in the VPC.', example='sg-bp13wzf9vuwegmpxxxxx'),
      vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-bp14crq29vpycxp8xxxxx'),
      vpcId?: string(name='VpcId', description='VPC ID.', example='vpc-bp1muectbr8f90vjxxxxx'),
    }(name='CustomVPCSetting', description='The information about the virtual private cloud (VPC). If the destination URL is an Alibaba Cloud internal endpoint, you need to configure a VPC.'),
    ipType?: int32(name='IpType', description='The IP version. Valid values:

*   0: A version is automatically selected.
*   1: IPv4.
*   2: IPv6.', example='0'),
    isOpenTrace?: boolean(name='IsOpenTrace', description='Specifies whether to enable tracing.', example='true'),
    monitorSamples?: int32(name='MonitorSamples', description='Specifies whether to evenly distribute monitoring samples. Valid values:

*   0: no
*   1: yes', example='0'),
    traceClientType?: int32(name='TraceClientType', description='The type of the client for tracing. Valid values:

*   0: ARMS agent
*   1: OpenTelemetry
*   2: Jaeger', example='1'),
    xtraceRegion?: string(name='XtraceRegion', description='The region to which trace data is reported.', example='cn-hangzhou'),
  }(name='CommonSetting', description='The general settings.', shrink='json', position='Query'),
  customPeriod?: {
    endHour: int32(name='EndHour', description='The custom host settings.', example='22'),
    startHour: int32(name='StartHour', description='The list of hosts.', example='8'),
  }(name='CustomPeriod', description='The general settings.', shrink='json', position='Query'),
  frequency: string(name='Frequency', description='The detection frequency. Valid values: 1m, 5m, 10m, 15m, 20m, 30m, 1h, 2h, 3h, 4h, 6h, 8h, 12h, and 24h.', example='5m', position='Query'),
  monitorCategory: int32(name='MonitorCategory', description='The detection point type. Valid values:

- 1: PC
- 2: mobile device', example='1', position='Query'),
  monitorConf: {
    apiHTTP?: {
      checkCert?: boolean(name='CheckCert', description='Specifies whether to verify the certificate. Default value: no.', example='true'),
      connectTimeout?: long(name='ConnectTimeout', description='The connection timeout period. Unit: milliseconds. Default value: 5000. Minimum value: 1000. Maximum value: 300000.', example='5000'),
      method?: string(name='Method', description='The request method. Valid values: GET and POST.', example='GET'),
      protocolAlpnProtocol?: int32(name='ProtocolAlpnProtocol', description='The ALPN protocol version. You can configure this parameter when you perform an HTTPS synthetic test on a WAP mobile client. Valid values:

0: default

1: http/1.1

2: h2

3: disables the ALPN protocol', example='1'),
      requestBody?: {
        content?: string(name='Content', description='The content of the request body. Format: JSON string. The parameter is required if the Type parameter is set to text/plain, application/json, application/xml, or text/html. Format: JSON string.', example='{
  "key1": "value1",
  "key2": "value2"
}'),
        type?: string(name='Type', description='The type of the request body. Valid values: text/plain, application/json, application/x-www-form-urlencoded, multipart/form-data, application/xml, and text/html.', example='application/json'),
      }(name='RequestBody', description='The HTTP request body.'),
      requestHeaders?: map[string]string(name='RequestHeaders', description='The HTTP request header.'),
      targetUrl: string(name='TargetUrl', description='The URL or request path for synthetic monitoring.', example='http://www.demo.com/api/list'),
      timeout?: long(name='Timeout', description='The timeout period. Unit: milliseconds. Default value: 10000. Minimum value: 1000. Maximum value: 300000.', example='10000'),
    }(name='ApiHTTP', description='The parameters of the HTTP(S) synthetic test.'),
    fileDownload?: {
      connectionTimeout?: long(name='ConnectionTimeout', description='Unit: milliseconds. Minimum value: 1000. Maximum value: 120000. Default value: 5000.', example='5000'),
      customHeaderContent?: map[string]string(name='CustomHeaderContent', description='The content of the custom request header.'),
      downloadKernel?: int32(name='DownloadKernel', description='The kernel type. Valid values:

*   1: curl
*   0: WinInet

Default value: 1', example='1'),
      ignoreCertificateAuthError?: int32(name='IgnoreCertificateAuthError', description='Specifies whether to ignore CA certificate authentication errors. Valid values: 0: no. 1: yes. Default value: 1.', example='1'),
      ignoreCertificateCanceledError?: int32(name='IgnoreCertificateCanceledError', description='Specifies whether to ignore certificate revocation errors. Valid values: 0: no. 1: yes. Default value: 1.', example='1'),
      ignoreCertificateOutOfDateError?: int32(name='IgnoreCertificateOutOfDateError', description='Specifies whether to ignore certificate invalidity. Valid values: 0: no. 1: yes. Default value: 1.', example='1'),
      ignoreCertificateStatusError?: int32(name='IgnoreCertificateStatusError', description='Specifies whether to ignore certificate status errors. Valid values: 0: no. 1: yes. Default value: 1.', example='1'),
      ignoreCertificateUntrustworthyError?: int32(name='IgnoreCertificateUntrustworthyError', description='Specifies whether to ignore certificate incredibility. Valid values: 0: no. 1: yes. Default value: 1.', example='1'),
      ignoreCertificateUsingError?: int32(name='IgnoreCertificateUsingError', description='Specifies whether to ignore certificate usage errors. Valid values: 0: no. 1: yes. Default value: 1.', example='1'),
      ignoreInvalidHostError?: int32(name='IgnoreInvalidHostError', description='Specifies whether to ignore host invalidity. Valid values: 0: no. 1: yes. Default value: 1.', example='1'),
      monitorTimeout?: long(name='MonitorTimeout', description='The monitoring timeout period. Unit: milliseconds. Minimum value: 1000. Maximum value: 120000. Default value: 60000.', example='60000'),
      quickProtocol?: int32(name='QuickProtocol', description='The QUIC protocol type. Valid values:

*   1: HTTP/1
*   2: HTTP/2
*   3: HTTP/3

Default value: 1', example='1'),
      redirection?: int32(name='Redirection', description='Specifies whether to support redirection. Valid values: 0: no. 1: yes. Default value: 1.', example='1'),
      targetUrl: string(name='TargetUrl', description='The URL that is used to download the file.', example='https://img.alicdn.com/tfs/TB13DzOjXP7gK0jSZFjXXc5aXXa-212-48.png'),
      transmissionSize?: long(name='TransmissionSize', description='The maximum file size of a single transfer. Unit: KB. Minimum value: 1. Maximum value: 20480. Valid values: 2048.', example='2048'),
      validateKeywords?: string(name='ValidateKeywords', description='The keyword that is used in verification.', example='aliyun'),
      verifyWay?: int32(name='VerifyWay', description='The verification method. Valid values:

*   0: no verification
*   1: string verification
*   2: MD5 verification', example='0'),
      whiteList?: string(name='WhiteList', description='The whitelisted objects that are used to avoid DNS hijacking. The objects can be IP addresses, wildcard mask, subnet mask, or CNAME records. Separate multiple objects with vertical bars (|). Example: www.aliyun.com:203.0.3.55|203.3.44.67. It indicates that all IP addresses that belong to the www.aliyun.com domain name except 203.0.3.55 and 203.3.44.67 are hijacked.', example='www.aliyun.com:203.0.3.55|203.3.44.67'),
    }(name='FileDownload', description='The parameters of file downloading.'),
    netDNS?: {
      dnsServerIpType?: int32(name='DnsServerIpType', description='The IP version of the DNS server.

*   0 (default): IPv4.
*   1: IPv6.
*   2: A version is automatically selected.', example='0'),
      nsServer?: string(name='NsServer', description='The IP address of the DNS server. Default value: 114.114.114.114.', example='114.114.114.114'),
      queryMethod?: int32(name='QueryMethod', description='The DNS query method. Valid values:

*   0 (default): recursive
*   1: iterative', example='0'),
      targetUrl: string(name='TargetUrl', description='The destination domain name.', example='www.aliyun.com'),
      timeout?: long(name='Timeout', description='The timeout period for the DNS synthetic test. Unit: milliseconds. Minimum value: 1000. Maximum value: 45000. Default value: 5000.', example='5000'),
    }(name='NetDNS', description='The parameters of the DNS synthetic test. This parameter is required if the TaskType parameter is set to 3.'),
    netICMP?: {
      interval?: long(name='Interval', description='The interval at which ICMP packets are sent. Unit: milliseconds. Minimum value: 200. Maximum value: 2000. Default value: 200.', example='200'),
      packageNum?: int32(name='PackageNum', description='The number of ICMP packets that are sent. Minimum value: 1. Maximum value: 50. Default value: 4.', example='4'),
      packageSize?: int32(name='PackageSize', description='The size of each ICMP packet. Unit: bytes. Valid values: 32, 64, 128, 256, 512, 1024, 1080, and 1450.', example='32'),
      splitPackage?: boolean(name='SplitPackage', description='Specifies whether to split ICMP packets. Default value: true.', example='true'),
      targetUrl: string(name='TargetUrl', description='The destination IP address or domain name.', example='www.example.com'),
      timeout?: long(name='Timeout', description='The timeout period for the ICMP synthetic test. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 20000.', example='20000'),
      tracertEnable?: boolean(name='TracertEnable', description='Specifies whether to enable the tracert command. Default value: true.', example='true'),
      tracertNumMax?: int32(name='TracertNumMax', description='The maximum number of hops for the tracert command. Minimum value: 1. Maximum value: 128. Default value: 20.', example='20'),
      tracertTimeout?: long(name='TracertTimeout', description='The timeout period of the tracert command. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 60000.', example='60000'),
    }(name='NetICMP', description='The parameters of the ICMP synthetic test. This parameter is required if the TaskType parameter is set to 1.'),
    netTCP?: {
      connectTimes?: int32(name='ConnectTimes', description='The number of TCP connections that are established. Minimum value: 1. Maximum value: 16. Default value: 4.', example='4'),
      interval?: long(name='Interval', description='The interval at which TCP connections are established. Unit: milliseconds. Minimum value: 200. Maximum value: 10000. Default value: 200.', example='200'),
      targetUrl: string(name='TargetUrl', description='The IP address of the destination host.', example='www.example.com'),
      timeout?: long(name='Timeout', description='The timeout period for the TCP synthetic test. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 20000.', example='20000'),
      tracertEnable?: boolean(name='TracertEnable', description='Specifies whether to enable the tracert command. Default value: true.', example='true'),
      tracertNumMax?: int32(name='TracertNumMax', description='The maximum number of hops for the tracert command. Minimum value: 1. Maximum value: 128. Default value: 20.', example='20'),
      tracertTimeout?: long(name='TracertTimeout', description='The timeout period of the tracert command. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 60000.', example='60000'),
    }(name='NetTCP', description='The parameters of the TCP synthetic test. This parameter is required if the TaskType parameter is set to 2.'),
    stream?: {
      customHeaderContent?: map[string]string(name='CustomHeaderContent', description='The custom header. Format: JSON map.'),
      playerType?: int32(name='PlayerType', description='The player. Default value: 12. Valid values:

*   12: VLC
*   2: Flash Player', example='12'),
      streamAddressType?: int32(name='StreamAddressType', description='The address type of the resource. Valid values:

*   1: resource URL
*   0 (default): page URL', example='0'),
      streamMonitorTimeout?: int32(name='StreamMonitorTimeout', description='The monitoring duration. Unit: seconds. Maximum and default value: 60.', example='30'),
      streamType?: int32(name='StreamType', description='Specifies whether the resource is a video or audio. Valid values: 0: video. 1: audio.', example='0'),
      targetUrl?: string(name='TargetUrl', description='The resource URL of the streaming media.', example='http://www.aliyun.com/stream/test.mp4'),
      whiteList?: string(name='WhiteList', description='The whitelisted objects that are used to avoid DNS hijacking. The objects can be IP addresses, wildcard mask, subnet mask, or CNAME records. Separate multiple objects with vertical bars (|). Example: www.aliyun.com:203.0.3.55|203.3.44.67. It indicates that all IP addresses that belong to the www.aliyun.com domain name except 203.0.3.55 and 203.3.44.67 are hijacked.', example='www.aliyun.com:203.0.3.55|203.3.44.67'),
    }(name='Stream', description='The parameters of the streaming-media synthetic test.'),
    website?: {
      automaticScrolling?: int32(name='AutomaticScrolling', description='Specifies whether to automatically scroll up and down the screen to load a page.

*   0 (default): no
*   1: yes', example='0'),
      customHeader?: int32(name='CustomHeader', description='Specifies whether to create a custom header.

*   0 (default): No custom header is created.
*   1: A custom header is created for the first packet.
*   2: A custom header is created for all packets.', example='0'),
      customHeaderContent?: map[string]string(name='CustomHeaderContent', description='The custom header. Format: JSON map.'),
      DNSHijackWhitelist?: string(name='DNSHijackWhitelist', description='If the IP address or CNAME record resolved from a domain name is not included in the DNS whitelist, you cannot access the domain name, or an IP address that belongs to a different domain name is returned. If the IP address or CNAME record is included in the DNS whitelist, DNS hijacking does not occur.

Format: \\<domain name>:\\<objects>. The objects can be IP addresses, wildcard mask, subnet mask, or CNAME records. Separate multiple objects with vertical bars (|). Example: www.aliyun.com:203.0.3.55|203.3.44.67. It indicates that all IP addresses that belong to the www.aliyun.com domain name except 203.0.3.55 and 203.3.44.67 are hijacked.', example='www.aliyun.com:203.0.3.55|203.3.44.67'),
      disableCache?: int32(name='DisableCache', description='Specifies whether to disable caching.

*   0: no
*   1 (default): yes', example='1'),
      disableCompression?: int32(name='DisableCompression', description='Specifies whether to accept compressed files based on the HTTP Accept-Encoding request header. Valid values: 0: no. 1: yes. Default value: 0.', example='0'),
      elementBlacklist?: string(name='ElementBlacklist', description='The elements not to be loaded in the page loading process.', example='www.example.com/a.jpg'),
      filterInvalidIP?: int32(name='FilterInvalidIP', description='Specifies whether to exclude invalid IP addresses. Valid values: 0: yes. 1: no. Default value: 0.', example='0'),
      flowHijackJumpTimes?: int32(name='FlowHijackJumpTimes', description='The total number of elements on the page.', example='10'),
      flowHijackLogo?: string(name='FlowHijackLogo', description='The keyword that is used to identify hijacking. Asterisks (\\*) are allowed.', example='aliyun'),
      ignoreCertificateError?: int32(name='IgnoreCertificateError', description='Specifies whether to ignore certificate errors during certificate verification in the SSL handshake process and continue browsing. Valid values: 0: no. 1: yes. Default value: 1.', example='1'),
      monitorTimeout?: long(name='MonitorTimeout', description='The monitoring timeout period. Unit: milliseconds. This parameter is optional. Default value: 20000.', example='20000'),
      pageTamper?: string(name='PageTamper', description='Elements that are not included in the whitelist and appear on the page are tampered with. These elements can be pop-up ads, floating ads, and page redirection.

Format: \\<domain name>:\\<elements>. The elements can be wildcard masks. Separate multiple elements with vertical bars (|). Example: www.aliyun.com:|/cc/bb/a.gif|/vv/bb/cc.jpg. It indicates that all elements that belong to the www.aliyun.com domain name except the basic documents, /cc/bb/a.gif, and /vv/bb/cc.jpg are tampered with.', example='www.aliyun.com:|/cc/bb/a.gif|/vv/bb/cc.jpg'),
      redirection?: int32(name='Redirection', description='Specifies whether to continue browsing after redirection. Valid values: 0: no. 1: yes. Default value: 1.', example='1'),
      slowElementThreshold?: long(name='SlowElementThreshold', description='The time threshold that is used to define a slow element. Unit: milliseconds. Default value: 5000. Minimum value: 1. Maximum value: 300000.', example='5000'),
      targetUrl: string(name='TargetUrl', description='The URL of the website.', example='https://www.aliyun.com'),
      verifyStringBlacklist?: string(name='VerifyStringBlacklist', description='An arbitrary string in the source code of the page for verification. If the source code returned by the client contains a string that is in the blacklist, the 650 error code is reported, which indicates that the string fails to be verified. Separate multiple strings with vertical bars (|).', example='error'),
      verifyStringWhitelist?: string(name='VerifyStringWhitelist', description='An arbitrary string in the source code of the page for verification. If the source code returned by the client contains a string that is not in the whitelist, the 650 error code is reported, which indicates that the string fails to be verified. Separate multiple strings with vertical bars (|).', example='success'),
      waitCompletionTime?: long(name='WaitCompletionTime', description='The maximum waiting time. Unit: milliseconds. Default value: 5000. Minimum value: 5000. Maximum value: 300000.', example='5000'),
    }(name='Website', description='The parameters of the website speed measurement.'),
  }(name='MonitorConf', description='The monitoring configurations.', shrink='json', position='Query'),
  monitors: [ 
    {
      cityCode: string(name='CityCode', description='The city code.', example='100023'),
      clientType: int32(name='ClientType', description='The client type of the detection point. Valid values:

- 1: data center
- 2: Internet
- 3: mobile device
- 4: ECS instance', example='1'),
      operatorCode: string(name='OperatorCode', description='The carrier code.', example='1'),
    }
  ](name='Monitors', description='The list of detection points.', shrink='json', position='Query'),
  name: string(name='Name', description='The name of the task.', example='demo-test', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The parameter is optional.', example='xxxx', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='Key'),
      value?: string(name='Value', description='The value of the tag.', example='500'),
    }
  ](name='Tags', description='The tag list.', shrink='json', position='Query'),
  taskType: int32(name='TaskType', description='The type of the task. Valid values:

1: ICMP. 2: TCP. 3: DNS. 4: HTTP. 5: website speed measurement. 6: file download.', example='4', position='Query'),
}

model CreateTimingSyntheticTaskResponseBody = {
  code?: long(name='Code', description='The HTTP status code returned. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    status?: string(name='Status', description='The task status. Valid values:

- INIT: The task is in the initial state.
- RELEASE: The task is being parsed.
- RUNNING: The task is running.
- STOP: The task is suspended.
- SYSTEM_STOP: The task is suspended by the system.
- CANCEL: The task is canceled.
- SYSTEM_CANCEL: The task is canceled by the system.
- DONE: The task is complete.', example='RUNNING'),
    taskId?: string(name='TaskId', description='The ID of the synthetic monitoring task.', example='5308a2691f59422c8c3b7aeccec9cd3b'),
  }(name='Data', description='The struct returned.'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='53B5874D-EBC1-5567-B787-E4B7267F5CEB'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model CreateTimingSyntheticTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTimingSyntheticTaskResponseBody(name='body'),
}

async function createTimingSyntheticTask(request: CreateTimingSyntheticTaskRequest): CreateTimingSyntheticTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTimingSyntheticTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateWebhookRequest {
  body: string(name='Body', description='The notification template that is sent when an alert is triggered. This parameter is required if the **Method** parameter is set to **Post**. You can use the $content placeholder to specify the notification content. The content cannot exceed 500 characters in length.', example='{ "Alert Name": "{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster Name": "{{ .commonLabels.clustername }} {{ end }}{{if eq " app" .commonLabels._aliyun_arms_involvedObject_kind }}", "Application Name": "{{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}", "Notification Policy": "{{ .dispatchRuleName }}", "Alarm Time": "{{ .startTime }}", "Alert Content": "{{ for .alerts }} {{ .annotations.message }} {{ end }}" }', position='Query'),
  contactName: string(name='ContactName', description='The name of the contact.', example='WebhookAlert', position='Query'),
  httpHeaders?: string(name='HttpHeaders', description='The HTTP request header.', example='[{"Content-Type":"application/json"}]', position='Query'),
  httpParams?: string(name='HttpParams', description='The parameters in the HTTP request.', example='[{"name":"mike"}]', position='Query'),
  method: string(name='Method', description='The HTTP request method.

*   `Get`
*   `Post`', example='Post', position='Query'),
  recoverBody?: string(name='RecoverBody', description='The notification template that is sent when an alert is resolved. This parameter is required if the **Method** parameter is set to **Post**. You can use the $content placeholder to specify the notification content. The content cannot exceed 500 characters in length.', example='{ "Alert Name": "{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster Name": "{{ .commonLabels.clustername }} {{ end }}{{if eq " app" .commonLabels._aliyun_arms_involvedObject_kind }}", "Application Name": "{{ .commonLabels._aliyun_arms_involvedObject_name }} {{ end }}", "Notification Policy": "{{ .dispatchRuleName }}", "Alarm Time": "{{ .startTime }}", "Alert Content": "{{ for .alerts }} {{ .annotations.message }} {{ end }}" }', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  url: string(name='Url', description='The URL of the request **method**.', example='https://oapi.dingtalk.com/robot/send?access_token=e1a049121ddbfce1ca963d115ef88cc7219583c4fb79fe6e398fbfb688******', position='Query'),
}

model CreateWebhookResponseBody = {
  contactId?: string(name='ContactId', description='The ID of the contact for webhook alerts.', example='48716'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='16AF921B-8187-489F-9913-43C808B4****'),
}

model CreateWebhookResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWebhookResponseBody(name='body'),
}

async function createWebhook(request: CreateWebhookRequest): CreateWebhookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWebhook', 'POST', '/', 'json', false, 'json', request);
}

model DelAuthTokenRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DelAuthTokenResponseBody = {
  data?: string(name='Data', description='Indicates whether the call was successful.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='A5EC8221-08F2-4C95-9AF1-49FD998C647A'),
}

model DelAuthTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DelAuthTokenResponseBody(name='body'),
}

async function delAuthToken(request: DelAuthTokenRequest): DelAuthTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DelAuthToken', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAddonReleaseRequest {
  addonName?: string(name='AddonName', description='The name of the add-on. If you assign a value to AddonName, the ReleaseName parameter is ignored and all AddonReleases that belong to the same add-on are deleted.', example='mysql', position='Query'),
  environmentId: string(name='EnvironmentId', description='Environment ID.', example='env-xxx', position='Query'),
  force?: boolean(name='Force', description='Whether to be forcibly deleted. The default value is false.', example='false', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  releaseName: string(name='ReleaseName', description='Name of Release.', example='agent-822567d4-2449', position='Query'),
}

model DeleteAddonReleaseResponseBody = {
  code?: int32(name='Code', description='Status code: 200 indicates success.', example='200'),
  data?: string(name='Data', description='Return a message.', example='success'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='F7781D4A-2818-41E7-B7BB-79D809E9****'),
  success?: boolean(name='Success', description='Indicates whether the alert rule was deleted. Valid values:

*   `true`: The alert rule was deleted.
*   `false`: The alert rule failed to be deleted.', example='true'),
}

model DeleteAddonReleaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAddonReleaseResponseBody(name='body'),
}

async function deleteAddonRelease(request: DeleteAddonReleaseRequest): DeleteAddonReleaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAddonRelease', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAlertContactRequest {
  contactId: long(name='ContactId', description='The ID of the alert contact.', example='123', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model DeleteAlertContactResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the call was successful.

*   `true`: The call was successful.
*   `false`: The call failed.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request. You can query logs and troubleshoot issues based on the ID.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
}

model DeleteAlertContactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAlertContactResponseBody(name='body'),
}

/**
  * ********
  *
 */
async function deleteAlertContact(request: DeleteAlertContactRequest): DeleteAlertContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAlertContact', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAlertContactGroupRequest {
  contactGroupId: long(name='ContactGroupId', description='The ID of the alert contact group.', example='123', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model DeleteAlertContactGroupResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the call was successful.

*   `true`: The call was successful.
*   `false`: The call failed.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model DeleteAlertContactGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAlertContactGroupResponseBody(name='body'),
}

async function deleteAlertContactGroup(request: DeleteAlertContactGroupRequest): DeleteAlertContactGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAlertContactGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAlertRuleRequest {
  alertId: long(name='AlertId', description='The alert rule ID.

For more information about how to obtain the ID of an alert rule, see [GetAlertRules](~~2612348~~).', example='123', position='Query'),
}

model DeleteAlertRuleResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the call was successful.

*   `true`: The call was successful.
*   `false`: The call failed.', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model DeleteAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAlertRuleResponseBody(name='body'),
}

async function deleteAlertRule(request: DeleteAlertRuleRequest): DeleteAlertRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAlertRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAlertRulesRequest {
  alertIds: string(name='AlertIds', description='The IDs of the alert rules that you want to delete. The value is a JSON array, for example, `[123, 234]`. You can call the SearchAlertRules operation and view the `Id` parameter in the response to obtain the alert rule ID. For more information, see [SearchAlertRules](~~175825~~).', example='[123, 234]', position='Query'),
  regionId: string(name='RegionId', description='The region ID. Default value: `cn-hangzhou`.', example='cn-hangzhou', position='Query'),
}

model DeleteAlertRulesResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the alert rule was deleted.

*   `true`: The alert rule was deleted.
*   `false`: The alert rule failed to be deleted.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model DeleteAlertRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAlertRulesResponseBody(name='body'),
}

/**
  * The current operation is no longer maintained. Call the DeleteAlertRule operation of Alert Management (New) to delete alert rules.
  *
 */
async function deleteAlertRules(request: DeleteAlertRulesRequest): DeleteAlertRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAlertRules', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAppListRequest {
  pids?: [ string ](name='Pids', description='The PIDs of the applications monitored by ARMS Application Monitoring.', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DeleteAppListResponseBody = {
  code?: long(name='Code', description='The HTTP status code. 2XX indicates that the request was successful. 3XX indicates that the request was redirected. 4XX indicates that a request error occurred. 5XX indicates that a server error occurred.', example='200'),
  data?: string(name='Data', description='The returned message.', example='"{\\"code\\":200,\\"data\\":\\"{\\\\\\"code\\\\\\":200,\\\\\\"data\\\\\\":true,\\\\\\"errorCode\\\\ \\":\\\\\\"Deletion of application successful\\\\\\",\\\\\\"Message\\\\\\":\\\\\\"Deletion of application successful\\\\\\",\\\\\\"Successful\\\\\\":true,\\ \\\\"traceId\\\\\\":\\\\\\"0bc1667516940677164677396d0088\\\\\\"}\\",\\"errorCode\\":\\"Batch deletion of applications successful\\",\\"message\\":\\"Batch deletion of applications successful\\ ",\\"Success\\":true,\\"traceId\\":\\"210f470416940677161213505e0e7a\\"}"'),
  message?: string(name='Message', description='The error message returned when the request parameters are invalid.', example='"Deletion of application successful"'),
  requestId?: string(name='RequestId', description='The request ID.', example='4B446DF2-3DDD-4B5B-8E3F-D5225120****'),
  success?: boolean(name='Success', description='Indicates whether the specified applications are deleted. Valid values:

*   `true`: The applications are deleted.
*   `false`: The applications failed to be deleted.', example='true'),
}

model DeleteAppListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppListResponseBody(name='body'),
}

async function deleteAppList(request: DeleteAppListRequest): DeleteAppListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAppList', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCmsExporterRequest {
  clusterId: string(name='ClusterId', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteCmsExporterResponseBody = {
  data?: string(name='Data', example='success'),
  requestId?: string(name='RequestId', example='27E653FA-5958-45BE-8AA9-14D884DC****'),
}

model DeleteCmsExporterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCmsExporterResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function deleteCmsExporter(request: DeleteCmsExporterRequest): DeleteCmsExporterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCmsExporter', 'POST', '/', 'json', false, 'json', request);
}

model DeleteContactRequest {
  contactId: long(name='ContactId', description='The ID of the alert contact.', example='123', position='Query'),
}

model DeleteContactResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the alert contact is deleted. Valid values:

*   `true`: The alert contact is deleted.
*   `false`: The alert contact is not deleted.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model DeleteContactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteContactResponseBody(name='body'),
}

async function deleteContact(request: DeleteContactRequest): DeleteContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteContact', 'POST', '/', 'json', false, 'json', request);
}

model DeleteContactGroupRequest {
  contactGroupId: long(name='ContactGroupId', description='The ID of the alert contact group.', example='123', position='Query'),
}

model DeleteContactGroupResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the alert contact group was deleted. Valid values:

*   `true`
*   `false`', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model DeleteContactGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteContactGroupResponseBody(name='body'),
}

async function deleteContactGroup(request: DeleteContactGroupRequest): DeleteContactGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteContactGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDispatchRuleRequest {
  id: string(name='Id', description='The ID of the dispatch policy.', example='12345', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model DeleteDispatchRuleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='16AF921B-8187-489F-9913-43C808B4****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model DeleteDispatchRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDispatchRuleResponseBody(name='body'),
}

async function deleteDispatchRule(request: DeleteDispatchRuleRequest): DeleteDispatchRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDispatchRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEnvCustomJobRequest {
  customJobName: string(name='CustomJobName', description='The name of the custom job.', example='job1', position='Query'),
  environmentId: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxx', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DeleteEnvCustomJobResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The result of the operation.', example='success'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='2FC13182-B9AF-4E6B-BE51-72669B7C****'),
}

model DeleteEnvCustomJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEnvCustomJobResponseBody(name='body'),
}

async function deleteEnvCustomJob(request: DeleteEnvCustomJobRequest): DeleteEnvCustomJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEnvCustomJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEnvPodMonitorRequest {
  environmentId: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxxx', position='Query'),
  namespace: string(name='Namespace', description='The namespace where the PodMonitor is located.', example='arms-prom', position='Query'),
  podMonitorName: string(name='PodMonitorName', description='The name of the PodMonitor.', example='arms-admin-pm1', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DeleteEnvPodMonitorResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The result of the operation.', example='success'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='626037F5-FDEB-45B0-804C-B3C92797****'),
}

model DeleteEnvPodMonitorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEnvPodMonitorResponseBody(name='body'),
}

async function deleteEnvPodMonitor(request: DeleteEnvPodMonitorRequest): DeleteEnvPodMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEnvPodMonitor', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEnvServiceMonitorRequest {
  environmentId: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxxx', position='Query'),
  namespace: string(name='Namespace', description='The namespace where the ServiceMonitor is located.', example='arms-prom', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  serviceMonitorName: string(name='ServiceMonitorName', description='The name of the ServiceMonitor.', example='arms-admin1', position='Query'),
}

model DeleteEnvServiceMonitorResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: string(name='Data', description='The result of the operation.', example='success'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
}

model DeleteEnvServiceMonitorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEnvServiceMonitorResponseBody(name='body'),
}

async function deleteEnvServiceMonitor(request: DeleteEnvServiceMonitorRequest): DeleteEnvServiceMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEnvServiceMonitor', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEnvironmentRequest {
  deletePromInstance?: boolean(name='DeletePromInstance', description='Specifies whether to delete the related Prometheus instance.', example='true', position='Query'),
  environmentId: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxxx', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DeleteEnvironmentResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The result of the operation.', example='success'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model DeleteEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEnvironmentResponseBody(name='body'),
}

async function deleteEnvironment(request: DeleteEnvironmentRequest): DeleteEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEnvironment', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEnvironmentFeatureRequest {
  environmentId: string(name='EnvironmentId', description='The ID of the environment.', example='env-xxx', position='Query'),
  featureName: string(name='FeatureName', description='The feature name. Valid values: app-agent-pilot, metric-agent, ebpf-agent, and service-check.', example='metric-agent', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. Valid values: cn-beijing and cn-hangzhou.', example='cn-hangzhou', position='Query'),
}

model DeleteEnvironmentFeatureResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: string(name='Data', description='The returned message.', example='success'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='2A0CEDF1-06FE-44AC-8E21-21A5BE65****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model DeleteEnvironmentFeatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEnvironmentFeatureResponseBody(name='body'),
}

async function deleteEnvironmentFeature(request: DeleteEnvironmentFeatureRequest): DeleteEnvironmentFeatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEnvironmentFeature', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEventBridgeIntegrationRequest {
  id: long(name='Id', description='Required. The ID of the EventBridge notification integration. You can call the **ListEventBridgeIntegrations** operation to query the ID.', example='123', position='Body'),
}

model DeleteEventBridgeIntegrationResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the EventBridge integration is deleted.

*   `true`
*   `false`', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='2B289756-E791-5842-BCBD-AD414C******'),
}

model DeleteEventBridgeIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEventBridgeIntegrationResponseBody(name='body'),
}

async function deleteEventBridgeIntegration(request: DeleteEventBridgeIntegrationRequest): DeleteEventBridgeIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEventBridgeIntegration', 'POST', '/', 'json', true, 'form', request);
}

model DeleteGrafanaResourceRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Body'),
  clusterName: string(name='ClusterName', description='The name of the cluster.', example='clusterNameOfTest', position='Body'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DeleteGrafanaResourceResponseBody = {
  code?: int32(name='Code', description='Status code. 200 is success, other status codes are exceptions.', example='200'),
  data?: string(name='Data', description='The message returned.', example='delete success.'),
  message?: string(name='Message', description='Returns a hint message for the result.', example='success'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='771DC66C-C5E0-59BC-A983-DD18FEE9EFFA'),
}

model DeleteGrafanaResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGrafanaResourceResponseBody(name='body'),
}

async function deleteGrafanaResource(request: DeleteGrafanaResourceRequest): DeleteGrafanaResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGrafanaResource', 'POST', '/', 'json', true, 'form', request);
}

model DeleteGrafanaWorkspaceRequest {
  grafanaWorkspaceId: string(name='GrafanaWorkspaceId', description='The ID of the workspace.', example='grafana-rnglkcdrntlhk0****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. Default value: cn-hangzhou.', example='cn-hangzhou', position='Query'),
}

model DeleteGrafanaWorkspaceResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the workspace was deleted. Valid values:

*   true
*   false', example='true'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='27E653FA-5958-45BE-8AA9-14D884DC****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
  traceId?: string(name='TraceId', description='The ID of the trace. The ID is used to query the details of a request.', example='eac0a8048716731735000007137d000b'),
}

model DeleteGrafanaWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGrafanaWorkspaceResponseBody(name='body'),
}

/**
  * *   You can delete workspaces only in Managed Service for Prometheus Beta Edition, which is `free of charge`.
  * *   You cannot delete workspaces in Managed Service for Prometheus Developer Edition, Pro Edition, and Advanced Edition. You can go to the [User Center](https://usercenter2.aliyun.com/refund/refund) to unsubscribe from workspaces.
  *
 */
async function deleteGrafanaWorkspace(request: DeleteGrafanaWorkspaceRequest): DeleteGrafanaWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGrafanaWorkspace', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIMRobotRequest {
  robotId: long(name='RobotId', description='The ID of the IM chatbot.', example='123', position='Query'),
}

model DeleteIMRobotResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the call was successful.

*   `true`: The call was successful.
*   `false`: The call failed.', example='true'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to find logs and troubleshoot issues.', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model DeleteIMRobotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIMRobotResponseBody(name='body'),
}

async function deleteIMRobot(request: DeleteIMRobotRequest): DeleteIMRobotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIMRobot', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIntegrationRequest {
  clusterId: string(name='ClusterId', description='The ID of the ACK cluster.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  integration: string(name='Integration', description='The abbreviation of the software that is supported by Application Real-Time Monitoring Service (ARMS). Valid values (case-insensitive): `ASM`, `IoT`, and `Flink`.', example='asm', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DeleteIntegrationResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: string(name='Data', description='Indicates whether the call was successful.', example='success'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
}

model DeleteIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIntegrationResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function deleteIntegration(request: DeleteIntegrationRequest): DeleteIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIntegration', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIntegrationsRequest {
  integrationId: long(name='IntegrationId', description='The ID of the alert integration.', example='1234', position='Query'),
}

model DeleteIntegrationsResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the alert integration is deleted. Valid values:

*   true
*   false', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model DeleteIntegrationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIntegrationsResponseBody(name='body'),
}

async function deleteIntegrations(request: DeleteIntegrationsRequest): DeleteIntegrationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIntegrations', 'GET', '/', 'json', false, 'json', request);
}

model DeleteNotificationPolicyRequest {
  id: long(name='Id', description='The ID of the notification policy.

For more information about how to obtain the ID of a notification policy, see [ListNotificationPolicies](~~2612375~~).', example='1234', position='Query'),
}

model DeleteNotificationPolicyResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='The ID of the request.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the notification policy.', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
}

model DeleteNotificationPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNotificationPolicyResponseBody(name='body'),
}

async function deleteNotificationPolicy(request: DeleteNotificationPolicyRequest): DeleteNotificationPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNotificationPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeletePrometheusAlertRuleRequest {
  alertId: long(name='AlertId', description='The ID of the alert rule. You can call the ListPrometheusAlertRules operation to query the ID of the alert rule.', example='3888704', minimum=0, position='Query'),
  clusterId?: string(name='ClusterId', description='The cluster ID of the Prometheus monitoring alarm rule.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
}

model DeletePrometheusAlertRuleResponseBody = {
  code?: long(name='Code', description='Status code. 200 means success, other status codes are exceptions.', example='200'),
  message?: string(name='Message', description='More Information.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9FEA6D00-317F-45E3-9004-7FB8B0B7****'),
  success?: boolean(name='Success', description='Indicates whether the alert rule was deleted. Valid values:

*   `true`: The alert rule was deleted.
*   `false`: The alert rule failed to be deleted.', example='true'),
}

model DeletePrometheusAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePrometheusAlertRuleResponseBody(name='body'),
}

async function deletePrometheusAlertRule(request: DeletePrometheusAlertRuleRequest): DeletePrometheusAlertRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePrometheusAlertRule', 'POST', '/', 'json', false, 'json', request);
}

model DeletePrometheusGlobalViewRequest {
  globalViewClusterId: string(name='GlobalViewClusterId', description='The ID of the global aggregation instance.', example='global-v2-cn-1670100631025794-amaykca4', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DeletePrometheusGlobalViewResponseBody = {
  code?: int32(name='Code', description='Status code. 200 is success, other status codes are exceptions.', example='200'),
  data?: string(name='Data', description='The response parameters in the JSON format.', example='{"Success":true,"Msg":"OK"}'),
  message?: string(name='Message', description='Additional Message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='337B8F7E-0A64-5768-9225-E9B3CF******'),
}

model DeletePrometheusGlobalViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePrometheusGlobalViewResponseBody(name='body'),
}

async function deletePrometheusGlobalView(request: DeletePrometheusGlobalViewRequest): DeletePrometheusGlobalViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePrometheusGlobalView', 'POST', '/', 'json', false, 'json', request);
}

model DeletePrometheusIntegrationRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance. Only a Prometheus instance for Container Service or a Prometheus instance for ECS is supported.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  instanceId?: long(name='InstanceId', description='The ID of the exporter.', example='2875', position='Query'),
  integrationType: string(name='IntegrationType', description='The type of the integration.', example='kafka and mysql.', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DeletePrometheusIntegrationResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  data?: string(name='Data', description='success or an error message.', example='success'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='19F54318-CC92-5567-BF66-CB029EC44C84'),
}

model DeletePrometheusIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePrometheusIntegrationResponseBody(name='body'),
}

async function deletePrometheusIntegration(request: DeletePrometheusIntegrationRequest): DeletePrometheusIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePrometheusIntegration', 'POST', '/', 'json', false, 'json', request);
}

model DeletePrometheusMonitoringRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  monitoringName: string(name='MonitoringName', description='The name of the monitoring configuration.', example='customJob1', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  type: string(name='Type', description='The type of the monitoring configuration. 
Valid values for a Prometheus instance for Container Service: serviceMonitor, podMonitor, customJob, and probe. 
Valid values for a Prometheus instance for ECS: customJob and probe.', example='probe', position='Query'),
}

model DeletePrometheusMonitoringResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The result of the operation.', example='success'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='4D6C358A-A58B-4F4B-94CE-F5AAF023****'),
}

model DeletePrometheusMonitoringResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePrometheusMonitoringResponseBody(name='body'),
}

async function deletePrometheusMonitoring(request: DeletePrometheusMonitoringRequest): DeletePrometheusMonitoringResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePrometheusMonitoring', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRetcodeAppRequest {
  appId?: string(name='AppId', description='The application ID.', example='1231', position='Query'),
  appName?: string(name='AppName', description='The name of the application.', example='test-app', position='Query'),
  pid: string(name='Pid', description='The process identifier (PID) of the application.', example='aokcdqn3ly@741623b4e91****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DeleteRetcodeAppResponseBody = {
  code?: int32(name='Code', description='Status code. 200 means success, other status codes are exceptions.', example='200'),
  data?: string(name='Data', description='Indicates whether the Browser Monitoring task was deleted. Valid values:

*   `true`
*   `false`', example='true'),
  message?: string(name='Message', description='Additional information. The value description is as follows:
- If the request is normal, return success.
- If the request is abnormal, return specific abnormal information.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='01FF8DD9-A09C-47A1-895A-B6E321BE77B6'),
  success?: boolean(name='Success', description='Whether the operation was successful:
- `true`: The operation was successful
- `false`: The operation failed', example='true'),
}

model DeleteRetcodeAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRetcodeAppResponseBody(name='body'),
}

async function deleteRetcodeApp(request: DeleteRetcodeAppRequest): DeleteRetcodeAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRetcodeApp', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRumAppRequest {
  appGroup?: string(name='AppGroup', description='The group where the application resides.', example='default', position='Query'),
  appId: string(name='AppId', description='The ID of the application.', example='b590lhguqs@28f515462******', position='Query'),
  realRegionId?: string(name='RealRegionId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model DeleteRumAppResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='4C518054-852F-4023-ABC1-4AF95FF7****'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-aek2eq4peca****'),
  result?: string(name='Result', description='The message that appears when the application is deleted.', example='Success to delete app.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values: true and false.', example='true'),
}

model DeleteRumAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRumAppResponseBody(name='body'),
}

async function deleteRumApp(request: DeleteRumAppRequest): DeleteRumAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRumApp', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRumUploadFileRequest {
  batchItems?: string(name='BatchItems', description='Information of files to be deleted in JSON array format. If a single file needs to be deleted, this field should be left empty. If multiple files need to be deleted, just fill in this field.', example='[{
    "fileName" : "test.js.map",
    "version" : "1.0.0"
  },
  {
    "fileName" : "test.dSYM",
    "version" : "1.20.1",
    "uuid" : "xxxx-xxxx-xxxx-xxxx"
  }]', position='Query'),
  fileName?: string(name='FileName', description='The file name, with the extension.', example='test.js.map', position='Query'),
  pid: string(name='Pid', description='The application ID.', example='atc889zkcf@d8deedfa9bf****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  uuid?: string(name='Uuid', description='The file ID.', example='MS4wLjAtbWFpbi4wZjM0NzRlOSxxxxxx', position='Query'),
  versionId?: string(name='VersionId', description='The version number of the file.', example='1.0.0', position='Query'),
}

model DeleteRumUploadFileResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='Indicates whether the file is deleted. If the file is deleted, "success" is returned.', example='success'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The error message.', example='Internal error, please contact the administrator.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40B10E04-81E8-4643-970D-F1B38F2E****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model DeleteRumUploadFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRumUploadFileResponseBody(name='body'),
}

/**
  * Real User Monitoring (RUM) is available only in the China (Hangzhou), Singapore, and US (Silicon Valley) regions. Select the correct endpoint.
  *
 */
async function deleteRumUploadFile(request: DeleteRumUploadFileRequest): DeleteRumUploadFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRumUploadFile', 'POST', '/', 'json', false, 'json', request);
}

model DeleteScenarioRequest {
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-zhangjaikou', position='Query'),
  scenarioId: long(name='ScenarioId', description='The ID of the business monitoring job. You can obtain the ID by calling the ListScenario operation.', example='132', minimum=1, position='Query'),
}

model DeleteScenarioResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EA24D522-AD35-47B8-8CB2-ADBC382B****'),
  result?: boolean(name='Result', description='Indicates whether the request is successful.

*   `true`: successful
*   `false`: failed', example='true'),
}

model DeleteScenarioResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteScenarioResponseBody(name='body'),
}

async function deleteScenario(request: DeleteScenarioRequest): DeleteScenarioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteScenario', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSilencePolicyRequest {
  id: long(name='Id', description='The ID of the silence policy.

For more information about how to obtain the ID of a silence policy, see [ListSilencePolicies](~~2612383~~).', example='1234', position='Query'),
}

model DeleteSilencePolicyResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the silence policy was deleted successfully. Valid values:

*   `true`: The silence policy was deleted successfully.
*   `false`: The silence policy failed to be deleted.', example='true'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **DeleteSilencePolicy**.', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
}

model DeleteSilencePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSilencePolicyResponseBody(name='body'),
}

async function deleteSilencePolicy(request: DeleteSilencePolicyRequest): DeleteSilencePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSilencePolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSourceMapRequest {
  fidList: [ string ](name='FidList', description='The IDs of the SourceMap files.', shrink='json', position='Query'),
  pid: string(name='Pid', description='The process identifier (PID) of the application.', example='atc889zkcf@d8deedfa9bf****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model DeleteSourceMapResponseBody = {
  data?: string(name='Data', description='Indicates whether the SourceMap files are deleted. Valid values:

*   success: The SourceMap files are deleted.
*   false: The SourceMap files fail to be deleted.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
}

model DeleteSourceMapResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSourceMapResponseBody(name='body'),
}

async function deleteSourceMap(request: DeleteSourceMapRequest): DeleteSourceMapResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSourceMap', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSyntheticTaskRequest {
  regionId: string(name='RegionId', description='The region ID. Default value: cn-hangzhou.', example='cn-hangzhou', position='Query'),
  taskIds: [ string ](name='TaskIds', description='The task IDs.', position='Query'),
}

model DeleteSyntheticTaskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
  result?: string(name='Result', description='Indicates whether the specified tasks are deleted.

*   `true`: The tasks are deleted.
*   `false`: The tasks fail to be deleted.', example='true'),
}

model DeleteSyntheticTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSyntheticTaskResponseBody(name='body'),
}

async function deleteSyntheticTask(request: DeleteSyntheticTaskRequest): DeleteSyntheticTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSyntheticTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTimingSyntheticTaskRequest {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-aek2eq4peca****', position='Query'),
  taskId?: string(name='TaskId', description='The ID of the synthetic monitoring task.', example='5308a2691f59422c8c3b7aeccec9cd3b', position='Query'),
}

model DeleteTimingSyntheticTaskResponseBody = {
  code?: long(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the synthetic monitoring task was deleted. true: The synthetic monitoring task was deleted. false: The synthetic monitoring task failed to be deleted.', example='true'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
}

model DeleteTimingSyntheticTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTimingSyntheticTaskResponseBody(name='body'),
}

async function deleteTimingSyntheticTask(request: DeleteTimingSyntheticTaskRequest): DeleteTimingSyntheticTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTimingSyntheticTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTraceAppRequest {
  appId: string(name='AppId', description='The ID of the application that you want to delete. You can call the SearchTraceAppByName operation to query the application ID. For more information, see [SearchTraceAppByName](~~130676~~).', example='5406**', position='Query'),
  deleteReason?: {
    reasonIds?: [ 
      {
        id?: int32(name='Id', description='The ID of the reason for deletion.', example='0'),
        name?: string(name='Name', description='A description of the reason for removal.', example='The function is not perfect, and the root cause of the problem cannot be located.'),
      }
    ](name='ReasonIds', description='Reasons Ids.'),
    remark?: string(name='Remark', description='Additional remarks when none of the reasons for removal provided are met.', example='The business scenario cannot be satisfied.'),
  }(name='DeleteReason', description='The reason(s) to delete application.', shrink='json', position='Query'),
  pid: string(name='Pid', description='The PID of the application. For more information about how to query the PID, see [QueryMetricByPage](https://www.alibabacloud.com/help/zh/doc-detail/186100.htm?spm=a2cdw.13409063.0.0.7a72281f0bkTfx#title-imy-7gj-qhr).', example='9w0sc5gxxz@edcsd447c2f****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the application is located.', example='cn-hangzhou', position='Query'),
  type: string(name='Type', description='The type of the application that you want to delete. You can call the SearchTraceAppByName operation to query the application type. For more information, see [SearchTraceAppByName](~~130676~~). Valid values:

*   `TRACE`: Application Monitoring
*   `RETCODE`: frontend monitoring', example='TRACE', position='Query'),
}

model DeleteTraceAppResponseBody = {
  code?: long(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The response in JSON format, including the HTTP status code, error code, response message, and trace ID.', example='"{\\\\"code\\\\":200,\\\\"data\\\\":\\\\"{\\\\\\\\\\"code\\\\\\\\\\":200,\\\\\\\\\\"data\\\\\\\\\\":true,\\\\\\\\\\"errorCode\\\\\\\\\\":\\\\\\\\\\"The application is deleted\\\\\\\\\\",\\\\\\\\\\"message\\\\\\\\\\":\\\\\\\\\\"The application is deleted\\\\\\\\\\",\\\\\\\\\\"success\\\\\\\\\\":true,\\\\\\\\\\"traceId\\\\\\\\\\":\\\\\\\\\\"0bc0594d15954826692915817e\\*\\*\\*\\*\\\\\\\\\\"}\\\\",\\\\"errorCode\\\\":\\\\"The application is deleted\\\\",\\\\"message\\\\":\\\\"The application is deleted\\\\",\\\\"success\\\\":true,\\\\"traceId\\\\":\\\\"0ab2646915954826692568137d\\*\\*\\*\\*\\\\"}'),
  message?: string(name='Message', description='The returned message.', example='Internal error. Please try again. Contact the DingTalk service account if the issue                              persists after multiple retries.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='46355DD8-FC56-40C5-BFC6-269DE4F9****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

true: The request was successful.

false: The request failed.', example='true'),
}

model DeleteTraceAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTraceAppResponseBody(name='body'),
}

async function deleteTraceApp(request: DeleteTraceAppRequest): DeleteTraceAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTraceApp', 'POST', '/', 'json', false, 'json', request);
}

model DeleteWebhookContactRequest {
  webhookId: long(name='WebhookId', description='The ID of the webhook alert contact.', example='123', position='Query'),
}

model DeleteWebhookContactResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the webhook alert contact was deleted.

*   `true`
*   `false`', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model DeleteWebhookContactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWebhookContactResponseBody(name='body'),
}

async function deleteWebhookContact(request: DeleteWebhookContactRequest): DeleteWebhookContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWebhookContact', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAddonReleaseRequest {
  environmentId: string(name='EnvironmentId', description='The environment ID.', example='env-xxx', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  releaseName: string(name='ReleaseName', description='The name of the add-on release.', example='agent-822567d4-2449', position='Query'),
}

model DescribeAddonReleaseResponseBody = {
  code?: string(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: {
    config?: string(name='Config', description='The configuration information of the add-on release.', example='{"host":"mysql-service.default","port":3306,"username":"root","password":"roots"}'),
    release?: {
      addonName?: string(name='AddonName', description='The name of the add-on.', example='mysql'),
      alertRuleCount?: long(name='AlertRuleCount', description='The number of alert rules.', example='1'),
      conditions?: [ 
        {
          firstTransitionTime?: string(name='FirstTransitionTime', description='The first transition time.', example='2018-01-31T14:32:19Z'),
          lastTransitionTime?: string(name='LastTransitionTime', description='The last transition time.', example='2018-01-31T14:32:19Z'),
          message?: string(name='Message', description='The returned message.', example='xxxx'),
          reason?: string(name='Reason', description='The reason for the failure.', example='xxxx'),
          status?: string(name='Status', description='The status of the phase.', example='True'),
          type?: string(name='Type', description='The type of the phase.', example='Loaded'),
        }
      ](name='Conditions', description='The installation phase.'),
      createTime?: string(name='CreateTime', description='The time when the add-on was created.', example='2023-09-22T16:56:29+08:00'),
      dashboardCount?: long(name='DashboardCount', description='The number of dashboards.', example='1'),
      environmentId?: string(name='EnvironmentId', description='The environment ID.', example='env-xxxx'),
      exporterCount?: long(name='ExporterCount', description='The number of exporters.', example='2'),
      haveConfig?: boolean(name='HaveConfig', description='Indicates whether the configuration is available.', example='true'),
      installUserId?: string(name='InstallUserId', description='The user ID.', example='23810923891'),
      language?: string(name='Language', description='The language.', example='zh'),
      managed?: boolean(name='Managed', description='Indicates whether the component is fully managed.'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-heyuan'),
      releaseId?: string(name='ReleaseId', description='The release ID after installation.', example='be29c093-3fd6-4fb6-9430-797030cc183a'),
      releaseName?: string(name='ReleaseName', description='The name of the release.', example='mysql-1695372983039'),
      scene?: string(name='Scene', description='The scenario.', example='database'),
      status?: string(name='Status', description='The status.', example='0'),
      updateTime?: string(name='UpdateTime', description='The time when the add-on was updated.', example='2023-09-22T16:56:29+08:00'),
      userID?: string(name='UserID', description='The user ID.', example='13818734031'),
      version?: string(name='Version', description='The version of the add-on.', example='0.0.1'),
    }(name='Release', description='The release information.'),
  }(name='Data', description='The release information.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model DescribeAddonReleaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAddonReleaseResponseBody(name='body'),
}

async function describeAddonRelease(request: DescribeAddonReleaseRequest): DescribeAddonReleaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAddonRelease', 'POST', '/', 'json', false, 'json', request);
}

model DescribeContactGroupsRequest {
  contactGroupName?: string(name='ContactGroupName', description='The name of the alert contact group.', example='TestGroup', position='Query'),
  groupIds?: string(name='GroupIds', description='The ID of the alert contact group.', example='12345', position='Query'),
  isDetail?: boolean(name='IsDetail', description='Specifies whether to return all the alert contacts in the queried alert contact group. Valid values:

*   `false`
*   `true`', example='true', position='Query'),
  page: long(name='Page', description='The number of the page to return.', example='1', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  size: long(name='Size', description='The number of alert contact groups displayed on each page.', example='20', position='Query'),
}

model DescribeContactGroupsResponseBody = {
  pageBean?: {
    alertContactGroups?: [ 
      {
        armsContactGroupId?: long(name='ArmsContactGroupId', description='The ID of the alert contact group.', example='83261'),
        contactGroupId?: float(name='ContactGroupId', description='The ID of the alert contact group.', example='123'),
        contactGroupName?: string(name='ContactGroupName', description='The name of the alert contact group.', example='TestGroup'),
        contacts?: [ 
          {
            armsContactId?: long(name='ArmsContactId', description='The ID of the alert contact.', example='100117'),
            contactId?: float(name='ContactId', description='The ID of the alert contact.', example='456'),
            contactName?: string(name='ContactName', description='The name of the alert contact.', example='John Doe'),
            email?: string(name='Email', description='The email address of the alert contact.', example='someone@example.com'),
            phone?: string(name='Phone', description='The mobile number of the alert contact.', example='1381111****'),
          }
        ](name='Contacts', description='The contact information. If the **IsDetail** parameter is set to `false`, no **contact** information is displayed.'),
      }
    ](name='AlertContactGroups', description='The name of the alert contact group.'),
    page?: long(name='Page', description='The page number of the returned page.', example='1'),
    size?: long(name='Size', description='The number of alert contact groups displayed on each page.', example='20'),
    total?: long(name='Total', description='The total number of alert contact groups.', example='1'),
  }(name='PageBean', description='The objects that were returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4D6C358A-A58B-4F4B-94CE-F5AAF023****'),
}

model DescribeContactGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeContactGroupsResponseBody(name='body'),
}

async function describeContactGroups(request: DescribeContactGroupsRequest): DescribeContactGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeContactGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeContactsRequest {
  contactIds?: string(name='ContactIds', description='The ID of the alert contact that you want to query. Separate multiple contact IDs with spaces.', example='123,321', position='Query'),
  contactName?: string(name='ContactName', description='The name of the alert contact.', example='John Doe', position='Query'),
  email?: string(name='Email', description='The email address of the alert contact.', example='someone@example.com', position='Query'),
  page: long(name='Page', description='The number of the page to return.', example='1', position='Query'),
  phone?: string(name='Phone', description='The mobile number of the alert contact.', example='1381111*****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  size: long(name='Size', description='The number of alert contacts to return on each page.', example='20', position='Query'),
  verbose?: string(name='Verbose', description='Specifies whether to return redundant information.', example='true', position='Query'),
}

model DescribeContactsResponseBody = {
  pageBean?: {
    alertContacts?: [ 
      {
        armsContactId?: long(name='ArmsContactId', description='The ID of the alert contact.', example='100147'),
        contactId?: float(name='ContactId', description='The ID of the alert contact.', example='123'),
        contactName?: string(name='ContactName', description='The name of the alert contact.', example='John Doe'),
        email?: string(name='Email', description='The email address of the alert contact.', example='someone@example.com'),
        isEmailVerify?: boolean(name='IsEmailVerify', description='Indicates whether the email address was verified.', example='true'),
        isVerify?: boolean(name='IsVerify', description='Indicates whether the mobile number was verified. Valid values:

*   `false`: no
*   `true`: yes', example='false'),
        phone?: string(name='Phone', description='The mobile number of the alert contact.', example='1381111****'),
        reissueSendNotice?: long(name='ReissueSendNotice', description='The operation that you want to perform if phone calls fail to be answered. Valid values:

*   0: No operation is performed.
*   1: A phone call is made again.
*   2: A text message is sent.
*   3 (default value): The global default value is used.', example='3'),
      }
    ](name='AlertContacts', description='The alert contacts.'),
    page?: long(name='Page', description='The page number of the returned page.', example='1'),
    size?: long(name='Size', description='The number of alert contacts returned per page.', example='20'),
    total?: long(name='Total', description='The total number of alert contacts.', example='1'),
  }(name='PageBean', description='The objects that were returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='21E85B16-75A6-429A-9F65-8AAC9A54****'),
}

model DescribeContactsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeContactsResponseBody(name='body'),
}

async function describeContacts(request: DescribeContactsRequest): DescribeContactsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeContacts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDispatchRuleRequest {
  id: string(name='Id', description='The ID of the dispatch policy.', example='12345', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model DescribeDispatchRuleResponseBody = {
  dispatchRule?: {
    dispatchType?: string(name='DispatchType', description='Alarm handling method.

CREATE_ALERT: Generate an alert.

DISCARD_ALERT: Discard the alarm event, that is, no alarm.', example='CREATE_ALERT'),
    groupRules?: [ 
      {
        groupId?: long(name='GroupId', description='The ID of the group.', example='1'),
        groupInterval?: long(name='GroupInterval', description='The grouping interval.', example='15'),
        groupWaitTime?: long(name='GroupWaitTime', description='The waiting time for grouping.', example='10'),
        groupingFields?: [ string ](name='GroupingFields', description='The grouping fields.'),
        repeatInterval?: long(name='RepeatInterval', description='The time interval at which a notification is resent for a long-lasting unresolved alert. Unit: seconds.', example='20'),
      }
    ](name='GroupRules', description='The information about groups.'),
    isRecover?: boolean(name='IsRecover', description='Whether to send recovered alerts.
true: send.
false: do not send.', example='true'),
    labelMatchExpressionGrid?: {
      labelMatchExpressionGroups?: [ 
        {
          labelMatchExpressions?: [ 
            {
              key?: string(name='Key', description='The key of the tag of the dispatch rule. Valid values:

*   `_aliyun_arms_userid`: user ID
*   `_aliyun_arms_involvedObject_kind`: type of the associated object
*   `_aliyun_arms_involvedObject_id`: ID of the associated object
*   `_aliyun_arms_involvedObject_name`: name of the associated object
*   `_aliyun_arms_alert_name`: alert name
*   `_aliyun_arms_alert_rule_id`: alert rule ID
*   `_aliyun_arms_alert_type`: alert type
*   `_aliyun_arms_alert_level`: alert severity', example='_aliyun_arms_involvedObject_kind'),
              operator?: string(name='Operator', description='The operator used in the dispatch rule. Valid values:

*   `eq`: equals to.
*   `re`: matches a regular expression.', example='eq'),
              value?: string(name='Value', description='The value of the tag.', example='app'),
            }
          ](name='LabelMatchExpressions', description='The collection of conditions of the dispatch rule.'),
        }
      ](name='LabelMatchExpressionGroups', description='The collection of dispatch rules.'),
    }(name='LabelMatchExpressionGrid', description='The information about the dispatch rule.'),
    name?: string(name='Name', description='The name of the dispatch policy.', example='Prometheus Alert'),
    notifyRules?: [ 
      {
        notifyChannels?: [ string ](name='NotifyChannels', description='The notification method Array.'),
        notifyObjects?: [ 
          {
            name?: string(name='Name', description='The name of the contact or contact group.', example='JohnDoe'),
            notifyObjectId?: string(name='NotifyObjectId', description='The ID of the contact or contact group.', example='1'),
            notifyType?: string(name='NotifyType', description='The type of the alert contact. Valid values:

- `CONTACT`: contact
- `CONTACT_GROUP`: contact group', example='CONTACT'),
          }
        ](name='NotifyObjects', description='The collection of alert contacts.'),
      }
    ](name='NotifyRules', description='The collection of notification methods.'),
    ruleId?: long(name='RuleId', description='The ID of the dispatch rule.', example='10282'),
    state?: string(name='State', description='Indicates whether the dispatch policy is enabled. Valid values: 

- `true`: enabled
- `false`: disabled', example='true'),
  }(name='DispatchRule', description='The struct returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model DescribeDispatchRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDispatchRuleResponseBody(name='body'),
}

async function describeDispatchRule(request: DescribeDispatchRuleRequest): DescribeDispatchRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDispatchRule', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEnvCustomJobRequest {
  customJobName: string(name='CustomJobName', description='The name of the custom job.', example='customJob1', position='Query'),
  encryptYaml?: boolean(name='EncryptYaml', description='Specifies whether to return an encrypted YAML string.', example='true', position='Query'),
  environmentId: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxxx', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DescribeEnvCustomJobResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    configYaml?: string(name='ConfigYaml', description='If the **encryptYaml** parameter is set to `true`, a Base64-encoded YAML string is returned. Otherwise, a plaintext YAML string is returned.', example='Refer to supplementary instructions.'),
    customJobName?: string(name='CustomJobName', description='The name of the custom job.', example='customJob1'),
    environmentId?: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxx'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    status?: string(name='Status', description='The status. Valid values:

*   run
*   stop', example='run'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='6A9AEA84-7186-4D8D-B498-4585C6A2****'),
}

model DescribeEnvCustomJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEnvCustomJobResponseBody(name='body'),
}

async function describeEnvCustomJob(request: DescribeEnvCustomJobRequest): DescribeEnvCustomJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEnvCustomJob', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEnvPodMonitorRequest {
  environmentId: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxx', position='Query'),
  namespace: string(name='Namespace', description='The namespace where the PodMonitor resides.', example='arms-prom', position='Query'),
  podMonitorName: string(name='PodMonitorName', description='The name of the PodMonitor.', example='arms-admin-pm1', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DescribeEnvPodMonitorResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    configYaml?: string(name='ConfigYaml', description='The YAML string of the PodMonitor.', example='Refer to supplementary instructions.'),
    environmentId?: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxx'),
    namespace?: string(name='Namespace', description='The namespace.', example='arms-prom'),
    podMonitorName?: string(name='PodMonitorName', description='The name of the PodMonitor.', example='podMonitor1'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    status?: string(name='Status', description='The status. Valid values:

*   run
*   stop', example='run'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
}

model DescribeEnvPodMonitorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEnvPodMonitorResponseBody(name='body'),
}

async function describeEnvPodMonitor(request: DescribeEnvPodMonitorRequest): DescribeEnvPodMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEnvPodMonitor', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEnvServiceMonitorRequest {
  environmentId: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxx', position='Query'),
  namespace: string(name='Namespace', description='The namespace where the ServiceMonitor resides.', example='arms-prom', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  serviceMonitorName: string(name='ServiceMonitorName', description='The name of the ServiceMonitor.', example='arms-admin1', position='Query'),
}

model DescribeEnvServiceMonitorResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: {
    configYaml?: string(name='ConfigYaml', description='The YAML configuration file of the ServiceMonitor.', example='Refer to supplementary instructions.'),
    environmentId?: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxx'),
    namespace?: string(name='Namespace', description='The namespace.', example='arms-prom'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    serviceMonitorName?: string(name='ServiceMonitorName', description='The name of the ServiceMonitor.', example='serviceMonitor1'),
    status?: string(name='Status', description='The status. Valid values:

*   run
*   stop', example='run'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='40B10E04-81E8-4643-970D-F1B38F2E****'),
}

model DescribeEnvServiceMonitorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEnvServiceMonitorResponseBody(name='body'),
}

async function describeEnvServiceMonitor(request: DescribeEnvServiceMonitorRequest): DescribeEnvServiceMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEnvServiceMonitor', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEnvironmentRequest {
  environmentId: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxx', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DescribeEnvironmentResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: {
    bindResourceId?: string(name='BindResourceId', description='The ID of the resource associated with the environment, such as the ACK cluster ID or VPC ID.', example='vpc-xxxxx'),
    bindResourceProfile?: string(name='BindResourceProfile', description='The profile of the resource.', example='Default'),
    bindResourceStatus?: string(name='BindResourceStatus', description='The status of the resource.', example='running'),
    bindResourceStoreDuration?: string(name='BindResourceStoreDuration', description='The retention period of the resource. Unit: days.', example='15'),
    bindResourceType?: string(name='BindResourceType', description='The resource type.', example='ECS'),
    bindVpcCidr?: string(name='BindVpcCidr', description='The VPC CIDR block.', example='192.168.0.0/16'),
    dbInstanceStatus?: string(name='DbInstanceStatus', description='The status of the database that is bound to the Prometheus instance.

Valid values:

*   UNINSTALLING

    <!-- -->

    <!-- -->

    <!-- -->

*   INSTALLING

    <!-- -->

    <!-- -->

    <!-- -->

*   UNINSTALLED

    <!-- -->

    <!-- -->

    <!-- -->

*   RUNNING

    <!-- -->

    <!-- -->

    <!-- -->

*   MODIFYING

    <!-- -->

    <!-- -->

    <!-- -->', example='RUNNING'),
    environmentId?: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxx'),
    environmentName?: string(name='EnvironmentName', description='The environment name.', example='env1'),
    environmentSubType?: string(name='EnvironmentSubType', description='Environment subtypes:
- CS: Currently supports ACK.
- ECS: ECS is currently supported.
- Cloud: Currently supports Cloud.', example='ACK'),
    environmentType?: string(name='EnvironmentType', description='The type of the environment. Valid values:

*   CS: Container Service for Kubernetes (ACK)
*   ECS: Elastic Compute Service
*   Cloud: cloud service', example='CS'),
    feePackage?: string(name='FeePackage', description='The payable resource plan. Valid values:

*   If the EnvironmentType parameter is set to CS, set the value to CS_Basic or CS_Pro.
*   Otherwise, leave the parameter empty.', example='CS_Basic'),
    grafaDataSourceName?: string(name='GrafaDataSourceName', description='The name of the Grafana data source.', example='datasource1'),
    grafanaDatasourceUid?: string(name='GrafanaDatasourceUid', description='The unique ID of the Grafana data source.', example='zuvw'),
    grafanaFolderTitle?: string(name='GrafanaFolderTitle', description='The name of the Grafana directory.', example='folder1'),
    grafanaFolderUid?: string(name='GrafanaFolderUid', description='The unique ID of the Grafana directory.', example='xyz'),
    grafanaFolderUrl?: string(name='GrafanaFolderUrl', description='The URL of the Grafana directory.', example='https://g.console.aliyun.com/dashboards/f/xxx/yyyy'),
    grafanaWorkspaceId?: string(name='GrafanaWorkspaceId', description='The ID of the Grafana workspace.', example='grafana-cn-27a3m8eem0a'),
    managedType?: string(name='ManagedType', description='managed type:
- none: unmanaged. The default value for ACK clusters.
- agent: managed agent (including KSM). The default values for ASK, ACS, and AckOne clusters.
- agent-exporter: managed agent and exporters. The default value for the cloud service type.', example='none'),
    prometheusInstanceId?: string(name='PrometheusInstanceId', description='The ID of the Prometheus instance.', example='xxxxyyyyyzzzzz'),
    prometheusInstanceName?: string(name='PrometheusInstanceName', description='The name of the Prometheus instance.', example='name1'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aek2vezare****'),
    securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group associated with the environment.'),
    tags?: [ 
      {
        key?: string(name='Key', description='The tag key.', example='user1'),
        value?: string(name='Value', description='The tag value.', example='p_dev'),
      }
    ](name='Tags', description='The tags.'),
    userId?: string(name='UserId', description='The user ID.', example='13002222xxxx'),
    vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-8vb02uk57qbcktqcvqqqj'),
    vswitchId?: string(name='VswitchId', description='The switch ID bound to the environment.'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model DescribeEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEnvironmentResponseBody(name='body'),
}

async function describeEnvironment(request: DescribeEnvironmentRequest): DescribeEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEnvironment', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEnvironmentFeatureRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values: en and zh.', example='en', position='Query'),
  environmentId: string(name='EnvironmentId', description='The environment ID.', example='env-xxx', position='Query'),
  featureName: string(name='FeatureName', description='The name of the feature.

Valid values:

*   app-agent-pilot: App Pilot agent
*   arms-cmonitor: ARMS CMonitor agent
*   metric-agent: Prometheus agent', example='metric-agent', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DescribeEnvironmentFeatureResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    feature?: {
      alias?: string(name='Alias', description='The alias of the feature.', example='Prometheus agent.'),
      config?: map[string]string(name='Config', description='The configuration of the feature.'),
      description?: string(name='Description', description='The description of the feature.', example='Collect Metric data using the Prometheus collection specification.'),
      environmentId?: string(name='EnvironmentId', description='The environment ID.', example='env-xxxxx'),
      icon?: string(name='Icon', description='The URL of the icon.', example='http://xxx'),
      language?: string(name='Language', description='The language.', example='zh'),
      latestVersion?: string(name='LatestVersion', description='The latest version number.', example='1.1.17'),
      managed?: boolean(name='Managed', description='Indicates whether the component is fully managed.'),
      name?: string(name='Name', description='The name of the feature.', example='metric-agent'),
      status?: string(name='Status', description='The installation status of the agent.

*   Installing: The agent is being installed.
*   Success: The agent is installed.
*   Failed: The agent failed to be installed.
*   UnInstall: The agent is uninstalled or has not been installed.
*   Uninstalling: The agent is being uninstalled.
*   UnInstallFailed: The agent failed to be uninstalled.', example='Success'),
      version?: string(name='Version', description='The version number.', example='1.1.17'),
    }(name='Feature', description='The installation information about the feature.'),
    featureStatus?: {
      bindResourceId?: string(name='BindResourceId', description='The ID of the resource.', example='c013823b55e4b4d6bb6b6f28682bd38a7'),
      featureContainers?: [ 
        {
          args?: [ string ](name='Args', description='The container parameters.'),
          image?: string(name='Image', description='The container image.', example='registry-cn-hangzhou-vpc.ack.aliyuncs.com/acs/arms-prometheus-agent:v4.0.0'),
          name?: string(name='Name', description='The container name.', example='arms-prometheus-operator'),
        }
      ](name='FeatureContainers', description='The containers of the feature.'),
      ips?: [ string ](name='Ips', description='The IP address of the pod.'),
      name?: string(name='Name', description='The Kubernetes resource name of the feature.', example='arms-prometheus-ack-arms-prometheus'),
      namespace?: string(name='Namespace', description='The namespace.', example='arms-prom'),
      securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-bp1c9fcexoalq9po6cp8'),
      status?: string(name='Status', description='The status of the agent. Valid values:

*   Success: The agent is running.
*   Failed: The agent failed to run.
*   Not Found: The agent is not installed.', example='Success'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-bp1qt6ict0dbxgv4wer8l'),
    }(name='FeatureStatus', description='The status of the feature.'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='01FF8DD9-A09C-47A1-895A-B6E321BE77B6'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model DescribeEnvironmentFeatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEnvironmentFeatureResponseBody(name='body'),
}

async function describeEnvironmentFeature(request: DescribeEnvironmentFeatureRequest): DescribeEnvironmentFeatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEnvironmentFeature', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIMRobotsRequest {
  page: long(name='Page', description='The number of the page to return.', example='1', position='Query'),
  robotIds?: string(name='RobotIds', description='The chatbot IDs.', example='123', position='Query'),
  robotName?: string(name='RobotName', description='The name of the IM chatbot.', example='Chatbot name', position='Query'),
  size: long(name='Size', description='The number of IM chatbots to return on each page.', example='20', position='Query'),
}

model DescribeIMRobotsResponseBody = {
  pageBean?: {
    alertIMRobots?: [ 
      {
        createTime?: string(name='CreateTime', description='The time when the IM chatbot was created.', example='2023-01-16 17:21:48'),
        dailyNoc?: boolean(name='DailyNoc', description='Indicates whether daily statistics are sent. Valid values:

*   `false` (default): Daily statistics are not sent.
*   `true`: Daily statistics are sent.', example='true'),
        dailyNocTime?: string(name='DailyNocTime', description='The point in time at which the daily statistics are sent. The information that ARMS sends at the specified points in time includes the total number of alerts generated on the current day, the number of cleared alerts, and the number of alerts to be cleared.', example='09:30,17:30'),
        dingSignKey?: string(name='DingSignKey', description='The signature key of DingTalk. If you specify a signature key, DingTalk authentication is performed by using the signature key. If you do not specify a signature key, a whitelist is used for authentication by default. The keyword of the whitelist is **Alert**.', example='******'),
        dispatchRules?: [ 
          {
            id?: long(name='id', description='The ID of the notification policy.', example='12345'),
            name?: string(name='name', description='The name of the notification policy.', example='Notification policy test'),
          }
        ](name='DispatchRules', description='The notification policies.'),
        robotAddr?: string(name='RobotAddr', description='The webhook URL of the IM chatbot.', example='https://oapi.dingtalk.com/robot/send?access_token=e1a049121******'),
        robotId?: float(name='RobotId', description='The ID of the IM chatbot.', example='123'),
        robotName?: string(name='RobotName', description='The name of the IM chatbot.', example='Chatbot name'),
        type?: string(name='Type', description='The type of the IM chatbot. Valid values:

*   `dingding`: DingTalk chatbot
*   `wechat`: WeCom chatbot', example='dingding'),
      }
    ](name='AlertIMRobots', description='The queried IM chatbots.'),
    page?: long(name='Page', description='The page number of the returned page.', example='1'),
    size?: long(name='Size', description='The number of IM chatbots returned per page.', example='20'),
    total?: long(name='Total', description='The total number of queried IM chatbots.', example='1'),
  }(name='PageBean', description='The returned objects.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4D6C358A-A58B-4F4B-94CE-F5AAF023****'),
}

model DescribeIMRobotsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeIMRobotsResponseBody(name='body'),
}

async function describeIMRobots(request: DescribeIMRobotsRequest): DescribeIMRobotsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIMRobots', 'POST', '/', 'json', false, 'json', request);
}

model DescribePrometheusAlertRuleRequest {
  alertId: long(name='AlertId', description='The ID of the alert rule. You can call the ListPrometheusAlertRules operation to query the ID of the alert rule.', example='3888704', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
}

model DescribePrometheusAlertRuleResponseBody = {
  code?: long(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='success'),
  prometheusAlertRule?: {
    alertId?: long(name='AlertId', description='The ID of the alert rule.', example='3888704'),
    alertName?: string(name='AlertName', description='The name of the alert rule.', example='Prometheus_Alert'),
    annotations?: [ 
      {
        name?: string(name='Name', description='The name of the annotation.', example='message'),
        value?: string(name='Value', description='The value of the annotation.', example='The CPU utilization of ${{$labels.pod_name}} has exceeded 80%. Current value: {{$value}}%'),
      }
    ](name='Annotations', description='The annotations of the alert rule.'),
    clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='c0bad479465464e1d8c1e641b0afb****'),
    dispatchRuleId?: long(name='DispatchRuleId', description='The ID of the notification policy. This parameter is returned if the **NotifyType** parameter is set to `DISPATCH_RULE`.', example='10282'),
    duration?: string(name='Duration', description='The duration of the alert. Valid values: 1 to 1440. Unit: minutes.', example='1m'),
    expression?: string(name='Expression', description='The expression of the alert rule.', example='100 * (sum(rate(container_cpu_usage_seconds_total[1m])) by (pod_name) / sum(label_replace(kube_pod_container_resource_limits_cpu_cores, \\"pod_name\\", \\"$1\\", \\"pod\\", \\"(.*)\\")) by (pod_name))>75'),
    labels?: [ 
      {
        name?: string(name='Name', description='The name of the tag.', example='severity'),
        value?: string(name='Value', description='The value of the tag.', example='critical'),
      }
    ](name='Labels', description='The tags of the alert rule.'),
    message?: string(name='Message', description='The alert message. Tags can be referenced in the {{$labels.xxx}} format.', example='The CPU utilization of ${{$labels.pod_name}} has exceeded 80%. Current value: {{$value}}%'),
    notifyType?: string(name='NotifyType', description='The method of that is used to send alert notifications. Valid values:

*   `ALERT_MANAGER`: Alert notifications are sent by Operation Center.
*   `DISPATCH_RULE`: Alert notifications are sent based on the specified notification policy.', example='ALERT_MANAGER'),
    status?: int32(name='Status', description='Indicates whether the alert rule is enabled. Valid values:

*   `1`: The alert rule is enabled.
*   `0`: The alert rule is disabled.', example='1'),
    type?: string(name='Type', description='The type of the alert rule.', example='Kubernetes component alert'),
  }(name='PrometheusAlertRule', description='The returned struct.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9FEA6D00-317F-45E3-9004-7FB8B0B7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='True'),
}

model DescribePrometheusAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePrometheusAlertRuleResponseBody(name='body'),
}

async function describePrometheusAlertRule(request: DescribePrometheusAlertRuleRequest): DescribePrometheusAlertRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePrometheusAlertRule', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTraceLicenseKeyRequest {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DescribeTraceLicenseKeyResponseBody = {
  licenseKey?: string(name='LicenseKey', description='The license key for the application.', example='b590lhguqs@3a75d95f218****'),
  requestId?: string(name='RequestId', description='The request ID.', example='29053944-6FE5-4240-8927-10095ECE****'),
}

model DescribeTraceLicenseKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTraceLicenseKeyResponseBody(name='body'),
}

async function describeTraceLicenseKey(request: DescribeTraceLicenseKeyRequest): DescribeTraceLicenseKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTraceLicenseKey', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebhookContactsRequest {
  contactIds?: string(name='ContactIds', description='The ID of the alert contact.', example='123', position='Query'),
  page: long(name='Page', description='The number of the page to return.', example='1', position='Query'),
  size: long(name='Size', description='The number of alert contacts displayed on each page.', example='20', position='Query'),
  webhookName?: string(name='WebhookName', description='The name of the webhook alert contact.', example='Webhook name', position='Query'),
}

model DescribeWebhookContactsResponseBody = {
  pageBean?: {
    page?: long(name='Page', description='The page number of the returned page.', example='1'),
    size?: long(name='Size', description='The number of alert contacts displayed on each page.', example='20'),
    total?: long(name='Total', description='The total number of alert contacts.', example='1'),
    webhookContacts?: [ 
      {
        webhook?: {
          bizHeaders?: map[string]any(name='BizHeaders', description='The header of the HTTP request.', example='[{"Content-Type":"application/json"}]'),
          bizParams?: map[string]any(name='BizParams', description='The parameters in the HTTP request.', example='[{"content:"mike"}]'),
          body?: string(name='Body', description='The alert notification template.', example='{ "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Alert time":"{{ .startTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }'),
          method?: string(name='Method', description='The HTTP request method.

*   Get
*   Post', example='Post'),
          recoverBody?: string(name='RecoverBody', description='The notification template for clearing alerts.', example='{ "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Recovery time":"{{ .endTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }'),
          url?: string(name='Url', description='The URL of the request method.', example='https://oapi.dingtalk.com/robot/send?access_token=91f2f6****'),
        }(name='Webhook', description='The details of the webhook alert contact.'),
        webhookId?: float(name='WebhookId', description='The ID of the webhook alert contact.', example='123'),
        webhookName?: string(name='WebhookName', description='The name of the webhook alert contact.', example='Webhook name'),
      }
    ](name='WebhookContacts', description='The list of webhook alert contacts.'),
  }(name='PageBean', description='The returned objects.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4D6C358A-A58B-4F4B-94CE-F5AAF023****'),
}

model DescribeWebhookContactsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeWebhookContactsResponseBody(name='body'),
}

async function describeWebhookContacts(request: DescribeWebhookContactsRequest): DescribeWebhookContactsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebhookContacts', 'GET', '/', 'json', false, 'json', request);
}

model DoInsightsActionRequest {
  data: string(name='Data', description='The query parameters. Different module types correspond to different query parameters.

*   QueryTopo

<!---->

    {
        "regionId": string,  # The region ID.
        "startTime": string, # The beginning of the time range to query, in the yyyy-MM-dd HH:mm:ss format.
        "endTime": string, # The end of the time range to query, in the yyyy-MM-dd HH:mm:ss format.
        "edgeFilter": { # The edge filter condition.
            "includeTypes": [EdgeType], # The edge types to be included.
            "excludeTypes": [EdgeType], # The edge types to be excluded.
            "fromNodeFilter": { # The source node filter condition.
                "includeEntityTypes": [EntityType] # The entity types to be included.
                "excludeEntityTypes": [EntityType] # The entity types to be excluded.
            },
            "toNodeFilter": {  # The destination node filter condition.
                "includeEntityTypes": [EntityType] # The entity types to be included.
                "excludeEntityTypes": [EntityType] # The entity types to be excluded.
            }
        },
        "includeIsolatedNodes": bool, # Specifies whether to include isolated nodes.
        "isolatedNodeFilter": { # The isolated node filter condition.
            "includeEntityTypes": [EntityType] # The entity types to be included.
            "excludeEntityTypes": [EntityType] # The entity types to be excluded.
         },
        "queryMetrics": boolean, # Specifies whether to query related red metrics during the metric query.
        "timeoutSecs": int, # The timeout duration for querying metrics.
    	"redOption": { # A metric query option.
    		"skipRt": boolean,  # Specifies whether to skip querying the response time.
    		"skipCount": boolean, # Specifies whether to skip querying the number of requests.
    		"skipError": boolean # Specifies whether to skip querying the number of errors.
    	}
    }

*   QueryTopoRed

<!---->

    {
        "regionId": string,  # The region ID.
        "startTime": string, # The beginning of the time range to query, in the yyyy-MM-dd HH:mm:ss format.
        "endTime": string,   # The end of the time range to query, in the yyyy-MM-dd HH:mm:ss format.
        "edgeIds": [string]  # The IDs of the edges to query.
        "nodeIds": [string]  # The IDs of the nodes to query.
        "redOption": { # A metric query option.
            "skipRt": boolean,  # Specifies whether to skip querying the response time.
            "skipCount": boolean, # Specifies whether to skip querying the number of requests.
            "skipError": boolean # Specifies whether to skip querying the number of errors.
        }
    }', example='- QueryTopo


	{
		"regionId": "cn-hangzhou",
		"startTime": "2024-07-23 19:16:00",  
		"endTime": "2024-07-23 20:16:00", # Limit the topology query range to 2024-07-23 19:16:00 to 2024-07-23 20:16:00
		"edgeFilter": {
			"includeTypes": [
				"CALLS" # The resulting topology only contains edges of call relationships.
			],
			"fromNodeFilter": {
				"includeEntityTypes": [ # The source node type of the call edge must be application type
					"APPLICATION" 
				]
			},
			"toNodeFilter": {
				"includeEntityTypes": [ # The target node of the call edge must be an application type or an external service type.
					"APPLICATION",
					"EXTERNAL_SERVICE"
				]
			}
		},
		"includeIsolatedNodes": false, # The resulting topology does not contain isolated nodes
		"queryMetrics": true, # Synchronously query the RED indicator
		"timeoutSecs": 20, #It takes up to 20 seconds to query indicator data
		"redOption": { # The query indicators include time consumption, request volume, and query skip errors.
			"skipRt": false,
			"skipCount": false,
			"skipError": true
		}
	}



- QueryTopoRed


	{
		"regionId": "cn-hangzhou",
		"startTime": "2024-07-23 10:00:00",
		"endTime": "2024-07-23 14:00:00",
		"edgeIds": [
			"097843bd50b06fbe2c6c1d8b761a7e8b"
		],
		"nodeIds": [
			"23d973261c6923da1b5b7a571ec1aa8b"
		],
		"redOption": { # The query indicators include time consumption, request volume, and query skip errors.
			"skipCount": false,
			"skipError": true,
			"skipRt": false
		}
	}', position='Body'),
  module: string(name='Module', description='The module type. Valid values:

*   QueryTopo: queries the topology.
*   QueryTopoRed: queries the red topology metrics, such as the number of requests, response time, and number of errors.

Notice: The preceding features are still in canary release and are disabled by default. If you need to enable these features, submit a ticket in the Application Real-Time Monitoring Service (ARMS) console.

*
*', example='QueryTopo', position='Body'),
}

model DoInsightsActionResponseBody = {
  code?: int32(name='Code', description='Status code. 200 means success, other status codes are exceptions.', example='200'),
  data?: string(name='Data', description='The response parameters vary with the value of module.

*   QueryTopo

        {
         "nodes": [Node] # The collection of nodes. For more information, see the "Node" section of this topic.
         "edges": [Edge] # The collection of edges. For more information, see the "Edge" section of this topic.
        }

*   QueryTopoRed

        {
          "nodeRed": {
          	"nodeId": {
          		"count": double, # The total number of requests in the specified time range.
          		"error": double, # The total number of errors in the specified time range.
          		"rt": double, # The average response time in the specified time range. Unit: milliseconds.
          	}
          },
          "edgeRed": {
          	"edgeId": {
          	    "count": double, # The total number of requests in the specified time range.
          		"error": double, # The total number of errors in the specified time range.
          		"rt": double, # The average response time in the specified time range. Unit: milliseconds.
          	}
          }

}

```
```', example='- QueryTopo


	{
		"nodes": [
			{
				"nodeId": "3bfe1a747389273388182760406c079d",
				"entity": {
					"regionId": "cn-hangzhou",
					"appType": "TRACE",
					"appId": "xxxxxxxxxxxxxxxx",
					"name": "prometheus-pop-cn-hangzhou",
					"entityId": "3bfe1a747389273388182760406c079d",
					"firstSeenTms": 1721733226981,
					"lastSeenTms": 1721789171614,
					"type": "APPLICATION"
				},
				"attrs": {
					"RED": {
						"count": 643848.0,
						"error": 0.0,
						"rt": 172.31701892372112
					}
				}
			}
		],
		"edges": [
			{
				"from": "98b4184b22e588cf86e9a29aa4179606",
				"to": "98b4184b22e588cf86e9a29aa4179606",
				"type": "CALLS",
				"attrs": {
					"RED": {
						"count": 4.0,
						"error": 0.0,
						"rt": 37.0
					}
				},
				"edgeId": "5d611597e4b0013d0947615c9eca4de6",
				"firstSeenTms": 1721783795125,
				"lastSeenTms": 1721787371614
			}
		]
	}


- QueryTopoRed

	{
		"nodeRed": {
			"361d9f32e58cef316bf2355f3ff05575": {
				"count": 3258110.0,
				"error": 74.0,
				"rt": 167.39844355494878
			}
		},
		"edgeRed": {}
	}'),
  message?: string(name='Message', description='Information returned when the call fails.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='626037F5-FDEB-45B0-804C-B3C92797A64E'),
  success?: boolean(name='Success', description='Whether the query is successful:

- true
- false', example='true'),
}

model DoInsightsActionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DoInsightsActionResponseBody(name='body'),
}

async function doInsightsAction(request: DoInsightsActionRequest): DoInsightsActionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DoInsightsAction', 'POST', '/', 'json', true, 'form', request);
}

model EnableMetricRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='ccfa5e34a5c1f4ce6b916a40a12151d88', position='Query'),
  dropMetric?: string(name='DropMetric', description='The metric name.', example='kube_pod_container_status_ready', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model EnableMetricResponseBody = {
  code?: long(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The returned struct.', example='success'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='0231DA4B-3D11-5433-9376-3B5B46C7228D'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model EnableMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableMetricResponseBody(name='body'),
}

async function enableMetric(request: EnableMetricRequest): EnableMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableMetric', 'POST', '/', 'json', false, 'json', request);
}

model GetAgentDownloadUrlRequest {
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetAgentDownloadUrlResponseBody = {
  armsAgentDownloadUrl?: string(name='ArmsAgentDownloadUrl', description='The download URL of the ARMS agent.', example='http://arms-apm-hangzhou.oss-cn-hangzhou-internal.aliyuncs.com/2.7.1.1/'),
  requestId?: string(name='RequestId', description='The request ID.', example='14043452-D486-4EA1-80C9-BA73FB81****'),
}

model GetAgentDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAgentDownloadUrlResponseBody(name='body'),
}

async function getAgentDownloadUrl(request: GetAgentDownloadUrlRequest): GetAgentDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAgentDownloadUrl', 'GET', '/', 'json', false, 'json', request);
}

model GetAgentDownloadUrlV2Request {
  regionId?: string(name='RegionId', position='Host'),
  agentType: string(name='AgentType', example='JavaAgent', position='Query'),
  archType?: string(name='ArchType', example='amd64', position='Query'),
  osType?: string(name='OsType', example='linux', position='Query'),
}

model GetAgentDownloadUrlV2ResponseBody = {
  code?: long(name='Code', example='200'),
  data?: {
    url?: string(name='Url', example='http://arms-apm-cn-hangzhou.oss-cn-hangzhou-internal.aliyuncs.com/3.2.9/ArmsAgent.zip'),
    version?: string(name='Version', example='3.2.9'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='78901766-3806-4E96-8E47-CFEF59E4****'),
  success?: boolean(name='Success', example='true'),
}

model GetAgentDownloadUrlV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAgentDownloadUrlV2ResponseBody(name='body'),
}

async function getAgentDownloadUrlV2(request: GetAgentDownloadUrlV2Request): GetAgentDownloadUrlV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAgentDownloadUrlV2', 'POST', '/', 'json', false, 'json', request);
}

model GetAlertRulesRequest {
  alertIds?: string(name='AlertIds', description='The unique IDs of alert rules.

*   If you do not specify this parameter, the API operation does not filter alert rules based on their IDs.
*   If you specify this parameter, the API operation returns only the information of the specified alert rules. Other filter conditions also take effect.

> When you call the GetAlertRules operation, you can specify other request parameters to obtain the AlertIds parameter from the response. Then, you can specify the AlertIds parameter to query the specified alert rules.', example='["12345"]', position='Query'),
  alertNames?: string(name='AlertNames', description='The names of alert rules. When you create alert rules of the new version, you cannot specify duplicate names. However, existing alert rules may have duplicate names. Therefore, the **AlertName** parameter does not uniquely identify an alert rule.

*   If you do not specify this parameter, the API operation does not filter alert rules based on their names.
*   If you specify this parameter, the API operation returns only the information of the specified alert rules. Other filter conditions also take effect.', example='["test"]', position='Query'),
  alertStatus?: string(name='AlertStatus', description='The status of the alert rule. Valid values:

*   RUNNING
*   STOPPED
*   PAUSED

>  The PAUSED state indicates that the alert rule is abnormal and has been suspended. This may be because the specified threshold value is excessively large, or the associated cluster has been deleted.', example='RUNNING', position='Query'),
  alertType?: string(name='AlertType', description='The type of the alert rule. Valid values:

*   APPLICATION_MONITORING_ALERT_RULE: alert rule for Application Monitoring
*   BROWSER_MONITORING_ALERT_RULE: alert rule for Browser Monitoring
*   PROMETHEUS_MONITORING_ALERT_RULE: alert rule for Managed Service for Prometheus', example='APPLICATION_MONITORING_ALERT_RULE', position='Query'),
  clusterId?: string(name='ClusterId', description='The ID of the monitored cluster.', example='ceba9b9ea5b924dd0b6726d2de6******', position='Query'),
  page: long(name='Page', description='The number of the page to return.', example='1', position='Query'),
  productCode?: string(name='ProductCode', description='You do not need to configure this parameter.', example='null', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  size: long(name='Size', description='The number of alert rules to return on each page.', example='20', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='type'),
      value?: string(name='Value', description='The tag value.', example='prod'),
    }
  ](name='Tags', description='The list of tags.', position='Query'),
}

model GetAlertRulesResponseBody = {
  pageBean?: {
    alertRules?: [ 
      {
        alertCheckType?: string(name='AlertCheckType', description='The alert check type of the Prometheus alert rule.

*   STATIC: static threshold
*   CUSTOM: custom PromQL', example='STATIC'),
        alertGroup?: long(name='AlertGroup', description='The alert contact group ID of the Prometheus alert rule.

*   \\-1: custom PromQL
*   1: Kubernetes load
*   15: Kubernetes node', example='1'),
        alertId?: long(name='AlertId', description='The alert rule ID.', example='5730***'),
        alertName?: string(name='AlertName', description='The name of the alert rule.', example='arms-test'),
        alertRuleContent?: {
          alertRuleItems?: [ 
            {
              aggregate?: string(name='Aggregate', description='The aggregation method of the alert condition. Valid values:

*   AVG: calculates the average value
*   SUM: calculates the total value
*   MAX: selects the maximum value
*   MIN: selects the minimum value', example='AVG'),
              metricKey?: string(name='MetricKey', description='The metric of the alert condition.', example='appstat.jvm.non_heap_used'),
              n?: long(name='N', description='The last N minutes.', example='1'),
              operator?: string(name='Operator', description='The operator that is used to compare the metric value with the threshold. Valid values:

*   CURRENT_GTE: greater than or equal to
*   CURRENT_LTE: less than or equal to
*   PREVIOUS_UP: increase in percentage compared with the previous period
*   PREVIOUS_DOWN: decrease in percentage compared with the previous period
*   HOH_UP: increase in percentage compared with the same period in the previous hour
*   HOH_DOWN: decrease in percentage compared with the same period in the previous hour
*   DOD_UP: increase in percentage compared with the same period in the previous day
*   DOD_DOWN: decrease in percentage compared with the same period in the previous day', example='CURRENT_GTE'),
              value?: string(name='Value', description='The threshold of the alert condition.', example='1'),
            }
          ](name='AlertRuleItems', description='The trigger conditions of the Application Monitoring or Browser Monitoring alert rule.'),
          condition?: string(name='Condition', description='The relationship between multiple alert conditions specified for the Application Monitoring or Browser Monitoring alert rule. Valid values:

*   OR: The alert rule is triggered if one of the conditions is met.
*   AND: The alert rule is triggered if all the conditions are met.', example='OR'),
        }(name='AlertRuleContent', description='The content of the Application Monitoring or Browser Monitoring alert rule.'),
        alertStatus?: string(name='AlertStatus', description='The status of the alert rule. Valid values:

*   RUNNING
*   STOPPED
*   PAUSED

>  The PAUSED state indicates that the alert rule is abnormal and has been suspended. This may be because the specified threshold value is excessively large, or the associated cluster has been deleted.', example='RUNNING'),
        alertType?: string(name='AlertType', description='The type of the alert rule. Valid values:

*   APPLICATION_MONITORING_ALERT_RULE: alert rule for Application Monitoring
*   BROWSER_MONITORING_ALERT_RULE: alert rule for Browser Monitoring
*   PROMETHEUS_MONITORING_ALERT_RULE: Prometheus alert rule', example='APPLICATION_MONITORING_ALERT_RULE'),
        annotations?: [ 
          {
            name?: string(name='Name', description='The key of the annotation.', example='123'),
            value?: string(name='Value', description='The value of the annotation.', example='abc'),
          }
        ](name='Annotations', description='The annotations of the Prometheus alert rule.'),
        autoAddNewApplication?: boolean(name='AutoAddNewApplication', description='Indicates whether the alert rule is applied to new applications that are created in Application Monitoring or Browser Monitoring. Valid values:

*   `true`: yes
*   `false`: no', example='false'),
        clusterId?: string(name='ClusterId', description='The cluster ID of the Prometheus alert rule.', example='ceba9b9ea5b924dd0b6726d2de6******'),
        createdTime?: long(name='CreatedTime', description='The time when the alert rule was created. The value is a timestamp. Unit: milliseconds.', example='1640333981000'),
        duration?: string(name='Duration', description='The duration of the Prometheus alert rule.', example='1'),
        extend?: string(name='Extend', description='The extended fields.

>  For existing Application Monitoring alert rules, the fields contain information such as contacts, alert template, and notification content.', example='{\\\\"alarmContext\\\\":\\\\"{\\\\\\\\\\"content\\\\\\\\\\":\\\\\\\\Alert name: $Alert name\\\\\\\\\\\\nFilter condition: $Filter condition\\\\\\\\\\\\nAlert time: $Alert time\\\\\\\\\\\\nAlert content: $Alert content\\\\\\\\\\\\nNote: The alert persists before you receive an email that reminds you to clear the alert. You will be reminded of the alert again 24 hours later. \\\\\\\\\\",\\\\\\\\\\"subTitle\\\\\\\\\\":\\\\\\\\\\"\\\\\\\\\\"}\\\\",\\\\"alertWays\\\\":\\\\"\\[0,1]\\\\",\\\\"contactGroupIds\\\\":\\\\"381,5075\\\\",\\\\"notice\\\\":\\\\"{\\\\\\\\\\"endTime\\\\\\\\\\":1480607940000,\\\\\\\\\\"noticeEndTime\\\\\\\\\\":1480607940000,\\\\\\\\\\"noticeStartTime\\\\\\\\\\":1480521600000,\\\\\\\\\\"startTime\\\\\\\\\\":1480521600000}\\\\"}'),
        filters?: {
          customSLSFilters?: [ 
            {
              key?: string(name='Key', description='The key of the filter condition.', example='username'),
              opt?: string(name='Opt', description='The logical operator of the filter condition. Valid values:

*   \\=: equal to
*   not: not equal to', example='='),
              show?: boolean(name='Show', description='Indicates whether this filter condition is displayed on the frontend.', example='false'),
              t?: string(name='T', description='The log type of Browser Monitoring. This field is not included in other filter conditions.', example='null'),
              value?: string(name='Value', description='The value of the filter condition.', example='test'),
            }
          ](name='CustomSLSFilters', description='The custom filter condition of the Browser Monitoring alert rule.'),
          customSLSGroupByDimensions?: [ string ](name='CustomSLSGroupByDimensions', description='The information about the aggregation dimension.'),
          customSLSWheres?: [ string ](name='CustomSLSWheres', description='The details of the custom filter condition.'),
          dimFilters?: [ 
            {
              filterKey?: string(name='FilterKey', description='The key of the filter condition.', example='rootIp'),
              filterOpt?: string(name='FilterOpt', description='The logical operator of the filter condition.', example='ALL'),
              filterValues?: [ string ](name='FilterValues', description='The details of the filter condition.'),
            }
          ](name='DimFilters', description='The information about each filter condition of the Application Monitoring or Browser Monitoring alert rule.'),
        }(name='Filters', description='The filter conditions of the Application Monitoring or Browser Monitoring alert rule.'),
        labels?: [ 
          {
            name?: string(name='Name', description='The tag key.', example='123'),
            value?: string(name='Value', description='The tag value.', example='abc'),
          }
        ](name='Labels', description='The tags of the Prometheus alert rule.'),
        level?: string(name='Level', description='The severity level of the Prometheus alert rule.

*   P1: Alert notifications are sent for major issues that affect the availability of core business, have a huge impact, and may lead to serious consequences.
*   P2: Alert notifications are sent for service errors that affect the system availability with relatively limited impact.
*   P3: Alert notifications are sent for issues that may cause service errors or negative effects, or alert notifications for services that are relatively less important.
*   P4: Alert notifications are sent for low-priority issues that do not affect your business.
*   Default: Alert notifications are sent regardless of alert levels.', example='P2'),
        message?: string(name='Message', description='The alert message of the Prometheus alert rule.', example='Namespace: {{$labels.namespace}} / Pod: {{$labels.pod_name}} / Container: {{$labels.container}} CPU usage: {{$labels.metrics_params_opt_label_value}} {{$labels.metrics_params_value}}%. Current value: {{ printf "%.2f" $value }}%'),
        metricsType?: string(name='MetricsType', description='The metric type of the Application Monitoring or Browser Monitoring alert rule.', example='JVM'),
        notifyStrategy?: string(name='NotifyStrategy', description='The name of the notification policy.', example='ALERT_MANAGER'),
        pids?: [ string ](name='Pids', description='The process ID (PID) of the application to which the Application Monitoring or Browser Monitoring alert rule is applied.'),
        promQL?: string(name='PromQL', description='The PromQL statement of the Prometheus alert rule.', example='node_memory_MemAvailable_bytes{} / node_memory_MemTotal_bytes{} * 100'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
        tags?: [ 
          {
            key?: string(name='Key', description='The tag key.', example='type'),
            value?: string(name='Value', description='The tag value.', example='prod'),
          }
        ](name='Tags', description='The tags of the alert rule.'),
        updatedTime?: long(name='UpdatedTime', description='The time when the alert rule was updated. The value is a timestamp. Unit: milliseconds.', example='1640333981000'),
        userId?: string(name='UserId', description='The ID of the Alibaba Cloud account.', example='1131971649******'),
      }
    ](name='AlertRules', description='The alert rules.'),
    page?: long(name='Page', description='The number of pages returned.', example='1'),
    size?: long(name='Size', description='The number of alert rules returned per page.', example='20'),
    total?: long(name='Total', description='The total number of queried alert rules.', example='1'),
  }(name='PageBean', description='The returned pages.'),
  requestId?: string(name='RequestId', description='The request ID.', example='337B8F7E-0A64-5768-9225-E9B3CF******'),
}

model GetAlertRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAlertRulesResponseBody(name='body'),
}

async function getAlertRules(request: GetAlertRulesRequest): GetAlertRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAlertRules', 'POST', '/', 'json', false, 'json', request);
}

model GetAppApiByPageRequest {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1', minimum=1, maximum=2147483647, position='Query'),
  endTime?: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1600066800000', minimum=0, maximum=9223372036854775806, position='Query'),
  intervalMills?: int32(name='IntervalMills', description='The time interval between the data shards to be queried. Unit: milliseconds. Minimum value: 60000. Maximum value: 2147483647.', example='60000', minimum=0, maximum=2147483647, position='Query'),
  pId: string(name='PId', description='The process identifier (PID) of the application. For information about how to obtain a PID, see [Obtain the PID of an application](https://www.alibabacloud.com/help/zh/doc-detail/186100.htm?spm=a2cdw.13409063.0.0.7a72281f0bkTfx#title-imy-7gj-qhr).', example='a2n80plglh@745eddxxx', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. This parameter is no longer supported. The number of entries to return on each page. Default value: 10.', example='10', minimum=1, maximum=2147483647, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. Unit: milliseconds.', example='1600063200000', minimum=0, maximum=9223372036854775806, position='Query'),
}

model GetAppApiByPageResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned for the request. Valid values:

*   2XX: The request was successful.
*   3XX: A redirection message was returned.
*   4XX: The request was invalid.
*   5XX: A server error occurred.', example='200'),
  data?: {
    completed?: boolean(name='Completed', description='Is completed.', example='false'),
    items?: [  map[string]any ](name='Items', description='The data entries.'),
    page?: int32(name='Page', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    total?: string(name='Total', description='The total number of returned entries.', example='0'),
  }(name='Data', description='The struct returned.'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B6A00968-82A8-4F14-9D1B-B53827DB****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   `true`: The call was successful.
*   `false`: The call failed.', example='true'),
}

model GetAppApiByPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAppApiByPageResponseBody(name='body'),
}

async function getAppApiByPage(request: GetAppApiByPageRequest): GetAppApiByPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAppApiByPage', 'POST', '/', 'json', false, 'json', request);
}

model GetAppJVMConfigRequest {
  endTime?: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1480607940000', position='Query'),
  pid?: string(name='Pid', description='The IDof the application.
 
Log on to the **ARMS console**. In the left-side navigation pane, choose **Application Monitoring** > **Applications**. On the **Applications** page, click the name of an application. The URL in the address bar contains the process ID (PID) of the application. The PID is indicated in the pid=xxx format. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is eb4zdose6v%409781be0f44d\\*\\*\\*\\*, you must replace %40 with an at sign (@) to obtain eb4zdose6v@9781be0f44d\\*\\*\\*\\*.', example='atc889zkcf@d8deedfa9bf****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  startTime?: long(name='StartTime', description='The start of the time range to query. Unit: milliseconds.', example='1480521600000', position='Query'),
}

model GetAppJVMConfigResponseBody = {
  code?: int32(name='Code', description='The response code. Valid values: 2XX: The request is successful. 3XX: A redirection message is returned. 4XX: The request is invalid. 5XX: A server error occurs.', example='200'),
  jvmInfoList?: [ 
    {
      agentVersion?: string(name='AgentVersion', description='The version of the agent.', example='1.7.0-SNAPSHOT_3.0.3_3756244'),
      hostName?: string(name='HostName', description='The hostname.', example='host_name'),
      ip?: string(name='Ip', description='The IP address.', example='47.91.59.244'),
      pid?: string(name='Pid', description='The application ID.', example='dsv9zcel92@1455182510c5369'),
      procId?: string(name='ProcId', description='The process ID.', example='1'),
      vmArgs?: string(name='VmArgs', description='The VM parameters.', example='[-javaagent:/home/admin/.opt/ArmsAgent/arms-bootstrap-1.7.0-SNAPSHOT.jar, -Doneagent.plugin.arms-agent.enabled=true, -Darms.licenseKey=[******], -Darms.agent.env=K8s, -Darms.agent.podinfo.path=/etc/podinfo, -Darms.appName=productservice, -Doneagent.region=cn-hangzhou, -Dproject.name=Product]'),
    }
  ](name='JvmInfoList', description='The list of JVM information.'),
  message?: string(name='Message', description='The error message returned if the request failed.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model GetAppJVMConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAppJVMConfigResponseBody(name='body'),
}

async function getAppJVMConfig(request: GetAppJVMConfigRequest): GetAppJVMConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAppJVMConfig', 'GET', '/', 'json', false, 'json', request);
}

model GetAuthTokenRequest {
  clusterId: string(name='ClusterId', description='The ID of the ACK cluster.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model GetAuthTokenResponseBody = {
  code?: int32(name='Code', description='Status code. 200 means success, other status codes are exceptions.', example='200'),
  data?: string(name='Data', description='The returned authentication token.', example='eyJhbGciOiJIUzI1NiJ9******'),
  message?: string(name='Message', description='Additional Information.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
  success?: boolean(name='Success', description='Whether the query was successful:
- true: Success
- false: Failure', example='true'),
}

model GetAuthTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAuthTokenResponseBody(name='body'),
}

async function getAuthToken(request: GetAuthTokenRequest): GetAuthTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAuthToken', 'POST', '/', 'json', false, 'json', request);
}

model GetCloudClusterAllUrlRequest {
  clusterId?: string(name='ClusterId', description='The ID of the CloudMonitor instance.', example='ca9676014babd4', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-beijing', position='Query'),
}

model GetCloudClusterAllUrlResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: [ 
    {
      productCode?: string(name='ProductCode', description='The identifier of the cloud service.', example='amp'),
      region?: string(name='Region', description='The region ID.', example='cn-hangzhou'),
      remoteUrl?: {
        authToken?: boolean(name='AuthToken', description='Indicates whether authentication is enabled.', example='true'),
        grafanaUrl?: string(name='GrafanaUrl', description='The internal URL for Grafana.', example='"http://cn-hangzhou-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"'),
        internetGrafanaUrl?: string(name='InternetGrafanaUrl', description='The public URL for Grafana.', example='"http://cn-hangzhou.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"'),
        internetPushGatewayUrl?: string(name='InternetPushGatewayUrl', description='The public URL for Pushgateway.', example='"http://cn-hangzhou.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"'),
        internetRemoteReadUrl?: string(name='InternetRemoteReadUrl', description='The public URL for remote read.', example='"http://cn-hangzhou.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"'),
        internetRemoteWriteUrl?: string(name='InternetRemoteWriteUrl', description='The public URL for remote write.', example='"http://cn-hangzhou.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"'),
        pushGatewayUrl?: string(name='PushGatewayUrl', description='The internal URL for Pushgateway.', example='"http://cn-hangzhou-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"'),
        remoteReadUrl?: string(name='RemoteReadUrl', description='The internal URL for remote read.', example='"http://cn-hangzhou-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"'),
        remoteWriteUrl?: string(name='RemoteWriteUrl', description='The internal URL for remote write.', example='"http://cn-hangzhou-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/XXXXXXXXXXXXXXXXX"'),
        token?: string(name='Token', description='The token value used for authentication.', example='"eyJhbGciOiJIUzI1NiJ9.DKEIFJSL.KYK6uOtNVxTVHXJbH5MNqlsAuUtKzNlUvmAIiKc-QXw"'),
      }(name='RemoteUrl', description='The URLs for remote read and write. The value is a JSON string.'),
    }
  ](name='Data', description='An array object.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='99A663CB-8D7B-4B0D-A006-03C8EE38E7BB'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model GetCloudClusterAllUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCloudClusterAllUrlResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function getCloudClusterAllUrl(request: GetCloudClusterAllUrlRequest): GetCloudClusterAllUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCloudClusterAllUrl', 'POST', '/', 'json', false, 'json', request);
}

model GetClusterAllUrlRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. Default value: cn-hangzhou.', example='cn-hangzhou', position='Query'),
}

model GetClusterAllUrlResponseBody = {
  code?: int32(name='Code', description='Status code. 200 means success, other status codes are exceptions.', example='200'),
  data?: string(name='Data', description='The response parameters in the JSON format.', example='{
  "RequestId": "41877338-646B-5DD6-BFBE-F89F1E7245AD",
  "Data": "{\\"clusterType\\":\\"ManagedKubernetes\\",\\"remoteWriteUrl\\":\\"http:/" }'),
  message?: string(name='Message', description='The prompt information of the returned result.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='40B10E04-81E8-4643-970D-F1B38F2E****'),
  success?: boolean(name='Success', description='Whether the query is successful:
- true: success
- false: failure', example='true'),
}

model GetClusterAllUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClusterAllUrlResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function getClusterAllUrl(request: GetClusterAllUrlRequest): GetClusterAllUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetClusterAllUrl', 'POST', '/', 'json', false, 'json', request);
}

model GetCommercialStatusRequest {
  commodityCode: string(name='CommodityCode', description='The product code.

*   arms_app_post
*   arms_web_post
*   arms_promethues_public_cn
*   prometheus_pay_public_cn
*   xtrace
*   arms_serverless_public_cn
*   arms_rumserverless_public_cn
*   prometheus_serverless_public_cn
*   xtrace_serverless_public_cn', example='arms_app_post', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetCommercialStatusResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='49C82193-E991-5F6A-AF3E-1664D8D05CA3'),
  userAndCommodityStatus?: {
    basic?: boolean(name='Basic', description='Indicates whether you are using the Basic Edition.', example='false'),
    chargeType?: string(name='ChargeType', description='The billing method.', example='usage'),
    enable?: boolean(name='Enable', description='Indicates whether the service is activated.', example='true'),
    extraInfo?: map[string]any(name='ExtraInfo', description='The additional information.', example='info'),
    freeDays?: long(name='FreeDays', description='The number of days during which the service is free of charge.', example='10'),
    lable?: string(name='Lable', description='The tags.', example='NEW'),
    status?: string(name='Status', description='The commercialization status.

Valid values:

*   Normal: The service is activated.
*   Abnormal: An exception occurs during activation.
*   Free: The service is not activated.', example='Normal'),
  }(name='UserAndCommodityStatus', description='The commercialization status of the service.'),
}

model GetCommercialStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCommercialStatusResponseBody(name='body'),
}

async function getCommercialStatus(request: GetCommercialStatusRequest): GetCommercialStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCommercialStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetExploreUrlRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c9cc4c5e220f8461f9d71b6ec6e******', position='Query'),
  expression?: string(name='Expression', description='The query statement that corresponds to the data source.', example='{app="buy2"}', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  type: string(name='Type', description='The type of the Grafana data source.', example='prometheus', position='Query'),
}

model GetExploreUrlResponseBody = {
  code?: int32(name='Code', description='Status code. 200 means success, other status codes are exceptions.', example='200'),
  data?: string(name='Data', description='Response parameters', example='-'),
  message?: string(name='Message', description='The prompt information of the returned result.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
  success?: boolean(name='Success', description='Whether the operation was successful:
- true: the operation was successful
- false: the operation failed', example='true'),
}

model GetExploreUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetExploreUrlResponseBody(name='body'),
}

async function getExploreUrl(request: GetExploreUrlRequest): GetExploreUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetExploreUrl', 'POST', '/', 'json', false, 'json', request);
}

model GetGrafanaWorkspaceRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values: zh and en. Default value: zh.', example='zh', position='Query'),
  grafanaWorkspaceId: string(name='GrafanaWorkspaceId', description='The ID of the workspace.', example='grafana-cn-4xl3g******', position='Query'),
  regionId: string(name='RegionId', description='The region ID. Default value: cn-hangzhou.', example='cn-hangzhou', position='Query'),
}

model GetGrafanaWorkspaceResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned for the request. Valid values:

*   `2XX`: The request is successful.
*   `3XX`: A redirection message is returned.
*   `4XX`: The request is invalid.
*   `5XX`: A server error occurs.', example='200'),
  data?: GrafanaWorkspace(name='Data', description='The information about the Grafana workspace.'),
  message?: string(name='Message', description='The error message returned when the request parameters are invalid.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='2C3F217B-9AAE-5D51-974D-48********'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
  traceId?: string(name='TraceId', description='The ID of the trace. The ID is used to query the details of a request.', example='eac0a8048716731735000007137d000b'),
}

model GetGrafanaWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGrafanaWorkspaceResponseBody(name='body'),
}

/**
  * Note: The list returned by this operation includes the workspaces of Developer Edition, Expert Edition, and Advanced Edition. The list does not include the workspaces of Shared Edition.
  *
 */
async function getGrafanaWorkspace(request: GetGrafanaWorkspaceRequest): GetGrafanaWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGrafanaWorkspace', 'POST', '/', 'json', false, 'json', request);
}

model GetIntegrationStateRequest {
  clusterId: string(name='ClusterId', description='The ID of the Container Service for Kubernetes (ACK) cluster.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  integration: string(name='Integration', description='The abbreviation of the software that is supported by ARMS. Valid values (case-insensitive): `ASM`, `IoT`, and `Flink`.', example='asm', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model GetIntegrationStateResponseBody = {
  code?: int32(name='Code', description='Status code. 200 means success, other status codes are exceptions.', example='200'),
  message?: string(name='Message', description='The prompt information of the returned result.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
  state?: boolean(name='State', description='The integration state of Prometheus dashboards and collection rules. Valid values:

*   `true`: The Prometheus dashboards and collection rules that monitor the software are integrated.
*   `false`: The Prometheus dashboards and collection rules that monitor the software are not integrated.', example='true'),
}

model GetIntegrationStateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIntegrationStateResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function getIntegrationState(request: GetIntegrationStateRequest): GetIntegrationStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIntegrationState', 'POST', '/', 'json', false, 'json', request);
}

model GetManagedPrometheusStatusRequest {
  clusterId: string(name='ClusterId', description='The cluster ID. This parameter is required if the ClusterType parameter is set to ask.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  clusterType: string(name='ClusterType', description='The type of the cluster. Valid values: ask and ecs.', example='ask', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group id of the Prometheus instance.', example='rg-acfmxyexli2****', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC). This parameter is required if the ClusterType parameter is set to ecs.', example='vpc-***', position='Query'),
}

model GetManagedPrometheusStatusResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: string(name='Data', description='The installation status of the Prometheus agent.

*   Installing: The Prometheus agent is installed and no registration information is available.
*   Succeed: The Prometheus agent is installed and registered.
*   Failure: The Prometheus agent failed to be installed or registered.
*   Unknown: The installation status of the Prometheus agent is unknown.', example='Installing'),
  message?: string(name='Message', description='The returned message.', example='Successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='F7781D4A-2818-41E7-B7BB-79D809E9****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model GetManagedPrometheusStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetManagedPrometheusStatusResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function getManagedPrometheusStatus(request: GetManagedPrometheusStatusRequest): GetManagedPrometheusStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetManagedPrometheusStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetMultipleTraceRequest {
  endTime: long(name='EndTime', description='The time when the trace ends. The value is a timestamp. Unit: milliseconds.', example='1663999380000', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  startTime: long(name='StartTime', description='The start time of the trace. The value is a timestamp. Unit: milliseconds.', example='1657692507000', position='Query'),
  traceIDs: [ string ](name='TraceIDs', description='The trace IDs.', example='ac1400a115951745017447033d****', position='Query'),
}

model GetMultipleTraceResponseBody = {
  multiCallChainInfos?: [ 
    {
      spans?: [ 
        {
          duration?: long(name='Duration', description='The amount of time consumed by the trace. Unit: milliseconds.', example='11'),
          haveStack?: boolean(name='HaveStack', description='Indicates whether a method stack was provided.

*   `true`: A method stack was provided.
*   `false`: No method stack was provided.', example='true'),
          logEventList?: [ 
            {
              tagEntryList?: [ 
                {
                  key?: string(name='Key', description='The key of the tag.', example='http.status.code'),
                  value?: string(name='Value', description='The value of the tag.', example='200'),
                }
              ](name='TagEntryList', description='The tags of the trace.'),
              timestamp?: long(name='Timestamp', description='The time when the log was generated. The value is a timestamp.', example='1595174501747'),
            }
          ](name='LogEventList', description='The log events in the trace.'),
          operationName?: string(name='OperationName', description='The name of the traced span.', example='/demo/queryNotExistDB/11'),
          parentSpanId?: string(name='ParentSpanId', description='The ID of the parent span.', example='18'),
          resultCode?: string(name='ResultCode', description='The status code returned.', example='1'),
          rpcId?: string(name='RpcId', description='RPC ID', example='0.1'),
          rpcType?: int32(name='RpcType', description='The type of the remote procedure call (RPC) mode.

*   0: HTTP entry
*   25: HTTP call
*   1: High-speed Service Framework (HSF) call
*   2: HSF provision
*   40: on-premises API call
*   60: MySQL call
*   62: Oracle call
*   63: PostgreSQL call
*   70: Redis call
*   4: Taobao Distributed Data Layer (TDDL) call
*   5: Tair call
*   13: MetaQ message sending
*   252: MetaQ message receiving
*   3: notification sending
*   254: notification receiving
*   7: Apache Dubbo call
*   8: Apache Dubbo provision
*   19: SOFARPC call
*   18: SOFARPC provision
*   11: Distributed Service Framework (DSF) call
*   12: DSF provision
*   \\-1: unknown call', example='0'),
          serviceIp?: string(name='ServiceIp', description='The IP address of the host where the application resides.', example='172.20.XX.XX'),
          serviceName?: string(name='ServiceName', description='The name of the application.', example='arms-k8s-demo-subcomponent'),
          spanId?: string(name='SpanId', description='The span ID.', example='1234'),
          tagEntryList?: [ 
            {
              key?: string(name='Key', description='The key of the tag.', example='http.status.code'),
              value?: string(name='Value', description='The value of the tag.', example='200'),
            }
          ](name='TagEntryList', description='The tags of the trace.'),
          timestamp?: long(name='Timestamp', description='The timestamp.', example='1595174501747'),
          traceID?: string(name='TraceID', description='The trace ID.', example='ac1400a115951745017447033d****'),
        }
      ](name='Spans', description='The details of the trace.'),
      traceID?: string(name='TraceID', description='The trace ID.', example='ac1400a115951745017447033d****'),
    }
  ](name='MultiCallChainInfos', description='The details of traces.'),
  requestId?: string(name='RequestId', description='The request ID.', example='2983BEF7-4A0D-47A2-94A2-8E9C5E63****'),
}

model GetMultipleTraceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMultipleTraceResponseBody(name='body'),
}

async function getMultipleTrace(request: GetMultipleTraceRequest): GetMultipleTraceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMultipleTrace', 'POST', '/', 'json', false, 'json', request);
}

model GetOnCallSchedulesDetailRequest {
  endTime?: string(name='EndTime', description='The date on which the shift ends. Format: `yyyy-MM-dd`.', example='2022-10-30', position='Query'),
  id: long(name='Id', description='The ID of the scheduling policy.', example='1234', position='Query'),
  startTime?: string(name='StartTime', description='The date from which the shift starts. Format: `yyyy-MM-dd`.', example='2022-10-01', position='Query'),
}

model GetOnCallSchedulesDetailResponseBody = {
  data?: {
    alertRobotId?: long(name='AlertRobotId', description='The URL of the DingTalk chatbot, which is used to receive notifications about shift changes.', example='https://oapi.dingtalk.com/robot/send?access_token=69d4e009547e11069c6513309414937b7bf0482fb9284125b5******'),
    description?: string(name='Description', description='The description of the scheduling policy.', example='Test'),
    id?: long(name='Id', description='The ID of the scheduling policy.', example='1234'),
    name?: string(name='Name', description='The name of the scheduling policy.', example='Scheduling policy test'),
    renderedFinnalEntries?: [ 
      {
        end?: string(name='End', description='The date on which the user completed shift work.', example='2022-10-30'),
        simpleContact?: {
          id?: long(name='Id', description='The ID of the user on duty.', example='123'),
          name?: string(name='Name', description='The name of the user on duty.', example='Employee 1'),
        }(name='SimpleContact', description='The information about the user on duty.'),
        start?: string(name='Start', description='The date from which the user started shift work.', example='2022-10-01'),
      }
    ](name='RenderedFinnalEntries', description='The information about the final user on duty.'),
    renderedLayerEntries?: [[ 
      {
        start?: string(name='Start', description='The date from which the scheduled user was supposed to start shift work.', example='2022-10-01'),
        end?: string(name='End', description='The date on which the scheduled user was supposed to complete shift work.', example='2022-10-30'),
        simpleContact?: {
          id?: long(name='Id', description='The ID of the scheduled user.', example='123'),
          name?: string(name='Name', description='The name of the scheduled user.', example='Employee 1'),
        }(name='SimpleContact', description='The information about the scheduled user.'),
      }
    ]    ](name='RenderedLayerEntries', description='The scheduled users on duty within a time range.'),
    renderedSubstitudeEntries?: [ 
      {
        end?: string(name='End', description='The date on which the substitute was supposed to complete shift work.', example='2022-10-30'),
        simpleContact?: {
          id?: long(name='Id', description='The ID of the substitute.', example='234'),
          name?: string(name='Name', description='The name of the substitute.', example='Employee 2'),
        }(name='SimpleContact', description='The information about the substitute.'),
        start?: string(name='Start', description='The date from which the substitute was supposed to start shift work.', example='2022-10-01'),
      }
    ](name='RenderedSubstitudeEntries', description='The information about the substitutes within a time range.'),
    scheduleLayers?: [ 
      {
        contactIds?: [ long ](name='ContactIds', description='The ID list of users on duty.'),
        restrictions?: [ 
          {
            endTimeOfDay?: string(name='EndTimeOfDay', description='The end time of the shift per day.', example='18:00'),
            restrictionType?: string(name='RestrictionType', description='The type of the limit. Valid values:

*   daily_restriction
*   weekly_restriction', example='daily_restriction'),
            startTimeOfDay?: string(name='StartTimeOfDay', description='The start time of the shift per day.', example='09:00'),
          }
        ](name='Restrictions', description='The limit on the time of the shift.'),
        rotationType?: string(name='RotationType', description='The type of the shift. Valid values:

*   DAY
*   WEEK
*   CUSTOM', example='DAY'),
        shiftLength?: long(name='ShiftLength', description='The shift cycle. Unit: hours.', example='8'),
        startTime?: string(name='StartTime', description='The date on which the shift change took effect.', example='2022-10-01'),
      }
    ](name='ScheduleLayers', description='The information about the shift.'),
  }(name='Data', description='The information about the scheduling policy.'),
  requestId?: string(name='RequestId', description='The request ID.', example='21E85B16-75A6-429A-9F65-8AAC9A54****'),
}

model GetOnCallSchedulesDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOnCallSchedulesDetailResponseBody(name='body'),
}

async function getOnCallSchedulesDetail(request: GetOnCallSchedulesDetailRequest): GetOnCallSchedulesDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOnCallSchedulesDetail', 'GET', '/', 'json', false, 'json', request);
}

model GetPrometheusApiTokenRequest {
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetPrometheusApiTokenResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
  token?: string(name='Token', description='The token required for integrating Prometheus Service.', example='6dcbb77ef4ba6ef5466b5debf9e2****'),
}

model GetPrometheusApiTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPrometheusApiTokenResponseBody(name='body'),
}

/**
  * None.
  *
 */
async function getPrometheusApiToken(request: GetPrometheusApiTokenRequest): GetPrometheusApiTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPrometheusApiToken', 'POST', '/', 'json', false, 'json', request);
}

model GetPrometheusGlobalViewRequest {
  globalViewClusterId: string(name='GlobalViewClusterId', description='The ID of the global aggregation instance.', example='global-v2-cn-1478326682034601-vss8pd0i', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetPrometheusGlobalViewResponseBody = {
  code?: int32(name='Code', description='Status code. 200 is success, other status codes are exceptions.', example='200'),
  data?: string(name='Data', description='The struct returned.', example='{ "clusterId":"The ID of the global aggregation instance.", "groupName":"The name of the global aggregation instance.", "dataSources":\\[ { "sourceName":"The name of the data source.- ArmsPrometheus No.1", "sourceType":"AlibabaPrometheus", "userId":"UserID", "clusterId":"ClusterId" }, // more datasources ] }'),
  message?: string(name='Message', description='Returns a hint message for the result.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='743AD493-D006-53BD-AAEC-DDCE7FB68EA7'),
}

model GetPrometheusGlobalViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPrometheusGlobalViewResponseBody(name='body'),
}

async function getPrometheusGlobalView(request: GetPrometheusGlobalViewRequest): GetPrometheusGlobalViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPrometheusGlobalView', 'POST', '/', 'json', false, 'json', request);
}

model GetPrometheusInstanceRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance.', example='c77f6f2397ea74672872acf5e31374a27', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetPrometheusInstanceResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  data?: {
    accessType?: string(name='AccessType', description='The permission type. Valid values: readWrite, readOnly, and httpReadOnly', example='readWrite'),
    archiveDuration?: int32(name='ArchiveDuration', description='The number of days for which data is automatically archived after the storage duration expires. Valid values: 60, 90, 180, and 365. 0 indicates that the data is not archived.', example='60'),
    authFreeReadPolicy?: string(name='AuthFreeReadPolicy', description='Read the whitelist policy for password-free addresses.', example='null'),
    authFreeWritePolicy?: string(name='AuthFreeWritePolicy', description='Write exempt password address whitelist policy.', example='null'),
    authToken?: string(name='AuthToken', description='The authorization token.', example='GciOiJIUzI1NiJ9***'),
    clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='c589a1b8db05c4561aefbb898ca8fb1cf'),
    clusterName?: string(name='ClusterName', description='The name of the monitoring object.', example='prom1'),
    clusterType?: string(name='ClusterType', description='*   remote-write: general-purpose Prometheus instance
*   ecs: Prometheus instances for ECS
*   cloud-monitor: Prometheus instance for Alibaba Cloud services in the Chinese mainland
*   cloud-product: Prometheus instance for Alibaba Cloud services outside the Chinese mainland
*   global-view: global aggregation instance
*   aliyun-cs: Prometheus instance for Container Service', example='remote-write'),
    dbInstanceStatus?: string(name='DbInstanceStatus', description='The data storage status at the backend.', example='RUNNING'),
    enableAuthFreeRead?: boolean(name='EnableAuthFreeRead', description='Whether to enable password-free reading.', example='false'),
    enableAuthFreeWrite?: boolean(name='EnableAuthFreeWrite', description='Whether to enable write access without password.', example='false'),
    enableAuthToken?: string(name='EnableAuthToken', description='Indicates whether access token authentication is enabled.', example='true'),
    grafanaInstanceId?: string(name='GrafanaInstanceId', description='The ID of the Grafana workspace.', example='grafana-rnggfvhlcdl6m71***'),
    httpApiInterUrl?: string(name='HttpApiInterUrl', description='The public URL for the HTTP API.', example='https://cn-beijing.arms.aliyuncs.com:9443/api/v1/prometheus/xxx'),
    httpApiIntraUrl?: string(name='HttpApiIntraUrl', description='The internal URL for the HTTP API.', example='http://cn-beijing-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/xxx'),
    paymentType?: string(name='PaymentType', description='The billing method. Valid values:

*   PREPAY: subscription
*   POSTPAY: pay-as-you-go', example='PREPAY'),
    product?: string(name='Product', description='The product to which the Prometheus instance belongs. Valid values: arms and cms.', example='arms'),
    pushGatewayInterUrl?: string(name='PushGatewayInterUrl', description='The public URL for Pushgateway.', example='https://cn-beijing.arms.aliyuncs.com/prometheus/xxx/api/v2'),
    pushGatewayIntraUrl?: string(name='PushGatewayIntraUrl', description='The internal URL for Pushgateway.', example='http://cn-beijing-intranet.arms.aliyuncs.com/prometheus/xxx/api/v2'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-beijing'),
    remoteReadInterUrl?: string(name='RemoteReadInterUrl', description='The public URL for remote read.', example='http://cn-beijing.arms.aliyuncs.com:9090/api/v1/prometheus/xxx/api/v1/read'),
    remoteReadIntraUrl?: string(name='RemoteReadIntraUrl', description='The internal URL for remote read.', example='http://cn-beijing-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/xxx/api/v1/read'),
    remoteWriteInterUrl?: string(name='RemoteWriteInterUrl', description='The public URL for remote write.', example='https://cn-beijing.arms.aliyuncs.com/prometheus/xxx/api/v3/write'),
    remoteWriteIntraUrl?: string(name='RemoteWriteIntraUrl', description='The internal URL for remote write.', example='http://cn-beijing-intranet.arms.aliyuncs.com/prometheus/xxx/api/v3/write'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-aek2vezare****'),
    resourceType?: string(name='ResourceType', description='The type of the resource. Set the value to PROMETHEUS.', example='PROMETHEUS'),
    securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group. This parameter is returned only for Prometheus instances for ECS.', example='sg-8vbdgmf4nraiqa9bx0jo'),
    storageDuration?: int32(name='StorageDuration', description='The data storage duration. Unit: days.', example='90'),
    subClustersJson?: string(name='SubClustersJson', description='The child instances of the Prometheus instance for GlobalView. The value is a JSON string.', example='\\[{"headers":{},"regionId":"cn-hangzhou","sourceType":"AlibabaPrometheus","extras":{},"clusterId":"c39a1048921e04fceb039db2fbb73\\*\\*\\*","sourceName":"arms-luyao-test","dataSource":"","userId":"167275301789\\*\\*\\*"},{"headers":{},"regionId":"cn-beijing","sourceType":"AlibabaPrometheus","extras":{},"clusterId":"c6b6485496d5b400abde22cb47b5\\*\\*\\*\\*","sourceName":"agent-321-test","dataSource":"","userId":"1672753017899\\*\\*\\*"},{"headers":{},"regionId":"cn-zhangjiakou","sourceType":"AlibabaPrometheus","extras":{},"clusterId":"c261a4f3200c446659133f1ade789b15e","sourceName":"zaifeng-cardinality-01","dataSource":"","userId":"167275301789\\*\\*\\*"}]'),
    supportAuthTypes?: [ string ](name='SupportAuthTypes', description='Supported authentication types.'),
    tags?: [ 
      {
        tagKey?: string(name='TagKey', description='The tag key.', example='tag1'),
        tagValue?: string(name='TagValue', description='The tag value.', example='tagValue1'),
      }
    ](name='Tags', description='The tags of the instance.'),
    userId?: string(name='UserId', description='The user ID.', example='167275301789****'),
    vSwitchId?: string(name='VSwitchId', description='The vSwitch ID. This parameter is returned only for Prometheus instances for ECS.', example='vsw-f8z73vcja1tqnw90aav5a'),
    vpcId?: string(name='VpcId', description='The VPC ID. This parameter is returned only for Prometheus instances for ECS.', example='vpc-8vb02uk57qbcktqcvqqqj'),
  }(name='Data', description='The returned message.'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='52C422FD-6B43-524D-B8A1-A4693294318C'),
}

model GetPrometheusInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPrometheusInstanceResponseBody(name='body'),
}

async function getPrometheusInstance(request: GetPrometheusInstanceRequest): GetPrometheusInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPrometheusInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetPrometheusIntegrationRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance. Valid values: aliyun-cs and ecs.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  instanceId: long(name='InstanceId', description='The ID of the exporter.', example='2893', position='Query'),
  integrationType: string(name='IntegrationType', description='The integration type. Valid values: kafka, mysql, redis, snmp, emr, nubela, and tidb.', example='kafka, mysql, redis, snmp, emr, nubela, and tidb', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetPrometheusIntegrationResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  data?: {
    canDelete?: boolean(name='CanDelete', description='Indicates whether the exporter can be deleted.', example='true'),
    canEditor?: boolean(name='CanEditor', description='Indicates whether the exporter can be modified.', example='true'),
    clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='c589a1b8db05c4561aefbb898ca8fb1cf'),
    containerName?: string(name='ContainerName', description='The container name.', example='kafka-exporter-1'),
    describe?: string(name='Describe', description='The description of the exporter.', example='"{}"'),
    exporterType?: string(name='ExporterType', description='The type of the exporter.', example='tidb-exporter'),
    instanceId?: long(name='InstanceId', description='The ID of the exporter.', example='2893'),
    instanceName?: string(name='InstanceName', description='The name of the exporter.', example='lpd-skyeye'),
    integrationType?: string(name='IntegrationType', description='The integration type. Valid values: kafka, mysql, redis, snmp, emr, nubela, and tidb.', example='tidb'),
    namespace?: string(name='Namespace', description='The namespace.', example='arms-prom'),
    needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether an upgrade is required.', example='True'),
    param?: string(name='Param', description='The parameters of the exporter. Format: JSON string.', example='{
      "port": "5554",
      "name": "kafka-test12",
      "kafka_instance": "kafka-test",
      "__label_value": "kafka-test",
      "scrape_interval": 33,
      "metrics_path": "/metrics",
      "__label_key": "kafka-test"
}'),
    showDescribe?: boolean(name='ShowDescribe', description='Indicates whether the description is displayed.', example='true'),
    showLog?: string(name='ShowLog', description='Indicates whether the exporter logs are displayed.', example='true'),
    status?: string(name='Status', description='The status of the exporter.', example='installed'),
    target?: string(name='Target', description='The monitored IP address.', example='127.0.0.1:3422'),
    version?: string(name='Version', description='The version information.', example='1.0.0'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9BEF2832-9D95-5E3E-9B10-74887CA17B94'),
}

model GetPrometheusIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPrometheusIntegrationResponseBody(name='body'),
}

async function getPrometheusIntegration(request: GetPrometheusIntegrationRequest): GetPrometheusIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPrometheusIntegration', 'POST', '/', 'json', false, 'json', request);
}

model GetPrometheusMonitoringRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  monitoringName: string(name='MonitoringName', description='The name of the monitoring configuration.', example='customJob1', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  type: string(name='Type', description='The type of the monitoring configuration. 
Valid values for a Prometheus instance for Container Service: serviceMonitor, podMonitor, customJob, and probe. 
Valid values for a Prometheus instance for ECS: customJob and probe.', example='customJob', position='Query'),
}

model GetPrometheusMonitoringResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='c589a1b8db05c4561aefbb898ca8fb1cf'),
    configYaml?: string(name='ConfigYaml', description='The monitoring configuration. The value is a YAML string.', example='apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: tomcat-demo
  namespace: default
spec:
  endpoints:
    - interval: 30s
      path: /metrics
      port: tomcat-monitor
  namespaceSelector:
    any: true
  selector:
    matchLabels:
      app: tomcat'),
    monitoringName?: string(name='MonitoringName', description='The name of the monitoring configuration.', example='customJob1'),
    status?: string(name='Status', description='The status of the monitoring configuration. Valid values: run and stop.', example='run'),
    type?: string(name='Type', description='The type of the monitoring configuration. Valid values: serviceMonitor, podMonitor, customJob, and probe.', example='serviceMonitor'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
}

model GetPrometheusMonitoringResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPrometheusMonitoringResponseBody(name='body'),
}

async function getPrometheusMonitoring(request: GetPrometheusMonitoringRequest): GetPrometheusMonitoringResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPrometheusMonitoring', 'POST', '/', 'json', false, 'json', request);
}

model GetRecordingRuleRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetRecordingRuleResponseBody = {
  code?: int32(name='Code', description='Status code. 200 is success, other status codes are exceptions.', example='200'),
  data?: string(name='Data', description='The recording rule.', example='--- groups: - name: "recording_demo"   rules:   - expr: "sum(jvm_memory_max_bytes)"     record: "rate_coredns_demo"'),
  message?: string(name='Message', description='Returns a hint message for the result.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='9FEA6D00-317F-45E3-9004-7FB8B0B7****'),
}

model GetRecordingRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRecordingRuleResponseBody(name='body'),
}

async function getRecordingRule(request: GetRecordingRuleRequest): GetRecordingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRecordingRule', 'POST', '/', 'json', false, 'json', request);
}

model GetRetcodeAppByPidRequest {
  pid: string(name='Pid', description='The PID of the application. To obtain the PID of the application, perform the following steps: Log on to the Application Real-Time Monitoring Service (ARMS) console. In the left-side navigation pane, choose **Browser Monitoring** > **Browser Monitoring**. On the Browser Monitoring page, click the name of the application. The URL in the address bar contains the PID of the application. The PID is in the pid=xxx format. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is xxx%4074xxx, you must replace %40 with the at sign (@) to obtain xxx@74xxx.', example='b590lhguqs@9781be0f44dXXXX', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The list of tags.', position='Query'),
}

model GetRetcodeAppByPidResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='2983BEF7-4A0D-47A2-94A2-8E9C5E63****'),
  retcodeApp?: {
    appId?: string(name='AppId', description='The ID of the application. The parameter is an auto-increment parameter.', example='2787XXXX'),
    appName?: string(name='AppName', description='The name of the application that is monitored by Browser Monitoring.', example='testRetcodeAppXXXX'),
    pid?: string(name='Pid', description='The process identifier (PID) of the application.', example='b590lhguqs@9781be0f44dXXXX'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. You can obtain the resource group ID in the **Resource Management** console.', example='rg-acfmxidtzXXXX'),
    retcodeAppType?: string(name='RetcodeAppType', description='The type of the application that is monitored by Browser Monitoring. Valid values:

*   `web`: web application
*   `weex`: Weex mobile app
*   `mini_dd`: DingTalk mini program
*   `mini_alipay`: Alipay mini program
*   `mini_wx`: WeChat mini program
*   `mini_common`: mini program on other platforms', example='web'),
    tags?: [ 
      {
        key?: string(name='Key', description='The key of the tag.', example='testKey'),
        value?: string(name='Value', description='The value of the tag.', example='testValue'),
      }
    ](name='Tags', description='The tags that are attached to the instance.'),
  }(name='RetcodeApp', description='The returned application data.'),
}

model GetRetcodeAppByPidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRetcodeAppByPidResponseBody(name='body'),
}

async function getRetcodeAppByPid(request: GetRetcodeAppByPidRequest): GetRetcodeAppByPidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRetcodeAppByPid', 'GET', '/', 'json', false, 'json', request);
}

model GetRetcodeDataByQueryRequest {
  from: long(name='From', description='The beginning of the time range to query. This value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1668687302', position='Query'),
  pid: string(name='Pid', description='The ID of the application.

Log on to the **ARMS console**. In the left-side navigation pane, choose **Browser Monitoring** > **Browser Monitoring**. On the Browser Monitoring page, click the name of an application. The URL in the address bar contains the process ID (PID) of the application. The PID is indicated in the pid=xxx format. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is eb4zdose6v%409781be0f44d\\*\\*\\*\\*, you must replace %40 with an at sign (@) to obtain eb4zdose6v@9781be0f44d\\*\\*\\*\\*.', example='atc889zkcf@d8deedfa9bf****', position='Query'),
  query: string(name='Query', description='The query statement that conforms to the query syntax of a Log Service Logstore.', example='t : pv|select sum(times) as pv , approx_distinct(uid) as uv , (date-date%3600000) as date  group by date', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  to: long(name='To', description='The end of the time range to query. This value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1668688000', position='Query'),
}

model GetRetcodeDataByQueryResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned for the request. Valid values:

*   2XX: The request was successful.
*   3XX: A redirection message was returned.
*   4XX: The request was invalid.
*   5XX: A server error occurred.', example='200'),
  data?: string(name='Data', description='The Browser Monitoring data returned.', example='{"total":0,"auth":false,"pageSize":20,"completed":true,"page":1,"items":[]}'),
  message?: string(name='Message', description='The error message returned if the call fails.', example='Internal error. Please try again. Contact the DingTalk service account if the issue                              persists after multiple retries.'),
  requestId?: string(name='RequestId', description='The request ID.', example='2A0CEDF1-06FE-44AC-8E21-21A5BE65****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model GetRetcodeDataByQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRetcodeDataByQueryResponseBody(name='body'),
}

async function getRetcodeDataByQuery(request: GetRetcodeDataByQueryRequest): GetRetcodeDataByQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRetcodeDataByQuery', 'POST', '/', 'json', false, 'json', request);
}

model GetRetcodeLogstoreRequest {
  pid: string(name='Pid', description='The process identifier (PID) of the application. To obtain the PID of the application, perform the following steps: Log on to the Application Real-Time Monitoring Service (ARMS) console. In the left-side navigation pane, choose **Browser Monitoring** > **Browser Monitoring**. On the Browser Monitoring page, click the name of the application. The URL in the address bar contains the PID of the application. The PID is in the pid=xxx format. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is xxx%4074xxx, you must replace %40 with the at sign (@) to obtain xxx@74xxx.', example='atc889zkcf@d8deedfa9bf****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model GetRetcodeLogstoreResponseBody = {
  data?: {
    message?: string(name='Message', description='The content of the log.', example='retcode app or task can not be found!'),
    retcodeSLSConfig?: {
      logstore?: string(name='Logstore', description='The Log Service Logstore.', example='log-test-220431'),
      project?: string(name='Project', description='The Log Service project.', example='test-project'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    }(name='RetcodeSLSConfig', description='The information about Log Service.'),
    status?: string(name='Status', description='The status of the request.', example='true'),
  }(name='Data', description='The returned struct.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
}

model GetRetcodeLogstoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRetcodeLogstoreResponseBody(name='body'),
}

async function getRetcodeLogstore(request: GetRetcodeLogstoreRequest): GetRetcodeLogstoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRetcodeLogstore', 'POST', '/', 'json', false, 'json', request);
}

model GetRetcodeShareUrlRequest {
  pid: string(name='Pid', description='The process identifier (PID) of the application. 

Log on to the **ARMS console**. In the left-side navigation pane, choose **Browser Monitoring** > **Browser Monitoring**. On the Browser Monitoring page, click the name of an application. The URL in the address bar contains the process ID (PID) of the application. The PID is indicated in the `pid=xxx` format. The PID is usually percent encoded as `xxx%40xxx`. You must modify this value to remove the percent encoding. For example, if the PID in the URL is `eb4zdose6v%409781be0f44d****`, you must replace `%40` with @ to obtain `eb4zdose6v@9781be0f44d****`.', example='iioe7jcnuk@582846f37******', position='Query'),
}

model GetRetcodeShareUrlResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='01FF8DD9-A09C-47A1-895A-B6E321******'),
  url?: string(name='Url', description='The logon-free URL of the application.', example='http://arms-daily.console.aliyun.com:8080/shareapi/retcode.json?login_arms_t3h_token=XXXxxx&action=RetcodeAction&eventSubmitDoGetData=1'),
}

model GetRetcodeShareUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRetcodeShareUrlResponseBody(name='body'),
}

async function getRetcodeShareUrl(request: GetRetcodeShareUrlRequest): GetRetcodeShareUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRetcodeShareUrl', 'POST', '/', 'json', false, 'json', request);
}

model GetRumAppInfoRequest {
  appGroup?: string(name='AppGroup', description='The group to which the application belongs.', example='default', position='Query'),
  pid: string(name='Pid', description='The application ID.', example='atc889zkcf@d8deedfa9bf****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetRumAppInfoResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    appGroup?: string(name='AppGroup', description='The group to which the application belongs.', example='default'),
    appType?: string(name='AppType', description='The application type. Valid values: web, miniapp, ios, and android.', example='web'),
    bonreeSDKConfig?: {
      moduleConfig?: {
        defaultConfig?: map[string]DataBonreeSDKConfigModuleConfigDefaultConfigValue(name='defaultConfig', description='The default configuration of the application.'),
        enable?: boolean(name='enable', description='Indicates whether the configuration is enabled.', example='true'),
        versionConfigs?: map[string]DataBonreeSDKConfigModuleConfigVersionConfigsValue(name='versionConfigs', description='The version configurations of the application.'),
      }(name='moduleConfig', description='The module configuration.'),
    }(name='BonreeSDKConfig', description='The mobile collection configurations.'),
    cdnDomain?: string(name='CdnDomain', description='The domain name of the SDK.', example='b59xxxxxxxx-sdk.rum.aliyuncs.com/v2/browser-sdk.js'),
    createTime?: string(name='CreateTime', description='The time when the application was created. The value is a timestamp. Unit: milliseconds.', example='1683353594000'),
    description?: string(name='Description', description='The description of the application.'),
    endpoint?: string(name='Endpoint', description='The endpoint that is used to report application data.', example='xxxxxxxx-default-cn.rum.aliyuncs.com'),
    isSubscription?: string(name='IsSubscription', description='Indicates whether the application is subscribed. Valid values: true and false.', example='true'),
    name?: string(name='Name', description='The application name.', example='tomcat-demo-test'),
    nickName?: string(name='NickName', description='The alias of the application.', example='nickname'),
    packageName?: string(name='PackageName', description='The name of the application package.', example='com.alibaba.rum'),
    pid?: string(name='Pid', description='The application ID.', example='avccccefy0@24cccccbf384dc6'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aek2vezare****'),
    serviceDomainConfigs?: [ 
      {
        description?: string(name='Description', description='The description.', example='Test'),
        domain?: string(name='Domain', description='The domain name or IP address.', example='example.com'),
        propagatorTypes?: [ string ](name='PropagatorTypes', description='The trace propagation protocols. This parameter is required if the tracing analysis feature is enabled.'),
        samplingRate?: int32(name='SamplingRate'),
        tracing?: boolean(name='Tracing', description='Indicates whether the tracing analysis feature is enabled. To enable the tracing analysis feature, you must activate Managed Service for OpenTelemetry. Valid values:

*   `true`: enables the tracing analysis feature. If you enable the tracing analysis feature, related headers are inserted into requests for the domain name.
*   `false`: disables the tracing analysis feature.', example='true'),
      }
    ](name='ServiceDomainConfigs', description='The list of service domain configurations. Only mobile applications are supported.'),
    slsLogstore?: string(name='SlsLogstore', description='The name of the Simple Log Service Logstore that stores application data.', example='logstore-rum'),
    slsProject?: string(name='SlsProject', description='The name of the Simple Log Service project that stores application data.', example='proj-xtrace-xxxxxxxxxxxxxxxxxxxxxxx-cn-hangzhou'),
    status?: string(name='Status', description='The status of the application. Valid values: created, running, and stopped.', example='running'),
    tags?: [ 
      {
        key?: string(name='Key', description='The tag key.', example='Label'),
        value?: string(name='Value', description='The tag value.', example='Value'),
      }
    ](name='Tags', description='The tags.'),
    type?: string(name='Type', description='The type of the application. Valid value: RUM.', example='RUM'),
  }(name='Data', description='The details of the application.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The error message.', example='StartTime is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The request ID.', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model GetRumAppInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRumAppInfoResponseBody(name='body'),
}

/**
  * Real User Monitoring (RUM) is available only in the China (Hangzhou), Singapore, and US (Silicon Valley) regions. Select the correct endpoint.
  *
 */
async function getRumAppInfo(request: GetRumAppInfoRequest): GetRumAppInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRumAppInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetRumAppsRequest {
  appGroup?: string(name='AppGroup', description='The group to which the application belongs.', example='default', position='Query'),
  appId?: string(name='AppId', description='The application ID.', example='b590lhguqs@28f515462******', position='Query'),
  appName?: string(name='AppName', description='The name of the application. You can specify only one application name in each request.', example='test-app', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The tags.', shrink='json', position='Query'),
}

model GetRumAppsResponseBody = {
  appList?: [ 
    {
      appType?: string(name='AppType', description='The application type. Valid values: web, miniapp, ios, and android.', example='web'),
      createTime?: any(name='CreateTime', description='The time when the application was created. The value is a timestamp.', example='1685686960872'),
      description?: string(name='Description', description='The description of the application.', example='TEST'),
      endpoint?: string(name='Endpoint', description='The endpoint that is used to report application data.', example='xxxxxxxx-default-cn.rum.aliyuncs.com'),
      isSubscription?: boolean(name='IsSubscription', description='Indicates whether the application is subscribed. Valid values: true and false.', example='true'),
      name?: string(name='Name', description='The application name.', example='home page'),
      nickName?: string(name='NickName', description='The alias of the application.', example='Williamtag'),
      packageName?: string(name='PackageName', description='The package name of the Android application.', example='com.zy.yxws'),
      pid?: string(name='Pid', description='The application ID.', example='xxxxx@cc08bdxxxx20b15'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmzaq3ypaqkdy'),
      serviceDomainConfigs?: [ 
        {
          description?: string(name='Description', description='The description.', example='Test'),
          domain?: string(name='Domain', description='The domain name or IP address.', example='example.com'),
          propagatorTypes?: [ string ](name='PropagatorTypes', description='The trace propagation protocols. This parameter is required if the tracing analysis feature is enabled.'),
          tracing?: string(name='Tracing', description='Indicates whether the tracing analysis feature is enabled. To enable the tracing analysis feature, you must activate Managed Service for OpenTelemetry. Valid values:

*   `true`: enables the tracing analysis feature. If you enable the tracing analysis feature, related headers are inserted into requests for the domain name.
*   `false`: disables the tracing analysis feature.', example='true'),
        }
      ](name='ServiceDomainConfigs', description='The list of service domain configurations. Only mobile applications are supported.'),
      slsLogstore?: string(name='SlsLogstore', description='The name of the Simple Log Service Logstore that stores application data.', example='logstore-rum'),
      slsProject?: string(name='SlsProject', description='The name of the Simple Log Service project that stores application data.', example='proj-xtrace-xxxxxxxba6ef5466b5debf9e2f951-cn-hangzhou'),
      status?: string(name='Status', description='The status of the application. Valid values: created, running, and stopped.', example='running'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key. The tag key can be up to 128 characters in length. It cannot start with aliyun or acs: and cannot contain http:// or https://.', example='tag1'),
          value?: string(name='Value', description='The tag value.', example='ok'),
        }
      ](name='Tags', description='The tags.'),
      type?: string(name='Type', description='The type of the application. Valid value: RUM.', example='RUM'),
    }
  ](name='AppList', description='The queried applications.'),
  code?: int32(name='Code', description='The response code. The status code 200 indicates that the request was successful.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The error message returned if the request failed.', example='Internal error, please contact customer service.'),
  requestId?: string(name='RequestId', description='The request ID.', example='70675725-8F11-4817-8106-CFE0AD71****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model GetRumAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRumAppsResponseBody(name='body'),
}

/**
  * Real User Monitoring (RUM) is available only in the China (Hangzhou), Singapore, and US (Silicon Valley) regions. Select the correct endpoint.
  *
 */
async function getRumApps(request: GetRumAppsRequest): GetRumAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRumApps', 'POST', '/', 'json', false, 'json', request);
}

model GetRumDataForPageRequest {
  appGroup?: string(name='AppGroup', description='The group to which the application belongs.', example='default', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The page number.', example='1', position='Query'),
  endTime: int32(name='EndTime', description='The beginning of the time range to query. The time is accurate to seconds.', example='1713774233', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20', position='Query'),
  pid?: string(name='Pid', description='The application ID.', example='iixxxjcnuk@582846f37******', position='Query'),
  query: string(name='Query', description='A query statement that complies with the query syntax of Simple Log Service Logstore. For more information, see the parameters corresponding to this operation on the console page.', example='* and app.id: xxxx@586810fbxxxx19f', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  startTime: int32(name='StartTime', description='The beginning of the time range to query. The time is accurate to seconds.', example='1713687833', position='Query'),
}

model GetRumDataForPageResponseBody = {
  code?: string(name='Code', description='The responses code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    authentication?: string(name='Authentication', description='A reserved parameter. Ignore this parameter.', example='null'),
    completion?: string(name='Completion', description='Indicates whether the query ends. Valid values: true and false.', example='true'),
    items?: [  map[string]any ](name='Items', description='The queried data.'),
    page?: string(name='Page', description='The page number.', example='1'),
    pageSize?: string(name='PageSize', description='The number of entries per page.', example='20'),
    preference?: string(name='Preference', description='A reserved parameter. Ignore this parameter.', example='null'),
    total?: string(name='Total', description='The total number of entries returned.', example='7'),
  }(name='Data', description='The result of the operation.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The error message returned if the request failed.', example='StartTime is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The request ID.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model GetRumDataForPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRumDataForPageResponseBody(name='body'),
}

/**
  * Real User Monitoring (RUM) is available only in the China (Hangzhou), Singapore, and US (Silicon Valley) regions. Select the correct endpoint.
  *
 */
async function getRumDataForPage(request: GetRumDataForPageRequest): GetRumDataForPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRumDataForPage', 'POST', '/', 'json', false, 'json', request);
}

model GetRumExceptionStackRequest {
  exceptionBinaryImages?: string(name='ExceptionBinaryImages', description='The binary images, which represent all executable files loaded into the process address space when a crash occurs.', example='iOSDemo:arm64%3B1489F4D3-6DE2-300C-90E9-E1B869675351%3B0x0000000104064000\\nAlibabaCloudRUM:arm64%3BAB7B3A8E-6CEE-325D-BCBB-8DA50E61804F%3B0x0000000106660000\\nlibdispatch.dylib:arm', position='Query'),
  exceptionStack?: string(name='ExceptionStack', description='The exception stack information. Set the value to a JSON string. call_stack.info represents the stack information, call_stack.thread.name represents the thread name, and call_stack.thread.id represents the thread ID. This parameter is exactly the same as the exception.stack parameter in the logstore-rum Logstore of Simple Log Service.', example='[
{
    "call_stack.info": "libsystem_kernel.dylib  0x00000001f1ce9178 0x00000001f1ce8000 + 4472\\r\\nlibsystem_kernel.dylib  0x00000001f1ce8f10 0x00000001f1ce8000 + 3856\\r\\nlibsystem_kernel.dylib  0x00000001f1ced718 0x00000001f1ce8000 + 22296\\r\\nAlibabaCloudRUM  0x0000000106711af4 0x0000000106660000 + 727796\\r\\nlibsystem_pthread.dylib  0x00000002146744d4 0x0000000214672000 + 9428",
    "call_stack.thread.name": "#3 BRSCrash Exception Handler (Secondary)",
    "call_stack.thread.id": "16643"
  }
]', position='Query'),
  exceptionThreadId?: string(name='ExceptionThreadId', description='The ID of the exception thread.', example='16643', position='Query'),
  pid: string(name='Pid', description='The application ID.', example='atxxxxzkcf@d8deedfa9bf****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  sourcemapType?: string(name='SourcemapType', description='The file type. Valid values:

- source-map: SourceMap files
- mapping: symbol table files for Android
- dsym: dSYM files for iOS', example='source-map', position='Query'),
}

model GetRumExceptionStackResponseBody = {
  code?: string(name='Code', description='The responses code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    lines?: [ string ](name='Lines', description='The list of stacks.'),
    threadId?: string(name='ThreadId', description='The thread ID.', example='16643'),
  }(name='Data', description='The response parameters.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The error message returned if the request failed.', example='Internal error. Please try again. Contact the DingTalk service account if the issue                              persists after multiple retries.'),
  requestId?: string(name='RequestId', description='Id of the request.', example='B6A00968-82A8-4F14-9D1B-B53827DB****'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model GetRumExceptionStackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRumExceptionStackResponseBody(name='body'),
}

/**
  * Real User Monitoring (RUM) is available only in the China (Hangzhou), Singapore, and US (Silicon Valley) regions. Select the correct endpoint.
  *
 */
async function getRumExceptionStack(request: GetRumExceptionStackRequest): GetRumExceptionStackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRumExceptionStack', 'POST', '/', 'json', false, 'json', request);
}

model GetRumOcuStatisticDataRequest {
  endTime: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1687849260000', position='Query'),
  filter?: [ 
    {
      key?: string(name='Key', description='The key of the filter condition. Three types of filter conditions are provided:

*   Application name: pid (Note that the application name is displayed, but the application ID is actually specified)
*   Application type: siteType
*   Data type: dataType', example='pid'),
      opType?: string(name='OpType', description='The type of the operator. Valid value: in.', example='in'),
      value?: any(name='Value', description='The value of the filter condition. The value is a JSON array of strings.', example='["b590xxxxx@2dcbxxxxx9", "b590xxxxx@2dcbxxxxx8"]'),
    }
  ](name='Filter', description='The filter condition. Three types of filter conditions are provided:

*   Application name: pid (Note that the application name is displayed, but the application ID is actually specified)
*   Application type: siteType
*   Data type: dataType', shrink='json', position='Query'),
  group?: [ string ](name='Group', description='The grouping fields. Valid values:

*   siteType: The total number of OCUs is grouped by application type.
*   dataType: The total number of OCUs is grouped by data type.
*   pid: The total number of OCUs is grouped by application ID.
*   appName: The total number of OCUs is grouped by application name.
*   startTime: The total number of OCUs is grouped by start time.', shrink='json', position='Query'),
  page: int32(name='Page', description='The page number.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries per page.', example='100', position='Query'),
  queryType?: string(name='QueryType', description='The type of the query. To query non-time series data, set the value to INSTANT. To query time series data, set the value to TIME_SERIES.', example='TIME_SERIES', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  startTime: long(name='StartTime', description='The beginning of the time range to query. Unit: milliseconds.', example='1600063200000', position='Query'),
}

model GetRumOcuStatisticDataResponseBody = {
  code?: long(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    complete?: boolean(name='Complete', description='Indicates whether the next page exists.', example='true'),
    items?: [ map[string]any ](name='Items', description='The queried data.'),
    page?: int32(name='Page', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='100'),
    total?: int32(name='Total', description='The total number of entries returned.', example='100'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The error message returned if the request failed.', example='null'),
  requestId?: string(name='RequestId', description='The request ID.', example='626037F5-FDEB-45B0-804C-B3C92797****'),
}

model GetRumOcuStatisticDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRumOcuStatisticDataResponseBody(name='body'),
}

/**
  * You can query the usage data for the current day at any time. You can query the usage data for the previous day only after 8:00 today.
  *
 */
async function getRumOcuStatisticData(request: GetRumOcuStatisticDataRequest): GetRumOcuStatisticDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRumOcuStatisticData', 'GET', '/', 'json', false, 'json', request);
}

model GetRumUploadFilesRequest {
  appType?: string(name='AppType', description='The file type. Valid values: source-map: SourceMap files. mapping: symbol table files for Android. dsym: dSYM files for iOS.', example='source-map', position='Query'),
  pid: string(name='Pid', description='The process ID (PID) of the application.', example='aoxxxxxly@741623b4e91****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  versionId?: string(name='VersionId', description='The version number of the files. If you do not specify this parameter, all versions of the files are returned by default.', example='1.0.0', position='Query'),
}

model GetRumUploadFilesResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: [ 
    {
      fileName?: string(name='FileName', description='The file name.', example='test.js.map'),
      lastModifiedTime?: any(name='LastModifiedTime', description='The time when the file was last modified. The value is a timestamp.', example='1682863151000'),
      size?: string(name='Size', description='The size of the file. Unit: bytes.', example='1000'),
      uuid?: string(name='Uuid', description='The file ID.', example='cxxxerfewrfwerfwerffvrt'),
      versionId?: string(name='VersionId', description='The version number of the file.', example='1.0.0'),
    }
  ](name='Data', description='The queried files.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The error message returned if the request failed.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='2983BEF7-4A0D-47A2-94A2-8E9C5E63****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model GetRumUploadFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRumUploadFilesResponseBody(name='body'),
}

/**
  * Real User Monitoring (RUM) is available only in the China (Hangzhou), Singapore, and US (Silicon Valley) regions. Select the correct endpoint.
  *
 */
async function getRumUploadFiles(request: GetRumUploadFilesRequest): GetRumUploadFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRumUploadFiles', 'POST', '/', 'json', false, 'json', request);
}

model GetSourceMapInfoRequest {
  ascendingSequence?: boolean(name='AscendingSequence', description='The order in which the files are sorted. Valid values:

*   true: ascending order
*   false: descending order', example='true', position='Query'),
  edition?: string(name='Edition', description='The version of the SourceMap file.', example='0.0.0', position='Query'),
  id: string(name='ID', description='The ID of the SourceMap file.', example='atc889zkcf@d8deedfa9bf****/0.0.0/test.sourcemap.js', position='Query'),
  keyword?: string(name='Keyword', description='The keyword in the file name. The files are searched by keyword.', example='test', position='Query'),
  orderField?: string(name='OrderField', description='The criterion by which the files are sorted. Valid values:

*   version: The files are sorted by version.
*   uploadTime: The files are sorted by upload time.', example='version', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model GetSourceMapInfoResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
  sourceMapList?: [ 
    {
      fid?: string(name='Fid', description='The ID of the SourceMap file.', example='atc889zkcf@d8deedfa9bf****/0.0.0/test.sourcemap.js'),
      fileName?: string(name='FileName', description='The name of the SourceMap file.', example='test.sourcemap.js'),
      size?: string(name='Size', description='The size of the file. Unit: KB.', example='201223'),
      uploadTime?: string(name='UploadTime', description='The timestamp that indicates when the file was uploaded.', example='1590657842000'),
      version?: string(name='Version', description='The version of the file.', example='0.0.0'),
    }
  ](name='SourceMapList', description='The details of the SourceMap file.'),
}

model GetSourceMapInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSourceMapInfoResponseBody(name='body'),
}

async function getSourceMapInfo(request: GetSourceMapInfoRequest): GetSourceMapInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSourceMapInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetStackRequest {
  endTime?: long(name='EndTime', description='The end time of the call method.', example='1653641800', position='Query'),
  pid?: string(name='Pid', description='The process identifier (PID) of the application. For more information about how to obtain the PID, see [Obtain the PID of an application](https://www.alibabacloud.com/help/zh/doc-detail/186100.htm?spm=a2cdw.13409063.0.0.7a72281f0bkTfx#title-imy-7gj-qhr).', example='eb4zdose6v@36bab313a******', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  rpcID: string(name='RpcID', description='The ID of the remote procedure call (RPC) mode. You can obtain the ID by calling the **GetTrace** operation.', example='0.1', position='Query'),
  startTime?: long(name='StartTime', description='The start time of the call method.', example='1653555396', position='Query'),
  traceID: string(name='TraceID', description='The trace ID. You can log on to the Application Real-Time Monitoring Service (ARMS) console and obtain the trace ID on the **Trace Query** page.', example='0a5800611641470044457853******', position='Query'),
}

model GetStackResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='B34C3A43-A901-5F94-9DAD-758CE4******'),
  stackInfo?: [ 
    {
      api?: string(name='Api', description='The name of the operation.', example='Tomcat Servlet Process'),
      duration?: long(name='Duration', description='The duration. Unit: milliseconds.', example='32'),
      exception?: string(name='Exception', description='The error message.', example='java.lang.NullPointerException'),
      extInfo?: {
        info?: string(name='Info', description='The content of the custom parameter.', example='input=254275&amp;'),
        type?: string(name='Type', description='The type of the custom parameter.', example='41'),
      }(name='ExtInfo', description='The information about the array object.'),
      line?: string(name='Line', description='The number of rows in the method stack information.', example='34'),
      rpcId?: string(name='RpcId', description='The ID of the RPC mode.', example='0.1'),
      serviceName?: string(name='ServiceName', description='The name of the service.', example='/com/test'),
      startTime?: long(name='StartTime', description='The start time of the call method.', example='1653555396'),
    }
  ](name='StackInfo', description='The information of the method stack.'),
}

model GetStackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetStackResponseBody(name='body'),
}

async function getStack(request: GetStackRequest): GetStackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStack', 'POST', '/', 'json', false, 'json', request);
}

model GetSyntheticMonitorsRequest {
  filter: {
    monitorCategory: int32(name='MonitorCategory', description='The type of the monitoring point. Valid values: 1: PC. 2: mobile device.', example='1'),
    network: int32(name='Network', description='The network type. Valid values: 1: private network. 2: Internet.', example='1'),
    taskType: int32(name='TaskType', description='The type of the monitoring task. Valid values:

1: ICMP. 2: TCP. 3: DNS. 4: HTTP. 5: website speed. 6: file download.', example='1'),
  }(name='Filter', description='The query conditions.', shrink='json', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetSyntheticMonitorsResponseBody = {
  code?: long(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: [ 
    {
      available?: string(name='Available', description='Indicates whether the monitoring point is available. Valid values: true and false.', example='true'),
      canBeSelected?: boolean(name='CanBeSelected', description='Indicates whether the monitoring point is selected. Valid values: true and false.', example='true'),
      city?: string(name='City', description='The city.', example='Beijing'),
      cityCode?: string(name='CityCode', description='The city code.', example='1100101'),
      clientType?: int32(name='ClientType', description='The client type of the monitoring point. Valid values: 1: data center. 2: Internet. 3: mobile device. 4: ECS instance.', example='1'),
      country?: string(name='Country', description='The country.', example='China'),
      ipv6?: int32(name='Ipv6', description='Indicates whether IPv6 is supported. Valid values: 0: IPv6 is not supported. 1: IPv6 is supported.', example='0'),
      operator?: string(name='Operator', description='The carrier.', example='Alibaba Cloud'),
      operatorCode?: string(name='OperatorCode', description='The carrier code.', example='1'),
      region?: string(name='Region', description='The region.', example='Beijing'),
    }
  ](name='Data', description='The list of monitoring points.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='2FD473FF-5398-5A85-9BF6-7AB45561522F'),
}

model GetSyntheticMonitorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSyntheticMonitorsResponseBody(name='body'),
}

async function getSyntheticMonitors(request: GetSyntheticMonitorsRequest): GetSyntheticMonitorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSyntheticMonitors', 'GET', '/', 'json', false, 'json', request);
}

model GetSyntheticTaskDetailRequest {
  regionId?: string(name='RegionId', description='The region ID. Default value: cn-hangzhou.', example='cn-hangzhou', position='Query'),
  taskId: string(name='TaskId', description='The ID of the synthetic monitoring task.', example='123', position='Query'),
}

model GetSyntheticTaskDetailResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4D6C358A-A58B-4F4B-94CE-F5AAF023****'),
  taskDetail?: {
    commonParam?: {
      alarmFlag?: long(name='AlarmFlag', description='The identifier of the alert.', example='1'),
      alertList?: [ 
        {
          generalAlert?: string(name='GeneralAlert', description='The low-risk alert.', example='1'),
          isCritical?: string(name='IsCritical', description='Indicates whether the condition is essential.', example='0'),
          name?: string(name='Name', description='The alert name.', example='alert-test'),
          seriousAlert?: string(name='SeriousAlert', description='The Critical-level alert.', example='1'),
          symbols?: string(name='Symbols', description='Greater than or less than.', example='1'),
        }
      ](name='AlertList', description='The list of alerts.'),
      alertNotifierId?: string(name='AlertNotifierId', description='The ID of the alert identifier.', example='1'),
      alertPolicyId?: string(name='AlertPolicyId', description='The ID of the alert policy.', example='1'),
      monitorSamples?: string(name='MonitorSamples', description='The monitoring samples.', example='1'),
      startExecutionTime?: string(name='StartExecutionTime', description='The start time of the execution.', example='1664427128'),
    }(name='CommonParam', description='The list of common parameters.'),
    download?: {
      connectionTimeout?: long(name='ConnectionTimeout', description='The timeout period of the file download task.', example='200'),
      downloadCustomHeaderContent?: string(name='DownloadCustomHeaderContent', description='The items to be ignored in a certificate error. Multiple values are concatenated with vertical bars (|).', example='char'),
      downloadCustomHost?: long(name='DownloadCustomHost', description='The custom host. Valid values:

*   1: round robin
*   0: random', example='0'),
      downloadCustomHostIp?: string(name='DownloadCustomHostIp', description='The custom IP address of the host. Multiple IP addresses are separated with commas (,).', example='168.23.45.1'),
      downloadKernel?: long(name='DownloadKernel', description='The kernel type. Valid values:

*   1: curl
*   0: WinInet', example='1'),
      downloadRedirect?: long(name='DownloadRedirect', description='Indicates whether redirection is supported.', example='1'),
      downloadTransmissionSize?: long(name='DownloadTransmissionSize', description='The file size. Unit: KB.', example='20'),
      monitorTimeout?: long(name='MonitorTimeout', description='The monitoring duration.', example='12'),
      quickProtocol?: string(name='QuickProtocol', description='The QUIC protocol type. Valid values:

*   1: HTTP/1
*   2: HTTP/2
*   3: http3', example='1'),
      validateKeywords?: string(name='ValidateKeywords', description='The keyword that is used in verification.', example='test'),
      verifyWay?: long(name='VerifyWay', description='The method that is used to verify the response content. Valid values:

*   0: no verification.
*   1: exact match with the verification string.
*   2: partial match with the verification string.
*   3: MD5 verification.', example='0'),
      whiteList?: string(name='WhiteList', description='The whitelisted objects that are used to avoid DNS hijacking. Format: `<domain name>:<objects>`.

>  WAP networks do not support hijacking.', example='[{\\"src\\":\\"211.154.166.174\\"}]'),
    }(name='Download', description='The file download task.'),
    extendInterval?: {
      days?: [ long ](name='Days', description='The day on which synthetic monitoring is performed. Valid values:

*   \\-1: every day
*   0: Sunday
*   1: Monday
*   2: Tuesday
*   3: Wednesday
*   4: Thursday
*   5: Friday
*   6: Saturday'),
      endMinute?: long(name='EndMinute', description='The minute at which synthetic monitoring ends.', example='20'),
      endTime?: string(name='EndTime', description='The time when synthetic monitoring ends. Format: `yyyy-MM-dd HH`.', example='2022-05-03 11:40'),
      endhour?: long(name='Endhour', description='The hour at which synthetic monitoring ends.', example='12'),
      startHour?: long(name='StartHour', description='The hour at which synthetic monitoring starts.', example='9'),
      startMinute?: long(name='StartMinute', description='The minute at which synthetic monitoring starts.', example='20'),
      startTime?: string(name='StartTime', description='The time when synthetic monitoring starts. Format: yyyy-MM-dd HH.', example='2022-02-26 11:40'),
    }(name='ExtendInterval', description='The frequency.'),
    intervalTime?: long(name='IntervalTime', description='The interval at which synthetic monitoring is performed. Unit: minutes. Valid values:

*   1
*   5
*   10
*   15
*   20
*   30
*   60
*   120
*   180
*   240
*   360
*   480
*   720
*   1440', example='20'),
    intervalType?: long(name='IntervalType', description='The interval type. Valid values:

*   0: daily
*   1: custom frequency', example='0'),
    ipType?: long(name='IpType', description='The IP version. Valid values:

*   0: A version is automatically selected.
*   1: IPv4.
*   2: IPv6.', example='0'),
    monitorList?: [ 
      {
        cityCode?: long(name='CityCode', description='The city code.', example='110100'),
        monitorType?: long(name='MonitorType', description='The type of the detection point.', example='IDC'),
        netServiceId?: long(name='NetServiceId', description='The ID of the network service.', example='12001'),
        sendCount?: long(name='SendCount', description='The number of times that the system sends detection requests.', example='20'),
      }
    ](name='MonitorList', description='The detection points.'),
    monitorListString?: string(name='MonitorListString', description='The detection points.', example='12'),
    nav?: {
      dnsHijackWhitelist?: string(name='DnsHijackWhitelist', description='The DNS whitelist.', example='119.119.53.156'),
      elementBlacklist?: string(name='ElementBlacklist', description='The element blacklist.', example='test'),
      executeActiveX?: long(name='ExecuteActiveX', description='Indicates whether ActiveX is executed. Valid values:

*   3: yes
*   0: no

>  Only IE elements support this parameter.', example='3'),
      executeApplet?: long(name='ExecuteApplet', description='Indicates whether the applet is executed. Valid values:

*   0: no
*   1: yes', example='1'),
      executeScript?: long(name='ExecuteScript', description='Indicates whether scripts are executed. Valid values:

*   1: yes
*   0: no

>  Only IE elements support this parameter.', example='1'),
      filterInvalidIP?: long(name='FilterInvalidIP', description='Indicates whether invalid IP addresses are excluded. Valid values:

*   1: no
*   0: yes', example='1'),
      flowHijackJumpTimes?: long(name='FlowHijackJumpTimes', description='The element that is used in DNS hijacking.', example='12'),
      flowHijackLogo?: string(name='FlowHijackLogo', description='The tag that is used in DNS hijacking.', example='target'),
      monitorTimeout?: long(name='MonitorTimeout', description='The monitoring timeout period.', example='20'),
      navAutomaticScrolling?: long(name='NavAutomaticScrolling', description='Indicates whether the screen is automatically scrolled up and down to load a page. Valid values:

*   1: yes
*   0: no', example='1'),
      navCustomHeader?: string(name='NavCustomHeader', description='Indicates whether a custom header is created. Valid values:

*   0: no
*   1: A custom header is created for the first packet.
*   2: A custom header is created for all packets.', example='0'),
      navCustomHeaderContent?: string(name='NavCustomHeaderContent', description='The format of the custom header. Multiple fields are separated with vertical bars (|).', example='content'),
      navCustomHost?: long(name='NavCustomHost', description='The custom host mode. Valid values:

*   1: round robin
*   0: random', example='1'),
      navCustomHostIp?: string(name='NavCustomHostIp', description='The custom IP address of the host. Multiple IP addresses are separated with commas (,).', example='119.119.53.156/32'),
      navDisableCache?: long(name='NavDisableCache', description='Indicates whether caching is disabled. Valid values:

*   1: Caching is disabled.
*   0: Caching is enabled.', example='1'),
      navDisableCompression?: long(name='NavDisableCompression', description='Indicates whether compression is disabled. Valid values:

*   0: Compression is enabled.
*   1: Compression is disabled.', example='0'),
      navIgnoreCertificateError?: long(name='NavIgnoreCertificateError', description='Indicates whether certificate errors are ignored during certificate verification in the SSL handshake. Valid values:

*   1: yes
*   0: no', example='1'),
      navRedirect?: long(name='NavRedirect', description='Indicates whether redirection is enabled. Valid values:

*   0: no
*   1: yes', example='1'),
      navReturnElement?: long(name='NavReturnElement', description='Indicates whether the elements on the page are returned.

*   1: no. The basic document data is returned.
*   2: yes. All document data is returned.', example='1'),
      pageTampering?: string(name='PageTampering', description='The page tampering.', example='content'),
      processName?: string(name='ProcessName', description='The process ID.', example='ssh'),
      quicDomain?: string(name='QuicDomain', description='The domain name of the QUIC request element.', example='www.example.com'),
      quicVersion?: long(name='QuicVersion', description='The QUIC version. Default value: 0. Valid values:

*   35
*   39
*   43
*   44

>  Only Chrome elements support this parameter.', example='0'),
      requestHeader?: long(name='RequestHeader', description='Indicates whether request headers are returned. Valid values:

*   0: no
*   1: The headers of base documents are returned.
*   2: All headers are returned.', example='0'),
      slowElementThreshold?: long(name='SlowElementThreshold', description='The time threshold that is used to define a slow element. Unit: seconds.', example='30'),
      verifyStringBlacklist?: string(name='VerifyStringBlacklist', description='The blacklist for string verification.', example='test'),
      verifyStringWhitelist?: string(name='VerifyStringWhitelist', description='The whitelist for string verification.', example='test'),
      waitCompletionTime?: long(name='WaitCompletionTime', description='The timeout period of waiting for the monitoring to complete.', example='20'),
    }(name='Nav', description='The browser test task.'),
    net?: {
      netDigSwitch?: long(name='NetDigSwitch', description='Indicates whether the data is displayed in the DIG format. Valid values:

*   0: no
*   1: yes', example='0'),
      netDnsNs?: string(name='NetDnsNs', description='The NS server.', example='189.12.32.124'),
      netDnsQueryMethod?: string(name='NetDnsQueryMethod', description='The DNS query method. Valid values:

*   1: recursive
*   2: iterative', example='1'),
      netDnsServer?: long(name='NetDnsServer', description='The type of the DNS server. Valid values:

*   0: ipv4
*   1: ipv6
*   2: A version is automatically selected.', example='0'),
      netDnsSwitch?: long(name='NetDnsSwitch', description='Indicates whether DNS test is enabled. Valid values:

*   0: no
*   1: yes', example='0'),
      netDnsTimeout?: string(name='NetDnsTimeout', description='The timeout period of DNS requests.', example='10'),
      netIcmpActive?: long(name='NetIcmpActive', description='The protocol type. Valid values:

*   0 : ICMP
*   1 : TCP', example='0'),
      netIcmpDataCut?: long(name='NetIcmpDataCut', description='Indicates whether packets are split. Valid values:

*   0: no
*   1: yes', example='0'),
      netIcmpInterval?: long(name='NetIcmpInterval', description='The interval at which the synthetic monitoring task is executed.', example='10'),
      netIcmpNum?: long(name='NetIcmpNum', description='The number of packets.', example='10'),
      netIcmpSize?: long(name='NetIcmpSize', description='The packet size.', example='30'),
      netIcmpSwitch?: long(name='NetIcmpSwitch', description='Indicates whether ICMP test is enabled. Valid values:

*   0: no.
*   1: yes. If you set this parameter to 1, you must also set the Icmp parameter.', example='0'),
      netIcmpTimeout?: long(name='NetIcmpTimeout', description='The monitoring timeout period.', example='20'),
      netTraceRouteNum?: long(name='NetTraceRouteNum', description='The maximum number of active detection points.', example='30'),
      netTraceRouteSwitch?: long(name='NetTraceRouteSwitch', description='Indicates whether Tracert test is enabled. Valid values:

*   0: no
*   1: yes. If you set this parameter to 1, you must also set the Tracert parameter.', example='0'),
      netTraceRouteTimeout?: long(name='NetTraceRouteTimeout', description='The monitoring timeout period. Valid values: 0 to 300. Unit: seconds.', example='20'),
      whiteList?: string(name='WhiteList', description='The whitelisted objects that are used to avoid DNS hijacking. Format: `<domain name>:<objects>`.

>  WAP networks do not support hijacking.', example='119.119.53.156/32'),
    }(name='Net', description='The network synthetic monitoring task.'),
    protocol?: {
      characterEncoding?: long(name='CharacterEncoding', description='The encoding format. Valid values:

*   0: UTF-8
*   1: GBK
*   2: GB2312
*   3: Unicode', example='0'),
      customHost?: long(name='CustomHost', description='The custom host. Valid values:

*   1: round robin
*   0: random', example='1'),
      customHostIp?: string(name='CustomHostIp', description='The custom IP address of the host. Multiple IP addresses are separated with commas (,).', example='119.119.53.156'),
      protocolConnectionTimeout?: long(name='ProtocolConnectionTimeout', description='The timeout period.', example='20'),
      protocolMonitorTimeout?: long(name='ProtocolMonitorTimeout', description='The timeout period of API performance monitoring. Unit: seconds.', example='30'),
      receivedDataSize?: long(name='ReceivedDataSize', description='The size of the received data. This parameter is returned when **VerifyWay** is set to 2.', example='30'),
      requestContent?: {
        body?: {
          formdata?: {
            key?: string(name='Key', description='The key of the **form-data**.', example='appId'),
            value?: string(name='Value', description='The value of the form-data.', example='3425'),
          }(name='Formdata', description='The data content. This parameter is returned when Mode is set to form-data.'),
          language?: string(name='Language', description='The language used when Mode is set to raw. Valid values:

*   json
*   xml
*   javascript
*   html
*   text', example='xml'),
          mode?: string(name='Mode', description='The type of the content. Valid values:

*   form-data
*   x-www-form-urlencoded
*   raw', example='form-data'),
          raw?: string(name='Raw', description='The data content. This parameter is returned when **Mode** is set to **raw**.', example='content'),
          urlencoded?: {
            key?: string(name='Key', description='The tag key.', example='appId'),
            value?: string(name='Value', description='The tag value.', example='11080'),
          }(name='Urlencoded', description='The URL of the body content.'),
        }(name='Body', description='The content of the request body.'),
        header?: [ 
          {
            key?: string(name='Key', description='The key of the header in the request parameters.', example='regionId'),
            value?: string(name='Value', description='The value of the header in the request parameters.', example='cn-hangzhou'),
          }
        ](name='Header', description='The request header.'),
        method?: string(name='Method', description='The request method. Valid values:

*   POST
*   GET', example='POST'),
      }(name='RequestContent', description='The request content, including the header and body.'),
      verifyContent?: string(name='VerifyContent', description='The verification string.', example='list'),
      verifyWay?: long(name='VerifyWay', description='The method that is used to verify the response content. Valid values:

*   0: no verification.
*   1: exact match with the verification string.
*   2: partial match with the verification string.
*   3: MD5 verification.', example='0'),
    }(name='Protocol', description='The synthetic monitoring task of the API performance type.'),
    taskId?: long(name='TaskId', description='The ID of the synthetic monitoring task.', example='19584'),
    taskName?: string(name='TaskName', description='The name of the task.', example='net-test'),
    taskType?: long(name='TaskType', description='The type of the task. Valid values:

1.  3: web page performance - IE
2.  34: web page performance - Chrome
3.  0: network quality
4.  40: file download
5.  7: API performance', example='0'),
    url?: string(name='Url', description='The URL for synthetic monitoring.', example='www.example.com'),
  }(name='TaskDetail', description='The details of the task.'),
}

model GetSyntheticTaskDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSyntheticTaskDetailResponseBody(name='body'),
}

async function getSyntheticTaskDetail(request: GetSyntheticTaskDetailRequest): GetSyntheticTaskDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSyntheticTaskDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetSyntheticTaskListRequest {
  direction?: string(name='Direction', description='The order by which the queried tasks are sorted. Valid values:

*   **asc**: ascending
*   **desc**: descending', example='asc', position='Query'),
  order?: string(name='Order', description='The condition by which the queried tasks are sorted.', example='CreateTime', position='Query'),
  pageNum?: long(name='PageNum', description='The page number.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='10', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. Default value: **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  taskName?: string(name='TaskName', description='The task name.', example='net-test', position='Query'),
  taskStatus?: string(name='TaskStatus', description='The status of the task. Valid values:

*   **0**: The task is stopped.
*   **1**: The task is started.
*   **9**: The task is ended.', example='1', position='Query'),
  taskType?: string(name='TaskType', description='The type of the task. Valid values:

1.  3: web page performance - IE
2.  34: web page performance - Chrome
3.  0: network quality
4.  40: file download
5.  7: API performance', example='0', position='Query'),
  url?: string(name='Url', description='The URL for synthetic monitoring.', example='https://www.example.com', position='Query'),
}

model GetSyntheticTaskListResponseBody = {
  pageInfo?: {
    hasNextPage?: string(name='HasNextPage', description='Indicates whether the current page is followed by a page.', example='false'),
    hasPreviousPage?: boolean(name='HasPreviousPage', description='Indicates whether a previous page exists.', example='true'),
    isFirstPage?: boolean(name='IsFirstPage', description='Indicates whether the page is the first page.', example='true'),
    isLastPage?: boolean(name='IsLastPage', description='Indicates whether the page is the last page.', example='true'),
    list?: [ 
      {
        createTime?: string(name='CreateTime', description='The time when the task was created.', example='1634005438000'),
        monitorNumber?: long(name='MonitorNumber', description='The number of detection points.', example='2'),
        taskId?: string(name='TaskId', description='The ID of the synthetic monitoring task.', example='2118709'),
        taskName?: string(name='TaskName', description='The task name.', example='net-test'),
        taskStatus?: string(name='TaskStatus', description='The status of the task. Valid values:

*   **0**: The task is stopped.
*   **1**: The task is started.
*   **9**: The task is ended.', example='0'),
        taskType?: long(name='TaskType', description='The type of the task. Valid values:

1.  3: web page performance - IE
2.  34: web page performance - Chrome
3.  0: network quality
4.  40: file download
5.  7: API performance', example='0'),
        taskTypeName?: string(name='TaskTypeName', description='The name of the task type.'),
        url?: string(name='Url', description='The URL for synthetic monitoring.', example='www.example.com'),
        usable?: float(name='Usable', description='The availability. Only the data of the last day is counted. If no data is available for the last day, an empty value is returned.', example='0.80'),
      }
    ](name='List', description='The task information.'),
    navigateFirstPage?: string(name='NavigateFirstPage', description='The first page on the navigation bar.', example='1'),
    navigateLastPage?: string(name='NavigateLastPage', description='The last page on the navigation bar.', example='3'),
    navigatePageNums?: string(name='NavigatePageNums', description='All navigation page numbers.', example='1,2,3'),
    nextPage?: string(name='NextPage', description='The next page.', example='3'),
    pages?: string(name='Pages', description='The total number of pages returned.', example='10'),
    prepage?: string(name='Prepage', description='The previous page.', example='1'),
    size?: long(name='Size', description='The number of entries per page.', example='10'),
    total?: long(name='Total', description='The total number of entries returned.', example='15'),
  }(name='PageInfo', description='The query results.'),
  requestId?: string(name='RequestId', description='The request ID.', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
}

model GetSyntheticTaskListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSyntheticTaskListResponseBody(name='body'),
}

async function getSyntheticTaskList(request: GetSyntheticTaskListRequest): GetSyntheticTaskListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSyntheticTaskList', 'POST', '/', 'json', false, 'json', request);
}

model GetSyntheticTaskMonitorsRequest {
  regionId: string(name='RegionId', description='The ID of the region in which the application is located.', example='cn-hangzhou', position='Query'),
}

model GetSyntheticTaskMonitorsResponseBody = {
  code?: string(name='Code', description='The status code returned.

*   1001: The request was successful.
*   1002: The request failed.
*   1003: Parameter errors occurred.
*   1004: Authentication failed.
*   1006: The task does not exist.
*   1099: Internal errors occurred.', example='1001'),
  data?: [ 
    {
      busy?: long(name='Busy', description='The task status.

*   0: active
*   1: busy', example='0'),
      city?: string(name='City', description='The name of the city to which the monitoring point belongs.', example='Beijing'),
      cityCode?: long(name='CityCode', description='The ID of the city to which the monitoring point belongs.', example='1100101'),
      clientType?: long(name='ClientType', description='The client type:

*   1: IDC
*   2: Last mile', example='1'),
      district?: string(name='District', description='The region to which the monitoring point belongs.', example='Beijing'),
      netServiceId?: long(name='NetServiceId', description='The ID of the carrier.', example='18'),
      netServiceName?: string(name='NetServiceName', description='The name of the carrier.', example='XXX'),
    }
  ](name='Data', description='The details of the monitoring point.'),
  msg?: string(name='Msg', description='The message that is returned when the request failed.', example='null'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='21E85B16-75A6-429A-9F65-8AAC9A54****'),
}

model GetSyntheticTaskMonitorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSyntheticTaskMonitorsResponseBody(name='body'),
}

async function getSyntheticTaskMonitors(request: GetSyntheticTaskMonitorsRequest): GetSyntheticTaskMonitorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSyntheticTaskMonitors', 'POST', '/', 'json', false, 'json', request);
}

model GetTimingSyntheticTaskRequest {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  taskId?: string(name='TaskId', description='The ID of the synthetic monitoring task.', example='856566a9cb2a4cafa05aa95ed0ec8f21', position='Query'),
}

model GetTimingSyntheticTaskResponseBody = {
  code?: long(name='Code', description='The status code returned. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    availableAssertions?: [ 
      {
        expect?: string(name='Expect', description='The expected value.', example='100'),
        operator?: string(name='Operator', description='The condition. gt: greater than. gte: greater than or equal to. lt: less than. lte: less than or equal to. eq: equal to. neq: not equal to. ctn: contain. nctn: does not contain. exist: exist. n_exist: does not exist. belong: belong to. n_belong: does not belong to. reg_match: regular expression.', example='gt'),
        target?: string(name='Target', description='The check target. If you set the type parameter to HttpResCode, HttpResBody, or HttpResponseTime, you do not need to set the target parameter. If you set the type parameter to HttpResHead, you must specify the key in the header. If you set the type parameter to HttpResBodyJson, use jsonPath.', example='key'),
        type?: string(name='Type', description='The assertion type. Valid values: HttpResCode, HttpResHead, HttpResBody, HttpResBodyJson, HttpResponseTime, IcmpPackLoss (packet loss rate), IcmpPackMaxLatency (maximum packet latency), IcmpPackAvgLatency (average packet latency), TraceRouteHops (number of hops), DnsARecord (A record), DnsCName (CNAME), websiteTTFB (time to first packet), websiteTTLB (time to last packet), websiteFST (first paint time), websiteFFST (first meaningful paint), websiteOnload (full loaded time). For more information, see the following description.', example='websiteTTLB'),
      }
    ](name='AvailableAssertions', description='The list of assertions.'),
    commonSetting?: {
      customHost?: {
        hosts?: [ 
          {
            domain?: string(name='Domain', description='The domain name.', example='www.aliyun.com'),
            ipType?: int32(name='IpType', description='The IP version. Valid values:

*   0: A version is automatically selected.
*   1: IPv4
*   2: IPv6', example='0'),
            ips?: [ string ](name='Ips', description='The list of IP addresses.'),
          }
        ](name='Hosts', description='The list of hosts.'),
        selectType?: int32(name='SelectType', description='The selection mode. 0: Random. 1: Polling.', example='0'),
      }(name='CustomHost', description='The custom host.'),
      customPrometheusSetting?: {
        prometheusClusterId?: string(name='PrometheusClusterId', description='A reserved parameter.', example='Reserved parameter'),
        prometheusClusterRegion?: string(name='PrometheusClusterRegion', description='A reserved parameter.', example='Reserved parameter'),
        prometheusLabels?: map[string]string(name='PrometheusLabels', description='A reserved parameter.'),
      }(name='CustomPrometheusSetting', description='The reserved parameters.'),
      customVPCSetting?: {
        regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
        secureGroupId?: string(name='SecureGroupId', description='Security group ID. This security group is where the dial-up client is located. The security group limits the inbound and outbound rules of the dial-up client in the VPC. You need to set the inbound rules of the security group where your VPC is located to allow the security group where the dial-up client is located to access. Otherwise, the dial-up client cannot smoothly access the resources in your VPC.', example='sg-xxxxxxx'),
        vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-bp1i0xezblf1yrz4xxxxx'),
        vpcId?: string(name='VpcId', description='VPC ID.', example='vpc-2zexy5nae9q2otaxxxx'),
      }(name='CustomVPCSetting', description='User VPC information. If the dial-up is to the Alibaba Cloud intranet address, you need to configure the VPC information.'),
      ipType?: int32(name='IpType', description='The IP version. Valid values:

*   0: A version is automatically selected.
*   1: IPv4
*   2: IPv6', example='0'),
      isOpenTrace?: boolean(name='IsOpenTrace', description='Whether to enable tracing.', example='true'),
      monitorSamples?: int32(name='MonitorSamples', description='Specifies whether to evenly distribute monitoring samples. Valid values:

*   0: No
*   1: Yes', example='0'),
      traceClientType?: int32(name='TraceClientType', description='Tracing client type:

- 0: ARMS Agent
- 1: Open Telemetry
- 2: Jaeger', example='1'),
      xtraceRegion?: string(name='XtraceRegion', description='Tracing data reporting region.', example='cn-hangzhou'),
    }(name='CommonSetting', description='The general settings.'),
    customPeriod?: {
      endHour?: long(name='EndHour', description='The hour at which the test ends. Valid values: 0 to 24.', example='22'),
      startHour?: long(name='StartHour', description='The hour at which the test starts. Valid values: 0 to 24.', example='14'),
    }(name='CustomPeriod', description='The custom cycle.'),
    frequency?: string(name='Frequency', description='The detection frequency. Valid values: 1m, 5m, 10m, 15m, 20m, 30m, 1h, 2h, 3h, 4h, 6h, 8h, 12h, and 24h.', example='5m'),
    monitorCategory?: long(name='MonitorCategory', description='The detection point type. 1: PC. 2: mobile device.', example='1'),
    monitorConf?: {
      apiHTTP?: {
        checkCert?: boolean(name='CheckCert', description='Whether to verify the certificate. The default is no.', example='false'),
        connectTimeout?: long(name='ConnectTimeout', description='The connection timeout period. Unit: milliseconds. Default value: 5000. Minimum value: 1000. Maximum value: 300000.', example='5000'),
        method?: string(name='Method', description='The request method.

*   POST
*   GET', example='POST'),
        protocolAlpnProtocol?: int32(name='ProtocolAlpnProtocol', description='The ALPN protocol version. You can configure this parameter when you perform an HTTPS synthetic test on a WAP mobile client. Valid values:

0: default

1: HTTP/1.1

2: HTTP/2

3: disables the ALPN protocol', example='1'),
        requestBody?: {
          content?: string(name='Content', description='The content of the request body. Format: JSON string. The parameter is required if the type parameter is set to text/plain, application/json, application/xml, or text/html. Format: JSON string.', example='text/plain'),
          type?: string(name='Type', description='The type of the request body. Valid values: text/plain, application/json, application/x-www-form-urlencoded, multipart/form-data, application/xml, and text/html.', example='multipart/form-data'),
        }(name='RequestBody', description='The HTTP request body.'),
        requestHeaders?: map[string]string(name='RequestHeaders', description='The HTTP request header.'),
        targetUrl?: string(name='TargetUrl', description='The URL for synthetic monitoring.', example='http://127.0.0.1:8090/api/list'),
        timeout?: long(name='Timeout', description='The timeout period. Unit: milliseconds. Default value: 10000. Minimum value: 1000. Maximum value: 300000.', example='10000'),
      }(name='ApiHTTP', description='The parameters of the HTTP(S) synthetic test.'),
      fileDownload?: {
        connectionTimeout?: long(name='ConnectionTimeout', description='The connection timeout period. Unit: milliseconds. Minimum value: 1000. Maximum value: 120000. Default value: 5000.', example='5000'),
        customHeaderContent?: map[string]string(name='CustomHeaderContent', description='The content of the custom request header.'),
        downloadKernel?: long(name='DownloadKernel', description='The kernel type.

*   1: curl
*   0: WinInet', example='0'),
        ignoreCertificateAuthError?: int32(name='IgnoreCertificateAuthError', description='Specifies whether to ignore CA certificate authentication errors. 0: No. 1: Yes. Default value: 1.', example='0'),
        ignoreCertificateCanceledError?: int32(name='IgnoreCertificateCanceledError', description='Specifies whether to ignore certificate revocation errors. 0: No. 1: Yes. Default value: 1.', example='0'),
        ignoreCertificateOutOfDateError?: int32(name='IgnoreCertificateOutOfDateError', description='Specifies whether to ignore certificate invalidity. 0: No. 1: Yes. Default value: 1.', example='0'),
        ignoreCertificateStatusError?: int32(name='IgnoreCertificateStatusError', description='Specifies whether to ignore certificate status errors. 0: No. 1: Yes. Default value: 1.', example='0'),
        ignoreCertificateUntrustworthyError?: int32(name='IgnoreCertificateUntrustworthyError', description='Specifies whether to ignore certificate incredibility. 0: No. 1: Yes. Default value: 1.', example='0'),
        ignoreCertificateUsingError?: int32(name='IgnoreCertificateUsingError', description='Specifies whether to ignore certificate usage errors. 0: No. 1: Yes. Default value: 1.', example='0'),
        ignoreInvalidHostError?: int32(name='IgnoreInvalidHostError', description='Specifies whether to ignore host invalidity. 0: No. 1: Yes. Default value: 1.', example='0'),
        monitorTimeout?: long(name='MonitorTimeout', description='The monitoring timeout period. Unit: milliseconds. Minimum value: 1000. Maximum value: 120000. Default value: 60000.', example='6000'),
        quickProtocol?: long(name='QuickProtocol', description='The QUIC protocol type.

*   1: http1
*   2: http2
*   3: http3', example='1'),
        redirection?: int32(name='Redirection', description='Specifies whether to support redirection. 0: No. 1: Yes. Default value: 1.', example='0'),
        targetUrl?: string(name='TargetUrl', description='The file download URL.', example='https://********'),
        transmissionSize?: long(name='TransmissionSize', description='The maximum file size of a single transfer. Unit: KB. Minimum value: 1. Maximum value: 20480. Valid values: 2048.', example='2048'),
        validateKeywords?: string(name='ValidateKeywords', description='Verify keywords.', example='success'),
        verifyWay?: int32(name='VerifyWay', description='Verification method.

- 0: No verification
- 1: Verification string
- 2: MD5 verification', example='0'),
        whiteList?: string(name='WhiteList', description='DNS hijacking whitelist. Matching rules support IP, IP wildcard, subnet mask and CNAME. You can fill in multiple matching rules, and multiple matching rules are separated by vertical bars (|). For example: `www.aliyun.com:203.0.3.55|203.3.44.67`, which means that all IPs except 203.0.3.55 and 203.3.44.67 under the www.aliyun.com domain name are hijacked.', example='www.aliyun.com:203.0.3.55|203.3.44.67'),
      }(name='FileDownload', description='The file download parameters.'),
      netDNS?: {
        dnsServerIpType?: int32(name='DnsServerIpType', description='The IP version of the DNS server. 0: IPv4. 1: IPv6. 2: A version is automatically selected. Default value: 0.', example='0'),
        nsServer?: string(name='NsServer', description='The IP address of the DNS server. Default value: 114.114.114.114.', example='114.114.114.114'),
        queryMethod?: int32(name='QueryMethod', description='The DNS query. 0: recursive, 1: iterative. Default value: 0.', example='0'),
        targetUrl?: string(name='TargetUrl', description='The destination domain name.', example='www.aliyun.com'),
        timeout?: long(name='Timeout', description='The timeout period for the DNS synthetic test. Unit: milliseconds. The minimum value is 1000 and the maximum value is 45000. Default value: 5000.', example='5000'),
      }(name='NetDNS', description='The DNS synthetic test parameters. This parameter is required if the TaskType parameter is set to 3.'),
      netICMP?: {
        interval?: int32(name='Interval', description='The interval at which ICMP packets are sent. Unit: milliseconds. Minimum value: 200. Maximum value: 2000. Default value: 200.', example='200'),
        packageNum?: int32(name='PackageNum', description='The number of ICMP packets that are sent. Minimum value: 1. Maximum value: 50. Default value: 4.', example='4'),
        packageSize?: int32(name='PackageSize', description='The size of each ICMP packet. Unit: bytes. Valid values: 32, 64, 128, 256, 512, 1024.', example='1024'),
        splitPackage?: boolean(name='SplitPackage', description='Specifies whether to split ICMP packets. Default value: true.', example='true'),
        targetUrl?: string(name='TargetUrl', description='The destination host IP address or domain name', example='www.aliyun.com'),
        timeout?: long(name='Timeout', description='The timeout period for the TCP synthetic test. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 20000.', example='2000'),
        tracertEnable?: boolean(name='TracertEnable', description='Specifies whether to enable the tracert command. Default value: true.', example='true'),
        tracertNumMax?: int32(name='TracertNumMax', description='The maximum number of hops for tracert. Minimum value: 1. Maximum value: 128. Default value: 64.', example='64'),
        tracertTimeout?: long(name='TracertTimeout', description='The timeout period of tracert. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 60000.', example='60000'),
      }(name='NetICMP', description='The ICMP synthetic test parameters. This parameter is required if the TaskType parameter is set to 1.'),
      netTCP?: {
        connectTimes?: int32(name='ConnectTimes', description='The number of TCP connections that are established in a test. Minimum value: 1. Maximum value: 16. Default value: 4.', example='4'),
        interval?: long(name='Interval', description='The interval at which TCP connections are established. Unit: milliseconds. Minimum value: 200. Maximum value: 10000. Default value: 200.', example='200'),
        targetUrl?: string(name='TargetUrl', description='The destination host IP address.', example='127.0.0.1:8888'),
        timeout?: long(name='Timeout', description='The timeout period for the TCP synthetic test. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 20000.', example='20000'),
        tracertEnable?: boolean(name='TracertEnable', description='Specifies whether to enable the tracert command. Default value: true.', example='true'),
        tracertNumMax?: int32(name='TracertNumMax', description='The maximum number of hops for tracert. Minimum value: 1. Maximum value: 128. Default value: 20.', example='20'),
        tracertTimeout?: long(name='TracertTimeout', description='The timeout period of tracert. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 60000.', example='60000'),
      }(name='NetTCP', description='The TCP synthetic tests parameters. This parameter is required if the TaskType parameter is set to 2.'),
      stream?: {
        customHeaderContent?: map[string]string(name='CustomHeaderContent', description='Custom header, JSON Map format.'),
        playerType?: int32(name='PlayerType', description='Player, default is 12 if not specified.

- 12: VLC
- 2: Flash Player', example='12'),
        streamAddressType?: int32(name='StreamAddressType', description='Resource address type:

- 1: Resource address.
- 0: Page address. If not passed, the default value is 0.', example='0'),
        streamMonitorTimeout?: int32(name='StreamMonitorTimeout', description='Monitoring duration, in seconds, supports up to 60 seconds. If not specified, the default value is 60 seconds.', example='30'),
        streamType?: int32(name='StreamType', description='Audio and video flag:

- 0: video
- 1: audio', example='0'),
        targetUrl?: string(name='TargetUrl', description='Streaming media resource address.', example='http://www.aliyun.com/stream/test.mp4'),
        whiteList?: string(name='WhiteList', description='DNS hijacking whitelist. Matching rules support IP, IP wildcard, subnet mask and CNAME. You can fill in multiple matching rules, and multiple matching rules are separated by vertical bars (|). For example: `www.aliyun.com:203.0.3.55|203.3.44.67`, which means that all IPs except 203.0.3.55 and 203.3.44.67 under the www.aliyun.com domain name are hijacked.', example='www.aliyun.com:203.0.3.55|203.3.44.67'),
      }(name='Stream', description='Streaming media dial test configuration.'),
      website?: {
        automaticScrolling?: int32(name='AutomaticScrolling', description='Specifies whether to automatically scroll up and down the screen to load a page. 0: No. 1: Yes. Default value: 0.', example='0'),
        customHeader?: int32(name='CustomHeader', description='Specifies whether to create a custom header. 0: No. 1: The first packet is modified. 2: All packets are modified. Default value: 0.', example='0'),
        customHeaderContent?: map[string]string(name='CustomHeaderContent', description='The custom header. Format: JSON map.'),
        DNSHijackWhitelist?: string(name='DNSHijackWhitelist', description='When resolving a domain name (such as www.aliyun.com), if the resolved IP address or CNAME is not in the DNS hijacking whitelist, the user will fail to access or return a non-Aliyun target IP; if the IP or CNAME in the resolution result is in the DNS whitelist, it will be deemed that no DNS hijacking has occurred.

Fill in the format: `domain name: matching rule`. Matching rules support IP, IP wildcard, subnet mask and CNAME. You can fill in multiple matching rules, and multiple matching rules are separated by vertical bars (|). 

For example: `www.aliyun.com:203.0.3.55|203.3.44.67`, which means that all IPs except 203.0.3.55 and 203.3.44.67 under the www.aliyun.com domain name are hijacked.', example='www.aliyun.com:203.0.3.55|203.3.44.67'),
        disableCache?: int32(name='DisableCache', description='Specifies whether to disable the cache. 0: No. 1: Yes. Default value: 1.', example='1'),
        disableCompression?: int32(name='DisableCompression', description='Specifies whether to accept compressed files based on the HTTP Accept-Encoding request header. 0: No. 1: Yes. Default value: 0.', example='0'),
        elementBlacklist?: string(name='ElementBlacklist', description='If an element configured in the element blacklist appears during page loading, no request will be made to load the element.', example='www.example.com/a.jpg'),
        filterInvalidIP?: int32(name='FilterInvalidIP', description='Specifies whether to exclude invalid IP addresses.

*   1: No
*   0: Yes', example='0'),
        flowHijackJumpTimes?: int32(name='FlowHijackJumpTimes', description='Identify elements: Set the total number of elements to browse the page.', example='0'),
        flowHijackLogo?: string(name='FlowHijackLogo', description='Hijacking flag: Set the key information for matching. Fill in the hijacking judgment keyword or key element, and asterisks (*) are allowed.', example='aliyun'),
        ignoreCertificateError?: int32(name='IgnoreCertificateError', description='Specifies whether to ignore SSL certificate errors during browsing. 0: No. 1: Yes. Default value: 1.', example='0'),
        monitorTimeout?: int32(name='MonitorTimeout', description='The monitoring timeout period. Unit: milliseconds. Default value: 20000. Minimum value: 5000. Maximum value: 300000.', example='20000'),
        pageTamper?: string(name='PageTamper', description='If any element other than the domain name setting appears on the monitoring page, it means that the page has been tampered. Common manifestations include pop-up ads, floating ads, jumps, etc.

Fill in the format: `domain name: element`. Elements support wildcards, and multiple elements can be filled in. Multiple elements are separated by vertical bars (|). For example: `www.aliyun.com:|/cc/bb/a.gif|/vv/bb/cc.jpg`, which means that all elements except the basic document, /cc/bb/a.gif and /vv/bb/cc.jpg under the www.aliyun.com domain name are considered to be tampered with.', example='www.aliyun.com:|/cc/bb/a.gif|/vv/bb/cc.jpg'),
        redirection?: int32(name='Redirection', description='Specifies whether to continue browsing after redirection. 0: No, 1:Yes. Default value: 1.', example='1'),
        slowElementThreshold?: long(name='SlowElementThreshold', description='The time threshold that is used to define a slow element. Unit: milliseconds. Default value: 5000. Minimum value: 1. Maximum value: 300000.', example='5000'),
        targetUrl?: string(name='TargetUrl', description='The destination URL.', example='http://www.aliyun.com'),
        verifyStringBlacklist?: string(name='VerifyStringBlacklist', description='The verification string is an arbitrary string in the source code of the monitoring page. If the source code returned by the client contains any string in the blacklist, an error 650 &quot;Verification string failed&quot; will be reported. Multiple strings are separated by vertical bars (|).', example='error'),
        verifyStringWhitelist?: string(name='VerifyStringWhitelist', description='The verification string is an arbitrary string in the source code of the monitoring page. The source code returned by the client must contain all the strings in the whitelist, otherwise an error 650 &quot;Verification string failed&quot; will be reported. Multiple strings are separated by a vertical bar (|).', example='success'),
        waitCompletionTime?: long(name='WaitCompletionTime', description='The maximum waiting time. Unit: milliseconds. Default value: 5000. Minimum value: 5000. Maximum value: 300000.', example='5000'),
      }(name='Website', description='The website-speed measurement parameters.'),
    }(name='MonitorConf', description='The monitoring configurations.'),
    monitors?: [ 
      {
        cityCode?: string(name='CityCode', description='The city code.', example='110100'),
        clientType?: int32(name='ClientType', description='The client type of the monitoring point. Valid values: 1: data center. 2: Internet. 3: mobile device. 4: ECS instance.', example='1'),
        operatorCode?: string(name='OperatorCode', description='The carrier code.', example='1'),
      }
    ](name='Monitors', description='The list of monitoring points.'),
    name?: string(name='Name', description='The name of the task.', example='AlibabaCloud DNS Task'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='default'),
    status?: string(name='Status', description='CREATING: The task is being created. RUNNING: The task is running. PARTIAL_RUNNING: The task is partially running. STOP: The task is stopped. LIMIT_STOP: The task is stopped due to quota insufficiency. EXCEPTION: The task is abnormal. DELETE: The task is deleted. DELETE_EXCEPTION: The task failed to be deleted.', example='RUNNING'),
    tags?: [ 
      {
        key?: string(name='Key', description='The key of the tag.', example='user1'),
        value?: string(name='Value', description='The value of the tag.', example='myweb'),
      }
    ](name='Tags', description='The tag.'),
    taskId?: string(name='TaskId', description='The ID of the synthetic monitoring task.', example='5308a2691f59422c8c3b7aeccec9cd3b'),
    taskType?: int32(name='TaskType', description='The type of the task. Valid values:

ICMP TCP DNS HTTP Website speed measurement File download', example='5'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='E13430A6-57A9-56E9-9D8D-28FE8DEBCA40'),
}

model GetTimingSyntheticTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTimingSyntheticTaskResponseBody(name='body'),
}

async function getTimingSyntheticTask(request: GetTimingSyntheticTaskRequest): GetTimingSyntheticTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTimingSyntheticTask', 'GET', '/', 'json', false, 'json', request);
}

model GetTraceRequest {
  endTime?: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.

> If the ID of the trace is 30 characters in length, this parameter is optional. Otherwise, this parameter is required.', example='1623827603000', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. Unit: milliseconds.

> If the ID of the trace is 30 characters in length, this parameter is optional. Otherwise, this parameter is required.', example='1623827602000', position='Query'),
  traceID: string(name='TraceID', description='The trace ID. You can log on to the ARMS console and obtain the trace ID on the **Trace Query** page or **Interface Snapshot** tab.', example='ac14001a15954493811405707d****', position='Query'),
}

model GetTraceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='6A9AEA84-7186-4D8D-B498-4585C6A2****'),
  spans?: [ 
    {
      children?: [  map[string]any ](name='Children', description='The child spans of the current span.'),
      duration?: long(name='Duration', description='The amount of time consumed by the trace. Unit: milliseconds.', example='1000'),
      haveStack?: boolean(name='HaveStack', description='Indicates whether a method stack was provided.

*   `true`: A method stack was provided.
*   `false`: No method stack was provided.', example='false'),
      logEventList?: [ 
        {
          tagEntryList?: [ 
            {
              key?: string(name='Key', description='The key of the tag.', example='http.status.code'),
              value?: string(name='Value', description='The value of the tag.', example='200'),
            }
          ](name='TagEntryList', description='The tags of the trace.'),
          timestamp?: long(name='Timestamp', description='The timestamp when the log event was generated.', example='1590388651'),
        }
      ](name='LogEventList', description='The log events in the trace.'),
      operationName?: string(name='OperationName', description='The name of the traced span.', example='/api/demo'),
      parentSpanId?: string(name='ParentSpanId', description='The ID of the parent span.', example='18'),
      resultCode?: string(name='ResultCode', description='The status code.', example='222'),
      rpcId?: string(name='RpcId', description='The ID of the RPC mode.', example='0'),
      rpcType?: int32(name='RpcType', description='The type of the remote procedure call (RPC) mode.

*   0: HTTP entry
*   25: HTTP call
*   1: High-speed Service Framework (HSF) call
*   2: HSF provision
*   40: on-premises API call
*   60: MySQL call
*   62: Oracle call
*   63: PostgreSQL call
*   70: Redis call
*   4: Taobao Distributed Data Layer (TDDL) call
*   5: Tair call
*   13: MetaQ message sending
*   252: MetaQ message receiving
*   3: notification sending
*   254: notification receiving
*   7: Apache Dubbo call
*   8: Apache Dubbo provision
*   19: SOFARPC call
*   18: SOFARPC provision
*   11: Distributed Service Framework (DSF) call
*   12: DSF provision
*   \\-1: unknown call', example='1'),
      serviceIp?: string(name='ServiceIp', description='The IP address of the host where the application resides.', example='172.20.XX.XX'),
      serviceName?: string(name='ServiceName', description='The name of the application.', example='arms-demo'),
      spanId?: string(name='SpanId', description='The span ID.', example='1234'),
      tagEntryList?: [ 
        {
          key?: string(name='Key', description='The key of the tag.', example='http.status.code'),
          value?: string(name='Value', description='The value of the tag.', example='200'),
        }
      ](name='TagEntryList', description='The tags of the trace.'),
      timestamp?: long(name='Timestamp', description='The timestamp generated when the span was generated.', example='1590388651'),
      traceID?: string(name='TraceID', description='The trace ID.', example='ac14001a15954493811405707d****'),
    }
  ](name='Spans', description='The details of the trace.'),
}

model GetTraceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTraceResponseBody(name='body'),
}

/**
  * > You must use Application Real-Time Monitoring Service (ARMS) SDK for Java V2.7.24.
  *
 */
async function getTrace(request: GetTraceRequest): GetTraceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrace', 'POST', '/', 'json', false, 'json', request);
}

model GetTraceAppRequest {
  pid: string(name='Pid', description='The process identifier (PID) of the application. For more information about how to obtain the PID, see [Obtain the PID of an application](https://www.alibabacloud.com/help/zh/doc-detail/186100.htm?spm=a2cdw.13409063.0.0.7a72281f0bkTfx#title-imy-7gj-qhr).', example='b590lhguqs@d8deedfa9bf****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='标签的键（key）。', example='TestKey'),
      value?: string(name='Value', description='标签的值（value）。', example='TestValue'),
    }
  ](name='Tags', description='标签。', position='Query'),
}

model GetTraceAppResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D80ADAAC-8C32-5479-BD14-C28CF832****'),
  traceApp?: {
    appId?: long(name='AppId', description='The application ID.', example='123'),
    appName?: string(name='AppName', description='The name of the application.', example='arms-k8s-demo'),
    clusterId?: string(name='ClusterId', description='Cluster ID, used only in K8s scenarios.', example='c905d1364c2dd4b6284a3f41790c4****'),
    createTime?: long(name='CreateTime', description='The timestamp generated when the task was created.', example='1576599253000'),
    labels?: [ string ](name='Labels', description='The aliases of the application.'),
    language?: string(name='Language', description='Coding Language.', example='java'),
    pid?: string(name='Pid', description='The process identifier (PID) of the application.', example='b590lhguqs@d8deedfa9bf****'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****'),
    show?: boolean(name='Show', description='Indicates whether the application is displayed in the Application Real-Time Monitoring Service (ARMS) console. Valid values:

*   `true`: yes
*   `false`: no', example='true'),
    source?: string(name='Source', description='The source of the application.', example='ACSK8S'),
    tags?: [ 
      {
        key?: string(name='Key', description='The tag key.', example='TestKey'),
        value?: string(name='Value', description='The tag value.', example='TestValue'),
      }
    ](name='Tags', description='A list of key-value pairs.'),
    type?: string(name='Type', description='The type of the monitoring task. Valid values:

*   `TRACE`: Application Monitoring
*   `RETCODE`: Browser Monitoring', example='TRACE'),
    updateTime?: long(name='UpdateTime', description='The timestamp generated when the task information was updated.', example='1635700348000'),
    userId?: string(name='UserId', description='The user ID.', example='113197164949****'),
  }(name='TraceApp', description='The information about the array object.'),
}

model GetTraceAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTraceAppResponseBody(name='body'),
}

async function getTraceApp(request: GetTraceAppRequest): GetTraceAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTraceApp', 'POST', '/', 'json', false, 'json', request);
}

model GetTraceAppConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  pid: string(name='Pid', description='The process ID (PID) of the application.

You can use one of the following methods to obtain the PID:

*   API: Call the [ListTraceApps](~~2588008~~) operation
*   Console: Log on to the Application Real-Time Monitoring Service (ARMS) console. In the left-side navigation pane, choose **Application Monitoring** > **Application List**. On the Application List page, click the name of your application. The URL in the address bar contains the PID of the application. The PID is indicated in the pid=xxx format. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is xxx%4074xxx, you must replace %40 with an at sign (@) to obtain xxx@74xxx.

> 

*   To obtain the PID in the console, your application must be monitored by Application Monitoring rather than Managed Service for OpenTelemetry.

*   The GetTraceAppConfig operation can query only the custom settings of applications that are monitored by Application Monitoring.', example='a2n80plglh@745eddxxx', position='Query'),
}

model GetTraceAppConfigResponseBody = {
  code?: long(name='Code', description='The HTTP status code.

Valid values:

*   2xx: The request was successful.
*   3xx: The request was redirected.
*   4xx: A request error occurred.
*   5xx: A server error occurred.', example='200'),
  data?: string(name='Data', description='The custom settings of the application, which is a JSON string. For more information, see **Additional description of response parameters**.', example='{"profiler":{"enable":true}}'),
  message?: string(name='Message', description='The returned message.'),
  requestId?: string(name='RequestId', description='The request ID.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

Valid values:

*   true
*   false', example='true'),
}

model GetTraceAppConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTraceAppConfigResponseBody(name='body'),
}

async function getTraceAppConfig(request: GetTraceAppConfigRequest): GetTraceAppConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTraceAppConfig', 'POST', '/', 'json', false, 'json', request);
}

model ImportAppAlertRulesRequest {
  contactGroupIds?: string(name='ContactGroupIds', description='The IDs of the alert contact groups. The value must be a JSON array.', example='[123, 234]', position='Query'),
  isAutoStart?: boolean(name='IsAutoStart', description='Specifies whether to enable the alert rule after it is created. Default value: `false`.

*   `true`: enables the alert rule.
*   `false`: disables the alert rule.', example='true', position='Query'),
  pids: string(name='Pids', description='The process identifiers (PIDs) of the applications associated with the alert rule. The value must be a JSON array. For more information about how to obtain the PID, see [Obtain the PID of an application](~~186100#section-bkl-3j6-ezg~~).', example='["atc889zkcf@d8deedfa9bfxxxx", "acd129bfcf@d5daebfa6cdxxxx"]', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the associated applications reside.', example='cn-hangzhou', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='type'),
      value?: string(name='Value', description='The tag value.', example='prod'),
    }
  ](name='Tags', description='The list of tags.', position='Query'),
  templageAlertConfig?: string(name='TemplageAlertConfig', description='The configurations of the alert template based on which you want to create an alert rule. The value must be a JSON string. You must set at least one of the **TemplateAlertId** and **TemplageAlertConfig** parameters. If you set both parameters, the **TemplateAlertId** parameter prevails. For more information about the TemplageAlertConfig parameter, see the following **additional information about the TemplageAlertConfig parameter**.', example='[ { "contactGroupIds": "381", "alertType": 5, "alarmContext": { "subTitle": "", "content": "Alarm name: $alarm name\\nFilter condition: $filter\\nAlarm time : $Alarm time\\nAlarm content: $Alarm content\\nNote: Before the recovery email is received, the alarm is in continuous alarm, and you will be reminded again after 24 hours!" }, "alertLevel": "WARN", " metricParam": { "appId": "70901", "pid": "atc889zkcf@d8deedfa9bf****", "type": "TXN", "dimensions": [ { "type": "STATIC", "value ": "\\\\/hello_test_api_address\\\\/test1", "key": "rpc" } ] }, "alertWay": [ "SMS", "MAIL", "DING_ROBOT" ], "alertRule": { "rules" : [ { "measure": "appstat.txn.rt", "alias": "Entry call response time_ms", "aggregates": "AVG", "nValue": 1, "value": 1, "operator ": "CURRENT_GTE" } ], "operator": "|" }, "title": "Alarm template alarm name", "config": "{\\"continuous\\":false,\\"dataRevision\\":2, \\"ownerId\\":\\"123412341234\\"}", "notice": { "noticeStartTime": 1480521600000, "startTime": 1480521600000, "endTime": 1480607940000, "noticeEndTime": 1480607940000 }, "stat us": "NON " } ]', position='Query'),
  templateAlertId?: string(name='TemplateAlertId', description='The ID of the alert template. You must set at least one of the **TemplateAlertId** and **TemplageAlertConfig** parameters. If you set both parameters, the **TemplateAlertId** parameter prevails.', example='324324234', position='Query'),
}

model ImportAppAlertRulesResponseBody = {
  data?: string(name='Data', description='The ID of the alert rule.', example='[12174**]'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
}

model ImportAppAlertRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportAppAlertRulesResponseBody(name='body'),
}

/**
  * >  You can call the **ImportAppAlertRules** operation to import only the alert rules that are generated by Application Real-Time Monitoring Service (ARMS) for application monitoring and browser monitoring. This operation cannot be used to import custom alert rules, alert rules for Prometheus monitoring, or default emergency alert rules.
  *
 */
async function importAppAlertRules(request: ImportAppAlertRulesRequest): ImportAppAlertRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportAppAlertRules', 'POST', '/', 'json', false, 'json', request);
}

model InitEnvironmentRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values: zh and en. Default value: zh.', example='zh', position='Query'),
  createAuthToken?: boolean(name='CreateAuthToken', description='Specifies whether to create a token to improve data security.', example='false', position='Query'),
  environmentId: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxx', position='Query'),
  managedType?: string(name='ManagedType', description='Whether agents or exporters are managed. Valid values:

*   none: No. By default, no managed agents or exporters are provided for ACK clusters.
*   agent: Agents are managed. By default, managed agents are provided for ASK clusters, ACS clusters, and ACK One clusters.
*   agent-exproter: Agents and exporters are managed. By default, managed agents and exporters are provided for cloud services.', example='agent', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model InitEnvironmentResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The result of the operation.', example='success'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='4D6C358A-A58B-4F4B-94CE-F5AAF023****'),
}

model InitEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitEnvironmentResponseBody(name='body'),
}

async function initEnvironment(request: InitEnvironmentRequest): InitEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitEnvironment', 'POST', '/', 'json', false, 'json', request);
}

model InstallAddonRequest {
  addonVersion: string(name='AddonVersion', description='The version of the add-on.', example='0.0.1', position='Query'),
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values: zh and en. Default value: zh.', example='zh', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Default value: false.', example='false', position='Query'),
  environmentId: string(name='EnvironmentId', description='The environment ID.', example='env-xxx', position='Query'),
  name: string(name='Name', description='The name of the add-on.', example='mysql', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  releaseName?: string(name='ReleaseName', description='The name of the add-on after it is installed. If you do not specify this parameter, a default rule name is generated.', example='mysql-xxxxx', position='Query'),
  values?: string(name='Values', description='The metadata.', example='{"host":"mysql-service.default","port":3306,"username":"root","password":"roots"}', position='Query'),
}

model InstallAddonResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    addonName?: string(name='AddonName', description='The name of the add-on.', example='mysql'),
    alertRuleCount?: long(name='AlertRuleCount', description='The number of alert rules.', example='1'),
    conditions?: [ 
      {
        firstTransitionTime?: string(name='FirstTransitionTime', description='The first transition time.', example='2018-01-31T14:32:19Z'),
        lastTransitionTime?: string(name='LastTransitionTime', description='The last transition time.', example='2018-01-31T14:32:19Z'),
        message?: string(name='Message', description='The returned message.', example='xxxx'),
        reason?: string(name='Reason', description='The reason for the failure.', example='xxxx'),
        status?: string(name='Status', description='The status of the phase.', example='True'),
        type?: string(name='Type', description='The type of the phase.', example='Loaded'),
      }
    ](name='Conditions', description='The installation phase.'),
    createTime?: string(name='CreateTime', description='The time when the add-on was created.', example='2023-09-22T16:56:29+08:00'),
    dashboardCount?: long(name='DashboardCount', description='The number of dashboards.', example='1'),
    environmentId?: string(name='EnvironmentId', description='The environment ID.', example='env-xxxx'),
    exporterCount?: long(name='ExporterCount', description='The number of exporters.', example='2'),
    haveConfig?: boolean(name='HaveConfig', description='Indicates whether the configuration is available.', example='true'),
    installUserId?: string(name='InstallUserId', description='The user ID.', example='123456'),
    language?: string(name='Language', description='The language.', example='zh'),
    managed?: boolean(name='Managed', description='Indicates whether the component is fully managed.', example='true'),
    regionId?: string(name='RegionId', description='The region ID.', example='cn-heyuan'),
    releaseId?: string(name='ReleaseId', description='The release ID after installation.', example='be29c093-3fd6-4fb6-9430-797030cc183a'),
    releaseName?: string(name='ReleaseName', description='The name of the release.', example='mysql-1695372983039'),
    scene?: string(name='Scene', description='The scenario.', example='database'),
    status?: string(name='Status', description='The status.', example='0'),
    updateTime?: string(name='UpdateTime', description='The time when the add-on was updated.', example='2023-09-22T16:56:29+08:00'),
    userId?: string(name='UserId', description='The user ID.', example='111'),
    version?: string(name='Version', description='The version of the add-on.', example='0.0.1'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model InstallAddonResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InstallAddonResponseBody(name='body'),
}

async function installAddon(request: InstallAddonRequest): InstallAddonResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallAddon', 'POST', '/', 'json', false, 'json', request);
}

model InstallCmsExporterRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  cmsArgs?: string(name='CmsArgs', description='The cloud services that you want to monitor. The CmsArgs parameter is the startup parameter of the cms-exporter collector. Separate multiple cloud services with number signs (`#`).', example='hologres#cen', position='Query'),
  directArgs?: string(name='DirectArgs', description='The recently monitored cloud services. Separate multiple cloud services with number signs (`#`).', example='hologres#cen', position='Query'),
  enableTag?: boolean(name='EnableTag', description='Specifies whether to collect the aliyun tags attached to each cloud service. Default value: false.', example='false', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-beijing', position='Query'),
}

model InstallCmsExporterResponseBody = {
  data?: string(name='Data', description='Indicates whether the call was successful.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to locate logs and troubleshoot issues.', example='E7A04B0D-E2CA-59BB-8A9D-D5D349C22BF1'),
}

model InstallCmsExporterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InstallCmsExporterResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function installCmsExporter(request: InstallCmsExporterRequest): InstallCmsExporterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallCmsExporter', 'POST', '/', 'json', false, 'json', request);
}

model InstallEnvironmentFeatureRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values: zh and en. Default value: zh.', example='zh', position='Query'),
  config?: string(name='Config', description='The metadata of the feature.', example='{\\"continuous\\":true,\\"dataRevision\\":2}', position='Query'),
  environmentId: string(name='EnvironmentId', description='The environment ID.', example='env-xxx', position='Query'),
  featureName: string(name='FeatureName', description='The name of the feature.

Valid values:

*   app-agent-pilot

    <!-- -->

    <!-- -->

    <!-- -->

*   metric-agent

    <!-- -->

    <!-- -->

    <!-- -->', example='metric-agent', position='Query'),
  featureVersion: string(name='FeatureVersion', description='The version of the feature.', example='1.1.17', position='Query'),
  region?: string(name='Region', description='The region ID of the feature.', example='cn-shenzhen', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model InstallEnvironmentFeatureResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The release ID.', example='83FCC44C-A056-18AF-A902-7043E723F0D9'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4C518054-852F-4023-ABC1-4AF95FF7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model InstallEnvironmentFeatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InstallEnvironmentFeatureResponseBody(name='body'),
}

async function installEnvironmentFeature(request: InstallEnvironmentFeatureRequest): InstallEnvironmentFeatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallEnvironmentFeature', 'POST', '/', 'json', false, 'json', request);
}

model InstallManagedPrometheusRequest {
  clusterId?: string(name='ClusterId', description='The ID of the ASK cluster.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  clusterName?: string(name='ClusterName', description='The name of the cluster. This parameter is required if the ClusterType parameter is set to ecs.', example='prd-ecs', position='Query'),
  clusterType: string(name='ClusterType', description='The cluster type.

Valid values:

*   ecs: ECS
*   one: ACK One
*   ask: ASK
*   pro: Container Monitoring Pro', example='ask', position='Query'),
  grafanaInstanceId?: string(name='GrafanaInstanceId', description='The ID of the managed Grafana workspace that is associated with the cluster. If you set this parameter to free or leave this parameter empty, the cluster is associated with a shared Grafana workspace.', example='grafana-bp1*****', position='Query'),
  kubeConfig?: string(name='KubeConfig', description='This parameter is not supported.', example='-', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxyexli2****', position='Query'),
  securityGroupId: string(name='SecurityGroupId', description='The ID of the security group to which the cluster belongs.', example='sg-bp1********', position='Query'),
  vSwitchId: string(name='VSwitchId', description='The ID of the vSwitch that is used by the cluster.', example='vsw-bp1*********', position='Query'),
  vpcId: string(name='VpcId', description='The virtual private cloud (VPC) where the cluster resides.', example='vpc-xxxxxx', position='Query'),
}

model InstallManagedPrometheusResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  data?: string(name='Data', description='The response content. In most cases, the installation status of the Prometheus agent is returned.', example='success'),
  message?: string(name='Message', description='The error message returned if the Prometheus agent failed to be installed.', example='vpcId is blank'),
  requestId?: string(name='RequestId', description='The request ID.', example='String	2A0CEDF1-06FE-44AC-8E21-21A5BE65****'),
  success?: boolean(name='Success', description='Indicates whether the Prometheus agent was installed.', example='true'),
}

model InstallManagedPrometheusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InstallManagedPrometheusResponseBody(name='body'),
}

/**
  * @deprecated
  * You can call this operation only if the following conditions are met: The resources that you want to monitor are ASK clusters or ECS clusters. No Prometheus agents are installed in the ASK or ECS clusters. Take note that Prometheus agents can be installed only on the cloud service side, not in user clusters.
  *
 */
// Deprecated
async function installManagedPrometheus(request: InstallManagedPrometheusRequest): InstallManagedPrometheusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallManagedPrometheus', 'POST', '/', 'json', false, 'json', request);
}

model ListActivatedAlertsRequest {
  currentPage: int32(name='CurrentPage', description='The number of the page to return. Default value: `1`.', example='1', position='Query'),
  filter?: string(name='Filter', description='The filter condition in the `{"key":"value"}`format. You must specify the `key` and `value` of the filter condition.', example='{"alertname":"Container CPU usage is greater than 80%"}', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page. Default value: `10`.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model ListActivatedAlertsResponseBody = {
  message?: string(name='Message'),
  page?: {
    alerts?: [ 
      {
        alertId?: string(name='AlertId', description='The ID of the alert rule.', example='3888704'),
        alertName?: string(name='AlertName', description='The name of the alert rule.', example='Container CPU usage is greater than 80%'),
        alertType?: string(name='AlertType', description='The type of the alert.', example='PROMETHEUS_MONITORING_ALERT_RULE'),
        count?: int32(name='Count', description='The number of times that the alert event was received.', example='598'),
        createTime?: long(name='CreateTime', description='The timestamp when the alert rule was created.', example='1616466300000'),
        dispatchRules?: [ 
          {
            ruleId?: int32(name='RuleId', description='The ID of the notification policy.', example='7021'),
            ruleName?: string(name='RuleName', description='The name of the notification policy.', example='NotificationPolicy1'),
          }
        ](name='DispatchRules', description='The notification policies.'),
        endsAt?: long(name='EndsAt', description='The timestamp when the alert was ended.', example='1616502540000'),
        expandFields?: map[string]any(name='ExpandFields', description='The extended fields that indicate the following tags:

*   The tags that are carried in the metrics of the alert rule expression.
*   The tags that are created based on the alert rule.
*   The default tags of Application Real-Time Monitoring Service (ARMS).'),
        integrationName?: string(name='IntegrationName', description='The name of the object that is associated with the alert.', example='testphp2'),
        integrationType?: string(name='IntegrationType', description='The type of the service integration that generated the alert.', example='PROMETHEUS'),
        involvedObjectKind?: string(name='InvolvedObjectKind', description='The type of the object that is associated with the alert.', example='cluster'),
        involvedObjectName?: string(name='InvolvedObjectName', description='The name of the service integration that generated the alert.', example='Test integration-prometheus'),
        message?: string(name='Message', description='The description of the alert.', example='Alarm name: PodRestart_testphp2,\\n Pod night-test-group-1-1-5f5d6f4d84-pszns is restart, Value: 133.33%, 1.33%'),
        severity?: string(name='Severity', description='The level of the alert. Valid values:

*   `critical`
*   `error`
*   `warn`
*   `page`', example='critical'),
        startsAt?: long(name='StartsAt', description='The timestamp when the alert was generated.', example='1616466300000'),
        status?: string(name='Status', description='The status of the alert. Valid values:

*   `Active`
*   `Inhibited`
*   `Silenced`
*   `Resolved`', example='Active'),
      }
    ](name='Alerts', description='The alerts that have been triggered.'),
    page?: int32(name='Page', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    total?: int32(name='Total', description='The total number of entries returned.', example='5'),
  }(name='Page', description='The struct returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BDB74B8F-4123-482A-ABB7-7F440349****'),
}

model ListActivatedAlertsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListActivatedAlertsResponseBody(name='body'),
}

async function listActivatedAlerts(request: ListActivatedAlertsRequest): ListActivatedAlertsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListActivatedAlerts', 'POST', '/', 'json', false, 'json', request);
}

model ListAddonReleasesRequest {
  addonName?: string(name='AddonName', description='The name of the add-on.', example='mysql', position='Query'),
  environmentId: string(name='EnvironmentId', description='The environment ID.', example='env-xxx', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model ListAddonReleasesResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    releases?: [ 
      {
        addonName?: string(name='AddonName', description='The name of the add-on.', example='mysql'),
        alertRuleCount?: long(name='AlertRuleCount', description='The number of alert rules.', example='1'),
        conditions?: [ 
          {
            firstTransitionTime?: string(name='FirstTransitionTime', description='The first transition time.', example='2018-01-31T14:32:19Z'),
            lastTransitionTime?: string(name='LastTransitionTime', description='The last transition time.', example='2018-01-31T14:32:19Z'),
            message?: string(name='Message', description='The detailed information.', example='xxxx'),
            reason?: string(name='Reason', description='The reason for the failure.', example='xxxx'),
            status?: string(name='Status', description='The status of the phase.', example='True'),
            type?: string(name='Type', description='The type of the phase.', example='Loaded'),
          }
        ](name='Conditions', description='The installation phase.'),
        createTime?: string(name='CreateTime', description='The time when the add-on was created.', example='2023-09-22T16:56:29+08:00'),
        dashboardCount?: long(name='DashboardCount', description='The number of dashboards.', example='1'),
        environmentId?: string(name='EnvironmentId', description='The environment ID.', example='env-xxxx'),
        exporterCount?: long(name='ExporterCount', description='The number of exporters.', example='2'),
        haveConfig?: boolean(name='HaveConfig', description='Indicates whether the configuration is available.', example='true'),
        installUserId?: string(name='InstallUserId', description='The user ID.', example='1268790592387'),
        language?: string(name='Language', description='The language.', example='zh'),
        managed?: boolean(name='Managed'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-heyuan'),
        releaseId?: string(name='ReleaseId', description='The release ID after installation.', example='be29c093-3fd6-4fb6-9430-797030cc183a'),
        releaseName?: string(name='ReleaseName', description='The name of the release.', example='mysql-1695372983039'),
        scene?: string(name='Scene', description='The scenario.', example='database'),
        status?: string(name='Status', description='The status.', example='0'),
        updateTime?: string(name='UpdateTime', description='The time when the add-on was updated.', example='2023-09-22T16:56:29+08:00'),
        userId?: string(name='UserId', description='The user ID.', example='111'),
        version?: string(name='Version', description='The version of the add-on.', example='0.0.1'),
      }
    ](name='Releases', description='The queried add-ons.'),
    total?: long(name='Total', description='The total number of entries.', example='12'),
  }(name='Data', description='The result of the operation.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='E9C9DA3D-10FE-472E-9EEF-2D0A3E41****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model ListAddonReleasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAddonReleasesResponseBody(name='body'),
}

async function listAddonReleases(request: ListAddonReleasesRequest): ListAddonReleasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAddonReleases', 'POST', '/', 'json', false, 'json', request);
}

model ListAddonsRequest {
  aliyunLang?: string(name='AliyunLang', description='Language,the default language is Chinese.', example='zh', position='Query'),
  category?: string(name='Category', description='Category filter.', example='database', position='Query'),
  regexp?: boolean(name='Regexp', description='Whether to enable regular matching.', example='false', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  search?: string(name='Search', description='A query field can be queried by name or description.', example='mysql', position='Query'),
}

model ListAddonsResponseBody = {
  code?: int32(name='Code', description='Status code: 200 indicates success.', example='200'),
  data?: [ 
    {
      alias?: string(name='Alias', description='The alias of the add-on.', example='MySQL'),
      categories?: [ string ](name='Categories', description='The tags of the add-on.'),
      dashboards?: [ 
        {
          description?: string(name='Description', description='The description of the dashboard.', example='MySQL monitors the market information, monitoring the connection information, usage information and other indicators'),
          name?: string(name='Name', description='The name of the dashboard.', example='mysql-overview'),
          url?: string(name='Url', description='The URL of the dashboard.', example='http://xxxx'),
        }
      ](name='Dashboards', description='The dashboards.'),
      description?: string(name='Description', description='The description of the add-on.', example='Monitor database indicators with MySQL Exporter'),
      environments?: [ 
        {
          dependencies?: {
            clusterTypes?: [ string ](name='ClusterTypes', description='The supported cluster types.'),
            features?: map[string]boolean(name='Features', description='The feature on which the environment depends.'),
            services?: [ string ](name='Services', description='The services.'),
          }(name='Dependencies', description='The dependencies of the environment.'),
          description?: string(name='Description', description='The description of the environment.', example='The MySQL service is deployed in a Kubernetes cluster.'),
          enable?: boolean(name='Enable', description='Indicates whether the feature is enabled.', example='true'),
          label?: string(name='Label', description='The tag of the environment.', example='Container'),
          name?: string(name='Name', description='The name of the environment.', example='CS'),
          policies?: {
            alertDefaultStatus?: string(name='AlertDefaultStatus', description='The default alert status.', example='default'),
            defaultInstall?: boolean(name='DefaultInstall', description='The default installation status.', example='false'),
            enableServiceAccount?: boolean(name='EnableServiceAccount', description='Indicates whether a service account is enabled.', example='false.'),
            metricCheckRule?: {
              promQL?: [ string ](name='PromQL', description='The PromQL statements.'),
            }(name='MetricCheckRule', description='The metric check rule.'),
            needRestartAfterIntegration?: boolean(name='NeedRestartAfterIntegration', description='Indicates whether a restart is required after the installation.', example='false'),
            protocols?: [ 
              {
                description?: string(name='Description', description='The description of the protocol.', example='ARMS'),
                icon?: string(name='Icon', description='The URL of the protocol icon.', example='http://xxxxxxx'),
                label?: string(name='Label', description='The tag of the protocol.', example='ARMS'),
                name?: string(name='Name', description='The name of the protocol.', example='arms'),
              }
            ](name='Protocols', description='The supported protocols.'),
            targetAddonName?: string(name='TargetAddonName', description='The target name of the add-on.', example='cloud-rds-mysql'),
          }(name='Policies', description='The control policies in the environment.'),
        }
      ](name='Environments', description='The supported environments.'),
      icon?: string(name='Icon', description='The URL of the icon.', example='http://xxxx'),
      keywords?: [ string ](name='Keywords', description='The collection of keywords.'),
      language?: string(name='Language', description='The language.', example='zh'),
      latestReleaseCreateTime?: string(name='LatestReleaseCreateTime', description='The time when the instance was last created.', example='2023-09-22T16:56:29+08:00'),
      name?: string(name='Name', description='The name of the add-on.', example='mysql'),
      once?: boolean(name='Once', description='Indicates whether the add-on can be installed only once.', example='false'),
      scene?: string(name='Scene', description='The scenario.', example='database'),
      version?: string(name='Version', description='The version of the agent.', example='0.0.1'),
      weight?: string(name='Weight', description='The weight.', example='857'),
    }
  ](name='Data', description='The queried add-ons.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='78901766-3806-4E96-8E47-CFEF59E4****'),
  success?: boolean(name='Success', description='Indicates whether the alert rule was deleted. Valid values:

*   `true`: The alert rule was deleted.
*   `false`: The alert rule failed to be deleted.', example='true'),
}

model ListAddonsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAddonsResponseBody(name='body'),
}

async function listAddons(request: ListAddonsRequest): ListAddonsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAddons', 'POST', '/', 'json', false, 'json', request);
}

model ListAlertEventsRequest {
  alertName?: string(name='AlertName', description='The name of the alert.', example='Test-triggered alert', position='Query'),
  endTime?: string(name='EndTime', description='The end time of the alert events that you want to query. Specify the time in the YYYY-MM-DD HH:mm:ss format.', example='2021-12-22 23:59:59', position='Query'),
  matchingConditions?: string(name='MatchingConditions', description='The list of matching conditions.', example='[         {           "value": "ARMS_NOTIFICATION",           "key": "clustername",           "operator": "eq"         }       ]     },{       "matchingConditions": [         {           "value": "test",           "key": "alertname",           "operator": "eq"         }       ]', position='Query'),
  page: long(name='Page', description='The number of the page to return.', example='1', position='Query'),
  showNotificationPolicies?: boolean(name='ShowNotificationPolicies', description='Specifies whether to show the associated notification policy.', example='false', position='Query'),
  size: long(name='Size', description='The number of entries to return on each page.', example='20', position='Query'),
  startTime?: string(name='StartTime', description='The start time of the alert events that you want to query. Specify the time in the YYYY-MM-DD HH:mm:ss format.', example='2021-12-19 00:00:00', position='Query'),
  status?: string(name='Status', description='The status of the alert events. Valid values:

*   Active
*   Silenced
*   Resolved', example='Active', position='Query'),
}

model ListAlertEventsResponseBody = {
  pageBean?: {
    events?: [ 
      {
        alarms?: [ 
          {
            alarmId?: long(name='AlarmId', description='The ID of the alert.', example='77444'),
            alarmName?: string(name='AlarmName', description='The name of the alert.', example='Test-triggered alert'),
            createTime?: string(name='CreateTime', description='The time when the alert was created.', example='2021-12-20 07:10:18'),
            state?: int32(name='State', description='The status of the alert. Valid values:

*   0: The alert is pending.
*   1: The alert is being handled.
*   2: The alert is cleared.', example='0'),
          }
        ](name='Alarms', description='The associated alerts.'),
        alertName?: string(name='AlertName', description='The name of the alert.', example='Test-triggered alert'),
        annotations?: string(name='Annotations', description='The annotations.', example='[{\\"Name\\":\\"annotation-a\\",\\"Value\\":\\"annotation a value\\"}]'),
        description?: string(name='Description', description='The description of the alert event.', example='Test'),
        endTime?: string(name='EndTime', description='The end time.', example='2021-12-20 17:42:16'),
        generatorURL?: string(name='GeneratorURL', description='The URL of the alert event.', example='https://xxx.xx/'),
        handlerName?: string(name='HandlerName', description='The user who handled the alert.', example='Tom'),
        integrationName?: string(name='IntegrationName', description='The name of the alert integration.', example='Custom integration'),
        integrationType?: string(name='IntegrationType', description='The type of the alert integration.', example='CUSTOM'),
        labels?: string(name='Labels', description='The tags.', example='[{\\"name\\":\\"severity\\",\\"value\\":\\"error\\"}]'),
        notificationPolicies?: [ 
          {
            id?: long(name='Id', description='The ID of the notification policy.', example='646093'),
            name?: string(name='Name', description='The name of the notification policy.', example='P1 alert notification policy'),
          }
        ](name='NotificationPolicies', description='The associated notification policies.'),
        receiveTime?: string(name='ReceiveTime', description='The time when the alert event was received.', example='2021-12-20 17:42:16'),
        severity?: string(name='Severity', description='The severity level of the alert. Valid values:

*   critical: P1
*   error: P2
*   warning: P3
*   page: P4
*   default: P6', example='critical'),
        startTime?: string(name='StartTime', description='The start time.', example='2021-12-20 17:42:16'),
        status?: string(name='Status', description='The status of the alert event. Valid values:

*   Active
*   Silenced
*   Resolved', example='Active'),
        triggerCount?: long(name='TriggerCount', description='The number of times the event is triggered.', example='10'),
      }
    ](name='Events', description='The queried historical alert events.'),
    page?: long(name='Page', description='The number of the page returned.', example='1'),
    size?: long(name='Size', description='The number of entries returned per page.', example='20'),
    total?: long(name='Total', description='The total number of returned entries.', example='24'),
  }(name='PageBean', description='The returned struct.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2FC13182-B9AF-4E6B-BE51-72669B7C****'),
}

model ListAlertEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAlertEventsResponseBody(name='body'),
}

async function listAlertEvents(request: ListAlertEventsRequest): ListAlertEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAlertEvents', 'POST', '/', 'json', false, 'json', request);
}

model ListAlertsRequest {
  alertName?: string(name='AlertName', description='The name of the alert rule.', example='Test alert', position='Query'),
  dispatchRuleId?: long(name='DispatchRuleId', description='The ID of the notification policy.', example='12345', position='Query'),
  endTime?: string(name='EndTime', description='The end time of the alert sending history that you want to query. Specify the time in the `YYYY-MM-DD HH:mm:ss` format.', example='2021-12-22 23:59:59', position='Query'),
  integrationType?: string(name='IntegrationType', description='The integration type.

*   ARMS
*   CLOUD_MONITOR
*   MSE
*   ARMS_CLOUD_DIALTEST
*   PROMETHEUS
*   LOG_SERVICE
*   CUSTOM
*   ARMS_PROMETHEUS
*   ARMS_APP_MON
*   ARMS_FRONT_MON
*   ARMS_CUSTOM
*   XTRACE
*   GRAFANA
*   ZABBIX
*   SKYWALKING
*   EVENT_BRIDGE
*   NAGIOS
*   OPENFALCON
*   ARMS_INSIGHTS', example='ARMS_APP_MON', position='Query'),
  owner?: string(name='Owner', position='Query'),
  page: long(name='Page', description='The number of the page to return.', example='1', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  severity?: string(name='Severity', description='The severity level of the alert. Valid values: P6, P5, P4, P3, P2, and P1. The preceding values are listed in ascending order of severity.', example='P6', position='Query'),
  showActivities?: boolean(name='ShowActivities', description='Specifies whether to query the activities that correspond to alerts. Valid values:

*   `false` (default value): The activities are not queried.
*   `true`: The activities in the last three days are queried.', example='true', position='Query'),
  showEvents?: boolean(name='ShowEvents', description='Specifies whether to query the events that correspond to alerts. Valid values:

*   `false` (default value): The events are not queried.
*   `true`: The events are queried.', example='true', position='Query'),
  size: long(name='Size', description='The number of alerts to return on each page.', example='20', position='Query'),
  startTime?: string(name='StartTime', description='The start time of the alert sending history that you want to query. Specify the time in the `YYYY-MM-DD HH:mm:ss` format.', example='2021-12-10 00:00:00', position='Query'),
  state?: long(name='State', description='The status of the alert. Valid values:

*   0: The alert is pending.
*   1: The alert is being handled.
*   2: The alert is handled.', example='2', position='Query'),
}

model ListAlertsResponseBody = {
  message?: string(name='Message'),
  pageBean?: {
    listAlerts?: [ 
      {
        acknowledgeTime?: long(name='AcknowledgeTime'),
        activities?: [ 
          {
            content?: string(name='Content', description='The content of the alert notification.', example='\\[Notification policy: Send notifications to DingTalk groups] Host monitoring. Host IP address: 10.76.XX.XX. Average memory usage of the host in the last 1 minute ≥ 1.0%. Current value: 84.7454%.'),
            description?: string(name='Description', description='The description of the activity.', example='\\[Alert Claimed] The alert is claimed'),
            handlerName?: string(name='HandlerName', description='The name of the handler.', example='O\\&M Engineer A'),
            time?: string(name='Time', description='The operation time of the activity.', example='2021-12-20 19:08:57'),
            type?: long(name='Type', description='The type of the activity. Valid values:

*   1: The alert is claimed.
*   2: The alert is disclaimed.
*   3: A comment is added for the alert.
*   4: The alert is disabled.
*   5: An alert notification is sent.', example='1'),
          }
        ](name='Activities', description='The list of activities.'),
        alertEvents?: [ 
          {
            alertName?: string(name='AlertName', description='The name of the event.', example='Test-triggered alert'),
            annotations?: string(name='Annotations', description='The annotations.', example='{ "_aliyun_arms_alert_value":"4.0" "_aliyun_arms_alert_traceId":"ac10c43116421327442277073d5461-105075299"}'),
            description?: string(name='Description', description='The description of the event.', example='Host monitoring. Host IP address: 10.76.XX.XX. Average memory usage of the host in the last 1 minute ≥ 1.0%. Current value: 84.7454%.'),
            endTime?: string(name='EndTime', description='The time when the event ended.', example='2022-01-19 17:10:31'),
            generatorURL?: string(name='GeneratorURL', description='The URL of the event.', example='http://arms.console.aliyun.com'),
            integrationName?: string(name='IntegrationName', description='The name of the integration that corresponds to the alert event.', example='ARMS'),
            integrationType?: string(name='IntegrationType', description='The type of the integration that corresponds to the alert event. Valid values:

*   ARMS
*   CLOUD_MONITOR
*   MSE
*   ARMS_CLOUD_DIALTEST
*   PROMETHEUS
*   LOG_SERVICE
*   CUSTOM
*   ARMS_PROMETHEUS
*   ARMS_APP_MON
*   ARMS_FRONT_MON
*   ARMS_CUSTOM
*   XTRACE
*   GRAFANA
*   ZABBIX
*   SKYWALKING
*   EVENT_BRIDGE
*   NAGIOS
*   OPENFALCON
*   ARMS_INSIGHTS', example='ARMS_APP_MON'),
            labels?: string(name='Labels', description='The tags.', example='{ "severity":"warning" "_aliyun_arms_alert_level":"ERROR" "_aliyun_arms_entropy":"0.30170457417889235"}'),
            receiveTime?: string(name='ReceiveTime', description='The time when the event was created.', example='2022-01-19 17:05:42'),
            severity?: string(name='Severity', description='The severity level of the event. Valid values:

*   critical
*   error
*   warning
*   info', example='warning'),
            startTime?: string(name='StartTime', description='The time when the event started.', example='2022-01-18 00:14:00'),
            state?: string(name='State', description='The status of the event. Valid values:

*   Active: The event is not cleared.
*   Silenced: The event is silenced.
*   Resolved: The event is cleared.', example='Active'),
          }
        ](name='AlertEvents', description='The list of events.'),
        alertId?: long(name='AlertId', description='The alert ID.', example='2279'),
        alertName?: string(name='AlertName', description='The name of the alert rule.', example='Test alert'),
        createTime?: string(name='CreateTime', description='The time when the alert was created.', example='2022-01-18 00:21:35'),
        describe?: string(name='Describe'),
        dispatchRuleId?: float(name='DispatchRuleId', description='The ID of the notification policy.', example='12345'),
        dispatchRuleName?: string(name='DispatchRuleName', description='The name of the notification policy.', example='DingTalk Notification'),
        handler?: string(name='Handler'),
        notifyRobots?: string(name='NotifyRobots'),
        owner?: string(name='Owner'),
        recoverTime?: long(name='RecoverTime'),
        severity?: string(name='Severity', description='The severity level of the alert. Valid values: P6, P5, P4, P3, P2, and P1. The preceding values are listed in ascending order of severity.', example='P6'),
        solution?: string(name='Solution', description='The Alert solution.', example='--'),
        state?: long(name='State', description='The status of the alert. Valid values:

*   0: The alert is pending.
*   1: The alert is being handled.
*   2: The alert is handled.', example='0'),
      }
    ](name='ListAlerts', description='The alerts for which the alert sending history is queried.'),
    page?: long(name='Page', description='The page number of the returned page.', example='1'),
    size?: long(name='Size', description='The number of alerts returned per page.', example='20'),
    total?: long(name='Total', description='The total number of queried alerts.', example='1'),
  }(name='PageBean', description='The information about the array object.'),
  requestId?: string(name='RequestId', description='The request ID.', example='2FC13182-B9AF-4E6B-BE51-72669B7C****'),
}

model ListAlertsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAlertsResponseBody(name='body'),
}

async function listAlerts(request: ListAlertsRequest): ListAlertsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAlerts', 'POST', '/', 'json', false, 'json', request);
}

model ListClusterFromGrafanaRequest {
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model ListClusterFromGrafanaResponseBody = {
  promClusterList?: [ 
    {
      agentStatus?: string(name='AgentStatus', description='The status of the Prometheus agent on the cluster. Valid values:

*   INSTALL_FAILED: The Prometheus agent failed to be installed.
*   INSTALL_SUCCEED: The Prometheus agent was installed.
*   NOT_REGISTER: You have not registered an Alibaba Cloud account.', example='INSTALL_FAILED'),
      clusterId?: string(name='ClusterId', description='The cluster ID.', example='c0df7ad9db0ed43128925ca04774c469e'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='ay-ads-hangzhou'),
      clusterType?: string(name='ClusterType', description='The type of the cluster.', example='cloud-product-prometheus'),
      controllerId?: string(name='ControllerId', description='The controller ID.', example='1092'),
      createTime?: long(name='CreateTime', description='The time when the dashboard was created.', example='2021-12-09T02:05:04Z'),
      extra?: string(name='Extra', description='The extended fields. This parameter is a JSON string.', example='{\\"app_id\\":\\"bbd\\",\\"task_id\\":\\"4305ba5bf14942daa6e553ed91f46988\\"}'),
      id?: long(name='Id', description='The ID of a database in the cluster.', example='16136'),
      installTime?: long(name='InstallTime', description='The timestamp when the Prometheus agent was installed.', example='1653532518000'),
      isControllerInstalled?: boolean(name='IsControllerInstalled', description='Indicates whether the Prometheus agent was installed. Valid values:

*   true: The Prometheus agent was installed.
*   false: The Prometheus agent was not installed.', example='true'),
      lastHeartBeatTime?: long(name='LastHeartBeatTime', description='The time when the last heartbeat was reported.', example='1653532518000'),
      nodeNum?: int32(name='NodeNum', description='The number of nodes.', example='3'),
      options?: string(name='Options', description='The custom parameter.', example='{\\"Option\\": [\\"betaTestApproved\\"]}'),
      pluginsJsonArray?: string(name='PluginsJsonArray', description='The list of nodejsonar logs.', example='{}'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-beijing'),
      stateJson?: string(name='StateJson', description='The information about applications deployed in the cluster.', example='{}'),
      updateTime?: long(name='UpdateTime', description='The time when the dashboard was updated.', example='2021-11-16T08:49:34Z'),
      userId?: string(name='UserId', description='The ID of the Alibaba Cloud account to which the cluster belongs.', example='1247285**'),
    }
  ](name='PromClusterList', description='The cluster information.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='6849D41E-EED4-5C00-89F9-6047BBD9DCB4'),
}

model ListClusterFromGrafanaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClusterFromGrafanaResponseBody(name='body'),
}

async function listClusterFromGrafana(request: ListClusterFromGrafanaRequest): ListClusterFromGrafanaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusterFromGrafana', 'POST', '/', 'json', false, 'json', request);
}

model ListCmsInstancesRequest {
  clusterId: string(name='ClusterId', example='n9p9o9o3se', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  typeFilter?: string(name='TypeFilter', example='direct', position='Query'),
}

model ListCmsInstancesResponseBody = {
  data?: {
    enableTag?: boolean(name='EnableTag', example='true'),
    products?: [ 
      {
        descr?: string(name='Descr', example='-'),
        id?: string(name='Id', example='20210'),
        instance?: string(name='Instance', example='cloudserver'),
        name?: string(name='Name', example='hologres'),
        prod?: string(name='Prod', example='face'),
        source?: string(name='Source', example='arms'),
        state?: string(name='State', example='true'),
        time?: string(name='Time', example='1647852021000'),
        type?: string(name='Type', example='HOLOGRES'),
        url?: string(name='Url', example='https://g.console.aliyun.com/d/1098370038733503-35894-565/cms-hologres?orgId\\u003d9\\u0026refresh\\u003d60s'),
      }
    ](name='Products'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='E7A04B0D-E2CA-59BB-8A9D-D5D349C22BF1'),
}

model ListCmsInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCmsInstancesResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function listCmsInstances(request: ListCmsInstancesRequest): ListCmsInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCmsInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListDashboardsRequest {
  clusterId?: string(name='ClusterId', description='The ID of the ACK cluster.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  clusterType?: string(name='ClusterType', description='Valid values: ACK, ASK, cloud-product-prometheus, and Node. You can query the dashboards of a virtual cluster by specifying the cluster type. For InfluxDB, set this parameter to `cloud-product-prometheus`.', example='Node', position='Query'),
  dashboardName?: string(name='DashboardName', description='The unique names of the dashboards. You can query dashboards by specifying their names. The **dashboard title** can be changed whereas the **dashboard name** cannot. You can specify multiple names and separate them with commas (,), for example, `k8s-event,k8s-overview`. A dashboard may have multiple versions. If you want to specify a version, you can add version information after the name, for example, `k8s-event:v1,k8s-overview:latest`.', example='k8s-node-overview', position='Query'),
  language?: string(name='Language', description='The language of the returned Grafana dashboard. Valid values: en and zh. Default value: en.', example='en', position='Query'),
  product?: string(name='Product', description='The cloud service code. This parameter is required if you set the ClusterType parameter to `cloud-product-prometheus`. The following cloud services are available: Serverless App Engine, Microservices Engine, Message Queue for Apache RocketMQ, Lindorm, Message Queue for Apache Kafka, ApsaraDB for ClickHouse, Data Lake Analytics, Message Queue for RabbitMQ, ApsaraDB for MongoDB, Time Series Database (TSDB) for InfluxDB, MSE Cloud-native Gateway, Grafana Service, SchedulerX, Global Transaction Service, Enterprise Distributed Application Service, Machine Learning Platform for AI - Elastic Algorithm Service (EAS), Application High Availability Service, and Performance Testing.', example='xxxx', position='Query'),
  recreateSwitch?: boolean(name='RecreateSwitch', description='Specifies whether to create or query a virtual cluster. This parameter provides backward compatibility.', example='false', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  title?: string(name='Title', description='The dashboard title. The dashboard title can be changed. We recommend that you specify the **DashboardName** parameter.', example='ApiServer', position='Query'),
}

model ListDashboardsResponseBody = {
  dashboardVos?: [ 
    {
      dashboardType?: string(name='DashboardType', description='The type of the Grafana dashboard. This parameter has the same effect as the Exporter parameter whereas provides clearer implication.', example='Node'),
      exporter?: string(name='Exporter', description='The type of the exporter access source. Valid values:

*   Prometheus
*   Node
*   GPU
*   Redis
*   MySQL
*   Kafka
*   NGINX V2
*   Nginx
*   ZooKeeper
*   MongoDB
*   RabbitMQ
*   PostgreSQL
*   Kubernetes
*   Client Library
*   Elasticsearch
*   RocketMQ', example='Nginx'),
      httpUrl?: string(name='HttpUrl', description='The URL of the Grafana dashboard.', example='http://g.console.aliyun.com/d/1131971649496228-*****-59/ApiServer?orgId=3**&refresh=60s'),
      httpsUrl?: string(name='HttpsUrl', description='The URL of the Grafana dashboard.', example='http://g.console.aliyun.com/d/1131971649496228-*****-59/ApiServer?orgId=3**&refresh=60s'),
      i18nChild?: {
        dashboardType?: string(name='DashboardType', description='The type of the Grafana dashboard. This parameter has the same effect as the Exporter parameter whereas provides clearer implication.', example='Node'),
        exporter?: string(name='Exporter', description='The type of the exporter access source. Valid values:

*   Prometheus
*   Node
*   GPU
*   Redis
*   MySQL
*   Kafka
*   NGINX V2
*   Nginx
*   ZooKeeper
*   MongoDB
*   RabbitMQ
*   PostgreSQL
*   Kubernetes
*   Client Library
*   Elasticsearch
*   RocketMQ', example='Nginx'),
        httpUrl?: string(name='HttpUrl', description='The URL of the Grafana dashboard.', example='http://g.console.aliyun.com/d/1131971649496228-*****-59/ApiServer?orgId=3**&refresh=60s'),
        httpsUrl?: string(name='HttpsUrl', description='The URL of the Grafana dashboard.', example='http://g.console.aliyun.com/d/1131971649496228-*****-59/ApiServer?orgId=3**&refresh=60s'),
        id?: string(name='Id', description='The ID of the Grafana dashboard. The value is unique only when you install the Grafana dashboard.', example='1100**'),
        isArmsExporter?: boolean(name='IsArmsExporter', description='Indicates whether the exporter is provided by ARMS.

*   `true:` The exporter is provided by ARMS.
*   `false:`: The exporter is not provided by ARMS.', example='false'),
        kind?: string(name='Kind', description='The category of the Grafana dashboard. Valid values: BASIC, THIRD, LIMIT, and CUSTOM.', example='BASIC'),
        language?: string(name='Language', description='The language of the Grafana dashboard.', example='zh'),
        name?: string(name='Name', description='The name of the Grafana dashboard. This parameter is different from the **Title** parameter as this parameter cannot be changed.', example='k8s-node-overview'),
        needUpdate?: boolean(name='NeedUpdate', description='Indicates whether the Grafana dashboard has a new version that is available for upgrade.', example='false'),
        tags?: [ string ](name='Tags', description='The tags of the Grafana dashboard.'),
        time?: string(name='Time', description='The time when the Grafana dashboard was created. The value is a timestamp.', example='1590136924'),
        title?: string(name='Title', description='The title of the Grafana dashboard.', example='ApiServer'),
        type?: string(name='Type', description='The type of the Grafana dashboard. Valid values:

*   `dash-db`: a dashboard
*   `dash-folder`: a folder that can include a dashboard', example='dash-db'),
        uid?: string(name='Uid', description='The unique identifier of the Grafana dashboard.', example='1131971649496228-*****-59'),
        url?: string(name='Url', description='The complete URL of the Grafana dashboard.', example='http://g.console.aliyun.com/d/1131971649496228-*****-59/ApiServer?orgId=3**&refresh=60s'),
        version?: string(name='Version', description='The version of the Grafana dashboard. The combination of version and name uniquely identifies a dashboard.', example='v2'),
      }(name='I18nChild', description='The information about the Grafana dashboard.'),
      id?: string(name='Id', description='The ID of the Grafana dashboard. The value is unique only when you install the Grafana dashboard.', example='1100**'),
      isArmsExporter?: boolean(name='IsArmsExporter', description='Indicates whether the exporter is provided by Application Real-Time Monitoring Service (ARMS).

*   `true:` The exporter is provided by ARMS.
*   `false:`: The exporter is not provided by ARMS.', example='false'),
      kind?: string(name='Kind', description='The category of the Grafana dashboard. Valid values: BASIC, THIRD, LIMIT, and CUSTOM.', example='BASIC'),
      language?: string(name='Language', description='The language of the Grafana dashboard.', example='en'),
      name?: string(name='Name', description='The name of the Grafana dashboard. This parameter is different from the **Title** parameter as this parameter cannot be changed.', example='k8s-node-overview'),
      needUpdate?: boolean(name='NeedUpdate', description='Indicates whether the Grafana dashboard has a new version that is available for upgrade.', example='false'),
      tags?: [ string ](name='Tags', description='The tags of the Grafana dashboard.'),
      time?: string(name='Time', description='The time when the Grafana dashboard was created. The value is a timestamp. Unit: seconds.', example='1590136924'),
      title?: string(name='Title', description='The title of the Grafana dashboard.', example='ApiServer'),
      type?: string(name='Type', description='The type of the Grafana dashboard. Valid values:

*   `dash-db`: a dashboard
*   `dash-folder`: a folder that can include a dashboard', example='dash-db'),
      uid?: string(name='Uid', description='The unique identifier of the Grafana dashboard.', example='1131971649496228-*****-59'),
      url?: string(name='Url', description='The complete URL of the Grafana dashboard.', example='http://g.console.aliyun.com/d/1131971649496228-*****-59/ApiServer?orgId=3**&refresh=60s'),
      version?: string(name='Version', description='The version of the Grafana dashboard. The combination of version and name uniquely identifies a dashboard.', example='v2'),
    }
  ](name='DashboardVos', description='The information about the Grafana dashboard.'),
  environmentId?: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-ebd54733482581fc8c4237******'),
  grafanaServiceOpened?: string(name='GrafanaServiceOpened', description='Indicates whether Managed Service for Grafana is activated.', example='true'),
  prometheusServiceOpened?: string(name='PrometheusServiceOpened', description='Whether or not to turn on Prometheus service.', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='2A0CEDF1-06FE-44AC-8E21-21A5BE65****'),
}

model ListDashboardsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDashboardsResponseBody(name='body'),
}

/**
  * None.
  *
 */
async function listDashboards(request: ListDashboardsRequest): ListDashboardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDashboards', 'POST', '/', 'json', false, 'json', request);
}

model ListDashboardsByNameRequest {
  clusterId?: string(name='ClusterId', description='The ID of the cluster. If the ClusterType parameter is not set to `cloud-product-prometheus` or `cms-enterprise-prometheus`, you must specify the ClusterId parameter.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  clusterType?: string(name='ClusterType', description='The cluster type. Valid values:

*   vpc-prometheus
*   cloud-product-prometheus
*   cms-enterprise-prometheus
*   ExternalKubernetes
*   Ask
*   Kubernetes
*   ManagedKubernetes
*   remote-write-prometheus
*   GlobalViewV2', example='cloud-product-prometheus', position='Query'),
  dashBoardName?: string(name='DashBoardName', description='The name of the dashboard.', example='edas-ingress-url', position='Query'),
  dashBoardVersion?: string(name='DashBoardVersion', description='The version of the dashboard.', example='latest', position='Query'),
  dataSourceType?: string(name='DataSourceType', description='The type of the data source. Valid values:

*   loki
*   prometheus', example='loki', position='Query'),
  groupName?: string(name='GroupName', description='The name of the dashboard group.', example='EDAS', position='Query'),
  onlyQuery?: boolean(name='OnlyQuery', description='Specifies whether to display the Grafana dashboard only in the Application Real-Time Monitoring Service (ARMS) console.', example='true', position='Query'),
  productCode?: string(name='ProductCode', description='The abbreviation of the Alibaba Cloud service name.', example='edas', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model ListDashboardsByNameResponseBody = {
  code?: int32(name='Code', description='Status Code. Description 200 indicates success.', example='200'),
  data?: string(name='Data', description='The returned struct.', example='[{"name":"Edas Ingress Url Analysis","type":"edas-ingress-url-analysis","url":"https://g.console.aliyun.com/d/1036052989950239-11040375-66-3/edas-ingress-url-analysis?var-clusterId=29ksa&var-regionId=cn-hangzhou"}]'),
  message?: string(name='Message', description='Returns a hint message for the result.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request, You can use the ID to locate logs and troubleshoot issues.', example='2983BEF7-4A0D-47A2-94A2-8E9C5E63****'),
}

model ListDashboardsByNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDashboardsByNameResponseBody(name='body'),
}

async function listDashboardsByName(request: ListDashboardsByNameRequest): ListDashboardsByNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDashboardsByName', 'POST', '/', 'json', false, 'json', request);
}

model ListDispatchRuleRequest {
  name?: string(name='Name', description='The name of the notification policy. Fuzzy match is supported.', example='Prod', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  system?: boolean(name='System', description='*   The type of notification policies to be queried. Valid values: `false` (default): notification policies created in Application Real-Time Monitoring Service (ARMS).
*   `true`: notification policies created in an external system.

>  You cannot use the ARMS console to modify the dispatch rules of a notification policy that is created in an external system.', example='true', position='Query'),
}

model ListDispatchRuleResponseBody = {
  dispatchRules?: [ 
    {
      name?: string(name='Name', description='The name of the notification policy.', example='Prod'),
      ruleId?: long(name='RuleId', description='The ID of the notification policy.', example='10282'),
      state?: string(name='State', description='Indicates whether the notification policy is enabled. Valid values:

*   `true`
*   `false`', example='true'),
    }
  ](name='DispatchRules', description='The returned struct.'),
  requestId?: string(name='RequestId', description='The request ID.', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model ListDispatchRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDispatchRuleResponseBody(name='body'),
}

/**
  * The current API operation is no longer maintained. To query the notification policy information, call the ListNotificationPolicies operation instead.
  *
 */
async function listDispatchRule(request: ListDispatchRuleRequest): ListDispatchRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDispatchRule', 'POST', '/', 'json', false, 'json', request);
}

model ListEnvCustomJobsRequest {
  encryptYaml?: boolean(name='EncryptYaml', description='Specifies whether to return the encrypted YAML string.', example='true', position='Query'),
  environmentId: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxx', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model ListEnvCustomJobsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: [ 
    {
      addonName?: string(name='AddonName', description='The name of the add-on to which the custom job belongs.', example='mysql'),
      addonReleaseName?: string(name='AddonReleaseName', description='The instance name of the add-on.', example='mysql1'),
      addonVersion?: string(name='AddonVersion', description='The version of the add-on.', example='1.1.0'),
      configYaml?: string(name='ConfigYaml', description='If the request parameter EncryptYaml is set to true, a Base64-encoded YAML string is returned. Otherwise, a plaintext YAML string is returned.', example='Refer to supplementary instructions.'),
      creationTimestamp?: string(name='CreationTimestamp', description='The time when the custom job was created. The value of this parameter is a timestamp.', example='2022-01-01T10:11:34Z'),
      customJobName?: string(name='CustomJobName', description='The name of the custom job.', example='job1'),
      environmentId?: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxx'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
      scrapeConfigs?: [ 
        {
          jobName?: string(name='JobName', description='The name of the job.', example='custom-sd-demo'),
          metricsPath?: string(name='MetricsPath', description='The path of the metric.', example='/metrics'),
          scrapeDiscoverys?: [ string ](name='ScrapeDiscoverys', description='The service discovery methods.'),
          scrapeInterval?: string(name='ScrapeInterval', description='The capture interval.', example='30s'),
        }
      ](name='ScrapeConfigs', description='The capture configurations.'),
      status?: string(name='Status', description='The status of the custom job.', example='run'),
    }
  ](name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='2A0CEDF1-06FE-44AC-8E21-21A5BE65****'),
}

model ListEnvCustomJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnvCustomJobsResponseBody(name='body'),
}

async function listEnvCustomJobs(request: ListEnvCustomJobsRequest): ListEnvCustomJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEnvCustomJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListEnvPodMonitorsRequest {
  environmentId: string(name='EnvironmentId', description='The environment ID.', example='env-xxxxx', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model ListEnvPodMonitorsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: [ 
    {
      addonName?: string(name='AddonName', description='The name of the add-on to which the PodMonitor belongs.', example='mysql'),
      addonReleaseName?: string(name='AddonReleaseName', description='The instance name of the add-on.', example='mysql1'),
      addonVersion?: string(name='AddonVersion', description='The version of the add-on.', example='1.0.5'),
      configYaml?: string(name='ConfigYaml', description='The YAML configuration string.', example='Refer to supplementary instructions.'),
      creationTimestamp?: string(name='CreationTimestamp', description='The time when the PodMonitor was created. The value of this parameter is a timestamp.', example='2011-01-02T11:34:22Z'),
      endpoints?: [ 
        {
          interval?: string(name='Interval', description='The collection interval.', example='30s'),
          matchedTargetCount?: int32(name='MatchedTargetCount', description='The number of pods that match the PodMonitor endpoint.', example='1'),
          path?: string(name='Path', description='The collection path.', example='/metrics'),
          port?: string(name='Port', description='The external port.', example='9182'),
          targetPort?: int32(name='TargetPort', description='The destination port.', example='3306'),
        }
      ](name='Endpoints', description='The endpoints of the PodMonitor.'),
      environmentId?: string(name='EnvironmentId', description='The environment ID.', example='env-xxxxx'),
      namespace?: string(name='Namespace', description='The namespace.', example='arms-prom'),
      podMonitorName?: string(name='PodMonitorName', description='The name of the PodMonitor.', example='pm1'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-beijing'),
      status?: string(name='Status', description='The status of the PodMonitor.', example='run'),
    }
  ](name='Data', description='The result of the operation.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C518054-852F-4023-ABC1-4AF95FF7****'),
}

model ListEnvPodMonitorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnvPodMonitorsResponseBody(name='body'),
}

async function listEnvPodMonitors(request: ListEnvPodMonitorsRequest): ListEnvPodMonitorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEnvPodMonitors', 'POST', '/', 'json', false, 'json', request);
}

model ListEnvServiceMonitorsRequest {
  environmentId: string(name='EnvironmentId', description='The environment ID.', example='env-xxxxx', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model ListEnvServiceMonitorsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: [ 
    {
      addonName?: string(name='AddonName', description='The name of the add-on to which the ServiceMonitor belongs.', example='mysql'),
      addonReleaseName?: string(name='AddonReleaseName', description='The instance name of the add-on.', example='mysql1'),
      addonVersion?: string(name='AddonVersion', description='The version of the add-on.', example='1.1.0'),
      configYaml?: string(name='ConfigYaml', description='The YAML configuration string.', example='Refer to supplementary instructions.'),
      creationTimestamp?: string(name='CreationTimestamp', description='The time when the ServiceMonitor was created. The value of this parameter is a timestamp.', example='2011-10-11T22:32:11Z'),
      endpoints?: [ 
        {
          interval?: string(name='Interval', description='The collection interval.', example='30s'),
          matchedTargetCount?: int32(name='MatchedTargetCount', description='The number of pods that match the ServiceMonitor endpoint.', example='1'),
          path?: string(name='Path', description='The collection path.', example='/metrics'),
          port?: string(name='Port', description='The external port.', example='9101'),
          targetPort?: int32(name='TargetPort', description='The destination port.', example='443'),
        }
      ](name='Endpoints', description='The endpoints of the ServiceMonitor.'),
      environmentId?: string(name='EnvironmentId', description='The environment ID.', example='env-xxxxx'),
      matchedServiceCount?: int32(name='MatchedServiceCount', description='The number of matched services.', example='1'),
      namespace?: string(name='Namespace', description='The namespace.', example='arms-prom'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-beijing'),
      serviceMonitorName?: string(name='ServiceMonitorName', description='The name of the ServiceMonitor.', example='sm1'),
      status?: string(name='Status', description='The status of the ServiceMonitor.', example='run'),
    }
  ](name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='1A474FF8-7861-4D00-81B5-5BC3DA4E****'),
}

model ListEnvServiceMonitorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnvServiceMonitorsResponseBody(name='body'),
}

async function listEnvServiceMonitors(request: ListEnvServiceMonitorsRequest): ListEnvServiceMonitorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEnvServiceMonitors', 'POST', '/', 'json', false, 'json', request);
}

model ListEnvironmentDashboardsRequest {
  addonName?: string(name='AddonName', description='Name of Addon,One of AddonName and Scene must be filled in.', example='trace-java', position='Query'),
  environmentId: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxx', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
  scene?: string(name='Scene', description='The scenario of Addon. Either AddonName or Scene is required.', example='database', position='Query'),
}

model ListEnvironmentDashboardsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    dashboards?: [ 
      {
        folderUid?: string(name='FolderUid', description='The UID of the folder.', example='1374923841627893'),
        region?: string(name='Region', description='The region ID.', example='cn-hangzhou'),
        tags?: [ string ](name='Tags', description='The keyword.'),
        title?: string(name='Title', description='The title of the Grafana dashboard.', example='kafka-instance'),
        uid?: string(name='Uid', description='The unique identifier of the dashboard.', example='1537863211936042'),
        url?: string(name='Url', description='The complete URL of the dashboard.', example='http://xxx'),
      }
    ](name='Dashboards', description='The dashboards.'),
    total?: long(name='Total', description='The total number of entries returned.', example='1'),
  }(name='Data', description='The result of the operation.'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='A5EC8221-08F2-4C95-9AF1-49FD998C647A'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model ListEnvironmentDashboardsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnvironmentDashboardsResponseBody(name='body'),
}

async function listEnvironmentDashboards(request: ListEnvironmentDashboardsRequest): ListEnvironmentDashboardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEnvironmentDashboards', 'POST', '/', 'json', false, 'json', request);
}

model ListEnvironmentFeaturesRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Default value: zh.

Valid values:

*   en: English.
*   zh: Chinese.', example='en', position='Query'),
  environmentId: string(name='EnvironmentId', description='The environment ID.', example='env-xxx', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model ListEnvironmentFeaturesResponseBody = {
  code?: int32(name='Code', description='Status Code. Description 200 indicates success.', example='200'),
  data?: [ 
    {
      alias?: string(name='Alias', description='The alias of the feature.', example='Prometheus Agent'),
      config?: map[string]string(name='Config', description='The feature configuration.'),
      description?: string(name='Description', description='The description of the feature.', example='Collect Metric data using the Prometheus collection specification.'),
      environmentId?: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxxxx'),
      icon?: string(name='Icon', description='The URL of the icon.', example='http://xxx'),
      language?: string(name='Language', description='The language. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
      latestVersion?: string(name='LatestVersion', description='The latest version number.', example='1.1.17'),
      managed?: boolean(name='Managed', description='Indicates whether the component is fully managed.', example='true'),
      name?: string(name='Name', description='The name of the feature.', example='metric-agent'),
      status?: string(name='Status', description='The status of the feature. Valid values:

*   Installing: The agent is being installed.
*   Success: The agent is installed.
*   Failed: The agent failed to be installed.
*   UnInstall: The agent is uninstalled.
*   Uninstalling: The agent is being uninstalled.
*   UnInstallFailed: The agent failed to be uninstalled.', example='Success'),
      version?: string(name='Version', description='The version of the feature.', example='1.1.17'),
    }
  ](name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='40B10E04-81E8-4643-970D-F1B38F2E****'),
  success?: boolean(name='Success', description='Indicates whether the alert rule was deleted. Valid values:

*   `true`: The alert rule was deleted.
*   `false`: The alert rule failed to be deleted.', example='true'),
}

model ListEnvironmentFeaturesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnvironmentFeaturesResponseBody(name='body'),
}

async function listEnvironmentFeatures(request: ListEnvironmentFeaturesRequest): ListEnvironmentFeaturesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEnvironmentFeatures', 'POST', '/', 'json', false, 'json', request);
}

model ListEnvironmentsRequest {
  addonName?: string(name='AddonName', description='The add-on name. You must specify at least one of the AddonName and EnvironmentType parameters.', example='trace-java', position='Query'),
  bindResourceId?: string(name='BindResourceId', description='The ID of the resource.', example='cff30f0d67d7542dfb05bd114b4b1d7af', position='Query'),
  environmentType?: string(name='EnvironmentType', description='The environment type. You must specify at least one of the AddonName and EnvironmentType parameters.

Valid values:

*   CS

    <!-- -->

    :

    <!-- -->

    Container Service for Kubernetes (ACK)

    <!-- -->

*   ECS

    <!-- -->

    :

    <!-- -->

    Elastic Compute Service (ECS)

    <!-- -->

*   Cloud

    <!-- -->

    :

    <!-- -->

    cloud service

    <!-- -->', example='CS', position='Query'),
  feePackage?: string(name='FeePackage', description='The payable resource plan.

*   If the EnvironmentType parameter is set to CS, set the value to CS_Basic or CS_Pro. Default value: CS_Basic.
*   Otherwise, leave the parameter empty.

Valid values:

*   CS_Pro: Container Monitoring Pro
*   CS_Basic: Container Monitoring Basic', example='CS_Pro', position='Query'),
  filterRegionIds?: string(name='FilterRegionIds', description='The region IDs.', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aekzfurdatohtka', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='env'),
      value?: string(name='Value', description='The tag value.', example='gfn_web_outbound_add'),
    }
  ](name='Tag', description='The tags.', shrink='json', position='Query'),
}

model ListEnvironmentsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    environments?: [ 
      {
        addons?: [ 
          {
            alias?: string(name='Alias', description='The alias of the add-on.', example='MySQL Exporter'),
            description?: string(name='Description', description='The description of the add-on.', example='Collect mysql indicator information'),
            icon?: string(name='Icon', description='The URL of the icon.', example='http://xxxx'),
            name?: string(name='Name', description='The name of the add-on.', example='metric-agent'),
          }
        ](name='Addons', description='The add-ons.'),
        bindResourceId?: string(name='BindResourceId', description='The ID of the resource bound to the environment instance. The resource can be a Kubernetes cluster or a VPC.', example='vpc-bp1bgo8ronn'),
        bindResourceProfile?: string(name='BindResourceProfile', description='The profile that is bound to the resource.', example='xxx'),
        bindResourceType?: string(name='BindResourceType', description='The resource type.', example='VPC'),
        bindVpcCidr?: string(name='BindVpcCidr', description='The CIDR block that is bound to the VPC.', example='172.16.0.0/12'),
        createTime?: string(name='CreateTime', description='The time when the environment instance was created.', example='2023-03-24 11:58:35 +0800'),
        createdUserId?: string(name='CreatedUserId', description='The user ID.', example='12378523784982'),
        environmentId?: string(name='EnvironmentId', description='The ID of the environment instance.', example='env-xxx'),
        environmentName?: string(name='EnvironmentName', description='The name of the environment instance.', example='feiliks-biz-prod-edas'),
        environmentType?: string(name='EnvironmentType', description='The type of the environment instance. Valid values:

*   CS: Container Service
*   ECS: Elastic Compute Service
*   Cloud: cloud service', example='CS'),
        features?: [ 
          {
            alias?: string(name='Alias', description='The alias of the feature.', example='Prometheus Agent'),
            description?: string(name='Description', description='The description of the feature.', example='Collect Metric data using the Prometheus collection specification'),
            icon?: string(name='Icon', description='The URL of the icon.', example='http://xxx'),
            name?: string(name='Name', description='The name of the feature.', example='metirc-agent'),
          }
        ](name='Features', description='The parameters of the feature.'),
        feePackage?: string(name='FeePackage', description='The payable resource plan.

*   If the EnvironmentType parameter is set to CS, set the value to CS_Basic or CS_Pro.
*   Otherwise, leave the parameter empty.', example='CS_Pro'),
        grafanaDatasourceUid?: string(name='GrafanaDatasourceUid', description='The unique ID of the Grafana data source.', example='12374890'),
        grafanaFolderTitle?: string(name='GrafanaFolderTitle', description='The name of the Grafana directory.', example='filepath'),
        grafanaFolderUid?: string(name='GrafanaFolderUid', description='The unique ID of the Grafana directory.', example='1798319482935'),
        latestReleaseCreateTime?: string(name='LatestReleaseCreateTime', description='The time when the last add-on was created.', example='2023-09-22T16:56:29+08:00'),
        managedType?: string(name='ManagedType', description='Indicates whether agents or exporters are managed. Valid values:

*   none: No. By default, no managed agents or exporters are provided for ACK clusters.
*   agent: Agents are managed. By default, managed agents are provided for ASK clusters, ACS clusters, and ACK One clusters.
*   agent-exproter: Agents and exporters are managed. By default, managed agents and exporters are provided for cloud services.', example='agent'),
        prometheusId?: long(name='PrometheusId', description='The Prometheus ID.', example='124769812'),
        prometheusInstanceId?: string(name='PrometheusInstanceId', description='The ID of the Prometheus instance.', example='vpc-m5e4alj2i24ndbn'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-zhangjiakou'),
        releaseCount?: int32(name='ReleaseCount', description='The number of installed add-ons.', example='122'),
        resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmvt3xpr5aema'),
        tags?: [ 
          {
            key?: string(name='Key', description='The tag key.', example='fpx-tag'),
            value?: string(name='Value', description='The tag value.', example='cn-beijing'),
          }
        ](name='Tags', description='The tags of the environment resource.'),
        userId?: string(name='UserId', description='The user ID.', example='13990957477389'),
      }
    ](name='Environments', description='The queried environments.'),
    total?: long(name='Total', description='The total number of returned entries.', example='12'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model ListEnvironmentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnvironmentsResponseBody(name='body'),
}

async function listEnvironments(request: ListEnvironmentsRequest): ListEnvironmentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEnvironments', 'POST', '/', 'json', false, 'json', request);
}

model ListEscalationPoliciesRequest {
  name?: string(name='Name', description='The name of the escalation policy.', example='prod escalation policy', position='Query'),
  page: long(name='Page', description='The number of the page to return.', example='1', position='Query'),
  size: long(name='Size', description='The number of entries to return on each page.', example='20', position='Query'),
}

model ListEscalationPoliciesResponseBody = {
  pageBean?: {
    escalationPolicies?: [ 
      {
        id?: long(name='Id', description='The ID of the escalation policy.', example='1234'),
        name?: string(name='Name', description='The name of the escalation policy.', example='prod escalation policy'),
      }
    ](name='EscalationPolicies', description='The list of escalation policies.'),
    page?: long(name='Page', description='The page number of the returned page.', example='1'),
    size?: long(name='Size', description='The number of entries returned per page.', example='20'),
    total?: long(name='Total', description='The total number of returned entries.', example='1'),
  }(name='PageBean', description='The returned objects.'),
  requestId?: string(name='RequestId', description='The request ID.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
}

model ListEscalationPoliciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEscalationPoliciesResponseBody(name='body'),
}

async function listEscalationPolicies(request: ListEscalationPoliciesRequest): ListEscalationPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEscalationPolicies', 'GET', '/', 'json', false, 'json', request);
}

model ListEventBridgeIntegrationsRequest {
  name?: string(name='Name', description='The name of the EventBridge integration.', example='EventBridge_Test', position='Query'),
  page: long(name='Page', description='The number of the page to return.', example='1', position='Query'),
  size: long(name='Size', description='The number of entries to return on each page.', example='15', position='Query'),
}

model ListEventBridgeIntegrationsResponseBody = {
  pageBean?: {
    eventBridgeIntegrations?: [ 
      {
        description?: string(name='Description', description='The description of the EventBridge integration.', example='test'),
        id?: long(name='Id', description='The ID of the EventBridge integration.', example='123'),
        name?: string(name='Name', description='The name of the EventBridge integration.', example='EventBridge_Test'),
      }
    ](name='EventBridgeIntegrations', description='The EventBridge integrations.'),
    page?: long(name='Page', description='The number of the returned page.', example='1'),
    size?: long(name='Size', description='The number of entries returned per page.', example='15'),
    total?: long(name='Total', description='The total number of EventBridge integrations that are returned.', example='1'),
  }(name='PageBean', description='The information about EventBridge integrations that is returned on each page.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2B289756-E791-5842-BCBD-AD414C******'),
}

model ListEventBridgeIntegrationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEventBridgeIntegrationsResponseBody(name='body'),
}

async function listEventBridgeIntegrations(request: ListEventBridgeIntegrationsRequest): ListEventBridgeIntegrationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEventBridgeIntegrations', 'GET', '/', 'json', false, 'json', request);
}

model ListGrafanaWorkspaceRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values: zh and en. Default value: zh.', example='zh', position='Query'),
  regionId: string(name='RegionId', description='The region ID. Default value: cn-hangzhou.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Prometheus instance belongs.', example='rg-acfmxyexli2****', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The tags.', shrink='json', position='Query'),
}

model ListGrafanaWorkspaceResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: [
    GrafanaWorkspace
  ](name='Data', description='The returned result.'),
  message?: string(name='Message', description='The error message returned if the request parameters are invalid.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='0080BE65-167F-5CB6-A691-14E2EFD474BC'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='True'),
  traceId?: string(name='TraceId', description='The trace ID that is used to query the details of the request.', example='eac0a8048716731735000007137d000b'),
}

model ListGrafanaWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGrafanaWorkspaceResponseBody(name='body'),
}

/**
  * >The list returned by this operation includes the workspaces of Developer Edition, Expert Edition, and Advanced Edition. The list does not include the workspaces of Shared Edition.
  *
 */
async function listGrafanaWorkspace(request: ListGrafanaWorkspaceRequest): ListGrafanaWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGrafanaWorkspace', 'POST', '/', 'json', false, 'json', request);
}

model ListInsightsEventsRequest {
  endTime: string(name='EndTime', description='The end of the time range to query. The value is a timestamp.', example='1480607940000', position='Query'),
  insightsTypes?: string(name='InsightsTypes', description='The types of the events that you want to query. Separate multiple event types with commas (,). If you do not specify this parameter, all events are queried.

*   errorIncrease: API error-rate spike events. Examples: HTTP API error-rate spike events and Dubbo API error-rate spike events.
*   topErrorIncrease: the top five API error-rate spike events with the highest traffic.
*   topRtIncrease: API response-time spike events. Examples: HTTP API response-time spike events and Dubbo API response-time spike events.
*   rtIncrease: the top five API response-time spike events with the highest traffic.', example='errorIncrease,topErrorIncrease,topExceptionIncrease,topRtIncrease,rtIncrease', position='Query'),
  pid?: string(name='Pid', description='The ID of the application.', example='aokcdqn3ly@a195c6d6421****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  startTime: string(name='StartTime', description='The start of the time range to query. The value is a timestamp.', example='1595174400000', position='Query'),
}

model ListInsightsEventsResponseBody = {
  insightsEvents?: [ 
    {
      date?: long(name='Date', description='The time when the event occurred. The value is a timestamp.', example='1658890560'),
      desc?: string(name='Desc', description='The description of the alert event.', example='The overall response time of the \\[HTTP] service of the application \\[sd] spikes at \\[2022-07-27 10:57:00]'),
      level?: string(name='Level', description='The severity of the event.', example='P3'),
      pid?: string(name='Pid', description='The ID of the application associated with the event.', example='dsv9zcel92@7da413b******'),
      problemId?: string(name='ProblemId', description='The problem identifier.', example='erep3o9zue@01ebe697ab70566|@1499161100890550|@cn-hangzhou|@1701841800000|@1701842040000|@daa6c51a-3c44-4d57-9548-4e212c******'),
      title?: string(name='Title', description='The title of the event.', example='Average response-time spikes of application services'),
      type?: string(name='Type', description='The type of the event.', example='rtIncrease'),
    }
  ](name='InsightsEvents', description='The details of the event.'),
  requestId?: string(name='RequestId', description='The request ID.', example='6F1174DC-6085-5353-AAE7-D4ADCD******'),
}

model ListInsightsEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInsightsEventsResponseBody(name='body'),
}

async function listInsightsEvents(request: ListInsightsEventsRequest): ListInsightsEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInsightsEvents', 'POST', '/', 'json', false, 'json', request);
}

model ListIntegrationRequest {
  integrationName?: string(name='IntegrationName', description='The name of the alert integration.', example='CloudMonitor integration', position='Query'),
  integrationProductType: string(name='IntegrationProductType', description='The type of the alert integration. Valid values:

*   CLOUD_MONITOR: CloudMonitor
*   LOG_SERVICE: Log Service', example='CLOUD_MONITOR', position='Query'),
  isDetail?: boolean(name='IsDetail', description='Specifies whether to display the details of each alert integration:

*   true
*   false', example='true', position='Query'),
  page: long(name='Page', description='The number of the page to return.', example='1', position='Query'),
  size: long(name='Size', description='The number of alert integrations to return on each page.', example='10', position='Query'),
}

model ListIntegrationResponseBody = {
  pageInfo?: {
    integrations?: [ 
      {
        apiEndpoint?: string(name='ApiEndpoint', description='The endpoint of the alert integration.', example='https://alerts.aliyuncs.com/api/v1/integrations/custom/ymQBN******'),
        createTime?: string(name='CreateTime', description='The time when the alert integration was created.', example='2022-06-18'),
        integrationDetail?: {
          autoRecover?: boolean(name='AutoRecover', description='Indicates whether alert events are automatically cleared. Valid values:

*   true (default)
*   false', example='true'),
          description?: string(name='Description', description='The description of the alert integration.', example='Test'),
          duplicateKey?: string(name='DuplicateKey', description='The fields whose values are deduplicated.', example='LABEL.alertname::LABEL.severity'),
          extendedFieldRedefineRules?: [  map[string]any ](name='ExtendedFieldRedefineRules', description='The extended mapped fields of the alert source.'),
          fieldRedefineRules?: [  map[string]any ](name='FieldRedefineRules', description='The predefined mapped fields of the alert source.'),
          initiativeRecoverField?: string(name='InitiativeRecoverField', description='The field for clearing alert events. The system queries alert events based on the field of alert clearing events and clears the alert events.

> Only the Log Service alert integration supports the parameter.', example='$.status'),
          initiativeRecoverValue?: string(name='InitiativeRecoverValue', description='The value of the field for clearing alert events. The system queries alert events based on the field of alert clearing events and clears the alert events.

> Only the Log Service alert integration supports the parameter.', example='ok'),
          recoverTime?: long(name='RecoverTime', description='The time when alert events are automatically cleared. Unit: seconds. Default value: 300.', example='300'),
          stat?: [ long ](name='Stat', description='The total number of alert events and the number of abnormal alert events in the last hour.'),
        }(name='IntegrationDetail', description='The information about the alert events.'),
        integrationId?: long(name='IntegrationId', description='The ID of the alert integration.', example='1234'),
        integrationName?: string(name='IntegrationName', description='The name of the alert integration.', example='CloudMonitor integration'),
        integrationProductType?: string(name='IntegrationProductType', description='The type of the alert integration. Valid values:

*   CLOUD_MONITOR: CloudMonitor
*   LOG_SERVICE: Log Service', example='CLOUD_MONITOR'),
        liveness?: string(name='Liveness', description='The activity of the alert integration', example='ready'),
        shortToken?: string(name='ShortToken', description='The authentication token of the alert integration.', example='ymQBN******'),
        state?: boolean(name='State', description='Indicates whether the alert integration was enabled. Valid values:

*   true
*   false', example='true'),
      }
    ](name='Integrations', description='The information about each alert integration.'),
    page?: long(name='Page', description='The page number of the returned page.', example='1'),
    size?: long(name='Size', description='The number of alert integrations returned per page.', example='10'),
    total?: long(name='Total', description='The total number of alert integrations.', example='1'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model ListIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIntegrationResponseBody(name='body'),
}

async function listIntegration(request: ListIntegrationRequest): ListIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIntegration', 'GET', '/', 'json', false, 'json', request);
}

model ListNotificationPoliciesRequest {
  directedMode?: boolean(name='DirectedMode', description='Specifies whether to enable simple mode.', example='true', position='Query'),
  ids?: string(name='Ids', description='The ID of the notification policy.', example='12345', position='Query'),
  isDetail?: boolean(name='IsDetail', description='Specifies whether to query the details about notification policies. Valid values:

*   `true`: Details about notification policies are queried.
*   `false`: Details about notification policies are not queried.', example='false', position='Query'),
  name?: string(name='Name', description='The name of the notification policy.', example='notificationpolicy_test', position='Query'),
  page: long(name='Page', description='The number of the page to return.', example='1', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region. Default value: **cn-hangzhou**.', example='cn-hangzhou', position='Query'),
  size: long(name='Size', description='The number of entries to return on each page.', example='20', position='Query'),
}

model ListNotificationPoliciesResponseBody = {
  pageBean?: {
    notificationPolicies?: [ 
      {
        directedMode?: boolean(name='DirectedMode', description='Indicates whether simple mode is enabled.', example='true'),
        escalationPolicyId?: long(name='EscalationPolicyId', description='The ID of the escalation policy.', example='123'),
        groupRule?: {
          groupInterval?: long(name='GroupInterval', description='The time interval of grouping. Unit: seconds. Default value: 30.', example='30'),
          groupWait?: long(name='GroupWait', description='The waiting time for grouping. Unit: seconds. Default value: 5.', example='5'),
          groupingFields?: [ string ](name='GroupingFields', description='An array of alert event group objects.

*   If you do not specify the groupingFields field, all alerts will be sent to contacts based on `alertname`.
*   If you specify the groupingFields field, alerts with the same field will be sent to contacts in one notification.'),
        }(name='GroupRule', description='The grouping rule for alert events.'),
        id?: long(name='Id', description='The ID of the notification policy.', example='1234'),
        integrationId?: long(name='IntegrationId', description='The integration ID of the ticket system to which alerts are pushed.', example='34'),
        matchingRules?: [ 
          {
            matchingConditions?: [ 
              {
                key?: string(name='Key', description='The key of the matching condition.', example='altertname'),
                operator?: string(name='Operator', description='The logical operator of the matching condition. Valid values:

*   `eq`: equal to
*   `neq`: not equal to
*   `in`: contains
*   `nin`: does not contain
*   `re`: regular expression match
*   `nre`: regular expression mismatch', example='eq'),
                value?: string(name='Value', description='The value of the matching condition.', example='test'),
              }
            ](name='MatchingConditions', description='The matching conditions.'),
          }
        ](name='MatchingRules', description='The matching rules for alert events.'),
        name?: string(name='Name', description='The name of the notification policy.', example='notificationpolicy_test'),
        notifyRule?: {
          notifyChannels?: [ string ](name='NotifyChannels', description='The notification method.'),
          notifyEndTime?: string(name='NotifyEndTime', description='The end time of the notification window.', example='23:59'),
          notifyObjects?: [ 
            {
              notifyChannels?: [ string ](name='NotifyChannels', description='The notification methods specified for a contact.'),
              notifyObjectId?: long(name='NotifyObjectId', description='The ID of the notification object.', example='123'),
              notifyObjectName?: string(name='NotifyObjectName', description='The name of the notification object.', example='test'),
              notifyObjectType?: string(name='NotifyObjectType', description='The type of the notification object. Valid values:

- CONTACT: an individual contact
- CONTACT_GROUP: a contact group
- DING_ROBOT: an instant messaging (IM) chatbot
- CONTACT_SCHEDULE: a person on duty based on an established schedule', example='CONTACT'),
            }
          ](name='NotifyObjects', description='The notification objects.'),
          notifyStartTime?: string(name='NotifyStartTime', description='The start time of the notification window.', example='00:00'),
        }(name='NotifyRule', description='The notification rule.'),
        notifyTemplate?: {
          emailContent?: string(name='EmailContent', description='The content of the alert notification sent by email.', example='Alert name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }} Cluster name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }} Application name: {{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }} Notification policy: {{ .dispatchRuleName }} Alert time: {{ .startTime }} Alert content: {{ for .alerts }} {{.annotations.message}} {{if .generatorURL }} \\<a href="{{.generatorURL}}" >Link\\</a> {{end}} {{end}}'),
          emailRecoverContent?: string(name='EmailRecoverContent', description='The content of the alert resolution notification sent by email.', example='Alert name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }} Cluster name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }} Application name: {{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }} Notification policy: {{ .dispatchRuleName }} Alert resolution time: {{ .endTime }} Alert content: {{ for .alerts }} {{.annotations.message}} {{if .generatorURL }} \\<a href="{{.generatorURL}}" >Link\\</a> {{end}} {{end}}'),
          emailRecoverTitle?: string(name='EmailRecoverTitle', description='The title of the alert resolution notification sent by email.', example='{{ .commonLabels.alertname }}'),
          emailTitle?: string(name='EmailTitle', description='The title of the alert notification sent by email.', example='{{ .commonLabels.alertname }}'),
          robotContent?: string(name='RobotContent', description='The content of the alert notification sent by an IM chatbot.', example='{{if .commonLabels.clustername }} > Cluster name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }} > Application name: {{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }}{{ for .alerts }}> {{.annotations.message}} {{if .generatorURL }} \\[Link]\\({{.generatorURL}}) {{ end }} {{if eq "true" .labels.\\_aliyun_arms_is_denoise_filtered }} (Suspected noise) {{end}} {{end}}'),
          smsContent?: string(name='SmsContent', description='The content of the alert notification sent by text message.', example='\\<SmsContent>Notification on the occurrence of a {{ .level }} alert. Alert name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }} Cluster name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }} Application name: {{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }} Notification policy: {{ .dispatchRuleName }} Alert time: {{ .startTime }} Alert content: {{ for .alerts }} {{.annotations.message}} {{ end }}\\</SmsContent>'),
          smsRecoverContent?: string(name='SmsRecoverContent', description='The content of the alert resolution notification sent by text message.', example='\\<SmsRecoverContent>Alert resolution notification. Alert name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }} Cluster name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }} Application name: {{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }} Notification policy: {{ .dispatchRuleName }} Alert resolution time: {{ .endTime }} Alert content: {{ for .alerts }} {{.annotations.message}} {{ end }}\\</SmsRecoverContent>'),
          ttsContent?: string(name='TtsContent', description='The content of the alert notification sent by phone.', example='\\<TtsContent>Alert name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }} Cluster name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }} Application name: {{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }} Notification policy: {{ .dispatchRuleName }} Alert time: {{ .startTime }} Alert content: {{ for .alerts }} {{.annotations.message}} {{ end }}\\</TtsContent>'),
          ttsRecoverContent?: string(name='TtsRecoverContent', description='The content of the alert resolution notification sent by phone.', example='\\<TtsRecoverContent>Alert name: {{ .commonLabels.alertname }}{{if .commonLabels.clustername }} Cluster name: {{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }} Application name: {{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }} Notification policy: {{ .dispatchRuleName }} Alert resolution time: {{ .endTime }} Alert content: {{ for .alerts }} {{.annotations.message}} {{ end }}\\</TtsRecoverContent>'),
        }(name='NotifyTemplate', description='The notification template.'),
        repeat?: boolean(name='Repeat', description='Indicates whether the system resends notifications for a long-lasting unresolved alert. Valid values:

- `true` (default): The system resends notifications for a long-lasting unresolved alert at a specified time interval.
- `false`: The system resends notifications for a long-lasting unresolved alert based on an escalation policy.', example='true'),
        repeatInterval?: long(name='RepeatInterval', description='The time interval at which a notification is resent for a long-lasting unresolved alert. Unit: seconds.', example='600'),
        sendRecoverMessage?: boolean(name='SendRecoverMessage', description='Indicates whether the status of an alert automatically changes to Resolved when all events related to the alert change to the Restored state. The system sends a notification to the alert contacts when the alert status changes to Resolved.

- `true` (default): The system sends a notification.
- `false`: The system does not send a notification.', example='true'),
        state?: string(name='State', description='Indicates whether the notification policy is enabled. Valid values: enable and disable.', example='enable'),
      }
    ](name='NotificationPolicies', description='The queried notification policies.'),
    page?: long(name='Page', description='The number of the page returned.', example='1'),
    size?: long(name='Size', description='The number of entries that are returned on each page.', example='20'),
    total?: long(name='Total', description='The number of notification policies that are returned.', example='24'),
  }(name='PageBean', description='The returned pages.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
}

model ListNotificationPoliciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNotificationPoliciesResponseBody(name='body'),
}

async function listNotificationPolicies(request: ListNotificationPoliciesRequest): ListNotificationPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNotificationPolicies', 'POST', '/', 'json', false, 'json', request);
}

model ListOnCallSchedulesRequest {
  name?: string(name='Name', description='The name of the scheduling policy.', example='OnCallSchedule_test', position='Query'),
  page: long(name='Page', description='The number of the page to return.', example='1', position='Query'),
  size: long(name='Size', description='The number of entries to return on each page.', example='20', position='Query'),
}

model ListOnCallSchedulesResponseBody = {
  pageBean?: {
    onCallSchedules?: [ 
      {
        description?: string(name='Description', description='The description of the scheduling policy.', example='Test scheduling policy'),
        id?: long(name='Id', description='The ID of the scheduling policy.', example='1234'),
        name?: string(name='Name', description='The name of the scheduling policy.', example='OnCallSchedule_test'),
      }
    ](name='OnCallSchedules', description='The information about the scheduling policy.'),
    page?: long(name='Page', description='The page number of the returned page.', example='1'),
    size?: long(name='Size', description='The number of entries returned per page.', example='20'),
    total?: long(name='Total', description='The total number of returned entries.', example='1'),
  }(name='PageBean', description='The objects that were returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
}

model ListOnCallSchedulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOnCallSchedulesResponseBody(name='body'),
}

async function listOnCallSchedules(request: ListOnCallSchedulesRequest): ListOnCallSchedulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOnCallSchedules', 'GET', '/', 'json', false, 'json', request);
}

model ListPrometheusAlertRulesRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster.', example='c0bad479465464e1d8c1e641b0afb****', position='Query'),
  matchExpressions?: string(name='MatchExpressions', description='The tag match conditions that are described in a JSON string. For more information about this parameter, see the **Additional description of the MatchExpressions parameter** section.', example='[{"key":"severity","value":"critical","operator":"re"}]', position='Query'),
  name?: string(name='Name', description='The name of the alert rule.', example='Prometheus_Alert', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
  status?: int32(name='Status', description='Specifies whether the alert rule is enabled. Valid values:

- 1: enables the alert rule.
- 0: disables the alert rule.', example='1', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='owner'),
      value?: string(name='Value', description='The tag value.', example='zhangsan'),
    }
  ](name='Tags', description='The tags.', position='Query'),
  type?: string(name='Type', description='The type of the alert rule.', example='Custom', position='Query'),
}

model ListPrometheusAlertRulesResponseBody = {
  code?: long(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  message?: string(name='Message', description='The returned message.', example='success'),
  prometheusAlertRules?: [ 
    {
      alertId?: long(name='AlertId', description='The ID of the alert rule.', example='3888704'),
      alertName?: string(name='AlertName', description='The name of the alert rule.', example='Prometheus_Alert'),
      annotations?: [ 
        {
          name?: string(name='Name', description='The name of the annotation.', example='message'),
          value?: string(name='Value', description='The value of the annotation.', example='The CPU utilization of ${{$labels.pod_name}} exceeds 80%. Current value: {{$value}}%'),
        }
      ](name='Annotations', description='The annotations of the alert rule.'),
      clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='c0bad479465464e1d8c1e641b0afb****'),
      dispatchRuleId?: long(name='DispatchRuleId', description='The ID of the notification policy. This parameter is returned if the NotifyType parameter is set to `DISPATCH_RULE`.', example='10282'),
      duration?: string(name='Duration', description='The duration of the alert. Valid values: 1 to 1440. Unit: minutes.', example='1m'),
      expression?: string(name='Expression', description='The expression of the alert rule.', example='100 * (sum(rate(container_cpu_usage_seconds_total[1m])) by (pod_name) / sum(label_replace(kube_pod_container_resource_limits_cpu_cores, \\"pod_name\\", \\"$1\\", \\"pod\\", \\"(.*)\\")) by (pod_name))>75'),
      labels?: [ 
        {
          name?: string(name='Name', description='The name of the tag.', example='severity'),
          value?: string(name='Value', description='The value of the tag associated with the instance.', example='critical'),
        }
      ](name='Labels', description='The tags of the alert rule.'),
      message?: string(name='Message', description='The alert message. Tags can be referenced in the {{$labels.xxx}} format.', example='The CPU utilization of ${{$labels.pod_name}} exceeds 80%. Current value: {{$value}}%'),
      notifyType?: string(name='NotifyType', description='The method that is used to send alert notifications. Valid values:

- ALERT_MANAGER: Alert notifications are sent by Operation Center.
- DISPATCH_RULE: Alert notifications are', example='ALERT_MANAGER'),
      status?: int32(name='Status', description='Indicates whether the alert rule is enabled. Valid values:

- 1: The alert rule is enabled.
- 0: The alert rule is disabled.', example='1'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='key'),
          value?: string(name='Value', description='The tag value.', example='value'),
        }
      ](name='Tags', description='The tags.'),
      type?: string(name='Type', description='The type of the alert rule.', example='Custom'),
    }
  ](name='PrometheusAlertRules', description='The returned struct.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9FEA6D00-317F-45E3-9004-7FB8B0B7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='True'),
}

model ListPrometheusAlertRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrometheusAlertRulesResponseBody(name='body'),
}

async function listPrometheusAlertRules(request: ListPrometheusAlertRulesRequest): ListPrometheusAlertRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrometheusAlertRules', 'POST', '/', 'json', false, 'json', request);
}

model ListPrometheusAlertTemplatesRequest {
  clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='c0bad479465464e1d8c1e641b0afb****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model ListPrometheusAlertTemplatesResponseBody = {
  prometheusAlertTemplates?: [ 
    {
      alertName?: string(name='AlertName', description='The name of the alert rule.', example='The available memory on the node is less than 10%'),
      annotations?: [ 
        {
          name?: string(name='Name', description='The name of the annotation.', example='message'),
          value?: string(name='Value', description='The value of the annotation.', example='The available memory on node {{ $labels.instance }} is less than 10%. Available memory: {{ $value }}%'),
        }
      ](name='Annotations', description='The annotations of the alert rule.'),
      description?: string(name='Description', description='The content of the alert notification. Tags can be referenced in the {{$labels.xxx}} format.', example='The available memory on node {{ $labels.instance }} is less than 10%. Available memory: {{ $value }}%'),
      duration?: string(name='Duration', description='The duration of the alert. Valid values: 1 to 1440. Unit: minutes.', example='1m'),
      expression?: string(name='Expression', description='The expression of the alert rule.', example='node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes * 100 < 10'),
      labels?: [ 
        {
          name?: string(name='Name', description='The name of the tag.', example='severity'),
          value?: string(name='Value', description='The value of the tag.', example='warning'),
        }
      ](name='Labels', description='The tags of the alert rule.'),
      type?: string(name='Type', description='The type of the alert rule.', example='Node'),
      version?: string(name='Version', description='The version of the alert rule.', example='1.0'),
    }
  ](name='PrometheusAlertTemplates', description='The returned struct.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9FEA6D00-317F-45E3-9004-7FB8B0B7****'),
}

model ListPrometheusAlertTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrometheusAlertTemplatesResponseBody(name='body'),
}

async function listPrometheusAlertTemplates(request: ListPrometheusAlertTemplatesRequest): ListPrometheusAlertTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrometheusAlertTemplates', 'POST', '/', 'json', false, 'json', request);
}

model ListPrometheusGlobalViewRequest {
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model ListPrometheusGlobalViewResponseBody = {
  code?: int32(name='Code', description='Status code. Description 200 means success.', example='200'),
  data?: string(name='Data', description='The list of global aggregation instances. The value of this parameter is a string in the JSON format.', example='\\[ {groupName: "the name of the global aggregation instance", clusterId: "global-v2-clusterid", endpoint: "cn-hangzhou"}, // ..... more items ]'),
  message?: string(name='Message', description='More information.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='DBDCE95A-A0DD-5FC5-97CC-EEFC3D814385'),
}

model ListPrometheusGlobalViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrometheusGlobalViewResponseBody(name='body'),
}

async function listPrometheusGlobalView(request: ListPrometheusGlobalViewRequest): ListPrometheusGlobalViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrometheusGlobalView', 'POST', '/', 'json', false, 'json', request);
}

model ListPrometheusInstanceByTagAndResourceGroupIdRequest {
  regionId: string(name='RegionId', description='The region ID of the Prometheus instance.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='fpx-tag'),
      value?: string(name='Value', description='The value of the tag.', example='fvt-tag-value'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model ListPrometheusInstanceByTagAndResourceGroupIdResponseBody = {
  code?: string(name='Code', description='The response code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: {
    prometheusInstances?: [ 
      {
        authToken?: string(name='AuthToken', description='The authorization token.', example='ad32dxxxx'),
        clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='c9d5dda1aeca64220853ace304baeb03d'),
        clusterName?: string(name='ClusterName', description='The name of the Prometheus instance.', example='prom1'),
        clusterType?: string(name='ClusterType', description='The instance type. Valid values:

*   remote-write: Prometheus instance for Remote Write
*   ecs: Prometheus instances for ECS
*   cloud-monitor: Prometheus instance for Alibaba Cloud services in the Chinese mainland
*   cloud-product: Prometheus instance for Alibaba Cloud services outside the Chinese mainland
*   global-view: global aggregation instance
*   aliyun-cs: Prometheus instance for Container Service', example='ecs'),
        grafanaInstanceId?: string(name='GrafanaInstanceId', description='The ID of the Grafana workspace.', example='grafana-rnggfvhlcdl6m71l**'),
        httpApiInterUrl?: string(name='HttpApiInterUrl', description='The public URL for the HTTP API.', example='http://cn-beijing.arms.aliyuncs.com:9090/api/v1/prometheus/xxx/cn-beijing'),
        httpApiIntraUrl?: string(name='HttpApiIntraUrl', description='The internal URL for the HTTP API.', example='http://cn-beijing-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/xxx/cn-beijing'),
        paymentType?: string(name='PaymentType', description='The billing method. Valid values:

*   PREPAY: subscription
*   POSTPAY: pay-as-you-go', example='POSTPAY'),
        pushGatewayInterUrl?: string(name='PushGatewayInterUrl', description='The public URL for Pushgateway.', example='http://cn-beijing.arms.aliyuncs.com/prometheus/xxx/api/v2'),
        pushGatewayIntraUrl?: string(name='PushGatewayIntraUrl', description='The internal URL for Pushgateway.', example='http://cn-beijing-intranet.arms.aliyuncs.com/prometheus/xxx/api/v2'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-shanghai'),
        remoteReadInterUrl?: string(name='RemoteReadInterUrl', description='The public URL for remote read.', example='http://cn-beijing.arms.aliyuncs.com:9090/api/v1/prometheus/xxx/api/v1/read'),
        remoteReadIntraUrl?: string(name='RemoteReadIntraUrl', description='The internal URL for remote read.', example='http://cn-beijing-intranet.arms.aliyuncs.com:9090/api/v1/prometheus/xxx/api/v1/read'),
        remoteWriteInterUrl?: string(name='RemoteWriteInterUrl', description='The public URL for remote write.', example='http://cn-beijing.arms.aliyuncs.com/prometheus/xxx/api/v3/write'),
        remoteWriteIntraUrl?: string(name='RemoteWriteIntraUrl', description='The internal URL for remote write.', example='http://cn-beijing-intranet.arms.aliyuncs.com/prometheus/xxx/api/v3/write'),
        resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Prometheus instance belongs.', example='rg-acfmz7nocpeidcy'),
        resourceType?: string(name='ResourceType', description='The resource type.', example='PROMETHEUS'),
        securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-f8zd1toc10wmbi1v5rom'),
        subClustersJson?: string(name='SubClustersJson', description='The child instances of the global aggregation instance. The value is a JSON string.', example='\\[ { "headers": {}, "regionId": "cn-hangzhou", "sourceType": "AlibabaPrometheus", "extras": {}, "clusterId": "c39a1048921e04fceb039db2fb\\*\\*\\*\\*", "sourceName": "arms-luyao-test", "dataSource": "", "userId": "167275301789\\*\\*\\*\\*" }, { "headers": {}, "regionId": "cn-beijing", "sourceType": "AlibabaPrometheus", "extras": {}, "clusterId": "c6b6485496d5b400abde22cb47b5\\*\\*\\*\\*", "sourceName": "agent-321-test", "dataSource": "", "userId": "167275301789\\*\\*\\*\\*" }, { "headers": {}, "regionId": "cn-zhangjiakou", "sourceType": "AlibabaPrometheus", "extras": {}, "clusterId": "c261a4f3200c446659133f1ade78\\*\\*\\*\\*", "sourceName": "zaifeng-cardinality-01", "dataSource": "", "userId": "167275301789\\*\\*\\*\\*" } ]'),
        tags?: [ 
          {
            tagKey?: string(name='TagKey', description='The tag key.', example='ac-cus-tag-3'),
            tagValue?: string(name='TagValue', description='The tag value.', example='asg-2vc8qq7x89o11rus9uvu'),
          }
        ](name='Tags', description='The list of tags.'),
        userId?: string(name='UserId', description='The ID of the user.', example='1672753017899***'),
        vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-f8z73vcja1tqnw90aav5a'),
        vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-8vbtp1fsm8mir18l8rl0u'),
      }
    ](name='PrometheusInstances', description='The queried Prometheus instances.'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='4789C3E9-A85A-524B-B97B-9D2B14BA06BC'),
}

model ListPrometheusInstanceByTagAndResourceGroupIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrometheusInstanceByTagAndResourceGroupIdResponseBody(name='body'),
}

async function listPrometheusInstanceByTagAndResourceGroupId(request: ListPrometheusInstanceByTagAndResourceGroupIdRequest): ListPrometheusInstanceByTagAndResourceGroupIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrometheusInstanceByTagAndResourceGroupId', 'POST', '/', 'json', false, 'json', request);
}

model ListPrometheusInstancesRequest {
  clusterType?: string(name='ClusterType', description='The cluster type. If you do not specify this parameter, all cluster types are queried. Valid values:

*   cloud-product-prometheus: Prometheus instance for cloud services
*   ManagedKubernetes: ACK managed cluster
*   satellite: Prometheus instance for ARMS OpenTelemetry
*   Ask: ACK Serverless cluster
*   remote-write-prometheus: general-purpose Prometheus instance
*   cloud-monitor-cmee: Hybrid Cloud Monitoring
*   ExternalKubernetes: external Kubernetes cluster registered in ACK
*   vpc-prometheus: Prometheus instance for ECS
*   cloud-monitor-direct: cloud service self-monitoring
*   Edge Kubernetes: ACK Edge cluster', example='cloud-product-prometheus', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  showGlobalView: boolean(name='ShowGlobalView', description='Specifies whether to obtain global aggregation instances. Valid values:

*   true
*   false', example='true', position='Query'),
}

model ListPrometheusInstancesResponseBody = {
  code?: int32(name='Code', description='The status code.', example='200'),
  data?: string(name='Data', description='The Prometheus instances in the region in the JSON format.', example='[{"agentStatus":"0","clusterId":"global-v2-cn-1672753017899-dmjnwtzz","clusterName":"test-GlobalView","clusterType":"GlobalViewV2","commercialConfig":{},"createTime":1656579981000,"id":13785300,"isAdvancedClusterInstalled":false,"isClusterRunning":true,"isControllerInstalled":true,"isIntegrationCenter":false,"regionId":"cn-hongkong","updateTime":1657616273000,"userId":"1672753017899"},{"agentStatus":"0","clusterId":"51a123a61a8f31f0","clusterName":"cloud-product-prometheus_cn-qingdao","clusterType":"cloud-product-prometheus","commercialConfig":{},"controllerId":"51a123a61a8f31f0","createTime":1653532488000,"id":13746658,"isAdvancedClusterInstalled":false,"isClusterRunning":true,"isControllerInstalled":true,"isIntegrationCenter":false,"regionId":"cn-qingdao","updateTime":1653532518000,"userId":"1672753017899"}]'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='E9C9DA3D-10FE-472E-9EEF-2D0A3E41****'),
}

model ListPrometheusInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrometheusInstancesResponseBody(name='body'),
}

async function listPrometheusInstances(request: ListPrometheusInstancesRequest): ListPrometheusInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrometheusInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListPrometheusIntegrationRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance. Only aliyun-cs and ecs instances are supported.', example='c77f6f2397ea74672872acf5e31374a27', position='Query'),
  integrationType: string(name='IntegrationType', description='The integration type. Valid values: kafka, mysql, redis, snmp, emr, nubela, and tidb.', example='kafka, mysql, redis, snmp, emr, nubela, and tidb', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model ListPrometheusIntegrationResponseBody = {
  code?: int32(name='Code', description='The response code. The status code 200 indicates that the request was successful.', example='200'),
  data?: [ 
    {
      canDelete?: boolean(name='CanDelete', description='Indicates whether the exporter can be deleted.', example='true'),
      canEditor?: boolean(name='CanEditor', description='Indicates whether the exporter can be edited.', example='true'),
      clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='c589a1b8db05c4561aefbb898ca8fb1cf'),
      containerName?: string(name='ContainerName', description='The name of the container.', example='container-1'),
      describe?: string(name='Describe', description='The description of the exporter.', example='"{}"'),
      exporterType?: string(name='ExporterType', description='The type of the exporter.', example='kafka-exporter'),
      instanceId?: long(name='InstanceId', description='The ID of the exporter.', example='29374'),
      instanceName?: string(name='InstanceName', description='The name of the exporter.', example='inet'),
      integrationType?: string(name='IntegrationType', description='The integration type. Valid values: kafka, mysql, redis, snmp, emr, nubela, and tidb.', example='Kafka, mysql, redis, snmp, emr, nubela, and tidb'),
      namespace?: string(name='Namespace', description='The namespace.', example='arms-prom'),
      needUpgrade?: boolean(name='NeedUpgrade', description='Indicates whether an upgrade is required.', example='true'),
      param?: string(name='Param', description='The configurations of the exporter. The value is a JSON string.', example='{
      "port": "5554",
      "name": "kafka-test12",
      "kafka_instance": "kafka-test",
      "__label_value": "kafka-test",
      "scrape_interval": 33,
      "metrics_path": "/metrics",
      "__label_key": "kafka-test"
}'),
      podName?: string(name='PodName', description='The pod name of the exporter.', example='kafka-exporter-1'),
      showDescribe?: boolean(name='ShowDescribe', description='Indicates whether the description is displayed.', example='true'),
      showLog?: boolean(name='ShowLog', description='Indicates whether the exporter logs are displayed.', example='true'),
      status?: string(name='Status', description='The status of the exporter.', example='installed'),
      target?: string(name='Target', description='The monitored IP address.', example='121.40.62.240:3342'),
      version?: string(name='Version', description='The version number.', example='1.0.0'),
    }
  ](name='Data', description='The queried exporters.'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='1F1D8840-5330-5804-A8DB-C3C5C5CED6BB'),
}

model ListPrometheusIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrometheusIntegrationResponseBody(name='body'),
}

async function listPrometheusIntegration(request: ListPrometheusIntegrationRequest): ListPrometheusIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrometheusIntegration', 'POST', '/', 'json', false, 'json', request);
}

model ListPrometheusMonitoringRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. Default value: `cn-hangzhou`.', example='cn-hangzhou', position='Query'),
  type?: string(name='Type', description='The type of the monitoring configuration. Valid values for a Prometheus instance for Container Service: ServiceMonitor, PodMonitor, CustomJob, and Probe. Valid values for a Prometheus instance for ECS: CustomJob and Probe.', example='serviceMonitor', position='Query'),
}

model ListPrometheusMonitoringResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: [ 
    {
      clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='c589a1b8db05c4561aefbb898ca8fb1cf'),
      configYaml?: string(name='ConfigYaml', description='The monitoring configuration. The value is a YAML string.', example='apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: tomcat-demo
  namespace: default
spec:
  endpoints:
    - interval: 30s
      path: /metrics
      port: tomcat-monitor
  namespaceSelector:
    any: true
  selector:
    matchLabels:
      app: tomcat'),
      monitoringName?: string(name='MonitoringName', description='The name of the monitoring configuration.', example='podMonitor1'),
      status?: string(name='Status', description='The status of the monitoring configuration.', example='run'),
      type?: string(name='Type', description='The type of the monitoring configuration.', example='podMonitor'),
    }
  ](name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='D80ADAAC-8C32-5479-BD14-C28CF832****'),
}

model ListPrometheusMonitoringResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrometheusMonitoringResponseBody(name='body'),
}

async function listPrometheusMonitoring(request: ListPrometheusMonitoringRequest): ListPrometheusMonitoringResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrometheusMonitoring', 'POST', '/', 'json', false, 'json', request);
}

model ListRetcodeAppsRequest {
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. You can obtain the resource group ID in the **Resource Management** console.', example='rg-acfmxyexli2****', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The tags that you want to add to the task.', position='Query'),
}

model ListRetcodeAppsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='99A663CB-8D7B-4B0D-A006-03C8EE38E7BB'),
  retcodeApps?: [ 
    {
      appId?: long(name='AppId', description='The ID of the application. The parameter is an auto-increment parameter.', example='16064'),
      appName?: string(name='AppName', description='The name of the application.', example='A1'),
      nickName?: string(name='NickName', description='The alias of the application monitored by Browser Monitoring.', example='B1'),
      pid?: string(name='Pid', description='The process identifier (PID) of the application.', example='atc889zkcf@d8deedfa9bf****'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****'),
      retcodeAppType?: string(name='RetcodeAppType', description='The type of the application. Valid values:

*   `web`: web application
*   `weex`: Weex mobile app
*   `mini_dd`: DingTalk mini program
*   `mini_alipay`: Alipay mini program
*   `mini_wx`: WeChat mini program
*   `mini_common`: mini program on other platforms', example='web'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='TestKey'),
          value?: string(name='Value', description='The tag value.', example='TestValue'),
        }
      ](name='Tags', description='The tags of the task.'),
    }
  ](name='RetcodeApps', description='The list of applications monitored by Browser Monitoring.'),
}

model ListRetcodeAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRetcodeAppsResponseBody(name='body'),
}

/**
  * ****
  *
 */
async function listRetcodeApps(request: ListRetcodeAppsRequest): ListRetcodeAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRetcodeApps', 'POST', '/', 'json', false, 'json', request);
}

model ListScenarioRequest {
  appId: string(name='AppId', description='The ID of the application.', example='b590lhguqs@28f515462******', position='Query'),
  name: string(name='Name', description='The name of the business monitoring job.', example='pro-content', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-zhangjaikou', position='Query'),
  scenario?: string(name='Scenario', description='The scenario where the business monitoring job is used. Valid values:

*   `USER-DEFINED`: user-defined. This is the default value.
*   `EDAS-ROLLOUT`: application release in Enterprise Distributed Application Service (EDAS)
*   `OAM-ROLLOUT`: application release based on Open Application Model (OAM)
*   `MSC-CANARY`: canary release based on Microservice Engine (MSE)', example='USER-DEFINED', position='Query'),
  sign?: string(name='Sign', description='The code of the business monitoring job. Set this parameter when you know the code of the business monitoring job you want to query.', example='a9f8****', position='Query'),
}

model ListScenarioResponseBody = {
  armsScenarios?: [ 
    {
      appId?: string(name='AppId', description='The ID of the application.', example='b590lhguqs@28f515462******'),
      createTime?: string(name='CreateTime', description='The time when the business monitoring job was created.', example='1585214916000'),
      extensions?: string(name='Extensions', description='The extended information. The value is a JSON string.', example='{"_MODE": "CUSTOM-TRANSACTION","_SCENARIO": "USER-DEFINED"}'),
      id?: long(name='Id', description='The ID of the business monitoring job.', example='132'),
      name?: string(name='Name', description='The name of the business monitoring job.', example='k8s_deployment_css-guns-vip-main-prod_silence'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-zhangjiakou'),
      sign?: string(name='Sign', description='The code of the business monitoring job.', example='a9f8****'),
      updateTime?: string(name='UpdateTime', description='The time when the business monitoring job was updated.', example='1585214916000'),
      userId?: string(name='UserId', description='The ID of the user.', example='113197164949****'),
    }
  ](name='ArmsScenarios', description='The detailed information of the business monitoring job.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='98027D1F-3AEB-492C-A4AA-E9217992****'),
}

model ListScenarioResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListScenarioResponseBody(name='body'),
}

async function listScenario(request: ListScenarioRequest): ListScenarioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListScenario', 'POST', '/', 'json', false, 'json', request);
}

model ListSilencePoliciesRequest {
  isDetail?: boolean(name='IsDetail', description='Specifies whether to query the details of a silence policy. Valid values:

*   `true`: Details of the silence policy are queried.
*   `false`: Details about notification policies are not queried.', example='true', position='Query'),
  name?: string(name='Name', description='The name of the silence policy.', example='silencepolicy_test', position='Query'),
  page: long(name='Page', description='The number of the page to return.', example='1', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  size: long(name='Size', description='The number of entries to return on each page.', example='20', position='Query'),
}

model ListSilencePoliciesResponseBody = {
  pageBean?: {
    page?: long(name='Page', description='The number of the page returned.', example='1'),
    silencePolicies?: [ 
      {
        effectiveTimeType?: string(name='EffectiveTimeType'),
        id?: long(name='Id', description='The ID of the silence policy.', example='123'),
        matchingRules?: [ 
          {
            matchingConditions?: [ 
              {
                key?: string(name='Key', description='The key of the matching condition.', example='altertname'),
                operator?: string(name='Operator', description='The logical operator of the matching condition. Valid values:

*   `eq`: equal to
*   `neq`: not equal to
*   `in`: contains
*   `nin`: does not contain
*   `re`: regular expression match
*   `nre`: regular expression mismatch', example='eq'),
                value?: string(name='Value', description='The value of the matching condition.', example='test'),
              }
            ](name='MatchingConditions', description='The matching conditions.'),
          }
        ](name='MatchingRules', description='The matching rules.'),
        name?: string(name='Name', description='The name of the silence policy.', example='silencepolicy_test'),
        state?: string(name='State', description='Indicates whether the silence policy is enabled. Valid values: enable and disable.', example='enable'),
        timePeriod?: string(name='TimePeriod'),
        timeSlots?: string(name='TimeSlots'),
      }
    ](name='SilencePolicies', description='The queried silence policies.'),
    size?: long(name='Size', description='The number of entries returned per page.', example='20'),
    total?: long(name='Total', description='The number of silence policies that were returned.', example='1'),
  }(name='PageBean', description='The returned pages.'),
  requestId?: string(name='RequestId', description='The request ID.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
}

model ListSilencePoliciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSilencePoliciesResponseBody(name='body'),
}

async function listSilencePolicies(request: ListSilencePoliciesRequest): ListSilencePoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSilencePolicies', 'POST', '/', 'json', false, 'json', request);
}

model ListSyntheticDetailRequest {
  advancedFilters?: [ 
    {
      key?: string(name='Key', description='The filter condition. The taskType and dataId fields are supported.

*   To query the list of synthetic test results, set the key to taskType.
*   To query the result details of a synthetic monitoring task, set the key to dataId.', example='taskType'),
      opType?: string(name='OpType', description='The type of the filter condition. Valid values: eq and in. eq: equal to. in: include.', example='eq'),
      value?: any(name='Value', description='The value of the filter condition. The type of the task. Valid values: 1: ICMP 2: TCP 3: DNS 4: HTTP 5: website speed measurement 6: file download', example='1'),
    }
  ](name='AdvancedFilters', description='An array of filter conditions. This parameter is required.

*   To query the list of synthetic test results, set this parameter in the following format: \\[{"Key":"taskType","OpType":"in","Value":\\[Task type]}].
*   To query the result details of a synthetic monitoring task, set this parameter in the following format: \\[{"Key":"dataId","OpType":"eq","Value":"dataId"}]. dataId is returned when you query the list of synthetic test results.', shrink='json', position='Query'),
  category?: string(name='Category', description='The type of the results. Set the value to SYNTHETIC.', example='SYNTHETIC', position='Query'),
  detail?: string(name='Detail', description='The type of the list that contains the results. This parameter is required. Valid values:

*   ICMP_LIST
*   TCP_LIST
*   DNS_LIST
*   HTTP_LIST
*   WEBSITE_LIST
*   DOWNLOAD_LIST
*   ALL', example='ICMP_LIST', position='Query'),
  endTime?: long(name='EndTime', description='The timestamp of the end time of the query. Unit: milliseconds.', example='1684480557772', position='Query'),
  exactFilters?: [ 
    {
      key?: string(name='Key', description='A reserved field.', example='null'),
      opType?: string(name='OpType', description='A reserved field.', example='null'),
      value?: any(name='Value', description='A reserved field.', example='null'),
    }
  ](name='ExactFilters', description='A reserved field.', shrink='json', position='Query'),
  filters?: map[string]string(name='Filters', description='The filter condition. This parameter is required.

*   To query the result of a synthetic monitoring task, set this parameter in the following format: {"taskId":"${taskId}"}.
*   To query the result details of a synthetic monitoring task, set this parameter in the following format: {"taskId":"${taskId}","dataId":"${dataId}"}.', shrink='json', position='Query'),
  order?: string(name='Order', description='The order in which results are sorted. Valid values:

- `ASC`: ascending order
- `DESC`: descending order', example='DESC', position='Query'),
  orderBy?: string(name='OrderBy', description='The field based on which results are sorted. Set the value to timestamp.', example='timestamp', position='Query'),
  page?: int32(name='Page', description='The page number. Pages start from page 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region. Set the value to cn-hangzhou.', example='cn-hangzhou', position='Query'),
  startTime?: long(name='StartTime', description='The timestamp of the start time of the query. Unit: milliseconds.', example='1684110343127', position='Query'),
  syntheticType?: int32(name='SyntheticType', description='The type of the synthetic test. Valid values: 1 and 2. 1 represents an immediate test, and 2 represents a scheduled test.', example='1', position='Query'),
}

model ListSyntheticDetailResponseBody = {
  code?: long(name='Code', description='The HTTP status code returned. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    items?: [ map[string]any ](name='Items', description='The list of results.'),
    page?: int32(name='Page', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='10'),
    taskCreateTime?: long(name='TaskCreateTime', description='A reserved field.', example='null'),
    total?: int32(name='Total', description='The total number of entries.', example='12'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The error message returned.', example='null'),
  requestId?: string(name='RequestId', description='Id of the request', example='70675725-8F11-4817-8106-CFE0AD71****'),
}

model ListSyntheticDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSyntheticDetailResponseBody(name='body'),
}

async function listSyntheticDetail(request: ListSyntheticDetailRequest): ListSyntheticDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSyntheticDetail', 'GET', '/', 'json', false, 'json', request);
}

model ListTimingSyntheticTasksRequest {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****', position='Query'),
  search?: {
    name?: string(name='Name', description='The task name.', example='AlibabaCloud DNS Task'),
    order?: int32(name='Order', description='The order by which tasks are sorted. 1: ascending order. -1: descending order.', example='1'),
    orderField?: string(name='OrderField', description='The condition by which tasks are sorted. You can sort tasks by gmtCreate, gmtModified, status, or monitorCount.', example='status'),
    page?: int32(name='Page', description='The page number. This parameter is required.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page. This parameter is required.', example='10'),
    status?: string(name='Status', description='The task status. CREATING: The task is being created. RUNNING: The task is running. PARTIAL_RUNNING: The task is partially running. STOP: The task is stopped. LIMIT_STOP: The task is stopped due to quota limit. EXCEPTION: The task is abnormal. DELETE: The task is deleted. DELETE_EXCEPTION: An exception occurs while deleting the task.', example='CREATING'),
    taskIds?: [ string ](name='TaskIds', description='The task IDs.'),
    taskTypes?: [ int32 ](name='TaskTypes', description='The task types.'),
  }(name='Search', description='The search keyword.', shrink='json', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='mark'),
      value?: string(name='Value', description='The tag value.', example='value1111'),
    }
  ](name='Tags', description='The tags.', shrink='json', position='Query'),
}

model ListTimingSyntheticTasksResponseBody = {
  code?: long(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    items?: [ 
      {
        commonSetting?: {
          customHost?: {
            hosts?: [ 
              {
                domain?: string(name='Domain', description='The destination domain name.', example='www.aliyun.com'),
                ipType?: int32(name='IpType', description='The IP version. Valid values:

*   0: A version is automatically selected.
*   1: IPv4.
*   2: IPv6.', example='0'),
                ips?: [ string ](name='Ips', description='The IP address.'),
              }
            ](name='Hosts', description='The custom host settings.'),
            selectType?: int32(name='SelectType', description='The selection mode. Valid values:

*   0: random
*   1: polling', example='0'),
          }(name='CustomHost', description='The custom host settings.'),
          customPrometheusSetting?: {
            prometheusClusterId?: string(name='PrometheusClusterId', description='A reserved field.', example='Reserved field'),
            prometheusClusterRegion?: string(name='PrometheusClusterRegion', description='A reserved field.', example='Reserved field'),
            prometheusLabels?: map[string]string(name='PrometheusLabels', description='A reserved field.'),
          }(name='CustomPrometheusSetting', description='A reserved field.'),
          customVPCSetting?: {
            regionId?: string(name='RegionId', description='The region ID.', example='cn-zhangjiakou'),
            secureGroupId?: string(name='SecureGroupId', description='The ID of the security group to which the client belongs. The security group specifies the inbound and outbound rules of the client for the VPC. You need to allow the security group to which the client belongs to access the security group to which the VPC belongs. Otherwise, the client cannot access resources in the VPC.', example='sg-xxxxxxxxxxxxxx'),
            vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-bp1bcmj81kxxxxxxx'),
            vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-2zehbd4dfzahxxxxxxx'),
          }(name='CustomVPCSetting', description='The information about the virtual private cloud (VPC). If the destination URL is an Alibaba Cloud internal endpoint, you need to configure a VPC.'),
          ipType?: int32(name='IpType', description='The IP version. Valid values:

*   0: A version is automatically selected.
*   1: IPv4.
*   2: IPv6.', example='0'),
          isOpenTrace?: boolean(name='IsOpenTrace', description='Indicates whether tracing is enabled.', example='false'),
          monitorSamples?: int32(name='MonitorSamples', description='Indicates whether monitoring samples are evenly distributed. Valid values:

*   0: No
*   1: Yes', example='0'),
          traceClientType?: int32(name='TraceClientType', description='The type of the client for tracing. Valid values:

*   0: ARMS agent
*   1: OpenTelemetry
*   2: Jaeger', example='1'),
          xtraceRegion?: string(name='XtraceRegion', description='The region to which trace data is reported.', example='cn-hangzhou'),
        }(name='CommonSetting', description='The general settings.'),
        frequency?: string(name='Frequency', description='The detection frequency. Valid values: 1m, 5m, 10m, 15m, 20m, 30m, 1h, 2h, 3h, 4h, 6h, 8h, 12h, and 24h.', example='1m'),
        gmtCreate?: string(name='GmtCreate', description='The time when the task was created.', example='1671454758000'),
        gmtModified?: string(name='GmtModified', description='The time when the task was modified.', example='1673085633000'),
        monitorCategory?: int32(name='MonitorCategory', description='The detection point type. 1: PC. 2: mobile device.', example='1'),
        monitorNum?: string(name='MonitorNum', description='The number of detection points.', example='10'),
        name?: string(name='Name', description='The task name.', example='AlibabaCloud DNS Task'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
        resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aekzgwtq5vxxxxx'),
        status?: string(name='Status', description='The task status. CREATING: The task is being created. RUNNING: The task is running. PARTIAL_RUNNING: The task is partially running. STOP: The task is stopped. LIMIT_STOP: The task is stopped due to quota limit. EXCEPTION: The task is abnormal. DELETE: The task is deleted. DELETE_EXCEPTION: An exception occurs while deleting the task.', example='RUNNING'),
        tags?: [ 
          {
            key?: string(name='Key', description='The tag key.', example='key'),
            value?: string(name='Value', description='The tag value.', example='value'),
          }
        ](name='Tags', description='The tags.'),
        taskId?: string(name='TaskId', description='The ID of the synthetic monitoring task.', example='5308a2691f59422c8c3b7aeccec9cd3b'),
        taskType?: int32(name='TaskType', description='The type of the task. Valid values:

1: ICMP. 2: TCP. 3: DNS. 4: HTTP. 5: website speed. 6: file download.', example='1'),
        url?: string(name='Url', description='The URL for synthetic monitoring.', example='https://www.example.com'),
      }
    ](name='Items', description='The queried tasks.'),
    page?: int32(name='Page', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    total?: int32(name='Total', description='The total number of tasks.', example='100'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='730E90FE-996A-5638-99F3-4F0F9038CC6C'),
}

model ListTimingSyntheticTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTimingSyntheticTasksResponseBody(name='body'),
}

async function listTimingSyntheticTasks(request: ListTimingSyntheticTasksRequest): ListTimingSyntheticTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTimingSyntheticTasks', 'GET', '/', 'json', false, 'json', request);
}

model ListTraceAppsRequest {
  appType?: string(name='AppType', description='The type of the application that is associated with the alert rule. Valid values:

- TRACE: Application Monitoring
- EBPF: Application Monitoring eBPF Edition', example='TRACE', position='Query'),
  region?: string(name='Region', description='The region ID.', example='cn-shenzhen', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxyexli2****', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The tags.', position='Query'),
}

model ListTraceAppsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned for the request. Valid values:

*   `2XX`: The request is successful.
*   `3XX`: A redirection message is returned.
*   `4XX`: The request is invalid.
*   `5XX`: A server error occurs.', example='200'),
  message?: string(name='Message', description='The error message returned if the request parameters are invalid.', example='Internal error. Please try again. Contact the DingTalk service account if the issue persists after multiple retries.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40B10E04-81E8-4643-970D-F1B38F2E****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   `true`: The call was successful.
*   `false`: The call failed.', example='true'),
  traceApps?: [ 
    {
      appId?: long(name='AppId', description='The application ID.', example='123'),
      appName?: string(name='AppName', description='The name of the application.', example='test-app'),
      clusterId?: string(name='ClusterId', description='The cluster ID.', example='cc7a37ee31aea4ed1a059eff8034b****'),
      createTime?: long(name='CreateTime', description='The time when the monitoring task was created. The value is a timestamp. Unit: milliseconds.', example='1529667762000'),
      labels?: [ string ](name='Labels', description='The labels of the application.'),
      language?: string(name='Language', description='The language.', example='PHP'),
      namespace?: string(name='Namespace', description='The namespace.', example='default'),
      pid?: string(name='Pid', description='The process identifier (PID) of the application.', example='a5f9bdeb-2627-4dbe-9247-****'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='Resource group'),
      show?: boolean(name='Show', description='Indicates whether the application is displayed in the Application Real-Time Monitoring Service (ARMS) console. Valid values:

*   `true`: yes
*   `false`: no', example='true'),
      source?: string(name='Source', description='The application source.', example='ACK'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='TestKey'),
          value?: string(name='Value', description='The tag value.', example='TestValue'),
        }
      ](name='Tags', description='The tags.'),
      type?: string(name='Type', description='The type of the monitoring task. Valid values:

*   `TRACE`: Application Monitoring
*   `RETCODE`: Browser Monitoring', example='TRACE'),
      updateTime?: long(name='UpdateTime', description='The time when the monitoring task was updated. The value is a timestamp. Unit: milliseconds.', example='1529667762000'),
      userId?: string(name='UserId', description='The user ID.', example='113197164949****'),
      workloadKind?: string(name='WorkloadKind', description='The type of the workload.', example='Deployment'),
      workloadName?: string(name='WorkloadName', description='The name of the workload.', example='nginx-deployment'),
    }
  ](name='TraceApps', description='The list of Application Monitoring tasks.'),
}

model ListTraceAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTraceAppsResponseBody(name='body'),
}

async function listTraceApps(request: ListTraceAppsRequest): ListTraceAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTraceApps', 'POST', '/', 'json', false, 'json', request);
}

model ManageGetRecordingRuleRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  queryUserId: string(name='QueryUserId', description='The user ID.', example='876345234', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model ManageGetRecordingRuleResponseBody = {
  code?: int32(name='Code', description='状态码。200为成功，其他状态码为异常。', example='200'),
  data?: string(name='Data', description='The returned message.', example='--- groups: - name: "recording_demo"   rules:   - expr: "sum(jvm_memory_max_bytes)"     record: "rate_coredns_demo"'),
  message?: string(name='Message', description='返回信息。', example='success'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model ManageGetRecordingRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ManageGetRecordingRuleResponseBody(name='body'),
}

async function manageGetRecordingRule(request: ManageGetRecordingRuleRequest): ManageGetRecordingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ManageGetRecordingRule', 'POST', '/', 'json', false, 'json', request);
}

model ManageRecordingRuleRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster.', example='cf09705f5a82f454db0d50420b6b4e904', position='Query'),
  queryUserId: string(name='QueryUserId', description='The ID of the user.', example='87348589207', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  ruleYaml: string(name='RuleYaml', description='The recording rule.', example='groups:\\n- interval: 60s\\n  name: auto_analyzer_recording_rule_60s\\n  rules:\\n  - expr: sum(node_cpu_seconds_total)\\n    record: sum:node_cpu_seconds_total:recording_rule_hash_f341458c0f7d\\n', position='Query'),
}

model ManageRecordingRuleResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: string(name='Data', description='The result of the operation.', example='success'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to troubleshoot issues.', example='CD782AEC-A676-529F-8F26-0ED0FF0EF1EA'),
}

model ManageRecordingRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ManageRecordingRuleResponseBody(name='body'),
}

async function manageRecordingRule(request: ManageRecordingRuleRequest): ManageRecordingRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ManageRecordingRule', 'POST', '/', 'json', false, 'json', request);
}

model OpenArmsDefaultSLRRequest {
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model OpenArmsDefaultSLRResponseBody = {
  data?: string(name='Data', description='Indicates whether the call was successful. Valid values:

*   `true`: The call was successful.
*   `false`: The call failed.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='53CACA70-2CF7-490C-BD06-1A2AE4EB****'),
}

model OpenArmsDefaultSLRResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenArmsDefaultSLRResponseBody(name='body'),
}

async function openArmsDefaultSLR(request: OpenArmsDefaultSLRRequest): OpenArmsDefaultSLRResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenArmsDefaultSLR', 'POST', '/', 'json', false, 'json', request);
}

model OpenArmsServiceSecondVersionRequest {
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  type: string(name='Type', description='The type of the service. Valid values:

*   `arms`: ARMS
*   `arms_app`: Application Monitoring
*   `arms_web`: Browser Monitoring
*   `prometheus_monitor`: Managed Service for Prometheus
*   `synthetic_post`: Synthetic Monitoring', example='arms', position='Query'),
}

model OpenArmsServiceSecondVersionResponseBody = {
  orderId?: string(name='OrderId', description='The service ID returned if the service is activated.', example='20896874992****'),
  requestId?: string(name='RequestId', description='The request ID.', example='9ED50893-F3C4-42DF-ABB2-C200BE******'),
}

model OpenArmsServiceSecondVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenArmsServiceSecondVersionResponseBody(name='body'),
}

/**
  * The **OpenArmsServiceSecondVersion** operation supports the following sub-service editions:
  * *   Application Monitoring: Basic Edition
  * *   Browser Monitoring: Basic Edition
  * *   Synthetic Monitoring: Pro Edition (pay-as-you-go)
  * *   Prometheus Service: Pro Edition
  *
 */
async function openArmsServiceSecondVersion(request: OpenArmsServiceSecondVersionRequest): OpenArmsServiceSecondVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenArmsServiceSecondVersion', 'POST', '/', 'json', false, 'json', request);
}

model OpenVClusterRequest {
  clusterType: string(name='ClusterType', description='The type of the cluster. For cloud services, set this parameter to `cloud-product-prometheus`.', example='cloud-product-prometheus', position='Query'),
  length?: int32(name='Length', description='The length of the cluster ID. Default value: 10.', example='10', position='Query'),
  product?: string(name='Product', description='The name of the cloud service. This parameter must be specified when ClusterType is set to `cloud-product-prometheus`. Valid values: influxdb, mongodb, and DLA. You cannot specify multiple service names.', example='influxdb', position='Query'),
  recreateSwitch?: boolean(name='RecreateSwitch', description='Specifies whether to create or query a virtual cluster. This parameter provides backward compatibility.', example='false', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model OpenVClusterResponseBody = {
  data?: string(name='Data', description='The cluster ID.', example='rre59xelcx'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='42E58E4D-ACAD-4400-8FAF-F762340AE5B3'),
}

model OpenVClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenVClusterResponseBody(name='body'),
}

async function openVCluster(request: OpenVClusterRequest): OpenVClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenVCluster', 'POST', '/', 'json', false, 'json', request);
}

model OpenXtraceDefaultSLRRequest {
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model OpenXtraceDefaultSLRResponseBody = {
  data?: string(name='Data', description='Indicates whether the request was successful. Valid values:
 
*   `true`
*   `false`', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='53CACA70-2CF7-490C-BD06-1A2AE4EB****'),
}

model OpenXtraceDefaultSLRResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenXtraceDefaultSLRResponseBody(name='body'),
}

async function openXtraceDefaultSLR(request: OpenXtraceDefaultSLRRequest): OpenXtraceDefaultSLRResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenXtraceDefaultSLR', 'POST', '/', 'json', false, 'json', request);
}

model QueryAppMetadataRequest {
  metaIds: string(name='MetaIds', description='The metadata IDs. Separate multiple IDs with commas (,).

You can obtain the exception ID on the **Exception Analysis** page of your application in the ARMS console.', example='4c9dd447,3c76c565', position='Query'),
  metaType: string(name='MetaType', description='The metadata type. Valid values:

*   sql: obtains an SQL statement based on sqlId.
*   exception: obtains the exception stack based on exceptionId.', example='sql', position='Query'),
  pid: string(name='Pid', description='The process identifier (PID) of the application. You can obtain the PID of an application by calling the **ListTraceApps** operation.', example='ggxw4lnjuz@54364d85b97dc56', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model QueryAppMetadataResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned for the request. Valid values:

*   2XX: The request is successful.
*   3XX: A redirection message is returned.
*   4XX: The request is invalid.
*   5XX: A server error occurs.', example='200'),
  data?: map[string]any(name='Data', description='The returned struct.', example='{\\"408d5533\\": \\"SELECT * FROM user_base_info\\"}'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='51877BAC-330C-5845-BDFD-C7859AD33FB7'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   `true`: The call was successful.
*   `false`: The call failed.', example='True'),
}

model QueryAppMetadataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAppMetadataResponseBody(name='body'),
}

async function queryAppMetadata(request: QueryAppMetadataRequest): QueryAppMetadataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAppMetadata', 'GET', '/', 'json', false, 'json', request);
}

model QueryAppTopologyRequest {
  appType?: string(name='AppType', description='The application type', example='TRACE', position='Query'),
  db?: string(name='Db', description='The database domain name.', example='rm-xxx.mysql.rds.aliyuncs.com:3306', position='Query'),
  dbName?: string(name='DbName', description='The name of the database.', example='orders', position='Query'),
  endTime: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1671952708499', position='Query'),
  filters?: map[string]string(name='Filters', description='The filter conditions.', shrink='json', position='Query'),
  pid?: string(name='Pid', description='The ID of the application.

Log on to the **ARMS console**. In the left-side navigation pane, choose **Browser Monitoring** > **Browser Monitoring**. On the Browser Monitoring page, click the name of an application. The URL in the address bar contains the process ID (PID) of the application. The PID is indicated in the pid=xxx format. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is eb4zdose6v%409781be0f44d\\*\\*\\*\\*, you must replace %40 with an at sign (@) to obtain eb4zdose6v@9781be0f44d\\*\\*\\*\\*.', example='atc889zkcf@d8deedfa9bf****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  rpc?: string(name='Rpc', description='RPC interface name.', example='/eventCenter', position='Query'),
  startTime: long(name='StartTime', description='The start of the time range to query. Unit: milliseconds.', example='1595568910000', position='Query'),
  type: string(name='Type', description='The type kind of topology.', example='apm_apps_v2', position='Query'),
}

model QueryAppTopologyResponseBody = {
  code?: long(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  data?: any(name='Data', description='The returned struct.', example='"Data": {
    "nodes": [
      {
        "data": {
          "duration": 0.2254335260115607,
          "requests": 1211,
          "type": "MYSQL",
          "errors": 0
        },
        "id": "ggxw4lnjuz@c0507xxxx##MYSQL",
        "label": "mysql-pod:3306(cart_db)"
      }
    ],
    "edges": [
      {
        "data": {
          "duration": 0.03333333333333333,
          "requests": 600,
          "type": "UNKNOWN",
          "errors": 0
        },
        "id": "1974097372",
        "source": "ggxw4lnjuz@456xxxxx",
        "target": "ggxw4lnjuz@c0507xxxx"
      }
    ]
  }'),
  message?: string(name='Message', description='The error message.', example='Internal error. Please try again. Contact the DingTalk service account if the issue                              persists after multiple retries.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='true'),
}

model QueryAppTopologyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAppTopologyResponseBody(name='body'),
}

async function queryAppTopology(request: QueryAppTopologyRequest): QueryAppTopologyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAppTopology', 'POST', '/', 'json', false, 'json', request);
}

model QueryCommercialUsageRequest {
  regionId?: string(name='RegionId', position='Host'),
  advancedFilters?: [ 
    {
      key?: string(name='Key', description='The key of the filter condition.', example='regionId'),
      opType?: string(name='OpType', description='The operator. Valid values: eq and in.', example='eq'),
      value?: string(name='Value', description='The value of the filter condition.', example='cn-hangzhou'),
    }
  ](name='AdvancedFilters', description='The filter conditions.', position='Query'),
  dimensions?: [ string ](name='Dimensions', description='The dimensions of the metric that you want to query. Valid values:

*   dataType: data type
*   productType: product type
*   instanceId: instance ID
*   instanceName: instance name
*   instanceType: instance type', position='Query'),
  endTime: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1699286400000', minimum=0, maximum=9223372036854775806, position='Query'),
  intervalInSec?: int32(name='IntervalInSec', description='The time interval between data slices. Unit: seconds. Minimum value: 3600.

Valid values:

*   3600: hours
*   86400: days', example='3600', minimum=0, maximum=2147483647, position='Query'),
  measures?: [ string ](name='Measures', description='The measures of the metric that you want to query.', position='Query'),
  metric: string(name='Metric', description='The name of the metric. Valid value: USAGEFEE.STAT.', example='USAGEFEE.STAT', position='Query'),
  order?: string(name='Order', description='The order in which data is sorted. Valid value:

*   `ASC`: ascending order
*   `DESC`: descending order', example='ASC', position='Query'),
  orderBy?: string(name='OrderBy', description='The dimension by which data is sorted.

Valid value:

*   dataType

    <!-- -->

    <!-- -->

    <!-- -->', example='dataType', position='Query'),
  queryType: string(name='QueryType', description='The data type. Valid values:

*   instantQuery: non-time series
*   timeSeriesQuery: time series', example='instantQuery', position='Query'),
  startTime: long(name='StartTime', description='The start of the time range to query. Unit: milliseconds.', example='1699200000000', minimum=0, maximum=9223372036854775806, position='Query'),
}

model QueryCommercialUsageResponseBody = {
  code?: int32(name='Code', description='The response status. Valid values: 2XX: The request is successful. 3XX: A redirection message is returned. 4XX: The request is invalid. 5XX: A server error occurs.', example='200'),
  data?: {
    complete?: boolean(name='Complete', description='Indicates whether a multi-region query is complete. Valid values:

*   **true**
*   **false**', example='true'),
    items?: [  map[string]any ](name='Items', description='The returned struct.'),
  }(name='Data', description='The returned struct.'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message', description='The error message returned if the request failed.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='99A663CB-8D7B-4B0D-A006-03C8EE38E7BB'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model QueryCommercialUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCommercialUsageResponseBody(name='body'),
}

async function queryCommercialUsage(request: QueryCommercialUsageRequest): QueryCommercialUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCommercialUsage', 'POST', '/', 'json', false, 'json', request);
}

model QueryMetricByPageRequest {
  regionId?: string(name='RegionId', position='Host'),
  currentPage?: int32(name='CurrentPage', description='The page number. Default value: `1`.', example='1', minimum=1, maximum=2147483647, position='Query'),
  customFilters?: [ string ](name='CustomFilters', description='Custom filter conditions.', position='Query'),
  dimensions?: [ string ](name='Dimensions', description='The dimensions of the metric that you want to query.', example='["detector_browser","detector_device"]', position='Query'),
  endTime: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1667546895000', minimum=0, maximum=9223372036854775806, position='Query'),
  filters?: [ 
    {
      key?: string(name='Key', description='The key of the filter condition. You must set the key to `pid` or `regionId`.', example='pid'),
      value?: string(name='Value', description='The value of the filter condition. You must set the value of the `pid` or `regionId` condition. For information about how to obtain the `pid`, see the "Obtain the PID of an application" section.', example='xxx@74xxx'),
    }
  ](name='Filters', description='The filter conditions.', position='Query'),
  intervalInSec?: int32(name='IntervalInSec', description='The time interval at which you want to query metric data. Unit: milliseconds. Minimum value: 60000.', example='100000', minimum=0, maximum=2147483647, position='Query'),
  measures?: [ string ](name='Measures', description='The measures of the metric that you want to query.', example='pv', position='Query'),
  metric: string(name='Metric', description='The metric that you want to query. You cannot specify a custom metric. For more information, see the "Application monitoring metrics that can be queried" section.', example='appstat.host', position='Query'),
  order?: string(name='Order', description='The order in which measures are sorted. Valid values:

*   `ASC`: ascending order
*   `DESC`: descending order

> If you do not specify the parameter, data is not sorted.', example='ASC', position='Query'),
  orderBy?: string(name='OrderBy', description='The dimension from which metrics are sorted. You can set this parameter to a supported dimension.', example='pid', position='Query'),
  pageSize?: int32(name='PageSize', description='This parameter is no longer supported. The number of entries per page.', example='10', minimum=1, maximum=2147483647, position='Query'),
  startTime: long(name='StartTime', description='The start of the time range to query. Unit: milliseconds.', example='1667287695000', minimum=0, maximum=9223372036854775806, position='Query'),
}

model QueryMetricByPageResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned for the request. Valid values:

*   2XX: The request was successful.
*   3XX: A redirection message was returned.
*   4XX: The request was invalid.
*   5XX: A server error occurred.', example='200'),
  data?: {
    completed?: boolean(name='Completed', description='Whether the paging query ends.

true: end.
false: Need to continue pagination (continue to query after CurrentPage+1).', example='false'),
    items?: [  map[string]any ](name='Items', description='The data entries returned.'),
    page?: int32(name='Page', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='1'),
    total?: int32(name='Total', description='The total number of entries returned.', example='2'),
  }(name='Data', description='The information about the array object.'),
  message?: string(name='Message', description='The error message returned if the call fails.', example='StartTime is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The request ID.', example='687F9CB7-4798-57BF-A6EE-E6CC76******'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   `true`: The call was successful.
*   `false`: The call failed.', example='true'),
}

model QueryMetricByPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMetricByPageResponseBody(name='body'),
}

async function queryMetricByPage(request: QueryMetricByPageRequest): QueryMetricByPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMetricByPage', 'POST', '/', 'json', false, 'json', request);
}

model QueryPromInstallStatusRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model QueryPromInstallStatusResponseBody = {
  data?: {
    isControllerInstalled?: boolean(name='isControllerInstalled', description='Indicates whether the call was successful. Valid values:

true: The call was successful. false: The call fails.', example='true'),
  }(name='Data', description='The returned struct.'),
  requestId?: string(name='RequestId', description='The request ID.', example='27E653FA-5958-45BE-8AA9-14D884DC****'),
}

model QueryPromInstallStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPromInstallStatusResponseBody(name='body'),
}

async function queryPromInstallStatus(request: QueryPromInstallStatusRequest): QueryPromInstallStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPromInstallStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryReleaseMetricRequest {
  regionId?: string(name='RegionId', position='Host'),
  changeOrderId: string(name='ChangeOrderId', description='The ID of the change order.', example='a341a2f2-ed07-4257-aae9-dfb1be******', position='Query'),
  createTime?: long(name='CreateTime', description='The time when the change order was created.', example='1634005438000', position='Query'),
  metricType?: string(name='MetricType', description='The type of the metric that you want to query.', example='SystemContrast', position='Query'),
  pid: string(name='Pid', description='The ID of the Enterprise Distributed Application Service (EDAS) or Kubernetes application.', example='8b46d03f-5947-449d-90fd-3a96c2******', position='Query'),
  proxyUserId?: string(name='ProxyUserId', description='This parameter is not in use.', example='null', position='Query'),
  releaseEndTime: long(name='ReleaseEndTime', description='The end time of the version release.', example='1632798718632', position='Query'),
  releaseStartTime: long(name='ReleaseStartTime', description='The start time of the version release.', example='1632798686692', position='Query'),
  service?: string(name='Service', description='The service that you want to query.', example='clothservice', position='Query'),
}

model QueryReleaseMetricResponseBody = {
  data?: string(name='Data', description='The returned metric data.', example='{"data":{"SystemCpuUser":{"all":[{"date":1632798718000,"val":4.3277,"dim":"SystemCpuUser"},{"date":1632798733000,"val":8.1091,"dim":"SystemCpuUser"}]},"SystemMemUtil":{"all":[{"date":1632798718000,"val":73.4227,"dim":"SystemMemUtil"},{"date":1632798733000,"val":93.0977,"dim":"SystemMemUtil"}]}},"success":true}'),
  requestId?: string(name='RequestId', description='The request ID.', example='46355DD8-FC56-40C5-BFC6-269DE4F9****'),
}

model QueryReleaseMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryReleaseMetricResponseBody(name='body'),
}

async function queryReleaseMetric(request: QueryReleaseMetricRequest): QueryReleaseMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryReleaseMetric', 'POST', '/', 'json', false, 'json', request);
}

model RemoveAliClusterIdsFromPrometheusGlobalViewRequest {
  clusterIds: string(name='ClusterIds', description='The IDs of clusters. Separate multiple IDs with commas (,).', example='cd1d55bef19904324a20ed0ebb86caa5c,c5b48729918ab4745a24482ac29d0973a, c00a94896641449098bf24931e4166003, cd174485c09384060ba542bc1be1185a4', position='Query'),
  globalViewClusterId: string(name='GlobalViewClusterId', description='The ID of the global aggregation instance.', example='global-v2-cn-1670100631025794-amaykca4', position='Query'),
  groupName: string(name='GroupName', description='The name of the global aggregation instance.', example='zyGlobalView', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    info?: string(name='Info', description='The Info-level information.', example='{regionId: the region where the global aggregation instance resides. globalViewClusterId: the ID of the global aggregation instance. failedClusterIds: the IDs of the clusters that failed to be added. A cluster may fail to be added if the specified cluster ID is invalid.}'),
    msg?: string(name='Msg', description='The additional information.', example='OK'),
    success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='F7781D4A-2818-41E7-B7BB-79D809E9****'),
}

model RemoveAliClusterIdsFromPrometheusGlobalViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveAliClusterIdsFromPrometheusGlobalViewResponseBody(name='body'),
}

async function removeAliClusterIdsFromPrometheusGlobalView(request: RemoveAliClusterIdsFromPrometheusGlobalViewRequest): RemoveAliClusterIdsFromPrometheusGlobalViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveAliClusterIdsFromPrometheusGlobalView', 'POST', '/', 'json', false, 'json', request);
}

model RemoveSourcesFromPrometheusGlobalViewRequest {
  globalViewClusterId: string(name='GlobalViewClusterId', description='The ID of the global aggregation instance.', example='global-v2-cn-1478326682034601-vss8pd0i', position='Query'),
  groupName: string(name='GroupName', description='The name of the global aggregation instance.', example='zyGlobalView', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  sourceNames: string(name='SourceNames', description='The list of custom data sources. You can specify multiple data sources and separate them with commas (,).', example='localPrometheusClusterName,testCumterPrometheusName', position='Query'),
}

model RemoveSourcesFromPrometheusGlobalViewResponseBody = {
  code?: int32(name='Code', description='Status code. 200 is success, other status codes are exceptions.', example='200'),
  data?: {
    info?: string(name='Info', description='The Info-level information.', example='{regionId: the region where the aggregation instance resides. globalViewClusterId: the ID of the aggregation instance.'),
    msg?: string(name='Msg', description='The additional information.', example='OK'),
    success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='True'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='Returns a hint message for the result.', example='success'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to query logs and troubleshoot issues.', example='9319A57D-2D9E-472A-B69B-CF3CD16D****'),
}

model RemoveSourcesFromPrometheusGlobalViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveSourcesFromPrometheusGlobalViewResponseBody(name='body'),
}

async function removeSourcesFromPrometheusGlobalView(request: RemoveSourcesFromPrometheusGlobalViewRequest): RemoveSourcesFromPrometheusGlobalViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveSourcesFromPrometheusGlobalView', 'POST', '/', 'json', false, 'json', request);
}

model RestartEnvironmentFeatureRequest {
  environmentId: string(name='EnvironmentId', description='The ID of the environment.', example='env-xxx', position='Query'),
  featureName: string(name='FeatureName', description='The feature name. Valid values: app-agent-pilot, metric-agent, ebpf-agent, and service-check.', example='metric-agent', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. Default value: cn-hangzhou.', example='cn-hangzhou', position='Query'),
}

model RestartEnvironmentFeatureResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The returned message.', example='success'),
  message?: string(name='Message', description='The error message returned if the request failed.', example='success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='2983BEF7-4A0D-47A2-94A2-8E9C5E63****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true false', example='true'),
}

model RestartEnvironmentFeatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartEnvironmentFeatureResponseBody(name='body'),
}

async function restartEnvironmentFeature(request: RestartEnvironmentFeatureRequest): RestartEnvironmentFeatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartEnvironmentFeature', 'POST', '/', 'json', false, 'json', request);
}

model SaveTraceAppConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  pid: string(name='Pid', description='The process ID (PID) of the application.

Log on to the ARMS console. In the left-side navigation pane, choose **Application Monitoring** > **Application List**. On the Application List page, click the name of an application. The URL in the address bar contains the PID of the application. The PID is indicated in the pid=xxx format. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is xxx%4074xxx, you must replace %40 with an at sign (@) to obtain xxx@74xxx.', example='a2n80plglh@745eddxxx', position='Query'),
  settings?: [ 
    {
      key?: string(name='Key', description='The key of the settings that you want to modify. For more information about the supported settings, see the following sections.

*   Trace sampling settings
*   Agent switch settings
*   Threshold settings
*   Advanced settings
*   Thread settings
*   Memory snapshot settings
*   URL convergence settings
*   Business log association settings', example='sampling.enable'),
      value?: string(name='Value', description='The value of the settings that you want to modify. For more information about the supported settings, see the following sections.

*   Trace sampling settings
*   Agent switch settings
*   Threshold settings
*   Advanced settings
*   Thread settings
*   Memory snapshot settings
*   URL convergence settings
*   Business log association settings', example='true'),
    }
  ](name='Settings', description='The settings of Application Monitoring.', position='Query'),
}

model SaveTraceAppConfigResponseBody = {
  code?: long(name='Code', description='The HTTP status code. 2XX indicates that the request was successful. 3XX indicates that the request was redirected. 4XX indicates that a request error occurred. 5XX indicates that a server error occurred.', example='200'),
  data?: string(name='Data', description='Indicates whether the call was successful.', example='success'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='78901766-3806-4E96-8E47-CFEF59E4****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model SaveTraceAppConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveTraceAppConfigResponseBody(name='body'),
}

async function saveTraceAppConfig(request: SaveTraceAppConfigRequest): SaveTraceAppConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveTraceAppConfig', 'POST', '/', 'json', false, 'json', request);
}

model SearchAlertContactRequest {
  contactIds?: string(name='ContactIds', description='The ID of the alert contact.', example='[12345]', position='Query'),
  contactName?: string(name='ContactName', description='The name of the alert contact.', example='John Doe', position='Query'),
  currentPage?: string(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  email?: string(name='Email', description='The email address of the alert contact.', example='someone@example.com', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  phone?: string(name='Phone', description='The mobile number of the alert contact.', example='1381111*****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. Set the value to `cn-hangzhou`.', example='cn-hangzhou', position='Query'),
}

model SearchAlertContactResponseBody = {
  pageBean?: {
    contacts?: [ 
      {
        contactId?: long(name='ContactId', description='The ID of the alert contact.', example='123'),
        contactName?: string(name='ContactName', description='The name of the alert contact.', example='John Doe'),
        content?: string(name='Content', description='The contact group to which the contact belongs. If your contacts are added to multiple contact groups, the contact groups are separated by vertical bars (|).', example='Default Group | SRE Group'),
        createTime?: long(name='CreateTime', description='The timestamp generated when the alert contact was created.', example='1572349025000'),
        dingRobot?: string(name='DingRobot', description='The webhook URL of the DingTalk chatbot.', example='https://oapi.dingtalk.com/robot/send?access_token=91f2f6****'),
        email?: string(name='Email', description='The email address of the alert contact.', example='someone@example.com'),
        phone?: string(name='Phone', description='The mobile number of the alert contact.', example='1381111*****'),
        resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****'),
        systemNoc?: boolean(name='SystemNoc', description='Indicates whether the alert contact receives system notifications. Valid values:

*   `true`: The alert contact receives system notifications.
*   `false`: The alert contact does not receive system notifications.', example='false'),
        updateTime?: long(name='UpdateTime', description='The timestamp generated when the alert contact was updated.', example='1580258717000'),
        userId?: string(name='UserId', description='The ID of the user.', example='113197164949****'),
        webhook?: string(name='Webhook', description='The information about the webhook.', example='{\\"body\\":\\"{   \\\\\\"msg_type\\\\\\": \\\\\\"text\\\\\\",   \\\\\\"content\\\\\\": {     \\\\\\"text\\\\\\": \\\\\\"$content\\\\\\"   } }\\",\\"header\\":{\\"Arms-Content-Type\\":\\"json\\"},\\"method\\":\\"post\\",\\"params\\":{},\\"url\\":\\"https://***",\\"userId\\":\\"1131971649***\\"}",'),
      }
    ](name='Contacts', description='The information about the alert contacts.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='23'),
  }(name='PageBean', description='The returned struct.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='21E85B16-75A6-429A-9F65-8AAC9A54****'),
}

model SearchAlertContactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchAlertContactResponseBody(name='body'),
}

/**
  * This operation is no longer maintained. To query alert contacts, call the DescribeContacts operation provided by the new version of Alert Management.
  *
 */
async function searchAlertContact(request: SearchAlertContactRequest): SearchAlertContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchAlertContact', 'POST', '/', 'json', false, 'json', request);
}

model SearchAlertContactGroupRequest {
  contactGroupIds?: string(name='ContactGroupIds', description='The ID of the alert contact group. You can query multiple alert contact groups at a time. Separate multiple group IDs with commas (,).', example='746', position='Query'),
  contactGroupName?: string(name='ContactGroupName', description='The name of the alert contact group.', example='TestGroup', position='Query'),
  contactId?: long(name='ContactId', description='The ID of the alert contact. You can call the SearchAlertContact operation to query the contact IDs. For more information, see [SearchAlertContact](~~130703~~).', example='123', position='Query'),
  contactName?: string(name='ContactName', description='The name of the alert contact.', example='John Doe', position='Query'),
  isDetail?: boolean(name='IsDetail', description='Specifies whether to return all alert contacts in the queried alert contact group. By default, not all alert contacts are returned.', example='true', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. Default value: `cn-hangzhou`.', example='cn-hangzhou', position='Query'),
}

model SearchAlertContactGroupResponseBody = {
  contactGroups?: [ 
    {
      contactGroupId?: long(name='ContactGroupId', description='The ID of the alert contact group.', example='746'),
      contactGroupName?: string(name='ContactGroupName', description='The name of the alert contact group.', example='TestGroup'),
      contacts?: [ 
        {
          contactId?: long(name='ContactId', description='The ID of the alert contact.', example='123'),
          contactName?: string(name='ContactName', description='The name of the alert contact.', example='John Doe'),
          createTime?: long(name='CreateTime', description='The time when the alert contact group list was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1572349025000'),
          dingRobot?: string(name='DingRobot', description='The webhook URL of the DingTalk chatbot.', example='https://oapi.dingtalk.com/robot/send?access_token=91f2f6****'),
          email?: string(name='Email', description='The email address of the alert contact.', example='someone@example.com'),
          phone?: string(name='Phone', description='The mobile number of the alert contact.', example='1381111*****'),
          systemNoc?: boolean(name='SystemNoc', description='Indicates whether the alert contact receives system notifications. Valid values:

*   true: receives system notifications.
*   false: does not receive system notifications.', example='false'),
          updateTime?: long(name='UpdateTime', description='The time when the alert contact group was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1580258717000'),
          userId?: string(name='UserId', description='The ID of the user.', example='113197164949****'),
        }
      ](name='Contacts', description='The alert contact list.'),
      createTime?: long(name='CreateTime', description='The time when the alert contact group list was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1529668855000'),
      updateTime?: long(name='UpdateTime', description='The time when the alert contact group was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1529668855000'),
      userId?: string(name='UserId', description='The ID of the user.', example='113197164949****'),
    }
  ](name='ContactGroups', description='The information about the alert contact groups.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4D6C358A-A58B-4F4B-94CE-F5AAF023****'),
}

model SearchAlertContactGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchAlertContactGroupResponseBody(name='body'),
}

/**
  * The operation is no longer maintained. Call the DescribeContactGroups operation in the alert management module to query alert contact groups.
  *
 */
async function searchAlertContactGroup(request: SearchAlertContactGroupRequest): SearchAlertContactGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchAlertContactGroup', 'POST', '/', 'json', false, 'json', request);
}

model SearchAlertHistoriesRequest {
  alertId?: long(name='AlertId', description='The ID of the alert rule. You can call the SearchAlertRules operation and view the `Id` parameter in the response. For more information, see [SearchAlertRules](~~175825~~).', example='123', position='Query'),
  alertType?: int32(name='AlertType', description='The type of the alert rule. Valid values:

*   `1`: a custom alert rule that is used to monitor drill-down data sets
*   `3`: a custom alert rule that is used to monitor tiled data sets
*   `4`: an alert rule that is used to monitor web pages, including the default alert rule for browser monitoring
*   `5`: an alert rule that is used to monitor applications, including the default alert rule for application monitoring
*   `6`: the default alert rule for browser monitoring
*   `7`: the default alert rule for application monitoring
*   `8`: a Tracing Analysis alert rule
*   `101`: a Prometheus alert rule', example='4', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: `1`.', example='1', position='Query'),
  endTime?: long(name='EndTime', description='The end of the time range to query. The value is a UNIX timestamp of the LONG data type. Unit: milliseconds. The default value is the current time.', example='1579499626000', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: `10`.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. Default value: `cn-hangzhou`.', example='cn-hangzhou', position='Query'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. The value is a UNIX timestamp of the LONG data type. Unit: milliseconds. The default value is 10 minutes before the current time.', example='1595568910000', position='Query'),
}

model SearchAlertHistoriesResponseBody = {
  pageBean?: {
    alarmHistories?: [ 
      {
        alarmContent?: string(name='AlarmContent', description='The content of the alert notification.', example='"Alert name: Alert1\\nAlert time: 2020-07-24 12:14:00\\nAlert content: A total of four alerts are triggered: \\*\\*\\*\\*"'),
        alarmResponseCode?: int32(name='AlarmResponseCode', description='The response code returned after the alert notification was sent.', example='200'),
        alarmSources?: string(name='AlarmSources', description='The webhook URL, such as the webhook URL of a DingTalk chatbot.', example='https://oapi.dingtalk.com/robot/send?access_token=91f2f65002fefe0ab9b71e6590c5ca504348cad742ff01e9c8ab204439ca****'),
        alarmTime?: long(name='AlarmTime', description='The time when the alert notification was sent.', example='1595564179000'),
        alarmType?: int32(name='AlarmType', description='The type of the alert rule. Default value: 4. Valid values:

*   `1`: a custom alert rule that is used to monitor drill-down data sets
*   `3`: a custom alert rule that is used to monitor tiled data sets
*   `4`: an alert rule that is used to monitor web pages, including the default alert rule for browser monitoring
*   `5`: an alert rule that is used to monitor applications, including the default alert rule for application monitoring
*   `6`: the default alert rule for browser monitoring
*   `7`: the default alert rule for application monitoring
*   `8`: a Tracing Analysis alert rule
*   `101`: a Prometheus alert rule', example='4'),
        emails?: string(name='Emails', description='The email address of the alert contact.', example='someone@example.com'),
        id?: long(name='Id', description='The ID of the alert notification.', example='123'),
        phones?: string(name='Phones', description='The mobile phone number of the alert contact.', example='1381111****'),
        strategyId?: string(name='StrategyId', description='The internal fields.', example='""'),
        target?: string(name='Target', description='The internal fields.', example='""'),
        userId?: string(name='UserId', description='The ID of the user.', example='113197164949****'),
      }
    ](name='AlarmHistories', description='The information about alert records.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='2'),
  }(name='PageBean', description='The returned struct.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2FC13182-B9AF-4E6B-BE51-72669B7C****'),
}

model SearchAlertHistoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchAlertHistoriesResponseBody(name='body'),
}

/**
  * This operation is no longer maintained. To query alert records, call the ListAlerts operation provided by the new version of Alert Management.
  *
 */
async function searchAlertHistories(request: SearchAlertHistoriesRequest): SearchAlertHistoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchAlertHistories', 'POST', '/', 'json', false, 'json', request);
}

model SearchAlertRulesRequest {
  alertRuleId?: string(name='AlertRuleId', description='The id of AlertRule.', example='12345', position='Query'),
  appType?: string(name='AppType', description='The type of the application that is associated with the alert rule. Valid values:

*   `TRACE`: application
*   `RETCODE`: browser', example='TRACE', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The page number of the page to return. Default value: `1`.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return per page. Default value: `10`.', example='20', position='Query'),
  pid?: string(name='Pid', description='The process identifier (PID) of the application that is associated with the alert rule. For more information about how to obtain the PID, see [Obtain the PID of an application](https://help.aliyun.com/document_detail/186100.html?spm=a2c4g.11186623.6.792.1b50654cqcDPyk#title-imy-7gj-qhr).', example='atc889zkcf@d8deedfa9bf****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the alert data. For more information about the mappings between **RegionId** and **SystemRegionId**, see the detailed description below the table.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. You can obtain the resource group ID in the **Resource Management** console.', example='rg-acfmxyexli2****', position='Query'),
  systemRegionId?: string(name='SystemRegionId', description='The region ID of the alert rule. For more information about the mappings between **RegionId** and **SystemRegionId**, see the detailed description below the table.', example='cn-hangzhou', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of the tag. The following system preset fields are provided:

*   traceId: the ID of the trace.
*   serverApp: the name of the server application.
*   clientApp: the name of the client application.
*   service: the name of the operation.
*   rpc: the type of the call.
*   msOfSpan: the duration exceeds a specific value.
*   clientIp: the IP address of the client.
*   serverIp: the IP address of the server.
*   isError: specifies whether the call is abnormal.
*   hasTprof: contains only thread profiling.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The list of tags.', position='Query'),
  title?: string(name='Title', description='The alert rule name.', example='AlertRuleTitle', position='Query'),
  type?: string(name='Type', description='The alert rule type. Valid values:

*   `1`: custom alert rules that are used to monitor drill-down data sets
*   `3`: custom alert rules that are used to monitor tiled data sets
*   `4`: alert rules that are used to monitor the browser, including the default frontend alert rules
*   `5`: alert rules that are used to monitor applications, including the default application alert rules
*   `6`: the default browser alert rules
*   `7`: the default application alert rules
*   `8`: Tracing Analysis alert rules
*   `101`: Prometheus alert rules', example='4', position='Query'),
}

model SearchAlertRulesResponseBody = {
  pageBean?: {
    alertRules?: [ 
      {
        alarmContext?: {
          alarmContentSubTitle?: string(name='AlarmContentSubTitle', description='The sub-title of the alert notification content.', example='TestSubTitle'),
          alarmContentTemplate?: string(name='AlarmContentTemplate', description='The template of the alert notification.', example='Alert name: $Alert name\\nFilter condition: $Filter\\nAlert time: $Alert time\\nAlert content: $Alert content\\nNote: The alert persists until a reply email is received. The system will remind you again in 24 hours.'),
          content?: string(name='Content', description='The content of the alert notification.', example='Alert name: $Alert name\\nFilter condition: $Filter\\nAlert time: $Alert time\\nAlert content: $Alert content\\nNote: The alert persists until a reply email is received. The system will remind you again in 24 hours.'),
          subTitle?: string(name='SubTitle', description='The sub-title of the alert notification.', example='test'),
        }(name='AlarmContext', description='The format of the alert notification.'),
        alertLevel?: string(name='AlertLevel', description='The severity of the alerts. Only the value `WARN` is supported.', example='WARN'),
        alertRule?: {
          operator?: string(name='Operator', description='The logical operator between conditions. Valid values: `&`: AND. `|`: OR.', example='|'),
          rules?: [ 
            {
              aggregates?: string(name='Aggregates', description='The aggregation logic of the metric data of the alert rule. Valid values:

*   `AVG`: calculates the average value for each minute
*   `SUM`: calculates the total value for each minute
*   `MAX`: calculates the maximum value for each minute
*   `MIN`: calculates the minimum value for each minute', example='AVG'),
              alias?: string(name='Alias', description='The displayed description of the alert metric.', example='response time_ms'),
              measure?: string(name='Measure', description='The metric based on which alerts are triggered. For more information, see the "[Alert metrics](https://help.aliyun.com/document_detail/175825.html#h2-url-4)" section in this topic.', example='appstat.jvm.SystemDiskFree'),
              nValue?: int32(name='NValue', description='The time range when data is requested. Unit: minutes. For example, a value of 5 indicates that the alert rule applies to the data in the last 5 minutes.', example='5'),
              operator?: string(name='Operator', description='The operation logic of the condition. Valid values:

*   CURRENT_GTE: greater than or equal to
*   CURRENT_LTE: less than or equal to
*   PREVIOUS_UP: the increase percentage compared with the last period
*   PREVIOUS_DOWN: the decrease percentage compared with the last period
*   HOH_UP: the increase percentage compared with the last hour
*   HOH_DOWN: the decrease percentage compared with the last hour
*   DOD_UP: the increase percentage compared with the last day
*   DOD_DOWN: the decrease percentage compared with the last day', example='CURRENT_GTE'),
              value?: float(name='Value', description='The threshold of the condition.', example='30'),
            }
          ](name='Rules', description='The condition of the alert rule.'),
        }(name='AlertRule', description='The conditions of the alert rule. Multiple conditions are separated by the AND or OR logical operators.'),
        alertTitle?: string(name='AlertTitle', description='The name of the alert rule.', example='TestAlertRule'),
        alertType?: int32(name='AlertType', description='The type of the alert rule. Valid values:

*   `1`: custom alert rules that are used to monitor drill-down data sets
*   `3`: custom alert rules that are used to monitor tiled data sets
*   `4`: alert rules that are used to monitor the browser, including the default frontend alert rules
*   `5`: alert rules that are used to monitor applications, including the default application alert rules
*   `6`: the default browser alert rules
*   `7`: the default application alert rules
*   `8`: Tracing Analysis alert rules
*   `101`: Prometheus alert rules', example='4'),
        alertVersion?: int32(name='AlertVersion', description='The version of the alert rule. Default value: `1`.', example='1'),
        alertWays?: [ string ](name='AlertWays', description='Sending method of alarm notification.'),
        config?: string(name='Config', description='The configuration items of the alert rule. The value is a JSON string.

The configuration item **continuous** indicates whether alert notifications are continuously sent. Valid values:

*   `true`: Alert notifications are sent every minute.
*   `false`: The alert silence feature is enabled.

The configuration item **dataRevision** indicates the data revision policy that is used if no data is obtained or the data is null. Default value: 2. Valid values:

*   `0`: overwrites the data by using the value 0
*   `1`: overwrites the data by using the value 1
*   `2`: overwrites the data by using the value null. This value indicates that no alert is triggered if no data exists', example='{\\"continuous\\":true,\\"dataRevision\\":2}'),
        contactGroupIdList?: string(name='ContactGroupIdList', description='The ID of the contact group. Multiple IDs are separated by commas (,).', example='381*,572*'),
        contactGroupIds?: string(name='ContactGroupIds', description='The IDs of the alert contact groups. The value is a JSON array.', example='[123, 234]'),
        createTime?: long(name='CreateTime', description='The timestamp that shows when the alert rule was created.', example='1579508519683'),
        hostByAlertManager?: boolean(name='HostByAlertManager', description='Indicates whether the alert is sent through the alert center. Valid values:

*   `true`
*   `false`', example='true'),
        id?: long(name='Id', description='The ID of the alert rule.', example='123'),
        metricParam?: {
          appGroupId?: string(name='AppGroupId', description='The ID of the application group that is associated with the alert rule. This parameter is applicable to Enterprise Distributed Application Service (EDAS) applications.', example='DEFAULT'),
          appId?: string(name='AppId', description='The auto-increment ID of the ARMS application. You can ignore this ID.', example='123'),
          dimensions?: [ 
            {
              key?: string(name='Key', description='The key of the dimension. Valid values:

*   `rpc`: the name of the API
*   `rpcType`: the type of the API call, such as HTTP or DUBBO
*   `endpoint`: the name of the database
*   `rootIp`: the IP address of the host', example='rootIp'),
              type?: string(name='Type', description='The type of the dimension. Valid values:

*   `STATIC`: checks only the value of this dimension. In this case, you must set the **dimensions.value** parameter.
*   `ALL`: checks the values of all dimensions. The metrics of all API calls are checked. If an API call triggers an alert, the name of the API is displayed in the alert notification. In this case, you do not need to set the **dimensions.value** parameter.
*   `DISABLE`: aggregates the values of all dimensions. In this case, you do not need to set the **dimensions.value** parameter.', example='DISABLE'),
              value?: string(name='Value', description='The value of the dimension.', example='"127.0.0.1"'),
            }
          ](name='Dimensions', description='The dimensions in the condition.'),
          pid?: string(name='Pid', description='The PID of the application that is associated with the alert rule.', example='9870ca99-8105-4da7-a3a4-d72dd1b1****'),
          type?: string(name='Type', description='The type of the metric. Valid values:

*   `txn`: the number of API calls during application monitoring
*   `txn_type`: the types of API calls during application monitoring
*   `db`: database metrics
*   `jvm`: Java virtual machine (JVM) metrics
*   `host`: host metrics
*   `exception`: API call errors', example='DB'),
        }(name='MetricParam', description='The information about the application that is associated with the alert rule.'),
        notice?: {
          endTime?: long(name='EndTime', description='The end of the time range when the alert rule takes effect within 24 hours per day. This value is a UNIX timestamp. The year, month, and day that are indicated by the timestamp are not displayed in this value. Only the hour, minute, and second are displayed.', example='1480607940000'),
          noticeEndTime?: long(name='NoticeEndTime', description='The end of the time range when alert notifications are sent based on the alert rule within 24 hours per day. This value is a UNIX timestamp. The year, month, and day that are indicated by the timestamp are not displayed in this value. Only the hour, minute, and second are displayed.', example='1480607940000'),
          noticeStartTime?: long(name='NoticeStartTime', description='The beginning of the time range when alert notifications are sent based on the alert rule within 24 hours per day. This value is a UNIX timestamp. The year, month, and day that are indicated by the timestamp are not displayed in this value. Only the hour, minute, and second are displayed.', example='1480521600000'),
          startTime?: long(name='StartTime', description='The beginning of the time range when the alert rule takes effect within 24 hours per day. This value is a UNIX timestamp. The year, month, and day that are indicated by the timestamp are not displayed in this value. Only the hour, minute, and second are displayed.', example='1480521600000'),
        }(name='Notice', description='The time ranges when the alert rule takes effect and when alert notifications are sent.'),
        regionId?: string(name='RegionId', description='The ID of the region to which the alert rule belongs.', example='cn-hangzhou'),
        resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****'),
        status?: string(name='Status', description='The status of the alert rule. `RUNNING`: The alert rule is enabled. `STOPPED`: The alert rule is disabled.', example='RUNNING'),
        taskId?: long(name='TaskId', description='The ID of the Application Real-Time Monitoring Service (ARMS) task that is associated with the alert rule.', example='123'),
        taskStatus?: string(name='TaskStatus', description='The status of the task. This parameter is hidden from users.', example='""'),
        title?: string(name='Title', description='The name of the alert.', example='AlertTest'),
        updateTime?: long(name='UpdateTime', description='The timestamp that shows when the alert rule was updated.', example='1480521600000'),
        userId?: string(name='UserId', description='The ID of the user to which the alert rule belongs.', example='113197164949****'),
      }
    ](name='AlertRules', description='The details of the alert rules.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='23'),
  }(name='PageBean', description='The returned struct.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model SearchAlertRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchAlertRulesResponseBody(name='body'),
}

/**
  * The current operation is no longer maintained. You can call the GetAlertRules operation of Alert Management (New) to query existing alert rules.
  *
 */
async function searchAlertRules(request: SearchAlertRulesRequest): SearchAlertRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchAlertRules', 'POST', '/', 'json', false, 'json', request);
}

model SearchEventsRequest {
  alertId?: long(name='AlertId', description='The ID of the alert rule. You can call the SearchAlertRules operation and view the `Id` parameter in the response. For more information, see [SearchAlertRules](~~175825~~).', example='123', position='Query'),
  alertType?: int32(name='AlertType', description='The type of the alert rule. Valid values:

*   `1`: custom alert rules to monitor drill-down data sets
*   `3`: custom alert rules to monitor tiled data sets
*   `4`: alert rules to monitor the frontend, including the default frontend alert rules
*   `5`: alert rules to monitor applications, including the default application alert rules
*   `6`: the default frontend alert rules
*   `7`: the default application alert rules
*   `8`: Tracing Analysis alert rules
*   `101`: Prometheus alert rules', example='4', position='Query'),
  appType?: string(name='AppType', description='The type of the application that is associated with the alert rule. Valid values:

*   `TRACE`: application monitoring
*   `RETCODE`: frontend monitoring', example='TRACE', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: `1`.', example='1', position='Query'),
  endTime?: long(name='EndTime', description='The end of the time range to query. Specify a UNIX timestamp of the LONG data type, in milliseconds. The default value is the current time.', example='1595568970000', position='Query'),
  isTrigger?: int32(name='IsTrigger', description='Specifies whether the alert event is triggered. If you do not set this parameter, all alert events are queried. Valid values:

*   `1`: The event is triggered.
*   `0`: The event is not triggered.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: `10`.', example='10', position='Query'),
  pid?: string(name='Pid', description='The process identifier (PID) of the application that is associated with the alert rule.', example='atc889zkcf@d8deedfa9bf****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. Specify a UNIX timestamp of the LONG data type, in milliseconds. The default value is 10 minutes before the current time.', example='1595565300000', position='Query'),
}

model SearchEventsResponseBody = {
  isTrigger?: int32(name='IsTrigger', description='Specifies whether the alert event is triggered. If you do not set this parameter, all alert events are queried. Valid values:

*   `1`: The event is triggered.
*   `0`: The event is not triggered.', example='0'),
  pageBean?: {
    event?: [ 
      {
        alertId?: long(name='AlertId', description='The ID of the alert rule that is associated with the event.', example='123'),
        alertName?: string(name='AlertName', description='The name of the alert rule that is associated with the event.', example='alertName'),
        alertRule?: string(name='AlertRule', description='The condition of the alert rule.', example='{\\"operator\\":\\"&\\",\\"rules\\":[{\\"aggregates\\":\\"AVG\\",\\"alias\\":\\"JVM_线程总数\\",\\"measure\\":\\"appstat.jvm.ThreadCount\\",\\"nValue\\":1,\\"operator\\":\\"HOH_DOWN\\",\\"value\\":50.0}]}'),
        alertType?: int32(name='AlertType', description='The type of the alert rule. This parameter is not returned. Valid values:

*   `1`: custom alert rules to monitor drill-down data sets
*   `3`: custom alert rules to monitor tiled data sets
*   `4`: alert rules to monitor the frontend, including the default frontend alert rules
*   `5`: alert rules to monitor applications, including the default application alert rules
*   `6`: the default frontend alert rules
*   `7`: the default application alert rules
*   `8`: Tracing Analysis alert rules
*   `101`: Prometheus alert rules', example='4'),
        eventLevel?: string(name='EventLevel', description='The severity of the event.', example='1'),
        eventTime?: long(name='EventTime', description='The timestamp when the event occurred.', example='1595569020000'),
        id?: long(name='Id', description='The ID of the event record.', example='123'),
        links?: [ string ](name='Links', description='The list of event URLs.'),
        message?: string(name='Message', description='The event content. The parameter value is a JSON string. Each key indicates a dimension and each value indicates the alert content in the dimension.', example='unknow紧急报警\\nip：172.27.XX.XX\\n应用名 = test\\nRegion = cn-shenzhen\\n异常信息 = {\\"timestamp\\"：\\"1615447972235\\"}'),
      }
    ](name='Event', description='The information about the alert events.'),
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
  }(name='PageBean', description='The struct returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='32940175-181B-4B93-966E-4BB69176****'),
}

model SearchEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchEventsResponseBody(name='body'),
}

/**
  * Alert event records are different from alert notification records. Alert events are recorded every minute after an alert rule filters data. Alert events can be classified based on whether they are triggered or not. If a triggered event is not in the silence period, an alert notification is sent.
  *
 */
async function searchEvents(request: SearchEventsRequest): SearchEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchEvents', 'POST', '/', 'json', false, 'json', request);
}

model SearchRetcodeAppByPageRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='5', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. You can obtain the resource group ID in the **Resource Management** console.', example='rg-acfmxyexli2****', position='Query'),
  retcodeAppId?: string(name='RetcodeAppId', description='The application ID.

Log on to the **ARMS console**. In the left-side navigation pane, choose **Browser Monitoring** > **Browser Monitoring**. On the Browser Monitoring page, click the name of an application. The URL in the browser address bar contains the pid of this application in the format of `pid=xxx`. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is `xxx%4074xxx`, you must replace **%40** with the at sign (@). The actual PID is `xxx@74xxx`.', example='eb4zdose6v@9781be0f44d****', position='Query'),
  retcodeAppName?: string(name='RetcodeAppName', description='The name of the application.', example='App1', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The tag.', position='Query'),
}

model SearchRetcodeAppByPageResponseBody = {
  pageBean?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='2'),
    retcodeApps?: [ 
      {
        appId?: long(name='AppId', description='The ID of the application. The parameter is an auto-increment parameter.', example='16064'),
        appName?: string(name='AppName', description='The name of the application.', example='a3'),
        createTime?: long(name='CreateTime', description='The time when the task was created.', example='1545363321000'),
        nickName?: string(name='NickName', description='The alias of the application.', example='c1'),
        pid?: string(name='Pid', description='The process identifier (PID) of the application.', example='eb4zdose6v@9781be0f44d****'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
        resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****'),
        retcodeAppType?: string(name='RetcodeAppType', description='The type of the application. Valid values:

*   `web`: web application
*   `weex`: Weex mobile app
*   `mini_dd`: DingTalk mini program
*   `mini_alipay`: Alipay mini program
*   `mini_wx`: WeChat mini program
*   `mini_common`: mini program on other platforms', example='web'),
        tags?: [ 
          {
            key?: string(name='Key', description='The tag key.', example='TestKey'),
            value?: string(name='Value', description='The tag value.', example='TestValue'),
          }
        ](name='Tags', description='The tag.'),
        type?: string(name='Type', description='The type of the monitoring task. Valid values:

*   `TRACE`: Application Monitoring
*   `RETCODE`: Browser Monitoring', example='RETCODE'),
        updateTime?: long(name='UpdateTime', description='The time when the task was updated.', example='1545363321000'),
        userId?: string(name='UserId', description='The user ID.', example='12341234'),
      }
    ](name='RetcodeApps', description='The browser monitoring tasks that are returned.'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='8'),
  }(name='PageBean', description='The returned page information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='626037F5-FDEB-45B0-804C-B3C92797A64E'),
}

model SearchRetcodeAppByPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchRetcodeAppByPageResponseBody(name='body'),
}

async function searchRetcodeAppByPage(request: SearchRetcodeAppByPageRequest): SearchRetcodeAppByPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchRetcodeAppByPage', 'POST', '/', 'json', false, 'json', request);
}

model SearchTraceAppByNameRequest {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The list of tags.', position='Query'),
  traceAppName?: string(name='TraceAppName', description='The name of the application.

> If you do not specify this parameter, all application monitoring tasks in the specified region are queried.', example='test-app', position='Query'),
}

model SearchTraceAppByNameResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F7781D4A-2818-41E7-B7BB-79D809E9****'),
  traceApps?: [ 
    {
      appId?: long(name='AppId', description='The application ID.', example='123'),
      appName?: string(name='AppName', description='The name of the application.', example='test-app'),
      createTime?: long(name='CreateTime', description='The timestamp generated when the task was created.', example='1593486786000'),
      labels?: [ string ](name='Labels', description='The aliases of the application.'),
      pid?: string(name='Pid', description='The process identifier (PID) of the application.', example='a5f9bdeb-2627-4dbe-9247-****'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****'),
      show?: boolean(name='Show', description='Indicates whether the application is displayed in the Application Real-Time Monitoring Service (ARMS) console. Valid values:

*   `true`: yes
*   `false`: no', example='true'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='TestKey'),
          value?: string(name='Value', description='The tag value.', example='TestValue'),
        }
      ](name='Tags', description='A list of tags.'),
      type?: string(name='Type', description='The type of the monitoring task. Valid values:

*   `TRACE`: Application Monitoring
*   `RETCODE`: Browser Monitoring', example='TRACE'),
      updateTime?: long(name='UpdateTime', description='The timestamp generated when the task information was updated.', example='1593486786000'),
      userId?: string(name='UserId', description='The user ID.', example='113197164949****'),
    }
  ](name='TraceApps', description='The information about the monitoring task.'),
}

model SearchTraceAppByNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchTraceAppByNameResponseBody(name='body'),
}

async function searchTraceAppByName(request: SearchTraceAppByNameRequest): SearchTraceAppByNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchTraceAppByName', 'POST', '/', 'json', false, 'json', request);
}

model SearchTraceAppByPageRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: `1`.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: `10`.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxyexli2****', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='A list of tags.', position='Query'),
  traceAppName?: string(name='TraceAppName', description='The name of the application.', example='test-app', position='Query'),
}

model SearchTraceAppByPageResponseBody = {
  pageBean?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='3'),
    traceApps?: [ 
      {
        appId?: long(name='AppId', description='The application ID.', example='123'),
        appName?: string(name='AppName', description='The name of the application.', example='test-app'),
        createTime?: long(name='CreateTime', description='The timestamp generated when the task was created.', example='1531291867000'),
        labels?: [ string ](name='Labels', description='The aliases of the application.'),
        pid?: string(name='Pid', description='The process identifier (PID) of the application.', example='atc889zkcf@d8deedfa9bf****'),
        regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
        resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxyexli2****'),
        show?: boolean(name='Show', description='Indicates whether the application is displayed in the Application Real-Time Monitoring Service (ARMS) console. Valid values:

*   `true`: yes
*   `false`: no', example='true'),
        tags?: [ 
          {
            key?: string(name='Key', description='The tag key.', example='TestKey'),
            value?: string(name='Value', description='The tag value.', example='TestValue'),
          }
        ](name='Tags', description='A list of tags.'),
        type?: string(name='Type', description='The type of the monitoring task. Valid values:

*   `TRACE`: Application Monitoring
*   `RETCODE`: Browser Monitoring', example='TRACE'),
        updateTime?: long(name='UpdateTime', description='The timestamp generated when the task information was updated.', example='1531291867000'),
        userId?: string(name='UserId', description='The user ID.', example='113197164949****'),
      }
    ](name='TraceApps', description='The information about the monitoring task.'),
  }(name='PageBean', description='The information about the array object.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4B446DF2-3DDD-4B5B-8E3F-D5225120****'),
}

model SearchTraceAppByPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchTraceAppByPageResponseBody(name='body'),
}

async function searchTraceAppByPage(request: SearchTraceAppByPageRequest): SearchTraceAppByPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchTraceAppByPage', 'POST', '/', 'json', false, 'json', request);
}

model SearchTracesRequest {
  endTime: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1595210400000', position='Query'),
  exclusionFilters?: [ 
    {
      key?: string(name='Key', description='The key that is used to filter the query results.', example='http.status_code'),
      value?: string(name='Value', description='The value of the key that is used to filter the query results.', example='404'),
    }
  ](name='ExclusionFilters', description='The filter conditions.', position='Query'),
  minDuration?: long(name='MinDuration', description='The minimum amount of time consumed by traces. Unit: milliseconds.', example='2', position='Query'),
  operationName?: string(name='OperationName', description='The name of the traced span.', example='/demo/queryNotExistDB/11', position='Query'),
  pid?: string(name='Pid', description='The application ID.', example='b590lhguqs@9781be0f44dXXXX', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  reverse?: boolean(name='Reverse', description='Specifies whether to sort the query results in chronological order or reverse chronological order. Default value: `false`.

*   `true`: sorts the query results in reverse chronological order.
*   `false`: sorts the query results in chronological order.', example='false', position='Query'),
  serviceIp?: string(name='ServiceIp', description='The IP address of the host where the application resides.', example='172.20.XX.XX', position='Query'),
  serviceName?: string(name='ServiceName', description='The name of the application.', example='arms-k8s-demo-subcomponent', position='Query'),
  startTime: long(name='StartTime', description='The beginning of the time range to query. Unit: milliseconds.', example='1595174400000', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. The following system preset fields are provided:

*   serverApp: the name of the server application.
*   clientApp: the name of the client application.
*   service: the name of the operation.
*   rpc: the type of the call.
*   msOfSpan: the duration exceeds a specific value.
*   clientIp: the IP address of the client.
*   serverIp: the IP address of the server.
*   isError: specifies whether the call is abnormal.
*   hasTprof: contains only thread profiling.', example='http.status_code'),
      value?: string(name='Value', description='The value of the tag.', example='200'),
    }
  ](name='Tag', description='The list of tags.', position='Query'),
}

model SearchTracesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4C518054-852F-4023-ABC1-4AF95FF7****'),
  traceInfos?: [ 
    {
      duration?: long(name='Duration', description='The amount of time consumed by the trace. Unit: milliseconds.', example='6'),
      operationName?: string(name='OperationName', description='The name of the traced span.', example='get***'),
      serviceIp?: string(name='ServiceIp', description='The IP address of the host where the application resides.', example='172.20.**.**'),
      serviceName?: string(name='ServiceName', description='The name of the application.', example='arms-k8s-demo-subcomponent'),
      timestamp?: long(name='Timestamp', description='The timestamp.', example='1595174436993'),
      traceID?: string(name='TraceID', description='The trace ID.', example='ac1400a115951744369937024d****'),
    }
  ](name='TraceInfos', description='The details of the returned traces.'),
}

model SearchTracesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchTracesResponseBody(name='body'),
}

/**
  * > A maximum of 100 data entries can be returned each time this operation is called. If you want to query all existing traces, we recommend that you call the SearchTracesByPage operation. For more information, see [SearchTracesByPage](~~175866~~).
  *
 */
async function searchTraces(request: SearchTracesRequest): SearchTracesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchTraces', 'POST', '/', 'json', false, 'json', request);
}

model SearchTracesByPageRequest {
  endTime: long(name='EndTime', description='The end of the time range to query. Unit: milliseconds.', example='1595210400000', position='Query'),
  exclusionFilters?: [ 
    {
      key?: string(name='Key', description='The key that is used to filter the query results.', example='http.status_code'),
      value?: string(name='Value', description='The value of the key that is used to filter the query results.', example='404'),
    }
  ](name='ExclusionFilters', description='The filter conditions.', position='Query'),
  isError?: boolean(name='IsError', description='Specifies whether to include the traces of abnormal calls.

*   `true`: No
*   `false` (default): Yes', example='false', position='Query'),
  minDuration?: long(name='MinDuration', description='The minimum amount of time consumed by traces. Unit: milliseconds.', example='2', position='Query'),
  operationName?: string(name='OperationName', description='The name of the traced span.', example='/demo/queryNotExistDB/11', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100.', example='5', position='Query'),
  pid?: string(name='Pid', description='The application ID.', example='b590lhguqs@9781be0f44dXXXX', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  reverse?: boolean(name='Reverse', description='Specifies whether to sort the query results in chronological order or reverse chronological order. Default value: `false`.

*   `true`: sorts the query results in reverse chronological order.
*   `false`: sorts the query results in chronological order.', example='false', position='Query'),
  serviceIp?: string(name='ServiceIp', description='The IP address of the host where the application resides.', example='172.20.XX.XX', position='Query'),
  serviceName?: string(name='ServiceName', description='The name of the application.', example='arms-k8s-demo-subcomponent', position='Query'),
  startTime: long(name='StartTime', description='The beginning of the time range to query. Unit: milliseconds.', example='1595174400000', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of the tag. The following system preset fields are provided:

*   traceId: the ID of the trace.
*   serverApp: the name of the server application.
*   clientApp: the name of the client application.
*   service: the name of the interface.
*   rpc: the type of the call.
*   msOfSpan: the duration exceeds a specific value.
*   clientIp: the IP address of the client.
*   serverIp: the IP address of the server.
*   isError: specifies whether the call is abnormal.', example='http.status_code'),
      value?: string(name='Value', description='The value of the tag.', example='200'),
    }
  ](name='Tags', description='The list of tags.', position='Query'),
}

model SearchTracesByPageResponseBody = {
  pageBean?: {
    pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='5'),
    total?: int32(name='Total', description='The total number of returned entries.', example='1601'),
    traceInfos?: [ 
      {
        duration?: long(name='Duration', description='The amount of time consumed by the trace. Unit: milliseconds.', example='679'),
        operationName?: string(name='OperationName', description='The name of the traced span.', example='/demo/queryException/12'),
        serviceIp?: string(name='ServiceIp', description='The IP address of the host where the application resides.', example='172.20.XX.XX'),
        serviceName?: string(name='ServiceName', description='The name of the application.', example='arms-k8s-demo-subcomponent'),
        timestamp?: long(name='Timestamp', description='The timestamp.', example='1595174436994'),
        traceID?: string(name='TraceID', description='The trace ID.', example='ac1400a115951744369947025d****'),
      }
    ](name='TraceInfos', description='The details of the returned traces.'),
  }(name='PageBean', description='The returned struct.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C518054-852F-4023-ABC1-4AF95FF7****'),
}

model SearchTracesByPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchTracesByPageResponseBody(name='body'),
}

async function searchTracesByPage(request: SearchTracesByPageRequest): SearchTracesByPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchTracesByPage', 'POST', '/', 'json', false, 'json', request);
}

model SendTTSVerifyLinkRequest {
  contactId: long(name='ContactId', description='The ID of the alert contact.', example='123', position='Body'),
  phone: string(name='Phone', description='The mobile number of the alert contact.', example='1381111****', position='Body'),
}

model SendTTSVerifyLinkResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the text message was sent.

*   `true`
*   `false`', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='21E85B16-75A6-429A-9F65-8AAC9A54****'),
}

model SendTTSVerifyLinkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendTTSVerifyLinkResponseBody(name='body'),
}

/**
  * After you receive the text message, verify the mobile number as prompted. Before you can specify a mobile phone number in a notification policy, you must verify the mobile phone number.
  *
 */
async function sendTTSVerifyLink(request: SendTTSVerifyLinkRequest): SendTTSVerifyLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendTTSVerifyLink', 'POST', '/', 'json', true, 'form', request);
}

model SetRetcodeShareStatusRequest {
  appName?: string(name='AppName', description='The name of the application that is monitored by Browser Monitoring.', example='test-app', position='Query'),
  pid?: string(name='Pid', description='The process identifier (PID) of the application. 

Log on to the **ARMS console**. In the left-side navigation pane, choose **Browser Monitoring** > **Browser Monitoring**. On the Browser Monitoring page, click the name of an application. The URL in the address bar contains the process ID (PID) of the application. The PID is indicated in the `pid=xxx` format. The PID is usually percent encoded as `xxx%40xxx`. You must modify this value to remove the percent encoding. For example, if the PID in the URL is `eb4zdose6v%409781be0f44d****`, you must replace `%40` with @ to obtain `eb4zdose6v@9781be0f44d****`.', example='atc889zkcf@d8deedfa9bf****', position='Query'),
  status: boolean(name='Status', description='Specifies whether to turn on or turn off the logon-free sharing switch. Valid values:

*   `true`: Turn on the switch.
*   `false`: Turn off the switch.', example='true', position='Query'),
}

model SetRetcodeShareStatusResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the call is successful. Valid values:

*   `true`: The call is successful.
*   `false`: The call fails.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='40B10E04-81E8-4643-970D-F1B38F2E****'),
}

model SetRetcodeShareStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetRetcodeShareStatusResponseBody(name='body'),
}

async function setRetcodeShareStatus(request: SetRetcodeShareStatusRequest): SetRetcodeShareStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetRetcodeShareStatus', 'POST', '/', 'json', false, 'json', request);
}

model StartAlertRequest {
  alertId: string(name='AlertId', description='The ID of the alert rule. You can call the SearchAlertRules operation and view the `Id` parameter in the response. For more information, see [SearchAlertRules](~~175825~~).', example='1610***', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. Set the value to `cn-hangzhou`.', example='cn-hangzhou', position='Query'),
}

model StartAlertResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the call was successful.

*   `true`: The call was successful.
*   `false`: The call failed.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='27E653FA-5958-45BE-8AA9-14D884DC****'),
}

model StartAlertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartAlertResponseBody(name='body'),
}

async function startAlert(request: StartAlertRequest): StartAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartAlert', 'POST', '/', 'json', false, 'json', request);
}

model StartTimingSyntheticTaskRequest {
  regionId?: string(name='RegionId', description='The region ID. Default value: cn-hangzhou.', example='cn-hangzhou', position='Query'),
  taskIds?: [ string ](name='TaskIds', description='The task IDs.', shrink='json', position='Query'),
}

model StartTimingSyntheticTaskResponseBody = {
  code?: long(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='2A0CEDF1-06FE-44AC-8E21-21A5BE65****'),
}

model StartTimingSyntheticTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartTimingSyntheticTaskResponseBody(name='body'),
}

async function startTimingSyntheticTask(request: StartTimingSyntheticTaskRequest): StartTimingSyntheticTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartTimingSyntheticTask', 'POST', '/', 'json', false, 'json', request);
}

model StopAlertRequest {
  alertId: string(name='AlertId', description='The ID of the alert rule.', example='1610***', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model StopAlertResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the request is successful. Valid values:

*   `true`: The request is successful.
*   `false`: The request fails.', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='27E653FA-5958-45BE-8AA9-14D884DC****'),
}

model StopAlertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopAlertResponseBody(name='body'),
}

async function stopAlert(request: StopAlertRequest): StopAlertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopAlert', 'POST', '/', 'json', false, 'json', request);
}

model StopTimingSyntheticTaskRequest {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  taskIds: [ string ](name='TaskIds', description='The task IDs.', shrink='json', position='Query'),
}

model StopTimingSyntheticTaskResponseBody = {
  code?: long(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
}

model StopTimingSyntheticTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopTimingSyntheticTaskResponseBody(name='body'),
}

async function stopTimingSyntheticTask(request: StopTimingSyntheticTaskRequest): StopTimingSyntheticTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopTimingSyntheticTask', 'POST', '/', 'json', false, 'json', request);
}

model SwitchSyntheticTaskStatusRequest {
  switchStatus?: long(name='SwitchStatus', description='Specifies whether to start or stop the task. Valid values:

*   **0**: stops the task
*   **1**: starts the task', example='0', position='Query'),
  taskIds?: [ long ](name='TaskIds', description='The task IDs. You can specify up to 30 task IDs at a time.', position='Query'),
}

model SwitchSyntheticTaskStatusResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
  result?: string(name='Result', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model SwitchSyntheticTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchSyntheticTaskStatusResponseBody(name='body'),
}

async function switchSyntheticTaskStatus(request: SwitchSyntheticTaskStatusRequest): SwitchSyntheticTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchSyntheticTaskStatus', 'POST', '/', 'json', false, 'json', request);
}

model SyncRecordingRulesRequest {
  clusterId: string(name='ClusterId', description='The ID of the cluster whose aggregation rule you want to synchronize.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. The destination region can be the same as the source region.', example='cn-hangzhou', position='Query'),
  targetClusters: string(name='TargetClusters', description='The IDs of clusters to which you want to synchronize the aggregation rule.', example='{     "cn":[         "c06ca68cd16f14f52bb07772eda***",         "c33dd70a0ac184c1b879d807ab2***",         "c384cf7e4dcb543e6ac8c7d4dd3***"     ],     "us":[         "ce30f833bc4a04a56a06b070319***"     ],     "jp":[      ],     "ap":[      ],     "gov":[      ],     "finance":[      ] }', position='Query'),
}

model SyncRecordingRulesResponseBody = {
  code?: int32(name='Code', description='状态码。200表示成功。', example='200'),
  data?: string(name='Data', description='The struct returned.', example='{ "data":\\[ "c06ca68cd16f14f52bb07772eda\\*\\*\\*", "c33dd70a0ac184c1b879d807ab2\\*\\*\\*", "c384cf7e4dcb543e6ac8c7d4dd3\\*\\*\\*", "ce30f833bc4a04a56a06b070319\\*\\*\\*" ], "message":"IDs of Clusters to which the aggregation rule failed to be synchronized", "success":true }'),
  message?: string(name='Message', description='返回结果的提示信息。', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='1A9C645C-C83F-4C9D-8CCB-29BEC9E1****'),
}

model SyncRecordingRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncRecordingRulesResponseBody(name='body'),
}

async function syncRecordingRules(request: SyncRecordingRulesRequest): SyncRecordingRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncRecordingRules', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId?: string(name='RegionId', position='Host'),
  resourceId: [ string ](name='ResourceId', description='The resource IDs. You can specify a maximum of 50 resource IDs.', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the ARMS resources for which you want to modify tags. Valid values:

*   WEB: Browser Monitoring
*   APPLICATION: Application Monitoring
*   PROMETHEUS: Managed Service for Prometheus
*   SYNTHETICTASK: Synthetic Monitoring
*   ALERTRULE: Application Monitoring alert rule
*   PROMETHEUSALERTRULE: Managed Service for Prometheus alert rule
*   XTRACEAPP: Managed Service for OpenTelemetry', example='PROMETHEUS', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='Key1'),
      value?: string(name='Value', description='The value of the tag.', example='Test1'),
    }
  ](name='Tag', description='The tags to add to the resource. You can specify a maximum of 20 tags.', position='Query'),
}

model TagResourcesResponseBody = {
  data?: string(name='Data', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='05919CF2-B8A1-588D-B3DB-89B3********'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UninstallManagedPrometheusRequest {
  clusterId?: string(name='ClusterId', description='The ID of the Container Service for Kubernetes (ACK) cluster. This parameter is required when the ClusterType parameter is set to ask or one.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  clusterType: string(name='ClusterType', description='The cluster type. Valid values: ask, ecs, and one.', example='ask', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Prometheus instance belongs.', example='rg-acfmxyexli2****', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) where the cluster resides.', example='vpc-rpn**********', position='Query'),
}

model UninstallManagedPrometheusResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful. If another status code is returned, the request failed.', example='200'),
  data?: string(name='Data', description='The response content. The status of the Prometheus instance is returned.', example='success'),
  message?: string(name='Message', description='The error message that is returned if the request fails.', example='vpcId is blank'),
  requestId?: string(name='RequestId', description='The request ID.', example='2A0CEDF1-06FE-44AC-8E21-21A5BE65****'),
  success?: boolean(name='Success', description='Indicates whether the Prometheus instance was removed.', example='true'),
}

model UninstallManagedPrometheusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UninstallManagedPrometheusResponseBody(name='body'),
}

/**
  * @deprecated
  * This operation is available only for ASK, ECS, and ACK One clusters. Before you call this operation, make sure that a managed Prometheus agent is installed for your cluster.
  *
 */
// Deprecated
async function uninstallManagedPrometheus(request: UninstallManagedPrometheusRequest): UninstallManagedPrometheusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UninstallManagedPrometheus', 'POST', '/', 'json', false, 'json', request);
}

model UninstallPromClusterRequest {
  aliyunLang?: string(name='AliyunLang', description='Language environment(If left blank, defaults to zh):
- zh
- en', example='en', position='Query'),
  clusterId: string(name='ClusterId', description='The cluster ID.', example='c0bad479465464e1d8c1e641b0afb****', position='Query'),
  regionId: string(name='RegionId', description='The region ID. Default value: cn-hangzhou.', example='cn-hangzhou', position='Query'),
}

model UninstallPromClusterResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='Indicates whether the request was successful.', example='true'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to find logs and troubleshoot issues.', example='53980F48-DE82-53A1-9ADE-D2629226DD9A'),
}

model UninstallPromClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UninstallPromClusterResponseBody(name='body'),
}

async function uninstallPromCluster(request: UninstallPromClusterRequest): UninstallPromClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UninstallPromCluster', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  regionId?: string(name='RegionId', position='Host'),
  all?: boolean(name='All', description='Specifies whether to delete all tags. This parameter takes effect only when the TagKey.N parameter is not specified. Valid values:

*   true
*   false

Default value: false.', example='False', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The resource IDs. You can specify a maximum of 50 resource IDs.', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the ARMS resources for which you want to modify tags. Valid values:

*   WEB: Browser Monitoring
*   APPLICATION: Application Monitoring
*   PROMETHEUS: Managed Service for Prometheus
*   SYNTHETICTASK: Synthetic Monitoring
*   ALERTRULE: Application Monitoring alert rule
*   PROMETHEUSALERTRULE: Managed Service for Prometheus alert rule
*   XTRACEAPP: Managed Service for OpenTelemetry', example='PROMETHEUS', position='Query'),
  tagKey?: [ string ](name='TagKey', description='The tag keys. You can specify a maximum of 20 tag keys.', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='TestKey'),
      value?: string(name='Value', description='The value of the tag.', example='TestValue'),
    }
  ](name='Tags', description='The list of tags.', position='Query'),
}

model UntagResourcesResponseBody = {
  data?: string(name='Data', description='The returned struct.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='FC183B5E-C9AD-5E9E-937F-*******'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAlertContactRequest {
  contactId: long(name='ContactId', description='The ID of the alert contact to be updated. You can call the SearchAlertContact operation to query the contact ID. For more information, see [SearchAlertContact](~~130703~~).', example='123', position='Query'),
  contactName?: string(name='ContactName', description='The new name of the alert contact.', example='John Doe', position='Query'),
  dingRobotWebhookUrl?: string(name='DingRobotWebhookUrl', description='The new webhook URL of the DingTalk chatbot. For more information, see [Configure a DingTalk chatbot to send alert notifications](~~106247~~). You must specify at least one of the following parameters: PhoneNum, Email, and DingRobotWebhookUrl.

>  If you do not specify this parameter, the original parameter value is deleted. If you specify this parameter, the original parameter value is updated.', example='https://oapi.dingtalk.com/robot/send?access_token=91f2f6****', position='Query'),
  email?: string(name='Email', description='The new email address of the alert contact. You must specify at least one of the following parameters: PhoneNum, Email, and DingRobotWebhookUrl.

>  If you do not specify this parameter, the original parameter value is deleted. If you specify this parameter, the original parameter value is updated.', example='someone@example.com', position='Query'),
  phoneNum?: string(name='PhoneNum', description='The new mobile phone number of the alert contact. You must specify at least one of the following parameters: PhoneNum, Email, and DingRobotWebhookUrl.

>  If you do not specify this parameter, the original parameter value is deleted. If you specify this parameter, the original parameter value is updated.', example='1381111****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region. Set the value to `cn-hangzhou`.', example='cn-hangzhou', position='Query'),
  systemNoc?: boolean(name='SystemNoc', description='Specifies whether the alert contact receives system notifications. Valid values:

*   `true`: The alert contact receives system notifications.
*   `false`: The alert contact does not receive system notifications.', example='true', position='Query'),
}

model UpdateAlertContactResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the alert contact was updated. Valid values:

*   true: The alert contact was updated.
*   false: The alert contact failed to be updated.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1A474FF8-7861-4D00-81B5-5BC3DA4E****'),
}

model UpdateAlertContactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAlertContactResponseBody(name='body'),
}

/**
  * This operation is no longer maintained. To create or modify an alert contact, call the CreateOrUpdateContact operation provided by the new version of Alert Management.
  *
 */
async function updateAlertContact(request: UpdateAlertContactRequest): UpdateAlertContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAlertContact', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAlertContactGroupRequest {
  contactGroupId: long(name='ContactGroupId', description='The ID of the alert contact group.', example='123', position='Query'),
  contactGroupName: string(name='ContactGroupName', description='The name of the alert contact group.', example='TestGroup', position='Query'),
  contactIds?: string(name='ContactIds', description='The ID of the alert contact.', example='123 234 345', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model UpdateAlertContactGroupResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='Indicates whether the call was successful.

*   `true`: The call was successful.
*   `false`: The call failed.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9319A57D-2D9E-472A-B69B-CF3CD16D****'),
}

model UpdateAlertContactGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAlertContactGroupResponseBody(name='body'),
}

async function updateAlertContactGroup(request: UpdateAlertContactGroupRequest): UpdateAlertContactGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAlertContactGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAlertRuleRequest {
  alertId: long(name='AlertId', description='The ID of the alert rule.', example='1234567', position='Query'),
  contactGroupIds?: string(name='ContactGroupIds', description='The IDs of the alert contact groups. The value must be a JSON array.', example='[123, 234]', position='Query'),
  isAutoStart?: boolean(name='IsAutoStart', description='Specifies whether to enable the alert rule after it is created. Default value: `false`.

*   `true`: enables the alert rule.
*   `false`: disables the alert rule.', example='true', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  templageAlertConfig: string(name='TemplageAlertConfig', description='The configurations of the alert template based on which you want to create an alert rule. The value must be a JSON string. You must set at least one of the **TemplateAlertId** and **TemplageAlertConfig** parameters. If you set both parameters, the **TemplateAlertId** parameter prevails. For more information about the TemplageAlertConfig parameter, see the following **additional information about the TemplageAlertConfig parameter**.', example='[ { "contactGroupIds": "381", "alertType": 5, "alarmContext": { "subTitle": "", "content": "Alarm name: $alarm name\\nFilter condition: $filter\\nAlarm time : $Alarm time\\nAlarm content: $Alarm content\\nNote: Before the recovery email is received, the alarm is in continuous alarm, and you will be reminded again after 24 hours!" }, "alertLevel": "WARN", " metricParam": { "appId": "70901", "pid": "atc889zkcf@d8deedfa9bf****", "type": "TXN", "dimensions": [ { "type": "STATIC", "value ": "\\\\/hello_test_api_address\\\\/test1", "key": "rpc" } ] }, "alertWay": [ "SMS", "MAIL", "DING_ROBOT" ], "alertRule": { "rules" : [ { "measure": "appstat.txn.rt", "alias": "Entry call response time_ms", "aggregates": "AVG", "nValue": 1, "value": 1, "operator ": "CURRENT_GTE" } ], "operator": "|" }, "title": "Alarm template alarm name", "config": "{\\"continuous\\":false,\\"dataRevision\\":2, \\"ownerId\\":\\"123412341234\\"}", "notice": { "noticeStartTime": 1480521600000, "startTime": 1480521600000, "endTime": 1480607940000, "noticeEndTime": 1480607940000 }, "stat us": "NON " } ]', position='Query'),
}

model UpdateAlertRuleResponseBody = {
  alertId?: long(name='AlertId', description='The ID of the alert rule.', example='1234567'),
  data?: string(name='Data', description='The struct returned.', example='-'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6A9AEA84-7186-4D8D-B498-4585C6A2****'),
}

model UpdateAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAlertRuleResponseBody(name='body'),
}

async function updateAlertRule(request: UpdateAlertRuleRequest): UpdateAlertRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAlertRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDispatchRuleRequest {
  dispatchRule: string(name='DispatchRule', description='The dispatch rule configuration. The value is a JSON string. For more information about this parameter, see the following **additional information about the DispatchRule parameter**.', example='{   "id": 123,     "system": false,   "ruleid": 10282,   "name": "Prometheus Alert",   "labelMatchExpressionGrid": {     "labelMatchExpressionGroups": [       {         "labelMatchExpressions": [           {             "key": "_aliyun_arms_involvedObject_kind",             "value": "app",             "operator": "eq"           }         ]       }     ]   },   "dispatchType": "CREATE_ALERT/DISCARD_ALERT",   "isRecover": true,   "groupRules": [     {       "groupId": 1,       "groupingFields": [         "alertname"       ],       "groupWait": 10,       "groupInterval": 15,       "repeatInterval": 20     }   ],   "notifyRules": [     {       "notifyObjects": [         {           "notifyType": "ARMS_CONTACT",           "name": "JohnDoe",           "notifyObjectId": 1         },         {           "notifyType": "ARMS_CONTACT_GROUP",           "name": "JohnDoe_group",           "notifyObjectId": 2         }       ],       "notifyChannels":["dingTalk","wechat","webhook","email"]     },   ], }', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model UpdateDispatchRuleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

*   `true`: The request was successful.
*   `false`: The request failed.', example='true'),
}

model UpdateDispatchRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDispatchRuleResponseBody(name='body'),
}

async function updateDispatchRule(request: UpdateDispatchRuleRequest): UpdateDispatchRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDispatchRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateEnvCustomJobRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values: zh and en. Default value: zh.', example='zh', position='Query'),
  configYaml?: string(name='ConfigYaml', description='The YAML configuration string.', example='Refer to supplementary instructions.', position='Body'),
  customJobName: string(name='CustomJobName', description='The name of the custom job.', example='customJob1', position='Query'),
  environmentId: string(name='EnvironmentId', description='The environment ID.', example='env-xxxxx', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  status?: string(name='Status', description='The status of the custom job. Valid values: run and stop.', example='run', position='Query'),
}

model UpdateEnvCustomJobResponseBody = {
  code?: int32(name='Code', description='The status code or error code.', example='200'),
  data?: string(name='Data', description='The result of the operation.', example='success'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model UpdateEnvCustomJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEnvCustomJobResponseBody(name='body'),
}

async function updateEnvCustomJob(request: UpdateEnvCustomJobRequest): UpdateEnvCustomJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEnvCustomJob', 'POST', '/', 'json', true, 'form', request);
}

model UpdateEnvPodMonitorRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values:

*   zh (default value): Chinese
*   en: English', example='zh', position='Query'),
  configYaml: string(name='ConfigYaml', description='The YAML configuration file of the ServiceMonitor.', example='Refer to supplementary instructions.', position='Body'),
  dryRun?: boolean(name='DryRun', description='Checks whether the format is valid and whether targets are matched.', example='true', position='Query'),
  environmentId: string(name='EnvironmentId', description='The environment ID.', example='env-xxxxx', position='Query'),
  namespace: string(name='Namespace', description='The namespace where the PodMonitor resides.', example='arms-prom', position='Query'),
  podMonitorName: string(name='PodMonitorName', description='The name of the PodMonitor.', example='arms-admin-pm1', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model UpdateEnvPodMonitorResponseBody = {
  code?: int32(name='Code', description='The response code.

>  The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    matchedMsg?: string(name='MatchedMsg', description='Indicates whether targets are matched.', example='Match successful.'),
    matchedTargetCount?: string(name='MatchedTargetCount', description='The number of matched targets.', example='1'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='C21AB7CF-B7AF-410F-BD61-82D1567F****'),
}

model UpdateEnvPodMonitorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEnvPodMonitorResponseBody(name='body'),
}

async function updateEnvPodMonitor(request: UpdateEnvPodMonitorRequest): UpdateEnvPodMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEnvPodMonitor', 'POST', '/', 'json', true, 'form', request);
}

model UpdateEnvServiceMonitorRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values: zh and en. Default value: zh.', example='zh', position='Query'),
  configYaml: string(name='ConfigYaml', description='The YAML configuration string.', example='Refer to supplementary instructions.', position='Body'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request.', example='true', position='Query'),
  environmentId: string(name='EnvironmentId', description='The environment ID.', example='env-xxxxx', position='Query'),
  namespace: string(name='Namespace', description='The namespace where the ServiceMonitor is located.', example='arms-prom', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  serviceMonitorName: string(name='ServiceMonitorName', description='The name of the ServiceMonitor.', example='serviceMonitor1', position='Query'),
}

model UpdateEnvServiceMonitorResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    matchedMsg?: string(name='MatchedMsg', description='Indicates whether targets are matched.', example='Match successful.'),
    matchedTargetCount?: string(name='MatchedTargetCount', description='The number of matched targets.', example='1'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='1A474FF8-7861-4D00-81B5-5BC3DA4E****'),
}

model UpdateEnvServiceMonitorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEnvServiceMonitorResponseBody(name='body'),
}

async function updateEnvServiceMonitor(request: UpdateEnvServiceMonitorRequest): UpdateEnvServiceMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEnvServiceMonitor', 'POST', '/', 'json', true, 'form', request);
}

model UpdateEnvironmentRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values: zh and en. Default value: zh.', example='zh', position='Query'),
  environmentId: string(name='EnvironmentId', description='The environment ID.', example='env-xxxxx', position='Query'),
  environmentName?: string(name='EnvironmentName', description='The name of the environment instance.', example='env1', position='Query'),
  feePackage?: string(name='FeePackage', description='The payable resource plan. Valid values:

*   If the EnvironmentType parameter is set to CS, set the value to CS_Basic or CS_Pro. Default value: CS_Basic.
*   Otherwise, leave the parameter empty.', example='CS_Basic', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model UpdateEnvironmentResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The result of the operation.', example='success'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='70675725-8F11-4817-8106-CFE0AD71****'),
}

model UpdateEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEnvironmentResponseBody(name='body'),
}

async function updateEnvironment(request: UpdateEnvironmentRequest): UpdateEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEnvironment', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGrafanaWorkspaceRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values: zh and en. Default value: zh.', example='zh', position='Query'),
  description?: string(name='Description', description='The description of the workspace.', position='Query'),
  grafanaWorkspaceId: string(name='GrafanaWorkspaceId', description='The ID of the workspace.', example='grafana-cn-4xl3g******', position='Query'),
  grafanaWorkspaceName?: string(name='GrafanaWorkspaceName', description='The workspace name.', example='testGrafana', position='Query'),
  regionId: string(name='RegionId', description='The region ID. Default value: `cn-hangzhou`.', example='cn-hangzhou', position='Query'),
}

model UpdateGrafanaWorkspaceResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned for the request. Valid values:

*   `2XX`: The request is successful.
*   `3XX`: A redirection message is returned.
*   `4XX`: The request is invalid.
*   `5XX`: A server error occurs.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the update is successful. Valid values:

*   `true`
*   `false`', example='true'),
  message?: string(name='Message', description='The error message returned for the request.', example='message'),
  requestId?: string(name='RequestId', description='Id of the request', example='16AF921B-8187-489F-9913-43C808B4****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

*   `true`
*   `false`', example='true'),
  traceId?: string(name='TraceId', description='The ID of the trace. The ID is used to query the details of a request.', example='eac0a8048716731735000007137d000b'),
}

model UpdateGrafanaWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGrafanaWorkspaceResponseBody(name='body'),
}

async function updateGrafanaWorkspace(request: UpdateGrafanaWorkspaceRequest): UpdateGrafanaWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGrafanaWorkspace', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGrafanaWorkspaceVersionRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values: zh and en. Default value: zh.', example='zh', position='Query'),
  grafanaVersion: string(name='GrafanaVersion', description='The Grafana version.', example='10.0.x', position='Query'),
  grafanaWorkspaceId: string(name='GrafanaWorkspaceId', description='The ID of the workspace.', example='grafana-cn-4xl3g******', position='Query'),
  regionId: string(name='RegionId', description='The region ID. Default value: cn-hangzhou.', example='cn-hangzhou', position='Query'),
}

model UpdateGrafanaWorkspaceVersionResponseBody = {
  code?: int32(name='Code', description='The HTTP status code returned for the request. Valid values:

*   `2XX`: The request is successful.
*   `3XX`: A redirection message is returned.
*   `4XX`: The request is invalid.
*   `5XX`: A server error occurs.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the update is successful. Valid values:

*   `true`
*   `false`', example='true'),
  message?: string(name='Message', description='The error message returned for the request.', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='2A0CEDF1-06FE-44AC-8E21-21A5BE65****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
  traceId?: string(name='TraceId', description='The ID of the trace. The ID is used to query the details of a request.', example='eac0a8048716731735000007137d000b'),
}

model UpdateGrafanaWorkspaceVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGrafanaWorkspaceVersionResponseBody(name='body'),
}

/**
  * Note: The list returned by this operation includes the workspaces of Developer Edition, Expert Edition, and Advanced Edition. The list does not include the workspaces of Shared Edition.
  *
 */
async function updateGrafanaWorkspaceVersion(request: UpdateGrafanaWorkspaceVersionRequest): UpdateGrafanaWorkspaceVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGrafanaWorkspaceVersion', 'POST', '/', 'json', false, 'json', request);
}

model UpdateIntegrationRequest {
  autoRecover?: boolean(name='AutoRecover', description='Specifies whether to automatically clear alert events. Valid values:

*   true (default)
*   false', example='true', position='Body'),
  description?: string(name='Description', description='The description of the alert integration.', example='Test', position='Body'),
  duplicateKey?: string(name='DuplicateKey', description='The fields whose values are deduplicated.', example='LABEL.dimensions::LABEL.ruleId', position='Body'),
  extendedFieldRedefineRules?: string(name='ExtendedFieldRedefineRules', description='The extended mapped fields are mapped to the fields of ARMS alerts. For more information, see the description of the ExtendedFieldRedefineRules parameter.', example='[
    {
        "redefineType":"EXTRACT",
        "matchExpression":null,
        "fieldName":"dimensions",
        "expression":null,
        "mappingRuleList":[

        ],
        "name":"dimensions",
        "integrationId":1234,
        "jsonPath":"$.dimensions",
        "id":10013,
        "fieldType":"LABEL"
    },
    {
        "redefineType":"EXTRACT",
        "matchExpression":null,
        "fieldName":"expression",
        "expression":null,
        "mappingRuleList":[

        ],
        "name":"expression",
        "integrationId":1234,
        "jsonPath":"$.expression",
        "id":10014,
        "fieldType":"LABEL"
    }
]', position='Body'),
  fieldRedefineRules?: string(name='FieldRedefineRules', description='The predefined mapped fields are mapped to the fields of ARMS alerts. The predefined mapped fields were generated when the alert integration was created. For more information, see the description of the FieldRedefineRules parameter.', example='\\[ { "redefineType":"EXTRACT", "matchExpression":null, "fieldName":"alertname", "expression":null, "mappingRuleList":\\[ ], "name":"Alert name", "integrationId":1234, "jsonPath":"$.alertName", "id":10001, "fieldType":"LABEL" }, { "redefineType":"MAP", "matchExpression":null, "fieldName":"severity", "expression":null, "mappingRuleList":\\[ { "mappingValue":"critical", "mappingName":"P1", "mappingType":"MAP", "originValue":"CRITICAL" }, { "mappingValue":"error", "mappingName":"P2", "mappingType":"MAP", "originValue":"WARN" }, { "mappingValue":"warning", "mappingName":"P3", "mappingType":"MAP", "originValue":"INFO" } ], "name":"Alert level", "integrationId":1234, "jsonPath":"$.triggerLevel", "id":10002, "fieldType":"LABEL" }, { "redefineType":"EXTRACT", "matchExpression":null, "fieldName":"message", "expression":"{{$labels.namespace}} / {{$labels.dimensions}} Alert content {{ $labels.alertname }}, Current value {{$value}}.", "mappingRuleList":\\[ ], "name":"Alert description", "integrationId":1234, "jsonPath":null, "id":10003, "fieldType":"ANNOTATION" }, { "redefineType":"EXTRACT", "matchExpression":null, "fieldName":"value", "expression":null, "mappingRuleList":\\[ ], "name":"Alert sample value", "integrationId":1234, "jsonPath":"$.curValue", "id":10004, "fieldType":"ANNOTATION" }, { "redefineType":"EXTRACT", "matchExpression":null, "fieldName":"source", "expression":null, "mappingRuleList":\\[ ], "name":"Source", "integrationId":1234, "jsonPath":null, "id":10007, "fieldType":"LABEL" }, { "redefineType":"ADD", "matchExpression":null, "fieldName":"generatorUrl", "expression":"https://cloudmonitor.console.aliyun.com/index.htm#/alarmInfo/name={{$labels.ruleId}}\\&searchValue=\\&searchType=name\\&searchProduct=/history/all/searchKey:{{$labels.ruleId}},startTime:{{sub $startsAt 300000}},endTime:{{$endsAt}}", "mappingRuleList":\\[ ], "name":"Event URL", "integrationId":1234, "jsonPath":"https://cloudmonitor.console.aliyun.com/index.htm#/alarmInfo/name={{$labels.ruleId}}\\&searchValue=\\&searchType=name\\&searchProduct=/history/all/searchKey:{{$labels.ruleId}},startTime:{{sub $startsAt 300000}},endTime:{{$endsAt}}", "id":10012, "fieldType":"GENERATE_URL" } ]', position='Body'),
  initiativeRecoverField?: string(name='InitiativeRecoverField', description='The field for clearing alert events. The system queries alert events based on the field of alert clearing events and clears the alert events.

> Only the Log Service alert integration supports the parameter.', example='$.status', position='Body'),
  initiativeRecoverValue?: string(name='InitiativeRecoverValue', description='The value of the field for clearing alert events. The system queries alert events based on the field of alert clearing events and clears the alert events.

> Only the Log Service alert integration supports the parameter.', example='ok', position='Body'),
  integrationId: long(name='IntegrationId', description='The ID of the alert integration.', example='1234', position='Body'),
  integrationName: string(name='IntegrationName', description='The name of the alert integration.', example='CloudMonitor integration', position='Body'),
  integrationProductType: string(name='IntegrationProductType', description='The service of the alert integration. Valid values:

*   CLOUD_MONITOR: CloudMonitor
*   LOG_SERVICE: Log Service', example='CLOUD_MONITOR', position='Body'),
  liveness?: string(name='Liveness', description='The activity of the alert integration', example='ready', position='Body'),
  recoverTime?: long(name='RecoverTime', description='The period of time within which alert events are automatically cleared. Unit: seconds. Default value: 300.', example='300', position='Body'),
  stat?: string(name='Stat', description='The total number of alert events and the number of abnormal alert events in the last hour.', example='[0,0]', position='Body'),
  state?: boolean(name='State', description='Indicates whether the alert integration was enabled. Valid values:

*   true
*   false', example='true', position='Body'),
}

model UpdateIntegrationResponseBody = {
  integration?: {
    apiEndpoint?: string(name='ApiEndpoint', description='The endpoint of the alert integration.', example='https://alerts.aliyuncs.com/api/v1/integrations/custom/ymQBN******'),
    autoRecover?: boolean(name='AutoRecover', description='Indicates whether alert events are automatically cleared. Valid values:

*   true (default)
*   false', example='true'),
    description?: string(name='Description', description='The description of the alert integration.', example='Test'),
    duplicateKey?: string(name='DuplicateKey', description='The fields whose values are deduplicated.', example='LABEL.dimensions::LABEL.ruleId'),
    extendedFieldRedefineRules?: [  map[string]any ](name='ExtendedFieldRedefineRules', description='The extended mapped fields of the alert source.'),
    fieldRedefineRules?: [  map[string]any ](name='FieldRedefineRules', description='The predefined mapped fields of the alert source.'),
    initiativeRecoverField?: string(name='InitiativeRecoverField', description='The field for clearing alert events. The system queries alert events based on the field of alert clearing events and clears the alert events.

> Only Log Service supports this parameter.', example='$.status'),
    initiativeRecoverValue?: string(name='InitiativeRecoverValue', description='The value of the field for clearing alert events. The system queries alert events based on the field of alert clearing events and clears the alert events.

> Only Log Service supports this parameter.', example='ok'),
    integrationId?: long(name='IntegrationId', description='The ID of the alert integration.', example='1234'),
    integrationName?: string(name='IntegrationName', description='The name of the alert integration.', example='CloudMonitor integration'),
    integrationProductType?: string(name='IntegrationProductType', description='The service of the alert integration. Valid values:

*   CLOUD_MONITOR: CloudMonitor
*   LOG_SERVICE: Log Service', example='CLOUD_MONITOR'),
    liveness?: string(name='Liveness', description='The activity of the alert integration', example='ready'),
    recoverTime?: long(name='RecoverTime', description='The time when alert events are automatically cleared. Unit: seconds. Default value: 300.', example='300'),
    shortToken?: string(name='ShortToken', description='The authentication token of the alert integration.', example='ymQBN******'),
    stat?: [ long ](name='Stat', description='The total number of alert events and the number of abnormal alert events in the last hour.'),
    state?: boolean(name='State', description='Indicates whether the alert integration is enabled. Valid values:

*   true
*   false', example='true'),
  }(name='Integration', description='The Information about the alert integration.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34ED024E-9E31-434A-9E4E-D9D15C3****'),
}

model UpdateIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIntegrationResponseBody(name='body'),
}

async function updateIntegration(request: UpdateIntegrationRequest): UpdateIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIntegration', 'POST', '/', 'json', true, 'form', request);
}

model UpdateMetricDropRequest {
  clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='c3ca36c8e2693403d85c0d9f8bb1d7b6c', position='Query'),
  metricDrop?: string(name='MetricDrop', description='The list of discarded metrics. Specify one metric name in each line.', example='apiserver_request_duration_seconds_bucket
etcd_request_duration_seconds_bucket
apiserver_request_total
container_tasks_state', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model UpdateMetricDropResponseBody = {
  code?: long(name='Code', description='The response status. Valid values: 2XX: The request is successful. 3XX: A redirection message is returned. 4XX: The request is invalid. 5XX: A server error occurs.', example='200'),
  data?: string(name='Data', description='Indicates whether the request was successful.', example='true'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CCCA4B88-BD7B-5A38-89AF-C09293BD4187'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpdateMetricDropResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMetricDropResponseBody(name='body'),
}

async function updateMetricDrop(request: UpdateMetricDropRequest): UpdateMetricDropResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMetricDrop', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePrometheusAlertRuleRequest {
  alertId: long(name='AlertId', example='3888704', position='Query'),
  alertName: string(name='AlertName', example='Prometheus_Alert', position='Query'),
  annotations?: string(name='Annotations', example='[{"Value": "xxx","Name": "description"}]', position='Query'),
  clusterId: string(name='ClusterId', example='c0bad479465464e1d8c1e641b0afb****', position='Query'),
  dispatchRuleId?: long(name='DispatchRuleId', example='10282', position='Query'),
  duration: string(name='Duration', example='1', position='Query'),
  expression: string(name='Expression', example='100 * (sum(rate(container_cpu_usage_seconds_total[1m])) by (pod_name) / sum(label_replace(kube_pod_container_resource_limits_cpu_cores, \\"pod_name\\", \\"$1\\", \\"pod\\", \\"(.*)\\")) by (pod_name))>75', position='Query'),
  labels?: string(name='Labels', example='[{"Value": "critical","Name": "severity"}]', position='Query'),
  message: string(name='Message', position='Query'),
  notifyType?: string(name='NotifyType', example='ALERT_MANAGER', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TestKey'),
      value?: string(name='Value', description='The tag value.', example='TestValue'),
    }
  ](name='Tags', description='The tags.', position='Query'),
  type?: string(name='Type', position='Query'),
}

model UpdatePrometheusAlertRuleResponseBody = {
  code?: long(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  message?: string(name='Message', description='The returned message.', example='success'),
  prometheusAlertRule?: {
    alertId?: long(name='AlertId', example='3888704'),
    alertName?: string(name='AlertName', example='Prometheus_Alert'),
    annotations?: [ 
      {
        name?: string(name='Name', example='message'),
        value?: string(name='Value'),
      }
    ](name='Annotations'),
    clusterId?: string(name='ClusterId', example='c0bad479465464e1d8c1e641b0afb****'),
    dispatchRuleId?: long(name='DispatchRuleId', example='10282'),
    duration?: string(name='Duration', example='1'),
    expression?: string(name='Expression', example='100 * (sum(rate(container_cpu_usage_seconds_total[1m])) by (pod_name) / sum(label_replace(kube_pod_container_resource_limits_cpu_cores, \\"pod_name\\", \\"$1\\", \\"pod\\", \\"(.*)\\")) by (pod_name))>75'),
    labels?: [ 
      {
        name?: string(name='Name', example='severity'),
        value?: string(name='Value', example='critical'),
      }
    ](name='Labels'),
    message?: string(name='Message'),
    notifyType?: string(name='NotifyType', example='ALERT_MANAGER'),
    status?: int32(name='Status', example='1'),
    type?: string(name='Type'),
  }(name='PrometheusAlertRule'),
  requestId?: string(name='RequestId', example='9FEA6D00-317F-45E3-9004-7FB8B0B7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='True'),
}

model UpdatePrometheusAlertRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePrometheusAlertRuleResponseBody(name='body'),
}

async function updatePrometheusAlertRule(request: UpdatePrometheusAlertRuleRequest): UpdatePrometheusAlertRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePrometheusAlertRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePrometheusGlobalViewRequest {
  allSubClustersSuccess?: boolean(name='AllSubClustersSuccess', description='To edit a GlobalView aggregated instance, do you require all passed child instances to be verified successfully before creating a GlobalView instance (optional, default to false):
- true
- false', example='true', position='Query'),
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance.', example='global****', position='Query'),
  groupName?: string(name='GroupName', description='The name of the global aggregation instance.', example='zyGlobalView', position='Query'),
  mostRegionId?: string(name='MostRegionId', description='The region ID of the global aggregation instance.', example='cn-hangzhou', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the Prometheus instance resides.', example='cn-shenzhen', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Prometheus instance belongs.', example='rg-acfmxyexli2****', position='Query'),
  subClustersJson: string(name='SubClustersJson', description='The data sources of the Prometheus instance for GlobalView.', example='[ { "headers":{ }, "regionId":"cn-hangzhou", "sourceType":"AlibabaPrometheus", "extras":{ }, "clusterId":"c39a1048921e04f***********", "sourceName":"arms-luyao-test", "dataSource":"", "userId":"1672753***********" }, { "headers":{ }, "regionId":"cn-beijing", "sourceType":"AlibabaPrometheus", "extras":{ }, "clusterId":"c6b6485496d5b40***********", "sourceName":"agent-321-test", "dataSource":"", "userId":"1672753***********" }, { "headers":{ }, "regionId":"cn-zhangjiakou", "sourceType":"AlibabaPrometheus", "extras":{ }, "clusterId":"c261a4f3200c446***********", "sourceName":"zaifeng-cardinality-01", "dataSource":"", "userId":"1672753***********" } ]', position='Query'),
}

model UpdatePrometheusGlobalViewResponseBody = {
  code?: int32(name='Code', description='The response code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    failedInstances?: [ 
      {
        clusterId?: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cdb65ed2d527345*********'),
        sourceName?: string(name='SourceName', description='The name of the data source.', example='sourcename-test'),
        sourceType?: string(name='SourceType', description='The type of the data source. AlibabaPrometheus MetricStore CustomPrometheus', example='AlibabaPrometheus'),
        userId?: string(name='UserId', description='The user ID.', example='23784673825*******'),
      }
    ](name='FailedInstances', description='The data sources that failed to be updated.'),
    success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
  }(name='Data', description='The returned struct.'),
  message?: string(name='Message', description='The error message that is returned if the request failed.', example='message'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='E9C9DA3D-10FE-472E-9EEF-2D0A3E41****'),
}

model UpdatePrometheusGlobalViewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePrometheusGlobalViewResponseBody(name='body'),
}

async function updatePrometheusGlobalView(request: UpdatePrometheusGlobalViewRequest): UpdatePrometheusGlobalViewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePrometheusGlobalView', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePrometheusInstanceRequest {
  archiveDuration?: int32(name='ArchiveDuration', description='The number of days for which data is automatically archived after the storage expires. Valid values: 60, 90, 180, and 365. 0 indicates that the data is not archived.', example='90', position='Query'),
  authFreeReadPolicy?: string(name='AuthFreeReadPolicy', position='Query'),
  authFreeWritePolicy?: string(name='AuthFreeWritePolicy', position='Query'),
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance.', example='vpc-xxx', position='Query'),
  enableAuthFreeRead?: boolean(name='EnableAuthFreeRead', position='Query'),
  enableAuthFreeWrite?: boolean(name='EnableAuthFreeWrite', position='Query'),
  enableAuthToken?: boolean(name='EnableAuthToken', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxyexli2****', position='Query'),
  storageDuration?: int32(name='StorageDuration', description='The data storage duration. Unit: days.', example='90', position='Query'),
}

model UpdatePrometheusInstanceResponseBody = {
  code?: int32(name='Code', description='The returned status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: string(name='Data', description='The result of the operation.', example='success'),
  message?: string(name='Message', description='The message returned.', example='message'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6A9AEA84-7186-4D8D-B498-4585C6A2****'),
}

model UpdatePrometheusInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePrometheusInstanceResponseBody(name='body'),
}

async function updatePrometheusInstance(request: UpdatePrometheusInstanceRequest): UpdatePrometheusInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePrometheusInstance', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePrometheusIntegrationRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance. Only a Prometheus instance for Container Service or a Prometheus instance for ECS is supported.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  instanceId?: long(name='InstanceId', description='The exporter ID.', example='2893', position='Query'),
  integrationType: string(name='IntegrationType', description='The type of the integration.', example='kafka, mysql, redis, snmp, emr, nubela, and tidb', position='Query'),
  param: string(name='Param', description='The configurations of the exporter. The value is a JSON string.', example='{
      "port": "5554",
      "name": "kafka-test12",
      "kafka_instance": "kafka-test",
      "__label_value": "kafka-test",
      "scrape_interval": 33,
      "metrics_path": "/metrics",
      "__label_key": "kafka-test"
}', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model UpdatePrometheusIntegrationResponseBody = {
  code?: int32(name='Code', description='The status code or error code.', example='200'),
  data?: {
    instanceId?: long(name='InstanceId', description='The exporter ID.', example='2866'),
    instanceName?: string(name='InstanceName', description='The exporter name.', example='inet'),
  }(name='Data', description='The struct returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful'),
  requestId?: string(name='RequestId', description='Id of the request', example='2DB771C3-D1BB-5363-8A5F-ADB2AF2948DB'),
}

model UpdatePrometheusIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePrometheusIntegrationResponseBody(name='body'),
}

async function updatePrometheusIntegration(request: UpdatePrometheusIntegrationRequest): UpdatePrometheusIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePrometheusIntegration', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePrometheusMonitoringRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  configYaml: string(name='ConfigYaml', description='The monitoring configuration. The value is a YAML string.', example='apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: tomcat-demo
  namespace: default
spec:
  endpoints:
    - interval: 30s
      path: /metrics
      port: tomcat-monitor
  namespaceSelector:
    any: true
  selector:
    matchLabels:
      app: tomcat', position='Body'),
  monitoringName: string(name='MonitoringName', description='The name of the monitoring configuration.', example='podMonitor1', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  type: string(name='Type', description='The type of the monitoring configuration. 
Valid values for a Prometheus instance for Container Service: serviceMonitor, podMonitor, customJob, and probe. 
Valid values for a Prometheus instance for ECS: customJob and probe.', example='podMonitor', position='Query'),
}

model UpdatePrometheusMonitoringResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The result of the operation.', example='success'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='626037F5-FDEB-45B0-804C-B3C92797****'),
}

model UpdatePrometheusMonitoringResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePrometheusMonitoringResponseBody(name='body'),
}

async function updatePrometheusMonitoring(request: UpdatePrometheusMonitoringRequest): UpdatePrometheusMonitoringResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePrometheusMonitoring', 'POST', '/', 'json', true, 'form', request);
}

model UpdatePrometheusMonitoringStatusRequest {
  clusterId: string(name='ClusterId', description='The ID of the Prometheus instance.', example='cc7a37ee31aea4ed1a059eff8034b****', position='Query'),
  monitoringName: string(name='MonitoringName', description='The name of the monitoring configuration.', example='customJob1', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  status: string(name='Status', description='The status of the monitoring configuration. Valid values: run and stop. The status of Probe cannot be modified.', example='run', position='Query'),
  type: string(name='Type', description='The type of the monitoring configuration. 
Valid values for a Prometheus instance for Container Service: serviceMonitor, podMonitor, and customJob. 
Valid value for a Prometheus instance for ECS: customJob. 
The status of probe cannot be modified.', example='customJob', position='Query'),
}

model UpdatePrometheusMonitoringStatusResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The result of the operation.', example='success'),
  message?: string(name='Message', description='The returned message.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='21E85B16-75A6-429A-9F65-8AAC9A54****'),
}

model UpdatePrometheusMonitoringStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePrometheusMonitoringStatusResponseBody(name='body'),
}

async function updatePrometheusMonitoringStatus(request: UpdatePrometheusMonitoringStatusRequest): UpdatePrometheusMonitoringStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePrometheusMonitoringStatus', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRumAppRequest {
  autoRestart?: boolean(name='AutoRestart', description='Specifies whether to restart the application the next day. Valid values: true and false.', example='true', position='Query'),
  bonreeSDKConfigJson?: string(name='BonreeSDKConfigJson', description='The collection configurations of the mobile SDK. You can enable or disable collection configurations based on the app version.', example='{\\"moduleConfig\\":{\\"enable\\":true,\\"defaultConfig\\":{\\"network\\":{\\"enable\\":true},\\"h5\\":{\\"enable\\":true},\\"routechange\\":{\\"enable\\":true},\\"crash\\":{\\"enable\\":true},\\"view\\":{\\"enable\\":true},\\"coollaunch\\":{\\"enable\\":true},\\"hotlaunch\\":{\\"enable\\":true},\\"action\\":{\\"enable\\":true},\\"lagstuck\\":{\\"enable\\":true},\\"lagfps\\":{\\"enable\\":true},\\"statechange\\":{\\"enable\\":true},\\"anr\\":{\\"enable\\":true},\\"customlog\\":{\\"enable\\":true},\\"customevent\\":{\\"enable\\":true},\\"custommetric\\":{\\"enable\\":true}},\\"versionConfigs\\":{\\"1.1.0\\":{\\"useCustom\\":true,\\"customConfig\\":{\\"network\\":{\\"enable\\":true},\\"h5\\":{\\"enable\\":true},\\"routechange\\":{\\"enable\\":true},\\"crash\\":{\\"enable\\":true},\\"view\\":{\\"enable\\":true},\\"coollaunch\\":{\\"enable\\":true},\\"hotlaunch\\":{\\"enable\\":true},\\"action\\":{\\"enable\\":true},\\"lagstuck\\":{\\"enable\\":false},\\"lagfps\\":{\\"enable\\":false},\\"statechange\\":{\\"enable\\":true},\\"anr\\":{\\"enable\\":true},\\"customlog\\":{\\"enable\\":true},\\"customevent\\":{\\"enable\\":true},\\"custommetric\\":{\\"enable\\":true}}},\\"1.2.0\\":{\\"useCustom\\":false,\\"customConfig\\":{}}}}}', position='Query'),
  description?: string(name='Description', description='The description of the application.', position='Query'),
  isSubscribe?: boolean(name='IsSubscribe', description='Specifies whether you want to subscribe to the application. Valid values: true and false.', example='true', position='Query'),
  nickname?: string(name='Nickname', description='The alias of the application.', position='Query'),
  pid: string(name='Pid', description='The application ID.', example='b5xxxxs@d8deedfa9bf****', position='Query'),
  realRegionId?: string(name='RealRegionId', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  restart?: boolean(name='Restart', description='Specifies whether to restart the application. Valid values: true and false.', example='true', position='Query'),
  serviceDomainOperationJson?: string(name='ServiceDomainOperationJson', description='The service domain name of the application. You can create, modify, and delete service domain name configurations.', example='{\\"Op\\":\\"Update\\",\\"Domain\\":\\"example.com\\",\\"Config\\":{\\"Description\\":\\"message\\",\\"Tracing\\":\\"true\\",\\"PropagatorTypes\\":[\\"sw8\\"]}}', position='Query'),
  stop?: boolean(name='Stop', description='Specifies whether to stop the application. Valid values: true and false.', example='true', position='Query'),
}

model UpdateRumAppResponseBody = {
  code?: string(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: {
    config?: string(name='Config', description='The user configurations. This is a reserved parameter.'),
    limit?: int32(name='Limit', description='The QPS limit. Unit: bytes.', example='100000'),
    limited?: boolean(name='Limited', description='Indicates whether the request is throttled due to the QPS limit. Valid values: true and false.', example='true'),
    usage?: int32(name='Usage', description='The usage. Unit: bytes.', example='10000'),
  }(name='Data', description='The details of the returned results.'),
  httpStatusCode?: string(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The error message returned if the request failed.', example='message'),
  requestId?: string(name='RequestId', description='The request ID.', example='E9C9DA3D-10FE-472E-9EEF-2D0A3E41****'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model UpdateRumAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRumAppResponseBody(name='body'),
}

/**
  * Real User Monitoring (RUM) is available only in the China (Hangzhou), Singapore, and US (Silicon Valley) regions. Select the correct endpoint.
  *
 */
async function updateRumApp(request: UpdateRumAppRequest): UpdateRumAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRumApp', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRumFileStatusRequest {
  fileName?: string(name='FileName', description='The file name.', example='test.js.map', position='Query'),
  pid?: string(name='Pid', description='The application ID.', example='atc8xxxx
cf@d8deedfa9bf****', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  size?: string(name='Size', description='The size of the file. Unit: bytes.', example='20', position='Query'),
  status?: string(name='Status', description='The status of the file. Valid values: SUCCESS and INIT.', example='SUCCESS', position='Query'),
  uuid?: string(name='Uuid', description='The unique ID of the file. If you do not set this parameter, the system automatically sets a UUID for you.', example='MS4wLjAtbWFpbi4wZjM0NzRlOSxxxxxx', position='Query'),
  versionId?: string(name='VersionId', description='The version number of the file.', example='1.0.0', position='Query'),
}

model UpdateRumFileStatusResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='626037F5-FDEB-45B0-804C-B3C92797****'),
}

model UpdateRumFileStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRumFileStatusResponseBody(name='body'),
}

/**
  * Real User Monitoring (RUM) is available only in the China (Hangzhou), Singapore, and US (Silicon Valley) regions. Select the correct endpoint.
  *
 */
async function updateRumFileStatus(request: UpdateRumFileStatusRequest): UpdateRumFileStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRumFileStatus', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTimingSyntheticTaskRequest {
  availableAssertions?: [ 
    {
      expect?: string(name='Expect', description='The expected value.', example='200'),
      operator?: string(name='Operator', description='The condition. gt: greater than. gte: greater than or equal to. lt: less than. lte: less than or equal to. eq: equal to. neq: not equal to. ctn: contain. nctn: does not contain. exist: exist. n_exist: does not exist. belong: belong to. n_belong: does not belong to. reg_match: regular expression.', example='eq'),
      target?: string(name='Target', description='The check target. If you set the type parameter to HttpResCode, HttpResBody, or HttpResponseTime, you do not need to set the target parameter. If you set the type parameter to HttpResHead, you must specify the key in the header. If you set the type parameter to HttpResBodyJson, use jsonPath.', example='HttpResponseTime'),
      type?: string(name='Type', description='The assertion type. Valid values: HttpResCode, HttpResHead, HttpResBody, HttpResBodyJson, HttpResponseTime, IcmpPackLoss (packet loss rate), IcmpPackMaxLatency (maximum packet latency), IcmpPackAvgLatency (average packet latency), TraceRouteHops (number of hops), DnsARecord (A record), DnsCName (CNAME), websiteTTFB (time to first packet), websiteTTLB (time to last packet), websiteFST (first paint time), websiteFFST (first meaningful paint), websiteOnload (full loaded time). For more information, see the following description.', example='TraceRouteHops'),
    }
  ](name='AvailableAssertions', description='The list of assertions.', shrink='json', position='Query'),
  commonSetting?: {
    customHost?: {
      hosts?: [ 
        {
          domain?: string(name='Domain', description='The domain name.', example='www.aliyun.com'),
          ipType?: int32(name='IpType', description='The IP version. Valid values:

*   0: A version is automatically selected.
*   1: IPv4
*   2: IPv6', example='0'),
          ips?: [ string ](name='Ips', description='The list of IP addresses.'),
        }
      ](name='Hosts', description='The list of hosts.'),
      selectType?: int32(name='SelectType', description='The selection mode. Valid values:

*   0: random
*   1: polling', example='0'),
    }(name='CustomHost', description='The custom host settings.'),
    customPrometheusSetting?: {
      prometheusClusterId?: string(name='PrometheusClusterId', description='A reserved parameter.'),
      prometheusClusterRegion?: string(name='PrometheusClusterRegion', description='A reserved parameter.'),
      prometheusLabels?: map[string]string(name='PrometheusLabels', description='The reserved parameters.'),
    }(name='CustomPrometheusSetting', description='The reserved parameters.'),
    customVPCSetting?: {
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
      secureGroupId?: string(name='SecureGroupId', description='The ID of the security group to which the client belongs. The security group specifies the inbound and outbound rules of the client for the VPC. You need to allow the security group to which the client belongs to access the security group to which the VPC belongs. Otherwise, the client cannot access resources in the VPC.', example='sg-xxxxxxxx'),
      vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-2zevek6r3mpny7wxxxxxv'),
      vpcId?: string(name='VpcId', description='VPC ID.', example='vpc-bp15bjtubjytclwxxxxxx'),
    }(name='CustomVPCSetting', description='The information about the virtual private cloud (VPC). If the destination URL is an Alibaba Cloud internal endpoint, you need to configure a VPC.'),
    ipType?: int32(name='IpType', description='The IP version. Valid values:

*   0: A version is automatically selected.
*   1: IPv4
*   2: IPv6', example='0'),
    isOpenTrace?: boolean(name='IsOpenTrace', description='Specifies whether to enable tracing.', example='true'),
    monitorSamples?: int32(name='MonitorSamples', description='Specifies whether to evenly distribute monitoring samples. Valid values:

*   0: no
*   1: yes', example='0'),
    traceClientType?: int32(name='TraceClientType', description='The type of the client for tracing. Valid values:

*   0: ARMS agent
*   1: OpenTelemetry
*   2: Jaeger', example='1'),
    xtraceRegion?: string(name='XtraceRegion', description='The region to which trace data is reported.', example='cn-hangzhou'),
  }(name='CommonSetting', description='The general settings.', shrink='json', position='Query'),
  customPeriod?: {
    endHour?: int32(name='EndHour', description='The hour at which the test ends. Valid values: 0 to 24.', example='22'),
    startHour?: int32(name='StartHour', description='The hour at which the test starts. Valid values: 0 to 24.', example='14'),
  }(name='CustomPeriod', description='The custom cycle.', shrink='json', position='Query'),
  frequency?: string(name='Frequency', description='The detection frequency. Valid values: 1m, 5m, 10m, 15m, 20m, 30m, 1h, 2h, 3h, 4h, 6h, 8h, 12h, and 24h.', example='5m', position='Query'),
  monitorConf?: {
    apiHTTP?: {
      checkCert?: boolean(name='CheckCert', description='Specifies whether to verify the certificate. Default value: false.', example='true'),
      connectTimeout?: long(name='ConnectTimeout', description='The connection timeout period. Unit: milliseconds. Default value: 5000. Minimum value: 1000. Maximum value: 300000.', example='5000'),
      method?: string(name='Method', description='The request method. Valid values:

*   POST
*   GET', example='POST'),
      protocolAlpnProtocol?: int32(name='ProtocolAlpnProtocol', description='The ALPN protocol version. You can configure this parameter when you perform an HTTPS synthetic test on a WAP mobile client. Valid values:

0: default

1-http/1.1

2-h2

3: disables the ALPN protocol', example='0'),
      requestBody?: {
        content?: string(name='Content', description='The content of the request body. Format: JSON string. The parameter is required if the Type parameter is set to text/plain, application/json, application/xml, or text/html. Format: JSON string.', example='{
      "key1": "value1",
      "key2": "value2"
}'),
        type?: string(name='Type', description='The type of the request body. Valid values: text/plain, application/json, application/x-www-form-urlencoded, multipart/form-data, application/xml, and text/html.', example='application/json'),
      }(name='RequestBody', description='The HTTP request body.'),
      requestHeaders?: map[string]string(name='RequestHeaders', description='The custom header field.'),
      targetUrl?: string(name='TargetUrl', description='The URL or request path for synthetic monitoring.', example='https://********'),
      timeout?: long(name='Timeout', description='The timeout period. Unit: milliseconds. Default value: 10000. Minimum value: 1000. Maximum value: 300000.', example='5000'),
    }(name='ApiHTTP', description='The parameters of the HTTP(S) synthetic test.'),
    fileDownload?: {
      connectionTimeout?: long(name='ConnectionTimeout', description='Unit: milliseconds. Minimum value: 1000. Maximum value: 120000. Default value: 5000.', example='5000'),
      customHeaderContent?: map[string]string(name='CustomHeaderContent', description='The content of the custom request header. Format: JSON map.'),
      downloadKernel?: int32(name='DownloadKernel', description='The kernel type. Valid values:

*   1: curl
*   0: WinInet', example='0'),
      ignoreCertificateAuthError?: int32(name='IgnoreCertificateAuthError', description='Specifies whether to ignore CA certificate authentication errors. Valid values: 0: no. 1: yes. Default value: 1.', example='0'),
      ignoreCertificateCanceledError?: int32(name='IgnoreCertificateCanceledError', description='Specifies whether to ignore certificate revocation errors. Valid values: 0: no. 1: yes. Default value: 1.', example='0'),
      ignoreCertificateOutOfDateError?: int32(name='IgnoreCertificateOutOfDateError', description='Specifies whether to ignore certificate invalidity. Valid values: 0: no. 1: yes. Default value: 1.', example='0'),
      ignoreCertificateStatusError?: int32(name='IgnoreCertificateStatusError', description='Specifies whether to ignore certificate status errors. 0: no. 1: yes. Default value: 1.', example='0'),
      ignoreCertificateUntrustworthyError?: int32(name='IgnoreCertificateUntrustworthyError', description='Specifies whether to ignore certificate incredibility. Valid values: 0: no. 1: yes. Default value: 1.', example='0'),
      ignoreCertificateUsingError?: int32(name='IgnoreCertificateUsingError', description='Specifies whether to ignore certificate usage errors. Valid values: 0: no. 1: yes. Default value: 1.', example='0'),
      ignoreInvalidHostError?: int32(name='IgnoreInvalidHostError', description='Specifies whether to ignore host invalidity. Valid values: 0: no. 1: yes. Default value: 1.', example='0'),
      monitorTimeout?: long(name='MonitorTimeout', description='The monitoring timeout period. Unit: milliseconds. Minimum value: 1000. Maximum value: 120000. Default value: 60000.', example='60000'),
      quickProtocol?: int32(name='QuickProtocol', description='The QUIC protocol type. Valid values:

*   1: HTTP/1
*   2: HTTP/2
*   3: http3', example='1'),
      redirection?: int32(name='Redirection', description='Specifies whether to support redirection. Valid values: 0: no. 1: yes. Default value: 1.', example='0'),
      targetUrl?: string(name='TargetUrl', description='The URL that is used to download the file.', example='https://img.alicdn.com/tfs/TB13DzOjXP7gK0jSZFjXXc5aXXa-212-48.png'),
      transmissionSize?: long(name='TransmissionSize', description='The maximum file size of a single transfer. Unit: KB. Minimum value: 1. Maximum value: 20480. Valid values: 2048.', example='2048'),
      validateKeywords?: string(name='ValidateKeywords', description='The keyword that is used in verification.', example='aliyun'),
      verifyWay?: int32(name='VerifyWay', description='The verification method. Valid values:

*   0: no verification
*   1: string verification
*   2: MD5 verification', example='0'),
      whiteList?: string(name='WhiteList', description='The whitelisted objects that are used to avoid DNS hijacking. The objects can be IP addresses, wildcard mask, subnet mask, or CNAME records. Separate multiple objects with vertical bars (|). Example: www.aliyun.com:203.0.3.55|203.3.44.67. It indicates that all IP addresses that belong to the www.aliyun.com domain name except 203.0.3.55 and 203.3.44.67 are hijacked.', example='www.aliyun.com:203.0.3.55|203.3.44.67'),
    }(name='FileDownload', description='The parameters of file downloading.'),
    netDNS?: {
      dig?: int32(name='Dig', description='Specifies whether to use the dig command to display the data. Valid values: 0: no. 1: yes.', example='0'),
      dnsServerIpType?: int32(name='DnsServerIpType', description='The IP version of the DNS server. Valid values: 0: IPv4. 1: IPv6. 2: A version is automatically selected. Default value: 0.', example='0'),
      nsServer?: string(name='NsServer', description='The IP address of the DNS server. Default value: 114.114.114.114.', example='114.114.114.114'),
      queryMethod?: int32(name='QueryMethod', description='The DNS query method. Valid values: 0: recursive. 1: iterative. Default value: 0.', example='0'),
      targetUrl?: string(name='TargetUrl', description='The domain name.', example='www.aliyun.com'),
      timeout?: long(name='Timeout', description='The timeout period for the DNS synthetic test. Unit: milliseconds. Minimum value: 1000. Maximum value: 45000. Default value: 5000.', example='1000'),
    }(name='NetDNS', description='The parameters of the DNS synthetic test.'),
    netICMP?: {
      interval?: long(name='Interval', description='The interval at which ICMP packets are sent. Unit: milliseconds. Minimum value: 200. Maximum value: 10000.', example='300'),
      packageNum?: int32(name='PackageNum', description='The number of ICMP packets that are sent. Minimum value: 1. Maximum value: 50. Default value: 4.', example='4'),
      packageSize?: int32(name='PackageSize', description='The size of each ICMP packet. Unit: bytes. Valid values: 32, 64, 128, 256, 512, 1024, 1080, and 1450.', example='32'),
      splitPackage?: boolean(name='SplitPackage', description='Specifies whether to split ICMP packets. Default value: true.', example='true'),
      targetUrl?: string(name='TargetUrl', description='The IP address or domain name of the destination host. The value cannot contain port numbers, protocol headers, or request paths.', example='www.aliyun.com'),
      timeout?: long(name='Timeout', description='The timeout period for the ICMP synthetic test. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 20000.', example='5000'),
      tracertEnable?: boolean(name='TracertEnable', description='Specifies whether to enable the tracert command. Default value: true.', example='true'),
      tracertNumMax?: int32(name='TracertNumMax', description='The maximum number of hops for the tracert command. Minimum value: 1. Maximum value: 128. Default value: 20.', example='20'),
      tracertTimeout?: long(name='TracertTimeout', description='The timeout period of the tracert command. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 60000.', example='60000'),
    }(name='NetICMP', description='The parameters of the ICMP synthetic test.'),
    netTCP?: {
      connectTimes?: int32(name='ConnectTimes', description='The number of TCP connections that are established. Minimum value: 1. Maximum value: 16. Default value: 4.', example='4'),
      interval?: long(name='Interval', description='The interval at which TCP connections are established. Unit: milliseconds. Minimum value: 200. Maximum value: 10000. Default value: 200.', example='300'),
      targetUrl?: string(name='TargetUrl', description='The IP address of the destination host.', example='127.0.0.1:8888'),
      timeout?: long(name='Timeout', description='The timeout period for the TCP synthetic test. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 20000.', example='1000'),
      tracertEnable?: boolean(name='TracertEnable', description='Specifies whether to enable the tracert command. Default value: true.', example='true'),
      tracertNumMax?: int32(name='TracertNumMax', description='The maximum number of hops for the tracert command. Minimum value: 1. Maximum value: 128. Default value: 20.', example='20'),
      tracertTimeout?: long(name='TracertTimeout', description='The timeout period of the tracert command. Unit: milliseconds. Minimum value: 1000. Maximum value: 300000. Default value: 60000.', example='1000'),
    }(name='NetTCP', description='The parameters of the TCP synthetic test.'),
    stream?: {
      customHeaderContent?: map[string]string(name='CustomHeaderContent', description='The custom header. Format: JSON map.'),
      playerType?: int32(name='PlayerType', description='The player. Default value: 12. Valid values:

*   12: VLC
*   2: Flash Player', example='2'),
      streamAddressType?: int32(name='StreamAddressType', description='The address type of the resource. Valid values:

*   1: resource URL.
*   0: page URL. Default value: 0.', example='1'),
      streamMonitorTimeout?: int32(name='StreamMonitorTimeout', description='The monitoring duration. Unit: seconds. Maximum and default value: 60.', example='30'),
      streamType?: int32(name='StreamType', description='Specifies whether the resource is a video or audio. Valid values: 0: video. 1: audio.', example='0'),
      targetUrl?: string(name='TargetUrl', description='The resource URL of the streaming media.', example='http://www.aliyun.com/stream/test.mp4'),
      whiteList?: string(name='WhiteList', description='The whitelisted objects that are used to avoid DNS hijacking. The objects can be IP addresses, wildcard mask, subnet mask, or CNAME records. Separate multiple objects with vertical bars (|). Example: www.aliyun.com:203.0.3.55|203.3.44.67. It indicates that all IP addresses that belong to the www.aliyun.com domain name except 203.0.3.55 and 203.3.44.67 are hijacked.', example='www.aliyun.com:203.0.3.55|203.3.44.67'),
    }(name='Stream', description='The parameters of the streaming-media synthetic test.'),
    website?: {
      automaticScrolling?: int32(name='AutomaticScrolling', description='Specifies whether to automatically scroll up and down the screen to load a page. Valid values: 0: no. 1: yes. Default value: 0.', example='0'),
      customHeader?: int32(name='CustomHeader', description='Specifies whether to create a custom header. Valid values: 0: no. 1: The first packet is modified. 2: All packets are modified. Default value: 0.', example='0'),
      customHeaderContent?: map[string]string(name='CustomHeaderContent', description='The custom header. Format: JSON map.'),
      DNSHijackWhitelist?: string(name='DNSHijackWhitelist', description='If the IP address or CNAME record resolved from a domain name is not included in the DNS whitelist, you cannot access the domain name, or an IP address that belongs to a different domain name is returned. If the IP address or CNAME record is included in the DNS whitelist, DNS hijacking does not occur.

Format: \\<domain name>:\\<objects>. The objects can be IP addresses, wildcard mask, subnet mask, or CNAME records. Separate multiple objects with vertical bars (|). Example: www.aliyun.com:203.0.3.55|203.3.44.67. It indicates that all IP addresses that belong to the www.aliyun.com domain name except 203.0.3.55 and 203.3.44.67 are hijacked.', example='www.aliyun.com:203.0.3.55|203.3.44.67'),
      disableCache?: int32(name='DisableCache', description='Specifies whether to disable the cache. Valid values: 0: no. 1: yes. Default value: 1.', example='0'),
      disableCompression?: int32(name='DisableCompression', description='Specifies whether to accept compressed files based on the HTTP Accept-Encoding request header. Valid values: 0: no. 1: yes. Default value: 0.', example='0'),
      elementBlacklist?: string(name='ElementBlacklist', description='The elements not to be loaded in the page loading process.', example='a.jpg'),
      filterInvalidIP?: int32(name='FilterInvalidIP', description='Specifies whether to exclude invalid IP addresses. Valid values:

*   1: no
*   0: yes', example='0'),
      flowHijackJumpTimes?: int32(name='FlowHijackJumpTimes', description='The total number of elements on the page.', example='1'),
      flowHijackLogo?: string(name='FlowHijackLogo', description='The keyword that is used to identify hijacking. Asterisks (\\*) are allowed.', example='aliyun'),
      ignoreCertificateError?: int32(name='IgnoreCertificateError', description='Specifies whether to ignore SSL certificate errors during browsing. Valid values: 0: no. 1: yes. Default value: 1.', example='0'),
      monitorTimeout?: long(name='MonitorTimeout', description='The monitoring timeout period. Unit: milliseconds. Minimum value: 5000. Maximum value: 300000. Default value: 40000.', example='20000'),
      pageTamper?: string(name='PageTamper', description='Elements that are not included in the whitelist and appear on the page are manipulated. These elements can be pop-up ads, floating ads, and page redirection.', example='www.aliyun.com:|/cc/bb/a.gif|/vv/bb/cc.jpg'),
      redirection?: int32(name='Redirection', description='Specifies whether to continue browsing after redirection. Valid values: 0: no. 1: yes. Default value: 1.', example='0'),
      slowElementThreshold?: long(name='SlowElementThreshold', description='The time threshold that is used to define a slow element. Unit: milliseconds. Default value: 5000. Minimum value: 1. Maximum value: 300000.', example='5000'),
      targetUrl?: string(name='TargetUrl', description='The URL of the website.', example='https://********'),
      verifyStringBlacklist?: string(name='VerifyStringBlacklist', description='An arbitrary string in the source code of the page for verification. If the source code returned by the client contains a string that is in the blacklist, the 650 error code is reported, which indicates that the string fails to be verified. Separate multiple strings with vertical bars (|).', example='error'),
      verifyStringWhitelist?: string(name='VerifyStringWhitelist', description='An arbitrary string in the source code of the page for verification. If the source code returned by the client contains a string that is not in the whitelist, the 650 error code is reported, which indicates that the string fails to be verified. Separate multiple strings with vertical bars (|).', example='success'),
      waitCompletionTime?: long(name='WaitCompletionTime', description='The maximum waiting time. Unit: milliseconds. Default value: 5000. Minimum value: 5000. Maximum value: 300000.', example='5000'),
    }(name='Website', description='The parameters of the website speed measurement.'),
  }(name='MonitorConf', description='The monitoring configurations.', shrink='json', position='Query'),
  monitors?: [ 
    {
      cityCode?: string(name='CityCode', description='The city code.', example='100001'),
      clientType?: int32(name='ClientType', description='The client type of the monitoring point. Valid values: 1: data center. 2: Internet. 3: mobile device. 4: ECS instance.', example='4'),
      operatorCode?: string(name='OperatorCode', description='The carrier code.', example='1'),
    }
  ](name='Monitors', description='The list of monitoring points.', shrink='json', position='Query'),
  name?: string(name='Name', description='The name of the task.', example='AlibabaCloud DNS Task', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxyexli2****', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='key'),
      value?: string(name='Value', description='The value of the tag.', example='value'),
    }
  ](name='Tags', description='The list of tags.', shrink='json', position='Query'),
  taskId?: string(name='TaskId', description='The ID of the synthetic monitoring task.', example='5308a2691f59422c8c3b7aeccxxxxxxx', position='Query'),
}

model UpdateTimingSyntheticTaskResponseBody = {
  code?: long(name='Code', description='The status code. The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  data?: {
    taskId?: string(name='TaskId', description='The task ID.', example='1eeb351722c84e05b52c82fd0dc9953e'),
  }(name='Data', description='The struct returned.'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='F7781D4A-2818-41E7-B7BB-79D809E9****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model UpdateTimingSyntheticTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTimingSyntheticTaskResponseBody(name='body'),
}

async function updateTimingSyntheticTask(request: UpdateTimingSyntheticTaskRequest): UpdateTimingSyntheticTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTimingSyntheticTask', 'POST', '/', 'json', false, 'json', request);
}

model UpdateWebhookRequest {
  body: string(name='Body', description='The notification template that is sent when an alert is triggered. This parameter is required if the **Method** parameter is set to **Post**. You can use the $content placeholder to specify the notification content. The content cannot exceed 500 characters in length.', example='{ "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Alert time":"{{ .startTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }', position='Query'),
  contactId: long(name='ContactId', description='The ID of the webhook alert contact. You can call the **SearchAlertContact** operation to obtain the ID.', example='48716', minimum=0, maximum=9223372036854775807, position='Query'),
  contactName: string(name='ContactName', description='The name of the webhook alert contact.', example='Webhook alert', position='Query'),
  httpHeaders?: string(name='HttpHeaders', description='The HTTP request headers.', example='[{"Content-Type":"application/json"}]', position='Query'),
  httpParams?: string(name='HttpParams', description='The parameters in the HTTP request.', example='[{"name":"mike"}]', position='Query'),
  method: string(name='Method', description='The HTTP request method. Valid values:

*   `Get`
*   `Post`', example='Post', position='Query'),
  recoverBody?: string(name='RecoverBody', description='The notification template that is sent when an alert is resolved. This parameter is required if the **Method** parameter is set to **Post**. You can use the $content placeholder to specify the notification content. The content cannot exceed 500 characters in length.', example='{ "Alert name":"{{ .commonLabels.alertname }}{{if .commonLabels.clustername }}", "Cluster name":"{{ .commonLabels.clustername }} {{ end }}{{if eq "app" .commonLabels.\\_aliyun_arms_involvedObject_kind }}", "Application name":"{{ .commonLabels.\\_aliyun_arms_involvedObject_name }} {{ end }}", "Notification policy":"{{ .dispatchRuleName }}", "Recovery time":"{{ .endTime }}", "Alert content":"{{ for .alerts }} {{ .annotations.message }} {{ end }}" }', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  url: string(name='Url', description='The URL of the HTTP request method.', example='https://oapi.dingtalk.com/robot/send?access_token=e1a049121ddbfce1ca963d115ef88cc7219583c4fb79fe6e398fbfb688******', position='Query'),
}

model UpdateWebhookResponseBody = {
  isSuccess?: boolean(name='IsSuccess', description='The result returned. Valid values:

*   `true`: The modification is successful.
*   `false`: The modification fails.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='16AF921B-8187-489F-9913-43C808B4****'),
}

model UpdateWebhookResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWebhookResponseBody(name='body'),
}

/**
  * This operation is no longer maintained. Call the CreateOrUpdateWebhookContact operation in the new alter management module to create or modify a webhook alert contact.
  *
 */
async function updateWebhook(request: UpdateWebhookRequest): UpdateWebhookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWebhook', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeAddonReleaseRequest {
  addonVersion: string(name='AddonVersion', description='The version of the add-on.', example='0.0.2', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request.', example='false', position='Query'),
  environmentId: string(name='EnvironmentId', description='The environment ID.', example='env-xxx', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  releaseName: string(name='ReleaseName', description='The name of the release.', example='mysql-1695372983039', position='Query'),
  values: string(name='Values', description='The metadata information.', example='{"host":"mysql-service.default","port":3306,"username":"root","password":"roots"}', position='Query'),
}

model UpgradeAddonReleaseResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: string(name='Data', description='The returned message.', example='success'),
  message?: string(name='Message', description='The error message returned if the request parameters are invalid.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='27E653FA-5958-45BE-8AA9-14D884DC****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model UpgradeAddonReleaseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeAddonReleaseResponseBody(name='body'),
}

async function upgradeAddonRelease(request: UpgradeAddonReleaseRequest): UpgradeAddonReleaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeAddonRelease', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeEnvironmentFeatureRequest {
  aliyunLang?: string(name='AliyunLang', description='The language. Valid values: zh and en. Default value: zh.', example='zh', position='Query'),
  environmentId: string(name='EnvironmentId', description='The environment ID.', example='env-xxx', position='Query'),
  featureName: string(name='FeatureName', description='The feature name. Valid values: app-agent-pilot, metric-agent, ebpf-agent, and service-check.', example='metric-agent', position='Query'),
  featureVersion?: string(name='FeatureVersion', description='The version of the feature.', example='1.1.17', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  values?: string(name='Values', description='Specifies whether to enable service discovery. For PodAnnotation, set the value to run or mini. For PodMonitor and ServiceMonitor, set the value to true or false.', example='{"PodAnnotation":"run"}', position='Query'),
}

model UpgradeEnvironmentFeatureResponseBody = {
  code?: int32(name='Code', description='The status code. The status code 200 indicates that the request was successful.', example='200'),
  data?: map[string]string(name='Data', description='The status of the job.'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='01FF8DD9-A09C-47A1-895A-B6E321BE77B6'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model UpgradeEnvironmentFeatureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeEnvironmentFeatureResponseBody(name='body'),
}

async function upgradeEnvironmentFeature(request: UpgradeEnvironmentFeatureRequest): UpgradeEnvironmentFeatureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeEnvironmentFeature', 'POST', '/', 'json', false, 'json', request);
}

model UploadRequest {
  edition?: string(name='Edition', description='The version of the SourceMap file.', example='0.0.0', position='Query'),
  file?: string(name='File', description='The string of the SourceMap file.', example='test file content', position='Body'),
  fileName: string(name='FileName', description='The name of the SourceMap file.', example='test.js.map', position='Query'),
  pid: string(name='Pid', description='The application ID.

Log on to the **ARMS console**. In the left-side navigation pane, choose **Browser Monitoring** > **Browser Monitoring**. On the Browser Monitoring page, click the name of an application. The URL in the address bar contains the process ID (PID) of the application. The PID is indicated in the pid=xxx format. The PID is usually percent encoded as xxx%40xxx. You must modify this value to remove the percent encoding. For example, if the PID in the URL is eb4zdose6v%409781be0f44d\\*\\*\\*\\*, you must replace %40 with @ to obtain eb4zdose6v@9781be0f44d\\*\\*\\*\\*.', example='b590lhguqs@8cc3f6354******', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the SourceMap file is uploaded.', example='cn-hangzhou', position='Query'),
  version?: string(name='Version', description='We recommend that you do not specify this parameter.', example='null', position='Query'),
}

model UploadResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A5EC8221-08F2-4C95-9AF1-49FD998C****'),
  uploadResult?: {
    fid?: string(name='Fid', description='The ID of the SourceMap file.', example='123'),
    fileName?: string(name='FileName', description='The name of the SourceMap file.', example='test.js.map'),
    uploadTime?: string(name='UploadTime', description='The time when the file was uploaded.', example='1650272251'),
  }(name='UploadResult', description='The returned data.'),
}

model UploadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadResponseBody(name='body'),
}

async function upload(request: UploadRequest): UploadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Upload', 'POST', '/', 'json', true, 'form', request);
}

model DataBonreeSDKConfigModuleConfigDefaultConfigValue = {
  enable?: boolean(name='enable', description='Indicates whether the configuration is enabled.', example='true'),
}

model DataBonreeSDKConfigModuleConfigVersionConfigsValue = {
  useCustom?: boolean(name='useCustom', description='Indicates whether the custom configuration is used.', example='true'),
  customConfig?: map[string]DataBonreeSDKConfigModuleConfigVersionConfigsValueCustomConfigValue(name='customConfig', description='The custom configuration.'),
  description?: string(name='description', description='The description of the version configuration.'),
  updateTime?: long(name='updateTime', description='The time when the version configuration was updated.', example='1721112372055'),
}

model DataBonreeSDKConfigModuleConfigVersionConfigsValueCustomConfigValue = {
  enable?: boolean(name='enable', description='Indicates whether the configuration is enabled.', example='true'),
}

