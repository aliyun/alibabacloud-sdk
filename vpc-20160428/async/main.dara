/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Vpc';
  @version = '2016-04-28';
  @endpointRule = 'regional';
  @endpointMap = {
    'cn-hangzhou' = 'vpc.aliyuncs.com',
    'cn-shanghai-finance-1' = 'vpc.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'vpc.aliyuncs.com',
    'cn-north-2-gov-1' = 'vpc.aliyuncs.com',
    'ap-northeast-2-pop' = 'vpc.aliyuncs.com',
    'cn-beijing-finance-pop' = 'vpc.aliyuncs.com',
    'cn-beijing-gov-1' = 'vpc.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'vpc.aliyuncs.com',
    'cn-edge-1' = 'vpc-nebula.cn-qingdao-nebula.aliyuncs.com',
    'cn-fujian' = 'vpc.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'vpc.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'vpc.aliyuncs.com',
    'cn-hangzhou-finance' = 'vpc.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'vpc.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'vpc-pre.cn-hangzhou.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'vpc-inner-pre.cn-hangzhou.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'vpc-pre.cn-hangzhou.aliyuncs.com',
    'cn-hangzhou-test-306' = 'vpc-pre.cn-hangzhou.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'vpc.aliyuncs.com',
    'cn-huhehaote-nebula-1' = 'vpc-nebula.cn-qingdao-nebula.aliyuncs.com',
    'cn-qingdao-nebula' = 'vpc-nebula.cn-qingdao-nebula.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'vpc-pre.cn-hangzhou.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'vpc.aliyuncs.com',
    'cn-shanghai-inner' = 'vpc.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'vpc-pre.cn-hangzhou.aliyuncs.com',
    'cn-shenzhen-inner' = 'vpc.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'vpc.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'vpc.aliyuncs.com',
    'cn-wuhan' = 'vpc.aliyuncs.com',
    'cn-yushanfang' = 'vpc.aliyuncs.com',
    'cn-zhangbei' = 'vpc.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'vpc.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'vpc.cn-zhangjiakou.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'vpc-nebula.cn-qingdao-nebula.aliyuncs.com',
    'eu-west-1-oxs' = 'vpc-nebula.cn-shenzhen-cloudstone.aliyuncs.com',
    'rus-west-1-pop' = 'vpc.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model ActivateRouterInterfaceRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the router interface.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerInterfaceId: string(name='RouterInterfaceId', description='The ID of the router interface.

This parameter is required.', example='ri-2zeo3xzyf38r4urz****', position='Query'),
}

model ActivateRouterInterfaceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='079874CD-AEC1-43E6-AC03-ADD96B6E4907'),
}

model ActivateRouterInterfaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ActivateRouterInterfaceResponseBody(name='body'),
}

/**
  * @description After you call this operation, the router interface enters the **Activating** state. After the router interface is activated, it enters the **Active** state.
  * >  You cannot activate a router interface that has overdue payments.
  * @param request  the request parameters of ActivateRouterInterface  ActivateRouterInterfaceRequest
  * @return ActivateRouterInterfaceResponse
 */
async function activateRouterInterface(request: ActivateRouterInterfaceRequest): ActivateRouterInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ActivateRouterInterface', 'POST', '/', 'json', false, 'json', request);
}

model ActiveFlowLogRequest {
  flowLogId: string(name='FlowLogId', description='The ID of the flow log.

This parameter is required.', example='fl-m5e8vhz2t21sel1nq****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where you want to create the flow log. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-qingdao', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ActiveFlowLogResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F7DDDC17-FA06-4AC2-8F35-59D2470FCFC1'),
  success?: string(name='Success', description='Indicates whether the operation is successful. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
}

model ActiveFlowLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ActiveFlowLogResponseBody(name='body'),
}

/**
  * @description *   The **ActiveFlowLog** operation is asynchronous. After you send the request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [DescribeFlowLogs](https://help.aliyun.com/document_detail/87923.html) operation to query the status of a flow log:
  *     *   If the flow log is in the **Activating** state, the flow log is being started.
  *     *   If the flow log is in the **Active** state, the flow log is started.
  * *   You cannot repeatedly call the **ActiveFlowLog** operation to start a flow log within the specified period of time.
  * @param request  the request parameters of ActiveFlowLog  ActiveFlowLogRequest
  * @return ActiveFlowLogResponse
 */
async function activeFlowLog(request: ActiveFlowLogRequest): ActiveFlowLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ActiveFlowLog', 'POST', '/', 'json', false, 'json', request);
}

model AddBgpNetworkRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dstCidrBlock: string(name='DstCidrBlock', description='The CIDR block of the virtual private cloud (VPC) or vSwitch that you want to connect to a data center.

This parameter is required.', example='10.10.XX.XX/32', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the virtual border router (VBR) group.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerId: string(name='RouterId', description='The ID of the router that is associated with the router interface.

This parameter is required.', example='vrt-2zeo3xzyf38r4u******', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-bp1qpo0kug3a2*****', position='Query'),
}

model AddBgpNetworkResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='9C7FA9D6-72E0-48A9-A9C3-2DA8569CD5EB'),
}

model AddBgpNetworkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddBgpNetworkResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddBgpNetwork  AddBgpNetworkRequest
  * @return AddBgpNetworkResponse
 */
async function addBgpNetwork(request: AddBgpNetworkRequest): AddBgpNetworkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddBgpNetwork', 'POST', '/', 'json', false, 'json', request);
}

model AddCommonBandwidthPackageIpRequest {
  bandwidthPackageId: string(name='BandwidthPackageId', description='The ID of the Internet Shared Bandwidth instance.

This parameter is required.', example='cbwp-2ze2ic1xd2qeqasdf****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  ipInstanceId: string(name='IpInstanceId', description='The EIP ID.

You can call the [DescribeEipAddresses](https://help.aliyun.com/document_detail/36018.html) operation to query EIP IDs.

This parameter is required.', example='eip-2zeerraiwb7uqwed****', position='Query'),
  ipType?: string(name='IpType', description='The type of IP address. Set the value to **EIP** to associate EIPs with the Internet Shared Bandwidth instance.', example='EIP', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Internet Shared Bandwidth instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AddCommonBandwidthPackageIpResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='01FDDD49-C4B7-4D2A-A8E5-A93915C450A6'),
}

model AddCommonBandwidthPackageIpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddCommonBandwidthPackageIpResponseBody(name='body'),
}

/**
  * @description Before you call this operation, take note of the following items:
  * *   When you call this operation to associate an EIP with an Internet Shared Bandwidth instance, make sure that the EIP meets the following requirements:
  *     *   The EIP uses the pay-as-you-go billing method.
  *     *   The EIP and the Internet Shared Bandwidth instance belong to the same region.
  *     *   The line type of the EIPs is the same as that of the Internet Shared Bandwidth instance.
  * *   **AddCommonBandwidthPackageIp** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeCommonBandwidthPackages](https://help.aliyun.com/document_detail/120309.html) operation to query the status of the operation.
  *     *   If the Internet Shared Bandwidth instance is in the **BINDING** state, the EIP is being associated with the Internet Shared Bandwidth instance. In this state, you can only query the Internet Shared Bandwidth instance and cannot perform other operations.
  *     *   If the Internet Shared Bandwidth instance is in the **BINDED** state, the EIP is associated with the Internet Shared Bandwidth instance.
  * @param request  the request parameters of AddCommonBandwidthPackageIp  AddCommonBandwidthPackageIpRequest
  * @return AddCommonBandwidthPackageIpResponse
 */
async function addCommonBandwidthPackageIp(request: AddCommonBandwidthPackageIpRequest): AddCommonBandwidthPackageIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCommonBandwidthPackageIp', 'POST', '/', 'json', false, 'json', request);
}

model AddCommonBandwidthPackageIpsRequest {
  bandwidthPackageId: string(name='BandwidthPackageId', description='The ID of the Internet Shared Bandwidth instance.

This parameter is required.', example='cbwp-2ze2ic1xd2qeqasdf****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ipInstanceIds: [ string ](name='IpInstanceIds', description='The list of EIPs that you want to associate with the Internet Shared Bandwidth instance.

You can specify at most 10 EIP IDs at a time.

This parameter is required.', position='Query'),
  ipType?: string(name='IpType', description='The type of the IP address. Set the value to **EIP** to associate EIPs with the EIP bandwidth plan.', example='EIP', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Internet Shared Bandwidth instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/448570.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AddCommonBandwidthPackageIpsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='01FDDD49-C4B7-4D2A-A8E5-A93915C450A6'),
}

model AddCommonBandwidthPackageIpsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddCommonBandwidthPackageIpsResponseBody(name='body'),
}

/**
  * @description *   When you call this operation to associate EIPs with an Internet Shared Bandwidth instance, make sure that the EIPs meet the following requirements:
  *     *   The EIPs use the pay-as-you-go billing method.
  *     *   The EIP and the Internet Shared Bandwidth instance belong to the same region.
  *     *   The line type of the EIPs is the same as that of the Internet Shared Bandwidth instance.
  * *   **AddCommonBandwidthPackageIps** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeCommonBandwidthPackages](~~DescribeCommonBandwidthPackages~~) operation to query the status of the task.
  *     *   If the Internet Shared Bandwidth instance is in the **BINDING** state, the EIP is being associated with the Internet Shared Bandwidth instance. In this state, you can only query the Internet Shared Bandwidth instance and cannot perform other operations.
  *     *   If the Internet Shared Bandwidth instance is in the **BINDED** state, the EIP is associated with the Internet Shared Bandwidth instance.
  * @param request  the request parameters of AddCommonBandwidthPackageIps  AddCommonBandwidthPackageIpsRequest
  * @return AddCommonBandwidthPackageIpsResponse
 */
async function addCommonBandwidthPackageIps(request: AddCommonBandwidthPackageIpsRequest): AddCommonBandwidthPackageIpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCommonBandwidthPackageIps', 'POST', '/', 'json', false, 'json', request);
}

model AddGlobalAccelerationInstanceIpRequest {
  globalAccelerationInstanceId: string(name='GlobalAccelerationInstanceId', description='The ID of the shared-bandwidth GA instance.

This parameter is required.', example='ga-Ldefrgbttnyyf****', position='Query'),
  ipInstanceId: string(name='IpInstanceId', description='The EIP ID. You can call the [DescribeEipAddresses](https://help.aliyun.com/document_detail/36018.html) operation to query EIP IDs.

>  Make sure that the billing method of the EIP is pay-as-you-go, and the EIP and the shared-bandwidth GA instance belong to the same region.

This parameter is required.', example='eip-rw434rwfdeaf****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region of the shared-bandwidth GA instance.

You can call the **DescribeRegions** operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AddGlobalAccelerationInstanceIpResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='01FDDD49-C4B7-4D2A-A8E5-A93915C450A6'),
}

model AddGlobalAccelerationInstanceIpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddGlobalAccelerationInstanceIpResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddGlobalAccelerationInstanceIp  AddGlobalAccelerationInstanceIpRequest
  * @return AddGlobalAccelerationInstanceIpResponse
 */
async function addGlobalAccelerationInstanceIp(request: AddGlobalAccelerationInstanceIpRequest): AddGlobalAccelerationInstanceIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddGlobalAccelerationInstanceIp', 'POST', '/', 'json', false, 'json', request);
}

model AddIPv6TranslatorAclListEntryRequest {
  aclEntryComment?: string(name='AclEntryComment', description='The remarks of the ACL entry.

It must be 2 to 100 characters in length, and can contain letters, digits, underscores (_), and hyphens (-). It must start with a letter.', example='clientIP1', position='Query'),
  aclEntryIp: string(name='AclEntryIp', description='The IPv6 address or IPv6 CIDR block that you want to add to the ACL entry, for example, 12XX:0:0:XXXX::0102 or 12XX:0:0:XXXX::/60.

This parameter is required.', example='12XX:0:0:XXXX::0102', position='Query'),
  aclId: string(name='AclId', description='The ID of the ACL to which you want to add the IP entry.

This parameter is required.', example='ipv6transacl-bp1dcdvfe2****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the ACL.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AddIPv6TranslatorAclListEntryResponseBody = {
  aclEntryId?: string(name='AclEntryId', description='The ID of the ACL entry.', example='ipv6transaclentry-bp105jrs****'),
  requestId?: string(name='RequestId', description='The request ID.', example='8B2F5262-6B57-43F2-defr345'),
}

model AddIPv6TranslatorAclListEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddIPv6TranslatorAclListEntryResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI AddIPv6TranslatorAclListEntry is deprecated  * @param request  the request parameters of AddIPv6TranslatorAclListEntry  AddIPv6TranslatorAclListEntryRequest
  * @return AddIPv6TranslatorAclListEntryResponse
 */
// Deprecated
async function addIPv6TranslatorAclListEntry(request: AddIPv6TranslatorAclListEntryRequest): AddIPv6TranslatorAclListEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddIPv6TranslatorAclListEntry', 'POST', '/', 'json', false, 'json', request);
}

model AddPublicIpAddressPoolCidrBlockRequest {
  cidrBlock?: string(name='CidrBlock', description='The CIDR block.

>  You can specify only one of **CidrBlock** and **CidrMask**.', example='47.0.XX.XX/24', position='Query'),
  cidrMask?: int32(name='CidrMask', description='The subnet mask of the CIDR block. After you enter the subnet mask, the system automatically allocates IP addresses.

Valid values: **24** to **28**.

>  You can specify only one of **CidrBlock** and **CidrMask**.', example='24', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  publicIpAddressPoolId: string(name='PublicIpAddressPoolId', description='The ID of the IP address pool.

This parameter is required.', example='pippool-6wetvn6fumkgycssx****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the IP address pool to which you want to add the CIDR block.

This parameter is required.', example='cn-chengdu', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AddPublicIpAddressPoolCidrBlockResponseBody = {
  cidrBlock?: string(name='CidrBlock', description='The CIDR block.', example='47.0.XX.XX/28'),
  requestId?: string(name='RequestId', description='The request ID.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model AddPublicIpAddressPoolCidrBlockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddPublicIpAddressPoolCidrBlockResponseBody(name='body'),
}

/**
  * @description Before you call this operation, take note of the following limits:
  * *   The CIDR block and the IP address pool must belong to the same region.
  * *   The CIDR block and the IP address pool must use the same line type.
  * *   **AddPublicIpAddressPoolCidrBlock** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListPublicIpAddressPoolCidrBlocks](https://help.aliyun.com/document_detail/429436.html) operation to query the status of the task.
  *     *   If the CIDR block is in the **Modifying** state, the CIDR block is being added. In this state, you can only query the CIDR block and cannot perform other operations.
  *     *   If the CIDR block is in the **Created** state, the CIDR block is added.
  * *   You cannot repeatedly call the **AddPublicIpAddressPoolCidrBlock** operation to add a CIDR block to an IP address pool within the specified period of time.
  * @param request  the request parameters of AddPublicIpAddressPoolCidrBlock  AddPublicIpAddressPoolCidrBlockRequest
  * @return AddPublicIpAddressPoolCidrBlockResponse
 */
async function addPublicIpAddressPoolCidrBlock(request: AddPublicIpAddressPoolCidrBlockRequest): AddPublicIpAddressPoolCidrBlockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddPublicIpAddressPoolCidrBlock', 'POST', '/', 'json', false, 'json', request);
}

model AddSourcesToTrafficMirrorSessionRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the traffic mirror session belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

For more information about regions that support traffic mirroring, see [Overview of traffic mirroring](https://help.aliyun.com/document_detail/207513.html).

This parameter is required.', example='cn-hongkong', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMirrorSessionId: string(name='TrafficMirrorSessionId', description='The ID of the traffic mirror session.

This parameter is required.', example='tms-j6cla50buc44ap8tu****', position='Query'),
  trafficMirrorSourceIds: [ string ](name='TrafficMirrorSourceIds', description='The ID of the traffic mirror source. You can specify only an elastic network interface (ENI) as the traffic mirror source. The default value of **N** is **1**, which indicates that you can add only one traffic mirror source to a traffic mirror session.

This parameter is required.', example='eni-j6ccmrl8z3xkvxgw****', maxLength=128, position='Query'),
}

model AddSourcesToTrafficMirrorSessionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='87F70089-5B38-41A8-BAD8-0B55E2F8DC57'),
}

model AddSourcesToTrafficMirrorSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddSourcesToTrafficMirrorSessionResponseBody(name='body'),
}

/**
  * @description *   **AddSourcesToTrafficMirrorSession** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListTrafficMirrorSessions](https://help.aliyun.com/document_detail/261367.html) operation to query the status of the task.
  *     *   If the traffic mirror session is in the **Modifying** state, the traffic mirror source is being added to the traffic mirror session.
  *     *   If the traffic mirror session is in the **Created** state, the traffic mirror source is added to the traffic mirror session.
  * *   You cannot repeatedly call the **AddSourcesToTrafficMirrorSession** operation to add a traffic mirror source to a traffic mirror session within the specified period of time.
  * @param request  the request parameters of AddSourcesToTrafficMirrorSession  AddSourcesToTrafficMirrorSessionRequest
  * @return AddSourcesToTrafficMirrorSessionResponse
 */
async function addSourcesToTrafficMirrorSession(request: AddSourcesToTrafficMirrorSessionRequest): AddSourcesToTrafficMirrorSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSourcesToTrafficMirrorSession', 'POST', '/', 'json', false, 'json', request);
}

model AllocateEipAddressRequest {
  activityId?: long(name='ActivityId', description='The promotion code. This parameter is not required.', example='123456', position='Query'),
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment. Valid values:

*   **false** (default): The automatic payment is disabled. If you select this option, you must go to the Order Center to complete the payment after an order is generated.
*   **true**: The automatic payment is enabled. Payments are automatically complete after an order is generated.

If **InstanceChargeType** is set to **PrePaid**, this parameter is required. If **InstanceChargeType** is set to **PostPaid**, this parameter is not required.', example='false', position='Query'),
  bandwidth?: string(name='Bandwidth', description='The maximum bandwidth of the EIP. Unit: Mbit/s.

*   Valid values when **InstanceChargeType** is set to **PostPaid** and **InternetChargeType** is set to **PayByBandwidth**: **1** to **500**.****
*   Valid values when **InstanceChargeType** is set to **PostPaid** and **InternetChargeType** is set to **PayByTraffic**: **1** to **200**.****
*   Valid values when **InstanceChargeType** is set to **PrePaid**: **1** to **1000**.****

Default value: **5**. Unit: Mbit/s.', example='5', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a token, but you must make sure that the token is unique among different requests. The **client token** can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the value of **RequestId** as the **client token**. The value of **RequestId** is different for each API request.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  description?: string(name='Description', description='The description of the EIP.

The description must be 2 to 256 characters in length. The description must start with a letter but cannot start with `http://` or `https://`.

>  You cannot specify this parameter if you create a subscription EIP.', example='test', position='Query'),
  ISP?: string(name='ISP', description='The line type. Valid values:

*   **BGP** (default): BGP (Multi-ISP) All regions support BGP (Multi-ISP) EIPs.
*   **BGP_PRO**: BGP (Multi-ISP) Pro Only the following regions support BGP (Multi-ISP) Pro lines: China (Hong Kong), Singapore, Japan (Tokyo), Malaysia (Kuala Lumpur), Philippines (Manila), Indonesia (Jakarta), and Thailand (Bangkok).

For more information about BGP (Multi-ISP) and BGP (Multi-ISP) Pro, see the "Line types" section of [What is EIP?](https://help.aliyun.com/document_detail/32321.html)

*   If you are allowed to use single-ISP bandwidth, you can also choose one of the following values:

    *   **ChinaTelecom**
    *   **ChinaUnicom**
    *   **ChinaMobile**
    *   **ChinaTelecom_L2**
    *   **ChinaUnicom_L2**
    *   **ChinaMobile_L2**

*   If your services are deployed in China East 1 Finance, this parameter is required and you must set the value to **BGP_FinanceCloud**.', example='BGP', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the EIP. Valid values:

*   **PrePaid**: subscription
*   **PostPaid** (default): pay-as-you-go

If **InstanceChargeType** is set to **PrePaid**, set **InternetChargeType** to **PayByBandwidth**. If **InstanceChargeType** is set to **PostPaid**, set **InternetChargeType** to **PayByBandwidth** or **PayByTraffic**.', example='PostPaid', position='Query'),
  instanceId?: string(name='InstanceId', description='The EIP ID.

Specify **IpAddress** or **InstanceId**. If you leave both parameters empty, the system randomly allocates an EIP.', example='eip-25877c70gddh****', position='Query'),
  internetChargeType?: string(name='InternetChargeType', description='The metering method of the EIP. Valid values:

*   **PayByBandwidth** (default): pay-by-bandwidth
*   **PayByTraffic**: pay-by-data-transfer

When **InstanceChargeType** is set to **PrePaid**, set **InternetChargeType** to **PayByBandwidth**.

When **InstanceChargeType** is set to **PostPaid**, set **InternetChargeType** to **PayByBandwidth** or **PayByTraffic**.', example='PayByTraffic', position='Query'),
  ipAddress?: string(name='IpAddress', description='The IP address of the EIP that you want to request.

Specify **IpAddress** or **InstanceId**. If you leave both parameters empty, the system randomly allocates an EIP.', example='192.0.XX.XX', position='Query'),
  name?: string(name='Name', description='The EIP name.

The name must be 1 to 128 characters in length and start with a letter, and can contain letters, digits, periods (.), underscores (_), and hyphens (-).

>  You cannot specify this parameter if you create a subscription EIP.', example='EIP1', position='Query'),
  netmode?: string(name='Netmode', description='The network type. Default value: **public**.', example='public', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', description='The subscription duration of the EIP.

Valid values when **PricingCycle** is set to **Month**: **1** to **9**.****

Valid values when **PricingCycle** is set to **Year**: **1** to **5**.****

This parameter must be specified when **InstanceChargeType** is set to **PrePaid**. This parameter is optional when **InstanceChargeType** is set to **PostPaid**.', example='1', position='Query'),
  pricingCycle?: string(name='PricingCycle', description='The billing cycle of the subscription EIP. Valid values:

*   **Month** (default)
*   **Year**

If **InstanceChargeType** is set to **PrePaid**, this parameter is required. If **InstanceChargeType** is set to **PostPaid**, this parameter is not required.', example='Month', position='Query'),
  publicIpAddressPoolId?: string(name='PublicIpAddressPoolId', description='The ID of the IP address pool.

The EIP is allocated from the IP address pool.

By default, the IP address pool feature is unavailable. To use the IP address pool, apply for the privilege in the Quota Center console. For more information, see the "Request a quota increase in the Quota Center console" section in [Manage EIP quotas](https://help.aliyun.com/document_detail/108213.html).', example='pippool-2vc0kxcedhquybdsz****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the EIP belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxazffggds****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityProtectionTypes?: [ string ](name='SecurityProtectionTypes', description='The editions of Anti-DDoS.

*   If you do not specify this parameter, Anti-DDoS Origin Basic is used.
*   If you set the parameter to **AntiDDoS_Enhanced**, Anti-DDoS Pro/Premium is used.

You can specify up to 10 editions of Anti-DDoS.', example='AntiDDoS_Enhanced', position='Query'),
  zone?: string(name='Zone', description='The zone of the EIP.

When the service type of the IP address pool specified by **PublicIpAddressPoolId** is CloudBox, the default value is the zone of the IP address pool.

For more information, see [ListPublicIpAddressPools](https://help.aliyun.com/document_detail/429433.html).', example='cn-hangzhou-a', position='Query'),
}

model AllocateEipAddressResponseBody = {
  allocationId?: string(name='AllocationId', description='The EIP ID.', example='eip-25877c70gddh****'),
  eipAddress?: string(name='EipAddress', description='The EIP that is allocated. This parameter is returned only when **InstanceChargeType** is set to **PostPaid**.', example='192.0.XX.XX'),
  orderId?: long(name='OrderId', description='The order ID. This parameter is returned only when **InstanceChargeType** is set to **PrePaid**.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. This parameter is returned only when **InstanceChargeType** is set to **PostPaid**.', example='rg-acfmxazfdgdg****'),
}

model AllocateEipAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AllocateEipAddressResponseBody(name='body'),
}

/**
  * @description Before you call this operation, make sure that you are familiar with the billing methods and pricing of EIPs. For more information, see [Billing overview](https://help.aliyun.com/document_detail/122035.html).
  * After you call this operation, the system randomly allocates an EIP that is in the **Available** state in the specified region. EIPs support only the ICMP, TCP, and UDP transport layer protocols. The IGMP and SCTP protocols are not supported.
  * @param request  the request parameters of AllocateEipAddress  AllocateEipAddressRequest
  * @return AllocateEipAddressResponse
 */
async function allocateEipAddress(request: AllocateEipAddressRequest): AllocateEipAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateEipAddress', 'POST', '/', 'json', false, 'json', request);
}

model AllocateEipAddressProRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment. Default value: true. Valid values:

*   **false**: Automatic payment is disabled. After an order is generated, you must go to the Order Center to complete the payment.
*   **true**: Automatic payment is enabled. After an order is generated, the payment is automatically completed.

This parameter is required if **InstanceChargeType** is set to **PrePaid**. This parameter is optional if **InstanceChargeType** is set to **PostPaid**.', example='true', position='Query'),
  bandwidth?: string(name='Bandwidth', description='The maximum bandwidth of the specified EIP. Unit: Mbit/s.

*   When **InstanceChargeType** is set to **PostPaid** and **InternetChargeType** is set to **PayByBandwidth**, valid values for **Bandwidth** are **1** to **500**.
*   When **InstanceChargeType** is set to **PostPaid** and **InternetChargeType** is set to **PayByTraffic**, valid values for **Bandwidth** are **1** to **200**.
*   When **InstanceChargeType** is set to **PrePaid**, valid values for **Bandwidth** are **1** to **1000**.

Default value: **5** Mbit /s.', example='5', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='0c593ea1-3bea-11e9-b96b-88e9fe6****', position='Query'),
  ISP?: string(name='ISP', description='The line type. Valid values:

*   **BGP** (default): BGP (Multi-ISP) line The BGP (Multi-ISP) line is supported in all regions.
*   **BGP_PRO**: BGP (Multi-ISP) Pro line The BGP (Multi-ISP) Pro line is supported in the China (Hong Kong), Singapore, Malaysia (Kuala Lumpur), Philippines (Manila), Indonesia (Jakarta), and Thailand (Bangkok) regions.

For more information about the BGP (Multi-ISP) line and BGP (Multi-ISP) Pro line, see the "Line types" section of [What is EIP?](https://help.aliyun.com/document_detail/32321.html)

*   If you are allowed to use single-ISP bandwidth, you can also choose one of the following values:

    *   **ChinaTelecom**
    *   **ChinaUnicom**
    *   **ChinaMobile**
    *   **ChinaTelecom_L2**
    *   **ChinaUnicom_L2**
    *   **ChinaMobile_L2**

*   If your services are deployed in China East 1 Finance, this parameter is required and you must set the parameter to **BGP_FinanceCloud**.', example='BGP', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the EIP. Valid values:

*   **PrePaid**: subscription
*   **PostPaid** (default): pay-as-you-go

Set the value of **InternetChargeType** to **PayByBandwidth** if **InstanceChargeType** is set to **PrePaid**.

Valid values when **InstanceChargeType** is set to **PostPaid**: **PayByBandwidth** or **PayByTraffic**.', example='PostPaid', position='Query'),
  instanceId?: string(name='InstanceId', description='The EIP ID.

Specify **IpAddress** or **InstanceId**. If you leave both parameters empty, the system randomly allocates an EIP.', example='eip-25877c70gddh****', position='Query'),
  internetChargeType?: string(name='InternetChargeType', description='The metering method of the EIP. Valid values:

*   **PayByBandwidth** (default): pay-by-bandwidth.
*   **PayByTraffic**: pay-by-data-transfer.

When **InstanceChargeType** is set to **PrePaid**, you must set **InternetChargeType** to **PayByBandwidth**.

When **InstanceChargeType** is set to **PostPaid**, set **InternetChargeType** to **PayByBandwidth** or **PayByTraffic**.', example='PayByBandwidth', position='Query'),
  ipAddress?: string(name='IpAddress', description='The IP address of the EIP.

Specify **IpAddress** or **InstanceId**. If you leave both parameters empty, the system randomly allocates an EIP.', example='192.0.XX.XX', position='Query'),
  netmode?: string(name='Netmode', description='The network type. By default, this value is set to **public**, which specifies the public network type.', example='public', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', description='The subscription duration.

*   Valid values when **PricingCycle** is set to **Month**: **1 to 9**.****
*   Valid values when **PricingCycle** is set to **Year**: **1 to 3**.****

This parameter is required if **InstanceChargeType** is set to **PrePaid**.

Leave this parameter empty if **InstanceChargeType** is set to **PostPaid**.', example='1', position='Query'),
  pricingCycle?: string(name='PricingCycle', description='The billing cycle of the subscription EIP. Valid values:

*   **Month** (default)
*   **Year**

This parameter is required if **InstanceChargeType** is set to **PrePaid**. This parameter is optional if **InstanceChargeType** is set to **PostPaid**.', example='Month', position='Query'),
  publicIpAddressPoolId?: string(name='PublicIpAddressPoolId', description='The ID of the IP address pool.

The EIP is allocated from the IP address pool.

By default, you cannot use the IP address pool. To use this feature, apply for the privilege in the Quota Center console. For more information, see the "Request a quota increase in the Quota Center console" section of [Manage EIP quotas](https://help.aliyun.com/document_detail/108213.html).', example='pippool-2vc0kxcedhquybdsz****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the EIP belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the EIP belongs.', example='rg-resourcegroup****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityProtectionTypes?: [ string ](name='SecurityProtectionTypes', description='The editions of Anti-DDoS.

*   If you do not specify this parameter, Anti-DDoS Origin Basic is used.
*   If you set the parameter to **AntiDDoS_Enhanced**, Anti-DDoS Pro/Premium is used.

You can configure Anti-DDoS editions for up to 10 EIPs.', position='Query'),
}

model AllocateEipAddressProResponseBody = {
  allocationId?: string(name='AllocationId', description='The EIP ID.', example='eip-25877c70gddh****'),
  eipAddress?: string(name='EipAddress', description='The IP address that is allocated to the EIP. This parameter is returned only when **InstanceChargeType** is set to **PostPaid**.', example='192.0.XX.XX'),
  orderId?: long(name='OrderId', description='The order ID.

This parameter is returned when InstanceChargeType is set to PrePaid. If AutoPay is set to false, you must manually complete the payment in the [Order Center](https://usercenter2-intl.aliyun.com/order/list).', example='20190000'),
  requestId?: string(name='RequestId', description='The request ID.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. This parameter is returned only when **InstanceChargeType** is set to **PostPaid**.', example='rg-resourcegroup****'),
}

model AllocateEipAddressProResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AllocateEipAddressProResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AllocateEipAddressPro  AllocateEipAddressProRequest
  * @return AllocateEipAddressProResponse
 */
async function allocateEipAddressPro(request: AllocateEipAddressProRequest): AllocateEipAddressProResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateEipAddressPro', 'POST', '/', 'json', false, 'json', request);
}

model AllocateEipSegmentAddressRequest {
  bandwidth?: string(name='Bandwidth', description='The maximum bandwidth of the contiguous EIP group. Unit: Mbit/s.

*   Valid values when **InstanceChargeType** is set to **PostPaid** and **InternetChargeType** is set to **PayByBandwidth**: **1** to **500**.****
*   Valid values when **InstanceChargeType** is set to **PostPaid** and **InternetChargeType** is set to **PayByTraffic**: **1** to **200**.****
*   Valid values when **InstanceChargeType** is set to **PrePaid**: **1** to **1000**.****

Default value: **5**. Unit: Mbit/s.', example='5', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a token, but you must make sure that the token is unique among different requests. **ClientToken** can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  eipMask: string(name='EipMask', description='The subnet mask of the contiguous EIP group. Valid values:

*   **28**: applies for 16 contiguous EIPs in each call.
*   **27**: applies for 32 contiguous EIPs in each call.
*   **26**: applies for 64 contiguous EIPs in each call.
*   **25**: applies for 128 contiguous EIPs in each call.
*   **24**: applies for 256 contiguous EIPs in each call.

>  Some IP address are reserved for specific purposes. Therefore, the actual number of the contiguous EIPs may be one, three, or four less than the expected number.

This parameter is required.', example='28', position='Query'),
  internetChargeType?: string(name='InternetChargeType', description='The metering method of contiguous EIPs. Valid values:

*   **PayByBandwidth** (default)
*   **PayByTraffic**', example='PayByBandwidth', position='Query'),
  isp?: string(name='Isp', description='The line type. Valid values:

*   **BGP** (default): BGP (Multi-ISP) line The BGP (Multi-ISP) line is supported in all regions.
*   **BGP_PRO**: BGP (Multi-ISP) Pro line BGP (Multi-ISP) Pro line is supported only in the China (Hong Kong), Singapore, Japan (Tokyo), Malaysia (Kuala Lumpur), Philippines (Manila), Indonesia (Jakarta), and Thailand (Bangkok) regions.

For more information about the BGP (Multi-ISP) line and BGP (Multi-ISP) Pro line, see [EIP line types](https://help.aliyun.com/document_detail/32321.html).

If you are allowed to use single-ISP bandwidth, you can also use one of the following values:

*   **ChinaTelecom**
*   **ChinaUnicom**
*   **ChinaMobile**
*   **ChinaTelecom_L2**
*   **ChinaUnicom_L2**
*   **ChinaMobile_L2**

If your services are deployed in China East 1 Finance, this parameter is required and you must set the parameter to **BGP_FinanceCloud**.', example='BGP', position='Query'),
  netmode?: string(name='Netmode', description='The network type. Set the value to **public**, which specifies the public network type.', example='public', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the contiguous EIP group resides.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-bp67acfmxazb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  zone?: string(name='Zone', description='The zone of the contiguous EIP group.', example='cn-hangzhou-a', position='Query'),
}

model AllocateEipSegmentAddressResponseBody = {
  eipSegmentInstanceId?: string(name='EipSegmentInstanceId', description='The ID of the contiguous EIP group.', example='eipsg-2zett8ba055tbsxme****'),
  requestId?: string(name='RequestId', description='The request ID.', example='F7A6301A-64BA-41EC-8284-8F4838C15D1F'),
}

model AllocateEipSegmentAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AllocateEipSegmentAddressResponseBody(name='body'),
}

/**
  * @description **AllocateEipSegmentAddress** is an asynchronous operation. After a request is sent, the system returns the ID of a contiguous EIP group and runs the task in the background. You can call the [DescribeEipSegment](https://help.aliyun.com/document_detail/156063.html) operation to query the status of the task.
  * *   If the contiguous EIP group is in the **Allocating** state, the EIPs are being allocated. In this case, you can only perform the query operation and cannot perform other operations.
  * *   If the contiguous EIP group is in the **Allocated** state, the EIPs are allocated.
  * @param request  the request parameters of AllocateEipSegmentAddress  AllocateEipSegmentAddressRequest
  * @return AllocateEipSegmentAddressResponse
 */
async function allocateEipSegmentAddress(request: AllocateEipSegmentAddressRequest): AllocateEipSegmentAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateEipSegmentAddress', 'POST', '/', 'json', false, 'json', request);
}

model AllocateIpv6AddressRequest {
  addressType?: string(name='AddressType', description='The type of the IPv6 address. Valid values:

*   IPv6Address (default): an IPv6 address.
*   IPv6Prefix: an IPv6 CIDR block.', example='IPv6Address', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44-0016e04****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   true: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
*   false (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  ipv6Address?: string(name='Ipv6Address', description='The IPv6 address. The IPv6 address must be an idle one that falls within the vSwitch CIDR block.', example='2408:XXXX:153:3921:851c:c435:7b12:1c5f', position='Query'),
  ipv6AddressDescription?: string(name='Ipv6AddressDescription', description='The description of the IPv6 address.', example='ipv6-description', position='Query'),
  ipv6AddressName?: string(name='Ipv6AddressName', description='The name of the IPv6 address.', example='ipv6-name', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID. For more information about resource groups, see related documentation.', example='rg-bp67acfmxazb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the resource. You can specify at most 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N to add to the resource. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length. It cannot start with aliyun or acs: and cannot contain http:// or https://.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tag list.', position='Query'),
  vSwitchId: string(name='VSwitchId', description='The ID of the vSwitch to which the IPv6 address belongs.

This parameter is required.', example='vsw-asdfjlnaue4g****', position='Query'),
}

model AllocateIpv6AddressResponseBody = {
  ipv6Address?: string(name='Ipv6Address', description='The IPv6 address.', example='2408:XXXX:153:3921:851c:c435:7b12:1c5f'),
  ipv6AddressId?: string(name='Ipv6AddressId', description='The ID of the IPv6 address.', example='ipv6-2zen5j4axcp5l5qyy****'),
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxazdjdhd****'),
}

model AllocateIpv6AddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AllocateIpv6AddressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AllocateIpv6Address  AllocateIpv6AddressRequest
  * @return AllocateIpv6AddressResponse
 */
async function allocateIpv6Address(request: AllocateIpv6AddressRequest): AllocateIpv6AddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateIpv6Address', 'POST', '/', 'json', false, 'json', request);
}

model AllocateIpv6InternetBandwidthRequest {
  bandwidth: int32(name='Bandwidth', description='The Internet bandwidth of the IPv6 gateway. Unit: Mbit/s. Valid values: **1 to 5000**.

This parameter is required.', example='2', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  internetChargeType?: string(name='InternetChargeType', description='The metering method of the Internet bandwidth for the IPv6 address. Valid values:

*   **PayByTraffic**: pay-by-data-transfer
*   **PayByBandwidth** (default): pay-by-bandwidth', example='PayByBandwidth', position='Query'),
  ipv6AddressId: string(name='Ipv6AddressId', description='The ID of the IPv6 address.

This parameter is required.', example='ipv6-2zen5j4axcp5l5qyy****', position='Query'),
  ipv6GatewayId: string(name='Ipv6GatewayId', description='The ID of the IPv6 gateway.

This parameter is required.', example='ipv6gw-uf6hcyzu65v98v3du****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the IPv6 gateway is deployed. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-huhehaote', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AllocateIpv6InternetBandwidthResponseBody = {
  internetBandwidthId?: string(name='InternetBandwidthId', description='The ID of the Internet bandwidth that you purchased for the IPv6 gateway.', example='ipv6bw-uf6hcyzu65v98v3du****'),
  ipv6AddressId?: string(name='Ipv6AddressId', description='The ID of the IPv6 address.', example='ipv6-2zen5j4axcp5l5qyy****'),
  requestId?: string(name='RequestId', description='The request ID.', example='6972A26E-99B1-4367-9890-FBDEBB0F5E7D'),
}

model AllocateIpv6InternetBandwidthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AllocateIpv6InternetBandwidthResponseBody(name='body'),
}

/**
  * @description You cannot repeatedly call the **AllocateIpv6InternetBandwidth** operation within a specific time period.
  * @param request  the request parameters of AllocateIpv6InternetBandwidth  AllocateIpv6InternetBandwidthRequest
  * @return AllocateIpv6InternetBandwidthResponse
 */
async function allocateIpv6InternetBandwidth(request: AllocateIpv6InternetBandwidthRequest): AllocateIpv6InternetBandwidthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateIpv6InternetBandwidth', 'POST', '/', 'json', false, 'json', request);
}

model AllocateVpcIpv6CidrRequest {
  addressPoolType?: string(name='AddressPoolType', description='The type of the IPv6 address pool. Set the value to **custom**.

>  This parameter is required.', example='custom', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ipv6CidrBlock?: string(name='Ipv6CidrBlock', description='The IPv6 CIDR block that you want to reserve.', example='2408:XXXX:0:a600::/56', position='Query'),
  ipv6Isp?: string(name='Ipv6Isp', description='The type of IPv6 CIDR block. Valid values:

*   **BGP** (default)
*   **ChinaMobile**
*   **ChinaUnicom**
*   **ChinaTelecom**

> 

*   If your Alibaba Cloud account is allowed to use single-ISP bandwidth, valid values are: **ChinaTelecom**, **ChinaUnicom**, and **ChinaMobile**.

*   You can reserve only one IPv6 CIDR block of each type. After a reserved IPv6 CIDR block of a type is allocated to a VPC, you can reserve another IPv6 CIDR of the type.', example='BGP', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VPC.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AllocateVpcIpv6CidrResponseBody = {
  ipv6CidrBlock?: string(name='Ipv6CidrBlock', description='The IPv6 CIDR block that is reserved.', example='2408:XXXX:0:a600::/56'),
  requestId?: string(name='RequestId', description='The request ID.', example='D20C13EA-2584-53BC-8393-69DE6D98EFF1'),
}

model AllocateVpcIpv6CidrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AllocateVpcIpv6CidrResponseBody(name='body'),
}

/**
  * @description # [](#)
  * The following section describes how to allocate an IPv6 CIDR block to a virtual private cloud (VPC):
  * 1.  Call the AllocateVpcIpv6Cidr operation to reserve the IPv6 CIDR block.
  * 2.  To allocate an IPv6 CIDR block to an existing VPC, call the [AssociateVpcCidrBlock](https://help.aliyun.com/document_detail/146745.html) operation. Set **RegionId**, **VpcId**, and **IPv6CidrBlock** to the IPv6 CIDR bock, and set **IpVersion** to **ipv6**. To allocate an IPv6 CIDR block when you create a VPC, call the [CreateVpc](https://help.aliyun.com/document_detail/35737.html) operation. Set **RegionId** and **Ipv6CidrBlock** to the IPv6 CIDR block, and set **EnableIpv6** to **true**.
  * @param request  the request parameters of AllocateVpcIpv6Cidr  AllocateVpcIpv6CidrRequest
  * @return AllocateVpcIpv6CidrResponse
 */
async function allocateVpcIpv6Cidr(request: AllocateVpcIpv6CidrRequest): AllocateVpcIpv6CidrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateVpcIpv6Cidr', 'POST', '/', 'json', false, 'json', request);
}

model ApplyPhysicalConnectionLOARequest {
  bandwidth?: int32(name='Bandwidth', description='The bandwidth of the Express Connect circuit. Unit: Mbit/s.

Valid values: **2** to **10240**.', example='3', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  companyName: string(name='CompanyName', description='The name of the customer company that requires the Express Connect circuit.

This parameter is required.', example='company', position='Query'),
  constructionTime: string(name='ConstructionTime', description='The time when construction started. Specify the time in the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.

This parameter is required.', example='2022-02-28T16:00:00Z', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the Express Connect circuit.

This parameter is required.', example='pc-bp1qrb3044eqi****', position='Query'),
  lineType: string(name='LineType', description='The type of the Express Connect circuit. Valid values:

*   **MSTP**: MSTP line
*   **MPLSVPN**: MPLSVPN line
*   **FIBRE**: fiber line
*   **Other**: other types

This parameter is required.', example='FIBRE', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  PMInfo?: [ 
    {
      PMCertificateNo?: string(name='PMCertificateNo', description='The ID number of the construction engineer. You can specify the ID number of an ID card or an international passport.

You can configure information for up to 16 construction engineers.', example='5****************9'),
      PMCertificateType?: string(name='PMCertificateType', description='The type of the identity document of the construction engineer. Valid values:

*   **IDCard**
*   **Passport**', example='IDCard'),
      PMContactInfo?: string(name='PMContactInfo', description='The contact information about the construction engineer.', example='1390000****'),
      PMGender?: string(name='PMGender', description='The gender of the construction engineer.', example='Male'),
      PMName?: string(name='PMName', description='The name of the construction engineer.', example='Zhangsan'),
    }
  ](name='PMInfo', description='The information about the construction engineer.', position='Query'),
  peerLocation?: string(name='PeerLocation', description='The geographic location where the Express Connect circuit is deployed.', example='cn-hangzhou', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Express Connect circuit.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  si: string(name='Si', description='The construction company.

This parameter is required.', example='company', position='Query'),
}

model ApplyPhysicalConnectionLOAResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A47BD386-7FDE-42C4-8D22-C6223D18AA1C'),
}

model ApplyPhysicalConnectionLOAResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyPhysicalConnectionLOAResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ApplyPhysicalConnectionLOA  ApplyPhysicalConnectionLOARequest
  * @return ApplyPhysicalConnectionLOAResponse
 */
async function applyPhysicalConnectionLOA(request: ApplyPhysicalConnectionLOARequest): ApplyPhysicalConnectionLOAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyPhysicalConnectionLOA', 'POST', '/', 'json', false, 'json', request);
}

model AssociateEipAddressRequest {
  allocationId: string(name='AllocationId', description='The ID of the EIP that you want to associate with an instance.

This parameter is required.', example='eip-2zeerraiwb7ujsxdc****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance with which you want to associate the EIP.

You can enter the ID of a NAT gateway, CLB instance, ECS instance, secondary ENI, HAVIP, or IP address.

This parameter is required.', example='i-2zebb08phyczzawe****', position='Query'),
  instanceRegionId?: string(name='InstanceRegionId', description='The ID of the region in which the instance with which you want to associate the EIP resides.

>  This parameter is required only when the EIP is added to a shared Global Accelerator (GA) instance.', example='cn-hangzhou', position='Query'),
  instanceType?: string(name='InstanceType', description='The type of the instance with which you want to associate the EIP. Valid values:

*   **Nat**: NAT gateway
*   **SlbInstance**: CLB instance
*   **EcsInstance** (default): ECS instance
*   **NetworkInterface**: secondary ENI
*   **HaVip**: HAVIP
*   **IpAddress**: IP address

>  The default value is **EcsInstance**. If the instance with which you want to associate the EIP is not an ECS instance, this parameter is required.', example='EcsInstance', position='Query'),
  mode?: string(name='Mode', description='The association mode. Valid values:

*   **NAT** (default): NAT mode
*   **MULTI_BINDED**: multi-EIP-to-ENI mode
*   **BINDED**: cut-network interface controller mode

>  This parameter is required only when **InstanceType** is set to **NetworkInterface**.', example='NAT', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The IP address in the CIDR block of the vSwitch.

If you leave this parameter empty, the system allocates a private IP address based on the VPC ID and vSwitch ID.', example='192.168.XX.XX', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region to which the EIP belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the region ID.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the VPC in which an IPv4 gateway is created. The VPC and the EIP must be in the same region.

When you associate an EIP with an IP address, the system can enable the IP address to access the Internet based on VPC route configurations.

>  This parameter is required if **InstanceType** is set to **IpAddress**, which indicates that the EIP is to be associated with an IP address.', example='vpc-257gqcdfvx6n****', position='Query'),
}

model AssociateEipAddressResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model AssociateEipAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssociateEipAddressResponseBody(name='body'),
}

/**
  * @description *   You can associate an EIP with an Elastic Compute Service (ECS) instance, a Classic Load Balancer (CLB) instance, a secondary elastic network interface (ENI), a NAT gateway, or a high-availability virtual IP address (HAVIP) in the same region. The ECS instance and CLB instance must be deployed in a virtual private cloud (VPC).
  * *   **AssociateEipAddress** is an asynchronous operation. After you send a request, the system returns a request ID and runs the task in the background. You can call the [DescribeEipAddresses](https://help.aliyun.com/document_detail/120193.html) operation to query the status of the task.
  *     *   If the EIP is in the **Associating** state, the EIP is being associated. In this state, you can only query the EIP and cannot perform other operations.
  *     *   If the EIP is in the **InUse** state, the EIP is associated.
  * *   You cannot call the **AssociateEipAddress** operation to associate an EIP with multiple instances at a time.
  * @param request  the request parameters of AssociateEipAddress  AssociateEipAddressRequest
  * @return AssociateEipAddressResponse
 */
async function associateEipAddress(request: AssociateEipAddressRequest): AssociateEipAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateEipAddress', 'POST', '/', 'json', false, 'json', request);
}

model AssociateEipAddressBatchRequest {
  bindedInstanceId: string(name='BindedInstanceId', description='The ID of the instance with which you want to associate the EIPs.

The instance can be a NAT gateway or a secondary ENI.

This parameter is required.', example='ngw-hp3akk9irtd69jad****', position='Query'),
  bindedInstanceType: string(name='BindedInstanceType', description='The type of the instance with which you want to associate the EIPs. Valid values:

*   **Nat**: NAT gateway
*   **NetworkInterface**: secondary ENI

This parameter is required.', example='Nat', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  instanceIds: [ string ](name='InstanceIds', description='The EIPs to be associated with the instance.

You must enter at least one EIP. You can enter up to 50 EIPs.

This parameter is required.', position='Query'),
  mode?: string(name='Mode', description='The association mode. Set the value to **MULTI_BINDED**, which specifies the Multi-EIP-to-ENI mode.

This parameter is required only when **BindedInstanceType** is set to **NetworkInterface**.', example='MULTI_BINDED', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the EIPs belong. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AssociateEipAddressBatchResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model AssociateEipAddressBatchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssociateEipAddressBatchResponseBody(name='body'),
}

/**
  * @description *   You can call the **AssociateEipAddressBatch** operation to associate EIPs with an instance in the same region. The instance must be a NAT gateway or a secondary elastic network interface (ENI). For more information about how to associate EIPs with other instances, see [AssociateEipAddress](https://help.aliyun.com/document_detail/120195.html).
  * *   **AssociateEipAddressBatch** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeEipAddresses](https://help.aliyun.com/document_detail/120193.html) operation to query the status of the task.
  *     *   If the EIP is in the **Associating** state, the EIP is being associated. You can only query the EIP and cannot perform other operations.
  *     *   If the EIP is in the **InUse** state, the EIP is associated.
  * *   You cannot call the **AssociateEipAddressBatch** operation to associate an EIP with multiple instances at a time.
  * @param request  the request parameters of AssociateEipAddressBatch  AssociateEipAddressBatchRequest
  * @return AssociateEipAddressBatchResponse
 */
async function associateEipAddressBatch(request: AssociateEipAddressBatchRequest): AssociateEipAddressBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateEipAddressBatch', 'POST', '/', 'json', false, 'json', request);
}

model AssociateHaVipRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, the system uses **RequestId** as **ClientToken**. The value of **RequestId** in each API request may be different.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  haVipId: string(name='HaVipId', description='The ID of the HAVIP.

This parameter is required.', example='havip-2zeo05qre24nhrqpy****', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the ECS instance to be associated with the HAVIP.

This parameter is required.', example='i-faf344422ffsfad****', position='Query'),
  instanceType?: string(name='InstanceType', description='The type of the instance to be associated with the HAVIP. Valid values:

*   **EcsInstance**: an ECS instance
*   **NetworkInterface**: an ENI. If you want to associate the HAVIP with an ENI, this parameter is required.', example='EcsInstance', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the HAVIP belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AssociateHaVipResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C44F62BE-9CE7-4277-B117-69243F3988BF'),
}

model AssociateHaVipResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssociateHaVipResponseBody(name='body'),
}

/**
  * @description When you call this operation, take note of the following limits:
  * *   An HAVIP immediately takes effect after it is associated. You do not need to restart the ECS instance. However, you must associate the HAVIP with the ENI of the ECS instance.
  * *   The HAVIP and ECS instance must belong to the same vSwitch.
  * *   You can associate an HAVIP with at most two ECS instances.
  * *   The ECS instance must be in the **Running** or **Stopped** state.
  * *   The HAVIP must be in the **Available** or **InUse** state.
  * *   The **AssociateHaVip** operation is asynchronous. After you send the request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [DescribeHaVips](https://help.aliyun.com/document_detail/114611.html) operation to query the status of an HAVIP:
  *     *   If the HAVIP is in the **Associating** state, the HAVIP is being associated.
  *     *   If the HAVIP is in the **InUse** state, the HAVIP is associated.
  * *   You cannot repeatedly call the **AssociateHaVip** operation to associate an HAVIP within the specified period of time.
  * @param request  the request parameters of AssociateHaVip  AssociateHaVipRequest
  * @return AssociateHaVipResponse
 */
async function associateHaVip(request: AssociateHaVipRequest): AssociateHaVipResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateHaVip', 'POST', '/', 'json', false, 'json', request);
}

model AssociateNetworkAclRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request.', example='true', position='Query'),
  networkAclId: string(name='NetworkAclId', description='The ID of the network ACL.

This parameter is required.', example='nacl-a2do9e413e0sp****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the network ACL. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the associated resource.', example='vsw-bp1de348lntdw****'),
      resourceType?: string(name='ResourceType', description='The type of resource with which you want to associate the network ACL. Set the value to **VSwitch**.

Valid values of **N**: **0** to **29**. You can associate a network ACL with up to 30 vSwitches.', example='VSwitch'),
    }
  ](name='Resource', description='The information about the associated resources.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AssociateNetworkAclResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4CF20CC7-D1FC-425B-A15B-DF7C8E2131A7'),
}

model AssociateNetworkAclResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssociateNetworkAclResponseBody(name='body'),
}

/**
  * @description ## [](#)Description
  * *   **AssociateNetworkAcl** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeNetworkAclAttributes](https://help.aliyun.com/document_detail/116542.html) operation to query the status of the task.
  *     *   If the network ACL is in the **BINDING** state, the network ACL is being associated.
  *     *   If the network ACL is in the **BINDED** state, the network ACL is associated.
  * *   You cannot repeatedly call the **AssociateNetworkAcl** operation to associate a network ACL within the specified period of time.
  * @param request  the request parameters of AssociateNetworkAcl  AssociateNetworkAclRequest
  * @return AssociateNetworkAclResponse
 */
async function associateNetworkAcl(request: AssociateNetworkAclRequest): AssociateNetworkAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateNetworkAcl', 'POST', '/', 'json', false, 'json', request);
}

model AssociatePhysicalConnectionToVirtualBorderRouterRequest {
  circuitCode?: string(name='CircuitCode', description='The circuit code of the Express Connect circuit. The circuit code is provided by the connectivity provider.

>  Only the Express Connect circuit owner can specify this parameter.', example='longtel001', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  enableIpv6?: string(name='EnableIpv6', description='Specifies whether to enable IPv6. Valid values:

*   **true**
*   **false** (default)', example='false', position='Query'),
  localGatewayIp?: string(name='LocalGatewayIp', description='The IP address of the gateway device on the Alibaba Cloud side.', example='192.168.XX.XX', position='Query'),
  localIpv6GatewayIp?: string(name='LocalIpv6GatewayIp', description='The IPv6 address of the gateway device on the Alibaba Cloud side.', example='2001:XXXX:3c4d:0015:0000:0000:0000:1a2b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerGatewayIp?: string(name='PeerGatewayIp', description='The IP address of the gateway device on the user side.

*   Only the owner of the VBR can set or modify this parameter.
*   When you create a VBR for the owner of the Express Connect circuit, this parameter is required.', example='192.168.XX.XX', position='Query'),
  peerIpv6GatewayIp?: string(name='PeerIpv6GatewayIp', description='The IPv6 address of the gateway device in the data center.

*   Only the owner of the VBR can specify or modify this parameter.
*   When you create a VBR for the owner of the Express Connect circuit, this parameter is required.', example='2001:XXXX:4:4:4:4:4:4', position='Query'),
  peeringIpv6SubnetMask?: string(name='PeeringIpv6SubnetMask', description='The subnet mask of the IPv6 addresses of the gateway devices on the user side and Alibaba Cloud side.

The two IPv6 addresses must fall within the same subnet.', example='2408:4004:cc:400::/56', position='Query'),
  peeringSubnetMask?: string(name='PeeringSubnetMask', description='The subnet mask of the IP addresses of the VBR and the gateway device in the data center.

The two IP addresses must fall within the same subnet.', example='255.255.255.0', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', description='The ID of the Express Connect circuit.

This parameter is required.', example='pc-bp1qrb3044eqixog****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Express Connect circuit.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vbrId: string(name='VbrId', description='The ID of the VBR.

This parameter is required.', example='vbr-bp186tnz6rijyhj******', position='Query'),
  vlanId: string(name='VlanId', description='The VLAN ID of the VBR. Valid values: **0 to 2999**.

>  Only the Express Connect circuit owner can specify this parameter. Two VBRs associated with the same Express Connect circuit cannot use the same VLAN ID.

This parameter is required.', example='123', position='Query'),
}

model AssociatePhysicalConnectionToVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='980960B0-2969-40BF-8542-EBB34FD358AB'),
}

model AssociatePhysicalConnectionToVirtualBorderRouterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssociatePhysicalConnectionToVirtualBorderRouterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AssociatePhysicalConnectionToVirtualBorderRouter  AssociatePhysicalConnectionToVirtualBorderRouterRequest
  * @return AssociatePhysicalConnectionToVirtualBorderRouterResponse
 */
async function associatePhysicalConnectionToVirtualBorderRouter(request: AssociatePhysicalConnectionToVirtualBorderRouterRequest): AssociatePhysicalConnectionToVirtualBorderRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociatePhysicalConnectionToVirtualBorderRouter', 'POST', '/', 'json', false, 'json', request);
}

model AssociateRouteTableRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VPC to which the route table belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId: string(name='RouteTableId', description='The ID of the route table.

This parameter is required.', example='vtb-bp145q7glnuzdvzu2****', position='Query'),
  vSwitchId: string(name='VSwitchId', description='The ID of the vSwitch.

This parameter is required.', example='vsw-25ncdvfaue4****', position='Query'),
}

model AssociateRouteTableResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='DC668356-BCB4-42FD-9BC3-FA2B2E04B634'),
}

model AssociateRouteTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssociateRouteTableResponseBody(name='body'),
}

/**
  * @description **AssociateRouteTable** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeVSwitchAttributes](https://help.aliyun.com/document_detail/94567.html) operation to query the status of the task:
  * *   If the vSwitch is in the **Pending** state, the route table is being associated with the vSwitch.
  * *   If the vSwitch is in the **Available** state, the route table is associated with the vSwitch.
  * @param request  the request parameters of AssociateRouteTable  AssociateRouteTableRequest
  * @return AssociateRouteTableResponse
 */
async function associateRouteTable(request: AssociateRouteTableRequest): AssociateRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model AssociateRouteTableWithGatewayRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not set this parameter, the system automatically uses **RequestId** as **ClientToken**. **RequestId** of each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Valid values:

*   **true**: prechecks the request without performing the operation. The system prechecks the required parameters, request syntax, and limits. If the request fails the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. After the request passes the precheck, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  gatewayId: string(name='GatewayId', description='The ID of the IPv4 gateway.

The IPv4 gateway must be in the **Activated** state.

This parameter is required.', example='ipv4gw-5tsnc6s4ogsedtp3k****', position='Query'),
  gatewayType?: string(name='GatewayType', description='The type of a gateway to be associated with a route table.', example='Ipv4Gateway', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the IPv4 gateway with which you want to associate the gateway route table.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='ap-southeast-6', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId: string(name='RouteTableId', description='The ID of the gateway route table.

This parameter is required.', example='vtb-5ts0ohchwkp3dydt2****', position='Query'),
}

model AssociateRouteTableWithGatewayResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F89C2176-8F10-55EF-90CF-CF99D1E3F816'),
}

model AssociateRouteTableWithGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssociateRouteTableWithGatewayResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AssociateRouteTableWithGateway  AssociateRouteTableWithGatewayRequest
  * @return AssociateRouteTableWithGatewayResponse
 */
async function associateRouteTableWithGateway(request: AssociateRouteTableWithGatewayRequest): AssociateRouteTableWithGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateRouteTableWithGateway', 'POST', '/', 'json', false, 'json', request);
}

model AssociateRouteTablesWithVpcGatewayEndpointRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate a client token. Make sure that a unique client token is used for each request. The **token** can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks your AccessKey pair, the RAM user permissions, and the required parameters. If the request fails the dry run, the DryRunOperation error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  endpointId: string(name='EndpointId', description='The ID of the gateway endpoint to be associated with the route table.

This parameter is required.', example='vpce-m5e371h5clm3uadih****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the gateway endpoint.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableIds: [ string ](name='RouteTableIds', description='The ID of the route table. Valid values of **N** are **1** to **20**, which specifies that you can associate a gateway endpoint with at most 20 route tables at a time.

This parameter is required.', example='vtb-m5elgtm3aj586iitr****', position='Query'),
}

model AssociateRouteTablesWithVpcGatewayEndpointResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='59BDDA2D-FB52-59F9-9DC5-5EA7D6808B8E'),
}

model AssociateRouteTablesWithVpcGatewayEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssociateRouteTablesWithVpcGatewayEndpointResponseBody(name='body'),
}

/**
  * @description When you call this operation, take note of the following limits:
  * *   The gateway endpoint to be associated with the route table cannot be in one of the following states: **Creating**, **Modifying**, **Associating**, **Dissociating**, or **Deleting**.
  * *   The route table cannot be in one of the following states: **Creating**, **Modifying**, **Associating**, **Dissociating**, or **Deleting**.
  * *   The gateway endpoint and route table must belong to the same virtual private cloud (VPC).
  * *   The route table cannot be shared.
  * *   You cannot associate a gateway endpoint with a virtual border router (VBR) route table.
  * *   You can associate a gateway endpoint with at most 20 route tables at a time.
  * *   **AssociateRouteTablesWithVpcGatewayEndpoint** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [GetVpcGatewayEndpointAttribute](https://help.aliyun.com/document_detail/311017.html) operation to query whether a route table is associated with a gateway endpoint.
  *     *   If the **Associating** status is returned, the route table is being associated with the gateway endpoint.
  *     *   If the **Created** status is returned, the route table is associated with the gateway endpoint.
  * *   You cannot repeatedly call the **AssociateRouteTablesWithVpcGatewayEndpoint** operation within a specific period of time.
  * @param request  the request parameters of AssociateRouteTablesWithVpcGatewayEndpoint  AssociateRouteTablesWithVpcGatewayEndpointRequest
  * @return AssociateRouteTablesWithVpcGatewayEndpointResponse
 */
async function associateRouteTablesWithVpcGatewayEndpoint(request: AssociateRouteTablesWithVpcGatewayEndpointRequest): AssociateRouteTablesWithVpcGatewayEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateRouteTablesWithVpcGatewayEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model AssociateVpcCidrBlockRequest {
  iPv6CidrBlock?: string(name='IPv6CidrBlock', description='The IPv6 CIDR block to be added.

>  You must and can specify only one of **SecondaryCidrBlock** and **Ipv6CidrBlock**.', example='2408:XXXX:0:6a::/56', position='Query'),
  ipVersion?: string(name='IpVersion', description='The version of the IP address. Valid values:

*   **IPV4**: the IPv4 address.
*   **IPV6**: the IPv6 address. If you set **IpVersion** to **IPV6** and do not specify **SecondaryCidrBlock**, you can add a secondary IPv6 CIDR block to the VPC.', example='IPV4', position='Query'),
  ipamPoolId?: string(name='IpamPoolId', description='The ID of the IP Address Manager (IPAM) pool that contains IPv4 addresses.', example='ipam-pool-sycmt3p2a9v63i****', position='Query'),
  ipv6Isp?: string(name='Ipv6Isp', description='The type of the IPv6 CIDR block. Valid values:

*   **BGP** (default)
*   **ChinaMobile**
*   **ChinaUnicom**
*   **ChinaTelecom**

>  If your Alibaba Cloud account is allowed to activate single-ISP bandwidth, you can set this parameter to **ChinaTelecom**, **ChinaUnicom**, or **ChinaMobile**.', example='BGP', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VPC to which you want to add a secondary CIDR block.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the region ID.

This parameter is required.', example='ch-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secondaryCidrBlock?: string(name='SecondaryCidrBlock', description='The IPv4 CIDR block to be added. Take note of the following requirements:

*   You can specify one of the following standard IPv4 CIDR blocks or their subnets as the secondary IPv4 CIDR block of the VPC: 192.168.0.0/16, 172.16.0.0/12, and 10.0.0.0/8.
*   You can also use a custom CIDR block other than 100.64.0.0/10, 224.0.0.0/4, 127.0.0.0/8, 169.254.0.0/16, or their subnets as the secondary IPv4 CIDR block of the VPC.

The CIDR block must meet the following requirements:

*   The CIDR block cannot start with 0. The subnet mask must be 8 to 28 bits in length.
*   The CIDR block cannot overlap with the primary CIDR block or an existing secondary CIDR block of the VPC.

>  You must and can specify only one of **SecondaryCidrBlock** and **Ipv6CidrBlock**.', example='192.168.0.0/16', position='Query'),
  secondaryCidrMask?: int32(name='SecondaryCidrMask', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the VPC to which you want to add a secondary CIDR block.

This parameter is required.', example='vpc-o6wrloqsdqc9io3mg****', position='Query'),
}

model AssociateVpcCidrBlockResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C1221A1F-2ACD-4592-8F27-474E02883159'),
}

model AssociateVpcCidrBlockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssociateVpcCidrBlockResponseBody(name='body'),
}

/**
  * @description ## [](#)
  * *   Take note of the following limits:
  *     *   Each VPC can contain up to five secondary IPv4 CIDR blocks.
  *     *   Each VPC can contain up to five secondary IPv6 CIDR blocks.
  * *   You cannot repeatedly call the **AssociateVpcCidrBlock** operation to add secondary CIDR blocks to a VPC within the specified period of time.
  * @param request  the request parameters of AssociateVpcCidrBlock  AssociateVpcCidrBlockRequest
  * @return AssociateVpcCidrBlockResponse
 */
async function associateVpcCidrBlock(request: AssociateVpcCidrBlockRequest): AssociateVpcCidrBlockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateVpcCidrBlock', 'POST', '/', 'json', false, 'json', request);
}

model AssociateVpnGatewayWithCertificateRequest {
  certificateId: string(name='CertificateId', description='The ID of the certificate.

This parameter is required.', example='6bfe4218-ea1d****', position='Query'),
  certificateType: string(name='CertificateType', description='The type of the certificate. Valid values:

*   **Encryption**
*   **Signature**

This parameter is required.', example='Signature', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='0c593ea1-3bea****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without performing the actual request. Valid values:

*   **true**: performs a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request passes the dry run, a request ID is returned. Otherwise, an error message is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, the operation is performed.', example='false', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VPN gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', description='The ID of the VPN gateway.

> You can associate only VPN gateways of the SM type with certificates.

This parameter is required.', example='vpn-bp1q8bgx4xnkm2ogj****', position='Query'),
}

model AssociateVpnGatewayWithCertificateResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model AssociateVpnGatewayWithCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssociateVpnGatewayWithCertificateResponseBody(name='body'),
}

/**
  * @description Before you associate a VPN gateway with an SSL certificate, take note of the following items:
  * *   You can associate only VPN gateways of the ShangMi (SM) type with SSL certificates. You need to associate a VPN gateway of the SM type with two SSL certificates, one as the encryption certificate and the other as the signature certificate.
  * *   The SSL certificates must use the SM algorithm.
  * *   You cannot specify one SSL certificate as both the encryption certificate and signature certificate for one VPN gateway.
  * *   **AssociateVpnGatewayWithCertificate** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeVpnGateway](https://help.aliyun.com/document_detail/73720.html) operation to query the status of the task.
  *     *   If the VPN gateway is in the **updating** state, the SSL certificate is being associated.
  *     *   If the VPN gateway is in the **active** state, the SSL certificate is being associated.
  * *   You cannot call **AssociateVpnGatewayWithCertificate** within a specific period of time.
  * ### [](#)Prerequisites
  * Make sure that you have two SSL certificates that use the SM algorithm in the Certificate Management Service console. For more information about SSL certificates, see [What is Certificate Management Service?](https://help.aliyun.com/document_detail/28535.html).
  * @param request  the request parameters of AssociateVpnGatewayWithCertificate  AssociateVpnGatewayWithCertificateRequest
  * @return AssociateVpnGatewayWithCertificateResponse
 */
async function associateVpnGatewayWithCertificate(request: AssociateVpnGatewayWithCertificateRequest): AssociateVpnGatewayWithCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateVpnGatewayWithCertificate', 'POST', '/', 'json', false, 'json', request);
}

model AttachDhcpOptionsSetToVpcRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, the system uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  dhcpOptionsSetId: string(name='DhcpOptionsSetId', description='The ID of the DHCP options set.

This parameter is required.', example='dopt-o6w0df4epg9zo8isy****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Valid values:

**true**: checks the request without performing the operation. The system checks whether your AccessKey pair is valid, whether the Resource Access Management (RAM) user is authorized, and whether the required parameters are set. If the request fails to pass the check, the corresponding error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.

**false** (default): sends the request. If the request passes the check, a 2XX HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region to which the DHCP options set belongs. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the VPC to be associated with the DHCP options set.

This parameter is required.', example='vpc-sfdkfdjkdf****', position='Query'),
}

model AttachDhcpOptionsSetToVpcResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model AttachDhcpOptionsSetToVpcResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachDhcpOptionsSetToVpcResponseBody(name='body'),
}

/**
  * @description *   The **AttachDhcpOptionsSetToVpc** operation is asynchronous. After you send the request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [DescribeVpcAttribute](https://help.aliyun.com/document_detail/94565.html) operation to query the status of a DHCP options set:
  *     *   If the DHCP options set is in the **Pending** state, the DHCP options set is being associated.
  *     *   If the DHCP options set is in the **InUse** state, the DHCP options set is associated.
  * *   You cannot repeatedly call the **AttachDhcpOptionsSetToVpc** operation to associate DHCP options sets with a VPC within the specified period of time.
  * @param request  the request parameters of AttachDhcpOptionsSetToVpc  AttachDhcpOptionsSetToVpcRequest
  * @return AttachDhcpOptionsSetToVpcResponse
 */
async function attachDhcpOptionsSetToVpc(request: AttachDhcpOptionsSetToVpcRequest): AttachDhcpOptionsSetToVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachDhcpOptionsSetToVpc', 'POST', '/', 'json', false, 'json', request);
}

model AttachVbrToVpconnRequest {
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including required parameters, request syntax, and instance status. If the request fails the dry run, an error message is returned. If the request passes the dry run, the request ID is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the hosted connection.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  token?: string(name='Token', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='CBCE910E-D396-4944-8****', position='Query'),
  vbrId: string(name='VbrId', description='The ID of the VBR.

This parameter is required.', example='vbr-bp133sn3nwjvu7twc****', position='Query'),
  vpconnId: string(name='VpconnId', description='The ID of the hosted connection.

This parameter is required.', example='pc-bp1mrgfbtmc9brre7****', position='Query'),
}

model AttachVbrToVpconnResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5356F028-0F5C-56FC-8574-897D24379041'),
  virtualPhysicalConnection?: string(name='VirtualPhysicalConnection', description='The ID of the hosted connection.', example='pc-bp1mrgfbtmc9brre7****'),
}

model AttachVbrToVpconnResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachVbrToVpconnResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AttachVbrToVpconn  AttachVbrToVpconnRequest
  * @return AttachVbrToVpconnResponse
 */
async function attachVbrToVpconn(request: AttachVbrToVpconnRequest): AttachVbrToVpconnResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachVbrToVpconn', 'POST', '/', 'json', false, 'json', request);
}

model CancelCommonBandwidthPackageIpBandwidthRequest {
  bandwidthPackageId: string(name='BandwidthPackageId', description='The ID of the Internet Shared Bandwidth instance.

This parameter is required.', example='cbwp-bp13d0m4e2qv8xxxxxxxx', position='Query'),
  eipId: string(name='EipId', description='The ID of the EIP that is associated with the Internet Shared Bandwidth instance.

This parameter is required.', example='eip-2zewysoansu0sxxxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Internet Shared Bandwidth instance. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CancelCommonBandwidthPackageIpBandwidthResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='63D187BF-A30A-4DD6-B68D-FF182C96D8A2'),
}

model CancelCommonBandwidthPackageIpBandwidthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelCommonBandwidthPackageIpBandwidthResponseBody(name='body'),
}

/**
  * @description Before you call this operation, take note of the following items:
  * *   After this operation is performed, the maximum bandwidth of the EIP equals that of the Internet Shared Bandwidth instance.
  * *   You cannot repeatedly call the **CancelCommonBandwidthPackageIpBandwidth** operation within a specific time period.
  * @param request  the request parameters of CancelCommonBandwidthPackageIpBandwidth  CancelCommonBandwidthPackageIpBandwidthRequest
  * @return CancelCommonBandwidthPackageIpBandwidthResponse
 */
async function cancelCommonBandwidthPackageIpBandwidth(request: CancelCommonBandwidthPackageIpBandwidthRequest): CancelCommonBandwidthPackageIpBandwidthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelCommonBandwidthPackageIpBandwidth', 'POST', '/', 'json', false, 'json', request);
}

model CancelPhysicalConnectionRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', description='The ID of the Express Connect circuit.

This parameter is required.', example='pc-119mfjzm7****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Express Connect circuit.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CancelPhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model CancelPhysicalConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelPhysicalConnectionResponseBody(name='body'),
}

/**
  * @description You can cancel only an Express Connect circuit that is in the **Initial**, **Approved**, **Allocated**, or **Confirmed** state.
  * @param request  the request parameters of CancelPhysicalConnection  CancelPhysicalConnectionRequest
  * @return CancelPhysicalConnectionResponse
 */
async function cancelPhysicalConnection(request: CancelPhysicalConnectionRequest): CancelPhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelPhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model ChangeResourceGroupRequest {
  newResourceGroupId: string(name='NewResourceGroupId', description='The ID of the new resource group.

>  You can use resource groups to manage resources within your Alibaba Cloud account by group. This helps you resolve issues such as resource grouping and permission management for your Alibaba Cloud account. For more information, see [What is Resource Management?](https://help.aliyun.com/document_detail/94475.html)

This parameter is required.', example='rg-bp1drpcfz9srr393h****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the new resource group belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to obtain the region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId: string(name='ResourceId', description='The ID of the Express Connect circuit whose resource group you want to modify.

This parameter is required.', example='pc-bp16qjewdsunr41m1****', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource. Valid values:

*   **PHYSICALCONNECTION**: Express Connect circuit.
*   **VIRTUALBORDERROUTER**: virtual border router (VBR).
*   **ROUTERINTERFACE**: router interface.

This parameter is required.', example='PHYSICALCONNECTION', position='Query'),
}

model ChangeResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

/**
  * @description ## [](#)
  * You cannot repeatedly call the **ChangeResourceGroup** operation to modify the resource group of the same Express Connect circuit.
  * @param request  the request parameters of ChangeResourceGroup  ChangeResourceGroupRequest
  * @return ChangeResourceGroupResponse
 */
async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model CheckCanAllocateVpcPrivateIpAddressRequest {
  ipVersion?: string(name='IpVersion', description='The version of the private IP address. Valid values:

*   **ipv4** If you want to query an IPv4 address, this parameter is optional.
*   **ipv6** If you want to query an IPv6 address, this parameter is required.', example='ipv4', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  privateIpAddress: string(name='PrivateIpAddress', description='To query whether a private IP address is available, the private IP address must belong to the vSwitch specified by the **VSwitchId** parameter.

This parameter is required.', example='10.0.0.7', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the vSwitch to which the private IP address that you want to query belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-qingdao', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchId: string(name='VSwitchId', description='The ID of the vSwitch to which the private IP address to be queried belongs.

This parameter is required.', example='vsw-m5ew3t46z2drmifnt****', position='Query'),
}

model CheckCanAllocateVpcPrivateIpAddressResponseBody = {
  canAllocate?: boolean(name='CanAllocate', description='Indicates whether the private IP address is available. Valid values:

*   **true**
*   **false**', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='93360B0-2969-40BF-8542-EBB34FD358AB'),
}

model CheckCanAllocateVpcPrivateIpAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckCanAllocateVpcPrivateIpAddressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckCanAllocateVpcPrivateIpAddress  CheckCanAllocateVpcPrivateIpAddressRequest
  * @return CheckCanAllocateVpcPrivateIpAddressResponse
 */
async function checkCanAllocateVpcPrivateIpAddress(request: CheckCanAllocateVpcPrivateIpAddressRequest): CheckCanAllocateVpcPrivateIpAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckCanAllocateVpcPrivateIpAddress', 'POST', '/', 'json', false, 'json', request);
}

model CheckVpnBgpEnabledRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the IPsec-VPN connection.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CheckVpnBgpEnabledResponseBody = {
  bgpEnabled?: boolean(name='BgpEnabled', description='Indicates whether the region supports BGP.

*   **true**
*   **false**', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='DF448D2E-215D-334F-B10D-7C3B087EF996'),
}

model CheckVpnBgpEnabledResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckVpnBgpEnabledResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckVpnBgpEnabled  CheckVpnBgpEnabledRequest
  * @return CheckVpnBgpEnabledResponse
 */
async function checkVpnBgpEnabled(request: CheckVpnBgpEnabledRequest): CheckVpnBgpEnabledResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckVpnBgpEnabled', 'POST', '/', 'json', false, 'json', request);
}

model CompletePhysicalConnectionLOARequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must ensure that it is unique among different requests.

>  If you do not set this parameter, the system automatically uses **RequestId** as **ClientToken**. **RequestId** of each API request may be different.', example='02fb3da4-230e-11e9-8e44-0016e04115b', position='Query'),
  finishWork?: boolean(name='FinishWork', description='Specifies whether the construction is completed. Valid values:

*   **true**
*   **false**', example='true', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the Express Connect circuit.

This parameter is required.', example='pc-bp10tvlhnwkw****', position='Query'),
  lineCode?: string(name='LineCode', description='The circuit code provided by the connectivity provider.', example='aaa111****', position='Query'),
  lineLabel?: string(name='LineLabel', description='The label of the cable in the data center.', example='bbb222****', position='Query'),
  lineSPContactInfo?: string(name='LineSPContactInfo', description='The contact information about line O\\&M.', example='1388888****', position='Query'),
  lineServiceProvider?: string(name='LineServiceProvider', description='The ISP. Valid values:

*   **China Telecom**
*   **China Unicom**
*   **China Mobile**
*   **Other ISPs in China**', example='Other ISPs in China', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Express Connect circuit.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CompletePhysicalConnectionLOAResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F8983C74-E068-4509-B442-89BD82C8F43B'),
}

model CompletePhysicalConnectionLOAResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CompletePhysicalConnectionLOAResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CompletePhysicalConnectionLOA  CompletePhysicalConnectionLOARequest
  * @return CompletePhysicalConnectionLOAResponse
 */
async function completePhysicalConnectionLOA(request: CompletePhysicalConnectionLOARequest): CompletePhysicalConnectionLOAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CompletePhysicalConnectionLOA', 'POST', '/', 'json', false, 'json', request);
}

model ConfirmPhysicalConnectionRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44-0016e0****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', description='The ID of the Express Connect circuit.

This parameter is required.', example='pc-119mf****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Express Connect circuit.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ConfirmPhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='API-20365164-5b0d-460a-83c2-2189972b****'),
}

model ConfirmPhysicalConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfirmPhysicalConnectionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ConfirmPhysicalConnection  ConfirmPhysicalConnectionRequest
  * @return ConfirmPhysicalConnectionResponse
 */
async function confirmPhysicalConnection(request: ConfirmPhysicalConnectionRequest): ConfirmPhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfirmPhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model ConnectRouterInterfaceRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the router interface is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerInterfaceId: string(name='RouterInterfaceId', description='The ID of the initiator router interface.

This parameter is required.', example='ri-2zeo3xzyf38r4urzd****', position='Query'),
}

model ConnectRouterInterfaceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='DE77A7F3-3B74-41C0-A5BC-CAFD188C28B6'),
}

model ConnectRouterInterfaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConnectRouterInterfaceResponseBody(name='body'),
}

/**
  * @description After you call this operation, the router interface enters the **Connecting** state. When the connection is established, it enters the **Active** state.
  * When you call this operation, take note of the following items:
  * *   Only an initiator router interface in the **Idle** state can initiate a connection.
  * *   You can create only one pair of connected router interfaces between two routers.
  * *   You cannot initiate a connection if your Alibaba Cloud account has a router interface with overdue payments.
  * @param request  the request parameters of ConnectRouterInterface  ConnectRouterInterfaceRequest
  * @return ConnectRouterInterfaceResponse
 */
async function connectRouterInterface(request: ConnectRouterInterfaceRequest): ConnectRouterInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConnectRouterInterface', 'POST', '/', 'json', false, 'json', request);
}

model ConvertBandwidthPackageRequest {
  bandwidthPackageId: string(name='BandwidthPackageId', description='The ID of the NAT service plan.

This parameter is required.', example='bwp-bp1xea10o8qxw4f****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotency of the request. You can use the client to generate a client token. Make sure that a unique client token is used for each request. The **token** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/36569.html).', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region where the NAT gateway resides. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ConvertBandwidthPackageResponseBody = {
  convertInstanceId?: string(name='ConvertInstanceId', description='The ID of the Internet Shared Bandwidth instance.', example='bwp-s6lmotmkkf567b****'),
  requestId?: string(name='RequestId', description='The request ID.', example='455AC20C-7061-446A-BDBD-B3BEE0856304'),
}

model ConvertBandwidthPackageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConvertBandwidthPackageResponseBody(name='body'),
}

/**
  * @description Before you convert a NAT service plan to an Internet Shared Bandwidth instance, take note of the following limits:
  * *   You are not charged for the conversion.
  * *   When you convert a NAT service plan to an Internet Shared Bandwidth instance, you can continue to use the SNAT and DNAT features of the NAT gateway, and your workloads are not affected. However, we recommend that you convert your NAT service plan during off-peak hours.
  * *   After the NAT service plan is converted to an Internet Shared Bandwidth instance, the public IP addresses in the NAT service plan are converted to elastic IP addresses (EIPs). The maximum bandwidth and billing method of the Internet Shared Bandwidth instance are the same as those of the NAT service plan.
  * @param request  the request parameters of ConvertBandwidthPackage  ConvertBandwidthPackageRequest
  * @return ConvertBandwidthPackageResponse
 */
async function convertBandwidthPackage(request: ConvertBandwidthPackageRequest): ConvertBandwidthPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConvertBandwidthPackage', 'POST', '/', 'json', false, 'json', request);
}

model CopyNetworkAclEntriesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  networkAclId: string(name='NetworkAclId', description='The ID of the network ACL.

This parameter is required.', example='nacl-a2do9e413e0spxxxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the network ACL. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceNetworkAclId: string(name='SourceNetworkAclId', description='The ID of the network ACL whose rules you want to copy.

This parameter is required.', example='nacl-ghuo9ehg3e0spxxxxxxxx', position='Query'),
}

model CopyNetworkAclEntriesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='6608E72F-F276-440F-ABEF-419971CEC4D1'),
}

model CopyNetworkAclEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CopyNetworkAclEntriesResponseBody(name='body'),
}

/**
  * @description ## [](#)Description
  * *   **CopyNetworkAclEntries** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeNetworkAclAttributes](https://help.aliyun.com/document_detail/116542.html) operation to query the status of the task.
  *     *   If the network ACL is in the **Modifying** state, the rules of the network ACL are being copied.
  *     *   If the network ACL is in the **Available** state, the rules of the network ACL are copied.
  * *   You cannot repeatedly call the **CopyNetworkAclEntries** operation within the specified period of time.
  * @param request  the request parameters of CopyNetworkAclEntries  CopyNetworkAclEntriesRequest
  * @return CopyNetworkAclEntriesResponse
 */
async function copyNetworkAclEntries(request: CopyNetworkAclEntriesRequest): CopyNetworkAclEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CopyNetworkAclEntries', 'POST', '/', 'json', false, 'json', request);
}

model CreateBgpGroupRequest {
  authKey?: string(name='AuthKey', description='The authentication key of the BGP group.', example='!PWZ2****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The description of the BGP group.

The description must be 2 to 256 characters in length. It must start with a letter and cannot start with `http://` or `https://`.', example='BGP', position='Query'),
  ipVersion?: string(name='IpVersion', description='The IP version. Valid values:

*   **IPv4**: This is the default value.
*   **IPv6**: IPv6 is supported only if the VBR for which you want to create the BGP group has IPv6 enabled.', example='IPv4', position='Query'),
  isFakeAsn?: boolean(name='IsFakeAsn', description='Specifies whether to use a fake ASN. Valid values:

*   **false** (default)
*   **true**

>  A router that runs BGP typically belongs to only one AS. If you need to replace an existing AS with a new AS and you cannot immediately modify BGP configurations, you can use fake ASNs to ensure service continuity.', example='true', position='Query'),
  localAsn?: long(name='LocalAsn', description='The custom ASN on the Alibaba Cloud side. Valid values:

*   **45104**
*   **64512~65534**
*   **4200000000~4294967294**

>  **65025** is reserved by Alibaba Cloud. By default, Alibaba Cloud uses **45104** as **LocalAsn**. If you use custom **LocalAsn** in multi-line access scenarios, loops in BGP may occur.', example='45104', position='Query'),
  name?: string(name='Name', description='The name of the BGP group.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerAsn: long(name='PeerAsn', description='The ASN of the gateway device in the data center.

This parameter is required.', example='1****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VBR.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeQuota?: int32(name='RouteQuota', description='The maximum number of routes supported by a BGP peer. Default value: **110**.', example='110', position='Query'),
  routerId: string(name='RouterId', description='The ID of the VBR.

This parameter is required.', example='vbr-bp1ctxy813985gkuk****', position='Query'),
}

model CreateBgpGroupResponseBody = {
  bgpGroupId?: string(name='BgpGroupId', description='The ID of the BGP group.', example='bgpg-bp1k25cyp26cllath****'),
  requestId?: string(name='RequestId', description='The request ID.', example='C1221A1F-2ACD-4592-8F27-474E02883159'),
}

model CreateBgpGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateBgpGroupResponseBody(name='body'),
}

/**
  * @description You can connect a VBR to a data center through BGP. Each BGP group is associated with a VBR. You can add a BGP peer that needs to communicate with a VBR to a BGP group and advertise the BGP network in the VBR.
  * BGP groups are used to simplify BGP configurations. You can add BGP peers that use the same configurations to one BGP group. Before you start, you must create a BGP group with the requested autonomous system number (ASN).
  * When you call this operation, take note of the following limits:
  * *   You can specify only the data center that is connected to the VBR through an Express Connect circuit as a BGP peer.
  * *   VBRs support only BGP-4.
  * *   You can create at most eight BGP peers for each VBR.
  * *   Each BGP peer supports at most 110 dynamic routes.
  * *   The ASN of Alibaba Cloud is 45104. You can specify a 2-byte or 4-byte ASN for the data center.
  * @param request  the request parameters of CreateBgpGroup  CreateBgpGroupRequest
  * @return CreateBgpGroupResponse
 */
async function createBgpGroup(request: CreateBgpGroupRequest): CreateBgpGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBgpGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateBgpPeerRequest {
  bfdMultiHop?: int32(name='BfdMultiHop', description='The BFD hop count. Valid values: **1** to **255**.

This parameter is required only if you enable BFD.

The parameter specifies the maximum number of network devices that a packet can traverse from the source to the destination. Set a value based on your network topology.', example='3', position='Query'),
  bgpGroupId: string(name='BgpGroupId', description='The ID of the BGP group.

This parameter is required.', example='bgpg-wz9f62v4fbg****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not set this parameter, the system uses the value of **RequestId** as **ClientToken**. The value of **RequestId** for each API request is different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  enableBfd?: boolean(name='EnableBfd', description='Specifies whether to enable the Bidirectional Forwarding Detection (BFD) feature. Valid values:

*   **true**: enables BFD.
*   **false**: disables BFD.', example='true', position='Query'),
  ipVersion?: string(name='IpVersion', description='The IP version. Valid values:

*   **IPv4**: This is the default value.
*   **IPv6**: IPv6 is supported only if the VBR for which you want to create the BGP group has IPv6 enabled.', example='IPv4', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerIpAddress?: string(name='PeerIpAddress', description='The IP address of the BGP peer.', example='116.62.XX.XX', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the BGP group belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateBgpPeerResponseBody = {
  bgpPeerId?: string(name='BgpPeerId', description='The ID of the BGP peer.', example='bgp-m5eoyp2mwegk8ce9v****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D4B7649A-61BB-4C64-A586-1DFF1EDA6A42'),
}

model CreateBgpPeerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateBgpPeerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateBgpPeer  CreateBgpPeerRequest
  * @return CreateBgpPeerResponse
 */
async function createBgpPeer(request: CreateBgpPeerRequest): CreateBgpPeerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBgpPeer', 'POST', '/', 'json', false, 'json', request);
}

model CreateCommonBandwidthPackageRequest {
  bandwidth: int32(name='Bandwidth', description='The maximum bandwidth of the Internet Shared Bandwidth instance. Unit: Mbit/s.

Valid values: **1** to **1000**. Default value: **1**.

This parameter is required.', example='1000', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  description?: string(name='Description', description='The description of the Internet Shared Bandwidth instance.

The description must be 0 to 256 characters in length and cannot start with `http://` or `https://`.', example='abc', position='Query'),
  ISP?: string(name='ISP', description='The line type. Valid values:

*   **BGP** (default) All regions support BGP (Multi-ISP).
*   **BGP_PRO** BGP (Multi-ISP) Pro lines are available in the China (Hong Kong), Singapore, Japan (Tokyo), Philippines (Manila), Malaysia (Kuala Lumpur), Indonesia (Jakarta), and Thailand (Bangkok) regions.

If you are allowed to use single-ISP bandwidth, you can also use one of the following values:

*   **ChinaTelecom**
*   **ChinaUnicom**
*   **ChinaMobile**
*   **ChinaTelecom_L2**
*   **ChinaUnicom_L2**
*   **ChinaMobile_L2**

If your services are deployed in China East 1 Finance, this parameter is required and you must set the value to **BGP_FinanceCloud**.', example='BGP', position='Query'),
  internetChargeType?: string(name='InternetChargeType', description='The billing method of the Internet Shared Bandwidth instance. Set the value to **PayByTraffic**, which specifies the pay-by-data-transfer billing method.', position='Query'),
  name?: string(name='Name', description='The name of the Internet Shared Bandwidth instance.

The name must be 0 to 128 characters in length and cannot start with `http://` or `https://`.', example='test123', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  ratio?: int32(name='Ratio', description='The percentage of the minimum bandwidth commitment. Set the parameter to **20**.

> This parameter is available only on the Alibaba Cloud China site.', example='20', minimum=0, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Internet Shared Bandwidth instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxazdjdhd****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityProtectionTypes?: [ string ](name='SecurityProtectionTypes', example='AntiDDoS_Enhanced', position='Query'),
  zone?: string(name='Zone', description='The zone of the Internet Shared Bandwidth instance. This parameter is required if you create an Internet Shared Bandwidth instance for a cloud box.', example='ap-southeast-1-lzdvn-cb', position='Query'),
}

model CreateCommonBandwidthPackageResponseBody = {
  bandwidthPackageId?: string(name='BandwidthPackageId', description='The ID of the Internet Shared Bandwidth instance.', example='cbwp-bp1vevu8h3ieh****'),
  requestId?: string(name='RequestId', description='The request ID.', example='FF39F653-033E-4CD9-9EDF-3CCA5A71FBC3'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxazdjdhd****'),
}

model CreateCommonBandwidthPackageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCommonBandwidthPackageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCommonBandwidthPackage  CreateCommonBandwidthPackageRequest
  * @return CreateCommonBandwidthPackageResponse
 */
async function createCommonBandwidthPackage(request: CreateCommonBandwidthPackageRequest): CreateCommonBandwidthPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCommonBandwidthPackage', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustomerGatewayRequest {
  asn?: string(name='Asn', description='The autonomous system number (ASN) of the gateway device in the data center.

**Asn** is a 4-byte number. You can enter the number in two segments and separate the first 16 bits from the following 16 bits with a period (.). Enter the number in each segment in the decimal format.

For example, if you enter 123.456, the ASN is: 123 × 65536 + 456 = 8061384.', example='65530', position='Query'),
  authKey?: string(name='AuthKey', description='The authentication key of the BGP routing protocol for the gateway device in the data center.

The key must be 1 to 64 characters in length. It can contain only ASCII characters and cannot contain spaces or question marks (?).', example='AuthKey****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44****', position='Query'),
  description?: string(name='Description', description='The description of the customer gateway.

The description must be 1 to 100 characters in length, and cannot start with `http://` or `https://`.', example='desctest', position='Query'),
  ipAddress: string(name='IpAddress', description='The public IP address of the gateway device in the data center.

This parameter is required.', example='101.12.XX.XX', position='Query'),
  name?: string(name='Name', description='The name of the customer gateway.

The name must be 1 to 100 characters in length, and cannot start with `http://` or `https://`.', example='nametest', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the customer gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the customer gateway belongs.

- You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/158855.html) operation to query the resource group list.

- If you do not specify a resource group, the customer gateway will belong to the default resource group after being created.', example='rg-aek2qo2h4jy****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key. The tag key cannot be an empty string.

It can be at most 64 characters in length, and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.

You can specify at most 20 tag keys in each call.', example='TagKey'),
      value?: string(name='Value', description='The tag value.

The tag value can be an empty string and cannot exceed 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.

Each tag key corresponds to one tag value. You can specify at most 20 tag values in each call.', example='TagValue'),
    }
  ](name='Tags', description='The tag value.

The tag value can be an empty string and cannot exceed 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.

Each tag key corresponds to one tag value. You can specify up to 20 tag values in each call.', position='Query'),
}

model CreateCustomerGatewayResponseBody = {
  createTime?: long(name='CreateTime', description='The timestamp generated when the customer gateway was created. Unit: milliseconds.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1493363486000'),
  customerGatewayId?: string(name='CustomerGatewayId', description='The ID of the customer gateway.', example='cgw-bp1jrawp82av6bws9****'),
  description?: string(name='Description', description='The description of the customer gateway.', example='desctest'),
  ipAddress?: string(name='IpAddress', description='The public IP address of the gateway device in the data center.', example='101.12.XX.XX'),
  name?: string(name='Name', description='The name of the customer gateway.', example='nametest'),
  requestId?: string(name='RequestId', description='The request ID.', example='D32B3C26-6C6C-4988-93E9-D2A6444CE6AE'),
}

model CreateCustomerGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCustomerGatewayResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCustomerGateway  CreateCustomerGatewayRequest
  * @return CreateCustomerGatewayResponse
 */
async function createCustomerGateway(request: CreateCustomerGatewayRequest): CreateCustomerGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomerGateway', 'POST', '/', 'json', false, 'json', request);
}

model CreateDefaultVSwitchRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not set this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  ipv6CidrBlock?: int32(name='Ipv6CidrBlock', description='The last eight bits of the IPv6 CIDR block of the vSwitch. Valid values: **0** to **255**.', example='12', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the default vSwitch.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  zoneId: string(name='ZoneId', description='The zone ID of the default vSwitch.

You can call the [DescribeZones](https://help.aliyun.com/document_detail/36064.html) operation to query the most recent zone list.

This parameter is required.', example='cn-hangzhou-b', position='Query'),
}

model CreateDefaultVSwitchResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the default vSwitch.', example='vsw-bp1a4b5qhmxftjimq****'),
}

model CreateDefaultVSwitchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDefaultVSwitchResponseBody(name='body'),
}

/**
  * @description When you call this operation, take note of the following limits:
  * *   The first IP address and last three IP addresses of a vSwitch CIDR block are reserved. For example, if the CIDR block of a vSwitch is 192.168.1.0/24, the IP addresses 192.168.1.0, 192.168.1.253, 192.168.1.254, and 192.168.1.255 are reserved.
  * *   The number of instances in the default vSwitch cannot exceed the remaining number of instances supported by the VPC (15,000 minus the number of existing instances).
  * *   Default vSwitches do not support multicasting or broadcasting.
  * *   After you create a default vSwitch, you cannot modify its CIDR block.
  * *   **CreateDefaultVSwitch** is an asynchronous operation. After you send a request, the system returns a request ID and runs the task in the background. You can call the [DescribeVSwitchAttributes](https://help.aliyun.com/document_detail/94567.html) operation to query the status of a default vSwitch:
  *     *   If a default vSwitch is in the **Pending** state, it is being configured.
  *     *   If a default vSwitch is in the **Available** state, it is available.
  * *   If a default vSwitch already exists in a region, you cannot call this operation to create a default vSwitch in this region.
  * *   Before you create a default vSwitch, make sure that a default VPC is created. You can call the [CreateDefaultVpc](https://help.aliyun.com/document_detail/609152.html) operation to create a default VPC.
  * @param request  the request parameters of CreateDefaultVSwitch  CreateDefaultVSwitchRequest
  * @return CreateDefaultVSwitchResponse
 */
async function createDefaultVSwitch(request: CreateDefaultVSwitchRequest): CreateDefaultVSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDefaultVSwitch', 'POST', '/', 'json', false, 'json', request);
}

model CreateDefaultVpcRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  enableIpv6?: boolean(name='EnableIpv6', description='Specifies whether to enable IPv6. Valid values:

*   **false** (default)
*   **true**', example='false', position='Query'),
  ipv6CidrBlock?: string(name='Ipv6CidrBlock', description='The IPv6 CIDR block of the default VPC.

> When **EnableIpv6** is set to **true**, this parameter is required.', example='2408:XXXX:346:b600::/56', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the default VPC belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmystnjq4****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateDefaultVpcResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  routeTableId?: string(name='RouteTableId', description='The route table ID that is automatically created by the system after you create a default VPC.', example='vtb-bp1q1uirugzb1x32m****'),
  vRouterId?: string(name='VRouterId', description='The vRouter ID that is automatically created by the system after you create a default VPC.', example='vrt-bp1lhl0taikrteen8****'),
  vpcId?: string(name='VpcId', description='The ID of the default VPC.', example='vpc-bp15zckdt37pq72zv****'),
}

model CreateDefaultVpcResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDefaultVpcResponseBody(name='body'),
}

/**
  * @description ## Usage notes
  * When you call this operation, take note of the following items:
  * *   After you create a default VPC, you cannot change its CIDR block. However, you can add secondary IPv4 CIDR blocks to it.
  * *   In each default VPC, cloud services can use a maximum of 60,000 private IP addresses. You cannot increase the quota.
  * *   After you create a default VPC, a vRouter and a route table are automatically created for the VPC.
  * *   At most three user CIDR blocks can be added to a VPC. If a user CIDR block includes another user CIDR block, the one with the shorter subnet mask takes effect. For example, if 10.0.0.0/8 and 10.1.0.0/16 are specified, only 10.0.0.0/8 takes effect.
  * *   **CreateDefaultVpc** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeVpcAttribute](https://help.aliyun.com/document_detail/94565.html) operation to query the status of the task:
  *     *   If the default VPC is in the **Pending** state, the VPC is being configured.
  *     *   If the default VPC is in the **Available** state, the VPC is available.
  * *   You cannot repeatedly call the **CreateDefaultVpc** operation within a specific time period.
  * *   You can create only one default VPC in each region.
  * @param request  the request parameters of CreateDefaultVpc  CreateDefaultVpcRequest
  * @return CreateDefaultVpcResponse
 */
async function createDefaultVpc(request: CreateDefaultVpcRequest): CreateDefaultVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDefaultVpc', 'POST', '/', 'json', false, 'json', request);
}

model CreateDhcpOptionsSetRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  dhcpOptionsSetDescription?: string(name='DhcpOptionsSetDescription', description='The description of the DHCP options set.

The description must be 1 to 256 characters in length. It must start with a letter and cannot start with `http://` or `https://`.', example='description', position='Query'),
  dhcpOptionsSetName?: string(name='DhcpOptionsSetName', description='The name of the DHCP options set.

The name must be 1 to 128 characters in length and can contain letters, digits, underscores (_), and hyphens (-). It must start with a letter.', example='name', position='Query'),
  domainName?: string(name='DomainName', description='The root domain. For example, you can set the value to example.com.

After a DHCP options set is associated with a virtual private cloud (VPC), the root domain in the DHCP options set is automatically synchronized with the ECS instances in the VPC.', example='example.com', position='Query'),
  domainNameServers?: string(name='DomainNameServers', description='The IP address of the DNS server. You can enter at most four DNS server IP addresses. Separate IP addresses with commas (,).

>  If no IP address is specified, the Elastic Compute Service (ECS) instance uses the IP addresses 100.100.2.136 and 100.100.2.138, which are provided by Alibaba Cloud by default.', example='192.XX.XX.123', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request.

**true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.

**false** (default): performs a dry run and sends the request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  ipv6LeaseTime?: string(name='Ipv6LeaseTime', description='The lease time of the IPv6 addresses for the DHCP options set.

*   If you use hours as the unit, valid values are **24h to 1176h** and **87600h to 175200h**. Default value: **87600h**.
*   If you use days as the unit, valid values are **1d to 49d** and **3650d to 7300d**. Default value: **3650d**.

>  When you enter a value, you must also specify the unit.', example='3650d', position='Query'),
  leaseTime?: string(name='LeaseTime', description='The lease time of the IPv4 addresses for the DHCP options set.

*   If you use hours as the unit, valid values are **24h to 1176h** and **87600h to 175200h**. Default value: **87600h**.
*   If you use days as the unit, valid values are **1d to 49d** and **3650d to 7300d**. Default value: **3650d**.

>  When you enter a value, you must also specify the unit.', example='3650d', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region to which the DHCP options set belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the DHCP options set belongs.', example='rg-acfmxazb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the resource. You can specify up to 20 tag keys. The tag key cannot be an empty string.

A tag key can be at most 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N to add to the resource. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length, and cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tag of the resource.', position='Query'),
}

model CreateDhcpOptionsSetResponseBody = {
  dhcpOptionsSetId?: string(name='DhcpOptionsSetId', description='The ID of the DHCP options set that is created.', example='dopt-o6w0df4epg9zo8isy****'),
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the DHCP options set belongs.', example='rg-acfmxazb4ph****'),
}

model CreateDhcpOptionsSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDhcpOptionsSetResponseBody(name='body'),
}

/**
  * @description *   **CreateDhcpOptionsSet** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [GetDhcpOptionsSet](https://help.aliyun.com/document_detail/448820.html) to query the status of the task.
  *     *   If the vSwitch is in the **Pending** state, the DHCP options set is being configured.
  *     *   If the vSwitch is in the **Available** state, the DHCP options set is available.
  * @param request  the request parameters of CreateDhcpOptionsSet  CreateDhcpOptionsSetRequest
  * @return CreateDhcpOptionsSetResponse
 */
async function createDhcpOptionsSet(request: CreateDhcpOptionsSetRequest): CreateDhcpOptionsSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDhcpOptionsSet', 'POST', '/', 'json', false, 'json', request);
}

model CreateExpressCloudConnectionRequest {
  bandwidth: int32(name='Bandwidth', description='The bandwidth for ECC, which corresponds to the bandwidth for the underlying circuit.

Unit: Mbit/s.

This parameter is required.', example='2', position='Query'),
  contactMail?: string(name='ContactMail', description='The email address of the contact who applies for ECC.', example='XX@example.com', position='Query'),
  contactTel?: string(name='ContactTel', description='The phone number of the contact who applies for ECC.', example='132*********', position='Query'),
  description?: string(name='Description', description='The description of ECC.

The description must be 2 to 256 characters in length. It must start with a letter but cannot start with `http://` or `https://`.', example='ECC', position='Query'),
  IDCardNo?: string(name='IDCardNo', description='The ID card number of the contact who applies for ECC.', example='32*****************', position='Query'),
  idcSP: string(name='IdcSP', description='The Internet service provider (ISP) for the data center.

This parameter is required.', example='CU', position='Query'),
  name?: string(name='Name', description='The name of the ECC instance.

The name must be 2 to 128 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter but cannot start with `http://` or `https://`.', example='doctest', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerCity?: string(name='PeerCity', description='The city where the data center is located.', example='Hangzhou', position='Query'),
  peerLocation: string(name='PeerLocation', description='The geographical location of the data center.

> It must be accurate to house number-floor-room number-server rack number.

This parameter is required.', example='\\*\\*city\\*\\*district/county\\*\\*road\\*\\*number\\*\\*property or building name\\*\\*building\\*\\*floor\\*\\*room number\\*\\*server rack number\\*\\*server rack name\\*\\*device\\*\\*port', position='Query'),
  portType?: string(name='PortType', description='The port of the Express Connect circuit. Valid values:

*   100Base-T
*   1000Base-T
*   1000Base-LX
*   10GBase-T
*   10GBase-LR', example='100Base-T', position='Query'),
  redundantEccId?: string(name='RedundantEccId', description='The ID of the standby Express Connect circuit.', example='ecc-d****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the ECC instance.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateExpressCloudConnectionResponseBody = {
  eccId?: string(name='EccId', description='The ID of the ECC instance.', example='ecc-jg************'),
  requestId?: string(name='RequestId', description='The request ID.', example='C004F022-1CC2-4958-9937-675513A2CD7E'),
}

model CreateExpressCloudConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateExpressCloudConnectionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateExpressCloudConnection  CreateExpressCloudConnectionRequest
  * @return CreateExpressCloudConnectionResponse
 */
async function createExpressCloudConnection(request: CreateExpressCloudConnectionRequest): CreateExpressCloudConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateExpressCloudConnection', 'POST', '/', 'json', false, 'json', request);
}

model CreateExpressConnectTrafficQosRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** in each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  qosDescription?: string(name='QosDescription', description='The description of the QoS policy.

The description must be 0 to 256 characters in length and cannot start with `http://` or `https://`.', example='qos-test', position='Query'),
  qosName?: string(name='QosName', description='The name of the QoS policy.

The name must be 0 to 128 characters in length and cannot start with `http://` or `https://`.', example='qos-test', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the QoS policy.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model CreateExpressConnectTrafficQosResponseBody = {
  qosId?: string(name='QosId', description='The ID of the QoS policy.', example='qos-2giu0a6vd5x0mv4700'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC668356-BCB4-42FD-9BC3-FA2B2E04B634'),
}

model CreateExpressConnectTrafficQosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateExpressConnectTrafficQosResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateExpressConnectTrafficQos  CreateExpressConnectTrafficQosRequest
  * @return CreateExpressConnectTrafficQosResponse
 */
async function createExpressConnectTrafficQos(request: CreateExpressConnectTrafficQosRequest): CreateExpressConnectTrafficQosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateExpressConnectTrafficQos', 'POST', '/', 'json', false, 'json', request);
}

model CreateExpressConnectTrafficQosQueueRequest {
  bandwidthPercent?: string(name='BandwidthPercent', description='The percentage of bandwidth allocated to the QoS queue.

*   If QueueType is set to **Medium**, this parameter is required. Valid values: 1 to 100.
*   If QueueType is set to **Default**, a value of - is returned.', example='100', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. ClientToken can contain only ASCII characters.

>  If you do not specify this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  qosId: string(name='QosId', description='The ID of the QoS policy.

This parameter is required.', example='qos-2giu0a6vd5x0mv4700', position='Query'),
  queueDescription?: string(name='QueueDescription', description='The description of the QoS queue.

It must be 0 to 256 characters in length and cannot start with `http://` or `https://`.', example='qos-queue-test', position='Query'),
  queueName?: string(name='QueueName', description='The name of the QoS queue.

It must be 0 to 128 characters in length and cannot start with `http://` or `https://`.', example='qos-queue-test', position='Query'),
  queueType: string(name='QueueType', description='The priority of the QoS queue. Valid values:

*   **High**
*   **Medium**
*   **Default**: default queue.

> You cannot create a QoS queue of the default priority.

This parameter is required.', example='High', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the QoS policy.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model CreateExpressConnectTrafficQosQueueResponseBody = {
  qosId?: string(name='QosId', description='The ID of the QoS policy.', example='qos-2giu0a6vd5x0mv4700'),
  queueId?: string(name='QueueId', description='The ID of the QoS queue.', example='qos-queue-9nyx2u7n71s2rcy4n5'),
  requestId?: string(name='RequestId', description='The request ID.', example='4CF20CC7-D1FC-425B-A15B-DF7C8E2131A7'),
}

model CreateExpressConnectTrafficQosQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateExpressConnectTrafficQosQueueResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateExpressConnectTrafficQosQueue  CreateExpressConnectTrafficQosQueueRequest
  * @return CreateExpressConnectTrafficQosQueueResponse
 */
async function createExpressConnectTrafficQosQueue(request: CreateExpressConnectTrafficQosQueueRequest): CreateExpressConnectTrafficQosQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateExpressConnectTrafficQosQueue', 'POST', '/', 'json', false, 'json', request);
}

model CreateExpressConnectTrafficQosRuleRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dstCidr?: string(name='DstCidr', description='The destination IPv4 CIDR block that matches the QoS rule traffic.

> When this parameter is unavailable, specify **SrcIPv6Cidr** or **DstIPv6Cidr**.', example='1.1.1.0/24', position='Query'),
  dstIPv6Cidr?: string(name='DstIPv6Cidr', description='The destination IPv6 CIDR block that matches the QoS rule traffic.

> When this parameter is unavailable, specify **SrcCidr** or **DstCidr**.', example='2001:0db8:1234:5678::/64', position='Query'),
  dstPortRange?: string(name='DstPortRange', description='The range of destination ports that match the QoS rule traffic. Valid values: **0** to **65535**. If the traffic does not match, the value is -1. You can specify only one port. The start port number must be the same as the end port number. Different protocols correspond to different ports. Valid values:

*   **ALL** (uneditable): -1/-1.
*   **ICMP(IPv4)** (uneditable): -1/-1.
*   **ICMPv6(IPv6)** (uneditable): -1/-1.
*   **TCP** (editable): -1/-1.
*   **UDP** (editable): -1/-1.
*   **GRE** (uneditable): -1/-1.
*   **SSH** (uneditable): 22/22.
*   **Telnet** (uneditable): 23/23.
*   **HTTP** (uneditable): 80/80.
*   **HTTPS** (uneditable): 443/443.
*   **MS SQL** (uneditable): 1443/1443.
*   **Oracle** (uneditable): 1521/1521.
*   **MySql** (uneditable): 3306/3306.
*   **RDP** (uneditable): 3389/3389.
*   **PostgreSQL** (uneditable): 5432/5432.
*   **Redis** (uneditable): 6379/6379.', example='-1/-1', position='Query'),
  matchDscp?: int32(name='MatchDscp', description='The DSCP value that matches the QoS rule traffic. Valid values: **0** to **63**. If no value is matched, the value is -1.', example='1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  priority: int32(name='Priority', description='The priority of the QoS rule. Valid values: **1** to **9000**. A larger value indicates a higher priority. The priority of each QoS rule must be unique in the same QoS policy.

This parameter is required.', example='1', position='Query'),
  protocol: string(name='Protocol', description='The protocol of the QoS rule. Valid values:

*   **ALL**
*   **ICMP(IPv4)**
*   **ICMPv6(IPv6)**
*   **TCP**
*   **UDP**
*   **GRE**
*   **SSH**
*   **Telnet**
*   **HTTP**
*   **HTTPS**
*   **MS SQL**
*   **Oracle**
*   **MySql**
*   **RDP**
*   **PostgreSQL**
*   **Redis**

This parameter is required.', example='ALL', position='Query'),
  qosId: string(name='QosId', description='The ID of the QoS policy.

This parameter is required.', example='qos-2giu0a6vd5x0mv4700', position='Query'),
  queueId: string(name='QueueId', description='The ID of the QoS queue.

This parameter is required.', example='qos-queue-9nyx2u7n71s2rcy4n5', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the QoS policy.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  remarkingDscp?: int32(name='RemarkingDscp', description='The new DSCP value. Valid values: **0** to **63**. If you do not change the value, set the value to -1.', example='1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  ruleDescription?: string(name='RuleDescription', description='The description of the QoS rule.

The description must be 0 to 256 characters in length and cannot start with `http://` or `https://`.', example='qos-rule-test', position='Query'),
  ruleName?: string(name='RuleName', description='The name of the QoS rule.

The name must be 0 to 128 characters in length and cannot start with `http://` or `https://`.', example='qos-rule-test', position='Query'),
  srcCidr?: string(name='SrcCidr', description='The source IPv4 CIDR block that matches the QoS rule traffic.

> When this parameter is unavailable, specify **SrcIPv6Cidr** or **DstIPv6Cidr**.', example='1.1.1.0/24', position='Query'),
  srcIPv6Cidr?: string(name='SrcIPv6Cidr', description='The source IPv6 CIDR block that matches the QoS rule traffic.

> When this parameter is unavailable, specify **SrcCidr** or **DstCidr**.', example='2001:0db8:1234:5678::/64', position='Query'),
  srcPortRange?: string(name='SrcPortRange', description='The range of source ports that match the QoS rule traffic. Valid values: **0** to **65535**. If the traffic does not match, the value is -1. You can specify only one port. The start port number must be the same as the end port number.', example='-1/-1', position='Query'),
}

model CreateExpressConnectTrafficQosRuleResponseBody = {
  qosId?: string(name='QosId', description='The ID of the QoS policy.', example='qos-2giu0a6vd5x0mv4700'),
  queueId?: string(name='QueueId', description='The ID of the QoS queue.', example='qos-queue-9nyx2u7n71s2rcy4n5'),
  requestId?: string(name='RequestId', description='The request ID.', example='606998F0-B94D-48FE-8316-ACA81BB230DA'),
  ruleId?: string(name='RuleId', description='The ID of the QoS rule.', example='qos-rule-iugg0l9x27f2nocouj'),
}

model CreateExpressConnectTrafficQosRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateExpressConnectTrafficQosRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateExpressConnectTrafficQosRule  CreateExpressConnectTrafficQosRuleRequest
  * @return CreateExpressConnectTrafficQosRuleResponse
 */
async function createExpressConnectTrafficQosRule(request: CreateExpressConnectTrafficQosRuleRequest): CreateExpressConnectTrafficQosRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateExpressConnectTrafficQosRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateFailoverTestJobRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The description of the failover test.

The description must be 0 to 256 characters in length and cannot start with `http://` or `https://`.', example='test', position='Query'),
  dryRun?: boolean(name='DryRun', description='If you set the value to true, the system performs only a dry run without actually performing the actual request. If you set the value to false, the system performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  jobDuration: int32(name='JobDuration', description='The duration of the failover test. Unit: minutes. Valid values: **1 to 4320**.

This parameter is required.', example='60', minimum=1, maximum=4320, position='Query'),
  jobType: string(name='JobType', description='The type of the failover test. Valid values:

*   **StartNow**
*   **StartLater**

This parameter is required.', example='StartNow', position='Query'),
  name?: string(name='Name', description='The name of the failover test.

The name must be 0 to 128 characters in length and cannot start with `http://` or `https://`.', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the failover test.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The IDs of failover test resources. You can add at most 16 resources.

This parameter is required.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceType: string(name='ResourceType', description='The resource type of the failover test. Set the value to **PHYSICALCONNECTION**.

This parameter is required.', example='PHYSICALCONNECTION', position='Query'),
}

model CreateFailoverTestJobResponseBody = {
  jobId?: string(name='JobId', description='The ID of the failover test.', example='ftj-xxxxxxxxx'),
  requestId?: string(name='RequestId', description='The request ID.', example='C44F62BE-9CE7-4277-B117-69243F3988BF'),
}

model CreateFailoverTestJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFailoverTestJobResponseBody(name='body'),
}

/**
  * @description You cannot create a failover test in the following scenarios:
  * *   You have created a failover test in the region and its type is StartNow.
  * *   The Express Connect circuit or hosted connection has pending orders or overdue payments.
  * *   A failover test is already performed on the Express Connect circuit or hosted connection.
  * *   More than one hosted connection is created over the Express Connect circuit.
  * *   More than one cross-account VBR is created on the Express Connect circuit.
  * *   No VBR is associated with the hosted connection.
  * *   The VLAN ID of the hosted connection is set to 0.
  * @param request  the request parameters of CreateFailoverTestJob  CreateFailoverTestJobRequest
  * @return CreateFailoverTestJobResponse
 */
async function createFailoverTestJob(request: CreateFailoverTestJobRequest): CreateFailoverTestJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFailoverTestJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateFlowLogRequest {
  aggregationInterval?: int32(name='AggregationInterval', description='The sampling interval of the flow log. Unit: seconds. Valid values: **1**, **5**, and **10** (default).', example='10', position='Query'),
  description?: string(name='Description', description='The description of the flow log.

The description must be 1 to 256 characters in length and cannot start with `http://` or `https://`.', example='This is my Flowlog.', position='Query'),
  flowLogName?: string(name='FlowLogName', description='The name of the flow log.

The name must be 1 to 128 characters in length and cannot start with `http://` or `https://`.', example='myFlowlog', position='Query'),
  ipVersion?: string(name='IpVersion', position='Query'),
  logStoreName: string(name='LogStoreName', description='The name of the Logstore that stores the captured traffic data.

*   The name can contain only lowercase letters, digits, hyphens (-), and underscores (_).
*   The name must start and end with a lowercase letter or a digit.
*   The name must be 3 to 63 characters in length.

This parameter is required.', example='FlowLogStore', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  projectName: string(name='ProjectName', description='The name of the project that stores the captured traffic data.

*   The name can contain only lowercase letters, digits, and hyphens (-).
*   The name must start and end with a lowercase letter or a digit.
*   The name must be 3 to 63 characters in length.

This parameter is required.', example='FlowLogProject', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where you want to create the flow log. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-qingdao', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxazdjdhd****', position='Query'),
  resourceId: string(name='ResourceId', description='The ID of the resource whose traffic you want to capture.

This parameter is required.', example='eni-askldfas****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource whose traffic you want to capture. Valid values:

*   **NetworkInterface**: elastic network interface (ENI)
*   **VSwitch**: all ENIs in a vSwitch
*   **VPC**: all ENIs in a virtual private cloud (VPC)

This parameter is required.', example='NetworkInterface', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the resource. You can specify up to 20 tag keys. The tag key cannot be an empty string.

The tag key can be at most 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N to add to the resource. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tag of the resource.', position='Query'),
  trafficPath?: [ string ](name='TrafficPath', description='The scope of the traffic that you want to capture. Valid values:

*   **all**: all traffic.
*   **internetGateway**: Internet traffic.', position='Query'),
  trafficType: string(name='TrafficType', description='The type of traffic that you want to capture. Valid values:

*   **All**: all traffic
*   **Allow**: traffic that is allowed
*   **Drop**: traffic that is rejected

This parameter is required.', example='All', position='Query'),
}

model CreateFlowLogResponseBody = {
  flowLogId?: string(name='FlowLogId', description='The ID of the flow log.', example='fl-m5e8vhz2t21sel1nq****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='54B48E3D-DF70-471B-AA93-08E683A1B457'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxazdjdhd****'),
  success?: string(name='Success', description='Indicates whether the operation is successful. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
}

model CreateFlowLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFlowLogResponseBody(name='body'),
}

/**
  * @description **CreateFlowLog** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeFlowLogs](https://help.aliyun.com/document_detail/87923.html) operation to query the status of the flow log.
  * *   If the flow log is in the **Activating** state, the flow log is being created.
  * *   If the flow log is in the **Active** state, the flow log is created and started.
  * @param request  the request parameters of CreateFlowLog  CreateFlowLogRequest
  * @return CreateFlowLogResponse
 */
async function createFlowLog(request: CreateFlowLogRequest): CreateFlowLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFlowLog', 'POST', '/', 'json', false, 'json', request);
}

model CreateForwardEntryRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='0c593ea1-3bea-11e9-b96b-88e9fe6****', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  externalIp: string(name='ExternalIp', description='*   The EIP that can be accessed over the Internet when you configure a DNAT entry for an Internet NAT gateway.
*   The NAT IP address that can be accessed by external networks when you configure a DNAT entry for a VPC NAT gateway.

This parameter is required.', example='116.28.XX.XX', position='Query'),
  externalPort: string(name='ExternalPort', description='*   The external port range that is used for port forwarding when you configure a DNAT entry for an Internet NAT gateway.

    *   Valid values: **1** to **65535**.
    *   To specify a port range, separate the first port and the last port with a forward slash (/), for example, `10/20`.
    *   If you set **ExternalPort** to a port range, you must also set **InternalPort** to a port range, and the number of ports specified by these parameters must be the same. For example, if you set **ExternalPort** to `10/20`, you can set **InternalPort** to `80/90`.

*   The port that can be accessed by external networks when you configure a DNAT entry for a VPC NAT gateway. Valid values: **1** to **65535**.

This parameter is required.', example='8080', position='Query'),
  forwardEntryName?: string(name='ForwardEntryName', description='The name of the DNAT entry.

The name must be 2 to 128 characters in length. It must start with a letter but cannot start with `http://` or `https://`.', example='ForwardEntry-1', position='Query'),
  forwardTableId: string(name='ForwardTableId', description='The ID of the DNAT table.

This parameter is required.', example='ftb-bp1mbjubq34hlcqpa****', position='Query'),
  internalIp: string(name='InternalIp', description='*   The private IP address of the ECS instance that needs to communicate with the Internet when you configure a DNAT entry for an Internet NAT gateway. The private IP address must meet the following requirements:

    *   It must belong to the CIDR block of the VPC where the NAT gateway is deployed.
    *   The DNAT entry takes effect only if the private IP address is assigned to an ECS instance and the ECS instance is not associated with an EIP.

*   The private IP address that uses DNAT when you add a DNAT entry to a VPC NAT gateway.

This parameter is required.', example='192.168.XX.XX', position='Query'),
  internalPort: string(name='InternalPort', description='*   The internal port or port range that is used for port forwarding when you configure a DNAT entry for an Internet NAT gateway. Valid values: **1** to **65535**.
*   The port of the destination ECS instance to be mapped when you configure a DNAT entry for a VPC NAT gateway. Valid values: **1** to **65535**.

This parameter is required.', example='80', position='Query'),
  ipProtocol: string(name='IpProtocol', description='The protocol. Valid values:

*   **TCP**
*   **UDP**
*   **Any** If you set **IpProtocol** to **Any**, you must also set **ExternalPort** and **InternalPort** to **Any** to implement DNAT IP mapping.

This parameter is required.', example='TCP', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  portBreak?: boolean(name='PortBreak', description='Specifies whether to remove limits on the port range. Valid values:

*   **true**
*   **false** (default)

>  If a DNAT entry and an SNAT entry have the same public IP address, ou must specify a port that is larger that 1024, and set **PortBreak** to **true**.', example='false', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the NAT gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to obtain the region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateForwardEntryResponseBody = {
  forwardEntryId?: string(name='ForwardEntryId', description='The ID of the DNAT entry.', example='fwd-119smw5tkasdf****'),
  requestId?: string(name='RequestId', description='The request ID.', example='A4AEE536-A97A-40EB-9EBE-53A6948A6928'),
}

model CreateForwardEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateForwardEntryResponseBody(name='body'),
}

/**
  * @description ## [](#)
  * Each DNAT entry consists of the following parameters: **ExternalIp**, **ExternalPort**, **IpProtocol**, **InternalIp**, and **InternalPort**. After you add a DNAT entry, the NAT gateway forwards packets over the specified protocol from **ExternalIp:ExternalPort** to **InternalIp:InternalPort** and sends responses back through the same route.
  * When you call this operation, take note of the following limits:
  * *   **CreateForwardEntry** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeForwardTableEntries](https://help.aliyun.com/document_detail/36053.html) operation to query the status of the task.
  *     *   If the DNAT entry is in the **Pending** state, the system is adding the DNAT entry. You can only query the DNAT entry, but cannot perform other operations.
  *     *   If the DNAT entry is in the **Available** state, the DNAT entry is added.
  * *   You cannot repeatedly call the **CreateForwardEntry** operation to add a DNAT entry within a specific period of time.
  * *   All combinations of **ExternalIp**, **ExternalPort**, and **IpProtocol** used in DNAT entries must be unique. You cannot distribute requests to more than one Elastic Compute Service (ECS) instance if these requests are initiated from the same source IP address, received on the same port, and use the same protocol.
  * *   The combinations of **IpProtocol**, **InternalIp**, and **InternalPort** must be unique.
  * *   If one or more DNAT entries in the DNAT table are in the **Pending** or **Modifying** state, you cannot add DNAT entries to the DNAT table.
  * *   You can add at most 100 DNAT entries to a DNAT table.
  * *   For an elastic IP address (EIP) used by an Internet NAT gateway or a NAT IP address used by a Virtual Private Cloud (VPC) NAT gateway, take note of the following limit: If the IP address has IP mapping enabled and is specified in a DNAT entry, the IP address cannot be used by another DNAT or SNAT entry.
  * @param request  the request parameters of CreateForwardEntry  CreateForwardEntryRequest
  * @return CreateForwardEntryResponse
 */
async function createForwardEntry(request: CreateForwardEntryRequest): CreateForwardEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateForwardEntry', 'POST', '/', 'json', false, 'json', request);
}

model CreateFullNatEntryRequest {
  accessIp: string(name='AccessIp', description='The backend IP address to be modified in FULLNAT address translation.

This parameter is required.', example='192.168.XX.XX', position='Query'),
  accessPort: string(name='AccessPort', description='The backend port to be modified in the mapping of FULLNAT port. Valid values: **1** to **65535**.

This parameter is required.', example='80', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a value, and you must make sure that each request has a unique token value. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the value of **RequestId** as the value of **ClientToken**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to only precheck this request. Valid values:

*   **true**: prechecks the request without adding the FULLNAT entry. The system checks whether your AccessKey pair is valid, whether RAM users are granted required permissions, and whether the required parameters are set. If the request fails to pass the precheck, an error code is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false**: sends the API request. This is the default value. After the request passes the precheck, a 2XX HTTP status code is returned and the FULLNAT entry is added.', example='false', position='Query'),
  fullNatEntryDescription?: string(name='FullNatEntryDescription', description='The description of the FULLNAT entry.

This parameter is optional. If you enter a description, the description must be 2 to 256 characters in length, and cannot start with `http://` or `https://`.', example='abc', position='Query'),
  fullNatEntryName?: string(name='FullNatEntryName', description='The FULLNAT entry name. The name must be 2 to 128 characters in length. It must start with a letter but cannot start with http:// or https://.', example='test', position='Query'),
  fullNatTableId: string(name='FullNatTableId', description='The ID of the FULLNAT table to which the FULLNAT entry belongs.

This parameter is required.', example='fulltb-gw88z7hhlv43rmb26****', position='Query'),
  ipProtocol: string(name='IpProtocol', description='The protocol of the packets that are forwarded by the port. Valid values:

*   **TCP**
*   **UDP**

This parameter is required.', example='TCP', position='Query'),
  natIp: string(name='NatIp', description='The NAT IP address that provides address translation.

This parameter is required.', example='192.168.XX.XX', position='Query'),
  natIpPort?: string(name='NatIpPort', description='The frontend port to be modified in the mapping of FULLNAT port. Valid values: **1** to **65535**.', example='80', position='Query'),
  networkInterfaceId: string(name='NetworkInterfaceId', description='The elastic network interface (ENI) ID.

This parameter is required.', example='eni-gw8g131ef2dnbu3k****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Virtual Private Cloud (VPC) NAT gateway to which the FULLNAT entry to be added belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='eu-central-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateFullNatEntryResponseBody = {
  fullNatEntryId?: string(name='FullNatEntryId', description='The FULLNAT entry ID.', example='fullnat-gw8fz23jezpbblf1j****'),
  requestId?: string(name='RequestId', description='The request ID.', example='2315DEB7-5E92-423A-91F7-4C1EC9AD97C3'),
}

model CreateFullNatEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFullNatEntryResponseBody(name='body'),
}

/**
  * @description *   **CreateFullNatEntry** is an asynchronous operation. After you send a request to call this operation, the system returns a FULLNAT entry and the FULLNAT entry is being added in the backend. You can call the [ListFullNatEntries](https://help.aliyun.com/document_detail/348779.html) operation to query the status of a FULLNAT entry.
  *     *   If the FULLNAT entry is in the **Creating** state, the system is adding the FULLNAT entry. You can only query the status of the FULLNAT entry, but cannot perform other operations.
  *     *   If the FULLNAT entry is in the **Available** state, the FULLNAT entry is added.
  * *   You cannot repeatedly call the **CreateFullNatEntry** operation for the same VPN gateway within the specified period of time.
  * @param request  the request parameters of CreateFullNatEntry  CreateFullNatEntryRequest
  * @return CreateFullNatEntryResponse
 */
async function createFullNatEntry(request: CreateFullNatEntryRequest): CreateFullNatEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFullNatEntry', 'POST', '/', 'json', false, 'json', request);
}

model CreateGlobalAccelerationInstanceRequest {
  bandwidth: string(name='Bandwidth', description='The maximum bandwidth of the GA instance. Set the value to **10**. Unit: Mbit/s.

This parameter is required.', example='10', position='Query'),
  bandwidthType?: string(name='BandwidthType', description='The bandwidth type. Valid values:

*   **Sharing**
*   **Exclusive**', example='Exclusive', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  description?: string(name='Description', description='The description of the GA instance.

The description must be 2 to 256 characters in length. It must start with a letter but cannot start with `http://` or `https://`.', example='My GA', position='Query'),
  name?: string(name='Name', description='The name of the GA instance.

The name must be 2 to 128 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.', example='GA-1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  serviceLocation: string(name='ServiceLocation', description='The acceleration area. Valid values:

*   **china-mainland**
*   **north-america**
*   **asia-pacific**
*   **europe**

This parameter is required.', example='china-mainland', position='Query'),
}

model CreateGlobalAccelerationInstanceResponseBody = {
  globalAccelerationInstanceId?: string(name='GlobalAccelerationInstanceId', description='The ID of the GA instance.', example='ga-bp1fi6sq7npnicmjj****'),
  ipAddress?: string(name='IpAddress', description='The public IP address of the GA instance.

If **BandwidthType** is set to **Sharing**, this parameter is not returned.', example='12.xx.xx.78'),
  requestId?: string(name='RequestId', description='The request ID.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model CreateGlobalAccelerationInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGlobalAccelerationInstanceResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI CreateGlobalAccelerationInstance is deprecated  * @description ## Usage notes
  * You can call this operation to create only pay-as-you-go GA instances.
  * @param request  the request parameters of CreateGlobalAccelerationInstance  CreateGlobalAccelerationInstanceRequest
  * @return CreateGlobalAccelerationInstanceResponse
 */
// Deprecated
async function createGlobalAccelerationInstance(request: CreateGlobalAccelerationInstanceRequest): CreateGlobalAccelerationInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGlobalAccelerationInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateHaVipRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among all requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  description?: string(name='Description', description='The description of the HAVIP.

The description must be 1 to 256 characters in length and cannot start with `http://` or `https://`.', example='This is my HaVip.', position='Query'),
  ipAddress?: string(name='IpAddress', description='The IP address of the HAVIP.

The specified IP address must be an idle IP address that falls within the CIDR block of the vSwitch. If this parameter is not set, an idle IP address from the CIDR block of the vSwitch is randomly assigned to the HAVIP.', example='192.XX.XX.10', position='Query'),
  name?: string(name='Name', description='The name of the HAVIP.

The name must be 1 to 128 characters in length, and cannot start with `http://` or `https://`.', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the HAVIP. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the HAVIP belongs.', example='rg-acfmxazb4ph6aiy****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the resource. You can specify up to 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N to add to the resource. You can specify up to 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length, but cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tag of the resource.', position='Query'),
  vSwitchId: string(name='VSwitchId', description='The ID of the vSwitch to which the HAVIP belongs.

This parameter is required.', example='vsw-asdfjlnaue4g****', position='Query'),
}

model CreateHaVipResponseBody = {
  haVipId?: string(name='HaVipId', description='The ID of the HAVIP.', example='havip-2zeo05qre24nhrqpy****'),
  ipAddress?: string(name='IpAddress', description='The IP address of the HAVIP.', example='192.XX.XX.10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C44F62BE-9CE7-4277-B117-69243F3988BF'),
}

model CreateHaVipResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateHaVipResponseBody(name='body'),
}

/**
  * @description **CreateHaVip** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeHaVips](https://help.aliyun.com/document_detail/114611.html) operation to query the status of the task:
  * *   If the HAVIP is in the **Creating** state, the HAVIP is being created.
  * *   If the HAVIP is in the **Available** state, the HAVIP is created.
  * @param request  the request parameters of CreateHaVip  CreateHaVipRequest
  * @return CreateHaVipResponse
 */
async function createHaVip(request: CreateHaVipRequest): CreateHaVipResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHaVip', 'POST', '/', 'json', false, 'json', request);
}

model CreateHighReliablePhysicalConnectionRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN', position='Query'),
  apList: [ 
    {
      accessPointId: string(name='AccessPointId', description='This parameter is required.', example='ap-cn-beijing-ft-A'),
      bandwidth?: long(name='Bandwidth', example='50'),
      circuitCode?: string(name='CircuitCode', example='longtel001'),
      description?: string(name='Description', example='description'),
      lineOperator: string(name='LineOperator', description='This parameter is required.', example='CT'),
      name?: string(name='Name', example='test'),
      peerLocation?: string(name='PeerLocation'),
      portNum?: int32(name='PortNum', example='2'),
      regionId: string(name='RegionId', description='This parameter is required.', example='cn-shanghai'),
      type?: string(name='Type', example='VPC'),
    }
  ](name='ApList', description='This parameter is required.', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  deviceAdvancedCapacity?: [ string ](name='DeviceAdvancedCapacity', position='Query'),
  dryRun?: string(name='DryRun', example='false', position='Query'),
  highReliableType: string(name='HighReliableType', description='This parameter is required.', example='MultiApMultiDevice', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  portType: string(name='PortType', description='This parameter is required.', example='1000Base-T', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tag', position='Query'),
}

model CreateHighReliablePhysicalConnectionResponseBody = {
  errorInfoList?: {
    errorInfoList?: [ 
    {
      errorCode?: string(name='ErrorCode', example='pconn.high.reliable.dryrun.error.disable.outbound.data.transfer.billing'),
      errorMessage?: string(name='ErrorMessage', example='pconn.high.reliable.dryrun.error.disable.outbound.data.transfer.billing'),
      instanceId?: string(name='InstanceId', example='pc-j5e5qqo616p81ncspbll1'),
    }
  ](name='errorInfoList')
  }(name='ErrorInfoList'),
  physicalConnectionList?: {
    physicalConnectionList?: [ 
    {
      instanceId?: string(name='InstanceId', example='pc-j5e5qqo616p81ncspbll1'),
      regionNo?: string(name='RegionNo', example='cn-shanghai'),
    }
  ](name='physicalConnectionList')
  }(name='PhysicalConnectionList'),
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model CreateHighReliablePhysicalConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateHighReliablePhysicalConnectionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateHighReliablePhysicalConnection  CreateHighReliablePhysicalConnectionRequest
  * @return CreateHighReliablePhysicalConnectionResponse
 */
async function createHighReliablePhysicalConnection(request: CreateHighReliablePhysicalConnectionRequest): CreateHighReliablePhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHighReliablePhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model CreateIPv6TranslatorRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment. Valid values: **true and false**.', example='false', position='Query'),
  bandwidth?: int32(name='Bandwidth', description='The bandwidth of the IPv6 Translation Service instance. Unit: Mbit/s. Valid values: **1** to **200**. If you do not specify the bandwidth for the mapping entry, the bandwidth is shared with the mapping entry.

> If you do not specify this parameter, the default bandwidth is 10 Mbit/s.', example='10', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='sha111', position='Query'),
  duration?: int32(name='Duration', description='The subscription duration.

*   If the billing cycle is **Month**, valid values are **1** to **9**.
*   If the billing cycle is **Year**, set the value to **3**.', example='1', position='Query'),
  name?: string(name='Name', description='The name of the IPv6 Translation Service instance. The default name is the instance ID. It must be 2 to 100 characters in length and must start with a letter. It can contain letters, digits, periods (.), underscores (_), and hyphens (-). It cannot start with `http://` or `https://`.', example='ipv6_1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  payType?: string(name='PayType', description='The billing method of the IPv6 Translation Service instance. Valid values:

*   **PREPAY**: subscription
*   **POSTPAY**: pay-as-you-go', example='PREPAY', position='Query'),
  pricingCycle?: string(name='PricingCycle', description='The billing cycle of the subscription. Valid values:

*   **Month** (default)
*   **Year**', example='Month', position='Query'),
  regionId: string(name='RegionId', description='The region of the IPv6 Translation Service instance. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cm-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  spec?: string(name='Spec', description='The specification of the IPv6 Translation Service instance. Set the value to **small**.', example='small', position='Query'),
}

model CreateIPv6TranslatorResponseBody = {
  ipv6TranslatorId?: string(name='Ipv6TranslatorId', description='The ID of the IPv6 Translation Service instance.', example='ipv6trans-bp1i8ahxut1xxxx'),
  name?: string(name='Name', description='The name of the IPv6 Translation Service instance.', example='test_nat64gw'),
  orderId?: long(name='OrderId', description='The order ID.', example='202303300940739'),
  requestId?: string(name='RequestId', description='The request ID.', example='1AE05898-06E5-4782-xxxxx'),
  spec?: string(name='Spec', description='The specification of the IPv6 Translation Service instance.', example='small'),
}

model CreateIPv6TranslatorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIPv6TranslatorResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI CreateIPv6Translator is deprecated  * @param request  the request parameters of CreateIPv6Translator  CreateIPv6TranslatorRequest
  * @return CreateIPv6TranslatorResponse
 */
// Deprecated
async function createIPv6Translator(request: CreateIPv6TranslatorRequest): CreateIPv6TranslatorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIPv6Translator', 'POST', '/', 'json', false, 'json', request);
}

model CreateIPv6TranslatorAclListRequest {
  aclName: string(name='AclName', description='The ACL name.

This parameter is required.', example='test', position='Query'),
  clientToken?: string(name='ClientToken', example='sha123456', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region of the IPv6 Translation Service instance. You can call the DescribeRegions operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateIPv6TranslatorAclListResponseBody = {
  aclId?: string(name='AclId', description='The ACL ID.', example='ipv6transacl-bp1de2xxxx'),
  requestId?: string(name='RequestId', description='The request ID.', example='8B2F5262-6B57-43F2-xxxxx'),
}

model CreateIPv6TranslatorAclListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIPv6TranslatorAclListResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI CreateIPv6TranslatorAclList is deprecated  * @param request  the request parameters of CreateIPv6TranslatorAclList  CreateIPv6TranslatorAclListRequest
  * @return CreateIPv6TranslatorAclListResponse
 */
// Deprecated
async function createIPv6TranslatorAclList(request: CreateIPv6TranslatorAclListRequest): CreateIPv6TranslatorAclListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIPv6TranslatorAclList', 'POST', '/', 'json', false, 'json', request);
}

model CreateIPv6TranslatorEntryRequest {
  aclId?: string(name='AclId', description='The ID of the associated ACL.', example='ipv6transacl-bp1g8bhrdexnrxxxx', position='Query'),
  aclStatus?: string(name='AclStatus', description='Specifies whether to enable access control lists (ACLs). Valid values:

*   **on**
*   **off**', example='on', position='Query'),
  aclType?: string(name='AclType', description='Specifies whether to enable ACLs. Valid values:

*   **white**: a whitelist. IPv6 addresses in the ACL are allowed to access backend services.
*   **black**: a blacklist. IPv6 addresses in the ACL are not allowed to access backend services.', example='white', position='Query'),
  allocateIpv6Port: int32(name='AllocateIpv6Port', description='The port that is used by the IPv6 address allocated to the IPv6 Translation Service instance.

This parameter is required.', example='80', position='Query'),
  backendIpv4Addr: string(name='BackendIpv4Addr', description='The public IPv4 address that needs to provide IPv6 services.

This parameter is required.', example='46.22.xx.xx', position='Query'),
  backendIpv4Port: int32(name='BackendIpv4Port', description='The port of the public IPv4 address that needs to provide IPv6 services.

This parameter is required.', example='80', position='Query'),
  entryBandwidth?: int32(name='EntryBandwidth', description='The maximum bandwidth specified in the IPv6 mapping entry. Valid values:

*   \\-1 (default): does not limit the maximum bandwidth specified in the IPv6 mapping entry.
*   1 to 200: the bandwidth value specified in the IPv6 mapping entry. Unit: Mbit/s.

> The sum of the maximum bandwidth values specified in all IPv6 entries cannot exceed the maximum bandwidth supported by the instance.', example='2', position='Query'),
  entryDescription?: string(name='EntryDescription', description='The description of the IPv6 mapping entry.', example='description', position='Query'),
  entryName?: string(name='EntryName', description='The name of the IPv6 mapping entry. It must be 2 to 100 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter. It cannot start with `http://` or `https://`.', example='name1', position='Query'),
  ipv6TranslatorId: string(name='Ipv6TranslatorId', description='The ID of the IPv6 Translation Service instance.

This parameter is required.', example='ipv6trans-bp1858ys57xxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region of the IPv6 Translation Service instance. You can call the **DescribeRegions** operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transProtocol: string(name='TransProtocol', description='The protocol. Valid values:

*   **tcp**
*   **udp**

This parameter is required.', example='tcp', position='Query'),
}

model CreateIPv6TranslatorEntryResponseBody = {
  ipv6TranslatorEntryId?: string(name='Ipv6TranslatorEntryId', description='The ID of the IPv6 Translation Service instance.', example='ipv6transentry-xxxxxxxx'),
  requestId?: string(name='RequestId', description='The request ID.', example='DCE5D25-FFC9-492A-8371-12A4E0EE2E05'),
}

model CreateIPv6TranslatorEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIPv6TranslatorEntryResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI CreateIPv6TranslatorEntry is deprecated  * @param request  the request parameters of CreateIPv6TranslatorEntry  CreateIPv6TranslatorEntryRequest
  * @return CreateIPv6TranslatorEntryResponse
 */
// Deprecated
async function createIPv6TranslatorEntry(request: CreateIPv6TranslatorEntryRequest): CreateIPv6TranslatorEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIPv6TranslatorEntry', 'POST', '/', 'json', false, 'json', request);
}

model CreateIpsecServerRequest {
  clientIpPool: string(name='ClientIpPool', description='The client CIDR block from which an IP address is allocated to the virtual network interface controller (NIC) of the client.

>  The client CIDR block must not overlap with the CIDR blocks of the VPC.

This parameter is required.', example='10.0.0.0/24', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='d7d24a21-f4ba-4454-9173-b38****', position='Query'),
  dryRun?: string(name='DryRun', description='Specifies whether to only precheck this request. Valid values:

*   **true**: prechecks the request without creating the IPsec server. The system checks the required parameters, request format, and service limits. If the request fails to pass the precheck, an error code is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. This is the default value. If the request passes the precheck, the system creates the IPsec server.', example='false', position='Query'),
  effectImmediately?: boolean(name='EffectImmediately', description='Specify whether to start connection negotiations immediately. Valid values:

*   **true**: immediately initiates negotiations after the configuration is complete.
*   **false** (default): initiates negotiations when inbound traffic is detected. This is the default value.', example='true', position='Query'),
  ikeConfig?: string(name='IkeConfig', description='The configuration of Phase 1 negotiation. Valid values:

*   **IkeVersion**: the IKE version. Valid values: **ikev1** and **ikev2**. Default value: **ikev2**.
*   **IkeMode**: the IKE negotiation mode. Default value: **main**.
*   **IkeEncAlg**: the encryption algorithm that is used in Phase 1 negotiation. Default value: **aes**.
*   **IkeAuthAlg**: the authentication algorithm that is used in Phase 1 negotiation. Default value: **sha1**.
*   **IkePfs**: the Diffie-Hellman key exchange algorithm that is used in Phase 1 negotiation. Default value: **group2**.
*   **IkeLifetime**: the security association (SA) lifetime determined by Phase 1 negotiation. Unit: seconds. Valid values: **0** to **86400**. Default value: **86400**.
*   **LocalId**: the identifier of the IPsec server. The value can be a fully qualified domain name (FQDN) or an IP address. The default value is the public IP address of the VPN gateway.
*   **RemoteId**: the peer identifier. The value can be an FQDN or an IP address. The default value is empty.', example='{"IkeVersion":"ikev2","IkeMode":"main","IkeEncAlg":"aes","IkeAuthAlg":"sha1","IkePfs":"group2","IkeLifetime":86400}', position='Query'),
  ipSecServerName?: string(name='IpSecServerName', description='The name of the IPsec server.

The name must be 1 to 100 characters in length.', example='test', maxLength=100, position='Query'),
  ipsecConfig?: string(name='IpsecConfig', description='The configuration of Phase 2 negotiation. Valid values:

*   **IpsecEncAlg**: the encryption algorithm that is used in Phase 2 negotiation. Default value: **aes**.
*   **IpsecAuthAlg**: the authentication algorithm that is used in Phase 2 negotiation. Default value: **sha1**.
*   **IpsecPfs**: forwards packets of all protocols. The Diffie-Hellman key exchange algorithm that is used in Phase 2 negotiation. Default value: **group2**.
*   **IpsecLifetime**: the SA lifetime determined by Phase 2 negotiation. Unit: seconds. Valid values: **0** to **86400**. Default value: **86400**.', example='{"IpsecEncAlg":"aes","IpsecAuthAlg":"sha1","IpsecPfs":"group2","IpsecLifetime":86400}', position='Query'),
  localSubnet: string(name='LocalSubnet', description='The local CIDR blocks, which are the CIDR blocks of the virtual private cloud (VPC) for the client to access.

Multiple CIDR blocks are separated with commas (,). Example: 192.168.1.0/24,192.168.2.0/24.

This parameter is required.', example='192.168.0.0/24', position='Query'),
  psk?: string(name='Psk', description='The pre-shared key.

The pre-shared key is used for identity authentication between the IPsec server and the client. The key must be 1 to 100 characters in length.

If you do not specify a pre-shared key, the system randomly generates a 16-character string as the pre-shared key. You can call the [ListIpsecServers](https://help.aliyun.com/document_detail/2794120.html) operation to query the pre-shared keys that are generated by the system.

>  The pre-shared key of the IPsec server must be the same as the client key. Otherwise, the IPsec server cannot be connected to the client.', example='Cfd123****', position='Query'),
  pskEnabled?: boolean(name='PskEnabled', description='Indicates whether pre-shared key authentication is enabled. If you set the value to **true**, pre-shared key authentication is enabled.

>  This parameter is required.', example='true', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the VPN gateway is deployed.

This parameter is required.', example='cn-hangzhou', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', description='The ID of the VPN gateway.

This parameter is required.', example='vpn-bp17lofy9fd0dnvzv****', position='Query'),
}

model CreateIpsecServerResponseBody = {
  creationTime?: string(name='CreationTime', description='The time when the IPsec server was created.

T is used as a delimiter. Z indicates that the time is in UTC.', example='2021-02-22T03:24:28Z'),
  ipsecServerId?: string(name='IpsecServerId', description='The IPsec server ID.', example='iss-bp1jougp8cfsbo8y9****'),
  ipsecServerName?: string(name='IpsecServerName', description='The IPsec server name.', example='test'),
  regionId?: string(name='RegionId', description='The ID of the region where the VPN gateway is deployed.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The request ID.', example='690A967E-D4CD-4B69-8C78-94FE828BA10B'),
  vpnGatewayId?: string(name='VpnGatewayId', description='The ID of the VPN gateway.', example='vpn-bp17lofy9fd0dnvzv****'),
}

model CreateIpsecServerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIpsecServerResponseBody(name='body'),
}

/**
  * @description *   Before you create an IPsec server, you must create a VPN gateway and enable the SSL-VPN feature for the VPN gateway. For more information, see [CreateVpnGateway](https://help.aliyun.com/document_detail/2794049.html).
  * *   Before you create an IPsec server, make sure that no IPsec-VPN connection exists on the VPN gateway. For more information, see [DeleteVpnConnection](https://help.aliyun.com/document_detail/2526948.html).
  * *   **CreateIpsecServer** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [DescribeVpnGateway](https://help.aliyun.com/document_detail/2794055.html) to query the status of the task.
  *     *   If the VPN gateway is in the **updating** state, the IPsec server is being created.
  *     *   If the VPN gateway is in the **active** state, the IPsec server is created.
  * *   You cannot repeatedly call **CreateIpsecServer** within the specified period of time.
  * @param request  the request parameters of CreateIpsecServer  CreateIpsecServerRequest
  * @return CreateIpsecServerResponse
 */
async function createIpsecServer(request: CreateIpsecServerRequest): CreateIpsecServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIpsecServer', 'POST', '/', 'json', false, 'json', request);
}

model CreateIpv4GatewayRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, the system sets **ClientToken** to the value of **RequestId**. The value of **RequestId** for each API request is different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: performs a dry run. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  ipv4GatewayDescription?: string(name='Ipv4GatewayDescription', description='The description of the IPv4 gateway.

The description must be 1 to 256 characters in length and cannot start with `http://` or `https://`.', example='test', position='Query'),
  ipv4GatewayName?: string(name='Ipv4GatewayName', description='The name of the IPv4 gateway.

The name must be 1 to 128 characters in length, and cannot start with `http://` or `https://`.', example='ipv4', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where you want to create the IPv4 gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='ap-southeast-6', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxazb4ph6aiy****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the resource. You can specify up to 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N to add to the resource. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags of the resource.', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the VPC where you want to create the IPv4 gateway.

You can create only one IPv4 gateway in a VPC.

This parameter is required.', example='vpc-5tss06uvoyps5xoya****', position='Query'),
}

model CreateIpv4GatewayResponseBody = {
  ipv4GatewayId?: string(name='Ipv4GatewayId', description='The ID of the IPv4 gateway.', example='ipv4gw-5tsnc6s4ogsedtp3k****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F282742B-1BBB-5F63-A3AF-E92EC575A1A6'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxazb4ph6aiy****'),
}

model CreateIpv4GatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIpv4GatewayResponseBody(name='body'),
}

/**
  * @description *   **CreateIpv4Gateway** is an asynchronous operation. After you send a request, the system returns a request ID and runs the task in the background. You can call the [GetIpv4GatewayAttribute](https://help.aliyun.com/document_detail/407670.html) operation to query the status of an IPv4 gateway:
  *     *   If the IPv4 gateway is in the **Creating** state, the IPv4 gateway is being created.
  *     *   If the IPv4 gateway is in the **Created** state, the IPv4 gateway is created.
  * *   You cannot repeatedly call the **CreateIpv4Gateway** operation to create IPv4 gateways in a virtual private cloud (VPC) within the specified period of time.
  * @param request  the request parameters of CreateIpv4Gateway  CreateIpv4GatewayRequest
  * @return CreateIpv4GatewayResponse
 */
async function createIpv4Gateway(request: CreateIpv4GatewayRequest): CreateIpv4GatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIpv4Gateway', 'POST', '/', 'json', false, 'json', request);
}

model CreateIpv6EgressOnlyRuleRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not specify this parameter, the system automatically uses the value of RequestId as the client token. The value of RequestId is different for each API request.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  description?: string(name='Description', description='The description of the egress-only rule.

The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='ruledescription', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the IPv6 address for which you want to create an egress-only rule.

This parameter is required.', example='ipv6-hp3nxjkfxn5pnhgl5****', position='Query'),
  instanceType?: string(name='InstanceType', description='The type of the instance for which you want to create an egress-only rule.

Default value: **Ipv6Address**', example='Ipv6Address', position='Query'),
  ipv6GatewayId: string(name='Ipv6GatewayId', description='The ID of the IPv6 gateway.

This parameter is required.', example='ipv6gw-hp3c2paq0ywauasza****', position='Query'),
  name?: string(name='Name', description='The name of the egress-only rule.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (_), and hyphens (-). The name must start with a letter but cannot start with `http://` or `https://`.', example='rulename', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the IPv6 gateway is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the region ID.

This parameter is required.', example='cn-huhehaote', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateIpv6EgressOnlyRuleResponseBody = {
  ipv6EgressRuleId?: string(name='Ipv6EgressRuleId', description='The ID of the egress-only rule.', example='ipv6py-hp3w98rmlbqp01245****'),
  requestId?: string(name='RequestId', description='The request ID.', example='9DFEDBEE-E5AB-49E8-A2DC-CC114C67AF75'),
}

model CreateIpv6EgressOnlyRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIpv6EgressOnlyRuleResponseBody(name='body'),
}

/**
  * @description *   **CreateIpv6EgressOnlyRule** is an asynchronous operation. After a request is sent, the system returns a request ID and creates the rule in the background. You can call the [DescribeIpv6EgressOnlyRules](https://help.aliyun.com/document_detail/102208.html) operation to query the status of the task.
  *     *   If the egress-only rule is in the **Creating** state, the egress-only rule is being created.
  *     *   If the egress-only rule is in the **Created** state, the egress-only rule is created.
  * *   You cannot repeatedly call the **CreateIpv6EgressOnlyRule** operation to add egress-only rules for an IPv6 address within the specified period of time.
  * @param request  the request parameters of CreateIpv6EgressOnlyRule  CreateIpv6EgressOnlyRuleRequest
  * @return CreateIpv6EgressOnlyRuleResponse
 */
async function createIpv6EgressOnlyRule(request: CreateIpv6EgressOnlyRuleRequest): CreateIpv6EgressOnlyRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIpv6EgressOnlyRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateIpv6GatewayRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  description?: string(name='Description', description='The description of the IPv6 gateway.

The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='ipv6gatewayforVPC1', position='Query'),
  name?: string(name='Name', description='The name of the IPv6 gateway.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (_), and hyphens (-). The name must start with a letter but cannot start with `http://` or `https://`.', example='ipv6GW', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the IPv6 gateway. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-huhehaote', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the IPv6 gateway belongs.', example='rg-acfmxazb4ph6aiy****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. You can specify at most 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length, and cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags.', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the VPC in which you want to create the IPv6 gateway.

This parameter is required.', example='vpc-123sedrfswd23****', position='Query'),
}

model CreateIpv6GatewayResponseBody = {
  ipv6GatewayId?: string(name='Ipv6GatewayId', description='The ID of the IPv6 gateway.', example='ipv6gw-hp3y0l3ln89j8cdvf****'),
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the IPv6 gateway belongs.', example='rg-acfmxazb4ph6aiy****'),
}

model CreateIpv6GatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIpv6GatewayResponseBody(name='body'),
}

/**
  * @description *   **CreateIpv6Gateway** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeIpv6GatewayAttribute](https://help.aliyun.com/document_detail/102226.html) operation to query the status of the task.
  *     *   If the IPv6 gateway is in the **Creating** state, the IPv6 gateway is being created.
  *     *   If the IPv6 gateway is in the **Created** state, the IPv6 gateway is created.
  * *   You cannot repeatedly call the **CreateIpv6Gateway** operation within a specific time period.
  * @param request  the request parameters of CreateIpv6Gateway  CreateIpv6GatewayRequest
  * @return CreateIpv6GatewayResponse
 */
async function createIpv6Gateway(request: CreateIpv6GatewayRequest): CreateIpv6GatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIpv6Gateway', 'POST', '/', 'json', false, 'json', request);
}

model CreateNatGatewayRequest {
  accessMode?: {
    modeValue?: string(name='ModeValue', description='Access mode. Valid values:

- **route**: route mode

- **tunnel**: tunnel mode

> If this parameter is specified, you must set **PrivateLinkEnabled** to **true**.', example='route'),
    tunnelType?: string(name='TunnelType', description='Tunnel mode type:

- **geneve**: Geneve type

> This value takes effect if the access mode is the tunnel mode.'),
  }(name='AccessMode', description='The access mode for reverse access to the VPC NAT gateway.', shrink='json', position='Query'),
  autoPay?: boolean(name='AutoPay', description='Subscription Internet NAT gateways are no longer available for purchase. Ignore this parameter.', example='Invalid parameter.', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  description?: string(name='Description', description='The description of the NAT gateway.

You can leave this parameter empty or enter a description. If you enter a description, the description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='testnat', position='Query'),
  duration?: string(name='Duration', description='Subscription Internet NAT gateways are no longer available for purchase. Ignore this parameter.', example='Invalid parameter.', position='Query'),
  eipBindMode?: string(name='EipBindMode', description='The mode in which the EIP is associated with the NAT gateway. Valid values:

- **MULTI_BINDED**(default): the multi-EIP-to-ENI mode.

- **NAT**: NAT mode, which is compatible with IPv4 addresses.

> If an EIP is associated with a NAT gateway in NAT mode, the EIP occupies a private IP address of the vSwitch where the NAT gateway is deployed. Make sure that the vSwitch has sufficient private IP addresses. Otherwise, EIPs cannot be associated with the NAT gateway. In NAT mode, a maximum number of 50 EIPs can be associated with each NAT gateway.', example='MULTI_BINDED', position='Query'),
  icmpReplyEnabled?: boolean(name='IcmpReplyEnabled', description='Specifies whether to enable ICMP retrieval. Valid values:

*   **true** (default)
*   **false**', example='true', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the NAT gateway.

Set the value to **PostPaid** (pay-as-you-go), which is the default value.

For more information, see [Internet NAT gateway billing](https://help.aliyun.com/document_detail/48126.html) and [VPC NAT gateway billing](https://help.aliyun.com/document_detail/270913.html).', example='PostPaid', position='Query'),
  internetChargeType?: string(name='InternetChargeType', description='The metering method of the NAT gateway. Set the value to **PayByLcu**, which specifies the pay-by-CU metering method.', example='PayByLcu', position='Query'),
  name?: string(name='Name', description='The name of the NAT gateway.

The name must be 2 to 128 characters in length and can contain letters, digits, underscores (_), and hyphens (-). The name must start with a letter.

If this parameter is not set, the system assigns a default name to the NAT gateway.', example='fortest', position='Query'),
  natType?: string(name='NatType', description='The type of NAT gateway. Set the value to **Enhanced**, which specifies enhanced NAT gateway.', example='Enhanced', position='Query'),
  networkType?: string(name='NetworkType', description='The network type of the NAT gateway. Valid values:

*   **internet**: Internet
*   **intranet**: VPC', example='internet', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pricingCycle?: string(name='PricingCycle', description='Subscription Internet NAT gateways are no longer available for purchase. Ignore this parameter.', example='Invalid parameter.', position='Query'),
  privateLinkEnabled?: boolean(name='PrivateLinkEnabled', description='PrivateLink is not supported by default. If you set the value to true, PrivateLink is supported.', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the NAT gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to obtain the region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityProtectionEnabled?: boolean(name='SecurityProtectionEnabled', description='Specifies whether to enable the firewall feature. Valid values:

*   **false** (default)>Notice: This parameter is deprecated.', example='false', deprecated='true', position='Query'),
  spec?: string(name='Spec', description='Subscription Internet NAT gateways are no longer available for purchase. Ignore this parameter.', example='Invalid parameter.', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. The format of Tag.N.Key when you call the operation. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key can be up to 128 characters in length and cannot contain http:// or https://. The tag key cannot start with acs: or aliyun.', example='TestKey'),
      value?: string(name='Value', description='The tag value. The format of Tag.N.Value when you call the operation. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key can be up to 128 characters in length and cannot contain http:// or https://. The tag key cannot start with acs: or aliyun.', example='TestValue'),
    }
  ](name='Tag', description='The tags.', example='MULTI_BINDED', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which the NAT gateway is attached.

When you create a NAT gateway, you must specify a vSwitch for the NAT gateway. Then, the system assigns an idle private IP address from the vSwitch to the NAT gateway.

*   To attach the NAT gateway to an existing vSwitch, make sure that the zone to which the vSwitch belongs supports NAT gateways. In addition, the vSwitch must have idle IP addresses.
*   If no vSwitch exists in the VPC, create a vSwitch in a zone that supports NAT gateways. Then, specify the vSwitch for the NAT gateway.

>  You can call the [ListEnhanhcedNatGatewayAvailableZones](https://help.aliyun.com/document_detail/182292.html) operation to query zones that support NAT gateways. You can call the [DescribeVSwitches](https://help.aliyun.com/document_detail/35748.html) operation to query idle IP addresses in a vSwitch.', example='vsw-bp1e3se98n9fq8hle****', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the VPC where you want to create the NAT gateway.

This parameter is required.', example='vpc-bp1di7uewzmtvfuq8****', position='Query'),
}

model CreateNatGatewayResponseBody = {
  forwardTableIds?: {
    forwardTableId?: [ string ](name='ForwardTableId')
  }(name='ForwardTableIds', description='A list of DNAT entries.'),
  fullNatTableIds?: {
    fullNatTableId?: [ string ](name='FullNatTableId')
  }(name='FullNatTableIds', description='A list of FULLNAT entries.'),
  natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.', example='ngw-112za33e4****'),
  requestId?: string(name='RequestId', description='The request ID.', example='2315DEB7-5E92-423A-91F7-4C1EC9AD97C3'),
  snatTableIds?: {
    snatTableId?: [ string ](name='SnatTableId')
  }(name='SnatTableIds', description='A list of SNAT entries.'),
}

model CreateNatGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNatGatewayResponseBody(name='body'),
}

/**
  * @description ## Usage notes
  * Before you call this operation, take note of the following items:
  * *   When you create an enhanced NAT gateway for the first time, the system automatically creates the service-linked role AliyunServiceRoleForNatgw. Then, the system attaches the permission policy AliyunServiceRolePolicyForNatgw to the role. This allows the NAT gateway to access other resources on Alibaba Cloud. For more information, see [Service-linked roles](https://help.aliyun.com/document_detail/174251.html).
  * *   After you create an enhanced Internet NAT gateway, a route entry is automatically added to the route table of the VPC. The destination CIDR block of the route entry is 0.0.0.0/0 and the next hop is the NAT gateway. This ensures that traffic is routed to the NAT gateway.
  * *   **CreateNatGateway** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeNatGateways](https://help.aliyun.com/document_detail/36054.html) operation to query the status of the task.
  *     *   If a NAT gateway is in the **Creating** state, the NAT gateway is being created. In this case, you can query the NAT gateway but cannot perform other operations.
  *     *   If a NAT gateway is in the **Available** state, the NAT gateway is created.
  * It takes 1 to 3 minutes to create a NAT gateway.
  * @param request  the request parameters of CreateNatGateway  CreateNatGatewayRequest
  * @return CreateNatGatewayResponse
 */
async function createNatGateway(request: CreateNatGatewayRequest): CreateNatGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNatGateway', 'POST', '/', 'json', false, 'json', request);
}

model CreateNatIpRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  natGatewayId: string(name='NatGatewayId', description='The ID of the Virtual Private Cloud (VPC) NAT gateway for which you want to create the NAT IP address.

This parameter is required.', example='ngw-gw8v16wgvtq26vh59****', position='Query'),
  natIp?: string(name='NatIp', description='The NAT IP address that you want to create.

If you do not specify an IP address, the system randomly allocates an IP address from the specified CIDR block.', example='192.168.0.34', position='Query'),
  natIpCidr: string(name='NatIpCidr', description='The CIDR block to which the NAT IP address belongs.

This parameter is required.', example='192.168.0.0/24', position='Query'),
  natIpDescription?: string(name='NatIpDescription', description='The description of the NAT IP address.

The description must be 2 to 256 characters in length and start with a letter. The description cannot start with `http://` or `https://`.', example='test', position='Query'),
  natIpName?: string(name='NatIpName', description='The name of the NAT IP address.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter. The name must start with a letter and cannot start with `http://` or `https://`.', example='newnatip', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the NAT gateway to which the NAT IP address that you want to create belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent list of regions.

This parameter is required.', example='eu-central-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateNatIpResponseBody = {
  natIp?: string(name='NatIp', description='The NAT IP address.', example='192.168.0.34'),
  natIpId?: string(name='NatIpId', description='The ID of the NAT IP address.', example='vpcnatip-gw8y7q3cpk3fggs8****'),
  requestId?: string(name='RequestId', description='The request ID.', example='E9AD97A0-5338-43F8-8A80-5E274CCBA11B'),
}

model CreateNatIpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNatIpResponseBody(name='body'),
}

/**
  * @description ## [](#)
  * **CreateNatIp** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListNatIps](https://help.aliyun.com/document_detail/287000.html) operation to query the status of the task.
  * *   If a NAT IP address is in the **Creating** state, the NAT IP address is being created. In this case, you can only query the NAT IP address and cannot perform other operations.
  * *   If a NAT IP address is in the **Available** state, the NAT IP address is created.
  * You cannot repeatedly call the **CreateNatIp** operation to create a NAT IP address within a specific period of time.
  * @param request  the request parameters of CreateNatIp  CreateNatIpRequest
  * @return CreateNatIpResponse
 */
async function createNatIp(request: CreateNatIpRequest): CreateNatIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNatIp', 'POST', '/', 'json', false, 'json', request);
}

model CreateNatIpCidrRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**(default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  natGatewayId: string(name='NatGatewayId', description='The ID of the Virtual Private Cloud (VPC) NAT gateway with which you want to associate the CIDR block.

This parameter is required.', example='ngw-gw8v16wgvtq26vh59****', position='Query'),
  natIpCidr: string(name='NatIpCidr', description='The NAT CIDR block that you want to associate with the NAT gateway.

The new CIDR block must meet the following conditions:

*   The NAT CIDR block must fall within 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, or their subnets.
*   The subnet mask must be 16 to 32 bits in length.
*   The NAT CIDR block cannot overlap with the private CIDR block of the VPC to which the NAT gateway belongs. If you want to use other IP addresses from the private CIDR block of the VPC to provide NAT services, create a vSwitch and attach the vSwitch to another VPC NAT gateway.
*   If you want to use public IP addresses to provide NAT services, make sure that the public IP addresses fall within a customer CIDR block of the VPC to which the VPC NAT gateway belongs. For more information, see [What is customer CIDR block?](https://help.aliyun.com/document_detail/185311.html).

This parameter is required.', example='172.16.0.0/24', position='Query'),
  natIpCidrDescription?: string(name='NatIpCidrDescription', description='The description of the NAT CIDR block.

The description must be 2 to 256 characters in length and start with a letter. The description cannot start with `http://` or `https://`.', example='mycidr', position='Query'),
  natIpCidrName?: string(name='NatIpCidrName', description='The name of the CIDR block.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter. The name must start with a letter and cannot start with `http://` or `https://`.', example='newcidr', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the NAT gateway with which you want to associate the CIDR block.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='eu-central-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateNatIpCidrResponseBody = {
  natIpCidrId?: string(name='NatIpCidrId', description='The ID of the NAT CIDR block.', example='vpcnatcidr-gw8lhqtvdn4qnea****'),
  requestId?: string(name='RequestId', description='The request ID.', example='7021BEB1-210F-48A9-AB82-BE9A9110BB89'),
}

model CreateNatIpCidrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNatIpCidrResponseBody(name='body'),
}

/**
  * @description ## [](#)Description
  * You cannot repeatedly call the **CreateNatIpCidr** operation to create a NAT CIDR block within the specified period of time.
  * @param request  the request parameters of CreateNatIpCidr  CreateNatIpCidrRequest
  * @return CreateNatIpCidrResponse
 */
async function createNatIpCidr(request: CreateNatIpCidrRequest): CreateNatIpCidrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNatIpCidr', 'POST', '/', 'json', false, 'json', request);
}

model CreateNetworkAclRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  description?: string(name='Description', description='The description of the network ACL.

The description must be 1 to 256 characters in length, and cannot start with `http://` or `https://`.', example='This is my NetworkAcl.', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  networkAclName?: string(name='NetworkAclName', description='The name of the network ACL.

The name must be 1 to 128 characters in length, and cannot start with `http://` or `https://`.', example='acl-1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the network ACL.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the resource. You can specify up to 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N to add to the resource. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags of the resource.', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the network ACL belongs.

If the VPC contains Elastic Compute Service (ECS) instances of the following instance families, you must upgrade the ECS instances or release the ECS instances. Otherwise, you cannot create a network ACL for the VPC.

ecs.c1, ecs.c2, ecs.c4, ecs.c5, ecs.ce4, ecs.cm4, ecs.d1, ecs.e3, ecs.e4, ecs.ga1, ecs.gn4, ecs.gn5, ecs.i1, ecs.m1, ecs.m2, ecs.mn4, ecs.n1, ecs.n2, ecs.n4, ecs.s1, ecs.s2, ecs.s3, ecs.se1, ecs.sn1, ecs.sn2, ecs.t1, and ecs.xn4.

*   For more information about how to upgrade an ECS instance, see [Upgrade subscription instances](https://help.aliyun.com/document_detail/25438.html) and [Change the specifications of pay-as-you-go instances](https://help.aliyun.com/document_detail/60051.html).
*   For more information about how to release an ECS instance, see [Release an ECS instance](https://help.aliyun.com/document_detail/25442.html).

>  If the VPC contains an ECS instance that does not support network ACLs, upgrade the ECS instance.

This parameter is required.', example='vpc-dsfd34356vdf****', position='Query'),
}

model CreateNetworkAclResponseBody = {
  networkAclAttribute?: {
    creationTime?: string(name='CreationTime', description='The time when the network ACL was created.', example='2021-12-25 11:33:27'),
    description?: string(name='Description', description='The description of the network ACL.', example='This is my NetworkAcl.'),
    egressAclEntries?: {
      egressAclEntry?: [ 
      {
        description?: string(name='Description', description='The description of the outbound rule.', example='This is EgressAclEntries.'),
        destinationCidrIp?: string(name='DestinationCidrIp', description='The destination CIDR block.', example='10.0.0.0/24'),
        networkAclEntryId?: string(name='NetworkAclEntryId', description='The ID of the outbound rule.', example='nae-a2d447uw4tillxsdc****'),
        networkAclEntryName?: string(name='NetworkAclEntryName', description='The name of the outbound rule.', example='acl-2'),
        policy?: string(name='Policy', description='The action to be performed on network traffic that matches the rule. Valid values:

*   **accept**
*   **drop**', example='accept'),
        port?: string(name='Port', description='The destination port range of the outbound traffic.

*   If the **protocol** of the outbound rule is set to **all**, **icmp**, or **gre**, the port range is -1/-1, which specified all ports.
*   If the **protocol** of the outbound rule is set to **tcp** or **udp**, set the port range in the following format: **1/200** or **80/80**, which specifies port 1 to port 200 or port 80. Valid values for a port: **1** to **65535**.', example='-1/-1'),
        protocol?: string(name='Protocol', description='The protocol. Valid values:

*   **icmp**
*   **gre**
*   **tcp**
*   **udp**
*   **all**', example='all'),
      }
    ](name='EgressAclEntry')
    }(name='EgressAclEntries', description='The outbound rules.'),
    ingressAclEntries?: {
      ingressAclEntry?: [ 
      {
        description?: string(name='Description', description='The description of the inbound rule.', example='This is IngressAclEntries.'),
        networkAclEntryId?: string(name='NetworkAclEntryId', description='The ID of the inbound rule.', example='nae-a2dk86arlydmexscd****'),
        networkAclEntryName?: string(name='NetworkAclEntryName', description='The name of the inbound rule.', example='acl-3'),
        policy?: string(name='Policy', description='The action to be performed on network traffic that matches the rule. Valid values:

*   **accept**
*   **drop**', example='accept'),
        port?: string(name='Port', description='The destination port range of the inbound traffic.

*   If the **protocol** of the inbound rule is set to **all**, **icmp**, or **gre**, the port range is -1/-1, which specifies all ports.
*   If the **protocol** of the inbound rule is set to **tcp** or **udp**, set the port range in the following format: **1/200** or **80/80**, which specifies port 1 to port 200 or port 80. Valid ports: **1** to **65535**.', example='-1/-1'),
        protocol?: string(name='Protocol', description='The protocol. Valid values:

*   **icmp**
*   **gre**
*   **tcp**
*   **udp**
*   **all**', example='all'),
        sourceCidrIp?: string(name='SourceCidrIp', description='The source CIDR block.', example='10.0.0.0/24'),
      }
    ](name='IngressAclEntry')
    }(name='IngressAclEntries', description='The inbound rules.'),
    networkAclId?: string(name='NetworkAclId', description='The ID of the network ACL.', example='nacl-a2do9e413e0spdefr****'),
    networkAclName?: string(name='NetworkAclName', description='The name of the network ACL.', example='acl-1'),
    regionId?: string(name='RegionId', description='The region ID of the network ACL.', example='cn-hangzhou'),
    resources?: {
      resource?: [ 
      {
        resourceId?: string(name='ResourceId', description='The ID of the associated resource.', example='vsw-bp1de348lntdwgthy****'),
        resourceType?: string(name='ResourceType', description='The type of resource with which you want to associate the network ACL.', example='VSwitch'),
        status?: string(name='Status', description='The association status of the resource. Valid values:

*   **BINDED**
*   **BINDING**
*   **UNBINDING**', example='BINDED'),
      }
    ](name='Resource')
    }(name='Resources', description='The information about the associated resources.'),
    status?: string(name='Status', description='The status of the network ACL. Valid values:

*   **Available**
*   **Modifying**', example='Modifying'),
    vpcId?: string(name='VpcId', description='The ID of the VPC to which the network ACL belongs.', example='vpc-a2d33rfpl72k5xsscd****'),
  }(name='NetworkAclAttribute', description='The attributes of the network ACL.'),
  networkAclId?: string(name='NetworkAclId', description='The ID of the network ACL.', example='nacl-a2do9e413e0spzasx****'),
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model CreateNetworkAclResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNetworkAclResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateNetworkAcl  CreateNetworkAclRequest
  * @return CreateNetworkAclResponse
 */
async function createNetworkAcl(request: CreateNetworkAclRequest): CreateNetworkAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNetworkAcl', 'POST', '/', 'json', false, 'json', request);
}

model CreatePhysicalConnectionRequest {
  accessPointId: string(name='AccessPointId', description='The access point ID of the Express Connect circuit.

This parameter is required.', example='ap-cn-beijing-ft-A', position='Query'),
  circuitCode?: string(name='CircuitCode', description='The circuit code of the Express Connect circuit. The circuit code is provided by the connectivity provider.', example='longtel001', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  description?: string(name='Description', description='The description of the Express Connect circuit.

The description must be 2 to 256 characters in length. The description must start with a letter but cannot start with `http://` or `https://`.', example='description', position='Query'),
  deviceAdvancedCapacity?: [ string ](name='DeviceAdvancedCapacity', description='The advanced features of the device.', position='Query'),
  lineOperator: string(name='LineOperator', description='The connectivity provider of the Express Connect circuit. Valid values:

*   **CT**: China Telecom.
*   **CU**: China Unicom.
*   **CM**: China Mobile.
*   **CO**: other connectivity providers in the Chinese mainland.
*   **Equinix**: Equinix.
*   **Other**: other connectivity providers outside the Chinese mainland.

This parameter is required.', example='CT', position='Query'),
  name?: string(name='Name', description='The name of the Express Connect circuit.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (_), and hyphens (-). The name must start with a letter but cannot start with `http://` or `https://`.', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerLocation?: string(name='PeerLocation', description='The geographical location of the data center.', example='cn-hangzhou', position='Query'),
  portType?: string(name='PortType', description='The port type. Valid values:

*   **100Base-T**: 100 Mbit/s copper Ethernet port
*   **1000Base-T**: 1,000 Mbit/s copper Ethernet port
*   **1000Base-LX**: 1,000 Mbit/s single-mode optical port (10 km)
*   **10GBase-T**: 10,000 Mbit/s copper Ethernet port
*   **10GBase-LR**: 10,000 Mbit/s single-mode optical port (10 km)
*   **40GBase-LR**: 40,000 Mbit/s single-mode optical port
*   **100GBase-LR**: 100,000 Mbit/s single-mode optical port

>  To use ports 40GBase-LR and 100GBase-LR, you must first contact your account manager.', example='1000Base-T', position='Query'),
  redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId', description='The ID of the redundant Express Connect circuit. The redundant Express Connect circuit must be in the **Allocated**, **Confirmed**, or **Enabled** state.', example='pc-119mfjzm****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Express Connect circuit.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Express Connect circuit belongs.', example='rg-acfmoiyermp****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag to add to the resource. You can specify up to 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `aliyun` or `acs:`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value to add to the resource. You can specify up to 20 tag values The tag value can be an empty string.

The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `aliyun` or `acs:`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tag list.', position='Query'),
  type?: string(name='Type', description='The type of Express Connect circuit. Default value: **VPC**.', example='VPC', position='Query'),
  bandwidth?: int32(name='bandwidth', description='The maximum bandwidth of the hosted connection. Unit: Mbit/s.

Valid values: **50**, **100**, **200**, **300**, **400**, **500**, **1000**, **2000**, **4000**, **5000**, **8000**, and **10000**.', example='50', position='Query'),
}

model CreatePhysicalConnectionResponseBody = {
  physicalConnectionId?: string(name='PhysicalConnectionId', description='The ID of the Express Connect circuit.', example='pc-bp1ciz7ekd2grn1as****'),
  requestId?: string(name='RequestId', description='The request ID.', example='8A6A5EC5-6F6C-4906-9689-56ACE58A13E0'),
}

model CreatePhysicalConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePhysicalConnectionResponseBody(name='body'),
}

/**
  * @description You can apply for a dedicated Express Connect circuit for yourself or create a hosted connection for a tenant. After your application is approved, the Express Connect circuit changes to the **Initial** state. You can contact the connectivity provider to start construction.
  * When you call this operation, take note of the following limits:
  * *   If your Alibaba Cloud account has more than five Express Connect circuits that are not in the **Enabled** state, you cannot apply for another Express Connect circuit.
  * *   If your Alibaba Cloud account has an Express Connect circuit with overdue payments, you cannot apply for another Express Connect circuit.
  * @param request  the request parameters of CreatePhysicalConnection  CreatePhysicalConnectionRequest
  * @return CreatePhysicalConnectionResponse
 */
async function createPhysicalConnection(request: CreatePhysicalConnectionRequest): CreatePhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model CreatePhysicalConnectionOccupancyOrderRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payments. Valid values:

*   **true**: yes Make sure that you have a sufficient balance in your account. Otherwise, your order becomes invalid and is automatically canceled.
*   **false**: disables automatic payment. This is the default value.', example='false', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests.', example='CBCE910E-D396-4944', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method. Set the value to

**PrePaid**, which specifies the subscription billing method. If you choose this billing method, make sure that your Alibaba Cloud account supports balance payments or credit payments.', example='PrePaid', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', description='The subscription duration.

*   If **PricingCycle** is set to **Month**, set **Period** to a value from **1 to 9**.
*   If **PricingCycle** is set to **Year**, set **Period** to a value from **1 to 5**.', example='1', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', description='The ID of the Express Connect circuit.

This parameter is required.', example='pc-bp1hp0wr072f6****', position='Query'),
  pricingCycle?: string(name='PricingCycle', description='The billing cycle of the subscription. Valid values:

*   **Month** (default)
*   **Year**', example='Month', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Express Connect circuit.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreatePhysicalConnectionOccupancyOrderResponseBody = {
  data?: {
    orderId?: string(name='OrderId', description='The ID of the order that is placed.', example='50187055895****'),
  }(name='Data', description='The details.'),
  requestId?: string(name='RequestId', description='The request ID.', example='9B9300FE-11E2-4E3B-949C-BED3B44DD26D'),
}

model CreatePhysicalConnectionOccupancyOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePhysicalConnectionOccupancyOrderResponseBody(name='body'),
}

/**
  * @description >  You can call this operation only when the Express Connect circuit is in the **Complete** state.
  * @param request  the request parameters of CreatePhysicalConnectionOccupancyOrder  CreatePhysicalConnectionOccupancyOrderRequest
  * @return CreatePhysicalConnectionOccupancyOrderResponse
 */
async function createPhysicalConnectionOccupancyOrder(request: CreatePhysicalConnectionOccupancyOrderRequest): CreatePhysicalConnectionOccupancyOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePhysicalConnectionOccupancyOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreatePhysicalConnectionSetupOrderRequest {
  accessPointId: string(name='AccessPointId', description='The ID of the access point.

This parameter is required.', example='ap-cn-beijing-ft-A', position='Query'),
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payments. Valid values:

*   **false** (default): disables automatic payment.
*   **true**', example='false', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='318BB676-0A2B-43A0-9AD8-F1D34E93750F', position='Query'),
  lineOperator: string(name='LineOperator', description='The connectivity provider of the Express Connect circuit. Valid values:

*   **CT**: China Telecom
*   **CU**: China Unicom
*   **CM**: China Mobile
*   **CO**: other connectivity providers in the Chinese mainland
*   **Equinix**: Equinix
*   **Other**: other connectivity providers outside the Chinese mainland

This parameter is required.', example='CT', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  portType?: string(name='PortType', description='The port type of the Express Connect circuit. Valid values:

*   **100Base-T**: 100 Mbit/s copper Ethernet port
*   **1000Base-T** (default): 1,000 Mbit/s copper Ethernet port
*   **1000Base-LX**: 1,000 Mbit/s single-mode optical port (10 km)
*   **10GBase-T**: 10,000 Mbit/s copper Ethernet port
*   **10GBase-LR**: 10,000 Mbit/s single-mode optical port (10 km)
*   **40GBase-LR**: 40,000 Mbit/s single-mode optical port
*   **100GBase-LR**: 100,000 Mbit/s single-mode optical port

>  Whether 40GBase-LR and 100GBase-LR ports can be created depends on resource supplies. For more information, contact your account manager.', example='100Base-T', position='Query'),
  redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId', description='The ID of the redundant physical connection. The redundant physical connection must be in the **Allocated**, **Confirmed**, or **Enabled** state.', example='pc-bp10zsv5ntp****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Express Connect circuit.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-beijing', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreatePhysicalConnectionSetupOrderResponseBody = {
  orderId?: string(name='OrderId', description='The order ID.', example='202844382740728'),
  physicalConnectionId?: string(name='PhysicalConnectionId', description='The ID of the Express Connect circuit.', example='pc-2zegmc02v7ss4****'),
  requestId?: string(name='RequestId', description='The request ID.', example='F7A6301A-64BA-41EC-8284-8F4838C15D1F'),
}

model CreatePhysicalConnectionSetupOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePhysicalConnectionSetupOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePhysicalConnectionSetupOrder  CreatePhysicalConnectionSetupOrderRequest
  * @return CreatePhysicalConnectionSetupOrderResponse
 */
async function createPhysicalConnectionSetupOrder(request: CreatePhysicalConnectionSetupOrderRequest): CreatePhysicalConnectionSetupOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePhysicalConnectionSetupOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreatePublicIpAddressPoolRequest {
  bizType?: string(name='BizType', description='The service type of the IP address pool. Valid values:

*   **CloudBox** Only cloud box users can select this type.
*   **Default**: This is the default value.', example='Default', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a value, and you must make sure that each request has a unique token value. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the value of **RequestId** as the value of **ClientToken**. The value of **RequestId** for each API request is different.', example='02fb3da4-130e-11****', position='Query'),
  description?: string(name='Description', description='The description of the IP address pool.

This parameter is optional. The description must be 2 to 256 characters in length, and cannot start with http:// or https://.', example='AddressPoolDescription', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to precheck only this request. Valid values:

*   **true**: prechecks the request without creating an IP address pool. The system checks the required parameters, request format, and service limits. If the request fails to pass the precheck, an error code is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false**: sends the request. This is the default value. If the request passes the precheck, a 2xx HTTP status code is returned and the IP address pool is created.', example='false', position='Query'),
  isp?: string(name='Isp', description='The line type. Valid values:

*   **BGP** (default)
*   **BGP_PRO**

For more information about BGP (Multi-ISP) lines and BGP (Multi-ISP) Pro lines, see the "Line types" section in the [What is EIP?](https://help.aliyun.com/document_detail/32321.html) topic.

*   If you are allowed to use single-ISP bandwidth, you can also use one of the following values:

    *   **ChinaTelecom**
    *   **ChinaUnicom**
    *   **ChinaMobile**
    *   **ChinaTelecom_L2**
    *   **ChinaUnicom_L2**
    *   **ChinaMobile_L2**

*   If your services are deployed in China East 1 Finance, this parameter is required and you must set the value to **BGP_FinanceCloud**.', example='BGP', position='Query'),
  name?: string(name='Name', description='The name of the IP address pool.

This parameter is optional. The name must be 1 to 128 characters in length and can contain digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter but cannot start with `http://` or `https://`.', example='AddressPoolName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where you want to create the IP address pool.

This parameter is required.', example='cn-chengdu', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the IP address pool belongs.', example='rg-acfmxazb4pcdvf****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityProtectionTypes?: [ string ](name='SecurityProtectionTypes', description='The editions of Anti-DDoS.
- If you do not specify this parameter, Anti-DDoS Origin Basic is used.
- If you set the parameter to AntiDDoS_Enhanced, Anti-DDoS Pro/Premium is used.', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key of the resource. You can specify up to 20 tag keys. The tag key cannot be an empty string.

A tag key can be up to 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value of the resource. You can specify up to 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tag of the resource.', position='Query'),
  zones?: [ string ](name='Zones', description='The zone of the IP address pool. If you set **BizType** to **CloudBox**, this parameter is required.', position='Query'),
}

model CreatePublicIpAddressPoolResponseBody = {
  publicIpAddressPoolId?: string(name='PublicIpAddressPoolId'),
  pulbicIpAddressPoolId?: string(name='PulbicIpAddressPoolId', description='The ID of the IP address pool.', example='pippool-6wetvn6fumkgycssx****', deprecated='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the IP address pool belongs.', example='rg-acfmxazb4pcdvf****'),
}

model CreatePublicIpAddressPoolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePublicIpAddressPoolResponseBody(name='body'),
}

/**
  * @description By default, the IP address pool feature is unavailable. You can apply for the privilege to use the **IP address pool feature** in the Quota Center console. For more information, see the "Request a quota increase in the Quota Center console" section in the [Manage EIP quotas](https://help.aliyun.com/document_detail/108213.html) topic.
  * @param request  the request parameters of CreatePublicIpAddressPool  CreatePublicIpAddressPoolRequest
  * @return CreatePublicIpAddressPoolResponse
 */
async function createPublicIpAddressPool(request: CreatePublicIpAddressPoolRequest): CreatePublicIpAddressPoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePublicIpAddressPool', 'POST', '/', 'json', false, 'json', request);
}

model CreateRouteEntriesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the route table.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeEntries: [ 
    {
      description?: string(name='Description', description='The description of the custom route. You can specify at most 50 descriptions.

The description must be 1 to 256 characters in length and cannot start with `http://` or `https://`.', example='test'),
      dstCidrBlock: string(name='DstCidrBlock', description='The destination CIDR block of the custom route. IPv4 CIDR blocks, IPv6 CIDR blocks, and prefix lists are supported. You can enter up to 50 destination CIDR blocks. Make sure that the following requirements are met:

*   The destination CIDR block cannot point to 100.64.0.0/10 or belong to 100.64.0.0/10.
*   The destination CIDR block of each route in the route table is unique.

This parameter is required.', example='192.168.0.0/24'),
      ipVersion?: int32(name='IpVersion', description='The IP version. Valid values: You can specify at most 50 IP versions. Valid values:

*   **4**: IPv4
*   **6**: IPv6', example='IPv4'),
      name?: string(name='Name', description='The name of the custom route that you want to add. You can specify at most 50 names.

The name must be 1 to 128 characters in length and cannot start with `http://` or `https://`.', example='test'),
      nextHop: string(name='NextHop', description='The ID of the next hop for the custom route. You can specify at most 50 instance IDs.

This parameter is required.', example='i-j6c2fp57q8rr4jlu****'),
      nextHopType: string(name='NextHopType', description='The type of next hop. You can specify at most 50 next hop types. Valid values:

*   **Instance**: Elastic Compute Service (ECS) instance. This is the default value.
*   **HaVip**: high-availability virtual IP address (HAVIP).
*   **RouterInterface**: router interface.
*   **NetworkInterface**: elastic network interface (ENI).
*   **VpnGateway**: VPN gateway.
*   **IPv6Gateway**: IPv6 gateway.
*   **NatGateway**: NAT gateway.
*   **Attachment**: transit router.
*   **VpcPeer**: VPC peering connection.
*   **Ipv4Gateway**: IPv4 gateway.
*   **GatewayEndpoint**: gateway endpoint.
*   **CenBasic**: CEN does not support transfer routers.
*   **Ecr**: Express Connect Router (ECR).

This parameter is required.', example='RouterInterface'),
      routeTableId: string(name='RouteTableId', description='The ID of the route table to which you want to add custom route s. You can specify at most 50 route table IDs.

This parameter is required.', example='vtb-bp145q7glnuzd****'),
    }
  ](name='RouteEntries', description='The routes.

This parameter is required.', position='Query'),
}

model CreateRouteEntriesResponseBody = {
  failedCount?: int32(name='FailedCount', description='The number of custom route entries that failed to be added.', example='2'),
  failedRouteEntries?: [ 
    {
      dstCidrBlock?: string(name='DstCidrBlock', description='The destination CIDR block of the custom route entry that failed to be added.', example='192.168.0.0/24'),
      failedCode?: string(name='FailedCode', description='The error code.', example='VPC_ROUTE_ENTRY_CIDR_BLOCK_DUPLICATE'),
      failedMessage?: string(name='FailedMessage', description='The error message.', example='Specified CIDR block is already exists, entry.cidrBlock=xxxx'),
      nextHop?: string(name='NextHop', description='The ID of the next hop of the custom route entry that failed to be added.', example='i-j6c2fp57q8rr4jlu****'),
    }
  ](name='FailedRouteEntries', description='The details about the custom route entry that failed to be added.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  routeEntryIds?: [ string ](name='RouteEntryIds', description='The information about the ID of the custom route entry that was successfully added.'),
  successCount?: int32(name='SuccessCount', description='The number of custom route entries that were successfully added.', example='2'),
}

model CreateRouteEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRouteEntriesResponseBody(name='body'),
}

/**
  * @description ## [](#)References
  * *   **CreateRouteEntries** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeRouteEntryList](https://help.aliyun.com/document_detail/138148.html) operation to query the status of the task.
  *     *   If the route entry is in the **Creating** state, the route entry is being created.
  *     *   If the route entry is in the **Created** state, the route entry is created.
  * *   You cannot repeatedly call the **CreateRouteEntries** operation to create the same route entry within the specified period of time.
  * **When you call this operation to add custom route entries to the route table of a vRouter, take note of the following items:**
  * *   A route table can contain up to 200 custom route entries.
  * *   The destination CIDR block (**DstCidrBlock**) of a custom route entry cannot be the same as or overlap with the CIDR block of a vSwitch in the VPC.
  * *   The destination CIDR block (**DstCidrBlock**) of a custom route entry cannot be 100.64.0.0/10 or its subnets.
  * *   The destination CIDR blocks (**DstCidrBlock**) of route entries in the same route table must be unique.
  * *   If you do not include the mask length when you specify the destination CIDR block (**DstCidrBlock**), the destination CIDR block is considered a host IP address whose mask length is 32 bits.
  * *   Multiple custom route entries can point to the same next hop (**NextHop**).
  * *   The next hop (**NextHop**) of a custom route entry must belong to the same VPC as the route table.
  * @param request  the request parameters of CreateRouteEntries  CreateRouteEntriesRequest
  * @return CreateRouteEntriesResponse
 */
async function createRouteEntries(request: CreateRouteEntriesRequest): CreateRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRouteEntries', 'POST', '/', 'json', false, 'json', request);
}

model CreateRouteEntryRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The ClientToken value can contain only ASCII characters.

>  If you do not specify this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  description?: string(name='Description', description='The description of the custom route entry.

The description must be 1 to 256 characters in length, and cannot start with `http://` or `https://`.', example='test', position='Query'),
  destinationCidrBlock: string(name='DestinationCidrBlock', description='The destination CIDR block of the custom route entry. Both IPv4 and IPv6 CIDR blocks are supported. Make sure that the destination CIDR block meets the following requirements:

*   The destination CIDR block is not 100.64.0.0/10 or a subset of 100.64.0.0/10.
*   The destination CIDR block of the custom route entry is different from the destination CIDR blocks of other route entries in the same route table.

This parameter is required.', example='192.168.0.0/24', position='Query'),
  nextHopId?: string(name='NextHopId', description='The ID of the next hop.', example='i-j6c2fp57q8rr4jlu****', position='Query'),
  nextHopList?: [ 
    {
      nextHopId?: string(name='NextHopId', description='The ID of the next hop of the ECMP route.', example='ri-2zeo3xzyf3cd8r4****'),
      nextHopType?: string(name='NextHopType', description='The type of next hop of the ECMP route entry. Set the value to **RouterInterface**.', example='RouterInterface'),
      weight?: int32(name='Weight', description='The weight of the next hop of the ECMP route entry.', example='10'),
    }
  ](name='NextHopList', description='The next hop list.', position='Query'),
  nextHopType?: string(name='NextHopType', description='The type of next hop of the custom route entry. Valid values:

*   **Instance**: an Elastic Compute Service (ECS) instance. This is the default value.
*   **HaVip**: a high-availability virtual IP address (HAVIP).
*   **RouterInterface**: a router interface.
*   **NetworkInterface**: an elastic network interface (ENI).
*   **VpnGateway**: a VPN gateway.
*   **IPv6Gateway**: an IPv6 gateway.
*   **NatGateway**: a NAT gateway.
*   **Attachment**: a transit router.
*   **VpcPeer**: a VPC peering connection.
*   **Ipv4Gateway**: an IPv4 gateway.
*   **GatewayEndpoint**: a gateway endpoint.
*   **Ecr**: a Express Connect Router (ECR).', example='RouterInterface', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the route table.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeEntryName?: string(name='RouteEntryName', description='The name of the custom route entry that you want to add.

The name must be 1 to 128 characters in length, and cannot start with `http://` or `https://`.', example='test', position='Query'),
  routeTableId: string(name='RouteTableId', description='The ID of the route table to which you want to add a custom route entry.

This parameter is required.', example='vtb-bp145q7glnuzd****', position='Query'),
}

model CreateRouteEntryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  routeEntryId?: string(name='RouteEntryId', description='The ID of the custom route entry.', example='rte-sn6vjkioxte1gz83z****'),
}

model CreateRouteEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRouteEntryResponseBody(name='body'),
}

/**
  * @description *   **CreateRouteEntry** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeRouteEntryList](https://help.aliyun.com/document_detail/138148.html) operation to query the status of the task:
  *     *   If a route is in the **Creating** state, the route is being added.
  *     *   If a route is in the **Created** state, the route is added.
  * *   You cannot repeatedly call **CreateRouteEntry** within a specific period of time.
  * **When you call this operation to add a custom route entry to the route table of a vRouter, take note of the following limits:**
  * >  When you add a route entry from a prefix list, the quota usage is calculated by adding the number of existing route entries and the maximum number of route entries of the prefix list.
  * *   A route table can contain up to 200 custom route entries.
  * *   The destination CIDR block (**DestinationCidrBlock**) of a custom route entry cannot be the same as or be a subset of the CIDR block of a vSwitch in the virtual private cloud (VPC). The destination CIDR block can contain the CIDR block of a vSwitch.
  * *   The destination CIDR block (**DestinationCidrBlock**) of a custom route entry cannot be 100.64.0.0/10 or a subset of it.
  * *   The destination CIDR blocks (**DestinationCidrBlock**) of route entries in the same route table must be unique.
  * *   If you do not include the mask length when you specify the destination CIDR block (**DestinationCidrBlock**), the destination CIDR block is considered a host IP address whose mask length is 32 bits.
  * *   Multiple custom route entries can point to the same next hop (**NextHopId**).
  * *   The next hop (**NextHopId**) of a custom route entry must in the same VPC as the route table.
  * *   Equal-cost multi-path (ECMP) routing can be configured by specifying the **NextHopList** parameter.
  *     *   When you add non-ECMP route entries, you must specify **DestinationCidrBlock**, **NextHopType**, and **NextHopId**, and you must not specify **NextHopList**.
  *     *   When you add route entries for ECMP routing, you must specify **DestinationCidrBlock** and **NextHopList**, and you must not specify **NextHopType** or **NextHopId**.
  * **When you call this operation to add a custom route entry to the route table of a VBR, take note of the following limits:**
  * *   A route table can contain up to 200 custom route entries.
  * *   **NextHopList** is not supported.
  * *   The destination CIDR block (**DestinationCidrBlock**) of a custom route entry cannot be 100.64.0.0/10 or a subset of it.
  * *   The destination CIDR blocks (**DestinationCidrBlock**) of route entries in the same route table must be unique.
  * *   If you do not include the mask length when you specify the destination CIDR block (**DestinationCidrBlock**), the destination CIDR block is considered a host IP address whose mask length is 32 bits.
  * *   Multiple custom route entries can point to the same next hop (**NextHopId**).
  * *   The next hop (**NextHopId**) of a custom route entry must be a router interface associated with the VBR.
  * *   You can add route entries only when the VBR is in the **Active** state, and the Express Connect circuit associated with the VBR is in the **Enabled** state and is not locked due to overdue payments.
  * *   Only non-ECMP route entries are supported. When you add non-ECMP route entries, you must specify **DestinationCidrBlock**, **NextHopType**, and **NextHopId**, and you cannot specify **NextHopList**.
  * @param request  the request parameters of CreateRouteEntry  CreateRouteEntryRequest
  * @return CreateRouteEntryResponse
 */
async function createRouteEntry(request: CreateRouteEntryRequest): CreateRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model CreateRouteTableRequest {
  associateType?: string(name='AssociateType', description='The type of the route table. Valid values:

*   **VSwitch** (default): vSwitch route table
*   **Gateway**: gateway route table', example='VSwitch', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** in each API request may be different.', example='02fb3da4-130e-11e9-8e44-0016e04', position='Query'),
  description?: string(name='Description', description='The description of the route table.

The description must be 1 to 256 characters in length, and cannot start with `http://` or `https://`.', example='abc', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the virtual private cloud (VPC) to which the custom route table belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-zhangjiakou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableName?: string(name='RouteTableName', description='The name of the route table.

The name must be 1 to 128 characters in length, and cannot start with `http://` or `https://`.', example='myRouteTable', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. You can specify up to 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags of the resource.', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the VPC to which the custom route table belongs.

If a VPC contains an Elastic Compute Service (ECS) instance that belongs to one of the following instance families, you cannot create a custom route table for the VPC:

ecs.c1, ecs.c2, ecs.c4, ecs.ce4, ecs.cm4, ecs.d1, ecs.e3, ecs.e4, ecs.ga1, ecs.gn4, ecs.gn5, ecs.i1, ecs.m1, ecs.m2, ecs.mn4, ecs.n1, ecs.n2, ecs.n4, ecs.s1, ecs.s2, ecs.s3, ecs.se1, ecs.sn1, ecs.sn2, ecs.t1, and ecs.xn4

You must upgrade or release the ECS instance before you can create a custom route table for the VPC.

*   For more information about how to upgrade an ECS instance, see [Upgrade subscription instances](https://help.aliyun.com/document_detail/25438.html) and [Change specifications of pay-as-you-go instances](https://help.aliyun.com/document_detail/60051.html).
*   For more information about how to release an ECS instance, see [Release an ECS instance](https://help.aliyun.com/document_detail/25442.html).

>  If a custom route table is created for a VPC that contains an ECS instance from one of the preceding instance families, you must upgrade or release the ECS instance. Otherwise, the custom route table cannot work as expected.

This parameter is required.', example='vpc-bp1qpo0kug3a20qqe****', position='Query'),
}

model CreateRouteTableResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='62172DD5-6BAC-45DF-8D44-E11ED28DCAC0'),
  routeTableId?: string(name='RouteTableId', description='The IDs of the route tables.', example='vtb-bp145q7glnuzdvzu2****'),
}

model CreateRouteTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRouteTableResponseBody(name='body'),
}

/**
  * @description *   **CreateRouteTable** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the operation in the background. You can call the [DescribeRouteTableList](https://help.aliyun.com/document_detail/87602.html) operation to query the status of the task.
  *     *   If the custom route table is in the **Creating** state, the custom route table is being created.
  *     *   If the custom route table is in the **Created** state, the custom route table is created.
  * *   You cannot repeatedly call the **CreateRouteTable** operation within the specified period of time.
  * @param request  the request parameters of CreateRouteTable  CreateRouteTableRequest
  * @return CreateRouteTableResponse
 */
async function createRouteTable(request: CreateRouteTableRequest): CreateRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model CreateRouterInterfaceRequest {
  accessPointId?: string(name='AccessPointId', description='The ID of the access point to which the VBR belongs.

You can call the [DescribeAccessPoints](https://help.aliyun.com/document_detail/36062.html) operation to obtain the IDs of access points.

>  This parameter is required if the VBR is connected to an Express Connect circuit.', example='ap-cn-hangzhou-yh-ts-A', position='Query'),
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment. Valid values:

*   **false** (default): The automatic payment is disabled. If you select this option, you must go to the Order Center to complete the payment after an order is generated.
*   **true**: The automatic payment is enabled. Payments are automatically complete after an order is generated.

>  This parameter is required if **InstanceChargeType** is set to **PrePaid**.', example='false', position='Query'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal. Valid values:

*   **false** (default)
*   **true**', example='false', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests.

>  If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The description of the router interface.

The description must be 2 to 256 characters in length. It must start with a letter but cannot start with `http://` or `https://`.', example='abcabc', position='Query'),
  fastLinkMode?: boolean(name='FastLinkMode', description='Specifies whether the VBR that is created in the Fast Link mode is uplinked to the router interface. The Fast Link mode helps automatically connect router interfaces that are created for the VBR and its peer VPC. Valid values:

*   **true**
*   **false**

> 

*   This parameter takes effect only if **RouterType** is set to **VBR** and **OppositeRouterType** is set to **VRouter**.

*   If **FastLinkMode** is set to **true**, **Role** must be set to **InitiatingSide**. In this case, **AccessPointId**, **OppositeRouterType**, **OpppsiteRouterId**, and **OppositeInterfaceOwnerId** are required.', example='false', position='Query'),
  healthCheckSourceIp?: string(name='HealthCheckSourceIp', description='The source IP address that is used to perform health checks. The source IP address must be an idle IP address of the local virtual private cloud (VPC).

>  You can set this parameter when an Express Connect circuit is used.', example='192.168.0.6', position='Query'),
  healthCheckTargetIp?: string(name='HealthCheckTargetIp', description='The destination IP address that is used to perform health checks.

>  This parameter is required if you specify **HealthCheckSourceIp**', example='192.168.0.8', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the router interface. Valid values:

*   **PrePaid**: subscription
*   **PostPaid**: pay-as-you-go', example='PrePaid', position='Query'),
  name?: string(name='Name', description='The name of the router interface.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-).', example='abc', position='Query'),
  oppositeAccessPointId?: string(name='OppositeAccessPointId', description='The ID of the access point to which the peer belongs.

>  This parameter is required if the peer router interface is associated with a VBR. The specified value cannot be changed after the router interface is created.', example='ap-cn-shanghai-nt-aligroup-C', position='Query'),
  oppositeInterfaceId?: string(name='OppositeInterfaceId', description='The ID of the peer router interface.', example='ri-2zeo3xzyf38r4urzd****', position='Query'),
  oppositeInterfaceOwnerId?: string(name='OppositeInterfaceOwnerId', description='The ID of the Alibaba Cloud account to which the peer router interface belongs.', example='253460731706911258', position='Query'),
  oppositeRegionId: string(name='OppositeRegionId', description='The ID of the region in which the acceptor is deployed.

This parameter is required.', example='cn-shanghai', position='Query'),
  oppositeRouterId?: string(name='OppositeRouterId', description='The ID of the peer router.', example='vrt-bp1lhl0taikrteen8****', position='Query'),
  oppositeRouterType?: string(name='OppositeRouterType', description='The type of router that is associated with the peer router interface. Valid values:

*   **VRouter**
*   **VBR**', example='VRouter', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', description='The subscription duration. Valid values:

*   Valid values when PricingCycle is set to Month: **1 to 9**.
*   Valid values when PricingCycle is set to Year: **1 to 3**.

>  This parameter is required if **InstanceChargeType** is set to **PrePaid**.', example='3', position='Query'),
  pricingCycle?: string(name='PricingCycle', description='The billing cycle of the subscription. Valid values:

*   **Month** (default)
*   **Year**

>  This parameter is required if **InstanceChargeType** is set to **PrePaid**.', example='Month', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the router interface belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to obtain the region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.

For more information about resource group, see [What is Resource Management?](https://help.aliyun.com/document_detail/94475.html)', example='rg-acfmxazb4ph6aiy****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  role: string(name='Role', description='The role of the router interface. Valid values:

*   **InitiatingSide**: requester
*   **AcceptingSide**: acceptor

This parameter is required.', example='InitiatingSide', position='Query'),
  routerId: string(name='RouterId', description='The ID of the router that is associated with the router interface.

This parameter is required.', example='vbr-m5ebm6g9ptc9mly1c****', position='Query'),
  routerType: string(name='RouterType', description='The type of router that is associated with the router interface. Valid values:

*   **VRouter**
*   **VBR**

This parameter is required.', example='VRouter', position='Query'),
  spec: string(name='Spec', description='The specification of the router interface and the corresponding bandwidth. Valid values:

*   **Mini.2**: 2 Mbit/s
*   **Mini.5**: 5 Mbit/s
*   **Small.1**: 10 Mbit/s
*   **Small.2**: 20 Mbit/s
*   **Small.5**: 50 Mbit/s
*   **Middle.1**: 100 Mbit/s
*   **Middle.2**: 200 Mbit/s
*   **Middle.5**: 500 Mbit/s
*   **Large.1**: 1,000 Mbit/s
*   **Large.2**: 2,000 Mbit/s
*   **Large.5**: 5,000 Mbit/s
*   **Xlarge.1**: 10,000 Mbit/s

>  If **Role** is set to **AcceptingSide**, set **Spec** to **Negative**. This indicates that you do not need to specify the specification when you create an acceptor router interface.

This parameter is required.', example='Mini.2', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key to add to the resource. You must enter at least one tag key. You can specify up to 20 tag keys. The tag key cannot be an empty string.

A tag key can be at most 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value to add to the resource. You can specify up to 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tags', description='The tag to add to the resource.', position='Query'),
}

model CreateRouterInterfaceResponseBody = {
  orderId?: long(name='OrderId', description='The order number. This parameter is returned if InstanceChargeType is set to PrePaid.', example='202008594930117'),
  requestId?: string(name='RequestId', description='The request ID.', example='079874CD-AEC1-43E6-AC03-ADD96B6E4907'),
  routerInterfaceId?: string(name='RouterInterfaceId', description='The ID of the router interface.', example='ri-2ze7fbuohm****'),
}

model CreateRouterInterfaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRouterInterfaceResponseBody(name='body'),
}

/**
  * @description When you call this operation, take note of the following limits:
  * *   You can create only one pair of interfaces to be connected between two routers.
  * *   You can create a maximum of five router interfaces for a router.
  * *   If your Alibaba Cloud account has a router interface with overdue payments, you cannot create new router interfaces.
  * *   Each destination CIDR block of route entries in the same route table must be unique.
  * *   A virtual border router (VBR) can serve only as a requester. The VBR must be in the Activated state.
  * *   You can call this operation to create subscription and pay-as-you-go router interfaces.
  * @param request  the request parameters of CreateRouterInterface  CreateRouterInterfaceRequest
  * @return CreateRouterInterfaceResponse
 */
async function createRouterInterface(request: CreateRouterInterfaceRequest): CreateRouterInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRouterInterface', 'POST', '/', 'json', false, 'json', request);
}

model CreateSnatEntryRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The `client token` can contain only ASCII characters.

**

**Description** If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44****', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  eipAffinity?: int32(name='EipAffinity', description='Specifies whether to enable EIP affinity. Valid values:

*   **0**: no
*   **1**: yes

**

**Description** After you enable EIP affinity, if multiple EIPs are associated with an SNAT entry, each client uses one EIP to access the Internet. If EIP affinity is disabled, each client uses a random EIP to access the Internet.', example='1', position='Query'),
  networkInterfaceId?: string(name='NetworkInterfaceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the NAT gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

Valid values:

*   ap-northeast-2-pop

    <!-- -->

    :

    <!-- -->

    ap-northeast-2-pop

    <!-- -->

    .

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  snatEntryName?: string(name='SnatEntryName', description='The name of the SNAT entry.

The name must be 2 to 128 characters in length. It must start with a letter but cannot start with `http://` or `https://`.', example='SnatEntry-1', position='Query'),
  snatIp?: string(name='SnatIp', description='*   The EIPs in the SNAT entry when you add an SNAT entry to an Internet NAT gateway. Separate EIPs with commas (,).

>  If you specify multiple EIPs in the SNAT IP address pool, the service connection is allocated to multiple EIPs by using the hashing algorithm. The traffic of each EIP may be different. Therefore, we recommend that you associate the EIPs with an Internet Shared Bandwidth instance to prevent service interruptions caused by bandwidth exhaustion.

*   When you add SNAT entries for a VPC NAT gateway, this parameter specifies the NAT IP addresses in the SNAT entry. Separate multiple NAT IP addresses with commas (,).', example='47.98.XX.XX', position='Query'),
  snatTableId: string(name='SnatTableId', description='The ID of the SNAT table.

This parameter is required.', example='stb-bp190wu8io1vgev****', position='Query'),
  sourceCIDR?: string(name='SourceCIDR', description='You can specify the CIDR block of a VPC, a vSwitch, or an ECS instance or enter a custom CIDR block.

You can specify an SNAT entry in the following ways:

*   You can specify the CIDR block of the VPC where the NAT gateway is deployed. Then, all ECS instances in the VPC can access the Internet or external networks by using SNAT.
*   You can specify the CIDR block of a vSwitch, for example, 192.168.1.0/24. Then, the ECS instances in the vSwitch can access the Internet or external networks by using SNAT.
*   You can specify the IP address of an ECS instance, for example, 192.168.1.1/32. Then, the ECS instance can access the Internet or external networks by using SNAT.
*   You can specify a custom CIDR block. Then, all ECS instances within the specified CIDR block can access the Internet or external networks by using SNAT.

When you add an SNAT entry to an Internet NAT gateway, if **SnatIp** is set to an EIP, the ECS instance uses the specified EIP to access the Internet.

If **SnatIp** is set to multiple EIPs, the ECS instance randomly selects an EIP specified in the **SnatIp** parameter to access the Internet.

You cannot specify this parameter and **SourceVSwtichId** at the same time. If **SourceVSwitchId** is specified, you cannot specify **SourceCIDR**. If **SourceCIDR** is specified, you cannot specify **SourceVSwitchId**.', example='10.1.1.0/24', position='Query'),
  sourceVSwitchId?: string(name='SourceVSwitchId', description='The ID of the vSwitch.

*   When you add an SNAT entry to an Internet NAT gateway, this parameter specifies that ECS instances in the vSwitch can use the SNAT entry to access the Internet. If you select multiple elastic IP addresses (EIPs) to create an SNAT address pool, connections are hashed to these EIPs. Network traffic may not be evenly distributed to the EIPs because the amount of traffic that passes through each connection varies. We recommend that you associate these EIPs with the same EIP bandwidth plan to prevent service interruptions due to the bandwidth limits on individual EIPs.
*   When you add an SNAT entry to a VPC NAT gateway, this parameter specifies that ECS instances in the vSwitch can use the SNAT entry to access external networks.', example='vsw-bp1nhx2s9ui5o****', position='Query'),
}

model CreateSnatEntryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='2315DEB7-5E92-423A-91F7-4C1EC9AD97C3'),
  snatEntryId?: string(name='SnatEntryId', description='The ID of the SNAT entry.', example='snat-kmd6nv8fy****'),
}

model CreateSnatEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSnatEntryResponseBody(name='body'),
}

/**
  * @description You can call this operation to add SNAT entries to Internet NAT gateways and Virtual Private Cloud (VPC) NAT gateways. In this topic, a **NAT** gateway refers to both gateway types.
  * Before you call this operation, take note of the following limits:
  * *   **CreateSnatEntry** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeSnatTableEntries](https://help.aliyun.com/document_detail/42677.html) operation to query the status of the task.
  *     *   If the SNAT entry is in the **Pending** state, the system is adding the SNAT entry. You can only query the status of the SNAT entry, and cannot perform other operations.
  *     *   If the SNAT entry is in the **Available** state, the SNAT entry is added.
  * *   You cannot repeatedly call the **CreateSnatEntry** operation to add an SNAT entry to an SNAT table within the specified period of time.
  * *   The vSwitch and Elastic Compute Service (ECS) instance specified in an SNAT entry must be created in the VPC where the NAT gateway is deployed.
  * *   Each vSwitch or ECS instance can be specified in only one SNAT entry.
  * *   If a high-availability virtual IP address (HAVIP) exists in a vSwitch, you cannot create SNAT entries.
  * @param request  the request parameters of CreateSnatEntry  CreateSnatEntryRequest
  * @return CreateSnatEntryResponse
 */
async function createSnatEntry(request: CreateSnatEntryRequest): CreateSnatEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSnatEntry', 'POST', '/', 'json', false, 'json', request);
}

model CreateSslVpnClientCertRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  name?: string(name='Name', description='The name of the SSL client certificate.

The name must be 1 to 100 characters in length, and cannot start with `http://` or `https://`.', example='SslVpnClientCert1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the VPN gateway is created.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sslVpnServerId: string(name='SslVpnServerId', description='The ID of the SSL server.

This parameter is required.', example='vss-m5et0q3iy1qex328w****', position='Query'),
}

model CreateSslVpnClientCertResponseBody = {
  name?: string(name='Name', description='The name of the SSL client certificate.', example='SslVpnClientCert'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='079874CD-AEC1-43E6-AC03-ADD96B6E4907'),
  sslVpnClientCertId?: string(name='SslVpnClientCertId', description='The ID of the SSL client certificate.', example='vsc-m5euof6s5jy8vs5kd****'),
}

model CreateSslVpnClientCertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSslVpnClientCertResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSslVpnClientCert  CreateSslVpnClientCertRequest
  * @return CreateSslVpnClientCertResponse
 */
async function createSslVpnClientCert(request: CreateSslVpnClientCertRequest): CreateSslVpnClientCertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSslVpnClientCert', 'POST', '/', 'json', false, 'json', request);
}

model CreateSslVpnServerRequest {
  cipher?: string(name='Cipher', description='The encryption algorithm that is used by the SSL-VPN connection.

*   If the client uses Tunnelblick or OpenVPN 2.4.0 or later, the SSL server dynamically negotiates with the client about the encryption algorithm and uses the most secure encryption algorithm that is supported by the SSL server and the client. The encryption algorithm that you specify for the SSL server does not take effect.

*   If the client uses OpenVPN of a version that is earlier than 2.4.0, the SSL server and the client use the encryption algorithm that you specify for the SSL server. You can specify one of the following encryption algorithms for the SSL server:

    *   **AES-128-CBC** (default)
    *   **AES-192-CBC**
    *   **AES-256-CBC**
    *   **none**', example='AES-128-CBC', position='Query'),
  clientIpPool: string(name='ClientIpPool', description='The client CIDR block.

It is the CIDR block from which an IP address is allocated to the virtual network interface controller (NIC) of the client. It is not the private CIDR block of the client.

If the client accesses the SSL server over an SSL-VPN connection, the VPN gateway assigns an IP address from the specified client CIDR block to the client. The client uses the assigned IP address to access cloud resources.

Make sure that the number of IP addresses in the client CIDR block is at least four times the maximum number of SSL-VPN connections supported by the VPN gateway.

<details>
<summary>Click to view the reason.</summary>

For example, if you specify 192.168.0.0/24 as the client CIDR block, the system first divides a subnet CIDR block with a subnet mask of 30 from 192.168.0.0/24, such as 192.168.0.4/30. This subnet provides up to four IP addresses. Then, the system allocates an IP address from 192.168.0.4/30 to the client and uses the other three IP addresses to ensure network communication. In this case, one client consumes four IP addresses. Therefore, to ensure that an IP address is assigned to your client, you must make sure that the number of IP addresses in the client CIDR block is at least four times the maximum number of SSL-VPN connections supported by the VPN gateway with which the SSL server is associated.
</details>

<details>
<summary>Click to view the CIDR blocks that are not supported.</summary>

*   100.64.0.0~100.127.255.255
*   127.0.0.0~127.255.255.255
*   169.254.0.0~169.254.255.255
*   224.0.0.0~239.255.255.255
*   255.0.0.0~255.255.255.255
</details>

<details>
<summary>Click to view the recommended client CIDR blocks for different numbers of SSL-VPN connections.</summary>

*   If the number of SSL-VPN connections is 5, we recommend that you specify a client CIDR block with a subnet mask that is less than or equal to 27 bits in length. Examples: 10.0.0.0/27 and 10.0.0.0/26.
*   If the number of SSL-VPN connections is 10, we recommend that you specify a client CIDR block with a subnet mask that is less than or equal to 26 bits in length. Examples: 10.0.0.0/26 and 10.0.0.0/25.
*   If the number of SSL-VPN connections is 20, we recommend that you specify a client CIDR block with a subnet mask that is less than or equal to 25 bits in length. Examples: 10.0.0.0/25 and 10.0.0.0/24.
*   If the number of SSL-VPN connections is 50, we recommend that you specify a client CIDR block with a subnet mask that is less than or equal to 24 bits in length. Examples: 10.0.0.0/24 and 10.0.0.0/23.
*   If the number of SSL-VPN connections is 100, we recommend that you specify a client CIDR block with a subnet mask that is less than or equal to 23 bits in length. Examples: 10.0.0.0/23 and 10.0.0.0/22.
*   If the number of SSL-VPN connections is 200, we recommend that you specify a client CIDR block with a subnet mask that is less than or equal to 22 bits in length. Examples: 10.0.0.0/22 and 10.0.0.0/21.
*   If the number of SSL-VPN connections is 500, we recommend that you specify a client CIDR block with a subnet mask that is less than or equal to 21 bits in length. Examples: 10.0.0.0/21 and 10.0.0.0/20.
*   If the number of SSL-VPN connections is 1,000, we recommend that you specify a client CIDR block with a subnet mask that is less than or equal to 20 bits in length. Examples: 10.0.0.0/20 and 10.0.0.0/19.
</details>

> - The subnet mask of the client CIDR block must be 16 to 29 bits in length.
> - Make sure that the local CIDR block and the client CIDR block do not overlap with each other.
> - We recommend that you use 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, or one of their subnets as the client CIDR block. If you want to specify a public CIDR block as the client CIDR block, you must specify the public CIDR block as the user CIDR block of the virtual private cloud (VPC). This way, the VPC can access the public CIDR block. For more information, see [VPC FAQ](https://help.aliyun.com/document_detail/185311.html).
> - After you create an SSL server, the system automatically adds routes that point to the client CIDR block to the VPC route table, which is not displayed in the console by default. Do not add routes that point to the client CIDR block to the VPC route table again. Otherwise, SSL-VPN connections cannot work as expected.

This parameter is required.', example='192.168.1.0/24', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  compress?: boolean(name='Compress', description='Specifies whether to enable data compression. Valid values:

*   **true**
*   **false** (default)', example='false', position='Query'),
  enableMultiFactorAuth?: boolean(name='EnableMultiFactorAuth', description='Specifies whether to enable two-factor authentication. To enable two-factor authentication, you need to specify `IDaaSInstanceId`, `IDaaSRegionId`, and `IDaaSApplicationId`. Valid values:

*   **true**
*   **false** (default)

> 

*   If you use two-factor authentication for the first time, you need to complete [authorization](https://ram.console.aliyun.com/role/authorization?request=%7B%22Services%22%3A%5B%7B%22Service%22%3A%22VPN%22%2C%22Roles%22%3A%5B%7B%22RoleName%22%3A%22AliyunVpnAccessingIdaasRole%22%2C%22TemplateId%22%3A%22IdaasRole%22%7D%5D%7D%5D%2C%22ReturnUrl%22%3A%22https%3A%2F%2Fvpc.console.aliyun.com%2Fsslvpn%2Fcn-shanghai%2Fvpn-servers%22%7D) before you create an SSL server.

*   IDaaS EIAM 1.0 instances are no longer available for purchase. If your Alibaba Cloud account has IDaaS EIAM 1.0 instances, IDaaS EIAM 1.0 instances can be associated after two-factor authentication is enabled. If your Alibaba Cloud account does not have IDaaS EIAM 1.0 instances, only IDaaS EIAM 2.0 instances can be associated after two-factor authentication is enabled.', example='false', position='Query'),
  iDaaSApplicationId?: string(name='IDaaSApplicationId', description='The ID of the IDaaS application.

*   If an IDaaS EIAM 2.0 instance is associated, you need to specify an IDaaS application ID.
*   If an IDaaS EIAM 1.0 instance is associated, you do not need to specify an IDaaS application ID.', example='app_my6g4qmvnwxzj2f****', position='Query'),
  iDaaSInstanceId?: string(name='IDaaSInstanceId', description='The ID of the IDaaS EIAM instance.', example='idaas-cn-hangzhou-p****', position='Query'),
  iDaaSRegionId?: string(name='IDaaSRegionId', description='The region ID of the IDaaS EIAM instance.', example='cn-hangzhou', position='Query'),
  localSubnet: string(name='LocalSubnet', description='The local CIDR block.

It is the CIDR block that your client needs to access by using the SSL-VPN connection.

This value can be the CIDR block of a VPC, a vSwitch, a data center that is connected to a VPC by using an Express Connect circuit, or an Alibaba Cloud service such as Object Storage Service (OSS).

The subnet mask of the specified local CIDR block must be 8 to 32 bits in length. You cannot specify the following CIDR blocks as the local CIDR blocks:

*   100.64.0.0~100.127.255.255
*   127.0.0.0~127.255.255.255
*   169.254.0.0~169.254.255.255
*   224.0.0.0~239.255.255.255
*   255.0.0.0~255.255.255.255

This parameter is required.', example='10.0.0.0/8', position='Query'),
  name?: string(name='Name', description='The SSL server name.

The name must be 1 to 100 characters in length and cannot start with `http://` or `https://`.', example='sslvpnname', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  port?: int32(name='Port', description='The port that is used by the SSL server. Valid values of port numbers: **1** to **65535**. Default value: **1194**.

The following ports are not supported: **22**, **2222**, **22222**, **9000**, **9001**, **9002**, **7505**, **80**, **443**, **53**, **68**, **123**, **4510**, **4560**, **500**, and **4500**.', example='1194', position='Query'),
  proto?: string(name='Proto', description='The protocol that is used by the SSL server. Valid values:

*   **TCP** (default)
*   **UDP**', example='UDP', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VPN gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', description='The ID of the VPN gateway.

This parameter is required.', example='vpn-bp1hgim8by0kc9nga****', position='Query'),
}

model CreateSslVpnServerResponseBody = {
  name?: string(name='Name', description='The SSL server name.', example='test'),
  requestId?: string(name='RequestId', description='The request ID.', example='E98A9651-7098-40C7-8F85-C818D1EBBA85'),
  sslVpnServerId?: string(name='SslVpnServerId', description='The ID of the SSL server.', example='vss-bp18q7hzj6largv4v****'),
}

model CreateSslVpnServerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSslVpnServerResponseBody(name='body'),
}

/**
  * @description *   **CreateSslVpnServer** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeVpnGateway](https://help.aliyun.com/document_detail/2794055.html) operation to query the status of the task.
  *     *   If the VPN gateway is in the **updating** state, the SSL server is being created.
  *     *   If the VPN gateway is in the **active** state, the SSL server is created.
  * *   You cannot repeatedly call the **CreateSslVpnServer** operation within the specified period of time.
  * ### [](#)Prerequisite
  * *   A VPN gateway is created, and the SSL-VPN feature is enabled for the VPN gateway. For more information, see [CreateVpnGateway](https://help.aliyun.com/document_detail/2794049.html).
  * *   If you want to enable two-factor authentication for the SSL server, make sure that the VPN gateway supports two-factor authentication. You may need to upgrade the VPN gateway. For more information, see [Two-factor authentication supports IDaaS EIAM 2.0](https://help.aliyun.com/document_detail/2785320.html).
  * @param request  the request parameters of CreateSslVpnServer  CreateSslVpnServerRequest
  * @return CreateSslVpnServerResponse
 */
async function createSslVpnServer(request: CreateSslVpnServerRequest): CreateSslVpnServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSslVpnServer', 'POST', '/', 'json', false, 'json', request);
}

model CreateTrafficMirrorFilterRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must ensure that the value is unique among all requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, the system uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: performs a dry run. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**: performs a dry run and sends the request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed. This is the default value.', example='false', position='Query'),
  egressRules?: [ 
    {
      action?: string(name='Action', description='The action of the outbound rule. Valid values:

*   **accept**: collects network traffic.
*   **drop**: does not collect network traffic.', example='accept'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', description='The destination CIDR block of the outbound traffic.', example='10.0.0.0/24'),
      destinationPortRange?: string(name='DestinationPortRange', description='The destination port range of the outbound traffic. Valid values for a port: **1** to **65535**. Separate the first port and the last port with a forward slash (/). Examples: **1/200** and **80/80**. You cannot set this parameter to only **-1/-1**. The value -1/-1 specifies all ports.

>  If you set **EgressRules.N.Protocol** to **ALL** or **ICMP**, you do not need to set this parameter. In this case, all ports are available.', example='22/40'),
      priority?: int32(name='Priority', description='The priority of the outbound rule. A smaller value indicates a higher priority.

The maximum value of **N** is **10**. You can configure up to 10 outbound rules for a filter.', example='1'),
      protocol?: string(name='Protocol', description='The protocol that is used by the outbound traffic to be mirrored. Valid values:

*   **ALL**: all protocols
*   **ICMP**: ICMP
*   **TCP**: TCP
*   **UDP**: UDP', example='TCP'),
      sourceCidrBlock?: string(name='SourceCidrBlock', description='The source CIDR block of the outbound traffic.', example='10.0.0.0/24'),
      sourcePortRange?: string(name='SourcePortRange', description='The source port range of the outbound traffic. Valid values for a port: **1** to **65535**. Separate the first port and the last port with a forward slash (/). Examples: **1/200** and **80/80**. You cannot set this parameter to only **-1/-1**. The value -1/-1 specifies all ports.

>  If you set **EgressRules.N.Protocol** to **ALL** or **ICMP**, you do not need to set this parameter. In this case, all ports are available.', example='22/40'),
    }
  ](name='EgressRules', description='The list of outbound rules.', position='Query'),
  ingressRules?: [ 
    {
      action?: string(name='Action', description='The action of the inbound rule. Valid values:

*   **accept**: collects network traffic.
*   **drop**: does not collect network traffic.', example='accept'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', description='The destination CIDR block of the inbound traffic.', example='10.0.0.0/24'),
      destinationPortRange?: string(name='DestinationPortRange', description='The destination port range of the inbound traffic. Valid values for a port: **1** to **65535**. Separate the first port and the last port with a forward slash (/). Examples: **1/200** and **80/80**.

>  If you set **IngressRules.N.Protocol** to **ALL** or **ICMP**, you do not need to set this parameter. In this case, all ports are available.', example='80/120'),
      priority?: int32(name='Priority', description='The priority of the inbound rule. A smaller value indicates a higher priority.

The maximum value of **N** is **10**. You can configure up to 10 inbound rules for a filter.', example='1'),
      protocol?: string(name='Protocol', description='The protocol that is used by the inbound traffic to be mirrored. Valid values:

*   **ALL**: all protocols
*   **ICMP**: ICMP
*   **TCP**: TCP
*   **UDP**: UDP', example='TCP'),
      sourceCidrBlock?: string(name='SourceCidrBlock', description='The source CIDR block of the inbound traffic.', example='10.0.0.0/24'),
      sourcePortRange?: string(name='SourcePortRange', description='The source port range of the inbound traffic. Valid values for a port: **1** to **65535**. Separate the first port and the last port with a forward slash (/). Examples: **1/200** and **80/80**.

>  If you set **IngressRules.N.Protocol** to **ALL** or **ICMP**, you do not need to set this parameter. In this case, all ports are available.', example='80/120'),
    }
  ](name='IngressRules', description='The list of inbound rules.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the mirrored traffic belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list. For more information about regions that support traffic mirroring, see [Overview of traffic mirroring](https://help.aliyun.com/document_detail/207513.html).

This parameter is required.', example='cn-hongkong', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the mirrored traffic belongs.', example='rg-bp67acfmxazb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. You can specify at most 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length. The tag key cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tag of the resource.', position='Query'),
  trafficMirrorFilterDescription?: string(name='TrafficMirrorFilterDescription', description='The description of the filter.

The description must be 1 to 256 characters in length and cannot start with `http://` or `https://`.', example='this is a filter.', position='Query'),
  trafficMirrorFilterName?: string(name='TrafficMirrorFilterName', description='The name of the filter.

The name must be 1 to 128 characters in length, and cannot start with `http://` or `https://`.', example='abc', position='Query'),
}

model CreateTrafficMirrorFilterResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='28DB147D-217B-43E8-9E94-A3F6837DDC8A'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the mirrored traffic belongs.', example='rg-bp67acfmxazb4ph****'),
  trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', description='The ID of the filter.', example='tmf-j6cmls82xnc86vtpe****'),
}

model CreateTrafficMirrorFilterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTrafficMirrorFilterResponseBody(name='body'),
}

/**
  * @description **CreateTrafficMirrorFilter** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListTrafficMirrorFilters](https://help.aliyun.com/document_detail/261353.html) operation to query the status of the task.
  * *   If the filter is in the **Creating** state, the filter is being created.
  * *   If the filter is in the **Created** state, the filter is created.
  * @param request  the request parameters of CreateTrafficMirrorFilter  CreateTrafficMirrorFilterRequest
  * @return CreateTrafficMirrorFilterResponse
 */
async function createTrafficMirrorFilter(request: CreateTrafficMirrorFilterRequest): CreateTrafficMirrorFilterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTrafficMirrorFilter', 'POST', '/', 'json', false, 'json', request);
}

model CreateTrafficMirrorFilterRulesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, the system uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Valid values:

*   **true**: checks the request without performing the operation. The system checks the required parameters, request format, and limits. If the request fails the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. After the request passes the check, the operation is performed.', example='false', position='Query'),
  egressRules?: [ 
    {
      action?: string(name='Action', description='The action of the outbound rule. Valid values:

*   **accept**: accepts network traffic.
*   **drop**: drops network traffic.', example='accept'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', description='The destination CIDR block of the outbound traffic.', example='10.0.0.0/24'),
      destinationPortRange?: string(name='DestinationPortRange', description='The destination port range of the outbound traffic. Valid values for a port: **1** to **65535**. Separate the first port and the last port with a forward slash (/). Examples: **1/200** and **80/80**. You cannot set this parameter to only **-1/-1**, which specifies all ports.

>  If you set **EgressRules.N.Protocol** to **ALL** or **ICMP**, you do not need to set this parameter. In this case, all ports are available.', example='22/40'),
      priority?: int32(name='Priority', description='The priority of the outbound rule. A smaller value indicates a higher priority. The maximum value of **N** is **10**. You can configure up to 10 outbound rules for a filter.', example='1'),
      protocol?: string(name='Protocol', description='The protocol that is used by the outbound traffic to be mirrored. Valid values:

*   **ALL**: all protocols
*   **ICMP**: ICMP
*   **TCP**: TCP
*   **UDP**: UDP', example='TCP'),
      sourceCidrBlock?: string(name='SourceCidrBlock', description='The source CIDR block of the outbound traffic.', example='10.0.0.0/24'),
      sourcePortRange?: string(name='SourcePortRange', description='The source port range of the outbound traffic. Valid values for a port: **1** to **65535**. Separate the first port and the last port with a forward slash (/). Examples: **1/200** and **80/80**. You cannot set this parameter to only **-1/-1**, which specifies all ports.

>  If you set **EgressRules.N.Protocol** to **ALL** or **ICMP**, you do not need to set this parameter. In this case, all ports are available.', example='22/40'),
    }
  ](name='EgressRules', description='The list of outbound rules.', position='Query'),
  ingressRules?: [ 
    {
      action?: string(name='Action', description='The action of the inbound rule. Valid values:

*   **accept**: accepts network traffic.
*   **drop**: drops network traffic.', example='accept'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', description='The destination CIDR block of the inbound traffic.', example='10.0.0.0/24'),
      destinationPortRange?: string(name='DestinationPortRange', description='The destination port range of the inbound traffic. Valid values for a port: **1** to **65535**. Separate the first port and the last port with a forward slash (/). Examples: **1/200** and **80/80**.

>  If you set **IngressRules.N.Protocol** to **ALL** or **ICMP**, you do not need to set this parameter. In this case, all ports are available.', example='80/120'),
      priority?: int32(name='Priority', description='The priority of the inbound rule. A smaller value indicates a higher priority. The maximum value of **N** is **10**. You can configure up to 10 inbound rules for a filter.', example='1'),
      protocol?: string(name='Protocol', description='The protocol that is used by the inbound traffic to be mirrored. Valid values:

*   **ALL**: all protocols
*   **ICMP**: Internet Control Message Protocol (ICMP)
*   **TCP**: TCP
*   **UDP**: User Datagram Protocol (UDP)', example='TCP'),
      sourceCidrBlock?: string(name='SourceCidrBlock', description='The source CIDR block of the inbound traffic.', example='10.0.0.0/24'),
      sourcePortRange?: string(name='SourcePortRange', description='The source port range of the inbound traffic. Valid values for a port: **1** to **65535**. Separate the first port and the last port with a forward slash (/). Examples: **1/200** and **80/80**. You cannot set this parameter to only **-1/-1**, which specifies all ports.

>  If you set **IngressRules.N.Protocol** to **ALL** or **ICMP**, you do not need to set this parameter. In this case, all ports are available.', example='80/120'),
    }
  ](name='IngressRules', description='The list of inbound rules.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the mirrored traffic belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list. For more information about regions that support traffic mirroring, see [Overview of traffic mirroring](https://help.aliyun.com/document_detail/207513.html).

This parameter is required.', example='cn-hongkong', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMirrorFilterId: string(name='TrafficMirrorFilterId', description='The ID of the filter.

This parameter is required.', example='tmf-j6cmls82xnc86vtpe****', position='Query'),
}

model CreateTrafficMirrorFilterRulesResponseBody = {
  egressRules?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the outbound rule.', example='tmr-j6cok23ugp53eeib5****'),
    }
  ](name='EgressRules', description='The list of outbound rules.'),
  ingressRules?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the inbound rule.', example='tmr-j6c6rtallo51ouzv3****'),
    }
  ](name='IngressRules', description='The list of inbound rules.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='07F272E2-6AD5-433A-8207-A607C76F1676'),
}

model CreateTrafficMirrorFilterRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTrafficMirrorFilterRulesResponseBody(name='body'),
}

/**
  * @description *   **CreateTrafficMirrorFilterRules** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [ListTrafficMirrorFilters](https://help.aliyun.com/document_detail/261353.html) to query the status of the task.
  *     *   If the inbound or outbound rule is in the **Creating** state, the rule is being created.
  *     *   If the inbound or outbound rule is in the **Created** state, the rule is created.
  * *   You cannot call **CreateTrafficMirrorFilterRules** within the specified period of time.
  * @param request  the request parameters of CreateTrafficMirrorFilterRules  CreateTrafficMirrorFilterRulesRequest
  * @return CreateTrafficMirrorFilterRulesResponse
 */
async function createTrafficMirrorFilterRules(request: CreateTrafficMirrorFilterRulesRequest): CreateTrafficMirrorFilterRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTrafficMirrorFilterRules', 'POST', '/', 'json', false, 'json', request);
}

model CreateTrafficMirrorSessionRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must ensure that the value is unique among all requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, the system uses **RequestId** as **ClientToken**. **RequestId** might be different for each API request.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: performs a dry run. The system checks the required parameters, request format, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the request. If the request passes the dry run, the operation is performed.', example='false', position='Query'),
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the traffic mirror session. Valid values:

*   **false** (default): does not enable the traffic mirror session.
*   **true**: enables the traffic mirror session.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  packetLength?: int32(name='PacketLength', description='The maximum transmission unit.

Valid values: **64 to 9600**. Default value: **1500**.', example='1500', position='Query'),
  priority: int32(name='Priority', description='The priority of the traffic mirror session. Valid values: **1** to **32766**.

A smaller value indicates a higher priority. You cannot specify identical priorities for traffic mirror sessions that are created in the same region by using the same account.

This parameter is required.', example='1', minimum=1, maximum=32766, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the traffic mirror session belongs. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list. For more information about regions that support traffic mirroring, see [Overview of traffic mirroring](https://help.aliyun.com/document_detail/207513.html).

This parameter is required.', example='cn-hongkong', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the mirrored traffic belongs.', example='rg-bp67acfmxazb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. You can specify at most 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tag of the resource.', position='Query'),
  trafficMirrorFilterId: string(name='TrafficMirrorFilterId', description='The ID of the filter.

This parameter is required.', example='tmf-j6cmls82xnc86vtpe****', position='Query'),
  trafficMirrorSessionDescription?: string(name='TrafficMirrorSessionDescription', description='The description of the traffic mirror session.

The description must be 1 to 256 characters in length and cannot start with `http://` or `https://`.', example='This is a trafficmirrorsession.', position='Query'),
  trafficMirrorSessionName?: string(name='TrafficMirrorSessionName', description='The name of the traffic mirror session.

The name must be 1 to 128 characters in length, and cannot start with `http://` or `https://`.', example='test', position='Query'),
  trafficMirrorSourceIds: [ string ](name='TrafficMirrorSourceIds', description='The ID of the traffic mirror source. You can specify only an elastic network interface (ENI) as the traffic mirror source. The default value of **N** is **1**, which indicates that you can add only one traffic mirror source to a traffic mirror session.

This parameter is required.', example='eni-j6c2fp57q8rr47rp****', maxLength=128, position='Query'),
  trafficMirrorTargetId: string(name='TrafficMirrorTargetId', description='The ID of the traffic mirror destination. You can specify only an elastic network interface (ENI) or a Server Load Balancer (SLB) instance as a traffic mirror destination.

This parameter is required.', example='eni-j6c8znm5l1yt4sox****', position='Query'),
  trafficMirrorTargetType: string(name='TrafficMirrorTargetType', description='The type of the traffic mirror destination. Valid values:

*   **NetworkInterface**: an ENI
*   **SLB**: an SLB instance

This parameter is required.', example='NetworkInterface', position='Query'),
  virtualNetworkId?: int32(name='VirtualNetworkId', description='The VXLAN network identifier (VNI). Valid values: **0** to **16777215**.

You can use VNIs to identify mirrored traffic from different sessions at the traffic mirror destination. You can specify a custom VNI or use a random VNI allocated by the system. If you want the system to randomly allocate a VNI, do not enter a value.', example='1', position='Query'),
}

model CreateTrafficMirrorSessionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the mirrored traffic belongs.', example='rg-bp67acfmxazb4ph****'),
  trafficMirrorSessionId?: string(name='TrafficMirrorSessionId', description='The ID of the traffic mirror session.', example='tms-j6ce5di4w7nvigfjz****'),
}

model CreateTrafficMirrorSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTrafficMirrorSessionResponseBody(name='body'),
}

/**
  * @description **CreateTrafficMirrorSession** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [ListTrafficMirrorSessions](https://help.aliyun.com/document_detail/261367.html) to query the status of the task.
  * *   If the traffic mirror session is in the **Creating** state, it is being created.
  * *   If the traffic mirror session is in the **Created** state, it is created.
  * @param request  the request parameters of CreateTrafficMirrorSession  CreateTrafficMirrorSessionRequest
  * @return CreateTrafficMirrorSessionResponse
 */
async function createTrafficMirrorSession(request: CreateTrafficMirrorSessionRequest): CreateTrafficMirrorSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTrafficMirrorSession', 'POST', '/', 'json', false, 'json', request);
}

model CreateVSwitchRequest {
  cidrBlock: string(name='CidrBlock', description='The CIDR block of the vSwitch. Take note of the following limits:

*   The subnet mask of the CIDR block must be 16 to 29 bits in length.
*   The CIDR block of the vSwitch must fall within the CIDR block of the VPC to which the vSwitch belongs.
*   The CIDR block of a vSwitch cannot be the same as the destination CIDR block in a route entry of the VPC. However, it can be a subset of the destination CIDR block.

This parameter is required.', example='172.16.0.0/24', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  description?: string(name='Description', description='The description of the vSwitch.

The description must be 1 to 256 characters in length and cannot start with `http://` or `https://`.', example='vSwitch', position='Query'),
  ipv6CidrBlock?: int32(name='Ipv6CidrBlock', description='The last eight bits of the IPv6 CIDR block of the vSwitch. Valid values: **0** to **255**.', example='12', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the vSwitch.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. You can specify at most 20 tag keys. The tag key cannot be an empty string.

The tag key can be at most 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceJoshua'),
      value?: string(name='Value', description='The tag value. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length, but cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.', example='FinanceDept'),
    }
  ](name='Tag', description='The tag of the resource.', position='Query'),
  vSwitchName?: string(name='VSwitchName', description='The name of the vSwitch.

The name must be 1 to 128 characters in length, and cannot start with `http://` or `https://`.', example='vSwitch-1', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the VPC where you want to create the vSwitch.

This parameter is required.', example='vpc-257gqcdfvx6n****', position='Query'),
  vpcIpv6CidrBlock?: string(name='VpcIpv6CidrBlock', description='The IPv6 CIDR block of the VPC.', example='2408:XXXX:0:6a::/56', position='Query'),
  zoneId: string(name='ZoneId', description='The zone ID of the vSwitch.

You can call the [DescribeZones](https://help.aliyun.com/document_detail/36064.html) operation to query the most recent zone list.

This parameter is required.', example='cn-hangzhou-b', position='Query'),
}

model CreateVSwitchResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-25navfgbue4g****'),
}

model CreateVSwitchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVSwitchResponseBody(name='body'),
}

/**
  * @description When you call this operation, take note of the following limits:
  * *   You can create at most 150 vSwitches in a virtual private cloud (VPC).
  * *   The first IP address and last three IP addresses of each vSwitch CIDR block are reserved. For example, if the CIDR block of a vSwitch is 192.168.1.0/24, the IP addresses 192.168.1.0, 192.168.1.253, 192.168.1.254, and 192.168.1.255 are reserved.
  * *   The number of instances in a vSwitch cannot exceed the remaining capacity of the VPC. The remaining capacity is the difference between 15,000 and the current number of instances.
  * *   Each instance can belong to only one vSwitch.
  * *   vSwitches do not support multicast or broadcast.
  * *   After you create a vSwitch, you cannot modify its CIDR block.
  * *   **CreateVSwitch** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [DescribeVSwitchAttributes](https://help.aliyun.com/document_detail/94567.html) to query the status of the task.
  *     *   If the vSwitch is in the **Pending** state, the vSwitch is being configured.
  *     *   If the vSwitch is in the **Available** state, the vSwitch is available.
  * *   You cannot repeatedly call the **CreateVSwitch** operation to create a vSwitch in a VPC within the specified period of time.
  * @param request  the request parameters of CreateVSwitch  CreateVSwitchRequest
  * @return CreateVSwitchResponse
 */
async function createVSwitch(request: CreateVSwitchRequest): CreateVSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVSwitch', 'POST', '/', 'json', false, 'json', request);
}

model CreateVSwitchCidrReservationRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run, without performing the actual request. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  ipVersion?: string(name='IpVersion', description='The IP version of the reserved CIDR block. Valid values:

*   **IPv4** (default)
*   **IPv6**', example='IPv4', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the vSwitch is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the resource. You can specify at most 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length. It cannot start with aliyun or acs:, and cannot contain http:// or https://.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N to add to the resource. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot start with acs: or aliyun. It cannot contain http:// or https://.', example='FinanceJoshua'),
    }
  ](name='Tag', description='Resource tags', position='Query'),
  vSwitchCidrReservationCidr?: string(name='VSwitchCidrReservationCidr', description='The reserved CIDR block of the vSwitch.

*   When **IpVersion** is set to **IPv4**, the reserved CIDR block must be a proper subset of the IPv4 CIDR block of the vSwitch and the subnet mask length of the reserved CIDR block cannot be greater than 28.
*   When **IpVersion** is set to **IPv6**, the reserved CIDR block must be a proper subset of the IPv6 CIDR block of the vSwitch and the subnet mask length of the reserved CIDR block cannot be greater than 80.

>  You must specify one of **VSwitchCidrReservationMask** and **VSwitchCidrReservationCidr**.', example='192.168.1.64/28', position='Query'),
  vSwitchCidrReservationDescription?: string(name='VSwitchCidrReservationDescription', description='The description of the reserved CIDR block. This parameter is empty by default.

The description must be 2 to 256 characters in length. It must start with a letter and cannot start with `http://` or `https://`.', example='ReservationDescription', position='Query'),
  vSwitchCidrReservationMask?: string(name='VSwitchCidrReservationMask', description='The subnet mask of the reserved CIDR block.

*   When **IpVersion** is set to **IPv4**, the subnet mask length of the CIDR block must be greater than the IPv4 subnet mask length of the vSwitch and cannot be greater than 28.
*   When **IpVersion** is set to **IPv6**, the subnet mask length of the CIDR block must be greater than the IPv6 subnet mask length of the vSwitch and cannot be greater than 80.

>  You must specify one of **VSwitchCidrReservationMask** and **VSwitchCidrReservationCidr**.', example='28', position='Query'),
  vSwitchCidrReservationName?: string(name='VSwitchCidrReservationName', description='The name of the reserved CIDR block.

The name must be 2 to 128 characters in length and can contain digits, underscores (_), and hyphens (-). It must start with a letter.', example='ReservationName', position='Query'),
  vSwitchCidrReservationType?: string(name='VSwitchCidrReservationType', description='The type of reserved CIDR block. Set the value to **prefix**.

>  When a user or a cloud service allocates a CIDR block to an elastic network interface (ENI), the CIDR block must be allocated from the reserved CIDR block. If the reserved CIDR block is exhausted, an error is returned.', example='prefix', position='Query'),
  vSwitchId: string(name='VSwitchId', description='The ID of the vSwitch to which the reserved CIDR block belongs.

This parameter is required.', example='vsw-25navfgbue4g****', position='Query'),
}

model CreateVSwitchCidrReservationResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  vSwitchCidrReservationId?: string(name='VSwitchCidrReservationId', description='The ID of the reserved CIDR block.', example='vcr-bp1m12saqteraw3rp****'),
}

model CreateVSwitchCidrReservationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVSwitchCidrReservationResponseBody(name='body'),
}

/**
  * @description ## [](#)Description
  * Take note of the following items:
  * *   You can create at most 10 reserved IPv4 CIDR blocks and 10 reserved IPv6 CIDR blocks for each vSwitch in a virtual private cloud (VPC).
  * *   After you create a reserved CIDR block for a vSwitch, the CIDR block cannot contain the IP address of the subnet gateway of the VPC to which the vSwitch belongs.
  * *   **CreateVSwitchCidrReservation** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [ListVSwitchCidrReservations](https://help.aliyun.com/document_detail/610155.html) to query the status of the task:
  *     *   If the vSwitch is in the **Assigning** state, the reserved CIDR block is being created.
  *     *   If the vSwitch is in the **Assigned** state, the reserved CIDR block is created.
  * *   When you create a reserved IPv4 CIDR block for a vSwitch, the first IP address and the last three IP addresses of the vSwitch are reserved by the system. The four IP addresses will not be allocated.
  * *   When you create a reserved IPv6 CIDR block for a vSwitch, the first IP address and the last nine IP addresses of the vSwitch are reserved by the system. The 10 IP addresses will not be allocated. For example, if you create a reserved IPv4 CIDR block for a vSwitch whose CIDR block is 192.168.1.0/24, the reserved CIDR block cannot contain the following IP addresses: 192.168.1.0, 192.168.1.253, 192.168.1.254, and 192.168.1.255.
  * @param request  the request parameters of CreateVSwitchCidrReservation  CreateVSwitchCidrReservationRequest
  * @return CreateVSwitchCidrReservationResponse
 */
async function createVSwitchCidrReservation(request: CreateVSwitchCidrReservationRequest): CreateVSwitchCidrReservationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVSwitchCidrReservation', 'POST', '/', 'json', false, 'json', request);
}

model CreateVbrHaRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='CBCE910E-D396-4944-8****', position='Query'),
  description?: string(name='Description', description='The description of the VBR failover group.

The description must be 2 to 256 characters in length. It must start with a letter but cannot start with `http://` or `https://`.', example='VBRHa', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values: Valid Values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and instance status. If the request fails the dry run, an error message is returned. If the request passes the dry run, `DRYRUN.SUCCESS` is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, the operation is performed.', example='false', position='Query'),
  name?: string(name='Name', description='The name of the VBR failover group.', example='VBRHa', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerVbrId: string(name='PeerVbrId', description='The ID of the other VBR in the VBR failover group.

This parameter is required.', example='vbr-bp12mw1f8k3jgygk9****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the VBR is deployed.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vbrId: string(name='VbrId', description='The ID of the VBR.

This parameter is required.', example='vbr-bp1jcg5cmxjbl9xgc****', position='Query'),
}

model CreateVbrHaResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  vbrHaId?: string(name='VbrHaId', description='The ID of the VBR failover group.', example='vbrha-sa1sxheuxtd98****'),
}

model CreateVbrHaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVbrHaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateVbrHa  CreateVbrHaRequest
  * @return CreateVbrHaResponse
 */
async function createVbrHa(request: CreateVbrHaRequest): CreateVbrHaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVbrHa', 'POST', '/', 'json', false, 'json', request);
}

model CreateVcoRouteEntryRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  description?: string(name='Description', description='The description of the destination-based route.', example='desctest', position='Query'),
  nextHop: string(name='NextHop', description='The next hop of the destination-based route.

This parameter is required.', example='vco-p0w2jpkhi2eeop6q6****', position='Query'),
  overlayMode?: string(name='OverlayMode', description='The tunneling protocol. Set the value to **Ipsec**, which specifies the IPsec tunneling protocol.', example='Ipsec', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the IPsec-VPN connection is established.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeDest: string(name='RouteDest', description='The destination CIDR block of the destination-based route.

This parameter is required.', example='192.168.10.0/24', position='Query'),
  vpnConnectionId: string(name='VpnConnectionId', description='The ID of the IPsec-VPN connection.

This parameter is required.', example='vco-p0w2jpkhi2eeop6q6****', position='Query'),
  weight: int32(name='Weight', description='The weight of the destination-based route. Valid values:

*   **0**: a low priority
*   **100**: a high priority

This parameter is required.', example='100', position='Query'),
}

model CreateVcoRouteEntryResponseBody = {
  createTime?: long(name='CreateTime', description='The timestamp when the destination-based route was created. Unit: milliseconds.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1658387202664'),
  description?: string(name='Description', description='The description of the destination-based route.', example='desctest'),
  nextHop?: string(name='NextHop', description='The next hop of the destination-based route.', example='vco-p0w2jpkhi2eeop6q6****'),
  overlayMode?: string(name='OverlayMode', description='The tunneling protocol.

The value is set to **Ipsec**, which indicates the IPsec tunneling protocol.', example='Ipsec'),
  requestId?: string(name='RequestId', description='The request ID.', example='CFC4D13B-E680-3985-95B1-87AA155481DF'),
  routeDest?: string(name='RouteDest', description='The destination CIDR block of the destination-based route.', example='192.168.10.0/24'),
  state?: string(name='State', description='The status of the destination-based route.

Only **published** is returned, which indicates that the current route is published to the transit router.', example='published'),
  vpnConnectionId?: string(name='VpnConnectionId', description='The ID of the IPsec-VPN connection.', example='vco-p0w2jpkhi2eeop6q6****'),
  weight?: int32(name='Weight', description='The weight of the destination-based route. Valid values:

*   **0**: a low priority.
*   **100**: a high priority.', example='100'),
}

model CreateVcoRouteEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVcoRouteEntryResponseBody(name='body'),
}

/**
  * @description *   The IPsec-VPN connection must be associated with a transit router. For more information, see [CreateTransitRouterVpnAttachment](https://help.aliyun.com/document_detail/468249.html).
  * *   You cannot create a destination-based route whose destination CIDR block is 0.0.0.0/0.
  * *   Do not add a destination-based route whose destination CIDR block is 100.64.0.0/10, or a CIDR block that contains 100.64.0.0/10 or belongs to 100.64.0.0/10. Such a route will make the console fail to display the status of the IPsec-VPN connection or cause IPsec negotiation failures.
  * *   **CreateVcoRouteEntry** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [DescribeVpnConnection](https://help.aliyun.com/document_detail/53046.html) to query the status of the task.
  *     *   If the IPsec-VPN connection is in the **updating** state, the destination-based route is being created.
  *     *   If the IPsec-VPN connection is in the **attached** state, the destination-based route is created.
  * *   You cannot repeatedly call **CreateVcoRouteEntry** within the specified period of time.
  * @param request  the request parameters of CreateVcoRouteEntry  CreateVcoRouteEntryRequest
  * @return CreateVcoRouteEntryResponse
 */
async function createVcoRouteEntry(request: CreateVcoRouteEntryRequest): CreateVcoRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVcoRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model CreateVirtualBorderRouterRequest {
  bandwidth?: long(name='Bandwidth', description='The bandwidth of the VBR. Unit: Mbit/s.

*   When you create a VBR for a dedicated connection, valid values are **50**, **100**, **200**, **300**, **400**, **500**, **1000**, **2048**, **5120**, **8192**, **10240**, **20480**, **40960**, **50120**, **61440**, and **102400**.
*   You do not need to set this parameter when you create a VBR for a hosted connection. The bandwidth is already configured when the hosted connection is created.', example='100', position='Query'),
  circuitCode?: string(name='CircuitCode', description='The circuit code of the Express Connect circuit. The circuit code is provided by the connectivity provider.

>  Only the owner of the Express Connect circuit can set this parameter.', example='longtel001', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests.

>  If you do not set this parameter, the system automatically sets **ClientToken** to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The description of the VBR.

The description must be 2 to 256 characters in length. The description must start with a letter but cannot start with `http://` or `https://`.', example='desc', position='Query'),
  enableIpv6?: boolean(name='EnableIpv6', description='Specifies whether to enable IPv6. Valid values:

*   **true**: enables IPv6.
*   **false** (default): disables IPv6.', example='true', position='Query'),
  localGatewayIp?: string(name='LocalGatewayIp', description='The IP address of the VBR. Only the owner of the VBR can set or modify this parameter.

When you create a VBR for the owner of the Express Connect circuit, this parameter is required.', example='192.168.XX.XX', position='Query'),
  localIpv6GatewayIp?: string(name='LocalIpv6GatewayIp', description='The IPv6 address of the VBR. Only the owner of the VBR can set or modify this parameter.

When you create a VBR for the owner of the Express Connect circuit, this parameter is required.', example='2001:XXXX:3c4d:0015:0000:0000:0000:1a2b', position='Query'),
  name?: string(name='Name', description='The name of the VBR.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (_), and hyphens (-). The name must start with a letter.', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerGatewayIp?: string(name='PeerGatewayIp', description='The IP address of the gateway device in the data center. Only the owner of the VBR can set or modify this parameter.

When you create a VBR for the owner of the Express Connect circuit, this parameter is required.', example='116.62.XX.XX', position='Query'),
  peerIpv6GatewayIp?: string(name='PeerIpv6GatewayIp', description='The IPv6 address of the gateway device in the data center. Only the owner of the VBR can set or modify this parameter.

When you create a VBR for the owner of the Express Connect circuit, this parameter is required.', example='2001:XXXX:4:4:4:4:4:4', position='Query'),
  peeringIpv6SubnetMask?: string(name='PeeringIpv6SubnetMask', description='The subnet mask of the IPv6 addresses of the VBR and the gateway device in the data center.

The two IPv6 addresses must fall within the same subnet.', example='2408:4004:cc:400::/56', position='Query'),
  peeringSubnetMask?: string(name='PeeringSubnetMask', description='The subnet mask of the IP addresses of the VBR and the gateway device in the data center.

The two IP addresses must fall within the same subnet.', example='255.255.255.252', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', description='The ID of the Express Connect circuit.

You can create a VBR for a dedicated connection or a hosted connection.

This parameter is required.', example='pc-2zextbehcx****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Express Connect circuit.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.

For more information about resource group, see [What is Resource Management?](https://help.aliyun.com/document_detail/94475.html)', example='rg-acfmxazb4ph6aiy****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key. You must enter at least one tag key. You can specify up to 20 tag keys. The tag key cannot be an empty string.

A tag key can be at most 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.', example='FinanceJoshua'),
    }
  ](name='Tags', description='The tags.', position='Query'),
  vbrOwnerId?: long(name='VbrOwnerId', description='The account ID of the VBR owner.

The default value is the ID of the current Alibaba Cloud account.', example='168811111****', position='Query'),
  vlanId: int32(name='VlanId', description='The VLAN ID of the VBR. Valid values: **0 to 2999**.

>  Only the owner of the Express Connect circuit can set this parameter. The VLAN IDs of two VBRs of the same the Express Connect circuit must be different.

This parameter is required.', example='0', position='Query'),
}

model CreateVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  vbrId?: string(name='VbrId', description='The ID of the VBR.', example='vbr-bp1jcg5cmxjbl9xgc****'),
}

model CreateVirtualBorderRouterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVirtualBorderRouterResponseBody(name='body'),
}

/**
  * @description After you create a VBR, the VBR is in the **active** state.
  * @param request  the request parameters of CreateVirtualBorderRouter  CreateVirtualBorderRouterRequest
  * @return CreateVirtualBorderRouterResponse
 */
async function createVirtualBorderRouter(request: CreateVirtualBorderRouterRequest): CreateVirtualBorderRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVirtualBorderRouter', 'POST', '/', 'json', false, 'json', request);
}

model CreateVirtualPhysicalConnectionRequest {
  description?: string(name='Description', description='The description of the hosted connection.

The description must be 2 to 256 characters in length. The description must start with a letter but cannot start with `http://` or `https://`.', example='desctest', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without performing the actual request. Default value: 45104. Valid values:

*   **true**: performs a dry run. The system checks the request for potential issues, including required parameters, request syntax, and instance status. If the request fails the dry run, an error code is returned. If the request passes the dry run, `DRYRUN.SUCCESS` is returned.
*   **false**: performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  name?: string(name='Name', description='The name of the hosted connection.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (_), and hyphens (-). The name must start with a letter but cannot start with `http://` or `https://`.', example='nametest', position='Query'),
  orderMode: string(name='OrderMode', description='The payer for the hosted connection. Valid values:

*   **PayByPhysicalConnectionOwner**: The partner pays for the hosted connection.
*   **PayByVirtualPhysicalConnectionOwner**: The tenant pays for the hosted connection.

This parameter is required.', example='PayByVirtualPhysicalConnectionOwner', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', description='The ID of the Express Connect circuit over which the hosted connection is created.

This parameter is required.', example='pc-bp1ciz7ekd2grn1as****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the hosted connection.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to obtain the region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the hosted connection belongs.', example='rg-aekzjty2chzuqky', position='Query'),
  spec: string(name='Spec', description='The bandwidth value of the hosted connection.

Valid values: **50M**, **100M**, **200M**, **300M**, **400M**, **500M**, **1G**, **2G**, **5G**, **8G**, and **10G**.

>  **2G**, **5G**, **8G**, and **10G** are unavailable by default. If you want to use these bandwidth values, contact your account manager.

**M** indicates Mbit/s and **G** indicates Gbit/s.

This parameter is required.', example='50M', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. You can specify at most 20 tag keys. The tag key cannot be an empty string.

The key can be up to 64 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The key must start with a letter but cannot start with `aliyun` or `acs:`. The key cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value. You can specify at most 20 tag values. The tag value can be an empty string.

The value can be up to 128 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The value must start with a letter but cannot start with `aliyun` or `acs:`. The value cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags.', position='Query'),
  token?: string(name='Token', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='CBCE910E-D396-4944-8****', position='Query'),
  vlanId: long(name='VlanId', description='The virtual local area network (VLAN) ID of the hosted connection. Valid values: **0** to **2999**.

*   If the VLAN ID is set to **0**, it indicates that the switch port of the virtual border router (VBR) is a Layer 3 router interface instead of a VLAN interface. When a Layer 3 router interface is used, each Express Connect circuit corresponds to a VBR.
*   If the VLAN ID is set to a value from **1** to **2999**, the switch port of the VBR is a Layer 3 VLAN subinterface. When a Layer 3 VLAN subinterface is used, each VLAN ID corresponds to one VBR. In this case, the Express Connect circuit with which the VBR is associated can be used to connect to virtual private clouds (VPCs) that belong to different Alibaba Cloud accounts. VBRs in different VLANs are isolated from each other at Layer 2.

This parameter is required.', example='4', position='Query'),
  vpconnAliUid: long(name='VpconnAliUid', description='The Alibaba Cloud account ID of the tenant.

This parameter is required.', example='1210123456123456', position='Query'),
}

model CreateVirtualPhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CD14EA74-E9C3-59A9-942A-DFEC7E12818D'),
  virtualPhysicalConnection?: string(name='VirtualPhysicalConnection', description='The ID of the hosted connection.', example='pc-bp1mrgfbtmc9brre7****'),
}

model CreateVirtualPhysicalConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVirtualPhysicalConnectionResponseBody(name='body'),
}

/**
  * @description # [](#)Description
  * Before you call this operation, we recommend that you learn about the workflow for creating a hosted connection and the environment requirements. For more information, see [Overview of hosted connections](https://help.aliyun.com/document_detail/146571.html) and [Operations performed by Express Connect partners](https://help.aliyun.com/document_detail/155987.html).
  * @param request  the request parameters of CreateVirtualPhysicalConnection  CreateVirtualPhysicalConnectionRequest
  * @return CreateVirtualPhysicalConnectionResponse
 */
async function createVirtualPhysicalConnection(request: CreateVirtualPhysicalConnectionRequest): CreateVirtualPhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVirtualPhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model CreateVpcRequest {
  cidrBlock?: string(name='CidrBlock', description='The CIDR block of the VPC.

*   You can specify one of the following CIDR blocks or their subsets as the primary IPv4 CIDR block of the VPC: 192.168.0.0/16, 172.16.0.0/12, and 10.0.0.0/8. These CIDR blocks are standard private CIDR blocks as defined by Request for Comments (RFC) documents. The subnet mask must be 8 to 28 bits in length.
*   You can also use a custom CIDR block other than 100.64.0.0/10, 224.0.0.0/4, 127.0.0.0/8, 169.254.0.0/16, and their subnets as the primary IPv4 CIDR block of the VPC.', example='172.16.0.0/12', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The description of the VPC.

The description must be 1 to 256 characters in length and cannot start with `http://` or `https://`.', example='This is my first Vpc', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  enableDnsHostname?: boolean(name='EnableDnsHostname', position='Query'),
  enableIpv6?: boolean(name='EnableIpv6', description='Specifies whether to enable IPv6. Valid values:

*   **false** (default)
*   **true**', example='false', position='Query'),
  ipv4CidrMask?: int32(name='Ipv4CidrMask', position='Query'),
  ipv4IpamPoolId?: string(name='Ipv4IpamPoolId', description='The ID of the IP Address Manager (IPAM) pool of the IPv4 type.', example='ipam-pool-sycmt3p2a9v63i****', position='Query'),
  ipv6CidrBlock?: string(name='Ipv6CidrBlock', description='The IPv6 CIDR block of the VPC.', example='2408:XXXX:0:6a::/56', position='Query'),
  ipv6Isp?: string(name='Ipv6Isp', description='The type of the IPv6 CIDR block of the VPC. Valid values:

*   **BGP** (default)
*   **ChinaMobile**
*   **ChinaUnicom**
*   **ChinaTelecom**

>  If you are allowed to use single-ISP bandwidth, you can set the value to **ChinaTelecom**, **ChinaUnicom**, or **ChinaMobile**.', example='BGP', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the VPC belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.

For more information about resource groups, see [What is a resource group?](https://help.aliyun.com/document_detail/94475.html)', example='rg-acfmxazb4ph6aiy****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the resource. You can specify at most 20 tag keys. The tag key cannot be an empty string.

The tag key can be at most 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N to add to the resource. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length, but cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tag of the resource.', position='Query'),
  userCidr?: string(name='UserCidr', description='The user CIDR block. Separate user CIDR blocks with commas (,). You can specify up to three user CIDR blocks.

For more information about user CIDR blocks, see the `What is a user CIDR block?` section in [VPC FAQ](https://help.aliyun.com/document_detail/185311.html).', example='192.168.0.0/12', position='Query'),
  vpcName?: string(name='VpcName', description='The name of the VPC.

The name must be 1 to 128 characters in length and cannot start with `http://` or `https://`.', example='abc', position='Query'),
}

model CreateVpcResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxazb4ph6aiy****'),
  routeTableId?: string(name='RouteTableId', description='The ID of the route table that is automatically created by the system after the VPC is created.', example='vtb-bp145q7glnuzdv****'),
  vRouterId?: string(name='VRouterId', description='The ID of the vRouter that is automatically created by the system after the VPC is created.', example='vrt-bp1lhl0taikrteen8****'),
  vpcId?: string(name='VpcId', description='The ID of the created VPC.', example='vpc-bp15zckdt37pq72zv****'),
}

model CreateVpcResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVpcResponseBody(name='body'),
}

/**
  * @description When you call this operation, take note of the following items:
  * *   You can specify only one CIDR block for each VPC.
  * *   After you create a VPC, you cannot change its CIDR block. However, you can add secondary IPv4 CIDR blocks to the VPC.
  * *   In each VPC, cloud services can use a maximum of 60,000 private IP addresses. You cannot increase the quota.
  * *   After you create a VPC, a vRouter and a route table are automatically created.
  * *   At most three user CIDR blocks can be added to a VPC. If a user CIDR block includes another user CIDR block, the one with the shorter subnet mask takes effect. For example, if both 10.0.0.0/8 and 10.1.0.0/16 are specified, only 10.0.0.0/8 takes effect.
  * *   **CreateVpc** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeVpcAttribute](https://help.aliyun.com/document_detail/94565.html) operation to query the status of the task:
  *     *   If the VPC is in the **Creating** state, the VPC is being created.
  *     *   If the VPC is in the **Created** state, the VPC is created.
  * *   You cannot repeatedly call the **DeleteRouteEntry** operation to create default VPCs within a specific time period. However, you can repeatedly call this operation to create custom VPCs within a specific time period.
  * @param request  the request parameters of CreateVpc  CreateVpcRequest
  * @return CreateVpcResponse
 */
async function createVpc(request: CreateVpcRequest): CreateVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpc', 'POST', '/', 'json', false, 'json', request);
}

model CreateVpcGatewayEndpointRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> 

If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  endpointDescription?: string(name='EndpointDescription', description='The description of the gateway endpoint.

The description must be 1 to 255 characters in length.', example='test', position='Query'),
  endpointName?: string(name='EndpointName', description='The name of the gateway endpoint.

The name must be 1 to 128 characters in length.', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  policyDocument?: string(name='PolicyDocument', description='The access policy for the cloud service.

For more information about the syntax and structure of the access policy, see [Policy syntax and structure](https://help.aliyun.com/document_detail/93739.html).', example='{   "Version" : "1",   "Statement" : [ {     "Effect" : "Allow",     "Resource" : [ "*" ],     "Action" : [ "*" ],     "Principal" : [ "*" ]   } ] }', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the gateway endpoint.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the gateway endpoint belongs.', example='rg-acfmxazb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  serviceName: string(name='ServiceName', description='The name of the endpoint service.

This parameter is required.', example='com.aliyun.cn-hangzhou.oss', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the resource. You can specify up to 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N to add to the resource. You can specify up to 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags of the resource.', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the virtual private cloud (VPC) where you want to create the gateway endpoint.

The VPC and gateway endpoint must be deployed in the same region.

This parameter is required.', example='vpc-bp1gsk7h12ew7oegk****', position='Query'),
}

model CreateVpcGatewayEndpointResponseBody = {
  creationTime?: string(name='CreationTime', description='The time when the gateway endpoint was created. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2021-08-27T01:58:37Z'),
  endpointId?: string(name='EndpointId', description='The ID of the gateway endpoint.', example='vpce-bp1w1dmdqjpwul0v3****'),
  endpointName?: string(name='EndpointName', description='The name of the gateway endpoint.', example='test'),
  requestId?: string(name='RequestId', description='The request ID.', example='62CFC815-E08A-5CF4-92D1-54273EC9E406'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the gateway endpoint belongs.', example='rg-acfmxazb4ph****'),
  serviceName?: string(name='ServiceName', description='The name of the endpoint service.', example='com.aliyun.cn-hangzhou.oss'),
}

model CreateVpcGatewayEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVpcGatewayEndpointResponseBody(name='body'),
}

/**
  * @description *   **CreateVpcGatewayEndpoint** is an asynchronous operation. After a request is sent, the system returns an **EndpointId** and runs the task in the background. You can call the [ListVpcGatewayEndpoints](https://help.aliyun.com/document_detail/448682.html) operation to query the status of the task.
  *     *   If the gateway endpoint is in the **Creating** state, the gateway endpoint is being created.
  *     *   If the gateway endpoint is in the **Created** state, the gateway endpoint is created.
  * *   You cannot repeatedly call the **CreateVpcGatewayEndpoint** operation for the same endpoint service within the specified period of time.
  * @param request  the request parameters of CreateVpcGatewayEndpoint  CreateVpcGatewayEndpointRequest
  * @return CreateVpcGatewayEndpointResponse
 */
async function createVpcGatewayEndpoint(request: CreateVpcGatewayEndpointRequest): CreateVpcGatewayEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpcGatewayEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model CreateVpcPrefixListRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. ClientToken can contain only ASCII characters.

>  If you do not specify this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: performs a dry run. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  ipVersion?: string(name='IpVersion', description='The IP version. Valid values:

*   **IPv4** (default)
*   **IPv6**', example='IPv4', position='Query'),
  maxEntries?: int32(name='MaxEntries', description='The maximum number of CIDR blocks that you can specify in the prefix list. Default value: 50.', example='50', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prefixListDescription?: string(name='PrefixListDescription', description='The description of the prefix list.

The description must be 1 to 256 characters in length and cannot start with `http://` or `https://`.', example='description', position='Query'),
  prefixListEntries?: [ 
    {
      cidr?: string(name='Cidr', description='The CIDR block specified in the prefix list.', example='192.168.0.0/16'),
      description?: string(name='Description', description='The description of the CIDR block specified in the prefix list.

The description must be 1 to 256 characters in length and cannot start with `http://` or `https://`.', example='CIDR'),
    }
  ](name='PrefixListEntries', description='The CIDR block information specified in the prefix list.', position='Query'),
  prefixListName?: string(name='PrefixListName', description='The name of the prefix list.

The name must be 1 to 128 characters in length, and cannot start with `http://` or `https://`.', example='name', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where you want to create the prefix list.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the prefix list belongs.', example='rg-bp67acfmxazb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N. You can specify up to 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tag list.', position='Query'),
}

model CreateVpcPrefixListResponseBody = {
  prefixListId?: string(name='PrefixListId', description='The ID of the prefix list.', example='pl-0b700s2ee3***'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the prefix list belongs.', example='rg-bp67acfmxazb4ph****'),
}

model CreateVpcPrefixListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVpcPrefixListResponseBody(name='body'),
}

/**
  * @description You cannot repeatedly call the **CreateVpcPrefixList** operation within the specified period of time.
  * @param request  the request parameters of CreateVpcPrefixList  CreateVpcPrefixListRequest
  * @return CreateVpcPrefixListResponse
 */
async function createVpcPrefixList(request: CreateVpcPrefixListRequest): CreateVpcPrefixListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpcPrefixList', 'POST', '/', 'json', false, 'json', request);
}

model CreateVpconnFromVbrRequest {
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and instance status. If the request fails the dry run, an error message is returned. If the request passes the dry run, the system returns the ID of the request.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  orderMode?: string(name='OrderMode', description='The payer for the shared Express Connect circuit. Valid values:

*   **PayByPhysicalConnectionOwner**: the owner of the shared Express Connect circuit
*   **PayByVirtualPhysicalConnectionOwner**: the owner of the hosted connection', example='PayByVirtualPhysicalConnectionOwner', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the hosted connection.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  token?: string(name='Token', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='CBCE910E-D396-4944-8****', position='Query'),
  vbrId: string(name='VbrId', description='The ID of the associated VBR.

This parameter is required.', example='vbr-bp136flp1mf8mlq6r****', position='Query'),
}

model CreateVpconnFromVbrResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5356F028-0F5C-56FC-8574-897D24379041'),
  virtualPhysicalConnection?: string(name='VirtualPhysicalConnection', description='The ID of the hosted connection.', example='pc-bp1mrgfbtmc9brre7****'),
}

model CreateVpconnFromVbrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVpconnFromVbrResponseBody(name='body'),
}

/**
  * @description If an Express Connect partner has created a virtual border router (VBR) for a tenant before, the Express Connect partner can push the Express Connect circuit that is associated with the VBR to the tenant account by adding a shared port for the tenant account. The service of the tenant is not interrupted in this process.
  * Preparations:
  * Before the Express Connect partner performs the operation, the Express Connect partner must notify the tenant and request the tenant to enable outbound data transfer billing. For more information, see [Enable outbound data transfer billing](https://help.aliyun.com/document_detail/274385.html).
  * What to do next:
  * 1.  After the Express Connect partner performs the operation, a shared port is added for the tenant account. The tenant must call the [ConfirmPhysicalConnection](https://help.aliyun.com/document_detail/324198.html) operation to accept the shared port.
  * 2.  Then, the Express Connect partner must call the [AttachVbrToVpconn](https://help.aliyun.com/document_detail/324191.html) operation to associate the VBR with the newly added shared port that belongs to the tenant account.
  * @param request  the request parameters of CreateVpconnFromVbr  CreateVpconnFromVbrRequest
  * @return CreateVpconnFromVbrResponse
 */
async function createVpconnFromVbr(request: CreateVpconnFromVbrRequest): CreateVpconnFromVbrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpconnFromVbr', 'POST', '/', 'json', false, 'json', request);
}

model CreateVpnAttachmentRequest {
  autoConfigRoute?: boolean(name='AutoConfigRoute', description='Specifies whether to automatically configure routes. Valid values:

*   **true** (default)
*   **false**', example='true', position='Query'),
  bgpConfig?: string(name='BgpConfig', description='The Border Gateway Protocol (BGP) configurations:

*   **BgpConfig.EnableBgp**: specifies whether to enable BGP. Valid values: **true** and **false**. Default value: false.

*   **BgpConfig.LocalAsn**: the ASN on the Alibaba Cloud side. Valid values: **1** to **4294967295**. Default value: **45104**.

    You can enter the ASN in two segments. Separate the first 16 bits of the ASN from the remaining 16 bits with a period (.). Enter the number in each segment in decimal format.

    For example, if you enter 123.456, the ASN is: 123 × 65536 + 456 = 8061384.

*   **BgpConfig.TunnelCidr**: the CIDR block of the IPsec tunnel. The CIDR block falls within 169.254.0.0/16. The subnet mask of the CIDR block must be 30 bits in length.

*   **LocalBgpIp:** the BGP IP address on the Alibaba Cloud side. This IP address must fall within the CIDR block range of the IPsec tunnel.

> *   Before you configure BGP, we recommend that you learn about how BGP works and the limits. For more information, see [BGP dynamic routing ](https://help.aliyun.com/document_detail/170235.html).
> *   We recommend that you use a private ASN to establish a connection with Alibaba Cloud over BGP. Refer to the relevant documentation for the private ASN range.', example='{"EnableBgp":"true","LocalAsn":"45104","TunnelCidr":"169.254.11.0/30","LocalBgpIp":"169.254.11.1"}', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  customerGatewayId?: string(name='CustomerGatewayId', description='The customer gateway ID.', example='cgw-p0w2jemrcj5u61un8****', position='Query'),
  effectImmediately?: boolean(name='EffectImmediately', description='Specifies whether to immediately start IPsec negotiations after the configuration takes effect. Valid values:

*   **true**: immediately starts IPsec negotiations after the configuration is complete.
*   **false** (default): starts IPsec negotiations when inbound traffic is received.', example='false', position='Query'),
  enableDpd?: boolean(name='EnableDpd', description='Specifies whether to enable the dead peer detection (DPD) feature. Valid values:

*   **true** (default) The initiator of the IPsec-VPN connection sends DPD packets to verify the existence and availability of the peer. If no response is received from the peer within a specified period of time, the connection fails. ISAKMP SAs and IPsec SAs are deleted. The IPsec tunnel is also deleted.
*   **false**', example='true', position='Query'),
  enableNatTraversal?: boolean(name='EnableNatTraversal', description='Specifies whether to enable NAT traversal. Valid values:

*   **true** (default) After NAT traversal is enabled, the initiator does not check the UDP ports during IKE negotiations and can automatically discover NAT gateway devices along the VPN tunnel.
*   **false**', example='true', position='Query'),
  enableTunnelsBgp?: boolean(name='EnableTunnelsBgp', position='Query'),
  healthCheckConfig?: string(name='HealthCheckConfig', description='The health check configuration:

*   **HealthCheckConfig.enable**: specifies whether to enable health checks. Valid values: **true** and **false**. Default value: false.

*   **HealthCheckConfig.dip**: the destination IP address configured for health checks. Enter the IP address on the data center side that the VPC can communicate with through the IPsec-VPN connection.

*   **HealthCheckConfig.sip**: the source IP address configured for health checks. Enter the IP address on the VPC side that the data center can communicate with through the IPsec-VPN connection.

*   **HealthCheckConfig.interval**: the time interval of health check retries. Unit: seconds. Default value: **3**.

*   **HealthCheckConfig.retry**: the maximum number of health check retries. Default value: **3**.

*   **HealthCheckConfig.Policy**: specifies whether to withdraw published routes when health checks fail. Valid values:

    *   **revoke_route** (default): withdraws published routes.
    *   **reserve_route**: does not withdraw published routes.', example='{"enable":"true","dip":"192.168.1.1","sip":"10.1.1.1","interval":"3","retry":"3","Policy": "revoke_route"}', position='Query'),
  ikeConfig?: string(name='IkeConfig', description='The configurations of Phase 1 negotiations:

*   **IkeConfig.Psk**: the pre-shared key that is used for identity authentication between the VPN gateway and the on-premises data center.

    *   The key must be 1 to 100 characters in length and can contain digits, letters, and the following special characters: ``~!`@#$%^&*()_-+={}[]|;:\\",.<>/?``
    *   If you do not specify a pre-shared key, the system randomly generates a 16-bit string as the pre-shared key. You can call the [DescribeVpnConnection](https://help.aliyun.com/document_detail/2526951.html) operation to query the pre-shared key that is automatically generated by the system.

    > The pre-shared key of the IPsec-VPN connection must be the same as the authentication key of the on-premises data center. Otherwise, connections between the on-premises data center and the VPN gateway cannot be established.

*   **IkeConfig.IkeVersion**: the version of the Internet Key Exchange (IKE) protocol. Valid values: **ikev1** and **ikev2**. Default value: **ikev1**.

*   **IkeConfig.IkeMode**: the negotiation mode. Valid values: **main** and **aggressive**. Default value: **main**.

*   **IkeConfig.IkeEncAlg:** the encryption algorithm that is used in Phase 1 negotiations. Valid values: **aes**, **aes192**, **aes256**, **des**, and **3des**. Default value: **aes**.

*   **IkeConfig.IkeAuthAlg**: the authentication algorithm that is used in Phase 1 negotiations. Valid values: **md5**, **sha1**, **sha256**, **sha384**, and **sha512**. Default value: **md5**.

*   **IkeConfig.IkePfs**: the Diffie-Hellman key exchange algorithm that is used in Phase 1 negotiations. Valid values: **group1**, **group2**, **group5**, and **group14**. Default value: **group2**.

*   **IkeConfig.IkeLifetime**: the SA lifetime as a result of Phase 1 negotiations. Unit: seconds. Valid values: **0** to **86400**. Default value: **86400**.

*   **IkeConfig.LocalIdIPsec**: the identifier on the Alibaba Cloud side. The identifier cannot exceed 100 characters in length. This parameter is left empty by default.

*   **IkeConfig.RemoteId**: the identifier on the data center side. The identifier cannot exceed 100 characters in length. The default value is the IP address of the customer gateway.', example='{"Psk":"1234****","IkeVersion":"ikev1","IkeMode":"main","IkeEncAlg":"aes","IkeAuthAlg":"sha1","IkePfs":"group2","IkeLifetime":86400,"LocalId":"47.XX.XX.1","RemoteId":"47.XX.XX.2"}', position='Query'),
  ipsecConfig?: string(name='IpsecConfig', description='The configurations of Phase 2 negotiations:

*   **IpsecConfig.IpsecEncAlg**: the encryption algorithm that is used in Phase 2 negotiations. Valid values: **aes**, **aes192**, **aes256**, **des**, and **3des**. Default value: **aes**.
*   **IpsecConfig. IpsecAuthAlg**: the authentication algorithm that is used in Phase 2 negotiations. Valid values: **md5**, **sha1**, **sha256**, **sha384**, and **sha512**. Default value: **md5**.
*   **IpsecConfig. IpsecPfs**: the Diffie-Hellman key exchange algorithm that is used in Phase 2 negotiations. Valid values: **disabled**, **group1**, **group2**, **group5**, and **group14**. Default value: **group2**.
*   **IpsecConfig. IpsecLifetime**: the SA lifetime that is determined by Phase 2 negotiations. Unit: seconds. Valid values: **0** to **86400**. Default value: **86400**.', example='{"IpsecEncAlg":"aes","IpsecAuthAlg":"sha1","IpsecPfs":"group2","IpsecLifetime":86400}', position='Query'),
  localSubnet: string(name='LocalSubnet', description='The CIDR block on the VPC side. The CIDR block is used in Phase 2 negotiations.

Separate multiple CIDR blocks with commas (,). Example: 192.168.1.0/24,192.168.2.0/24.

The following routing modes are supported:

*   If you set **LocalSubnet** and **RemoteSubnet** to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
*   If you set **LocalSubnet** and **RemoteSubnet** to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.

This parameter is required.', example='10.1.1.0/24,10.1.2.0/24', position='Query'),
  name?: string(name='Name', description='The name of the IPsec-VPN connection.

The name must be 1 to 100 characters in length and cannot start with `http://` or `https://`.', example='nametest', position='Query'),
  networkType?: string(name='NetworkType', description='The network type of the IPsec-VPN connection. Valid values:

*   **public** (default)
*   **private**', example='public', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the IPsec-VPN connection.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  remoteCaCert?: string(name='RemoteCaCert', description='The peer CA certificate when a ShangMi (SM) VPN gateway is used to create the IPsec-VPN connection.', example='-----BEGIN CERTIFICATE----- MIIB7zCCAZW**** -----END CERTIFICATE-----', position='Query'),
  remoteSubnet: string(name='RemoteSubnet', description='The CIDR block on the data center side. This CIDR block is used in Phase 2 negotiations.

Separate multiple CIDR blocks with commas (,). Example: 192.168.3.0/24,192.168.4.0/24.

The following routing modes are supported:

*   If you set **LocalSubnet** and **RemoteSubnet** to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
*   If you set **LocalSubnet** and **RemoteSubnet** to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.

This parameter is required.', example='10.1.3.0/24,10.1.4.0/24', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the IPsec-VPN connection belongs.

*   You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/158855.html) operation to query resource group IDs.
*   If you do not specify a resource group ID, the IPsec-VPN connection belongs to the default resource group.', example='rg-acfmzs372yg****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key. The tag key cannot be an empty string.

It can be at most 64 characters in length, and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.

You can specify at most 20 tag keys in each call.', example='TagKey'),
      value?: string(name='Value', description='The tag value.

The tag value can be an empty string and cannot exceed 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.

Each tag key corresponds to one tag value. You can specify at most 20 tag values in each call.', example='TagValue'),
    }
  ](name='Tags', description='The tag value.

The tag value can be an empty string and cannot exceed 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.

Each tag key corresponds to one tag value. You can specify up to 20 tag values in each call.', position='Query'),
  tunnelOptionsSpecification?: [ 
    {
      customerGatewayId?: string(name='CustomerGatewayId'),
      enableDpd?: boolean(name='EnableDpd'),
      enableNatTraversal?: boolean(name='EnableNatTraversal'),
      tunnelBgpConfig?: {
        localAsn?: long(name='LocalAsn'),
        localBgpIp?: string(name='LocalBgpIp'),
        tunnelCidr?: string(name='TunnelCidr'),
      }(name='TunnelBgpConfig'),
      tunnelIkeConfig?: {
        ikeAuthAlg?: string(name='IkeAuthAlg'),
        ikeEncAlg?: string(name='IkeEncAlg'),
        ikeLifetime?: long(name='IkeLifetime'),
        ikeMode?: string(name='IkeMode'),
        ikePfs?: string(name='IkePfs'),
        ikeVersion?: string(name='IkeVersion'),
        localId?: string(name='LocalId'),
        psk?: string(name='Psk'),
        remoteId?: string(name='RemoteId'),
      }(name='TunnelIkeConfig'),
      tunnelIndex?: int32(name='TunnelIndex'),
      tunnelIpsecConfig?: {
        ipsecAuthAlg?: string(name='IpsecAuthAlg'),
        ipsecEncAlg?: string(name='IpsecEncAlg'),
        ipsecLifetime?: long(name='IpsecLifetime'),
        ipsecPfs?: string(name='IpsecPfs'),
      }(name='TunnelIpsecConfig'),
    }
  ](name='TunnelOptionsSpecification', position='Body'),
}

model CreateVpnAttachmentResponseBody = {
  code?: string(name='Code', description='The status code returned by the current operation. **200** indicates that the operation is successful.', example='200'),
  createTime?: long(name='CreateTime', description='The timestamp generated when the IPsec-VPN connection was established. Unit: milliseconds.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1658201810000'),
  message?: string(name='Message', description='The information returned by the current operation.', example='successful'),
  name?: string(name='Name', description='The name of the IPsec-VPN connection.', example='nametest'),
  requestId?: string(name='RequestId', description='The request ID.', example='88187252-0E26-3C4D-9D1D-32A04454EBBA'),
  success?: boolean(name='Success', description='Indicates whether the current operation is successful.

*   **true**
*   **false**', example='true'),
  vpnConnectionId?: string(name='VpnConnectionId', description='The ID of the IPsec-VPN connection.', example='vco-p0wb09rama8qwwgfn****'),
}

model CreateVpnAttachmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVpnAttachmentResponseBody(name='body'),
}

/**
  * @description By default, an IPsec-VPN connection created by calling the `CreateVpnAttachment` operation is not associated with a resource. You can associate an IPsec-VPN connection with a transit router by calling the [CreateTransitRouterVpnAttachment](https://help.aliyun.com/document_detail/443993.html) operation.
  * ### [](#)Prerequisites
  * Before you create an IPsec-VPN connection, make sure that you created a customer gateway in the region where you want to create the IPsec-VPN connection. For more information, see [CreateCustomerGateway](https://help.aliyun.com/document_detail/120368.html).
  * If you want to add BGP configurations to an IPsec-VPN connection, make sure that an autonomous system number (ASN) is assigned to the customer gateway.
  * @param request  the request parameters of CreateVpnAttachment  CreateVpnAttachmentRequest
  * @return CreateVpnAttachmentResponse
 */
async function createVpnAttachment(request: CreateVpnAttachmentRequest): CreateVpnAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpnAttachment', 'POST', '/', 'json', true, 'form', request);
}

model CreateVpnConnectionRequest {
  autoConfigRoute?: boolean(name='AutoConfigRoute', description='Specifies whether to automatically configure routes. Valid values:

*   **true** (default)
*   **false**', example='true', position='Query'),
  bgpConfig?: string(name='BgpConfig', description='This parameter is supported when you create an IPsec-VPN connection in single-tunnel mode.

BGP configuration:

*   **BgpConfig.EnableBgp**: specifies whether to enable BGP. Valid values: **true** and **false** (default).

*   **BgpConfig.LocalAsn:** the autonomous system number (ASN) on the Alibaba Cloud side. Valid values: **1** to **4294967295**. Default value: **45104**.

    You can enter a value in two segments separated by a period (.). Each segment is 16 bits in length. Enter the number in each segment in decimal format.

    For example, if you enter 123.456, the ASN is 8061384. The ASN is calculated by using the following formula: 123 × 65536 + 456 = 8061384.

*   **BgpConfig.TunnelCidr**: The CIDR block of the IPsec tunnel. The CIDR block must belong to 169.254.0.0/16 and the subnet mask is 30 bits in length.

    >The CIDR block of the IPsec tunnel for each IPsec-VPN connection on a VPN gateway must be unique.

*   **LocalBgpIp**: the BGP address on the Alibaba Cloud side. It must be an IP address that falls within the CIDR block of the IPsec tunnel.

> *   Before you add BGP configurations, we recommend that you learn about how BGP works and the limits. For more information, see [VPN Gateway supports BGP dynamic routing](https://help.aliyun.com/document_detail/170235.html).
> *   We recommend that you use private ASN to establish BGP connections to Alibaba Cloud. Refer to the relevant documentation for the private ASN range.', example='{"EnableBgp":"true","LocalAsn":"45104","TunnelCidr":"169.254.11.0/30","LocalBgpIp":"169.254.11.1"}', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  customerGatewayId?: string(name='CustomerGatewayId', description='When you create an IPsec-VPN connection in single-tunnel mode, this parameter is required.

The ID of the customer gateway.', example='cgw-p0w2jemrcj5u61un8****', position='Query'),
  effectImmediately?: boolean(name='EffectImmediately', description='Specifies whether to immediately start IPsec negotiations. Valid values:

*   **true**: immediately starts IPsec negotiations.
*   **false** (default): starts IPsec negotiations when inbound traffic is detected.', example='false', position='Query'),
  enableDpd?: boolean(name='EnableDpd', description='This parameter is available if you create an IPsec-VPN connection in single-tunnel mode.

Specifies whether to enable the dead peer detection (DPD) feature. Valid values:

*   **true** (default) The initiator of the IPsec-VPN connection sends DPD packets to verify the existence and availability of the peer. If no feedback is received from the peer within a specified period of time, the connection fails. ISAKMP SAs and IPsec SAs are deleted. The IPsec tunnel is also deleted.
*   **false**', example='true', position='Query'),
  enableNatTraversal?: boolean(name='EnableNatTraversal', description='This parameter is available if you create an IPsec-VPN connection in single-tunnel mode.

Specifies whether to enable NAT traversal. Valid values:

*   **true** (default) After NAT traversal is enabled, the initiator does not check the UDP ports during IKE negotiations and can automatically discover NAT gateway devices along the VPN tunnel.
*   **false**', example='true', position='Query'),
  enableTunnelsBgp?: boolean(name='EnableTunnelsBgp', description='This parameter is available if you create an IPsec-VPN connection in dual-tunnel mode.

Specifies whether to enable the BGP feature for the tunnel. Valid values: **true** and **false**. Default value: false.', example='true', position='Query'),
  healthCheckConfig?: string(name='HealthCheckConfig', description='This parameter is available if you create an IPsec-VPN connection in single-tunnel mode.

The health check configuration:

*   **HealthCheckConfig.enable**: specifies whether to enable health checks. Valid values: **true** and **false**. Default value: false.
*   **HealthCheckConfig.dip**: the destination IP address configured for health checks.
*   **HealthCheckConfig.sip:** the source IP address that is used for health checks.
*   **HealthCheckConfig.interval**: the time interval of health check retries. Unit: seconds. Default value: **3**.
*   **HealthCheckConfig.retry**: the maximum number of health check retries. Default value: **3**.', example='{"enable":"true","dip":"192.168.10.1","sip":"10.10.1.1","interval":"3","retry":"3"}', position='Query'),
  ikeConfig?: string(name='IkeConfig', description='This parameter is supported if you create an IPsec-VPN connection in single-tunnel mode.

The configurations of Phase 1 negotiations:

*   **IkeConfig.Psk**: the pre-shared key that is used for identity authentication between the VPN gateway and the on-premises data center.

    *   The key must be 1 to 100 characters in length and can contain digits, letters, and the following special characters: ``~!\\`@#$%^&*()_-+={}[]|;:\\",.<>/?``

    *   If you do not specify a pre-shared key, the system randomly generates a 16-bit string as the pre-shared key. You can call the [DescribeVpnConnection](https://help.aliyun.com/document_detail/2526951.html) operation to query the pre-shared key that is automatically generated by the system.

        **

        **Note** The pre-shared key of the IPsec-VPN connection must be the same as the authentication key of the on-premises data center. Otherwise, connections between the on-premises data center and the VPN gateway cannot be established.

*   **IkeConfig.IkeVersion**: the version of the Internet Key Exchange (IKE) protocol. Valid values: **ikev1** and **ikev2**. Default value: **ikev1**.

    Compared with IKEv1, IKEv2 simplifies the security association (SA) negotiation process and provides better support for scenarios with multiple CIDR blocks.

*   **IkeConfig.IkeMode**: the negotiation mode of IKE. Valid values: **main** and **aggressive**. Default value: **main**.

    *   **main:** This mode offers higher security during negotiations.
    *   **aggressive**: This mode supports faster negotiations and a higher success rate.

*   **IkeConfig.IkeEncAlg**: the encryption algorithm that is used in Phase 1 negotiations.

    Valid values: **aes**, **aes192**, **aes256**, **des**, and **3des**. Default value: **aes**.

*   **IkeConfig.IkeAuthAlg**: the authentication algorithm that is used in Phase 1 negotiations.

    Valid values: **md5**, **sha1**, **sha256**, **sha384**, and **sha512**. Default value: **md5**.

*   **IkeConfig.IkePfs**: the Diffie-Hellman key exchange algorithm that is used in Phase 1 negotiations. Valid values: **group1**, **group2**, **group5**, and **group14**. Default value: **group2**.

*   **IkeConfig.IkeLifetime**: the SA lifetime as a result of Phase 1 negotiations. Unit: seconds. Valid values: **0** to **86400**. Default value: **86400**.

*   **IkeConfig.LocalId**: the identifier of the VPN gateway. It can contain at most 100 characters. The default value is the IP address of the VPN gateway.

*   **IkeConfig.RemoteId**: the identifier of the customer gateway. It can contain at most 100 characters. The default value is the IP address of the customer gateway.', example='{"Psk":"1234****","IkeVersion":"ikev1","IkeMode":"main","IkeEncAlg":"aes","IkeAuthAlg":"sha1","IkePfs":"group2","IkeLifetime":86400,"LocalId":"47.XX.XX.1","RemoteId":"47.XX.XX.2"}', position='Query'),
  ipsecConfig?: string(name='IpsecConfig', description='This parameter is available if you create an IPsec-VPN connection in single-tunnel mode.

The configurations of Phase 2 negotiations:

*   **IpsecConfig.IpsecEncAlg**: the encryption algorithm that is used in Phase 2 negotiations.

    Valid values: **aes**, **aes192**, **aes256**, **des**, and **3des**. Default value: **aes**.

*   **IpsecConfig. IpsecAuthAlg**: the authentication algorithm that is used in Phase 2 negotiations.

    Valid values: **md5**, **sha1**, **sha256**, **sha384**, and **sha512**. Default value: **md5**.

*   **IpsecConfig. IpsecPfs**: the DH key exchange algorithm that is used in Phase 2 negotiations. Valid values: **disabled**, **group1**, **group2**, **group5**, and **group14**. Default value: **group2**.

*   **IpsecConfig. IpsecLifetime**: the SA lifetime that is determined by Phase 2 negotiations. Unit: seconds. Valid values: **0** to **86400**. Default value: **86400**.', example='{"IpsecEncAlg":"aes","IpsecAuthAlg":"sha1","IpsecPfs":"group2","IpsecLifetime":86400}', position='Query'),
  localSubnet: string(name='LocalSubnet', description='The CIDR block of the virtual private cloud (VPC) that needs to communicate with the on-premises database. The CIDR block is used in Phase 2 negotiations.

Separate multiple CIDR blocks with commas (,). Example: 192.168.1.0/24,192.168.2.0/24.

The following routing modes are supported:

*   If you set **LocalSubnet** and **RemoteSubnet** to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
*   If you set **LocalSubnet** and **RemoteSubnet** to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.

This parameter is required.', example='10.10.1.0/24,10.10.2.0/24', position='Query'),
  name?: string(name='Name', description='The name of the IPsec-VPN connection.

The name must be 1 to 100 characters in length and cannot start with `http://` or `https://`.', example='IPsec', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the IPsec-VPN connection is created. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  remoteCaCertificate?: string(name='RemoteCaCertificate', description='This parameter is available if you create an IPsec-VPN connection in single-tunnel mode.

The certificate authority (CA) certificate. If the VPN gateway is of the ShangMi (SM) type, you need to configure a CA certificate for the peer gateway device.

*   If an SM VPN gateway is used to create the IPsec-VPN connection, this parameter is required.
*   If a standard VPN gateway is used to create the IPsec-VPN connection, leave this parameter empty.', example='-----BEGIN CERTIFICATE----- MIIB7zCCAZW**** -----END CERTIFICATE-----', position='Query'),
  remoteSubnet: string(name='RemoteSubnet', description='The CIDR block of the on-premises database that needs to communicate with the VPC. The CIDR block is used in Phase 2 negotiations.

Separate multiple CIDR blocks with commas (,). Example: 192.168.3.0/24,192.168.4.0/24.

The following routing modes are supported:

*   If you set **LocalSubnet** and **RemoteSubnet** to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
*   If you set **LocalSubnet** and **RemoteSubnet** to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.

This parameter is required.', example='10.10.3.0/24,10.10.4.0/24', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key. The tag key cannot be an empty string.

It can be at most 64 characters in length, and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.

You can specify at most 20 tag keys in each call.', example='TagKey'),
      value?: string(name='Value', description='The tag value.

The tag value can be an empty string and cannot exceed 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.

Each tag key corresponds to one tag value. You can specify at most 20 tag values in each call.', example='TagValue'),
    }
  ](name='Tags', description='The tag value.

The tag value can be an empty string and cannot exceed 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.

Each tag key corresponds to one tag value. You can specify up to 20 tag values in each call.', position='Query'),
  tunnelOptionsSpecification?: [ 
    {
      customerGatewayId?: string(name='CustomerGatewayId', description='The ID of the customer gateway that is associated with the tunnel.

> - This parameter is required when you create an IPsec-VPN connection in dual-tunnel mode.
> - You can specify parameters in the **TunnelOptionsSpecification** array when you create an IPsec-VPN connection in dual tunnel mode.
> - When you create an IPsec-VPN connection in dual tunnel mode, you must add configurations of the active and standby tunnels for the IPsec-VPN connection. Each IPsec-VPN connection supports only one active tunnel and one standby tunnel.', example='cgw-p0wy363lucf1uyae8****'),
      enableDpd?: boolean(name='EnableDpd', description='Specifies whether to enable the Dead Peer Detection (DPD) feature for the tunnel. Valid values:

*   **true** (default): enables DPD. The initiator of the IPsec-VPN connection sends DPD packets to check the existence and availability of the peer. If no feedback is received from the peer within the specified period of time, the connection fails. In this case, ISAKMP SA and IPsec SA are deleted. The security tunnel is also deleted.
*   **false**: disables DPD. The initiator of the IPsec-VPN connection does not send DPD packets.', example='true'),
      enableNatTraversal?: boolean(name='EnableNatTraversal', description='Specifies whether to enable NAT traversal for the tunnel. Valid values:

*   **true** (default): enables NAT traversal. After NAT traversal is enabled, the initiator does not check the UDP ports during IKE negotiations and can automatically discover NAT gateway devices along the IPsec-VPN tunnel.
*   **false**: disables NAT traversal.', example='true'),
      remoteCaCertificate?: string(name='RemoteCaCertificate', description='If the VPN gateway uses an SM certificate, you need to configure the CA certificate used by the IPsec peer.

*   If the VPN gateway uses an SM certificate, this parameter is required.
*   If the VPN gateway does not use an SM certificate, leave this parameter empty.', example='-----BEGIN CERTIFICATE----- MIIB7zCCAZW**** -----END CERTIFICATE-----'),
      role?: string(name='Role', description='The role of the tunnel. Valid values: Valid values:

*   **master**: The tunnel is an active tunnel.
*   **slave**: The tunnel is a standby tunnel.', example='master'),
      tunnelBgpConfig?: {
        localAsn?: long(name='LocalAsn', description='The autonomous system number (ASN) of the tunnel on the Alibaba Cloud side. Valid values: **1** to **4294967295**. Default value: **45104**.

 

> - If you set **EnableTunnelsBgp** to **true**, you must set this parameter.
> - Before you add BGP configurations, we recommend that you learn about how BGP dynamic routing works and the limits. For more information, see [VPN Gateway supports BGP dynamic routing](https://help.aliyun.com/document_detail/170235.html).
> - We recommend that you use a private ASN to establish BGP connections to Alibaba Cloud. For information about the range of private ASNs, see the relevant documentation.', example='65530'),
        localBgpIp?: string(name='LocalBgpIp', description='The BGP IP address of the tunnel on the Alibaba Cloud side. The address is an IP address that falls within the BGP CIDR block.', example='169.254.10.1'),
        tunnelCidr?: string(name='TunnelCidr', description='The BGP CIDR block of the tunnel. The CIDR block must fall within the 169.254.0.0/16 range. The subnet mask of the CIDR block must be 30 bits in length.

>  The BGP CIDR block of each tunnel must be unique on a VPN gateway.', example='169.254.10.0/30'),
      }(name='TunnelBgpConfig', description='The Border Gateway Protocol (BGP) configurations of the tunnel.'),
      tunnelIkeConfig?: {
        ikeAuthAlg?: string(name='IkeAuthAlg', description='The authentication algorithm that is used in Phase 1 negotiations.

Valid values: **md5**, **sha1**, **sha256**, **sha384**, and **sha512**. Default value: **md5**.', example='md5'),
        ikeEncAlg?: string(name='IkeEncAlg', description='The encryption algorithm that is used in Phase 1 negotiations.

Valid values: **aes**, **aes192**, **aes256**, **des**, and **3des**. Default value: **aes**.', example='aes'),
        ikeLifetime?: long(name='IkeLifetime', description='The SA lifetime as a result of Phase 1 negotiations. Unit: seconds.

Valid values: **0** to **86400**. Default value: **86400**.', example='86400'),
        ikeMode?: string(name='IkeMode', description='The negotiation mode of IKE. Valid values: **main** and **aggressive**. Default value: **main**.

*   **main:** This mode offers higher security during negotiations.
*   **aggressive**: This mode supports faster negotiations and a higher success rate.', example='main'),
        ikePfs?: string(name='IkePfs', description='The Diffie-Hellman key exchange algorithm that is used in Phase 1 negotiations. Default value: **group2**.\\
Valid values: **group1**, **group2**, **group5**, and **group14**.', example='group2'),
        ikeVersion?: string(name='IkeVersion', description='The version of the IKE protocol. Valid values: **ikev1** and **ikev2**. Default value: **ikev1**.

Compared with IKEv1, IKEv2 simplifies the SA negotiation process and provides better support for scenarios with multiple CIDR blocks.', example='ikev1'),
        localId?: string(name='LocalId', description='The identifier of the tunnel on the Alibaba Cloud side, which is used in Phase 1 negotiations. It can contain at most 100 characters. The default value is the IP address of the tunnel.

**LocalId** supports fully qualified domain names (FQDNs). If you use an FQDN, we recommend that you set the negotiation mode to **aggressive**.', example='47.21.XX.XX'),
        psk?: string(name='Psk', description='The pre-shared key that is used for identity authentication between the tunnel and the tunnel peer.

*   The key must be 1 to 100 characters in length and can contain digits, letters, and the following special characters: ``~!\\`@#$%^&*()_-+={}[]|;:\\",.<>/?``
*   If you do not specify a pre-shared key, the system randomly generates a 16-bit string as the pre-shared key. You can call the [DescribeVpnConnection](https://help.aliyun.com/document_detail/2526951.html) operation to query the pre-shared key that is automatically generated by the system.

>  The tunnel and the tunnel peer must use the same pre-shared key. Otherwise, the tunnel cannot be established.', example='123456****'),
        remoteId?: string(name='RemoteId', description='The identifier of the tunnel peer, which is used in Phase 1 negotiations. It can contain at most 100 characters. The default value is the IP address of the customer gateway that is associated with the tunnel.

**RemoteId** supports FQDNs. If you use an FQDN, we recommend that you set the negotiation mode to **aggressive**.', example='47.42.XX.XX'),
      }(name='TunnelIkeConfig', description='The configurations of Phase 1 negotiations.'),
      tunnelIpsecConfig?: {
        ipsecAuthAlg?: string(name='IpsecAuthAlg', description='The authentication algorithm that is used in Phase 2 negotiations.

Valid values: **md5**, **sha1**, **sha256**, **sha384**, and **sha512**. Default value: **md5**.', example='md5'),
        ipsecEncAlg?: string(name='IpsecEncAlg', description='The encryption algorithm that is used in Phase 2 negotiations.

Valid values: **aes**, **aes192**, **aes256**, **des**, and **3des**. Default value: **aes**.', example='aes'),
        ipsecLifetime?: long(name='IpsecLifetime', description='The SA lifetime as a result of Phase 2 negotiations. Unit: seconds.

Valid values: **0** to **86400**. Default value: **86400**.', example='86400'),
        ipsecPfs?: string(name='IpsecPfs', description='The Diffie-Hellman key exchange algorithm that is used in Phase 2 negotiations. Default value: **group2**.

Valid values: **disabled**, **group1**, **group2**, **group5**, and **group14**.', example='group2'),
      }(name='TunnelIpsecConfig', description='The configurations of Phase 2 negotiations.'),
    }
  ](name='TunnelOptionsSpecification', description='The tunnel configurations.

*   You can specify parameters in the **TunnelOptionsSpecification** array when you create an IPsec-VPN connection in dual tunnel mode.
*   When you create an IPsec-VPN connection in dual tunnel mode, you must add configurations of the active and standby tunnels for the IPsec-VPN connection. Each IPsec-VPN connection supports only one active tunnel and one standby tunnel.', position='Body'),
  vpnGatewayId: string(name='VpnGatewayId', description='The ID of the VPN gateway.

This parameter is required.', example='vpn-bp1q8bgx4xnkm****', position='Query'),
}

model CreateVpnConnectionResponseBody = {
  createTime?: long(name='CreateTime', description='The timestamp generated when the IPsec-VPN connection was established. Unit: milliseconds.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1544666102000'),
  name?: string(name='Name', description='The name of the IPsec-VPN connection.', example='test'),
  requestId?: string(name='RequestId', description='The request ID.', example='082AD562-B8DB-4BB2-861F-DA1FCA01FD76'),
  vpnConnectionId?: string(name='VpnConnectionId', description='The ID of the IPsec-VPN connection.', example='vco-bp15oes1py4i6****'),
}

model CreateVpnConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVpnConnectionResponseBody(name='body'),
}

/**
  * @description *   If the VPN gateway supports the dual-tunnel mode, you can specify the following parameters in addition to the required parameters when you call `CreateVpnConnection`:
  *     **ClientToken**, **Name**, **EffectImmediately**, **AutoConfigRoute**, **Tags** array, **TunnelOptionsSpecification** array, and **EnableTunnelsBgp**.
  *     For more information about the regions and zones that support the dual-tunnel mode, see [IPsec-VPN connections support the dual-tunnel mode](https://help.aliyun.com/document_detail/2358946.html).
  * *   If the VPN gateway supports only the dual-tunnel mode, you can specify the following parameters in addition to the required parameters when you call `CreateVpnConnection`:
  *     **ClientToken**, **CustomerGatewayId**, **Name**, **EffectImmediately**, **IkeConfig**, **IpsecConfig**, **HealthCheckConfig**, **AutoConfigRoute**, **EnableDpd**, **EnableNatTraversal**, **BgpConfig**, **RemoteCaCertificate**, and **Tags** array.
  * *   **CreateVpnConnection** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [DescribeVpnGateway](https://help.aliyun.com/document_detail/73720.html) to query the status of the task.
  *     *   If the VPN gateway is in the **updating** state, the IPsec-VPN connection is being created.
  *     *   If the VPN gateway is in the **active** state, the IPsec-VPN connection is created.
  * *   You cannot call **CreateVpnConnection** to create multiple IPsec-VPN connections associated with a VPN gateway at the same time.
  * @param request  the request parameters of CreateVpnConnection  CreateVpnConnectionRequest
  * @return CreateVpnConnectionResponse
 */
async function createVpnConnection(request: CreateVpnConnectionRequest): CreateVpnConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpnConnection', 'POST', '/', 'json', true, 'form', request);
}

model CreateVpnGatewayRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment. Valid values:

*   **true**
*   **false** (default)

> To create a VPN gateway, we recommend that you enable automatic payment. If you disable automatic payment, you must manually pay the bill to create the VPN gateway.', example='false', position='Query'),
  bandwidth: int32(name='Bandwidth', description='The maximum bandwidth of the VPN gateway. Unit: Mbit/s.

*   If you want to create a public VPN gateway, valid values are **10**, **100**, **200**, **500**, and **1000**.
*   If you want to create a private VPN gateway, valid values are **200** and **1000**.

>  The maximum bandwidth supported by VPN gateways in some regions is 500 Mbit/s. For more information, see [VPN gateway limits](https://help.aliyun.com/document_detail/65290.html).

This parameter is required.', example='5', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a value, and you must make sure that each request has a unique token value. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the value of **RequestId** as the value of **ClientToken**. The value of **RequestId** for each API request is different.', example='02fb3da4****', position='Query'),
  disasterRecoveryVSwitchId?: string(name='DisasterRecoveryVSwitchId', description='The second vSwitch with which you want to associate the VPN gateway.

*   If you call this operation in a region that supports the IPsec-VPN connections in dual-tunnel mode, this parameter is required.
*   You need to specify two vSwitches in different zones in the virtual private cloud (VPC) that is associated with the VPN gateway to implement disaster recovery across zones.
*   For a region that supports only one zone, disaster recovery across zones is not supported. We recommend that you specify two vSwitches in the zone to implement high availability. You can specify the same vSwitch.

For more information about the regions and zones that support the IPsec-VPN connections in dual-tunnel mode, see [IPsec-VPN connections support the dual-tunnel mode](https://help.aliyun.com/document_detail/2358946.html).', example='vsw-p0wiz7obm0tbimu4r****', position='Query'),
  enableIpsec?: boolean(name='EnableIpsec', description='Specifies whether to enable IPsec-VPN for the VPN gateway. Valid values:

*   **true** (default)
*   **false**', example='true', position='Query'),
  enableSsl?: boolean(name='EnableSsl', description='Specifies whether to enable SSL-VPN. Valid values:

*   **true**
*   **false** (default)', example='false', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the VPN gateway. Set the value to **POSTPAY**, which specifies the pay-as-you-go billing method.', example='Example value for the Alibaba Cloud China site: PREPAY. Example value for the Alibaba Cloud International site: POSTPAY.', position='Query'),
  name?: string(name='Name', description='The name of the VPN gateway. The default value is the ID of the VPN gateway.

The name must be 2 to 100 characters in length and cannot start with `http://` or `https://`. It must start with a letter and can contain letters, digits, underscores (_), hyphens (-), and periods (.). Other special characters are not supported.', example='MYVPN', position='Query'),
  networkType?: string(name='NetworkType', description='The network type of the VPN gateway. Valid values:

*   **public** (default)
*   **private**', example='public', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', description='The subscription duration. Unit: month. Valid values: **1** to **9**, **12**, **24**, and **36**.', example='1', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VPN gateway. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the VPN gateway belongs.

*   You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/158855.html) operation to query resource group IDs.

*   If you do not specify a resource group ID, the VPN gateway belongs to the default resource group.

*   After the VPN gateway is created, the following resources also belong to the resource group and you cannot change the resource group: SSL servers, SSL client certificates, IPsec servers, and IPsec-VPN connections.

    If you move the VPN gateway to a new resource group, the preceding resources are also moved to the new resource group.', example='rg-acfmzs372yg****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sslConnections?: int32(name='SslConnections', description='The maximum number of clients that can be connected at the same time. Valid values: **5** (default), **10**, **20**, **50**, **100**, **200**, **500**, and **1000**.', example='5', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The vSwitch with which you want to associate the VPN gateway.

*   If you call this operation in a region that supports the IPsec-VPN connections in dual-tunnel mode, this parameter is required. You must specify a vSwitch and specify **DisasterRecoveryVSwitchId**.
*   If you call this operation in a region that supports the IPsec-VPN connections in single-tunnel mode and do not specify a vSwitch, the system automatically specifies a vSwitch.', example='vsw-bp1j5miw2bae9s2vt****', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the virtual private cloud (VPC) where you want to create the VPN gateway.

This parameter is required.', example='vpc-bp1ub1yt9cvakoelj****', position='Query'),
  vpnType?: string(name='VpnType', description='The type of the VPN gateway. Valid values:

Set the value to **Normal** (default), which specifies a standard NAT gateway.', example='Normal', position='Query'),
}

model CreateVpnGatewayResponseBody = {
  name?: string(name='Name', description='The name of the VPN gateway.', example='MYVPN'),
  orderId?: long(name='OrderId', description='The order ID.

If automatic payment is disabled, you must manually complete the payment for the VPN gateway in the [Alibaba Cloud Management console](https://usercenter2-intl.aliyun.com/billing/#/account/overview).', example='208240895400460'),
  requestId?: string(name='RequestId', description='The request ID.', example='EB2C156A-41F8-49CC-A756-D55AFC8BFD69'),
  vpnGatewayId?: string(name='VpnGatewayId', description='The ID of the VPN gateway.', example='vpn-uf68lxhgr7ftbqr3p****'),
}

model CreateVpnGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVpnGatewayResponseBody(name='body'),
}

/**
  * @description *   Before you create a VPN gateway, we recommend that you know more about the limits of VPN gateways. For more information, see the [Limits](https://help.aliyun.com/document_detail/65290.html) section in the "Create and manage a VPN gateway" topic.
  * *   VPN gateways in some regions support only IPsec-VPN connections in dual-tunnel mode. If you call `CreateVpnGateway` in these regions, you must specify **VSwitchId** and **DisasterRecoveryVSwitchId** in addition to the required parameters. For more information about the regions and zones that support the IPsec-VPN connections in dual-tunnel mode, see [IPsec-VPN connections support the dual-tunnel mode](https://help.aliyun.com/document_detail/2358946.html).
  * *   **CreateVpnGateway** is an asynchronous operation. After you send a request to call this operation, the system returns a request ID and the endpoint service is being created in the backend. You can call [DescribeVpnGateway](https://help.aliyun.com/document_detail/73720.html) to query the status of a VPN gateway.
  *     *   If the VPN gateway is in the **provisioning** state, the VPN gateway is being created.
  *     *   If the VPN gateway is in the **active** state, the VPN gateway is created.
  * @param request  the request parameters of CreateVpnGateway  CreateVpnGatewayRequest
  * @return CreateVpnGatewayResponse
 */
async function createVpnGateway(request: CreateVpnGatewayRequest): CreateVpnGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpnGateway', 'POST', '/', 'json', false, 'json', request);
}

model CreateVpnPbrRouteEntryRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID is different for each request.', example='d7d24a21-f4ba-4454-9173-b3****', position='Query'),
  description?: string(name='Description', description='The description of the policy-based route.

The description must be 1 to 100 characters in length, and cannot start with http:// or https://.', example='desctest', position='Query'),
  nextHop: string(name='NextHop', description='The next hop of the policy-based route.

This parameter is required.', example='vco-bp15oes1py4i66rmd****', position='Query'),
  overlayMode?: string(name='OverlayMode', description='The tunneling protocol. Set the value to **Ipsec**.', example='Ipsec', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  priority?: int32(name='Priority', description='The priority of the policy-based route. Valid values: **1** to **100**. Default value: **10**.

A smaller value indicates a higher priority.', example='10', position='Query'),
  publishVpc: boolean(name='PublishVpc', description='Specifies whether to advertise the policy-based route to a virtual private cloud (VPC) route table. Valid values:

*   **true**
*   **false**

This parameter is required.', example='true', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VPN gateway. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeDest: string(name='RouteDest', description='The destination CIDR block of the policy-based route.

This parameter is required.', example='10.0.0.0/24', position='Query'),
  routeSource: string(name='RouteSource', description='The source CIDR block of the policy-based route.

This parameter is required.', example='192.168.1.0/24', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', description='The VPN gateway ID.

This parameter is required.', example='vpn-bp1a3kqjiiq9legfx****', position='Query'),
  weight: int32(name='Weight', description='The weight of the policy-based route.

If you use the same VPN gateway to establish active/standby IPsec-VPN connections, you can configure route weights to specify which connection is active. A value of 100 specifies the active connection, whereas a value of 0 specifies the standby connection.

You can configure health checks to automatically check the connectivity of IPsec-VPN connections. If the active connection is down, the standby connection automatically takes over. For more information, see [CreateVpnConnection](https://help.aliyun.com/document_detail/120391.html).

*   **100**: The IPsec-VPN connection associated with the policy-based route serves as an active connection.
*   **0**: The IPsec-VPN connection associated with the policy-based route serves as a standby connection.

>  If you specify active/standby IPsec-VPN connections, the active policy-based route and the standby policy-based route must have the same source and destination CIDR blocks.

This parameter is required.', example='0', position='Query'),
}

model CreateVpnPbrRouteEntryResponseBody = {
  createTime?: long(name='CreateTime', description='The time when the policy-based route was created.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1492747187000'),
  description?: string(name='Description', description='The description of the policy-based route.', example='desctest'),
  nextHop?: string(name='NextHop', description='The next hop of the policy-based route.', example='vco-bp15oes1py4i66rmd****'),
  overlayMode?: string(name='OverlayMode', description='The tunneling protocol. The value is **Ipsec**.', example='Ipsec'),
  priority?: int32(name='Priority', description='The priority of the policy-based route.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
  routeDest?: string(name='RouteDest', description='The destination CIDR block of the policy-based route.', example='10.0.0.0/24'),
  routeSource?: string(name='RouteSource', description='The source CIDR block of the policy-based route.', example='192.168.1.0/24'),
  state?: string(name='State', description='The status of the policy-based route. Valid values:

*   **published**: advertised to the VPC route table.
*   **normal**: not advertised to the VPC route table.', example='normal'),
  vpnInstanceId?: string(name='VpnInstanceId', description='The VPN gateway ID.', example='vpn-bp1cmw7jh1nfe43m9****'),
  weight?: int32(name='Weight', description='The weight of the policy-based route. Valid values:

*   **100**: The IPsec-VPN connection associated with the policy-based route serves as an active connection.
*   **0**: The IPsec-VPN connection associated with the policy-based route serves as a standby connection.', example='0'),
}

model CreateVpnPbrRouteEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVpnPbrRouteEntryResponseBody(name='body'),
}

/**
  * @description *   Before you call this operation, make sure that you are familiar with the match rules of and limits on policy-based routes. For more information, see [Manage policy-based routes](https://help.aliyun.com/document_detail/110777.html).
  * *   Before you create a policy-based route, make sure that an IPsec-VPN connection is created. For more information, see [CreateVpnConnection](https://help.aliyun.com/document_detail/120391.html).
  * *   **CreateVpnPbrRouteEntry** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeVpnGateway](https://help.aliyun.com/document_detail/73720.html) operation to query the status of the VPN gateway.
  *     *   If the VPN gateway is in the **updating** state, the policy-based route is being created.
  *     *   If the VPN gateway is in the **active** state, the policy-based route is created.
  * *   You cannot call the **CreateVpnPbrRouteEntry** operation to create multiple policy-based routes for a VPN gateway at a time.
  * @param request  the request parameters of CreateVpnPbrRouteEntry  CreateVpnPbrRouteEntryRequest
  * @return CreateVpnPbrRouteEntryResponse
 */
async function createVpnPbrRouteEntry(request: CreateVpnPbrRouteEntryRequest): CreateVpnPbrRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpnPbrRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model CreateVpnRouteEntryRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='d7d24a21-f4ba-4454-9173-b3828dae****', position='Query'),
  description?: string(name='Description', description='The description of the destination-based route.

The description must be **1** to **100** characters in length, and cannot start with `http://` or `https://`.', example='mytest', position='Query'),
  nextHop: string(name='NextHop', description='The next hop of the destination-based route.

This parameter is required.', example='vco-bp15oes1py4i66rmd****', position='Query'),
  overlayMode?: string(name='OverlayMode', description='The tunneling protocol. The value is set to **Ipsec**, which indicates the IPsec tunneling protocol.', example='Ipsec', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  publishVpc: boolean(name='PublishVpc', description='Specifies whether to advertise the destination-based route to a virtual private cloud (VPC) route table. Valid values:

*   **true**
*   **false**

This parameter is required.', example='true', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the VPN gateway is created.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeDest: string(name='RouteDest', description='The destination CIDR block of the destination-based route.

This parameter is required.', example='10.0.0.0/24', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', description='The ID of the VPN gateway.

This parameter is required.', example='vpn-bp1a3kqjiiq9legfx****', position='Query'),
  weight: int32(name='Weight', description='The weight of the destination-based route. Valid values:

*   **100**: a high priority
*   **0**: a low priority

This parameter is required.', example='0', position='Query'),
}

model CreateVpnRouteEntryResponseBody = {
  createTime?: long(name='CreateTime', description='The timestamp when the destination-based route was created. Unit: milliseconds.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1492747187000'),
  description?: string(name='Description', description='The description of the destination-based route.', example='mytest'),
  nextHop?: string(name='NextHop', description='The next hop of the destination-based route.', example='vco-bp15oes1py4i66rmd****'),
  overlayMode?: string(name='OverlayMode', description='The tunneling protocol. The value is set to **Ipsec**, which indicates the IPsec tunneling protocol.', example='Ipsec'),
  requestId?: string(name='RequestId', description='The request ID.', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
  routeDest?: string(name='RouteDest', description='The destination CIDR block of the destination-based route.', example='10.0.0.0/24'),
  state?: string(name='State', description='The status of the destination-based route.

*   **published**: advertised to the VPC route table.
*   **normal**: not advertised to the VPC route table.', example='published'),
  vpnInstanceId?: string(name='VpnInstanceId', description='The ID of the VPN gateway.', example='vpn-bp1a3kqjiiq9legfx****'),
  weight?: int32(name='Weight', description='The weight of the destination-based route. Valid values:

*   **100**: a high priority
*   **0**: a low priority', example='0'),
}

model CreateVpnRouteEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVpnRouteEntryResponseBody(name='body'),
}

/**
  * @description *   **CreateVpnRouteEntry** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [DescribeVpnGateway](https://help.aliyun.com/document_detail/73720.html) to query the status of the task.
  *     *   If a VPN gateway is in the **updating** state, the destination-based route entry is being created.
  *     *   If a VPN gateway is in the **active** state, the destination-based route entry has been created.
  * *   You cannot repeatedly call **CreateVpnRouteEntry** to create a destination-based route entry for a VPN gateway within the specified period of time.
  * @param request  the request parameters of CreateVpnRouteEntry  CreateVpnRouteEntryRequest
  * @return CreateVpnRouteEntryResponse
 */
async function createVpnRouteEntry(request: CreateVpnRouteEntryRequest): CreateVpnRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpnRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeactivateRouterInterfaceRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the router interface is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerInterfaceId: string(name='RouterInterfaceId', description='The ID of the router interface.

This parameter is required.', example='ri-2zeo3xzyf38r4urz****', position='Query'),
}

model DeactivateRouterInterfaceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='BE7EB53A-99AB-4DA8-AEDE-75FA90D046A6'),
}

model DeactivateRouterInterfaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeactivateRouterInterfaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeactivateRouterInterface  DeactivateRouterInterfaceRequest
  * @return DeactivateRouterInterfaceResponse
 */
async function deactivateRouterInterface(request: DeactivateRouterInterfaceRequest): DeactivateRouterInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeactivateRouterInterface', 'POST', '/', 'json', false, 'json', request);
}

model DeactiveFlowLogRequest {
  flowLogId: string(name='FlowLogId', description='The ID of the flow log.

This parameter is required.', example='fl-m5e8vhz2t21sel1nq****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where you want to create the flow log. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-qingdao', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeactiveFlowLogResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F7DDDC17-FA06-4AC2-8F35-59D2470FCFC1'),
  success?: string(name='Success', description='Indicates whether the operation is successful. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
}

model DeactiveFlowLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeactiveFlowLogResponseBody(name='body'),
}

/**
  * @description *   The **DeactiveFlowLog** operation is asynchronous. After you send the request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [DescribeFlowLogs](https://help.aliyun.com/document_detail/87923.html) operation to query the status of a flow log:
  *     *   If the flow log is in the **Deactivating** state, the flow log is being disabled.
  *     *   If the flow log is in the **Inactive** state, the flow log is disabled.
  * *   You cannot repeatedly call the **DeactiveFlowLog** operation to disable a flow log within the specified period of time.
  * @param request  the request parameters of DeactiveFlowLog  DeactiveFlowLogRequest
  * @return DeactiveFlowLogResponse
 */
async function deactiveFlowLog(request: DeactiveFlowLogRequest): DeactiveFlowLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeactiveFlowLog', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBgpGroupRequest {
  bgpGroupId: string(name='BgpGroupId', description='The ID of the BGP group.

This parameter is required.', example='bgpg-bp1k25cyp26cllath****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the BGP group.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteBgpGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DeleteBgpGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteBgpGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteBgpGroup  DeleteBgpGroupRequest
  * @return DeleteBgpGroupResponse
 */
async function deleteBgpGroup(request: DeleteBgpGroupRequest): DeleteBgpGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBgpGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBgpNetworkRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dstCidrBlock: string(name='DstCidrBlock', description='The CIDR block of the virtual private cloud (VPC) or vSwitch that you want to connect to a data center.

This parameter is required.', example='10.110.192.12/32', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the BGP group.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerId: string(name='RouterId', description='The ID of the VBR.

This parameter is required.', example='vrt-bp1lhl0taikrteen8****', position='Query'),
}

model DeleteBgpNetworkResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DeleteBgpNetworkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteBgpNetworkResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteBgpNetwork  DeleteBgpNetworkRequest
  * @return DeleteBgpNetworkResponse
 */
async function deleteBgpNetwork(request: DeleteBgpNetworkRequest): DeleteBgpNetworkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBgpNetwork', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBgpPeerRequest {
  bgpPeerId: string(name='BgpPeerId', description='The ID of the BGP peer.

This parameter is required.', example='bgp-wz977wcrmb69a********', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the BGP group.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteBgpPeerResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='611CB80C-B6A9-43DB-9E38-0B0AC3D9B58F'),
}

model DeleteBgpPeerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteBgpPeerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteBgpPeer  DeleteBgpPeerRequest
  * @return DeleteBgpPeerResponse
 */
async function deleteBgpPeer(request: DeleteBgpPeerRequest): DeleteBgpPeerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBgpPeer', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCommonBandwidthPackageRequest {
  bandwidthPackageId: string(name='BandwidthPackageId', description='The ID of the Internet Shared Bandwidth instance.

This parameter is required.', example='cbwp-2ze2ic1xd2qeqk145pn4u', position='Query'),
  force?: string(name='Force', description='Specifies whether to forcefully delete the Internet Shared Bandwidth instance. Valid values:

*   **false** (default): deletes the Internet Shared Bandwidth instance only when no EIPs are associated with the Internet Shared Bandwidth instance.
*   **true**: disassociates all EIPs from the Internet Shared Bandwidth instance and deletes the Internet Shared Bandwidth instance.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Internet Shared Bandwidth instance is created.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteCommonBandwidthPackageResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='B400EF57-60E3-4D61-B8FB-7FA8F72DF5A6'),
}

model DeleteCommonBandwidthPackageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCommonBandwidthPackageResponseBody(name='body'),
}

/**
  * @description You cannot repeatedly call the **DeleteCommonBandwidthPackage** operation to delete an Internet Shared Bandwidth instance within the specified period of time.
  * @param request  the request parameters of DeleteCommonBandwidthPackage  DeleteCommonBandwidthPackageRequest
  * @return DeleteCommonBandwidthPackageResponse
 */
async function deleteCommonBandwidthPackage(request: DeleteCommonBandwidthPackageRequest): DeleteCommonBandwidthPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCommonBandwidthPackage', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomerGatewayRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44-0016e04****', position='Query'),
  customerGatewayId: string(name='CustomerGatewayId', description='The ID of the customer gateway.

This parameter is required.', example='cgw-bp1pvpl9r9adju6l5****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the customer gateway. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteCustomerGatewayResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='606998F0-B94D-48FE-8316-ACA81BB230DA'),
}

model DeleteCustomerGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustomerGatewayResponseBody(name='body'),
}

/**
  * @description Before you delete a customer gateway, make sure that no IPsec-VPN connection is associated with the customer gateway. For more information about how to delete an IPsec-VPN connection, see [DeleteVpnAttachment](https://help.aliyun.com/document_detail/2526938.html) or [DeleteVpnConnection](https://help.aliyun.com/document_detail/2526948.html).
  * @param request  the request parameters of DeleteCustomerGateway  DeleteCustomerGatewayRequest
  * @return DeleteCustomerGatewayResponse
 */
async function deleteCustomerGateway(request: DeleteCustomerGatewayRequest): DeleteCustomerGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomerGateway', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDhcpOptionsSetRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  dhcpOptionsSetId: string(name='DhcpOptionsSetId', description='The ID of the DHCP options set to be deleted.

This parameter is required.', example='dopt-o6w0df4epg9zo8isy****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

**true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.

**false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region of the DHCP options set to be deleted. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDhcpOptionsSetResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteDhcpOptionsSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDhcpOptionsSetResponseBody(name='body'),
}

/**
  * @description ## [](#)Description
  * *   **DeleteDhcpOptionsSet** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [GetDhcpOptionsSet](https://help.aliyun.com/document_detail/189208.html) operation to query the status of the task.
  *     *   If the DHCP options set is in the **Deleting** state, the DHCP options set is being deleted.
  *     *   If you cannot query the DHCP options set, the DHCP options set is deleted.
  * *   You cannot repeatedly call the **DeleteDhcpOptionsSet** operation to delete a DHCP options set within the specified period of time.
  * @param request  the request parameters of DeleteDhcpOptionsSet  DeleteDhcpOptionsSetRequest
  * @return DeleteDhcpOptionsSetResponse
 */
async function deleteDhcpOptionsSet(request: DeleteDhcpOptionsSetRequest): DeleteDhcpOptionsSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDhcpOptionsSet', 'POST', '/', 'json', false, 'json', request);
}

model DeleteExpressConnectTrafficQosRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  qosId: string(name='QosId', description='The instance ID of the QoS policy.

This parameter is required.', example='qos-2giu0a6vd5x0mv4700', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the QoS policy.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model DeleteExpressConnectTrafficQosResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='606998F0-B94D-48FE-8316-ACA81BB230DA'),
}

model DeleteExpressConnectTrafficQosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteExpressConnectTrafficQosResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteExpressConnectTrafficQos  DeleteExpressConnectTrafficQosRequest
  * @return DeleteExpressConnectTrafficQosResponse
 */
async function deleteExpressConnectTrafficQos(request: DeleteExpressConnectTrafficQosRequest): DeleteExpressConnectTrafficQosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteExpressConnectTrafficQos', 'POST', '/', 'json', false, 'json', request);
}

model DeleteExpressConnectTrafficQosQueueRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  qosId: string(name='QosId', description='This parameter is required.', example='qos-2giu0a6vd5x0mv4700', position='Query'),
  queueId: string(name='QueueId', description='This parameter is required.', example='qos-queue-9nyx2u7n71s2rcy4n5', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model DeleteExpressConnectTrafficQosQueueResponseBody = {
  requestId?: string(name='RequestId', example='9B9300FE-11E2-4E3B-949C-BED3B44DD26D'),
}

model DeleteExpressConnectTrafficQosQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteExpressConnectTrafficQosQueueResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteExpressConnectTrafficQosQueue  DeleteExpressConnectTrafficQosQueueRequest
  * @return DeleteExpressConnectTrafficQosQueueResponse
 */
async function deleteExpressConnectTrafficQosQueue(request: DeleteExpressConnectTrafficQosQueueRequest): DeleteExpressConnectTrafficQosQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteExpressConnectTrafficQosQueue', 'POST', '/', 'json', false, 'json', request);
}

model DeleteExpressConnectTrafficQosRuleRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='02fb3da4-130e-11e9-8e44-00****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  qosId: string(name='QosId', description='The ID of the QoS policy.

This parameter is required.', example='qos-2giu0a6vd5x0mv4700', position='Query'),
  queueId: string(name='QueueId', description='The ID of the QoS queue.

This parameter is required.', example='qos-queue-9nyx2u7n71s2rcy4n5', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the QoS policy.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  ruleId: string(name='RuleId', description='The ID of the QoS rule.

This parameter is required.', example='qos-rule-iugg0l9x27f2nocouj', position='Query'),
}

model DeleteExpressConnectTrafficQosRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C44F62BE-9CE7-4277-B117-69243F3988BF'),
}

model DeleteExpressConnectTrafficQosRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteExpressConnectTrafficQosRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteExpressConnectTrafficQosRule  DeleteExpressConnectTrafficQosRuleRequest
  * @return DeleteExpressConnectTrafficQosRuleResponse
 */
async function deleteExpressConnectTrafficQosRule(request: DeleteExpressConnectTrafficQosRuleRequest): DeleteExpressConnectTrafficQosRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteExpressConnectTrafficQosRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFailoverTestJobRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  jobId: string(name='JobId', description='The ID of the failover test.

This parameter is required.', example='ftj-xxxxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the failover test.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='ch-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model DeleteFailoverTestJobResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C44F62BE-9CE7-4277-B117-69243F3988BF'),
}

model DeleteFailoverTestJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFailoverTestJobResponseBody(name='body'),
}

/**
  * @description You can delete only failover tests that are in the **Pending** or **Complete** state.
  * @param request  the request parameters of DeleteFailoverTestJob  DeleteFailoverTestJobRequest
  * @return DeleteFailoverTestJobResponse
 */
async function deleteFailoverTestJob(request: DeleteFailoverTestJobRequest): DeleteFailoverTestJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFailoverTestJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFlowLogRequest {
  flowLogId: string(name='FlowLogId', description='The ID of the flow log.

This parameter is required.', example='fl-m5e8vhz2t21sel1nq****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the flow log. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-qingdao', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteFlowLogResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F7DDDC17-FA06-4AC2-8F35-59D2470FCFC1'),
  success?: string(name='Success', description='Indicates whether the operation is successful. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
}

model DeleteFlowLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFlowLogResponseBody(name='body'),
}

/**
  * @description *   The **DeleteFlowLog** operation is asynchronous. After you send the request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [DescribeFlowLogs](https://help.aliyun.com/document_detail/87923.html) operation to query the status of a flow log:
  *     *   If the flow log is in the **Deleting** state, the flow log is being deleted.
  *     *   If you cannot query the flow log, the flow log is deleted.
  * *   You cannot repeatedly call the **DeleteFlowLog** operation to delete a flow log within the specified period of time.
  * @param request  the request parameters of DeleteFlowLog  DeleteFlowLogRequest
  * @return DeleteFlowLogResponse
 */
async function deleteFlowLog(request: DeleteFlowLogRequest): DeleteFlowLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFlowLog', 'POST', '/', 'json', false, 'json', request);
}

model DeleteForwardEntryRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  forwardEntryId: string(name='ForwardEntryId', description='The ID of the DNAT entry to be deleted.

This parameter is required.', example='fwd-8vbn3bc8roygjp0gy****', position='Query'),
  forwardTableId: string(name='ForwardTableId', description='The ID of the DNAT table to which the DNAT entry belongs.

This parameter is required.', example='ftb-8vbx8xu2lqj9qb334****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the NAT gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteForwardEntryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteForwardEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteForwardEntryResponseBody(name='body'),
}

/**
  * @description ## [](#)Description
  * *   **DeleteForwardEntry** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeForwardTableEntries](https://help.aliyun.com/document_detail/36053.html) operation to query the status of the task.
  *     *   If the DNAT entry is in the **Deleting** state, the system is deleting the DNAT entry. In this case, you can only query the status of the DNAT entry, but cannot perform other operations.
  *     *   If the DNAT entry cannot be found, it is deleted.
  * >  If a DNAT table has DNAT entries in the **Pending** state, you cannot delete the DNAT entries.
  * *   You cannot repeatedly call the **DeleteForwardEntry** operation to delete a DNAT entry within the specified period of time.
  * @param request  the request parameters of DeleteForwardEntry  DeleteForwardEntryRequest
  * @return DeleteForwardEntryResponse
 */
async function deleteForwardEntry(request: DeleteForwardEntryRequest): DeleteForwardEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteForwardEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFullNatEntryRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, the related error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
*   **false**: performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  fullNatEntryId: string(name='FullNatEntryId', description='The ID of the FULLNAT entry that you want to delete.

This parameter is required.', example='fullnat-gw8fz23jezpbblf1j****', position='Query'),
  fullNatTableId: string(name='FullNatTableId', description='The ID of the FULLNAT table to which the FULLNAT entry to be deleted belongs.

This parameter is required.', example='fulltb-gw88z7hhlv43rmb26****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VPC NAT gateway to which the FULLNAT entry to be deleted belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent list of regions.

This parameter is required.', example='eu-central-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteFullNatEntryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='2BCC426F-A9F2-3F03-99D2-1E0D647236DB'),
}

model DeleteFullNatEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFullNatEntryResponseBody(name='body'),
}

/**
  * @description ## [](#)Description
  * **DeleteFullNatEntry** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListFullNatEntries](https://help.aliyun.com/document_detail/348779.html) operation to query the status of a FULLNAT entry.
  * *   If the FULLNAT entry is in the **Deleting** state, the system is deleting the FULLNAT entry. In this case, you can query the status of the FULLNAT entry, but cannot perform other operations.
  * *   If the FULLNAT entry cannot be found, the FULLNAT entry is deleted.
  * You cannot repeatedly call the **DeleteFullNatEntry** operation to delete a FULLNAT entry within the specified period of time.
  * @param request  the request parameters of DeleteFullNatEntry  DeleteFullNatEntryRequest
  * @return DeleteFullNatEntryResponse
 */
async function deleteFullNatEntry(request: DeleteFullNatEntryRequest): DeleteFullNatEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFullNatEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGlobalAccelerationInstanceRequest {
  globalAccelerationInstanceId: string(name='GlobalAccelerationInstanceId', description='The ID of the GA instance.

This parameter is required.', example='ga-asdfsl22s****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteGlobalAccelerationInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='E6E63B2A-9820-44A8-A359-9BB2DAEE6424'),
}

model DeleteGlobalAccelerationInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGlobalAccelerationInstanceResponseBody(name='body'),
}

/**
  * @description When you call this operation, take note of the following items:
  * *   You can delete only pay-as-you-go instances.
  * *   Before you can delete a dedicated instance, disassociate the backend server from the instance first.
  * *   Before you can delete a shared instance, disassociate the elastic IP address (EIP) from the instance first.
  * @param request  the request parameters of DeleteGlobalAccelerationInstance  DeleteGlobalAccelerationInstanceRequest
  * @return DeleteGlobalAccelerationInstanceResponse
 */
async function deleteGlobalAccelerationInstance(request: DeleteGlobalAccelerationInstanceRequest): DeleteGlobalAccelerationInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGlobalAccelerationInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteHaVipRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, the system uses **RequestId** as **ClientToken**. The value of **RequestId** in each API request may be different.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  haVipId: string(name='HaVipId', description='The ID of the HAVIP that you want to delete.

This parameter is required.', example='havip-2zeo05qre24nhrqpy****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the HAVIP is deployed. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteHaVipResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C44F62BE-9CE7-4277-B117-69243F3988BF'),
}

model DeleteHaVipResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteHaVipResponseBody(name='body'),
}

/**
  * @description When you call this operation, take note of the following rules:
  * *   You can delete only HAVIPs that are in the Available state.
  * *   Make sure that no route points to the HAVIP that you want to delete.
  * *   Make sure that no elastic IP address (EIP) is associated with the HAVIP that you want to delete.
  * *   The **DeleteHaVip** operation is asynchronous. After you send the request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [DescribeHaVips](https://help.aliyun.com/document_detail/114611.html) operation to query the status of an HAVIP:
  *     *   If the HAVIP is in the **Deleting** state, the HAVIP is being deleted.
  *     *   If you cannot query the HAVIP, the HAVIP is deleted.
  * *   You cannot repeatedly call the **DeleteHaVip** operation to delete an HAVIP within the specified period of time.
  * @param request  the request parameters of DeleteHaVip  DeleteHaVipRequest
  * @return DeleteHaVipResponse
 */
async function deleteHaVip(request: DeleteHaVipRequest): DeleteHaVipResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHaVip', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIPv6TranslatorRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.', example='ClientToken', position='Query'),
  ipv6TranslatorId: string(name='Ipv6TranslatorId', description='The ID of the IPv6 Translation Service instance.

This parameter is required.', example='ipv6trans-bp1i8ahxut1ie****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the IPv6 Translation Service instance.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteIPv6TranslatorResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DeleteIPv6TranslatorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIPv6TranslatorResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteIPv6Translator  DeleteIPv6TranslatorRequest
  * @return DeleteIPv6TranslatorResponse
 */
async function deleteIPv6Translator(request: DeleteIPv6TranslatorRequest): DeleteIPv6TranslatorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIPv6Translator', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIPv6TranslatorAclListRequest {
  aclId: string(name='AclId', description='The ID of the ACL that you want to delete.

This parameter is required.', example='ipv6transacl-bp1de2****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among all requests. The token can contain only ASCII characters.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region of the IPv6 translation service instance.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteIPv6TranslatorAclListResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DeleteIPv6TranslatorAclListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIPv6TranslatorAclListResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI DeleteIPv6TranslatorAclList is deprecated  * @param request  the request parameters of DeleteIPv6TranslatorAclList  DeleteIPv6TranslatorAclListRequest
  * @return DeleteIPv6TranslatorAclListResponse
 */
// Deprecated
async function deleteIPv6TranslatorAclList(request: DeleteIPv6TranslatorAclListRequest): DeleteIPv6TranslatorAclListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIPv6TranslatorAclList', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIPv6TranslatorEntryRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ipv6TranslatorEntryId?: string(name='Ipv6TranslatorEntryId', description='The ID of the IPv6 mapping entry to be deleted.', example='ipv6transentry-bp1g8bhrde****', position='Query'),
  ipv6TranslatorId?: string(name='Ipv6TranslatorId', description='The ID of the IPv6 Translation Service instance.

> If you do not specify **Ipv6TranslatorEntryId**, all mapping entries in the specified instance are deleted.', example='ipv6trans-bp1858ys****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region of the IPv6 Translation Service instance. You can call the **DescribeRegions** operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteIPv6TranslatorEntryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='8B2F5262-6B57-43F2-xxxxx'),
}

model DeleteIPv6TranslatorEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIPv6TranslatorEntryResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI DeleteIPv6TranslatorEntry is deprecated  * @param request  the request parameters of DeleteIPv6TranslatorEntry  DeleteIPv6TranslatorEntryRequest
  * @return DeleteIPv6TranslatorEntryResponse
 */
// Deprecated
async function deleteIPv6TranslatorEntry(request: DeleteIPv6TranslatorEntryRequest): DeleteIPv6TranslatorEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIPv6TranslatorEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIpsecServerRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44-00****', position='Query'),
  dryRun?: string(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  ipsecServerId: string(name='IpsecServerId', description='The ID of the IPsec server.

This parameter is required.', example='iss-bp1jougp8cfsbo8y9****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the IPsec server is created.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model DeleteIpsecServerResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteIpsecServerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIpsecServerResponseBody(name='body'),
}

/**
  * @description *   **DeleteIpsecServer** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [DescribeVpnGateway](https://help.aliyun.com/document_detail/2794055.html) to query the status of the task.
  *     *   If a VPN gateway is in the **updating** state, the IPsec server is being deleted.
  *     *   If a VPN gateway is in the **active** state, the IPsec server is deleted.
  * *   You cannot repeatedly call **DeleteIpsecServer** to delete an IPsec server from a VPN gateway within the specified period of time.
  * @param request  the request parameters of DeleteIpsecServer  DeleteIpsecServerRequest
  * @return DeleteIpsecServerResponse
 */
async function deleteIpsecServer(request: DeleteIpsecServerRequest): DeleteIpsecServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIpsecServer', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIpv4GatewayRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run, without performing the actual request. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  internetMode?: string(name='InternetMode', position='Query'),
  ipv4GatewayId: string(name='Ipv4GatewayId', description='The ID of the IPv4 gateway that you want to delete.

This parameter is required.', example='ipv4gw-5tsnc6s4ogsedtp3k****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the IPv4 gateway that you want to delete.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='ap-southeast-6', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteIpv4GatewayResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='21133AC0-0636-521B-A400-253818691A56'),
}

model DeleteIpv4GatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIpv4GatewayResponseBody(name='body'),
}

/**
  * @description ### [](#)Description
  * *   Before you delete an IPv4 gateway, make sure that no route tables are associated with the IPv4 gateway.
  * *   **DeleteIpv4Gateway** is an asynchronous operation. After a request is sent, the system returns a **request ID** and runs the task in the background. You can call the [GetIpv4GatewayAttribute](https://help.aliyun.com/document_detail/407670.html) operation to query the status of the task.
  *     *   If the IPv4 gateway is in the **Deleting** state, the IPv4 gateway is being deleted.
  *     *   If the IPv4 gateway cannot be queried, the IPv4 gateway is deleted.
  * *   After you call the **DeleteIpv4Gateway** operation to delete an IPv4 gateway, you cannot call the operation again to delete the IPv4 gateway until the deletion task is complete.
  * @param request  the request parameters of DeleteIpv4Gateway  DeleteIpv4GatewayRequest
  * @return DeleteIpv4GatewayResponse
 */
async function deleteIpv4Gateway(request: DeleteIpv4GatewayRequest): DeleteIpv4GatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIpv4Gateway', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIpv6EgressOnlyRuleRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the value of **RequestId** as the **client token**. The value of **RequestId** is different for each API request.', example='123456', position='Query'),
  ipv6EgressOnlyRuleId: string(name='Ipv6EgressOnlyRuleId', description='The ID of the egress-only rule that you want to delete.

This parameter is required.', example='ipv6py-hp3w98rmlbqp0xxxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the IPv6 gateway. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/448570.html) operation to query the most recent region list.

This parameter is required.', example='cn-huhehaote', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteIpv6EgressOnlyRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='9DFEDBEE-E5AB-49E8-A2DC-CC114C67AF75'),
}

model DeleteIpv6EgressOnlyRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIpv6EgressOnlyRuleResponseBody(name='body'),
}

/**
  * @description *   **DeleteIpv6EgressOnlyRule** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeIpv6EgressOnlyRules](https://help.aliyun.com/document_detail/102208.html) operation to query the status of the task.
  *     *   If the egress-only rule is in the **Deleting** state, the egress-only rule is being deleted.
  *     *   If you cannot query the egress-only rule, the egress-only rule is deleted.
  * *   You cannot call the **DeleteIpv6EgressOnlyRule** within the specified period of time.
  * @param request  the request parameters of DeleteIpv6EgressOnlyRule  DeleteIpv6EgressOnlyRuleRequest
  * @return DeleteIpv6EgressOnlyRuleResponse
 */
async function deleteIpv6EgressOnlyRule(request: DeleteIpv6EgressOnlyRuleRequest): DeleteIpv6EgressOnlyRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIpv6EgressOnlyRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIpv6GatewayRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ipv6GatewayId: string(name='Ipv6GatewayId', description='The ID of the IPv6 gateway that you want to delete.

This parameter is required.', example='ipv6gw-hp3y0l3ln89j8****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the IPv6 gateway. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-huhehaote', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteIpv6GatewayResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='E9A8AABE-A84B-4AF2-A68A-8E2EA190E7AE'),
}

model DeleteIpv6GatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIpv6GatewayResponseBody(name='body'),
}

/**
  * @description Before you delete an IPv6 gateway, you must delete the egress-only rules of the IPv6 gateway. For more information, see [DeleteIpv6EgressOnlyRule](https://help.aliyun.com/document_detail/102201.html).
  * *   **DeleteIpv6Gateway** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeIpv6GatewayAttribute](https://help.aliyun.com/document_detail/102226.html) operation to query the status of the task:
  *     *   If the IPv6 gateway is in the **Deleting** state, the IPv6 gateway is being deleted.
  *     *   If you cannot query the IPv6 gateway, the IPv6 gateway is deleted.
  * *   You cannot repeatedly call the **DeleteIpv6Gateway** operation to delete an IPv6 gateway within the specified period of time.
  * @param request  the request parameters of DeleteIpv6Gateway  DeleteIpv6GatewayRequest
  * @return DeleteIpv6GatewayResponse
 */
async function deleteIpv6Gateway(request: DeleteIpv6GatewayRequest): DeleteIpv6GatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIpv6Gateway', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIpv6InternetBandwidthRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ipv6AddressId?: string(name='Ipv6AddressId', description='The ID of the IPv6 address.

>  You must specify one of **Ipv6AddressId** and **Ipv6InternetBandwidthId**.', example='ipv6-2zen5j4axcp5l5qyy****', position='Query'),
  ipv6InternetBandwidthId?: string(name='Ipv6InternetBandwidthId', description='The instance ID of the Internet bandwidth of the IPv6 address.', example='ipv6bw-uf6hcyzu65v98v3du****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the IPv6 gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-huhehaote', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteIpv6InternetBandwidthResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='E07E0FE6-5C21-405F-AF82-7613AA81EF92'),
}

model DeleteIpv6InternetBandwidthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIpv6InternetBandwidthResponseBody(name='body'),
}

/**
  * @description You cannot call the **DeleteIpv6InternetBandwidth** operation within the specified period of time.
  * @param request  the request parameters of DeleteIpv6InternetBandwidth  DeleteIpv6InternetBandwidthRequest
  * @return DeleteIpv6InternetBandwidthResponse
 */
async function deleteIpv6InternetBandwidth(request: DeleteIpv6InternetBandwidthRequest): DeleteIpv6InternetBandwidthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIpv6InternetBandwidth', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNatGatewayRequest {
  force?: boolean(name='Force', description='Specifies whether to forcefully delete the NAT gateway. Valid values:

*   **true** If you set the value to **true**:

    *   If the NAT gateway has SNAT entries, the system automatically deletes them.
    *   If the NAT gateway has DNAT entries, the system automatically deletes them.
    *   If the NAT gateway is associated with an elastic IP address (EIP), the system automatically disassociates the EIP from the NAT gateway.
    *   If the NAT gateway is associated with a NAT bandwidth plan, the system automatically disassociates the NAT bandwidth plan.

*   **false**(default): no If you set the value to **false**:

    *   If the NAT gateway is associated with a NAT bandwidth plan, disassociate the NAT bandwidth plan first.
    *   If the NAT gateway has SNAT entries, delete them first.
    *   If the NAT gateway has DNAT entries, delete them first.
    *   If the NAT gateway is associated with an EIP, disassociate the EIP from the NAT gateway first.', example='false', position='Query'),
  natGatewayId: string(name='NatGatewayId', description='The ID of the NAT gateway that you want to delete.

This parameter is required.', example='ngw-bp1uewa15k4iy5770****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the NAT gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteNatGatewayResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteNatGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNatGatewayResponseBody(name='body'),
}

/**
  * @description ## [](#)Description
  * *   **DeleteNatGateway** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeNatGateways](https://help.aliyun.com/document_detail/36054.html) to query the status of the task.
  *     *   If a NAT gateway is in the **Deleting** state, the NAT gateway is being deleted. In this case, you can query the NAT gateway but you cannot perform other operations.
  *     *   If the NAT gateway cannot be found, the NAT gateway is deleted.
  *         After you delete a NAT gateway, you cannot restore the NAT gateway. Proceed with caution.
  * *   You cannot repeatedly call the **DeleteNatGateway** operation to delete a NAT gateway within the specified period of time.
  * @param request  the request parameters of DeleteNatGateway  DeleteNatGatewayRequest
  * @return DeleteNatGatewayResponse
 */
async function deleteNatGateway(request: DeleteNatGatewayRequest): DeleteNatGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNatGateway', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNatIpRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  natIpId: string(name='NatIpId', description='The ID of the NAT IP address that you want to delete.

This parameter is required.', example='vpcnatip-gw8y7q3cpk3fggs87****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the NAT gateway to which the NAT IP address that you want to delete belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-qingdao', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteNatIpResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='E9AD97A0-5338-43F8-8A80-5E274CCBA11B'),
}

model DeleteNatIpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNatIpResponseBody(name='body'),
}

/**
  * @description ## [](#)Description
  * *   **DeleteNatIp** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListNatIps](https://help.aliyun.com/document_detail/281979.html) operation to query the status of the task.
  *     *   If the NAT IP address is in the **Deleting** state, the NAT IP address is being deleted. In this case, you can only query the NAT IP address but cannot perform other operations.
  *     *   If the NAT IP address cannot be found, it is deleted.
  * *   You cannot repeatedly call the **DeleteNatIp** operation to delete a NAT IP address within the specified period of time.
  * @param request  the request parameters of DeleteNatIp  DeleteNatIpRequest
  * @return DeleteNatIpResponse
 */
async function deleteNatIp(request: DeleteNatIpRequest): DeleteNatIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNatIp', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNatIpCidrRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  natGatewayId: string(name='NatGatewayId', description='The ID of the NAT gateway to which the NAT CIDR block to be deleted belongs.

This parameter is required.', example='ngw-gw8v16wgvtq26vh59****', position='Query'),
  natIpCidr: string(name='NatIpCidr', description='The NAT CIDR block to be deleted.

*   Before you delete a NAT CIDR block, you must delete all NAT IP addresses from the CIDR block.
*   The default NAT CIDR block cannot be deleted.

This parameter is required.', example='172.16.0.0/24', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the NAT gateway to which the NAT CIDR block to be deleted belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='eu-central-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteNatIpCidrResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='7021BEB1-210F-48A9-AB82-BE9A9110BB89'),
}

model DeleteNatIpCidrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNatIpCidrResponseBody(name='body'),
}

/**
  * @description ## [](#)Description
  * You cannot repeatedly call the **DeleteNatIpCidr** operation to delete a NAT CIDR block within the specified period of time.
  * @param request  the request parameters of DeleteNatIpCidr  DeleteNatIpCidrRequest
  * @return DeleteNatIpCidrResponse
 */
async function deleteNatIpCidr(request: DeleteNatIpCidrRequest): DeleteNatIpCidrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNatIpCidr', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNetworkAclRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='223e4867-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

**true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.

**false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  networkAclId: string(name='NetworkAclId', description='The ID of the network ACL.

This parameter is required.', example='nacl-bp1lhl0taikrbgnh****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the network ACL.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteNetworkAclResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4B48E3D-DF70-471B-AA83-089E83A1B45'),
}

model DeleteNetworkAclResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNetworkAclResponseBody(name='body'),
}

/**
  * @description ## [](#)Description
  * You cannot repeatedly call the **DeleteNetworkAcl** operation within the specified period of time.
  * @param request  the request parameters of DeleteNetworkAcl  DeleteNetworkAclRequest
  * @return DeleteNetworkAclResponse
 */
async function deleteNetworkAcl(request: DeleteNetworkAclRequest): DeleteNetworkAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNetworkAcl', 'POST', '/', 'json', false, 'json', request);
}

model DeletePhysicalConnectionRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', description='The ID of the Express Connect circuit.

This parameter is required.', example='pc-119mfjzm7*********', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Express Connect circuit.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeletePhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeletePhysicalConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePhysicalConnectionResponseBody(name='body'),
}

/**
  * @description You can only delete a connection over an Express Connect circuit that is in the **Rejected**, **Canceled**, **AllocationFailed**, or **Terminated** state.
  * @param request  the request parameters of DeletePhysicalConnection  DeletePhysicalConnectionRequest
  * @return DeletePhysicalConnectionResponse
 */
async function deletePhysicalConnection(request: DeletePhysicalConnectionRequest): DeletePhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model DeletePublicIpAddressPoolRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.', example='0c593ea1-3bea-11e9-b96b-88e9fe60000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  publicIpAddressPoolId: string(name='PublicIpAddressPoolId', description='The ID of the IP address pool.

This parameter is required.', example='pippool-6wetvn6fumkgycssx****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where you want to create the IP address pool.

This parameter is required.', example='cn-chengdu', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeletePublicIpAddressPoolResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model DeletePublicIpAddressPoolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePublicIpAddressPoolResponseBody(name='body'),
}

/**
  * @description Before you call this operation, take note of the following items:
  * *   Before you delete an IP address pool, make sure that no IP address in the pool is being used.
  * *   **DeletePublicIpAddressPool** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListPublicIpAddressPools](https://help.aliyun.com/document_detail/429433.html) operation to query the status of the task.
  *     *   If the IP address pool is in the **Deleting** state, the IP address pool is being deleted. In this state. you can only query the IP address pool and cannot perform other operations.
  *     *   If you cannot query the IP address pool, the IP address pool is deleted.
  * *   You cannot repeatedly call the **DeletePublicIpAddressPool** operation to delete an IP address pool within the specified period of time.
  * @param request  the request parameters of DeletePublicIpAddressPool  DeletePublicIpAddressPoolRequest
  * @return DeletePublicIpAddressPoolResponse
 */
async function deletePublicIpAddressPool(request: DeletePublicIpAddressPoolRequest): DeletePublicIpAddressPoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePublicIpAddressPool', 'POST', '/', 'json', false, 'json', request);
}

model DeletePublicIpAddressPoolCidrBlockRequest {
  cidrBlock: string(name='CidrBlock', description='The CIDR block.

This parameter is required.', example='47.0.XX.XX/24', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  publicIpAddressPoolId: string(name='PublicIpAddressPoolId', description='The ID of the IP address pool.

This parameter is required.', example='pippool-6wetvn6fumkgycssx****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the IP address pool from which you want to delete a CIDR block.

This parameter is required.', example='cn-chengdu', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeletePublicIpAddressPoolCidrBlockResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model DeletePublicIpAddressPoolCidrBlockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePublicIpAddressPoolCidrBlockResponseBody(name='body'),
}

/**
  * @description Before you call this operation, take note of the following items:
  * *   Before you delete a CIDR block, make sure that it is not being used.
  * *   **DeletePublicIpAddressPoolCidrBlock** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListPublicIpAddressPoolCidrBlocks](https://help.aliyun.com/document_detail/429436.html) operation to query the status of the task.
  *     *   If the CIDR block is in the **Deleting** state, the CIDR block is being deleted. In this state, you can only query the CIDR block and cannot perform other operations.
  *     *   If you cannot query the CIDR block, the CIDR block is deleted.
  * *   You cannot repeatedly call the **DeletePublicIpAddressPoolCidrBlock** operation to delete a CIDR block within the specified period of time.
  * @param request  the request parameters of DeletePublicIpAddressPoolCidrBlock  DeletePublicIpAddressPoolCidrBlockRequest
  * @return DeletePublicIpAddressPoolCidrBlockResponse
 */
async function deletePublicIpAddressPoolCidrBlock(request: DeletePublicIpAddressPoolCidrBlockRequest): DeletePublicIpAddressPoolCidrBlockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePublicIpAddressPoolCidrBlock', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRouteEntriesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the route table.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeEntries?: [ 
    {
      dstCidrBlock?: string(name='DstCidrBlock', description='The destination CIDR block of the route that you want to delete. IPv4 and IPv6 CIDR blocks are supported. You can specify up to 50 destination CIDR blocks.

>  If **RouteEntryId** is not specified, **DstCidrBlock** and **NextHop** are required.', example='47.100.XX.XX/24'),
      nextHop?: string(name='NextHop', description='The ID of the next hop that you want to delete. You can specify up to 50 next hop IDs.

>  If **RouteEntryId** is not specified, **DstCidrBlock** and **NextHop** are required.', example='i-j6c2fp57q8rr4jlu****'),
      routeEntryId?: string(name='RouteEntryId', description='The ID of the route that you want to delete. You can specify up to 50 route IDs.

>  If **RouteEntryId** is not specified, **DstCidrBlock** and **NextHop** are required.', example='rte-bp1mnnr2al0naomnpv****'),
      routeTableId: string(name='RouteTableId', description='The ID of the route table to which the routes to be deleted belongs. You can specify up to 50 route table IDs.

This parameter is required.', example='vtb-2ze3jgygk9bmsj23s****'),
    }
  ](name='RouteEntries', description='The information about the routes that you want to delete.', position='Query'),
}

model DeleteRouteEntriesResponseBody = {
  failedCount?: int32(name='FailedCount', description='The number of route entries that failed to be deleted.', example='2'),
  failedRouteEntries?: [ 
    {
      dstCidrBlock?: string(name='DstCidrBlock', description='The destination CIDR block of the route entry that failed to be deleted. IPv4 and IPv6 CIDR blocks are supported.', example='47.100.XX.XX/24'),
      failedCode?: string(name='FailedCode', description='The error code.', example='VPC_ROUTER_ENTRY_NOT_EXIST'),
      failedMessage?: string(name='FailedMessage', description='The error message.', example='vRouterEntry not exists'),
      nextHop?: string(name='NextHop', description='The ID of the next hop that failed to be deleted.', example='i-j6c2fp57q8rr4jlu****'),
      routeEntryId?: string(name='RouteEntryId', description='The ID of the route entry that failed to be deleted.', example='rte-bp1mnnr2al0naomnpv****'),
    }
  ](name='FailedRouteEntries', description='The information about the route entry that failed to be deleted.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  successCount?: int32(name='SuccessCount', description='The number of route entries that were deleted.', example='2'),
}

model DeleteRouteEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRouteEntriesResponseBody(name='body'),
}

/**
  * @description When you call this operation, take note of the following items:
  * *   You can delete only routes that are in the **Available** state.
  * *   You cannot delete a route of a virtual private cloud (VPC) in which a vSwitch or another route is being created or deleted.
  * *   **DeleteRouteEntries** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeRouteEntryList](https://help.aliyun.com/document_detail/138148.html) operation to query the status of the task.
  *     *   If the route is in the **Deleting** state, the route is being deleted.
  *     *   If you cannot query the route, the route is deleted.
  * *   You cannot repeatedly call **DeleteRouteEntries** within a specific period of time.
  * @param request  the request parameters of DeleteRouteEntries  DeleteRouteEntriesRequest
  * @return DeleteRouteEntriesResponse
 */
async function deleteRouteEntries(request: DeleteRouteEntriesRequest): DeleteRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRouteEntries', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRouteEntryRequest {
  destinationCidrBlock?: string(name='DestinationCidrBlock', description='The destination CIDR block of the route. Only IPv4 CIDR blocks, IPv6 CIDR blocks, and prefix lists are supported.', example='47.100.XX.XX/16', position='Query'),
  nextHopId?: string(name='NextHopId', description='The ID of the next hop.

*   To delete a route other than an equal-cost multi-path (ECMP) route, set the **NextHopId** parameter and ignore the **NextHopList** parameter.
*   To delete an ECMP route, set the **NextHopList** parameter and ignore the **NextHopId** parameter.', example='ri-2zeo3xzyf38r4urzd****', position='Query'),
  nextHopList?: [ 
    {
      nextHopId?: string(name='NextHopId', description='The ID of the next hop that is configured for ECMP routing. You can specify information about at most 16 next hops.', example='ri-2zeo3xzyf38r43cd****'),
      nextHopType?: string(name='NextHopType', description='The type of the next hop that is configured for ECMP routing. Set the value to **RouterInterface**. You can specify information about at most 16 next hops.', example='RouterInterface'),
    }
  ](name='NextHopList', description='The list of the next hop of the ECMP route.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the route table.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeEntryId?: string(name='RouteEntryId', description='The ID of the route that you want to delete.', example='rte-bp1mnnr2al0naomnpv****', position='Query'),
  routeTableId?: string(name='RouteTableId', description='The ID of the route table to which the route belongs.', example='vtb-2ze3jgygk9bmsj23s****', position='Query'),
}

model DeleteRouteEntryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteRouteEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRouteEntryResponseBody(name='body'),
}

/**
  * @description When you call this operation, take note of the following items:
  * *   You can delete only routes that are in the **Available** state.
  * *   You cannot delete a route entry of a virtual private cloud (VPC) in which a vSwitch or another route entry is being created or deleted.
  * *   Before you call this operation to delete a route of a VBR route table, call the [DescribeRouteEntryList](https://help.aliyun.com/document_detail/138148.html) operation to query the **NextHopId** of the route first.
  * *   **DeleteRouteEntry** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeRouteEntryList](https://help.aliyun.com/document_detail/138148.html) operation to query the status of the task.
  *     *   If the route is in the **Deleting** state, the route is being deleted.
  *     *   If you cannot query the route entry, the route entry is deleted.
  * *   You cannot repeatedly call the **DeleteRouteEntry** operation to delete a route from the route table of a vRouter or a VBR within the specified period of time.
  * @param request  the request parameters of DeleteRouteEntry  DeleteRouteEntryRequest
  * @return DeleteRouteEntryResponse
 */
async function deleteRouteEntry(request: DeleteRouteEntryRequest): DeleteRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRouteTableRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the virtual private cloud (VPC) to which the custom route table belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId: string(name='RouteTableId', description='The ID of the custom route table.

This parameter is required.', example='vtb-bp145q7glnuzdvzu2****', position='Query'),
}

model DeleteRouteTableResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='DC668356-BCB4-42FD-9BC3-FA2B2E04B634'),
}

model DeleteRouteTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRouteTableResponseBody(name='body'),
}

/**
  * @description ## [](#)Description
  * *   **DeleteRouteTable** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeRouteTableList](https://help.aliyun.com/document_detail/87602.html) operation to query the status of the task.
  *     *   If the custom route table is in the **Deleting** state, the custom route table is being deleted.
  *     *   If you cannot query the custom route table, the custom route table is deleted.
  * *   You cannot repeatedly call the **DeleteRouteTable** operation to delete a custom route table within the specified period of time.
  * @param request  the request parameters of DeleteRouteTable  DeleteRouteTableRequest
  * @return DeleteRouteTableResponse
 */
async function deleteRouteTable(request: DeleteRouteTableRequest): DeleteRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRouterInterfaceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the router interface is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerInterfaceId: string(name='RouterInterfaceId', description='The ID of the router interface.

This parameter is required.', example='ri-2zeo3xzyf38r4urz****', position='Query'),
}

model DeleteRouterInterfaceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DeleteRouterInterfaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRouterInterfaceResponseBody(name='body'),
}

/**
  * @description When you call this operation, take note of the following limits:
  * *   You can delete only a router interface that is in the **Idle** or **Inactive** state.
  * *   Before you delete a router interface, you must delete all custom route entries destined for the router interface.
  * @param request  the request parameters of DeleteRouterInterface  DeleteRouterInterfaceRequest
  * @return DeleteRouterInterfaceResponse
 */
async function deleteRouterInterface(request: DeleteRouterInterfaceRequest): DeleteRouterInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRouterInterface', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSnatEntryRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, the system automatically uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the NAT gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  snatEntryId: string(name='SnatEntryId', description='The ID of the SNAT entry that you want to delete.

This parameter is required.', example='snat-bp1vcgcf8tm0plqcg****', position='Query'),
  snatTableId: string(name='SnatTableId', description='The ID of the SNAT table to which the SNAT entry belongs.

This parameter is required.', example='stb-bp190wu8io1vgev80****', position='Query'),
}

model DeleteSnatEntryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteSnatEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSnatEntryResponseBody(name='body'),
}

/**
  * @description DeleteSnatEntry is an asynchronous operation. After you make a request, the ID of the request is returned but the specified SNAT entry is not deleted. The system deletes the SNAT entry in the background. You can call the [DescribeSnatTableEntries](https://help.aliyun.com/document_detail/42677.html) operation to query the status of SNAT entries.
  * *   If the SNAT entries are in the **Deleting** state, the system is deleting the SNAT entries. In this case, you can only query the status of the SNAT entries, and cannot perform other operations.
  * *   If no SNAT entry is returned in the response, the SNAT entry is deleted.
  * If some SNAT entries are in the **Pending** state, you cannot delete these SNAT entries.
  * @param request  the request parameters of DeleteSnatEntry  DeleteSnatEntryRequest
  * @return DeleteSnatEntryResponse
 */
async function deleteSnatEntry(request: DeleteSnatEntryRequest): DeleteSnatEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSnatEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSslVpnClientCertRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the SSL client certificate is created.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sslVpnClientCertId: string(name='SslVpnClientCertId', description='The ID of the SSL client certificate.

This parameter is required.', example='vsc-bp1n8wcf134yl0osr****', position='Query'),
}

model DeleteSslVpnClientCertResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='606998F0-B94D-48FE-8316-ACA81BB230DA'),
}

model DeleteSslVpnClientCertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSslVpnClientCertResponseBody(name='body'),
}

/**
  * @description *   **DeleteSslVpnClientCert** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [DescribeVpnGateway](https://help.aliyun.com/document_detail/73720.html) to query the status of the task.
  *     *   If the VPN gateway is in the **updating** state, the SSL client certificate is being deleted.
  *     *   If the VPN gateway is in the **active** state, the SSL client certificate is deleted.
  * *   You cannot repeatedly call **DeleteSslVpnClientCert** to delete an SSL client certificate from the same VPN gateway within the specified period of time.
  * @param request  the request parameters of DeleteSslVpnClientCert  DeleteSslVpnClientCertRequest
  * @return DeleteSslVpnClientCertResponse
 */
async function deleteSslVpnClientCert(request: DeleteSslVpnClientCertRequest): DeleteSslVpnClientCertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSslVpnClientCert', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSslVpnServerRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the SSL server.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sslVpnServerId: string(name='SslVpnServerId', description='The ID of the SSL server.

This parameter is required.', example='vss-bp18q7hzj6largv4v****', position='Query'),
}

model DeleteSslVpnServerResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='606998F0-B94D-48FE-8316-ACA81BB230DA'),
}

model DeleteSslVpnServerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSslVpnServerResponseBody(name='body'),
}

/**
  * @description *   **DeleteSslVpnServer** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeVpnGateway](https://help.aliyun.com/document_detail/2794055.html) operation to query the status of the task.
  *     *   If the VPN gateway is in the **updating** state, the SSL server is being deleted.
  *     *   If the VPN gateway is in the **active** state, the SSL server is deleted.
  * *   You cannot repeatedly call the **DeleteSslVpnServer** operation to delete an SSL server from the same VPN gateway within the specified period of time.
  * @param request  the request parameters of DeleteSslVpnServer  DeleteSslVpnServerRequest
  * @return DeleteSslVpnServerResponse
 */
async function deleteSslVpnServer(request: DeleteSslVpnServerRequest): DeleteSslVpnServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSslVpnServer', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTrafficMirrorFilterRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, the system uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Valid values:

*   **true**: checks the request without performing the operation. The system checks the required parameters, request format, and limits. If the request fails the check, an error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. After the request passes the check, the operation is performed.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the mirrored traffic belongs. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list. For more information about regions that support traffic mirroring, see [Overview of traffic mirroring](https://help.aliyun.com/document_detail/207513.html).

This parameter is required.', example='cn-hongkong', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMirrorFilterId: string(name='TrafficMirrorFilterId', description='The ID of the filter.

This parameter is required.', example='tmf-j6cmls82xnc86vtpe****', position='Query'),
}

model DeleteTrafficMirrorFilterResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='07F272E2-6AD5-433A-8207-A607C76F1676'),
}

model DeleteTrafficMirrorFilterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTrafficMirrorFilterResponseBody(name='body'),
}

/**
  * @description *   The **DeleteTrafficMirrorFilter** operation is asynchronous. After you send the request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [ListTrafficMirrorFilters](https://help.aliyun.com/document_detail/261353.html) operation to query the status of a filter:
  *     *   If the filter is in the **Deleting** state, the filter is being deleted.
  *     *   If you cannot query the filter, the filter is deleted.
  * *   You cannot repeatedly call the **DeleteTrafficMirrorFilter** operation to delete a filter within the specified period of time.
  * @param request  the request parameters of DeleteTrafficMirrorFilter  DeleteTrafficMirrorFilterRequest
  * @return DeleteTrafficMirrorFilterResponse
 */
async function deleteTrafficMirrorFilter(request: DeleteTrafficMirrorFilterRequest): DeleteTrafficMirrorFilterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTrafficMirrorFilter', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTrafficMirrorFilterRulesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, the system uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Valid values:

*   **true**: checks the API request without performing the operation. The system checks the required parameters, request format, and limits. If the request fails the check, an error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. After the request passes the check, the operation is performed.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the mirrored traffic belongs. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list. For more information about regions that support traffic mirroring, see [Overview of traffic mirroring](https://help.aliyun.com/document_detail/207513.html).

This parameter is required.', example='cn-hongkong', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMirrorFilterId: string(name='TrafficMirrorFilterId', description='The ID of the filter.

This parameter is required.', example='tmf-j6cmls82xnc86vtpe****', position='Query'),
  trafficMirrorFilterRuleIds: [ string ](name='TrafficMirrorFilterRuleIds', description='The ID of the inbound or outbound rule.

This parameter is required.', example='tmr-j6cbmubn323k7jlq3****', maxLength=128, position='Query'),
}

model DeleteTrafficMirrorFilterRulesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='BD8A3F71-00C5-4655-8F55-11F3976C3274'),
}

model DeleteTrafficMirrorFilterRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTrafficMirrorFilterRulesResponseBody(name='body'),
}

/**
  * @description *   **DeleteTrafficMirrorFilterRules** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [ListTrafficMirrorFilters](https://help.aliyun.com/document_detail/261353.html) to query the status of the task.
  *     *   If the inbound or outbound rule is in the **Deleting** state, the rule is being deleted.
  *     *   If you cannot query the rule, the rule is deleted.
  * *   You cannot repeatedly call **DeleteTrafficMirrorFilterRules** within the specified period of time.
  * @param request  the request parameters of DeleteTrafficMirrorFilterRules  DeleteTrafficMirrorFilterRulesRequest
  * @return DeleteTrafficMirrorFilterRulesResponse
 */
async function deleteTrafficMirrorFilterRules(request: DeleteTrafficMirrorFilterRulesRequest): DeleteTrafficMirrorFilterRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTrafficMirrorFilterRules', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTrafficMirrorSessionRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. ClientToken can contain only ASCII characters.

>  If you do not specify this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to to perform a dry run. Valid values:

*   **true**: performs a dry run. The system checks the required parameters, request format, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the request. If the request passes the dry run, the operation is performed.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the traffic mirror session belongs. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list. For more information about regions that support traffic mirroring, see [Overview of traffic mirroring](https://help.aliyun.com/document_detail/207513.html).

This parameter is required.', example='cn-hongkong', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMirrorSessionId: string(name='TrafficMirrorSessionId', description='The ID of the traffic mirror session.

This parameter is required.', example='tms-j6cla50buc44ap8tu****', position='Query'),
}

model DeleteTrafficMirrorSessionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteTrafficMirrorSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTrafficMirrorSessionResponseBody(name='body'),
}

/**
  * @description *   **DeleteTrafficMirrorSession** is an asynchronous operation. After you send the request, the system returns a request ID and runs the task in the background. You can call the [ListTrafficMirrorSessions](https://help.aliyun.com/document_detail/261367.html) operation to query the status of a traffic mirror session.
  *     *   If the traffic mirror session is in the **Deleting** state, the traffic mirror session is being deleted.
  *     *   If you cannot query the traffic mirror session, the traffic mirror session is deleted.
  * *   You cannot repeatedly call the **DeleteTrafficMirrorSession** operation to delete a traffic mirror session within the specified period of time.
  * @param request  the request parameters of DeleteTrafficMirrorSession  DeleteTrafficMirrorSessionRequest
  * @return DeleteTrafficMirrorSessionResponse
 */
async function deleteTrafficMirrorSession(request: DeleteTrafficMirrorSessionRequest): DeleteTrafficMirrorSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTrafficMirrorSession', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVSwitchRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the vSwitch.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchId: string(name='VSwitchId', description='The ID of the vSwitch that you want to delete.

This parameter is required.', example='vsw-asdfjlna****', position='Query'),
}

model DeleteVSwitchResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteVSwitchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVSwitchResponseBody(name='body'),
}

/**
  * @description When you call this operation, take note of the following limits:
  * *   Before you delete a vSwitch, you must first release or remove all virtual private cloud (VPC) resources, including vSwitches, instances, router interfaces, and high-availability virtual IP addresses (HAVIPs).
  * *   You can delete only vSwitches that are in the **Available** state.
  * *   You cannot delete a vSwitch from a VPC where a vSwitch or a route is being created or deleted.
  * *   **DeleteVSwitch** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeVSwitchAttributes](https://help.aliyun.com/document_detail/94567.html) operation to query the status of the task:
  *     *   If the vSwitch is in the **Pending** state, the vSwitch is being deleted.
  *     *   If you cannot query the vSwitch, the vSwitch is deleted.
  * *   You cannot repeatedly call the **DeleteVSwitch** operation to delete a vSwitch within the specified period of time.
  * @param request  the request parameters of DeleteVSwitch  DeleteVSwitchRequest
  * @return DeleteVSwitchResponse
 */
async function deleteVSwitch(request: DeleteVSwitchRequest): DeleteVSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVSwitch', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVSwitchCidrReservationRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the vSwitch is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchCidrReservationId: string(name='VSwitchCidrReservationId', description='The ID of the reserved CIDR block.

This parameter is required.', example='vcr-bp1m12saqteraw3rp****', position='Query'),
}

model DeleteVSwitchCidrReservationResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DeleteVSwitchCidrReservationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVSwitchCidrReservationResponseBody(name='body'),
}

/**
  * @description ## [](#)Description
  * *   Before you call this operation, make sure that the IP address allocated to an elastic network interface (ENI) from the reserved CIDR block is deleted. If the IP address of the ENI is not deleted, call [UnassignPrivateIpAddresses](https://help.aliyun.com/document_detail/85919.html) or [UnassignIpv6Addresses](https://help.aliyun.com/document_detail/98611.html) to delete the IPv4 or IPv6 address.
  * *   **DeleteVSwitchCidrReservation** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [ListVSwitchCidrReservations](https://help.aliyun.com/document_detail/610155.html) to query the status of the task:
  *     *   If the reserved CIDR block is in the **Releasing** state, it is being released.
  *     *   If the reserved CIDR block is in the **Released** state, it is released.
  * @param request  the request parameters of DeleteVSwitchCidrReservation  DeleteVSwitchCidrReservationRequest
  * @return DeleteVSwitchCidrReservationResponse
 */
async function deleteVSwitchCidrReservation(request: DeleteVSwitchCidrReservationRequest): DeleteVSwitchCidrReservationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVSwitchCidrReservation', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVbrHaRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='CBCE910E-D396-4944-8****', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the VBR failover group.

This parameter is required.', example='vbrha-sa1******', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the VBR is deployed.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteVbrHaResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model DeleteVbrHaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVbrHaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteVbrHa  DeleteVbrHaRequest
  * @return DeleteVbrHaResponse
 */
async function deleteVbrHa(request: DeleteVbrHaRequest): DeleteVbrHaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVbrHa', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVcoRouteEntryRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  nextHop: string(name='NextHop', description='The next hop of the destination-based route that you want to delete.

This parameter is required.', example='vco-p0w5112fgnl2ihlmf****', position='Query'),
  overlayMode?: string(name='OverlayMode', description='The tunneling protocol. Set the value to **Ipsec**, which specifies the IPsec tunneling protocol.', example='Ipsec', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the IPsec-VPN connection is established.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeDest: string(name='RouteDest', description='The destination CIDR block of the destination-based route that you want to delete.

This parameter is required.', example='192.168.10.0/24', position='Query'),
  vpnConnectionId: string(name='VpnConnectionId', description='The ID of the IPsec-VPN attachment.

This parameter is required.', example='vco-p0w5112fgnl2ihlmf****', position='Query'),
  weight: int32(name='Weight', description='The weight of the destination-based route that you want to delete. Valid values:

*   **0**: a low priority
*   **100**: a high priority

This parameter is required.', example='100', position='Query'),
}

model DeleteVcoRouteEntryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='9208DDD8-0930-3CE6-AF7F-732B4E67B3DD'),
}

model DeleteVcoRouteEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVcoRouteEntryResponseBody(name='body'),
}

/**
  * @description *   **DeleteVcoRouteEntry** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeVpnConnection](https://help.aliyun.com/document_detail/53046.html) operation to query the status of the task.
  *     *   If the IPsec-VPN connection is in the **updating** state, the route is being deleted.
  *     *   If the IPsec-VPN connection is in the **attached** state, the route is deleted.
  * *   You cannot repeatedly call the **DeleteVcoRouteEntry** operation within a specific time period.
  * @param request  the request parameters of DeleteVcoRouteEntry  DeleteVcoRouteEntryRequest
  * @return DeleteVcoRouteEntryResponse
 */
async function deleteVcoRouteEntry(request: DeleteVcoRouteEntryRequest): DeleteVcoRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVcoRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVirtualBorderRouterRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VBR. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vbrId: string(name='VbrId', description='The ID of the VBR.

This parameter is required.', example='vbr-bp12mw1f8k3jgygk9****', position='Query'),
}

model DeleteVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteVirtualBorderRouterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVirtualBorderRouterResponseBody(name='body'),
}

/**
  * @description Before you call this operation, take note of the following limits:
  * *   Before you delete a VBR, you must delete all router interfaces of the VBR.
  * *   You can delete only a VBR in the **unconfirmed**, **active**, or **terminated** state.
  * *   The owner of an Express Connect circuit can delete a VBR that belongs to another account only if the VBR is in the **unconfirmed** state.
  * @param request  the request parameters of DeleteVirtualBorderRouter  DeleteVirtualBorderRouterRequest
  * @return DeleteVirtualBorderRouterResponse
 */
async function deleteVirtualBorderRouter(request: DeleteVirtualBorderRouterRequest): DeleteVirtualBorderRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVirtualBorderRouter', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVpcRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

- **true**: performs a dry run. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
- **false** (default): performs a dry run and sends the request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  forceDelete?: boolean(name='ForceDelete', description='Specifies whether to forcefully delete the VPC. Valid values:

- **true**: yes
- **false** (default): no

You can forcefully delete a VPC in the following scenarios:

- Only an IPv4 gateway and routes that point to the IPv4 gateway exist in the VPC.
- Only an IPv6 gateway and routes that point to the IPv6 gateway exist in the VPC.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the VPC is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the VPC that you want to delete.

This parameter is required.', example='vpc-bp1m7v25emi1h5mtc****', position='Query'),
}

model DeleteVpcResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteVpcResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVpcResponseBody(name='body'),
}

/**
  * @description When you call this operation, take note of the following limits:
  * *   Before you delete a VPC, make sure that all resources deployed in the VPC are released or removed, such as vSwitches, instances, and high-availability virtual IP addresses (HAVIPs).
  * *   You can delete only a VPC that is in the **Available** state.
  * *   The **DeleteVpc** operation is asynchronous. After you send the request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [DescribeVpcAttribute](https://help.aliyun.com/document_detail/94565.html) operation to query the status of a VPC:
  *     *   If the VPC is in the **Deleting** state, the VPC is being deleted.
  *     *   If you cannot query the VPC, the VPC is deleted.
  * *   You cannot repeatedly call the **DeleteVpc** operation to delete a VPC within the specified period of time.
  * @param request  the request parameters of DeleteVpc  DeleteVpcRequest
  * @return DeleteVpcResponse
 */
async function deleteVpc(request: DeleteVpcRequest): DeleteVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpc', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVpcGatewayEndpointRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token** can contain only ASCII characters and cannot exceed 64 characters in length.

> If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs a dry run. The system checks the request for potential issues, including the AccessKey pair, the permissions of the RAM user, and the required parameters. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  endpointId: string(name='EndpointId', description='The ID of the gateway endpoint.

This parameter is required.', example='vpce-bp1w1dmdqjpwul0v3****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the gateway endpoint.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteVpcGatewayEndpointResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A1122D0F-7B3B-5445-BB19-17F27F97FE1C'),
}

model DeleteVpcGatewayEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVpcGatewayEndpointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteVpcGatewayEndpoint  DeleteVpcGatewayEndpointRequest
  * @return DeleteVpcGatewayEndpointResponse
 */
async function deleteVpcGatewayEndpoint(request: DeleteVpcGatewayEndpointRequest): DeleteVpcGatewayEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpcGatewayEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVpcPrefixListRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, the system uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Valid values:

*   **true**: checks the request without performing the operation. The system checks the required parameters, request syntax, and limits. If the request fails to pass the check, an error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. If the request passes the check, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prefixListId: string(name='PrefixListId', description='The ID of the prefix list that you want to delete.

This parameter is required.', example='pl-0b78hw45f****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the prefix list.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteVpcPrefixListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='64B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DeleteVpcPrefixListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVpcPrefixListResponseBody(name='body'),
}

/**
  * @description You cannot repeatedly call the **DeleteDhcpOptionsSet** operation to delete a prefix list within the specified period of time.
  * @param request  the request parameters of DeleteVpcPrefixList  DeleteVpcPrefixListRequest
  * @return DeleteVpcPrefixListResponse
 */
async function deleteVpcPrefixList(request: DeleteVpcPrefixListRequest): DeleteVpcPrefixListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpcPrefixList', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVpnAttachmentRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the IPsec-VPN connection.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpnConnectionId: string(name='VpnConnectionId', description='The ID of the IPsec-VPN connection.

This parameter is required.', example='vco-p0w7gtr14m09r9lkr****', position='Query'),
}

model DeleteVpnAttachmentResponseBody = {
  code?: string(name='Code', description='The status code returned by the current operation. **200** indicates that the operation is successful.', example='200'),
  message?: string(name='Message', description='The information returned by the current operation.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='29440C49-398F-3D06-BA8B-E3CD13F3246D'),
  success?: boolean(name='Success', description='Indicates whether the current operation is successful.

*   **true**
*   **false**', example='true'),
}

model DeleteVpnAttachmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVpnAttachmentResponseBody(name='body'),
}

/**
  * @description *   If an IPsec-VPN connection is associated with a transit router, you must disassociate the transit router from the IPsec-VPN connection before you delete the IPsec-VPN connection. For more information, see [DeleteTransitRouterVpnAttachment](https://help.aliyun.com/document_detail/468251.html).
  * *   If an IPsec-VPN connection is not associated with a resource, you can call `DeleteVpnAttachment` to directly delete the IPsec-VPN connection.
  * @param request  the request parameters of DeleteVpnAttachment  DeleteVpnAttachmentRequest
  * @return DeleteVpnAttachmentResponse
 */
async function deleteVpnAttachment(request: DeleteVpnAttachmentRequest): DeleteVpnAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpnAttachment', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVpnConnectionRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the IPsec-VPN connection is created.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpnConnectionId: string(name='VpnConnectionId', description='The ID of the IPsec-VPN connection.

This parameter is required.', example='vco-bp1bbi27hojx80nck****', position='Query'),
}

model DeleteVpnConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='606998F0-B94D-48FE-8316-ACA81BB230DA'),
}

model DeleteVpnConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVpnConnectionResponseBody(name='body'),
}

/**
  * @description *   **DeleteVpnConnection** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeVpnGateway](https://help.aliyun.com/document_detail/73720.html) operation to query the status of a VPN gateway.
  *     *   If a VPN gateway is in the **updating** state, the IPsec-VPN connection is being deleted.
  *     *   If a VPN gateway is in the **active** state, the IPsec-VPN connection has been deleted.
  * *   You cannot call the **DeleteVpnConnection** operation to delete multiple IPsec-VPN connections for a VPN gateway at a time.
  * >  After an IPsec-VPN connection between a data center and Alibaba Cloud is deleted, the connection between the data center and Alibaba Cloud is closed.
  * @param request  the request parameters of DeleteVpnConnection  DeleteVpnConnectionRequest
  * @return DeleteVpnConnectionResponse
 */
async function deleteVpnConnection(request: DeleteVpnConnectionRequest): DeleteVpnConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpnConnection', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVpnGatewayRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VPN gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', description='The ID of the VPN gateway.

This parameter is required.', example='vpn-bp1q8bgx4xnkm2ogj****', position='Query'),
}

model DeleteVpnGatewayResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='>0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteVpnGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVpnGatewayResponseBody(name='body'),
}

/**
  * @description >  You cannot delete a VPN gateway associated with existing IPsec-VPN connections.
  * @param request  the request parameters of DeleteVpnGateway  DeleteVpnGatewayRequest
  * @return DeleteVpnGatewayResponse
 */
async function deleteVpnGateway(request: DeleteVpnGatewayRequest): DeleteVpnGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpnGateway', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVpnPbrRouteEntryRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  nextHop: string(name='NextHop', description='The next hop of the policy-based route.

This parameter is required.', example='vco-bp15oes1py4i66rmd****', position='Query'),
  overlayMode?: string(name='OverlayMode', description='The tunneling protocol. Set the value to **Ipsec**.', example='Ipsec', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  priority?: int32(name='Priority', description='The priority of the policy-based route.

*   If the route was not assigned a priority, this parameter is optional.

*   If the route was assigned a priority, this parameter is optional.

        If you specify this parameter, set the value to the priority configured for the policy-based route. Otherwise, the operation cannot be performed.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the VPN gateway is created. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeDest: string(name='RouteDest', description='The destination CIDR block of the policy-based route.

This parameter is required.', example='10.0.0.0/24', position='Query'),
  routeSource: string(name='RouteSource', description='The source CIDR block of the policy-based route.

This parameter is required.', example='192.168.1.0/24', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', description='The ID of the VPN gateway.

This parameter is required.', example='vpn-bp1a3kqjiiq9legfx****', position='Query'),
  weight: int32(name='Weight', description='The weight of the policy-based route. Valid values:

You can call [DescribeVpnPbrRouteEntries](https://help.aliyun.com/document_detail/2526959.html) to query weights of policy-based routes.

This parameter is required.', example='0', position='Query'),
}

model DeleteVpnPbrRouteEntryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
}

model DeleteVpnPbrRouteEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVpnPbrRouteEntryResponseBody(name='body'),
}

/**
  * @description *   **DeleteVpnPbrRouteEntry** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [DescribeVpnGateway](https://help.aliyun.com/document_detail/73720.html) to query the status of the task.
  *     *   If a VPN gateway is in the **updating** state, the policy-based route is being deleted.
  *     *   If a VPN gateway is in the **active** state, the policy-based route has been deleted.
  * *   You cannot repeatedly call **DeleteVpnPbrRouteEntry** to delete a policy-based route within the specified period of time.
  * @param request  the request parameters of DeleteVpnPbrRouteEntry  DeleteVpnPbrRouteEntryRequest
  * @return DeleteVpnPbrRouteEntryResponse
 */
async function deleteVpnPbrRouteEntry(request: DeleteVpnPbrRouteEntryRequest): DeleteVpnPbrRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpnPbrRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVpnRouteEntryRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='d7d24a21-f4ba-4454-9173-b3828dae492b', position='Query'),
  nextHop: string(name='NextHop', description='The next hop of the destination-based route.

This parameter is required.', example='vco-bp15oes1py4i66rmd****', position='Query'),
  overlayMode?: string(name='OverlayMode', description='The tunneling protocol. Set the value to **Ipsec**.', example='Ipsec', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the VPN gateway is created. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeDest: string(name='RouteDest', description='The destination CIDR block of the destination-based route.

This parameter is required.', example='10.0.0.0/24', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', description='The ID of the VPN gateway.

This parameter is required.', example='vpn-bp1a3kqjiiq9legfx****', position='Query'),
  weight: int32(name='Weight', description='The weight of the destination-based route. Valid values:

*   **0**: a low priority
*   **100**: a high priority

This parameter is required.', example='0', position='Query'),
}

model DeleteVpnRouteEntryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
}

model DeleteVpnRouteEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVpnRouteEntryResponseBody(name='body'),
}

/**
  * @description *   **DeleteVpnRouteEntry** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [DescribeVpnGateway](https://help.aliyun.com/document_detail/73720.html) to query the status of the task.
  *     *   If a VPN gateway is in the **updating** state, the destination-based route is being deleted.
  *     *   If the VPN gateway is in the **active** state, the destination-based route is deleted.
  * *   You cannot repeatedly call **DeleteVpnRouteEntry** to delete a destination-based route from a VPN gateway within the specified period of time.
  * @param request  the request parameters of DeleteVpnRouteEntry  DeleteVpnRouteEntryRequest
  * @return DeleteVpnRouteEntryResponse
 */
async function deleteVpnRouteEntry(request: DeleteVpnRouteEntryRequest): DeleteVpnRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpnRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeletionProtectionRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance for which you want to enable deletion protection.

This parameter is required.', example='eip-uf6id7gvguruxe41v****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  protectionEnable: boolean(name='ProtectionEnable', description='Specifies whether to enable deletion protection. Valid values:

*   **true**: yes
*   **false**: no

This parameter is required.', example='true', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the instance for which you want to enable deletion protection is deployed. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  type: string(name='Type', description='The type of instance. Valid values:

*   **EIP**: Elastic IP Address (EIP)
*   **CBWP**: EIP bandwidth plan
*   **NATGW**: NAT gateway

This parameter is required.', example='EIP', position='Query'),
}

model DeletionProtectionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='BAAEF103-96C4-4454-9210-066F2405F511'),
}

model DeletionProtectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletionProtectionResponseBody(name='body'),
}

/**
  * @description After you enable deletion protection for an instance, you cannot delete the instance. You must disable deletion protection before you can delete the instance.
  * @param request  the request parameters of DeletionProtection  DeletionProtectionRequest
  * @return DeletionProtectionResponse
 */
async function deletionProtection(request: DeletionProtectionRequest): DeletionProtectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletionProtection', 'POST', '/', 'json', false, 'json', request);
}

model Describe95TrafficRequest {
  day: string(name='Day', description='The date in UTC+8. Format: year-month-day.

This parameter is required.', example='2022-10-22', position='Query'),
  instanceId: string(name='InstanceId', description='The resource ID.

This parameter is required.', example='cbwp-wz9j19xrwf78fvz7*****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the resource.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The resource type. Set the value to cbwp, which specifies Internet Shared Bandwidth.

This parameter is required.', example='cbwp', position='Query'),
}

model Describe95TrafficResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  traffic95Summary?: {
    bandwidth?: long(name='Bandwidth', description='The peak bandwidth of the Internet Shared Bandwidth instance. Unit: Mbit/s.', example='20000.0'),
    fifthPeakBandwidth?: string(name='FifthPeakBandwidth', description='The daily peak bandwidth. Unit: Mbit/s.
<props="china"> For more information, see [Daily peak bandwidth](https://help.aliyun.com/document_detail/89729.html).', example='1064.244837773641'),
    instanceId?: string(name='InstanceId', description='The resource ID.', example='cbwp-wz9j19xrwf78fvz7*****'),
    internetChargeType?: string(name='InternetChargeType', description='The metering method of the Internet Shared Bandwidth instance. Valid values:

*   PayBy95: pay-by-enhanced-95th-percentile
*   PayByBandwidth: pay-by-bandwidth
*   PayByDominantTraffic: pay-by-dominant-traffic', example='PayBy95'),
    minimumConsumeBandwidth?: string(name='MinimumConsumeBandwidth', description='The guaranteed bandwidth of the Internet Shared Bandwidth instance. Unit: Mbit/s.', example='0.0'),
    traffic95DetailList?: {
      traffic95Detail?: [ 
      {
        billBandwidth?: string(name='BillBandwidth', description='The sampled bandwidth value, which is the larger bandwidth value in the inbound and outbound directions within a sampling interval. Unit: Mbit/s.', example='118.5090322113037'),
        inBandwidth?: string(name='InBandwidth', description='The inbound bandwidth. Unit: Mbit/s.', example='118.5090322113037'),
        outBandwidth?: string(name='OutBandwidth', description='The outbound bandwidth. Unit: Mbit/s.', example='96.41217480977376'),
        time?: string(name='Time', description='The statistical time. The value is a string.', example='2024-01-01T00:00:00Z'),
      }
    ](name='Traffic95Detail')
    }(name='Traffic95DetailList', description='The average bandwidth every 5 minutes in the inbound and outbound directions.'),
  }(name='Traffic95Summary', description='The information returned.'),
}

model Describe95TrafficResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Describe95TrafficResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Describe95Traffic  Describe95TrafficRequest
  * @return Describe95TrafficResponse
 */
async function describe95Traffic(request: Describe95TrafficRequest): Describe95TrafficResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Describe95Traffic', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccessPointsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   **zh-CN**: Chinese
*   **en-US** (default): English', example='zh-CN', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the access point.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeAccessPointsResponseBody = {
  accessPointSet?: {
    accessPointType?: [ 
    {
      accessPointFeatureModels?: {
        accessPointFeatureModel?: [ 
        {
          featureKey?: string(name='FeatureKey', description='The feature of the access point.', example='AP_Support_VbrBandwidthLimit'),
          featureValue?: string(name='FeatureValue', description='The feature value of the access point.', example='true'),
        }
      ](name='AccessPointFeatureModel')
      }(name='AccessPointFeatureModels', description='The feature model of the access point.'),
      accessPointId?: string(name='AccessPointId', description='The ID of the access point.', example='ap-cn-hangzhou-****'),
      attachedRegionNo?: string(name='AttachedRegionNo', description='The region ID of the access point.', example='cn-hangzhou'),
      description?: string(name='Description', description='The description of the access point.', example='The description of the access point.'),
      hostOperator?: string(name='HostOperator', description='The Internet service provider (ISP) of the access point. Valid values:', example='Telehouse'),
      location?: string(name='Location', description='The location of the access point.', example='Hangzhou'),
      name?: string(name='Name', description='The name of the access point.', example='Name'),
      status?: string(name='Status', description='The status of the access point. Valid values:

*   **recommended**: The access point is ready for use.
*   **hot**: A large number of Express Connect circuits are connected to the access point.
*   **full**: The number of Express Connect circuits connected to the access point has reached the upper limit.
*   **disabled**: The access point is unavailable.', example='recommended'),
      type?: string(name='Type', description='The network type of the Express Connect circuit. Default value: **VPC**.', example='VPC'),
    }
  ](name='AccessPointType')
  }(name='AccessPointSet', description='The information about the access point.'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Maximum value: **50**. Default value: **10**.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='3E85D803-C7CF-4BCD-9CFE-6DBA1DFFA027'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='5'),
}

model DescribeAccessPointsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAccessPointsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAccessPoints  DescribeAccessPointsRequest
  * @return DescribeAccessPointsResponse
 */
async function describeAccessPoints(request: DescribeAccessPointsRequest): DescribeAccessPointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccessPoints', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBgpGroupsRequest {
  bgpGroupId?: string(name='BgpGroupId', description='The ID of the BGP group.', example='bgpg-bp1k25cyp26cllath****', position='Query'),
  isDefault?: boolean(name='IsDefault', description='Specifies whether the BGP group is the default one. Valid values:

*   **false**
*   **true**', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. The maximum value is **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the VBR is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to obtain the region ID.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerId?: string(name='RouterId', description='The ID of the virtual border router (VBR) that is associated with the BGP group.', example='vbr-bp1ctxy813985gkuk****', position='Query'),
}

model DescribeBgpGroupsResponseBody = {
  bgpGroups?: {
    bgpGroup?: [ 
    {
      authKey?: string(name='AuthKey', description='The key used by the BGP group.', example='!PWZ****'),
      bgpGroupId?: string(name='BgpGroupId', description='The ID of the BGP group.', example='bgpg-bp1k25cyp26cllath****'),
      description?: string(name='Description', description='The description of the BGP group.', example='The description of the BGP group.'),
      hold?: string(name='Hold', description='The hold time to receive BGP messages. Unit: seconds.

>  If no message is received within the hold time, the BGP peer is considered disconnected.', example='30'),
      ipVersion?: string(name='IpVersion', description='The IP version of the BGP group. Valid values:

*   **ipv4**: IPv4
*   **ipv6**: IPv6. IPv6 is supported only if the VBR of the BGP group has IPv6 enabled.', example='IPv4'),
      isFake?: string(name='IsFake', description='Indicates whether the ASN is fake. Valid values:

*   **false**
*   **true**', example='true'),
      keepalive?: string(name='Keepalive', description='The keepalive time. Unit: seconds.', example='10'),
      localAsn?: string(name='LocalAsn', description='The ASN of the device on the Alibaba Cloud side.', example='45104'),
      name?: string(name='Name', description='The name of the BGP group.', example='name'),
      peerAsn?: string(name='PeerAsn', description='The autonomous system number (ASN) of the on-premises device in the data center.', example='1****'),
      regionId?: string(name='RegionId', description='The ID of the region to which the BGP group belongs.', example='cn-shanghai'),
      routeLimit?: string(name='RouteLimit', description='The maximum number of route entries for BGP dynamic route learning.', example='99'),
      routerId?: string(name='RouterId', description='The ID of the VBR.', example='vbr-bp1ctxy813985gkuk****'),
      status?: string(name='Status', description='The status of the BGP group.', example='Available'),
    }
  ](name='BgpGroup')
  }(name='BgpGroups', description='The detailed information about the BGP group.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='1D0971B2-A35A-42C1-A44C-E91360C36C0B'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
}

model DescribeBgpGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBgpGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeBgpGroups  DescribeBgpGroupsRequest
  * @return DescribeBgpGroupsResponse
 */
async function describeBgpGroups(request: DescribeBgpGroupsRequest): DescribeBgpGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBgpGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBgpNetworksRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the BGP group.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerId?: string(name='RouterId', description='The ID of the VBR.', example='vrt-bp1lhl0taikrteen8****', position='Query'),
}

model DescribeBgpNetworksResponseBody = {
  bgpNetworks?: {
    bgpNetwork?: [ 
    {
      dstCidrBlock?: string(name='DstCidrBlock', description='The CIDR block of the advertised BGP network.', example='10.1.XX.XX/24'),
      routerId?: string(name='RouterId', description='The ID of the VBR.', example='vrt-bp1lhl0taikrteen8****'),
      status?: string(name='Status', description='The status of the advertised BGP network.', example='Enabled'),
      vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) in which the master instance resides.', example='vpc-bp1qpo0kug3a2*****'),
    }
  ](name='BgpNetwork')
  }(name='BgpNetworks', description='The BGP network.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='6F513A15-669F-419D-B511-08A85292059B'),
  totalCount?: int32(name='TotalCount', description='The total number of advertised BGP networks.', example='2'),
}

model DescribeBgpNetworksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBgpNetworksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeBgpNetworks  DescribeBgpNetworksRequest
  * @return DescribeBgpNetworksResponse
 */
async function describeBgpNetworks(request: DescribeBgpNetworksRequest): DescribeBgpNetworksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBgpNetworks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBgpPeersRequest {
  bgpGroupId?: string(name='BgpGroupId', description='The ID of the BGP group to which the BGP peer that you want to query belongs.', example='bgpg-2zev8h2wo414sfh****', position='Query'),
  bgpPeerId?: string(name='BgpPeerId', description='The ID of the BGP peer that you want to query.', example='bgp-2ze3un0ft1jd1xd****', position='Query'),
  isDefault?: boolean(name='IsDefault', description='Specifies whether the BGP group is the default group. Valid values:

*   **true**
*   **false**', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: **1 to 50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the BGP group to which the BGP peer that you want to query belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to obtain the region ID.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerId?: string(name='RouterId', description='The ID of the virtual border router (VBR) that is associated with the BGP peer that you want to query.', example='vbr-2zecmmvg5gvu8i4te****', position='Query'),
}

model DescribeBgpPeersResponseBody = {
  bgpPeers?: {
    bgpPeer?: [ 
    {
      advertisedRouteCount?: int32(name='AdvertisedRouteCount', description='The number of advertised routes.', example='0'),
      authKey?: string(name='AuthKey', description='The authentication key of the BGP group.', example='!PWZ****'),
      bfdMultiHop?: int32(name='BfdMultiHop', description='The Bidirectional Forwarding Detection (BFD) hop count.', example='3'),
      bgpGroupId?: string(name='BgpGroupId', description='The ID of the BGP group.', example='bgpg-2zev8h2wo414sfh****'),
      bgpPeerId?: string(name='BgpPeerId', description='The ID of the BGP peer.', example='bgp-2ze3un0ft1jd1xd****'),
      bgpStatus?: string(name='BgpStatus', description='The status of the BGP connection. Valid values:

*   **Idle**: The BGP connection is not used.
*   **Connect**: The BGP connection is used.
*   **Active**: The BGP connection is available.
*   **Established**: The BGP connection is established.
*   **Down**: The BGP connection is unavailable.', example='Connect'),
      description?: string(name='Description', description='The description of the BGP group.', example='test'),
      enableBfd?: boolean(name='EnableBfd', description='Indicates whether BFD is enabled. Valid values:

*   **true**
*   **false**', example='true'),
      gmtModified?: string(name='GmtModified', description='The time when the BGP peer is modified.

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-05-20T07:29:08Z'),
      hold?: string(name='Hold', description='The hold time.', example='30'),
      ipVersion?: string(name='IpVersion', description='The version of the IP address.', example='ipv4'),
      isFake?: boolean(name='IsFake', description='Indicates whether a fake autonomous system number (ASN) is used. Valid values:

*   **true**
*   **false**', example='true'),
      keepalive?: string(name='Keepalive', description='The Keepalive interval.', example='10'),
      localAsn?: string(name='LocalAsn', description='The ASN of the device on the Alibaba Cloud side.', example='45104'),
      name?: string(name='Name', description='The name of the BGP peer.', example='test'),
      peerAsn?: string(name='PeerAsn', description='The autonomous system number (ASN)of the BGP peer.', example='65515'),
      peerIpAddress?: string(name='PeerIpAddress', description='The IP address of the BGP peer.', example='116.62.XX.XX'),
      receivedRouteCount?: int32(name='ReceivedRouteCount', description='The number of received routes.', example='0'),
      regionId?: string(name='RegionId', description='The ID of the region to which the BGP group belongs.', example='cn-shanghai'),
      routeLimit?: string(name='RouteLimit', description='The maximum number of routes.', example='110'),
      routerId?: string(name='RouterId', description='The Router ID.', example='vbr-2zecmmvg5gvu8i4te****'),
      status?: string(name='Status', description='The status of the BGP peer. Valid values:

*   **Pending**
*   **Available**
*   **Modifying**
*   **Deleting**
*   **Deleted**', example='Available'),
    }
  ](name='BgpPeer')
  }(name='BgpPeers', description='The information about the BGP peer.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='DE77A7F3-3B74-41C0-A5BC-CAFD188C28B6'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='10'),
}

model DescribeBgpPeersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBgpPeersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeBgpPeers  DescribeBgpPeersRequest
  * @return DescribeBgpPeersResponse
 */
async function describeBgpPeers(request: DescribeBgpPeersRequest): DescribeBgpPeersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBgpPeers', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCommonBandwidthPackagesRequest {
  bandwidthPackageId?: string(name='BandwidthPackageId', description='The ID of the Internet Shared Bandwidth instance.', example='cbwp-2ze2ic1xd2qeqk145****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and instance status. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  includeReservationData?: boolean(name='IncludeReservationData', description='Specifies whether to return the information about pending orders. Valid values:

*   **false** (default)
*   **true**', example='false', position='Query'),
  name?: string(name='Name', description='The name of the Internet Shared Bandwidth instance.', example='test123', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: **1 to 50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Internet Shared Bandwidth instance resides.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxazb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityProtectionEnabled?: boolean(name='SecurityProtectionEnabled', description='Specifies whether to enable Anti-DDoS Pro/Premium. Valid values:

*   **false** (default)
*   **true**', example='false', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key to add to the Internet Shared Bandwidth instance. You can specify up to 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='KeyTest'),
      value?: string(name='Value', description='The tag value to add to the Internet Shared Bandwidth instance. You can specify up to 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='ValueTest'),
    }
  ](name='Tag', description='The tags to add to the Internet Shared Bandwidth instance.', position='Query'),
}

model DescribeCommonBandwidthPackagesResponseBody = {
  commonBandwidthPackages?: {
    commonBandwidthPackage?: [ 
    {
      bandwidth?: string(name='Bandwidth', description='The maximum bandwidth of the Internet Shared Bandwidth instance. Unit: Mbit/s.', example='20'),
      bandwidthPackageId?: string(name='BandwidthPackageId', description='The ID of the Internet Shared Bandwidth instance.', example='cbwp-bp1t3sm1ffzmshdki****'),
      bizType?: string(name='BizType', description='The service type of the Internet Shared Bandwidth instance. Valid values:

*   **CloudBox** The cloud box. Only cloud box users can select this type.
*   **Default** (default): The general service type.', example='CloudBox'),
      businessStatus?: string(name='BusinessStatus', description='The service status of the Internet Shared Bandwidth instance. Valid values:

*   **Normal**: The Internet Shared Bandwidth instance runs as expected.
*   **FinancialLocked**: An overdue payment occurs in the Internet Shared Bandwidth instance
*   **Unactivated**: The Internet Shared Bandwidth instance is not activated.', example='Normal'),
      creationTime?: string(name='CreationTime', description='The time when the Internet Shared Bandwidth instance was created. The time is displayed in the `YYYY-MM-DDThh:mm:ssZ` format.', example='2017-06-28T06:39:20Z'),
      deletionProtection?: boolean(name='DeletionProtection', description='Indicates whether deletion protection is enabled. Valid values:

*   **true**
*   **false**', example='true'),
      description?: string(name='Description', description='The description of the Internet Shared Bandwidth instance.', example='none'),
      expiredTime?: string(name='ExpiredTime', description='The time when the Internet Shared Bandwidth instance expired. The time is displayed in the `YYYY-MM-DDThh:mm:ssZ` format.', example='2019-01-15T03:08:37Z'),
      hasReservationData?: string(name='HasReservationData', description='Indicates whether the information about pending orders is returned. Valid values:

*   **false**
*   **true**', example='false'),
      ISP?: string(name='ISP', description='The line type. Valid values:

*   **BGP**: BGP (Multi-ISP) line The BGP (Multi-ISP) line is supported in all regions.
*   **BGP_PRO**: BGP (Multi-ISP) Pro line The BGP (Multi-ISP) Pro line is supported in the China (Hong Kong), Singapore (Singapore), Japan (Tokyo), Philippines (Manila), Malaysia (Kuala Lumpur), Indonesia (Jakarta), and Thailand (Bangkok) regions.

If you are allowed to use single-ISP bandwidth, one of the following values is returned:

*   **ChinaTelecom**
*   **ChinaUnicom**
*   **ChinaMobile**
*   **ChinaTelecom_L2**
*   **ChinaUnicom_L2**
*   **ChinaMobile_L2**

If your services are deployed in China East 1 Finance, **BGP_FinanceCloud** is returned.', example='BGP'),
      instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the Internet Shared Bandwidth instance. Valid value:

**PostPaid**: pay-as-you-go', example='PostPaid'),
      internetChargeType?: string(name='InternetChargeType', description='The metering method of the Internet Shared Bandwidth instance. Valid value:

**PayByTraffic**', example='PayByBandwidth'),
      name?: string(name='Name', description='The name of the Internet Shared Bandwidth instance.', example='abc'),
      publicIpAddresses?: {
        publicIpAddresse?: [ 
        {
          allocationId?: string(name='AllocationId', description='The ID of the EIP.', example='eip-bp13e9i2qst4g6jzi****'),
          bandwidthPackageIpRelationStatus?: string(name='BandwidthPackageIpRelationStatus', description='Indicates whether the EIP is associated with the Internet Shared Bandwidth instance. Valid values:

*   **BINDED**
*   **BINDING**', example='BINDED'),
          ipAddress?: string(name='IpAddress', description='The public IP address.', example='47.95.XX.XX'),
        }
      ](name='PublicIpAddresse')
      }(name='PublicIpAddresses', description='The elastic IP addresses (EIPs) that are associated with the Internet Shared Bandwidth instance.'),
      ratio?: int32(name='Ratio', description='The percentage of the minimum bandwidth commitment. Only **20** is returned.

>  This parameter is supported only on the Alibaba Cloud China site.', example='20'),
      regionId?: string(name='RegionId', description='The ID of the region where the Internet Shared Bandwidth instance resides.', example='cn-hangzhou'),
      reservationActiveTime?: string(name='ReservationActiveTime', description='The time when the renewal took effect. The time is displayed in the `YYYY-MM-DDThh:mm:ssZ` format.', example='2018-08-30T16:00:00Z'),
      reservationBandwidth?: string(name='ReservationBandwidth', description='The new maximum bandwidth after the configurations are changed. Unit: Mbit/s.', example='1000'),
      reservationInternetChargeType?: string(name='ReservationInternetChargeType', description='The metering method after the configurations are changed. Valid value:

**PayByTraffic**', example='PayByBandwidth'),
      reservationOrderType?: string(name='ReservationOrderType', description='The renewal method. Valid values:

*   **RENEWCHANGE**: renewal with a specification change
*   **TEMP_UPGRADE**: renewal with a temporary upgrade
*   **UPGRADE**: renewal with an upgrade', example='RENEWCHANGE'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxazb4ph****'),
      securityProtectionTypes?: {
        securityProtectionType?: [ string ](name='SecurityProtectionType')
      }(name='SecurityProtectionTypes', description='The editions of Anti-DDoS.

*   If this parameter is empty, Anti-DDoS Origin Basic is enabled.
*   If **AntiDDoS_Enhanced** is returned, Anti-DDoS Pro/Premium is enabled.'),
      serviceManaged?: int32(name='ServiceManaged', description='Indicates whether the resource is created by the service account. Valid values:

*   **0**: The resource is not created by the service account.
*   **1**: The resource is created by the service account.', example='1'),
      status?: string(name='Status', description='The status of the Internet Shared Bandwidth instance. Valid values:

*   **Available**: The Internet Shared Bandwidth instance is available.
*   **Modifying**: The Internet Shared Bandwidth instance is being modified.', example='Available'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The tag key that is added to the Internet Shared Bandwidth instance.', example='KeyTest'),
          value?: string(name='Value', description='The tag value that is added to the Internet Shared Bandwidth instance.', example='ValueTest'),
        }
      ](name='Tag')
      }(name='Tags', description='The tag that is added to the Internet Shared Bandwidth instance.'),
      zone?: string(name='Zone', description='The zone of the Internet Shared Bandwidth instance. This parameter is returned only when BizType is set to CloudBox. If BizType is set to Default, an empty value is returned.', example='ap-southeast-1-lzdvn-cb'),
    }
  ](name='CommonBandwidthPackage')
  }(name='CommonBandwidthPackages', description='The details of the Internet Shared Bandwidth instance.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='20E6FD1C-7321-4DAD-BDFD-EC8769E4AA33'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeCommonBandwidthPackagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCommonBandwidthPackagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCommonBandwidthPackages  DescribeCommonBandwidthPackagesRequest
  * @return DescribeCommonBandwidthPackagesResponse
 */
async function describeCommonBandwidthPackages(request: DescribeCommonBandwidthPackagesRequest): DescribeCommonBandwidthPackagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCommonBandwidthPackages', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustomerGatewayRequest {
  customerGatewayId: string(name='CustomerGatewayId', description='The ID of the customer gateway.

This parameter is required.', example='cgw-bp1pvpl9r9adju6l5****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the customer gateway is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeCustomerGatewayResponseBody = {
  asn?: long(name='Asn', description='The autonomous system number (ASN) of the gateway device in the data center.', example='65535'),
  authKey?: string(name='AuthKey', description='The authentication key of the Border Gateway Protocol (BGP) routing protocol for the gateway device in the data center.', example='AuthKey****'),
  createTime?: long(name='CreateTime', description='The timestamp generated when the customer gateway was created. Unit: milliseconds.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1492747187000'),
  customerGatewayId?: string(name='CustomerGatewayId', description='The ID of the customer gateway.', example='cgw-bp1pvpl9r9adju6l5****'),
  description?: string(name='Description', description='The description of the customer gateway.', example='desctest'),
  ipAddress?: string(name='IpAddress', description='The public IP address of the gateway device in the data center.', example='139.32.XX.XX'),
  name?: string(name='Name', description='The name of the customer gateway.', example='nametest'),
  requestId?: string(name='RequestId', description='The request ID.', example='A0457BC9-6C0F-4437-AB9D-FB2EABC1D6A2'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the customer gateway belongs.

You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/158855.html) operation to query resource groups.', example='rg-acfmzs372yg****'),
  tags?: {
    tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N.', example='TagKey'),
      value?: string(name='Value', description='The value of tag N.', example='TagValue'),
    }
  ](name='Tag')
  }(name='Tags', description='The list of tags added to the customer gateway.'),
}

model DescribeCustomerGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCustomerGatewayResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCustomerGateway  DescribeCustomerGatewayRequest
  * @return DescribeCustomerGatewayResponse
 */
async function describeCustomerGateway(request: DescribeCustomerGatewayRequest): DescribeCustomerGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomerGateway', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustomerGatewaysRequest {
  customerGatewayId?: string(name='CustomerGatewayId', description='The ID of the customer gateway.

> If you do not specify a customer gateway ID, the system queries all customer gateways in the current region by default.', example='cgw-bp1pvpl9r9adju6l5****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the customer gateway is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the customer gateway belongs.

You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/158855.html) operation to query the resource group list.', example='rg-acfmzs372yg****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. The tag key cannot be an empty string.

The tag key can be up to 64 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `aliyun` or `acs:`.

You can specify at most 20 tag keys at a time.', example='TagKey'),
      value?: string(name='Value', description='The value of the tag.

The tag value can be up to 128 characters in length. It can be an empty string. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.

Each tag key corresponds to one tag value. You can specify at most 20 tag values at a time.', example='TagValue'),
    }
  ](name='Tag', description='The tags to be added to the customer gateway.', position='Query'),
}

model DescribeCustomerGatewaysResponseBody = {
  customerGateways?: {
    customerGateway?: [ 
    {
      asn?: long(name='Asn', description='The autonomous system number (ASN) of the gateway device in the data center.', example='65530'),
      authKey?: string(name='AuthKey', description='The authentication key that is used to connect to the gateway device in the data center by using Border Gateway Protocol (BGP).', example='AuthKey****'),
      createTime?: long(name='CreateTime', description='The time when the customer gateway was created. Unit: millisecond.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1492747187000'),
      customerGatewayId?: string(name='CustomerGatewayId', description='The customer gateway ID.', example='cgw-bp1pvpl9r9adju6l5****'),
      description?: string(name='Description', description='The description of the customer gateway.', example='desctest'),
      ipAddress?: string(name='IpAddress', description='The IP address of the gateway device in the data center.', example='139.32.XX.XX'),
      name?: string(name='Name', description='The name of the customer gateway.', example='nametest'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the customer gateway belongs.

You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/158855.html) operation to query resource groups.', example='rg-acfmzs372yg****'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The key of the tag.', example='TagKey'),
          value?: string(name='Value', description='The value of the tag.', example='TagValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags that are added to the customer gateway.'),
    }
  ](name='CustomerGateway')
  }(name='CustomerGateways', description='The information about customer gateways.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='E82612A9-CB90-4D7E-B394-1DB7F6509B29'),
  totalCount?: int32(name='TotalCount', description='The number of returned entries.', example='1'),
}

model DescribeCustomerGatewaysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCustomerGatewaysResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeCustomerGateways  DescribeCustomerGatewaysRequest
  * @return DescribeCustomerGatewaysResponse
 */
async function describeCustomerGateways(request: DescribeCustomerGatewaysRequest): DescribeCustomerGatewaysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomerGateways', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEcGrantRelationRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance.

*   If you set **InstanceType** to **VBR**, specify a VBR ID.
*   If you set **InstanceType** to **VPC**, specify a VPC ID.

This parameter is required.', example='vbr-bp12mw1f8k3jgygk9****', position='Query'),
  instanceType: string(name='InstanceType', description='The type of instance. Valid values:

*   **VBR**: queries the permissions that are granted to a VBR.
*   **VPC**: queries the permissions that are granted from a VPC.

This parameter is required.', example='VBR', position='Query'),
  pageNumber?: long(name='PageNumber', description='The page number. Default value: **1**.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10', position='Query'),
  vbrRegionNo?: string(name='VbrRegionNo', description='The ID of the region where the instance is deployed.

*   If **InstanceType** is set to **VBR**, this parameter is required.
*   If **InstanceType** is set to **VPC**, you can ignore this parameter.', example='cn-hangzhou', position='Query'),
}

model DescribeEcGrantRelationResponseBody = {
  count?: int32(name='Count', description='The total number of entries returned.', example='1'),
  ecGrantRelations?: [ 
    {
      aliUid?: long(name='AliUid', description='The ID of the Alibaba Cloud account to which the VPC belongs.', example='1250123456123456'),
      gmtCreate?: string(name='GmtCreate', description='The time when permissions on the VPC were granted to the VBR.', example='2022-09-02T11:46Z'),
      grantType?: string(name='GrantType', description='The VBRs that have permissions on the VPC. Valid values:

*   **All**: VBRs that reside in the specified region and belong to the specified Alibaba Cloud account all have permissions on the VPC.
*   **Specify**: Only the specified VBR has permissions on the VPC.', example='All'),
      instanceId?: string(name='InstanceId', description='The ID of the VPC.', example='vpc-bp1brjuegjc88v3u9****'),
      instanceName?: string(name='InstanceName', description='The name of the VPC.', example='VPCname'),
      instanceRouterId?: string(name='InstanceRouterId', description='The ID of the vRouter.', example='vrt-bp1i0yzgjd8ra05ec****'),
      regionNo?: string(name='RegionNo', description='The ID of the region where the VPC is deployed.', example='cn-hangzhou'),
      status?: string(name='Status', description='The query result. Valid values:

*   **Created**: The VBR has permissions on the VPC.
*   **Deleted**: The VBR does not have permissions on the VPC.', example='Created'),
      vbrInstanceId?: string(name='VbrInstanceId', description='The ID of the VBR.', example='vbr-m5ex0xf63xk8s5bob****'),
      vbrOwnerUid?: long(name='VbrOwnerUid', description='The ID of the Alibaba Cloud account to which the VBR belongs.', example='1210123456123456'),
      vbrRegionNo?: string(name='VbrRegionNo', description='The ID of the region where the VBR is deployed.', example='cn-hangzhou'),
    }
  ](name='EcGrantRelations', description='The query results.'),
  page?: int32(name='Page', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='E6E90F6B-2B41-5AAF-ABEB-236ADBAAD91D'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='10'),
}

model DescribeEcGrantRelationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEcGrantRelationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeEcGrantRelation  DescribeEcGrantRelationRequest
  * @return DescribeEcGrantRelationResponse
 */
async function describeEcGrantRelation(request: DescribeEcGrantRelationRequest): DescribeEcGrantRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEcGrantRelation', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEipAddressesRequest {
  filter?: [
    {
      key?: string(name='Key', description='The filter key used to query resources. Set the value to **CreationStartTime**, which specifies the time when the system started to create the resource.', example='CreationStartTime'),
      value?: string(name='Value', description='The filter value used to query resources. Specify the time in the ISO 8601 standard in the `YYYY-MM-DDThh:mmZ` format. The time must be in Coordinated Universal Time (UTC).', example='2023-01-01T01:00Z'),
    }
  ](name='Filter', position='Query'),
  allocationId?: string(name='AllocationId', description='The ID of the EIP that you want to query.

You can specify up to 50 EIP IDs. Separate multiple IDs with commas (,).

>  If both **EipAddress** and **AllocationId** are specified, you can specify up to 50 EIP IDs for **AllocationId**, and specify up to 50 EIPs for **EipAddress**.', example='eip-2zeerraiwb7ujxscd****', position='Query'),
  associatedInstanceId?: string(name='AssociatedInstanceId', description='The ID of the instance associated with the EIP.', example='i-2zebb08phyccdvf****', position='Query'),
  associatedInstanceType?: string(name='AssociatedInstanceType', description='The type of the cloud resource with which you want to associate the EIP. Valid values:

*   **EcsInstance** (default): an Elastic Compute Service (ECS) instance in a virtual private cloud (VPC).
*   **SlbInstance**: a CLB instance in a VPC.
*   **Nat**: a NAT gateway.
*   **HaVip**: an HAVIP.
*   **NetworkInterface**: a secondary ENI.
*   **IpAddress**: an IP address.

>  Each ECS instance, CLB instance, HAVIP, and IP address can be associated with only one EIP. A NAT gateway can be associated with multiple EIPs. The number of EIPs that you can associate with a secondary ENI depends on the association mode. For more information, see [Associate EIPs with and disassociate EIPs from cloud resources](https://help.aliyun.com/document_detail/72125.html).', example='EcsInstance', position='Query'),
  chargeType?: string(name='ChargeType', description='The billing method of the EIP. Valid values:

*   **PostPaid**: pay-as-you-go.
*   **PrePaid**: subscription.', example='PostPaid', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  eipAddress?: string(name='EipAddress', description='The EIP that you want to query.

You can specify up to 50 EIPs. Separate multiple EIPs with commas (,).

>  If both **EipAddress** and **AllocationId** are specified, you can specify up to 50 EIPs for **EipAddress**, and specify up to 50 EIP IDs for **AllocationId**.', example='47.75.XX.XX', position='Query'),
  eipName?: string(name='EipName', description='The name of the EIP.

The name must be 1 to 128 characters in length, and can contain letters, digits, underscores (_), and hyphens (-). The name must start with a letter.', example='EIP-01', position='Query'),
  ISP?: string(name='ISP', description='The line type. Valid values:

*   **BGP** (default): Border Gateway Protocol (BGP) (Multi-ISP) lines. All regions support BGP (Multi-ISP) EIPs.
*   **BGP_PRO**: BGP (Multi-ISP) Pro lines. Only the following regions support BGP (Multi-ISP) Pro lines: China (Hong Kong), Singapore, Japan (Tokyo), Malaysia (Kuala Lumpur), Philippines (Manila), Indonesia (Jakarta), and Thailand (Bangkok).

For more information about BGP (Multi-ISP) and BGP (Multi-ISP) Pro, see the [Line types](https://help.aliyun.com/document_detail/32321.html) section of the "What is EIP?" topic.

If you are allowed to use single-ISP bandwidth, you can also use one of the following values:

*   **ChinaTelecom**
*   **ChinaUnicom**
*   **ChinaMobile**
*   **ChinaTelecom_L2**
*   **ChinaUnicom_L2**
*   **ChinaMobile_L2**

If your services are deployed in China East 1 Finance, this parameter is required and you must set the value to **BGP_FinanceCloud**.', example='BGP', position='Query'),
  includeReservationData?: boolean(name='IncludeReservationData', description='Specifies whether to return information about pending orders. Valid values:

*   **false** (default)
*   **true**', example='false', position='Query'),
  lockReason?: string(name='LockReason', description='The reason why the EIP is locked. Valid values:

*   **financial**: The EIP is locked due to overdue payments.
*   **security**: The EIP is locked for security reasons.', example='financial', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='10', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to **100**. Default value: **10**.', example='10', minimum=1, maximum=100, position='Query'),
  publicIpAddressPoolId?: string(name='PublicIpAddressPoolId', description='The IP address pool to which the EIP that you want to query belongs.', example='pippool-2vc0kxcedhquybdsz****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the EIP.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the EIP belongs.', example='rg-acfmxazb4pcdvf****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityProtectionEnabled?: boolean(name='SecurityProtectionEnabled', description='Specifies whether to activate Anti-DDoS Pro/Premium. Valid values:

*   **false**
*   **true**', example='false', position='Query'),
  segmentInstanceId?: string(name='SegmentInstanceId', description='The ID of the contiguous EIP group.', example='eipsg-t4nr90yik5oy38xdy****', position='Query'),
  serviceManaged?: boolean(name='ServiceManaged', position='Query'),
  status?: string(name='Status', description='The state of the EIP. Valid values:

*   **Associating**
*   **Unassociating**
*   **InUse**
*   **Available**
*   **Releasing**', example='Available', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. You can specify up to 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `acs:` or `aliyun`.', example='FinanceDept'),
      value?: string(name='Value', description='The value of the tag. You can specify up to 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `acs:` or `aliyun`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags used to filter EIPs.', position='Query'),
}

model DescribeEipAddressesResponseBody = {
  eipAddresses?: {
    eipAddress?: [ 
    {
      allocationId?: string(name='AllocationId', description='The ID of the EIP.', example='eip-2zeerraiwb7ujcdvf****'),
      allocationTime?: string(name='AllocationTime', description='The time when the EIP was created. The time follows the ISO 8601 standard in the `YYYY-MM-DDThh:mm:ssZ` format.', example='2021-04-23T01:37:38Z'),
      bandwidth?: string(name='Bandwidth', description='The maximum bandwidth of the EIP. Unit: Mbit/s.', example='5'),
      bandwidthPackageBandwidth?: string(name='BandwidthPackageBandwidth', description='The maximum bandwidth of the Internet Shared Bandwidth instance with which the EIP is associated. Unit: Mbit/s.', example='50'),
      bandwidthPackageId?: string(name='BandwidthPackageId', description='The ID of the Internet Shared Bandwidth instance.', example='cbwp-bp1ego3i4j07ccdvf****'),
      bandwidthPackageType?: string(name='BandwidthPackageType', description='The type of the bandwidth. Only **CommonBandwidthPackage** may be returned, which indicates Internet Shared Bandwidth.', example='CommonBandwidthPackage'),
      bizType?: string(name='BizType', description='The service type. Valid values:

*   **CloudBox** Only cloud box users can select this type.
*   **Default** (default)', example='CloudBox'),
      businessStatus?: string(name='BusinessStatus', description='The service state of the EIP. Valid values:

*   **Normal**
*   **FinancialLocked**', example='Normal'),
      chargeType?: string(name='ChargeType', description='The billing method of the EIP. Valid values:

*   **PostPaid**: pay-as-you-go.
*   **PrePaid**: subscription.', example='PostPaid'),
      deletionProtection?: boolean(name='DeletionProtection', description='Indicates whether deletion protection is enabled. Valid values:

*   **true**
*   **false**', example='true'),
      description?: string(name='Description', description='The description of the EIP.', example='abc'),
      eipBandwidth?: string(name='EipBandwidth', description='The maximum bandwidth of the EIP when it is not associated with an Internet Shared Bandwidth instance. Unit: Mbit/s.', example='101'),
      expiredTime?: string(name='ExpiredTime', description='The time when the EIP expires. The time follows the ISO 8601 standard in the `YYYY-MM-DDThh:mm:ssZ` format.', example='2021-05-23T02:00:00Z'),
      HDMonitorStatus?: string(name='HDMonitorStatus', description='Indicates whether fine-grained monitoring is enabled for the EIP. Valid values:

*   **false**
*   **true**', example='false'),
      hasReservationData?: string(name='HasReservationData', description='Indicates whether renewal data is included. Valid values:

*   **false**
*   **true** A value of **true** is returned only when **IncludeReservationData** is set to **true** and some orders have not taken effect.', example='false'),
      ISP?: string(name='ISP', description='The line type. Valid values:

*   **BGP**: BGP (Multi-ISP). The BGP (Multi-ISP) line is supported in all regions.
*   **BGP_PRO**: BGP (Multi-ISP) Pro lines. BGP (Multi-ISP) Pro line is supported only in the China (Hong Kong), Singapore, Japan (Tokyo), Malaysia (Kuala Lumpur), Philippines (Manila), Indonesia (Jakarta), and Thailand (Bangkok) regions.

For more information about BGP (Multi-ISP) and BGP (Multi-ISP) Pro, see the [Line types](https://help.aliyun.com/document_detail/32321.html) section of the "What is EIP?" topic.

If you are allowed to use single-ISP bandwidth, one of the following values may be returned:

*   **ChinaTelecom**
*   **ChinaUnicom**
*   **ChinaMobile**
*   **ChinaTelecom_L2**
*   **ChinaUnicom_L2**
*   **ChinaMobile_L2**

If your services are deployed in China East 1 Finance, **BGP_FinanceCloud** is returned.', example='BGP'),
      instanceId?: string(name='InstanceId', description='The ID of the associated instance.', example='i-bp15zckdt37cdvf****'),
      instanceRegionId?: string(name='InstanceRegionId', description='The region ID of the associated instance.', example='cn-hangzhou'),
      instanceType?: string(name='InstanceType', description='The type of the associated instance. Valid values:

*   **EcsInstance**: an ECS instance in a VPC.
*   **SlbInstance**: a CLB instance in a VPC.
*   **Nat**: a NAT gateway.
*   **HaVip**: an HAVIP.
*   **NetworkInterface**: a secondary ENI.
*   **IpAddress**: an IP address.', example='EcsInstance'),
      internetChargeType?: string(name='InternetChargeType', description='The metering method of the EIP. Valid values:

*   **PayByBandwidth**
*   **PayByTraffic**', example='PayByBandwidth'),
      ipAddress?: string(name='IpAddress', description='The EIP.', example='47.75.XX.XX'),
      mode?: string(name='Mode', description='The association mode. Valid values:
- **NAT**: NAT mode
- **MULTI_BINDED**: multi-EIP-to-ENI mode
- **BINDED**: cut-through mode', example='NAT'),
      name?: string(name='Name', description='The name of the EIP.', example='EIP-01'),
      netmode?: string(name='Netmode', description='The network type. Only **public** may be returned.', example='public'),
      operationLocks?: {
        lockReason?: [ 
        {
          lockReason?: string(name='LockReason', description='The reason why the EIP is locked. Valid values:

*   **financial**: The EIP is locked due to overdue payments.
*   **security**: The EIP is locked for security reasons.', example='financial'),
        }
      ](name='LockReason')
      }(name='OperationLocks', description='The details about the locked EIP.'),
      privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address of the secondary ENI with which the EIP is associated.', example='192.168.XX.XX'),
      publicIpAddressPoolId?: string(name='PublicIpAddressPoolId', description='The ID of the IP address pool to which the EIP belongs.', example='pippool-2vc0kxcedhquybdsz****'),
      regionId?: string(name='RegionId', description='The region ID of the EIP.', example='cn-hangzhou'),
      reservationActiveTime?: string(name='ReservationActiveTime', description='The time when the renewal took effect. The time follows the ISO 8601 standard in the `YYYY-MM-DDThh:mm:ssZ` format.', example='2021-05-23T16:00:00Z'),
      reservationBandwidth?: string(name='ReservationBandwidth', description='The maximum bandwidth after the renewal takes effect. Unit: Mbit/s.', example='12'),
      reservationInternetChargeType?: string(name='ReservationInternetChargeType', description='The metering method that is used after the renewal takes effect. Valid values:

*   **PayByBandwidth**
*   **PayByTraffic**', example='PayByBandwidth'),
      reservationOrderType?: string(name='ReservationOrderType', description='The type of the renewal order. Valid values:

*   **RENEWCHANGE**: renewal with an upgrade or a downgrade.
*   **TEMP_UPGRADE**: temporary upgrade.
*   **UPGRADE**: upgrade.', example='RENEWCHANGE'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxazcdxs****'),
      secondLimited?: boolean(name='SecondLimited', description='Indicates whether level-2 throttling is configured. Valid values:

*   **true**
*   **false**', example='false'),
      securityProtectionTypes?: {
        securityProtectionType?: [ string ](name='SecurityProtectionType')
      }(name='SecurityProtectionTypes', description='The edition of Anti-DDoS.

*   If an empty value is returned, it indicates that Anti-DDoS Origin Basic is used.
*   If **AntiDDoS_Enhanced** is returned, it indicates that Anti-DDoS Pro/Premium is used.'),
      segmentInstanceId?: string(name='SegmentInstanceId', description='The ID of the contiguous EIP group.

This value is returned only when you query contiguous EIPs.', example='eipsg-t4nr90yik5oy38xd****'),
      serviceManaged?: int32(name='ServiceManaged', description='Indicates whether the resource is created by the service account. Valid values:

*   **0**
*   **1**', example='0'),
      status?: string(name='Status', description='The status of the EIP. Valid values:

*   **Associating**
*   **Unassociating**
*   **InUse**
*   **Available**
*   **Releasing**', example='Available'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The tag key of the EIP.', example='KeyTest'),
          value?: string(name='Value', description='The tag value of the EIP.', example='ValueTest'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the EIP.'),
      vpcId?: string(name='VpcId', description='The ID of the VPC in which an IPv4 gateway is created and that is deployed in the same region as the EIP.

When you associate an EIP with an IP address, the system can enable the IP address to access the Internet based on VPC route configurations.

>  This parameter is returned if the value of **InstanceType** is **IpAddress**. In this case, the EIP is associated with an IP address.', example='vpc-bp15zckdt37pq72zv****'),
      zone?: string(name='Zone', description='The zone of the EIP.

This parameter is returned only when the service type is CloudBox.', example='cn-hangzhou-a'),
    }
  ](name='EipAddress')
  }(name='EipAddresses', description='The details about the EIPs.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='10'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeEipAddressesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEipAddressesResponseBody(name='body'),
}

/**
  * @description You can call this operation to query information about EIPs in a region, including maximum bandwidth, billing methods, and associated instances.
  * @param request  the request parameters of DescribeEipAddresses  DescribeEipAddressesRequest
  * @return DescribeEipAddressesResponse
 */
async function describeEipAddresses(request: DescribeEipAddressesRequest): DescribeEipAddressesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEipAddresses', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEipGatewayInfoRequest {
  instanceId: string(name='InstanceId', description='The ID of the secondary ENI that is associated with the EIP.

This parameter is required.', example='eni-bp1d66qjxb3qoin3****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region to which the EIP that you want to query belongs. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-zhangjiakou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeEipGatewayInfoResponseBody = {
  code?: string(name='Code', description='The status code of the operation.', example='200'),
  eipInfos?: {
    eipInfo?: [ 
    {
      ip?: string(name='Ip', description='The IP address of the EIP.', example='47.XX.XX.236'),
      ipGw?: string(name='IpGw', description='The IP address of the gateway that is associated with the EIP.', example='47.XX.XX.1'),
      ipMask?: string(name='IpMask', description='The subnet mask of the EIP.', example='255.255.255.0'),
    }
  ](name='EipInfo')
  }(name='EipInfos', description='The detailed information about the EIP.'),
  message?: string(name='Message', description='The result of the operation.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='C0FD0EED-F90D-4479-803D-DD62335357E5'),
}

model DescribeEipGatewayInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEipGatewayInfoResponseBody(name='body'),
}

/**
  * @description You can query only EIPs that are associated with secondary elastic network interfaces (ENIs) in multi-EIP-to-ENI mode.
  * @param request  the request parameters of DescribeEipGatewayInfo  DescribeEipGatewayInfoRequest
  * @return DescribeEipGatewayInfoResponse
 */
async function describeEipGatewayInfo(request: DescribeEipGatewayInfoRequest): DescribeEipGatewayInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEipGatewayInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEipMonitorDataRequest {
  allocationId: string(name='AllocationId', description='The ID of the EIP.

This parameter is required.', example='eip-2zeerraiwb7uj6idcfv****', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. The time must be in UTC. Specify the time in the ISO 8601 standard in the `YYYY-MM-DDThh:mm:ssZ` format. For example, `2013-01-10T12:00:00Z` specifies 20:00:00 (UTC+8) on January 10, 2013.

If the value of seconds (ss) is not 00, the end time is automatically rounded up to the next minute.

This parameter is required.', example='2020-01-05T03:05:10Z', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', description='The duration of each monitoring data entry. Unit: seconds. Valid values: **60** (default), **300**, **900**, and **3600**.

*   If the value of **(EndTime** - **StartTime**)/**Period** is greater than 200, a maximum of 200 monitoring data entries are returned at a time.
*   If the value of (**EndTime** - **StartTime**)/**Period** is less than or equal to 200, only the monitoring data collected between the start time and end time is returned.', example='60', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region to which the EIP belongs. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. The time must be in UTC. Specify the time in the ISO 8601 standard in `YYYY-MM-DDThh:mm:ssZ` format. For example, `2013-01-10T12:00:00Z` specifies 20:00:00 (UTC+8) on January 10, 2013.

If the value of seconds (ss) is not 00, the start time is automatically rounded up to the next minute.

This parameter is required.', example='2020-01-05T01:05:05Z', position='Query'),
}

model DescribeEipMonitorDataResponseBody = {
  eipMonitorDatas?: {
    eipMonitorData?: [ 
    {
      eipBandwidth?: int32(name='EipBandwidth', example='10'),
      eipFlow?: long(name='EipFlow', description='The sum of inbound and outbound traffic.', example='465'),
      eipPackets?: int32(name='EipPackets', description='The number of packets.', example='3434'),
      eipRX?: long(name='EipRX', description='The inbound traffic. Unit: bytes.', example='122'),
      eipTX?: long(name='EipTX', description='The outbound traffic. Unit: bytes.', example='343'),
      timeStamp?: string(name='TimeStamp', description='The timestamp of the monitoring data. Specify the time in the ISO8601 standard. Example: `2020-01-21T09:50:23Z`.', example='2020-01-21T09:50:23Z'),
    }
  ](name='EipMonitorData')
  }(name='EipMonitorDatas', description='The detailed information about the monitoring data of the EIP.'),
  requestId?: string(name='RequestId', description='The request ID.', example='C8B26B44-0189-443E-9816-D951F59623A9'),
}

model DescribeEipMonitorDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEipMonitorDataResponseBody(name='body'),
}

/**
  * @description To improve user experience in querying monitoring data, we recommend that you call the DescribeMetricList API operation provided by CloudMonitor to query EIP monitoring data. For more information, see [DescribeMetricList](https://help.aliyun.com/document_detail/51936.html) and [EIP monitoring data](https://help.aliyun.com/document_detail/162874.html).
  * @param request  the request parameters of DescribeEipMonitorData  DescribeEipMonitorDataRequest
  * @return DescribeEipMonitorDataResponse
 */
async function describeEipMonitorData(request: DescribeEipMonitorDataRequest): DescribeEipMonitorDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEipMonitorData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEipSegmentRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44-001sdfg', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the contiguous EIP group belongs. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  segmentInstanceId?: string(name='SegmentInstanceId', description='The ID of the contiguous EIP group that you want to query.', example='eipsg-2zett8ba055tbsxme****', position='Query'),
}

model DescribeEipSegmentResponseBody = {
  eipSegments?: {
    eipSegment?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the contiguous EIP group was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2020-03-06T12:30:07Z'),
      descritpion?: string(name='Descritpion', description='The description of the contiguous EIP group.', example='MyEipSegment'),
      instanceId?: string(name='InstanceId', description='The ID of the contiguous EIP group.', example='eipsg-2zett8ba055tbsxme****'),
      ipCount?: string(name='IpCount', description='The number of EIPs in the contiguous EIP group.', example='16'),
      name?: string(name='Name', description='The name of the contiguous EIP group.', example='MyEipSegment'),
      regionId?: string(name='RegionId', description='The ID of the region to which the contiguous EIP group belongs.', example='cn-hangzhou'),
      segment?: string(name='Segment', description='The CIDR block and mask of the contiguous EIP group.', example='161.xx.xx.32/28'),
      status?: string(name='Status', description='The status of the contiguous EIP group. Valid values:

*   **Allocating**
*   **Allocated**
*   **Releasing**', example='Allocated'),
      zone?: string(name='Zone', description='The zone of the contiguous EIP group.', example='cn-hangzhou-a'),
    }
  ](name='EipSegment')
  }(name='EipSegments', description='The details of the contiguous EIP group.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='F7A6301A-64BA-41EC-8284-8F4838C15D1F'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='10'),
}

model DescribeEipSegmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEipSegmentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeEipSegment  DescribeEipSegmentRequest
  * @return DescribeEipSegmentResponse
 */
async function describeEipSegment(request: DescribeEipSegmentRequest): DescribeEipSegmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEipSegment', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExpressConnectTrafficQosRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  qosIdList?: [ string ](name='QosIdList', position='Query'),
  qosNameList?: [ string ](name='QosNameList', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model DescribeExpressConnectTrafficQosResponseBody = {
  count?: string(name='Count', example='1'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  qosList?: [ 
    {
      associatedInstanceList?: [ 
        {
          instanceId?: string(name='InstanceId', example='pc-bp159zj8zujwy3p07j83e'),
          instanceProgressing?: int32(name='InstanceProgressing', example='100'),
          instanceStatus?: string(name='InstanceStatus', example='Normal'),
          instanceType?: string(name='InstanceType', example='PHYSICALCONNECTION'),
        }
      ](name='AssociatedInstanceList'),
      progressing?: int32(name='Progressing', example='100'),
      qosDescription?: string(name='QosDescription', example='qos-test'),
      qosId?: string(name='QosId', example='qos-pksbqfmotl5hzqmhf8'),
      qosName?: string(name='QosName', example='qos-test'),
      queueList?: [ 
        {
          bandwidthPercent?: string(name='BandwidthPercent', example='100'),
          qosId?: string(name='QosId', example='qos-pksbqfmotl5hzqmhf8'),
          queueDescription?: string(name='QueueDescription', example='qos-queue-test'),
          queueId?: string(name='QueueId', example='qos-queue-9nyx2u7n71s2rcy4n5'),
          queueName?: string(name='QueueName', example='qos-queue-test'),
          queueType?: string(name='QueueType', example='High'),
          status?: string(name='Status'),
        }
      ](name='QueueList'),
      status?: string(name='Status', example='Normal'),
    }
  ](name='QosList'),
  requestId?: string(name='RequestId', example='4CF20CC7-D1FC-425B-A15B-DF7C8E2131A7'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model DescribeExpressConnectTrafficQosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExpressConnectTrafficQosResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeExpressConnectTrafficQos  DescribeExpressConnectTrafficQosRequest
  * @return DescribeExpressConnectTrafficQosResponse
 */
async function describeExpressConnectTrafficQos(request: DescribeExpressConnectTrafficQosRequest): DescribeExpressConnectTrafficQosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExpressConnectTrafficQos', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExpressConnectTrafficQosQueueRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  qosId?: string(name='QosId', example='qos-2giu0a6vd5x0mv4700', position='Query'),
  queueIdList?: [ string ](name='QueueIdList', position='Query'),
  queueNameList?: [ string ](name='QueueNameList', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model DescribeExpressConnectTrafficQosQueueResponseBody = {
  queueList?: [ 
    {
      bandwidthPercent?: string(name='BandwidthPercent', example='100'),
      qosId?: string(name='QosId', example='qos-ncfgzxg40zks5n0qze'),
      queueDescription?: string(name='QueueDescription', example='qos-queue-test'),
      queueId?: string(name='QueueId', example='qos-queue-9nyx2u7n71s2rcy4n5'),
      queueName?: string(name='QueueName', example='qos-queue-test'),
      queueType?: string(name='QueueType', example='High'),
      ruleList?: [ 
        {
          dstCidr?: string(name='DstCidr', example='1.1.1.0/24'),
          dstIPv6Cidr?: string(name='DstIPv6Cidr', example='2001:0db8:1234:5678::/64'),
          dstPortRange?: string(name='DstPortRange', example='-1/-1'),
          matchDscp?: int32(name='MatchDscp', example='1'),
          priority?: int32(name='Priority', example='1'),
          protocol?: string(name='Protocol', example='ALL'),
          qosId?: string(name='QosId', example='qos-91xz9f8zd7yj8xwknz'),
          queueId?: string(name='QueueId', example='qos-queue-iugg0l9x27f2nocouj'),
          remarkingDscp?: int32(name='RemarkingDscp', example='1'),
          ruleDescription?: string(name='RuleDescription', example='qos-rule-test'),
          ruleId?: string(name='RuleId', example='qos-rule-iugg0l9x27f2nocouj'),
          ruleName?: string(name='RuleName', example='qos-rule-test'),
          srcCidr?: string(name='SrcCidr', example='1.1.1.0/24'),
          srcIPv6Cidr?: string(name='SrcIPv6Cidr', example='2001:0db8:1234:5678::/64'),
          srcPortRange?: string(name='SrcPortRange', example='-1/-1'),
          status?: string(name='Status'),
        }
      ](name='RuleList'),
      status?: string(name='Status'),
    }
  ](name='QueueList'),
  requestId?: string(name='RequestId', example='606998F0-B94D-48FE-8316-ACA81BB230DA'),
}

model DescribeExpressConnectTrafficQosQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExpressConnectTrafficQosQueueResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeExpressConnectTrafficQosQueue  DescribeExpressConnectTrafficQosQueueRequest
  * @return DescribeExpressConnectTrafficQosQueueResponse
 */
async function describeExpressConnectTrafficQosQueue(request: DescribeExpressConnectTrafficQosQueueRequest): DescribeExpressConnectTrafficQosQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExpressConnectTrafficQosQueue', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExpressConnectTrafficQosRuleRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, the system uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  qosId?: string(name='QosId', description='The ID of the QoS policy.', example='qos-2giu0a6vd5x0mv4700', position='Query'),
  queueId?: string(name='QueueId', description='The ID of the QoS queue.', example='qos-queue-9nyx2u7n71s2rcy4n5', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the QoS policy.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  ruleIdList?: [ string ](name='RuleIdList', description='The list of QoS rule IDs.', position='Query'),
  ruleNameList?: [ string ](name='RuleNameList', description='The list of QoS rule names.', position='Query'),
}

model DescribeExpressConnectTrafficQosRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='9C7FA9D6-72E0-48A9-A9C3-2DA8569CD5EB'),
  ruleList?: [ 
    {
      dstCidr?: string(name='DstCidr', description='The destination IPv4 CIDR block that matches the QoS rule traffic.

> When this parameter is unavailable, specify **SrcIPv6Cidr** or **DstIPv6Cidr**.', example='1.1.1.0/24'),
      dstIPv6Cidr?: string(name='DstIPv6Cidr', description='The destination IPv6 CIDR block that matches the QoS rule traffic.

> When this parameter is unavailable, specify **SrcCidr** or **DstCidr**.', example='2001:0db8:1234:5678::/64'),
      dstPortRange?: string(name='DstPortRange', description='The range of destination ports that match the QoS rule traffic. Valid values: **0** to **65535**. If the traffic does not match, the value is -1. You can specify only one port. The start port number must be the same as the end port number. Different protocols correspond to different ports. Valid values:

*   **ALL** (uneditable): -1/-1.
*   **ICMP(IPv4)** (uneditable): -1/-1.
*   **ICMPv6(IPv6)** (uneditable): -1/-1.
*   **TCP** (editable): -1/-1.
*   **UDP** (editable): -1/-1.
*   **GRE** (uneditable): -1/-1.
*   **SSH** (uneditable): 22/22.
*   **Telnet** (uneditable): 23/23.
*   **HTTP** (uneditable): 80/80.
*   **HTTPS** (uneditable): 443/443.
*   **MS SQL** (uneditable): 1443/1443.
*   **Oracle** (uneditable): 1521/1521.
*   **MySql** (uneditable): 3306/3306.
*   **RDP** (uneditable): 3389/3389.
*   **PostgreSQL** (uneditable): 5432/5432.
*   **Redis** (uneditable): 6379/6379.', example='-1/-1'),
      matchDscp?: int32(name='MatchDscp', description='The DSCP value that matches the QoS rule traffic. Valid values: **0** to **63**. If no value is matched, the value is -1.', example='1'),
      priority?: int32(name='Priority', description='The priority of the QoS rule. Valid values: **1** to **9000**. A larger value indicates a higher priority. The priority of each QoS rule must be unique in the same QoS policy.', example='1'),
      protocol?: string(name='Protocol', description='The protocol of the QoS rule. Valid values:

*   **ALL**
*   **ICMP(IPv4)**
*   **ICMPv6(IPv6)**
*   **TCP**
*   **UDP**
*   **GRE**
*   **SSH**
*   **Telnet**
*   **HTTP**
*   **HTTPS**
*   **MS SQL**
*   **Oracle**
*   **MySql**
*   **RDP**
*   **PostgreSQL**
*   **Redis**', example='ALL'),
      qosId?: string(name='QosId', description='The ID of the QoS policy.', example='qos-pksbqfmotl5hzqmhf8'),
      queueId?: string(name='QueueId', description='The ID of the QoS queue.', example='qos-queue-9nyx2u7n71s2rcy4n5'),
      remarkingDscp?: int32(name='RemarkingDscp', description='The new DSCP value. Valid values: **0** to **63**. If you do not change the value, set the value to -1.', example='1'),
      ruleDescription?: string(name='RuleDescription', description='The description of the QoS rule.

The description must be 0 to 256 characters in length and cannot start with `http://` or `https://`.', example='qos-rule-test'),
      ruleId?: string(name='RuleId', description='The ID of the QoS rule.', example='qos-rule-iugg0l9x27f2nocouj'),
      ruleName?: string(name='RuleName', description='The name of the QoS rule.

The name must be 0 to 128 characters in length and cannot start with `http://` or `https://`.', example='qos-rule-test'),
      srcCidr?: string(name='SrcCidr', description='The source IPv4 CIDR block that matches the QoS rule traffic.

> When this parameter is unavailable, specify **SrcIPv6Cidr** or **DstIPv6Cidr**.', example='1.1.1.0/24'),
      srcIPv6Cidr?: string(name='SrcIPv6Cidr', description='The source IPv6 CIDR block that matches the QoS rule traffic.

> When this parameter is unavailable, specify **SrcCidr** or **DstCidr**.', example='2001:0db8:1234:5678::/64'),
      srcPortRange?: string(name='SrcPortRange', description='The range of source ports that match the QoS rule traffic. Valid values: **0** to **65535**. If the traffic does not match, the value is -1. You can specify only one port. The start port number must be the same as the end port number.', example='-1/-1'),
      status?: string(name='Status', description='The status of the QoS rule. Valid values:

*   **Normal**
*   **Configuring**
*   **Deleting**', example='Normal'),
    }
  ](name='RuleList', description='The list of QoS rules.'),
}

model DescribeExpressConnectTrafficQosRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExpressConnectTrafficQosRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeExpressConnectTrafficQosRule  DescribeExpressConnectTrafficQosRuleRequest
  * @return DescribeExpressConnectTrafficQosRuleResponse
 */
async function describeExpressConnectTrafficQosRule(request: DescribeExpressConnectTrafficQosRuleRequest): DescribeExpressConnectTrafficQosRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExpressConnectTrafficQosRule', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFailoverTestJobRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  jobId: string(name='JobId', description='The ID of the failover test.

This parameter is required.', example='ftj-xxxxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the failover test.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model DescribeFailoverTestJobResponseBody = {
  failoverTestJobModel?: {
    description?: string(name='Description', description='The description of the failover test.

The description must be 0 to 256 characters in length and cannot start with `http://` or `https://`.', example='test'),
    jobDuration?: string(name='JobDuration', description='The duration of the failover test. Unit: minutes. Valid values: **1 to 4320**.', example='60'),
    jobId?: string(name='JobId', description='The ID of the failover test.', example='ftj-xxxxxxxxx'),
    jobType?: string(name='JobType', description='Indicates whether the failover test is performed immediately. Valid values:

*   **StartNow**
*   **StartLater**', example='StartNow'),
    name?: string(name='Name', description='The name of the failover test.

The name must be 0 to 128 characters in length and cannot start with `http://` or `https://`.', example='test'),
    resourceId?: [ string ](name='ResourceId', description='The IDs of failover test resources.'),
    resourceType?: string(name='ResourceType', description='The type of failover test resource. Only **PHYSICALCONNECTION** is returned.', example='PHYSICALCONNECTION'),
    startTime?: string(name='StartTime', description='The start time of the failover test. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2023-11-21T14:00:00Z'),
    status?: string(name='Status', description='The status of the failover test. Valid values:

*   **Init**
*   **Starting**
*   **Testing**
*   **Stopping**
*   **Stopped**', example='Init'),
    stopTime?: string(name='StopTime', description='The end time of the failover test. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2023-11-21T15:00:00Z'),
  }(name='FailoverTestJobModel', description='The failover test.'),
  requestId?: string(name='RequestId', description='The request ID.', example='C44F62BE-9CE7-4277-B117-69243F3988BF'),
}

model DescribeFailoverTestJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFailoverTestJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeFailoverTestJob  DescribeFailoverTestJobRequest
  * @return DescribeFailoverTestJobResponse
 */
async function describeFailoverTestJob(request: DescribeFailoverTestJobRequest): DescribeFailoverTestJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFailoverTestJob', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFailoverTestJobsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  filter?: [ 
    {
      key?: string(name='Key', description='The filter key. Valid values:

*   **JobId**
*   **JobName**
*   **JobStatus**
*   **ResourceId**
*   **ResourceName**
*   **ResourceType**

> You can specify at most five different filter keys. If you specify ResourceId or ResourceName, you must also specify ResourceType. The logical operator among the filter keys is AND. Results that meet all specified filter keys are returned.', example='JobId'),
      value?: [ string ](name='Value', description='The value of the filter key.

> You can specify at most five filter values for each filter key. The logical operator among filter values is OR. If a filter value is matched, the filter key is considered matched.'),
    }
  ](name='Filter', description='The filter information.', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: **1 to 100**. Default value: 20.', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region where you want to perform the failover test.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model DescribeFailoverTestJobsResponseBody = {
  count?: int32(name='Count', example='10'),
  failoverTestJobList?: [ 
    {
      description?: string(name='Description', description='The description of the failover test.

The description must be 0 to 256 characters in length and cannot start with \\*\\*http:// **or** https://\\*\\*.', example='test'),
      jobDuration?: string(name='JobDuration', description='The duration of the failover test. Unit: minutes. Valid values: **1 to 4320**.', example='60'),
      jobId?: string(name='JobId', description='The ID of the failover test.', example='ftj-xxxxxxxxx'),
      jobType?: string(name='JobType', description='Indicates whether the failover test is performed immediately. Valid values:

*   **StartNow**
*   **StartLater**', example='StartNow'),
      name?: string(name='Name', description='The name of the failover test.

The name must be 0 to 128 characters in length and cannot start with `http://` or `https://`.', example='test'),
      resourceId?: [ string ](name='ResourceId', description='The IDs of the failover test resources.'),
      resourceType?: string(name='ResourceType', description='The type of the failover test resource. Only **PHYSICALCONNECTION** is returned.', example='PHYSICALCONNECTION'),
      startTime?: string(name='StartTime', example='2023-11-21T14:00:00Z'),
      status?: string(name='Status', description='The status of the failover test. Valid values:

*   **Init**
*   **Starting**
*   **Testing**
*   **Stopping**
*   **Stopped**', example='Init'),
      stopTime?: string(name='StopTime', example='2023-11-21T15:00:00Z'),
    }
  ](name='FailoverTestJobList', description='The list of failover tests.'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: **1 to 100**. Default value: 20.', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model DescribeFailoverTestJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFailoverTestJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeFailoverTestJobs  DescribeFailoverTestJobsRequest
  * @return DescribeFailoverTestJobsResponse
 */
async function describeFailoverTestJobs(request: DescribeFailoverTestJobsRequest): DescribeFailoverTestJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFailoverTestJobs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFlowLogsRequest {
  description?: string(name='Description', description='The description of the flow log.

The description must be 1 to 256 characters in length, and cannot start with `http://` or `https://`.', example='This is my Flowlog.', position='Query'),
  flowLogId?: string(name='FlowLogId', description='The ID of the flow log.', example='fl-bp1f6qqhsrc2c12ta****', position='Query'),
  flowLogName?: string(name='FlowLogName', description='The name of the flow log.

The name must be 1 to 128 characters in length, and cannot start with `http://` or `https://`.', example='myFlowlog', position='Query'),
  logStoreName?: string(name='LogStoreName', description='The Logstore that stores the captured traffic data.', example='FlowLogStore', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: **50**. Default value: **20**.', example='20', position='Query'),
  projectName?: string(name='ProjectName', description='The project that manages the captured traffic data.', example='FlowLogProject', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the flow log.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the flow log belongs.', example='rg-bp67acfmxazb4ph****', position='Query'),
  resourceId?: string(name='ResourceId', description='The ID of the resource from which traffic is captured.', example='eni-askldfas****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of resource from which traffic is captured. Valid values:

*   **NetworkInterface**: elastic network interface (ENI)
*   **VSwitch**: all ENIs in a vSwitch
*   **VPC**: all ENIs in a virtual private cloud (VPC)', example='NetworkInterface', position='Query'),
  status?: string(name='Status', description='The status of the flow log. Valid values:

*   **Active**
*   **Activating**
*   **Inactive**', example='Active', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the resource. You can specify at most 20 tag keys. The tag key cannot be an empty string.

The tag key can be at most 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N to add to the resource. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. The tag value cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tags', description='The list of tags.', position='Query'),
  trafficType?: string(name='TrafficType', description='The type of traffic that is captured. Valid values:

*   **All**: all traffic
*   **Allow**: traffic that is allowed by access control
*   **Drop**: traffic that is denied by access control', example='All', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the VPC to which the flow log belongs.', example='vpc-bp1nwd16gvo1wgs****', position='Query'),
}

model DescribeFlowLogsResponseBody = {
  flowLogs?: {
    flowLog?: [ 
    {
      aggregationInterval?: int32(name='AggregationInterval', description='The sampling interval of the flow log. Unit: minutes.', example='10'),
      businessStatus?: string(name='BusinessStatus', description='The business status of the flow log. Valid values:

*   **Normal**
*   **FinancialLocked**', example='Normal'),
      creationTime?: string(name='CreationTime', description='The time when the flow log was created.', example='2022-01-21T03:08:50Z'),
      description?: string(name='Description', description='The description of the flow log.', example='Description'),
      flowLogDeliverErrorMessage?: string(name='FlowLogDeliverErrorMessage', description='If the flow log failed to be delivered, you can troubleshoot based on the following error messages that may be returned:

*   **UnavaliableTarget**: The Logstore of SLS is unavailable and cannot receive logs. Check whether the Logstore is available.
*   **ProjectNotExist**: The project of SLS does not exist. We recommend that you delete the project and create a new one.
*   **UnknownError**: An internal error occurred. Try again later.', example='UnavaliableTarget'),
      flowLogDeliverStatus?: string(name='FlowLogDeliverStatus', description='Indicates whether the flow log is delivered. Valid values:
- **SUCCESS** 
- **FAILED**', example='FAILED'),
      flowLogId?: string(name='FlowLogId', description='The ID of the flow log.', example='fl-bp1f6qqhsrc2c12ta****'),
      flowLogName?: string(name='FlowLogName', description='The name of the flow log.', example='myFlowlog'),
      ipVersion?: string(name='IpVersion'),
      logStoreName?: string(name='LogStoreName', description='The Logstore that stores the captured traffic data.', example='FlowLogStore'),
      projectName?: string(name='ProjectName', description='The project that manages the captured traffic data.', example='FlowLogProject'),
      regionId?: string(name='RegionId', description='The region ID of the flow log.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the flow log belongs.', example='rg-bp67acfmxazb4ph****'),
      resourceId?: string(name='ResourceId', description='The ID of the resource from which traffic is captured.', example='eni-askldfas****'),
      resourceType?: string(name='ResourceType', description='The type of the resource from which traffic is captured. Valid values:

*   **NetworkInterface**: ENI
*   **VSwitch**: all ENIs in a vSwitch
*   **VPC**: all ENIs in a VPC', example='NetworkInterface'),
      serviceType?: string(name='ServiceType', description='The hosting type of the cloud service.

*   This parameter can be empty, which indicates that the flow log is created by the user.
*   If this parameter is not empty, the value is set to **sls**. The value sls indicates that the flow log is created in the Simple Log Service (SLS) console.

> A flow log that is created in the SLS console can be displayed in the VPC list. However, you cannot modify, start, stop, or delete the flow log in the VPC console. If you want to manage the flow log, you can log on to the [SLS console](https://sls.console.aliyun.com) and perform required operations.', example='sls'),
      status?: string(name='Status', description='The status of the flow log. Valid values:

*   **Active**
*   **Activating**
*   **Inactive**', example='Active'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The key of tag N.', example='FinanceDept'),
          value?: string(name='Value', description='The value of tag N.', example='FinanceJoshua'),
        }
      ](name='Tag')
      }(name='Tags', description='The list of tags.'),
      trafficPath?: {
        trafficPathList?: [ string ](name='TrafficPathList')
      }(name='TrafficPath', description='The sampling scope of the traffic that is collected. Valid values:

*   **all** (default value): all traffic
*   **internetGateway**: Internet traffic

> By default, the traffic path feature is unavailable. To use this feature, [submit a ticket](https://workorder-intl.console.aliyun.com/?spm=5176.11182188.console-base-top.dworkorder.18ae4882n3v6ZW#/ticket/createIndex).'),
      trafficType?: string(name='TrafficType', description='The type of traffic that is captured by the flow log. Valid values:

*   **All**: all traffic
*   **Allow**: traffic that is allowed by access control
*   **Drop**: traffic that is denied by access control', example='All'),
    }
  ](name='FlowLog')
  }(name='FlowLogs', description='The information about the flow logs.'),
  pageNumber?: string(name='PageNumber', description='The number of the returned page.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page.', example='20'),
  requestId?: string(name='RequestId', description='The request ID.', example='F7DDDC17-FA06-4AC2-8F35-59D2470FCFC1'),
  success?: string(name='Success', description='Indicates whether the operation is successful. Valid values:

*   **true**
*   **false**', example='true'),
  totalCount?: string(name='TotalCount', description='The number of flow logs that are queried.', example='1'),
}

model DescribeFlowLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFlowLogsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeFlowLogs  DescribeFlowLogsRequest
  * @return DescribeFlowLogsResponse
 */
async function describeFlowLogs(request: DescribeFlowLogsRequest): DescribeFlowLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFlowLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeForwardTableEntriesRequest {
  externalIp?: string(name='ExternalIp', description='*   The elastic IP addresses (EIPs) that can be accessed over the Internet when you query DNAT entries of Internet NAT gateways.
*   The NAT IP addresses that can be accessed by external networks when you query DNAT entries of Virtual Private Cloud (VPC) NAT gateways.', example='116.28.XX.XX', position='Query'),
  externalPort?: string(name='ExternalPort', description='*   The external port or port range that is used for port forwarding when you query DNAT entries of Internet NAT gateways.

    *   Valid values: **1** to **65535**.
    *   If you want to query a port range, separate the first port and last port with a forward slash (/), such as `10/20`.
    *   If you set **ExternalPort** to a port range, you must also set **InternalPort** to a port range, and the number of ports specified by these parameters must be the same. For example, if you set **ExternalPort** to `10/20`, you can set **InternalPort** to `80/90`.

*   The port that is used when the NAT IP address can be accessed by external networks when you query DNAT entries of VPC NAT gateways. Valid values: **1** to **65535**.', example='8080', position='Query'),
  forwardEntryId?: string(name='ForwardEntryId', description='The ID of the DNAT entry.', example='fwd-8vbn3bc8roygjp0gy****', position='Query'),
  forwardEntryName?: string(name='ForwardEntryName', description='The name of the DNAT entry.

The name must be 2 to 128 characters in length, and can contain digits, periods (.), underscores (_), and hyphens (-). It must start with a letter.', example='ForwardEntry-1', position='Query'),
  forwardTableId?: string(name='ForwardTableId', description='The ID of the DNAT table.

**

**Description** You must specify at least one of **ForwardTableId** and **NatGatewayId**.', example='ftb-bp1mbjubq34hlcqpa****', position='Query'),
  internalIp?: string(name='InternalIp', description='The private IP address.

*   The private IP address of the ECS instance that uses DNAT entries to communicate with the Internet when you query DNAT entries of Internet NAT gateways.
*   The private IP address that uses DNAT entries for communication when you query DNAT entries of VPC NAT gateways.', example='192.168.XX.XX', position='Query'),
  internalPort?: string(name='InternalPort', description='*   The internal port or port range that is used for port forwarding when you query DNAT entries of Internet NAT gateways. Valid values: **1** to **65535**.
*   The port of the destination ECS instance to be mapped when you query DNAT entries of VPC NAT gateways. Valid values: **1** to **65535**.', example='80', position='Query'),
  ipProtocol?: string(name='IpProtocol', description='The protocol. Valid values:

*   **TCP**
*   **UDP**
*   **Any**', example='TCP', position='Query'),
  natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.

**

**Description** You must specify at least one of **ForwardTableId** and **NatGatewayId**.', example='ngw-bp1uewa15k4iy5770****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where you want to create the NAT gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeForwardTableEntriesResponseBody = {
  forwardTableEntries?: {
    forwardTableEntry?: [ 
    {
      externalIp?: string(name='ExternalIp', description='*   The EIPs that can be accessed over the Internet when you query DNAT entries of Internet NAT gateways.
*   The NAT IP addresses that can be accessed by external networks when you query DNAT entries of VPC NAT gateways.', example='139.79.XX.XX'),
      externalPort?: string(name='ExternalPort', description='*   The external port or port range that is used for port forwarding when you query DNAT entries of Internet NAT gateways.
*   The port that is used when the NAT IP address can be accessed by external networks when you query DNAT entries of VPC NAT gateways.', example='80'),
      forwardEntryId?: string(name='ForwardEntryId', description='The ID of the DNAT entry.', example='fwd-119smw5tk****'),
      forwardEntryName?: string(name='ForwardEntryName', description='The name of the DNAT entry.', example='ForwardEntry-1'),
      forwardTableId?: string(name='ForwardTableId', description='The ID of the DNAT table to which the DNAT entry belongs.', example='ftb-11tc6xgmv****'),
      internalIp?: string(name='InternalIp', description='The private IP address.

*   The private IP address of the ECS instance that uses DNAT entries to communicate with the Internet when you query DNAT entries of Internet NAT gateways.
*   The private IP address that uses DNAT entries when you query DNAT entries of VPC NAT gateways.', example='192.168.XX.XX'),
      internalPort?: string(name='InternalPort', description='*   The internal port or port range that is used for port forwarding when you query DNAT entries of Internet NAT gateways.
*   The destination ECS instance port to be mapped when you query DNAT entries of VPC NAT gateways.', example='25'),
      ipProtocol?: string(name='IpProtocol', description='The protocol. Valid values:

*   **TCP**
*   **UDP**
*   **Any**', example='TCP'),
      natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway to which the DNAT entry belongs.', example='ngw-bp1uewa15k4iy5770****'),
      status?: string(name='Status', description='The status of the DNAT entry. Valid values:

*   **Pending**
*   **Available**
*   **Deleting**', example='Available'),
    }
  ](name='ForwardTableEntry')
  }(name='ForwardTableEntries', description='The details of DNAT entries.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='A6C4A8B1-7561-4509-949C-20DEB40D71E6'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='5'),
}

model DescribeForwardTableEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeForwardTableEntriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeForwardTableEntries  DescribeForwardTableEntriesRequest
  * @return DescribeForwardTableEntriesResponse
 */
async function describeForwardTableEntries(request: DescribeForwardTableEntriesRequest): DescribeForwardTableEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeForwardTableEntries', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGlobalAccelerationInstancesRequest {
  bandwidthType?: string(name='BandwidthType', description='The bandwidth type of the GA instance. Valid values:

*   **Sharing**
*   **Exclusive** (default)', example='Exclusive', position='Query'),
  globalAccelerationInstanceId?: string(name='GlobalAccelerationInstanceId', description='The ID of the GA instance.', example='ga-234sljmxaz****', position='Query'),
  includeReservationData?: boolean(name='IncludeReservationData', description='Specifies whether to return information about pending orders. Valid values:

*   **false** (default)
*   **true**', example='false', position='Query'),
  ipAddress?: string(name='IpAddress', description='The public IP address of the GA instance.', example='12.xx.xx.78', position='Query'),
  name?: string(name='Name', description='The name of the GA instance.', example='GA-1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='10', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: **100**. Default value: **10**.', example='10', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  serverId?: string(name='ServerId', description='The ID of the backend service instance.', example='i-sxjblddejj9x****', position='Query'),
  serviceLocation?: string(name='ServiceLocation', description='The region of the backend service. Valid values:

*   **china-mainland**
*   **north-america**
*   **asia-pacific**
*   **europe**', example='china-mainland', position='Query'),
  status?: string(name='Status', description='The status of the GA instance. Valid values:

*   **Available**
*   **Inuse**
*   **Associating**
*   **Unassociating**', example='Available', position='Query'),
}

model DescribeGlobalAccelerationInstancesResponseBody = {
  globalAccelerationInstances?: {
    globalAccelerationInstance?: [ 
    {
      accelerationLocation?: string(name='AccelerationLocation', description='The acceleration area of the GA instance.', example='china-mainland'),
      backendServers?: {
        backendServer?: [ 
        {
          regionId?: string(name='RegionId', description='The region where the backend servers are deployed.', example='cn-beijing'),
          serverId?: string(name='ServerId', description='The ID of the backend server.', example='i-2zeg83zvn5d4ed4y****'),
          serverIpAddress?: string(name='ServerIpAddress', description='The IP address of the backend server.', example='172.xx.xx.109'),
          serverType?: string(name='ServerType', description='The type of the backend server.

*   **EcsInstance**: Elastic Compute Service (ECS) instance
*   **SlbInstance**: Server Load Balancer (SLB) instance', example='EcsInstance'),
        }
      ](name='BackendServer')
      }(name='BackendServers', description='The details about the backend servers of the GA instance.'),
      bandwidth?: string(name='Bandwidth', description='The maximum bandwidth of the GA instance.', example='10'),
      bandwidthType?: string(name='BandwidthType', description='The bandwidth type of the GA instance.

*   **Sharing**
*   **Exclusive** (default)', example='Exclusive'),
      chargeType?: string(name='ChargeType', description='The billing method of the GA instance.', example='PrePaid'),
      creationTime?: string(name='CreationTime', description='The time when the GA instance was created. The time is displayed in UTC.', example='2018-07-05T03:39:31Z'),
      description?: string(name='Description', description='The description of the GA instance.', example='apiDescription'),
      expiredTime?: string(name='ExpiredTime', description='The time when the instance expires.', example='2018-08-05T16:00Z'),
      globalAccelerationInstanceId?: string(name='GlobalAccelerationInstanceId', description='The ID of the GA instance.', example='ga-bp1x99kj7kl1ziw5x****'),
      internetChargeType?: string(name='InternetChargeType', description='The billing method of the GA instance.', example='PayByBandwidth'),
      ipAddress?: string(name='IpAddress', description='The public IP address of the dedicated GA instance.', example='47.xx.xx.99'),
      name?: string(name='Name', description='The name of the GA instance.', example='instanceName'),
      publicIpAddresses?: {
        publicIpAddress?: [ 
        {
          allocationId?: string(name='AllocationId', description='The ID of the public IP address of the GA instance.', example='eip-bp19yqraac4w3y0jd****'),
          ipAddress?: string(name='IpAddress', description='The public IP address of the GA instance.', example='12.xx.xx.78'),
        }
      ](name='PublicIpAddress')
      }(name='PublicIpAddresses', description='The public IP address.'),
      regionId?: string(name='RegionId', description='The region ID of the GA instance.', example='cn-hangzhou'),
      serviceLocation?: string(name='ServiceLocation', description='The service area of the GA instance.', example='china-mainland'),
      status?: string(name='Status', description='The status of the GA instance.

*   **Available**
*   **Inuse**
*   **Associating**
*   **Unassociating**', example='InUse'),
    }
  ](name='GlobalAccelerationInstance')
  }(name='GlobalAccelerationInstances', description='The details of the GA instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='6B4EE38D-C75B-4E1F-844E-863A94430676'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeGlobalAccelerationInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGlobalAccelerationInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeGlobalAccelerationInstances  DescribeGlobalAccelerationInstancesRequest
  * @return DescribeGlobalAccelerationInstancesResponse
 */
async function describeGlobalAccelerationInstances(request: DescribeGlobalAccelerationInstancesRequest): DescribeGlobalAccelerationInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGlobalAccelerationInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGrantRulesToCenRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. ClientToken can contain only ASCII characters.

>  If you do not specify this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the network instance that you want to query.

This parameter is required.', example='vpc-bp18sth14qii3pnvc****', position='Query'),
  instanceType: string(name='InstanceType', description='The type of the network instance. Valid values:

*   **VPC**
*   **VBR**
*   **CCN**

This parameter is required.', example='VPC', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the network instance that you want to query.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the network instance belongs.', example='rg-acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeGrantRulesToCenResponseBody = {
  cenGrantRules?: {
    cbnGrantRule?: [ 
    {
      cenInstanceId?: string(name='CenInstanceId', description='The ID of the authorized CEN instance.', example='cen-9gsm1q2yh1prpt****'),
      cenOwnerId?: long(name='CenOwnerId', description='The UID of the Alibaba Cloud account to which the authorized CEN instance belongs.', example='132193271328****'),
      creationTime?: string(name='CreationTime', description='The time when the instance was created.', example='2019-11-15T09:26:36Z'),
    }
  ](name='CbnGrantRule')
  }(name='CenGrantRules', description='The information about the authorization.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F5BB78C8-5F41-464F-B9FF-5E0A7198BA26'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeGrantRulesToCenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGrantRulesToCenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeGrantRulesToCen  DescribeGrantRulesToCenRequest
  * @return DescribeGrantRulesToCenResponse
 */
async function describeGrantRulesToCen(request: DescribeGrantRulesToCenRequest): DescribeGrantRulesToCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGrantRulesToCen', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHaVipsRequest {
  filter?: [ 
    {
      key?: string(name='Key', description='The filter keys. You can specify at most five filter keys. Valid values of **N**: **1 to 5**. The following filter keys are supported:

*   **VpcId**: virtual private cloud (VPC) ID
*   **VSwitchId**: vSwitch ID
*   **Status**: HAVIP status
*   **HaVipId**: HAVIP ID
*   **HaVipAddress**: HAVIP IP address

You can specify multiple values for each filter key. The logical operator among multiple values is OR. If one value is matched, the filter key is matched.

The logical operator among multiple filter keys is AND. HAVIPs can be queried only if all filter keys are matched.', example='HaVipId'),
      value?: [ string ](name='Value', description='The value of the filter key. Valid values of **N**: **1 to 5**.', example='havip-bp19o63nequs01i8d****'),
    }
  ](name='Filter', description='The details of the filter condition.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the HAVIP.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the HAVIP belongs.', example='rg-bp67acfmxazb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the resource. You can specify up to 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N to add to the resource. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.', example='FinanceJoshua'),
    }
  ](name='Tags', description='The tag list.', position='Query'),
}

model DescribeHaVipsResponseBody = {
  haVips?: {
    haVip?: [ 
    {
      associatedEipAddresses?: {
        associatedEipAddresse?: [ string ](name='associatedEipAddresse')
      }(name='AssociatedEipAddresses', description='The list of EIPs associated with the HAVIP.'),
      associatedInstanceType?: string(name='AssociatedInstanceType', description='The type of the instance with which the HAVIP is associated. Valid values:

*   **EcsInstance**: Elastic Compute Service (ECS) instance
*   **NetworkInterface**: elastic network interface (ENI)', example='EcsInstance'),
      associatedInstances?: {
        associatedInstance?: [ string ](name='associatedInstance')
      }(name='AssociatedInstances', description='The information about the instance associated with the HAVIP.'),
      chargeType?: string(name='ChargeType', description='The parameter is invalid. No value is returned.', example='none'),
      createTime?: string(name='CreateTime', description='The time when the HAVIP was created.', example='2021-07-03T14:25:26Z'),
      description?: string(name='Description', description='The description of the HAVIP.', example='My HaVip'),
      haVipId?: string(name='HaVipId', description='The ID of the HAVIP.', example='havip-bp149uyvut73dpld****'),
      ipAddress?: string(name='IpAddress', description='The private IP address of the HAVIP.', example='192.168.24.5'),
      masterInstanceId?: string(name='MasterInstanceId', description='The ID of the active instance that is associated with the HAVIP.', example='i-bp145q7glnuzdvz****'),
      name?: string(name='Name', description='The name of the HAVIP.', example='test'),
      regionId?: string(name='RegionId', description='The ID of the region to which the HAVIP belongs.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the HAVIP belongs.', example='rg-bp67acfmxazb4ph****'),
      status?: string(name='Status', description='The status of the HAVIP. Valid values:

*   **Creating**: The server group is being created.
*   **Available**: The FULLNAT entry is available.
*   **Deleting**', example='Available'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The key of tag N added to the resource.', example='FinanceDept'),
          value?: string(name='Value', description='The value of tag N added to the resource.', example='FinanceJoshua'),
        }
      ](name='Tag')
      }(name='Tags', description='The tag list.'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which the HAVIP belongs.', example='vsw-bp1pkt1fba8e824ez****'),
      vpcId?: string(name='VpcId', description='The ID of the VPC to which the HAVIP belongs.', example='vpc-bp1kcm36tevkpms97****'),
    }
  ](name='HaVip')
  }(name='HaVips', description='The details about the HAVIP.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='33E480C5-B46F-4CA5-B6FD-D77C746E86AB'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
}

model DescribeHaVipsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHaVipsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeHaVips  DescribeHaVipsRequest
  * @return DescribeHaVipsResponse
 */
async function describeHaVips(request: DescribeHaVipsRequest): DescribeHaVipsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHaVips', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHighDefinitionMonitorLogAttributeRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance whose fine-grained monitoring configurations you want to query.

This parameter is required.', example='eip-wz9fi6qboho9fwgx7****', position='Query'),
  instanceType?: string(name='InstanceType', description='The type of the instance. Set the value to **EIP**.', example='EIP', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeHighDefinitionMonitorLogAttributeResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the instance whose fine-grained monitoring configurations you want to query.', example='eip-wz9fi6qboho9fwgx7****'),
  instanceType?: string(name='InstanceType', description='The type of instance for which you want to query fine-grained monitoring. Only **EIP** may be returned.', example='EIP'),
  logProject?: string(name='LogProject', description='The name of the project.', example='hdmonitor-cn-shenzhen-1658206966225390'),
  logStore?: string(name='LogStore', description='The name of the Logstore.', example='hdmonitor'),
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B457'),
  success?: string(name='Success', description='Indicates whether the operation is performed. Valid values:

*   **true**
*   **false**', example='true'),
}

model DescribeHighDefinitionMonitorLogAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHighDefinitionMonitorLogAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeHighDefinitionMonitorLogAttribute  DescribeHighDefinitionMonitorLogAttributeRequest
  * @return DescribeHighDefinitionMonitorLogAttributeResponse
 */
async function describeHighDefinitionMonitorLogAttribute(request: DescribeHighDefinitionMonitorLogAttributeRequest): DescribeHighDefinitionMonitorLogAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHighDefinitionMonitorLogAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIPv6TranslatorAclListAttributesRequest {
  aclId: string(name='AclId', description='The ACL ID.

This parameter is required.', example='ipv6transacl-bp1de2****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: **50**. Default value: **10**.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region of the ACL.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeIPv6TranslatorAclListAttributesResponseBody = {
  aclEntries?: {
    aclEntry?: [ 
    {
      aclEntryComment?: string(name='AclEntryComment', description='The remarks of the ACL entry.', example='client IP'),
      aclEntryId?: string(name='AclEntryId', description='The ID of the ACL entry.', example='ipv6transaclentry-bp105jrs****'),
      aclEntryIp?: string(name='AclEntryIp', description='The IP address specified in the ACL entry.', example='12ab:0:0:XXXX::0102/128'),
    }
  ](name='AclEntry')
  }(name='AclEntries', description='The ACLs.'),
  aclId?: string(name='AclId', description='The ACL ID.', example='ipv6transacl-bp1de2****'),
  aclName?: string(name='AclName', description='The name of the ACL.', example='acl1'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='20'),
}

model DescribeIPv6TranslatorAclListAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeIPv6TranslatorAclListAttributesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeIPv6TranslatorAclListAttributes  DescribeIPv6TranslatorAclListAttributesRequest
  * @return DescribeIPv6TranslatorAclListAttributesResponse
 */
async function describeIPv6TranslatorAclListAttributes(request: DescribeIPv6TranslatorAclListAttributesRequest): DescribeIPv6TranslatorAclListAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIPv6TranslatorAclListAttributes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIPv6TranslatorAclListsRequest {
  aclId?: string(name='AclId', description='The ID of the ACL.', example='ipv6transacl-bp1de2****', position='Query'),
  aclName?: string(name='AclName', description='The name of the ACL.', example='acl1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: **50**. Default value: **10**.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region of the ACL.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeIPv6TranslatorAclListsResponseBody = {
  ipv6TranslatorAcls?: {
    iPv6TranslatorAcl?: [ 
    {
      aclId?: string(name='AclId', description='The ACL ID.', example='ipv6transacl-bp1de2****'),
      aclName?: string(name='AclName', description='The ACL name.', example='acl1'),
    }
  ](name='IPv6TranslatorAcl')
  }(name='Ipv6TranslatorAcls', description='The list of network ACLs.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='20'),
}

model DescribeIPv6TranslatorAclListsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeIPv6TranslatorAclListsResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI DescribeIPv6TranslatorAclLists is deprecated  * @param request  the request parameters of DescribeIPv6TranslatorAclLists  DescribeIPv6TranslatorAclListsRequest
  * @return DescribeIPv6TranslatorAclListsResponse
 */
// Deprecated
async function describeIPv6TranslatorAclLists(request: DescribeIPv6TranslatorAclListsRequest): DescribeIPv6TranslatorAclListsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIPv6TranslatorAclLists', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIPv6TranslatorEntriesRequest {
  aclId?: string(name='AclId', description='The ID of the network ACL.', example='ipv6transacl-bp1de2****', position='Query'),
  aclStatus?: string(name='AclStatus', description='Specifies whether to enable access control lists (ACLs). Valid values:

*   **on**
*   **off**', example='off', position='Query'),
  aclType?: string(name='AclType', description='The ACL type. Valid values:

*   **white**: a whitelist. IPv6 addresses in the ACL are allowed to access backend services.
*   **black**: a blacklist. IPv6 addresses in the ACL are not allowed to access backend services.', example='white', position='Query'),
  allocateIpv6Addr?: string(name='AllocateIpv6Addr', description='The IPv6 address allocated to the IPv6 Translation Service instance.', example='2400:3200:1600::XX', position='Query'),
  allocateIpv6Port?: int32(name='AllocateIpv6Port', description='The port used by the IPv6 address allocated to the IPv6 Translation Service instance.', example='80', position='Query'),
  backendIpv4Addr?: string(name='BackendIpv4Addr', description='The public IPv4 address that needs to provide IPv6 services.', example='47.99.XX.XX', position='Query'),
  backendIpv4Port?: int32(name='BackendIpv4Port', description='The port used by the public IPv4 address that needs to provide IPv6 services.', example='80', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  entryName?: string(name='EntryName', description='The name of the IPv6 mapping entry.', example='entryname', position='Query'),
  ipv6TranslatorEntryId?: string(name='Ipv6TranslatorEntryId', description='The ID of the IPv6 mapping entry.

> If **Ipv6TranslatorId** and **Ipv6TranslatorEntryId** are empty, information about all IPv6 mapping entries is returned. If only **Ipv6TranslatorEntryId** is empty, information about the IPv6 mapping entries of the current IPv6 Translation Service instance is returned.', example='ipv6transentry-bp1g8bhrde****', position='Query'),
  ipv6TranslatorId?: string(name='Ipv6TranslatorId', description='The ID of the IPv6 Translation Service instance.', example='ipv6trans-bp1858ysxx****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: **50**. Default value: **10**.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region of the IPv6 Translation Service instance. You can call the **DescribeRegions** operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transProtocol?: string(name='TransProtocol', description='The protocol used by the data to be forwarded.', example='tcp', position='Query'),
}

model DescribeIPv6TranslatorEntriesResponseBody = {
  ipv6TranslatorEntries?: {
    ipv6TranslatorEntry?: [ 
    {
      aclId?: string(name='AclId', description='The ID of the associated ACL.', example='ipv6transacl-bp1de2****'),
      aclStatus?: string(name='AclStatus', description='Indicates whether ACLs are enabled.', example='on'),
      aclType?: string(name='AclType', description='The ACL type.

*   **white**: a whitelist. IPv6 addresses in the ACL are allowed to access backend services.
*   **black**: a blacklist. IPv6 addresses in the ACL are not allowed to access backend services.', example='white'),
      allocateIpv6Addr?: string(name='AllocateIpv6Addr', description='The IPv6 address allocated to the IPv6 Translation Service instance.', example='2400:3200:1600::XX'),
      allocateIpv6Port?: int32(name='AllocateIpv6Port', description='The port used by the IPv6 address allocated to the IPv6 Translation Service instance.', example='80'),
      backendIpv4Addr?: string(name='BackendIpv4Addr', description='The public IP address of the backend IPv4 server.', example='47.99.XX.XX'),
      backendIpv4Port?: string(name='BackendIpv4Port', description='The public IPv4 port used by the IPv4 server that needs to provide IPv6 access.', example='80'),
      entryBandwidth?: string(name='EntryBandwidth', description='The bandwidth specified in the IPv6 mapping entry.', example='1'),
      entryDescription?: string(name='EntryDescription', description='The description of the IPv6 mapping entry.', example='description'),
      entryName?: string(name='EntryName', description='The name of the IPv6 mapping entry.', example='name'),
      entryStatus?: string(name='EntryStatus', description='The status of the IPv6 mapping entry.', example='active'),
      ipv6TranslatorEntryId?: string(name='Ipv6TranslatorEntryId', description='The ID of the IPv6 mapping entry.', example='ipv6transentry-bp1g8bhrde****'),
      ipv6TranslatorId?: string(name='Ipv6TranslatorId', description='The ID of the IPv6 Translation Service instance to which the IPv6 mapping entry belongs.', example='ipv6trans-bp1858ys****'),
      regionId?: string(name='RegionId', description='The region of the IPv6 Translation Service instance.', example='cn-hangzhou'),
      transProtocol?: string(name='TransProtocol', description='The protocol.', example='tcp'),
    }
  ](name='Ipv6TranslatorEntry')
  }(name='Ipv6TranslatorEntries', description='The IPv6 mapping entries that are queried.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
}

model DescribeIPv6TranslatorEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeIPv6TranslatorEntriesResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI DescribeIPv6TranslatorEntries is deprecated  * @param request  the request parameters of DescribeIPv6TranslatorEntries  DescribeIPv6TranslatorEntriesRequest
  * @return DescribeIPv6TranslatorEntriesResponse
 */
// Deprecated
async function describeIPv6TranslatorEntries(request: DescribeIPv6TranslatorEntriesRequest): DescribeIPv6TranslatorEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIPv6TranslatorEntries', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIPv6TranslatorsRequest {
  allocateIpv4Addr?: string(name='AllocateIpv4Addr', description='The IPv4 address allocated to the IPv6 Translation Service instance.', example='47.99.XX.XX', position='Query'),
  allocateIpv6Addr?: string(name='AllocateIpv6Addr', description='The IPv6 address allocated to the IPv6 Translation Service instance.', example='2400:3200:1600::XXXX', position='Query'),
  businessStatus?: string(name='BusinessStatus', description='The business status of the IPv6 Translation Service instance. Valid values:

*   **Normal**
*   **FinancialLocked**', example='Normal', position='Query'),
  ipv6TranslatorId?: string(name='Ipv6TranslatorId', description='The ID of the IPv6 Translation Service instance.', example='ipv6trans-bp1858ys****', position='Query'),
  name?: string(name='Name', description='The name of the IPv6 Translation Service instance.', example='ipv6_1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: **50**. Default value: **10**.', example='10', position='Query'),
  payType?: string(name='PayType', description='The billing method of the IPv6 Translation Service instance. Valid values:

*   **Prepay**: subscription
*   **Postpay**: pay-as-you-go', example='Prepay', position='Query'),
  regionId: string(name='RegionId', description='The region of the IPv6 Translation Service instance. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  spec?: string(name='Spec', description='The specification of the IPv6 Translation Service instance. Set the value to **small**.', example='small', position='Query'),
  status?: string(name='Status', description='The status of the IPv6 Translation Service instance. Valid values:

*   **init**
*   **provisioning**
*   **active**
*   **updating**
*   **upgrading**
*   **deleting**
*   **deleted**', example='active', position='Query'),
}

model DescribeIPv6TranslatorsResponseBody = {
  ipv6Translators?: {
    ipv6Translator?: [ 
    {
      allocateIpv4Addr?: string(name='AllocateIpv4Addr', description='The IPv4 address allocated to the IPv6 Translation Service instance.', example='47.99.XX.XX'),
      allocateIpv6Addr?: string(name='AllocateIpv6Addr', description='The IPv6 address allocated to the IPv6 Translation Service instance.', example='2400:3200:1600::XXXX'),
      availableBandwidth?: string(name='AvailableBandwidth', description='The bandwidth of the IPv6 Translation Service instance.', example='1'),
      bandwidth?: int32(name='Bandwidth', description='The bandwidth of the IPv6 Translation Service instance. Unit: Mbit/s.', example='1'),
      businessStatus?: string(name='BusinessStatus', description='The business status of the IPv6 Translation Service instance. Valid values:

*   **Normal**
*   **FinancialLocked**', example='Normal'),
      createTime?: long(name='CreateTime', description='The timestamp when the IPv6 Translation Service instance was created.', example='1537151540000'),
      description?: string(name='Description', description='The description of the IPv6 Translation Service instance.', example='descriptionforinstance'),
      endTime?: long(name='EndTime', description='The timestamp when IPv6 Translation Service instance expires.', example='1539792000000'),
      ipv6TranslatorEntryIds?: {
        ipv6TranslatorEntryId?: [ string ](name='Ipv6TranslatorEntryId')
      }(name='Ipv6TranslatorEntryIds', description='The IDs of IPv6 mapping entries of the IPv6 Translation Service instance.'),
      ipv6TranslatorId?: string(name='Ipv6TranslatorId', description='The ID of the IPv6 Translation Service instance.', example='ipv6trans-bp1858ys*****'),
      name?: string(name='Name', description='The name of the IPv6 Translation Service instance.', example='test'),
      payType?: string(name='PayType', description='The billing method of the IPv6 Translation Service instance.

*   **Prepay**: subscription
*   **Postpay**: pay-as-you-go', example='Prepay'),
      regionId?: string(name='RegionId', description='The region of the IPv6 Translation Service instance.', example='cn-hangzhou'),
      spec?: string(name='Spec', description='The specification of the IPv6 Translation Service instance.', example='small'),
      status?: string(name='Status', description='The status of the IPv6 Translation Service instance.', example='active'),
    }
  ](name='Ipv6Translator')
  }(name='Ipv6Translators', description='The list of IPv6 Translation Service instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  totalCount?: int32(name='TotalCount', description='The number of returned entries.', example='1'),
}

model DescribeIPv6TranslatorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeIPv6TranslatorsResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI DescribeIPv6Translators is deprecated  * @param request  the request parameters of DescribeIPv6Translators  DescribeIPv6TranslatorsRequest
  * @return DescribeIPv6TranslatorsResponse
 */
// Deprecated
async function describeIPv6Translators(request: DescribeIPv6TranslatorsRequest): DescribeIPv6TranslatorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIPv6Translators', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIpv6AddressesRequest {
  addressType?: string(name='AddressType', position='Query'),
  associatedInstanceId?: string(name='AssociatedInstanceId', description='The ID of the instance that is assigned the IPv6 address.', example='i-2ze72wuqj4y3jl4f****', position='Query'),
  associatedInstanceType?: string(name='AssociatedInstanceType', description='The type of instance associated with the IPv6 address. Valid values:

*   **EcsInstance**: Elastic Compute Service (ECS) instance in a virtual private cloud (VPC)
*   **NetworkInterface**: secondary elastic network interface (ENI)', example='EcsInstance', position='Query'),
  includeReservationData?: boolean(name='IncludeReservationData', description='Specifies whether to return information about pending orders. Valid values:

*   **false** (default)
*   **true**', example='false', position='Query'),
  ipv6Address?: string(name='Ipv6Address', description='The IPv6 address that you want to query.', example='2408:XXXX:153:3921:851c:c435:7b12:1c5f', position='Query'),
  ipv6AddressId?: string(name='Ipv6AddressId', description='The ID of the IPv6 address that you want to query. You can enter at most 20 IPv6 address IDs in each API request. Separate IPv6 address IDs with commas (,).', example='ipv6-2zen5j4axcp5l5qyy****', position='Query'),
  ipv6InternetBandwidthId?: string(name='Ipv6InternetBandwidthId', description='The ID of the Internet bandwidth that you purchased for the IPv6 address.', example='ipv6bw-uf6hcyzu65v98v3du****', position='Query'),
  name?: string(name='Name', description='The name of the IPv6 address that you want to query.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter but cannot start with `http://` or `https://`.', example='test', position='Query'),
  networkType?: string(name='NetworkType', description='The type of communication supported by the IPv6 address. Valid values:

*   **Private**
*   **Public**', example='Private', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return per page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which you want to query IPv6 addresses. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-huhehaote', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the IPv6 gateway belongs.', example='rg-bp67acfmxazb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  serviceManaged?: boolean(name='ServiceManaged', description='Indicates whether the instance is managed. Valid values:

*   **true**
*   **false**

If you do not specify this parameter, all instances are queried.', example='false', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N. You can specify at most 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length. It cannot start with aliyun or acs:, and cannot contain http:// or https://.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N.

The tag value can be up to 128 characters in length. It can be an empty string. It cannot start with aliyun or acs:, and cannot contain http:// or https://.

Each tag key corresponds to one tag value. You can specify at most 20 tag values at a time.', example='yunke'),
    }
  ](name='Tag', description='The tag list.', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which the IPv6 address belongs.', example='vsw-25navfgbue4g****', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the VPC to which the IPv6 address belongs.', example='vpc-bp15zckdt37pq72zv****', position='Query'),
}

model DescribeIpv6AddressesResponseBody = {
  ipv6Addresses?: {
    ipv6Address?: [ 
    {
      addressType?: string(name='AddressType'),
      allocationTime?: string(name='AllocationTime', description='The time when the IPv6 address was created.', example='2020-12-20T14:56:09Z'),
      associatedInstanceId?: string(name='AssociatedInstanceId', description='The ID of the instance associated with the IPv6 address.', example='i-2ze72wuqj4y3jl4f****'),
      associatedInstanceType?: string(name='AssociatedInstanceType', description='The type of instance associated with the IPv6 address.', example='EcsInstance'),
      ipv6Address?: string(name='Ipv6Address', description='The IPv6 address.', example='2408:XXXX:153:3921:851c:c435:7b12:1c5f'),
      ipv6AddressDescription?: string(name='Ipv6AddressDescription', description='The description of the IPv6 address.', example='test'),
      ipv6AddressId?: string(name='Ipv6AddressId', description='The ID of the IPv6 address.', example='ipv6-2zen5j4axcp5l5qyy****'),
      ipv6AddressName?: string(name='Ipv6AddressName', description='The name of the IPv6 address.', example='test'),
      ipv6GatewayId?: string(name='Ipv6GatewayId', description='The ID of the IPv6 gateway to which the IPv6 address belongs.', example='ipv6gw-2zewg0l66s73b4k2q****'),
      ipv6InternetBandwidth?: {
        bandwidth?: int32(name='Bandwidth', description='The dedicated Internet bandwidth of the IPv6 address. Unit: Mbit/s.', example='5'),
        businessStatus?: string(name='BusinessStatus', description='The status of the Internet bandwidth of the IPv6 address. Valid values:

*   **Normal**
*   **FinancialLocked**
*   **SecurityLocked**', example='Normal'),
        hasReservationData?: boolean(name='HasReservationData', description='Indicates whether renewal data is included. Valid values:

*   **false**
*   **true** **true** is returned only when **IncludeReservationData** is set to **true** and some orders have not taken effect.', example='false'),
        instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the Internet bandwidth of the IPv6 address. Valid values:

Only **PostPaid** may be returned, which indicates the pay-as-you-go billing method.', example='PostPaid'),
        internetChargeType?: string(name='InternetChargeType', description='The billing method of the Internet bandwidth of the IPv6 address. Valid values:

*   **PayByTraffic**
*   **PayByBandwidth**', example='PayByTraffic'),
        ipv6InternetBandwidthId?: string(name='Ipv6InternetBandwidthId', description='The Internet bandwidth ID of the IPv6 address.', example='ipv6bw-hp3b35oq1fj50kbv****'),
        reservationActiveTime?: string(name='ReservationActiveTime', description='The time when the renewal takes effect. The time is displayed in the `YYYY-MM-DDThh:mm:ssZ` format.', example='2021-05-23T16:00:00Z'),
        reservationBandwidth?: long(name='ReservationBandwidth', description='The maximum bandwidth after the renewal takes effect. Unit: Mbit/s.', example='12'),
        reservationInternetChargeType?: string(name='ReservationInternetChargeType', description='The metering method that is used after the renewal takes effect.

*   **PayByTraffic**
*   **PayByBandwidth**', example='PayByTraffic'),
        reservationOrderType?: string(name='ReservationOrderType', description='The type of the renewal order. Only **RENEW** may be returned, which indicates that the order is placed for service renewal.', example='RENEW'),
      }(name='Ipv6InternetBandwidth', description='The Internet bandwidth of the IPv6 address.'),
      ipv6Isp?: string(name='Ipv6Isp', description='The ISP of the IPv6 address. Valid values:

*   **BGP** (default)
*   **ChinaMobile**
*   **ChinaUnicom**
*   **ChinaTelecom**', example='BGP'),
      networkType?: string(name='NetworkType', description='The type of connection supported by the IPv6 address. Valid values:

*   **Private**
*   **Public**', example='Private'),
      realBandwidth?: int32(name='RealBandwidth', description='The peak bandwidth of the IPv6 address.', example='5'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the IPv6 gateway belongs.', example='rg-bp67acfmxazb4ph****'),
      serviceManaged?: int32(name='ServiceManaged', description='Indicates whether the instance is managed. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
      status?: string(name='Status', description='The status of the IPv6 address.

*   **Pending**
*   **Available**', example='Available'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The tag key. You can specify up to 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length. The tag key cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
          value?: string(name='Value', description='The tag value.

The tag value can be up to 128 characters in length. It can be an empty string. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.

Each tag key corresponds to one tag value. You can specify at most 20 tag values at a time.', example='yunke'),
        }
      ](name='Tag')
      }(name='Tags', description='The tag list.'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which the IPv6 address belongs.', example='vsw-25navfgbue4g****'),
      vpcId?: string(name='VpcId', description='The ID of the VPC to which the IPv6 address belongs.', example='vpc-bp15zckdt37pq72zv****'),
    }
  ](name='Ipv6Address')
  }(name='Ipv6Addresses', description='The details of the IPv6 address.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Maximum value: **50**. Default value: **10**.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='AA4486A8-B6AE-469E-AB09-820EF8ECFA2B'),
  totalCount?: int32(name='TotalCount', description='The number of returned entries.', example='2'),
}

model DescribeIpv6AddressesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeIpv6AddressesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeIpv6Addresses  DescribeIpv6AddressesRequest
  * @return DescribeIpv6AddressesResponse
 */
async function describeIpv6Addresses(request: DescribeIpv6AddressesRequest): DescribeIpv6AddressesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIpv6Addresses', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIpv6EgressOnlyRulesRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance that is associated with the IPv6 address to which the egress-only rule is applied.', example='ipv6gw-bp1rhhs9zjlxukc5e****', position='Query'),
  instanceType?: string(name='InstanceType', description='The type of the instance to which you want to apply the egress-only rule. Set the value to

**Ipv6Address**, which specifies that the egress-only rule applies to an IPv6 address.', example='Ipv6Address', position='Query'),
  ipv6EgressOnlyRuleId?: string(name='Ipv6EgressOnlyRuleId', description='The ID of the egress-only rule that you want to query.', example='ipv6py-bp1rr7fq1md8pbb3k****', position='Query'),
  ipv6GatewayId: string(name='Ipv6GatewayId', description='The ID of the IPv6 gateway.

This parameter is required.', example='ipv6gw-bp1rhhs9zjlxukc5e****', position='Query'),
  name?: string(name='Name', description='The name of the rule.', example='rulename', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the IPv6 gateway is deployed. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-huhehaote', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeIpv6EgressOnlyRulesResponseBody = {
  ipv6EgressOnlyRules?: {
    ipv6EgressOnlyRule?: [ 
    {
      description?: string(name='Description', description='The description of the egress-only rule.', example='ruledescription'),
      instanceId?: string(name='InstanceId', description='The ID of the instance to which the egress-only rule applies.', example='ipv6gw-bp1rhhs9zjlxukc5e****'),
      instanceType?: string(name='InstanceType', description='The type of the instance to which the egress-only rule applies.', example='Ipv6Address'),
      ipv6EgressOnlyRuleId?: string(name='Ipv6EgressOnlyRuleId', description='The ID of the egress-only rule.', example='ipv6py-bp1rr7fq1md8pbb3k****'),
      name?: string(name='Name', description='The name of the egress-only rule.', example='rulename'),
      status?: string(name='Status', description='The status of the egress-only rule.', example='Available'),
    }
  ](name='Ipv6EgressOnlyRule')
  }(name='Ipv6EgressOnlyRules', description='The details about the egress-only rules.'),
  pageNumber?: int32(name='PageNumber', description='The number of the returned page. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Maximum value: **50**. Default value: **10**.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E16671B7-DEA6-48E0-8E9C-41913DAD44DD'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeIpv6EgressOnlyRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeIpv6EgressOnlyRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeIpv6EgressOnlyRules  DescribeIpv6EgressOnlyRulesRequest
  * @return DescribeIpv6EgressOnlyRulesResponse
 */
async function describeIpv6EgressOnlyRules(request: DescribeIpv6EgressOnlyRulesRequest): DescribeIpv6EgressOnlyRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIpv6EgressOnlyRules', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIpv6GatewayAttributeRequest {
  ipv6GatewayId: string(name='Ipv6GatewayId', description='The ID of the IPv6 gateway that you want to query.

This parameter is required.', example='ipv6gw-hp3y0l3ln89j8cdvf****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the IPv6 gateway is deployed. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-huhehaote', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeIpv6GatewayAttributeResponseBody = {
  businessStatus?: string(name='BusinessStatus', description='The status of the IPv6 gateway. Valid values:

*   **Normal**
*   **FinancialLocked**
*   **SecurityLocked**', example='Normal'),
  creationTime?: string(name='CreationTime', description='The time when the IPv6 gateway was created.', example='2018-12-05T09:21:35Z'),
  description?: string(name='Description', description='The description of the IPv6 gateway.', example='test'),
  expiredTime?: string(name='ExpiredTime', description='The time when the IPv6 gateway expires.', example='2019-1-05T09:21:35Z'),
  gatewayRouteTableId?: string(name='GatewayRouteTableId', description='The ID of the gateway route table associated with the IPv6 gateway.

>  This parameter is available only when the IPv6 gateway is associated with a gateway route table.', example='vtb-5ts0ohchwkp3dydt2****'),
  instanceChargeType?: string(name='InstanceChargeType', description='The metering method of the IPv6 gateway.', example='PostPaid'),
  ipv6GatewayId?: string(name='Ipv6GatewayId', description='The ID of the IPv6 gateway.', example='ipv6gw-hp3y0l3ln89j8cdvf****'),
  name?: string(name='Name', description='The name of the IPv6 gateway.', example='test'),
  regionId?: string(name='RegionId', description='The ID of the region where the IPv6 gateway is deployed.', example='cn-huhehaote'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxazb4ph6aiy****'),
  status?: string(name='Status', description='The status of the IPv6 gateway. Valid values:

*   **Pending**
*   **Available**', example='Available'),
  tags?: {
    tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N. You can specify at most 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length. It must start with a letter and can contain digits, periods (.), underscores (_), and hyphens (-). It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length. It must start with a letter and can contain digits, periods (.), underscores (_), and hyphens (-). It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tag')
  }(name='Tags', description='The information about the tags.'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the IPv6 gateway belongs.', example='vpc-123sedrfswd23****'),
}

model DescribeIpv6GatewayAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeIpv6GatewayAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeIpv6GatewayAttribute  DescribeIpv6GatewayAttributeRequest
  * @return DescribeIpv6GatewayAttributeResponse
 */
async function describeIpv6GatewayAttribute(request: DescribeIpv6GatewayAttributeRequest): DescribeIpv6GatewayAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIpv6GatewayAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIpv6GatewaysRequest {
  ipv6GatewayId?: string(name='Ipv6GatewayId', description='The ID of the IPv6 gateway.', example='ipv6gw-hp3rwmtmfhgis****', position='Query'),
  name?: string(name='Name', description='The name of the IPv6 gateway.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter. The name must start with a letter and cannot start with `http://` or `https://`.', example='ipv6GW', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the IPv6 gateway is deployed. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the region ID.

This parameter is required.', example='cn-huhehaote', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the IPv6 gateway belongs.', example='rg-bp67acfmxazb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag keys of the resources. You can specify up to 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag values of the resources. You can specify up to 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length, and cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.', example='FinanceJoshua'),
    }
  ](name='Tags', description='The information about the tags.', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the IPv6 gateway belongs.', example='vpc-123sedrfswd23****', position='Query'),
}

model DescribeIpv6GatewaysResponseBody = {
  ipv6Gateways?: {
    ipv6Gateway?: [ 
    {
      businessStatus?: string(name='BusinessStatus', description='The status of the IPv6 gateway. Valid values:

*   **Normal**
*   **FinancialLocked**
*   **SecurityLocked**', example='Normal'),
      creationTime?: string(name='CreationTime', description='The time when the IPv6 gateway was created.', example='2020-12-20T14:51:23Z'),
      description?: string(name='Description', description='The description of the IPv6 gateway.', example='descriptionforIPv6GW'),
      expiredTime?: string(name='ExpiredTime', description='The time when the IPv6 gateway expires.', example='2021-12-20T14:51:23Z'),
      instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the IPv6 gateway.

Only **PostPaid** may be returned, which indicates that the IPv6 gateway uses the pay-as-you-go billing method.', example='PostPaid'),
      ipv6GatewayId?: string(name='Ipv6GatewayId', description='The ID of the IPv6 gateway.', example='ipv6gw-hp3rwmtmfhgisipv6gw-hp3rwmtmfhgis****'),
      name?: string(name='Name', description='The name of the IPv6 gateway.', example='ipv6GW'),
      regionId?: string(name='RegionId', description='The ID of the region in which the IPv6 gateway is deployed.', example='cn-huhehaote'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-bp67acfmxazb4ph****'),
      status?: string(name='Status', description='The status of the IPv6 gateway. Valid values:

*   **Pending**
*   **Available**', example='Available'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='FinanceDept'),
          value?: string(name='Value', description='The tag value.', example='FinanceJoshua'),
        }
      ](name='Tag')
      }(name='Tags', description='The information about the tags.'),
      vpcId?: string(name='VpcId', description='The ID of the VPC to which the IPv6 gateway belongs.', example='vpc-123sedrfswd23****'),
    }
  ](name='Ipv6Gateway')
  }(name='Ipv6Gateways', description='The information about the IPv6 gateway.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='E3A06196-3E7C-490D-8F39-CB4B5A0CE8AD'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model DescribeIpv6GatewaysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeIpv6GatewaysResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeIpv6Gateways  DescribeIpv6GatewaysRequest
  * @return DescribeIpv6GatewaysResponse
 */
async function describeIpv6Gateways(request: DescribeIpv6GatewaysRequest): DescribeIpv6GatewaysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIpv6Gateways', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNatGatewayAssociateNetworkInterfacesRequest {
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF****', position='Query'),
  filter?: [ 
    {
      key?: string(name='Key', example='ResourceId'),
      value?: string(name='Value', example='ep-8psre8c8936596cd****'),
    }
  ](name='Filter', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', position='Query'),
  natGatewayId: string(name='NatGatewayId', description='This parameter is required.', example='ngw-bp1uewa15k4iy5770****', position='Query'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazdjdhd****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tag', position='Query'),
}

model DescribeNatGatewayAssociateNetworkInterfacesResponseBody = {
  associateNetworkInterfaces?: {
    associateNetworkInterface?: [ 
    {
      iPv4Sets?: {
        iPv4Set?: [ 
        {
          iPv4Address?: string(name='IPv4Address', example='`172.17.**.**`'),
          primary?: boolean(name='Primary', example='true'),
        }
      ](name='IPv4Set')
      }(name='IPv4Sets'),
      networkInterfaceId?: string(name='NetworkInterfaceId', example='eni-gw8g131ef2dnbu3k****'),
      resourceId?: string(name='ResourceId', example='ep-8psre8c8936596cd****'),
      resourceOwnerId?: string(name='ResourceOwnerId', example='138859086900****'),
      resourceType?: string(name='ResourceType', example='PrivateLink'),
      tunnelIndex?: string(name='TunnelIndex'),
    }
  ](name='AssociateNetworkInterface')
  }(name='AssociateNetworkInterfaces'),
  maxResults?: int32(name='MaxResults', example='20'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-bp1uewa15k4iy5770****'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
  requestId?: string(name='RequestId', example='2315DEB7-5E92-423A-91F7-4C1EC9AD****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeNatGatewayAssociateNetworkInterfacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNatGatewayAssociateNetworkInterfacesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeNatGatewayAssociateNetworkInterfaces  DescribeNatGatewayAssociateNetworkInterfacesRequest
  * @return DescribeNatGatewayAssociateNetworkInterfacesResponse
 */
async function describeNatGatewayAssociateNetworkInterfaces(request: DescribeNatGatewayAssociateNetworkInterfacesRequest): DescribeNatGatewayAssociateNetworkInterfacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNatGatewayAssociateNetworkInterfaces', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNatGatewaysRequest {
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

- **true**: performs a dry run. The system prechecks whether your AccessKey pair is valid, whether the RAM user is authorized, and whether the required parameters are specified. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
- **false** (default): performs a dry run and sends the request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the NAT gateway. Set the value to **PostPaid**, which specifies the pay-as-you-go billing method.', example='PostPaid', position='Query'),
  name?: string(name='Name', description='The name of the NAT gateway. 

The name must be 1 to 128 characters in length, and cannot start with `http://` or `https://`. 

If this parameter is not set, the system automatically assigns a name to the NAT gateway.', example='test', position='Query'),
  natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.', example='ngw-bp1uewa15k4iy5770****', position='Query'),
  natType?: string(name='NatType', description='The type of NAT gateway. Set the value to **Enhanced** (enhanced NAT gateway).', example='Enhanced', position='Query'),
  networkType?: string(name='NetworkType', description='The type of the NAT gateway. Valid values:

*   **internet**: an Internet NAT gateway
*   **intranet**: a VPC NAT gateway', example='internet', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='10', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: **50**. Default value: **10**.', example='1', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the NAT gateways that you want to query.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the NAT gateway belongs.', example='rg-bp67acfmxazb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  spec?: string(name='Spec', description='The size of the NAT gateway. Ignore this parameter.', example='Invalid parameter.', position='Query'),
  status?: string(name='Status', description='The status of the NAT gateway. Valid values:

*   **Creating**: After you send a request to create a NAT gateway, the system creates the NAT gateway in the background. The NAT gateway remains in the **Creating** state until the operation is completed.
*   **Available**: The NAT gateway remains in a stable state after the NAT gateway is created.
*   **Modifying**: After you send a request to modify a NAT gateway, the system modifies the NAT gateway in the background. The NAT gateway remains in the **Modifying** state until the operation is completed.
*   **Deleting**: After you send a request to delete a NAT gateway, the system deletes the NAT gateway in the background. The NAT gateway remains in the **Deleting** state until the operation is completed.
*   **Converting**: After you send a request to upgrade a standard NAT gateway to an enhanced NAT gateway, the system upgrades the NAT gateway in the background. The NAT gateway remains in the **Converting** state until the operation is completed.', example='Available', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag keys of the NAT gateway. You can specify up to 20 tag keys.

Each tag key cannot exceed 64 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.', example='KeyTest'),
      value?: string(name='Value', description='The tag values of the NAT gateway. You can specify up to 20 tag values.

The tag value cannot exceed 128 characters in length, and cannot start with `aliyun` or `acs:`. The value cannot contain `http://` or `https://`.', example='valueTest'),
    }
  ](name='Tag', description='The tags.', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the VPC to which the NAT gateway belongs.', example='vpc-bp15zckdt37pq72z****', position='Query'),
  zoneId?: string(name='ZoneId', description='The ID of the zone to which the NAT gateway belongs.', example='cn-hangzhou-b', position='Query'),
}

model DescribeNatGatewaysResponseBody = {
  natGateways?: {
    natGateway?: [ 
    {
      accessMode?: {
        modeValue?: string(name='ModeValue'),
        tunnelType?: string(name='TunnelType'),
      }(name='AccessMode'),
      autoPay?: boolean(name='AutoPay', description='Indicates whether automatic payment is enabled. Valid values:

*   **false**: no
*   **true**: yes', example='false'),
      businessStatus?: string(name='BusinessStatus', description='The status of the NAT gateway. Valid values:

*   **Normal**: normal
*   **FinancialLocked**: locked due to overdue payments', example='Normal'),
      creationTime?: string(name='CreationTime', description='The time when the NAT gateway was created.', example='2021-06-08T12:20:20Z'),
      deletionProtection?: boolean(name='DeletionProtection', description='Indicates whether the deletion protection feature is enabled. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      description?: string(name='Description', description='The description of the NAT gateway.', example='NAT'),
      ecsMetricEnabled?: boolean(name='EcsMetricEnabled', description='Indicates whether the traffic monitoring feature is enabled. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      eipBindMode?: string(name='EipBindMode', description='The mode in which the NAT gateway is associated with an elastic IP address (EIP). Valid values:

*   **MULTI_BINDED**: multi-EIP-to-ENI mode
*   **NAT**: NAT mode, which is compatible with IPv4 addresses.

>  Note: If you use the NAT mode, the EIP occupies one private IP address on the vSwitch of the NAT gateway. Make sure that the vSwitch has sufficient private IP addresses. Otherwise, the NAT gateway fails to be associated with the EIP. In NAT mode, you can associate a NAT gateway with up to 50 EIPs.', example='MULTI_BINDED'),
      enableSessionLog?: string(name='EnableSessionLog'),
      expiredTime?: string(name='ExpiredTime', description='The time when the NAT gateway expires.', example='2021-08-26T16:00Z'),
      forwardTableIds?: {
        forwardTableId?: [ string ](name='ForwardTableId')
      }(name='ForwardTableIds', description='The ID of the DNAT table.'),
      fullNatTableIds?: {
        fullNatTableId?: [ string ](name='FullNatTableId')
      }(name='FullNatTableIds', description='The ID of the FULLNAT table.'),
      icmpReplyEnabled?: boolean(name='IcmpReplyEnabled', description='Indicates whether the ICMP non-retrieval feature is enabled. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
      instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the NAT gateway. The value is set to **PostPaid**, which indicates the pay-as-you-go billing method.', example='PostPaid'),
      internetChargeType?: string(name='InternetChargeType', description='The metering method of the NAT gateway. Valid values:

*   **PayBySpec**: pay-by-specification
*   **PayByLcu**: pay-by-CU', example='PayByLcu'),
      ipLists?: {
        ipList?: [ 
        {
          allocationId?: string(name='AllocationId', description='The ID of the EIP associated with the NAT gateway.', example='eip-m5egzuvp3dgixen6****'),
          ipAddress?: string(name='IpAddress', description='The IP address of the EIP associated with the NAT gateway.', example='116.62.XX.XX'),
          privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address of the NAT gateway.', example='192.168.XX.XX'),
          snatEntryEnabled?: boolean(name='SnatEntryEnabled', description='Indicates whether IP addresses that are used in DNAT entries can be specified in SNAT entries. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
          usingStatus?: string(name='UsingStatus', description='The association between the EIP and the Internet NAT gateway. Valid values:

*   **UsedByForwardTable**: The EIP is specified in a DNAT entry.
*   **UsedBySnatTable**: The EIP is specified in an SNAT entry.
*   **UsedByForwardSnatTable**: The EIP is specified in both an SNAT entry and a DNAT entry.
*   **Idle**: The EIP is not specified in a DNAT or SNAT entry.', example='UsedByForwardTable'),
        }
      ](name='IpList')
      }(name='IpLists', description='The list of elastic IP addresses (EIPs) that are associated with the Internet NAT gateway.'),
      name?: string(name='Name', description='The name of the NAT gateway.', example='abc'),
      natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.', example='ngw-bp1047e2d4z7kf2ki****'),
      natGatewayPrivateInfo?: {
        eniInstanceId?: string(name='EniInstanceId', description='The ID of the elastic network interface (ENI).', example='eni-m5eg4ozy5st8q3q4****'),
        eniType?: string(name='EniType', description='The mode in which the ENI is associated with the NAT gateway.

*   **indirect**: non-cut-through mode
*   If an empty value is returned, it indicates that the cut-through mode is used.', example='indirect'),
        izNo?: string(name='IzNo', description='The zone to which the NAT gateway belongs.', example='cn-hangzhou-b'),
        maxBandwidth?: int32(name='MaxBandwidth', description='The maximum bandwidth. Unit: Mbit/s.', example='5120'),
        maxSessionEstablishRate?: int32(name='MaxSessionEstablishRate', description='The number of new connections to the NAT gateway. Unit: connections per second.', example='100000'),
        maxSessionQuota?: int32(name='MaxSessionQuota', description='The number of concurrent connections to the NAT gateway. Unit: connections.', example='2000000'),
        privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address.', example='192.168.XX.XX'),
        vswitchId?: string(name='VswitchId', description='The ID of the vSwitch to which the NAT gateway belongs.', example='vsw-bp1s2laxhdf9ayjbo****'),
      }(name='NatGatewayPrivateInfo', description='The private network information about the enhanced Internet NAT gateway.

>  If **NatType** is set to **Normal**, all parameters returned in this list are empty.'),
      natType?: string(name='NatType', description='The type of the NAT gateway. The value is set to **Enhanced** (enhanced NAT gateway).', example='Enhanced'),
      networkType?: string(name='NetworkType', description='The type of NAT gateway. Valid values:

*   **internet**: an Internet NAT gateway
*   **intranet**: a VPC NAT gateway', example='internet'),
      privateLinkEnabled?: boolean(name='PrivateLinkEnabled', description='Indicates whether the NAT gateway supports PrivateLink. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      privateLinkMode?: string(name='PrivateLinkMode', description='The mode that is used by PrivateLink. Valid values:

*   **FullNat**: the FULLNAT mode
*   **Geneve**: the GENEVE mode', example='FullNat'),
      regionId?: string(name='RegionId', description='The ID of the region where the NAT gateway is deployed.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the contiguous EIP group belongs.', example='rg-bp67acfmxazb4ph****'),
      securityProtectionEnabled?: boolean(name='SecurityProtectionEnabled', description='Indicates whether the firewall feature is enabled. Valid values:

*   **false**: no
*   **true**: yes', example='false'),
      snatTableIds?: {
        snatTableId?: [ string ](name='SnatTableId')
      }(name='SnatTableIds', description='The ID of the SNAT table of the NAT gateway.'),
      spec?: string(name='Spec', description='The size of the NAT gateway. An empty value is returned for the parameter.

If **InternetChargeType** is set to **PayByLcu**, an empty value is returned.', example='Small'),
      status?: string(name='Status', description='The status of the NAT gateway. Valid values:

*   **Creating**: After you send a request to create a NAT gateway, the system creates the NAT gateway in the background. The NAT gateway remains in the Creating state until the operation is completed.
*   **Available**: The NAT gateway remains in a stable state after the NAT gateway is created.
*   **Modifying**: After you send a request to modify a NAT gateway, the system modifies the NAT gateway in the background. The NAT gateway remains in the Modifying state until the operation is completed.
*   **Deleting**: After you send a request to delete a NAT gateway, the system deletes the NAT gateway in the background. The NAT gateway remains in the Deleting state until the operation is completed.
*   **Converting**: After you send a request to upgrade a standard NAT gateway to an enhanced NAT gateway, the system upgrades the NAT gateway in the background. The NAT gateway remains in the Converting state until the operation is completed.', example='Creating'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the instance.', example='KeyTest'),
          tagValue?: string(name='TagValue', description='The tag value of the instance.', example='valueTest'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags that are added to the resource group.'),
      vpcId?: string(name='VpcId', description='The ID of the VPC where the NAT gateway is deployed.', example='vpc-bp15zckdt37pq72z****'),
    }
  ](name='NatGateway')
  }(name='NatGateways', description='The details about the NAT gateway.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='10'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  totalCount?: int32(name='TotalCount', description='The number of NAT gateway entries that are returned.', example='1'),
}

model DescribeNatGatewaysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNatGatewaysResponseBody(name='body'),
}

/**
  * @description You can call this operation to query both Virtual Private Cloud (VPC) NAT gateways and Internet NAT gateways. NAT gateways in this topic refer to both VPC NAT gateways and Internet NAT gateways.
  * @param request  the request parameters of DescribeNatGateways  DescribeNatGatewaysRequest
  * @return DescribeNatGatewaysResponse
 */
async function describeNatGateways(request: DescribeNatGatewaysRequest): DescribeNatGatewaysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNatGateways', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNetworkAclAttributesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  networkAclId: string(name='NetworkAclId', description='The ID of the network ACL.

This parameter is required.', example='nacl-a2do9e413e0spzasx****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the network ACL.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeNetworkAclAttributesResponseBody = {
  networkAclAttribute?: {
    creationTime?: string(name='CreationTime', description='The time when the network ACL was created.', example='2021-12-25 11:33:27'),
    description?: string(name='Description', description='The description of the network ACL.', example='This is my NetworkAcl.'),
    egressAclEntries?: {
      egressAclEntry?: [ 
      {
        description?: string(name='Description', description='The description of the outbound rule.', example='This is EgressAclEntries.'),
        destinationCidrIp?: string(name='DestinationCidrIp', description='The destination CIDR block.', example='10.0.0.0/24'),
        entryType?: string(name='EntryType', description='The type of the inbound rule.

- **custom**

- **system**', example='custom'),
        ipVersion?: string(name='IpVersion', description='The IP version. Valid values:

*   **IPv4**
*   **IPv6**', example='IPv4'),
        networkAclEntryId?: string(name='NetworkAclEntryId', description='The ID of the outbound rule.', example='nae-a2d447uw4tillxdcv****'),
        networkAclEntryName?: string(name='NetworkAclEntryName', description='The name of the outbound rule.', example='acl-2'),
        policy?: string(name='Policy', description='The action to be performed on network traffic that matches the rule. Valid values:

*   **accept**
*   **drop**', example='accept'),
        port?: string(name='Port', description='The destination port range of the outbound traffic.

*   If the **protocol** of the outbound rule is set to **all**, **icmp**, or **gre**, the port range is -1/-1, which specified all ports.
*   If the **protocol** of the outbound rule is set to **tcp** or **udp**, set the port range in the following format: **1/200** or **80/80**, which specifies port 1 to port 200 or port 80. Valid values for a port: **1** to **65535**.', example='-1/-1'),
        protocol?: string(name='Protocol', description='The protocol type. Valid values:

*   **icmp**
*   **gre**
*   **tcp**
*   **udp**
*   **all**', example='all'),
      }
    ](name='EgressAclEntry')
    }(name='EgressAclEntries', description='The information about the outbound rules of the network ACL.'),
    ingressAclEntries?: {
      ingressAclEntry?: [ 
      {
        description?: string(name='Description', description='The description of the inbound rule.', example='This is IngressAclEntries.'),
        entryType?: string(name='EntryType', description='The type of the inbound rule.

- **custom**

- **system**', example='custom'),
        ipVersion?: string(name='IpVersion', description='The IP version. Valid values:

*   **IPv4**
*   **IPv6**', example='IPv4'),
        networkAclEntryId?: string(name='NetworkAclEntryId', description='The ID of the inbound rule.', example='nae-a2dk86arlydmevfbg****'),
        networkAclEntryName?: string(name='NetworkAclEntryName', description='The name of the inbound rule.', example='acl-3'),
        policy?: string(name='Policy', description='The action to be performed on network traffic that matches the rule. Valid values:

*   **accept**
*   **drop**', example='accept'),
        port?: string(name='Port', description='The destination port range of the inbound traffic.

*   If the **protocol** of the inbound rule is set to **all**, **icmp**, or **gre**, the port range is -1/-1, which specifies all ports.
*   If the **protocol** of the inbound rule is set to **tcp** or **udp**, set the port range in the following format: **1/200** or **80/80**, which specifies port 1 to port 200 or port 80. Valid ports: **1** to **65535**.', example='-1/-1'),
        protocol?: string(name='Protocol', description='The protocol type. Valid values:

*   **icmp**
*   **gre**
*   **tcp**
*   **udp**
*   **all**', example='all'),
        sourceCidrIp?: string(name='SourceCidrIp', description='The source CIDR block.', example='10.0.0.0/24'),
      }
    ](name='IngressAclEntry')
    }(name='IngressAclEntries', description='The information about the inbound rules of the network ACL.'),
    networkAclId?: string(name='NetworkAclId', description='The ID of the network ACL.', example='nacl-a2do9e413e0spnhmj****'),
    networkAclName?: string(name='NetworkAclName', description='The name of the network ACL.', example='acl-1'),
    ownerId?: long(name='OwnerId', description='The ID of the Alibaba Cloud account to which the network ACL belongs.', example='253460731706911258'),
    regionId?: string(name='RegionId', description='The region ID of the network ACL.', example='cn-hangzhou'),
    resources?: {
      resource?: [ 
      {
        resourceId?: string(name='ResourceId', description='The ID of the associated resource.', example='vsw-bp1de348lntdwxscd****'),
        resourceType?: string(name='ResourceType', description='The type of resource with which you want to associate the network ACL. The value is set to **VSwitch**.', example='VSwitch'),
        status?: string(name='Status', description='The association status of the resource. Valid values:

*   **BINDED**
*   **BINDING**
*   **UNBINDING**', example='BINDED'),
      }
    ](name='Resource')
    }(name='Resources', description='The resources that are associated with the network ACL.'),
    status?: string(name='Status', description='The association status of the resource. Valid values:

*   **Available**
*   **Modifying**', example='Available'),
    tags?: {
      tag?: [ 
      {
        key?: string(name='Key', description='The key of tag N added to the resource.', example='FinanceDept'),
        value?: string(name='Value', description='The value of tag N added to the resource.', example='FinanceJoshua'),
      }
    ](name='Tag')
    }(name='Tags', description='The information about the tags.'),
    vpcId?: string(name='VpcId', description='The ID of the VPC to which the network ACL belongs.', example='vpc-a2d33rfpl72k5defr****'),
  }(name='NetworkAclAttribute', description='The details of the network ACLs.'),
  requestId?: string(name='RequestId', description='The request ID.', example='F5905F9C-0161-4E72-9CB1-1F3F3CF6268A'),
}

model DescribeNetworkAclAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNetworkAclAttributesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeNetworkAclAttributes  DescribeNetworkAclAttributesRequest
  * @return DescribeNetworkAclAttributesResponse
 */
async function describeNetworkAclAttributes(request: DescribeNetworkAclAttributesRequest): DescribeNetworkAclAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNetworkAclAttributes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNetworkAclsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  networkAclId?: string(name='NetworkAclId', description='The ID of the network ACL.', example='nacl-bp1lhl0taikrbgnh****', position='Query'),
  networkAclName?: string(name='NetworkAclName', description='The name of the network ACL.

The name must be 1 to 128 characters in length, and cannot start with `http://` or `https://`.', example='acl-1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the network ACL.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId?: string(name='ResourceId', description='The ID of the associated instance.', example='vsw-bp1de348lntdwnhbg****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the associated instance. Set the value to **VSwitch**.

This parameter is valid only if **ResourceType** and **ResourceId** are both specified.', example='VSwitch', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the resource. You can specify up to 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N to add to the resource. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.', example='FinanceJoshua'),
    }
  ](name='Tags', description='The tag list.', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the VPC to which the network ACL belongs.', example='vpc-m5ebpc2xh64mqm27e****', position='Query'),
}

model DescribeNetworkAclsResponseBody = {
  networkAcls?: {
    networkAcl?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the network ACL was created.', example='2021-12-25 11:44:17'),
      description?: string(name='Description', description='The description of the network ACL.', example='This is my NetworkAcl.'),
      egressAclEntries?: {
        egressAclEntry?: [ 
        {
          description?: string(name='Description', description='The description of the outbound rule.', example='This is EgressAclEntries.'),
          destinationCidrIp?: string(name='DestinationCidrIp', description='The destination CIDR block.', example='10.0.0.0/24'),
          entryType?: string(name='EntryType', description='The type of the inbound rule.

- **custom**

- **system**', example='custom'),
          ipVersion?: string(name='IpVersion', description='The IP version. 

*   **IPv4**
*   **IPv6**', example='IPV4'),
          networkAclEntryId?: string(name='NetworkAclEntryId', description='The ID of the outbound rule.', example='nae-a2d447uw4tillfvgb****'),
          networkAclEntryName?: string(name='NetworkAclEntryName', description='The name of the outbound rule.', example='acl-2'),
          policy?: string(name='Policy', description='The action to be performed on network traffic that matches the rule. Valid values:

*   **accept**
*   **drop**', example='accept'),
          port?: string(name='Port', description='The destination port range of the outbound traffic.

*   If the **protocol** of the outbound rule is set to **all**, **icmp**, or **gre**, the port range is -1/-1, which specified all ports.
*   If the **protocol** of the outbound rule is set to **tcp** or **udp**, set the port range in the following format: **1/200** or **80/80**, which specifies port 1 to port 200 or port 80. Valid values for a port: **1** to **65535**.', example='-1/-1'),
          protocol?: string(name='Protocol', description='The protocol. Valid values:

*   **icmp**
*   **gre**
*   **tcp**
*   **udp**
*   **all**', example='all'),
        }
      ](name='EgressAclEntry')
      }(name='EgressAclEntries', description='The outbound rules.'),
      ingressAclEntries?: {
        ingressAclEntry?: [ 
        {
          description?: string(name='Description', description='The description of the inbound rule.', example='This is IngressAclEntries.'),
          entryType?: string(name='EntryType', description='The type of the inbound rule.

- **custom**

- **system**', example='custom'),
          ipVersion?: string(name='IpVersion', description='The IP version. 

*   **IPv4**
*   **IPv6**', example='IPv4'),
          networkAclEntryId?: string(name='NetworkAclEntryId', description='The ID of the inbound rule.', example='nae-a2dk86arlydmezasw****'),
          networkAclEntryName?: string(name='NetworkAclEntryName', description='The name of the inbound rule.', example='acl-3'),
          policy?: string(name='Policy', description='The action to be performed on network traffic that matches the rule. Valid values:

*   **accept**
*   **drop**', example='accept'),
          port?: string(name='Port', description='The destination port range of the inbound traffic.

*   If the **protocol** of the inbound rule is set to **all**, **icmp**, or **gre**, the port range is -1/-1, which specifies all ports.
*   If the **protocol** of the inbound rule is set to **tcp** or **udp**, set the port range in the following format: **1/200** or **80/80**, which specifies port 1 to port 200 or port 80. Valid ports: **1** to **65535**.', example='-1/-1'),
          protocol?: string(name='Protocol', description='The protocol. Valid values:

*   **icmp**
*   **gre**
*   **tcp**
*   **udp**
*   **all**', example='all'),
          sourceCidrIp?: string(name='SourceCidrIp', description='The source CIDR block.', example='10.0.0.0/24'),
        }
      ](name='IngressAclEntry')
      }(name='IngressAclEntries', description='The configurations of the inbound rules.'),
      networkAclId?: string(name='NetworkAclId', description='The ID of the network ACL.', example='nacl-a2do9e413e0spxscd****'),
      networkAclName?: string(name='NetworkAclName', description='The name of the network ACL.', example='acl-1'),
      ownerId?: long(name='OwnerId', description='The ID of the Alibaba Cloud account to which the network ACL belongs.', example='253460731706911258'),
      regionId?: string(name='RegionId', description='The region ID of the network ACL.', example='cn-hangzhou'),
      resources?: {
        resource?: [ 
        {
          resourceId?: string(name='ResourceId', description='The ID of the associated resource.', example='vsw-bp1de348lntdwcdf****'),
          resourceType?: string(name='ResourceType', description='The type of resource with which you want to associate the network ACL.', example='VSwitch'),
          status?: string(name='Status', description='The association status of the resource. Valid values:

*   **BINDED**
*   **BINDING**
*   **UNBINDING**', example='BINDED'),
        }
      ](name='Resource')
      }(name='Resources', description='The resources that are associated with the network ACL.'),
      status?: string(name='Status', description='The status of the network ACL. Valid values:

*   **Available**
*   **Modifying**', example='Available'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The key of tag N added to the resource.', example='FinanceDept'),
          value?: string(name='Value', description='The value of tag N added to the resource.', example='FinanceJoshua'),
        }
      ](name='Tag')
      }(name='Tags', description='The information about the tags.'),
      vpcId?: string(name='VpcId', description='The ID of the associated VPC.', example='vpc-m5ebpc2xh64mqm27e****'),
    }
  ](name='NetworkAcl')
  }(name='NetworkAcls', description='The details of the network ACLs.'),
  pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='F7DDDC17-FA06-4AC2-8F35-59D2470FCFC1'),
  totalCount?: string(name='TotalCount', description='The number of entries returned.', example='2'),
}

model DescribeNetworkAclsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNetworkAclsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeNetworkAcls  DescribeNetworkAclsRequest
  * @return DescribeNetworkAclsResponse
 */
async function describeNetworkAcls(request: DescribeNetworkAclsRequest): DescribeNetworkAclsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNetworkAcls', 'POST', '/', 'json', false, 'json', request);
}

model DescribePhysicalConnectionLOARequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not set this parameter, the system automatically uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the Express Connect circuit.

This parameter is required.', example='pc-bp1ca4wca27ex****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Express Connect circuit.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribePhysicalConnectionLOAResponseBody = {
  physicalConnectionLOAType?: {
    companyLocalizedName?: string(name='CompanyLocalizedName', description='The name of the construction company.', example='company'),
    companyName?: string(name='CompanyName', description='The name of the organization that requires the Express Connect circuit.', example='test1234'),
    constructionTime?: string(name='ConstructionTime', description='The time when construction starts.', example='2019-02-26T08:00:00Z'),
    instanceId?: string(name='InstanceId', description='The ID of the Express Connect circuit.', example='pc-bp1ca4wca27****'),
    lineCode?: string(name='LineCode', description='The circuit code provided by the connectivity provider.', example='aaa111'),
    lineLabel?: string(name='LineLabel', description='The label of the cable in the data center.', example='bbb222'),
    lineSPContactInfo?: string(name='LineSPContactInfo', description='The contact information about line O\\&M.', example='1388888****'),
    lineServiceProvider?: string(name='LineServiceProvider', description='The ISP. Valid values:

*   **China Telecom**
*   **China Unicom**
*   **China Mobile**
*   **Other ISPs in China**', example='Other ISPs in China'),
    lineType?: string(name='LineType', description='The type of the Express Connect circuit. Valid values:

*   **MSTP**
*   **MPLSVPN**
*   **FIBRE**
*   **Other**', example='FIBRE'),
    loaUrl?: string(name='LoaUrl', description='The download URL of the LOA file.', example='http://******'),
    PMInfo?: {
      PMInfo?: [ 
      {
        PMCertificateNo?: string(name='PMCertificateNo', description='The identity document number of the construction worker.', example='12345671****'),
        PMCertificateType?: string(name='PMCertificateType', description='The identity document type of the construction worker. Valid values:

*   **IDCard**
*   **Passport**
*   **Other**', example='Other'),
        PMContactInfo?: string(name='PMContactInfo', description='The phone number of the construction worker.', example='18910010****'),
        PMGender?: string(name='PMGender', description='The gender of the construction worker. Valid values:

*   **Male**
*   **Female**', example='Male'),
        PMName?: string(name='PMName', description='The name of the construction worker.', example='name'),
      }
    ](name='PMInfo')
    }(name='PMInfo', description='The information about the construction workers.'),
    si?: string(name='SI', description='The on-site construction company.', example='ctcu'),
    status?: string(name='Status', description='The status of the LOA. Valid values:

*   **Applying**: The LOA is pending for approval.
*   **Accept**: The LOA is approved.
*   **Available**: The LOA is available.
*   **Rejected**: The LOA is rejected.
*   **Completing**: The Express Connect circuit is under construction.
*   **Complete**: The Express Connect circuit is installed.
*   **Deleted**: The LOA is deleted.', example='Available'),
  }(name='PhysicalConnectionLOAType', description='The LOA information about the Express Connect circuit.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='318BB676-0A2B-43A0-9AD8-F1D34E93750F'),
}

model DescribePhysicalConnectionLOAResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePhysicalConnectionLOAResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribePhysicalConnectionLOA  DescribePhysicalConnectionLOARequest
  * @return DescribePhysicalConnectionLOAResponse
 */
async function describePhysicalConnectionLOA(request: DescribePhysicalConnectionLOARequest): DescribePhysicalConnectionLOAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePhysicalConnectionLOA', 'POST', '/', 'json', false, 'json', request);
}

model DescribePhysicalConnectionsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.', example='02fb3da4-130e-11e9-8e44-001', position='Query'),
  filter?: [ 
    {
      key?: string(name='Key', description='The key of the filter. Valid values:

*   **PhysicalConnectionId**: the ID of the Express Connect circuit.

*   **AccessPointId**: the ID of the access point.

*   **Type**: the type of resource to which the Express Connect circuit is connected. You can set Type only to **VPC**.

*   **LineOperator**: the connectivity provider of the Express Connect circuit. Valid values:

    *   **CT**: China Telecom.
    *   **CU**: China Unicom.
    *   **CM**: China Mobile.
    *   **CO**: other connectivity providers in the Chinese mainland.
    *   **Equinix**: Equinix.
    *   **Other**: other connectivity providers outside the Chinese mainland.

*   **Spec**: the specification of the Express Connect circuit. Valid values:

    *   **1G and below**
    *   **10G**
    *   **40G**
    *   **100G**

>  By default, you cannot set the value to **40G** or **100G**. To use these values, you must first contact your account manager.

*   **Status**: the status of the Express Connect circuit. Valid values:

    *   **Initial**: The application is under review.
    *   **Approved**: The application is approved.
    *   **Allocating**: The system is allocating resources.
    *   **Allocated**: The Express Connect circuit is under construction.
    *   **Confirmed**: The Express Connect circuit is pending for user confirmation.
    *   **Enabled**: The Express Connect circuit is enabled.
    *   **Rejected**: The application is rejected.
    *   **Canceled**: The application is canceled.
    *   **Allocation Failed**: The system failed to allocate resources.
    *   **Terminating**: The Express Connect circuit is being disabled.
    *   **Terminated**: The Express Connect circuit is disabled.

*   **Name**: the name of the Express Connect circuit.

*   **ProductType**: the type of the Express Connect circuit. Valid values:

    *   **VirtualPhysicalConnection**: shared Express Connect circuit
    *   **PhysicalConnection**: dedicated Express Connect circuit.

You can specify at most five filter conditions in each request. The logical relation among the filter conditions is **AND**. Therefore, an Express Connect circuit is returned only when all specified filter conditions are matched.', example='Name'),
      value?: [ string ](name='Value', description='The filter values.', example='1'),
    }
  ](name='Filter', description='The filter keys.', position='Query'),
  includeReservationData?: boolean(name='IncludeReservationData', description='Specifies whether to return the data about pending orders. Valid values:

*   **true**
*   **false** (default)', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **10**. Valid values: **1** to **50**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Express Connect circuit.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the Express Connect circuit belongs.', example='rg-aek2yvwibxrmrkq', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the resource. You can specify at most 20 tag keys. The tag key cannot be an empty string.

It can be up to 64 characters in length and can contain digits, periods (.), underscores (_), and hyphens (-). It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N to add to the resource. You can specify at most 20 tag values. The tag value can be an empty string.

It can be up to 128 characters in length and can contain digits, periods (.), underscores (_), and hyphens (-). It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tags', description='The tag list.', position='Query'),
}

model DescribePhysicalConnectionsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **10**. Valid values: **1** to **50**.', example='10'),
  physicalConnectionSet?: {
    physicalConnectionType?: [ 
    {
      accessPointId?: string(name='AccessPointId', description='The ID of the Express Connect circuit.', example='ap-cn-hangzhou-finance-yh-E'),
      accessPointType?: string(name='AccessPointType', description='The type of the access point.', example='VPC'),
      adDetailLocation?: string(name='AdDetailLocation', description='The information about the data center and rack.', example='Position 30, Server Rack JXX, Booth ET135ET135-XX-2, Room XX, Building 10, XX Road, XX Town, XX District, Hangzhou, Zhejiang Province'),
      adLocation?: string(name='AdLocation', description='The location of the access point.', example='Number 10, XX Road, XX Town, XX District, Hangzhou City, Zhejiang Province.'),
      bandwidth?: long(name='Bandwidth', description='The maximum bandwidth of the Express Connect circuit.

Unit: Mbit/s.', example='10'),
      businessStatus?: string(name='BusinessStatus', description='The status of the Express Connect circuit. Valid values:

*   **Normal**: enabled
*   **FinancialLocked**: locked due to overdue payments
*   **SecurityLocked**: locked for security reasons', example='Normal'),
      chargeType?: string(name='ChargeType', description='The billing method of the Express Connect circuit.

If **Prepaid** is returned, it indicates that the Express Connect circuit is billed on a subscription basis.', example='Prepaid'),
      circuitCode?: string(name='CircuitCode', description='The circuit code of the Express Connect circuit. The circuit code is provided by the connectivity provider.', example='longtel001'),
      creationTime?: string(name='CreationTime', description='The time when the Express Connect circuit was created.', example='2021-08-24T07:30:58Z'),
      description?: string(name='Description', description='The description of the Express Connect circuit.', example='desctest'),
      enabledTime?: string(name='EnabledTime', description='The time when the Express Connect circuit was enabled.', example='2021-08-24T07:33:18Z'),
      endTime?: string(name='EndTime', description='The time when the Express Connect circuit expires.', example='2022-04-24T16:00:00Z'),
      expectSpec?: string(name='ExpectSpec', description='The estimated maximum bandwidth of the shared Express Connect circuit. The estimated bandwidth takes effect after you complete the payment.

Unit: **M** (Mbit/s) and **G** (Gbit/s).', example='50M'),
      hasReservationData?: string(name='HasReservationData', description='Indicates whether the data about pending orders is returned. Valid values:

*   **true**
*   **false**', example='false'),
      lineOperator?: string(name='LineOperator', description='The connectivity provider of the Express Connect circuit. Valid values:

*   **CT**: China Telecom.
*   **CU**: China Unicom.
*   **CM**: China Mobile.
*   **CO**: other connectivity providers in the Chinese mainland.
*   **Equinix**: Equinix.
*   **Other**: other connectivity providers outside the Chinese mainland.', example='CT'),
      loaStatus?: string(name='LoaStatus', description='The status of the letter of authorization (LOA). Valid values:

*   **Applying**: The LOA is pending for approval.
*   **Accept**: The LOA is approved.
*   **Available**: The LOA is available.
*   **Rejected**: The LOA is rejected.
*   **Completing**: The Express Connect circuit is under construction.
*   **Complete**: The Express Connect circuit is installed.
*   **Deleted**: The LOA is deleted.', example='Available'),
      name?: string(name='Name', description='The name of the Express Connect circuit.', example='nametest'),
      orderMode?: string(name='OrderMode', description='The payer for the hosted connection. Valid values:

*   **PayByPhysicalConnectionOwner**: The partner pays for the shared Express Connect circuit.
*   **PayByVirtualPhysicalConnectionOwner**: The tenant pays for the shared Express Connect circuit.', example='PayByPhysicalConnectionOwner'),
      parentPhysicalConnectionAliUid?: long(name='ParentPhysicalConnectionAliUid', description='The ID of the Alibaba Cloud account to which the parent Express Connect circuit belongs.', example='283117732402483989'),
      parentPhysicalConnectionId?: string(name='ParentPhysicalConnectionId', description='The ID of the parent Express Connect circuit.', example='pc-bp1ciz7ekd2grn1as****'),
      peerLocation?: string(name='PeerLocation', description='The geographical location of the data center.', example='XX Number, XX Road, XX Town, XX District, Hangzhou City, Zhejiang Province.'),
      physicalConnectionId?: string(name='PhysicalConnectionId', description='The ID of the Express Connect circuit.', example='pc-bp1ciz7ekd2grn1as****'),
      portNumber?: string(name='PortNumber', description='The ID of the port on the access device.', example='1/1/1'),
      portType?: string(name='PortType', description='The port type of the Express Connect circuit. Valid values:

*   **100Base-T**: 100 Mbit/s copper Ethernet port
*   **1000Base-T**: 1,000 Mbit/s copper Ethernet port
*   **1000Base-LX**: 1,000 Mbit/s single-mode optical port (10 km)
*   **10GBase-T**: 10,000 Mbit/s copper Ethernet port
*   **10GBase-LR**: 10,000 Mbit/s single-mode optical port (10 km)
*   **40GBase-LR**: 40,000 Mbit/s single-mode optical port
*   **100GBase-LR**: 100,000 Mbit/s single-mode optical port

> Whether 40GBase-LR and 100GBase-LR ports can be created depends on resource supplies. For more information, contact your account manager.', example='10GBase-LR'),
      productType?: string(name='ProductType', description='The type of the Express Connect circuit. Valid values:

*   **VirtualPhysicalConnection**: shared Express Connect circuit
*   **PhysicalConnection**: dedicated Express Connect circuit', example='PhysicalConnection'),
      qosId?: string(name='QosId', description='The ID of the QoS policy.', example='qos-bp10s3szn8rgnxuw7****'),
      redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId', description='The ID of the standby Express Connect circuit.', example='pc-119mfjzm****'),
      reservationActiveTime?: string(name='ReservationActiveTime', description='The time when the pending order takes effect.', example='2022-02-25T11:01:04Z'),
      reservationInternetChargeType?: string(name='ReservationInternetChargeType', description='The billing method of the pending order.

If **PayByBandwidth** is returned, it indicates that the Express Connect circuit is billed on a pay-by-bandwidth basis.', example='PayByBandwidth'),
      reservationOrderType?: string(name='ReservationOrderType', description='The type of the pending order.

If the value is **RENEW**, it indicates that the order is placed for service renewal.', example='RENEW'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID to which the instance belongs.', example='rg-acfmwu3k52prgdi'),
      spec?: string(name='Spec', description='The specification of the Express Connect circuit.

Unit: **G** (Gbit/s).', example='10G'),
      status?: string(name='Status', description='The status of the Express Connect circuit. Valid values:

*   **Initial**
*   **Approved**
*   **Allocating**
*   **Allocated**
*   **Confirmed**
*   **Enabled**
*   **Rejected**
*   **Canceled**
*   **Allocation Failed**
*   **Terminating**
*   **Terminated**', example='Enabled'),
      tags?: {
        tags?: [ 
        {
          key?: string(name='Key', description='The key of tag N added to the resource. You can specify up to 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 64 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
          value?: string(name='Value', description='The value of tag N added to the resource. You can specify up to 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceJoshua'),
        }
      ](name='tags')
      }(name='Tags', description='The tags that are added to the cluster.'),
      type?: string(name='Type', description='The type of resource to which the Express Connect circuit is connected. Only **VPC** may be returned.', example='VPC'),
      virtualPhysicalConnectionCount?: int32(name='VirtualPhysicalConnectionCount', description='The number of Express Connect circuits that are established.', example='0'),
      vlanId?: string(name='VlanId', description='The VLAN ID of the shared Express Connect circuit.', example='10'),
      vpconnStatus?: string(name='VpconnStatus', description='The status of the shared Express Connect circuit. Valid values:

*   **Confirmed**
*   **UnConfirmed**
*   **Deleted**', example='Confirmed'),
    }
  ](name='PhysicalConnectionType')
  }(name='PhysicalConnectionSet', description='The list of Express Connect circuits.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0E6D0EC4-7C91-53E2-9F65-64BF713114B0'),
  totalCount?: int32(name='TotalCount', description='The number of returned entries.', example='1'),
}

model DescribePhysicalConnectionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePhysicalConnectionsResponseBody(name='body'),
}

/**
  * @description By default, the system queries information about all Express Connect circuits in the specified region. You can query Express Connect circuits that meet specific conditions by specifying filter conditions provided by the **DescribePhysicalConnections** operation. For more information about the supported filter conditions, see **Key** in the **Request parameters** section.
  * @param request  the request parameters of DescribePhysicalConnections  DescribePhysicalConnectionsRequest
  * @return DescribePhysicalConnectionsResponse
 */
async function describePhysicalConnections(request: DescribePhysicalConnectionsRequest): DescribePhysicalConnectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePhysicalConnections', 'POST', '/', 'json', false, 'json', request);
}

model DescribePublicIpAddressRequest {
  ipVersion?: string(name='IpVersion', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.

Valid values: **1** to **100**. Default value: **100**.', example='100', position='Query'),
  regionId: string(name='RegionId', description='The region that you want to query. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribePublicIpAddressResponseBody = {
  code?: string(name='Code', description='The HTTP status codes returned.', example='200'),
  message?: string(name='Message', description='The response messages.', example='test'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='100'),
  publicIpAddress?: [ string ](name='PublicIpAddress', description='The range of the public IP addresses of the VPC in the region.', example='110.11.1.0/24'),
  regionId?: string(name='RegionId', description='The ID of the region to which the public IP addresses belong.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  success?: boolean(name='Success', description='Indicates whether the call is successful. Valid values:

*   **true**
*   **false**', example='true'),
  totalCount?: int32(name='TotalCount', description='The number of returned entries.', example='1'),
}

model DescribePublicIpAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePublicIpAddressResponseBody(name='body'),
}

/**
  * @description You cannot query the range of public IP addresses of a classic network by calling the **DescribePublicIpAddress** operation.
  * @param request  the request parameters of DescribePublicIpAddress  DescribePublicIpAddressRequest
  * @return DescribePublicIpAddressResponse
 */
async function describePublicIpAddress(request: DescribePublicIpAddressRequest): DescribePublicIpAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePublicIpAddress', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language of the response. Valid values:

*   **zh-CN** (default): Chinese
*   **en-US**: English', example='zh-CN', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  productType?: string(name='ProductType', description='The service type. Default value: **VPC**.', example='VPC', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region.', example='China (Qingdao)'),
      regionEndpoint?: string(name='RegionEndpoint', description='The endpoint of the region service.', example='vpc.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-qingdao'),
    }
  ](name='Region')
  }(name='Regions', description='The list of regions.'),
  requestId?: string(name='RequestId', description='The request ID.', example='611CB80C-B6A9-43DB-9E38-0B0AC3D9B58F'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRegions  DescribeRegionsRequest
  * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRouteEntryListRequest {
  destCidrBlockList?: [ string ](name='DestCidrBlockList', description='The destination CIDR blocks of the routes.', position='Query'),
  destinationCidrBlock?: string(name='DestinationCidrBlock', description='The destination CIDR block of the route. IPv4 and IPv6 CIDR blocks are supported.', example='192.168.2.0/24', position='Query'),
  ipVersion?: string(name='IpVersion', description='The IP version. Valid values:

*   **IPv4**
*   **IPv6**', example='IPv4', position='Query'),
  maxResult?: int32(name='MaxResult', description='The number of entries per page. Valid values: **1** to **100**. Default value: **10**.', example='10', maximum=500, position='Query'),
  nextHopId?: string(name='NextHopId', description='The ID of the next hop.', example='vpn-bp10zyaph5cc8b7c7****', position='Query'),
  nextHopType?: string(name='NextHopType', description='The next hop type. Valid values:

*   **Instance**: an Elastic Compute Service (ECS) instance. This is the default value.
*   **HaVip**: a high-availability virtual IP address (HAVIP).
*   **VpnGateway**: a VPN gateway.
*   **NatGateway**: a NAT gateway.
*   **NetworkInterface**: a secondary elastic network interface (ENI).
*   **RouterInterface**: a router interface.
*   **IPv6Gateway**: an IPv6 gateway.
*   **Attachment**: a transit router.
*   **Ipv4Gateway**: an IPv4 gateway.
*   **GatewayEndpoint**: a gateway endpoint.
*   **CenBasic**: CEN does not support transit routers.
*   **Ecr**: Express Connect Router (ECR).', example='Instance', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of NextToken.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the route table.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeEntryId?: string(name='RouteEntryId', description='The ID of the route that you want to query.', example='rte-bp1mnnr2al0naomnp****', position='Query'),
  routeEntryName?: string(name='RouteEntryName', description='The name of the route entry.

The name must be 1 to 128 characters in length and cannot start with `http://` or `https://`.', example='abc', position='Query'),
  routeEntryType?: string(name='RouteEntryType', description='The route type. Valid values:

*   **Custom**: custom routes.
*   **System**: system routes.
*   **BGP**: BGP routes.
*   **CEN**: Cloud Enterprise Network (CEN) routes.
*   **ECR**: Express Connect Router (ECR) routes.', example='System', position='Query'),
  routeTableId: string(name='RouteTableId', description='The ID of the route table that you want to query.

This parameter is required.', example='vtb-bp1r9pvl4xen8s9ju****', position='Query'),
  serviceType?: string(name='ServiceType', description='Specifies whether to host the route. If the parameter is empty, the route is not hosted.

Set the value to **TR**, which specifies that the route is hosted by a transit router.', example='TR', position='Query'),
}

model DescribeRouteEntryListResponseBody = {
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. Valid values:

*   If no value is returned for **NextToken**, no next queries are sent.
*   If a value is returned for **NextToken**, the value is used to retrieve a new page of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='14A07460-EBE7-47CA-9757-12CC4761D47A'),
  routeEntrys?: {
    routeEntry?: [ 
    {
      description?: string(name='Description', description='The description of the route.', example='RouteEntryDescription'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', description='The destination CIDR block of the route.', example='192.168.2.0/24'),
      gmtModified?: string(name='GmtModified', description='The time when the route was modified. The time follows the ISO 8601 standard in the `YYYY-MM-DDThh:mm:ssZ` format. The time is displayed in UTC.

Use the UTC time format: yyyy-MM-ddTHH:mmZ', example='2022-05-09T03:00:07Z'),
      ipVersion?: string(name='IpVersion', description='The IP version. Valid values: Valid values:

*   **ipv4**
*   **ipv6**', example='IPv4'),
      nextHops?: {
        nextHop?: [ 
        {
          enabled?: int32(name='Enabled', description='Indicates whether the route is available. Valid values:

*   **0**: unavailable
*   **1**: available

>  This parameter is returned when the next hop type is set to **RouterInterface**.', example='1'),
          nextHopId?: string(name='NextHopId', description='The ID of the next hop.', example='vpn-bp10zyaph5cc8b7c7****'),
          nextHopRegionId?: string(name='NextHopRegionId', description='The ID of the region where the next hop is deployed.

>  This parameter is returned when the next hop type is set to **RouterInterface**.', example='cn-hangzhou'),
          nextHopRelatedInfo?: {
            instanceId?: string(name='InstanceId', description='The ID of the instance that is associated with the next hop.', example='vpc-bp1t36rn9l53iwbsf****'),
            instanceType?: string(name='InstanceType', description='The type of the instance associated with the next hop. Valid values:

*   **VPC**: a VPC
*   **VBR**: a VBR
*   **PCONN**: an Express Connect circuit', example='VPC'),
            regionId?: string(name='RegionId', description='The region ID of the instance associated with the next hop. Valid values:', example='ch-hangzhou'),
          }(name='NextHopRelatedInfo', description='The information about the next hop.'),
          nextHopType?: string(name='NextHopType', description='The next hop type. Valid values:

*   **Instance**: an ECS instance.
*   **HaVip**: an HAVIP.
*   **VpnGateway**: a VPN gateway.
*   **NatGateway**: a NAT gateway.
*   **NetworkInterface**: a secondary ENI.
*   **RouterInterface**: a router interface.
*   **IPv6Gateway**: an IPv6 gateway.
*   **Attachment**: a transit router.
*   **Ipv4Gateway**: an IPv4 gateway.
*   **GatewayEndpoint**: a gateway endpoint.
*   **CenBasic**: CEN does not support transit routers.
*   **Ecr**: ECR.', example='Instance'),
          weight?: int32(name='Weight', description='The weight of the route.

>  This parameter is returned when the next hop type is set to **RouterInterface**.', example='100'),
        }
      ](name='NextHop')
      }(name='NextHops', description='The information about the next hops.'),
      origin?: string(name='Origin', description='The route origin. Valid values:
* **RoutePropagation**: The route is created by a dynamic propagation source.
* **SystemCreate**: The route is created by the system.
* **CustomCreate**: The route is created by a user.', example='RoutePropagation'),
      routeEntryId?: string(name='RouteEntryId', description='The ID of the route.', example='rte-bp1mnnr2al0naomnp****'),
      routeEntryName?: string(name='RouteEntryName', description='The name of the route.', example='aaa'),
      routeTableId?: string(name='RouteTableId', description='The ID of the route table.', example='vtb-bp15w5q90d2rk3bww****'),
      serviceType?: string(name='ServiceType', description='Indicates whether the route is hosted. If the parameter is empty, the route is not hosted.

If **TR** is returned, the route is hosted by a transit router.', example='TR'),
      status?: string(name='Status', description='The route status. Valid values:

*   **Pending**
*   **Available**
*   **Modifying**', example='Available'),
      type?: string(name='Type', description='The route type. Valid values:

*   **Custom**: custom routes.
*   **System**: system routes.
*   **BGP**: BGP routes.
*   **CEN**: CEN routes.
*   **ECR**: ECR routes.', example='Custom'),
    }
  ](name='RouteEntry')
  }(name='RouteEntrys', description='The information about the route.'),
}

model DescribeRouteEntryListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRouteEntryListResponseBody(name='body'),
}

/**
  * @description Before you call the [DeleteRouteEntry](https://help.aliyun.com/document_detail/36013.html) operation to delete a route, you can call this operation to query the next hop of the route that you want to delete.
  * @param request  the request parameters of DescribeRouteEntryList  DescribeRouteEntryListRequest
  * @return DescribeRouteEntryListResponse
 */
async function describeRouteEntryList(request: DescribeRouteEntryListRequest): DescribeRouteEntryListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRouteEntryList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRouteTableListRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The value of tag N to add to the resource. You can specify up to 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length. It cannot start with `aliyun` or `acs:` and cannot contain `http://` or `https://`.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The type of the route table.

*   **System**
*   **Custom**', example='10', position='Query'),
  regionId: string(name='RegionId', description='The number of entries per page.

This parameter is required.', example='ap-southeast-6', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The details of the route table.', example='rg-acfmxazb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId?: string(name='RouteTableId', description='The tags.', example='vtb-bp145q7glnuzdvzu2****', position='Query'),
  routeTableName?: string(name='RouteTableName', description='The key of tag N to add to the resource. You can specify up to 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='doctest', position='Query'),
  routeTableType?: string(name='RouteTableType', description='The time when the route table was created.', example='System', position='Query'),
  routerId?: string(name='RouterId', description='The region ID of the VPC to which the route table belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='vrt-bp1lhl0taikrteen8****', position='Query'),
  routerType?: string(name='RouterType', description='The ID of the resource group to which the route table to be queried belongs.', example='VRouter', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The detailed information about the route tables.', example='FinanceDept'),
      value?: string(name='Value', description='The ID of the VPC to which the route table belongs.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The page number.', position='Query'),
  vpcId?: string(name='VpcId', description='The tags of the resource.', example='vpc-bp15zckdt37pq72****', position='Query'),
}

model DescribeRouteTableListResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The ID of the route table.', example='1'),
  pageSize?: int32(name='PageSize', description='The type of the cloud resource with which the route table is associated. Valid values:

*   **VSwitch**: vSwitch
*   **Gateway**: IPv4 gateway', example='10'),
  requestId?: string(name='RequestId', description='The ID of the vRouter to which the route table belongs.', example='DC668356-BCB4-42FD-9BC3-FA2B2E04B634'),
  routerTableList?: {
    routerTableListType?: [ 
    {
      associateType?: string(name='AssociateType', description='The tags.', example='VSwitch'),
      creationTime?: string(name='CreationTime', description='The type of the router to which the route table belongs. Valid values:

*   **VRouter**
*   **VBR**', example='2021-08-22T10:40:25Z'),
      description?: string(name='Description', description='The information about the vSwitches.', example='This is Route Table.'),
      gatewayIds?: {
        gatewayIds?: [ string ](name='GatewayIds')
      }(name='GatewayIds', description='The detailed information about the IPv4 gateway.'),
      ownerId?: long(name='OwnerId', description='The value of tag N added to the resource.', example='253460731706911258'),
      resourceGroupId?: string(name='ResourceGroupId', description='The detailed information about the IPv4 gateway.', example='rg-acfmxazb4ph****'),
      routePropagationEnable?: boolean(name='RoutePropagationEnable', description='Whether to receive the propagation routes. Valid Values:

*   **True**: The propagation route is received.

*   **False**: The propagation route is not received.', example='true'),
      routeTableId?: string(name='RouteTableId', description='The key of tag N added to the resource.', example='vtb-bp145q7glnuzdvzu2****'),
      routeTableName?: string(name='RouteTableName', description='The name of the route table.', example='doctest'),
      routeTableType?: string(name='RouteTableType', description='The ID of the vSwitch.', example='System'),
      routerId?: string(name='RouterId', description='The tag added to the route table.', example='vrt-bp1lhl0taikrteen8****'),
      routerType?: string(name='RouterType', description='The detailed information about the IPv4 gateway.', example='VRouter'),
      status?: string(name='Status', description='The name of the route table.', example='Available'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The key of tag N to add to the resource. You can specify up to 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length. It cannot start with aliyun or acs:, and cannot contain http:// or https://.', example='type'),
          value?: string(name='Value', description='The value of tag N to add to the resource. You can specify up to 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length. It cannot start with aliyun or acs: and cannot contain http:// or https://.', example='ingress'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags.'),
      vSwitchIds?: {
        vSwitchId?: [ string ](name='VSwitchId')
      }(name='VSwitchIds', description='The vSwitch IDs.'),
      vpcId?: string(name='VpcId', description='The ID of the resource group to which the route table belongs.', example='vpc-bp15zckdt37pq72****'),
    }
  ](name='RouterTableListType')
  }(name='RouterTableList', description='The description of the route table.'),
  totalCount?: int32(name='TotalCount', description='The ID of the Alibaba Cloud account to which the route table belongs.', example='1'),
}

model DescribeRouteTableListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRouteTableListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRouteTableList  DescribeRouteTableListRequest
  * @return DescribeRouteTableListResponse
 */
async function describeRouteTableList(request: DescribeRouteTableListRequest): DescribeRouteTableListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRouteTableList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRouteTablesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: 1.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the VPC to which the route table belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the route table to be queried belongs.', example='rg-acfmxazccb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId?: string(name='RouteTableId', description='The ID of the route table that you want to query.', example='rtb-bp12mw1f8k3jgygk9****', position='Query'),
  routeTableName?: string(name='RouteTableName', description='The name of the route table that you want to query.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-).', example='RouteTable-1', position='Query'),
  routerId?: string(name='RouterId', description='The ID of the router to which the route table belongs.', example='vtb-bp1krxxzp0c29fmon****', position='Query'),
  routerType?: string(name='RouterType', description='The type of the router to which the route table belongs. Valid values:

*   **VRouter** (default)
*   **VBR**', example='VRouter', position='Query'),
  type?: string(name='Type', description='The route type. Valid values:

*   **Custom**
*   **System**
*   **BGP**
*   **CEN**', example='custom', position='Query'),
  vRouterId?: string(name='VRouterId', description='The ID of the vRouter.', example='vtb-bp1krxxzp0c29fmon****', position='Query'),
}

model DescribeRouteTablesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='DC668356-BCB4-42FD-9BC3-FA2B2E04B634'),
  routeTables?: {
    routeTable?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the route table was created.

The time is displayed in the `YYYY-MM-DDThh:mm:ssZ` format in UTC.', example='2017-08-22T10:40:25Z'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the route table belongs.', example='rg-acfmxazb4ph****'),
      routeEntrys?: {
        routeEntry?: [ 
        {
          description?: string(name='Description', description='The description of the route. The description must be 2 to 256 characters in length. It must start with a letter but cannot start with `http://` or `https://`.', example='RouteEntryDescription'),
          destinationCidrBlock?: string(name='DestinationCidrBlock', description='The destination CIDR block of the route. The destination CIDR block supports IPv4 and IPv6. Make sure that the destination CIDR block meets the following requirements:

*   The destination CIDR block is not 100.64.0.0/10 or a subset of 100.64.0.0/10.
*   The destination CIDR block of each route in the route table is unique.', example='192.168.0.1/24'),
          instanceId?: string(name='InstanceId', description='The ID of the instance associated with the next hop.', example='ri-2zeo3xzyf38r4urzd****'),
          nextHopType?: string(name='NextHopType', description='The type of the next hop. Valid values:

*   **Instance** (default): an Elastic Compute Service (ECS) instance
*   **HaVip**: a high-availability virtual IP address (HAVIP).
*   **VpnGateway**: a VPN gateway
*   **NatGateway**: a NAT gateway
*   **NetworkInterface**: a secondary elastic network interface (ENI)
*   **RouterInterface**: a router interface
*   **IPv6Gateway**: an IPv6 gateway
*   **Attachment**: a transit router', example='local'),
          nextHops?: {
            nextHop?: [ 
            {
              enabled?: int32(name='Enabled', description='Indicates whether the route is available. Valid values:

*   **0**: unavailable
*   **1**: available', example='0'),
              nextHopId?: string(name='NextHopId', description='The ID of the next hop.', example='ri-2zeo3xzyf38r4urzdpvqw'),
              nextHopType?: string(name='NextHopType', description='The type of the next hop. Valid values:

*   **Instance**: an ECS instance
*   **HaVip**: an HAVIP
*   **VpnGateway**: a VPN gateway
*   **NatGateway**: a NAT gateway
*   **NetworkInterface**: a secondary ENI
*   **RouterInterface**: a router interface
*   **IPv6Gateway**: an IPv6 gateway
*   **Attachment**: a transit router', example='HaVip'),
              weight?: int32(name='Weight', description='The weight of the route.', example='80'),
            }
          ](name='NextHop')
          }(name='NextHops', description='The information about the next hop.'),
          routeEntryId?: string(name='RouteEntryId', description='The ID of the route.', example='rte-bp1mnnr2al0naomnpxxx'),
          routeEntryName?: string(name='RouteEntryName', description='The route name.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-).', example='test'),
          routeTableId?: string(name='RouteTableId', description='The route table ID.', example='vtb-bp145q7glnuzdvzu2****'),
          status?: string(name='Status', description='The route status. Valid values:

*   **Pending**
*   **Available**
*   **Modifying**', example='Pending'),
          type?: string(name='Type', description='The route type. Valid values:

*   **Custom**
*   **System**
*   **BGP**
*   **CEN**', example='System'),
        }
      ](name='RouteEntry')
      }(name='RouteEntrys', description='The information about the route.'),
      routeTableId?: string(name='RouteTableId', description='The ID of the route table.', example='vtb-bp145q7glnuzdvzu2****'),
      routeTableType?: string(name='RouteTableType', description='The type of the route table. Valid values:

*   **Custom**
*   **System**', example='System'),
      status?: string(name='Status', description='The status of the route table. Valid values:

*   **Pending**
*   **Available**', example='Available'),
      vRouterId?: string(name='VRouterId', description='The vRouter ID.', example='vrt-bp1lhl0taikrteen8****'),
      vSwitchIds?: {
        vSwitchId?: [ string ](name='VSwitchId')
      }(name='VSwitchIds', description='The vSwitch ID.'),
    }
  ](name='RouteTable')
  }(name='RouteTables', description='The detailed information about the route tables.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeRouteTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRouteTablesResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI DescribeRouteTables is deprecated, please use Vpc::2016-04-28::DescribeRouteTableList instead.  * @param request  the request parameters of DescribeRouteTables  DescribeRouteTablesRequest
  * @return DescribeRouteTablesResponse
 */
// Deprecated
async function describeRouteTables(request: DescribeRouteTablesRequest): DescribeRouteTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRouteTables', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRouterInterfaceAttributeRequest {
  instanceId: string(name='InstanceId', description='The ID of the router interface.

This parameter is required.', example='ri-m5egfc10sednwk2yt****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the router interface belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-qingdao', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRouterInterfaceAttributeResponseBody = {
  accessPointId?: string(name='AccessPointId', description='The ID of the access point.', example='ap-cn-qingdao-ls-A'),
  bandwidth?: int32(name='Bandwidth', description='The bandwidth of the router interface. Unit: Mbit/s.', example='2'),
  businessStatus?: string(name='BusinessStatus', description='The status of the router interface. Valid values:

*   **Normal**
*   **FinancialLocked**
*   **SecurityLocked**', example='Normal'),
  chargeType?: string(name='ChargeType', description='The billing method. Valid values:

*   **AfterPay**: pay-as-you-go
*   **PrePaid**: subscription', example='AfterPay'),
  code?: string(name='Code', description='The HTTP status code.', example='200'),
  connectedTime?: string(name='ConnectedTime', description='The time when the connection was established.', example='2022-04-14T08:58:04Z'),
  creationTime?: string(name='CreationTime', description='The time when the router interface was created.', example='2022-04-14T08:57:24Z'),
  crossBorder?: boolean(name='CrossBorder', description='Indicates whether the connection is a cross-border connection. Valid values:

*   **false**
*   **true**', example='false'),
  description?: string(name='Description', description='The description of the router interface.', example='Peer interface.'),
  endTime?: string(name='EndTime', description='The end of the time range during which data was queried.', example='2999-09-08T16:00:00Z'),
  fastLinkMode?: string(name='FastLinkMode', description='Indicates whether the VBR that is created in the Fast Link mode is uplinked to the router interface. The Fast Link mode helps automatically connect router interfaces that are created for the VBR and its peer VPC. Valid values:

*   **true**
*   **false** (default)

> 

*   This parameter takes effect only when **RouterType** is set to **VBR** and **OppositeRouterType** is set to **VRouter**.

*   When **FastLinkMode** is set to **true**, **Role** must be set to **InitiatingSide**. **AccessPointId**, **OppositeRouterType**, **OpppsiteRouterId**, and **OppositeInterfaceOwnerId** are required.', example='false'),
  gmtModified?: string(name='GmtModified', description='The time when the router interface was modified.', example='2022-04-28T10:02:12Z'),
  hasReservationData?: string(name='HasReservationData', description='Indicates whether renewal data is included. Valid values:

*   **false**
*   **true**', example='false'),
  hcRate?: int32(name='HcRate', description='The rate of health checks. Unit: seconds. The value indicates the interval at which probe packets are sent during a health check.', example='2'),
  hcThreshold?: int32(name='HcThreshold', description='The healthy threshold. This value indicates the number of probe packets that are sent during a health check. Unit: packets.', example='8'),
  healthCheckSourceIp?: string(name='HealthCheckSourceIp', description='The source IP address that is used for the health check.', example='1.1.XX.XX'),
  healthCheckStatus?: string(name='HealthCheckStatus', description='The status of the health check. Valid values:

*   **Abnormal**
*   **Normal**
*   **NoRedundantRoute**
*   **NoHealthCheckConfig**', example='normal'),
  healthCheckTargetIp?: string(name='HealthCheckTargetIp', description='The destination IP address that is used for the health check.', example='2.2.XX.XX'),
  message?: string(name='Message', description='The response parameters.', example='successful'),
  name?: string(name='Name', description='The name of the router interface.', example='RouterInterface1'),
  oppositeAccessPointId?: string(name='OppositeAccessPointId', description='The ID of the peer access point.', example='ap-cn-qingdao-ls-B'),
  oppositeBandwidth?: int32(name='OppositeBandwidth', description='The maximum bandwidth of the peer router interface. Unit: Mbit/s.', example='0'),
  oppositeInterfaceBusinessStatus?: string(name='OppositeInterfaceBusinessStatus', description='The service status of the peer router interface. Valid values:

*   **Normal**
*   **FinancialLocked**
*   **SecurityLocked**', example='Normal'),
  oppositeInterfaceId?: string(name='OppositeInterfaceId', description='The ID of the peer router interface.', example='ri-bp1xkrzttximaoxbl****'),
  oppositeInterfaceOwnerId?: string(name='OppositeInterfaceOwnerId', description='The ID of the Alibaba Cloud account to which the peer router interface belongs.', example='1321932713****'),
  oppositeInterfaceSpec?: string(name='OppositeInterfaceSpec', description='The specification of the peer router interface. Valid values:

*   **Mini.2**: 2 Mbit/s
*   **Mini.5**: 5 Mbit/s
*   **Small.1**: 10 Mbit/s
*   **Small.2**: 20 Mbit/s
*   **Small.5**: 50 Mbit/s
*   **Middle.1**: 100 Mbit/s
*   **Middle.2**: 200 Mbit/s
*   **Middle.5**: 500 Mbit/s
*   **Large.1**: 1,000 Mbit/s
*   **Large.2**: 2,000 Mbit/s
*   **Large.5**: 5,000 Mbit/s
*   **Xlarge.1**: 10,000 Mbit/s
*   **Negative**: not applicable', example='Negative'),
  oppositeInterfaceStatus?: string(name='OppositeInterfaceStatus', description='The status of the peer router interface. Valid values:

*   **Idle**
*   **AcceptingConnecting**
*   **Connecting**
*   **Activating**
*   **Active**
*   **Modifying**
*   **Deactivating**
*   **Inactive**
*   **Deleting**
*   **Deleted**', example='Active'),
  oppositeRegionId?: string(name='OppositeRegionId', description='The region ID of the peer router interface.', example='cn-hangzhou'),
  oppositeRouterId?: string(name='OppositeRouterId', description='The ID of the router to which the peer router interface belongs.', example='vrt-bp11xvy6lb9photuu****'),
  oppositeRouterType?: string(name='OppositeRouterType', description='The type of the router to which the peer router interface belongs. Valid values:

*   **VRouter**
*   **VBR**', example='VRouter'),
  oppositeVpcInstanceId?: string(name='OppositeVpcInstanceId', description='The ID of the peer VPC.', example='vpc-bp1b49rqrybk45nio****'),
  requestId?: string(name='RequestId', description='The request ID.', example='01818199-04F6-47F4-9ADF-7CC824CF57A4'),
  reservationActiveTime?: string(name='ReservationActiveTime', description='The time when the renewal takes effect.', example='2022-06-11T16:00:00Z'),
  reservationBandwidth?: string(name='ReservationBandwidth', description='The maximum bandwidth after the renewal takes effect. Unit: Mbit/s.', example='100'),
  reservationInternetChargeType?: string(name='ReservationInternetChargeType', description='The metering method that is used after the renewal takes effect. Valid values: If **PayByBandwidth** is returned, it indicates that the Express Connect circuit is billed on a pay-by-bandwidth basis.', example='PayByBandwidth'),
  reservationOrderType?: string(name='ReservationOrderType', description='The type of the renewal order. Only **RENEW** may be returned, which indicates that the order is placed for service renewal.', example='RENEW'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.

For more information about resource groups, see [What is a resource group?](https://help.aliyun.com/document_detail/94475.html)', example='rg-acfmxazb4ph6aiy****'),
  role?: string(name='Role', description='The role of the router interface in the peering connection.', example='InitiatingSide'),
  routerId?: string(name='RouterId', description='The ID of the router to which the router interface belongs.', example='vbr-m5ex0xf63xk8s5bob****'),
  routerInterfaceId?: string(name='RouterInterfaceId', description='The ID of the router interface.', example='ri-m5egfc10sednwk2yt****'),
  routerType?: string(name='RouterType', description='The type of the router to which the route table belongs. Valid values:

*   **VRouter**
*   **VBR**', example='VRouter'),
  spec?: string(name='Spec', description='The specification of the router interface. Valid values:

*   **Mini.2**: 2 Mbit/s
*   **Mini.5**: 5 Mbit/s
*   **Small.1**: 10 Mbit/s
*   **Small.2**: 20 Mbit/s
*   **Small.5**: 50 Mbit/s
*   **Middle.1**: 100 Mbit/s
*   **Middle.2**: 200 Mbit/s
*   **Middle.5**: 500 Mbit/s
*   **Large.1**: 1,000 Mbit/s
*   **Large.2**: 2,000 Mbit/s
*   **Large.5**: 5,000 Mbit/s
*   **Xlarge.1**: 10,000 Mbit/s', example='Mini.2'),
  status?: string(name='Status', description='The status of the router interface. Valid values:

*   **Idle**
*   **AcceptingConnecting**
*   **Connecting**
*   **Activating**
*   **Active**
*   **Modifying**
*   **Deactivating**
*   **Inactive**
*   **Deleting**', example='Active'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values: true and false.', example='true'),
  tags?: {
    tags?: [ 
    {
      key?: string(name='Key', description='The key of tag N added to the resource. You must enter at least one tag key and at most 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 64 characters in length and can contain digits, periods (.), underscores (_), and hyphens (-). It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N added to the resource. You can specify at most 20 tag values. The tag value can be an empty string.

It can be up to 128 characters in length and can contain digits, periods (.), underscores (_), and hyphens (-). It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tags')
  }(name='Tags', description='The tag of the resource.'),
  vpcInstanceId?: string(name='VpcInstanceId', description='The ID of the virtual private cloud (VPC) to which the router interface belongs.', example='vpc-bp1b49rqrybk45nio****'),
}

model DescribeRouterInterfaceAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRouterInterfaceAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRouterInterfaceAttribute  DescribeRouterInterfaceAttributeRequest
  * @return DescribeRouterInterfaceAttributeResponse
 */
async function describeRouterInterfaceAttribute(request: DescribeRouterInterfaceAttributeRequest): DescribeRouterInterfaceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRouterInterfaceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRouterInterfacesRequest {
  filter?: [ 
    {
      key?: string(name='Key', description='The filter conditions. You can specify up to five filter conditions. The following filter conditions are supported:

*   **RouterInterfaceId**: the ID of the router interface.
*   **RouterId**: the ID of the router.
*   **RouterType**: the router type. Valid values: **VRouter** and **VBR**.
*   **RouterInterfaceOwnerId**: the ID of the Alibaba Cloud account to which the router interface belongs.
*   **OppositeInterfaceId**: the ID of the peer router interface.
*   **OppositeRouterType**: the type of the peer router interface. Valid values: **VRouter** and **VBR**.
*   **OppositeRouterId**: the ID of the peer router.
*   **OppositeInterfaceOwnerId**: the ID of the Alibaba Cloud account to which the peer router interface belongs.
*   **Status**: the status of the router interface.
*   **Name**: the name of the router interface.

>  The logical operator among multiple values in a filter condition is OR. In this case, the filter condition is met if one of the values is matched. The logical operator among filter conditions is AND. Only routers that meet all the filter conditions are queried.', example='Filter.1.Status'),
      value?: [ string ](name='Value', description='Specifies the value in the filter condition based on the key. You can specify multiple filter values for one key. The logical operator among filter values is OR. If one filter value is matched, the filter condition is matched.', example='Filter.1.Active 1'),
    }
  ](name='Filter', description='The filter information.', position='Query'),
  includeReservationData?: boolean(name='IncludeReservationData', description='Specifies whether renewal data is included. Valid values:

*   **true**
*   **false** (default)', example='false', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the router interface.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource Group ID.

For more information about resource groups, please refer to [What is a Resource Group?](https://help.aliyun.com/document_detail/94475.html)', example='rg-acfmxazb4ph6aiy****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of the resource tag. At least one tag key must be entered, and a maximum of 20 tag keys are supported. If this value needs to be passed in, it cannot be an empty string.

A tag key can support up to 128 characters, cannot start with \\"aliyun\\" or \\"acs:\\", and cannot contain \\"http://\\" or \\"https://\\".', example='FinanceDept'),
      value?: string(name='Value', description='The value of the resource tag. A maximum of 20 tag values can be entered. If this value needs to be passed in, an empty string can be entered.

A maximum of 128 characters are supported, it cannot start with \\"aliyun\\" or \\"acs:\\", and it cannot contain \\"http://\\" or \\"https://\\".', example='FinanceJoshua'),
    }
  ](name='Tags', description='The tags of the resource.', position='Query'),
}

model DescribeRouterInterfacesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='C7F6FCBD-F9CC-4501-8EF3-CDC9577CAE45'),
  routerInterfaceSet?: {
    routerInterfaceType?: [ 
    {
      accessPointId?: string(name='AccessPointId', description='The ID of the access point.', example='ap-cn-shanghaiSZ-****'),
      bandwidth?: int32(name='Bandwidth', description='The bandwidth of the router interface. Unit: Mbit/s.', example='10'),
      businessStatus?: string(name='BusinessStatus', description='The service status of the router interface. Valid values:

*   **Normal**
*   **FinancialLocked**
*   **SecurityLocked**', example='Normal'),
      chargeType?: string(name='ChargeType', description='The billing method.', example='PayByTraffic'),
      connectedTime?: string(name='ConnectedTime', description='The time when the connection was established.

The time follows the ISO8601 standard in the `YYYY-MM-DDThh:mmZ` format. The time is displayed in UTC.', example='2021-06-08T12:20:55'),
      creationTime?: string(name='CreationTime', description='The time when the route table was created.

The time follows the ISO8601 standard in the `YYYY-MM-DDThh:mmZ` format. The time is displayed in UTC.', example='2021-06-08T12:20:55'),
      crossBorder?: boolean(name='CrossBorder', description='Indicates whether the connection is a cross-border connection.', example='false'),
      description?: string(name='Description', description='The description of the router interface.', example='The description of the router interface.'),
      endTime?: string(name='EndTime', description='The end of the time range during which data was queried.

The time follows the ISO8601 standard in the `YYYY-MM-DDThh:mmZ` format. The time is displayed in UTC.', example='2021-06-08T12:20:55'),
      fastLinkMode?: boolean(name='FastLinkMode', description='Indicates whether the VBR that is created in the Fast Link mode is uplinked to the router interface. The Fast Link mode helps automatically connect router interfaces that are created for the VBR and its peer VPC. Valid values:

*   **true**
*   **false** (default)', example='false'),
      hasReservationData?: string(name='HasReservationData', description='Indicates whether renewal data is included.', example='false'),
      hcRate?: int32(name='HcRate', description='The rate of heath checks.', example='1'),
      hcThreshold?: int32(name='HcThreshold', description='The health check threshold.', example='2'),
      healthCheckSourceIp?: string(name='HealthCheckSourceIp', description='The source IP address that is used for the health check.', example='116.62.XX.XX'),
      healthCheckTargetIp?: string(name='HealthCheckTargetIp', description='The destination IP address that is used for the health check.', example='116.62.XX.XX'),
      ipv6Status?: string(name='Ipv6Status', description='Indicates whether protection against malicious IPv6 traffic is enabled. Valid values:

*   **on**
*   **off**
*   **unsupport**', example='on'),
      name?: string(name='Name', description='The custom name.', example='test'),
      oppositeAccessPointId?: string(name='OppositeAccessPointId', description='The ID of the peer access point.', example='ap-cn-shanghaiSZ-****'),
      oppositeBandwidth?: int32(name='OppositeBandwidth', description='The maximum bandwidth of the peer router interface. Unit: Mbit/s.', example='12'),
      oppositeInterfaceBusinessStatus?: string(name='OppositeInterfaceBusinessStatus', description='The service status of the peer router interface.', example='Normal'),
      oppositeInterfaceId?: string(name='OppositeInterfaceId', description='The ID of the peer router interface.', example='ri-bp1itx13bwe6f2wfh****'),
      oppositeInterfaceOwnerId?: string(name='OppositeInterfaceOwnerId', description='The ID of the Alibaba Cloud account to which the peer router interface belongs.', example='271598332402530847'),
      oppositeInterfaceSpec?: string(name='OppositeInterfaceSpec', description='The specification of the peer router interface.', example='Large'),
      oppositeInterfaceStatus?: string(name='OppositeInterfaceStatus', description='The status of the peer router interface.', example='Normal'),
      oppositeRegionId?: string(name='OppositeRegionId', description='The region ID of the peer router interface.', example='cn-shanghai'),
      oppositeRouterId?: string(name='OppositeRouterId', description='The ID of the router to which the peer router interface belongs.', example='vrt-bp1d3bxtdv68tfd7g****'),
      oppositeRouterType?: string(name='OppositeRouterType', description='The type of the router to which the peer router interface belongs.', example='VRouter'),
      oppositeVpcInstanceId?: string(name='OppositeVpcInstanceId', description='The ID of the peer VPC.', example='vpc-bp1qpo0kug3a20qqe****'),
      reservationActiveTime?: string(name='ReservationActiveTime', description='The time when the renewal takes effect.

The time follows the ISO8601 standard in the `YYYY-MM-DDThh:mmZ` format. The time is displayed in UTC.', example='2021-03-11T16:00:00Z'),
      reservationBandwidth?: string(name='ReservationBandwidth', description='The maximum bandwidth after the renewal takes effect. Unit: Mbit/s.', example='10'),
      reservationInternetChargeType?: string(name='ReservationInternetChargeType', description='The metering method that is used after the renewal takes effect. Valid values:', example='PayByBandwidth'),
      reservationOrderType?: string(name='ReservationOrderType', description='The type of the renewal order. Valid values:', example='RENEWCHANGE'),
      resourceGroupId?: string(name='ResourceGroupId', description='Resource Group ID.

For more information about resource groups, please refer to [What is a Resource Group?](https://help.aliyun.com/document_detail/94475.html)', example='rg-acfmxazb4ph6aiy****'),
      role?: string(name='Role', description='Indicates whether the router interface is the initiator or acceptor of the peering connection.', example='InitiatingSide'),
      routerId?: string(name='RouterId', description='The ID of the router to which the route entry belongs.', example='vrt-bp1d3bxtdv68tfd7g****'),
      routerInterfaceId?: string(name='RouterInterfaceId', description='The ID of the router interface.', example='ri-2zenfgfpyu3v93koa****'),
      routerType?: string(name='RouterType', description='The type of the router to which the route table belongs. Valid values:

*   **VRouter**
*   **VBR**', example='VRouter'),
      spec?: string(name='Spec', description='The specification of the router interface.', example='Large'),
      status?: string(name='Status', description='The status of the router interface.', example='active'),
      tags?: {
        tags?: [ 
        {
          key?: string(name='Key', description='The key of the resource tag. At least one tag key must be entered, and a maximum of 20 tag keys are supported. If this value needs to be passed in, it cannot be an empty string.

A tag key can support up to 128 characters, cannot start with \\"aliyun\\" or \\"acs:\\", and cannot contain \\"http://\\" or \\"https://\\".', example='FinanceDept'),
          value?: string(name='Value', description='The value of the resource tag. A maximum of 20 tag values can be entered. If this value needs to be passed in, an empty string can be entered.

A maximum of 128 characters are supported, it cannot start with \\"aliyun\\" or \\"acs:\\", and it cannot contain \\"http://\\" or \\"https://\\".', example='FinanceJoshua'),
        }
      ](name='Tags')
      }(name='Tags', description='The tags of the resource.'),
      vpcInstanceId?: string(name='VpcInstanceId', description='The ID of the local virtual private cloud (VPC) in the peering connection.', example='vpc-2ze3tq4uxhysg717x****'),
    }
  ](name='RouterInterfaceType')
  }(name='RouterInterfaceSet', description='The details of the router interface.'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
}

model DescribeRouterInterfacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRouterInterfacesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRouterInterfaces  DescribeRouterInterfacesRequest
  * @return DescribeRouterInterfacesResponse
 */
async function describeRouterInterfaces(request: DescribeRouterInterfacesRequest): DescribeRouterInterfacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRouterInterfaces', 'POST', '/', 'json', false, 'json', request);
}

model DescribeServerRelatedGlobalAccelerationInstancesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  serverId: string(name='ServerId', description='The ID of the backend service instance.

This parameter is required.', example='i-12s3sdf****', position='Query'),
  serverType?: string(name='ServerType', description='The type of the backend service instance. Valid values:

*   **EcsInstance** (default): Elastic Compute Service (ECS)
*   **SlbInstance**: Server Load Balancer (SLB)', example='EcsInstance', position='Query'),
}

model DescribeServerRelatedGlobalAccelerationInstancesResponseBody = {
  globalAccelerationInstances?: {
    globalAccelerationInstance?: [ 
    {
      globalAccelerationInstanceId?: string(name='GlobalAccelerationInstanceId', description='The ID of the GA instance.', example='ga-t4nku6vv9****'),
      ipAddress?: string(name='IpAddress', description='The public IP address of the GA instance.', example='12.34.56.78'),
      regionId?: string(name='RegionId', description='The region ID of the GA instance.', example='ap-southeast-1'),
      serverIpAddress?: string(name='ServerIpAddress', description='The IP address of the backend service.', example='172.24.52.234'),
    }
  ](name='GlobalAccelerationInstance')
  }(name='GlobalAccelerationInstances', description='The list of GA instances.'),
  requestId?: string(name='RequestId', description='The request ID.', example='A8252014-D8DE-4D85-AF35-AFEXXXXXXX'),
}

model DescribeServerRelatedGlobalAccelerationInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeServerRelatedGlobalAccelerationInstancesResponseBody(name='body'),
}

/**
  * @description > You can call this operation to query only dedicated-bandwidth GA instances.
  * @param request  the request parameters of DescribeServerRelatedGlobalAccelerationInstances  DescribeServerRelatedGlobalAccelerationInstancesRequest
  * @return DescribeServerRelatedGlobalAccelerationInstancesResponse
 */
async function describeServerRelatedGlobalAccelerationInstances(request: DescribeServerRelatedGlobalAccelerationInstancesRequest): DescribeServerRelatedGlobalAccelerationInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeServerRelatedGlobalAccelerationInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSnatTableEntriesRequest {
  natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.

>  You must specify at least one of **SnatTableId** and **NatGatewayId**.', example='ngw-bp1uewa15k4iy5770****', position='Query'),
  networkInterfaceIds?: [ string ](name='NetworkInterfaceIds', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where you want to create the NAT gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  snatEntryId?: string(name='SnatEntryId', description='The ID of the SNAT entry.', example='snat-8vbae8uqh7rjpk7d2****', position='Query'),
  snatEntryName?: string(name='SnatEntryName', description='The name of the SNAT entry.

The name must be 2 to 128 characters in length, and can contain digits, underscores (_), and hyphens (-). The name must start with a letter.', example='SnatEntry-1', position='Query'),
  snatIp?: string(name='SnatIp', description='*   When you query SNAT entries of Internet NAT gateways, this parameter specifies the EIP in an SNAT entry.
*   When you query SNAT entries of VPC NAT gateways, this parameter specifies the NAT IP address in an SNAT entry.', example='116.22.XX.XX', position='Query'),
  snatTableId?: string(name='SnatTableId', description='The ID of the SNAT table.

>  You must specify at least one of **SnatTableId** and **NatGatewayId**.', example='stb-8vbczigrhop8x5u3t****', position='Query'),
  sourceCIDR?: string(name='SourceCIDR', description='The source CIDR block specified in the SNAT entry.', example='116.22.XX.XX/24', position='Query'),
  sourceVSwitchId?: string(name='SourceVSwitchId', description='The ID of the vSwitch.

*   When you query SNAT entries of Internet NAT gateways, this parameter specifies that Elastic Compute Service (ECS) instances in the vSwitch can use SNAT entries to access the Internet.
*   When you query SNAT entries of virtual private cloud (VPC) NAT gateways, this parameter specifies that ECS instances in the vSwitch can use SNAT entries to access external networks.', example='vsw-3xbjkhjshjdf****', position='Query'),
}

model DescribeSnatTableEntriesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='5'),
  requestId?: string(name='RequestId', description='The request ID.', example='6D7E89B1-1C5B-412B-8585-4908E222EED5'),
  snatTableEntries?: {
    snatTableEntry?: [ 
    {
      eipAffinity?: string(name='EipAffinity'),
      natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway to which the SNAT entry belongs.', example='ngw-bp1uewa15k4iy5770****'),
      networkInterfaceId?: string(name='NetworkInterfaceId'),
      snatEntryId?: string(name='SnatEntryId', description='The ID of the SNAT entry.', example='snat-kmd6nv8fy****'),
      snatEntryName?: string(name='SnatEntryName', description='The name of the SNAT entry.', example='SnatEntry-1'),
      snatIp?: string(name='SnatIp', description='*   When you query SNAT entries of Internet NAT gateways, this parameter indicates the EIP in an SNAT entry.
*   When you query SNAT entries of VPC NAT gateways, this parameter indicates the NAT IP address in an SNAT entry.', example='116.22.XX.XX'),
      snatTableId?: string(name='SnatTableId', description='The ID of the SNAT table to which the SNAT entry belongs.', example='stb-gz3r3odawdgffde****'),
      sourceCIDR?: string(name='SourceCIDR', description='The source CIDR block specified in the SNAT entry.', example='116.22.XX.XX/24'),
      sourceVSwitchId?: string(name='SourceVSwitchId', description='*   When you query SNAT entries of Internet NAT gateways, this parameter indicates the ID of the vSwitch that uses SNAT to access the Internet.
*   When you query SNAT entries of VPC NAT gateways, this parameter indicates the ID of the vSwitch that uses SNAT to access external networks.', example='vsw-3xbdsffvfgdfds****'),
      status?: string(name='Status', description='The status of the SNAT entry. Valid values:

*   **Pending**
*   **Available**
*   **Deleting**', example='Pending'),
    }
  ](name='SnatTableEntry')
  }(name='SnatTableEntries', description='Details of SNAT entries.'),
  totalCount?: int32(name='TotalCount', description='The number of returned entries.', example='1'),
}

model DescribeSnatTableEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSnatTableEntriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSnatTableEntries  DescribeSnatTableEntriesRequest
  * @return DescribeSnatTableEntriesResponse
 */
async function describeSnatTableEntries(request: DescribeSnatTableEntriesRequest): DescribeSnatTableEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSnatTableEntries', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSslVpnClientCertRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the SSL client certificate. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sslVpnClientCertId: string(name='SslVpnClientCertId', description='The ID of the SSL client certificate that you want to query.

This parameter is required.', example='vsc-bp17r58rjf5r1gjyr****', position='Query'),
}

model DescribeSslVpnClientCertResponseBody = {
  caCert?: string(name='CaCert', description='The CA certificate.', example='CA certificate'),
  clientCert?: string(name='ClientCert', description='The client certificate.', example='Client certificate'),
  clientConfig?: string(name='ClientConfig', description='The client configuration.', example='Client configuration'),
  clientKey?: string(name='ClientKey', description='The client key.', example='The key of the client'),
  createTime?: long(name='CreateTime', description='The timestamp that indicates when the SSL client certificate was created. Unit: milliseconds.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1552550980000'),
  endTime?: long(name='EndTime', description='The timestamp that indicates when the SSL client certificate expires. Unit: milliseconds.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1647158980000'),
  name?: string(name='Name', description='The name of the SSL client certificate.', example='nametest'),
  regionId?: string(name='RegionId', description='The ID of the region where the SSL client certificate is created.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The request ID.', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the SSL client certificate belongs.

The SSL client certificate and the SSL server associated with the SSL client certificate belong to the same resource group. You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/158855.html) operation to query resource groups.', example='rg-acfmzs372yg****'),
  sslVpnClientCertId?: string(name='SslVpnClientCertId', description='The ID of the SSL client certificate.', example='vsc-bp13k5mp4tg8v3z9b****'),
  sslVpnServerId?: string(name='SslVpnServerId', description='The ID of the SSL server.', example='vss-bp155e9yclsg1xgq4****'),
  status?: string(name='Status', description='The status of the SSL client certificate. Valid values:

*   **expiring-soon**
*   **normal**
*   **expired**', example='normal'),
}

model DescribeSslVpnClientCertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSslVpnClientCertResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSslVpnClientCert  DescribeSslVpnClientCertRequest
  * @return DescribeSslVpnClientCertResponse
 */
async function describeSslVpnClientCert(request: DescribeSslVpnClientCertRequest): DescribeSslVpnClientCertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSslVpnClientCert', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSslVpnClientCertsRequest {
  name?: string(name='Name', description='The name of the SSL client certificate.', example='cert1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **10**. Valid values: **1** to **50**.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the SSL client certificate.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the SSL client certificate belongs.

The SSL client certificate is the same as the resource group of the SSL server associated with it.
You can call the [DescribeSslVpnServers](https://help.aliyun.com/document_detail/2794078.html) operation to query the ID of the resource group to which the SSL server belongs.', example='rg-acfmzs372yg****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sslVpnClientCertId?: string(name='SslVpnClientCertId', description='The ID of the SSL client certificate.', example='vsc-bp1n8wcf134yl0osr****', position='Query'),
  sslVpnServerId?: string(name='SslVpnServerId', description='The ID of the SSL server.', example='vss-bp18q7hzj6largv4v****', position='Query'),
}

model DescribeSslVpnClientCertsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
  sslVpnClientCertKeys?: {
    sslVpnClientCertKey?: [ 
    {
      createTime?: long(name='CreateTime', description='The timestamp that indicates when the SSL client certificate was created. Unit: millisecond.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1492747187000'),
      endTime?: long(name='EndTime', description='The timestamp that indicates when the SSL client certificate expires. Unit: millisecond.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1494966335000'),
      name?: string(name='Name', description='The name of the SSL client certificate.', example='cert1'),
      regionId?: string(name='RegionId', description='The region where the SSL client certificate is created.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the SSL client certificate belongs.

You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/158855.html) operation to query the resource group information.', example='rg-acfmzs372yg****'),
      sslVpnClientCertId?: string(name='SslVpnClientCertId', description='The ID of the SSL client certificate.', example='vsc-bp1n8wcf134yl0osr****'),
      sslVpnServerId?: string(name='SslVpnServerId', description='The ID of the SSL server.', example='vss-bp18q7hzj6largv4v****'),
      status?: string(name='Status', description='The status of the SSL client certificate. Valid values:

*   **expiring-soon**
*   **normal**
*   **expired**', example='normal'),
    }
  ](name='SslVpnClientCertKey')
  }(name='SslVpnClientCertKeys', description='The information about the SSL client certificates.'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
}

model DescribeSslVpnClientCertsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSslVpnClientCertsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSslVpnClientCerts  DescribeSslVpnClientCertsRequest
  * @return DescribeSslVpnClientCertsResponse
 */
async function describeSslVpnClientCerts(request: DescribeSslVpnClientCertsRequest): DescribeSslVpnClientCertsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSslVpnClientCerts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSslVpnClientsRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: **1** to **50**. Default value: **10**.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VPN gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='eu-central-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', description='The ID of the VPN gateway.

This parameter is required.', example='vpn-gw8gfb947ctddabja****', position='Query'),
}

model DescribeSslVpnClientsResponseBody = {
  clientInfoList?: [ 
    {
      commonName?: string(name='CommonName', description='The SSL client certificate used by the client.

>  If the client uses two-factor authentication to establish an SSL-VPN connection to Alibaba Cloud, the return value is the username of the client.', example='CN=vsc-gw8gkh6gtilf1whgc****'),
      connectedTime?: long(name='ConnectedTime', description='The timestamp that indicates when the client connected to Alibaba Cloud through an SSL-VPN connection. Unit: milliseconds.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1670985008000'),
      ip?: string(name='Ip', description='The actual public IP address used by the client when the client established an SSL-VPN connection to Alibaba Cloud.', example='8.XX.XX.15'),
      port?: string(name='Port', description='The port used by the client when the client established an SSL-VPN connection to Alibaba Cloud.', example='4****'),
      privateIp?: string(name='PrivateIp', description='The private IP address allocated to the client by the VPN gateway when the client established an SSL-VPN connection to Alibaba Cloud.', example='10.10.10.10'),
      receiveBytes?: long(name='ReceiveBytes', description='The amount of data transferred from the client to the VPN gateway through the SSL-VPN connection. Unit: bytes.', example='60782'),
      sendBytes?: long(name='SendBytes', description='The amount of data transferred from the VPN gateway to the client through the SSL-VPN connection. Unit: bytes.', example='57144'),
      status?: string(name='Status', description='The status of the SSL-VPN connection.

The value is set to **online**, which indicates that the client has connected to Alibaba Cloud through an SSL-VPN connection.', example='online'),
    }
  ](name='ClientInfoList', description='The list of clients.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  regionId?: string(name='RegionId', description='The region ID.', example='eu-central-1'),
  requestId?: string(name='RequestId', description='The request ID.', example='885E117D-06A9-38A3-8DD2-40BDAC429FFC'),
  totalCount?: int32(name='TotalCount', description='The number of returned entries.', example='1'),
  vpnGatewayId?: string(name='VpnGatewayId', description='The ID of the VPN gateway.', example='vpn-gw8gfb947ctddabja****'),
}

model DescribeSslVpnClientsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSslVpnClientsResponseBody(name='body'),
}

/**
  * @description If your VPN gateway was created before December 10, 2022, you must upgrade your VPN gateway to the latest version before you can view connection information about SSL clients. For more information, see [Upgrade a VPN gateway](https://help.aliyun.com/document_detail/2671058.html).
  * If your VPN gateway was created after December 10, 2022, you can view connection information about SSL clients by default.
  * @param request  the request parameters of DescribeSslVpnClients  DescribeSslVpnClientsRequest
  * @return DescribeSslVpnClientsResponse
 */
async function describeSslVpnClients(request: DescribeSslVpnClientsRequest): DescribeSslVpnClientsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSslVpnClients', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSslVpnServersRequest {
  name?: string(name='Name', description='The SSL server name.

The name must be 1 to 100 characters in length and cannot start with `http://` or `https://`.', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the SSL server.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the SSL server belongs.

The SSL server has the same resource group as its associated VPN gateway instance.

You can call the [DescribeVpnGateway](https://help.aliyun.com/document_detail/2526915.html) operation to query the ID of the resource group to which the VPN gateway instance belongs.', example='rg-acfmzs372yg****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sslVpnServerId?: string(name='SslVpnServerId', description='The ID of the SSL server.', example='vss-bp15j3du13gq1dgey****', position='Query'),
  vpnGatewayId?: string(name='VpnGatewayId', description='The ID of the VPN gateway.', example='vpn-bp1on0xae9d771ggi****', position='Query'),
}

model DescribeSslVpnServersResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='D350187B-EA41-4577-950B-95434C8302E1'),
  sslVpnServers?: {
    sslVpnServer?: [ 
    {
      cipher?: string(name='Cipher', description='The encryption algorithm.', example='AES-128-CBC'),
      clientIpPool?: string(name='ClientIpPool', description='The client CIDR block.', example='10.10.1.0/24'),
      compress?: boolean(name='Compress', description='Indicates whether data compression is enabled. Valid values:

*   **true**
*   **false** (default)', example='false'),
      connections?: int32(name='Connections', description='The total number of current connections.', example='0'),
      createTime?: long(name='CreateTime', description='The timestamp generated when the SSL-VPN server was created.', example='1613800884000'),
      enableMultiFactorAuth?: boolean(name='EnableMultiFactorAuth', description='Indicates whether two-factor authentication is enabled.

*   **true**
*   **false** (default)', example='true'),
      iDaaSApplicationId?: string(name='IDaaSApplicationId', example='app_my6g4qmvnwxzj2f****'),
      iDaaSInstanceId?: string(name='IDaaSInstanceId', description='The ID of the IDaaS instance.', example='idaas-cn-hangzhou-****'),
      iDaaSInstanceVersion?: string(name='IDaaSInstanceVersion', example='EIAM 2.0'),
      iDaaSRegionId?: string(name='IDaaSRegionId', description='The region ID of the IDaaS instance.', example='cn-hangzhou'),
      internetIp?: string(name='InternetIp', description='The public IP address of the VPN gateway.', example='47.5.XX.XX'),
      localSubnet?: string(name='LocalSubnet', description='The local CIDR block.', example='192.168.0.0/24'),
      maxConnections?: int32(name='MaxConnections', description='The maximum number of connections.', example='5'),
      name?: string(name='Name', description='The name of the SSL-VPN server.', example='test'),
      port?: int32(name='Port', description='The port that is used by the SSL-VPN server.', example='1194'),
      proto?: string(name='Proto', description='The protocol that is used by the SSL-VPN server.', example='UDP'),
      regionId?: string(name='RegionId', description='The region ID of the SSL-VPN server.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID of the SSL-VPN server.

You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/158855.html) operation to query resource groups.', example='rg-acfmzs372yg****'),
      sslVpnServerId?: string(name='SslVpnServerId', description='The ID of the SSL-VPN server.', example='vss-bp15j3du13gq1dgey****'),
      vpnGatewayId?: string(name='VpnGatewayId', description='The ID of the VPN gateway.', example='vpn-bp1on0xae9d771ggi****'),
    }
  ](name='SslVpnServer')
  }(name='SslVpnServers', description='The detailed information about the SSL-VPN server.'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
}

model DescribeSslVpnServersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSslVpnServersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeSslVpnServers  DescribeSslVpnServersRequest
  * @return DescribeSslVpnServersResponse
 */
async function describeSslVpnServers(request: DescribeSslVpnServersRequest): DescribeSslVpnServersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSslVpnServers', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagKeysRequest {
  keyword?: string(name='Keyword', description='The tag keys.', example='keyword', position='Query'),
  maxResult?: int32(name='MaxResult', description='The number of entries to return on each page. Valid values: 1 to 50. Default value: 50.', example='50', maximum=500, position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If this is your first query or no next query is to be sent, ignore this parameter.
*   If a subsequent query is to be sent, set the parameter to the value of NextToken that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the resource.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', description='The resource type. Valid values:

*   **VPC**: virtual private cloud (VPC)
*   **VSWITCH**: vSwitch
*   **ROUTETABLE**: route table
*   **EIP**: elastic IP address (EIP)
*   **VpnGateway**: VPN gateway
*   **NATGATEWAY**: NAT gateway
*   **COMMONBANDWIDTHPACKAGE**: EIP bandwidth plan', example='VPC', position='Query'),
}

model DescribeTagKeysResponseBody = {
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If the value of **NextToken** is not returned, it indicates that no next query is to be sent.
*   If a value of **NextToken** is returned, the value is the token that is used for the subsequent query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DE65F6B7-7566-4802-9007-96F2494AC512'),
  tagKeys?: {
    tagKey?: [ 
    {
      tagKey?: string(name='TagKey', description='The tag key.', example='FinanceDept'),
      type?: string(name='Type', description='The type of the tag key. Valid values:

*   **Custom**: custom
*   **System**: system', example='Custom'),
    }
  ](name='TagKey')
  }(name='TagKeys', description='The list of tag keys.'),
}

model DescribeTagKeysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagKeysResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeTagKeys  DescribeTagKeysRequest
  * @return DescribeTagKeysResponse
 */
async function describeTagKeys(request: DescribeTagKeysRequest): DescribeTagKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagKeys', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagKeysForExpressConnectRequest {
  keyword?: string(name='Keyword', description='The keyword of the tag. Fuzzy match is supported. You can specify a keyword to query all tags that contain the keyword.', example='keyword', position='Query'),
  maxResult?: int32(name='MaxResult', description='The number of entries per page. Valid values: **1** to **100**. Default value: **20**.', example='20', maximum=500, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of NextToken.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the resource resides.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to obtain the region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The IDs of the resources. You can specify up to 20 resource IDs.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Set the value to **PHYSICALCONNECTION**, which specifies an Express Connect circuit.', example='PHYSICALCONNECTION', position='Query'),
}

model DescribeTagKeysForExpressConnectResponseBody = {
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.

*   If **NextToken** is empty, no next page exists.
*   If a value is returned for **NextToken**, the value can be used in the next request to retrieve a new page of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  tagKeys?: {
    tagKey?: [ 
    {
      tagKey?: string(name='TagKey', description='The key of the tag.', example='FinanceDept'),
      type?: string(name='Type', description='The type of the resource. The value is set to **PHYSICALCONNECTION**, which indicates an Express Connect circuit.', example='PHYSICALCONNECTION'),
    }
  ](name='TagKey')
  }(name='TagKeys', description='The tag keys.'),
}

model DescribeTagKeysForExpressConnectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagKeysForExpressConnectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeTagKeysForExpressConnect  DescribeTagKeysForExpressConnectRequest
  * @return DescribeTagKeysForExpressConnectResponse
 */
async function describeTagKeysForExpressConnect(request: DescribeTagKeysForExpressConnectRequest): DescribeTagKeysForExpressConnectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagKeysForExpressConnect', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagsRequest {
  maxResult?: int32(name='MaxResult', description='The number of entries to return on each page. Valid values: 1 to 50. Default value: 50.', example='50', maximum=500, position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If this is your first query or no next query is to be sent, ignore this parameter.
*   If a subsequent query is to be sent, set the parameter to the value of NextToken that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the resource belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', description='The resource type. Valid values:

*   **VPC**: virtual private cloud (VPC)
*   **VSWITCH**: vSwitch
*   **ROUTETABLE**: route table
*   **EIP**: elastic IP address (EIP)
*   **VpnGateway**: VPN gateway
*   **NATGATEWAY**: NAT gateway
*   **COMMONBANDWIDTHPACKAGE**: EIP bandwidth plan', example='VPC', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag that is added to the resource. You can specify up to 20 tag keys. The tag key cannot be an empty string.

The key cannot exceed 64 characters in length, and can contain digits, periods (.), underscores (_), and hyphens (-). The key must start with a letter but cannot start with `aliyun` or `acs:`. The key cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The value of the tag that is added to the resource. You can specify up to 20 tag values. The tag value can be an empty string.

The tag value cannot exceed 128 characters in length, and can contain digits, periods (.), underscores (_), and hyphens (-). The key must start with a letter but cannot start with `aliyun` or `acs:`. The key cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tag', position='Query'),
}

model DescribeTagsResponseBody = {
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If the value of **NextToken** is not returned, it indicates that no next query is to be sent.
*   If a value of **NextToken** is returned, the value is the token that is used for the subsequent query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C46FF5A8-C5F0-4024-8262-B16B639225A0'),
  tagResources?: {
    tagResource?: [ 
    {
      tagKey?: string(name='TagKey', description='The tag key.', example='FinanceDept'),
      tagValue?: string(name='TagValue', description='The tag value.', example='FinanceJoshua'),
    }
  ](name='TagResource')
  }(name='TagResources', description='The list of tags that meet the filter conditions.'),
}

model DescribeTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTagsResponseBody(name='body'),
}

/**
  * @description *   You must specify **ResourceId.N** or **Tag.N** that consists of **Tag.N.Key** and **Tag.N.Value** in the request to specify the object that you want to query.
  * *   **Tag.N** is a resource tag that consists of a key-value pair. If you specify only **Tag.N.Key**, all tag values that are associated with the specified tag key are returned. If you specify only **Tag.N.Value**, an error message is returned.
  * *   If you specify **Tag.N** and **ResourceId.N** to filter tags, **ResourceId.N** must match all specified key-value pairs.
  * *   If you specify multiple key-value pairs, all tags that match the key-value pairs are returned.
  * @param request  the request parameters of DescribeTags  DescribeTagsRequest
  * @return DescribeTagsResponse
 */
async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTags', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVRoutersRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the vRouter that you want to query.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vRouterId?: string(name='VRouterId', description='The ID of the vRouter.', example='vrt-bp1lhl0taikrteen****', position='Query'),
}

model DescribeVRoutersResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
  vRouters?: {
    vRouter?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the vRouter was created.', example='2018-03-22T07:46:20Z'),
      description?: string(name='Description', description='The description of the vRouter.', example='abc'),
      regionId?: string(name='RegionId', description='The region to which the vRouter belongs.', example='cn-hangzhou'),
      routeTableIds?: {
        routeTableId?: [ string ](name='RouteTableId')
      }(name='RouteTableIds', description='The ID of the route table in the vRouter.'),
      vRouterId?: string(name='VRouterId', description='The ID of the vRouter.', example='vrt-rj98khsezfqpjrxmv****'),
      vRouterName?: string(name='VRouterName', description='The name of the vRouter.', example='doctest'),
      vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the vRouter belongs.', example='vpc-rj905wotv6y030t1****'),
    }
  ](name='VRouter')
  }(name='VRouters', description='The details about the vRouters.'),
}

model DescribeVRoutersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVRoutersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVRouters  DescribeVRoutersRequest
  * @return DescribeVRoutersResponse
 */
async function describeVRouters(request: DescribeVRoutersRequest): DescribeVRoutersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVRouters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVSwitchAttributesRequest {
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): sends a request and performs a dry run. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the virtual private cloud (VPC) to which the custom route table belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchId: string(name='VSwitchId', description='The ID of the vSwitch.

This parameter is required.', example='vsw-25naue4g****', position='Query'),
}

model DescribeVSwitchAttributesResponseBody = {
  availableIpAddressCount?: long(name='AvailableIpAddressCount', description='The number of available IP addresses.', example='12'),
  cidrBlock?: string(name='CidrBlock', description='The CIDR block of the vSwitch.', example='192.168.0.1/24'),
  creationTime?: string(name='CreationTime', description='The time when the vSwitch was created.', example='2021-08-22T10:40:25Z'),
  description?: string(name='Description', description='The description of the vSwitch.', example='abc'),
  enabledIpv6?: boolean(name='EnabledIpv6', description='Indicates whether IPv6 is enabled for the vSwitch. If you enable IPv6, you must configure the IPv6 CIDR block of the vSwitch. Valid values:

*   **true**
*   **false**', example='true'),
  ipv6CidrBlock?: string(name='Ipv6CidrBlock', description='The IPv6 CIDR block of the vSwitch.', example='2408:XXXX:3c5:44e::/64'),
  isDefault?: boolean(name='IsDefault', description='Indicates whether the vSwitch is the default vSwitch. Valid values:

*   **true**
*   **false**', example='false'),
  networkAclId?: string(name='NetworkAclId', description='The network access control list (ACL) rules.', example='1'),
  ownerId?: long(name='OwnerId', description='The ID of the Alibaba Cloud account to which the resource belongs.', example='287683832402436789'),
  requestId?: string(name='RequestId', description='The request ID.', example='7B48B4B9-1EAD-469F-B488-594DAB4B6A1A'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the ACL belongs.', example='rg-acfmxazb4ph****'),
  routeTable?: {
    routeTableId?: string(name='RouteTableId', description='The ID of the route table that is associated with the vSwitch.', example='vtb-bp145q7glnuzdv****'),
    routeTableType?: string(name='RouteTableType', description='The type of the route table. Valid values:

*   **System**
*   **Custom**', example='System'),
  }(name='RouteTable', description='The information about the route table that is associated with the vSwitch.'),
  shareType?: string(name='ShareType', description='Indicates whether the vSwitch is shared.

*   If no value is returned, the vSwitch is a regular vSwitch.
*   If **Shared** is returned, the vSwitch is shared.
*   If **Sharing** is returned, the vSwitch is being shared.', example='Shared'),
  status?: string(name='Status', description='The status of the vSwitch. Valid values:

*   **Pending**
*   **Available**', example='Pending'),
  tags?: {
    tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N added to the resource.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N added to the resource.', example='FinanceJoshua'),
    }
  ](name='Tag')
  }(name='Tags', description='The information about the tags.'),
  vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-25b7pv15t****'),
  vSwitchName?: string(name='VSwitchName', description='The vSwitch name.', example='test'),
  vpcId?: string(name='VpcId', description='The ID of the VPC to which the vSwitch belongs.', example='vpc-257gq642n****'),
  zoneId?: string(name='ZoneId', description='The ID of the zone to which the vSwitch belongs.', example='cn-beijing-a'),
}

model DescribeVSwitchAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVSwitchAttributesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVSwitchAttributes  DescribeVSwitchAttributesRequest
  * @return DescribeVSwitchAttributesResponse
 */
async function describeVSwitchAttributes(request: DescribeVSwitchAttributesRequest): DescribeVSwitchAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVSwitchAttributes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVSwitchesRequest {
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='true', position='Query'),
  enableIpv6?: boolean(name='EnableIpv6', description='Specifies whether to query vSwitches with IPv6 enabled in the region. Valid values:

*   **true**
*   **false**

If you do not set this parameter, the system queries all vSwitches in the specified region by default.', example='false', position='Query'),
  isDefault?: boolean(name='IsDefault', description='Specifies whether to query the default vSwitches in the specified region. Valid values:

*   **true**
*   **false**

If you do not set this parameter, the system queries all vSwitches in the specified region by default.', example='true', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the vSwitch. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

>  You must set at least one of **RegionId** and **VpcId**.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the vSwitch belongs.', example='rg-bp67acfmxazb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId?: string(name='RouteTableId', description='The ID of the route table.', example='vtb-bp145q7glnuzdvzu2****', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. You can specify at most 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length, and cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags.', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch that you want to query.', example='vsw-23dscddcffvf3****', position='Query'),
  vSwitchName?: string(name='VSwitchName', description='The vSwitch name.

The name must be 1 to 128 characters in length, and cannot start with `http://` or `https://`.', example='vSwitch', position='Query'),
  vSwitchOwnerId?: long(name='VSwitchOwnerId', description='The ID of the Alibaba Cloud account to which the vSwitch belongs.', example='2546073170691****', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the vSwitches belong.

>  You must set at least one of **RegionId** and **VpcId**.', example='vpc-25cdvfeq58pl****', position='Query'),
  zoneId?: string(name='ZoneId', description='The ID of the zone to which the vSwitches belong. You can call the [DescribeZones](https://help.aliyun.com/document_detail/36064.html) operation to query the most recent zone list.', example='cn-hangzhou-d', position='Query'),
}

model DescribeVSwitchesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='9A572171-4E27-40D1-BD36-D26C9E71E29E'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  vSwitches?: {
    vSwitch?: [ 
    {
      availableIpAddressCount?: long(name='AvailableIpAddressCount', description='The number of available IP addresses in the vSwitch.', example='1'),
      cidrBlock?: string(name='CidrBlock', description='The IPv4 CIDR block of the vSwitch.', example='172.16.0.0/24'),
      creationTime?: string(name='CreationTime', description='The time when the vSwitch was created.', example='2022-01-18T12:43:57Z'),
      description?: string(name='Description', description='The description of the vSwitch.', example='VSwitchDescription'),
      enabledIpv6?: boolean(name='EnabledIpv6', description='Indicates whether IPv6 is enabled for the vSwitch. If you enable IPv6, you must configure an IPv6 CIDR block for the vSwitch. Valid values:

*   **true**
*   **false**', example='true'),
      ipv6CidrBlock?: string(name='Ipv6CidrBlock', description='The IPv6 CIDR block of the vSwitch.', example='2408:4002:10c4:4e03::/64'),
      isDefault?: boolean(name='IsDefault', description='Indicates whether the vSwitch is the default vSwitch. Valid values:

*   **true**
*   **false**', example='true'),
      networkAclId?: string(name='NetworkAclId', description='The ID of the network access control list (ACL).', example='nacl-a2do9e413e0spzasx****'),
      ownerId?: long(name='OwnerId', description='The ID of the Alibaba Cloud account to which the resource belongs.', example='25346073170691****'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the vSwitch belongs.', example='rg-acfmxazb4ph6aiy****'),
      routeTable?: {
        routeTableId?: string(name='RouteTableId', description='The ID of the route table that is associated with the vSwitch.', example='vrt-bp145q7glnuzdv****'),
        routeTableType?: string(name='RouteTableType', description='The type of the route table. Valid values:

*   **System**
*   **Custom**', example='System'),
      }(name='RouteTable', description='The information about the route table.'),
      shareType?: string(name='ShareType', description='Indicates whether the vSwitch is shared.

*   If no value is returned, the vSwitch is a regular vSwitch.
*   If **Shared** is returned, the vSwitch is shared.
*   If **Sharing** is returned, the vSwitch is being shared.', example='Shared'),
      status?: string(name='Status', description='The status of the vSwitch. Valid values:

*   **Pending**
*   **Available**', example='Available'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='department'),
          value?: string(name='Value', description='The tag value.', example='dev'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the vSwitch.'),
      vSwitchId?: string(name='VSwitchId', description='The vSwitch ID.', example='vsw-25bcdxs7pv1****'),
      vSwitchName?: string(name='VSwitchName', description='The vSwitch name.', example='vSwitch'),
      vpcId?: string(name='VpcId', description='The ID of the VPC to which the vSwitch belongs.', example='vpc-257gcdcdq64****'),
      zoneId?: string(name='ZoneId', description='The ID of the zone to which the vSwitch belongs.', example='cn-hangzhou-d'),
    }
  ](name='VSwitch')
  }(name='VSwitches', description='The details about the vSwitch.'),
}

model DescribeVSwitchesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVSwitchesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVSwitches  DescribeVSwitchesRequest
  * @return DescribeVSwitchesResponse
 */
async function describeVSwitches(request: DescribeVSwitchesRequest): DescribeVSwitchesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVSwitches', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVbrHaRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='CBCE910E-D396-4944-8****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid Values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, `DRYRUN.SUCCESS` is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the VBR is deployed.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vbrHaId?: string(name='VbrHaId', description='The ID of the VBR failover group.', example='vbrha-sa1sxheuxtd98****', position='Query'),
  vbrId?: string(name='VbrId', description='The VBR ID.', example='vbr-bp1jcg5cmxjbl9xgc****', position='Query'),
}

model DescribeVbrHaResponseBody = {
  creationTime?: string(name='CreationTime', description='The time when the VBR was created.', example='2021-06-08T12:20:55'),
  description?: string(name='Description', description='The description of the VBR failover group.

The description must be 2 to 256 characters in length. It must start with a letter but cannot start with `http://` or `https://`.', example='desc'),
  name?: string(name='Name', description='The name of the VBR failover group.', example='VBRHa'),
  peerVbrId?: string(name='PeerVbrId', description='The ID of the other VBR in the VBR failover group.', example='vbr-bp12mw1f8k3jgygk9****'),
  regionId?: string(name='RegionId', description='The ID of the region in which the VBR is deployed.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The request ID.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  status?: string(name='Status', description='The status of the VBR failover group.

*   **Creating**
*   **Active**', example='Active'),
  vbrHaId?: string(name='VbrHaId', description='The ID of the VBR failover group.', example='vbrha-sa1sxheuxtd98****'),
  vbrId?: string(name='VbrId', description='The VBR ID.', example='vbr-bp1jcg5cmxjbl9xgc****'),
}

model DescribeVbrHaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVbrHaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVbrHa  DescribeVbrHaRequest
  * @return DescribeVbrHaResponse
 */
async function describeVbrHa(request: DescribeVbrHaRequest): DescribeVbrHaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVbrHa', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVcoRouteEntriesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, the system uses **RequestId** as **ClientToken**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**. Valid values: **1** to **50**.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the IPsec-VPN connection.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent list of regions.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeEntryType?: string(name='RouteEntryType', description='The route type. Valid values:

*   **custom** (default): a destination-based route
*   **bgp**: a BGP route', example='custom', position='Query'),
  vpnConnectionId: string(name='VpnConnectionId', description='The ID of the IPsec-VPN connection.

This parameter is required.', example='vco-p0w2jpkhi2eeop6q6****', position='Query'),
}

model DescribeVcoRouteEntriesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E18980E8-C8C2-31BD-8156-AE2BBDEC87E1'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
  vcoRouteEntries?: [ 
    {
      asPath?: string(name='AsPath', description='The list of autonomous system (AS) numbers that the BGP route goes through.', example='[12000]'),
      community?: string(name='Community', description='The community value carried by the BGP route.', example='65535:65510'),
      createTime?: long(name='CreateTime', description='The timestamp when the route was created.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1658217008000'),
      nextHop?: string(name='NextHop', description='The next hop of the route.', example='vco-p0w2jpkhi2eeop6q6****'),
      nextHopTunnelIdList?: [ string ](name='NextHopTunnelIdList'),
      routeDest?: string(name='RouteDest', description='The destination CIDR block of the route.', example='192.168.10.0/24'),
      routeEntryType?: string(name='RouteEntryType', description='The route type. Valid values:

*   **custom**: a destination-based route
*   **bgp**: a BGP route', example='custom'),
      source?: string(name='Source', description='The source of the BGP route. Valid values:

*   **CLOUD**: indicates that the current BGP route is learned by the IPsec-VPN connection from the transit router.
*   **VPN_BGP**: indicates that the current BGP route is learned by the IPsec-VPN connection from the data center.', example='CLOUD'),
      state?: string(name='State', description='The status of the route.

*   **published**: indicates that the current route is advertised to the transit router.
*   **Active**: indicates that the current BGP route is available.', example='published'),
      vpnConnectionId?: string(name='VpnConnectionId', description='The ID of the IPsec-VPN connection.', example='vco-p0w2jpkhi2eeop6q6****'),
      weight?: int32(name='Weight', description='The weight of the destination-based route. Valid values:

*   **0**: a low priority
*   **100**: a high priority', example='100'),
    }
  ](name='VcoRouteEntries', description='The list of routes.'),
  vpnRouteCounts?: [ 
    {
      routeCount?: int32(name='RouteCount'),
      routeEntryType?: string(name='RouteEntryType'),
      source?: string(name='Source'),
    }
  ](name='VpnRouteCounts'),
}

model DescribeVcoRouteEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVcoRouteEntriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVcoRouteEntries  DescribeVcoRouteEntriesRequest
  * @return DescribeVcoRouteEntriesResponse
 */
async function describeVcoRouteEntries(request: DescribeVcoRouteEntriesRequest): DescribeVcoRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVcoRouteEntries', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVirtualBorderRoutersRequest {
  filter?: [ 
    {
      key?: string(name='Key', description='The filter conditions. You can specify up to five filter conditions. Valid values:

*   **PhysicalConnectionId**: Filter by Express Connect circuit ID.
*   **VbrId**: Filter by VBR ID.
*   **Status**: Filter by VBR status.
*   **Name**: Filter by VBR name.
*   **AccessPointId**: Filter by access point ID.
*   **eccId:** Filter by Express Cloud Connect (ECC) instance ID.
*   **type**: Filter by Express Connect circuit type.', example='Status'),
      value?: [ string ](name='Value', description='The filter values for keys. You can specify multiple filter values for one key. The logical operator between filter values is OR. If one filter value is matched, the filter condition is matched.', example='Active'),
    }
  ](name='Filter', description='The information about the filter.', position='Query'),
  includeCrossAccountVbr?: boolean(name='IncludeCrossAccountVbr', description='Specifies whether cross-account VBRs are included.

*   **true**
*   **false** (default)', example='false', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the VBR is deployed. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to obtain the region ID.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.

For more information about resource groups, see [What is a resource group?](https://help.aliyun.com/document_detail/94475.html)', example='rg-acfmxazb4ph6aiy****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key. You can specify at most 20 tag keys. The tag key cannot be an empty string.

The key cannot exceed 128 characters in length, and cannot start with `aliyun` or `acs:`. The key cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value cannot exceed 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tags', description='The list of tags.', position='Query'),
}

model DescribeVirtualBorderRoutersResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: **1 to 50**. Default value: **10**.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='DE77A7F3-3B74-41C0-A5BC-CAFD188C28B6'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
  virtualBorderRouterSet?: {
    virtualBorderRouterType?: [ 
    {
      accessPointId?: string(name='AccessPointId', description='The ID of the access point.', example='ap-cn-kojok1x****'),
      activationTime?: string(name='ActivationTime', description='The time when the VBR was activated for the first time.', example='2021-06-08T12:20:55'),
      associatedCens?: {
        associatedCen?: [ 
        {
          cenId?: string(name='CenId', description='The CEN instance ID.', example='cen-kojok19xxx****'),
          cenOwnerId?: long(name='CenOwnerId', description='The ID of the account to which the CEN instance belongs.', example='1688000000000****'),
          cenStatus?: string(name='CenStatus', description='The status of the CEN instance. Valid values:

*   **Attached**
*   **Attaching**
*   **Detached**
*   **Detaching**
*   If no value is returned, the VBR is not attached to a CEN instance.', example='Attached'),
        }
      ](name='AssociatedCen')
      }(name='AssociatedCens', description='The information about the Cloud Enterprise Network (CEN) instance to which the VBR is attached.'),
      associatedPhysicalConnections?: {
        associatedPhysicalConnection?: [ 
        {
          circuitCode?: string(name='CircuitCode', description='The circuit code of the Express Connect circuit, which is provided by the connectivity provider.', example='longtel0**'),
          enableIpv6?: boolean(name='EnableIpv6', description='Indicates whether IPv6 is enabled. Valid values:

*   **true**
*   **false**', example='true'),
          localGatewayIp?: string(name='LocalGatewayIp', description='The IPv4 address of the VBR on the Alibaba Cloud side.', example='192.168.XX.XX'),
          localIpv6GatewayIp?: string(name='LocalIpv6GatewayIp', description='The IPv6 address of the VBR on the Alibaba Cloud side.', example='2001:XXXX:3c4d:0015:0000:0000:0000:1a2b'),
          peerGatewayIp?: string(name='PeerGatewayIp', description='The IPv4 address of the VBR on the user side.', example='116.62.XX.XX'),
          peerIpv6GatewayIp?: string(name='PeerIpv6GatewayIp', description='The IPv6 address of the VBR on the user side.', example='2001:XXXX:3c4d:0015:0000:0000:0000:1a2b'),
          peeringIpv6SubnetMask?: string(name='PeeringIpv6SubnetMask', description='The subnet mask for the IPv6 addresses on the user side and on the Alibaba Cloud side.

Both IPv6 addresses must belong to the same subnet.', example='2408:4004:cc:400::/56'),
          peeringSubnetMask?: string(name='PeeringSubnetMask', description='The subnet mask for the IPv4 addresses of the VBR on the user side and on the Alibaba Cloud side.

Both IPv4 addresses must belong to the same subnet.', example='255.255.255.252'),
          physicalConnectionBusinessStatus?: string(name='PhysicalConnectionBusinessStatus', description='The business status of the Express Connect circuit. Valid values:

*   **Normal:** The Express Connect circuit is running as normal.
*   **FinancialLocked:** The Express Connect circuit is locked due to overdue payments.', example='Normal'),
          physicalConnectionId?: string(name='PhysicalConnectionId', description='The ID of the Express Connect circuit.', example='pc-119mfjzm7****'),
          physicalConnectionOwnerUid?: string(name='PhysicalConnectionOwnerUid', description='The ID of the account to which the Express Connect circuit belongs.', example='12345678****'),
          physicalConnectionStatus?: string(name='PhysicalConnectionStatus', description='The status of the Express Connect circuit. Valid values:

*   **Initial:** The application is under review.
*   **Approved**: The application is approved.
*   **Allocating**: The system is allocating resources.
*   **Allocated**: The Express Connect circuit is under construction.
*   **Confirmed**: The Express Connect circuit is to be confirmed.
*   **Enabled**: The Express Connect circuit is enabled.
*   **Rejected**: The application is rejected.
*   **Canceled**: The application is canceled.
*   **Allocation Failed:** The system failed to allocate resources.
*   **Terminated:** The Express Connect circuit is disabled.', example='Enabled'),
          status?: string(name='Status', description='The status of the VBR. Valid values:

*   **unconfirmed**
*   **active:**
*   **terminating**
*   **terminated**
*   **recovering**
*   **deleting:**', example='active'),
          vlanId?: string(name='VlanId', description='The VLAN ID of the VBR.', example='0'),
          vlanInterfaceId?: string(name='VlanInterfaceId', description='The ID of the VBR interface, which can be used as a next hop of a VBR route.', example='ri-kojok19x3j0q6k****'),
        }
      ](name='AssociatedPhysicalConnection')
      }(name='AssociatedPhysicalConnections', description='The information about the Express Connect circuit that is associated with the VBR.'),
      bandwidth?: int32(name='Bandwidth', description='The bandwidth value of the VBR. Unit: Mbit/s.', example='50'),
      circuitCode?: string(name='CircuitCode', description='The circuit code of the Express Connect circuit, which is provided by the connectivity provider.', example='longtel0****'),
      cloudBoxInstanceId?: string(name='CloudBoxInstanceId', description='The ID of the cloud box.', example='cb-****'),
      creationTime?: string(name='CreationTime', description='The time when the VBR was created.', example='2020-06-08T12:20:55'),
      description?: string(name='Description', description='The description of the VBR.', example='desc'),
      detectMultiplier?: long(name='DetectMultiplier', description='The multiple of the detection time.

This value indicates the maximum number of dropped packets that is allowed by the receiver when the initiator transmits packets. This value can be used to check whether the connection works as expected.

Valid values: **3 to 10**.', example='3'),
      eccId?: string(name='EccId', description='The ID of the Express Cloud Connect (ECC) instance.', example='ecc-h****'),
      ecrAttatchStatus?: string(name='EcrAttatchStatus', description='The status of the ECR. Valid values:

*   **Attached**
*   **Attaching**
*   **Detached**
*   **Detaching**
*   If no value is returned, the VBR is not attached to a CEN instance.', example='Attached'),
      ecrId?: string(name='EcrId', description='The ID of the Express Connect Router (ECR).', example='ecr-7vrbqv9lcgvzqbwwkm'),
      ecrOwnerId?: string(name='EcrOwnerId'),
      enableIpv6?: boolean(name='EnableIpv6', description='Indicates whether IPv6 is enabled. Valid values:

*   **true**
*   **false**', example='false'),
      localGatewayIp?: string(name='LocalGatewayIp', description='The IPv4 address of the VBR on the Alibaba Cloud side.', example='192.168.XX.XX'),
      localIpv6GatewayIp?: string(name='LocalIpv6GatewayIp', description='The IPv6 address of the VBR on the Alibaba Cloud side.', example='2001:XXXX:3c4d:0015:0000:0000:0000:1a2b'),
      minRxInterval?: long(name='MinRxInterval', description='The time interval to receive BFD packets. Valid values: **200 to 1000**. Unit: milliseconds.', example='300'),
      minTxInterval?: long(name='MinTxInterval', description='The time interval to send Bidirectional Forwarding Detection (BFD) packets. Valid values: **200 to 1000**. Unit: milliseconds.', example='300'),
      name?: string(name='Name', description='The VBR name.', example='test'),
      pConnVbrChargeType?: string(name='PConnVbrChargeType', description='The billing method of the VBR. Valid values:

*   **PrePaid:** subscription. If you choose this billing method, make sure that your account supports balance payments or credit payments.
*   **PostPaid:** pay-as-you-go.', example='PrePaid'),
      pConnVbrExpireTime?: string(name='PConnVbrExpireTime', description='The time when the VBR expires.', example='2021-06-08T12:20:55'),
      peerGatewayIp?: string(name='PeerGatewayIp', description='The IPv4 address of the VBR on the user side.', example='192.168.XX.XX'),
      peerIpv6GatewayIp?: string(name='PeerIpv6GatewayIp', description='The IPv6 address of the VBR on the user side.', example='2001:XXXX:3c4d:0015:0000:0000:0000:1a2b'),
      peeringIpv6SubnetMask?: string(name='PeeringIpv6SubnetMask', description='The subnet mask for the IPv6 addresses on the user side and on the Alibaba Cloud side.', example='2000:1234:0:a000::/55'),
      peeringSubnetMask?: string(name='PeeringSubnetMask', description='The subnet mask for the IPv4 addresses on the Alibaba Cloud side and on the user side.', example='255.255.255.252'),
      physicalConnectionBusinessStatus?: string(name='PhysicalConnectionBusinessStatus', description='The business status of the Express Connect circuit. Valid values:

*   **Normal:** The Express Connect circuit is running as normal.
*   **FinancialLocked:** The Express Connect circuit is locked due to overdue payments.', example='Normal'),
      physicalConnectionId?: string(name='PhysicalConnectionId', description='The ID of the Express Connect circuit to which the VBR belongs.', example='pc-119mfjzm7x****'),
      physicalConnectionOwnerUid?: string(name='PhysicalConnectionOwnerUid', description='The ID of the account to which the Express Connect circuit belongs.', example='1688000000000****'),
      physicalConnectionStatus?: string(name='PhysicalConnectionStatus', description='The status of the Express Connect circuit. Valid values:

*   **Initial:** The application is under review.
*   **Approved**: The application is approved.
*   **Allocating**: The system is allocating resources.
*   **Allocated**: The Express Connect circuit is under construction.
*   **Confirmed**: The Express Connect circuit is to be confirmed.
*   **Enabled**: The Express Connect circuit is enabled.
*   **Rejected**: The application is rejected.
*   **Canceled**: The application is canceled.
*   **Allocation Failed:** The system failed to allocate resources.
*   **Terminated:** The Express Connect circuit is disabled.', example='Normal'),
      recoveryTime?: string(name='RecoveryTime', description='The last time when the status of the VBR changed from **terminated** to **active**.', example='2021-05-08T12:20:55'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.

For more information about resource groups, see [Resource groups](https://help.aliyun.com/document_detail/94475.html).', example='rg-acfmxazb4ph6aiy****'),
      routeTableId?: string(name='RouteTableId', description='The ID of the route table of the VBR.', example='rtb-bp1****'),
      sitelinkEnable?: boolean(name='SitelinkEnable', description='Indicates whether to allow service access between data centers. Valid values:

*   **true**
*   **false**

>  If no value is returned, service access between data centers is not allowed.', example='false'),
      status?: string(name='Status', description='The status of the VBR. Valid values:

*   **unconfirmed**
*   **active**
*   **terminating**
*   **terminated**
*   **recovering**
*   **deleting:**', example='active'),
      tags?: {
        tags?: [ 
        {
          key?: string(name='Key', description='The tag key of the resource.', example='FinanceDept'),
          value?: string(name='Value', description='The tag value of the resource.', example='FinanceJoshua'),
        }
      ](name='Tags')
      }(name='Tags', description='The tag of the resource.'),
      terminationTime?: string(name='TerminationTime', description='The last time when the VBR was terminated.', example='2021-06-08T12:20:55'),
      type?: string(name='Type', description='The VBR type.', example='pconnVBR'),
      vbrId?: string(name='VbrId', description='The VBR ID.', example='vbr-bp1jcg5cmxjbl9xgc****'),
      vlanId?: int32(name='VlanId', description='The VLAN ID of the VBR.', example='10'),
      vlanInterfaceId?: string(name='VlanInterfaceId', description='The ID of the VBR interface.', example='ri-2zeo3xzyf38r4xx****'),
    }
  ](name='VirtualBorderRouterType')
  }(name='VirtualBorderRouterSet', description='The information about the VBR.'),
}

model DescribeVirtualBorderRoutersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVirtualBorderRoutersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVirtualBorderRouters  DescribeVirtualBorderRoutersRequest
  * @return DescribeVirtualBorderRoutersResponse
 */
async function describeVirtualBorderRouters(request: DescribeVirtualBorderRoutersRequest): DescribeVirtualBorderRoutersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVirtualBorderRouters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
  filter?: [ 
    {
      key?: string(name='Key', description='The filter conditions. You can specify at most five filter conditions. The following filter conditions are supported:

*   **PhysicalConnectionId**: filter VBRs by the Express Connect circuit ID.
*   **VbrId**: filter VBRs by ID.
*   **Status**: filter VBRs by status.
*   **Name**: filter VBRs by name.
*   **AccessPointId**: filter VBRs by access point ID.
*   **eccId**: filter VBRs by ID of Express Cloud Connect (ECC) instance.
*   **type**: filter VBRs by type.', example='Status'),
      value?: [ string ](name='Value', description='The filter value for the key. You can specify multiple filter values for one key. The logical operator among filter values is OR. If one filter value is matched, the filter condition is matched.', example='Active'),
    }
  ](name='Filter', description='The filter keys.', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', description='The ID of the Express Connect circuit.

This parameter is required.', example='pc-119mfj****', position='Query'),
  regionId: string(name='RegionId', description='The region in which the Express Connect circuit is deployed. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to obtain the region ID.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='7C5AE8B3-A2D8-428D-A2FF-93A225C0821E'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
  virtualBorderRouterForPhysicalConnectionSet?: {
    virtualBorderRouterForPhysicalConnectionType?: [ 
    {
      activationTime?: string(name='ActivationTime', description='The time when the VBR was first activated.', example='2021-06-08T12:20:55'),
      bandwidth?: string(name='Bandwidth', description='The bandwidth of the VBR that is associated with the Express Connect circuit. Unit: Mbit/s.', example='10'),
      bandwidthStatus?: string(name='BandwidthStatus', description='The status of the bandwidth. Valid values:

*   **Active**
*   **Inactive**', example='Active'),
      circuitCode?: string(name='CircuitCode', description='The circuit code of the Express Connect circuit. The circuit code is provided by the connectivity provider.', example='longtel0**'),
      creationTime?: string(name='CreationTime', description='The time when the VBR was created.', example='2021-06-08T12:20:55'),
      eccId?: string(name='EccId', description='The ID of the ECC instance.', example='ecc-sjghe****'),
      enableIpv6?: boolean(name='EnableIpv6', description='Indicates whether IPv6 is enabled. Valid values:

*   **true**
*   **false**', example='true'),
      localGatewayIp?: string(name='LocalGatewayIp', description='The IPv4 address of the gateway device on the Alibaba Cloud side.', example='192.168.XX.X'),
      localIpv6GatewayIp?: string(name='LocalIpv6GatewayIp', description='The IPv6 address of the gateway device on the Alibaba Cloud side.', example='ipv6bw-uf6hcyzu65v98v3du****'),
      pConnVbrBussinessStatus?: string(name='PConnVbrBussinessStatus', description='The status of the VBR associated with the Express Connect circuit. Valid values:

*   **Normal**
*   **FinancialLocked**', example='Normal'),
      pConnVbrChargeType?: string(name='PConnVbrChargeType', description='The billing method of the VBR. Valid values:

*   **PrePaid**: subscription. If you choose this billing method, make sure that your Apsara Stack account supports balance payments or credit payments.
*   **PostPaid**: pay-as-you-go.', example='PrePaid'),
      pConnVbrExpireTime?: string(name='PConnVbrExpireTime', description='The time when the VBR associated with the Express Connect circuit expires.', example='2021-06-10T12:20:55'),
      peerGatewayIp?: string(name='PeerGatewayIp', description='The IPv4 address of the gateway device on the user side.', example='162.62.XX.XX'),
      peerIpv6GatewayIp?: string(name='PeerIpv6GatewayIp', description='The IPv6 address of the gateway device on the user side.

This parameter is required when you create a VBR for the owner of the Express Connect circuit. You can ignore this parameter when you create a VBR for another Alibaba Cloud account.', example='2001:XXXX:3c4d:0015:0000:0000:0000:1a2b'),
      peeringIpv6SubnetMask?: string(name='PeeringIpv6SubnetMask', description='The subnet mask for the IPv6 addresses of the gateway devices on the Alibaba Cloud side and on the user side.

The two IPv6 addresses must fall within the same subnet.', example='2408:4004:cc:400::/56'),
      peeringSubnetMask?: string(name='PeeringSubnetMask', description='The subnet mask of the IPv4 addresses configured on the user side and Alibaba Cloud side.

The two IPv4 addresses must fall within the same subnet.', example='255.255.255.0'),
      recoveryTime?: string(name='RecoveryTime', description='The last time when the status of the VBR changed from Terminated to Active.', example='2021-06-08T12:20:55'),
      status?: string(name='Status', description='The status of the VBR. Valid values:

*   **unconfirmed**
*   **active**
*   **terminating**
*   **terminated**
*   **recovering**
*   **deleting**', example='Active'),
      terminationTime?: string(name='TerminationTime', description='The last time when the VBR was disabled.', example='2021-06-07T12:20:55'),
      type?: string(name='Type', description='The VBR type.', example='pconnVBR'),
      vbrId?: string(name='VbrId', description='The VBR ID.', example='vbr-bp16ksp61j7e0tk****'),
      vbrOwnerUid?: long(name='VbrOwnerUid', description='The ID of the Alibaba Cloud account to which the VBR belongs.

If the owner of the VBR is the same as that of the Express Connect circuit, this parameter is empty.', example='253460731706911258'),
      vlanId?: int32(name='VlanId', description='The VLAN ID of the VBR.', example='1678'),
    }
  ](name='VirtualBorderRouterForPhysicalConnectionType')
  }(name='VirtualBorderRouterForPhysicalConnectionSet', description='The information about VBRs.'),
}

model DescribeVirtualBorderRoutersForPhysicalConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVirtualBorderRoutersForPhysicalConnection  DescribeVirtualBorderRoutersForPhysicalConnectionRequest
  * @return DescribeVirtualBorderRoutersForPhysicalConnectionResponse
 */
async function describeVirtualBorderRoutersForPhysicalConnection(request: DescribeVirtualBorderRoutersForPhysicalConnectionRequest): DescribeVirtualBorderRoutersForPhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVirtualBorderRoutersForPhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpcAttributeRequest {
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  isDefault?: boolean(name='IsDefault', description='Specifies whether the VPC is the default VPC. Valid values:

*   **false** (default)
*   **true**', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the VPC is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the VPC that you want to query.

This parameter is required.', example='vpc-bp18sth14qii3pnv****', position='Query'),
}

model DescribeVpcAttributeResponseBody = {
  associatedCens?: {
    associatedCen?: [ 
    {
      cenId?: string(name='CenId', description='The ID of the CEN instance to which the VPC is attached.', example='cen-7qthudw0ll6jmc****'),
      cenOwnerId?: long(name='CenOwnerId', description='The ID of the account to which the CEN instance belongs.', example='28311773240248****'),
      cenStatus?: string(name='CenStatus', description='The status of the CEN instance.

**Attached** is returned only when the VPC is attached to a CEN instance.', example='Attached'),
    }
  ](name='AssociatedCen')
  }(name='AssociatedCens', description='The list of Cloud Enterprise Network (CEN) instances to which the VPC is attached.

If the VPC is not attached to a CEN instance, the parameter is not returned.'),
  associatedPropagationSources?: {
    associatedPropagationSources?: [ 
    {
      routePropagated?: boolean(name='RoutePropagated', description='Indicates whether routes are advertised to the VPC.', example='true'),
      sourceInstanceId?: string(name='SourceInstanceId', description='The instance ID of the source.', example='cen-dc4vwznpwbobrl****'),
      sourceOwnerId?: long(name='SourceOwnerId', description='The account ID of the source.', example='153980532164****'),
      sourceType?: string(name='SourceType', description='The source type.

*   **CEN**
*   **VPN**
*   **TR**
*   **ECR**', example='CEN'),
      status?: string(name='Status', description='The binding status.

*   **Attaching**
*   **Attached**
*   **Detaching**', example='Attaching'),
    }
  ](name='AssociatedPropagationSources')
  }(name='AssociatedPropagationSources', description='The route source associated with the VPC.'),
  cidrBlock?: string(name='CidrBlock', description='The IPv4 CIDR block of the VPC.', example='192.168.0.0/16'),
  classicLinkEnabled?: boolean(name='ClassicLinkEnabled', description='Indicates whether the ClassicLink feature is enabled. Valid values:

*   **true**
*   **false** (default)', example='false'),
  cloudResources?: {
    cloudResourceSetType?: [ 
    {
      resourceCount?: int32(name='ResourceCount', description='The number of resources in the VPC.', example='1'),
      resourceType?: string(name='ResourceType', description='The type of resource deployed in the VPC. Valid values: Valid values:

*   **VSwitch**
*   **VRouter**
*   **RouteTable**', example='VSwitch'),
    }
  ](name='CloudResourceSetType')
  }(name='CloudResources', description='The list of resources deployed in the VPC.'),
  creationTime?: string(name='CreationTime', description='The time when the VPC was created.', example='2021-10-16T07:31:09Z'),
  description?: string(name='Description', description='The description of the VPC.', example='VPC'),
  dhcpOptionsSetId?: string(name='DhcpOptionsSetId', description='The ID of the DHCP options set.', example='dopt-o6w0df4epg9zo8isy****'),
  dhcpOptionsSetStatus?: string(name='DhcpOptionsSetStatus', description='The status of the DHCP options set. Valid values:

*   **Available**
*   **InUse**
*   **Deleted**
*   **Pending**', example='Available'),
  dnsHostnameStatus?: string(name='DnsHostnameStatus'),
  enabledIpv6?: boolean(name='EnabledIpv6', description='Indicates whether the VPC enables IPv6 .
- true
- false', example='false'),
  ipv4GatewayId?: string(name='Ipv4GatewayId', description='The ID of the IPv4 gateway.', example='ipv4gw-5tsnc6s4ogsedtp3k****'),
  ipv6CidrBlock?: string(name='Ipv6CidrBlock', description='The IPv6 CIDR block of the VPC.', example='2408:XXXX:0:a600::/56'),
  ipv6CidrBlocks?: {
    ipv6CidrBlock?: [ 
    {
      ipv6CidrBlock?: string(name='Ipv6CidrBlock', description='The IPv6 CIDR block of the VPC.', example='2408:XXXX:0:6a::/56'),
      ipv6Isp?: string(name='Ipv6Isp', description='The IPv6 CIDR block type of the VPC. Valid values:

*   **BGP** (default)
*   **ChinaMobile**
*   **ChinaUnicom**
*   **ChinaTelecom**

>  If you are allowed to use single-ISP bandwidth, valid values are **ChinaTelecom**, **ChinaUnicom**, and **ChinaMobile**', example='BGP'),
    }
  ](name='Ipv6CidrBlock')
  }(name='Ipv6CidrBlocks', description='The IPv6 CIDR block of the VPC.'),
  isDefault?: boolean(name='IsDefault', description='Indicates whether the VPC is the default VPC. Valid values:

*   **true**
*   **false** (default)', example='false'),
  ownerId?: long(name='OwnerId', description='The ID of the Alibaba Cloud account to which the VPC belongs.', example='28311773240248****'),
  regionId?: string(name='RegionId', description='The ID of the region to which the VPC belongs.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The request ID.', example='7486AE4A-129D-43DB-A714-2432C074BA04'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxazbvgb4ph****'),
  secondaryCidrBlocks?: {
    secondaryCidrBlock?: [ string ](name='SecondaryCidrBlock')
  }(name='SecondaryCidrBlocks', description='The secondary IPv4 CIDR block of the VPC.'),
  status?: string(name='Status', description='The status of the VPC. Valid values:

*   **Available**
*   **Pending**', example='Available'),
  supportIpv4Gateway?: boolean(name='SupportIpv4Gateway', description='Indicates whether the VPC supports IPv4 gateways.

*   **true**
*   **false**', example='true'),
  tags?: {
    tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N.', example='FinanceJoshua'),
    }
  ](name='Tag')
  }(name='Tags', description='The information about the tags.'),
  userCidrs?: {
    userCidr?: [ string ](name='UserCidr')
  }(name='UserCidrs', description='The user CIDR block. Multiple CIDR blocks are separated by commas (,). At most three CIDR blocks are returned.'),
  vRouterId?: string(name='VRouterId', description='The ID of the vRouter that belongs to the VPC.', example='vrt-bp1jso6ng1at0ajsc****'),
  vSwitchIds?: {
    vSwitchId?: [ string ](name='VSwitchId')
  }(name='VSwitchIds', description='The list of vSwitches deployed in the VPC.'),
  vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-bp18sth14qii3pnvo****'),
  vpcName?: string(name='VpcName', description='The name of the VPC.', example='doctest2'),
}

model DescribeVpcAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpcAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVpcAttribute  DescribeVpcAttributeRequest
  * @return DescribeVpcAttributeResponse
 */
async function describeVpcAttribute(request: DescribeVpcAttributeRequest): DescribeVpcAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpcAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpcsRequest {
  dhcpOptionsSetId?: string(name='DhcpOptionsSetId', description='The ID of the DHCP options set.', example='dopt-o6w0df4epg9zo8isy****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system prechecks whether your AccessKey pair is valid, whether the RAM user is authorized, and whether the required parameters are specified. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. If the request passes the check, a 2xx HTTP status code is returned and VPCs are queried.', example='false', position='Query'),
  enableIpv6?: boolean(name='EnableIpv6', position='Query'),
  isDefault?: boolean(name='IsDefault', description='Specifies whether to query the default VPC in the specified region. Valid values:

*   **true** (default)
*   **false**', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VPC.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the VPC to be queried belongs.', example='rg-acfmxvfvazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the resource. You can specify at most 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N to add to the resource. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length, and cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags of the resource.', position='Query'),
  vpcId?: string(name='VpcId', description='The VPC ID.

You can specify up to 20 VPC IDs. Separate multiple IDs with commas (,).', example='vpc-bp1b1xjllp3ve5yze****', position='Query'),
  vpcName?: string(name='VpcName', description='The name of the VPC.', example='Vpc-1', position='Query'),
  vpcOwnerId?: long(name='VpcOwnerId', description='The ID of the Alibaba Cloud account to which the VPC belongs.', example='253460731706911258', position='Query'),
}

model DescribeVpcsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='C6532AA8-D0F7-497F-A8EE-094126D441F5'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='2'),
  vpcs?: {
    vpc?: [ 
    {
      cenStatus?: string(name='CenStatus', description='The status of the Cloud Enterprise Network (CEN) instance to which the VPC is attached. **Attached** is returned only if the VPC is attached to a CEN instance.', example='Attached'),
      cidrBlock?: string(name='CidrBlock', description='The IPv4 CIDR block of the VPC.', example='192.168.0.0/16'),
      creationTime?: string(name='CreationTime', description='The time when the VPC was created.', example='2021-04-18T15:02:37Z'),
      description?: string(name='Description', description='The description of the VPC.', example='This is my VPC.'),
      dhcpOptionsSetId?: string(name='DhcpOptionsSetId', description='The ID of the DHCP options set.', example='dopt-o6w0df4epg9zo8isy****'),
      dhcpOptionsSetStatus?: string(name='DhcpOptionsSetStatus', description='The status of the DHCP options set. Valid values:

*   **Available**
*   **InUse**
*   **Deleted**
*   **Pending**', example='Available'),
      dnsHostnameStatus?: string(name='DnsHostnameStatus'),
      enabledIpv6?: boolean(name='EnabledIpv6'),
      ipv6CidrBlock?: string(name='Ipv6CidrBlock', description='The IPv6 CIDR block of the VPC.', example='2408:XXXX:0:a600::/56'),
      ipv6CidrBlocks?: {
        ipv6CidrBlock?: [ 
        {
          ipv6CidrBlock?: string(name='Ipv6CidrBlock', description='The IPv6 CIDR block of the VPC.', example='2408:XXXX:0:a600::/56'),
          ipv6Isp?: string(name='Ipv6Isp', description='The type of IPv6 CIDR block. Valid values:

*   **BGP**
*   **ChinaMobile**
*   **ChinaUnicom**
*   **ChinaTelecom**

>  If your Alibaba Cloud account is allowed to activate single-ISP bandwidth, you can set this parameter to **ChinaTelecom**, **ChinaUnicom**, or **ChinaMobile**.', example='BGP'),
        }
      ](name='Ipv6CidrBlock')
      }(name='Ipv6CidrBlocks', description='The IPv6 CIDR block of the VPC.'),
      isDefault?: boolean(name='IsDefault', description='Indicates whether the VPC is the default VPC in the region. Valid values:

*   **true**
*   **false**', example='false'),
      natGatewayIds?: {
        natGatewayIds?: [ string ](name='NatGatewayIds')
      }(name='NatGatewayIds', description='The ID of the Internet NAT gateway.'),
      ownerId?: long(name='OwnerId', description='The ID of the Alibaba Cloud account to which the VPC belongs.', example='253460731706911258'),
      regionId?: string(name='RegionId', description='The ID of the region to which the VPC belongs.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the VPC belongs.', example='rg-acfmxazb4ph****'),
      routerTableIds?: {
        routerTableIds?: [ string ](name='RouterTableIds')
      }(name='RouterTableIds', description='The information about the route table.'),
      secondaryCidrBlocks?: {
        secondaryCidrBlock?: [ string ](name='SecondaryCidrBlock')
      }(name='SecondaryCidrBlocks', description='The information about the secondary CIDR block.'),
      status?: string(name='Status', description='The status of the VPC. Valid values:

*   **Pending**
*   **Available**', example='Available'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The key of tag N.', example='env'),
          value?: string(name='Value', description='The value of tag N.', example='internal'),
        }
      ](name='Tag')
      }(name='Tags', description='The tag information about the VPC.'),
      userCidrs?: {
        userCidr?: [ string ](name='UserCidr')
      }(name='UserCidrs', description='The list of user CIDR blocks.'),
      vRouterId?: string(name='VRouterId', description='The ID of the vRouter.', example='vrt-bp1jcg5cmxjbl9xgc****'),
      vSwitchIds?: {
        vSwitchId?: [ string ](name='VSwitchId')
      }(name='VSwitchIds', description='The vSwitches in the VPC.

You can query up to 300 vSwitches in the VPC. The information about the latest vSwitches is returned. If you want to query the information about all vSwitches in a VPC, call the [DescribeVSwitches](https://help.aliyun.com/document_detail/35748.html) operation.'),
      vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-bp1qpo0kug3a20qqe****'),
      vpcName?: string(name='VpcName', description='The name of the VPC.', example='vpc1'),
    }
  ](name='Vpc')
  }(name='Vpcs', description='The details about the VPC.'),
}

model DescribeVpcsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpcsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVpcs  DescribeVpcsRequest
  * @return DescribeVpcsResponse
 */
async function describeVpcs(request: DescribeVpcsRequest): DescribeVpcsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpcs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpnAttachmentsRequest {
  attachType?: string(name='AttachType', description='The type of resource that is associated with the IPsec-VPN connection. Default value: **CEN**.

Set the value to **CEN**, which specifies to query IPsec-VPN connections associated with the transit router.', example='CEN', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **10**. Valid values: **1** to **50**.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the IPsec-VPN connection is established.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpnConnectionId?: string(name='VpnConnectionId', description='The ID of the IPsec-VPN connection.

>  If you do not specify an IPsec-VPN connection ID, all IPsec-VPN connections associated with a transit router in the region are queried.', example='vco-p0w2jpkhi2eeop6q6****', position='Query'),
}

model DescribeVpnAttachmentsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='9F0725BB-186A-3564-91C3-AAE48042F853'),
  totalCount?: int32(name='TotalCount', description='The number of returned entries.', example='1'),
  vpnAttachments?: [ 
    {
      attachType?: string(name='AttachType', description='The type of resource that is associated with the IPsec-VPN connection. The value is set to **CEN**, which indicates that the IPsec-VPN connection is associated with a transit router.', example='CEN'),
      crossAccountAuthorized?: boolean(name='CrossAccountAuthorized', description='Indicates whether the IPsec-VPN connection is associated with a transit router that belongs to another Alibaba Cloud account. Valid values:

*   **true**
*   **false**', example='false'),
      description?: string(name='Description', description='The description of the IPsec-VPN connection.', example='desctest'),
      instanceId?: string(name='InstanceId', description='The ID of the IPsec-VPN connection.', example='vco-p0w2jpkhi2eeop6q6****'),
      name?: string(name='Name', description='The name of the IPsec-VPN connection.', example='nametest1'),
      tag?: string(name='Tag'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router with which the IPsec-VPN connection is associated.', example='tr-p0wkh4yryb1dnanqw****'),
      transitRouterName?: string(name='TransitRouterName', description='The name of the transit router.', example='nametest2'),
    }
  ](name='VpnAttachments', description='The list of IPsec-VPN connections associated with the transit router.'),
}

model DescribeVpnAttachmentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpnAttachmentsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVpnAttachments  DescribeVpnAttachmentsRequest
  * @return DescribeVpnAttachmentsResponse
 */
async function describeVpnAttachments(request: DescribeVpnAttachmentsRequest): DescribeVpnAttachmentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpnAttachments', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpnConnectionRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the IPsec-VPN connection is created.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpnConnectionId: string(name='VpnConnectionId', description='The ID of the IPsec-VPN connection.

This parameter is required.', example='vco-bp1bbi27hojx80nck****', position='Query'),
}

model DescribeVpnConnectionResponseBody = {
  attachInstanceId?: string(name='AttachInstanceId', description='The ID of the CEN instance to which the transit router belongs.', example='cen-lxxpbpalc776qz****'),
  attachType?: string(name='AttachType', description='The type of the resource that is associated with the IPsec-VPN connection. Valid values:

*   **CEN**: indicates that the IPsec-VPN connection is associated with a transit router of a Cloud Enterprise Network (CEN) instance.
*   **NO_ASSOCIATED**: indicates that the IPsec-VPN connection is not associated with any resource.
*   **VPNGW**: indicates that the IPsec-VPN connection is associated with a VPN gateway.', example='CEN'),
  createTime?: long(name='CreateTime', description='The timestamp generated when the IPsec-VPN connection was established. Unit: milliseconds.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1492753817000'),
  crossAccountAuthorized?: boolean(name='CrossAccountAuthorized', description='Indicates whether the IPsec-VPN connection is associated with a transit router that belongs to another Alibaba Cloud account. Valid values:

*   **true**
*   **false**', example='false'),
  customerGatewayId?: string(name='CustomerGatewayId', description='The ID of the customer gateway associated with the IPsec-VPN connection.', example='cgw-bp1mvj4g9kogwwcxk****'),
  effectImmediately?: boolean(name='EffectImmediately', description='Indicates whether IPsec negotiations immediately start after the configuration takes effect. Valid values:

*   **true**: Negotiations are reinitiated after the configuration is changed.
*   **false**: Negotiations are reinitiated after traffic is detected.', example='true'),
  enableDpd?: boolean(name='EnableDpd', description='Indicates whether the dead peer detection (DPD) feature is enabled for the IPsec-VPN connection. Valid values:

*   **false**
*   **true**

After you enable the DPD feature, the initiator of the IPsec-VPN connection sends DPD packets to check the existence and availability of the peer. If no response is received from the peer within a specified period of time, the connection fails. Then, the ISAKMP security association (SA), IPsec SA, and IPsec tunnel are deleted.', example='true'),
  enableNatTraversal?: boolean(name='EnableNatTraversal', description='Indicates whether NAT traversal is enabled for the IPsec-VPN connection. Valid values:

*   **true**
*   **false**

After NAT traversal is enabled, the initiator does not check the UDP ports during IKE negotiations and can automatically discover NAT gateway devices along the IPsec tunnel.', example='true'),
  enableTunnelsBgp?: boolean(name='EnableTunnelsBgp', description='Indicates whether BGP is enabled for the tunnel. Valid values:

*   **true**
*   **false**', example='true'),
  ikeConfig?: {
    ikeAuthAlg?: string(name='IkeAuthAlg', description='The authentication algorithm in the IKE phase.', example='sha1'),
    ikeEncAlg?: string(name='IkeEncAlg', description='The encryption algorithm in the IKE phase.', example='aes'),
    ikeLifetime?: long(name='IkeLifetime', description='The lifetime in the IKE phase. Unit: seconds.', example='86400'),
    ikeMode?: string(name='IkeMode', description='The IKE negotiation mode.

*   **main**: This mode offers higher security during negotiations.
*   **aggressive**: This mode is faster and has a higher success rate.', example='main'),
    ikePfs?: string(name='IkePfs', description='The Diffie-Hellman (DH) group in the IKE phase.', example='group2'),
    ikeVersion?: string(name='IkeVersion', description='The version of the IKE protocol.

*   **ikev1**
*   **ikev2**

Compared with IKEv1, IKEv2 simplifies the SA negotiation process and is more suitable for scenarios in which multiple CIDR blocks are used.', example='ikev1'),
    localId?: string(name='LocalId', description='The identifier of the IPsec-VPN connection on the Alibaba Cloud side.', example='116.28.XX.XX'),
    psk?: string(name='Psk', description='The pre-shared key.', example='pgw6dy****'),
    remoteId?: string(name='RemoteId', description='The identifier of the IPsec-VPN connection on the data center side.', example='139.34.XX.XX'),
  }(name='IkeConfig', description='The configuration of Phase 1 negotiations.'),
  internetIp?: string(name='InternetIp', description='The gateway IP address of the IPsec-VPN connection.', example='47.XX.XX.162'),
  ipsecConfig?: {
    ipsecAuthAlg?: string(name='IpsecAuthAlg', description='The authentication algorithm in the IPsec phase.', example='sha1'),
    ipsecEncAlg?: string(name='IpsecEncAlg', description='The encryption algorithm in the IPsec phase.', example='aes'),
    ipsecLifetime?: long(name='IpsecLifetime', description='The lifetime in the IPsec phase. Unit: seconds.', example='86400'),
    ipsecPfs?: string(name='IpsecPfs', description='The DH group in the IPsec phase.', example='group2'),
  }(name='IpsecConfig', description='The configuration of Phase 2 negotiations.'),
  localSubnet?: string(name='LocalSubnet', description='The CIDR block on the Alibaba Cloud side.

Multiple CIDR blocks are separated by commas (,).', example='10.0.0.0/8'),
  name?: string(name='Name', description='The name of the IPsec-VPN connection.', example='ipsec1'),
  networkType?: string(name='NetworkType', description='The network type of the IPsec-VPN connection. Valid values:

*   **public**: an encrypted connection over the Internet
*   **private**: an encrypted connection over private networks', example='public'),
  remoteCaCertificate?: string(name='RemoteCaCertificate', description='The certificate authority (CA) certificate of the peer.', example='-----BEGIN CERTIFICATE----- MIIB7zCCAZW****'),
  remoteSubnet?: string(name='RemoteSubnet', description='The CIDR block on the data center side.

Multiple CIDR blocks are separated by commas (,).', example='192.168.0.0/16'),
  requestId?: string(name='RequestId', description='The request ID.', example='F2310D45-BCF6-4E2E-9082-B4503844BA4C'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the IPsec-VPN connection belongs.

You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/158855.html) operation to query the resource group information.', example='rg-acfmzs372yg****'),
  spec?: string(name='Spec', description='The bandwidth specification of the IPsec-VPN connection. Unit: **Mbit/s**.', example='1000M'),
  state?: string(name='State', description='The association state of the IPsec-VPN connection. Valid values:

*   **active**: The IPsec-VPN connection is associated with a VPN gateway.
*   **init**: The IPsec-VPN connection is not associated with any resource and is being initialized.
*   **attaching**: The IPsec-VPN connection is being associated with a transit router.
*   **attached**: The IPsec-VPN connection is associated with a transit router.
*   **detaching**: The IPsec-VPN connection is being disassociated from a transit router.
*   **financialLocked**: The IPsec-VPN connection is locked due to overdue payments.
*   **provisioning**: The IPsec-VPN connection is being prepared.
*   **updating**: The IPsec-VPN connection is being updated.
*   **Upgrading**: The IPsec-VPN connection is being upgraded.
*   **deleted**: The IPsec-VPN connection is deleted.', example='attached'),
  status?: string(name='Status', description='The state of the IPsec-VPN connection. Valid values:

*   **ike_sa_not_established**: Phase 1 negotiations failed.
*   **ike_sa_established**: Phase 1 negotiations succeeded.
*   **ipsec_sa_not_established**: Phase 2 negotiations failed.
*   **ipsec_sa_established**: Phase 2 negotiations succeeded.', example='ike_sa_not_established'),
  tags?: {
    tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='TagKey'),
      value?: string(name='Value', description='The tag value.', example='TagValue'),
    }
  ](name='Tag')
  }(name='Tags', description='The list of tags added to the IPsec-VPN connection.'),
  transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router with which the IPsec-VPN connection is associated.', example='tr-p0we2edef9qr44a85****'),
  transitRouterName?: string(name='TransitRouterName', description='The name of the transit router.', example='nametest'),
  tunnelOptionsSpecification?: {
    tunnelOptions?: [ 
    {
      customerGatewayId?: string(name='CustomerGatewayId', description='The ID of the customer gateway associated with the tunnel.', example='cgw-p0wy363lucf1uyae8****'),
      enableDpd?: string(name='EnableDpd', description='Indicates whether the DPD feature is enabled for the tunnel. Valid values:

*   **false**
*   **true**', example='true'),
      enableNatTraversal?: string(name='EnableNatTraversal', description='Indicates whether NAT traversal is enabled for the tunnel. Valid values:

*   **false**
*   **true**', example='true'),
      internetIp?: string(name='InternetIp', description='The tunnel IP address.', example='47.21.XX.XX'),
      remoteCaCertificate?: string(name='RemoteCaCertificate', description='The CA certificate of the tunnel peer.

This parameter is returned only if the VPN gateway is of the ShangMi (SM) type.', example='-----BEGIN CERTIFICATE----- MIIB7zCCAZW**** -----END CERTIFICATE-----'),
      role?: string(name='Role', description='The tunnel role. Valid values:

*   **master**: The tunnel is an active tunnel.
*   **slave**: The tunnel is a standby tunnel.', example='master'),
      state?: string(name='State', description='The tunnel status. Valid values:

*   **active**
*   **updating**
*   **deleting**', example='active'),
      status?: string(name='Status', description='The state of the IPsec-VPN connection. Valid values:

*   **ike_sa_not_established**: Phase 1 negotiations failed.
*   **ike_sa_established**: Phase 1 negotiations succeeded.
*   **ipsec_sa_not_established**: Phase 2 negotiations failed.
*   **ipsec_sa_established**: Phase 2 negotiations succeeded.', example='ipsec_sa_established'),
      tunnelBgpConfig?: {
        bgpStatus?: string(name='BgpStatus', description='The negotiation state of BGP. Valid values:

*   **success**
*   **false**', example='success'),
        localAsn?: string(name='LocalAsn', description='The ASN on the Alibaba Cloud side.', example='65530'),
        localBgpIp?: string(name='LocalBgpIp', description='The BGP address on the Alibaba Cloud side.', example='169.254.10.1'),
        peerAsn?: string(name='PeerAsn', description='The ASN of the tunnel peer.', example='65531'),
        peerBgpIp?: string(name='PeerBgpIp', description='The BGP IP address of the tunnel peer.', example='169.254.10.2'),
        tunnelCidr?: string(name='TunnelCidr', description='The BGP CIDR block of the tunnel.', example='169.254.10.0/30'),
      }(name='TunnelBgpConfig', description='The BGP configurations.'),
      tunnelId?: string(name='TunnelId', description='The tunnel ID.', example='tun-opsqc4d97wni27****'),
      tunnelIkeConfig?: {
        ikeAuthAlg?: string(name='IkeAuthAlg', description='The authentication algorithm in the IKE phase.', example='sha1'),
        ikeEncAlg?: string(name='IkeEncAlg', description='The encryption algorithm in the IKE phase.', example='aes'),
        ikeLifetime?: string(name='IkeLifetime', description='The lifetime in the IKE phase. Unit: seconds.', example='86400'),
        ikeMode?: string(name='IkeMode', description='The IKE negotiation mode.

*   **main**: This mode offers higher security during negotiations.
*   **aggressive**: This mode is faster and has a higher success rate.', example='main'),
        ikePfs?: string(name='IkePfs', description='The Diffie-Hellman (DH) group in the IKE phase.', example='group2'),
        ikeVersion?: string(name='IkeVersion', description='The version of the IKE protocol.', example='ikev1'),
        localId?: string(name='LocalId', description='The identifier of the tunnel on the Alibaba Cloud side.', example='47.21.XX.XX'),
        psk?: string(name='Psk', description='The pre-shared key.', example='123456****'),
        remoteId?: string(name='RemoteId', description='The identifier of the tunnel peer.', example='47.42.XX.XX'),
      }(name='TunnelIkeConfig', description='The configuration of Phase 1 negotiations.'),
      tunnelIndex?: int32(name='TunnelIndex'),
      tunnelIpsecConfig?: {
        ipsecAuthAlg?: string(name='IpsecAuthAlg', description='The authentication algorithm in the IPsec phase.', example='sha1'),
        ipsecEncAlg?: string(name='IpsecEncAlg', description='The encryption algorithm in the IPsec phase.', example='aes'),
        ipsecLifetime?: string(name='IpsecLifetime', description='The lifetime in the IPsec phase. Unit: seconds.', example='86400'),
        ipsecPfs?: string(name='IpsecPfs', description='The DH group in the IPsec phase.', example='group2'),
      }(name='TunnelIpsecConfig', description='The configurations of Phase 2 negotiations.'),
      zoneNo?: string(name='ZoneNo', description='The zone where the tunnel is deployed.

You can call [DescribeZones](https://help.aliyun.com/document_detail/36064.html) to query zone IDs.', example='cn-hangzhou-i'),
    }
  ](name='TunnelOptions')
  }(name='TunnelOptionsSpecification', description='The tunnel configuration of the IPsec-VPN connection.

Parameters in **TunnelOptionsSpecification** are returned only if you query IPsec-VPN connections in dual-tunnel mode.'),
  vcoHealthCheck?: {
    dip?: string(name='Dip', description='The destination IP address.', example='10.0.0.1'),
    enable?: string(name='Enable', description='Indicates whether the health check feature is enabled for the IPsec-VPN connection. Valid values:

*   **false**
*   **true**', example='true'),
    interval?: int32(name='Interval', description='The interval between two consecutive health checks. Unit: seconds.', example='3'),
    policy?: string(name='Policy', description='Indicates whether advertised routes are withdrawn when the health check fails. Valid values:

*   **revoke_route**: Advertised routes are withdrawn.
*   **reserve_route**: Advertised routes are not withdrawn.', example='revoke_route'),
    retry?: int32(name='Retry', description='The maximum number of health check retries.', example='3'),
    sip?: string(name='Sip', description='The source IP address.', example='192.168.1.1'),
    status?: string(name='Status', description='The state of the health check. Valid values:

*   **failed**
*   **success**: normal', example='failed'),
  }(name='VcoHealthCheck', description='The health check information about the IPsec-VPN connection.'),
  vpnBgpConfig?: {
    authKey?: string(name='AuthKey', description='The authentication key of the BGP routing protocol.', example='AuthKey****'),
    enableBgp?: string(name='EnableBgp', description='Indicates whether BGP is enabled. Valid values:

*   **true**
*   **false**', example='true'),
    localAsn?: long(name='LocalAsn', description='The ASN on the Alibaba Cloud side.', example='65531'),
    localBgpIp?: string(name='LocalBgpIp', description='The BGP IP address on the Alibaba Cloud side.', example='169.254.11.2'),
    peerAsn?: long(name='PeerAsn', description='The autonomous system number (ASN) of the peer.', example='65530'),
    peerBgpIp?: string(name='PeerBgpIp', description='The BGP IP address of the peer.', example='169.254.11.1'),
    status?: string(name='Status', description='The negotiation state of the BGP routing protocol. Valid values:

*   **success**: normal
*   **failed**', example='success'),
    tunnelCidr?: string(name='TunnelCidr', description='The BGP CIDR block of the IPsec-VPN connection. The CIDR block falls within 169.254.0.0/16. The subnet mask of the CIDR block must be 30 bits in length.', example='169.254.11.0/30'),
  }(name='VpnBgpConfig', description='The Border Gateway Protocol (BGP) configuration of the IPsec-VPN connection.'),
  vpnConnectionId?: string(name='VpnConnectionId', description='The ID of the IPsec-VPN connection.', example='vco-bp1bbi27hojx80nck****'),
  vpnGatewayId?: string(name='VpnGatewayId', description='The ID of the VPN gateway.', example='vpn-bp1q8bgx4xnkm2ogj****'),
  zoneNo?: string(name='ZoneNo', description='The ID of the zone where the IPsec-VPN connection is deployed.

You can call [DescribeZones](https://help.aliyun.com/document_detail/36064.html) to query zone IDs and mapping between zone IDs and zone names.', example='cn-hangzhou-h'),
}

model DescribeVpnConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpnConnectionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVpnConnection  DescribeVpnConnectionRequest
  * @return DescribeVpnConnectionResponse
 */
async function describeVpnConnection(request: DescribeVpnConnectionRequest): DescribeVpnConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpnConnection', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpnConnectionLogsRequest {
  from?: int32(name='From', description='The start time of the flow log. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

>  If you specify **From**, you must specify **To** or **MinutePeriod**.', example='1671003744', position='Query'),
  minutePeriod?: int32(name='MinutePeriod', description='The interval at which log data is collected. Valid values: **1** to **10**. Unit: minutes.

>  If you do not specify **From** and **To**, you must specify **MinutePeriod**.', example='10', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: **1** to **50**. Default value: **10**.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the IPsec-VPN connection.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='eu-central-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  to?: int32(name='To', description='The end time of the flow log. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

>  If you specify **To**, you must specify **From** or **MinutePeriod**.', example='1671004344', position='Query'),
  tunnelId?: string(name='TunnelId', description='The ID of the IPsec-VPN connection.

This parameter is available only for a dual-tunnel IPsec-VPN connection.', example='tun-opsqc4d97wni27****', position='Query'),
  vpnConnectionId: string(name='VpnConnectionId', description='The ID of the IPsec-VPN connection.

This parameter is required.', example='vco-m5evqnds4y459flt3****', position='Query'),
}

model DescribeVpnConnectionLogsResponseBody = {
  count?: int32(name='Count', description='The number of entries on the current page.', example='10'),
  data?: {
    logs?: [ string ](name='Logs')
  }(name='Data', description='The log list.'),
  isCompleted?: boolean(name='IsCompleted', description='Indicates whether the log is accurate. Valid values:

*   **true**
*   **false**', example='true'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='CF161502-4959-5C3B-B499-09B87BA931D9'),
}

model DescribeVpnConnectionLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpnConnectionLogsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVpnConnectionLogs  DescribeVpnConnectionLogsRequest
  * @return DescribeVpnConnectionLogsResponse
 */
async function describeVpnConnectionLogs(request: DescribeVpnConnectionLogsRequest): DescribeVpnConnectionLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpnConnectionLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpnConnectionsRequest {
  customerGatewayId?: string(name='CustomerGatewayId', description='The ID of the customer gateway.', example='cgw-bp1mvj4g9kogw****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**. Valid values: **1** to **50**.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the IPsec-VPN connection is created.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the IPsec-VPN connection belongs.

You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/158855.html) operation to query the resource group ID.', example='rg-acfmzs372yg****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key. The tag key cannot be an empty string.

It can be at most 64 characters in length, and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.

You can specify at most 20 tag keys in each call.', example='TagKey'),
      value?: string(name='Value', description='The tag value.

The tag value can be an empty string and cannot exceed 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.

Each tag key corresponds to one tag value. You can specify at most 20 tag values in each call.', example='TagValue'),
    }
  ](name='Tag', description='The tag value.

The tag value can be an empty string and cannot exceed 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.

Each tag key corresponds to one tag value. You can specify up to 20 tag values in each call.', position='Query'),
  vpnConnectionId?: string(name='VpnConnectionId', description='The ID of the IPsec-VPN connection.', example='vco-bp10lz7aejumd****', position='Query'),
  vpnGatewayId?: string(name='VpnGatewayId', description='The ID of the VPN gateway.', example='vpn-bp1q8bgx4xnkx****', position='Query'),
}

model DescribeVpnConnectionsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='238752DC-0693-49BE-9C85-711D5691D3E5'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
  vpnConnections?: {
    vpnConnection?: [ 
    {
      attachInstanceId?: string(name='AttachInstanceId', description='The ID of the CEN instance to which the transit router belongs.', example='cen-lxxpbpalc776qz****'),
      attachType?: string(name='AttachType', description='The type of resource that is associated with the IPsec-VPN connection. Valid values:

*   **CEN**: indicates that the IPsec-VPN connection is associated with a transit router of a Cloud Enterprise Network (CEN) instance.
*   **NO_ASSOCIATED**: indicates that the IPsec-VPN connection is not associated with any resource.
*   **VPNGW**: indicates that the IPsec-VPN connection is associated with a VPN gateway.', example='CEN'),
      createTime?: long(name='CreateTime', description='The timestamp generated when the IPsec-VPN connection was established. Unit: milliseconds.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1492753817000'),
      crossAccountAuthorized?: boolean(name='CrossAccountAuthorized', description='Indicates whether the IPsec-VPN connection is associated with a transit router that belongs to another Alibaba Cloud account. Valid values:

*   **true**
*   **false**', example='false'),
      customerGatewayId?: string(name='CustomerGatewayId', description='The ID of the customer gateway associated with the IPsec-VPN connection.', example='cgw-bp1mvj4g9kogw****'),
      effectImmediately?: boolean(name='EffectImmediately', description='Indicates whether IPsec negotiations immediately start.

*   **true**: Negotiations are reinitiated after the configuration is changed.
*   **false**: Negotiations are reinitiated after traffic is detected.', example='true'),
      enableDpd?: boolean(name='EnableDpd', description='Indicates whether dead peer detection (DPD) is enabled for the IPsec-VPN connection. Valid values:

*   **true**

    The initiator of the IPsec-VPN connection sends DPD packets to check the existence and availability of the peer. If no feedback is received from the peer within a specific period of time, the connection fails. Then, the ISAKMP security association (SA), IPsec SA, and IPsec tunnel are deleted.

*   **false**', example='true'),
      enableNatTraversal?: boolean(name='EnableNatTraversal', description='Indicates whether NAT traversal is enabled for the IPsec-VPN connection.

*   **true**

    After NAT traversal is enabled, the initiator does not check the UDP ports during IKE negotiations and can automatically discover NAT gateway devices along the IPsec tunnel.

*   **false**', example='true'),
      enableTunnelsBgp?: boolean(name='EnableTunnelsBgp', description='Indicates whether BGP is enabled for the tunnel. Valid values:

*   **true**
*   **false**', example='true'),
      ikeConfig?: {
        ikeAuthAlg?: string(name='IkeAuthAlg', description='The authentication algorithm in the IKE phase.', example='sha1'),
        ikeEncAlg?: string(name='IkeEncAlg', description='The encryption algorithm in the IKE phase.', example='aes'),
        ikeLifetime?: long(name='IkeLifetime', description='The lifetime in the IKE phase. Unit: seconds.', example='86400'),
        ikeMode?: string(name='IkeMode', description='The IKE negotiation mode.

*   **main**: This mode offers higher security during negotiations.
*   **aggressive**: This mode is faster and has a higher success rate.', example='main'),
        ikePfs?: string(name='IkePfs', description='The DH group in the IKE phase.', example='group2'),
        ikeVersion?: string(name='IkeVersion', description='The version of the IKE protocol.

*   **ikev1**
*   **ikev2**

Compared with IKEv1, IKEv2 simplifies the SA negotiation process and is more suitable for scenarios in which multiple CIDR blocks are used.', example='ikev1'),
        localId?: string(name='LocalId', description='The identifier of the IPsec-VPN connection on the data center side.', example='116.64.XX.XX'),
        psk?: string(name='Psk', description='The pre-shared key.', example='pgw6dy7****'),
        remoteId?: string(name='RemoteId', description='The identifier of the IPsec-VPN connection on the Alibaba Cloud side.', example='139.17.XX.XX'),
      }(name='IkeConfig', description='The configurations of Phase 1 negotiations.'),
      internetIp?: string(name='InternetIp', description='The gateway IP address of the IPsec-VPN connection.

>  This parameter is returned only if the IPsec-VPN connection is associated with a transit router.', example='10.XX.XX.10'),
      ipsecConfig?: {
        ipsecAuthAlg?: string(name='IpsecAuthAlg', description='The authentication algorithm in the IPsec phase.', example='sha1'),
        ipsecEncAlg?: string(name='IpsecEncAlg', description='The encryption algorithm in the IPsec phase.', example='aes'),
        ipsecLifetime?: long(name='IpsecLifetime', description='The lifetime in the IPsec phase. Unit: seconds.', example='86400'),
        ipsecPfs?: string(name='IpsecPfs', description='The DH group in the IPsec phase.', example='group2'),
      }(name='IpsecConfig', description='The configurations of Phase 2 negotiations.'),
      localSubnet?: string(name='LocalSubnet', description='The CIDR block on the Alibaba Cloud side.

Multiple CIDR blocks are separated by commas (,).', example='192.168.0.0/16,172.17.0.0/16'),
      name?: string(name='Name', description='The name of the IPsec-VPN connection.', example='nametest'),
      networkType?: string(name='NetworkType', description='The network type of the IPsec-VPN connection. Valid values:

*   **public**
*   **private**', example='public'),
      remoteCaCertificate?: string(name='RemoteCaCertificate', description='The certificate authority (CA) certificate of the peer.', example='-----BEGIN CERTIFICATE----- MIIB7zCCAZW**** -----END CERTIFICATE-----'),
      remoteSubnet?: string(name='RemoteSubnet', description='The CIDR block of the data center.

Multiple CIDR blocks are separated by commas (,).', example='10.0.0.0/8,172.16.0.0/16'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the IPsec-VPN connection belongs.

You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/158855.html) operation to query the resource group information.', example='rg-acfmzs372yg****'),
      spec?: string(name='Spec', description='The bandwidth specification of the IPsec-VPN connection. Unit: **Mbit/s**.', example='1000M'),
      state?: string(name='State', description='The association state of the IPsec-VPN connection. Valid values:

*   **active**: The IPsec-VPN connection is associated with a VPN gateway.
*   **init**: The IPsec-VPN connection is not associated with any resource and is being initialized.
*   **attaching**: The IPsec-VPN connection is being associated with a transit router.
*   **attached**: The IPsec-VPN connection is associated with a transit router.
*   **detaching**: The IPsec-VPN connection is being disassociated from a transit router.
*   **financialLocked**: The IPsec-VPN connection is locked due to overdue payments.
*   **provisioning**: The IPsec-VPN connection is being prepared.
*   **updating**: The IPsec-VPN connection is being updated.
*   **Upgrading**: The IPsec-VPN connection is being upgraded.
*   **deleted**: The IPsec-VPN connection is deleted.', example='attached'),
      status?: string(name='Status', description='The status of the IPsec-VPN connection. Valid values:

*   **ike_sa_not_established**: Phase 1 negotiations failed.
*   **ike_sa_established**: Phase 1 negotiations succeeded.
*   **ipsec_sa_not_established**: Phase 2 negotiations failed.
*   **ipsec_sa_established**: Phase 2 negotiations succeeded.', example='ipsec_sa_established'),
      tag?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The tag key of the IPsec-VPN connection.', example='TagKey'),
          value?: string(name='Value', description='The tag value of the IPsec-VPN connection.', example='TagValue'),
        }
      ](name='Tag')
      }(name='Tag', description='The list of tags to be added to the IPsec-VPN connection.'),
      transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router with which the IPsec-VPN connection is associated.', example='tr-p0we2edef9qr44a85****'),
      transitRouterName?: string(name='TransitRouterName', description='The name of the transit router.', example='nametest'),
      tunnelOptionsSpecification?: {
        tunnelOptions?: [ 
        {
          customerGatewayId?: string(name='CustomerGatewayId', description='The ID of the customer gateway associated with the tunnel.', example='cgw-p0wy363lucf1uyae8****'),
          enableDpd?: string(name='EnableDpd', description='Indicates whether the DPD feature is enabled for the tunnel. Valid values:

*   **false**
*   **true**', example='true'),
          enableNatTraversal?: string(name='EnableNatTraversal', description='Indicates whether NAT traversal is enabled for the tunnel. Valid values:

*   **false**
*   **true**', example='true'),
          internetIp?: string(name='InternetIp', description='The tunnel IP address.', example='47.21.XX.XX'),
          remoteCaCertificate?: string(name='RemoteCaCertificate', description='The CA certificate of the tunnel peer.

This parameter is returned only if the VPN gateway is of the SM type.', example='-----BEGIN CERTIFICATE----- MIIB7zCCAZW**** -----END CERTIFICATE-----'),
          role?: string(name='Role', description='The tunnel role. Valid values:

*   **master**: The tunnel is an active tunnel.
*   **slave**: The tunnel is a standby tunnel.', example='master'),
          state?: string(name='State', description='The tunnel status. Valid values:

*   **active**
*   **updating**
*   **deleting**', example='active'),
          status?: string(name='Status', description='The state of the IPsec-VPN connection. Valid values:

*   **ike_sa_not_established**: Phase 1 negotiations failed.
*   **ike_sa_established**: Phase 1 negotiations succeeded.
*   **ipsec_sa_not_established**: Phase 2 negotiations failed.
*   **ipsec_sa_established**: Phase 2 negotiations succeeded.', example='ipsec_sa_established'),
          tunnelBgpConfig?: {
            bgpStatus?: string(name='BgpStatus', description='The negotiation state of BGP. Valid values:

*   **success**
*   **false**', example='success'),
            localAsn?: string(name='LocalAsn', description='The ASN on the Alibaba Cloud side.', example='65530'),
            localBgpIp?: string(name='LocalBgpIp', description='The BGP address on the Alibaba Cloud side.', example='169.254.10.1'),
            peerAsn?: string(name='PeerAsn', description='The ASN of the tunnel peer.', example='65531'),
            peerBgpIp?: string(name='PeerBgpIp', description='The BGP IP address of the tunnel peer.', example='169.254.10.2'),
            tunnelCidr?: string(name='TunnelCidr', description='The BGP CIDR block of the tunnel.', example='169.254.10.0/30'),
          }(name='TunnelBgpConfig', description='The BGP configurations.'),
          tunnelId?: string(name='TunnelId', description='The tunnel ID.', example='tun-opsqc4d97wni27****'),
          tunnelIkeConfig?: {
            ikeAuthAlg?: string(name='IkeAuthAlg', description='The authentication algorithm in the IKE phase.', example='sha1'),
            ikeEncAlg?: string(name='IkeEncAlg', description='The encryption algorithm in the IKE phase.', example='aes'),
            ikeLifetime?: string(name='IkeLifetime', description='The lifetime in the IKE phase. Unit: seconds.', example='86400'),
            ikeMode?: string(name='IkeMode', description='The IKE negotiation mode.

*   **main**: This mode offers higher security during negotiations.
*   **aggressive**: This mode is faster and has a higher success rate.', example='main'),
            ikePfs?: string(name='IkePfs', description='The DH group in the IKE phase.', example='group2'),
            ikeVersion?: string(name='IkeVersion', description='The version of the IKE protocol.', example='ikev1'),
            localId?: string(name='LocalId', description='The identifier of the tunnel on the Alibaba Cloud side.', example='47.21.XX.XX'),
            psk?: string(name='Psk', description='The pre-shared key.', example='123456****'),
            remoteId?: string(name='RemoteId', description='The identifier of the tunnel peer.', example='47.42.XX.XX'),
          }(name='TunnelIkeConfig', description='The configuration of Phase 1 negotiations.'),
          tunnelIndex?: int32(name='TunnelIndex'),
          tunnelIpsecConfig?: {
            ipsecAuthAlg?: string(name='IpsecAuthAlg', description='The authentication algorithm in the IPsec phase.', example='sha1'),
            ipsecEncAlg?: string(name='IpsecEncAlg', description='The encryption algorithm in the IPsec phase.', example='aes'),
            ipsecLifetime?: string(name='IpsecLifetime', description='The lifetime in the IPsec phase. Unit: seconds.', example='86400'),
            ipsecPfs?: string(name='IpsecPfs', description='The DH group in the IPsec phase.', example='group2'),
          }(name='TunnelIpsecConfig', description='The configurations of Phase 2 negotiations.'),
          zoneNo?: string(name='ZoneNo', description='The zone of the tunnel.', example='ap-southeast-5a'),
        }
      ](name='TunnelOptions')
      }(name='TunnelOptionsSpecification', description='The tunnel configuration of the IPsec-VPN connection.

Parameters in **TunnelOptionsSpecification** are returned only if you query IPsec-VPN connections in dual-tunnel mode.'),
      vcoHealthCheck?: {
        dip?: string(name='Dip', description='The destination IP address.', example='192.168.0.1'),
        enable?: string(name='Enable', description='Indicates whether the health check feature is enabled.

*   **true**
*   **false**', example='true'),
        interval?: int32(name='Interval', description='The interval between two consecutive health checks. Unit: seconds.', example='2'),
        policy?: string(name='Policy', description='Indicates whether advertised routes are withdrawn when the health check fails.

*   **revoke_route**: Advertised routes are withdrawn.
*   **reserve_route**: Advertised routes are not withdrawn.', example='revoke_route'),
        retry?: int32(name='Retry', description='The maximum number of health check retries.', example='3'),
        sip?: string(name='Sip', description='The source IP address.', example='192.168.0.50'),
        status?: string(name='Status', description='The state of the health check. Valid values:

*   **success**
*   **failed**', example='success'),
      }(name='VcoHealthCheck', description='The health check configuration of the IPsec-VPN connection.'),
      vpnBgpConfig?: {
        authKey?: string(name='AuthKey', description='The authentication key of the BGP routing protocol.', example='AuthKey****'),
        localAsn?: long(name='LocalAsn', description='The ASN on the Alibaba Cloud side.', example='65531'),
        localBgpIp?: string(name='LocalBgpIp', description='The BGP IP address on the Alibaba Cloud side.', example='169.254.10.2'),
        peerAsn?: long(name='PeerAsn', description='The ASN of the peer.', example='65530'),
        peerBgpIp?: string(name='PeerBgpIp', description='The BGP IP address of the peer.', example='169.254.10.1'),
        status?: string(name='Status', description='The negotiation state of the BGP routing protocol. Valid values:

*   **success**
*   **false**', example='success'),
        tunnelCidr?: string(name='TunnelCidr', description='The BGP CIDR block of the IPsec-VPN connection. The CIDR block falls within 169.254.0.0/16. The subnet mask of the CIDR block must be 30 bits in length.', example='169.254.10.0/30'),
      }(name='VpnBgpConfig', description='The BGP configuration of the IPsec-VPN connection.'),
      vpnConnectionId?: string(name='VpnConnectionId', description='The ID of the IPsec-VPN connection.', example='vco-bp10lz7aejumd****'),
      vpnGatewayId?: string(name='VpnGatewayId', description='The ID of the VPN gateway.', example='vpn-bp1q8bgx4xnkm****'),
    }
  ](name='VpnConnection')
  }(name='VpnConnections', description='The information about the IPsec-VPN connection.'),
}

model DescribeVpnConnectionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpnConnectionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVpnConnections  DescribeVpnConnectionsRequest
  * @return DescribeVpnConnectionsResponse
 */
async function describeVpnConnections(request: DescribeVpnConnectionsRequest): DescribeVpnConnectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpnConnections', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpnCrossAccountAuthorizationsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, the system automatically uses **RequestId** as **ClientToken**. **RequestId** of each API request may be different.', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**. Valid values: **1** to **50**.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the IPsec-VPN connection belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpnConnectionId: string(name='VpnConnectionId', description='The ID of the IPsec-VPN connection.

This parameter is required.', example='vco-p0w2jpkhi2eeop6q6****', position='Query'),
}

model DescribeVpnCrossAccountAuthorizationsResponseBody = {
  crossAccountAuthorizations?: [ 
    {
      aliUid?: long(name='AliUid', description='The ID of the Alibaba Cloud account to which the IPsec-VPN connection belongs.', example='1250123456123456'),
      bindInstance?: string(name='BindInstance', description='The ID of the CEN instance.', example='cen-vv8h0t3klfpaae****'),
      bindProduct?: string(name='BindProduct', description='The resource type of the authorization.

The value is set to **CEN**, which indicates that the IPsec-VPN connection can be associated with a transit router of a Cloud Enterprise Network (CEN) instance that belongs to another Alibaba Cloud account.', example='CEN'),
      bindUid?: long(name='BindUid', description='The ID of the Alibaba Cloud account whose resource the IPsec-VPN connection can be associated with.', example='1210123456123456'),
      creationTime?: long(name='CreationTime', description='The timestamp when the authorization for the IPsec-VPN connection was created.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1658201810000'),
      vpnConnectionId?: string(name='VpnConnectionId', description='The ID of the IPsec-VPN connection.', example='vco-p0w2jpkhi2eeop6q6****'),
    }
  ](name='CrossAccountAuthorizations', description='The cross-account authorization information about the IPsec-VPN connection.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DB04E39A-6F0C-36AC-BCA0-B6D371B90062'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
}

model DescribeVpnCrossAccountAuthorizationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpnCrossAccountAuthorizationsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVpnCrossAccountAuthorizations  DescribeVpnCrossAccountAuthorizationsRequest
  * @return DescribeVpnCrossAccountAuthorizationsResponse
 */
async function describeVpnCrossAccountAuthorizations(request: DescribeVpnCrossAccountAuthorizationsRequest): DescribeVpnCrossAccountAuthorizationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpnCrossAccountAuthorizations', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpnGatewayRequest {
  includeReservationData?: boolean(name='IncludeReservationData', description='Specifies whether to include the data about pending orders. Valid values:

*   **false** (default)
*   **true**', example='true', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VPN gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-zhangjiakou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', description='The ID of the VPN gateway.

This parameter is required.', example='vpn-bp1r3v1xqkl0w519g****', position='Query'),
}

model DescribeVpnGatewayResponseBody = {
  autoPropagate?: boolean(name='AutoPropagate', description='Indicates whether BGP routes are automatically advertised to the VPC. Valid values:

*   **true**
*   **false**', example='true'),
  businessStatus?: string(name='BusinessStatus', description='The payment status of the VPN gateway. Valid values:

*   **Normal**
*   **FinancialLocked**', example='Normal'),
  chargeType?: string(name='ChargeType', description='The billing method. Valid value:

**POSTPAY**: pay-as-you-go', example='China site (aliyun.com): Prepay. International site (alibabacloud.com): POSTPAY.'),
  createTime?: long(name='CreateTime', description='The timestamp when the VPN gateway was created. Unit: milliseconds.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1495382400000'),
  description?: string(name='Description', description='The description of the VPN gateway.', example='vpngatewaydescription'),
  disasterRecoveryInternetIp?: string(name='DisasterRecoveryInternetIp', description='The second IP address assigned by the system to create an IPsec-VPN connection.

This parameter is returned only when the VPN gateway supports the dual-tunnel mode.', example='47.91.XX.XX'),
  disasterRecoveryVSwitchId?: string(name='DisasterRecoveryVSwitchId', description='The ID of the second vSwitch associated with the VPN gateway.

This parameter is returned only when the VPN gateway supports the dual-tunnel mode.', example='vsw-p0w95ql6tmr2ludkt****'),
  enableBgp?: boolean(name='EnableBgp', description='Indicates whether BGP is enabled for the VPN gateway. Valid values:

*   **true**
*   **false**', example='true'),
  endTime?: long(name='EndTime', description='The timestamp when the VPN gateway expires. Unit: milliseconds.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1544666102000'),
  eniInstanceIds?: {
    eniInstanceId?: [ string ](name='EniInstanceId')
  }(name='EniInstanceIds', description='The ENIs created by the system for the VPN gateway.'),
  internetIp?: string(name='InternetIp', description='*   If the VPN gateway supports IPsec-VPN connections in single-tunnel mode, the address is the IP address of the VPN gateway and can be used to create an IPsec-VPN connection or an SSL-VPN connection.

*   If the VPN gateway supports IPsec-VPN connections in dual-tunnel mode, the address is the first IP address used to create an IPsec-VPN connection. The address cannot be used to create an SSL-VPN connection.

    If the VPN gateway supports IPsec-VPN connections in dual-tunnel mode, the system assigns two IP addresses to the VPN gateway to create two encrypted tunnels.', example='47.22.XX.XX'),
  ipsecVpn?: string(name='IpsecVpn', description='Indicates whether the IPsec-VPN feature is enabled. Valid values:

*   **enable**
*   **disable**', example='enable'),
  name?: string(name='Name', description='The name of the VPN gateway.', example='vpngatewayname'),
  networkType?: string(name='NetworkType', description='The network type of the VPN gateway.

*   **public**
*   **private**', example='public'),
  requestId?: string(name='RequestId', description='The request ID.', example='27E4E088-8DE0-4672-BF5C-0A412389DB9E'),
  reservationData?: {
    reservationEndTime?: string(name='ReservationEndTime', description='If the order type is **TEMP_UPGRADE** (temporary upgrade), this parameter specifies the time when the temporary upgrade expires.

If the order type is **RENEWCHANGE** (renewal with a specification change) or **RENEW** (renewal), this parameter indicates the time when the renewal or renewal with a specification change takes effect.', example='2020-07-20T16:00:00Z'),
    reservationIpsec?: string(name='ReservationIpsec', description='The IPsec-VPN status of the pending order. Valid values:

*   **enable**
*   **disable**', example='enable'),
    reservationMaxConnections?: int32(name='ReservationMaxConnections', description='The maximum number of concurrent SSL-VPN connections of the pending order.', example='5'),
    reservationOrderType?: string(name='ReservationOrderType', description='The type of the pending order. Valid values:

*   **RENEWCHANGE**: renewal with upgrade or downgrade
*   **TEMP_UPGRADE**: temporary upgrade
*   **RENEW**: renewal', example='TEMP_UPGRADE'),
    reservationSpec?: string(name='ReservationSpec', description='The bandwidth of the pending order. Unit: Mbit/s.', example='5'),
    reservationSsl?: string(name='ReservationSsl', description='The SSL-VPN status of the pending order. Valid values:

*   **enable**
*   **disable**', example='enable'),
    status?: string(name='Status', description='The status of the pending order. Valid values:

*   **1**: indicates that the order of the renewal or specification change has not taken effect.
*   **2**: indicates that the order is an order for temporary upgrade and the order has taken effect. After the temporary upgrade expires, the system restores the VPN gateway to its previous specifications. In this case, **ReservationIpsec**, **ReservationMaxConnections**, **ReservationSpec**, and **ReservationSsl** indicate the previous specification.', example='1'),
  }(name='ReservationData', description='The information about pending orders.

> This set of parameters is returned only when **IncludeReservationData** is set to **true**.'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the VPN gateway belongs.

You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/158855.html) operation to query resource groups.', example='rg-acfmzs372yg****'),
  spec?: string(name='Spec', description='The maximum bandwidth of the VPN gateway. Unit: Mbit/s.', example='5'),
  sslMaxConnections?: long(name='SslMaxConnections', description='The maximum number of concurrent SSL-VPN connections.', example='5'),
  sslVpn?: string(name='SslVpn', description='The status of the SSL-VPN feature. Valid values:

*   **enable**
*   **disable**', example='enable'),
  sslVpnInternetIp?: string(name='SslVpnInternetIp', description='The IP address of the SSL-VPN connection.

This parameter is returned only when the VPN gateway is a public VPN gateway and supports only the single-tunnel mode. In addition, the VPN gateway must have the SSL-VPN feature enabled.', example='47.74.XX.XX'),
  status?: string(name='Status', description='The status of the VPN gateway. Valid values:

*   **init**
*   **provisioning**
*   **active**
*   **updating**
*   **deleting**', example='init'),
  tag?: string(name='Tag', description='The tag that is automatically generated for the VPN gateway. The tag consists of the following parameters:

*   **VpnEnableBgp**: indicates whether the VPN gateway supports BGP. Valid values:

    *   **true**
    *   **false**

*   **VisuallySsl**: indicates whether the VPN gateway allows you to view the connection information of SSL clients. Valid values:

    *   **true**
    *   **false**

*   **PbrPriority**: indicates whether the VPN gateway allows you to configure priorities for policy-based routes. Valid values:

    *   **true**
    *   **false**

*   **VpnNewImage**: indicates whether the VPN gateway is upgraded. Valid values:

    *   **true**
    *   **false**

*   **description**: the description of the VPN gateway. This parameter is only for internal use.

*   **VpnVersion**: the version of the VPN gateway.

*   **IDaaSNewVersion**: indicates whether the VPN gateway can be associated with an EIAM 2.0 instance.

    *   **true**
    *   **false**', example='{\\"VpnEnableBgp\\":\\"true\\",\\"VisuallySsl\\":\\"true\\",\\"PbrPriority\\":\\"true\\",\\"VpnNewImage\\":\\"true\\",\\"description\\":\\"forwarding1.3.7\\",\\"VpnVersion\\":\\"v1.2.4\\"}'),
  tags?: {
    tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='aaa'),
      value?: string(name='Value', description='The tag value.', example='bbb'),
    }
  ](name='Tag')
  }(name='Tags', description='The tags that are added to the VPN gateway.'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which the VPN gateway belongs.', example='vsw-bp1dmzugdikc6hdgx****'),
  vpcId?: string(name='VpcId', description='The ID of the VPC to which the VPN gateway belongs.', example='vpc-bp19m2yx1m5q0avyq****'),
  vpnGatewayId?: string(name='VpnGatewayId', description='The ID of the VPN gateway.', example='vpn-bp1r3v1xqkl0w519g****'),
  vpnType?: string(name='VpnType', description='The type of VPN gateway. Only **Normal** may be returned, which indicates a standard VPN gateway.', example='Normal'),
}

model DescribeVpnGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpnGatewayResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVpnGateway  DescribeVpnGatewayRequest
  * @return DescribeVpnGatewayResponse
 */
async function describeVpnGateway(request: DescribeVpnGatewayRequest): DescribeVpnGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpnGateway', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpnGatewayAvailableZonesRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  spec: string(name='Spec', description='This parameter is required.', example='5M', position='Query'),
}

model DescribeVpnGatewayAvailableZonesResponseBody = {
  availableZoneIdList?: [ 
    {
      zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
      zoneName?: string(name='ZoneName', example='cn-hangzhou-h'),
    }
  ](name='AvailableZoneIdList'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='29784052-931F-543D-A612-36B3838163FA'),
}

model DescribeVpnGatewayAvailableZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpnGatewayAvailableZonesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVpnGatewayAvailableZones  DescribeVpnGatewayAvailableZonesRequest
  * @return DescribeVpnGatewayAvailableZonesResponse
 */
async function describeVpnGatewayAvailableZones(request: DescribeVpnGatewayAvailableZonesRequest): DescribeVpnGatewayAvailableZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpnGatewayAvailableZones', 'GET', '/', 'json', false, 'json', request);
}

model DescribeVpnGatewaysRequest {
  businessStatus?: string(name='BusinessStatus', description='The payment status of the VPN gateway. Valid values:

*   **Normal**
*   **FinancialLocked**', example='Normal', position='Query'),
  includeReservationData?: boolean(name='IncludeReservationData', description='Specifies whether to return information about pending orders. Valid values:

*   **false** (default)
*   **true**', example='true', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: **1** to **50**. Default value: **10**.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VPN gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-zhangjiakou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the VPN gateway belongs.

 You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/158855.html) operation to query the resource group list.', example='rg-acfmzs372yg****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', description='The status of the VPN gateway. Valid values:

*   **init**
*   **provisioning**
*   **active**
*   **updating**
*   **deleting**', example='active', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.

You can specify at most 20 tag keys at a time.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value.

Each tag key corresponds to one tag value. You can specify at most 20 tag values at a time.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags that are added to the VPN gateway.', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the VPN gateway belongs.', example='vpc-bp1m3i0kn1nd4wiw9****', position='Query'),
  vpnGatewayId?: string(name='VpnGatewayId', description='The ID of the VPN gateway.', example='vpn-bp17lofy9fd0dnvzv****', position='Query'),
}

model DescribeVpnGatewaysResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='DF11D6F6-E35A-41C3-9B20-6FC8A901FE65'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
  vpnGateways?: {
    vpnGateway?: [ 
    {
      autoPropagate?: boolean(name='AutoPropagate', description='Indicates whether BGP routes are automatically advertised to the VPC.

*   **true**
*   **false**', example='true'),
      businessStatus?: string(name='BusinessStatus', description='The payment status of the VPN gateway.

*   **Normal**
*   **FinancialLocked**', example='Normal'),
      chargeType?: string(name='ChargeType', description='The billing method of the VPN gateway.

Only **POSTPAY** may be returned, which indicates the pay-as-you-go billing method.', example='Example value for the China site (aliyun.com): Prepay. Example value for the International site (alibabacloud.com): POSTPAY.'),
      createTime?: long(name='CreateTime', description='The timestamp generated when the VPN gateway was created. Unit: milliseconds.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1515383700000'),
      description?: string(name='Description', description='The description of the VPN gateway.', example='test'),
      disasterRecoveryInternetIp?: string(name='DisasterRecoveryInternetIp', description='The second IP address that is assigned to the VPN gateway to create IPsec-VPN connections.

This parameter is returned only if the VPN gateway supports IPsec-VPN connections in dual-tunnel mode.', example='47.91.XX.XX'),
      disasterRecoveryVSwitchId?: string(name='DisasterRecoveryVSwitchId', description='The ID of the second vSwitch that is associated with the VPN gateway.

This parameter is returned only if the VPN gateway supports IPsec-VPN connections in dual-tunnel mode.', example='vsw-p0w95ql6tmr2ludkt****'),
      enableBgp?: boolean(name='EnableBgp', description='The BGP status of the VPN gateway. Valid values:

*   **true**
*   **false**', example='true'),
      endTime?: long(name='EndTime', description='The timestamp generated when the VPN gateway expires. Unit: milliseconds.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1518105600000'),
      eniInstanceIds?: {
        eniInstanceId?: [ string ](name='EniInstanceId')
      }(name='EniInstanceIds', description='The ENIs created by the system for the VPN gateway.'),
      internetIp?: string(name='InternetIp', description='*   If the VPN gateway supports IPsec-VPN connections in single-tunnel mode, the value of this parameter is the IP address of the VPN gateway, which can be used to create IPsec-VPN or SSL-VPN connections.

*   If the VPN gateway supports IPsec-VPN connections in dual-tunnel mode, the value of this parameter is the first IP address that is used to create an IPsec-VPN connection. The IP address cannot be used to create SSL-VPN connections.

    If the VPN gateway supports IPsec-VPN connections in dual-tunnel mode, the system assigns two IPsec addresses to the VPN gateway to create IPsec-VPN connections in dual-tunnel mode.', example='47.12.XX.XX'),
      ipsecVpn?: string(name='IpsecVpn', description='Indicates whether IPsec-VPN is enabled for the VPN gateway. Valid values:

*   **enable**
*   **disable**', example='enable'),
      name?: string(name='Name', description='The name of the VPN gateway.', example='test'),
      networkType?: string(name='NetworkType', description='The network type of the VPN gateway.

*   **public**
*   **private**', example='public'),
      reservationData?: {
        reservationEndTime?: string(name='ReservationEndTime', description='If the value of ReservationOrderType is **TEMP_UPGRADE**, this parameter indicates the time when the temporary upgrade expires.

If the value of ReservationOrderType is **RENEWCHANGE** or **RENEW**, this parameter indicates the time when the renewal or renewal with a specification change takes effect.', example='2021-07-20T16:00:00Z'),
        reservationIpsec?: string(name='ReservationIpsec', description='The IPsec-VPN status of the pending order. Valid values:

*   **enable**
*   **disable**', example='enable'),
        reservationMaxConnections?: int32(name='ReservationMaxConnections', description='The maximum number of concurrent SSL-VPN connections of the pending order.', example='5'),
        reservationOrderType?: string(name='ReservationOrderType', description='The type of the order that has not taken effect. Valid values:

*   **RENEWCHANGE**: renewal with upgrade or downgrade
*   **TEMP_UPGRADE**: temporary upgrade
*   **RENEW**: renewal', example='TEMP_UPGRADE'),
        reservationSpec?: string(name='ReservationSpec', description='The bandwidth of the pending order. Unit: Mbit/s.', example='5'),
        reservationSsl?: string(name='ReservationSsl', description='The SSL-VPN status of the pending order. Valid values:

*   **enable**
*   **disable**', example='enable'),
        status?: string(name='Status', description='The status of the pending order.

*   **1**: indicates that the order for renewal or the order for renewal with a specification change has not taken effect.
*   **2**: indicates that the order of the temporary upgrade has taken effect. After the temporary upgrade expires, the system restores the VPN gateway to its previous specifications. In this case, the values of **ReservationIpsec**, **ReservationMaxConnections**, **ReservationSpec**, and **ReservationSsl** indicate the previous specifications of the VPN gateway.', example='1'),
      }(name='ReservationData', description='The information about pending orders.

> This parameter is returned only if **IncludeReservationData** is set to **true**.'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the VPN gateway belongs.

You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/158855.html) operation to query resource groups.', example='rg-acfmzs372yg****'),
      spec?: string(name='Spec', description='The maximum bandwidth of the VPN gateway. Unit: **M**, which indicates Mbit/s.', example='5M'),
      sslMaxConnections?: long(name='SslMaxConnections', description='The number of SSL-VPN connections supported by the VPN gateway.', example='5'),
      sslVpn?: string(name='SslVpn', description='Indicates whether SSL-VPN is enabled for the VPN gateway. Valid values:

*   **enable**
*   **disable**', example='enable'),
      sslVpnInternetIp?: string(name='SslVpnInternetIp', description='The IP address of the SSL-VPN connection.

This parameter is returned only if the VPN gateway is a public VPN gateway and supports IPsec-VPN connections in dual-tunnel mode. In addition, SSL-VPN must be enabled for the VPN gateway.', example='47.74.XX.XX'),
      status?: string(name='Status', description='The status of the VPN gateway. Valid values:

*   **init**
*   **provisioning**
*   **active**
*   **updating**
*   **deleting**', example='active'),
      tag?: string(name='Tag', description='The tag that is automatically generated for the VPN gateway.

*   **VpnEnableBgp**: indicates whether the VPN gateway supports BGP. Valid values:

    *   **true**
    *   **false**

*   **VisuallySsl**: indicates whether the VPN gateway allows you to view the connection information of SSL clients. Valid values:

    *   **true**
    *   **false**

*   **PbrPriority**: indicates whether the VPN gateway allows you to configure priorities for policy-based routes. Valid values:

    *   **true**
    *   **false**

*   **VpnNewImage**: indicates whether the VPN gateway is upgraded. Valid values:

    *   **true**: queries only SQL templates that need to be optimized.
    *   **false**: does not query only SQL statements that need to be optimized.

*   **description**: the description of the VPN gateway. This parameter is only for internal use.

*   **VpnVersion**: the version of the VPN gateway.

*   **IDaaSNewVersion**: indicates whether the VPN gateway can be associated with an EIAM 2.0 instance.

    *   **true**
    *   **false**', example='{\\"VpnEnableBgp\\":\\"true\\",\\"VisuallySsl\\":\\"true\\",\\"PbrPriority\\":\\"true\\",\\"VpnNewImage\\":\\"true\\",\\"description\\":\\"forwarding1.3.7\\",\\"VpnVersion\\":\\"v1.2.4\\"}'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='FinanceDept'),
          value?: string(name='Value', description='The tag value.', example='FinanceJoshua'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags that are added to the VPN gateway.'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which the VPN gateway belongs.', example='vsw-bp15lbk8sgtr6r5b0****'),
      vpcId?: string(name='VpcId', description='The ID of the VPC to which the VPN gateway belongs.', example='vpc-bp1m3i0kn1nd4wiw9****'),
      vpnGatewayId?: string(name='VpnGatewayId', description='The ID of the VPN gateway.', example='vpn-bp17lofy9fd0dnvzv****'),
      vpnType?: string(name='VpnType', description='The type of VPN gateway.

Only **Normal** may be returned, which indicates a standard VPN gateway.', example='Normal'),
    }
  ](name='VpnGateway')
  }(name='VpnGateways', description='The information about the VPN gateways.'),
}

model DescribeVpnGatewaysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpnGatewaysResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVpnGateways  DescribeVpnGatewaysRequest
  * @return DescribeVpnGatewaysResponse
 */
async function describeVpnGateways(request: DescribeVpnGatewaysRequest): DescribeVpnGatewaysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpnGateways', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpnPbrRouteEntriesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: **50**. Default value: **10**.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VPN gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-zhangjiakou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', description='The ID of the VPN gateway.

This parameter is required.', example='vpn-bp1a3kqjiiq9legfx****', position='Query'),
}

model DescribeVpnPbrRouteEntriesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
  vpnPbrRouteEntries?: {
    vpnPbrRouteEntry?: [ 
    {
      createTime?: long(name='CreateTime', description='The time when the policy-based route was created. Unit: millisecond.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1492747187000'),
      nextHop?: string(name='NextHop', description='The next hop of the policy-based route.', example='vco-bp15oes1py4i66rmd****'),
      nextHopTunnelId?: string(name='NextHopTunnelId', description='The ID of the tunnel associated with the next hop of the policy-based route.

This parameter is returned only if the VPN gateway supports IPsec-VPN connections in dual-tunnel mode.', example='tun-opsqc4d97wni2****'),
      priority?: int32(name='Priority', description='The priority of the policy-based route.

A smaller value indicates a higher priority.', example='10'),
      routeDest?: string(name='RouteDest', description='The destination CIDR block of the policy-based route.', example='10.0.0.0/24'),
      routeSource?: string(name='RouteSource', description='The source CIDR block of the policy-based route.', example='192.168.0.0/24'),
      state?: string(name='State', description='The status of the policy-based route. Valid values:

*   **published**: advertised to the VPC route table.
*   **normal**: not advertised to the VPC route table.', example='published'),
      vpnInstanceId?: string(name='VpnInstanceId', description='The ID of the VPN gateway.', example='vpn-bp1a3kqjiiq9legfx****'),
      weight?: int32(name='Weight', description='The weight of the policy-based route.

For a VPN gateway that supports IPsec-VPN connections in single-tunnel mode, the weight of a policy-based route indicates the priority of the route.

*   **100**: a high priority If multiple policy-based routes with the same source CIDR block and destination CIDR block exist, the IPsec-VPN connection associated with the policy-based route is the active connection.
*   **0**: a low priority If multiple policy-based routes with the same source CIDR block and destination CIDR block exist, the IPsec-VPN connection associated with the policy-based route is the standby connection.

>  For a VPN gateway that does not support IPsec-VPN connections in single-tunnel mode, this parameter does not take effect.', example='0'),
    }
  ](name='VpnPbrRouteEntry')
  }(name='VpnPbrRouteEntries', description='The list of policy-based routes.'),
}

model DescribeVpnPbrRouteEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpnPbrRouteEntriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVpnPbrRouteEntries  DescribeVpnPbrRouteEntriesRequest
  * @return DescribeVpnPbrRouteEntriesResponse
 */
async function describeVpnPbrRouteEntries(request: DescribeVpnPbrRouteEntriesRequest): DescribeVpnPbrRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpnPbrRouteEntries', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpnRouteEntriesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: **50**. Default value: **10**.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the VPN gateway is created.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeEntryType?: string(name='RouteEntryType', description='The type of the route entry. Valid values:

*   **Custom**: custom
*   **System**: system', example='System', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', description='The ID of the VPN gateway.

This parameter is required.', example='vpn-bp1cmw7jh1nfe43m9****', position='Query'),
}

model DescribeVpnRouteEntriesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BF3995A6-FA4F-4C74-B90F-89ECF4BFF4D5'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  vpnRouteCounts?: {
    vpnRouteCount?: [ 
    {
      routeCount?: int32(name='RouteCount'),
      routeEntryType?: string(name='RouteEntryType'),
      source?: string(name='Source'),
    }
  ](name='VpnRouteCount')
  }(name='VpnRouteCounts'),
  vpnRouteEntries?: {
    vpnRouteEntry?: [ 
    {
      asPath?: string(name='AsPath', description='The AS path of the route entry.', example='65501,65001,60011'),
      community?: string(name='Community', description='The community attributes of the route entry.', example='65001:1000,65501:2000'),
      createTime?: long(name='CreateTime', description='The timestamp when the route entry was created.', example='1563874074000'),
      nextHop?: string(name='NextHop', description='The next hop of the route entry.', example='vco-bp1tui07ob10fmuro****'),
      nextHopTunnelId?: string(name='NextHopTunnelId', description='The ID of the tunnel associated with the next hop. 


> This parameter is returned only if the VPN gateway supports the dual-tunnel mode.', example='tun-36cfgpwjn58axj****'),
      routeDest?: string(name='RouteDest', description='The destination CIDR block of the route entry.', example='10.0.0.0/24'),
      routeEntryType?: string(name='RouteEntryType', description='The type of the route entry. Valid values:

*   **Custom**: custom
*   **System**: system', example='System'),
      source?: string(name='Source', description='The source CIDR block of the route entry.', example='192.168.10.0/24'),
      state?: string(name='State', description='The status of the route entry. Valid values:

*   **published**: advertised
*   **normal**: not advertised', example='normal'),
      vpnInstanceId?: string(name='VpnInstanceId', description='The ID of the VPN gateway.', example='vpn-bp1cmw7jh1nfe43m9****'),
      weight?: int32(name='Weight', description='The weight of the route entry. Valid values: **0** and **100**.

*   **0**: a low priority
*   **100**: a high priority', example='100'),
    }
  ](name='VpnRouteEntry')
  }(name='VpnRouteEntries', description='The list of route entries.'),
}

model DescribeVpnRouteEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpnRouteEntriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVpnRouteEntries  DescribeVpnRouteEntriesRequest
  * @return DescribeVpnRouteEntriesResponse
 */
async function describeVpnRouteEntries(request: DescribeVpnRouteEntriesRequest): DescribeVpnRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpnRouteEntries', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpnSslServerLogsRequest {
  from?: int32(name='From', description='The beginning of the time range to query. The value must be a unix timestamp. For example, 1600738962 specifies 09:42:42 (UTC+8) on September 22, 2020.

>  If you specify **From**, you must also specify **To** or **MinutePeriod**.', example='1600738962', position='Query'),
  minutePeriod?: int32(name='MinutePeriod', description='The interval at which log data is queried. Unit: minutes.

>  If both **From** and **To** are not specified, you must specify **MinutePeriod**.', example='10', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: **50**. Default value: **10**.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the SSL server is created. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sslVpnClientCertId?: string(name='SslVpnClientCertId', description='The ID of the SSL client certificate.', example='vsc-m5euof6s5jy8vs5kd****', position='Query'),
  to?: int32(name='To', description='The end of the time range to query. The value must be a unix timestamp. For example, 1600738962 specifies 09:42:42 (UTC+8) on September 22, 2020.

>  If you specify **To**, you must also specify **From** or **MinutePeriod**.', example='1600738962', position='Query'),
  vpnSslServerId: string(name='VpnSslServerId', description='The ID of the SSL server.

This parameter is required.', example='vss-bp155e9yclsg1xgq4****', position='Query'),
}

model DescribeVpnSslServerLogsResponseBody = {
  count?: int32(name='Count', description='The number of log entries.', example='10'),
  data?: {
    logs?: [ string ](name='Logs')
  }(name='Data', description='An array of strings.

Each item in the array is a log entry.'),
  isCompleted?: boolean(name='IsCompleted', description='Indicates whether the log is accurate. Valid values:

*   **true**: accurate
*   **false**: inaccurate', example='true'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DEDAC5B1-9292-5BF7-BDDF-61BA58CFB2FB'),
}

model DescribeVpnSslServerLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpnSslServerLogsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeVpnSslServerLogs  DescribeVpnSslServerLogsRequest
  * @return DescribeVpnSslServerLogsResponse
 */
async function describeVpnSslServerLogs(request: DescribeVpnSslServerLogsRequest): DescribeVpnSslServerLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpnSslServerLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeZonesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language used in the **LocalName** parameter. Valid values:

*   **zh-cn**: Chinese
*   **en-us**: English
*   **ja**: Japanese', example='zh-cn', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the zone. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  zoneType?: string(name='ZoneType', description='The zone type. Default value: **AvailabilityZone**.', example='AvailabilityZone', position='Query'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
  zones?: {
    zone?: [ 
    {
      localName?: string(name='LocalName', description='The zone name.', example='Hangzhou Zone B'),
      zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-hangzhou-b'),
      zoneType?: string(name='ZoneType', description='The zone type. Default value: **AvailabilityZone**.', example='AvailabilityZone'),
    }
  ](name='Zone')
  }(name='Zones', description='The zone list.'),
}

model DescribeZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeZonesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeZones  DescribeZonesRequest
  * @return DescribeZonesResponse
 */
async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZones', 'POST', '/', 'json', false, 'json', request);
}

model DetachDhcpOptionsSetFromVpcRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  dhcpOptionsSetId: string(name='DhcpOptionsSetId', description='The ID of the DHCP options set to be disassociated from a VPC.

This parameter is required.', example='dopt-o6w0df4epg9zo8isy****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

**true**: performs only a dry run. The system checks your AccessKey pair, the Resource Access Management (RAM) user permissions, and the required parameters. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.

**false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region to which the DHCP options set belongs. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the VPC.

This parameter is required.', example='vpc-dfdgrgthhy****', position='Query'),
}

model DetachDhcpOptionsSetFromVpcResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DetachDhcpOptionsSetFromVpcResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachDhcpOptionsSetFromVpcResponseBody(name='body'),
}

/**
  * @description ## [](#)Description
  * *   **DetachDhcpOptionsSetFromVpc** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeVpcAttribute](https://help.aliyun.com/document_detail/94565.html) operation to query the status of the task.
  *     *   If the DHCP options set is in the **Pending** state, the DHCP options set is being disassociated.
  *     *   If the DHCP options set is in the **UnUsed** state, the DHCP options set is disassociated.
  * *   You cannot repeatedly call the **DetachDhcpOptionsSetFromVpc** operation to disassociate a DHCP options set from a VPC within the specified period of time.
  * @param request  the request parameters of DetachDhcpOptionsSetFromVpc  DetachDhcpOptionsSetFromVpcRequest
  * @return DetachDhcpOptionsSetFromVpcResponse
 */
async function detachDhcpOptionsSetFromVpc(request: DetachDhcpOptionsSetFromVpcRequest): DetachDhcpOptionsSetFromVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachDhcpOptionsSetFromVpc', 'POST', '/', 'json', false, 'json', request);
}

model DiagnoseVpnConnectionsRequest {
  pageNumber?: int32(name='PageNumber', description='The page number. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: **10**.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the IPsec-VPN connection.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-qingdao', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tunnelIds?: [ string ](name='TunnelIds', description='The list of tunnel IDs.', position='Query'),
  vpnConnectionIds?: [ string ](name='VpnConnectionIds', description='The IDs of IPsec-VPN connections.', position='Query'),
  vpnGatewayId?: string(name='VpnGatewayId', description='The ID of the VPN gateway.', example='vpn-bp10hz6b0mbp39flt****', position='Query'),
}

model DiagnoseVpnConnectionsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='B8094E1E-935B-1397-96A8-4F87A5D1BF29'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
  vpnConnections?: [ 
    {
      failedReason?: string(name='FailedReason', description='The cause of the error.', example='Phase1 negotiation timeout'),
      failedReasonCode?: string(name='FailedReasonCode', description='The error code.', example='Phase1NegotiationTimeout'),
      failedTime?: long(name='FailedTime', description='The timestamp when the current error occurred on the IPsec-VPN connection. Unit: millisecond.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1673581161000'),
      mismatchLocalParam?: string(name='MismatchLocalParam', description='If the values of the parameters configured for the IPsec-VPN connection and the peer gateway device do not match, this parameter indicates the value of the parameters configured for the IPsec-VPN connection.', example='SHA256'),
      mismatchRemoteParam?: string(name='MismatchRemoteParam', description='If the parameter values configured for the IPsec-VPN connection and the peer gateway device do not match, this parameter indicates the value of the parameter configured for the peer gateway device.', example='SHA'),
      severity?: string(name='Severity', description='The error level. Valid values:

*   **Critical**
*   **Warn**
*   **Normal**', example='Warn'),
      sourceLog?: string(name='SourceLog', description='The log information about the error.', example='2023-01-13 11:39:21 vco-bp1spxu8hlcvpd7ry**** [PROTO_ERR]: ikev1.c:1433:isakmp_ph1resend(): phase1 negotiation failed due to time up. [{remote id:4}{ph1: 172.16.0.88[500] <=> 192.168.0.206[500], 172.16.0.88 <=> 192.168.0.206}]'),
      tunnelId?: string(name='TunnelId', description='The tunnel ID.', example='tun-64n1sr9dig64k6****'),
      vpnConnectionId?: string(name='VpnConnectionId', description='The ID of the IPsec-VPN connection.', example='vco-bp1spxu8hlcvpd7ry****'),
    }
  ](name='VpnConnections', description='The diagnostic information.'),
}

model DiagnoseVpnConnectionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DiagnoseVpnConnectionsResponseBody(name='body'),
}

/**
  * @description *   If the IPsec-VPN connection is in single-tunnel mode, the request parameter `VpnConnectionIds` is required when you call the **DiagnoseVpnConnections** operation.
  * *   If the IPsec-VPN connection is in dual-tunnel mode, the request parameter `TunnelIds` is required when you call the **DiagnoseVpnConnections** operation.
  * *   After you call the **DiagnoseVpnConnections** operation, if the current IPsec-VPN connection is faulty, the operation returns the corresponding error code (**FailedReasonCode**) and log (**SourceLog**). You can troubleshoot based on the error code and log information. For more information, see [Common errors and troubleshooting methods for IPsec-VPN connections](https://help.aliyun.com/document_detail/477862.html).
  * @param request  the request parameters of DiagnoseVpnConnections  DiagnoseVpnConnectionsRequest
  * @return DiagnoseVpnConnectionsResponse
 */
async function diagnoseVpnConnections(request: DiagnoseVpnConnectionsRequest): DiagnoseVpnConnectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DiagnoseVpnConnections', 'POST', '/', 'json', false, 'json', request);
}

model DiagnoseVpnGatewayRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  iPsecExtendInfo?: string(name='IPsecExtendInfo', description='The configuration when you check the connectivity of the IPsec-VPN connection. Valid values:

*   **PrivateSourceIp**: the source IP address used when you check the connectivity of the IPsec-VPN connection. The source IP address must be on the VPC side.
*   **PrivateDestinationIp**: the destination IP address used when you check the connectivity of the IPsec-VPN connection. The destination IP address must be on the data center side.', example='{"PrivateSourceIp":"192.168.1.1","PrivateDestinationIp":"192.168.0.1"}', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VPN gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-qingdao', position='Query'),
  resourceId: string(name='ResourceId', description='The ID of the resource to be diagnosed.

This parameter is required.', example='vco-uf66xniofskqtuoz1****', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource.

Set the value to **Ipsec**, which specifies an IPsec-VPN connection.

This parameter is required.', example='IPsec', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', description='The ID of the VPN gateway.

This parameter is required.', example='vpn-m5efhj0k1p47ctuhl****', position='Query'),
}

model DiagnoseVpnGatewayResponseBody = {
  diagnoseId?: string(name='DiagnoseId', description='The ID of the diagnostic.', example='vpndgn-uf6kuxbe3iv028k3s****'),
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DiagnoseVpnGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DiagnoseVpnGatewayResponseBody(name='body'),
}

/**
  * @description Only VPN gateways in specific regions support the quick diagnostics feature. For more information about the supported regions, see [Supported regions](https://help.aliyun.com/document_detail/430697.html).
  * @param request  the request parameters of DiagnoseVpnGateway  DiagnoseVpnGatewayRequest
  * @return DiagnoseVpnGatewayResponse
 */
async function diagnoseVpnGateway(request: DiagnoseVpnGatewayRequest): DiagnoseVpnGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DiagnoseVpnGateway', 'POST', '/', 'json', false, 'json', request);
}

model DisableNatGatewayEcsMetricRequest {
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

**true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.

**false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  natGatewayId: string(name='NatGatewayId', description='The ID of the NAT gateway for which you want to disable ECS traffic monitoring.

This parameter is required.', example='ngw-2vc53wynunp35lw1y****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the NAT gateway. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-chengdu', position='Query'),
}

model DisableNatGatewayEcsMetricResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DisableNatGatewayEcsMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableNatGatewayEcsMetricResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI DisableNatGatewayEcsMetric is deprecated  * @param request  the request parameters of DisableNatGatewayEcsMetric  DisableNatGatewayEcsMetricRequest
  * @return DisableNatGatewayEcsMetricResponse
 */
// Deprecated
async function disableNatGatewayEcsMetric(request: DisableNatGatewayEcsMetricRequest): DisableNatGatewayEcsMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableNatGatewayEcsMetric', 'POST', '/', 'json', false, 'json', request);
}

model DisableVpcClassicLinkRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VPC for which you want to disable ClassicLink.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the VPC for which you want to disable ClassicLink.

This parameter is required.', example='vpc-bp1m7v25emi1h5mtc****', position='Query'),
}

model DisableVpcClassicLinkResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DisableVpcClassicLinkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableVpcClassicLinkResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableVpcClassicLink  DisableVpcClassicLinkRequest
  * @return DisableVpcClassicLinkResponse
 */
async function disableVpcClassicLink(request: DisableVpcClassicLinkRequest): DisableVpcClassicLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableVpcClassicLink', 'POST', '/', 'json', false, 'json', request);
}

model DissociateRouteTableFromGatewayRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not set this parameter, the system automatically uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to only precheck the request. Valid values:

*   **true**: prechecks the request without performing the operation. The system prechecks the required parameters, request syntax, and limits. If the request fails to pass the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. After the request passes the precheck, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  gatewayId: string(name='GatewayId', description='The ID of the IPv4 gateway.

This parameter is required.', example='ipv4gw-5tsnc6s4ogsedtp3k****', position='Query'),
  gatewayType?: string(name='GatewayType', description='The type of a gateway to be disassociated from a route table.', example='Ipv4Gateway', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the IPv4 gateway from which you want to disassociate the gateway route table.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='ap-southeast-6', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId: string(name='RouteTableId', description='The ID of the gateway route table.

This parameter is required.', example='vtb-5ts0ohchwkp3dydt2****', position='Query'),
}

model DissociateRouteTableFromGatewayResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C5644C9A-7480-13B6-AECB-30FF142E3724'),
}

model DissociateRouteTableFromGatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DissociateRouteTableFromGatewayResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DissociateRouteTableFromGateway  DissociateRouteTableFromGatewayRequest
  * @return DissociateRouteTableFromGatewayResponse
 */
async function dissociateRouteTableFromGateway(request: DissociateRouteTableFromGatewayRequest): DissociateRouteTableFromGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DissociateRouteTableFromGateway', 'POST', '/', 'json', false, 'json', request);
}

model DissociateRouteTablesFromVpcGatewayEndpointRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token** can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  endpointId: string(name='EndpointId', description='The ID of the gateway endpoint to be disassociated from the route table.

This parameter is required.', example='vpce-m5e371h5clm3uadih****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the gateway endpoint.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableIds: [ string ](name='RouteTableIds', description='The ID of the route table. Valid values of **N** are **1** to **20**, which specifies that you can disassociate a gateway endpoint from at most 20 route tables at a time.

This parameter is required.', example='vtb-m5elgtm3aj586iitr****', position='Query'),
}

model DissociateRouteTablesFromVpcGatewayEndpointResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='59BDDA2D-FB52-59F9-9DC5-5EA7D6808B8E'),
}

model DissociateRouteTablesFromVpcGatewayEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DissociateRouteTablesFromVpcGatewayEndpointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DissociateRouteTablesFromVpcGatewayEndpoint  DissociateRouteTablesFromVpcGatewayEndpointRequest
  * @return DissociateRouteTablesFromVpcGatewayEndpointResponse
 */
async function dissociateRouteTablesFromVpcGatewayEndpoint(request: DissociateRouteTablesFromVpcGatewayEndpointRequest): DissociateRouteTablesFromVpcGatewayEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DissociateRouteTablesFromVpcGatewayEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model DissociateVpnGatewayWithCertificateRequest {
  certificateId: string(name='CertificateId', description='The certificate ID.

> The certificate ID refers to the ID generated after the SSL certificate is associated with the VPN gateway. It is not the ID of the SSL certificate. You can call the [ListVpnCertificateAssociations](https://help.aliyun.com/document_detail/2521961.html) operation to query certificate IDs.

This parameter is required.', example='6bfe4218-ea1d****', position='Query'),
  certificateType: string(name='CertificateType', description='The certificate type. Valid values:

*   **Encryption**
*   **Signature**

This parameter is required.', example='Encryption', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e*******', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without performing the actual request. Valid values:

*   **true**: performs a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request passes the dry run, the `DryRunOperation` error code is returned. Otherwise, an error message is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VPN gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', description='The ID of the VPN gateway.

This parameter is required.', example='vpn-bp1q8bgx4xnkm2ogj****', position='Query'),
}

model DissociateVpnGatewayWithCertificateResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='611CB80C-B6A9-43DB-9E38-0B0AC3D9B58F'),
}

model DissociateVpnGatewayWithCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DissociateVpnGatewayWithCertificateResponseBody(name='body'),
}

/**
  * @description *   **DissociateVpnGatewayWithCertificate** is an asynchronous operation. After a request is sent, the system returns a request and runs the task in the background. You can call the [DescribeVpnGateway](https://help.aliyun.com/document_detail/73720.html) operation to query the status the task.
  *     *   If the VPN gateway is in the **updating** state, the SSL certificate is being disassociated from the VPN gateway.
  *     *   If the VPN gateway is in the **active** state, the SSL certificate is disassociated from the VPN gateway.
  * *   You cannot repeatedly call **DissociateVpnGatewayWithCertificate** within a specific period of time.
  * @param request  the request parameters of DissociateVpnGatewayWithCertificate  DissociateVpnGatewayWithCertificateRequest
  * @return DissociateVpnGatewayWithCertificateResponse
 */
async function dissociateVpnGatewayWithCertificate(request: DissociateVpnGatewayWithCertificateRequest): DissociateVpnGatewayWithCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DissociateVpnGatewayWithCertificate', 'POST', '/', 'json', false, 'json', request);
}

model DownloadVpnConnectionConfigRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the IPsec-VPN connection is created.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpnConnectionId: string(name='VpnConnectionId', description='The ID of the IPsec-VPN connection.

This parameter is required.', example='vco-bp1bbi27hojx80nck****', position='Query'),
}

model DownloadVpnConnectionConfigResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0C68048B-0F70-40DA-B8AE-1B79B5CF62E3'),
  vpnConnectionConfig?: {
    ikeConfig?: {
      ikeAuthAlg?: string(name='IkeAuthAlg', description='The authentication algorithm in the IKE phase.', example='sha1'),
      ikeEncAlg?: string(name='IkeEncAlg', description='The encryption algorithm in the IKE phase.', example='aes'),
      ikeLifetime?: long(name='IkeLifetime', description='The lifetime in the IKE phase. Unit: seconds.', example='86400'),
      ikeMode?: string(name='IkeMode', description='The IKE negotiation mode. Valid values:

*   **main**: This mode offers higher security during negotiations.
*   **aggressive**: This mode is faster and has a higher success rate.', example='main'),
      ikePfs?: string(name='IkePfs', description='The DH group in the IKE phase.', example='group2'),
      ikeVersion?: string(name='IkeVersion', description='The IKE version.', example='ikev1'),
      localId?: string(name='LocalId', description='The identifier of the customer gateway. FQDN and IP formats are supported. The default value is the IP address of the customer gateway.', example='116.62.XX.XX'),
      psk?: string(name='Psk', description='The pre-shared key.', example='pgw6dy7d1i8i****'),
      remoteId?: string(name='RemoteId', description='The identifier of the VPN gateway. FQDN and IP formats are supported. The default value is the IP address of the VPN gateway.', example='139.196.XX.XX'),
    }(name='IkeConfig', description='The configurations of Phase 1 negotiations.'),
    ipsecConfig?: {
      ipsecAuthAlg?: string(name='IpsecAuthAlg', description='The authentication algorithm in the IPsec phase.', example='sha1'),
      ipsecEncAlg?: string(name='IpsecEncAlg', description='The encryption algorithm in the IPsec phase.', example='aes'),
      ipsecLifetime?: long(name='IpsecLifetime', description='The lifetime in the IPsec phase. Unit: seconds.', example='86400'),
      ipsecPfs?: string(name='IpsecPfs', description='The DH group in the IPsec phase.', example='group2'),
    }(name='IpsecConfig', description='The configurations of Phase 2 negotiations.'),
    local?: string(name='Local', description='The identifier of the customer gateway.', example='139.196.XX.XX'),
    localSubnet?: string(name='LocalSubnet', description='The CIDR block on the data center side.', example='10.0.0.0/8'),
    remote?: string(name='Remote', description='The identifier of the VPN gateway.', example='116.62.XX.XX'),
    remoteSubnet?: string(name='RemoteSubnet', description='The CIDR block on the virtual private cloud (VPC) side.', example='192.168.0.0/16'),
    tunnelsConfig?: {
      tunnelConfig?: [ 
      {
        ikeConfig?: {
          ikeAuthAlg?: string(name='IkeAuthAlg', description='The authentication algorithm in the IKE phase.', example='sha1'),
          ikeEncAlg?: string(name='IkeEncAlg', description='The encryption algorithm in the IKE phase.', example='aes'),
          ikeLifetime?: long(name='IkeLifetime', description='The lifetime in the IKE phase. Unit: seconds.', example='86400'),
          ikeMode?: string(name='IkeMode', description='The IKE negotiation mode. Valid values:

*   **main**: This mode offers higher security during negotiations.
*   **aggressive**: This mode is faster and has a higher success rate.', example='main'),
          ikePfs?: string(name='IkePfs', description='The DH group in the IKE phase.', example='group2'),
          ikeVersion?: string(name='IkeVersion', description='The IKE version.', example='ikev1'),
          localId?: string(name='LocalId', description='The identifier of the tunnel on the data center side.', example='47.21.XX.XX'),
          psk?: string(name='Psk', description='The pre-shared key.', example='pgw6dy7d1i8i****'),
          remoteId?: string(name='RemoteId', description='The identifier of the tunnel on the Alibaba Cloud side.', example='47.24.XX.XX'),
        }(name='IkeConfig', description='The configurations of Phase 1 negotiations.'),
        ipsecConfig?: {
          ipsecAuthAlg?: string(name='IpsecAuthAlg', description='The authentication algorithm in the IPsec phase.', example='sha1'),
          ipsecEncAlg?: string(name='IpsecEncAlg', description='The encryption algorithm in the IPsec phase.', example='aes'),
          ipsecLifetime?: long(name='IpsecLifetime', description='The lifetime in the IPsec phase. Unit: seconds.', example='86400'),
          ipsecPfs?: string(name='IpsecPfs', description='The DH group in the IPsec phase.', example='group2'),
        }(name='IpsecConfig', description='The configurations of Phase 2 negotiations.'),
        local?: string(name='Local', description='The identifier of the tunnel on the data center side.', example='47.21.XX.XX'),
        remote?: string(name='Remote', description='The identifier of the tunnel on the Alibaba Cloud side.', example='47.24.XX.XX'),
        tunnelId?: string(name='TunnelId', description='The tunnel ID.', example='tun-opsqc4d97wni27****'),
      }
    ](name='TunnelConfig')
    }(name='TunnelsConfig', description='The tunnel configurations of the peer gateway device.

The parameters in **TunnelsConfig** are returned only when the IPsec-VPN connection supports the dual-tunnel mode.'),
  }(name='VpnConnectionConfig', description='The configurations of the peer gateway device.'),
}

model DownloadVpnConnectionConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DownloadVpnConnectionConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DownloadVpnConnectionConfig  DownloadVpnConnectionConfigRequest
  * @return DownloadVpnConnectionConfigResponse
 */
async function downloadVpnConnectionConfig(request: DownloadVpnConnectionConfigRequest): DownloadVpnConnectionConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadVpnConnectionConfig', 'POST', '/', 'json', false, 'json', request);
}

model EnableNatGatewayEcsMetricRequest {
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

**true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.

**false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  natGatewayId: string(name='NatGatewayId', description='The ID of the NAT gateway for which you want to enable ECS traffic monitoring.

This parameter is required.', example='ngw-2vc53wynunp35lw1y****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the NAT gateway. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-chengdu', position='Query'),
}

model EnableNatGatewayEcsMetricResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model EnableNatGatewayEcsMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableNatGatewayEcsMetricResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI EnableNatGatewayEcsMetric is deprecated  * @param request  the request parameters of EnableNatGatewayEcsMetric  EnableNatGatewayEcsMetricRequest
  * @return EnableNatGatewayEcsMetricResponse
 */
// Deprecated
async function enableNatGatewayEcsMetric(request: EnableNatGatewayEcsMetricRequest): EnableNatGatewayEcsMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableNatGatewayEcsMetric', 'POST', '/', 'json', false, 'json', request);
}

model EnablePhysicalConnectionRequest {
  byPassSp?: boolean(name='ByPassSp', description='Specifies whether to skip the order lifecycle. Valid values:

*   **true**
*   **false** (default)

>  To use this feature, you must contact your account manager.', example='false', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', description='The ID of the Express Connect circuit.

This parameter is required.', example='pc-119mfjz****', position='Query'),
  regionId: string(name='RegionId', description='The region where the Express Connect circuit is deployed.

You can call the DescribeRegions operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model EnablePhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model EnablePhysicalConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnablePhysicalConnectionResponseBody(name='body'),
}

/**
  * @description When you call this operation, take note of the following limits:
  * *   You can enable only an Express Connect circuit that is in the **Confirmed** state.
  * *   After you enable an Express Connect circuit, it enters the **Enabled** state.
  * *   **EnablePhysicalConnection** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribePhysicalConnections](https://help.aliyun.com/document_detail/36042.html) operation to query the status of the task.
  * *   You cannot repeatedly call **EnablePhysicalConnection** for an Express Connect circuit in the **Confirmed** state within a specific time period.
  * @param request  the request parameters of EnablePhysicalConnection  EnablePhysicalConnectionRequest
  * @return EnablePhysicalConnectionResponse
 */
async function enablePhysicalConnection(request: EnablePhysicalConnectionRequest): EnablePhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnablePhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model EnableVpcClassicLinkRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VPC for which you want to enable ClassicLink.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the VPC.

This parameter is required.', example='vpc-bp1m7v25emi1h5mtc****', position='Query'),
}

model EnableVpcClassicLinkResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model EnableVpcClassicLinkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableVpcClassicLinkResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableVpcClassicLink  EnableVpcClassicLinkRequest
  * @return EnableVpcClassicLinkResponse
 */
async function enableVpcClassicLink(request: EnableVpcClassicLinkRequest): EnableVpcClassicLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableVpcClassicLink', 'POST', '/', 'json', false, 'json', request);
}

model EnableVpcIpv4GatewayRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  ipv4GatewayId: string(name='Ipv4GatewayId', description='The ID of the IPv4 gateway that you want to activate.

This parameter is required.', example='ipv4gw-5tsp9lumsxoqizvq2****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the IPv4 gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent list of regions.

This parameter is required.', example='ap-southeast-6', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableList?: [ string ](name='RouteTableList', description='A list of route tables. The system adds a 0.0.0.0/0 route that points to the IPv4 gateway to the route tables.', position='Query'),
}

model EnableVpcIpv4GatewayResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model EnableVpcIpv4GatewayResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableVpcIpv4GatewayResponseBody(name='body'),
}

/**
  * @description ## [](#)Description
  * *   **EnableVpcIpv4Gateway** is an asynchronous operation. After a request is sent, the system returns a **request ID** and runs the task in the background. You can call the [GetIpv4GatewayAttribute](https://help.aliyun.com/document_detail/407670.html) operation to query the status of an IPv4 gateway.
  *     *   If the IPv4 gateway is in the **Activating** state, the IPv4 gateway is being activated.
  *     *   If the IPv4 gateway is in the **Created** state, the IPv4 gateway is activated.
  * *   You cannot repeatedly call the **EnableVpcIpv4Gateway** operation to activate an IPv4 gateway within the specified period of time.
  * @param request  the request parameters of EnableVpcIpv4Gateway  EnableVpcIpv4GatewayRequest
  * @return EnableVpcIpv4GatewayResponse
 */
async function enableVpcIpv4Gateway(request: EnableVpcIpv4GatewayRequest): EnableVpcIpv4GatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableVpcIpv4Gateway', 'POST', '/', 'json', false, 'json', request);
}

model GetDhcpOptionsSetRequest {
  dhcpOptionsSetId: string(name='DhcpOptionsSetId', description='The ID of the DHCP options set.

This parameter is required.', example='dopt-o6w0df4epg9zo8isy****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the DHCP options set that you want to query.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetDhcpOptionsSetResponseBody = {
  associateVpcs?: [ 
    {
      associateStatus?: string(name='AssociateStatus', description='The status of the VPC that is associated with the DHCP options set. Valid values:

*   **InUse**: in use
*   **Pending**: being configured', example='InUse'),
      vpcId?: string(name='VpcId', description='The ID of the VPC that is associated with the DHCP options set.', example='vpc-eb3b54r6otues4tjj****'),
    }
  ](name='AssociateVpcs', description='The information about the virtual private cloud (VPC) that is associated with the DHCP options set.'),
  dhcpOptions?: {
    domainName?: string(name='DomainName', description='The suffix of the hostname.', example='example.com'),
    domainNameServers?: string(name='DomainNameServers', description='The IP address of the DNS server.', example='192.XX.XX.123'),
    ipv6LeaseTime?: string(name='Ipv6LeaseTime', description='The lease time of the IPv6 addresses for the DHCP options set.

*   If you use hours as the unit, Valid values are **24h to 1176h** and **87600h to 175200h**. Default value: **87600h**.
*   If you use days as the unit, Valid values are **1d to 49d** and **3650d to 7300d**. Default value: **3650d**.', example='3650d'),
    leaseTime?: string(name='LeaseTime', description='The lease time of the IPv4 addresses for the DHCP options set.

*   If you use hours as the unit, valid values are **24h to 1176h** and **87600h to 175200h**. Default value: **87600h**.
*   If you use days as the unit, valid values are **1d to 49d** and **3650d to 7300d**. Default value: **3650d**.', example='3650d'),
  }(name='DhcpOptions', description='The configuration information about the DHCP options set.'),
  dhcpOptionsSetDescription?: string(name='DhcpOptionsSetDescription', description='The description of the DHCP options set.', example='test'),
  dhcpOptionsSetId?: string(name='DhcpOptionsSetId', description='The ID of the DHCP options set.', example='dopt-o6w0df4epg9zo8isy****'),
  dhcpOptionsSetName?: string(name='DhcpOptionsSetName', description='The name of the DHCP options set.', example='test'),
  ownerId?: long(name='OwnerId', description='The ID of the Alibaba Cloud account to which the DHCP options set belongs.', example='283117732402483989'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxazb4ph****'),
  status?: string(name='Status', description='The status of the DHCP options set. Valid values:

*   **Available**: available
*   **InUse**: in use
*   **Deleted**: deleted
*   **Pending**: being configured', example='Available'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value.', example='FinanceJoshua'),
    }
  ](name='Tags', description='The tag list.'),
}

model GetDhcpOptionsSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDhcpOptionsSetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDhcpOptionsSet  GetDhcpOptionsSetRequest
  * @return GetDhcpOptionsSetResponse
 */
async function getDhcpOptionsSet(request: GetDhcpOptionsSetRequest): GetDhcpOptionsSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDhcpOptionsSet', 'POST', '/', 'json', false, 'json', request);
}

model GetFlowLogServiceStatusRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, the system automatically uses **RequestId** as **ClientToken**. The value of **RequestId** in each API request may be different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the flow log.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetFlowLogServiceStatusResponseBody = {
  enabled?: boolean(name='Enabled', description='Indicates whether the flow log feature is enabled. Valid values:

*   **true**: yes
*   **false**: no You can call the [OpenFlowLogService](https://help.aliyun.com/document_detail/449637.html) operation to enable the flow log feature.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='54B48E3D-DF70-471B-AA93-06F83A1B457'),
}

model GetFlowLogServiceStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFlowLogServiceStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetFlowLogServiceStatus  GetFlowLogServiceStatusRequest
  * @return GetFlowLogServiceStatusResponse
 */
async function getFlowLogServiceStatus(request: GetFlowLogServiceStatusRequest): GetFlowLogServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFlowLogServiceStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetIpv4GatewayAttributeRequest {
  ipv4GatewayId: string(name='Ipv4GatewayId', description='The ID of the IPv4 gateway.

This parameter is required.', example='ipv4gw-5tsnc6s4ogsedtp3k****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the IPv4 gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='ap-southeast-6', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetIpv4GatewayAttributeResponseBody = {
  createTime?: string(name='CreateTime', description='The time when the IPv4 gateway was created.', example='2022-02-24T09:02:36Z'),
  enabled?: boolean(name='Enabled', description='Indicates whether the IPv4 gateway is activated. Valid values:

*   **true**
*   **false**', example='true'),
  ipv4GatewayDescription?: string(name='Ipv4GatewayDescription', description='The description of the IPv4 gateway.', example='new'),
  ipv4GatewayId?: string(name='Ipv4GatewayId', description='The ID of the IPv4 gateway.', example='ipv4gw-5tsnc6s4ogsedtp3k****'),
  ipv4GatewayName?: string(name='Ipv4GatewayName', description='The name of the IPv4 gateway.', example='name'),
  ipv4GatewayRouteTableId?: string(name='Ipv4GatewayRouteTableId', description='The ID of the route table associated with the IPv4 gateway.', example='vtb-5ts0ohchwkp3dydt2****'),
  requestId?: string(name='RequestId', description='The request ID.', example='7F79A919-6FE9-50C4-967B-45705E1F9C38'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the IPv4 gateway belongs.', example='rg-bp67acfmxazb4ph****'),
  status?: string(name='Status', description='The status of the IPv4 gateway. Valid values:

*   **Creating**
*   **Created**
*   **Modifying**
*   **Deleting**
*   **Deleted**
*   **Activating**', example='Created'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of tag N added to the resource.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N added to the resource.', example='FinanceJoshua'),
    }
  ](name='Tags', description='The tag list.'),
  vpcId?: string(name='VpcId', description='The ID of the VPC with which the IPv4 gateway is associated.', example='vpc-5tsrxlw7dv074gci4****'),
}

model GetIpv4GatewayAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIpv4GatewayAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetIpv4GatewayAttribute  GetIpv4GatewayAttributeRequest
  * @return GetIpv4GatewayAttributeResponse
 */
async function getIpv4GatewayAttribute(request: GetIpv4GatewayAttributeRequest): GetIpv4GatewayAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIpv4GatewayAttribute', 'POST', '/', 'json', false, 'json', request);
}

model GetNatGatewayAttributeRequest {
  natGatewayId: string(name='NatGatewayId', description='The ID of the NAT gateway.

This parameter is required.', example='ngw-bp1b0lic8uz4r6vf2****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the NAT gateway is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-qingdao', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetNatGatewayAttributeResponseBody = {
  accessMode?: {
    modeValue?: string(name='ModeValue'),
    tunnelType?: string(name='TunnelType'),
  }(name='AccessMode'),
  billingConfig?: {
    autoPay?: string(name='AutoPay', description='Indicates whether automatic payment is enabled. If the **InstanceChargeType** parameter is set to **PrePaid**, one of the following values is returned:

*   **false**: disabled. After an order is generated, you must go to the Order Center to complete the payment.
*   **true**: enabled. Payments are automatically completed.

The return value of this parameter is empty if **InstanceChargeType** is set to **PostPaid**.', example='false'),
    instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the NAT gateway. The value is set to **PostPaid**, which indicates the pay-as-you-go billing method.', example='PostPaid'),
    internetChargeType?: string(name='InternetChargeType', description='The metering method of the NAT gateway. Valid values:

*   **PayBySpec**: pay-by-specification
*   **PayByLcu**: pay-by-CU', example='PayBySpec'),
    spec?: string(name='Spec', description='The specification of the Internet NAT gateway. If the **InternetChargeType** parameter is set to **PayBySpec**, one of the following values is returned:

*   **Small**: small

*   **Middle**: medium

*   **Large**: large

    The return value of this parameter is empty if **InternetChargeType** is set to **PayByLcu**.', example='Small'),
  }(name='BillingConfig', description='The billing information.'),
  businessStatus?: string(name='BusinessStatus', description='The service status of the NAT gateway. Valid values:

*   **Normal**: normal
*   **FinancialLocked**: locked due to overdue payments', example='Normal'),
  creationTime?: string(name='CreationTime', description='The time when the NAT gateway was created. Format: YYYY-MM-DDThh:mm:ssZ.', example='2021-12-08T12:20:20Z'),
  deletionProtectionInfo?: {
    enabled?: boolean(name='Enabled', description='Indicates whether deletion protection is enabled.

*   **true**: yes
*   **false**: no', example='true'),
  }(name='DeletionProtectionInfo', description='The information about the deletion protection feature.'),
  description?: string(name='Description', description='The description of the NAT gateway.', example='NAT'),
  ecsMetricEnabled?: boolean(name='EcsMetricEnabled', description='Indicates whether the traffic monitoring feature is enabled. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  enableSessionLog?: boolean(name='EnableSessionLog'),
  expiredTime?: string(name='ExpiredTime', description='The time when the NAT gateway expires.', example='2021-12-26T12:20:20Z'),
  forwardTable?: {
    forwardEntryCount?: int32(name='ForwardEntryCount', description='The number of DNAT entries.', example='1'),
    forwardTableId?: string(name='ForwardTableId', description='The ID of the DNAT table.', example='ftb-uf6gj3mhsg94qsqst****'),
  }(name='ForwardTable', description='The information about the DNAT table.'),
  fullNatTable?: {
    fullNatEntryCount?: long(name='FullNatEntryCount', description='The number of FULLNAT entries.', example='1'),
    fullNatTableId?: string(name='FullNatTableId', description='The ID of the FULLNAT table.', example='fulltb-gw88z7hhlv43rmb26****'),
  }(name='FullNatTable', description='The information about the FULLNAT table.'),
  ipList?: [ 
    {
      allocationId?: string(name='AllocationId', description='The ID of the EIP.', example='eip-bp13e9i2qst4g6jzi****'),
      ipAddress?: string(name='IpAddress', description='The IP address of the EIP.', example='116.33.XX.XX'),
      usingStatus?: string(name='UsingStatus', description='The association status of the EIP.

*   **idle**: The EIP is not specified in an SNAT entry or a DNAT entry.
*   **UsedBySnatTable**: The EIP is specified in an SNAT entry.
*   **UsedByForwardTable**: The EIP is specified in a DNAT entry.', example='idle'),
    }
  ](name='IpList', description='The elastic IP addresses (EIPs) that are associated with the Internet NAT gateway.'),
  logDelivery?: {
    deliverLogsErrorMessage?: string(name='DeliverLogsErrorMessage'),
    deliveryStatus?: string(name='DeliveryStatus'),
    logDeliveryType?: string(name='LogDeliveryType'),
    logDestination?: string(name='LogDestination'),
  }(name='LogDelivery'),
  name?: string(name='Name', description='The name of the NAT gateway.', example='abc'),
  natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.', example='ngw-bp1047e2d4z7kf2ki****'),
  natType?: string(name='NatType', description='The type of the Internet NAT gateway. Only **Enhanced** is returned, which indicates an enhanced Internet NAT gateway.', example='Enhanced'),
  networkType?: string(name='NetworkType', description='The type of the NAT gateway. Valid values:

*   **internet**: an Internet NAT gateway
*   **intranet**: a VPC NAT gateway', example='internet'),
  privateInfo?: {
    eniInstanceId?: string(name='EniInstanceId', description='The ID of the elastic network interface (ENI).', example='eni-bp1cmgtoaka8vfyg****'),
    izNo?: string(name='IzNo', description='The zone where the NAT gateway is deployed.', example='cn-qingdao-b'),
    maxBandwidth?: int32(name='MaxBandwidth', description='The maximum bandwidth. Unit: Mbit/s.', example='5120'),
    privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address.', example='192.168.XX.XX'),
    vswitchId?: string(name='VswitchId', description='The ID of the vSwitch to which the NAT gateway belongs.', example='vsw-bp1s2laxhdf9ayjbo***'),
  }(name='PrivateInfo', description='The private network information about the NAT gateway.'),
  privateLinkEnabled?: boolean(name='PrivateLinkEnabled', description='Indicates whether the NAT gateway supports PrivateLink. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  privateLinkMode?: string(name='PrivateLinkMode', description='The mode that is used by PrivateLink. Valid values:

*   **FullNat**: the FULLNAT mode
*   **Geneve**: the GENEVE mode', example='FullNat'),
  regionId?: string(name='RegionId', description='The ID of the region where the NAT gateway is deployed.', example='cn-qingdao'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-bp67acfmxazb4ph****'),
  snatTable?: {
    snatEntryCount?: int32(name='SnatEntryCount', description='The number of SNAT entries.', example='1'),
    snatTableId?: string(name='SnatTableId', description='The ID of the SNAT table.', example='stb-SnatTableIds****'),
  }(name='SnatTable', description='The information about the SNAT table.'),
  status?: string(name='Status', description='The status of the NAT gateway. Valid values:

*   **Creating**: being created. The operation to create a NAT gateway is asynchronous. The NAT gateway remains in the **Creating** state until it is created.
*   **Available**: available. After a NAT gateway is created, it remains in a stable state.
*   **Modifying**: being modified. The operation to upgrade or downgrade a NAT gateway is asynchronous. The NAT gateway remains in the **Modifying** state until it is upgraded or downgraded.
*   **Deleting**: being deleted. The operation to delete a NAT gateway is asynchronous. The NAT gateway remains in the **Deleting** state until it is deleted.
*   **Converting**: being converted. The operation to convert a standard NAT gateway to an enhanced NAT gateway is asynchronous. The NAT gateway remains in the **Converting** state until it is converted.', example='Available'),
  vpcId?: string(name='VpcId', description='The ID of the VPC to which the NAT gateway belongs.', example='vpc-bp15zckdt37pq72z****'),
}

model GetNatGatewayAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNatGatewayAttributeResponseBody(name='body'),
}

/**
  * @description You can call this operation to query information about a specified Internet NAT gateway or Virtual Private Cloud (VPC) NAT gateway. In this topic, "NAT gateway" refers to both gateway types.
  * @param request  the request parameters of GetNatGatewayAttribute  GetNatGatewayAttributeRequest
  * @return GetNatGatewayAttributeResponse
 */
async function getNatGatewayAttribute(request: GetNatGatewayAttributeRequest): GetNatGatewayAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNatGatewayAttribute', 'POST', '/', 'json', false, 'json', request);
}

model GetPhysicalConnectionServiceStatusRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region for which you want to query the status of outbound data transfer billing.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetPhysicalConnectionServiceStatusResponseBody = {
  enabled?: boolean(name='Enabled', description='Indicates whether billing for outbound data transfer is enabled. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model GetPhysicalConnectionServiceStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhysicalConnectionServiceStatusResponseBody(name='body'),
}

/**
  * @description You can call this API operation to query the status of outbound data transfer billing for the current account. For more information about outbound data transfer billing, see [Outbound data transfer billing](https://help.aliyun.com/document_detail/274385.html) and [Billing](https://help.aliyun.com/document_detail/54582.html).
  * @param request  the request parameters of GetPhysicalConnectionServiceStatus  GetPhysicalConnectionServiceStatusRequest
  * @return GetPhysicalConnectionServiceStatusResponse
 */
async function getPhysicalConnectionServiceStatus(request: GetPhysicalConnectionServiceStatusRequest): GetPhysicalConnectionServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPhysicalConnectionServiceStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetPublicIpAddressPoolServiceStatusRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655442455', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the IP address pool.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetPublicIpAddressPoolServiceStatusResponseBody = {
  enabled?: boolean(name='Enabled', description='Indicates whether the IP address pool feature is enabled. Valid values:

*   **true**
*   **false** You can call OpenPublicIpAddressPoolService to enable the IP address pool feature.', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-06F82A1B457'),
}

model GetPublicIpAddressPoolServiceStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPublicIpAddressPoolServiceStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPublicIpAddressPoolServiceStatus  GetPublicIpAddressPoolServiceStatusRequest
  * @return GetPublicIpAddressPoolServiceStatusResponse
 */
async function getPublicIpAddressPoolServiceStatus(request: GetPublicIpAddressPoolServiceStatusRequest): GetPublicIpAddressPoolServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPublicIpAddressPoolServiceStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetTrafficMirrorServiceStatusRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **client token** can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region to which the mirrored traffic belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetTrafficMirrorServiceStatusResponseBody = {
  enabled?: boolean(name='Enabled', description='Indicates whether the traffic mirroring feature is enabled. Valid values:

*   **true**
*   **false**', example='true'),
  requestId?: string(name='RequestId', description='The request ID.', example='37626066-2C6C-4B62-ADD3-498920C409C5'),
}

model GetTrafficMirrorServiceStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTrafficMirrorServiceStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTrafficMirrorServiceStatus  GetTrafficMirrorServiceStatusRequest
  * @return GetTrafficMirrorServiceStatusResponse
 */
async function getTrafficMirrorServiceStatus(request: GetTrafficMirrorServiceStatusRequest): GetTrafficMirrorServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrafficMirrorServiceStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetVSwitchCidrReservationUsageRequest {
  maxResults?: long(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **100**. Default value: **10**.', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   If a value is returned for NextToken, specify the value in the next request to retrieve a new page of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the vSwitch.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchCidrReservationId: string(name='VSwitchCidrReservationId', description='The ID of the reserved CIDR block.

This parameter is required.', example='vcr-bp1m12saqteraw3rp****', position='Query'),
}

model GetVSwitchCidrReservationUsageResponseBody = {
  cidrReservationUsages?: [ 
    {
      ipPrefixCidr?: string(name='IpPrefixCidr', description='The CIDR block allocated to the ENI from the reserved CIDR block.', example='192.168.1.64/28'),
      ipPrefixId?: string(name='IpPrefixId', description='The ID of the reserved CIDR block.', example='vcr-bp1m12saqteraw3rp****'),
      resourceId?: string(name='ResourceId', description='The ID of the elastic network interface (ENI) whose CIDR block is allocated from the reserved CIDR block.', example='eni-bp14v2sdd3v8htln****'),
      resourceType?: string(name='ResourceType', description='The type of the resource to which a CIDR block is allocated from the reserved CIDR block. Only **NetworkInterface** may be returned, which indicates an ENI.', example='NetworkInterface'),
      vSwitchCidrReservationId?: string(name='VSwitchCidrReservationId', description='The ID of the reserved CIDR block.', example='vcr-bp1m12saqteraw3rp****'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which the reserved CIDR block belongs.', example='vsw-25navfgbue4g****'),
    }
  ](name='CidrReservationUsages', description='A list of reserved CIDR blocks that are in use.'),
  maxResults?: long(name='MaxResults', description='The number of entries to return per page.', example='10'),
  nextToken?: string(name='NextToken', description='The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value is returned for **NextToken**, the value is the token that determines the start point of the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='10'),
}

model GetVSwitchCidrReservationUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVSwitchCidrReservationUsageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetVSwitchCidrReservationUsage  GetVSwitchCidrReservationUsageRequest
  * @return GetVSwitchCidrReservationUsageResponse
 */
async function getVSwitchCidrReservationUsage(request: GetVSwitchCidrReservationUsageRequest): GetVSwitchCidrReservationUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVSwitchCidrReservationUsage', 'POST', '/', 'json', false, 'json', request);
}

model GetVpcGatewayEndpointAttributeRequest {
  endpointId: string(name='EndpointId', description='The ID of the gateway endpoint.

This parameter is required.', example='vpce-bp1w1dmdqjpwul0v3****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the gateway endpoint.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetVpcGatewayEndpointAttributeResponseBody = {
  creationTime?: string(name='CreationTime', description='The time when the endpoint was created. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2021-08-27T01:58:37Z'),
  endpointDescription?: string(name='EndpointDescription', description='The description of the gateway endpoint.', example='test'),
  endpointId?: string(name='EndpointId', description='The ID of the gateway endpoint.', example='vpce-bp1w1dmdqjpwul0v3****'),
  endpointName?: string(name='EndpointName', description='The name of the gateway endpoint.', example='test'),
  endpointStatus?: string(name='EndpointStatus', description='The status of the gateway endpoint. Valid values:

*   **Creating**
*   **Created**
*   **Modifying**
*   **Associating**
*   **Dissociating**
*   **Deleting**', example='Created'),
  policyDocument?: string(name='PolicyDocument', description='The access policy for the cloud service.', example='{"Version" : "1",   "Statement" : [ {     "Effect" : "Allow",     "Resource" : [ "*" ],     "Action" : [ "*" ],     "Principal" : [ "*" ]   } ] }'),
  requestId?: string(name='RequestId', description='The request ID.', example='A1122D0F-7B3B-5445-BB19-17F27F97FE1C'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the gateway endpoint belongs.', example='rg-acfmxvfvazb4p****'),
  routeTables?: [ string ](name='RouteTables', description='The ID of the route table associated with the gateway endpoint.'),
  serviceName?: string(name='ServiceName', description='The name of the endpoint service.', example='com.aliyun.cn-hangzhou.oss'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of tag N added to the resource.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N added to the resource.', example='FinanceJoshua'),
    }
  ](name='Tags', description='The tag list.'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the gateway endpoint belongs.', example='vpc-bp1nh86rugg01zol0****'),
}

model GetVpcGatewayEndpointAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVpcGatewayEndpointAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetVpcGatewayEndpointAttribute  GetVpcGatewayEndpointAttributeRequest
  * @return GetVpcGatewayEndpointAttributeResponse
 */
async function getVpcGatewayEndpointAttribute(request: GetVpcGatewayEndpointAttributeRequest): GetVpcGatewayEndpointAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVpcGatewayEndpointAttribute', 'POST', '/', 'json', false, 'json', request);
}

model GetVpcPrefixListAssociationsRequest {
  maxResults?: long(name='MaxResults', description='The number of entries per page. Valid values: **1** to **100**. Default value: **20**.', example='20', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   If a value is returned for NextToken, specify the value in the next request to retrieve a new page of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prefixListId: string(name='PrefixListId', description='The ID of the prefix list that you want to query.

This parameter is required.', example='pl-0b7hwu67****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the prefix list.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetVpcPrefixListAssociationsResponseBody = {
  count?: long(name='Count', description='The number of entries.', example='1'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value is returned for **NextToken**, the value is used to retrieve a new page of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  prefixListAssociation?: [ 
    {
      ownerId?: string(name='OwnerId', description='The ID of the Alibaba Cloud account to which the prefix list belongs.', example='153460731706****'),
      prefixListId?: string(name='PrefixListId', description='The prefix list ID.', example='pl-0b7hwu67****'),
      reason?: string(name='Reason', description='The reason why the association failed.', example='failed'),
      regionId?: string(name='RegionId', description='The region ID of the prefix list.', example='cn-hangzhou'),
      resourceId?: string(name='ResourceId', description='The ID of the associated resource.', example='vtb-bp1drpcfz9srr393h****'),
      resourceType?: string(name='ResourceType', description='The type of the associated resource. Valid values:

*   **vpcRouteTable**: virtual private cloud (VPC) route table.
*   **trRouteTable**: route table of a transit router.', example='vpcRouteTable'),
      resourceUid?: string(name='ResourceUid', description='The ID of the Alibaba Cloud account to which the resource associated with the prefix list belongs.', example='132193271328****'),
      status?: string(name='Status', description='The status of the prefix list. Valid values:

*   **Created**
*   **ModifyFailed**
*   **Creating**
*   **Modifying**
*   **Deleting**
*   **Deleted**', example='Success'),
    }
  ](name='PrefixListAssociation', description='The information about the network instances that are associated with the prefix list.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  totalCount?: long(name='TotalCount', description='The number of entries returned.', example='1'),
}

model GetVpcPrefixListAssociationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVpcPrefixListAssociationsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetVpcPrefixListAssociations  GetVpcPrefixListAssociationsRequest
  * @return GetVpcPrefixListAssociationsResponse
 */
async function getVpcPrefixListAssociations(request: GetVpcPrefixListAssociationsRequest): GetVpcPrefixListAssociationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVpcPrefixListAssociations', 'POST', '/', 'json', false, 'json', request);
}

model GetVpcPrefixListEntriesRequest {
  maxResults?: long(name='MaxResults', description='The number of entries per page. Valid values: **1** to **100**. Default value: **20**.', example='20', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of NextToken.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prefixListId: string(name='PrefixListId', description='The ID of the prefix list that you want to query.

This parameter is required.', example='pl-0b7hwu67****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the prefix list.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetVpcPrefixListEntriesResponseBody = {
  count?: long(name='Count', description='The number of entries.', example='1'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value is returned for **NextToken**, the value indicates the token that is used for the next request to retrieve a new page of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  prefixListEntry?: [ 
    {
      cidr?: string(name='Cidr', description='The CIDR blocks specified in the prefix list.', example='192.168.0.0/16'),
      description?: string(name='Description', description='The description of the prefix list.', example='description'),
      prefixListId?: string(name='PrefixListId', description='The ID of the prefix list.', example='pl-0b7hwu67****'),
      regionId?: string(name='RegionId', description='The region ID of the prefix list.', example='cn-hangzhou'),
    }
  ](name='PrefixListEntry', description='The information about the prefix list.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model GetVpcPrefixListEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVpcPrefixListEntriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetVpcPrefixListEntries  GetVpcPrefixListEntriesRequest
  * @return GetVpcPrefixListEntriesResponse
 */
async function getVpcPrefixListEntries(request: GetVpcPrefixListEntriesRequest): GetVpcPrefixListEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVpcPrefixListEntries', 'POST', '/', 'json', false, 'json', request);
}

model GetVpcRouteEntrySummaryRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the route table.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeEntryType: string(name='RouteEntryType', description='The type of the route. Valid values:

*   **All**: all route types
*   **Custom**: a custom route
*   **System**: a system route
*   **BGP**: a BGP route
*   **CEN**: a Cloud Enterprise Network (CEN) route

This parameter is required.', example='Custom', position='Query'),
  routeTableId?: string(name='RouteTableId', description='The ID of the route table that you want to query.', example='vtb-bp145q7glnuzdvzu2****', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the route table belongs.

This parameter is required.', example='vpc-bp15zckdt37pq72****', position='Query'),
}

model GetVpcRouteEntrySummaryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC668356-BCB4-42FD-9BC3-FA2B2E04B634'),
  routeEntrySummarys?: [ 
    {
      entrySummarys?: [ 
        {
          count?: int32(name='Count', description='The number of entries returned.', example='10'),
          routeEntryType?: string(name='RouteEntryType', description='The type of the route. Valid values:

*   **All**: all route types
*   **Custom**: a custom route
*   **System**: a system route
*   **BGP**: a BGP route
*   **CEN**: a CEN route', example='Custom'),
        }
      ](name='EntrySummarys', description='The information about the routes of different types in one route table.'),
      routeTableId?: string(name='RouteTableId', description='The ID of the route table.', example='vtb-bp145q7glnuzdvzu2****'),
    }
  ](name='RouteEntrySummarys', description='The information about the routes in the route tables.'),
}

model GetVpcRouteEntrySummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVpcRouteEntrySummaryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetVpcRouteEntrySummary  GetVpcRouteEntrySummaryRequest
  * @return GetVpcRouteEntrySummaryResponse
 */
async function getVpcRouteEntrySummary(request: GetVpcRouteEntrySummaryRequest): GetVpcRouteEntrySummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVpcRouteEntrySummary', 'POST', '/', 'json', false, 'json', request);
}

model GetVpnGatewayDiagnoseResultRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

**

**Description** If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  diagnoseId?: string(name='DiagnoseId', description='The ID of the diagnostic operation.

When you call the [DiagnoseVpnGateway](https://help.aliyun.com/document_detail/469751.html) operation, the system returns a corresponding ID.', example='vpndgn-uf6kuxbe3iv028k3s****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VPN gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-qingdao', position='Query'),
  vpnGatewayId?: string(name='VpnGatewayId', description='The ID of the VPN gateway.', example='vpn-uf6fzwp0ck3frwtbk****', position='Query'),
}

model GetVpnGatewayDiagnoseResultResponseBody = {
  beginTime?: string(name='BeginTime', description='The time when the diagnostic started.

The time follows the ISO8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.', example='2022-12-15T05:28:57Z'),
  diagnoseId?: string(name='DiagnoseId', description='The ID of the diagnostic.', example='vpndgn-uf6sgneym02lxyuv4****'),
  diagnoseResult?: [ 
    {
      diagnoseName?: string(name='DiagnoseName', description='The diagnostic item.

*   **RouteEntryConflict**: route conflicts.
*   **VpnRouteQuota**: the quota of destination-based routes for the VPN gateway.
*   **VpnIPsecQuota**: the quota of IPsec-VPN connections for the VPN gateway.
*   **VpnPbrRouteQuota**: the quota of policy-based routes for the VPN gateway.
*   **VcoConfigConsistency**: the consistency of the IPsec-VPN connection.
*   **VcoUserInternetIpConnectivity**: Internet connectivity of the customer gateway.
*   **VcoPrivateConnectivity**: private network connectivity.

For more information about the diagnostic items, see [Background information about quick diagnostics](https://help.aliyun.com/document_detail/190330.html).', example='RouteEntryConflict'),
      diagnoseResultDescription?: string(name='DiagnoseResultDescription', description='The diagnostic result.

The system returns different results for each diagnostic item.

*   **RouteEntryConflict**: information about route conflicts.

*   **VpnRouteQuota**:

    *   **quotaName**: the quota ID of destination-based routes.
    *   **quantity**: the quota of destination-based routes for the VPN gateway.
    *   **used**: the number of destination-based routes created for the VPN gateway.

*   **VpnIPsecQuota**:

    *   **quotaName**: the quota ID of IPsec-VPN connections.
    *   **quantity**: the quota of IPsec-VPN connections for the VPN gateway.
    *   **used**: the number of IPsec-VPN connections created for the VPN gateway.

*   **VpnPbrRouteQuota**:

    *   **quotaName**: the quota ID of policy-based routes.
    *   **quantity**: the quota of policy-based routes for the VPN gateway.
    *   **used**: the number of policy-based routes created for the VPN gateway.

*   **VcoConfigConsistency**:

    *   **vcoLackConf**: The system cannot obtain the configuration of the peer of the IPsec-VPN connection.
    *   **vcoRunningConf**: the configurations that have been added to the peer of the IPsec-VPN connection.
    *   **vcoDiffConf**: the configurations that are inconsistent between the local end and the peer.
    *   **vcoConf**: the configurations that have been added to the local end.

*   **VcoUserInternetIpConnectivity**:

    *   **targetIp**: the public IP address of the customer gateway.
    *   **rtt**: the latency when the system accesses the public IP address of the customer gateway. Unit: milliseconds.
    *   **lossRate**: the packet loss when the system accesses the public IP address of the customer gateway.

*   **VcoPrivateConnectivity**:

    *   **targetIp**: the source IP address.
    *   **srcIp**: the destination IP address.
    *   **rtt**: the latency when the source IP address accesses the destination IP address. Unit: milliseconds.
    *   **lossRate**: the packet loss when the source IP address accesses the destination IP address.', example='{\\"targetIp\\":\\"192.168.0.1\\",\\"srcIp\\":\\"192.168.1.1\\",\\"rtt\\":-1.0,\\"lossRate\\":100.0}'),
      diagnoseResultLevel?: string(name='DiagnoseResultLevel', description='The diagnostic result level.

*   **normal**
*   **warning**
*   **error**

For more information, see [Background information about quick diagnostics](https://help.aliyun.com/document_detail/190330.html).', example='normal'),
    }
  ](name='DiagnoseResult', description='The information about the diagnostic items.'),
  finishTime?: string(name='FinishTime', description='The timestamp when the system finishes diagnosing the item.

The time follows the ISO8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.', example='2022-12-15T05:29:08Z'),
  finishedCount?: int32(name='FinishedCount', description='The number of diagnostic items that have been diagnosed.', example='7'),
  requestId?: string(name='RequestId', description='The request ID.', example='312C4D5A-6563-5FC6-8C6E-A43A5A316FEB'),
  resourceInstanceId?: string(name='ResourceInstanceId', description='The ID of the resource that is diagnosed.', example='vco-uf6huqsu63azl7mdp****'),
  resourceType?: string(name='ResourceType', description='The type of the resource.

The value is set to **IPsec**, which indicates an IPsec-VPN connection.', example='IPsec'),
  totalCount?: int32(name='TotalCount', description='The total number of diagnostic items.', example='7'),
  vpnGatewayId?: string(name='VpnGatewayId', description='The ID of the VPN gateway.', example='vpn-uf6fzwp0ck3frwtbk****'),
}

model GetVpnGatewayDiagnoseResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVpnGatewayDiagnoseResultResponseBody(name='body'),
}

/**
  * @description When you call the **GetVpnGatewayDiagnoseResult** operation, you must specify one of **DiagnoseId** and **VpnGatewayId**.
  * @param request  the request parameters of GetVpnGatewayDiagnoseResult  GetVpnGatewayDiagnoseResultRequest
  * @return GetVpnGatewayDiagnoseResultResponse
 */
async function getVpnGatewayDiagnoseResult(request: GetVpnGatewayDiagnoseResultRequest): GetVpnGatewayDiagnoseResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVpnGatewayDiagnoseResult', 'POST', '/', 'json', false, 'json', request);
}

model GrantInstanceToCenRequest {
  cenId: string(name='CenId', description='The ID of the CEN instance to which you want to grant permissions.

This parameter is required.', example='cen-7qthudw0ll6jmc****', position='Query'),
  cenOwnerId: long(name='CenOwnerId', description='The user ID (UID) of the Apsara Stack tenant account to which the CEN instance belongs.

This parameter is required.', example='123456789', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the network instance.

This parameter is required.', example='vpc-uf6o8d1dj8sjwxi6o****', position='Query'),
  instanceType: string(name='InstanceType', description='The type of the network instance. Valid values:

*   **VPC**
*   **VBR**

This parameter is required.', example='VPC', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the network instance is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GrantInstanceToCenResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model GrantInstanceToCenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GrantInstanceToCenResponseBody(name='body'),
}

/**
  * @description *   Before you can attach a network instance that belongs to another Alibaba Cloud account to your CEN instance, you must grant permissions to your CEN instance.
  * >  **GrantInstanceToCen** is a Virtual Private Cloud (VPC) operation. Therefore, you must use the `vpc.aliyuncs.com` domain name to call this operation. The API version is `2016-04-28`.
  * *   You cannot repeatedly call the **GrantInstanceToCen** operation to grant the permissions on a network instance to a CEN instance. The network instance can be a VPC, a virtual border router (VBR), or a Cloud Connect Network (CCN) instance.
  * @param request  the request parameters of GrantInstanceToCen  GrantInstanceToCenRequest
  * @return GrantInstanceToCenResponse
 */
async function grantInstanceToCen(request: GrantInstanceToCenRequest): GrantInstanceToCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantInstanceToCen', 'POST', '/', 'json', false, 'json', request);
}

model GrantInstanceToVbrRequest {
  grantType: string(name='GrantType', description='The VBRs that need to acquire permissions on the VPC. Valid values:

*   **All**: Permissions on the VPC are granted to all VBRs that belong to the specified region and Alibaba Cloud account. In this case, you can leave **VbrInstanceIds** empty.
*   **Specify**: Permissions on the VPC are granted to the specified VBRs. **VbrInstanceIds** must be assigned a value.

This parameter is required.', example='All', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the VPC.

This parameter is required.', example='vpc-bp1lqhq93q8evjpky****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the VPC is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  vbrInstanceIds?: [ string ](name='VbrInstanceIds', description='The information about the VBRs.', shrink='simple', position='Query'),
  vbrOwnerUid: long(name='VbrOwnerUid', description='The ID of the Alibaba Cloud account to which the VBR belongs.

This parameter is required.', example='1210123456123456', position='Query'),
  vbrRegionNo: string(name='VbrRegionNo', description='The ID of the region where the VBR is deployed.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model GrantInstanceToVbrResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F99F13AE-D733-5856-AB97-80CC88B1D5A8'),
}

model GrantInstanceToVbrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GrantInstanceToVbrResponseBody(name='body'),
}

/**
  * @description ## Usage notes
  * When you connect a VBR to a VPC that belongs to another Alibaba Cloud account, the VBR must acquire the required permissions from the VPC.
  * @param request  the request parameters of GrantInstanceToVbr  GrantInstanceToVbrRequest
  * @return GrantInstanceToVbrResponse
 */
async function grantInstanceToVbr(request: GrantInstanceToVbrRequest): GrantInstanceToVbrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantInstanceToVbr', 'POST', '/', 'json', false, 'json', request);
}

model ListBusinessAccessPointsRequest {
  regionId?: string(name='RegionId', description='The region ID of the Express Connect circuit.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model ListBusinessAccessPointsResponseBody = {
  businessAccessPoints?: [ 
    {
      accessPointId?: string(name='AccessPointId', description='The ID of the access point.', example='ap-cn-hangzhou-xs-B'),
      accessPointName?: string(name='AccessPointName', description='The name of the access point.', example='hangzhou-xs-B'),
      cloudBoxInstanceIds?: string(name='CloudBoxInstanceIds', description='The ID of the cloud box.

>  You can query this parameter if the Express Connect circuits and access points are of the cloud box type.', example='cb-****'),
      latitude?: double(name='Latitude', description='The latitude of the access point.', example='30.198416'),
      longitude?: double(name='Longitude', description='The longitude of the access point.', example='120.247514'),
      supportLineOperator?: string(name='SupportLineOperator', description='The connectivity provider of the Express Connect circuit. Valid values:

*   **CT**: China Telecom.
*   **CU**: China Unicom.
*   **CM**: China Mobile.
*   **CO**: other connectivity providers in the Chinese mainland.
*   **Equinix**: Equinix.
*   **Other**: other connectivity providers outside the Chinese mainland.', example='CT'),
      supportPortTypes?: string(name='SupportPortTypes', description='The port type supported by the access point. Valid values:

*   **100Base-T**: 100 Mbit/s copper Ethernet port
*   **1000Base-T**: 1,000 Mbit/s copper Ethernet port
*   **1000Base-LX**: 1,000 Mbit/s single-mode optical port (10 km)
*   **10GBase-T**: 10,000 Mbit/s copper Ethernet port
*   **10GBase-LR**: 10,000 Mbit/s single-mode optical port (10 km)
*   **40GBase-LR**: 40,000 Mbit/s single-mode optical port
*   **100GBase-LR**: 100,000 Mbit/s single-mode optical port

>  To use ports 40GBase-LR and 100GBase-LR, you must first contact your account manager.', example='1000Base-T'),
    }
  ](name='BusinessAccessPoints', description='The list of access points.'),
  requestId?: string(name='RequestId', description='The request ID.', example='611CB80C-B6A9-43DB-9E38-0B0AC3D9B58F'),
}

model ListBusinessAccessPointsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBusinessAccessPointsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListBusinessAccessPoints  ListBusinessAccessPointsRequest
  * @return ListBusinessAccessPointsResponse
 */
async function listBusinessAccessPoints(request: ListBusinessAccessPointsRequest): ListBusinessAccessPointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBusinessAccessPoints', 'POST', '/', 'json', false, 'json', request);
}

model ListDhcpOptionsSetsRequest {
  dhcpOptionsSetId?: [ string ](name='DhcpOptionsSetId', description='The ID of the DHCP options set. You can specify at most 20 IDs.', example='dopt-o6w0df4epg9zo8isy****', position='Query'),
  dhcpOptionsSetName?: string(name='DhcpOptionsSetName', description='The name of the DHCP options set.

The name must be 1 to 128 characters in length and can contain digits, underscores (_), and hyphens (-). It must start with a letter.

Valid values:

*   tf-testAccVpcDhcpOptionsSets-1585169790614573448

    <!-- -->

    :

    <!-- -->

    tf-testAccVpcDhcpOptionsSets-1585169790614573448

    <!-- -->

    .', example='test', position='Query'),
  domainName?: string(name='DomainName', description='The root domain. For example, you can set the value to example.com.

After a DHCP options set is associated with a virtual private cloud (VPC), the root domain in the DHCP options set is automatically synchronized with the ECS instances in the VPC.', example='example.com', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: **1** to **100**. Default value: **10**.', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of the **NextToken** parameter.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the DHCP options sets that you want to query.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the DHCP options set belongs.', example='rg-acfmxazb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key. You can specify up to 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 64 characters in length and can contain digits, periods (.), underscores (_), and hyphens (-). The tag key must start with a letter but cannot start with `aliyun` or `acs:`. The tag key cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length and can contain digits, periods (.), underscores (_), and hyphens (-). The tag value must start with a letter but cannot start with `aliyun` or `acs:`. The tag value cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tags', description='The tag list.', position='Query'),
}

model ListDhcpOptionsSetsResponseBody = {
  dhcpOptionsSets?: [ 
    {
      associateVpcCount?: int32(name='AssociateVpcCount', description='The number of VPCs with which the DHCP options set is associated.', example='2'),
      dhcpOptions?: {
        domainName?: string(name='DomainName', description='The suffix of the hostname.', example='example.com'),
        domainNameServers?: string(name='DomainNameServers', description='The IP address of the DNS server.', example='192.168.XX.XX'),
        ipv6LeaseTime?: string(name='Ipv6LeaseTime', description='The lease time of the IPv6 addresses for the DHCP options set.

*   If you use hours as the unit, valid values are **24h to 1176h** and **87600h to 175200h**. Default value: **87600h**.
*   If you use days as the unit, valid values are **1d to 49d** and **3650d to 7300d**. Default value: **3650d**.', example='3650d'),
        leaseTime?: string(name='LeaseTime', description='The lease time of the IPv4 addresses for the DHCP options set.

*   If you use hours as the unit, valid values are **24h to 1176h** and **87600h to 175200h**. Default value: **87600h**.
*   If you use days as the unit, valid values are **1d to 49d** and **3650d to 7300d**. Default value: **3650d**.', example='3650d'),
      }(name='DhcpOptions', description='The configuration information about the DHCP options set.'),
      dhcpOptionsSetDescription?: string(name='DhcpOptionsSetDescription', description='The description of the DHCP options set.', example='test'),
      dhcpOptionsSetId?: string(name='DhcpOptionsSetId', description='The ID of the DHCP options set.', example='dopt-o6w0df4epg9zo8isy****'),
      dhcpOptionsSetName?: string(name='DhcpOptionsSetName', description='The name of the DHCP options set.', example='test'),
      ownerId?: long(name='OwnerId', description='The ID of the Alibaba Cloud account to which the DHCP options set belongs.', example='253460731706911258'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the DHCP options set belongs.', example='rg-acfmxazb4ph****'),
      status?: string(name='Status', description='The status of the DHCP options set. Valid values:

*   **Available**
*   **InUse**
*   **Pending**
*   **Deleted**', example='Available'),
      tags?: [ 
        {
          key?: string(name='Key', description='The key of tag N added to the resource.', example='FinanceDept'),
          value?: string(name='Value', description='The value of tag N added to the resource.', example='FinanceJoshua'),
        }
      ](name='Tags', description='The tag list.'),
    }
  ](name='DhcpOptionsSets', description='The list of the DHCP options sets.'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value is returned for **NextToken**, the value is used to retrieve a new page of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd********'),
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  totalCount?: string(name='TotalCount', description='The number of entries.', example='10'),
}

model ListDhcpOptionsSetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDhcpOptionsSetsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDhcpOptionsSets  ListDhcpOptionsSetsRequest
  * @return ListDhcpOptionsSetsResponse
 */
async function listDhcpOptionsSets(request: ListDhcpOptionsSetsRequest): ListDhcpOptionsSetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDhcpOptionsSets', 'POST', '/', 'json', false, 'json', request);
}

model ListEnhanhcedNatGatewayAvailableZonesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The language to display the results. Valid values:

*   **zh-CN** (default): Chinese
*   **en-US**: English', example='zh-CN', position='Query'),
  filter?: [ 
    {
      key?: string(name='Key', description='The filter key. Only **PrivateLinkEnabled** is supported.', example='PrivateLinkEnabled'),
      value?: string(name='Value', description='The value of the filter key.

>  If the filter key is set to **PrivateLinkEnabled**, you must specify a filter value. Valid values: **true** and **false**.', example='true'),
    }
  ](name='Filter', description='The filter information. You can specify a filter key and a filter value.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region that you want to query.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

In this example, zones that support NAT gateways in the UAE (Dubai) region are queried.

This parameter is required.', example='me-east-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListEnhanhcedNatGatewayAvailableZonesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8AE6F367-52EA-535D-9A3D-EF23D70527C8'),
  zones?: [ 
    {
      localName?: string(name='LocalName', description='The name of the zone.', example='Dubai Zone A'),
      zoneId?: string(name='ZoneId', description='The ID of the zone where the instance is deployed.', example='me-east-1a'),
    }
  ](name='Zones', description='The list of zones.'),
}

model ListEnhanhcedNatGatewayAvailableZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnhanhcedNatGatewayAvailableZonesResponseBody(name='body'),
}

/**
  * @description You can call this operation to query zones that support NAT gateways, including Internet NAT gateways and Virtual Private Cloud (VPC) NAT gateways.
  * @param request  the request parameters of ListEnhanhcedNatGatewayAvailableZones  ListEnhanhcedNatGatewayAvailableZonesRequest
  * @return ListEnhanhcedNatGatewayAvailableZonesResponse
 */
async function listEnhanhcedNatGatewayAvailableZones(request: ListEnhanhcedNatGatewayAvailableZonesRequest): ListEnhanhcedNatGatewayAvailableZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEnhanhcedNatGatewayAvailableZones', 'POST', '/', 'json', false, 'json', request);
}

model ListFullNatEntriesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  fullNatEntryId?: string(name='FullNatEntryId', description='The ID of the FULLNAT entry that you want to query.', example='fullnat-gw8fz23jezpbblf1j****', position='Query'),
  fullNatEntryNames?: [ string ](name='FullNatEntryNames', description='The name of the FULLNAT entry that you want to query. You can specify at most 20 names.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (_), and hyphens (-). The name must start with a letter.', position='Query'),
  fullNatTableId?: string(name='FullNatTableId', description='The ID of the FULLNAT table to which the FULLNAT entries to be queried belong.

>  You must specify at least one of **FullNatTableId** and **NatGatewayId**.', example='fulltb-gw88z7hhlv43rmb26****', position='Query'),
  ipProtocol?: string(name='IpProtocol', description='The protocol of the packets that are forwarded by the port. Valid values:

*   **TCP**
*   **UDP**', example='TCP', position='Query'),
  maxResults?: long(name='MaxResults', description='The number of entries per page. Valid values: **1** to **100**. Default value: **20**.', example='20', position='Query'),
  natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.

>  You must specify at least one of **FullNatTableId** and **NatGatewayId**.', example='ngw-bp1uewa15k4iy5770****', position='Query'),
  natIp?: string(name='NatIp', description='The NAT IP address that provides address translation in FULLNAT entries.', example='10.0.XX.XX', position='Query'),
  natIpPort?: string(name='NatIpPort', description='The frontend port to be modified in the mapping of FULLNAT port. Valid values: **1** to **65535**.', example='443', position='Query'),
  networkInterfaceIds?: [ string ](name='NetworkInterfaceIds', description='The ID of the elastic network interface (ENI) that you want to query.', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of the **NextToken** parameter.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the virtual private cloud (VPC) NAT gateway to which the FULLNAT entries to be queried belong.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='eu-central-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListFullNatEntriesResponseBody = {
  fullNatEntries?: [ 
    {
      accessIp?: string(name='AccessIp', description='The backend IP address that is used for FULLNAT address translation in FULLNAT entries.', example='192.168.XX.XX'),
      accessPort?: string(name='AccessPort', description='The backend port that is used for port mapping in FULLNAT entries. Valid values: **1** to **65535**.', example='80'),
      creationTime?: string(name='CreationTime', description='The time when the FULLNAT entry was created.', example='2021-10-27T02:44:40Z'),
      fullNatEntryDescription?: string(name='FullNatEntryDescription', description='The description of the FULLNAT entry.

The name must be 2 to 128 characters in length. It must start with a letter but cannot start with `http://` or `https://`.', example='abc'),
      fullNatEntryId?: string(name='FullNatEntryId', description='The ID of the FULLNAT entry.', example='fullnat-gw8fz23jezpbblf1j****'),
      fullNatEntryName?: string(name='FullNatEntryName', description='The name of the FULLNAT entry.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (_), and hyphens (-). The name must start with a letter.', example='test'),
      fullNatEntryStatus?: string(name='FullNatEntryStatus', description='The status of the FULLNAT entry. Valid values:

*   **Pending**
*   **Available**
*   **Deleting**
*   **Deleted**', example='Available'),
      fullNatTableId?: string(name='FullNatTableId', description='The ID of the FULLNAT table to which the FULLNAT entry belongs.', example='fulltb-gw88z7hhlv43rmb26****'),
      ipProtocol?: string(name='IpProtocol', description='The protocol of the packets that are forwarded. Valid values:

*   **TCP**
*   **UDP**', example='TCP'),
      natIp?: string(name='NatIp', description='The NAT IP address that is used for address translation in FULLNAT entries.', example='192.168.XX.XX'),
      natIpPort?: string(name='NatIpPort', description='The frontend port that is used for port mapping in FULLNAT entries. Valid values: **1** to **65535**.', example='80'),
      networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the elastic network interface (ENI).', example='eni-gw80wedm8pq0tpr2****'),
      networkInterfaceType?: string(name='NetworkInterfaceType', description='The type of the ENI. The value is set to **Endpoint**, which indicates a reverse endpoint.', example='Endpoint'),
    }
  ](name='FullNatEntries', description='The information about the FULLNAT entries that are queried.'),
  fullNatTableId?: string(name='FullNatTableId', description='The ID of the FULLNAT table to which the queried FULLNAT entries belong.', example='fullnat-gw8fz23jezpbblf1j****'),
  maxResults?: long(name='MaxResults', description='The maximum number of entries returned.', example='1'),
  natGatewayId?: string(name='NatGatewayId', description='The ID of the VPC NAT gateway.', example='ngw-gw8054kn57y3hq3bv****'),
  nextToken?: string(name='NextToken', description='Indicates whether the token for the next query exists. Valid values:

*   If the value of **NextToken** is empty, no next queries are sent.
*   If the value of **NextToken** is returned, the value indicates the token that is used for the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The request ID.', example='F03E41F6-1A74-311F-8D98-124EEE9F37B8'),
  totalCount?: long(name='TotalCount', description='The number of FULLNAT entries returned.', example='1'),
}

model ListFullNatEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFullNatEntriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFullNatEntries  ListFullNatEntriesRequest
  * @return ListFullNatEntriesResponse
 */
async function listFullNatEntries(request: ListFullNatEntriesRequest): ListFullNatEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFullNatEntries', 'POST', '/', 'json', false, 'json', request);
}

model ListGatewayRouteTableEntriesRequest {
  destinationCidrBlock?: string(name='DestinationCidrBlock', description='The destination CIDR block of the route entry in the gateway route table.', example='192.168.0.5', position='Query'),
  gatewayRouteTableId: string(name='GatewayRouteTableId', description='The ID of the gateway route table that you want to query.

This parameter is required.', example='vtb-5ts0ohchwkp3dydt2****', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **100**. Default value: **10**.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   If a value is returned for NextToken, specify the value in the next request to retrieve a new page of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the gateway route table.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent list of regions.

This parameter is required.', example='ap-southeast-6', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListGatewayRouteTableEntriesResponseBody = {
  gatewayRouteEntryModels?: [ 
    {
      description?: string(name='Description', description='The name of the route entry.', example='test'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', description='The destination CIDR block of the route.', example='192.168.0.5'),
      name?: string(name='Name', description='The name of the route entry.

The name must be 2 to 128 characters in length and can contain letter, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.', example='name'),
      nextHopId?: string(name='NextHopId', description='The ID of the next hop.', example='i-bp11gcl0sm85t9bi****'),
      nextHopType?: string(name='NextHopType', description='The type of the next hop. Valid values:

*   **EcsInstance**: Elastic Compute Service (ECS) instance
*   **NetworkInterface**: elastic network interfaces (ENIs).
*   **Local**: local next hop', example='EcsInstance'),
      nextHops?: [ 
        {
          enabled?: string(name='Enabled', description='Indicates whether the route is available. Valid values:

*   **0**: unavailable
*   **1**: available', example='1'),
          nextHopId?: string(name='NextHopId', description='The ID of the next hop.', example='vpn-bp10zyaph5cc8b7c7****'),
          nextHopType?: string(name='NextHopType', description='The type of the next hop. Valid values:

*   **Instance** (default): an ECS instance
*   **HaVip**: a high-availability virtual IP address (HAVIP).
*   **VpnGateway**: a VPN gateway
*   **NatGateway**: a NAT gateway
*   **NetworkInterface**: a secondary ENI
*   **RouterInterface**: a router interface
*   **IPv6Gateway**: an IPv6 gateway
*   **Attachment**: a transit router', example='Instance'),
          weight?: string(name='Weight', description='The weight of the route.', example='100'),
        }
      ](name='NextHops', description='The information about the next hop.'),
      status?: string(name='Status', description='The status of the route entry. Valid values:

*   **Pending**
*   **Available**
*   **Modifying**', example='Available'),
    }
  ](name='GatewayRouteEntryModels', description='The details of the routes in the gateway route table.'),
  nextToken?: string(name='NextToken', description='The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value is returned for **NextToken**, the value is used to retrieve a new page of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListGatewayRouteTableEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGatewayRouteTableEntriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListGatewayRouteTableEntries  ListGatewayRouteTableEntriesRequest
  * @return ListGatewayRouteTableEntriesResponse
 */
async function listGatewayRouteTableEntries(request: ListGatewayRouteTableEntriesRequest): ListGatewayRouteTableEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGatewayRouteTableEntries', 'POST', '/', 'json', false, 'json', request);
}

model ListGeographicSubRegionsRequest {
}

model ListGeographicSubRegionsResponseBody = {
  count?: long(name='Count', description='The number of entries.', example='10'),
  geographicSubRegions?: [ string ](name='GeographicSubRegions', description='The region list.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model ListGeographicSubRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGeographicSubRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListGeographicSubRegions  ListGeographicSubRegionsRequest
  * @return ListGeographicSubRegionsResponse
 */
async function listGeographicSubRegions(request: ListGeographicSubRegionsRequest): ListGeographicSubRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGeographicSubRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListIpsecServerLogsRequest {
  from?: int32(name='From', description='The beginning of the time range to query. The value must be a UNIX timestamp. For example, 1671003744 specifies 15:42:24 (UTC+8) on December 14, 2022.

>  If you specify **From**, you must also specify **To** or **MinutePeriod**.', example='1671003744', position='Query'),
  ipsecServerId: string(name='IpsecServerId', description='The ID of the IPsec server.

This parameter is required.', example='iss-2zei2n5q5zhirfh73****', position='Query'),
  minutePeriod?: int32(name='MinutePeriod', description='The interval at which log data is queried. Valid values: **1** to **10**. Unit: minutes.

>  If both **From** and **To** are not specified, you must specify **MinutePeriod**.', example='10', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **1** to **50**. Default value: **10**.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the IPsec server is created.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to obtain the region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  to?: int32(name='To', description='The end of the time range to query. The value must be a unix timestamp. For example, 1671004344 specifies 15:52:24 (UTC+8) on December 14, 2022.

>  If you specify **To**, you must also specify **From** or **MinutePeriod**.', example='1671004344', position='Query'),
}

model ListIpsecServerLogsResponseBody = {
  count?: int32(name='Count', description='The number of entries on the current page.', example='10'),
  data?: [ string ](name='Data', description='An array of strings.

Each item in the array is a log entry.'),
  isCompleted?: boolean(name='IsCompleted', description='Indicates whether the log is accurate. Valid values:

*   **true**: accurate
*   **false**: inaccurate', example='true'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DEDAC5B1-9292-5BF7-BDDF-61BA58CFB2FB'),
}

model ListIpsecServerLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIpsecServerLogsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListIpsecServerLogs  ListIpsecServerLogsRequest
  * @return ListIpsecServerLogsResponse
 */
async function listIpsecServerLogs(request: ListIpsecServerLogsRequest): ListIpsecServerLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIpsecServerLogs', 'POST', '/', 'json', false, 'json', request);
}

model ListIpsecServersRequest {
  ipsecServerId?: [ string ](name='IpsecServerId', description='The ID of the IPsec server.', example='iss-bp1bo3xuvcxo7ixll****', maxLength=128, position='Query'),
  ipsecServerName?: string(name='IpsecServerName', description='The name of the IPsec server.

The name must be 1 to 100 characters in length and cannot start with `http://` or `https://`.', example='test', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **20**. Default value: **10**.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   If this is your first request and no next requests are to be performed, you do not need to specify this parameter.
*   You must specify the token that is obtained from the previous query as the value of **NextToken**.', example='caeba0bbb2be03f84eb48b699f0a****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the IPsec server is created.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the IPsec server belongs.

The IPsec server has the same resource group as its associated VPN gateway instance.

You can call the [DescribeVpnGateway](https://help.aliyun.com/document_detail/2526915.html) operation to query the ID of the resource group to which the VPN gateway instance belongs.', example='rg-acfmzs372yg****', position='Query'),
  vpnGatewayId?: string(name='VpnGatewayId', description='The ID of the VPN gateway.', example='vpn-bp1q8bgx4xnkm2ogj****', position='Query'),
}

model ListIpsecServersResponseBody = {
  ipsecServers?: [ 
    {
      clientIpPool?: string(name='ClientIpPool', description='The client CIDR block. It refers to the CIDR block that is allocated to the virtual interface of the client.', example='10.0.0.0/24'),
      creationTime?: string(name='CreationTime', description='The time when the IPsec server was created.

T is used as a delimiter. Z indicates that the time is in UTC.', example='2018-12-03T10:11:55Z'),
      effectImmediately?: boolean(name='EffectImmediately', description='Indicates whether the current IPsec tunnel is deleted and negotiations are reinitiated. Valid values:

*   **true**: immediately initiates negotiations after the configuration is completed.
*   **false**: initiates negotiations when inbound traffic is detected.', example='false'),
      iDaaSInstanceId?: string(name='IDaaSInstanceId', description='The ID of the IDaaS instance.', example='idaas-cn-hangzhou-****'),
      ikeConfig?: {
        ikeAuthAlg?: string(name='IkeAuthAlg', description='The IKE authentication algorithm.', example='sha1'),
        ikeEncAlg?: string(name='IkeEncAlg', description='The IKE encryption algorithm.', example='aes'),
        ikeLifetime?: long(name='IkeLifetime', description='The IKE lifetime. Unit: seconds.', example='86400'),
        ikeMode?: string(name='IkeMode', description='The IKE negotiation mode. Valid values:

**main**: This mode offers higher security during negotiations.', example='main'),
        ikePfs?: string(name='IkePfs', description='The Diffie-Hellman key exchange algorithm.', example='group2'),
        ikeVersion?: string(name='IkeVersion', description='The IKE version.', example='ikev2'),
        localId?: string(name='LocalId', description='The ID of the IPsec server. The default value is the public IP address of the VPN gateway. Both FQDNs and IP addresses are supported.', example='116.64.XX.XX'),
        remoteId?: string(name='RemoteId', description='The identifier of the customer gateway. Both fully qualified domain names (FQDNs) and IP addresses are supported. By default, this parameter is empty.', example='139.67.XX.XX'),
      }(name='IkeConfig', description='The configurations of Phase 1 negotiations.'),
      internetIp?: string(name='InternetIp', description='The public IP address of the VPN gateway.', example='47.22.XX.XX'),
      ipsecConfig?: {
        ipsecAuthAlg?: string(name='IpsecAuthAlg', description='The IPsec authentication algorithm.', example='sha1'),
        ipsecEncAlg?: string(name='IpsecEncAlg', description='The IPsec encryption algorithm.', example='aes'),
        ipsecLifetime?: long(name='IpsecLifetime', description='The IPsec lifetime. Unit: seconds.', example='86400'),
        ipsecPfs?: string(name='IpsecPfs', description='The Diffie-Hellman key exchange algorithm.', example='group2'),
      }(name='IpsecConfig', description='The configurations of Phase 2 negotiations.'),
      ipsecServerId?: string(name='IpsecServerId', description='The IPsec server ID.', example='iss-bp1bo3xuvcxo7ixll****'),
      ipsecServerName?: string(name='IpsecServerName', description='The name of the IPsec server.', example='test'),
      localSubnet?: string(name='LocalSubnet', description='The local CIDR blocks, which refer to the CIDR blocks on the virtual private cloud (VPC) side.', example='192.168.0.0/16,172.17.0.0/16'),
      maxConnections?: int32(name='MaxConnections', description='The number of SSL-VPN connections supported by the VPN gateway.

>  The number of SSL-VPN connections specified in this parameter includes both SSL-VPN and IPsec-VPN connections. For example, you have five SSL-VPN connections and three SSL clients occupy three SSL-VPN connections. In this case, two clients can connect to the IPsec server.', example='5'),
      multiFactorAuthEnabled?: boolean(name='MultiFactorAuthEnabled', description='Indicates whether two-factor authentication is enabled. Valid values:

*   **true**
*   **false**: The feature is disabled.', example='true'),
      onlineClientCount?: int32(name='OnlineClientCount', description='The number of clients that are connected to the IPsec server.', example='1'),
      psk?: string(name='Psk', description='The pre-shared key.', example='pgw6dy7d****'),
      pskEnabled?: boolean(name='PskEnabled', description='Indicates whether pre-shared key authentication is enabled. Only **true** may be returned, which indicates that pre-shared key authentication is enabled.', example='true'),
      regionId?: string(name='RegionId', description='The ID of the region where the IPsec server is created.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the IPsec server belongs.

You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/158855.html) operation to query the resource group information.', example='rg-acfmzs372yg****'),
      vpnGatewayId?: string(name='VpnGatewayId', description='The ID of the VPN gateway.', example='vpn-bp1q8bgx4xnkm2ogj****'),
    }
  ](name='IpsecServers', description='The list of IPsec servers.'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='1'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. Valid values:

*   If no value is returned for **NextToken**, no next queries are sent.
*   If a value is returned for **NextToken**, the value can be used in the next request to retrieve a new page of results.', example='caeba0bbb2be03f84eb48b699f0a****'),
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B457'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='10'),
}

model ListIpsecServersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIpsecServersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListIpsecServers  ListIpsecServersRequest
  * @return ListIpsecServersResponse
 */
async function listIpsecServers(request: ListIpsecServersRequest): ListIpsecServersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIpsecServers', 'POST', '/', 'json', false, 'json', request);
}

model ListIpv4GatewaysRequest {
  ipv4GatewayId?: string(name='Ipv4GatewayId', description='The ID of the IPv4 gateway.', example='ipv4gw-5tsnc6s4ogsedtp3k****', position='Query'),
  ipv4GatewayName?: string(name='Ipv4GatewayName', description='The name of the IPv4 gateway.

The name must be 1 to 128 characters in length, and cannot start with `http://` or `https://`.', example='name', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **100**. Default value: **10**.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If this is your first query and no next queries are to be sent, ignore this parameter.
*   If a next query is to be sent, set the value to the value of NextToken that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the IPv4 gateways to be queried are deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='ap-southeast-6', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the IPv4 gateway belongs.', example='rg-bp67acfmxazb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key. You can specify at most 20 tag keys. The tag key cannot be an empty string.

The key cannot exceed 64 characters in length, and can contain digits, periods (.), underscores (_), and hyphens (-). The key must start with a letter but cannot start with `aliyun` or `acs:`. The key cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value. You can specify at most 20 tag values. It can be an empty string.

The tag value cannot exceed 128 characters in length, and can contain digits, periods (.), underscores (_), and hyphens (-). It must start with a letter but cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tags', description='The tags of the resource.', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) with which the IPv4 gateway is associated.', example='vpc-5tsrxlw7dv074gci4****', position='Query'),
}

model ListIpv4GatewaysResponseBody = {
  ipv4GatewayModels?: [ 
    {
      enabled?: boolean(name='Enabled', description='Indicates whether the IPv4 gateway is activated. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      gmtCreate?: string(name='GmtCreate', description='The time when the IPv4 gateway was created.', example='2021-12-02T07:07:35Z'),
      ipv4GatewayDescription?: string(name='Ipv4GatewayDescription', description='The description of the IPv4 gateway.', example='test'),
      ipv4GatewayId?: string(name='Ipv4GatewayId', description='The ID of the IPv4 gateway.', example='ipv4gw-5tsnc6s4ogsedtp3k****'),
      ipv4GatewayName?: string(name='Ipv4GatewayName', description='The name of the IPv4 gateway.', example='name'),
      ipv4GatewayRouteTableId?: string(name='Ipv4GatewayRouteTableId', description='The ID of the route table associated with the IPv4 gateway.', example='vtb-5ts0ohchwkp3dydt2****'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the IPv4 gateway belongs.', example='rg-bp67acfmxazb4ph****'),
      status?: string(name='Status', description='The status of the IPv4 gateway. Valid values:

*   **Creating**
*   **Created**
*   **Modifying**
*   **Deleting**
*   **Deleted**', example='Created'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='FinanceDept'),
          value?: string(name='Value', description='The tag value.', example='FinanceJoshua'),
        }
      ](name='Tags', description='The list of tags that are added to the resource group.'),
      vpcId?: string(name='VpcId', description='The ID of the VPC with which the IPv4 gateways are associated.', example='vpc-5tsrxlw7dv074gci4****'),
    }
  ](name='Ipv4GatewayModels', description='The list of IPv4 gateways.'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If no value is returned for **NextToken**, no next queries are sent.
*   If a value of **NextToken** is returned, the value is the token that is used for the subsequent query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2D265800-E306-529C-8418-84B0A1D201DB'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListIpv4GatewaysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIpv4GatewaysResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListIpv4Gateways  ListIpv4GatewaysRequest
  * @return ListIpv4GatewaysResponse
 */
async function listIpv4Gateways(request: ListIpv4GatewaysRequest): ListIpv4GatewaysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIpv4Gateways', 'POST', '/', 'json', false, 'json', request);
}

model ListNatIpCidrsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not set this parameter, the system automatically uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to only precheck this request. Valid values:

*   **true**: checks the API request. The CIDR blocks of the NAT gateway are not queried if the API request passes the precheck. The system checks whether your AccessKey pair is valid, whether the Resource Access Management (RAM) user is authorized, and whether the required parameters are set. If the request fails to pass the precheck, the corresponding error message is returned. If the check succeeds, the DryRunOperation error code is returned.
*   **false**: sends the API request. If the request passes the precheck, 2xx HTTP status code is returned and the CIDR blocks of the NAT gateway are queried. This is the default value.', example='false', position='Query'),
  maxResults?: string(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **100**. Default value: **20**.', example='20', position='Query'),
  natGatewayId: string(name='NatGatewayId', description='The ID of the VPC NAT gateway that you want to query.

This parameter is required.', example='ngw-gw8v16wgvtq26vh59****', position='Query'),
  natIpCidr?: string(name='NatIpCidr', description='The CIDR block of the NAT gateway that you want to query.', example='172.16.0.0/24', position='Query'),
  natIpCidrName?: [ string ](name='NatIpCidrName', description='The name of the CIDR block that you want to query. Valid values of **N**: **1** to **20**.', example='test', position='Query'),
  natIpCidrStatus?: string(name='NatIpCidrStatus', description='The status of the CIDR block that you want to query. Set the value to **Available**.', example='Available', position='Query'),
  natIpCidrs?: [ string ](name='NatIpCidrs', description='The CIDR block of the NAT gateway that you want to query. Valid values of **N**: **1** to **20**.', example='172.16.0.0/24', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Set the value as needed.

*   If this is your first query or no next query is to be sent, ignore this parameter.
*   If a next query is to be sent, set the value to the value of NextToken that is returned from the last call.', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Virtual Private Cloud (VPC) NAT gateway that you want to query.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='eu-central-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListNatIpCidrsResponseBody = {
  natIpCidrs?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the CIDR block was created.', example='2021-06-28T20:50Z'),
      isDefault?: boolean(name='IsDefault', description='Indicates whether the CIDR block is the default CIDR block of the NAT gateway. Valid values:

*   **true**: The CIDR block is the default CIDR block of the NAT gateway.
*   **false**: The CIDR block is not the default CIDR block of the NAT gateway.', example='true'),
      natGatewayId?: string(name='NatGatewayId', description='The ID of the VPC NAT gateway.', example='ngw-gw8v16wgvtq26vh59****'),
      natIpCidr?: string(name='NatIpCidr', description='The CIDR block of the NAT gateway.', example='172.16.0.0/24'),
      natIpCidrDescription?: string(name='NatIpCidrDescription', description='The description of the CIDR block of the NAT gateway.', example='test'),
      natIpCidrId?: string(name='NatIpCidrId', description='The ID of the CIDR block of the NAT gateway.', example='vpcnatcidr-gw8ov42ei6xh1jys2****'),
      natIpCidrName?: string(name='NatIpCidrName', description='The name of the CIDR block of the NAT gateway.', example='Name'),
      natIpCidrStatus?: string(name='NatIpCidrStatus', description='The status of the CIDR block of the NAT gateway. If **Available** is returned, it indicates that the CIDR block is available.', example='Available'),
    }
  ](name='NatIpCidrs', description='The CIDR blocks of the NAT gateway.'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If the value of **NextToken** is not returned, it indicates that no next query is to be sent.
*   If the value of **NextToken** is returned, the value indicates the token that is used for the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7479A224-4A28-4895-9604-11F48BCE6A88'),
  totalCount?: string(name='TotalCount', description='The number of CIDR blocks that are returned.', example='1'),
}

model ListNatIpCidrsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNatIpCidrsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNatIpCidrs  ListNatIpCidrsRequest
  * @return ListNatIpCidrsResponse
 */
async function listNatIpCidrs(request: ListNatIpCidrsRequest): ListNatIpCidrsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNatIpCidrs', 'POST', '/', 'json', false, 'json', request);
}

model ListNatIpsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not set this parameter, the system automatically uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to only precheck the request. Valid values:

*   **true**: checks the API request. IP addresses are not queried. The system checks the required parameters, request syntax, and limits. If the request fails to pass the precheck, the corresponding error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. If the request passes the precheck, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  maxResults?: string(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **100**. Default value: **20**.', example='20', position='Query'),
  natGatewayId: string(name='NatGatewayId', description='The ID of the NAT gateway.

This parameter is required.', example='ngw-gw8v16wgvtq26vh59****', position='Query'),
  natIpCidr?: string(name='NatIpCidr', description='The CIDR block to which the IP address belongs.', example='192.168.0.0/24', position='Query'),
  natIpIds?: [ string ](name='NatIpIds', description='The ID of the IP address. Valid values of **N**: **1** to **20**.', example='vpcnatip-gw8a863sut1zijxh0****', position='Query'),
  natIpName?: [ string ](name='NatIpName', description='The name of the IP address. Valid values of **N**: **1** to **20**.', example='test', position='Query'),
  natIpStatus?: string(name='NatIpStatus', description='The status of the IP address. Valid values:

*   **Available**
*   **Deleting**
*   **Creating**', example='Available', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If this is your first query or no next query is to be sent, ignore this parameter.
*   If a next query is to be sent, set the value to the value of NextToken that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****f84eb48b699f0a4883', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the NAT gateway is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='eu-central-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListNatIpsResponseBody = {
  natIps?: [ 
    {
      isDefault?: boolean(name='IsDefault', description='Indicates whether the IP address is the default IP address of the NAT gateway. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      natGatewayId?: string(name='NatGatewayId', description='The ID of the Virtual Private Cloud (VPC) NAT gateway to which the IP address is assigned.', example='ngw-gw8v16wgvtq26vh59****'),
      natIp?: string(name='NatIp', description='The IP address.', example='192.168.0.126'),
      natIpCidr?: string(name='NatIpCidr', description='The CIDR block to which the IP address belongs.', example='192.168.0.0/24'),
      natIpDescription?: string(name='NatIpDescription', description='The description of the IP address.', example='default'),
      natIpId?: string(name='NatIpId', description='The ID of the IP address.', example='vpcnatip-gw8a863sut1zijxh0****'),
      natIpName?: string(name='NatIpName', description='The name of the IP address.', example='default'),
      natIpStatus?: string(name='NatIpStatus', description='The status of the IP address. Valid values:

*   **Available**: available
*   **Deleted**: deleted
*   **Deleting**: deleting
*   **Creating**: creating
*   **Associated**: specified in an SNAT or DNAT entry
*   **Associating**: being specified in an SNAT or DNAT entry', example='Available'),
    }
  ](name='NatIps', description='The list of IP addresses of the NAT gateway.'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If the value of **NextToken** is not returned, it indicates that no next query is to be sent.
*   If the value of **NextToken** is returned, the value indicates the token that is used for the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7E78CEEA-BF8F-44D1-9DCD-D9141135B71E'),
  totalCount?: string(name='TotalCount', description='The number of IP addresses that are returned.', example='1'),
}

model ListNatIpsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNatIpsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNatIps  ListNatIpsRequest
  * @return ListNatIpsResponse
 */
async function listNatIps(request: ListNatIpsRequest): ListNatIpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNatIps', 'POST', '/', 'json', false, 'json', request);
}

model ListPrefixListsRequest {
  maxResults?: long(name='MaxResults', description='The number of entries per page. Valid values: **1** to **100**. Default value: **20**.', example='20', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of NextToken.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prefixListIds?: [ string ](name='PrefixListIds', description='The IDs of prefix lists to be queried. Valid values of **N** are **1** to **100**, which specifies that you can query up to 100 prefix lists at a time.', example='pl-m5estsqsdqwg88hjf****', position='Query'),
  prefixListName?: string(name='PrefixListName', description='The name of the prefix list to query.

The name must be 1 to 128 characters in length and cannot start with `http://` or `https://`.', example='name', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where you want to query prefix lists.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the prefix list belongs.', example='rg-bp67acfmxazb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key. You can specify up to 20 tag keys. The tag key cannot be an empty string.

The key cannot exceed 64 characters in length, and can contain digits, periods (.), underscores (_), and hyphens (-). The key must start with a letter but cannot start with `aliyun` or `acs:`. The key cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value. You can specify up to 20 tag values. The tag value can be an empty string.

The tag value cannot exceed 128 characters in length, and can contain digits, periods (.), underscores (_), and hyphens (-). The key must start with a letter but cannot start with `aliyun` or `acs:`. The key cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tags', description='The tags.', position='Query'),
}

model ListPrefixListsResponseBody = {
  maxResults?: long(name='MaxResults', description='The number of entries per page. Valid values: **1** to **100**. Default value: **20**.', example='20'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value is returned for **NextToken**, the value indicates the token that is used for the next request to retrieve a new page of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  prefixLists?: [ 
    {
      cidrBlocks?: [ string ](name='CidrBlocks', description='The CIDR block specified in the prefix list.'),
      creationTime?: string(name='CreationTime', description='The time when the prefix list was created.', example='2022-07-12T14:22:32Z'),
      ipVersion?: string(name='IpVersion', description='The IP version of the prefix list. Valid values:

*   **IPV4**
*   **IPV6**', example='IPV4'),
      maxEntries?: int32(name='MaxEntries', description='The maximum number of CIDR blocks that you can specify in the prefix list.', example='10'),
      ownerId?: string(name='OwnerId', description='The Alibaba Cloud account to which the prefix list belongs.', example='1210123456123456'),
      prefixListDescription?: string(name='PrefixListDescription', description='The description of the prefix list.', example='Created with oss service by system.'),
      prefixListId?: string(name='PrefixListId', description='The ID of the prefix list.', example='pl-m5estsqsdqwg88hjf****'),
      prefixListName?: string(name='PrefixListName', description='The name of the prefix list.', example='test'),
      prefixListStatus?: string(name='PrefixListStatus', description='The status of the prefix list. Valid values:

*   **Created**
*   **Deleted**
*   **Modifying**

>  This parameter is the same as the **Status** parameter.', example='Created'),
      prefixListType?: string(name='PrefixListType', description='The type of the prefix list.', example='Custom'),
      regionId?: string(name='RegionId', description='The region ID of the prefix list.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the prefix list belongs.', example='rg-bp67acfmxazb4ph****'),
      shareType?: string(name='ShareType', description='Indicates whether the prefix list is shared. Valid values:

*   **Shared**: The prefix list is shared.
*   If an empty value is returned, the prefix list is not shared.', example='Shared'),
      status?: string(name='Status', description='The status of the prefix list. Valid values:

*   **Created**
*   **Deleted**
*   **Modifying**', example='Created'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='FinanceDept'),
          value?: string(name='Value', description='The tag value.', example='FinanceJoshua'),
        }
      ](name='Tags', description='The tags.'),
    }
  ](name='PrefixLists', description='The information about the prefix lists.'),
  requestId?: string(name='RequestId', description='The request ID.', example='DF72F7BB-5DFA-529C-887E-B0BB70D89C4F'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListPrefixListsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrefixListsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPrefixLists  ListPrefixListsRequest
  * @return ListPrefixListsResponse
 */
async function listPrefixLists(request: ListPrefixListsRequest): ListPrefixListsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrefixLists', 'POST', '/', 'json', false, 'json', request);
}

model ListPublicIpAddressPoolCidrBlocksRequest {
  cidrBlock?: string(name='CidrBlock', description='The CIDR blocks.', example='47.0.XX.XX/24', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: performs a dry run. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return. Valid values: **10** to **100**. Default value: **10**.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If this is your first query and no next queries are to be sent, ignore this parameter.
*   If a subsequent query is to be sent, set the parameter to the value of NextToken that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  publicIpAddressPoolId: string(name='PublicIpAddressPoolId', description='The ID of the IP address pool.

This parameter is required.', example='pippool-6wetvn6fumkgycssx****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the CIDR blocks.

This parameter is required.', example='cn-chengdu', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListPublicIpAddressPoolCidrBlocksResponseBody = {
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If **NextToken** was not returned, it indicates that no additional results exist.
*   If **NextToken** is returned, the value is the token that is used for the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  publicIpPoolCidrBlockList?: [ 
    {
      cidrBlock?: string(name='CidrBlock', description='The ID of the IP address pool.', example='47.0.XX.XX/24'),
      creationTime?: string(name='CreationTime', description='The CIDR blocks.', example='2022-05-10T01:37:38Z'),
      publicIpAddressPoolId?: string(name='PublicIpAddressPoolId', description='The information about the CIDR blocks.', example='pippool-6wetvn6fumkgycssx****'),
      status?: string(name='Status', description='The time when the CIDR block was created. The time is displayed in `YYYY-MM-DDThh:mm:ssZ` format.', example='Created'),
      totalIpNum?: int32(name='TotalIpNum', description='The total number of available IP addresses in the CIDR block.', example='20'),
      usedIpNum?: int32(name='UsedIpNum', description='The status of the CIDR block in the IP address pool. Valid values:

*   **Created**: available
*   **Deleting**: being deleted
*   **Modifying**: being modified', example='20'),
    }
  ](name='PublicIpPoolCidrBlockList', description='The total number of entries returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  totalCount?: int32(name='TotalCount', description='The maximum number of entries returned. Valid values: **10** to **100**. Default value: **10**.', example='10'),
}

model ListPublicIpAddressPoolCidrBlocksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPublicIpAddressPoolCidrBlocksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPublicIpAddressPoolCidrBlocks  ListPublicIpAddressPoolCidrBlocksRequest
  * @return ListPublicIpAddressPoolCidrBlocksResponse
 */
async function listPublicIpAddressPoolCidrBlocks(request: ListPublicIpAddressPoolCidrBlocksRequest): ListPublicIpAddressPoolCidrBlocksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPublicIpAddressPoolCidrBlocks', 'POST', '/', 'json', false, 'json', request);
}

model ListPublicIpAddressPoolsRequest {
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**(default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  isp?: string(name='Isp', description='The line type. Valid values:

*   **BGP** (default): BGP (Multi-ISP) line
*   **BGP_PRO**: BGP (Multi-ISP) Pro line

For more information about the BGP (Multi-ISP) line and BGP (Multi-ISP) Pro line, see the "Line types" section of [What is EIP?](https://help.aliyun.com/document_detail/32321.html)

If you are allowed to use single-ISP bandwidth, you can also choose one of the following values:

*   **ChinaTelecom**
*   **ChinaUnicom**
*   **ChinaMobile**
*   **ChinaTelecom_L2**
*   **ChinaUnicom_L2**
*   **ChinaMobile_L2**

If your services are deployed in China East 1 Finance, this parameter is required and you must set the parameter to **BGP_FinanceCloud**.', example='BGP', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return. Valid values: **10** to **100**. Default value: **10**.', example='10', position='Query'),
  name?: string(name='Name', description='The name of the IP address pool.

If you enter a name, the name must be 1 to 128 characters in length and can contain digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter but cannot start with `http://` or `https://`.', example='AddressPoolName', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of NextToken.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  publicIpAddressPoolIds?: [ string ](name='PublicIpAddressPoolIds', description='The IDs of the IP address pool.

You can enter up to 100 IDs.', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the IP address pool that you want to query resides.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the region ID.

This parameter is required.', example='cn-chengdu', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the IP address pool belongs.', example='rg-acfmxazb4pcdvf****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityProtectionEnabled?: boolean(name='SecurityProtectionEnabled', description='Specifies whether to enable Anti-DDoS Pro/Premium. Valid values:

*   **false**
*   **true**', example='true', position='Query'),
  status?: string(name='Status', description='The status of the IP address pool. Valid values:

*   **Created**
*   **Deleting**
*   **Modifying**', example='Created', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key to add to the resource. You can specify up to 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value to add to the resource. You can specify up to 20 tag values. The tag value can be an empty string.

The tag key can be up to 128 characters in length. It cannot start with `aliyun` or `acs:` and cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tags', description='The tags to add to the resource.', position='Query'),
}

model ListPublicIpAddressPoolsResponseBody = {
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.

*   If **NextToken** is empty, no next page exists.
*   If a value is returned for **NextToken**, the value is used to retrieve a new page of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  publicIpAddressPoolList?: [ 
    {
      bizType?: string(name='BizType', description='The service type of the IP address pool.

*   **CloudBox** Only cloud box users can select this type.
*   **Default** (default)', example='CloudBox'),
      businessStatus?: string(name='BusinessStatus', description='The status of the IP address pool.

*   **Normal**
*   **FinancialLocked**', example='Normal'),
      creationTime?: string(name='CreationTime', description='The time when the IP address pool was created. The time is displayed in the `YYYY-MM-DDThh:mm:ssZ` format.', example='2022-05-10T01:37:38Z'),
      description?: string(name='Description', description='The description of the IP address pool.', example='AddressPoolDescription'),
      ipAddressRemaining?: boolean(name='IpAddressRemaining', description='Indicates whether idle IP addresses exist.

*   **true**
*   **false**', example='true'),
      isp?: string(name='Isp', description='The line type.

*   **BGP**: BGP (Multi-ISP)
*   **BGP_PRO**: BGP (Multi-ISP) Pro

For more information about BGP (Multi-ISP) and BGP (Multi-ISP) Pro, see [EIP line types](https://help.aliyun.com/document_detail/32321.html).

If you are allowed to use single-ISP bandwidth, one of the following values may be returned:

*   **ChinaTelecom**
*   **ChinaUnicom**
*   **ChinaMobile**
*   **ChinaTelecom_L2**
*   **ChinaUnicom_L2**
*   **ChinaMobile_L2**

If your services are deployed in China East 1 Finance, **BGP_FinanceCloud** is returned.', example='BGP'),
      name?: string(name='Name', description='The name of the IP address pool.', example='AddressPoolName'),
      ownerId?: long(name='OwnerId', description='The Alibaba Cloud account to which the IP address pool belongs.', example='121012345612****'),
      publicIpAddressPoolId?: string(name='PublicIpAddressPoolId', description='The ID of the IP address pool.', example='pippool-6wetvn6fumkgycssx****'),
      regionId?: string(name='RegionId', description='The region ID of the IP address pool.', example='cn-chengdu'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the IP address pool belongs.', example='rg-acfmxazb4pcdvf****'),
      securityProtectionTypes?: [ string ](name='SecurityProtectionTypes', description='The edition of Anti-DDoS.

*   If you do not set this parameter, Anti-DDoS Origin Basic is used.
*   If the value is set to **AntiDDoS_Enhanced**, Anti-DDoS Pro/Premium is used.'),
      shareType?: string(name='ShareType', description='The sharing type of the IP address pool.

*   If **Shared** is returned, the IP address pool is shared.
*   If an empty value is returned, the IP address pool is not shared.', example='Shared'),
      status?: string(name='Status', description='The status of the IP address pool.

*   **Created**
*   **Deleting**
*   **Modifying**', example='Created'),
      tags?: [ 
        {
          key?: string(name='Key', description='The key of tag N.', example='FinanceDept'),
          value?: string(name='Value', description='The value of tag N.', example='FinanceDept'),
        }
      ](name='Tags', description='The tag list.'),
      totalIpNum?: int32(name='TotalIpNum', description='The total number of available IP addresses in the public IP address pool.', example='100'),
      usedIpNum?: int32(name='UsedIpNum', description='The number of used IP addresses in the public IP address pool.', example='20'),
      userType?: string(name='UserType', description='The user type. Valid values:

*   **admin**: An administrator can delete, modify, and query IP address pools, and can assign elastic IP addresses (EIPs) to the pool.
*   **user**: A user can only assign EIPs to the IP address pool and query the IP address pool, but cannot modify or delete the IP address pool.', example='admin'),
      zones?: [ string ](name='Zones', description='The zone of the IP address pool. This parameter is returned only when the service type of the IP address pool is CloudBox.'),
    }
  ](name='PublicIpAddressPoolList', description='The IP address pools.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListPublicIpAddressPoolsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPublicIpAddressPoolsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPublicIpAddressPools  ListPublicIpAddressPoolsRequest
  * @return ListPublicIpAddressPoolsResponse
 */
async function listPublicIpAddressPools(request: ListPublicIpAddressPoolsRequest): ListPublicIpAddressPoolsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPublicIpAddressPools', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values:**1** to **50**. Default value: **50**.', example='50', maximum=50, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of **NextToken**.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the resource.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The resource ID. You can specify up to 20 resource IDs.', example='vpc-bp16qjewdsunr41m1****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The resource type. Valid values:

*   **VPC**
*   **VSWITCH**
*   **ROUTETABLE**
*   **EIP**
*   **VpnGateway**
*   **NATGATEWAY**
*   **COMMONBANDWIDTHPACKAGE**: EIP bandwidth plan

This parameter is required.', example='VPC', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag that is added to the resource. You can specify up to 20 tag keys. The tag key cannot be an empty string.

The key can be up to 64 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The key must start with a letter but cannot start with `aliyun` or `acs:`. The key cannot contain `http://` or `https://`.

>  Specify at least one of the **ResourceId.N** and **Tag.N** parameters (**Tag.N.Key** and **Tag.N.Value**).', example='FinanceDept'),
      value?: string(name='Value', description='The value of the tag that is added to the resource. You can specify up to 20 tag values. The tag value can be an empty string.

The value can be up to 128 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The value must start with a letter but cannot start with `aliyun` or `acs:`. The value cannot contain `http://` or `https://`.

>  Specify at least one of the **ResourceId.N** and **Tag.N** parameters (**Tag.N.Key** and **Tag.N.Value**).', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tag value. You can specify up to 20 tag values. It can be an empty string.

The value can be up to 128 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The value must start with a letter but cannot start with `aliyun` or `acs:`. The value cannot contain `http://` or `https://`.

>  You must specify at least one of **ResourceId.N** and **Tag.N** (**Tag.N.Key** and **Tag.N.Value**).', example='ListTagResources', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. Valid values:

*   If no value is returned for **NextToken**, no next queries are sent.
*   If a value is returned for **NextToken**, the value is used to retrieve a new page of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='DE65F6B7-7566-4802-9007-96F2494AC512'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='vpc-bp16qjewdsunr41m1****'),
      resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   **VPC**: virtual private cloud (VPC)
*   **VSWITCH**: vSwitch
*   **ROUTETABLE**: route table
*   **EIP**: EIP
*   **VpnGateWay**: VPN gateway
*   **NATGATEWAY**: NAT gateway
*   **COMMONBANDWIDTHPACKAGE**: EIP bandwidth plan', example='VPC'),
      tagKey?: string(name='TagKey', description='The tag key.', example='FinanceDept'),
      tagValue?: string(name='TagValue', description='The tag value.', example='FinanceJoshua'),
    }
  ](name='TagResource')
  }(name='TagResources', description='The tag key.'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
  * @description ## Usage notes
  * *   You must specify **ResourceId.N** or **Tag.N** that consists of **Tag.N.Key** and **Tag.N.Value** in the request to specify the object that you want to query.
  * *   **Tag.N** is a resource tag that consists of a key-value pair. If you specify only **Tag.N.Key**, all tag values that are associated with the specified key are returned. If you specify only **Tag.N.Value**, an error message is returned.
  * *   If you specify **Tag.N** and **ResourceId.N** to filter tags, **ResourceId.N** must match all specified key-value pairs.
  * *   If you specify multiple key-value pairs, resources that contain these key-value pairs are returned.
  * @param request  the request parameters of ListTagResources  ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesForExpressConnectRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: **1** to **100**. Default value: **20**.', example='20', maximum=50, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of **NextToken**.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the resource resides.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to obtain the region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The resource IDs.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource. Valid values:

*   **PHYSICALCONNECTION**: Express Connect circuit.
*   **VIRTUALBORDERROUTER**: virtual border router (VBR).
*   **ROUTERINTERFACE**: router interface.

This parameter is required.', example='PHYSICALCONNECTION', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag to add to the resource. You can specify up to 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `aliyun` or `acs:`.', example='FinanceDept'),
      value?: string(name='Value', description='The value of the tag to add to the resource. You can specify up to 20 tag values The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model ListTagResourcesForExpressConnectResponseBody = {
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.

*   If **NextToken** is empty, no next page exists.
*   If a value is returned for **NextToken**, the value can be used in the next request to retrieve a new page of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The resource ID.', example='pc-bp16qjewdsunr41m1****'),
      resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   **PHYSICALCONNECTION**: Express Connect circuit.
*   **VIRTUALBORDERROUTER**: VBR.
*   **ROUTERINTERFACE**: router interface.', example='PHYSICALCONNECTION'),
      tagKey?: string(name='TagKey', description='The key of the tag that is added to the resource.', example='FinanceDept'),
      tagValue?: string(name='TagValue', description='The value of the tag that is added to the resource.', example='FinanceJoshua'),
    }
  ](name='TagResource')
  }(name='TagResources', description='The tags that are added to the resource.'),
}

model ListTagResourcesForExpressConnectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesForExpressConnectResponseBody(name='body'),
}

/**
  * @description ## [](#)
  * *   If you want to query a specific object, you must specify **ResourceId.N** or **Tag.N** that consists of **Tag.N.Key** and **Tag.N.Value** in the request.
  * *   **Tag.N** is a resource tag that consists of a key-value pair. If you specify only **Tag.N.Key**, all tag values that are associated with the specified key are returned. If you specify only **Tag.N.Value**, an error message is returned.
  * *   If you specify **Tag.N** and **ResourceId.N** to filter tags, **ResourceId.N** must match all specified key-value pairs.
  * *   If you specify multiple key-value pairs, resources that contain these key-value pairs are returned.
  * @param request  the request parameters of ListTagResourcesForExpressConnect  ListTagResourcesForExpressConnectRequest
  * @return ListTagResourcesForExpressConnectResponse
 */
async function listTagResourcesForExpressConnect(request: ListTagResourcesForExpressConnectRequest): ListTagResourcesForExpressConnectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResourcesForExpressConnect', 'POST', '/', 'json', false, 'json', request);
}

model ListTrafficMirrorFiltersRequest {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return.

Valid values: **1** to **100**. Default value: **10**.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of NextToken.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the mirrored traffic belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list. For more information about regions that support traffic mirroring, see [Overview of traffic mirroring](https://help.aliyun.com/document_detail/207513.html).

This parameter is required.', example='cn-hongkong', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the mirrored traffic belongs.', example='rg-bp67acfmxazb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key. You can specify at most 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length. It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tags', description='The tag list.', position='Query'),
  trafficMirrorFilterIds?: [ string ](name='TrafficMirrorFilterIds', description='The ID of the traffic mirror filter. The maximum value of **N** is **100**, which specifies that you can query up to 100 filters at a time.', example='tmf-j6cmls82xnc86vtpe****', maxLength=128, position='Query'),
  trafficMirrorFilterName?: string(name='TrafficMirrorFilterName', description='The name of the filter.', example='abc', position='Query'),
}

model ListTrafficMirrorFiltersResponseBody = {
  count?: int32(name='Count', description='The number of entries returned.', example='5'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned.', example='20'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value is returned for **NextToken**, the value is the token that is used for the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='739CA01C-92EB-4C69-BCC0-280149C6F41E'),
  totalCount?: string(name='TotalCount', description='The number of entries returned.', example='1'),
  trafficMirrorFilters?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the filter is created.', example='2023-09-05T15:26Z'),
      egressRules?: [ 
        {
          action?: string(name='Action', description='The action of the outbound rule. Valid values:

*   **accept**
*   **drop**', example='accept'),
          destinationCidrBlock?: string(name='DestinationCidrBlock', description='The destination CIDR block of the outbound traffic.', example='10.0.0.0/24'),
          destinationPortRange?: string(name='DestinationPortRange', description='The destination port range of the outbound traffic.', example='22/40'),
          priority?: int32(name='Priority', description='The priority of the outbound rule. A smaller value indicates a higher priority.', example='1'),
          protocol?: string(name='Protocol', description='The protocol that is used by the outbound traffic to be mirrored. Valid values:

*   **ALL**
*   **ICMP**
*   **TCP**
*   **UDP**', example='TCP'),
          sourceCidrBlock?: string(name='SourceCidrBlock', description='The source CIDR block of the outbound traffic.', example='10.0.0.0/24'),
          sourcePortRange?: string(name='SourcePortRange', description='The source port range of the outbound traffic.', example='22/40'),
          trafficDirection?: string(name='TrafficDirection', description='The direction of the network traffic. Valid values:

*   **egress**
*   **ingress**', example='egress'),
          trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', description='The ID of the filter associated with the outbound rule.', example='tmf-j6cmls82xnc86vtpe****'),
          trafficMirrorFilterRuleId?: string(name='TrafficMirrorFilterRuleId', description='The ID of the outbound rule.', example='tmr-j6c89rzmtd3hhdugq****'),
          trafficMirrorFilterRuleStatus?: string(name='TrafficMirrorFilterRuleStatus', description='The status of the outbound rule. Valid values:

*   **Creating**
*   **Created**
*   **Modifying**
*   **Deleting**', example='Created'),
        }
      ](name='EgressRules', description='The information about the outbound rules.'),
      ingressRules?: [ 
        {
          action?: string(name='Action', description='The action of the inbound rule. Valid values:

*   **accept**
*   **drop**', example='accept'),
          destinationCidrBlock?: string(name='DestinationCidrBlock', description='The destination CIDR block of the inbound traffic.', example='0.0.0.0/0'),
          destinationPortRange?: string(name='DestinationPortRange', description='The destination port range of the inbound traffic.', example='-1/-1'),
          priority?: int32(name='Priority', description='The priority of the inbound rule. A smaller value indicates a higher priority.', example='1'),
          protocol?: string(name='Protocol', description='The protocol that is used by the inbound traffic to be mirrored. Valid values:

*   **ALL**
*   **ICMP**
*   **TCP**
*   **UDP**', example='ALL'),
          sourceCidrBlock?: string(name='SourceCidrBlock', description='The source CIDR block of the inbound traffic.', example='0.0.0.0/0'),
          sourcePortRange?: string(name='SourcePortRange', description='The destination port range of the inbound traffic.', example='-1/-1'),
          trafficDirection?: string(name='TrafficDirection', description='The direction of the network traffic. Valid values:

*   **egress**
*   **ingress**', example='ingress'),
          trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', description='The ID of the filter associated with the inbound rule.', example='tmf-j6cmls82xnc86vtpe****'),
          trafficMirrorFilterRuleId?: string(name='TrafficMirrorFilterRuleId', description='The ID of the inbound rule.', example='tmr-j6cezu8e68rnpepet****'),
          trafficMirrorFilterRuleStatus?: string(name='TrafficMirrorFilterRuleStatus', description='The status of the inbound rule. Valid values:

*   **Creating**
*   **Created**
*   **Modifying**
*   **Deleting**', example='Created'),
        }
      ](name='IngressRules', description='The information about the inbound rules.'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the traffic mirror session belongs.', example='rg-bp67acfmxazb4ph****'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='FinanceDept'),
          value?: string(name='Value', description='The tag value.', example='FinanceJoshua'),
        }
      ](name='Tags', description='The tag list.'),
      trafficMirrorFilterDescription?: string(name='TrafficMirrorFilterDescription', description='The description of the filter.', example='This is a filter.'),
      trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', description='The ID of the filter.', example='tmf-j6cmls82xnc86vtpe****'),
      trafficMirrorFilterName?: string(name='TrafficMirrorFilterName', description='The filter name.', example='abc'),
      trafficMirrorFilterStatus?: string(name='TrafficMirrorFilterStatus', description='The status of the filter. Valid values:

*   **Creating**
*   **Created**
*   **Modifying**
*   **Deleting**', example='Created'),
    }
  ](name='TrafficMirrorFilters', description='The information about the filters.'),
}

model ListTrafficMirrorFiltersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTrafficMirrorFiltersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTrafficMirrorFilters  ListTrafficMirrorFiltersRequest
  * @return ListTrafficMirrorFiltersResponse
 */
async function listTrafficMirrorFilters(request: ListTrafficMirrorFiltersRequest): ListTrafficMirrorFiltersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTrafficMirrorFilters', 'POST', '/', 'json', false, 'json', request);
}

model ListTrafficMirrorSessionsRequest {
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the traffic mirror session. Valid values:

*   **false**: does not enable the traffic mirror session.
*   **true**: enables the traffic mirror session.', example='false', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return. Valid values: **1** to **100**. Default value: **10**.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If this is your first query and no next queries are to be sent, ignore this parameter.
*   If a next query is to be sent, set the value to the value of NextToken that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  priority?: int32(name='Priority', description='The priority of the traffic mirror session. Valid values: **1** to **32766**.

A smaller value indicates a higher priority. You cannot specify identical priorities for traffic mirror sessions that are created in the same region by using the same account.', example='1', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the traffic mirror session belongs. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list. For more information about regions that support traffic mirroring, see [Overview of traffic mirroring](https://help.aliyun.com/document_detail/207513.html).

This parameter is required.', example='cn-hongkong', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the mirrored traffic belongs.', example='rg-bp67acfmxazb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key. You can specify at most 20 tag keys. The tag key cannot be an empty string.

The key cannot exceed 64 characters in length, and can contain digits, periods (.), underscores (_), and hyphens (-). The key must start with a letter but cannot start with `aliyun` or `acs:`. The key cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value cannot exceed 128 characters in length, and can contain digits, periods (.), underscores (_), and hyphens (-). It must start with a letter but cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tags', description='The tags of the resource.', position='Query'),
  trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', description='The ID of the traffic mirror filter.', example='tmf-j6cmls82xnc86vtpe****', position='Query'),
  trafficMirrorSessionIds?: [ string ](name='TrafficMirrorSessionIds', description='The IDs of the traffic mirror session. The maximum value of N is 100, which indicates that you can query up to 100 traffic mirror sessions at a time.', example='tms-j6cla50buc44ap8tu****', maxLength=128, position='Query'),
  trafficMirrorSessionName?: string(name='TrafficMirrorSessionName', description='The name of the traffic mirror session.

The name must be 1 to 128 characters in length, and cannot start with `http://` or `https://`.', example='abc', position='Query'),
  trafficMirrorSourceId?: string(name='TrafficMirrorSourceId', description='The ID of the traffic mirror source. You can specify only an elastic network interface (ENI) as the mirror source.', example='eni-j6c8znm5l1yt4sox*****', position='Query'),
  trafficMirrorTargetId?: string(name='TrafficMirrorTargetId', description='The ID of the traffic mirror destination. You can specify only an ENI or a Server Load Balancer (SLB) instance as a traffic mirror destination.', example='eni-j6c2fp57q8rr47rp****', position='Query'),
  virtualNetworkId?: int32(name='VirtualNetworkId', description='The VXLAN network identifier (VNI) that is used to distinguish different mirrored traffic. Valid values: **0** to **16777215**. You can use VNIs to identify mirrored traffic from different sessions at the traffic mirror destination. You can specify a custom VNI or use a random VNI that is allocated by the system. If you want the system to randomly allocate a VNI, ignore this parameter.', example='10', position='Query'),
}

model ListTrafficMirrorSessionsResponseBody = {
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If no value is returned for **NextToken**, no next queries are sent.
*   If a value of **NextToken** is returned, the value is the token that is used for the subsequent query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='739CA01C-92EB-4C69-BCC0-280149C6F41E'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='1'),
  trafficMirrorSessions?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the session is created.', example='2023-09-05T15:26Z'),
      enabled?: boolean(name='Enabled', description='Indicates whether the traffic mirror session was enabled.

*   **false** 
*   **true**', example='false'),
      packetLength?: int32(name='PacketLength', description='The maximum transmission unit.', example='1500'),
      priority?: int32(name='Priority', description='The priority of the traffic mirror session.

A smaller value indicates a higher priority.', example='1'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the traffic mirror session belongs.', example='rg-bp67acfmxazb4ph****'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='FinanceDept'),
          value?: string(name='Value', description='The tag value.', example='FinanceJoshua'),
        }
      ](name='Tags', description='The tag list.'),
      trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', description='The ID of the filter.', example='tmf-j6cmls82xnc86vtpe****'),
      trafficMirrorSessionBusinessStatus?: string(name='TrafficMirrorSessionBusinessStatus', description='The status of the traffic mirror session.

*   **Normal**
*   **FinancialLocked**', example='Normal'),
      trafficMirrorSessionDescription?: string(name='TrafficMirrorSessionDescription', description='The description of the traffic mirror session.', example='This is a session.'),
      trafficMirrorSessionId?: string(name='TrafficMirrorSessionId', description='The ID of the traffic mirror session.', example='tms-j6cla50buc44ap8tu****'),
      trafficMirrorSessionName?: string(name='TrafficMirrorSessionName', description='The name of the traffic mirror session.', example='abc'),
      trafficMirrorSessionStatus?: string(name='TrafficMirrorSessionStatus', description='The status of the traffic mirror session. Valid values:

*   **Creating**
*   **Created**
*   **Modifying**
*   **Deleting**', example='Created'),
      trafficMirrorSourceIds?: [ string ](name='TrafficMirrorSourceIds', description='The ID of the traffic mirror source.'),
      trafficMirrorTargetId?: string(name='TrafficMirrorTargetId', description='The ID of the traffic mirror destination.', example='eni-j6c2fp57q8rr47rp****'),
      trafficMirrorTargetType?: string(name='TrafficMirrorTargetType', description='The type of the traffic mirror destination. Valid values:

*   **NetworkInterface**: an elastic network interface (ENI)
*   **SLB**: an internal-facing Server Load Balancer (SLB) instance', example='NetworkInterface'),
      virtualNetworkId?: int32(name='VirtualNetworkId', description='You can specify VNIs to distinguish different mirrored traffic.', example='10'),
    }
  ](name='TrafficMirrorSessions', description='The details about the traffic mirror session.'),
}

model ListTrafficMirrorSessionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTrafficMirrorSessionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTrafficMirrorSessions  ListTrafficMirrorSessionsRequest
  * @return ListTrafficMirrorSessionsResponse
 */
async function listTrafficMirrorSessions(request: ListTrafficMirrorSessionsRequest): ListTrafficMirrorSessionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTrafficMirrorSessions', 'POST', '/', 'json', false, 'json', request);
}

model ListVSwitchCidrReservationsRequest {
  ipVersion?: string(name='IpVersion', description='The IP version of the reserved CIDR block. Valid values:

*   **IPv4** (default)
*   **IPv6**', example='IPv4', position='Query'),
  maxResults?: long(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **100**. Default value: **10**.', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of NextToken.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the vSwitch.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key. You can specify at most 20 tag keys. The tag key cannot be an empty string.

A tag key can be up to 128 characters in length. It cannot start with aliyun or acs:, and cannot contain http:// or https://.', example='FinanceDept'),
      value?: string(name='Value', description='The tag value. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length, and cannot start with acs: or aliyun. It cannot contain http:// or https://.', example='FinanceJoshua'),
    }
  ](name='Tags', description='The tags.', position='Query'),
  vSwitchCidrReservationIds?: [ string ](name='VSwitchCidrReservationIds', description='The ID of the reserved CIDR block. You can specify at most 10 IDs.', position='Query'),
  vSwitchCidrReservationType?: string(name='VSwitchCidrReservationType', description='The type of the reserved CIDR block. Set the value to **prefix**.

>  When you allocate CIDR blocks, or enable the service to automatically allocate CIDR blocks to elastic network interfaces (ENIs), the CIDR blocks to allocate must fall into the reserved CIDR block. If the reserved CIDR is exhausted, an error message is returned.', example='prefix', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch for which you want to query reserved CIDR blocks.', example='vsw-25navfgbue4g****', position='Query'),
}

model ListVSwitchCidrReservationsResponseBody = {
  maxResults?: long(name='MaxResults', description='The number of entries to return per page.', example='10'),
  nextToken?: string(name='NextToken', description='The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If a value is returned for **NextToken**, the value is the token that determines the start point of the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='10'),
  vSwitchCidrReservations?: [ 
    {
      assignedCidrCount?: int32(name='AssignedCidrCount', description='The number of used prefixes in the reserved CIDR block.', example='6'),
      availableCidrCount?: int32(name='AvailableCidrCount', description='The number of available prefixes in the reserved CIDR block.', example='10'),
      creationTime?: string(name='CreationTime', description='The time when the reserved CIDR block was created.', example='2023-03-14T10:02:37Z'),
      ipVersion?: string(name='IpVersion', description='The IP version of the reserved CIDR block. Valid values:

*   **IPv4** (default)
*   **IPv6**', example='IPv4'),
      status?: string(name='Status', description='The status of the reserved CIDR block. Valid values:

*   **Assigning**
*   **Assigned**
*   **Releasing**
*   **Released**', example='Assigned'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='FinanceDept'),
          value?: string(name='Value', description='The tag value.', example='FinanceJoshua'),
        }
      ](name='Tags', description='The tags.'),
      type?: string(name='Type', description='The type of the reserved CIDR block. Valid value: **prefix**. CIDR blocks are allocated from the reserved CIDR block.', example='prefix'),
      vSwitchCidrReservationCidr?: string(name='VSwitchCidrReservationCidr', description='The reserved CIDR block.', example='192.168.1.64/28'),
      vSwitchCidrReservationDescription?: string(name='VSwitchCidrReservationDescription', description='The description of the reserved CIDR block.', example='ReservationDescription'),
      vSwitchCidrReservationId?: string(name='VSwitchCidrReservationId', description='The ID of the reserved CIDR block.', example='vcr-bp1m12saqteraw3rp****'),
      vSwitchCidrReservationName?: string(name='VSwitchCidrReservationName', description='The name of the reserved CIDR block.', example='ReservationName'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which the reserved CIDR block belongs.', example='vsw-25navfgbue4g****'),
      vpcId?: string(name='VpcId', description='The virtual private cloud (VPC) to which the reserved CIDR block belongs.', example='vpc-bp1wdz2pdhgurz1od****'),
    }
  ](name='VSwitchCidrReservations', description='A list of reserved CIDR blocks.'),
}

model ListVSwitchCidrReservationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVSwitchCidrReservationsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListVSwitchCidrReservations  ListVSwitchCidrReservationsRequest
  * @return ListVSwitchCidrReservationsResponse
 */
async function listVSwitchCidrReservations(request: ListVSwitchCidrReservationsRequest): ListVSwitchCidrReservationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVSwitchCidrReservations', 'POST', '/', 'json', false, 'json', request);
}

model ListVirtualPhysicalConnectionsRequest {
  isConfirmed?: boolean(name='IsConfirmed', description='Specifies whether the hosted connection is accepted by the tenant. Valid values:

*   **true**
*   **false**', example='true', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: **1** to **100**. Default value: **20**.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of NextToken.', example='dd20****', position='Query'),
  physicalConnectionId?: string(name='PhysicalConnectionId', description='The ID of the Express Connect circuit over which the hosted connections are created.

Express Connect circuits in this topic refer to Express Connect circuits over which hosted connections are created.', example='pc-bp1ciz7ekd2grn1as****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the hosted connection.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the hosted connection belongs.', example='rg-acfmxazb4p****', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the resource. You can specify at most 20 tag keys. The tag key cannot be an empty string.

It can be up to 64 characters in length and can contain digits, periods (.), underscores (_), and hyphens (-). It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N to add to the resource. You can specify at most 20 tag values. The tag value can be an empty string.

It can be up to 128 characters in length and can contain digits, periods (.), underscores (_), and hyphens (-). It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tags', description='The tag list.', position='Query'),
  virtualPhysicalConnectionAliUids?: [ string ](name='VirtualPhysicalConnectionAliUids', description='The information about the Alibaba Cloud account that owns the hosted connection.', example='189xxx', position='Query'),
  virtualPhysicalConnectionBusinessStatus?: string(name='VirtualPhysicalConnectionBusinessStatus', description='The business status of the hosted connection. Valid values:

*   **Normal**
*   **FinancialLocked**
*   **SecurityLocked**', example='Normal', position='Query'),
  virtualPhysicalConnectionIds?: [ string ](name='VirtualPhysicalConnectionIds', description='The information about the hosted connection.', example='pc-xxx', position='Query'),
  virtualPhysicalConnectionStatuses?: [ string ](name='VirtualPhysicalConnectionStatuses', description='The business status of the hosted connection.', example='pc-xxx', position='Query'),
  vlanIds?: [ string ](name='VlanIds', description='The VLAN ID of the hosted connection.', example='pc-xxx', position='Query'),
}

model ListVirtualPhysicalConnectionsResponseBody = {
  count?: int32(name='Count', description='The number of entries returned in this query.', example='1'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. Valid values:

*   If the value of **NextToken** is not returned, it indicates that no next query is to be sent.
*   If **NextToken** was returned in the previous query, specify the value to obtain the next set of results.', example='dd20****'),
  requestId?: string(name='RequestId', description='The request ID.', example='2A55F69E-EE3D-5CBE-8805-734F7D5B46B9'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  virtualPhysicalConnections?: [ 
    {
      accessPointId?: string(name='AccessPointId', description='The ID of the access point that is associated with the Express Connect circuit.', example='ap-cn-hangzhou-finance-yh-E'),
      adLocation?: string(name='AdLocation', description='The geographical location of the access device.', example='Yuhang Economic Development Zone XXX Intersection, Yuhang XX Machine Room, E*** Suite.'),
      aliUid?: string(name='AliUid', description='The Alibaba Cloud account ID of the hosted connection owner.', example='253460731706911258'),
      bandwidth?: long(name='Bandwidth', description='The bandwidth of the Express Connect circuit. Unit: Mbit/s.', example='50'),
      businessStatus?: string(name='BusinessStatus', description='The status of the Express Connect circuit. Valid values:

*   **Normal**
*   **FinancialLocked**
*   **SecurityLocked**', example='Normal'),
      chargeType?: string(name='ChargeType', description='The billing method of the Express Connect circuit.

If **Prepaid** is returned, it indicates that the Express Connect circuit is billed on a subscription basis.', example='Prepaid'),
      circuitCode?: string(name='CircuitCode', description='The circuit code of the Express Connect circuit. The circuit code is provided by the connectivity provider.', example='longtel001'),
      creationTime?: string(name='CreationTime', description='The time when the Express Connect circuit was created.', example='2021-06-08T12:20:55'),
      description?: string(name='Description', description='The description of the Express Connect circuit.', example='desctest'),
      enabledTime?: string(name='EnabledTime', description='The time when the Express Connect circuit is enabled.', example='2021-10-08T10:44Z'),
      endTime?: string(name='EndTime', description='The expiration date of the hosted connection.

The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2021-11-08T16:00:00Z'),
      expectSpec?: string(name='ExpectSpec', description='The estimated maximum bandwidth of the shared Express Connect circuit. The estimated bandwidth takes effect after you complete the payment.

**M** indicates Mbit/s and **G** indicates Gbit/s.', example='50M'),
      lineOperator?: string(name='LineOperator', description='The connectivity provider of the Express Connect circuit. Valid values:

*   **CT**: China Telecom.
*   **CU**: China Unicom.
*   **CM**: China Mobile.
*   **CO**: other connectivity providers in the Chinese mainland.
*   **Equinix**: Equinix.
*   **Other**: other connectivity providers outside the Chinese mainland.', example='CU'),
      loaStatus?: string(name='LoaStatus', description='The status of the letter of authorization (LOA). Valid values:

*   **Applying**
*   **Accept**
*   **Available**
*   **Rejected**
*   **Completing**
*   **Complete**
*   **Deleted**', example='Available'),
      name?: string(name='Name', description='The name of the Express Connect circuit.', example='nametest'),
      orderMode?: string(name='OrderMode', description='The payer for the shared Express Connect circuit. Valid values:

*   **PayByPhysicalConnectionOwner**: the owner of the shared Express Connect circuit
*   **PayByVirtualPhysicalConnectionOwner**: the owner of the hosted connection', example='PayByPhysicalConnectionOwner'),
      parentPhysicalConnectionAliUid?: string(name='ParentPhysicalConnectionAliUid', description='The ID of the Alibaba Cloud account to which the Express Connect circuit belongs.', example='283117732402483989'),
      parentPhysicalConnectionId?: string(name='ParentPhysicalConnectionId', description='The ID of the Express Connect circuit.', example='pc-bp1ciz7ekd2grn1as****'),
      peerLocation?: string(name='PeerLocation', description='The geographical location of the data center.', example='XX Number, XX Road, XX Town, XX District, Hangzhou City, Zhejiang Province.'),
      physicalConnectionId?: string(name='PhysicalConnectionId', description='The ID of the hosted connection.', example='pc-bp1mrgfbtmc9brre7****'),
      portNumber?: string(name='PortNumber', description='The ID of the port on the access device.', example='80'),
      portType?: string(name='PortType', description='The port type. Valid values:

*   **100Base-T**: 100 Mbit/s copper Ethernet port
*   **1000Base-T**: 1,000 Mbit/s copper Ethernet port
*   **1000Base-LX**: 1,000 Mbit/s single-mode optical port (10 km)
*   **10GBase-T**: 10,000 Mbit/s copper Ethernet port
*   **10GBase-LR**: 10,000 Mbit/s single-mode optical port (10 km)
*   **40GBase-LR**: 40,000 Mbit/s single-mode optical port
*   **100GBase-LR**: 100,000 Mbit/s single-mode optical port', example='10GBase-LR'),
      productType?: string(name='ProductType', description='The type of the Express Connect circuit. Valid values:

*   **VirtualPhysicalConnection**: shared Express Connect circuit
*   **PhysicalConnection**: dedicated Express Connect circuit', example='VirtualPhysicalConnection'),
      redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId', description='The ID of the redundant Express Connect circuit.', example='pc-119mfjzm****'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the hosted connection belongs.', example='rg-acfm3wmsyuimpma'),
      spec?: string(name='Spec', description='The bandwidth value of the hosted connection.

**M** indicates Mbit/s and **G** indicates Gbit/s.', example='50M'),
      status?: string(name='Status', description='The status of the Express Connect circuit. Valid values:

*   **Initial**: The application is under review.
*   **Approved**: The application is approved.
*   **Allocating**: The system is allocating resources.
*   **Allocated**: The Express Connect circuit is under construction.
*   **Confirmed**: The Express Connect circuit is pending for user confirmation.
*   **Enabled**: The Express Connect circuit is enabled.
*   **Rejected**: The application is rejected.
*   **Canceled**: The application is canceled.
*   **Allocation Failed**: The system failed to allocate resources.
*   **Terminated**: The Express Connect circuit is disabled.', example='Enabled'),
      tags?: [ 
        {
          key?: string(name='Key', description='The key of tag N that is added to the resource. You can specify at most 20 tag keys. The tag key cannot be an empty string.

It can be up to 64 characters in length and can contain digits, periods (.), underscores (_), and hyphens (-). It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceDept'),
          value?: string(name='Value', description='The value of tag N that is added to the resource. You can specify at most 20 tag values. The tag value can be an empty string.

It can be up to 128 characters in length and can contain digits, periods (.), underscores (_), and hyphens (-). It cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.', example='FinanceJoshua'),
        }
      ](name='Tags', description='The tag list.'),
      type?: string(name='Type', description='The type of Express Connect circuit. Default value: **VPC**.', example='VPC'),
      virtualPhysicalConnectionStatus?: string(name='VirtualPhysicalConnectionStatus', description='The status of the hosted connection. Valid values:

*   **Confirmed**
*   **UnConfirmed**
*   **Deleted**', example='Confirmed'),
      vlanId?: string(name='VlanId', description='The VLAN ID of the hosted connection.', example='10'),
    }
  ](name='VirtualPhysicalConnections', description='The list of hosted connections returned.'),
}

model ListVirtualPhysicalConnectionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVirtualPhysicalConnectionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListVirtualPhysicalConnections  ListVirtualPhysicalConnectionsRequest
  * @return ListVirtualPhysicalConnectionsResponse
 */
async function listVirtualPhysicalConnections(request: ListVirtualPhysicalConnectionsRequest): ListVirtualPhysicalConnectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVirtualPhysicalConnections', 'POST', '/', 'json', false, 'json', request);
}

model ListVpcEndpointServicesByEndUserRequest {
  maxResults?: long(name='MaxResults', description='The number of entries to return per page. Valid values: **1** to **100**. Default value: **20**.', example='20', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If this is your first query and no next queries are to be sent, ignore this parameter.
*   If a next query is to be performed, set the value to the NextToken value returned in the last call to the ListListenerCertificates operation.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the gateway endpoint.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  serviceName?: string(name='ServiceName', description='The name of the endpoint service that you want to query.', example='com.aliyun.cn-hangzhou.oss', position='Query'),
}

model ListVpcEndpointServicesByEndUserResponseBody = {
  maxResults?: long(name='MaxResults', description='The number of entries returned per page.', example='20'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If no value is returned for **NextToken**, no next queries are sent.
*   If **NextToken** is returned, the value is the token that is used for the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AB1129F-32C1-5E4D-9E22-E4A859CA46EB'),
  services?: [ 
    {
      defaultPolicyDocument?: string(name='DefaultPolicyDocument', description='The default access policy.', example='{   \\"Version\\" : \\"1\\",   \\"Statement\\" : [ {     \\"Effect\\" : \\"Allow\\",     \\"Action\\" : \\"*\\",     \\"Principal\\" : \\"*\\",     \\"Resource\\" : \\"*\\"   } ] }'),
      serviceDomain?: string(name='ServiceDomain', description='The domain name of the cloud service to which the endpoint service belongs.', example='oss-admin.aliyuncs.com'),
      serviceId?: string(name='ServiceId', description='The ID of the endpoint service.', example='vpces-m5enwdmilo210aibo9****'),
      serviceName?: string(name='ServiceName', description='The name of the endpoint service.', example='com.aliyun.cn-hangzhou.oss'),
      supportPolicy?: boolean(name='SupportPolicy', description='Indicate whether the endpoint service supports the access policy. Valid values:

*   **false**
*   **true**', example='true'),
    }
  ](name='Services', description='The list of entries returned.'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListVpcEndpointServicesByEndUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVpcEndpointServicesByEndUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListVpcEndpointServicesByEndUser  ListVpcEndpointServicesByEndUserRequest
  * @return ListVpcEndpointServicesByEndUserResponse
 */
async function listVpcEndpointServicesByEndUser(request: ListVpcEndpointServicesByEndUserRequest): ListVpcEndpointServicesByEndUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVpcEndpointServicesByEndUser', 'POST', '/', 'json', false, 'json', request);
}

model ListVpcGatewayEndpointsRequest {
  endpointId?: string(name='EndpointId', description='The ID of the gateway endpoint.', example='vpce-bp1i1212ss2whuwyw****', position='Query'),
  endpointName?: string(name='EndpointName', description='The name of the gateway endpoint.

The name must be 1 to 128 characters in length.', example='test', position='Query'),
  maxResults?: long(name='MaxResults', description='The number of entries per page. Valid values: **1** to **100**. Default value: **20**.', example='20', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   If a value is returned for NextToken, specify the value in the next request to retrieve a new page of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the gateway endpoint.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the gateway endpoint belongs.', example='rg-acfmxvfvazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  serviceName?: string(name='ServiceName', description='The name of the endpoint service.', example='com.aliyun.cn-hangzhou.oss', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of tag N added to the resource. You can specify at most 20 tag keys. It cannot be an empty string.

The key cannot exceed 64 characters in length, and can contain digits, periods (.), underscores (_), and hyphens (-). The key must start with a letter but cannot start with `aliyun` or `acs:`. The key cannot contain `http://` or `https://`.', example='FinanceDept'),
      value?: string(name='Value', description='The value of tag N added to the resource. You can specify at most 20 tag values. The tag value can be an empty string.

The tag value cannot exceed 128 characters in length, and can contain digits, periods (.), underscores (_), and hyphens (-). The key must start with a letter but cannot start with `aliyun` or `acs:`. The key cannot contain `http://` or `https://`.', example='FinanceJoshua'),
    }
  ](name='Tags', description='The tag list.', position='Query'),
}

model ListVpcGatewayEndpointsResponseBody = {
  endpoints?: [ 
    {
      associatedRouteTables?: [ string ](name='AssociatedRouteTables', description='The ID of the route table associated with the gateway endpoint.'),
      creationTime?: string(name='CreationTime', description='The time when the endpoint was created. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2021-09-08T08:43:04Z'),
      endpointDescription?: string(name='EndpointDescription', description='The description of the gateway endpoint.', example='test_description'),
      endpointId?: string(name='EndpointId', description='The ID of the gateway endpoint.', example='vpce-bp1i1212ss2whuwyw****'),
      endpointName?: string(name='EndpointName', description='The name of the gateway endpoint.', example='test'),
      endpointStatus?: string(name='EndpointStatus', description='The status of the gateway endpoint. Valid values:

*   **Creating**
*   **Created**
*   **Modifying**
*   **Associating**
*   **Dissociating**
*   **Deleting**', example='Created'),
      policyDocument?: string(name='PolicyDocument', description='The access policy for the cloud service.

For more information about the syntax and structure of the access policy, see [Policy syntax and structure](https://help.aliyun.com/document_detail/93739.html).', example='{\\n  \\"Version\\": \\"1\\",\\n  \\"Statement\\": [\\n    {\\n      \\"Effect\\": \\"Allow\\",\\n      \\"Action\\": \\"*\\",\\n      \\"Principal\\": \\"*\\",\\n      \\"Resource\\": \\"*\\"\\n    }\\n  ]\\n}'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the gateway endpoint belongs.', example='rg-acfmxvfvazb4p****'),
      serviceName?: string(name='ServiceName', description='The name of the endpoint service.', example='com.aliyun.cn-hangzhou.oss'),
      tags?: [ 
        {
          key?: string(name='Key', description='The key of tag N added to the resource.', example='FinanceDept'),
          value?: string(name='Value', description='The value of tag N added to the resource.', example='FinanceJoshua'),
        }
      ](name='Tags', description='The tag list.'),
      vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the gateway endpoint belongs.', example='vpc-bp1gsk7h12ew7oegk****'),
    }
  ](name='Endpoints', description='The list of gateway endpoints.'),
  maxResults?: long(name='MaxResults', description='The number of entries per page.', example='20'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. Valid values:

*   If no value is returned for **NextToken**, no next queries are sent.
*   If a value is returned for **NextToken**, the value can be used in the next request to retrieve a new page of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='0AB1129F-32C1-5E4D-9E22-E4A859CA46EB'),
  totalCount?: long(name='TotalCount', description='The number of entries returned.', example='10'),
}

model ListVpcGatewayEndpointsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVpcGatewayEndpointsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListVpcGatewayEndpoints  ListVpcGatewayEndpointsRequest
  * @return ListVpcGatewayEndpointsResponse
 */
async function listVpcGatewayEndpoints(request: ListVpcGatewayEndpointsRequest): ListVpcGatewayEndpointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVpcGatewayEndpoints', 'POST', '/', 'json', false, 'json', request);
}

model ListVpcPublishedRouteEntriesRequest {
  destinationCidrBlock?: string(name='DestinationCidrBlock', example='47.100.XX.XX/16', position='Query'),
  maxResults?: int32(name='MaxResults', example='50', maximum=500, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId: string(name='RouteTableId', description='This parameter is required.', example='vtb-bp145q7glnuzd****', position='Query'),
  targetInstanceId?: string(name='TargetInstanceId', example='ecr-dhw2xsds5****', position='Query'),
  targetType: string(name='TargetType', description='This parameter is required.', example='ECR', position='Query'),
}

model ListVpcPublishedRouteEntriesResponseBody = {
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='1D0971B2-A35A-42C1-A44C-E91360C36C0B'),
  routeEntries?: [ 
    {
      destinationCidrBlock?: string(name='DestinationCidrBlock', example='10.0.0.0/24'),
      routeEntryId?: string(name='RouteEntryId', example='rte-bp1mnnr2al0naomnpv****'),
      routePublishTargets?: [ 
        {
          publishStatus?: string(name='PublishStatus', example='Published'),
          publishTargetInstanceId?: string(name='PublishTargetInstanceId'),
          publishTargetType?: string(name='PublishTargetType', example='ECR'),
        }
      ](name='RoutePublishTargets'),
      routeTableId?: string(name='RouteTableId', example='vtb-2ze3jgygk9bmsj23s****'),
    }
  ](name='RouteEntries'),
}

model ListVpcPublishedRouteEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVpcPublishedRouteEntriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListVpcPublishedRouteEntries  ListVpcPublishedRouteEntriesRequest
  * @return ListVpcPublishedRouteEntriesResponse
 */
async function listVpcPublishedRouteEntries(request: ListVpcPublishedRouteEntriesRequest): ListVpcPublishedRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVpcPublishedRouteEntries', 'POST', '/', 'json', false, 'json', request);
}

model ListVpnCertificateAssociationsRequest {
  certificateId?: [ string ](name='CertificateId', description='The list of certificate IDs.

You can query the association between at most 20 SSL certificates and VPN gateways.', example='6bfe4218-ea1d****', maxLength=128, position='Query'),
  certificateType?: string(name='CertificateType', description='The certificate type. Valid values:

*   **Encryption**
*   **Signature**', example='Signature', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **20**. Default value: **1**.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. Valid values:

*   You do not need to specify this parameter for the first request.
*   You must specify the token that is obtained from the previous query as the value of **NextToken**.', example='caeba0bbb2be0****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VPN gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  vpnGatewayId?: [ string ](name='VpnGatewayId', description='The list of VPN gateway IDs.

You can query the association between at most 20 VPN gateways and SSL certificates.', example='vpn-bp1q8bgx4xnkm****', maxLength=128, position='Query'),
}

model ListVpnCertificateAssociationsResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='10'),
  nextToken?: string(name='NextToken', description='The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results. Valid values:

*   If **NextToken** is empty, no next page exists.
*   If **NextToken** is not empty, the value indicates the token that is used for the next query.', example='caeba0bbb2be****'),
  requestId?: string(name='RequestId', description='The request ID.', example='197AF2BD-547F-470C-B29A-8400400233EB'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='4'),
  vpnCertificateRelations?: [ 
    {
      associationTime?: string(name='AssociationTime', description='The time when the Anycast EIP was associated.

The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2020-12-29T09:30:29Z'),
      certificateId?: string(name='CertificateId', description='The certificate ID.', example='6bfe4218-ea1d****'),
      certificateType?: string(name='CertificateType', description='The type of the certificate.

*   **Encryption**
*   **Signature**', example='Signature'),
      regionId?: string(name='RegionId', description='The ID of the region where the VPN gateway is created.', example='cn-hangzhou'),
      vpnGatewayId?: string(name='VpnGatewayId', description='The ID of the VPN gateway.', example='vpn-bp1usbiorilk51760****'),
    }
  ](name='VpnCertificateRelations', description='The association information.'),
}

model ListVpnCertificateAssociationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVpnCertificateAssociationsResponseBody(name='body'),
}

/**
  * @description When you call **ListVpnCertificateAssociations**, take note of the following information:
  * *   If you specify only **RegionId**, the SSL certificates associated with all VPN gateways in the specified region are queried.
  * *   If you specify **RegionId** and **CertificateType**, the SSL certificates of the specified type that are associated with the VPN gateways in the specified region are queried.
  * *   If you specify **RegionId** and **VpnGatewayId**, the SSL certificates associated with the specified VPN gateway in the specified region are queried.
  * *   If you specify **RegionId** and **CertificateId**, the VPN gateways associated with the specified SSL certificate in the specified region are queried.
  * @param request  the request parameters of ListVpnCertificateAssociations  ListVpnCertificateAssociationsRequest
  * @return ListVpnCertificateAssociationsResponse
 */
async function listVpnCertificateAssociations(request: ListVpnCertificateAssociationsRequest): ListVpnCertificateAssociationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVpnCertificateAssociations', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBgpGroupAttributeRequest {
  authKey?: string(name='AuthKey', description='The authentication key of the BGP group.', example='!PWZ2****', position='Query'),
  bgpGroupId: string(name='BgpGroupId', description='The BGP group ID.

This parameter is required.', example='bgpg-wz9f62v4fbg2g****', position='Query'),
  clearAuthKey?: boolean(name='ClearAuthKey', description='Specifies whether to clear the secret key. Valid values:

*   **true**
*   **false** (default)', example='false', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The BGP group description.

The description must be 2 to 256 characters in length. It must start with a letter and cannot start with `http://` or `https://`.', example='BGP', position='Query'),
  isFakeAsn?: boolean(name='IsFakeAsn', description='Specifies whether to use a fake AS number. Valid values:

*   **false** (default)
*   **true**

> A router that runs BGP typically belongs to only one AS. If you need to replace an AS with a new one, but you cannot immediately modify BGP configurations due to business requirements, you can specify a fake AS number to establish a connection with the local end. This ensures service continuity in scenarios such as AS migration or AS merging.', example='false', position='Query'),
  localAsn?: long(name='LocalAsn', description='The custom autonomous system number (ASN) of the BGP on the Alibaba Cloud side. Valid values:

*   **45104**
*   **64512~65534**
*   **4200000000~4294967294**

>  **65025** is reserved by Alibaba Cloud. Alibaba Cloud uses **45104** as the **local ASN** by default. Custom **local ASNs** may cause loops in multi-line scenarios. Proceed with caution.', example='45104', position='Query'),
  name?: string(name='Name', description='The BGP group name.

The name must be 2 to 128 characters in length, and can contain digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter but cannot start with `http://` or `https://`.', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerAsn?: long(name='PeerAsn', description='The ASN of the gateway device in the data center.', example='1****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the BGP group.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeQuota?: int32(name='RouteQuota', description='The maximum number of routes supported by a BGP peer. Default value: **110**.', example='110', position='Query'),
}

model ModifyBgpGroupAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='8C3C6D7C-A1CE-4FD8-BC57-DC493A55F76F'),
}

model ModifyBgpGroupAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyBgpGroupAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyBgpGroupAttribute  ModifyBgpGroupAttributeRequest
  * @return ModifyBgpGroupAttributeResponse
 */
async function modifyBgpGroupAttribute(request: ModifyBgpGroupAttributeRequest): ModifyBgpGroupAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBgpGroupAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBgpPeerAttributeRequest {
  bfdMultiHop?: int32(name='BfdMultiHop', description='The BFD hop count. Valid values: **1** to **255**.

This parameter is required only if you enable BFD. The parameter specifies the maximum number of network devices that a packet can traverse from the source to the destination. Set a value based on your network topology.', example='3', position='Query'),
  bgpGroupId?: string(name='BgpGroupId', description='The ID of the BGP group to which the BGP peer that you want to modify belongs.', example='bgpg-m5eo12jxuw2hc0uqq****', position='Query'),
  bgpPeerId: string(name='BgpPeerId', description='The ID of the BGP peer that you want to modify.

This parameter is required.', example='bgp-m5eoyp2mwegk8ce9v****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  enableBfd?: boolean(name='EnableBfd', description='Specifies whether to enable the Bidirectional Forwarding Detection (BFD) feature. Valid values:

*   **true**
*   **false** (default)', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerIpAddress?: string(name='PeerIpAddress', description='The IP address of the BGP peer that you want to modify.', example='116.62.XX.XX', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the BGP group to which the BGP peer that you want to modify belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyBgpPeerAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D4B7649A-61BB-4C64-A586-1DFF1EDA6A42'),
}

model ModifyBgpPeerAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyBgpPeerAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyBgpPeerAttribute  ModifyBgpPeerAttributeRequest
  * @return ModifyBgpPeerAttributeResponse
 */
async function modifyBgpPeerAttribute(request: ModifyBgpPeerAttributeRequest): ModifyBgpPeerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBgpPeerAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCommonBandwidthPackageAttributeRequest {
  bandwidthPackageId: string(name='BandwidthPackageId', description='The ID of the EIP bandwidth plan.

This parameter is required.', example='cbwp-2ze2ic1xd2qeqk145****', position='Query'),
  description?: string(name='Description', description='The description of the EIP bandwidth plan. The description must be 2 to 256 characters in length. It must start with a letter but cannot start with `http://` or `https://`.', example='test', position='Query'),
  name?: string(name='Name', description='The name of the EIP bandwidth plan. The name must be 2 to 128 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter. It cannot start with `http://` or `https://`.', example='test123', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the EIP bandwidth plan is created.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyCommonBandwidthPackageAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B450CAD8-50BC-4506-ADA7-35C6CE63E96B'),
}

model ModifyCommonBandwidthPackageAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCommonBandwidthPackageAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyCommonBandwidthPackageAttribute  ModifyCommonBandwidthPackageAttributeRequest
  * @return ModifyCommonBandwidthPackageAttributeResponse
 */
async function modifyCommonBandwidthPackageAttribute(request: ModifyCommonBandwidthPackageAttributeRequest): ModifyCommonBandwidthPackageAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCommonBandwidthPackageAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCommonBandwidthPackageIpBandwidthRequest {
  bandwidth: string(name='Bandwidth', description='The maximum bandwidth for the EIP. This value cannot be larger than the maximum bandwidth of the Internet Shared Bandwidth instance. Unit: Mbit/s.

This parameter is required.', example='500', position='Query'),
  bandwidthPackageId: string(name='BandwidthPackageId', description='The ID of the Internet Shared Bandwidth instance.

This parameter is required.', example='cbwp-2zep6hw5d6y8exscd****', position='Query'),
  eipId: string(name='EipId', description='The ID of the EIP that is associated with the Internet Shared Bandwidth instance.

This parameter is required.', example='eip-2zewysoansu0svfbg****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Internet Shared Bandwidth instance. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyCommonBandwidthPackageIpBandwidthResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='63D187BF-A30A-4DD6-B68D-FF182C96D8A2'),
}

model ModifyCommonBandwidthPackageIpBandwidthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCommonBandwidthPackageIpBandwidthResponseBody(name='body'),
}

/**
  * @description You can call the **ModifyCommonBandwidthPackageIpBandwidth** operation to set the maximum bandwidth of an EIP that is associated with an Internet Shared Bandwidth instance. This prevents an EIP from exhausting the bandwidth resources of an Internet Shared Bandwidth instance.
  * For example, two EIPs are associated with an Internet Shared Bandwidth instance whose maximum bandwidth is 800 Mbit/s. In this case, you can set the maximum bandwidth of one EIP to 500 Mbit/s and that of the other EIP to 400 Mbit/s. After you set the maximum bandwidth values, the first EIP cannot consume bandwidth higher than 500 Mbit/s. The second EIP cannot consume bandwidth higher than 400 Mbit/s.
  * When you call this operation, take note of the following items:
  * *   This operation is valid only for EIPs that are associated with Elastic Compute Service (ECS) instances. This operation is invalid for EIPs that are associated with Server Load Balancer (SLB) instances, NAT gateways, secondary elastic network interfaces (ENIs), or high-availability virtual IP addresses (HAVIPs).
  * *   This operation is in public preview. You can call this operation to set the maximum bandwidth of EIPs only if the EIPs are associated with an Internet Shared Bandwidth instance. The feature is not supported in the console.
  * *   You cannot repeatedly call this operation to set the maximum bandwidth of an EIP within the specified period of time.
  * @param request  the request parameters of ModifyCommonBandwidthPackageIpBandwidth  ModifyCommonBandwidthPackageIpBandwidthRequest
  * @return ModifyCommonBandwidthPackageIpBandwidthResponse
 */
async function modifyCommonBandwidthPackageIpBandwidth(request: ModifyCommonBandwidthPackageIpBandwidthRequest): ModifyCommonBandwidthPackageIpBandwidthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCommonBandwidthPackageIpBandwidth', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCommonBandwidthPackageSpecRequest {
  bandwidth: string(name='Bandwidth', description='The maximum bandwidth of the Internet Shared Bandwidth instance. Unit: Mbit/s.

Valid values: **1** to **1000**.

This parameter is required.', example='1000', position='Query'),
  bandwidthPackageId: string(name='BandwidthPackageId', description='The ID of the Internet Shared Bandwidth instance.

This parameter is required.', example='cbwp-2ze2ic1xd2qeqk145****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Internet Shared Bandwidth instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyCommonBandwidthPackageSpecResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='7F129000-F929-4AF5-BE8D-BAE434C795306'),
}

model ModifyCommonBandwidthPackageSpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCommonBandwidthPackageSpecResponseBody(name='body'),
}

/**
  * @description Before you call this operation, take note of the following items:
  * *   **ModifyCommonBandwidthPackageSpec** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeCommonBandwidthPackages](https://help.aliyun.com/document_detail/120309.html) operation to query the status of the task.
  *     *   If the Internet Shared Bandwidth instance is in the **Modifying** state, the maximum bandwidth of the Internet Shared Bandwidth instance is being modified. In this state, you can only query the Internet Shared Bandwidth instance and cannot perform other operations.
  *     *   If the Internet Shared Bandwidth instance is in the **Available** state, the maximum bandwidth of the Internet Shared Bandwidth instance is modified.
  * *   You cannot repeatedly call the **ModifyCommonBandwidthPackageSpec** operation to modify the maximum bandwidth of an Internet Shared Bandwidth instance within the specified period of time.
  * @param request  the request parameters of ModifyCommonBandwidthPackageSpec  ModifyCommonBandwidthPackageSpecRequest
  * @return ModifyCommonBandwidthPackageSpecResponse
 */
async function modifyCommonBandwidthPackageSpec(request: ModifyCommonBandwidthPackageSpecRequest): ModifyCommonBandwidthPackageSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCommonBandwidthPackageSpec', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCustomerGatewayAttributeRequest {
  authKey?: string(name='AuthKey', description='The authentication key of the BGP routing protocol for the gateway device in the data center.

The key must be 1 to 64 characters in length. It can contain only ASCII characters and cannot contain spaces or question marks (?).', example='AuthKey****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44****', position='Query'),
  customerGatewayId: string(name='CustomerGatewayId', description='The ID of the customer gateway.

This parameter is required.', example='cgw-bp1pvpl9r9adju6l5****', position='Query'),
  description?: string(name='Description', description='The description of the customer gateway.

The description must be 1 to 100 characters in length, and cannot start with `http://` or `https://`.', example='desctest', position='Query'),
  name?: string(name='Name', description='The name of the customer gateway.

The name must be 1 to 100 characters in length, and cannot start with `http://` or `https://`.', example='nametest', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the customer gateway is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyCustomerGatewayAttributeResponseBody = {
  createTime?: long(name='CreateTime', description='The timestamp generated when the customer gateway was created.', example='1492747187000'),
  customerGatewayId?: string(name='CustomerGatewayId', description='The ID of the customer gateway.', example='cgw-bp1pvpl9r9adju6l5****'),
  description?: string(name='Description', description='The description of the customer gateway.', example='desctest'),
  ipAddress?: string(name='IpAddress', description='The public IP address of the gateway device in the data center.', example='139.32.XX.XX'),
  name?: string(name='Name', description='The name of the customer gateway.', example='nametest'),
  requestId?: string(name='RequestId', description='The request ID.', example='8AA5CE21-2E6A-4530-BDF5-F055849476E6'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the customer gateway belongs.

You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/158855.html) operation to query resource groups.', example='rg-acfmzs372yg****'),
}

model ModifyCustomerGatewayAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCustomerGatewayAttributeResponseBody(name='body'),
}

/**
  * @description *   When you call **ModifyCustomerGatewayAttribute**, if a value is assigned to **AuthKey**, the operation is asynchronous. After a request is sent, the system returns a request ID and runs the task in the background. You can call [DescribeVpnGateway](https://help.aliyun.com/document_detail/73720.html) to query the status of the task.
  *     *   If a VPN gateway is in the **updating** state, the configurations are being modified.
  *     *   If a VPN gateway is in the **active** state, the configurations are modified.
  * *   When you call **ModifyCustomerGatewayAttribute**, if no value is assigned to **AuthKey**, the operation is synchronous.
  * *   You cannot repeatedly call **ModifyCustomerGatewayAttribute** to modify the configurations of a customer gateway within the specified period of time.
  * @param request  the request parameters of ModifyCustomerGatewayAttribute  ModifyCustomerGatewayAttributeRequest
  * @return ModifyCustomerGatewayAttributeResponse
 */
async function modifyCustomerGatewayAttribute(request: ModifyCustomerGatewayAttributeRequest): ModifyCustomerGatewayAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCustomerGatewayAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyEipAddressAttributeRequest {
  allocationId: string(name='AllocationId', description='The ID of the pay-as-you-go EIP.

This parameter is required.', example='eip-2zeerraiwb7uj6i0d****', position='Query'),
  bandwidth?: string(name='Bandwidth', description='The new maximum bandwidth of the EIP. Valid values:

*   **1** to **200** if the metering method is pay-by-data-transfer. Unit: Mbit/s.
*   **1** to **500** if the metering method is pay-by-bandwidth. Unit: Mbit/s.', example='100', position='Query'),
  description?: string(name='Description', description='The new description of the EIP.

The description must be 2 to 256 characters in length and start with a letter. The description cannot start with `http://` or `https://`.', example='abc', position='Query'),
  name?: string(name='Name', description='The new name of the EIP.

The name must be 1 to 128 characters in length, and can contain digits, periods (.), underscores (_), and hyphens (-).', example='Test123', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the EIP.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyEipAddressAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model ModifyEipAddressAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyEipAddressAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyEipAddressAttribute  ModifyEipAddressAttributeRequest
  * @return ModifyEipAddressAttributeResponse
 */
async function modifyEipAddressAttribute(request: ModifyEipAddressAttributeRequest): ModifyEipAddressAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyEipAddressAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyExpressCloudConnectionAttributeRequest {
  bgpAs?: string(name='BgpAs', description='The BGP autonomous system number (ASN) to be configured for the Smart Access Gateway (SAG) device.', example='sag-ejfge***', position='Query'),
  ceIp?: string(name='CeIp', description='The peer IP address when the SAG device is connected to the cloud.', example='`172.16.**.**`', position='Query'),
  description?: string(name='Description', description='Descriptions of ECC.', example='ECC', position='Query'),
  eccId: string(name='EccId', description='The ID of the ECC instance.

This parameter is required.', example='ecc-bp1t9osmuln*******', position='Query'),
  name?: string(name='Name', description='The name of the ECC instance.', example='doctest', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peIp?: string(name='PeIp', description='The on-premises IP address when the SAG device is connected to the cloud.', example='`10.10.**.**`', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the ECC instance.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyExpressCloudConnectionAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='E6385514-B0CC-48E3-B9F9-F7BFF64460A2'),
}

model ModifyExpressCloudConnectionAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyExpressCloudConnectionAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyExpressCloudConnectionAttribute  ModifyExpressCloudConnectionAttributeRequest
  * @return ModifyExpressCloudConnectionAttributeResponse
 */
async function modifyExpressCloudConnectionAttribute(request: ModifyExpressCloudConnectionAttributeRequest): ModifyExpressCloudConnectionAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyExpressCloudConnectionAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyExpressCloudConnectionBandwidthRequest {
  bandwidth?: string(name='Bandwidth', description='The bandwidth of the ECC instance.', example='2', position='Query'),
  eccId: string(name='EccId', description='The ID of the ECC instance.

This parameter is required.', example='ecc-xxxxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyExpressCloudConnectionBandwidthResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='E6385514-B0CC-48E3-B9F9-F7BFF64460A2'),
}

model ModifyExpressCloudConnectionBandwidthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyExpressCloudConnectionBandwidthResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyExpressCloudConnectionBandwidth  ModifyExpressCloudConnectionBandwidthRequest
  * @return ModifyExpressCloudConnectionBandwidthResponse
 */
async function modifyExpressCloudConnectionBandwidth(request: ModifyExpressCloudConnectionBandwidthRequest): ModifyExpressCloudConnectionBandwidthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyExpressCloudConnectionBandwidth', 'POST', '/', 'json', false, 'json', request);
}

model ModifyExpressConnectTrafficQosRequest {
  addInstanceList?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the instance to be associated.', example='pc-bp159zj8zujwy3p07****'),
      instanceType?: string(name='InstanceType', description='The type of instance to be associated. Set the value to **PHYSICALCONNECTION**.', example='PHYSICALCONNECTION'),
    }
  ](name='AddInstanceList', description='The instances to be added. Ignore this parameter if no instances are to be added.', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  qosDescription?: string(name='QosDescription', description='The description of the QoS policy.', example='qos-test', position='Query'),
  qosId: string(name='QosId', description='The ID of the QoS policy.

This parameter is required.', example='qos-2giu0a6vd5x0mv4700', position='Query'),
  qosName?: string(name='QosName', description='The name of the QoS policy.', example='qos-test', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the resource.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  removeInstanceList?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the associated instance.', example='pc-bp1j37am632492qzw****'),
      instanceType?: string(name='InstanceType', description='The type of the associated instance. Set the value to **PHYSICALCONNECTION**.', example='PHYSICALCONNECTION'),
    }
  ](name='RemoveInstanceList', description='The instances to be removed. Ignore this parameter if no instances are to be removed.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model ModifyExpressConnectTrafficQosResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B457'),
}

model ModifyExpressConnectTrafficQosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyExpressConnectTrafficQosResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyExpressConnectTrafficQos  ModifyExpressConnectTrafficQosRequest
  * @return ModifyExpressConnectTrafficQosResponse
 */
async function modifyExpressConnectTrafficQos(request: ModifyExpressConnectTrafficQosRequest): ModifyExpressConnectTrafficQosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyExpressConnectTrafficQos', 'POST', '/', 'json', false, 'json', request);
}

model ModifyExpressConnectTrafficQosQueueRequest {
  bandwidthPercent?: string(name='BandwidthPercent', description='The percentage of bandwidth allocated to the QoS queue.

*   If QueueType is set to **Medium**, this parameter is required. Valid values: 1 to 100.
*   If QueueType is set to **Default**, a value of - is returned.', example='100', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must ensure that the value is unique among all requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, the system uses **RequestId** as **ClientToken**. **RequestId** might be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  qosId: string(name='QosId', description='The ID of the QoS policy.

This parameter is required.', example='qos-2giu0a6vd5x0mv4700', position='Query'),
  queueDescription?: string(name='QueueDescription', description='The description of the QoS queue.

The description must be 0 to 256 characters in length and cannot start with `http://` or `https://`.', example='qos-queue-test', position='Query'),
  queueId: string(name='QueueId', description='The ID of the QoS queue.

This parameter is required.', example='qos-queue-9nyx2u7n71s2rcy4n5', position='Query'),
  queueName?: string(name='QueueName', description='The name of the QoS queue.

The name must be 0 to 128 characters in length and cannot start with `http://` or `https://`.', example='qos-queue-test', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the QoS policy.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model ModifyExpressConnectTrafficQosQueueResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='079874CD-AEC1-43E6-AC03-ADD96B6E4907'),
}

model ModifyExpressConnectTrafficQosQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyExpressConnectTrafficQosQueueResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyExpressConnectTrafficQosQueue  ModifyExpressConnectTrafficQosQueueRequest
  * @return ModifyExpressConnectTrafficQosQueueResponse
 */
async function modifyExpressConnectTrafficQosQueue(request: ModifyExpressConnectTrafficQosQueueRequest): ModifyExpressConnectTrafficQosQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyExpressConnectTrafficQosQueue', 'POST', '/', 'json', false, 'json', request);
}

model ModifyExpressConnectTrafficQosRuleRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  dstCidr?: string(name='DstCidr', description='The destination IPv4 CIDR block that matches the QoS rule traffic.

> When this parameter is unavailable, specify **SrcIPv6Cidr** or **DstIPv6Cidr**.', example='1.1.1.0/24', position='Query'),
  dstIPv6Cidr?: string(name='DstIPv6Cidr', description='The destination IPv6 CIDR block that matches the QoS rule traffic.

> When this parameter is unavailable, specify **SrcCidr** or **DstCidr**.', example='2001:0db8:1234:5678::/64', position='Query'),
  dstPortRange?: string(name='DstPortRange', description='The range of destination ports that match the QoS rule traffic. Valid values: **0** to **65535**. If the traffic does not match, the value is -1. You can specify only one port. The start port number must be the same as the end port number. Different protocols correspond to different ports. Valid values:

*   **ALL** (uneditable): -1/-1.
*   **ICMP(IPv4)** (uneditable): -1/-1.
*   **ICMPv6(IPv6)** (uneditable): -1/-1.
*   **TCP** (editable): -1/-1.
*   **UDP** (editable): -1/-1.
*   **GRE** (uneditable): -1/-1.
*   **SSH** (uneditable): 22/22.
*   **Telnet** (uneditable): 23/23.
*   **HTTP** (uneditable): 80/80.
*   **HTTPS** (uneditable): 443/443.
*   **MS SQL** (uneditable): 1443/1443.
*   **Oracle** (uneditable): 1521/1521.
*   **MySql** (uneditable): 3306/3306.
*   **RDP** (uneditable): 3389/3389.
*   **PostgreSQL** (uneditable): 5432/5432.
*   **Redis** (uneditable): 6379/6379.', example='-1/-1', position='Query'),
  matchDscp?: int32(name='MatchDscp', description='The DSCP value that matches the QoS rule traffic. Valid values: **0** to **63**. If no value is matched, the value is -1.', example='1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  priority?: int32(name='Priority', description='The priority of the QoS rule. Valid values: **1** to **9000**. A larger value indicates a higher priority. The priority of each QoS rule must be unique in the same QoS policy.', example='1', position='Query'),
  protocol?: string(name='Protocol', description='The protocol of the QoS rule. Valid values:

*   **ALL**
*   **ICMP(IPv4)**
*   **ICMPv6(IPv6)**
*   **TCP**
*   **UDP**
*   **GRE**
*   **SSH**
*   **Telnet**
*   **HTTP**
*   **HTTPS**
*   **MS SQL**
*   **Oracle**
*   **MySql**
*   **RDP**
*   **PostgreSQL**
*   **Redis**', example='ALL', position='Query'),
  qosId: string(name='QosId', description='The ID of the QoS policy.

This parameter is required.', example='qos-2giu0a6vd5x0mv4700', position='Query'),
  queueId: string(name='QueueId', description='The ID of the QoS queue.

This parameter is required.', example='qos-queue-9nyx2u7n71s2rcy4n5', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the QoS policy.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  remarkingDscp?: int32(name='RemarkingDscp', description='The new DSCP value. Valid values: **0** to **63**. If you do not change the value, set the value to -1.', example='1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  ruleDescription?: string(name='RuleDescription', description='The description of the QoS rule.

The description must be 0 to 256 characters in length and cannot start with `http://` or `https://`.', example='qos-rule-test', position='Query'),
  ruleId: string(name='RuleId', description='The ID of the QoS rule.

This parameter is required.', example='qos-rule-iugg0l9x27f2nocouj', position='Query'),
  ruleName?: string(name='RuleName', description='The name of the QoS rule.

The name must be 0 to 128 characters in length and cannot start with `http://` or `https://`.', example='qos-rule-test', position='Query'),
  srcCidr?: string(name='SrcCidr', description='The source IPv4 CIDR block that matches the QoS rule traffic.

> When this parameter is unavailable, specify **SrcIPv6Cidr** or **DstIPv6Cidr**.', example='1.1.1.0/24', position='Query'),
  srcIPv6Cidr?: string(name='SrcIPv6Cidr', description='The source IPv6 CIDR block that matches the QoS rule traffic.

> When this parameter is unavailable, specify **SrcCidr** or **DstCidr**.', example='2001:0db8:1234:5678::/64', position='Query'),
  srcPortRange?: string(name='SrcPortRange', description='The range of source ports that match the QoS rule traffic. Valid values: **0** to **65535**. If the traffic does not match, the value is -1. You can specify only one port. The start port number must be the same as the end port number.', example='-1/-1', position='Query'),
}

model ModifyExpressConnectTrafficQosRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='7B48B4B9-1EAD-469F-B488-594DAB4B6A1A'),
}

model ModifyExpressConnectTrafficQosRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyExpressConnectTrafficQosRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyExpressConnectTrafficQosRule  ModifyExpressConnectTrafficQosRuleRequest
  * @return ModifyExpressConnectTrafficQosRuleResponse
 */
async function modifyExpressConnectTrafficQosRule(request: ModifyExpressConnectTrafficQosRuleRequest): ModifyExpressConnectTrafficQosRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyExpressConnectTrafficQosRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyFlowLogAttributeRequest {
  aggregationInterval?: int32(name='AggregationInterval', description='The new sampling interval of the flow log. Unit: minutes. Valid values: **1**, **5**, and **10**.', example='1', position='Query'),
  description?: string(name='Description', description='The new description of the flow log.

The description must be 1 to 256 characters in length and cannot start with `http://` or `https://`.', example='This is my Flowlog.', position='Query'),
  flowLogId: string(name='FlowLogId', description='The ID of the flow log.

This parameter is required.', example='fl-m5e8vhz2t21sel1nq****', position='Query'),
  flowLogName?: string(name='FlowLogName', description='The new name of the flow log.

The name must be 1 to 128 characters in length and cannot start with `http://` or `https://`.', example='myFlowlog', position='Query'),
  ipVersion?: string(name='IpVersion', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the flow log is created.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-qingdao', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyFlowLogAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F7DDDC17-FA06-4AC2-8F35-59D2470FCFC1'),
  success?: string(name='Success', description='Indicates whether the call is successful. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
}

model ModifyFlowLogAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyFlowLogAttributeResponseBody(name='body'),
}

/**
  * @description *   **ModifyFlowLogAttribute** is an asynchronous operation. After you send a request, the system returns a request ID and runs the task in the background. You can call the [DescribeFlowLogs](https://help.aliyun.com/document_detail/87923.html) operation to query the status of a flow log:
  *     *   If the flow log is in the **Modifying** state, the flow log is being modified.
  *     *   If the flow log is in the **Active** or **Inactive** state, the flow log is modified.
  * *   You cannot repeatedly call the **ModifyFlowLogAttribute** operation to modify a flow log within the specified period of time.
  * @param request  the request parameters of ModifyFlowLogAttribute  ModifyFlowLogAttributeRequest
  * @return ModifyFlowLogAttributeResponse
 */
async function modifyFlowLogAttribute(request: ModifyFlowLogAttributeRequest): ModifyFlowLogAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyFlowLogAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyForwardEntryRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  externalIp?: string(name='ExternalIp', description='*   When you modify DNAT entries of Internet NAT gateways, this parameter specifies the elastic IP addresses (EIPs) that are used to access the Internet.
*   When you modify DNAT entries of Virtual Private Cloud (VPC) NAT gateways, this parameter specifies the NAT IP addresses that are accessed by external networks.', example='116.85.XX.XX', position='Query'),
  externalPort?: string(name='ExternalPort', description='*   The external port that is used to forward traffic when you modify DNAT entries of Internet NAT gateways.

    *   Valid values: **1** to **65535**.
    *   If you want to modify the port range, separate port numbers with a forward slash (/), such as `10/20`.
    *   If you need to modify **ExternalPort** and **InternalPort** at the same time, and **ExternalPort** specifies a port range, make sure that **InternalPort** also specifies a port range, and both ranges specify the same number of ports. For example, you can set **ExternalPort** to `10/20` and **InternalPort** to `80/90`.

*   The port that is accessed by external networks when you modify DNAT entries of VPC NAT gateways. Valid values: **1** to **65535**.', example='80', position='Query'),
  forwardEntryId: string(name='ForwardEntryId', description='The ID of the DNAT entry.

This parameter is required.', example='fwd-8vbn3bc8roygjp0gy****', position='Query'),
  forwardEntryName?: string(name='ForwardEntryName', description='The new name of the DNAT entry.

The name must be 2 to 128 characters in length. It must start with a letter but cannot start with `http://` or `https://`.', example='test', position='Query'),
  forwardTableId: string(name='ForwardTableId', description='The ID of the DNAT table to which the DNAT entry belongs.

This parameter is required.', example='ftb-8vbx8xu2lqj9qb334****', position='Query'),
  internalIp?: string(name='InternalIp', description='*   The private IP address of the ECS instance that uses DNAT entries to communicate with the Internet when you modify DNAT entries of Internet NAT gateways.
*   The private IP address that uses DNAT entries to communicate when you modify DNAT entries of VPC NAT gateways.', example='10.0.0.78', position='Query'),
  internalPort?: string(name='InternalPort', description='*   The internal port or port range that is used to forward traffic when you modify DNAT entries of Internet NAT gateways. Valid values: **1** to **65535**.
*   The port of the destination ECS instance to be mapped when you modify DNAT entries of VPC NAT gateways. Valid values: **1** to **65535**.', example='80', position='Query'),
  ipProtocol?: string(name='IpProtocol', description='The protocol. Valid values:

*   **TCP**
*   **UDP**
*   **Any**', example='TCP', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  portBreak?: boolean(name='PortBreak', description='Specifies whether to remove limits on the port range. Valid values:

*   **true**
*   **false** If an SNAT entry and a DNAT entry use the same public IP address, and you want to specify a port number greater than `1024`, set `PortBreak` to `true`.', example='false', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the NAT gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyForwardEntryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='2315DEB7-5E92-423A-91F7-4C1EC9AD97C3'),
}

model ModifyForwardEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyForwardEntryResponseBody(name='body'),
}

/**
  * @description *   **ModifyForwardEntry** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeForwardTableEntries](https://help.aliyun.com/document_detail/36053.html) operation to query the status of the task.
  *     *   **Pending**: indicates that the system is modifying the DNAT entry. You can only query the DNAT entry, but cannot perform other operations.
  *     *   **Available**: indicates that the DNAT entry is modified.
  * *   You cannot repeatedly call the **ModifyForwardEntry** operation to modify a DNAT entry within the specified period of time.
  * @param request  the request parameters of ModifyForwardEntry  ModifyForwardEntryRequest
  * @return ModifyForwardEntryResponse
 */
async function modifyForwardEntry(request: ModifyForwardEntryRequest): ModifyForwardEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyForwardEntry', 'POST', '/', 'json', false, 'json', request);
}

model ModifyFullNatEntryAttributeRequest {
  accessIp?: string(name='AccessIp', description='The backend IP address to be modified in FULLNAT address translation.', example='192.168.XX.XX', position='Query'),
  accessPort?: string(name='AccessPort', description='The backend port to be modified in FULLNAT port mapping. Valid values: **1** to **65535**.', example='80', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**: performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  fullNatEntryDescription?: string(name='FullNatEntryDescription', description='The new description of the FULLNAT entry.

You can leave this parameter empty or enter a description. If you enter a description, the description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='abcd', position='Query'),
  fullNatEntryId: string(name='FullNatEntryId', description='The ID of the FULLNAT entry to be modified.

This parameter is required.', example='fullnat-gw8fz23jezpbblf1j****', position='Query'),
  fullNatEntryName?: string(name='FullNatEntryName', description='The new name of the FULLNAT entry.

The name must be 2 to 128 characters in length. It must start with a letter but cannot start with `http://` or `https://`.', example='modify', position='Query'),
  fullNatTableId: string(name='FullNatTableId', description='The ID of the FULLNAT table to be modified.

This parameter is required.', example='fulltb-gw88z7hhlv43rmb26****', position='Query'),
  ipProtocol?: string(name='IpProtocol', description='The protocol of the packets that are forwarded by the port. Valid values:

*   **TCP**: TCP
*   **UDP**', example='TCP', position='Query'),
  natIp?: string(name='NatIp', description='The NAT IP address to be modified.', example='192.168.XX.XX', position='Query'),
  natIpPort?: string(name='NatIpPort', description='The frontend port to be modified in FULLNAT port mapping. Valid values: **1** to **65535**.', example='80', position='Query'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the elastic network interface (ENI) to be modified.', example='eni-gw8g131ef2dnbu3k****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Virtual Private Cloud (VPC) NAT gateway to which the FULLNAT entry to be modified belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='eu-central-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyFullNatEntryAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='2315DEB7-5E92-423A-91F7-4C1EC9AD97C3'),
}

model ModifyFullNatEntryAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyFullNatEntryAttributeResponseBody(name='body'),
}

/**
  * @description ## [](#)
  * *   **ModifyFullNatEntryAttribute** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListFullNatEntries](https://help.aliyun.com/document_detail/348779.html) operation to query the status of a FULLNAT entry.
  *     *   **Modifying**: indicates that the system is modifying the FULLNAT entry. You can query the FULLNAT entry, but cannot perform other operations.
  *     *   **Available**: indicates that the FULLNAT entry is modified.
  * *   You cannot repeatedly call the **ModifyFullNatEntryAttribute** operation to modify a FULLNAT entry within the specified period of time.
  * @param request  the request parameters of ModifyFullNatEntryAttribute  ModifyFullNatEntryAttributeRequest
  * @return ModifyFullNatEntryAttributeResponse
 */
async function modifyFullNatEntryAttribute(request: ModifyFullNatEntryAttributeRequest): ModifyFullNatEntryAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyFullNatEntryAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyGlobalAccelerationInstanceAttributesRequest {
  description?: string(name='Description', description='The description of the GA instance.

The description must be 2 to 256 characters in length. It must start with a letter but cannot start with `http://` or `https://`.', example='My GA', position='Query'),
  globalAccelerationInstanceId: string(name='GlobalAccelerationInstanceId', description='The ID of the GA instance.

This parameter is required.', example='ga-14fdsf3****', position='Query'),
  name?: string(name='Name', description='The name of the GA instance.

The name must be 2 to 128 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It cannot start with `http://` or `https://`.', example='GA-1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyGlobalAccelerationInstanceAttributesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='BD5BCEE8-F62C-40C2-9AC3-89XXXXXXXXX'),
}

model ModifyGlobalAccelerationInstanceAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyGlobalAccelerationInstanceAttributesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyGlobalAccelerationInstanceAttributes  ModifyGlobalAccelerationInstanceAttributesRequest
  * @return ModifyGlobalAccelerationInstanceAttributesResponse
 */
async function modifyGlobalAccelerationInstanceAttributes(request: ModifyGlobalAccelerationInstanceAttributesRequest): ModifyGlobalAccelerationInstanceAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyGlobalAccelerationInstanceAttributes', 'POST', '/', 'json', false, 'json', request);
}

model ModifyGlobalAccelerationInstanceSpecRequest {
  bandwidth: string(name='Bandwidth', description='The maximum bandwidth of the GA instance. Unit: Mbit/s. Set the value to **10**.

This parameter is required.', example='10', position='Query'),
  globalAccelerationInstanceId: string(name='GlobalAccelerationInstanceId', description='The ID of the GA instance.

This parameter is required.', example='ga-32s33s****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyGlobalAccelerationInstanceSpecResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='BD5BCEE8-F62C-40C2-9AC3-89XXXXXXXXX'),
}

model ModifyGlobalAccelerationInstanceSpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyGlobalAccelerationInstanceSpecResponseBody(name='body'),
}

/**
  * @description ## Usage notes
  * You cannot call this operation to modify the maximum bandwidth of a subscription GA instance.
  * @param request  the request parameters of ModifyGlobalAccelerationInstanceSpec  ModifyGlobalAccelerationInstanceSpecRequest
  * @return ModifyGlobalAccelerationInstanceSpecResponse
 */
async function modifyGlobalAccelerationInstanceSpec(request: ModifyGlobalAccelerationInstanceSpecRequest): ModifyGlobalAccelerationInstanceSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyGlobalAccelerationInstanceSpec', 'POST', '/', 'json', false, 'json', request);
}

model ModifyHaVipAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. ClientToken can contain only ASCII characters.

>  If you do not specify this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='02fb3da4-130e-11e9-8e44-0016e0****', position='Query'),
  description?: string(name='Description', description='The description of the HAVIP.

The description must be 1 to 256 characters in length and cannot start with `http://` or `https://`.', example='This is my HaVip.', position='Query'),
  haVipId: string(name='HaVipId', description='The ID of the HAVIP.

This parameter is required.', example='havip-2zeo05qre24nhrqp****', position='Query'),
  name?: string(name='Name', description='The name of the HAVIP.

The name must be 1 to 128 characters in length, and cannot start with `http://` or `https://`.', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the HAVIP belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyHaVipAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C44F62BE-9CE7-4277-B117-69243F3988BF'),
}

model ModifyHaVipAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyHaVipAttributeResponseBody(name='body'),
}

/**
  * @description You cannot repeatedly call the **ModifyHaVipAttribute** operation to modify the name and description of an HAVIP within the specified period of time.
  * @param request  the request parameters of ModifyHaVipAttribute  ModifyHaVipAttributeRequest
  * @return ModifyHaVipAttributeResponse
 */
async function modifyHaVipAttribute(request: ModifyHaVipAttributeRequest): ModifyHaVipAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyHaVipAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIPv6TranslatorAclAttributeRequest {
  aclId: string(name='AclId', description='The ID of the ACL that you want to modify.

This parameter is required.', example='ipv6transacl-bp1de2****', position='Query'),
  aclName: string(name='AclName', description='The name of the ACL.

This parameter is required.', example='acl1', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region of the IPv6 Translation Service instance. You can call the DescribeRegions operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyIPv6TranslatorAclAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model ModifyIPv6TranslatorAclAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyIPv6TranslatorAclAttributeResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI ModifyIPv6TranslatorAclAttribute is deprecated  * @param request  the request parameters of ModifyIPv6TranslatorAclAttribute  ModifyIPv6TranslatorAclAttributeRequest
  * @return ModifyIPv6TranslatorAclAttributeResponse
 */
// Deprecated
async function modifyIPv6TranslatorAclAttribute(request: ModifyIPv6TranslatorAclAttributeRequest): ModifyIPv6TranslatorAclAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIPv6TranslatorAclAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIPv6TranslatorAclListEntryRequest {
  aclEntryComment: string(name='AclEntryComment', description='The remarks of the ACL rule.

It must be 2 to 100 characters in length, and can contain digits, underscores (_), and hyphens (-). It must start with a letter.

This parameter is required.', example='client IP', position='Query'),
  aclEntryId: string(name='AclEntryId', description='The ID of the ACL rule to which the IP entry belongs.

This parameter is required.', example='ipv6transaclentry-bp1jzyn7ra8pyxehd****', position='Query'),
  aclId: string(name='AclId', description='The ID of the ACL to which the IP entry belongs.

This parameter is required.', example='ipv6transacl-bp1b4z3tleyhq1s50****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region of the ACL.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyIPv6TranslatorAclListEntryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model ModifyIPv6TranslatorAclListEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyIPv6TranslatorAclListEntryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyIPv6TranslatorAclListEntry  ModifyIPv6TranslatorAclListEntryRequest
  * @return ModifyIPv6TranslatorAclListEntryResponse
 */
async function modifyIPv6TranslatorAclListEntry(request: ModifyIPv6TranslatorAclListEntryRequest): ModifyIPv6TranslatorAclListEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIPv6TranslatorAclListEntry', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIPv6TranslatorAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.', example='sha1111', position='Query'),
  description?: string(name='Description', description='The description of IPv6 Translation Service. This parameter is empty by default. It must be 2 to 100 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It cannot start with http:// or [https://](https://。).', example='instancedescription', position='Query'),
  ipv6TranslatorId: string(name='Ipv6TranslatorId', description='The ID of the IPv6 Translation Service instance.

This parameter is required.', example='ipv6trans-bp1858ys****', position='Query'),
  name?: string(name='Name', description='The name of the IPv6 Translation Service instance. The default name is the instance ID. It must be 2 to 100 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It cannot start with http:// or [https://](https://。).', example='instancename', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region of the IPv6 Translation Service instance. You can call the **DescribeRegions** operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyIPv6TranslatorAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='8B2F5262-6B57-43F2-xxxxx'),
}

model ModifyIPv6TranslatorAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyIPv6TranslatorAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyIPv6TranslatorAttribute  ModifyIPv6TranslatorAttributeRequest
  * @return ModifyIPv6TranslatorAttributeResponse
 */
async function modifyIPv6TranslatorAttribute(request: ModifyIPv6TranslatorAttributeRequest): ModifyIPv6TranslatorAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIPv6TranslatorAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIPv6TranslatorBandwidthRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable auto-payment for the instance. Valid values:

*   **true**
*   **false** (default)', example='false', position='Query'),
  bandwidth: int32(name='Bandwidth', description='The maximum bandwidth of the IPv6 Translation Service instance. Valid values: **1** to **200**. Unit: Mbit/s.

This parameter is required.', example='2', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ipv6TranslatorId: string(name='Ipv6TranslatorId', description='The ID of the IPv6 Translation Service instance.

This parameter is required.', example='ipv6trans-bp1858ys****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region of the IPv6 Translation Service instance. You can call the **DescribeRegions** operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyIPv6TranslatorBandwidthResponseBody = {
  orderId?: string(name='OrderId', description='The order ID.', example='202304500950739'),
  requestId?: string(name='RequestId', description='The request ID.', example='EF8198EE-8FC9-49C2-A22E-xxxx'),
}

model ModifyIPv6TranslatorBandwidthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyIPv6TranslatorBandwidthResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyIPv6TranslatorBandwidth  ModifyIPv6TranslatorBandwidthRequest
  * @return ModifyIPv6TranslatorBandwidthResponse
 */
async function modifyIPv6TranslatorBandwidth(request: ModifyIPv6TranslatorBandwidthRequest): ModifyIPv6TranslatorBandwidthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIPv6TranslatorBandwidth', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIPv6TranslatorEntryRequest {
  aclId?: string(name='AclId', description='The ID of the associated ACL.', example='ipv6transacl-bp1de27sou71g0lf****', position='Query'),
  aclStatus?: string(name='AclStatus', description='Specifies whether to enable access control lists (ACLs). Valid values:

*   **on**
*   **off**', example='off', position='Query'),
  aclType?: string(name='AclType', description='The ACL type. Valid values:

*   **white**: a whitelist. IPv6 addresses in the ACL are allowed to access backend services.
*   **black**: a blacklist. IPv6 addresses in the ACL are not allowed to access backend services.', example='white', position='Query'),
  allocateIpv6Port?: int32(name='AllocateIpv6Port', description='The port that is used by the IPv6 address allocated to the IPv6 Translation Service instance.', example='80', position='Query'),
  backendIpv4Addr?: string(name='BackendIpv4Addr', description='The public IPv4 address that needs to provide IPv6 services.', example='47.11.XX.XX', position='Query'),
  backendIpv4Port?: int32(name='BackendIpv4Port', description='The port of the public IPv4 address that needs to provide IPv6 services.', example='80', position='Query'),
  entryBandwidth?: int32(name='EntryBandwidth', description='The maximum bandwidth specified in the IPv6 mapping entry. Unit: Mbit/s. Valid values:

*   **-1** (default): does not limit the maximum bandwidth specified in the IPv6 mapping entry.
*   **1** to **200**: changes the maximum bandwidth specified in the IPv6 mapping entry.

> The sum of maximum bandwidth values specified in all IPv6 entries cannot exceed the maximum bandwidth supported by the instance.', example='10', position='Query'),
  entryDescription?: string(name='EntryDescription', description='The description of the IPv6 mapping entry. It must be 2 to 100 characters in length, and can contain digits, periods (.), underscores (_), and hyphens (-). It must start with a letter. It cannot start with http:// or [https://](https://。).', example='entrydescription', position='Query'),
  entryName?: string(name='EntryName', description='The name of the IPv6 mapping entry. It must be 2 to 100 characters in length, and can contain digits, periods (.), underscores (_), and hyphens (-). It must start with a letter. It cannot start with http:// or [https://](https://。).', example='entry1', position='Query'),
  ipv6TranslatorEntryId: string(name='Ipv6TranslatorEntryId', description='The ID of the IPv6 mapping entry.

This parameter is required.', example='ipv6trans-bp1858ys****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region of the IPv6 Translation Service instance. You can call the DescribeRegions operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transProtocol?: string(name='TransProtocol', description='The protocol. Valid values:

*   **tcp**
*   **udp**', example='tcp', position='Query'),
}

model ModifyIPv6TranslatorEntryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model ModifyIPv6TranslatorEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyIPv6TranslatorEntryResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI ModifyIPv6TranslatorEntry is deprecated  * @param request  the request parameters of ModifyIPv6TranslatorEntry  ModifyIPv6TranslatorEntryRequest
  * @return ModifyIPv6TranslatorEntryResponse
 */
// Deprecated
async function modifyIPv6TranslatorEntry(request: ModifyIPv6TranslatorEntryRequest): ModifyIPv6TranslatorEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIPv6TranslatorEntry', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIpv6AddressAttributeRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', description='The description of the IPv6 address.

It must be 2 to 256 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter. The name must start with a letter and cannot start with `http://` or `https://`.', example='test', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ipv6AddressId: string(name='Ipv6AddressId', description='The ID of the IPv6 address.

This parameter is required.', example='ipv6-hp32vv2klzw4yerdf****', position='Query'),
  name?: string(name='Name', description='The name of the IPv6 address.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter. The name must start with a letter and cannot start with `http://` or `https://`.', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the IPv6 address. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-huhehaote', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyIpv6AddressAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D560AF68-4CE8-4A5C-B3FE-469F558094D0'),
}

model ModifyIpv6AddressAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyIpv6AddressAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyIpv6AddressAttribute  ModifyIpv6AddressAttributeRequest
  * @return ModifyIpv6AddressAttributeResponse
 */
async function modifyIpv6AddressAttribute(request: ModifyIpv6AddressAttributeRequest): ModifyIpv6AddressAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIpv6AddressAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIpv6GatewayAttributeRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', description='The description of the IPv6 gateway.', example='ipv6description', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ipv6GatewayId: string(name='Ipv6GatewayId', description='The ID of the IPv6 gateway that you want to modify.

This parameter is required.', example='ipv6gw-hp39kh1ya51yzp2lu****', position='Query'),
  name?: string(name='Name', description='The name of the IPv6 gateway.

It must be 2 to 256 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter. The name must start with a letter and cannot start with `http://` or `https://`.', example='ipv6name', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the IPv6 gateway. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-huhehaote', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyIpv6GatewayAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='9DFEDBEE-E5AB-49E8-A2DC-CC114C67AF75'),
}

model ModifyIpv6GatewayAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyIpv6GatewayAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyIpv6GatewayAttribute  ModifyIpv6GatewayAttributeRequest
  * @return ModifyIpv6GatewayAttributeResponse
 */
async function modifyIpv6GatewayAttribute(request: ModifyIpv6GatewayAttributeRequest): ModifyIpv6GatewayAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIpv6GatewayAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIpv6InternetBandwidthRequest {
  bandwidth: long(name='Bandwidth', description='The Internet bandwidth value of the IPv6 address. Unit: Mbit/s.

*   If the billing method is pay-by-data-transfer, valid values are **1** to **1000**.
*   If the billing method is pay-by-bandwidth, valid values are **1** to **2000**.

This parameter is required.', example='4', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ipv6AddressId?: string(name='Ipv6AddressId', description='The ID of the IPv6 address.

>  You must specify one of **Ipv6AddressId** and **Ipv6InternetBandwidthId**.', example='ipv6-2zen5j4axcp5l5qyy****', position='Query'),
  ipv6InternetBandwidthId?: string(name='Ipv6InternetBandwidthId', description='The instance ID of the Internet bandwidth of the IPv6 address.', example='ipv6bw-uf6hcyzu65v98v3du****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the IPv6 gateway is deployed. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-huhehaote', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyIpv6InternetBandwidthResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D560AF68-4CE8-4A5C-B3FE-469F558094D0'),
}

model ModifyIpv6InternetBandwidthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyIpv6InternetBandwidthResponseBody(name='body'),
}

/**
  * @description You cannot repeatedly call the **ModifyIpv6InternetBandwidth** operation to modify the Internet bandwidth value of an IPv6 CIDR block within the specified period of time.
  * @param request  the request parameters of ModifyIpv6InternetBandwidth  ModifyIpv6InternetBandwidthRequest
  * @return ModifyIpv6InternetBandwidthResponse
 */
async function modifyIpv6InternetBandwidth(request: ModifyIpv6InternetBandwidthRequest): ModifyIpv6InternetBandwidthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIpv6InternetBandwidth', 'POST', '/', 'json', false, 'json', request);
}

model ModifyNatGatewayAttributeRequest {
  description?: string(name='Description', description='The description of the NAT gateway.

The description must be 1 to 128 characters in length, and cannot start with `http://` or `https://`.', example='Description', position='Query'),
  eipBindMode?: string(name='EipBindMode', description='The mode in which the NAT gateway is associated with an elastic IP address (EIP). You can leave this parameter empty. If you want to specify a value for this parameter, set the value to **NAT**, which indicates that the NAT gateway is associated with the EIP in NAT mode.

**

**Description**

*   If EipBindMode is set to MULTI_BINDED when the NAT gateway is created, you can change the value of this parameter from **MULTI_BINDED** to **NAT**. If EipBindMode is set to NAT when the NAT gateway is created, you cannot change the value of this parameter from **NAT** to **MULTI_BINDED**. For more information about **MULTI_BINDED**, see [CreateNatGateway](https://help.aliyun.com/document_detail/120219.html).

*   When the mode in which the NAT gateway is associated with an EIP is being changed, a transient connection that lasts a few seconds may occur. If the number of EIPs with which the NAT gateway is associated increases, the transient connection lasts longer. You can change the mode only for a NAT gateway that is associated with up to five EIPs. We recommend that you change the mode during off-peak hours.
*   After the mode is changed to **NAT**, the Internet NAT gateway is compatible with the IPv4 gateway. However, if you associate an EIP with the NAT gateway, the EIP occupies one private IP address on the vSwitch of the NAT gateway. Make sure that the vSwitch has sufficient private IP addresses. Otherwise, the EIP fails to be associated with the NAT gateway.', example='NAT', position='Query'),
  enableSessionLog?: boolean(name='EnableSessionLog', position='Query'),
  icmpReplyEnabled?: boolean(name='IcmpReplyEnabled', description='Specifies whether to enable the Internet Control Message Protocol (ICMP) non-retrieval feature. Valid values:

*   **false** (default)
*   **true**', example='false', position='Query'),
  logDelivery?: {
    logDeliveryType?: string(name='LogDeliveryType'),
    logDestination?: string(name='LogDestination'),
  }(name='LogDelivery', shrink='json', position='Query'),
  name?: string(name='Name', description='The name of the NAT gateway.

The name must be 1 to 128 characters in length and cannot start with `http://` or `https://`.', example='nat123', position='Query'),
  natGatewayId: string(name='NatGatewayId', description='The ID of the NAT gateway.

This parameter is required.', example='ngw-2ze0dcn4mq31qx2jc****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the NAT gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyNatGatewayAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='AB5F62CF-2B60-4458-A756-42C9DFE108D1'),
}

model ModifyNatGatewayAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNatGatewayAttributeResponseBody(name='body'),
}

/**
  * @description ## [](#)Description
  * You can call this operation to query an Internet NAT gateway or a virtual private cloud (VPC) NAT gateway. The term NAT gateway in this topic refers to both NAT gateway types.
  * @param request  the request parameters of ModifyNatGatewayAttribute  ModifyNatGatewayAttributeRequest
  * @return ModifyNatGatewayAttributeResponse
 */
async function modifyNatGatewayAttribute(request: ModifyNatGatewayAttributeRequest): ModifyNatGatewayAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNatGatewayAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyNatGatewaySpecRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to automatically complete the payment.

*   **true**: enables automatic payment. Payments are automatically completed.
*   **false** (default): disables automatic payment. If you select this option, you must go to the Order Center to complete the payment after an order is generated.', example='false', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters.', example='123e4567-e89b-12d3-a456-426655****', position='Query'),
  natGatewayId: string(name='NatGatewayId', description='The ID of the Internet NAT gateway that you want to upgrade.

This parameter is required.', example='ngw-bp1uewa15k4iy5770****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Internet NAT gateway is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  spec: string(name='Spec', description='The size of the Internet NAT gateway. Valid values:

*   **Small**: small
*   **Middle**: medium
*   **Large**: large

This parameter is required.', example='Middle', position='Query'),
}

model ModifyNatGatewaySpecResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='DBD4E4A2-786E-4BD2-8EB6-107FFC2B5B7D'),
}

model ModifyNatGatewaySpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNatGatewaySpecResponseBody(name='body'),
}

/**
  * @description - You cannot call this operation to downgrade a subscription Internet NAT gateway. You can downgrade a subscription Internet NAT gateway only in the console.
  * - When you call this operation to upgrade a subscription Internet NAT gateway, an order is generated. After you complete the payment in the order center, the Internet NAT gateway is upgraded.
  * - **ModifyNatGatewaySpec** is an asynchronous operation. After you make a request, the ID of the request is returned but the Internet NAT gateway is not upgraded. The system upgrades the NAT gateway in the background. You can call the [DescribeNatGateways](/help/en/virtual-private-cloud/latest/describenatgateways) operation to query the status of an Internet NAT gateway.    - If an Internet NAT gateway is in the **Modifying** state, the NAT gateway is being upgraded. In this case, you can only query the NAT gateway but cannot perform other operations.
  *   - If an Internet NAT gateway is in the **Available** state, the Internet NAT gateway is upgraded.
  * - You cannot repeatedly call the **ModifyNatGatewaySpec** operation to resize a pay-by-specification NAT gateway.
  * Internet NAT gateways are available in different sizes. The size of an Internet NAT gateway determines the SNAT performance, which includes the maximum number of connections and the number of new connections per second. However, the size of a NAT gateway does not affect the data throughput. The following table describes the correlations between different sizes of Internet NAT gateways and SNAT performance metrics.  
  * | Size | Maximum number of connections | Number of new connections per second |
  * | ---- | ----------------------------- | ------------------------------------ |
  * | Small | 10,000 | 1,000 |
  * | Medium | 50,000 | 5,000 |
  * | Large | 200,000 | 10,000 |
  * @param request  the request parameters of ModifyNatGatewaySpec  ModifyNatGatewaySpecRequest
  * @return ModifyNatGatewaySpecResponse
 */
async function modifyNatGatewaySpec(request: ModifyNatGatewaySpecRequest): ModifyNatGatewaySpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNatGatewaySpec', 'POST', '/', 'json', false, 'json', request);
}

model ModifyNatIpAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request.

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. If the request passes the precheck, a 2xx HTTP status code is returned and the name and description of the NAT IP address are modified.', example='false', position='Query'),
  natIpDescription?: string(name='NatIpDescription', description='The description of the NAT IP address that you want to modify.

The description must be 2 to 256 characters in length and start with a letter. The description cannot start with `http://` or `https://`.', example='test', position='Query'),
  natIpId: string(name='NatIpId', description='The ID of the NAT IP address that you want to modify.

This parameter is required.', example='vpcnatip-gw8e1n11f44wpg****', position='Query'),
  natIpName?: string(name='NatIpName', description='The name of the NAT IP address that you want to modify.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter. The name must start with a letter and cannot start with `http://` or `https://`.', example='newname', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the NAT gateway to which the NAT IP address that you want to modify belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='eu-central-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyNatIpAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='6CC9456C-2E29-452A-9180-B6926E51B5CA'),
}

model ModifyNatIpAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNatIpAttributeResponseBody(name='body'),
}

/**
  * @description ## [](#)Description
  * You cannot repeatedly call the **ModifyNatIpAttribute** operation to modify the name and description of a NAT IP address within the specified period of time.
  * @param request  the request parameters of ModifyNatIpAttribute  ModifyNatIpAttributeRequest
  * @return ModifyNatIpAttributeResponse
 */
async function modifyNatIpAttribute(request: ModifyNatIpAttributeRequest): ModifyNatIpAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNatIpAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyNatIpCidrAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  natGatewayId: string(name='NatGatewayId', description='The ID of the Virtual Private Cloud (VPC) NAT gateway to which the NAT CIDR block belongs.

This parameter is required.', example='ngw-gw8v16wgvtq26vh59****', position='Query'),
  natIpCidr: string(name='NatIpCidr', description='The NAT CIDR block whose name and description you want to modify.

This parameter is required.', example='172.16.0.0/24', position='Query'),
  natIpCidrDescription?: string(name='NatIpCidrDescription', description='The new description of the NAT CIDR block.

The description must be 2 to 256 characters in length. The description must start with a letter but cannot start with `http://` or `https://`.', example='newtest', position='Query'),
  natIpCidrName?: string(name='NatIpCidrName', description='The new name of the NAT CIDR block.

The name must be 2 to 128 characters in length, and can contain digits, periods (.), underscores (_), and hyphens (-). It must start with a letter.', example='newname', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the NAT gateway to which the NAT CIDR block belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='eu-central-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyNatIpCidrAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model ModifyNatIpCidrAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNatIpCidrAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyNatIpCidrAttribute  ModifyNatIpCidrAttributeRequest
  * @return ModifyNatIpCidrAttributeResponse
 */
async function modifyNatIpCidrAttribute(request: ModifyNatIpCidrAttributeRequest): ModifyNatIpCidrAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNatIpCidrAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyNetworkAclAttributesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The description of the network ACL.

The description must be 1 to 256 characters in length, and cannot start with `http://` or `https://`.', example='This is my NetworkAcl.', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**: performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  networkAclId: string(name='NetworkAclId', description='The ID of the network ACL.

This parameter is required.', example='acl-bp1lhl0taikrxxxxxxxx', position='Query'),
  networkAclName?: string(name='NetworkAclName', description='The name of the network ACL.

The name must be 1 to 128 characters in length, and cannot start with `http://` or `https://`.', example='acl-1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the network ACL.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyNetworkAclAttributesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='8F76C3E4-B39F-465D-B8B3-50BAF03CA833'),
}

model ModifyNetworkAclAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNetworkAclAttributesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyNetworkAclAttributes  ModifyNetworkAclAttributesRequest
  * @return ModifyNetworkAclAttributesResponse
 */
async function modifyNetworkAclAttributes(request: ModifyNetworkAclAttributesRequest): ModifyNetworkAclAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNetworkAclAttributes', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPhysicalConnectionAttributeRequest {
  circuitCode?: string(name='CircuitCode', description='The circuit code of the Express Connect circuit. The circuit code is provided by the connectivity provider.', example='longtel001', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='efefe566754h', position='Query'),
  description?: string(name='Description', description='The description of the Express Connect circuit.

The description must be 2 to 256 characters in length. It must start with a letter but cannot start with `http://` or `https://`.', example='The description of the Express Connect circuit.', position='Query'),
  lineOperator?: string(name='LineOperator', description='The connectivity provider of the Express Connect circuit. Valid values:

*   **CT**: China Telecom
*   **CU**: China Unicom
*   **CM**: China Mobile
*   **CO**: other connectivity providers in the Chinese mainland
*   **Equinix**: Equinix
*   **Other**: other connectivity providers outside the Chinese mainland', example='CT', position='Query'),
  name?: string(name='Name', description='The name of the Express Connect circuit.

The name must be 2 to 128 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter but cannot start with `http://` or `https://`.', example='Name', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerLocation?: string(name='PeerLocation', description='The geographical location of the data center.', example='XX Number, XX Road, XX Town, XX District, Hangzhou City, Zhejiang Province.', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', description='The ID of the Express Connect circuit.

This parameter is required.', example='pc-119mfjzm******', position='Query'),
  portType?: string(name='PortType', description='The port type of the Express Connect circuit. Valid values:

*   **100Base-T**: 100 Mbit/s copper Ethernet port
*   **1000Base-T** (default): 1,000 Mbit/s copper Ethernet port
*   **1000Base-LX**: 1,000 Mbit/s single-mode optical port (10 kilometers)
*   **10GBase-T**: 10,000 Mbit/s copper Ethernet port
*   **10GBase-LR**: 10,000 Mbit/s single-mode optical port (10 kilometers)
*   **40GBase-LR**: 40,000 Mbit/s single-mode optical port
*   **100GBase-LR**: 100,000 Mbit/s single-mode optical port

>  To use ports 40GBase-LR and 100GBase-LR, you must first contact your account manager.', example='1000Base-LX', position='Query'),
  redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId', description='The ID of the redundant Express Connect circuit. The redundant Express Connect circuit must be in the **Allocated**, **Confirmed**, or **Enabled** state.', example='pc-119mfjzm7', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Express Connect circuit.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  bandwidth?: int32(name='bandwidth', description='The bandwidth value for the connection over the Express Connect circuit. Unit: Mbit/s. Valid values: 2 to 10240.', example='5', position='Query'),
}

model ModifyPhysicalConnectionAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='013EE132-A109-4247-91B0-099A8FF49AD7'),
}

model ModifyPhysicalConnectionAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPhysicalConnectionAttributeResponseBody(name='body'),
}

/**
  * @description When you call this operation, take note of the following limits:
  * *   If an Express Connect circuit is in the **Initial**, **Enabled**, or **Rejected** state, you can modify the specifications of the Express Connect circuit and the ID of the redundant circuit.
  * *   If an Express Connect circuit is in the **Canceled**, **Allocating**, **AllocationFailed**, or **Terminated** state, you cannot modify the specifications of the Express Connect circuit.
  * *   After you modify the specifications of an Express Connect circuit that is in the **Rejected** state, the Express Connect circuit enters the **Initial** state.
  * @param request  the request parameters of ModifyPhysicalConnectionAttribute  ModifyPhysicalConnectionAttributeRequest
  * @return ModifyPhysicalConnectionAttributeResponse
 */
async function modifyPhysicalConnectionAttribute(request: ModifyPhysicalConnectionAttributeRequest): ModifyPhysicalConnectionAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPhysicalConnectionAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRouteEntryRequest {
  description?: string(name='Description', description='The description of the route entry.

The description must be 1 to 256 characters in length, and cannot start with `http://` or `https://`.', example='EntryDescription', position='Query'),
  destinationCidrBlock?: string(name='DestinationCidrBlock', description='The destination CIDR block of the route entry. Only IPv4 CIDR blocks, IPv6 CIDR blocks, and prefix lists are supported.', example='192.168.0.0/24', position='Query'),
  newNextHopId?: string(name='NewNextHopId', description='The ID of the new next hop instance.', example='eni-bp17y37ytsenqyim****', position='Query'),
  newNextHopType?: string(name='NewNextHopType', description='The new next hop type of the route.', example='NetworkInterface', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the route belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeEntryId?: string(name='RouteEntryId', description='The ID of the custom route entry.', example='rte-acfvgfsghfdd****', position='Query'),
  routeEntryName?: string(name='RouteEntryName', description='The name of the route entry.

The name must be 1 to 128 characters in length, and cannot start with `http://` or `https://`.', example='EntryName', position='Query'),
  routeTableId?: string(name='RouteTableId', description='The ID of the route table to which the route entry belongs.', example='vtb-bp1nk7zk65du3pni8z9td', position='Query'),
}

model ModifyRouteEntryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='861E6630-AEC0-4B2D-B214-6CB5E44B7F04'),
}

model ModifyRouteEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyRouteEntryResponseBody(name='body'),
}

/**
  * @description You cannot repeatedly call the **ModifyRouteEntry** operation to modify the name and description of a custom route within the specified period of time.
  * @param request  the request parameters of ModifyRouteEntry  ModifyRouteEntryRequest
  * @return ModifyRouteEntryResponse
 */
async function modifyRouteEntry(request: ModifyRouteEntryRequest): ModifyRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRouteTableAttributesRequest {
  description?: string(name='Description', description='The description of the route table.

The description must be 1 to 256 characters in length, and cannot start with `http://` or `https://`.', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the virtual private cloud (VPC) to which the custom route table belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routePropagationEnable?: boolean(name='RoutePropagationEnable', position='Query'),
  routeTableId: string(name='RouteTableId', description='The ID of the route table.

This parameter is required.', example='vtb-bp145q7glnuzdvzu2****', position='Query'),
  routeTableName?: string(name='RouteTableName', description='The name of the route table.

The name must be 1 to 128 characters in length and cannot start with `http://` or `https://`.', example='doctest', position='Query'),
}

model ModifyRouteTableAttributesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='62172DD5-6BAC-45DF-8D44'),
}

model ModifyRouteTableAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyRouteTableAttributesResponseBody(name='body'),
}

/**
  * @description You cannot repeatedly call the **ModifyRouteTableAttributes** operation to modify the name and description of a route table within the specified period of time.
  * @param request  the request parameters of ModifyRouteTableAttributes  ModifyRouteTableAttributesRequest
  * @return ModifyRouteTableAttributesResponse
 */
async function modifyRouteTableAttributes(request: ModifyRouteTableAttributesRequest): ModifyRouteTableAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRouteTableAttributes', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRouterInterfaceAttributeRequest {
  deleteHealthCheckIp?: boolean(name='DeleteHealthCheckIp', description='Specifies whether to delete the health check IP addresses configured on the router interface. Valid values:

*   **true**
*   **false** (default)', example='false', position='Query'),
  description?: string(name='Description', description='The description of the router interface.

The value must be 2 to 256 characters in length. It must start with a letter but cannot start with `http://` or `https://`.', example='The description of the router interface.', position='Query'),
  hcRate?: int32(name='HcRate', description='The rate of health checks. Unit: milliseconds. The recommended value is **2000**. This value specifies the interval at which probe packets are sent during a health check.

In this example, **HcThreshold** is set to **8** and **HcRate** is set to **2000**. In this example, probe packets are sent from **HealthCheckSourceIp** (source address) to **HealthCheckTargetIp** (destination address) every 2,000 seconds. If no response is returned for eight consecutive times, the health check fails.', example='2000', position='Query'),
  hcThreshold?: int32(name='HcThreshold', description='The healthy threshold. Unit: packets. We recommend that you set the value to **8**. This value specifies the number of probe packets that are sent during a health check.', example='8', position='Query'),
  healthCheckSourceIp?: string(name='HealthCheckSourceIp', description='The source IP address that is used to perform health checks. The source IP address must be an idle IP address of the local virtual private cloud (VPC).

>  You can set this parameter when an Express Connect circuit is used.', example='116.62.XX.XX', position='Query'),
  healthCheckTargetIp?: string(name='HealthCheckTargetIp', description='The destination IP address that is used to perform health checks.

>  This parameter is required when **HealthCheckSourceIp** is specified.', example='116.62.XX.XX', position='Query'),
  name?: string(name='Name', description='The name of the router interface.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (_), and hyphens (-). The name must start with a letter.', example='TEST', position='Query'),
  oppositeInterfaceId?: string(name='OppositeInterfaceId', description='The ID of the peer router interface.', example='ri-2zeo3xzyf38r4urz****', position='Query'),
  oppositeInterfaceOwnerId?: long(name='OppositeInterfaceOwnerId', description='The ID of the Alibaba Cloud account to which the peer router interface belongs.', example='28768383240243****', position='Query'),
  oppositeRouterId?: string(name='OppositeRouterId', description='The ID of the peer router.', example='vrt-bp1jcg5cmxjbl9xgc****', position='Query'),
  oppositeRouterType?: string(name='OppositeRouterType', description='The type of router to which the peer router interface belongs. Valid values:

*   **VRouter**
*   **VBR** (default)', example='VBR', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the router interface.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerInterfaceId: string(name='RouterInterfaceId', description='The ID of the router interface.

This parameter is required.', example='ri-2zeo3xzyf38r4urz****', position='Query'),
}

model ModifyRouterInterfaceAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model ModifyRouterInterfaceAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyRouterInterfaceAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyRouterInterfaceAttribute  ModifyRouterInterfaceAttributeRequest
  * @return ModifyRouterInterfaceAttributeResponse
 */
async function modifyRouterInterfaceAttribute(request: ModifyRouterInterfaceAttributeRequest): ModifyRouterInterfaceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRouterInterfaceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRouterInterfaceSpecRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the router interface is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerInterfaceId: string(name='RouterInterfaceId', description='The ID of the router interface.

This parameter is required.', example='ri-2zeo3xzyf38r4urzd****', position='Query'),
  spec: string(name='Spec', description='The specification of the router interface. Valid specifications and bandwidth values:

*   **Mini.2**: 2 Mbit/s
*   **Mini.5**: 5 Mbit/s
*   **Small.1**: 10 Mbit/s
*   **Small.2**: 20 Mbit/s
*   **Small.5**: 50 Mbit/s
*   **Middle.1**: 100 Mbit/s
*   **Middle.2**: 200 Mbit/s
*   **Middle.5**: 500 Mbit/s
*   **Large.1**: 1,000 Mbit/s
*   **Large.2**: 2,000 Mbit/s
*   **Large.5**: 5,000 Mbit/s
*   **Xlarge.1**: 10,000 Mbit/s

>  When **Role** is set to **AcceptingSide**, set **Spec** to **Negative**.

This parameter is required.', example='Small.1', position='Query'),
}

model ModifyRouterInterfaceSpecResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  spec?: string(name='Spec', description='The specification of the router interface. Valid values:

*   **Mini.2**: 2 Mbit/s
*   **Mini.5**: 5 Mbit/s
*   **Small.1**: 10 Mbit/s
*   **Small.2**: 20 Mbit/s
*   **Small.5**: 50 Mbit/s
*   **Middle.1**: 100 Mbit/s
*   **Middle.2**: 200 Mbit/s
*   **Middle.5**: 500 Mbit/s
*   **Large.1**: 1,000 Mbit/s
*   **Large.2**: 2,000 Mbit/s
*   **Large.5**: 5,000 Mbit/s
*   **Xlarge.1**: 10,000 Mbit/s', example='Small.1'),
}

model ModifyRouterInterfaceSpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyRouterInterfaceSpecResponseBody(name='body'),
}

/**
  * @description After you call this operation, the router interface enters the **Activating** state. After the router interface is activated, the router interface enters the **Active** state.
  * >  You cannot modify the specification of a router interface that has overdue payments.
  * @param request  the request parameters of ModifyRouterInterfaceSpec  ModifyRouterInterfaceSpecRequest
  * @return ModifyRouterInterfaceSpecResponse
 */
async function modifyRouterInterfaceSpec(request: ModifyRouterInterfaceSpecRequest): ModifyRouterInterfaceSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRouterInterfaceSpec', 'POST', '/', 'json', false, 'json', request);
}

model ModifySnatEntryRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  eipAffinity?: int32(name='EipAffinity', position='Query'),
  networkInterfaceId?: string(name='NetworkInterfaceId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the NAT gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to obtain the region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  snatEntryId: string(name='SnatEntryId', description='The ID of the SNAT entry that you want to modify.

This parameter is required.', example='snat-bp1vcgcf8tm0plqcg****', position='Query'),
  snatEntryName?: string(name='SnatEntryName', description='The name of the SNAT entry.

The name must be 2 to 128 characters in length. It must start with a letter but cannot start with `http://` or `https://`.', example='SnatEntry-1', position='Query'),
  snatIp?: string(name='SnatIp', description='*   The elastic IP addresses (EIPs) specified in the SNAT entry when you modify an SNAT entry of an Internet NAT gateway. Separate EIPs with commas (,).

    If you select multiple EIPs to create an SNAT address pool, connections are hashed to these EIPs. Network traffic may not be evenly distributed to the EIPs because the amount of traffic passes through each connection varies. We recommend that you associate these EIPs with the same EIP bandwidth plan to prevent service interruptions due to the bandwidth limit of an individual EIP.

*   When you modify an SNAT entry of a VPC NAT gateway, this parameter specifies the NAT IP address in the SNAT entry.', example='47.98.XX.XX', position='Query'),
  snatTableId: string(name='SnatTableId', description='The ID of the SNAT table to which the SNAT entry belongs.

This parameter is required.', example='stb-8vbczigrhop8x5u3t****', position='Query'),
}

model ModifySnatEntryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='2315DEB7-5E92-423A-91F7-4C1EC9AD97C3'),
}

model ModifySnatEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySnatEntryResponseBody(name='body'),
}

/**
  * @description ## [](#)
  * **ModifySnatEntry** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeSnatTableEntries](https://help.aliyun.com/document_detail/42677.html) operation to query the status of the task.
  * *   **Pending**: indicates that the system is modifying the SNAT entry. You can only query the status of the SNAT entry, but cannot perform other operations.
  * *   **Available**: indicates that the SNAT entry is modified.
  * >  If an SNAT entry is in the **Pending** state, it indicates that you cannot modify the SNAT entry.
  * You cannot repeatedly call the **ModifySnatEntry** operation to modify an SNAT entry within a specific period of time.
  * @param request  the request parameters of ModifySnatEntry  ModifySnatEntryRequest
  * @return ModifySnatEntryResponse
 */
async function modifySnatEntry(request: ModifySnatEntryRequest): ModifySnatEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySnatEntry', 'POST', '/', 'json', false, 'json', request);
}

model ModifySslVpnClientCertRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  name?: string(name='Name', description='The new name of the SSL client certificate. This parameter cannot be left empty.

The name must be 1 to 100 characters in length and cannot start with `http://` or `https://`.', example='cert2', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the SSL client certificate is created.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sslVpnClientCertId: string(name='SslVpnClientCertId', description='The ID of the SSL client certificate.

This parameter is required.', example='vsc-bp1n8wcf134yl0osrc****', position='Query'),
}

model ModifySslVpnClientCertResponseBody = {
  name?: string(name='Name', description='The name of the SSL client certificate.', example='cert2'),
  requestId?: string(name='RequestId', description='The request ID.', example='606998F0-B94D-48FE-8316-ACA81BB230DA'),
  sslVpnClientCertId?: string(name='SslVpnClientCertId', description='The ID of the SSL client certificate.', example='vsc-bp1n8wcf134yl0osr****'),
}

model ModifySslVpnClientCertResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySslVpnClientCertResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifySslVpnClientCert  ModifySslVpnClientCertRequest
  * @return ModifySslVpnClientCertResponse
 */
async function modifySslVpnClientCert(request: ModifySslVpnClientCertRequest): ModifySslVpnClientCertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySslVpnClientCert', 'POST', '/', 'json', false, 'json', request);
}

model ModifySslVpnServerRequest {
  cipher?: string(name='Cipher', description='The encryption algorithm that is used in the SSL-VPN connection. Valid values:

*   **AES-128-CBC** (default)
*   **AES-192-CBC**
*   **AES-256-CBC**
*   **none**', example='AES-128-CBC', position='Query'),
  clientIpPool?: string(name='ClientIpPool', description='The client IP address pool.', example='10.30.30.0/24', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** is different for each request.', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  compress?: boolean(name='Compress', description='Specifies whether to enable data compression. Valid values:

*   **true** (default)
*   **false**', example='true', position='Query'),
  enableMultiFactorAuth?: boolean(name='EnableMultiFactorAuth', description='Specifies whether to enable two-factor authentication. If you enable two-factor authentication, you must also specify an IDaaS instance ID. Valid values:

*   **true**
*   **false**

> *   Two-factor authentication supports only IDaaS instances of earlier versions. If you do not have and cannot create IDaaS instances of earlier versions, you cannot enable two-factor authentication.
> *   For existing SSL servers, if two-factor authentication is already enabled, you can continue to use two-factor authentication.', example='false', position='Query'),
  iDaaSApplicationId?: string(name='IDaaSApplicationId', example='app_my6g4qmvnwxzj2f****', position='Query'),
  iDaaSInstanceId?: string(name='IDaaSInstanceId', description='The ID of the Identity as a Service (IDaaS) instance.', example='idaas-cn-hangzhou-****', position='Query'),
  iDaaSRegionId?: string(name='IDaaSRegionId', description='The ID of the region where the IDaaS instance is created.', example='cn-hangzhou', position='Query'),
  localSubnet?: string(name='LocalSubnet', description='The CIDR block of the client.', example='10.20.20.0/24', position='Query'),
  name?: string(name='Name', description='The name of the SSL server.

The name must be 1 to 100 characters in length and cannot start with `http://` or `https://`.', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  port?: int32(name='Port', description='The port that is used by the SSL server. Valid values of port numbers: **1** to **65535**. Default value: **1194**.

The following ports are not supported: **22**, **2222**, **22222**, **9000**, **9001**, **9002**, **7505**, **80**, **443**, **53**, **68**, **123**, **4510**, **4560**, **500**, and **4500**.', example='1194', position='Query'),
  proto?: string(name='Proto', description='The protocol that is used by the SSL server. Valid values:

*   **TCP** (default)
*   **UDP**', example='UDP', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VPN gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sslVpnServerId: string(name='SslVpnServerId', description='The ID of the SSL server.

This parameter is required.', example='vss-bp18q7hzj6largv4v****', position='Query'),
}

model ModifySslVpnServerResponseBody = {
  cipher?: string(name='Cipher', description='The encryption algorithm.', example='AES-128-CBC'),
  clientIpPool?: string(name='ClientIpPool', description='The client IP address pool.', example='10.30.30.0/24'),
  compress?: boolean(name='Compress', description='Indicates whether data compression is enabled.', example='false'),
  connections?: int32(name='Connections', description='The total number of current connections.', example='0'),
  createTime?: long(name='CreateTime', description='The time when the SSL server was created.', example='1492753580000'),
  enableMultiFactorAuth?: boolean(name='EnableMultiFactorAuth', description='Indicates whether two-factor authentication is enabled.

*   **true**
*   **false** (default)', example='false'),
  iDaaSApplicationId?: string(name='IDaaSApplicationId', example='app_my6g4qmvnwxzj2f****'),
  iDaaSInstanceId?: string(name='IDaaSInstanceId', description='The ID of the IDaaS instance.', example='idaas-cn-hangzhou-****'),
  iDaaSInstanceVersion?: string(name='IDaaSInstanceVersion', example='EIAM 2.0'),
  internetIp?: string(name='InternetIp', description='The public IP address.', example='47.98.XX.XX'),
  localSubnet?: string(name='LocalSubnet', description='The CIDR block of the client.', example='10.20.20.0/24'),
  maxConnections?: int32(name='MaxConnections', description='The maximum number of connections.', example='5'),
  name?: string(name='Name', description='The name of the SSL server.', example='test'),
  port?: int32(name='Port', description='The port that is used by the SSL server.', example='1194'),
  proto?: string(name='Proto', description='The protocol that is used by the SSL server.', example='UDP'),
  regionId?: string(name='RegionId', description='The ID of the region where the SSL server is created.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The request ID.', example='DF11D6F6-E35A-41C3-9B20-6FC8A901FE65'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the SSL server belongs.

The SSL server and the VPN gateway associated with the SSL server belong to the same resource group. You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/158855.html) operation to query resource groups.', example='rg-acfmzs372yg****'),
  sslVpnServerId?: string(name='SslVpnServerId', description='The ID of the SSL server.', example='vss-bp18q7hzj6largv4v****'),
  vpnGatewayId?: string(name='VpnGatewayId', description='The ID of the VPN gateway.', example='vpn-bp1q8bgx4xnkm2ogj****'),
}

model ModifySslVpnServerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySslVpnServerResponseBody(name='body'),
}

/**
  * @description *   If you modify only the **name** of the SSL server, the operation is synchronous. If you also modify other configurations besides the **name**, the operation is asynchronous.
  * *   When **ModifySslVpnServer** is an asynchronous operation, the system returns a request ID and runs the task in the background. You can call [DescribeVpnGateway](https://help.aliyun.com/document_detail/2794055.html) to query the status of the task.
  *     *   If a VPN gateway is in the **updating** state, the configurations of the SSL server are being modified.
  *     *   If a VPN gateway is in the **active** state, the configurations of the SSL server are modified.
  * *   You cannot repeatedly call **ModifySslVpnServer** to modify the configurations of an SSL server within the specified period of time.
  * @param request  the request parameters of ModifySslVpnServer  ModifySslVpnServerRequest
  * @return ModifySslVpnServerResponse
 */
async function modifySslVpnServer(request: ModifySslVpnServerRequest): ModifySslVpnServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySslVpnServer', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTunnelAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the value of **RequestId** as the **client token**. The value of **RequestId** is different for each API request.', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the IPsec connection is established.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the region ID.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tunnelId: string(name='TunnelId', description='The tunnel ID.

This parameter is required.', example='tun-gbyz2e070xzo93****', position='Query'),
  tunnelOptionsSpecification?: {
    customerGatewayId?: string(name='CustomerGatewayId'),
    enableDpd?: boolean(name='EnableDpd', description='Specifies whether to enable the dead peer detection (DPD) feature. Valid values:

*   **true**: DPD is enabled. The IPsec initiator sends DPD packets to verify the existence and availability of the IPsec peer. If no response is received from the peer within a specified period of time, the IPsec peer is considered disconnected. Then, the ISAKMP SA, IPsec SA, and IPsec tunnel are deleted.
*   **false**: DPD is disabled. The IPsec initiator does not send DPD packets.', example='true'),
    enableNatTraversal?: boolean(name='EnableNatTraversal', description='Specifies whether to enable NAT traversal. Valid values:

*   **true**: NAT traversal is enabled. After NAT traversal is enabled, the initiator does not check the UDP ports during Internet Key Exchange (IKE) negotiations and can automatically discover NAT gateway devices along the IPsec-VPN tunnel.
*   **false**: NAT traversal is disabled.', example='true'),
    remoteCaCertificate?: string(name='RemoteCaCertificate', description='The peer certificate authority (CA) certificate when you want to attach the IPsec connection to a virtual private network (VPN) gateway that uses a ShangMi (SM) certificate.', example='-----BEGIN CERTIFICATE----- MIIB7zCCAZW**** -----END CERTIFICATE-----'),
    tunnelBgpConfig?: {
      localAsn?: long(name='LocalAsn', description='The local autonomous system number (ASN). Valid values: **1** to **4294967295**.', example='65530'),
      localBgpIp?: string(name='LocalBgpIp', description='The BGP IP address of the tunnel. The IP address must fall into the **CIDR block** of the tunnel.', example='169.254.11.1'),
      tunnelCidr?: string(name='TunnelCidr', description='The CIDR block of the tunnel.

The CIDR block must fall into 169.254.0.0/16. The subnet mask of the CIDR block must be 30 bits in length.', example='169.254.11.0/30'),
    }(name='TunnelBgpConfig', description='The Border Gateway Protocol (BGP) configurations of the tunnel.

If the BGP feature is not enabled for the tunnel, you must call the [ModifyVpnConnectionAttribute](https://help.aliyun.com/document_detail/120381.html) operation to enable the BGP feature for the tunnel and configure BGP.'),
    tunnelIkeConfig?: {
      ikeAuthAlg?: string(name='IkeAuthAlg', description='The authentication algorithm that is used in IKE Phase 1 negotiations.

*   Valid values when the IPsec connection is attached to a standard VPN gateway: **md5**, **sha1**, **sha256**, **sha384**, and **sha512**.
*   Valid values when the IPsec connection is attached to a VPN gateway that uses an SM certificate: **sm3**.', example='sha1'),
      ikeEncAlg?: string(name='IkeEncAlg', description='The encryption algorithm that is used in IKE Phase 1 negotiations.

*   Valid values when the IPsec connection is attached to a standard VPN gateway: **aes**, **aes192**, **sha256**, **des**, and **3des**.
*   Valid values when the IPsec connection is attached to a VPN gateway that uses an SM certificate: **sm4**.', example='aes'),
      ikeLifetime?: long(name='IkeLifetime', description='The SA lifetime that is used in IKE Phase 1 negotiations. Unit: seconds. Valid values: **0 to 86400**.', example='86400'),
      ikeMode?: string(name='IkeMode', description='The IKE negotiation mode. Valid values:

*   **main:** This mode offers higher security during negotiations.
*   **aggressive:** This mode is faster and has a higher success rate.', example='main'),
      ikePfs?: string(name='IkePfs', description='The Diffie-Hellman (DH) key exchange algorithm that is used in IKE Phase 1 negotiations. Valid values: **group1**, **group2**, **group5**, and **group14**.', example='group2'),
      ikeVersion?: string(name='IkeVersion', description='The IKE version. Valid values: **ikev1** and **ikev2**.', example='ikev2'),
      localId?: string(name='LocalId', description='The tunnel identifier. The identifier can be up to 100 characters in length, and supports fully qualified domain names (FQDNs) and IP addresses. The default identifier is the tunnel IP address.', example='47.XX.XX.87'),
      psk?: string(name='Psk', description='The pre-shared key that is used to verify identities between the tunnel and peer.

*   It must be 1 to 100 characters in length, and can contain letters, digits, and the following characters: ``~!`@#$%^&*()_-+={}[]|;:\\",.<>/?``
*   If you do not specify a pre-shared key, the system generates a random 16-character string as the pre-shared key. You can call the [DescribeVpnConnection](https://help.aliyun.com/document_detail/120374.html) operation to query the pre-shared key that is generated by the system.

>  The pre-shared key that is configured for the tunnel and the tunnel peer must be the same. Otherwise, the system cannot establish the tunnel.', example='123456****'),
      remoteId?: string(name='RemoteId', description='The peer identifier. The identifier can be up to 100 characters in length, and supports FQDNs and IP addresses. The default identifier is the IP address of the customer gateway associated with the tunnel.', example='47.XX.XX.207'),
    }(name='TunnelIkeConfig', description='The configurations of IKE Phase 1.'),
    tunnelIpsecConfig?: {
      ipsecAuthAlg?: string(name='IpsecAuthAlg', description='The authentication algorithm that is used in IPsec Phase 2 negotiations.

*   Valid values when the IPsec connection is attached to a standard VPN gateway: **md5**, **sha1**, **sha256**, **sha384**, and **sha512**.
*   Valid values when the IPsec connection is attached to a VPN gateway that uses an SM certificate: **sm3**.', example='sha1'),
      ipsecEncAlg?: string(name='IpsecEncAlg', description='The encryption algorithm that is used in IPsec Phase 2 negotiations.

*   Valid values when the IPsec connection is attached to a standard VPN gateway: **aes**, **aes192**, **sha256**, **des**, and **3des**.
*   Valid values when the IPsec connection is attached to a VPN gateway that uses an SM certificate: **sm4**.', example='aes'),
      ipsecLifetime?: long(name='IpsecLifetime', description='The SA lifetime that is used in IPsec Phase 2 negotiations. Unit: seconds. Valid values: **0 to 86400**.', example='86400'),
      ipsecPfs?: string(name='IpsecPfs', description='The DH key exchange algorithm that is used in IPsec Phase 2 negotiations. Valid values: **disabled**, **group1**, **group2**, **group5**, and **group14**.', example='group2'),
    }(name='TunnelIpsecConfig', description='The configurations of IPsec Phase 2.'),
  }(name='TunnelOptionsSpecification', description='The tunnel configurations.', position='Query'),
  vpnConnectionId: string(name='VpnConnectionId', description='The ID of the IPsec connection.

This parameter is required.', example='vco-gw69vm1i71y354****', position='Query'),
}

model ModifyTunnelAttributeResponseBody = {
  customerGatewayId?: string(name='CustomerGatewayId', description='The ID of the customer gateway associated with the customer gateway.', example='cgw-p0wx48ayhrygitm80****'),
  enableDpd?: boolean(name='EnableDpd', description='Indicates whether DPD is enabled. Valid values:

*   **false**
*   **true**', example='true'),
  enableNatTraversal?: boolean(name='EnableNatTraversal', description='Indicates whether NAT traversal is enabled. Valid values:

*   **false**
*   **true**', example='true'),
  internetIp?: string(name='InternetIp', description='The tunnel IP address.', example='47.XX.XX.87'),
  remoteCaCertificate?: string(name='RemoteCaCertificate', description='The peer CA certificate when a VPN gateway that uses an SM certificate is used to create the IPsec connection.', example='-----BEGIN CERTIFICATE----- MIIB7zCCAZW**** -----END CERTIFICATE-----'),
  requestId?: string(name='RequestId', description='The request ID.', example='E6F36FF0-9544-3AEE-8673-A4647D50064C'),
  role?: string(name='Role', description='The tunnel role. Valid values:

*   **master**
*   **slave**', example='master'),
  state?: string(name='State', description='The tunnel status. Valid values:

*   **active**
*   **updating**
*   **deleting**', example='active'),
  tunnelBgpConfig?: {
    enableBgp?: boolean(name='EnableBgp', description='Indicates whether the BGP feature is enabled. Valid values:

*   **true**
*   **false**', example='true'),
    localAsn?: long(name='LocalAsn', description='The local ASN.', example='65530'),
    localBgpIp?: string(name='LocalBgpIp', description='The BGP IP address of the tunnel.', example='169.254.11.1'),
    peerAsn?: long(name='PeerAsn', description='The peer ASN.', example='65531'),
    peerBgpIp?: string(name='PeerBgpIp', description='The BGP IP address of the peer.', example='169.254.11.2'),
    tunnelCidr?: string(name='TunnelCidr', description='The CIDR block to which the tunnel BGP IP address belongs.', example='169.254.11.0/30'),
  }(name='TunnelBgpConfig', description='The BGP configuration.'),
  tunnelId?: string(name='TunnelId', description='The tunnel ID.', example='tun-gbyz2e070xzo93****'),
  tunnelIkeConfig?: {
    ikeAuthAlg?: string(name='IkeAuthAlg', description='The IKE authentication algorithm.', example='sha1'),
    ikeEncAlg?: string(name='IkeEncAlg', description='The IKE encryption algorithm.', example='aes'),
    ikeLifetime?: long(name='IkeLifetime', description='The IKE lifetime. Unit: seconds.', example='86400'),
    ikeMode?: string(name='IkeMode', description='The IKE negotiation mode.

*   **main:** This mode offers higher security during negotiations.
*   **aggressive**: This mode is faster and has a higher success rate.', example='main'),
    ikePfs?: string(name='IkePfs', description='The DH group.', example='group2'),
    ikeVersion?: string(name='IkeVersion', description='The IKE version.

*   **ikev1**
*   **ikev2**

Compared with IKEv1, IKEv2 simplifies the SA negotiation process and provides better support for scenarios with multiple CIDR blocks.', example='ikev2'),
    localId?: string(name='LocalId', description='The tunnel identifier. The identifier supports FQDNs and IP addresses. The default value is the tunnel IP address.', example='47.XX.XX.87'),
    psk?: string(name='Psk', description='The pre-shared key.', example='123456****'),
    remoteId?: string(name='RemoteId', description='The peer identifier. The identifier supports FQDNs and IP addresses. The default identifier is the IP address of the customer gateway associated with the tunnel.', example='47.XX.XX.207'),
  }(name='TunnelIkeConfig', description='The Phase 1 configuration.'),
  tunnelIpsecConfig?: {
    ipsecAuthAlg?: string(name='IpsecAuthAlg', description='The IPsec authentication algorithm.', example='sha1'),
    ipsecEncAlg?: string(name='IpsecEncAlg', description='The IPsec encryption algorithm.', example='aes'),
    ipsecLifetime?: long(name='IpsecLifetime', description='The IPsec lifetime. Unit: seconds.', example='86400'),
    ipsecPfs?: string(name='IpsecPfs', description='The DH group.', example='group2'),
  }(name='TunnelIpsecConfig', description='The configurations of IPsec Phase 2.'),
  zoneNo?: string(name='ZoneNo', description='The tunnel zone.', example='cn-hangzhou-h'),
}

model ModifyTunnelAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTunnelAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyTunnelAttribute  ModifyTunnelAttributeRequest
  * @return ModifyTunnelAttributeResponse
 */
async function modifyTunnelAttribute(request: ModifyTunnelAttributeRequest): ModifyTunnelAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTunnelAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVRouterAttributeRequest {
  description?: string(name='Description', description='The description of the vRouter.

The description must be 1 to 256 characters in length, and cannot start with `http://` or `https://`.', example='My VRouter', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the vRouter.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vRouterId: string(name='VRouterId', description='The vRouter ID.

This parameter is required.', example='vrt-gw0p7zigake75znix****', position='Query'),
  vRouterName?: string(name='VRouterName', description='The name of the vRouter.

The name must be 1 to 128 characters in length and cannot start with `http://` or `https://`.', example='VRouter-1', position='Query'),
}

model ModifyVRouterAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model ModifyVRouterAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVRouterAttributeResponseBody(name='body'),
}

/**
  * @description You cannot repeatedly call the **ModifyVRouterAttribute** operation within a specific period of time.
  * @param request  the request parameters of ModifyVRouterAttribute  ModifyVRouterAttributeRequest
  * @return ModifyVRouterAttributeResponse
 */
async function modifyVRouterAttribute(request: ModifyVRouterAttributeRequest): ModifyVRouterAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVRouterAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVSwitchAttributeRequest {
  description?: string(name='Description', description='The new description for the vSwitch.

The description must be 1 to 256 characters in length and cannot start with `http://` or `https://`.', example='This is my vswitch.', position='Query'),
  enableIPv6?: boolean(name='EnableIPv6', description='Specifies whether to enable the IPv6 feature for the vSwitch. Valid values:

*   **true**: enables the IPv6 feature.
*   **false**: disables the IPv6 feature. This is the default value.', example='false', position='Query'),
  ipv6CidrBlock?: int32(name='Ipv6CidrBlock', description='The last eight bits of the IPv6 CIDR block of the vSwitch. Valid values: **0** to **255**.

You can set this parameter only when the IPv6 feature is enabled for the virtual private cloud (VPC) to which the vSwitch belongs.', example='10', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the vSwitch is deployed. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchId: string(name='VSwitchId', description='The ID of the vSwitch.

This parameter is required.', example='vsw-25nacdfvue4****', position='Query'),
  vSwitchName?: string(name='VSwitchName', description='The new name for the vSwitch.

The name must be 1 to 128 characters in length, and cannot start with `http://` or `https://`.', example='VSwitch-1', position='Query'),
  vpcIpv6CidrBlock?: string(name='VpcIpv6CidrBlock', description='The IPv6 CIDR block of the VPC to which the vSwitch belongs.

You can set this parameter only when the IPv6 feature is enabled for the VPC.', example='2408:XXXX:312:3e00::/56', position='Query'),
}

model ModifyVSwitchAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model ModifyVSwitchAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVSwitchAttributeResponseBody(name='body'),
}

/**
  * @description *   **ModifyVSwitchAttribute** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeVSwitchAttributes](https://help.aliyun.com/document_detail/94567.html) operation to query the status of the task:
  *     *   If the vSwitch is in the **Pending** state, the name and description of the vSwitch are being modified.
  *     *   If the vSwitch is in the **Available** state, the name and description of the vSwitch are modified.
  * *   You cannot repeatedly call the **ModifyVSwitchAttribute** operation to modify the name and description of a vSwitch within the specified period of time.
  * @param request  the request parameters of ModifyVSwitchAttribute  ModifyVSwitchAttributeRequest
  * @return ModifyVSwitchAttributeResponse
 */
async function modifyVSwitchAttribute(request: ModifyVSwitchAttributeRequest): ModifyVSwitchAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVSwitchAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVSwitchCidrReservationAttributeRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the vSwitch is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchCidrReservationDescription?: string(name='VSwitchCidrReservationDescription', description='The new description of the reserved CIDR block. The default value is empty.

The description must be 2 to 256 characters in length. It must start with a letter and cannot start with `http://` or `https://`.', example='ReservationDescription', position='Query'),
  vSwitchCidrReservationId: string(name='VSwitchCidrReservationId', description='The ID of the reserved CIDR block.

This parameter is required.', example='vcr-bp1m12saqteraw3rp****', position='Query'),
  vSwitchCidrReservationName?: string(name='VSwitchCidrReservationName', description='The new name of the reserved CIDR block.

The name must be 2 to 128 characters in length and can contain letters, digits, underscores (_), and hyphens (-). It must start with a letter.', example='ReservationName', position='Query'),
}

model ModifyVSwitchCidrReservationAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model ModifyVSwitchCidrReservationAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVSwitchCidrReservationAttributeResponseBody(name='body'),
}

/**
  * @description ## [](#)Usage notes
  * You cannot repeatedly call **ModifyVSwitchCidrReservationAttribute** within a specific time period.
  * @param request  the request parameters of ModifyVSwitchCidrReservationAttribute  ModifyVSwitchCidrReservationAttributeRequest
  * @return ModifyVSwitchCidrReservationAttributeResponse
 */
async function modifyVSwitchCidrReservationAttribute(request: ModifyVSwitchCidrReservationAttributeRequest): ModifyVSwitchCidrReservationAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVSwitchCidrReservationAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVcoRouteEntryWeightRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  newWeight: int32(name='NewWeight', description='The new weight of the destination-based route that you want to modify. Valid values:

*   **0**: a low priority
*   **100**: a high priority

This parameter is required.', example='0', position='Query'),
  nextHop: string(name='NextHop', description='The next hop of the destination-based route that you want to modify.

This parameter is required.', example='vco-p0w2jpkhi2eeop6q6****', position='Query'),
  overlayMode?: string(name='OverlayMode', description='The tunneling protocol. Set the value to **Ipsec**, which specifies the IPsec tunneling protocol.', example='Ipsec', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the IPsec-VPN connection is established.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeDest: string(name='RouteDest', description='The destination CIDR block of the destination-based route that you want to modify.

This parameter is required.', example='192.168.10.0/24', position='Query'),
  vpnConnectionId: string(name='VpnConnectionId', description='The ID of the IPsec-VPN connection.

This parameter is required.', example='vco-p0w2jpkhi2eeop6q6****', position='Query'),
  weight: int32(name='Weight', description='The current weight of the destination-based route that you want to modify. Valid values:

*   **0**: a low priority
*   **100**: a high priority

This parameter is required.', example='100', position='Query'),
}

model ModifyVcoRouteEntryWeightResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='9496F8A-82F4-3130-A51A-2266ACC799B4'),
}

model ModifyVcoRouteEntryWeightResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVcoRouteEntryWeightResponseBody(name='body'),
}

/**
  * @description *   **ModifyVcoRouteEntryWeight** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeVpnConnection](https://help.aliyun.com/document_detail/53046.html) operation to query the status of the associated IPsec-VPN connection and determine whether the weight of the specified destination-based route is modified.
  *     *   If the IPsec-VPN connection is in the **updating** state, the weight of the destination-based route is being modified.
  *     *   If the IPsec-VPN connection is in the **attached** state, the weight of the destination-based route is modified.
  * *   You cannot repeatedly call the **ModifyVcoRouteEntryWeight** operation for the same IPsec-VPN connection within the specified period of time.
  * @param request  the request parameters of ModifyVcoRouteEntryWeight  ModifyVcoRouteEntryWeightRequest
  * @return ModifyVcoRouteEntryWeightResponse
 */
async function modifyVcoRouteEntryWeight(request: ModifyVcoRouteEntryWeightRequest): ModifyVcoRouteEntryWeightResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVcoRouteEntryWeight', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVirtualBorderRouterAttributeRequest {
  associatedPhysicalConnections?: string(name='AssociatedPhysicalConnections', description='The information about the Express Connect circuit associated with the VBR, including the following parameters:

*   **CircuitCode**: the circuit code provided by the connectivity provider for the Express Connect circuit.
*   **LocalGatewayIp**: the IP address of the gateway device on the Alibaba Cloud side.
*   **PeerGatewayIp**: the IP address of the gateway device on the customer side.
*   **PeeringSubnetMask**: the subnet mask for the IP addresses of gateway devices on the Alibaba Cloud side and the customer side.
*   **PhysicalConnectionId**: the ID of the Express Connect circuit.', example='[   {     "CircuitCode ": "longtel001",     " LocalGatewayIp ": "192.168.XX.XX",     "PeerGatewayIp" : "192.168.XX.XX",     " PeeringSubnetMask ": "255.255.255.252",     " PhysicalConnectionId ": "pc-kojok19****"   } ]', position='Query'),
  bandwidth?: int32(name='Bandwidth', description='The bandwidth value. Unit: Mbit/s.', example='100', position='Query'),
  circuitCode?: string(name='CircuitCode', description='The circuit code of the Express Connect circuit. The circuit code is provided by the connectivity provider.

>  Only the owner of the Express Connect circuit can set this property.', example='longtel001', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44-00****', position='Query'),
  description?: string(name='Description', description='The description of the VBR.

It must be 2 to 256 characters in length. It must start with a letter but cannot start with `http://` or `https://`.', example='desc', position='Query'),
  detectMultiplier?: long(name='DetectMultiplier', description='The maximum number of dropped packets that is allowed by the receiver when the initiator transmits packets. This value can be used to check whether a connection works as expected.

Valid values: **3 to 10**.', example='3', position='Query'),
  enableIpv6?: boolean(name='EnableIpv6', description='Specifies whether to enable IPv6. Valid values:

*   **true**
*   **false** (default)', example='false', position='Query'),
  localGatewayIp?: string(name='LocalGatewayIp', description='The IP address of the VBR.

Only the owner of the VBR can set or modify this parameter.', example='192.168.XX.XX', position='Query'),
  localIpv6GatewayIp?: string(name='LocalIpv6GatewayIp', description='The IPv6 address of the VBR.', example='2001:XXXX:3c4d:0015:0000:0000:0000:1a2b', position='Query'),
  minRxInterval?: long(name='MinRxInterval', description='The time interval to receive BFD packets. Valid values: **200 to 1000**. Unit: milliseconds.', example='300', position='Query'),
  minTxInterval?: long(name='MinTxInterval', description='The time interval to send BFD packets. Valid values: **200 to 1000**. Unit: milliseconds.', example='300', position='Query'),
  name?: string(name='Name', description='The name of the VBR.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (_), and hyphens (-). The name must start with a letter. It cannot start with `http://` or `https://`.', example='VBR', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerGatewayIp?: string(name='PeerGatewayIp', description='The IP address of the gateway device in the data center.

Only the owner of the VBR can set or modify this parameter.', example='192.168.XX.X', position='Query'),
  peerIpv6GatewayIp?: string(name='PeerIpv6GatewayIp', description='The IPv6 address of the gateway device in the data center.

*   Only the owner of the VBR can set or modify this property.
*   This property is required when you create a VBR for the owner of the Express Connect circuit. You can ignore this property when you create a VBR for another Alibaba Cloud account.', example='2001:XXXX:3c4d:0015:0000:0000:0000:2a2b', position='Query'),
  peeringIpv6SubnetMask?: string(name='PeeringIpv6SubnetMask', description='The subnet mask of the IPv6 addresses of the VBR and the gateway device in the data center.

The two IPv6 addresses must fall within the same subnet.', example='2408:4004:cc:400::/56', position='Query'),
  peeringSubnetMask?: string(name='PeeringSubnetMask', description='The subnet mask for the IP addresses of the gateway devices on the Alibaba Cloud side and on the customer side. Only the owner of the VBR can set or modify this parameter.

The two IP addresses must fall within the same subnet.', example='255.255.255.252', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VBR.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sitelinkEnable?: boolean(name='SitelinkEnable', example='false', position='Query'),
  vbrId: string(name='VbrId', description='The VBR ID.

This parameter is required.', example='vbr-bp1lhl0taikrte****', position='Query'),
  vlanId?: int32(name='VlanId', description='The VLAN ID of the VBR. Valid values: **0 to 2999**.

>  This parameter is available only to Express Connect owners. The VLAN IDs of VBRs on the same Express Connect circuit must be unique.', example='0', position='Query'),
}

model ModifyVirtualBorderRouterAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='980960B0-2969-40BF-8542-EBB34FD358AB'),
}

model ModifyVirtualBorderRouterAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVirtualBorderRouterAttributeResponseBody(name='body'),
}

/**
  * @description # [](#)
  * *   Only the owner of an Express Connect circuit can modify the **VlanId** parameter.
  * *   One VLAN ID of an Express Connect circuit cannot be used only by one VBR at the same time.
  * *   The VLAN ID of a VBR in the **Terminated** state is reserved for seven days and cannot be used by other VBRs. The VLAN ID can be used by other VBRs after 7 days.
  * *   You cannot set **LocalGatewayIp**, **PeerGatewayIp**, or **PeeringSubnetMask** for VBRs that do not belong to your Alibaba Cloud account.
  * *   Set **PeeringSubnetMask** to a subnet mask with 24 to 30 bits in length (255.255.255.0～255.255.255.252).
  * *   Set **LocalGatewayIp** and **PeerGatewayIp** to IP addresses that belong to the same CIDR block. For example, you can set LocalGatewayIp to 192.168.XX.XX, PeerGatewayIp to 192.168.XX.XX, and PeeringSubnetMask to 255.255.255.248.
  * @param request  the request parameters of ModifyVirtualBorderRouterAttribute  ModifyVirtualBorderRouterAttributeRequest
  * @return ModifyVirtualBorderRouterAttributeResponse
 */
async function modifyVirtualBorderRouterAttribute(request: ModifyVirtualBorderRouterAttributeRequest): ModifyVirtualBorderRouterAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVirtualBorderRouterAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpcAttributeRequest {
  cidrBlock?: string(name='CidrBlock', description='The new IPv4 CIDR block of the VPC.

You can specify a larger or smaller IPv4 CIDR block than the IPv4 CIDR block of the VPC. The subnet mask must be 8 to 28 bits in length. If you specify a smaller IPv4 CIDR block and existing IP addresses do not fall within the CIDR block, the modification fails.

>  If you modify the CIDR block of a VPC, your existing services are not affected.', example='192.168.0.0/24', position='Query'),
  description?: string(name='Description', description='The new description of the VPC.

The description must be 1 to 256 characters in length, and cannot start with `http://` or `https://`.', example='This is my VPC.', position='Query'),
  enableDnsHostname?: boolean(name='EnableDnsHostname', position='Query'),
  enableIPv6?: boolean(name='EnableIPv6', description='Specifies whether to enable IPv6 CIDR blocks. Valid values:

*   **true**
*   **false** (default)', example='false', position='Query'),
  ipv6CidrBlock?: string(name='Ipv6CidrBlock', description='The IPv6 CIDR block of the VPC.', example='2408:XXXX:0:6a::/56', position='Query'),
  ipv6Isp?: string(name='Ipv6Isp', description='The type of IPv6 CIDR block. Valid values:

*   **BGP** (default)
*   **ChinaMobile**
*   **ChinaUnicom**
*   **ChinaTelecom**

>  If your Alibaba Cloud account is allowed to activate single-ISP bandwidth, you can set this parameter to **ChinaTelecom**, **ChinaUnicom**, or **ChinaMobile**.', example='BGP', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the VPC.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the VPC that you want to modify.

This parameter is required.', example='vpc-bp1qtbach57ywecf****', position='Query'),
  vpcName?: string(name='VpcName', description='The new name of the VPC.

The name must be 1 to 128 characters in length and cannot start with `http://` or `https://`.', example='Vpc-1', position='Query'),
}

model ModifyVpcAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='43B72D30-25E1-4FA3-96A8-89374A521D1A'),
}

model ModifyVpcAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVpcAttributeResponseBody(name='body'),
}

/**
  * @description ## [](#)Description
  * You cannot repeatedly call the **ModifyVpcAttribute** operation to modify the name and description of a VPC within the specified period of time.
  * @param request  the request parameters of ModifyVpcAttribute  ModifyVpcAttributeRequest
  * @return ModifyVpcAttributeResponse
 */
async function modifyVpcAttribute(request: ModifyVpcAttributeRequest): ModifyVpcAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpcAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpcPrefixListRequest {
  addPrefixListEntry?: [ 
    {
      cidr?: string(name='Cidr', description='The CIDR block to be added to the prefix list.

>  If the CIDR block already exists in the prefix list, you can only modify the description of the CIDR block by setting the **AddPrefixListEntry.N.Description** parameter.', example='172.16.0.0/12'),
      description?: string(name='Description', description='The description of the CIDR block to be added to the prefix list.

The description must be 1 to 256 characters in length, and cannot start with `http://` or `https://`.', example='newcidr'),
    }
  ](name='AddPrefixListEntry', description='The information about CIDR blocks to be added to the prefix list.', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to only precheck the request. Valid values:

*   **true**: checks the request without performing the operation. The system prechecks the required parameters, request syntax, and limits. If the request fails the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. If the request passes the check, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  maxEntries?: int32(name='MaxEntries', description='The maximum number of CIDR blocks supported by the prefix list after the configuration of the prefix list is modified.', example='20', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prefixListDescription?: string(name='PrefixListDescription', description='The new description of the prefix list.

The description must be 1 to 256 characters in length, and cannot start with `http://` or `https://`.', example='newdescription', position='Query'),
  prefixListId: string(name='PrefixListId', description='The ID of the prefix list.

This parameter is required.', example='pl-0b7hwu67****', position='Query'),
  prefixListName?: string(name='PrefixListName', description='The new name of the prefix list.

The name must be 1 to 128 characters in length, and cannot start with `http://` or `https://`.', example='newname', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the prefix list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  removePrefixListEntry?: [ 
    {
      cidr?: string(name='Cidr', description='The CIDR block that you want to delete from the prefix list.', example='192.168.0.0/16'),
      description?: string(name='Description', description='The description of the CIDR block that you want to delete.', example='cidr'),
    }
  ](name='RemovePrefixListEntry', description='The information about CIDR blocks to be deleted to the prefix list.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyVpcPrefixListResponseBody = {
  prefixListId?: string(name='PrefixListId', description='The ID of the prefix list.', example='pl-0b7hwu67****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model ModifyVpcPrefixListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVpcPrefixListResponseBody(name='body'),
}

/**
  * @description *   **ModifyVpcPrefixList** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListPrefixLists](https://help.aliyun.com/document_detail/311535.html) to query the status of the task.
  *     *   If the prefix list is in the **Modifying** state, the configuration of the prefix list is being modified.
  *     *   If the prefix list is in the **Created** state, the configuration of the prefix list is modified.
  *     *   After the configuration of the prefix list is modified, you can call the [GetVpcPrefixListAssociations](https://help.aliyun.com/document_detail/445478.html) operation to query the information about the network instances that are associated with the prefix list and determine whether the associated network instances use the new CIDR blocks. If the association **status** of the prefix list is **Created**, the new CIDR blocks are used by the network instances that are associated with the prefix list.
  * *   You cannot repeatedly call **ModifyVpcPrefixList** to modify the configuration of a prefix list within the specified period of time.
  * @param request  the request parameters of ModifyVpcPrefixList  ModifyVpcPrefixListRequest
  * @return ModifyVpcPrefixListResponse
 */
async function modifyVpcPrefixList(request: ModifyVpcPrefixListRequest): ModifyVpcPrefixListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpcPrefixList', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpnAttachmentAttributeRequest {
  autoConfigRoute?: boolean(name='AutoConfigRoute', description='Specifies whether to automatically configure routes. Valid values:

*   **true**
*   **false**', example='true', position='Query'),
  bgpConfig?: string(name='BgpConfig', description='The Border Gateway Protocol (BGP) configuration:

*   **BgpConfig.EnableBgp**: specifies whether to enable BGP. Valid values:

    *   **true**
    *   **false**

*   **BgpConfig.LocalAsn**: the autonomous system number (ASN) on the Alibaba Cloud side. Valid values: **1** to **4294967295**.

    You can enter the ASN in two segments. Separate the first 16 bits of the ASN from the remaining 16 bits with a period (.). Enter the number in each segment in decimal format.

    For example, if you enter 123.456, the ASN is: 123 × 65536 + 456 = 8061384.

*   **BgpConfig.TunnelCidr:** the CIDR block of the IPsec tunnel. The CIDR block falls within 169.254.0.0/16. The subnet mask of the CIDR block must be 30 bits in length.

*   **LocalBgpIp:** the BGP IP address on the Alibaba Cloud side. This IP address must fall within the CIDR block of the IPsec tunnel.

> - Before you configure BGP, we recommend that you learn how BGP dynamic routing works and the limits of using BGP dynamic routing. For more information, see [BGP dynamic routing ](https://help.aliyun.com/document_detail/170235.html).
> - We recommend that you use a private ASN to establish a connection with Alibaba Cloud over BGP. Refer to the relevant documentation for the private ASN range.', example='{"EnableBgp":"true","LocalAsn":"45104","TunnelCidr":"169.254.11.0/30","LocalBgpIp":"169.254.11.1"}', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the value of **RequestId** as the value of **ClientToken**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  customerGatewayId?: string(name='CustomerGatewayId', description='The customer gateway associated with the IPsec-VPN connection.', example='cgw-p0w2jemrcj5u61un8****', position='Query'),
  effectImmediately?: boolean(name='EffectImmediately', description='Specifies whether to immediately start IPsec negotiations after the configuration takes effect. Valid values:

*   **true**: immediately starts IPsec negotiations after the configuration is complete.
*   **false**: starts IPsec negotiations when inbound traffic is detected.', example='false', position='Query'),
  enableDpd?: boolean(name='EnableDpd', description='Specifies whether to enable the dead peer detection (DPD) feature. Valid values:

*   **true**: enables the DPD feature. The initiator of the IPsec-VPN connection sends DPD packets to check the existence and availability of the peer. If no feedback is received from the peer within a specific period of time, the connection fails. Then, the ISAKMP SA, IPsec SA, and IPsec tunnel are deleted.
*   **false**: disables the DPD feature. The initiator of the IPsec-VPN connection does not send DPD packets.', example='true', position='Query'),
  enableNatTraversal?: boolean(name='EnableNatTraversal', description='Specifies whether to enable NAT traversal. Valid values:

*   **true** After NAT traversal is enabled, the initiator does not check the UDP ports during IKE negotiations and can automatically discover NAT gateway devices along the IPsec tunnel.
*   **false**', example='true', position='Query'),
  enableTunnelsBgp?: boolean(name='EnableTunnelsBgp', position='Query'),
  healthCheckConfig?: string(name='HealthCheckConfig', description='The health check configurations:

*   **HealthCheckConfig.enable**: specifies whether to enable the health check feature. Valid values:

    *   **true**
    *   **false**

*   **HealthCheckConfig.dip**: the destination IP address that is used for health checks. Enter the IP address on the data center side that the VPC can communicate with through the IPsec-VPN connection.

*   **HealthCheckConfig.sip**: the source IP address that is used for health checks. Enter the IP address on the VPC side that the data center can communicate with through the IPsec-VPN connection.

*   **HealthCheckConfig.interval**: the interval between two consecutive health checks. Unit: seconds.

*   **HealthCheckConfig.retry:** the maximum number of health check retries.

*   **HealthCheckConfig.Policy**: specifies whether to withdraw advertised routes when health checks fail. Valid values:

    *   **revoke_route**
    *   **reserve_route**', example='{"enable":"true","dip":"192.168.1.1","sip":"10.1.1.1","interval":"3","retry":"3","Policy": "revoke_route"}', position='Query'),
  ikeConfig?: string(name='IkeConfig', description='The configuration of Phase 1 negotiations:

*   **IkeConfig.Psk**: The pre-shared key that is used for authentication between the VPN gateway and the data center.

    *   The pre-shared key must be 1 to 100 characters in length and can contain letters, digits, and the following characters: ``~ ! ` @ # $ % ^ & * () _ - + = {} [] | ; : \\" , . < > / ?``
    *   If you do not specify a pre-shared key, the system generates a random 16-character string as the pre-shared key. You can call the [DescribeVpnConnection](https://help.aliyun.com/document_detail/120374.html) operation to query the pre-shared key that is generated by the system.

    >The pre-shared key of the IPsec-VPN connection must be the same as the authentication key of the data center. Otherwise, you cannot establish a connection between the data center and the VPN gateway.

*   **IkeConfig.IkeVersion**: the Internet Key Exchange (IKE) version. Valid values: **ikev1** and **ikev2**.

*   **IkeConfig.IkeMode**: the negotiation mode. Valid values: **main** and **aggressive**.

*   **IkeConfig.IkeEncAlg**: the encryption algorithm that is used in Phase 1 negotiations. Valid values: **aes**, **aes192**, **aes256**, **des**, and **3des**.

*   **IkeConfig.IkeAuthAlg**: the authentication algorithm that is used in Phase 1 negotiations. Valid values: **md5**, **sha1**, **sha256**, **sha384**, and **sha512**.

*   **IkeConfig.IkePfs**: the Diffie-Hellman (DH) key exchange algorithm that is used in Phase 1 negotiations. Valid values: **group1**, **group2**, **group5**, and **group14**.

*   **IkeConfig.IkeLifetime**: the security association (SA) lifetime determined by Phase 1 negotiations. Unit: seconds. Valid values: **0** to **86400**.

*   **IkeConfig.LocalIdIPsec**: the identifier of the IPsec-VPN connection on the Alibaba Cloud side. The identifier can be up to 100 characters in length.

*   **IkeConfig.RemoteId**: the identifier of the IPsec-VPN connection on the data center side. The identifier can be up to 100 characters in length.', example='{"Psk":"1234****","IkeVersion":"ikev1","IkeMode":"main","IkeEncAlg":"aes","IkeAuthAlg":"sha1","IkePfs":"group2","IkeLifetime":86400,"LocalId":"47.XX.XX.1","RemoteId":"47.XX.XX.2"}', position='Query'),
  ipsecConfig?: string(name='IpsecConfig', description='The configuration of Phase 2 negotiations:

*   **IpsecConfig.IpsecEncAlg:** the encryption algorithm that is used in Phase 2 negotiations. Valid values: **aes**, **aes192**, **aes256**, **des**, and **3des**.
*   **IpsecConfig. IpsecAuthAlg:** the authentication algorithm that is used in Phase 2 negotiations. Valid values: **md5**, **sha1**, **sha256**, **sha384**, and **sha512**.
*   **IpsecConfig. IpsecPfs:** the DH key exchange algorithm that is used in Phase 2 negotiations. Valid values: **disabled**, **group1**, **group2**, **group5**, and **group14**.
*   **IpsecConfig. IpsecLifetime**: the SA lifetime determined by Phase 2 negotiations. Unit: seconds. Valid values: **0** to **86400**.', example='{"IpsecEncAlg":"aes","IpsecAuthAlg":"sha1","IpsecPfs":"group2","IpsecLifetime":86400}', position='Query'),
  localSubnet?: string(name='LocalSubnet', description='The CIDR block of the virtual private cloud (VPC) that communicates with the data center. The CIDR block is used in Phase 2 negotiations.

Separate multiple CIDR blocks with commas (,). Example: 192.168.1.0/24,192.168.2.0/24.

The following routing modes are supported:

*   If you set **LocalSubnet** and **RemoteSubnet** to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
*   If you set **LocalSubnet** and **RemoteSubnet** to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.', example='10.1.1.0/24,10.1.2.0/24', position='Query'),
  name?: string(name='Name', description='The name of the IPsec-VPN connection.

The name must be 1 to 100 characters in length and cannot start with `http://` or `https://`.', example='nametest', position='Query'),
  networkType?: string(name='NetworkType', description='The network type of the IPsec-VPN connection. Valid values:

*   **public**: an encrypted connection over the Internet
*   **private**: an encrypted connection over private networks', example='public', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the IPsec-VPN connection is established.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  remoteCaCert?: string(name='RemoteCaCert', description='The peer CA certificate when a ShangMi (SM) VPN gateway is used to create the IPsec-VPN connection.', example='c20ycDI1NnYxIENBIChURVNUIFN****', position='Query'),
  remoteSubnet?: string(name='RemoteSubnet', description='The CIDR block of the data center that communicates with the VPC. This CIDR block is used in Phase 2 negotiations.

Separate multiple CIDR blocks with commas (,). Example: 192.168.3.0/24,192.168.4.0/24.

The following routing modes are supported:

*   If you set **LocalSubnet** and **RemoteSubnet** to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
*   If you set **LocalSubnet** and **RemoteSubnet** to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.', example='10.1.3.0/24,10.1.4.0/24', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tunnelOptionsSpecification?: [ 
    {
      customerGatewayId?: string(name='CustomerGatewayId'),
      enableDpd?: boolean(name='EnableDpd'),
      enableNatTraversal?: boolean(name='EnableNatTraversal'),
      tunnelBgpConfig?: {
        localAsn?: long(name='LocalAsn'),
        localBgpIp?: string(name='LocalBgpIp'),
        tunnelCidr?: string(name='TunnelCidr'),
      }(name='TunnelBgpConfig'),
      tunnelId?: string(name='TunnelId'),
      tunnelIkeConfig?: {
        ikeAuthAlg?: string(name='IkeAuthAlg'),
        ikeEncAlg?: string(name='IkeEncAlg'),
        ikeLifetime?: long(name='IkeLifetime'),
        ikeMode?: string(name='IkeMode'),
        ikePfs?: string(name='IkePfs'),
        ikeVersion?: string(name='IkeVersion'),
        localId?: string(name='LocalId'),
        psk?: string(name='Psk'),
        remoteId?: string(name='RemoteId'),
      }(name='TunnelIkeConfig'),
      tunnelIndex?: int32(name='TunnelIndex'),
      tunnelIpsecConfig?: {
        ipsecAuthAlg?: string(name='IpsecAuthAlg'),
        ipsecEncAlg?: string(name='IpsecEncAlg'),
        ipsecLifetime?: int32(name='IpsecLifetime'),
        ipsecPfs?: string(name='IpsecPfs'),
      }(name='TunnelIpsecConfig'),
    }
  ](name='TunnelOptionsSpecification', position='Body'),
  vpnConnectionId: string(name='VpnConnectionId', description='The ID of the IPsec-VPN connection.

This parameter is required.', example='vco-p0w5112fgnl2ihlmf****', position='Query'),
}

model ModifyVpnAttachmentAttributeResponseBody = {
  attachInstanceId?: string(name='AttachInstanceId', description='The ID of the Cloud Enterprise Network (CEN) instance to which the transit router associated with the IPsec-VPN connection belongs.', example='cen-c2r3m3zxkumoqz****'),
  attachType?: string(name='AttachType', description='The type of the resource that is associated with the IPsec-VPN connection. Valid values:

*   **CEN**: The IPsec-VPN connection is associated with a transit router.
*   **VPNGW**: The IPsec-VPN connection is associated with a VPN gateway.
*   **NO_ASSOCIATED**: The IPsec-VPN connection is not associated with any resource.', example='CEN'),
  createTime?: long(name='CreateTime', description='The timestamp generated when the IPsec-VPN connection was established. Unit: milliseconds.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1658201810000'),
  customerGatewayId?: string(name='CustomerGatewayId', description='The ID of the customer gateway associated with the IPsec-VPN connection.', example='cgw-p0w2jemrcj5u61un8****'),
  description?: string(name='Description', description='The description of the IPsec-VPN connection.', example='desctest'),
  effectImmediately?: boolean(name='EffectImmediately', description='Indicates whether IPsec negotiations immediately start after the configuration takes effect. Valid values:

*   **true**
*   **false**', example='false'),
  enableDpd?: boolean(name='EnableDpd', description='Indicates whether the DPD feature is enabled for the IPsec-VPN connection. Valid values:

*   **true**
*   **false**', example='true'),
  enableNatTraversal?: boolean(name='EnableNatTraversal', description='Indicates whether NAT traversal is enabled for the IPsec-VPN connection. Valid values:

*   **true**
*   **false**', example='true'),
  enableTunnelsBgp?: boolean(name='EnableTunnelsBgp'),
  ikeConfig?: {
    ikeAuthAlg?: string(name='IkeAuthAlg', description='The authentication algorithm that is used in Phase 1 negotiations.', example='sha1'),
    ikeEncAlg?: string(name='IkeEncAlg', description='The encryption algorithm that is used in Phase 1 negotiations.', example='aes'),
    ikeLifetime?: long(name='IkeLifetime', description='The SA lifetime that is determined by Phase 1 negotiations. Unit: seconds.', example='86400'),
    ikeMode?: string(name='IkeMode', description='The negotiation mode.', example='main'),
    ikePfs?: string(name='IkePfs', description='The DH key exchange algorithm that is used in Phase 1 negotiations.', example='group2'),
    ikeVersion?: string(name='IkeVersion', description='The version of the IKE protocol.', example='ikev1'),
    localId?: string(name='LocalId', description='The identifier of the IPsec-VPN connection on the Alibaba Cloud side.', example='47.XX.XX.1'),
    psk?: string(name='Psk', description='The pre-shared key that is used for identity authentication between the VPN gateway and the data center.

>  The pre-shared key of the IPsec-VPN connection must be the same as the authentication key of the data center. Otherwise, you cannot establish a connection between the data center and the VPN gateway.', example='1234***'),
    remoteId?: string(name='RemoteId', description='The identifier of the IPsec-VPN connection on the data center side.', example='47.XX.XX.2'),
  }(name='IkeConfig', description='The configuration of Phase 1 negotiations.'),
  ipsecConfig?: {
    ipsecAuthAlg?: string(name='IpsecAuthAlg', description='The authentication algorithm that is used in Phase 2 negotiations.', example='md5'),
    ipsecEncAlg?: string(name='IpsecEncAlg', description='The encryption algorithm that is used in Phase 2 negotiations.', example='aes'),
    ipsecLifetime?: long(name='IpsecLifetime', description='The SA lifetime that is determined by Phase 2 negotiations. Unit: seconds.', example='86400'),
    ipsecPfs?: string(name='IpsecPfs', description='The DH key exchange algorithm that is used in Phase 2 negotiations.', example='group2'),
  }(name='IpsecConfig', description='The configuration of Phase 2 negotiations.'),
  localSubnet?: string(name='LocalSubnet', description='The CIDR block of the VPC with which the data center can communicate.', example='10.1.1.0/24,10.1.2.0/24'),
  name?: string(name='Name', description='The name of the IPsec-VPN connection.', example='nametest'),
  networkType?: string(name='NetworkType', description='The network type of the IPsec-VPN connection. Valid values:

*   **public**: an encrypted connection over the Internet
*   **private**: an encrypted connection over private networks', example='public'),
  remoteSubnet?: string(name='RemoteSubnet', description='The CIDR block of the data center with which the VPC can communicate.', example='10.1.3.0/24,10.1.4.0/24'),
  requestId?: string(name='RequestId', description='The request ID.', example='35822A84-867F-3936-A2E6-A4C4E3ED11C0'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the IPsec-VPN connection belongs.

You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/158855.html) operation to query resource groups.', example='rg-acfmzs372yg****'),
  spec?: string(name='Spec', description='The bandwidth specification of the IPsec-VPN connection.

A value of **M** in the response indicates **Mbit/s**.', example='1000M'),
  status?: string(name='Status', description='The state of the IPsec-VPN connection. Valid values:

*   **ike_sa_not_established**: Phase 1 negotiations failed.
*   **ike_sa_established**: Phase 1 negotiations succeeded.
*   **ipsec_sa_not_established**: Phase 2 negotiations failed.
*   **ipsec_sa_established**: Phase 2 negotiations succeeded.', example='ike_sa_not_established'),
  tunnelOptionsSpecification?: [ 
    {
      customerGatewayId?: string(name='CustomerGatewayId'),
      enableDpd?: boolean(name='EnableDpd'),
      enableNatTraversal?: boolean(name='EnableNatTraversal'),
      internetIp?: string(name='InternetIp'),
      role?: string(name='Role'),
      state?: string(name='State'),
      tunnelBgpConfig?: {
        localAsn?: long(name='LocalAsn'),
        localBgpIp?: string(name='LocalBgpIp'),
        peerAsn?: long(name='PeerAsn'),
        peerBgpIp?: string(name='PeerBgpIp'),
        tunnelCidr?: string(name='TunnelCidr'),
      }(name='TunnelBgpConfig'),
      tunnelId?: string(name='TunnelId'),
      tunnelIkeConfig?: {
        ikeAuthAlg?: string(name='IkeAuthAlg'),
        ikeEncAlg?: string(name='IkeEncAlg'),
        ikeLifetime?: long(name='IkeLifetime'),
        ikeMode?: string(name='IkeMode'),
        ikePfs?: string(name='IkePfs'),
        ikeVersion?: string(name='IkeVersion'),
        localId?: string(name='LocalId'),
        psk?: string(name='Psk'),
        remoteId?: string(name='RemoteId'),
      }(name='TunnelIkeConfig'),
      tunnelIndex?: int32(name='TunnelIndex'),
      tunnelIpsecConfig?: {
        ipsecAuthAlg?: string(name='IpsecAuthAlg'),
        ipsecEncAlg?: string(name='IpsecEncAlg'),
        ipsecLifetime?: long(name='IpsecLifetime'),
        ipsecPfs?: string(name='IpsecPfs'),
      }(name='TunnelIpsecConfig'),
    }
  ](name='TunnelOptionsSpecification'),
  vcoHealthCheck?: {
    dip?: string(name='Dip', description='The destination IP address that is used for health checks.', example='192.168.1.1'),
    enable?: string(name='Enable', description='Indicates whether the health check feature is enabled for the IPsec-VPN connection. Valid values:

*   **true**
*   **false**', example='true'),
    interval?: int32(name='Interval', description='The interval between two consecutive health check retries. Unit: seconds.', example='3'),
    policy?: string(name='Policy', description='Indicates whether advertised routes are withdrawn when the health check fails. Valid values:

*   **revoke_route**: Advertised routes are withdrawn.
*   **reserve_route**: Advertised routes are not withdrawn.', example='revoke_route'),
    retry?: int32(name='Retry', description='The maximum number of health check retries.', example='3'),
    sip?: string(name='Sip', description='The source IP address that is used for health checks.', example='10.1.1.1'),
  }(name='VcoHealthCheck', description='The health check configuration of the IPsec-VPN connection.'),
  vpnBgpConfig?: {
    enableBgp?: string(name='EnableBgp', description='Indicates whether BGP is enabled for the IPsec-VPN connection. Valid values:

*   **true**
*   **false**', example='true'),
    localAsn?: long(name='LocalAsn', description='The ASN on the Alibaba Cloud side.', example='45104'),
    localBgpIp?: string(name='LocalBgpIp', description='The BGP IP address on the Alibaba Cloud side.', example='169.254.11.1'),
    peerAsn?: long(name='PeerAsn', description='The ASN on the data center side.', example='65535'),
    peerBgpIp?: string(name='PeerBgpIp', description='The BGP IP address on the data center side.', example='169.254.11.2'),
    status?: string(name='Status', description='The negotiation state of BGP. Valid values:

*   **success**: normal
*   **false**: abnormal', example='false'),
    tunnelCidr?: string(name='TunnelCidr', description='The CIDR block of the IPsec tunnel.', example='169.254.11.0/30'),
  }(name='VpnBgpConfig', description='The BGP configuration of the IPsec-VPN connection.'),
  vpnConnectionId?: string(name='VpnConnectionId', description='The ID of the IPsec-VPN connection.', example='vco-p0w5112fgnl2ihlmf****'),
  vpnGatewayId?: string(name='VpnGatewayId', description='The ID of the VPN gateway associated with the IPsec-VPN connection.', example='vpn-p0wa1c1018pmeb6cu****'),
}

model ModifyVpnAttachmentAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVpnAttachmentAttributeResponseBody(name='body'),
}

/**
  * @description *   **ModifyVpnAttachmentAttribute** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task to modify the configuration of an IPsec-VPN connection in the background. You can call the [DescribeVpnConnection](https://help.aliyun.com/document_detail/53046.html) operation to query the status of the task.
  *     *   If the IPsec-VPN connection is in the **updating** state, the configuration of the IPsec-VPN connection is being modified.
  *     *   If the IPsec-VPN connection is in the **attached** state, the configuration of the IPsec-VPN connection is modified.
  * *   You cannot call the **ModifyVpnAttachmentAttribute** operation again on the same IPsec-VPN connection before the previous operation is complete.
  * *   When you call the **ModifyVpnAttachmentAttribute** operation, take note of the following items:
  *     *   If the IPsec-VPN connection is associated with a transit router, you cannot change the type of the gateway connected to the IPsec-VPN connection.
  *     *   If the IPsec-VPN connection is not associated with a resource, you cannot change the type of the gateway connected to the IPsec-VPN connection or the customer gateway connected to the IPsec-VPN connection.
  * @param request  the request parameters of ModifyVpnAttachmentAttribute  ModifyVpnAttachmentAttributeRequest
  * @return ModifyVpnAttachmentAttributeResponse
 */
async function modifyVpnAttachmentAttribute(request: ModifyVpnAttachmentAttributeRequest): ModifyVpnAttachmentAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpnAttachmentAttribute', 'POST', '/', 'json', true, 'form', request);
}

model ModifyVpnConnectionAttributeRequest {
  autoConfigRoute?: boolean(name='AutoConfigRoute', description='Specifies whether to automatically advertise routes. Valid values:

*   **true**
*   **false**', example='true', position='Query'),
  bgpConfig?: string(name='BgpConfig', description='This parameter is supported if you modify the configurations of an IPsec-VPN connection in single-tunnel mode.

BGP configuration:

*   **BgpConfig.EnableBgp**: specifies whether to enable BGP. Valid values: **true** and **false**.

*   **BgpConfig.LocalAsn:** the autonomous system number (ASN) on the Alibaba Cloud side. Valid values: **1** to **4294967295**.

    You can enter a value in two segments separated by a period (.). Each segment is 16 bits in length. Enter the number in each segment in decimal format.

    For example, if you enter 123.456, the ASN is 8061384. The ASN is calculated by using the following formula: 123 × 65536 + 456 = 8061384.

*   **BgpConfig.TunnelCidr**: The CIDR block of the IPsec tunnel. The CIDR block must fall within 169.254.0.0/16 and the mask of the CIDR block must be 30 bits in length. The CIDR block cannot be 169.254.0.0/30, 169.254.1.0/30, 169.254.2.0/30, 169.254.3.0/30, 169.254.4.0/30, 169.254.5.0/30, 169.254.6.0/30, or 169.254.169.252/30.

    > The CIDR block of the IPsec tunnel for each IPsec-VPN connection on a VPN gateway must be unique.

*   **LocalBgpIp**: the BGP address on the Alibaba Cloud side. It must be an IP address that falls within the CIDR block of the IPsec tunnel.

> - This parameter is required when the VPN gateway has dynamic BGP enabled.
> - Before you add BGP configurations, we recommend that you learn about how BGP dynamic routing works and the limits. For more information, see [Configure BGP dynamic routing](https://help.aliyun.com/document_detail/2638220.html).
> - We recommend that you use a private ASN to establish BGP connections to Alibaba Cloud. For information about the range of private ASNs, see the relevant documentation.', example='{"EnableBgp":"true","LocalAsn":"65530","TunnelCidr":"169.254.11.0/30","LocalBgpIp":"169.254.11.1"}', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the value of **RequestId** as the value of **ClientToken**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  effectImmediately?: boolean(name='EffectImmediately', description='Specifies whether to immediately start IPsec negotiations after the configuration takes effect. Valid values:

*   **true**: immediately starts IPsec negotiations after the configuration takes effect.
*   **false**: IPsec negotiations start when inbound traffic is detected.', example='false', position='Query'),
  enableDpd?: boolean(name='EnableDpd', description='You can specify this parameter if you modify the configuration of a single-tunnel IPsec-VPN connection.

Specifies whether to enable the dead peer detection (DPD) feature. Valid values:

*   **true:**: enables the DPD feature. The initiator of the IPsec-VPN connection sends DPD packets to check the existence and availability of the peer. If no feedback is received from the peer within a specific period of time, the connection fails. Then, the ISAKMP SA, IPsec SA, and IPsec tunnel are deleted.
*   **false**: disables the DPD feature. The initiator of the IPsec-VPN connection does not send DPD packets.', example='true', position='Query'),
  enableNatTraversal?: boolean(name='EnableNatTraversal', description='You can specify this parameter if you modify the configuration of a single-tunnel IPsec-VPN connection.

Specifies whether to enable NAT traversal. Valid values:

*   **true** After NAT traversal is enabled, the initiator does not check the UDP ports during IKE negotiations and can automatically discover NAT gateway devices along the IPsec tunnel.
*   **false**', example='true', position='Query'),
  enableTunnelsBgp?: boolean(name='EnableTunnelsBgp', description='You can specify this parameter if you modify the configuration of a dual-tunnel IPsec-VPN connection.

Specifies whether to enable BGP for the tunnel. Valid values: **true** and **false**.', example='true', position='Query'),
  healthCheckConfig?: string(name='HealthCheckConfig', description='You can specify this parameter if you modify the configuration of a single-tunnel IPsec-VPN connection.

The health check configuration:

*   **HealthCheckConfig.enable**: specifies whether to enable health checks. Valid values: **true** and **false**.
*   **HealthCheckConfig.dip**: the destination IP address that is used for health checks.
*   **HealthCheckConfig.sip**: the source IP address that is used for health checks.
*   **HealthCheckConfig.interval**: the interval between two consecutive health checks. Unit: seconds.
*   **HealthCheckConfig.retry**: the maximum number of health check retries.', example='{"enable":"true","dip":"192.168.1.1","sip":"10.1.1.1","interval":"3","retry":"3"}', position='Query'),
  ikeConfig?: string(name='IkeConfig', description='This parameter is supported if you modify the configurations of an IPsec-VPN connection in single-tunnel mode.

The configurations of Phase 1 negotiations:

*   **IkeConfig.Psk**: The pre-shared key that is used for identity authentication between the VPN gateway and the on-premises data center.

    *   The key cannot contain space characters. The key must be 1 to 100 characters in length, and can contain digits, letters, and the following special characters: ``~!`@#$%^&*()_-+={}[]|;:\\",.<>/?``
    *   If you do not specify a pre-shared key, the system randomly generates a 16-bit string as the pre-shared key. You can call the [DescribeVpnConnection](https://help.aliyun.com/document_detail/2526951.html) operation to query the pre-shared key that is automatically generated by the system.

    **

    **Description** The pre-shared key of the IPsec-VPN connection must be the same as the authentication key of the on-premises data center. Otherwise, connections between the on-premises data center and the VPN gateway cannot be established.

*   **IkeConfig.IkeVersion**: the version of the Internet Key Exchange (IKE) protocol. Valid values: **ikev1** and **ikev2**.

    Compared with IKEv1, IKEv2 simplifies the security association (SA) negotiation process and provides better support for scenarios with multiple CIDR blocks.

*   **IkeConfig.IkeMode**: the negotiation mode of IKE. Valid values: **main** and **aggressive**.

    *   **main:** This mode offers higher security during negotiations.
    *   **aggressive:** This mode supports faster negotiations and a higher success rate.

*   **IkeConfig.IkeEncAlg**: the encryption algorithm that is used in Phase 1 negotiations.

    Valid values: **aes**, **aes192**, **aes256**, **des**, and **3des**.

*   **IkeConfig.IkeAuthAlg**: the authentication algorithm that is used in Phase 1 negotiations.

    Valid values: **md5**, **sha1**, **sha256**, **sha384**, and **sha512**.

*   **IkeConfig.IkePfs**: the Diffie-Hellman key exchange algorithm that is used in Phase 1 negotiations. Valid values: **group1**, **group2**, **group5**, and **group14**.

*   **IkeConfig.IkeLifetime**: the SA lifetime as a result of Phase 1 negotiations. Unit: seconds Valid values: **0 to 86400**.

*   **IkeConfig.LocalId**: the identifier of the VPN gateway. The identifier cannot exceed 100 characters in length and cannot contain space characters. The default value is the IP address of the VPN gateway.

*   **IkeConfig.RemoteId**: the identifier of the customer gateway. The identifier cannot exceed 100 characters in length and cannot contain space characters. The default value is the IP address of the customer gateway.', example='{"Psk":"pgw6dy7d1i8i****","IkeVersion":"ikev1","IkeMode":"main","IkeEncAlg":"aes","IkeAuthAlg":"sha1","IkePfs":"group2","IkeLifetime":86400,"LocalId":"116.64.XX.XX","RemoteId":"139.18.XX.XX"}', position='Query'),
  ipsecConfig?: string(name='IpsecConfig', description='You can specify this parameter if you modify the configuration of a single-tunnel IPsec-VPN connection.

The configuration of Phase 2 negotiations:

*   **IpsecConfig.IpsecEncAlg**: the encryption algorithm that is used in Phase 2 negotiations.

    Valid values: **aes**, **aes192**, **aes256**, **des**, and **3des**.

*   **IpsecConfig. IpsecAuthAlg**: the authentication algorithm that is used in Phase 2 negotiations.

    Valid values: **md5**, **sha1**, **sha256**, **sha384**, and **sha512**.

*   **IpsecConfig. IpsecPfs**: the DH key exchange algorithm that is used in Phase 1 negotiations. If you specify this parameter, packets of all protocols are forwarded. Valid values: **disabled**, **group1**, **group2**, **group5**, and **group14**.

*   **IpsecConfig. IpsecLifetime:** the SA lifetime that is determined by Phase 2 negotiations. Unit: seconds. Valid values: **0 to 86400**.', example='{"IpsecEncAlg":"aes","IpsecAuthAlg":"sha1","IpsecPfs":"group2","IpsecLifetime":86400}', position='Query'),
  localSubnet?: string(name='LocalSubnet', description='The CIDR block used to connect the virtual private cloud (VPC) to the data center. The CIDR block is used in Phase 2 negotiations.

Separate multiple CIDR blocks with commas (,). Example: 192.168.1.0/24,192.168.2.0/24.

The following routing modes are supported:

*   If you set **LocalSubnet** and **RemoteSubnet** to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
*   If you set **LocalSubnet** and **RemoteSubnet** to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.', example='10.1.1.0/24,10.1.2.0/24', position='Query'),
  name?: string(name='Name', description='The name of the IPsec-VPN connection.

The name must be 1 to 100 characters in length and cannot start with `http://` or `https://`.', example='nametest', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the IPsec-VPN connection is created.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  remoteCaCertificate?: string(name='RemoteCaCertificate', description='You can specify this parameter if you modify the configuration of a single-tunnel IPsec-VPN connection.

If the VPN gateway uses a ShangMi (SM) certificate, you can modify the CA certificate used by the IPsec peer.

If the VPN gateway does not use an SM certificate, you cannot specify this parameter.', example='-----BEGIN CERTIFICATE----- MIIB7zCCAZW**** -----END CERTIFICATE-----', position='Query'),
  remoteSubnet?: string(name='RemoteSubnet', description='The CIDR block on the data center side. This CIDR block is used in Phase 2 negotiations.

Separate multiple CIDR blocks with commas (,). Example: 192.168.3.0/24,192.168.4.0/24.

The following routing modes are supported:

*   If you set **LocalSubnet** and **RemoteSubnet** to 0.0.0.0/0, the routing mode of the IPsec-VPN connection is set to Destination Routing Mode.
*   If you set **LocalSubnet** and **RemoteSubnet** to specific CIDR blocks, the routing mode of the IPsec-VPN connection is set to Protected Data Flows.', example='10.2.1.0/24,10.2.2.0/24', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tunnelOptionsSpecification?: [ 
    {
      customerGatewayId?: string(name='CustomerGatewayId', description='The ID of the customer gateway associated with the tunnel.', example='cgw-1nmwbpgrp7ssqm1yn****'),
      enableDpd?: boolean(name='EnableDpd', description='Specifies whether to enable the Dead Peer Detection (DPD) feature for the tunnel. Valid values:

*   **true**: enables DPD. The initiator of the IPsec-VPN connection sends DPD packets to check the existence and availability of the peer. If no feedback is received from the peer within the specified period of time, the connection fails. In this case, ISAKMP SA and IPsec SA are deleted. The security tunnel is also deleted.
*   **false**: disables DPD. The initiator of the IPsec-VPN connection does not send DPD packets.', example='true'),
      enableNatTraversal?: boolean(name='EnableNatTraversal', description='Specifies whether to enable NAT traversal for the tunnel. Valid values:

*   **true**: enables NAT traversal. After NAT traversal is enabled, the initiator does not check the UDP ports during IKE negotiations and can automatically discover NAT gateway devices along the IPsec-VPN tunnel.
*   **false**: disables NAT traversal.', example='true'),
      remoteCaCertificate?: string(name='RemoteCaCertificate', description='If the VPN gateway uses an SM certificate, you can modify the CA certificate used by the IPsec peer.

If the VPN gateway does not use an SM certificate, this parameter is not supported.', example='-----BEGIN CERTIFICATE----- MIIB7zCCAZW**** -----END CERTIFICATE-----'),
      role?: string(name='Role', description='The tunnel role. Valid values:

*   **master**: The tunnel is an active tunnel.
*   **slave**: The tunnel is a standby tunnel.', example='master'),
      tunnelBgpConfig?: {
        localAsn?: long(name='LocalAsn', description='The ASN of the tunnel on the Alibaba Cloud side. Valid values: **1** to **4294967295**. Default value: **45104**.

>  You can specify this parameter only if **EnableTunnelsBgp** is set to **true**.

*   Before you add BGP configurations, we recommend that you learn about how BGP dynamic routing works and the limits. For more information, see [Configure BGP dynamic routing](https://help.aliyun.com/document_detail/2638220.html).

*   We recommend that you use a private ASN to establish BGP connections to Alibaba Cloud. For information about the range of private ASNs, see the relevant documentation.', example='65530'),
        localBgpIp?: string(name='LocalBgpIp', description='The BGP IP address of the tunnel on the Alibaba Cloud side. The address is an IP address that falls within the BGP CIDR block.', example='169.254.10.1'),
        tunnelCidr?: string(name='TunnelCidr', description='The BGP CIDR block of the tunnel.

The CIDR block must fall within 169.254.0.0/16 and the mask of the CIDR block must be 30 bits in length. The CIDR block cannot be 169.254.0.0/30, 169.254.1.0/30, 169.254.2.0/30, 169.254.3.0/30, 169.254.4.0/30, 169.254.5.0/30, 169.254.6.0/30, or 169.254.169.252/30.

>  The BGP CIDR block of each tunnel must be unique on a VPN gateway.', example='169.254.10.0/30'),
      }(name='TunnelBgpConfig', description='The Border Gateway Protocol (BGP) configurations of the tunnel.'),
      tunnelId?: string(name='TunnelId', description='The tunnel ID.', example='tun-opsqc4d97wni27****'),
      tunnelIkeConfig?: {
        ikeAuthAlg?: string(name='IkeAuthAlg', description='The authentication algorithm that is used in Phase 1 negotiations.

Valid values: **md5**, **sha1**, **sha256**, **sha384**, and **sha512**.', example='md5'),
        ikeEncAlg?: string(name='IkeEncAlg', description='The encryption algorithm that is used in Phase 1 negotiations.

Valid values: **aes**, **aes192**, **aes256**, **des**, and **3des**.', example='aes'),
        ikeLifetime?: long(name='IkeLifetime', description='The SA lifetime as a result of Phase 1 negotiations. Unit: seconds Valid values: **0** to **86400**.', example='86400'),
        ikeMode?: string(name='IkeMode', description='The negotiation mode of IKE. Valid values:

*   **main:** This mode offers higher security during negotiations.
*   **aggressive:** This mode supports faster negotiations and a higher success rate.', example='main'),
        ikePfs?: string(name='IkePfs', description='The Diffie-Hellman key exchange algorithm that is used in Phase 1 negotiations. Valid values: **group1**, **group2**, **group5**, and **group14**.', example='group2'),
        ikeVersion?: string(name='IkeVersion', description='The version of the IKE protocol. Valid values: **ikev1** and **ikev2**.

Compared with IKEv1, IKEv2 simplifies the SA negotiation process and provides better support for scenarios with multiple CIDR blocks.', example='ikev1'),
        localId?: string(name='LocalId', description='The identifier on the Alibaba Cloud side, which is used in Phase 1 negotiations. The identifier cannot exceed 100 characters in length and cannot contain space characters. The default value is the IP address of the tunnel.

**LocalId** supports fully qualified domain names (FQDNs). If you use an FQDN, we recommend that you set the negotiation mode to **aggressive**.', example='47.21.XX.XX'),
        psk?: string(name='Psk', description='The pre-shared key, which is used for identity authentication between the tunnel and the tunnel peer.

*   The key cannot contain space characters. The key must be 1 to 100 characters in length, and can contain digits, letters, and the following special characters: ``~!\\`@#$%^&*()_-+={}[]|;:\\",.<>/?``
*   If you do not specify a pre-shared key, the system randomly generates a 16-bit string as the pre-shared key. You can call the [DescribeVpnConnection](https://help.aliyun.com/document_detail/2526951.html) operation to query the pre-shared key that is automatically generated by the system.

>  The tunnel and the tunnel peer must use the same pre-shared key. Otherwise, the tunnel cannot be built.', example='123456****'),
        remoteId?: string(name='RemoteId', description='The identifier of the tunnel peer, which is used in Phase 1 negotiations. The identifier cannot exceed 100 characters in length and cannot contain space characters. The default value is the IP address of the customer gateway that is associated with the tunnel.

**RemoteId** supports FQDNs. If you use an FQDN, we recommend that you set the negotiation mode to **aggressive**.', example='47.42.XX.XX'),
      }(name='TunnelIkeConfig', description='The configurations of Phase 1 negotiations.'),
      tunnelIpsecConfig?: {
        ipsecAuthAlg?: string(name='IpsecAuthAlg', description='The authentication algorithm that is used in Phase 2 negotiations.

Valid values: **md5**, **sha1**, **sha256**, **sha384**, and **sha512**.', example='md5'),
        ipsecEncAlg?: string(name='IpsecEncAlg', description='The encryption algorithm that is used in Phase 2 negotiations.

Valid values: **aes**, **aes192**, **aes256**, **des**, and **3des**.', example='aes'),
        ipsecLifetime?: int32(name='IpsecLifetime', description='The SA lifetime as a result of Phase 2 negotiations. Unit: seconds Valid values: **0** to **86400**.', example='86400'),
        ipsecPfs?: string(name='IpsecPfs', description='The Diffie-Hellman key exchange algorithm that is used in Phase 2 negotiations.

Valid values: **disabled**, **group1**, **group2**, **group5**, and **group14**.', example='group2'),
      }(name='TunnelIpsecConfig', description='The configurations of Phase 2 negotiations.'),
    }
  ](name='TunnelOptionsSpecification', description='The tunnel configurations.

You can specify parameters in the **TunnelOptionsSpecification** array when you modify the configurations of an IPsec-VPN connection in dual-tunnel mode. You can modify the configurations of both the active and standby tunnels of the IPsec-VPN connection.', position='Body'),
  vpnConnectionId: string(name='VpnConnectionId', description='The ID of the IPsec-VPN connection.

This parameter is required.', example='vco-bp1bbi27hojx80nck****', position='Query'),
}

model ModifyVpnConnectionAttributeResponseBody = {
  createTime?: long(name='CreateTime', description='The timestamp generated when the IPsec-VPN connection was established. Unit: milliseconds.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1492753817000'),
  customerGatewayId?: string(name='CustomerGatewayId', description='The ID of the customer gateway associated with the IPsec-VPN connection.

This parameter is returned only for single-tunnel IPsec-VPN connections.', example='cgw-p0w2jemrcj5u61un8****'),
  description?: string(name='Description', description='The description of the IPsec-VPN connection.', example='description'),
  effectImmediately?: boolean(name='EffectImmediately', description='Indicates whether IPsec negotiations immediately start after the configuration takes effect. Valid values:

*   **true**: IPsec negotiations immediately start after the configuration takes effect.
*   **false**: IPsec negotiations start when inbound traffic is detected.', example='false'),
  enableDpd?: boolean(name='EnableDpd', description='Indicates whether the DPD feature is enabled for the IPsec-VPN connection. Valid values:

*   **false**
*   **true**

This parameter is returned only for single-tunnel IPsec-VPN connections.', example='true'),
  enableNatTraversal?: boolean(name='EnableNatTraversal', description='Indicates whether NAT traversal is enabled for the IPsec-VPN connection. Valid values: Valid values:

*   **false**
*   **true**

This parameter is returned only for single-tunnel IPsec-VPN connections.', example='true'),
  enableTunnelsBgp?: boolean(name='EnableTunnelsBgp', description='Indicates whether BGP is enabled for the tunnel. Valid values:

*   **true**
*   **false**

This parameter is returned only by dual-tunnel IPsec-VPN connections.', example='true'),
  ikeConfig?: {
    ikeAuthAlg?: string(name='IkeAuthAlg', description='The authentication algorithm in the IKE phase.', example='sha1'),
    ikeEncAlg?: string(name='IkeEncAlg', description='The encryption algorithm in the IKE phase.', example='aes'),
    ikeLifetime?: long(name='IkeLifetime', description='The lifetime in the IKE phase. Unit: seconds.', example='86400'),
    ikeMode?: string(name='IkeMode', description='The IKE negotiation mode.

*   **main**: This mode offers higher security during negotiations.
*   **aggressive**: This mode is faster and has a higher success rate.', example='main'),
    ikePfs?: string(name='IkePfs', description='The DH group in the IKE phase.', example='group2'),
    ikeVersion?: string(name='IkeVersion', description='The version of the IKE protocol.

*   **ikev1**
*   **ikev2**

Compared with IKEv1, IKEv2 simplifies the SA negotiation process and is more suitable for scenarios in which multiple CIDR blocks are used.', example='ikev1'),
    localId?: string(name='LocalId', description='The identifier on the VPC side. The default value is the IP address of the VPN gateway. The value can be an FQDN or an IP address.', example='116.64.XX.XX'),
    psk?: string(name='Psk', description='The pre-shared key.', example='pgw6dy7d1i8i****'),
    remoteId?: string(name='RemoteId', description='The identifier on the data center side. The default value is the IP address of the customer gateway. The value can be a FQDN or an IP address.', example='139.18.XX.XX'),
  }(name='IkeConfig', description='The configuration of Phase 1 negotiations.

**IkeConfig** parameters are returned only for single-tunnel IPsec-VPN connections.'),
  ipsecConfig?: {
    ipsecAuthAlg?: string(name='IpsecAuthAlg', description='The authentication algorithm in the IPsec phase.', example='sha1'),
    ipsecEncAlg?: string(name='IpsecEncAlg', description='The encryption algorithm in the IPsec phase.', example='aes'),
    ipsecLifetime?: long(name='IpsecLifetime', description='The lifetime in the IPsec phase. Unit: seconds.', example='86400'),
    ipsecPfs?: string(name='IpsecPfs', description='The DH group in the IPsec phase.', example='group2'),
  }(name='IpsecConfig', description='The configuration of Phase 2 negotiations.

**IpsecConfig** parameters are returned only for single-tunnel IPsec-VPN connections.'),
  localSubnet?: string(name='LocalSubnet', description='The CIDR block on the VPC side.', example='10.1.1.0/24,10.1.2.0/24'),
  name?: string(name='Name', description='The name of the IPsec-VPN connection.', example='nametest'),
  remoteSubnet?: string(name='RemoteSubnet', description='The CIDR block on the data center side.', example='10.2.1.0/24,10.2.2.0/24'),
  requestId?: string(name='RequestId', description='The request ID.', example='7DB79D0C-5F27-4AB5-995B-79BE55102F90'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the IPsec-VPN connection belongs.

The IPsec-VPN connection and the VPN gateway associated with the IPsec-VPN connection belong to the same resource group. You can call the [ListResourceGroups](https://help.aliyun.com/document_detail/158855.html) operation to query resource groups.', example='rg-acfmzs372yg****'),
  tunnelOptionsSpecification?: {
    tunnelOptions?: [ 
    {
      customerGatewayId?: string(name='CustomerGatewayId', description='The ID of the customer gateway associated with the tunnel.', example='cgw-p0wy363lucf1uyae8****'),
      enableDpd?: boolean(name='EnableDpd', description='Indicates whether the DPD feature is enabled for the tunnel. Valid values:

*   **false**
*   **true**', example='true'),
      enableNatTraversal?: boolean(name='EnableNatTraversal', description='Indicates whether NAT traversal is enabled for the tunnel. Valid values:

*   **false**
*   **true**', example='true'),
      internetIp?: string(name='InternetIp', description='The IP address on the Alibaba Cloud side.', example='47.21.XX.XX'),
      remoteCaCertificate?: string(name='RemoteCaCertificate', description='The CA certificate of the tunnel peer.

This parameter is returned only if the VPN gateway is of the SM type.', example='-----BEGIN CERTIFICATE----- MIIB7zCCAZW**** -----END CERTIFICATE-----'),
      role?: string(name='Role', description='The tunnel role. Valid values:

*   **master**: The tunnel is an active tunnel.
*   **slave**: The tunnel is a standby tunnel.', example='master'),
      state?: string(name='State', description='The tunnel status. Valid values:

*   **active**
*   **updating**
*   **deleting**', example='active'),
      tunnelBgpConfig?: {
        localAsn?: long(name='LocalAsn', description='The ASN of the tunnel on the Alibaba Cloud side.', example='65530'),
        localBgpIp?: string(name='LocalBgpIp', description='The BGP IP address of the tunnel on the Alibaba Cloud side.', example='169.254.10.1'),
        peerAsn?: long(name='PeerAsn', description='The ASN of the tunnel peer.', example='65531'),
        peerBgpIp?: string(name='PeerBgpIp', description='The BGP IP address of the tunnel peer.', example='169.254.10.2'),
        tunnelCidr?: string(name='TunnelCidr', description='The BGP CIDR block of the tunnel.', example='169.254.10.0/30'),
      }(name='TunnelBgpConfig', description='The BGP configuration.'),
      tunnelId?: string(name='TunnelId', description='The tunnel ID.', example='tun-opsqc4d97wni27****'),
      tunnelIkeConfig?: {
        ikeAuthAlg?: string(name='IkeAuthAlg', description='The authentication algorithm in the IKE phase.', example='sha1'),
        ikeEncAlg?: string(name='IkeEncAlg', description='The encryption algorithm in the IKE phase.', example='aes'),
        ikeLifetime?: long(name='IkeLifetime', description='The lifetime in the IKE phase. Unit: seconds.', example='86400'),
        ikeMode?: string(name='IkeMode', description='The IKE negotiation mode.

*   **main:** This mode offers higher security during negotiations.
*   **aggressive**: This mode is faster and has a higher success rate.', example='main'),
        ikePfs?: string(name='IkePfs', description='The DH group in the IKE phase.', example='group2'),
        ikeVersion?: string(name='IkeVersion', description='The version of the IKE protocol.', example='ikev1'),
        localId?: string(name='LocalId', description='The identifier of the tunnel on the Alibaba Cloud side.', example='47.21.XX.XX'),
        psk?: string(name='Psk', description='The pre-shared key.', example='123456****'),
        remoteId?: string(name='RemoteId', description='The identifier of the tunnel peer.', example='47.42.XX.XX'),
      }(name='TunnelIkeConfig', description='The configuration of Phase 1 negotiations.'),
      tunnelIpsecConfig?: {
        ipsecAuthAlg?: string(name='IpsecAuthAlg', description='The authentication algorithm in the IPsec phase.', example='sha1'),
        ipsecEncAlg?: string(name='IpsecEncAlg', description='The encryption algorithm in the IPsec phase.', example='aes'),
        ipsecLifetime?: long(name='IpsecLifetime', description='The lifetime in the IPsec phase. Unit: seconds.', example='86400'),
        ipsecPfs?: string(name='IpsecPfs', description='The DH group in the IPsec phase.', example='group2'),
      }(name='TunnelIpsecConfig', description='The configuration of Phase 2 negotiations.'),
      zoneNo?: string(name='ZoneNo', description='The zone of the tunnel.', example='ap-southeast-5a'),
    }
  ](name='TunnelOptions')
  }(name='TunnelOptionsSpecification', description='The tunnel configuration of the IPsec-VPN connection.

**TunnelOptionsSpecification** parameters are returned only for dual-tunnel IPsec-VPN connections.'),
  vcoHealthCheck?: {
    dip?: string(name='Dip', description='The destination IP address.', example='192.168.1.1'),
    enable?: string(name='Enable', description='Indicates whether the health check feature is enabled for the IPsec-VPN connection.

*   **true**
*   **false**', example='true'),
    interval?: int32(name='Interval', description='The interval between two consecutive health checks. Unit: seconds.', example='3'),
    retry?: int32(name='Retry', description='The maximum number of health check retries.', example='3'),
    sip?: string(name='Sip', description='The source IP address that is used for health checks.', example='10.1.1.1'),
  }(name='VcoHealthCheck', description='The health check configuration.

**VcoHealthCheck** parameters are returned only for single-tunnel IPsec-VPN connections.'),
  vpnBgpConfig?: {
    enableBgp?: string(name='EnableBgp', description='Indicates whether BGP is enabled. Valid values:

*   **true**
*   **false**', example='true'),
    localAsn?: int32(name='LocalAsn', description='The ASN on the Alibaba Cloud side.', example='65530'),
    localBgpIp?: string(name='LocalBgpIp', description='The BGP IP address on the Alibaba Cloud side.', example='169.254.11.1'),
    peerAsn?: int32(name='PeerAsn', description='The ASN on the data center side.', example='65531'),
    peerBgpIp?: string(name='PeerBgpIp', description='The BGP IP address of the data center.', example='169.254.11.2'),
    status?: string(name='Status', description='The negotiation state of BGP. Valid values:

*   **success**: normal
*   **false**: abnormal', example='success'),
    tunnelCidr?: string(name='TunnelCidr', description='The BGP CIDR block of the IPsec-VPN connection.', example='169.254.11.0/30'),
  }(name='VpnBgpConfig', description='The BGP configuration.

**VpnBgpConfig** parameters are returned only for single-tunnel IPsec-VPN connections.'),
  vpnConnectionId?: string(name='VpnConnectionId', description='The ID of the IPsec-VPN connection.', example='vco-bp1bbi27hojx80nck****'),
  vpnGatewayId?: string(name='VpnGatewayId', description='The ID of the VPN gateway.', example='vpn-bp1q8bgx4xnkm2ogj****'),
}

model ModifyVpnConnectionAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVpnConnectionAttributeResponseBody(name='body'),
}

/**
  * @description *   If you want to modify a IPsec-VPN connection in dual-tunnel mode, call the `ModifyVpnConnectionAttribute` operation. You can modify the required parameters and the following request parameters:
  *     **ClientToken**, **Name**, **LocalSubnet**, **RemoteSubnet**, **EffectImmediately**, **AutoConfigRoute**, **TunnelOptionsSpecification**, and **EnableTunnelsBgp**.
  * *   If you want to modify a IPsec-VPN connection in single-tunnel mode, call the `ModifyVpnConnectionAttribute` operation. You can modify the required parameters and the following request parameters:
  *     **ClientToken**, **Name**, **LocalSubnet**, **RemoteSubnet**, **EffectImmediately**, **IkeConfig**, **IpsecConfig**, **HealthCheckConfig**, **AutoConfigRoute**, **EnableDpd**, **EnableNatTraversal**, **BgpConfig**, and **RemoteCaCertificate**.
  * *   **ModifyVpnConnectionAttribute** is an asynchronous operation. After a request is sent, the system returns a request ID and modifies the configuration of the IPsec-VPN connection in the backend. You can call the [DescribeVpnGateway](https://help.aliyun.com/document_detail/73720.html) operation to query the status of a VPN gateway.
  *     *   If the VPN gateway is in the **updating** state, the configuration of the IPsec-VPN connection is being modified.
  *     *   If the VPN gateway is in the **active** state, the configuration of the IPsec-VPN connection is modified.
  * *   You cannot repeatedly call the **ModifyVpnConnectionAttribute** operation for the same VPN gateway within the specified period of time.
  * @param request  the request parameters of ModifyVpnConnectionAttribute  ModifyVpnConnectionAttributeRequest
  * @return ModifyVpnConnectionAttributeResponse
 */
async function modifyVpnConnectionAttribute(request: ModifyVpnConnectionAttributeRequest): ModifyVpnConnectionAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpnConnectionAttribute', 'POST', '/', 'json', true, 'form', request);
}

model ModifyVpnGatewayAttributeRequest {
  autoPropagate?: boolean(name='AutoPropagate', description='Specifies whether to automatically advertise BGP routes to the virtual private cloud (VPC). Valid values:

*   **true**
*   **false**', example='true', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  description?: string(name='Description', description='The new description of the VPN gateway.

The description must be 1 to 100 characters in length and cannot start with `http://` or `https://`.', example='test', position='Query'),
  name?: string(name='Name', description='The new name of the VPN gateway.

The name must be 2 to 100 characters in length and cannot start with `http://` or `https://`. It must start with a letter and can contain letters, digits, underscores (_), hyphens (-), and periods (.). Other characters are not supported.', example='myvpn', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the VPN gateway is created. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', description='The ID of the VPN gateway.

This parameter is required.', example='vpn-bp1q8bgx4xnkm2ogj****', position='Query'),
}

model ModifyVpnGatewayAttributeResponseBody = {
  autoPropagate?: boolean(name='AutoPropagate', description='Indicates whether BGP routes are automatically advertised to the VPC. Valid values:

*   **true**
*   **false**', example='true'),
  businessStatus?: string(name='BusinessStatus', description='The payment status of the VPN gateway. Valid values:

*   **Normal**
*   **FinancialLocked**', example='Normal'),
  createTime?: long(name='CreateTime', description='The time when the VPN gateway was created. Unit: milliseconds.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1492753580000'),
  description?: string(name='Description', description='The description of the VPN gateway.', example='test'),
  disasterRecoveryInternetIp?: string(name='DisasterRecoveryInternetIp', description='The second IP address assigned by the system to create an IPsec-VPN connection.

This parameter is returned only when the VPN gateway supports the dual-tunnel mode.', example='116.11.XX.XX'),
  disasterRecoveryVSwitchId?: string(name='DisasterRecoveryVSwitchId', description='The ID of the second vSwitch associated with the VPN gateway.

This parameter is returned only when the VPN gateway supports the dual-tunnel mode.', example='vsw-p0w95ql6tmr2ludkt****'),
  enableBgp?: boolean(name='EnableBgp', description='Indicates whether BGP is enabled for the VPN gateway. Valid values:

*   **true**
*   **false**', example='true'),
  endTime?: long(name='EndTime', description='The time when the VPN gateway expires. Unit: milliseconds.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1495382400000'),
  internetIp?: string(name='InternetIp', description='*   If the VPN gateway supports IPsec-VPN connections in single-tunnel mode, the address is the IP address of the VPN gateway and can be used to create an IPsec-VPN connection or an SSL-VPN connection.

*   If the VPN gateway supports IPsec-VPN connections in dual-tunnel mode, the address is the first IP address used to create an IPsec-VPN connection. The address cannot be used to create an SSL-VPN connection.

    If the VPN gateway supports IPsec-VPN connections in dual-tunnel mode, the system assigns two IP addresses to the VPN gateway to create two encrypted tunnels.', example='116.62.XX.XX'),
  intranetIp?: string(name='IntranetIp', description='The IP address of the VPN gateway.

This parameter is returned only when the VPN gateway is a private VPN gateway and supports only the single-tunnel mode.', example='172.27.30.24'),
  name?: string(name='Name', description='The name of the VPN gateway.', example='test'),
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B457'),
  resourceGroupId?: string(name='ResourceGroupId', description='VPN网关实例所属的资源组ID。

您可以调用[ListResourceGroups](https://help.aliyun.com/document_detail/158855.html)接口查询资源组信息。', example='rg-acfmzs372yg****'),
  spec?: string(name='Spec', description='The maximum bandwidth of the VPN gateway. Unit: Mbit/s.', example='5M'),
  sslVpnInternetIp?: string(name='SslVpnInternetIp', description='The IP address of the SSL-VPN connection.

This parameter is returned only when the VPN gateway is a public VPN gateway and supports only the single-tunnel mode. In addition, the VPN gateway must have the SSL-VPN feature enabled.', example='116.33.XX.XX'),
  status?: string(name='Status', description='The status of the VPN gateway. Valid values:

*   **init**
*   **provisioning**
*   **active**
*   **updating**
*   **deleting**', example='active'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch associated with the VPN gateway.', example='vsw-bp1y9ovl1cu9ou4tv****'),
  vpcId?: string(name='VpcId', description='The ID of the VPC to which the VPN gateway belongs.', example='vpc-bp1ub1yt9cvakoel****'),
  vpnGatewayId?: string(name='VpnGatewayId', description='The ID of the VPN gateway.', example='vpn-bp1q8bgx4xnkm2ogj****'),
}

model ModifyVpnGatewayAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVpnGatewayAttributeResponseBody(name='body'),
}

/**
  * @description *   **ModifyVpnGatewayAttribute** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [DescribeVpnGateway](https://help.aliyun.com/document_detail/73720.html) to query the status of the task.
  *     *   If the VPN gateway is in the **updating** state, the VPN gateway is being modified.
  *     *   If the VPN gateway is in the **active** state, the VPN gateway is modified.
  * *   You cannot repeatedly call **ModifyVpnGatewayAttribute** to modify a VPN gateway within the specified period of time.
  * @param request  the request parameters of ModifyVpnGatewayAttribute  ModifyVpnGatewayAttributeRequest
  * @return ModifyVpnGatewayAttributeResponse
 */
async function modifyVpnGatewayAttribute(request: ModifyVpnGatewayAttributeRequest): ModifyVpnGatewayAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpnGatewayAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpnPbrRouteEntryAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='d7d24a21-f4ba-4454-9173-b3****', position='Query'),
  newPriority?: int32(name='NewPriority', description='The new priority of the policy-based route. Valid values: **1** to **100**.

A smaller value indicates a higher priority.

If you do not specify this parameter, the priority of the policy-based route is not modified.

>  You must specify at least one of **NewPriority** and **NewWeight**.', example='10', position='Query'),
  newWeight?: int32(name='NewWeight', description='The new weight of the policy-based route. Valid values:

*   **100**: The IPsec-VPN connection associated with the policy-based route serves as the active connection.
*   **0**: The IPsec-VPN connection associated with the policy-based route serves as the standby connection.

If you do not specify this parameter, the weight of the policy-based route is not modified.

>  You must specify at least one of **NewPriority** and **NewWeight**.', example='0', position='Query'),
  nextHop: string(name='NextHop', description='The next hop of the policy-based route.

This parameter is required.', example='vco-bp15oes1py4i66rmd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  priority: int32(name='Priority', description='The original priority of the policy-based route. Valid values: **1** to **100**.

A smaller value indicates a higher priority.

This parameter is required.', example='5', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VPN gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-heyuan', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeDest: string(name='RouteDest', description='The destination CIDR block of the policy-based route.

This parameter is required.', example='10.0.0.0/24', position='Query'),
  routeSource: string(name='RouteSource', description='The source CIDR block of the policy-based route.

This parameter is required.', example='192.168.1.0/24', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', description='The ID of the VPN gateway.

This parameter is required.', example='vpn-bp1a3kqjiiq9legfx****', position='Query'),
  weight: int32(name='Weight', description='The original weight of the policy-based route. Valid values:

*   **100**: The IPsec-VPN connection associated with the policy-based route serves as an active connection.
*   **0**: The IPsec-VPN connection associated with the policy-based route serves as a standby connection.

This parameter is required.', example='100', position='Query'),
}

model ModifyVpnPbrRouteEntryAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
}

model ModifyVpnPbrRouteEntryAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVpnPbrRouteEntryAttributeResponseBody(name='body'),
}

/**
  * @description *   You can call the **ModifyVpnPbrRouteEntryAttribute** operation to modify the weight and priority of a policy-based route.
  *     *   If you want to modify only the weight of a policy-based route, call [ModifyVpnPbrRouteEntryWeight](https://help.aliyun.com/document_detail/127249.html).
  *     *   If you want to modify only the priority of a policy-based route, call [ModifyVpnPbrRouteEntryPriority](https://help.aliyun.com/document_detail/466870.html).
  *     *   If a policy-based route does not support priorities, you can only call [ModifyVpnPbrRouteEntryWeight](https://help.aliyun.com/document_detail/127249.html) to modify its weight.
  * *   The **ModifyVpnPbrRouteEntryAttribute** operation is asynchronous. After you send a request, the system returns a request ID, but the operation is still being performed in the system background. You can call [DescribeVpnGateway](https://help.aliyun.com/document_detail/73720.html) to query the status of a VPN gateway.
  *     *   If a VPN gateway is in the **updating** state, the policy-based route entry is being modified.
  *     *   If a VPN gateway is in the **active** state, the policy-based route entry is modified.
  * *   You cannot repeatedly call the **ModifyVpnPbrRouteEntryAttribute** operation for the same VPN gateway within the specified period of time.
  * @param request  the request parameters of ModifyVpnPbrRouteEntryAttribute  ModifyVpnPbrRouteEntryAttributeRequest
  * @return ModifyVpnPbrRouteEntryAttributeResponse
 */
async function modifyVpnPbrRouteEntryAttribute(request: ModifyVpnPbrRouteEntryAttributeRequest): ModifyVpnPbrRouteEntryAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpnPbrRouteEntryAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpnPbrRouteEntryPriorityRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='d7d24a21-f4ba-4454-9173-b3****', position='Query'),
  newPriority: int32(name='NewPriority', description='The new priority of the policy-based route. Valid values: **1** to **100**.

A smaller value indicates a higher priority.

This parameter is required.', example='10', position='Query'),
  nextHop: string(name='NextHop', description='The next hop of the policy-based route.

This parameter is required.', example='vco-bp15oes1py4i66rmd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  priority?: int32(name='Priority', description='The original priority of the policy-based route. Valid values: **1** to **100**.

A smaller value indicates a higher priority.', example='5', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the VPN gateway is created.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-henyuan', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeDest: string(name='RouteDest', description='The destination CIDR block of the policy-based route.

This parameter is required.', example='10.0.0.0/24', position='Query'),
  routeSource: string(name='RouteSource', description='The source CIDR block of the policy-based route.

This parameter is required.', example='192.168.1.0/24', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', description='The ID of the VPN gateway.

This parameter is required.', example='vpn-bp1a3kqjiiq9legfx****', position='Query'),
  weight: int32(name='Weight', description='The weight of the policy-based route. Valid values:

This parameter is required.', example='100', position='Query'),
}

model ModifyVpnPbrRouteEntryPriorityResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
}

model ModifyVpnPbrRouteEntryPriorityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVpnPbrRouteEntryPriorityResponseBody(name='body'),
}

/**
  * @description *   **ModifyVpnPbrRouteEntryPriority** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [DescribeVpnGateway](https://help.aliyun.com/document_detail/73720.html) to query the status of the task.
  *     *   If a VPN gateway is in the **updating** state, the policy-based route entry is being modified.
  *     *   If the VPN gateway is in the **active** state, the policy-based route is created.
  * *   You cannot repeatedly call the **ModifyVpnPbrRouteEntryPriority** operation for the same VPN gateway within the specified period of time.
  * @param request  the request parameters of ModifyVpnPbrRouteEntryPriority  ModifyVpnPbrRouteEntryPriorityRequest
  * @return ModifyVpnPbrRouteEntryPriorityResponse
 */
async function modifyVpnPbrRouteEntryPriority(request: ModifyVpnPbrRouteEntryPriorityRequest): ModifyVpnPbrRouteEntryPriorityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpnPbrRouteEntryPriority', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpnPbrRouteEntryWeightRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='d7d24a21-f4ba-4454-9173-b3828dae492b', position='Query'),
  newWeight: int32(name='NewWeight', description='The new weight of the policy-based route. Valid values:

*   **100**: The IPsec-VPN connection associated with the policy-based route serves as an active connection.
*   **0**: The IPsec-VPN connection associated with the policy-based route serves as a standby connection.

This parameter is required.', example='100', position='Query'),
  nextHop: string(name='NextHop', description='The next hop of the policy-based route.

This parameter is required.', example='vco-bp15oes1py4i66rmd****', position='Query'),
  overlayMode?: string(name='OverlayMode', description='The tunneling protocol. The value is set to **Ipsec**, which indicates the IPsec tunneling protocol.', example='Ipsec', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  priority?: int32(name='Priority', description='The priority of the policy-based route.

*   If the route was not assigned a priority, this parameter is optional.

*   If the route was assigned a priority, this parameter is optional.

        If you specify this parameter, set the value to the priority that was assigned to the policy-based route. Otherwise, the operation fails.', example='10', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the VPN gateway is created. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeDest: string(name='RouteDest', description='The destination CIDR block of the policy-based route.

This parameter is required.', example='10.0.0.0/24', position='Query'),
  routeSource: string(name='RouteSource', description='The source CIDR block of the policy-based route.

This parameter is required.', example='192.168.1.0/24', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', description='The ID of the VPN gateway.

This parameter is required.', example='vpn-bp1a3kqjiiq9legfx****', position='Query'),
  weight: int32(name='Weight', description='The original weight of the policy-based route. Valid values:

*   **100**: The IPsec-VPN connection associated with the policy-based route serves as an active connection.
*   **0**: The IPsec-VPN connection associated with the policy-based route serves as a standby connection.

This parameter is required.', example='0', position='Query'),
}

model ModifyVpnPbrRouteEntryWeightResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
}

model ModifyVpnPbrRouteEntryWeightResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVpnPbrRouteEntryWeightResponseBody(name='body'),
}

/**
  * @description *   **ModifyVpnPbrRouteEntryWeight** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [DescribeVpnGateway](https://help.aliyun.com/document_detail/73720.html) to query the status of the task.
  *     *   If a VPN gateway is in the **updating** state, the policy-based route entry is being modified.
  *     *   If a VPN gateway is in the **active** state, the policy-based route entry is modified.
  * *   You cannot repeatedly call the **ModifyVpnPbrRouteEntryWeight** operation for the same VPN gateway within the specified period of time.
  * @param request  the request parameters of ModifyVpnPbrRouteEntryWeight  ModifyVpnPbrRouteEntryWeightRequest
  * @return ModifyVpnPbrRouteEntryWeightResponse
 */
async function modifyVpnPbrRouteEntryWeight(request: ModifyVpnPbrRouteEntryWeightRequest): ModifyVpnPbrRouteEntryWeightResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpnPbrRouteEntryWeight', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpnRouteEntryWeightRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='d7d24a21-f4ba-4454-9173-b3828dae492b', position='Query'),
  newWeight: int32(name='NewWeight', description='The new weight of the destination-based route. Valid values:

*   **0**: a low priority
*   **100**: a high priority

This parameter is required.', example='100', position='Query'),
  nextHop: string(name='NextHop', description='The next hop of the destination-based route.

This parameter is required.', example='vco-bp15oes1py4i66rmd****', position='Query'),
  overlayMode?: string(name='OverlayMode', description='The tunneling protocol. Set the value to **Ipsec**.', example='Ipsec', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the VPN gateway is created. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeDest: string(name='RouteDest', description='The destination CIDR block of the destination-based route.

This parameter is required.', example='10.0.0.0/24', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', description='The ID of the VPN gateway.

This parameter is required.', example='vpn-bp1a3kqjiiq9legfx****', position='Query'),
  weight: int32(name='Weight', description='The original weight of the destination-based route. Valid values:

*   **0**: a low priority
*   **100**: a high priority

This parameter is required.', example='0', position='Query'),
}

model ModifyVpnRouteEntryWeightResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
}

model ModifyVpnRouteEntryWeightResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVpnRouteEntryWeightResponseBody(name='body'),
}

/**
  * @description *   In scenarios where a VPN gateway has an active and a standby destination-based route, if you need to modify the weight of the active destination-based route, you must first delete the standby destination-based route. After you modify the active destination-based route, configure a standby destination-based route. If you need to modify the weight of the standby destination-based route, you also need to delete the active destination-based route first. After you modify the standby destination-based route, configure an active destination-based route. For more information about how to delete a destination-based route, see [DeleteVpnRouteEntry](https://help.aliyun.com/document_detail/2526961.html).
  * *   **ModifyVpnRouteEntryWeight** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call [DescribeVpnGateway](https://help.aliyun.com/document_detail/73720.html) to query the status of the task.
  *     *   If the VPN gateway is in the **updating** state, the weight of the destination-based route is being modified.
  *     *   If the VPN gateway is in the **active** state, the weight of the destination-based route is modified.
  * *   You cannot repeatedly call the **ModifyVpnRouteEntryWeight** operation to modify the weight of destination-based route for the same VPN gateway within the specified period of time.
  * @param request  the request parameters of ModifyVpnRouteEntryWeight  ModifyVpnRouteEntryWeightRequest
  * @return ModifyVpnRouteEntryWeightResponse
 */
async function modifyVpnRouteEntryWeight(request: ModifyVpnRouteEntryWeightRequest): ModifyVpnRouteEntryWeightResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpnRouteEntryWeight', 'POST', '/', 'json', false, 'json', request);
}

model MoveResourceGroupRequest {
  newResourceGroupId: string(name='NewResourceGroupId', description='The ID of the resource group to which you want to move the resource.

>  You can use resource groups to facilitate resource grouping and permission management for an Alibaba Cloud. For more information, see [What is resource management?](https://help.aliyun.com/document_detail/94475.html)

This parameter is required.', example='rg-acfm3peow3k****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the cloud resource belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId: string(name='ResourceId', description='The resource ID.

This parameter is required.', example='vpc-hp31psbg8ec3023s6****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource for which you want to modify the resource group. Valid values:

*   **Vpc**
*   **Eip**
*   **BandwidthPackage**
*   **PrefixList**
*   **PublicIpAddressPool**
*   **FlowLog**
*   **HaVip**
*   **TrafficMirrorFilter**
*   **TrafficMirrorSession**
*   **IPv4Gateway**
*   **IPv6Gateway**
*   **DhcpOptionsSet**
*   **GatewayEndpoint**

This parameter is required.', example='vpc', position='Query'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='611CB80C-B6A9-43DB-9E38-0B0AC3D9B58F'),
}

model MoveResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveResourceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MoveResourceGroup  MoveResourceGroupRequest
  * @return MoveResourceGroupResponse
 */
async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model MoveVpnResourceGroupRequest {
  instanceId: string(name='InstanceId', description='The ID of the resource.

This parameter is required.', example='vpn-8vb3lzn7biepthri8****', position='Query'),
  newResourceGroupId: string(name='NewResourceGroupId', description='The ID of the new resource group.

This parameter is required.', example='rg-acfmzs372yg****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the resource.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-zhangjiakou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The type of resource.

*   **VpnGateway**: VPN gateway

    After you move a VPN gateway to a new resource group, the following associated resources are also moved to the new resource group: IPsec servers, SSL servers, SSL client certificates, and IPsec-VPN connections.

*   **CustomerGateway**: customer gateway

*   **VpnAttachment**: IPsec-VPN connection

    An IPsec-VPN connection associated with a transit router or not associate with a resource.

This parameter is required.', example='VpnGateway', position='Query'),
}

model MoveVpnResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='89ED47AF-3319-566E-A5F5-94E3F47F54A8'),
}

model MoveVpnResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MoveVpnResourceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MoveVpnResourceGroup  MoveVpnResourceGroupRequest
  * @return MoveVpnResourceGroupResponse
 */
async function moveVpnResourceGroup(request: MoveVpnResourceGroupRequest): MoveVpnResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveVpnResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model OpenFlowLogServiceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not set this parameter, the system automatically set **ClientToken** to the value of **RequestId**. The value of **RequestId** for each API request is different.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the flow log.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model OpenFlowLogServiceResponseBody = {
  code?: string(name='Code', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The information returned after the flow log feature is enabled.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='28CF47AB-B6C0-5FA2-80C7-2B28826A92CB'),
}

model OpenFlowLogServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenFlowLogServiceResponseBody(name='body'),
}

/**
  * @description *   You cannot repeatedly call the **OpenFlowLogService** operation within the specified period of time by using an Alibaba Cloud account.
  * *   You can call the [GetFlowLogServiceStatus](https://help.aliyun.com/document_detail/449624.html) operation to query the status of the flow log feature.
  * @param request  the request parameters of OpenFlowLogService  OpenFlowLogServiceRequest
  * @return OpenFlowLogServiceResponse
 */
async function openFlowLogService(request: OpenFlowLogServiceRequest): OpenFlowLogServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenFlowLogService', 'POST', '/', 'json', false, 'json', request);
}

model OpenPhysicalConnectionServiceRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Express Connect circuit is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model OpenPhysicalConnectionServiceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model OpenPhysicalConnectionServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenPhysicalConnectionServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OpenPhysicalConnectionService  OpenPhysicalConnectionServiceRequest
  * @return OpenPhysicalConnectionServiceResponse
 */
async function openPhysicalConnectionService(request: OpenPhysicalConnectionServiceRequest): OpenPhysicalConnectionServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenPhysicalConnectionService', 'POST', '/', 'json', false, 'json', request);
}

model OpenPublicIpAddressPoolServiceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655442455', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model OpenPublicIpAddressPoolServiceResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='28CF47AB-B6C0-5FA2-80C7-2B37726A92CB'),
}

model OpenPublicIpAddressPoolServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenPublicIpAddressPoolServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OpenPublicIpAddressPoolService  OpenPublicIpAddressPoolServiceRequest
  * @return OpenPublicIpAddressPoolServiceResponse
 */
async function openPublicIpAddressPoolService(request: OpenPublicIpAddressPoolServiceRequest): OpenPublicIpAddressPoolServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenPublicIpAddressPoolService', 'POST', '/', 'json', false, 'json', request);
}

model OpenTrafficMirrorServiceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655442222', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region to which the mirrored traffic belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model OpenTrafficMirrorServiceResponseBody = {
  code?: string(name='Code', description='The error code.', example='200'),
  message?: string(name='Message', description='The information returned after traffic mirroring is enabled.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='4FCCF008-4C13-4231-BE77-D5203801A9E2'),
}

model OpenTrafficMirrorServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OpenTrafficMirrorServiceResponseBody(name='body'),
}

/**
  * @description ## [](#)Usage notes
  * You can enable traffic mirroring for different regions. You cannot repeatedly call the **OpenTrafficMirrorService** operation to enable traffic mirroring for one region within the specified period of time.
  * @param request  the request parameters of OpenTrafficMirrorService  OpenTrafficMirrorServiceRequest
  * @return OpenTrafficMirrorServiceResponse
 */
async function openTrafficMirrorService(request: OpenTrafficMirrorServiceRequest): OpenTrafficMirrorServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenTrafficMirrorService', 'POST', '/', 'json', false, 'json', request);
}

model PublishVpcRouteEntriesRequest {
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeEntries?: [ 
    {
      destinationCidrBlock: string(name='DestinationCidrBlock', description='This parameter is required.', example='121.41.165.123/32'),
      routeTableId: string(name='RouteTableId', description='This parameter is required.', example='vtb-2ze3jgygk9bmsj23s****'),
    }
  ](name='RouteEntries', position='Query'),
  targetInstanceId: string(name='TargetInstanceId', description='This parameter is required.', example='ecr-dhw2xsds5****', position='Query'),
  targetType: string(name='TargetType', description='This parameter is required.', example='ECR', position='Query'),
}

model PublishVpcRouteEntriesResponseBody = {
  requestId?: string(name='RequestId', example='980960B0-2969-40BF-8542-EBB34FD358AB'),
}

model PublishVpcRouteEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishVpcRouteEntriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PublishVpcRouteEntries  PublishVpcRouteEntriesRequest
  * @return PublishVpcRouteEntriesResponse
 */
async function publishVpcRouteEntries(request: PublishVpcRouteEntriesRequest): PublishVpcRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishVpcRouteEntries', 'POST', '/', 'json', false, 'json', request);
}

model PublishVpnRouteEntryRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='d7d24a21-f4ba-4454-9173-b382****', position='Query'),
  nextHop: string(name='NextHop', description='The next hop of the VPN gateway route.

This parameter is required.', example='vco-bp15oes1py4i66rmd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  publishVpc: boolean(name='PublishVpc', description='Specifies whether to advertise the VPN gateway route to the VPC route table. Valid values:

*   **true**
*   **false**

This parameter is required.', example='true', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the VPN gateway is created.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeDest: string(name='RouteDest', description='The destination CIDR block of the VPN gateway route.

This parameter is required.', example='10.0.0.0/24', position='Query'),
  routeType: string(name='RouteType', description='The type of the VPN gateway route. Valid values:

*   **pbr**: policy-based route
*   **dbr**: destination-based route

This parameter is required.', example='pbr', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', description='The ID of the VPN gateway.

This parameter is required.', example='vpn-bp1a3kqjiiq9legfx****', position='Query'),
}

model PublishVpnRouteEntryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
}

model PublishVpnRouteEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishVpnRouteEntryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PublishVpnRouteEntry  PublishVpnRouteEntryRequest
  * @return PublishVpnRouteEntryResponse
 */
async function publishVpnRouteEntry(request: PublishVpnRouteEntryRequest): PublishVpnRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishVpnRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model RecoverPhysicalConnectionRequest {
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and instance status. If the request fails the dry run, an error message is returned. If the request passes the dry run, the request ID is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the Express Connect circuit.

>  You can resume only shared Express Connect circuits by calling this API operation.

This parameter is required.', example='pc-bp1mrgfbtmc9brre7****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Express Connect circuit.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  token?: string(name='Token', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='CBCE910E-D396-4944-8****', position='Query'),
}

model RecoverPhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CD14EA74-E9C3-59A9-942A-DFEC7E12818D'),
}

model RecoverPhysicalConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecoverPhysicalConnectionResponseBody(name='body'),
}

/**
  * @description # [](#)Description
  * You can call this API operation to resume a suspended Express Connect circuit. You can resume only shared Express Connect circuits by calling this API operation.
  * @param request  the request parameters of RecoverPhysicalConnection  RecoverPhysicalConnectionRequest
  * @return RecoverPhysicalConnectionResponse
 */
async function recoverPhysicalConnection(request: RecoverPhysicalConnectionRequest): RecoverPhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecoverPhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model RecoverVirtualBorderRouterRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VBR.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vbrId: string(name='VbrId', description='The ID of the VBR.

This parameter is required.', example='vbr-bp1lhl0taikrte****', position='Query'),
}

model RecoverVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model RecoverVirtualBorderRouterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecoverVirtualBorderRouterResponseBody(name='body'),
}

/**
  * @description After you call this operation, the VBR changes from the **terminated** state to the **recovering** state. After the operation is performed, the VBR enters the **active** state.
  * When you call this operation, take note of the following items:
  * *   Only the owner of the Express Connect circuit can call this operation.
  * *   The Express Connect circuit to which the VBR connects must be in the **Enabled** state.
  * @param request  the request parameters of RecoverVirtualBorderRouter  RecoverVirtualBorderRouterRequest
  * @return RecoverVirtualBorderRouterResponse
 */
async function recoverVirtualBorderRouter(request: RecoverVirtualBorderRouterRequest): RecoverVirtualBorderRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecoverVirtualBorderRouter', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseEipAddressRequest {
  allocationId: string(name='AllocationId', description='The ID of the EIP that you want to release.

This parameter is required.', example='eip-2zeerraiwb7uj6i0d****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region to which the EIP belongs. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ReleaseEipAddressResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='748C38F6-9A3D-482E-83FB-DB6C39C68AEA'),
}

model ReleaseEipAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseEipAddressResponseBody(name='body'),
}

/**
  * @description Before you call this operation, take note of the following items:
  * *   Before you release an EIP, make sure that the EIP meets the following requirements:
  *     *   You can release only an EIP that is in the **Available** state.
  *     *   You can release only a pay-as-you-go EIP. You cannot release a subscription EIP.
  * *   **ReleaseEipAddress** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeEipAddresses](https://help.aliyun.com/document_detail/120193.html) operation to query the status of the task:
  *     *   If the EIP is in the **Releasing** state, the EIP is being released. In this state, you can only query the EIP and cannot perform other operations.
  *     *   If you cannot query the EIP, the EIP is released.
  * *   You cannot repeatedly call the **ReleaseEipAddress** operation to release an EIP within the specified period of time.
  * @param request  the request parameters of ReleaseEipAddress  ReleaseEipAddressRequest
  * @return ReleaseEipAddressResponse
 */
async function releaseEipAddress(request: ReleaseEipAddressRequest): ReleaseEipAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseEipAddress', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseEipSegmentAddressRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44-001sdfg', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the contiguous EIPs. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  segmentInstanceId: string(name='SegmentInstanceId', description='The ID of the contiguous EIP group to be released.

The system releases all EIPs in the group.

This parameter is required.', example='eipsg-2zett8ba055tbsxme****', position='Query'),
}

model ReleaseEipSegmentAddressResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F7A6301A-64BA-41EC-8284-8F4838C15D1F'),
}

model ReleaseEipSegmentAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseEipSegmentAddressResponseBody(name='body'),
}

/**
  * @description *   After you call the **ReleaseEipSegmentAddress** operation, all EIPs in the specified group are released.
  * *   **ReleaseEipSegmentAddress** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeEipSegment](https://help.aliyun.com/document_detail/156063.html) operation to query the status of the task.
  *     *   If the group is in the **Releasing** state, EIPs in the group are being released. In this state, you can only query the group and cannot perform other operations.
  *     *   If you cannot query the group of contiguous EIPs, the contiguous EIPs are released.
  * *   You cannot repeatedly call the **ReleaseEipSegmentAddress** operation to release a group of contiguous EIPs within the specified period of time.
  * @param request  the request parameters of ReleaseEipSegmentAddress  ReleaseEipSegmentAddressRequest
  * @return ReleaseEipSegmentAddressResponse
 */
async function releaseEipSegmentAddress(request: ReleaseEipSegmentAddressRequest): ReleaseEipSegmentAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseEipSegmentAddress', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseIpv6AddressRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  ipv6AddressId: string(name='Ipv6AddressId', description='The ID of the IPv6 address.

This parameter is required.', example='ipv6-2zen5j4axcp5l5qyy****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ReleaseIpv6AddressResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C44F62BE-9CE7-4277-B117-69243F3988BF'),
}

model ReleaseIpv6AddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseIpv6AddressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReleaseIpv6Address  ReleaseIpv6AddressRequest
  * @return ReleaseIpv6AddressResponse
 */
async function releaseIpv6Address(request: ReleaseIpv6AddressRequest): ReleaseIpv6AddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseIpv6Address', 'POST', '/', 'json', false, 'json', request);
}

model RemoveCommonBandwidthPackageIpRequest {
  bandwidthPackageId: string(name='BandwidthPackageId', description='The ID of the Internet Shared Bandwidth instance.

This parameter is required.', example='cbwp-2ze2ic1xd2qeqk145****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ipInstanceId: string(name='IpInstanceId', description='The EIP ID.

You can call the [DescribeEipAddresses](https://help.aliyun.com/document_detail/36018.html) operation to query EIP IDs.

This parameter is required.', example='eip-2zeerraiwb7uj6i0d****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Internet Shared Bandwidth instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RemoveCommonBandwidthPackageIpResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model RemoveCommonBandwidthPackageIpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveCommonBandwidthPackageIpResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveCommonBandwidthPackageIp  RemoveCommonBandwidthPackageIpRequest
  * @return RemoveCommonBandwidthPackageIpResponse
 */
async function removeCommonBandwidthPackageIp(request: RemoveCommonBandwidthPackageIpRequest): RemoveCommonBandwidthPackageIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveCommonBandwidthPackageIp', 'POST', '/', 'json', false, 'json', request);
}

model RemoveGlobalAccelerationInstanceIpRequest {
  globalAccelerationInstanceId: string(name='GlobalAccelerationInstanceId', description='The ID of the shared-bandwidth instance.

This parameter is required.', example='ga-m5ex47zwya1sejyni****', position='Query'),
  ipInstanceId: string(name='IpInstanceId', description='The ID of the EIP.

To query the EIP ID, call DescribeEipAddresses.

This parameter is required.', example='eip-bp13e9i2qst4g6jzi****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the shared-bandwidth instance is located.

To query the region ID, call DescribeRegions.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RemoveGlobalAccelerationInstanceIpResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
}

model RemoveGlobalAccelerationInstanceIpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveGlobalAccelerationInstanceIpResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveGlobalAccelerationInstanceIp  RemoveGlobalAccelerationInstanceIpRequest
  * @return RemoveGlobalAccelerationInstanceIpResponse
 */
async function removeGlobalAccelerationInstanceIp(request: RemoveGlobalAccelerationInstanceIpRequest): RemoveGlobalAccelerationInstanceIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveGlobalAccelerationInstanceIp', 'POST', '/', 'json', false, 'json', request);
}

model RemoveIPv6TranslatorAclListEntryRequest {
  aclEntryId: string(name='AclEntryId', description='The ID of the ACL entry to be deleted.

This parameter is required.', example='ipv6transaclentry-bp105jrs****', position='Query'),
  aclId: string(name='AclId', description='The ID of the ACL to which the ACL entry belongs.

This parameter is required.', example='ipv6transacl-bp1de2****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region of the ACL.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RemoveIPv6TranslatorAclListEntryResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model RemoveIPv6TranslatorAclListEntryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveIPv6TranslatorAclListEntryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveIPv6TranslatorAclListEntry  RemoveIPv6TranslatorAclListEntryRequest
  * @return RemoveIPv6TranslatorAclListEntryResponse
 */
async function removeIPv6TranslatorAclListEntry(request: RemoveIPv6TranslatorAclListEntryRequest): RemoveIPv6TranslatorAclListEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveIPv6TranslatorAclListEntry', 'POST', '/', 'json', false, 'json', request);
}

model RemoveSourcesFromTrafficMirrorSessionRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not set this parameter, the system uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Valid values:

*   **true**: checks the request without performing the operation. The system checks the required parameters, request format, and limits. If the request fails the check, an error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. After the request passes the check, the operation is performed.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the traffic mirror session belongs. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list. For more information about regions that support traffic mirroring, see [Overview of traffic mirroring](https://help.aliyun.com/document_detail/207513.html).

This parameter is required.', example='cn-hongkong', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMirrorSessionId: string(name='TrafficMirrorSessionId', description='The ID of the traffic mirror session from which you want to delete a traffic mirror source.

This parameter is required.', example='tms-j6cla50buc44ap8tu****', position='Query'),
  trafficMirrorSourceIds: [ string ](name='TrafficMirrorSourceIds', description='The ID of the traffic mirror source to be deleted. Maximum value of N: 10.

This parameter is required.', example='eni-j6c8znm5l1yt4sox****', maxLength=128, position='Query'),
}

model RemoveSourcesFromTrafficMirrorSessionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A33B2C6A-89D1-4DEA-A807-A6E8CC552484'),
}

model RemoveSourcesFromTrafficMirrorSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveSourcesFromTrafficMirrorSessionResponseBody(name='body'),
}

/**
  * @description *   **RemoveSourcesFromTrafficMirrorSession** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListTrafficMirrorSessions](https://help.aliyun.com/document_detail/261367.html) operation to query the status of the task.
  *     *   If the traffic mirror session is in the **Modifying** state, the traffic mirror source is being deleted.
  *     *   If the traffic mirror session is in the **Created** state, the traffic mirror source is deleted.
  * *   You cannot repeatedly call **RemoveSourcesFromTrafficMirrorSession** within the specified period of time.
  * @param request  the request parameters of RemoveSourcesFromTrafficMirrorSession  RemoveSourcesFromTrafficMirrorSessionRequest
  * @return RemoveSourcesFromTrafficMirrorSessionResponse
 */
async function removeSourcesFromTrafficMirrorSession(request: RemoveSourcesFromTrafficMirrorSessionRequest): RemoveSourcesFromTrafficMirrorSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveSourcesFromTrafficMirrorSession', 'POST', '/', 'json', false, 'json', request);
}

model ReplaceVpcDhcpOptionsSetRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, the system uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  dhcpOptionsSetId: string(name='DhcpOptionsSetId', description='The ID of the new DHCP options set.

This parameter is required.', example='dopt-o6w0df4epg9zo8isy****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Valid values:

*   **true**: checks the request without performing the operation. The system checks whether your AccessKey pair is valid, whether the Resource Access Management (RAM) user is authorized, and whether the required parameters are set. If the request fails to pass the check, the corresponding error message is returned. If the request passes the check, the DryRunOperation error code is returned.
*   **false** (default): sends the request. If the request passes the check, a 2XX HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region to which the DHCP options set belongs. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the associated VPC.

This parameter is required.', example='vpc-dsferghthth****', position='Query'),
}

model ReplaceVpcDhcpOptionsSetResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model ReplaceVpcDhcpOptionsSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReplaceVpcDhcpOptionsSetResponseBody(name='body'),
}

/**
  * @description *   The **ReplaceVpcDhcpOptionsSet** operation is asynchronous. After you send the request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [DescribeVpcAttribute](https://help.aliyun.com/document_detail/94565.html) operation to query the status of a DHCP options set:
  *     *   If the DHCP options set is in the **Pending** state, the DHCP options set is being replaced.
  *     *   If the DHCP options set is in the **InUse** state, the DHCP options set is replaced.
  * *   You cannot repeatedly call the **ReplaceVpcDhcpOptionsSet** operation to replace the DHCP options set associated with a VPC within the specified period of time.
  * @param request  the request parameters of ReplaceVpcDhcpOptionsSet  ReplaceVpcDhcpOptionsSetRequest
  * @return ReplaceVpcDhcpOptionsSetResponse
 */
async function replaceVpcDhcpOptionsSet(request: ReplaceVpcDhcpOptionsSetRequest): ReplaceVpcDhcpOptionsSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReplaceVpcDhcpOptionsSet', 'POST', '/', 'json', false, 'json', request);
}

model RetryVpcPrefixListAssociationRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters.

>  If you do not set this parameter, the system automatically uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to only precheck the request. Valid values:

*   **true**: prechecks the request without associating the prefix list. The system prechecks the required parameters, request syntax, and limits. If the request fails the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false**: sends the request. If the request passes the precheck, a 2xx HTTP status code is returned and the prefix list is associated. This is the default value.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prefixListId: string(name='PrefixListId', description='The ID of the prefix list that you want to re-apply.

This parameter is required.', example='pl-0b7hwu67****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the prefix list that you want to re-apply.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId: string(name='ResourceId', description='The ID of the associated resource.

This parameter is required.', example='vtb-bp1drpcfz9srr393h****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource with which the prefix list is associated. Valid values:

*   **vpcRouteTable**: VPC route table
*   **trRouteTable**: route table of a transit router

This parameter is required.', example='vpcRouteTable', position='Query'),
}

model RetryVpcPrefixListAssociationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model RetryVpcPrefixListAssociationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RetryVpcPrefixListAssociationResponseBody(name='body'),
}

/**
  * @description *   If you modify the information about a prefix list but the modification is not automatically applied to the route table that is associated with the prefix list, you can call this operation to apply the latest prefix list to the associated route table.
  * *   The **RetryVpcPrefixListAssociation** operation is asynchronous. After you send the request, the system returns a request ID. However, the operation is still being performed in the background. You can call the [GetVpcPrefixListAssociations](https://help.aliyun.com/document_detail/445478.html) to check whether the prefix list is re-applied.
  *     *   If the prefix list is in the **Modifying** state, the prefix list is being re-applied.
  *     *   If the prefix list is in the **ModifyFailed** state, the prefix list fails to be re-applied.
  *     *   If the prefix list is in the **Created** state, the prefix list is re-applied.
  * *   After you call the **RetryVpcPrefixListAssociation** operation to re-apply a prefix list, you cannot call the operation again until the current task is complete.
  * @param request  the request parameters of RetryVpcPrefixListAssociation  RetryVpcPrefixListAssociationRequest
  * @return RetryVpcPrefixListAssociationResponse
 */
async function retryVpcPrefixListAssociation(request: RetryVpcPrefixListAssociationRequest): RetryVpcPrefixListAssociationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RetryVpcPrefixListAssociation', 'POST', '/', 'json', false, 'json', request);
}

model RevokeInstanceFromCenRequest {
  cenId: string(name='CenId', description='The ID of the CEN instance to which the network instance is attached.

This parameter is required.', example='cen-7qthudw0ll6jmc****', position='Query'),
  cenOwnerId: long(name='CenOwnerId', description='The user ID (UID) of the Apsara Stack tenant account to which the CEN instance belongs.

This parameter is required.', example='123456789', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the network instance.

This parameter is required.', example='vpc-uf6o8d1dj8sjwxi6o****', position='Query'),
  instanceType: string(name='InstanceType', description='The type of the network instance. Valid values:

*   **VPC**
*   **VBR**
*   **CCN**

This parameter is required.', example='VPC', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the network instance is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RevokeInstanceFromCenResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model RevokeInstanceFromCenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeInstanceFromCenResponseBody(name='body'),
}

/**
  * @description ## [](#)Usage notes
  * *   **RevokeInstanceFromCen** is a Virtual Private Cloud (VPC) operation. Therefore, you must use `vpc.aliyuncs.com` as the domain name when you call this operation. The API version is `2016-04-28`.
  * *   You cannot repeatedly call the **RevokeInstanceFromCen** operation to revoke the permissions on a network instance that is attached to a CEN instance within the specified period of time. The network instance can be a VPC, virtual border router (VBR), or a Cloud Connect Network (CCN) instance.
  * @param request  the request parameters of RevokeInstanceFromCen  RevokeInstanceFromCenRequest
  * @return RevokeInstanceFromCenResponse
 */
async function revokeInstanceFromCen(request: RevokeInstanceFromCenRequest): RevokeInstanceFromCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeInstanceFromCen', 'POST', '/', 'json', false, 'json', request);
}

model RevokeInstanceFromVbrRequest {
  grantType: string(name='GrantType', description='The VBRs for which you want to revoke permissions on the VPC. Valid values:

*   **ALL**: Permissions on the VPC are revoked for all VBRs in the specified region. **VbrInstanceIds** can be left empty.
*   **Specify**: Permissions on the VPC are revoked for the specified VBRs. **VbrInstanceIds** must be assigned a value.

This parameter is required.', example='ALL', position='Query'),
  instanceId: string(name='InstanceId', description='The VPC ID.

This parameter is required.', example='vpc-bp1brjuegjc88v3u9****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the VPC is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  vbrInstanceIds?: [ string ](name='VbrInstanceIds', description='The IDs of the VBRs for which you want to revoke the permissions.', shrink='simple', position='Query'),
  vbrOwnerUid: string(name='VbrOwnerUid', description='The ID of the Alibaba Cloud account to which the VBR belongs.

This parameter is required.', example='1210123456123456', position='Query'),
  vbrRegionNo: string(name='VbrRegionNo', description='The ID of the region where the VBR is deployed.

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model RevokeInstanceFromVbrResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='45B7AA4A-4658-5FFC-90DD-9B8729F301BB'),
}

model RevokeInstanceFromVbrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeInstanceFromVbrResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RevokeInstanceFromVbr  RevokeInstanceFromVbrRequest
  * @return RevokeInstanceFromVbrResponse
 */
async function revokeInstanceFromVbr(request: RevokeInstanceFromVbrRequest): RevokeInstanceFromVbrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeInstanceFromVbr', 'POST', '/', 'json', false, 'json', request);
}

model SecondApplyPhysicalConnectionLOARequest {
  bandwidth?: int32(name='Bandwidth', description='The bandwidth of the Express Connect circuit. Unit: Mbit/s.

Valid values: **2** to **10240**.', example='3', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests.

>  If you do not specify this parameter, the system automatically uses the request ID as the client token. The request ID may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  companyName: string(name='CompanyName', description='The name of the customer company that requires the Express Connect circuit.

This parameter is required.', example='company', position='Query'),
  constructionTime: string(name='ConstructionTime', description='The time when construction started. Specify the time in the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.

This parameter is required.', example='2022-02-28T16:00:00Z', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the Express Connect circuit.

This parameter is required.', example='pc-bp1qrb3044eqi****', position='Query'),
  lineType: string(name='LineType', description='The type of Express Connect circuit. Valid values:

*   **MSTP**
*   **MPLSVPN**
*   **FIBRE**
*   **Other**

This parameter is required.', example='FIBRE', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  PMInfo?: [ 
    {
      PMCertificateNo?: string(name='PMCertificateNo', description='The ID number of the construction engineer. You can specify the ID number of an ID card or an international passport.

You can configure information for up to 16 construction engineers.', example='5****************9'),
      PMCertificateType?: string(name='PMCertificateType', description='The type of the identity document of the construction engineer. Valid values:

*   **IDCard**
*   **Passport**', example='IDCard'),
      PMContactInfo?: string(name='PMContactInfo', description='The contact information about the construction engineer.', example='1390000****'),
      PMGender?: string(name='PMGender', description='The gender of the construction engineer.', example='Male'),
      PMName?: string(name='PMName', description='The name of the construction engineer.', example='Zhangsan'),
    }
  ](name='PMInfo', description='The information about the construction engineer.', position='Query'),
  peerLocation?: string(name='PeerLocation', description='The geographic location where the Express Connect circuit is deployed.', example='XX Number, XX Road, XX Town, XX District, Hangzhou City, Zhejiang Province.', position='Query'),
  regionId: string(name='RegionId', description='The region where the Express Connect circuit is deployed. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  si: string(name='Si', description='The construction company.

This parameter is required.', example='company', position='Query'),
}

model SecondApplyPhysicalConnectionLOAResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A47BD386-7FDE-42C4-8D22-C6223D18AA1C'),
}

model SecondApplyPhysicalConnectionLOAResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SecondApplyPhysicalConnectionLOAResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SecondApplyPhysicalConnectionLOA  SecondApplyPhysicalConnectionLOARequest
  * @return SecondApplyPhysicalConnectionLOAResponse
 */
async function secondApplyPhysicalConnectionLOA(request: SecondApplyPhysicalConnectionLOARequest): SecondApplyPhysicalConnectionLOAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SecondApplyPhysicalConnectionLOA', 'POST', '/', 'json', false, 'json', request);
}

model SetHighDefinitionMonitorLogStatusRequest {
  instanceId: string(name='InstanceId', description='The ID of the instance for which you want to configure fine-grained monitoring.

This parameter is required.', example='eip-wz9fi6qboho9fwgx7****', position='Query'),
  instanceType?: string(name='InstanceType', description='The instance type. Set the value to **EIP**.', example='EIP', position='Query'),
  logProject: string(name='LogProject', description='The name of the Simple Log Service (SLS) project.

This parameter is required.', example='hdmonitor-cn-shenzhen', position='Query'),
  logStore: string(name='LogStore', description='The name of the Logstore.

This parameter is required.', example='hdmonitor', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status: string(name='Status', description='The status of fine-grained monitoring. Valid values:

*   **ON**
*   **OFF**

This parameter is required.', example='ON', position='Query'),
}

model SetHighDefinitionMonitorLogStatusResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B457'),
  success?: string(name='Success', description='Indicates whether the operation is performed. Valid values:

*   **true**
*   **false**', example='true'),
}

model SetHighDefinitionMonitorLogStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetHighDefinitionMonitorLogStatusResponseBody(name='body'),
}

/**
  * @description You cannot repeatedly call **SetHighDefinitionMonitorLogStatus** within a specific period of time.
  * @param request  the request parameters of SetHighDefinitionMonitorLogStatus  SetHighDefinitionMonitorLogStatusRequest
  * @return SetHighDefinitionMonitorLogStatusResponse
 */
async function setHighDefinitionMonitorLogStatus(request: SetHighDefinitionMonitorLogStatusRequest): SetHighDefinitionMonitorLogStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetHighDefinitionMonitorLogStatus', 'POST', '/', 'json', false, 'json', request);
}

model StartFailoverTestJobRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  jobId: string(name='JobId', description='The ID of the failover test.

This parameter is required.', example='ftj-xxxxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the failover test.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model StartFailoverTestJobResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C44F62BE-9CE7-4277-B117-69243F3988BF'),
}

model StartFailoverTestJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartFailoverTestJobResponseBody(name='body'),
}

/**
  * @description You can perform only failover tests that are in the **Pending** state.
  * @param request  the request parameters of StartFailoverTestJob  StartFailoverTestJobRequest
  * @return StartFailoverTestJobResponse
 */
async function startFailoverTestJob(request: StartFailoverTestJobRequest): StartFailoverTestJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartFailoverTestJob', 'POST', '/', 'json', false, 'json', request);
}

model StopFailoverTestJobRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='ftj-xxxxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model StopFailoverTestJobResponseBody = {
  requestId?: string(name='RequestId', example='C44F62BE-9CE7-4277-B117-69243F3988BF'),
}

model StopFailoverTestJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopFailoverTestJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopFailoverTestJob  StopFailoverTestJobRequest
  * @return StopFailoverTestJobResponse
 */
async function stopFailoverTestJob(request: StopFailoverTestJobRequest): StopFailoverTestJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopFailoverTestJob', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the resource.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The resource ID. You can specify at most 20 IDs.

This parameter is required.', example='vpc-bp16qjewdsunr41m1****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The resource type. Valid values:

*   **VPC**: a VPC
*   **VSWITCH**: a vSwitch
*   **ROUTETABLE**: a route table
*   **EIP**: an EIP
*   **VpnGateway**: a VPN gateway
*   **NATGATEWAY**: a NAT gateway
*   **COMMONBANDWIDTHPACKAGE**: an EIP bandwidth plan

This parameter is required.', example='VPC', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', description='The key of the tag that is added to the resource. You can specify at most 20 tag keys.

The key cannot exceed 128 characters in length. The key cannot start with `aliyun` or `acs:` and cannot contain `http://` or `https://`.

> When you call this operation, the **Tag.N.Key** parameter is required and cannot be an empty string.', example='FinanceDept'),
      value?: string(name='Value', description='The value of the tag that is added to the resource. You can specify at most 20 tag values.

The tag value cannot exceed 128 characters in length. The value cannot start with `aliyun` or `acs:`, and cannot contain `http://` or `https://`.

> When you call this operation, the **Tag.N.Value** parameter is required and can be an empty string.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tag information.

This parameter is required.', example='TagResources', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C46FF5A8-C5F0-4024-8262-B16B639225A0'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
  * @description Tags are used to classify instances. Each tag consists of a key-value pair. Before you use tags, take note of the following limits:
  * *   The keys of tags that are added to the same instance must be unique.
  * *   You cannot create tags without adding them to instances. All tags must be added to instances.
  * *   Tag information is not shared across regions.
  *     For example, you cannot view the tags that are created in the China (Hangzhou) region from the China (Shanghai) region.
  * *   Virtual private clouds (VPCs), route tables, vSwitches, and elastic IP addresses (EIPs) that belong to the same Alibaba Cloud account and are deployed in the same region share tag information with each other.
  *     For example, if you added a tag to a VPC, the tag is available to vSwitches, route tables, and EIPs that belong to the same account and are deployed in the same region in which the VPC is created. You can select this tag from the editing page without the need to enter the tag again. You can modify the key and the value of a tag or remove a tag from an instance. After you delete an instance, all tags that are added to the instance are deleted.
  * *   You can add up to 20 tags to each instance. Before you add a tag to an instance, the system automatically checks the number of existing tags. An error message is returned if the maximum number of tags is reached.
  * @param request  the request parameters of TagResources  TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesForExpressConnectRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the resource is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to obtain the region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The resource IDs. You can specify up to 20 resource IDs.

This parameter is required.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource. Valid values:

*   **PHYSICALCONNECTION**: Express Connect circuit.
*   **VIRTUALBORDERROUTER**: virtual border router (VBR).
*   **ROUTERINTERFACE**: router interface.

This parameter is required.', example='PHYSICALCONNECTION', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', description='The key of the tag to add to the resource. You can specify up to 20 tag keys. The tag key cannot be an empty string.

The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `aliyun` or `acs:`.', example='FinanceDept'),
      value?: string(name='Value', description='The value of the tag to add to the resource. You can specify up to 20 tag values. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.', example='FinanceJoshua'),
    }
  ](name='Tag', description='The tags to add to the resource.

This parameter is required.', position='Query'),
}

model TagResourcesForExpressConnectResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model TagResourcesForExpressConnectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesForExpressConnectResponseBody(name='body'),
}

/**
  * @description ## [](#)
  * Tags are used to classify instances. Each tag consists of a key-value pair. Before you use tags, take note of the following items:
  * *   Each tag key that is added to an instance must be unique.
  * *   You cannot create tags without adding them to instances. All tags must be added to instances.
  * *   Tag information is not shared across regions.
  *     For example, you cannot view the tags that are created in the China (Hangzhou) region from the China (Shanghai) region.
  * *   You can add up to 20 tags to each instance. Before you add a tag to an instance, the system automatically checks the number of existing tags. An error message is returned if the maximum number of tags is reached.
  * @param request  the request parameters of TagResourcesForExpressConnect  TagResourcesForExpressConnectRequest
  * @return TagResourcesForExpressConnectResponse
 */
async function tagResourcesForExpressConnect(request: TagResourcesForExpressConnectRequest): TagResourcesForExpressConnectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResourcesForExpressConnect', 'POST', '/', 'json', false, 'json', request);
}

model TerminatePhysicalConnectionRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', description='The ID of the Express Connect circuit.

This parameter is required.', example='pc-119mfjzm****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Express Connect circuit.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model TerminatePhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model TerminatePhysicalConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TerminatePhysicalConnectionResponseBody(name='body'),
}

/**
  * @description After you call this operation, the specified Express Connect circuit changes to the **Terminating** state. After the Express Connect circuit is disabled, it changes to the **Terminated** state. When you call this operation, take note of the following limits:
  * *   You can only disable an Express Connect circuit that is in the **Enabled** state.
  * *   Before you disable an Express Connect circuit, you must delete the virtual border routers (VBRs) associated with it.
  * @param request  the request parameters of TerminatePhysicalConnection  TerminatePhysicalConnectionRequest
  * @return TerminatePhysicalConnectionResponse
 */
async function terminatePhysicalConnection(request: TerminatePhysicalConnectionRequest): TerminatePhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TerminatePhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model TerminateVirtualBorderRouterRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VBR.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vbrId: string(name='VbrId', description='The ID of the VBR.

This parameter is required.', example='vbr-bp15zckdt37pq72****', position='Query'),
}

model TerminateVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model TerminateVirtualBorderRouterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TerminateVirtualBorderRouterResponseBody(name='body'),
}

/**
  * @description After you call this operation, the VBR enters the **terminating** state from the **active** state. After the VBR is terminated, the VBR enters the **terminated** state.
  * >  Only the owner of an Express Connect circuit can call this operation.
  * @param request  the request parameters of TerminateVirtualBorderRouter  TerminateVirtualBorderRouterRequest
  * @return TerminateVirtualBorderRouterResponse
 */
async function terminateVirtualBorderRouter(request: TerminateVirtualBorderRouterRequest): TerminateVirtualBorderRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TerminateVirtualBorderRouter', 'POST', '/', 'json', false, 'json', request);
}

model UnTagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to remove all tags from the specified resource. Valid values:

*   **true**
*   **false** (default)', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the resource.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The resource ID. You can specify up to 20 resource IDs.

This parameter is required.', example='vpc-bp16qjewdsunr41m1****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The resource type. Valid values:

*   **VPC**
*   **VSWITCH**
*   **ROUTETABLE**
*   **EIP**
*   **VpnGateway**
*   **NATGATEWAY**
*   **COMMONBANDWIDTHPACKAGE**: EIP bandwidth plan

This parameter is required.', example='VPC', position='Query'),
  tagKey?: [ string ](name='TagKey', description='The key of the tag that you want to remove. You can specify at most 20 tag keys. It can be an empty string.

The key cannot exceed 64 characters in length, and can contain digits, periods (.), underscores (_), and hyphens (-). The key must start with a letter but cannot start with `aliyun` or `acs:`. The key cannot contain `http://` or `https://`.', example='FinanceDept', position='Query'),
}

model UnTagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C46FF5A8-C5F0-4024-8262-B16B639225A0'),
}

model UnTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnTagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnTagResources  UnTagResourcesRequest
  * @return UnTagResourcesResponse
 */
async function unTagResources(request: UnTagResourcesRequest): UnTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnTagResources', 'POST', '/', 'json', false, 'json', request);
}

model UnassociateEipAddressRequest {
  allocationId: string(name='AllocationId', description='The ID of the EIP that you want to disassociate.

This parameter is required.', example='eip-2zeerraiwb7uj6i0d****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11****', position='Query'),
  force?: boolean(name='Force', description='Specifies whether to disassociate the EIP from a NAT gateway if a DNAT or SNAT entry is added to the NAT gateway. Valid values:

*   **false** (default)
*   **true**', example='false', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance from which you want to disassociate the EIP.', example='i-hp3akk9irtd69jad****', position='Query'),
  instanceType?: string(name='InstanceType', description='The type of instance from which you want to disassociate the EIP. Valid values:

*   **EcsInstance** (default): an Elastic Compute Service (ECS) instance in a virtual private cloud (VPC)
*   **SlbInstance**: a Server Load Balancer (SLB) instance in a VPC
*   **NetworkInterface**: a secondary elastic network interface (ENI) in a VPC
*   **Nat**: a NAT gateway
*   **HaVip**: a high-availability virtual IP address (HAVIP)', example='EcsInstance', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address of the ECS instance or the secondary ENI from which you want to disassociate the EIP.', example='192.XX.XX.2', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region to which the EIP belongs. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UnassociateEipAddressResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model UnassociateEipAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnassociateEipAddressResponseBody(name='body'),
}

/**
  * @description *   **UnassociateEipAddress** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeEipAddresses](https://help.aliyun.com/document_detail/120193.html) operation to query the status of the task.
  *     *   If the EIP is in the **Unassociating** state, the EIP is being disassociated. In this state, you can only query the EIP and cannot perform other operations.
  *     *   If the EIP is in the **Available** state, the EIP is disassociated.
  * *   You cannot repeatedly call the **UnassociateEipAddress** operation within the specified period of time.
  * @param request  the request parameters of UnassociateEipAddress  UnassociateEipAddressRequest
  * @return UnassociateEipAddressResponse
 */
async function unassociateEipAddress(request: UnassociateEipAddressRequest): UnassociateEipAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassociateEipAddress', 'POST', '/', 'json', false, 'json', request);
}

model UnassociateGlobalAccelerationInstanceRequest {
  globalAccelerationInstanceId: string(name='GlobalAccelerationInstanceId', description='The ID of the GA instance.

This parameter is required.', example='ga-1sxeedefrr33****', position='Query'),
  instanceType?: string(name='InstanceType', description='The backend server type. Valid values:

*   **RemoteEcsInstance**: Elastic Compute Service (ECS) instance
*   **RemoteSlbInstance**: Server Load Balancer (SLB) instance
*   **RemoteEniInstance**: elastic network interface (ENI)', example='RemoteEcsInstance', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the GA instance.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UnassociateGlobalAccelerationInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='BD5BCEE8-F62C-40C2-9AC3-89XXXXXXXXX'),
}

model UnassociateGlobalAccelerationInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnassociateGlobalAccelerationInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnassociateGlobalAccelerationInstance  UnassociateGlobalAccelerationInstanceRequest
  * @return UnassociateGlobalAccelerationInstanceResponse
 */
async function unassociateGlobalAccelerationInstance(request: UnassociateGlobalAccelerationInstanceRequest): UnassociateGlobalAccelerationInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassociateGlobalAccelerationInstance', 'POST', '/', 'json', false, 'json', request);
}

model UnassociateHaVipRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The `token` can contain only ASCII characters and cannot exceed 64 characters in length.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  force?: string(name='Force', description='Specifies whether to forcefully disassociate the HAVIP from the ECS instance or ENI. Valid values:

*   **True**
*   **False** (default)

>  If you set the value to **False**, you cannot disassociate the HAVIP from the primary instance.', example='True', position='Query'),
  haVipId: string(name='HaVipId', description='The ID of the HAVIP that you want to disassociate.

This parameter is required.', example='havip-2zeo05qre24nhrqpy****', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the ECS instance or ENI from which you want to disassociate the HAVIP.

This parameter is required.', example='i-faf344422ffsfad****', position='Query'),
  instanceType?: string(name='InstanceType', description='The type of the instance from which you want to disassociate the HAVIP. Valid values:

*   **EcsInstance**: an ECS instance
*   **NetworkInterface**: an ENI

>  If you want to disassociate the HAVIP from an ENI, this parameter is required.', example='EcsInstance', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the HAVIP.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UnassociateHaVipResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C44F62BE-9CE7-4277-B117-69243F3988BF'),
}

model UnassociateHaVipResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnassociateHaVipResponseBody(name='body'),
}

/**
  * @description ## [](#)
  * When you call this operation, take note of the following limits:
  * *   The ECS instance must be in the **Running** or **Stopped** state.
  * *   The HAVIP must be in the **Available** or **InUse** state.
  * *   **UnassociateHaVip** is an asynchronous operation. After a request is sent, the system returns a request ID and an instance ID and runs the task in the background. You can call the [DescribeHaVips](https://help.aliyun.com/document_detail/114611.html) operation to query the status of an HAVIP:
  *     *   If the HAVIP is in the **Unassociating** state, the HAVIP is being disassociated.
  *     *   If the HAVIP is in the **Inuse** or **Available** state, the HAVIP is disassociated.
  * *   You cannot repeatedly call the **UnassociateHaVip** operation to disassociate an HAVIP within the specified period of time.
  * @param request  the request parameters of UnassociateHaVip  UnassociateHaVipRequest
  * @return UnassociateHaVipResponse
 */
async function unassociateHaVip(request: UnassociateHaVipRequest): UnassociateHaVipResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassociateHaVip', 'POST', '/', 'json', false, 'json', request);
}

model UnassociateNetworkAclRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

**true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.

**false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  networkAclId: string(name='NetworkAclId', description='The ID of the network ACL that you want to disassociate from a resource.

This parameter is required.', example='nacl-a2do9e413e0sp****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the network ACL.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the resource from which you want to disassociate the network ACL.', example='vsw-bp1de348lntdw****'),
      resourceType?: string(name='ResourceType', description='The type of the resource from which you want to disassociate the network ACL. Set the value to **VSwitch**.

Valid values of **N**: 0 to 29. You can disassociate a network ACL from at most 30 resources at a time.', example='VSwitch'),
    }
  ](name='Resource', description='The information about the associated resource.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UnassociateNetworkAclResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='AD024BAA-2D91-48FD-810B-8FB7489B6EE6'),
}

model UnassociateNetworkAclResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnassociateNetworkAclResponseBody(name='body'),
}

/**
  * @description ## [](#)Description
  * *   **UnassociateNetworkAcl** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeNetworkAclAttributes](https://help.aliyun.com/document_detail/116542.html) operation to query the status of the task.
  *     *   If the network ACL is in the **UNBINDING** state, the network ACL is being disassociated from the vSwitch.
  *     *   If the network ACL is in the **UNBINDED** state, the network ACL is disassociated from the vSwitch.
  * *   You cannot repeatedly call the **UnassociateNetworkAcl** operation to disassociate a network ACL from a vSwitch within the specified period of time.
  * @param request  the request parameters of UnassociateNetworkAcl  UnassociateNetworkAclRequest
  * @return UnassociateNetworkAclResponse
 */
async function unassociateNetworkAcl(request: UnassociateNetworkAclRequest): UnassociateNetworkAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassociateNetworkAcl', 'POST', '/', 'json', false, 'json', request);
}

model UnassociatePhysicalConnectionFromVirtualBorderRouterRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', description='The ID of the Express Connect circuit.

This parameter is required.', example='pc-bp1qrb3044eqixog****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the Express Connect circuit.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vbrId: string(name='VbrId', description='The ID of the VBR that you want to disassociate from the Express Connect circuit.

This parameter is required.', example='vbr-bp16ksp61j7e0tkn*****', position='Query'),
}

model UnassociatePhysicalConnectionFromVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='980960B0-2969-40BF-8542-EBB34FD358AB'),
}

model UnassociatePhysicalConnectionFromVirtualBorderRouterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnassociatePhysicalConnectionFromVirtualBorderRouterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnassociatePhysicalConnectionFromVirtualBorderRouter  UnassociatePhysicalConnectionFromVirtualBorderRouterRequest
  * @return UnassociatePhysicalConnectionFromVirtualBorderRouterResponse
 */
async function unassociatePhysicalConnectionFromVirtualBorderRouter(request: UnassociatePhysicalConnectionFromVirtualBorderRouterRequest): UnassociatePhysicalConnectionFromVirtualBorderRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassociatePhysicalConnectionFromVirtualBorderRouter', 'POST', '/', 'json', false, 'json', request);
}

model UnassociateRouteTableRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the virtual private cloud (VPC) to which the custom route table belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId: string(name='RouteTableId', description='The ID of the route table.

This parameter is required.', example='vtb-bp145q7glnuzdvzu2****', position='Query'),
  vSwitchId: string(name='VSwitchId', description='The ID of the vSwitch from which you want to disassociate the route table.

This parameter is required.', example='vsw-25naue4****', position='Query'),
}

model UnassociateRouteTableResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='62172DD5-6BAC-45DF-8D44-xxxxxxx'),
}

model UnassociateRouteTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnassociateRouteTableResponseBody(name='body'),
}

/**
  * @description ## [](#)References
  * *   **UnassociateRouteTable** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeVSwitchAttributes](https://help.aliyun.com/document_detail/94567.html) operation to query the status of the task.
  *     *   If the vSwitch is in the **Pending** state, the route table is being disassociated.
  *     *   If the vSwitch is in the **Available** state, the route table is disassociated.
  * *   You cannot repeatedly call the **UnassociateRouteTable** operation to disassociate a route table from a vSwitch within the specified period of time.
  * @param request  the request parameters of UnassociateRouteTable  UnassociateRouteTableRequest
  * @return UnassociateRouteTableResponse
 */
async function unassociateRouteTable(request: UnassociateRouteTableRequest): UnassociateRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassociateRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model UnassociateVpcCidrBlockRequest {
  iPv6CidrBlock?: string(name='IPv6CidrBlock', description='The secondary IPv6 CIDR block to be deleted.

>  You must set one of the **Ipv6CidrBlock** and **SecondaryCidrBlock** parameters.', example='2408:XXXX:0:6a::/56', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VPC to which the secondary CIDR block to be deleted belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='ch-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secondaryCidrBlock?: string(name='SecondaryCidrBlock', description='The secondary IPv4 CIDR block to be deleted.

>  You must set one of the **SecondaryCidrBlock** and **Ipv6CidrBlock** parameters.', example='192.168.0.0/16', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the VPC from which you want to delete a secondary CIDR block.

This parameter is required.', example='vpc-o6wrloqsdqc9io3mg****', position='Query'),
}

model UnassociateVpcCidrBlockResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C1221A1F-2ACD-4592-8F27-474E02883159'),
}

model UnassociateVpcCidrBlockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnassociateVpcCidrBlockResponseBody(name='body'),
}

/**
  * @description *   Before you delete a secondary CIDR block from a VPC, delete the vSwitch which is created with the CIDR block. For more information, see [DeleteVSwitch](https://help.aliyun.com/document_detail/35746.html).
  * *   You cannot repeatedly call the **UnassociateVpcCidrBlock** operation to delete a secondary CIDR block from a VPC within the specified period of time.
  * @param request  the request parameters of UnassociateVpcCidrBlock  UnassociateVpcCidrBlockRequest
  * @return UnassociateVpcCidrBlockResponse
 */
async function unassociateVpcCidrBlock(request: UnassociateVpcCidrBlockRequest): UnassociateVpcCidrBlockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassociateVpcCidrBlock', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesForExpressConnectRequest {
  all?: boolean(name='All', description='Specifies whether to remove all tags from the specified resource. Valid values:

*   **true**
*   **false** (default)', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region in which the resource is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to obtain the region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The IDs of the resources from which you want to remove tags.

This parameter is required.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource. Valid values:

*   **PHYSICALCONNECTION**: Express Connect circuit.
*   **VIRTUALBORDERROUTER**: virtual border router (VBR).
*   **ROUTERINTERFACE**: router interface.

This parameter is required.', example='PHYSICALCONNECTION', position='Query'),
  tagKey?: [ string ](name='TagKey', description='The tags to remove from the specified resource.', position='Query'),
}

model UntagResourcesForExpressConnectResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='DE65F6B7-7566-4802-9007-96F2494AC512'),
}

model UntagResourcesForExpressConnectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesForExpressConnectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UntagResourcesForExpressConnect  UntagResourcesForExpressConnectRequest
  * @return UntagResourcesForExpressConnectResponse
 */
async function untagResourcesForExpressConnect(request: UntagResourcesForExpressConnectRequest): UntagResourcesForExpressConnectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResourcesForExpressConnect', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDhcpOptionsSetAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  dhcpOptionsSetDescription?: string(name='DhcpOptionsSetDescription', description='Enter a description for the DHCP options set.

The description must be 2 to 256 characters in length. It must start with a letter and cannot start with `http://` or `https://`. You can also leave the description empty.', example='description', position='Query'),
  dhcpOptionsSetId: string(name='DhcpOptionsSetId', description='The ID of the DHCP options set.

This parameter is required.', example='dopt-o6w0df4epg9zo8isy****', position='Query'),
  dhcpOptionsSetName?: string(name='DhcpOptionsSetName', description='The name of the DHCP options set.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (_), and hyphens (-). The name must start with a letter.', example='name', position='Query'),
  domainName?: string(name='DomainName', description='The root domain. For example, you can set the value to example.com.

After a DHCP options set is associated with a virtual private cloud (VPC), the root domain in the DHCP options set is automatically synchronized with the ECS instances in the VPC.', example='example.com', position='Query'),
  domainNameServers?: string(name='DomainNameServers', description='The IP address of the DNS server. You can enter at most four DNS server IP addresses. Separate IP addresses with commas (,).

>  If you do not specify a DNS server IP address, Elastic Compute Service (ECS) instances use the IP addresses of the Alibaba Cloud DNS servers, which are 100.100.2.136 and 100.100.2.138.', example='192.XX.XX.123', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

**true**: performs a dry run. The system checks the required parameters, request format, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.

**false** (default): performs a dry run and sends the request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  ipv6LeaseTime?: string(name='Ipv6LeaseTime', description='The lease time of the IPv6 addresses for the DHCP options set.

*   If you use hours as the unit, valid values are **24h to 1176h** and **87600h to 175200h**. Default value: **87600h**.
*   If you use days as the unit, valid values are **1d to 49d** and **3650d to 7300d**. Default value: **3650d**.

>  If you specify a value, you must also specify the unit.', example='3650d', position='Query'),
  leaseTime?: string(name='LeaseTime', description='The lease time of the IPv4 addresses for the DHCP options set.

*   If you use hours as the unit, valid values are **24h to 1176h** and **87600h to 175200h**. Default value: **87600h**.
*   If you use days as the unit, valid values are **1d to 49d** and **3650d to 7300d**. Default value: **3650d**.

>  If you specify a value, you must also specify the unit.', example='3650d', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region where the DHCP options set is deployed. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdateDhcpOptionsSetAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model UpdateDhcpOptionsSetAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDhcpOptionsSetAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDhcpOptionsSetAttribute  UpdateDhcpOptionsSetAttributeRequest
  * @return UpdateDhcpOptionsSetAttributeResponse
 */
async function updateDhcpOptionsSetAttribute(request: UpdateDhcpOptionsSetAttributeRequest): UpdateDhcpOptionsSetAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDhcpOptionsSetAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateFailoverTestJobRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', example='test', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  jobDuration?: int32(name='JobDuration', example='60', minimum=1, maximum=4320, position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='ftj-xxxxxxxxx', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
}

model UpdateFailoverTestJobResponseBody = {
  requestId?: string(name='RequestId', example='C44F62BE-9CE7-4277-B117-69243F3988BF'),
}

model UpdateFailoverTestJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFailoverTestJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateFailoverTestJob  UpdateFailoverTestJobRequest
  * @return UpdateFailoverTestJobResponse
 */
async function updateFailoverTestJob(request: UpdateFailoverTestJobRequest): UpdateFailoverTestJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFailoverTestJob', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayRouteTableEntryAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The description of the gateway route table.

The description must be 2 to 256 characters in length. The description must start with a letter but cannot start with `http://` or `https://`.', example='new', position='Query'),
  destinationCidrBlock: string(name='DestinationCidrBlock', description='The destination CIDR block of the route entry in the gateway route table.

This parameter is required.', example='47.100.XX.XX/16', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to precheck only this request. Valid values:

*   **true**: prechecks the request without modifying the gateway route table. The system checks the required parameters, request format, and service limits. If the request fails to pass the precheck, an error code is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false**: sends the request. This is the default value. If the request passes the precheck, a 2xx HTTP status code is returned and the gateway route table is modified.', example='false', position='Query'),
  gatewayRouteTableId?: string(name='GatewayRouteTableId', description='The ID of the gateway route table that you want to modify.', example='vtb-5ts0ohchwkp3dydt2****', position='Query'),
  iPv4GatewayRouteTableId?: string(name='IPv4GatewayRouteTableId', description='The ID of the gateway route table that you want to modify.', example='vtb-5ts0ohchwkp3dydt2****', position='Query'),
  name?: string(name='Name', description='The name of the gateway route table.

The name must be 2 to 128 characters in length and can contain letter, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.', example='test', position='Query'),
  nextHopId?: string(name='NextHopId', description='The new next hop ID of the route entry.

*   If you set **NextHopType** to **Instance**, specify an ECS instance ID for **NextHopId**.
*   If you set **NextHopType** to **NetworkInterface**, specify an ENI ID for **NextHopId**.
*   If you set **NextHopType** to **Local**, leave **NextHopId** empty. This indicates a local next hop.

>  If the value of NextHopType is **Instance** or **NetworkInterface**, and you want to modify the next hop, you must set **NextHopType** to **Local** first. Then, set **NextHopType** to **Instance** or **NetworkInterface** and specify **NextHopId** based on your requirements. If the next hop type of a route entry is Instance or NetworkInterface, you cannot directly specify a different ENI ID or ECS instance ID for the NextHopId parameter.', example='i-bp18xq9yguxoxe7m****', position='Query'),
  nextHopType: string(name='NextHopType', description='The new next hop type of the route. Valid values:

*   **Instance**: Elastic Compute Service (ECS) instance
*   **NetworkInterface**: elastic network interface (ENI)
*   **Local**: local next hop

This parameter is required.', example='EcsInstance', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the gateway route table that you want to modify belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='ap-southeast-6', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdateGatewayRouteTableEntryAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model UpdateGatewayRouteTableEntryAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGatewayRouteTableEntryAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateGatewayRouteTableEntryAttribute  UpdateGatewayRouteTableEntryAttributeRequest
  * @return UpdateGatewayRouteTableEntryAttributeResponse
 */
async function updateGatewayRouteTableEntryAttribute(request: UpdateGatewayRouteTableEntryAttributeRequest): UpdateGatewayRouteTableEntryAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayRouteTableEntryAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateIpsecServerRequest {
  clientIpPool?: string(name='ClientIpPool', description='The client CIDR block from which an IP address is allocated to the virtual network interface controller (NIC) of the client.

>  The client CIDR block must not overlap with the CIDR blocks of the VPC.', example='10.0.0.0/24', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a value, and you must make sure that each request has a unique token value. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the value of **RequestId** as the value of **ClientToken**. The **request ID** may be different for each request.', example='e4567-e89b-12d3-a456-42665544****', position='Query'),
  dryRun?: string(name='DryRun', description='Specifies whether to only precheck this request. Valid values:

*   **true**: prechecks the request without modifying the configurations of the IPsec server. The system checks the required parameters, request format, and service limits. If the request fails to pass the precheck, an error code is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false**: sends the request. This is the default value. If the request passes the precheck, the system modifies the configurations of the IPsec server.', example='false', position='Query'),
  effectImmediately?: boolean(name='EffectImmediately', description='Specifies whether to delete the negotiated IPsec tunnel and initiate the negotiation again. Valid values:

*   **true**: immediately initiates negotiations after the configuration is complete.
*   **false**: initiates negotiations when inbound traffic is detected.', example='false', position='Query'),
  ikeConfig?: string(name='IkeConfig', description='The configuration of Phase 1 negotiations. Valid values:

*   **IkeVersion**: The IKE version. Valid values: **ikev1** and **ikev2**.
*   **IkeMode**: The IKE negotiation mode. Default value: **main**.
*   **IkeEncAlg**: the encryption algorithm that is used in Phase 1 negotiation. Default value: **aes**.
*   **IkeAuthAlg**: the authentication algorithm that is used in Phase 1 negotiation. Default value: **sha1**.
*   **IkePfs**: The Diffie-Hellman key exchange algorithm that is used in Phase 1 negotiations. Default value: **group2**.
*   **IkeLifetime**: The SA lifetime determined by Phase 1 negotiations. Unit: seconds. Valid values: **0** to **86400**. Default value: **86400**.
*   **LocalId**: The identifier of the IPsec server. Only FQDN and IP address formats are supported.
*   **RemoteId**: the peer identifier. Only FQDN and IP address formats are supported.', example='{"IkeVersion":"ikev2","IkeMode":"main","IkeEncAlg":"aes","IkeAuthAlg":"sha1","IkePfs":"group2","IkeLifetime":86400}', position='Query'),
  ipsecConfig?: string(name='IpsecConfig', description='The configuration of Phase 2 negotiation. Valid values:

*   **IpsecEncAlg**: the encryption algorithm that is used in Phase 2 negotiation. Default value: **aes**.
*   **IpsecAuthAlg**: the authentication algorithm that is used in Phase 2 negotiation. Default value: **sha1**.
*   **IpsecPfs**: forwards packets of all protocols. The Diffie-Hellman key exchange algorithm that is used in Phase 2 negotiation. Default value: **group2**.
*   **IpsecLifetime**: the SA lifetime determined by Phase 2 negotiation. Unit: seconds. Valid values: **0** to **86400**. Default value: **86400**.', example='{"IpsecEncAlg":"aes","IpsecAuthAlg":"sha1","IpsecPfs":"group2","IpsecLifetime":86400}', position='Query'),
  ipsecServerId: string(name='IpsecServerId', description='The IPsec server ID.

This parameter is required.', example='iss-bp1bo3xuvcxo7ixll****', position='Query'),
  ipsecServerName?: string(name='IpsecServerName', description='The name of the IPsec server.

It must be 1 to 100 characters in length.', example='test', maxLength=100, position='Query'),
  localSubnet?: string(name='LocalSubnet', description='The local CIDR blocks, which are the CIDR blocks of the virtual private cloud (VPC) for the client to access.

Multiple CIDR blocks are separated with commas (,). Example: 192.168.1.0/24,192.168.2.0/24.', example='192.168.0.0/24,172.17.0.0/16', position='Query'),
  psk?: string(name='Psk', description='The pre-shared key.

The pre-shared key that is used for authentication between the IPsec-VPN server and the client. It must be 1 to 100 characters in length.

You can call [ListIpsecServers](https://help.aliyun.com/document_detail/2794120.html) to query keys generated by the system.

>  The pre-shared key of the IPsec server key must be the same as that of the client. Otherwise, the connection between the IPsec server and the client cannot be established.', example='Cfd123****', position='Query'),
  pskEnabled?: boolean(name='PskEnabled', description='Specifies whether to enable pre-shared key authentication. If you set the value to **true**, pre-shared key authentication is enabled.', example='true', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the IPsec server is created.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
}

model UpdateIpsecServerResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='B61C08E5-403A-46A2-96C1-F7B1216DB10C'),
}

model UpdateIpsecServerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIpsecServerResponseBody(name='body'),
}

/**
  * @description *   If you modify only the **IpsecServerName** parameter, this operation is synchronous. If you modify parameters other than **IpsecServerName**, this operation is asynchronous.
  * *   When the **UpdateIpsecServer** operation is asynchronous, the system returns a request ID after you send a request to call this operation and the IPsec server is being modified in the backend. You can call [DescribeVpnGateway](https://help.aliyun.com/document_detail/2794055.html) to query the status of a VPN gateway.
  *     *   If the VPN gateway is in the **updating** state, the configuration of the IPsec server is being modified.
  *     *   If the VPN gateway is in the **active** state, the configuration of the IPsec server is modified.
  * *   You cannot repeatedly call the **UpdateIpsecServer** operation for the same VPN gateway within the specified period of time.
  * @param request  the request parameters of UpdateIpsecServer  UpdateIpsecServerRequest
  * @return UpdateIpsecServerResponse
 */
async function updateIpsecServer(request: UpdateIpsecServerRequest): UpdateIpsecServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIpsecServer', 'POST', '/', 'json', false, 'json', request);
}

model UpdateIpv4GatewayAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  ipv4GatewayDescription?: string(name='Ipv4GatewayDescription', description='The new description of the IPv4 gateway.', example='new', position='Query'),
  ipv4GatewayId: string(name='Ipv4GatewayId', description='The ID of the IPv4 gateway whose name or description you want to modify.

This parameter is required.', example='ipv4gw-5tsnc6s4ogsedtp3k****', position='Query'),
  ipv4GatewayName?: string(name='Ipv4GatewayName', description='The new name of the IPv4 gateway.', example='newname', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the IPv4 gateway whose name or description you want to modify.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='ap-southeast-6', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdateIpv4GatewayAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='671CEB03-C98D-5916-950C-C55B0BD06621'),
}

model UpdateIpv4GatewayAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIpv4GatewayAttributeResponseBody(name='body'),
}

/**
  * @description You cannot repeatedly call the **UpdateIpv4GatewayAttribute** operation to modify the name or description of an IPv4 gateway within the specified period of time.
  * @param request  the request parameters of UpdateIpv4GatewayAttribute  UpdateIpv4GatewayAttributeRequest
  * @return UpdateIpv4GatewayAttributeResponse
 */
async function updateIpv4GatewayAttribute(request: UpdateIpv4GatewayAttributeRequest): UpdateIpv4GatewayAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIpv4GatewayAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateNatGatewayNatTypeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a value, and you must make sure that each request has a unique token value. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the value of **RequestId** as the value of **ClientToken**. The **request ID** may be different for each request.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to only precheck this request. Valid values:

**true**: prechecks the request without upgrading the Internet NAT gateway. The system checks whether your AccessKey pair is valid, whether RAM users are granted required permissions, and whether the required parameters are set. If the request fails to pass the precheck, an error code is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.

**false**: sends the API request. This is the default value. After the request passes the precheck, a 2XX HTTP status code is returned and the Internet NAT gateway is upgraded.', example='false', position='Query'),
  natGatewayId: string(name='NatGatewayId', description='The ID of the standard NAT gateway to be upgraded.

This parameter is required.', example='ngw-bp1b0lic8uz4r6vf2****', position='Query'),
  natType: string(name='NatType', description='The type of Internet NAT gateway. Set the value to **Enhanced**, which specifies an enhanced Internet NAT gateway.

This parameter is required.', example='Enhanced', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the NAT gateway that you want to upgrade is deployed.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-qingdao', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchId: string(name='VSwitchId', description='The vSwitch to which the enhanced Internet NAT gateway belongs.

>  If you do not set this parameter, the system generates an Internet NAT gateway in a random vSwitch of a virtual private cloud (VPC).

This parameter is required.', example='vsw-bp17nszybg8epodke****', position='Query'),
}

model UpdateNatGatewayNatTypeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model UpdateNatGatewayNatTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateNatGatewayNatTypeResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI UpdateNatGatewayNatType is deprecated  * @description Before you call this operation, take note of the following limits:
  * *   **UpdateNatGatewayNatType** is an asynchronous operation. After you send a request to call this operation, the system returns a request ID and the NAT gateway is still being upgraded in the backend. You can call the GetNatGatewayConvertStatus operation to query the upgrade progress of a NAT gateway. For more information, see [GetNatGatewayConvertStatus](https://help.aliyun.com/document_detail/184744.html).
  *     *   If the NAT gateway is in the **processing** state, the NAT gateway is being upgraded. You can only query the status of the NAT gateway but cannot perform other operations.
  *     *   If the NAT gateway is in the **successful** state, the NAT gateway is upgraded.
  *     *   If the NAT gateway is in the **failed** state, the system failed to upgrade the NAT gateway.
  * *   You cannot repeatedly call the **UpdateNatGatewayNatType** operation for the same VPN gateway within the specified period of time.
  * *   The billing method and billable items remain the same after the upgrade.
  * *   It takes about five minutes to upgrade a standard NAT gateway to an enhanced NAT gateway. During the upgrade, transient connection errors may occur once or twice. The service can be recovered by reconnection. You can determine whether to enable automatic reconnection or use manual reconnection based on your business requirements.
  * *   You can only upgrade standard NAT gateways to enhanced NAT gateways. You are not allowed to downgrade enhanced NAT gateways to standard NAT gateways.
  * @param request  the request parameters of UpdateNatGatewayNatType  UpdateNatGatewayNatTypeRequest
  * @return UpdateNatGatewayNatTypeResponse
 */
// Deprecated
async function updateNatGatewayNatType(request: UpdateNatGatewayNatTypeRequest): UpdateNatGatewayNatTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateNatGatewayNatType', 'POST', '/', 'json', false, 'json', request);
}

model UpdateNetworkAclEntriesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   **true**: performs a dry run. The system checks the request for potential issues, including the AccessKey pair, the permissions of the RAM user, and the required parameters. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='true', position='Query'),
  egressAclEntries?: [ 
    {
      description?: string(name='Description', description='The description of the outbound rule.

The description must be 1 to 256 characters in length, and cannot start with `http://` or `https://`.', example='This is EgressAclEntries.'),
      destinationCidrIp?: string(name='DestinationCidrIp', description='The destination CIDR block.', example='10.0.0.0/24'),
      entryType?: string(name='EntryType', description='The type of the rule. Set the value to **custom**, which specifies custom rules.', example='custom'),
      ipVersion?: string(name='IpVersion', description='The IP version. Valid values:

*   **IPv4** (default)
*   **IPv6**', example='IPv4'),
      networkAclEntryId?: string(name='NetworkAclEntryId', description='The ID of the outbound rule.

Valid values of **N**: **0** to **99**. You can specify at most 100 outbound rules.', example='nae-2zecs97e0brcge46****'),
      networkAclEntryName?: string(name='NetworkAclEntryName', description='The name of the outbound rule.

The name must be 1 to 128 characters in length and cannot start with `http://` or `https://`.', example='acl-2'),
      policy?: string(name='Policy', description='The action to be performed on network traffic that matches the rule. Valid values:

*   **accept**
*   **drop**', example='accept'),
      port?: string(name='Port', description='The destination port range of the outbound traffic.

*   If the **protocol** of the outbound rule is set to **all**, **icmp**, or **gre**, the port range is -1/-1, which specified all ports.
*   If the **protocol** of the outbound rule is set to **tcp** or **udp**, set the port range in the following format: **1/200** or **80/80**, which specifies port 1 to port 200 or port 80. Valid values for a port: **1** to **65535**.', example='-1/-1'),
      protocol?: string(name='Protocol', description='The protocol. Valid values:

*   **icmp**
*   **gre**
*   **tcp**
*   **udp**
*   **all**', example='all'),
    }
  ](name='EgressAclEntries', description='The information about the outbound rules.', position='Query'),
  ingressAclEntries?: [ 
    {
      description?: string(name='Description', description='The description of the inbound rule.

The description must be 1 to 256 characters in length, and cannot start with `http://` or `https://`.', example='This is IngressAclEntries.'),
      entryType?: string(name='EntryType', description='The type of the rule. Set the value to **custom**, which specifies custom rules.', example='custom'),
      ipVersion?: string(name='IpVersion', description='The IP version. Valid values:

*   **IPv4** (default)
*   **IPv6**', example='IPv4'),
      networkAclEntryId?: string(name='NetworkAclEntryId', description='The ID of the inbound rule.

Valid values of **N**: **0** to **99**. You can specify at most 100 inbound rules.', example='nae-2zepn32de59j8m4****'),
      networkAclEntryName?: string(name='NetworkAclEntryName', description='The name of the inbound rule.

The name must be 1 to 128 characters in length and cannot start with `http://` or `https://`.', example='acl-3'),
      policy?: string(name='Policy', description='The action to be performed on network traffic that matches the rule. Valid values:

*   **accept**
*   **drop**', example='accept'),
      port?: string(name='Port', description='The source port range of the inbound rule.

*   If the **protocol** of the inbound rule is set to **all**, **icmp**, or **gre**, the port range is -1/-1, which specifies all ports.
*   If the **protocol** of the inbound rule is set to **tcp** or **udp**, set the port range in the following format: **1/200** or **80/80**, which specifies port 1 to port 200 or port 80. Valid ports: **1** to **65535**.', example='-1/-1'),
      protocol?: string(name='Protocol', description='The protocol. Valid values:

*   **icmp**
*   **gre**
*   **tcp**
*   **udp**
*   **all**', example='all'),
      sourceCidrIp?: string(name='SourceCidrIp', description='The source CIDR block.', example='10.0.0.0/24'),
    }
  ](name='IngressAclEntries', description='The information about the inbound rule.', position='Query'),
  networkAclId: string(name='NetworkAclId', description='The ID of the network ACL.

This parameter is required.', example='nacl-bp1lhl0taikrzxsc****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the network ACL.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  updateEgressAclEntries?: boolean(name='UpdateEgressAclEntries', description='Specifies whether to update outbound rules. Valid values:

*   **true**
*   **false** (default)

>  This parameter cannot be used to add outbound rules to ACLs. If you want to add more outbound rules to ACLs, specify both the existing rule and the rule that you want to add when you call this API operation. If you specify only the rule that you want to add, it overwrites the existing rule.', example='false', position='Query'),
  updateIngressAclEntries?: boolean(name='UpdateIngressAclEntries', description='Specifies whether to update inbound rules. Valid values:

*   **true**
*   **false** (default)

>  This parameter cannot be used to add inbound rules to ACLs. If you want to add more inbound rules to ACLs, you must specify both the existing rule and the rule that you want to add when you call this API operation. If you specify only the rule that you want to add, it overwrites the existing rule.', example='false', position='Query'),
}

model UpdateNetworkAclEntriesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1170A5A0-E760-4331-9133-A7D38D973215'),
}

model UpdateNetworkAclEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateNetworkAclEntriesResponseBody(name='body'),
}

/**
  * @description *   **UpdateNetworkAclEntries** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [DescribeNetworkAclAttributes](https://help.aliyun.com/document_detail/116542.html) operation to query the status of a network ACL:
  *     *   If the network ACL is in the **Modifying** state, the rules of the network ACL are being updated.
  *     *   If the network ACL is in the **Available** state, the rules of the network ACL are updated.
  * *   You cannot repeatedly call the **UpdateNetworkAclEntries** operation to update the rules of a network ACL within the specified period of time.
  * @param request  the request parameters of UpdateNetworkAclEntries  UpdateNetworkAclEntriesRequest
  * @return UpdateNetworkAclEntriesResponse
 */
async function updateNetworkAclEntries(request: UpdateNetworkAclEntriesRequest): UpdateNetworkAclEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateNetworkAclEntries', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePublicIpAddressPoolAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The description of the IP address pool.

This parameter is optional. If you enter a description, the description must be 2 to 256 characters in length, and cannot start with http:// or https://.', example='AddressPoolDescription', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run, without performing the actual request. Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  name?: string(name='Name', description='The name of the IP address pool.

This parameter is optional. The name must be 1 to 128 characters in length, and can contain digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter but cannot start with `http://` or `https://`.', example='AddressPoolName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  publicIpAddressPoolId: string(name='PublicIpAddressPoolId', description='The ID of the IP address pool.

This parameter is required.', example='pippool-6wetvn6fumkgycssx****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the IP address pool that you want to modify.

This parameter is required.', example='cn-chengdu', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdatePublicIpAddressPoolAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model UpdatePublicIpAddressPoolAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePublicIpAddressPoolAttributeResponseBody(name='body'),
}

/**
  * @description You cannot repeatedly call the **UpdatePublicIpAddressPoolAttribute** operation to modify the attributes of an IP address pool within the specified period of time.
  * @param request  the request parameters of UpdatePublicIpAddressPoolAttribute  UpdatePublicIpAddressPoolAttributeRequest
  * @return UpdatePublicIpAddressPoolAttributeResponse
 */
async function updatePublicIpAddressPoolAttribute(request: UpdatePublicIpAddressPoolAttributeRequest): UpdatePublicIpAddressPoolAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePublicIpAddressPoolAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTrafficMirrorFilterAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Valid values:

*   **true**: checks the request without performing the operation. The system checks the required parameters, request syntax, and limits. If the request fails the check, an error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. If the request passes the check, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the mirrored traffic belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list. For more information about regions that support traffic mirroring, see [Overview of traffic mirroring](https://help.aliyun.com/document_detail/207513.html).

This parameter is required.', example='cn-hongkong', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMirrorFilterDescription?: string(name='TrafficMirrorFilterDescription', description='The description of the filter.

The description must be 1 to 256 characters in length and cannot start with `http://` or `https://`.', example='This is a new filter.', position='Query'),
  trafficMirrorFilterId: string(name='TrafficMirrorFilterId', description='The ID of the filter.

This parameter is required.', example='tmf-j6cmls82xnc86vtpe****', position='Query'),
  trafficMirrorFilterName?: string(name='TrafficMirrorFilterName', description='The name of the filter.

The name must be 1 to 128 characters in length and cannot start with `http://` or `https://`.', example='test', position='Query'),
}

model UpdateTrafficMirrorFilterAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5816D35F-94D5-48CE-838F-2327C8EE8D49'),
}

model UpdateTrafficMirrorFilterAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTrafficMirrorFilterAttributeResponseBody(name='body'),
}

/**
  * @description You cannot repeatedly call the **UpdateTrafficMirrorFilterAttribute** operation to modify the configuration of a filter for traffic mirroring within the specified period of time.
  * @param request  the request parameters of UpdateTrafficMirrorFilterAttribute  UpdateTrafficMirrorFilterAttributeRequest
  * @return UpdateTrafficMirrorFilterAttributeResponse
 */
async function updateTrafficMirrorFilterAttribute(request: UpdateTrafficMirrorFilterAttributeRequest): UpdateTrafficMirrorFilterAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTrafficMirrorFilterAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTrafficMirrorFilterRuleAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, the system uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  destinationCidrBlock?: string(name='DestinationCidrBlock', description='The new destination CIDR block of the inbound or outbound traffic.', example='10.0.0.0/24', position='Query'),
  destinationPortRange?: string(name='DestinationPortRange', description='The new destination port range of the inbound or outbound traffic.

>  If you set **Protocol** to **ICMP**, you cannot change the port range.', example='-1/-1', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Valid values:

*   **true**: only checks the API request. The configuration of the inbound or outbound rule is not modified. The system checks the required parameters, request syntax, and limits. If the request fails to pass the check, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false**: sends the request. This is the default value. If the request passes the check, a 2xx HTTP status code is returned and the configuration of the inbound or outbound rule is modified.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  priority?: int32(name='Priority', description='The new priority of the inbound or outbound rule. A smaller value indicates a higher priority.', example='1', position='Query'),
  protocol?: string(name='Protocol', description='The new protocol that is used by the traffic to be mirrored by the inbound or outbound rule. Valid values:

*   **ALL**: all protocols
*   **ICMP**: Internet Control Message Protocol (ICMP)
*   **TCP**: TCP
*   **UDP**: User Datagram Protocol (UDP)', example='ICMP', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region to which the mirrored traffic belongs.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list. For more information about regions that support traffic mirroring, see [Overview of traffic mirroring](https://help.aliyun.com/document_detail/207513.html).

This parameter is required.', example='cn-hongkong', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  ruleAction?: string(name='RuleAction', description='The new action of the inbound or outbound rule. Valid values:

*   **accept**: accepts network traffic.
*   **drop**: drops network traffic.', example='accept', position='Query'),
  sourceCidrBlock?: string(name='SourceCidrBlock', description='The new source CIDR block of the inbound or outbound traffic.', example='0.0.0.0/0', position='Query'),
  sourcePortRange?: string(name='SourcePortRange', description='The new source port range of the inbound or outbound traffic.

>  If you set **Protocol** to **ICMP**, you cannot change the port range.', example='22/40', position='Query'),
  trafficMirrorFilterRuleId: string(name='TrafficMirrorFilterRuleId', description='The ID of the inbound or outbound rule.

This parameter is required.', example='tmr-j6c89rzmtd3hhdugq****', position='Query'),
}

model UpdateTrafficMirrorFilterRuleAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='02EB8585-D4DC-4E29-A0F4-7C588C82863C'),
}

model UpdateTrafficMirrorFilterRuleAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTrafficMirrorFilterRuleAttributeResponseBody(name='body'),
}

/**
  * @description *   The **UpdateTrafficMirrorFilterRuleAttribute** operation is asynchronous. After you send the request, the system returns a request ID. However, the operation is still being performed in the system background. You can call the [ListTrafficMirrorFilters](https://help.aliyun.com/document_detail/261353.html) operation to query the status of an inbound or outbound rule:
  *     *   If the rule is in the **Modifying** state, the rule is being modified.
  *     *   If the rule is in the **Created** state, the rule is modified.
  * *   You cannot repeatedly call the **UpdateTrafficMirrorFilterRuleAttribute** operation to modify an inbound or outbound rule within the specified period of time.
  * @param request  the request parameters of UpdateTrafficMirrorFilterRuleAttribute  UpdateTrafficMirrorFilterRuleAttributeRequest
  * @return UpdateTrafficMirrorFilterRuleAttributeResponse
 */
async function updateTrafficMirrorFilterRuleAttribute(request: UpdateTrafficMirrorFilterRuleAttributeRequest): UpdateTrafficMirrorFilterRuleAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTrafficMirrorFilterRuleAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTrafficMirrorSessionAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: performs a dry run, without performing the actual request. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false**: sends the request. If the request passes the check, a 2xx HTTP status code is returned and the operation is performed. This is the default value.', example='false', position='Query'),
  enabled?: boolean(name='Enabled', description='Specifies whether to enable the traffic mirror session. Valid values:

*   **false** (default)
*   **true**', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  packetLength?: int32(name='PacketLength', description='The maximum transmission unit (MTU).

Valid values: **64 to 9600**. Default value: **1500**.', example='1500', position='Query'),
  priority?: int32(name='Priority', description='The new priority of the traffic mirror session. Valid values: **1** to **32766**.

A smaller value indicates a higher priority. You cannot specify identical priorities for traffic mirror sessions that are created in the same region by using the same account.', example='2', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the traffic mirror session. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list. For more information about the regions that support traffic mirroring, see [Overview of traffic mirroring](https://help.aliyun.com/document_detail/207513.html).

This parameter is required.', example='cn-hongkong', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', description='The ID of the traffic mirror filter.', example='tmf-j6cmls82xnc86vtpe****', position='Query'),
  trafficMirrorSessionDescription?: string(name='TrafficMirrorSessionDescription', description='The new description of the traffic mirror session.

The description must be 1 to 256 characters in length and cannot start with `http://` or `https://`.', example='This is a new session.', position='Query'),
  trafficMirrorSessionId: string(name='TrafficMirrorSessionId', description='The ID of the traffic mirror session.

This parameter is required.', example='tms-j6cla50buc44ap8tu****', position='Query'),
  trafficMirrorSessionName?: string(name='TrafficMirrorSessionName', description='The new name of the traffic mirror session.

The name must be 1 to 128 characters in length, and cannot start with `http://` or `https://`.', example='abc', position='Query'),
  trafficMirrorTargetId?: string(name='TrafficMirrorTargetId', description='The ID of the traffic mirror destination.', example='eni-j6c2fp57q8rr47rp*****', position='Query'),
  trafficMirrorTargetType?: string(name='TrafficMirrorTargetType', description='The new type of the traffic mirror destination. Valid values:

*   **NetworkInterface**: an elastic network interface (ENI)
*   **SLB**: an internal-facing Server Load Balancer (SLB) instance', example='NetworkInterface', position='Query'),
  virtualNetworkId?: int32(name='VirtualNetworkId', description='The VXLAN network identifier (VNI) that is used to distinguish different mirrored traffic. Valid values: **0** to **16777215**.

You can use VNIs to identify mirrored traffic from different sessions at the traffic mirror destination. If you do not specify a VNI, the system randomly allocates a VNI. If you want the system to randomly allocate a VNI, ignore this parameter.', example='10', position='Query'),
}

model UpdateTrafficMirrorSessionAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='64DCAF03-E2C7-479A-ACEA-38B79876B006'),
}

model UpdateTrafficMirrorSessionAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTrafficMirrorSessionAttributeResponseBody(name='body'),
}

/**
  * @description ## Usage notes
  * *   **UpdateTrafficMirrorSessionAttribute** is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the [ListTrafficMirrorSessions](https://help.aliyun.com/document_detail/261367.html) operation to query the status of the task.
  *     *   If the traffic mirror session is in the **Modifying** state, the configuration of the traffic mirror session is being modified.
  *     *   If the traffic mirror session is in the **Created** state, the configuration of the traffic mirror session is modified.
  * *   You cannot repeatedly call the **UpdateTrafficMirrorSessionAttribute** operation within a specific period of time.
  * @param request  the request parameters of UpdateTrafficMirrorSessionAttribute  UpdateTrafficMirrorSessionAttributeRequest
  * @return UpdateTrafficMirrorSessionAttributeResponse
 */
async function updateTrafficMirrorSessionAttribute(request: UpdateTrafficMirrorSessionAttributeRequest): UpdateTrafficMirrorSessionAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTrafficMirrorSessionAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateVirtualBorderBandwidthRequest {
  bandwidth: int32(name='Bandwidth', description='The new maximum bandwidth value for the VBR. Unit: Mbit/s.

This parameter is required.', example='2', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='02fb3da4-130e-11e9-8e44-0016****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the VBR.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  virtualBorderRouterId: string(name='VirtualBorderRouterId', description='The ID of the VBR.

This parameter is required.', example='vbr-bp15zckdt37pq72****', position='Query'),
}

model UpdateVirtualBorderBandwidthResponseBody = {
  code?: string(name='Code', description='The error code.', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='none'),
  requestId?: string(name='RequestId', description='The request ID.', example='AA4486A8-B6AE-469E-AB09-820EF8ECFA2B'),
  success?: boolean(name='Success', description='Indicates whether the operation is successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model UpdateVirtualBorderBandwidthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateVirtualBorderBandwidthResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateVirtualBorderBandwidth  UpdateVirtualBorderBandwidthRequest
  * @return UpdateVirtualBorderBandwidthResponse
 */
async function updateVirtualBorderBandwidth(request: UpdateVirtualBorderBandwidthRequest): UpdateVirtualBorderBandwidthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateVirtualBorderBandwidth', 'POST', '/', 'json', false, 'json', request);
}

model UpdateVirtualPhysicalConnectionRequest {
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values: Valid values:

*   **true**: performs only a dry run. The system checks the request for potential issues, including required parameters, request syntax, and instance status. If the request fails to pass the dry run, an error message is returned. If the request passes the dry run, the system returns the ID of the request.
*   **false** (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  expectSpec?: string(name='ExpectSpec', description='The estimated bandwidth value of the hosted connection. The estimated bandwidth value takes effect only after the payment is completed.

Valid values: **50M**, **100M**, **200M**, **300M**, **400M**, **500M**, **1G**, **2G**, **5G**, **8G**, and **10G**.

>  **2G**, **5G**, **8G**, and **10G** are unavailable by default. If you want to use these bandwidth values, contact your account manager.

**M** indicates Mbit/s and **G** indicates Gbit/s.', example='50M', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the hosted connection over Express Connect circuit.

This parameter is required.', example='pc-bp1mrgfbtmc9brre7****', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the hosted connection.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to obtain the region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  token?: string(name='Token', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the **request ID** as the **client token**. The **request ID** may be different for each request.', example='CBCE910E-D396-4944-8****', position='Query'),
  vlanId: long(name='VlanId', description='The VLAN ID of the hosted connection over Express Connect circuit. Valid values: **0** to **2999**.

*   If the VLAN ID is set to **0**, it indicates that the switch port of the virtual border router (VBR) is a Layer 3 router interface instead of a VLAN interface. When a Layer 3 router interface is used, each Express Connect circuit corresponds to a VBR.
*   If the VLAN ID is set to a value from **1** to **2999**, the switch port of the VBR is a Layer 3 VLAN subinterface. When a Layer 3 VLAN subinterface is used, each VLAN ID corresponds to one VBR. In this case, the Express Connect circuit with which the VBR is associated can be used to connect to virtual private clouds (VPCs) that belong to different Alibaba Cloud accounts. VBRs in different VLANs are isolated from each other at Layer 2.

This parameter is required.', example='1', position='Query'),
}

model UpdateVirtualPhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='7035627E-1C1D-5BC7-A830-F897A35912D1'),
  success?: string(name='Success', description='Indicates whether the VLAN ID of the hosted connection is changed. Valid values:

*   **true**
*   **false**', example='true'),
}

model UpdateVirtualPhysicalConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateVirtualPhysicalConnectionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateVirtualPhysicalConnection  UpdateVirtualPhysicalConnectionRequest
  * @return UpdateVirtualPhysicalConnectionResponse
 */
async function updateVirtualPhysicalConnection(request: UpdateVirtualPhysicalConnectionRequest): UpdateVirtualPhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateVirtualPhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model UpdateVpcGatewayEndpointAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among all requests. The token can contain only ASCII characters.

>  If you do not set this parameter, the system uses **RequestId** as **ClientToken**. The value of **RequestId** of each API request may be different.', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: performs a dry run. The system checks your AccessKey pair, the RAM user permissions, and the required parameters If the request fails the dry run, the corresponding error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  endpointDescription?: string(name='EndpointDescription', description='The new description of the gateway endpoint.

The description must be 1 to 255 characters in length.', example='updateendpoint', position='Query'),
  endpointId: string(name='EndpointId', description='The ID of the gateway endpoint that you want to modify.

This parameter is required.', example='vpce-bp1w1dmdqjpwul0v3****', position='Query'),
  endpointName?: string(name='EndpointName', description='The new name of the gateway endpoint.

The name must be 1 to 128 characters in length.', example='update', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  policyDocument?: string(name='PolicyDocument', description='The access policy for the cloud service.

For more information about the syntax and structure of the access policy, see [Policy syntax and structure](https://help.aliyun.com/document_detail/93739.html).', example='{   "Version" : "1",   "Statement" : [ {     "Effect" : "Allow",     "Resource" : [ "*" ],     "Action" : [ "*" ],     "Principal" : [ "*" ]   } ] }', position='Query'),
  regionId: string(name='RegionId', description='The region ID of the gateway endpoint.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdateVpcGatewayEndpointAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='E9654534-5A38-5545-813F-0403D49042FB'),
}

model UpdateVpcGatewayEndpointAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateVpcGatewayEndpointAttributeResponseBody(name='body'),
}

/**
  * @description *   **UpdateVpcGatewayEndpointAttribute** is an asynchronous operation. After a request is sent, the system returns a **request ID** and runs the task in the background. You can call the [GetVpcGatewayEndpointAttribute](https://help.aliyun.com/document_detail/311017.html) operation to query the status of the task.
  *     *   If the gateway endpoint is in the **Updating** state, it is being modified.
  *     *   If the gateway endpoint is in the **Created** state, it is modified.
  * *   You cannot call the **UpdateVpcGatewayEndpointAttribute** operation within a specific period of time.
  * @param request  the request parameters of UpdateVpcGatewayEndpointAttribute  UpdateVpcGatewayEndpointAttributeRequest
  * @return UpdateVpcGatewayEndpointAttributeResponse
 */
async function updateVpcGatewayEndpointAttribute(request: UpdateVpcGatewayEndpointAttributeRequest): UpdateVpcGatewayEndpointAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateVpcGatewayEndpointAttribute', 'POST', '/', 'json', false, 'json', request);
}

model VpcDescribeVpcNatGatewayNetworkInterfaceQuotaRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  natGatewayId?: string(name='NatGatewayId', description='The ID of the VPC NAT gateway.', example='ngw-bp1uewa15k4iy5770****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the VPC NAT gateway.

You can call the [DescribeRegions](https://help.aliyun.com/document_detail/36063.html) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceUid?: long(name='ResourceUid', description='The ID of the Alibaba Cloud account to which the resource belongs.', example='132193271328****', position='Query'),
}

model VpcDescribeVpcNatGatewayNetworkInterfaceQuotaResponseBody = {
  quota?: long(name='Quota', description='The number of endpoints that can be created.', example='2'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='611CB80C-B6A9-43DB-9E38-0B0AC3D9B58F'),
}

model VpcDescribeVpcNatGatewayNetworkInterfaceQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VpcDescribeVpcNatGatewayNetworkInterfaceQuotaResponseBody(name='body'),
}

/**
  * @description Before you call this operation, make sure that a VPC NAT gateway is created. For more information, see [CreateNatGateway](https://help.aliyun.com/document_detail/120219.html).
  * @param request  the request parameters of VpcDescribeVpcNatGatewayNetworkInterfaceQuota  VpcDescribeVpcNatGatewayNetworkInterfaceQuotaRequest
  * @return VpcDescribeVpcNatGatewayNetworkInterfaceQuotaResponse
 */
async function vpcDescribeVpcNatGatewayNetworkInterfaceQuota(request: VpcDescribeVpcNatGatewayNetworkInterfaceQuotaRequest): VpcDescribeVpcNatGatewayNetworkInterfaceQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VpcDescribeVpcNatGatewayNetworkInterfaceQuota', 'POST', '/', 'json', false, 'json', request);
}

model WithdrawVpcPublishedRouteEntriesRequest {
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeEntries?: [ 
    {
      destinationCidrBlock: string(name='DestinationCidrBlock', description='This parameter is required.', example='10.0.0.0/24'),
      routeTableId: string(name='RouteTableId', description='This parameter is required.', example='vtb-bp145q7glnuzd****'),
    }
  ](name='RouteEntries', position='Query'),
  targetInstanceId: string(name='TargetInstanceId', description='This parameter is required.', example='ecr-dhw2xsds5****', position='Query'),
  targetType: string(name='TargetType', description='This parameter is required.', example='ECR', position='Query'),
}

model WithdrawVpcPublishedRouteEntriesResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model WithdrawVpcPublishedRouteEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: WithdrawVpcPublishedRouteEntriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of WithdrawVpcPublishedRouteEntries  WithdrawVpcPublishedRouteEntriesRequest
  * @return WithdrawVpcPublishedRouteEntriesResponse
 */
async function withdrawVpcPublishedRouteEntries(request: WithdrawVpcPublishedRouteEntriesRequest): WithdrawVpcPublishedRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'WithdrawVpcPublishedRouteEntries', 'POST', '/', 'json', false, 'json', request);
}

