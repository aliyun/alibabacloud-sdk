/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Vpc';
  @version = '2016-04-28';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'vpc.aliyuncs.com',
    cn-beijing = 'vpc.aliyuncs.com',
    cn-hangzhou = 'vpc.aliyuncs.com',
    cn-shanghai = 'vpc.aliyuncs.com',
    cn-shenzhen = 'vpc.aliyuncs.com',
    cn-hongkong = 'vpc.aliyuncs.com',
    ap-southeast-1 = 'vpc.aliyuncs.com',
    us-east-1 = 'vpc.aliyuncs.com',
    us-west-1 = 'vpc.aliyuncs.com',
    cn-shanghai-finance-1 = 'vpc.aliyuncs.com',
    cn-shenzhen-finance-1 = 'vpc.aliyuncs.com',
    cn-north-2-gov-1 = 'vpc.aliyuncs.com',
    ap-northeast-2-pop = 'vpc.aliyuncs.com',
    cn-beijing-finance-pop = 'vpc.aliyuncs.com',
    cn-beijing-gov-1 = 'vpc.aliyuncs.com',
    cn-beijing-nu16-b01 = 'vpc.aliyuncs.com',
    cn-edge-1 = 'vpc-nebula.cn-qingdao-nebula.aliyuncs.com',
    cn-fujian = 'vpc.aliyuncs.com',
    cn-haidian-cm12-c01 = 'vpc.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'vpc.aliyuncs.com',
    cn-hangzhou-finance = 'vpc.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'vpc.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'vpc.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'vpc.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'vpc.aliyuncs.com',
    cn-hangzhou-test-306 = 'vpc.aliyuncs.com',
    cn-hongkong-finance-pop = 'vpc.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'vpc-nebula.cn-qingdao-nebula.aliyuncs.com',
    cn-qingdao-nebula = 'vpc-nebula.cn-qingdao-nebula.aliyuncs.com',
    cn-shanghai-et15-b01 = 'vpc.aliyuncs.com',
    cn-shanghai-et2-b01 = 'vpc.aliyuncs.com',
    cn-shanghai-inner = 'vpc.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'vpc.aliyuncs.com',
    cn-shenzhen-inner = 'vpc.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'vpc.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'vpc.aliyuncs.com',
    cn-wuhan = 'vpc.aliyuncs.com',
    cn-yushanfang = 'vpc.aliyuncs.com',
    cn-zhangbei = 'vpc.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'vpc.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'vpc.cn-zhangjiakou.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'vpc-nebula.cn-qingdao-nebula.aliyuncs.com',
    eu-west-1-oxs = 'vpc-nebula.cn-shenzhen-cloudstone.aliyuncs.com',
    rus-west-1-pop = 'vpc.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model ActivateRouterInterfaceRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerInterfaceId: string(name='RouterInterfaceId', example='ri-2zeo3xzyf38r4urz****', position='Query'),
}

model ActivateRouterInterfaceResponseBody = {
  requestId?: string(name='RequestId', example='079874CD-AEC1-43E6-AC03-ADD96B6E4907'),
}

model ActivateRouterInterfaceResponse = {
  headers: map[string]string(name='headers'),
  body: ActivateRouterInterfaceResponseBody(name='body'),
}

async function activateRouterInterface(request: ActivateRouterInterfaceRequest): ActivateRouterInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ActivateRouterInterface', 'POST', '/', 'json', false, 'json', request);
}

model ActiveFlowLogRequest {
  flowLogId: string(name='FlowLogId', example='fl-m5e8vhz2t21sel1nq****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-qingdao', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ActiveFlowLogResponseBody = {
  requestId?: string(name='RequestId', example='F7DDDC17-FA06-4AC2-8F35-59D2470FCFC1'),
  success?: string(name='Success', example='true'),
}

model ActiveFlowLogResponse = {
  headers: map[string]string(name='headers'),
  body: ActiveFlowLogResponseBody(name='body'),
}

async function activeFlowLog(request: ActiveFlowLogRequest): ActiveFlowLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ActiveFlowLog', 'POST', '/', 'json', false, 'json', request);
}

model AddBgpNetworkRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dstCidrBlock: string(name='DstCidrBlock', example='10.10.XX.XX/32', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerId: string(name='RouterId', example='vrt-2zeo3xzyf38r4u******', position='Query'),
  vpcId?: string(name='VpcId', example='vpc-bp1qpo0kug3a2*****', position='Query'),
}

model AddBgpNetworkResponseBody = {
  requestId?: string(name='RequestId', example='9C7FA9D6-72E0-48A9-A9C3-2DA8569CD5EB'),
}

model AddBgpNetworkResponse = {
  headers: map[string]string(name='headers'),
  body: AddBgpNetworkResponseBody(name='body'),
}

async function addBgpNetwork(request: AddBgpNetworkRequest): AddBgpNetworkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddBgpNetwork', 'POST', '/', 'json', false, 'json', request);
}

model AddCommonBandwidthPackageIpRequest {
  bandwidthPackageId: string(name='BandwidthPackageId', example='cbwp-2ze2ic1xd2qeqasdf****', position='Query'),
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  ipInstanceId: string(name='IpInstanceId', example='eip-2zeerraiwb7uqwed****', position='Query'),
  ipType?: string(name='IpType', example='EIP', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AddCommonBandwidthPackageIpResponseBody = {
  requestId?: string(name='RequestId', example='01FDDD49-C4B7-4D2A-A8E5-A93915C450A6'),
}

model AddCommonBandwidthPackageIpResponse = {
  headers: map[string]string(name='headers'),
  body: AddCommonBandwidthPackageIpResponseBody(name='body'),
}

async function addCommonBandwidthPackageIp(request: AddCommonBandwidthPackageIpRequest): AddCommonBandwidthPackageIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCommonBandwidthPackageIp', 'POST', '/', 'json', false, 'json', request);
}

model AddCommonBandwidthPackageIpsRequest {
  bandwidthPackageId: string(name='BandwidthPackageId', example='cbwp-2ze2ic1xd2qeqasdf****', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ipInstanceIds: [ string ](name='IpInstanceIds', position='Query'),
  ipType?: string(name='IpType', example='EIP', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AddCommonBandwidthPackageIpsResponseBody = {
  requestId?: string(name='RequestId', example='01FDDD49-C4B7-4D2A-A8E5-A93915C450A6'),
}

model AddCommonBandwidthPackageIpsResponse = {
  headers: map[string]string(name='headers'),
  body: AddCommonBandwidthPackageIpsResponseBody(name='body'),
}

async function addCommonBandwidthPackageIps(request: AddCommonBandwidthPackageIpsRequest): AddCommonBandwidthPackageIpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCommonBandwidthPackageIps', 'POST', '/', 'json', false, 'json', request);
}

model AddGlobalAccelerationInstanceIpRequest {
  globalAccelerationInstanceId: string(name='GlobalAccelerationInstanceId', example='ga-Ldefrgbttnyyf****', position='Query'),
  ipInstanceId: string(name='IpInstanceId', example='eip-rw434rwfdeaf****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AddGlobalAccelerationInstanceIpResponseBody = {
  requestId?: string(name='RequestId', example='01FDDD49-C4B7-4D2A-A8E5-A93915C450A6'),
}

model AddGlobalAccelerationInstanceIpResponse = {
  headers: map[string]string(name='headers'),
  body: AddGlobalAccelerationInstanceIpResponseBody(name='body'),
}

async function addGlobalAccelerationInstanceIp(request: AddGlobalAccelerationInstanceIpRequest): AddGlobalAccelerationInstanceIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddGlobalAccelerationInstanceIp', 'POST', '/', 'json', false, 'json', request);
}

model AddIPv6TranslatorAclListEntryRequest {
  aclEntryComment?: string(name='AclEntryComment', example='clientIP1', position='Query'),
  aclEntryIp: string(name='AclEntryIp', example='12XX:0:0:dc30::0102', position='Query'),
  aclId: string(name='AclId', example='ipv6transacl-bp1dcdvfe2****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AddIPv6TranslatorAclListEntryResponseBody = {
  aclEntryId?: string(name='AclEntryId', example='ipv6transaclentry-bp105jrs****'),
  requestId?: string(name='RequestId', example='8B2F5262-6B57-43F2-defr345'),
}

model AddIPv6TranslatorAclListEntryResponse = {
  headers: map[string]string(name='headers'),
  body: AddIPv6TranslatorAclListEntryResponseBody(name='body'),
}

async function addIPv6TranslatorAclListEntry(request: AddIPv6TranslatorAclListEntryRequest): AddIPv6TranslatorAclListEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddIPv6TranslatorAclListEntry', 'POST', '/', 'json', false, 'json', request);
}

model AddPublicIpAddressPoolCidrBlockRequest {
  cidrBlock?: string(name='CidrBlock', example='47.0.XX.XX/24', position='Query'),
  cidrMask?: int32(name='CidrMask', position='Query'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11****', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  publicIpAddressPoolId: string(name='PublicIpAddressPoolId', example='pippool-6wetvn6fumkgycssx****', position='Query'),
  regionId: string(name='RegionId', example='cn-chengdu', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AddPublicIpAddressPoolCidrBlockResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model AddPublicIpAddressPoolCidrBlockResponse = {
  headers: map[string]string(name='headers'),
  body: AddPublicIpAddressPoolCidrBlockResponseBody(name='body'),
}

async function addPublicIpAddressPoolCidrBlock(request: AddPublicIpAddressPoolCidrBlockRequest): AddPublicIpAddressPoolCidrBlockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddPublicIpAddressPoolCidrBlock', 'POST', '/', 'json', false, 'json', request);
}

model AddSourcesToTrafficMirrorSessionRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hongkong', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMirrorSessionId: string(name='TrafficMirrorSessionId', example='tms-j6cla50buc44ap8tu****', position='Query'),
  trafficMirrorSourceIds: [ string ](name='TrafficMirrorSourceIds', example='eni-j6ccmrl8z3xkvxgw****', maxLength=128, position='Query'),
}

model AddSourcesToTrafficMirrorSessionResponseBody = {
  requestId?: string(name='RequestId', example='87F70089-5B38-41A8-BAD8-0B55E2F8DC57'),
}

model AddSourcesToTrafficMirrorSessionResponse = {
  headers: map[string]string(name='headers'),
  body: AddSourcesToTrafficMirrorSessionResponseBody(name='body'),
}

async function addSourcesToTrafficMirrorSession(request: AddSourcesToTrafficMirrorSessionRequest): AddSourcesToTrafficMirrorSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSourcesToTrafficMirrorSession', 'POST', '/', 'json', false, 'json', request);
}

model AllocateEipAddressRequest {
  activityId?: long(name='ActivityId', example='123456', position='Query'),
  autoPay?: boolean(name='AutoPay', example='false', position='Query'),
  bandwidth?: string(name='Bandwidth', example='5', position='Query'),
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  description?: string(name='Description', example='test', position='Query'),
  ISP?: string(name='ISP', example='BGP', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', example='PostPaid', position='Query'),
  internetChargeType?: string(name='InternetChargeType', example='PayByTraffic', position='Query'),
  name?: string(name='Name', example='EIP1', position='Query'),
  netmode?: string(name='Netmode', example='public', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', example='1', position='Query'),
  pricingCycle?: string(name='PricingCycle', example='Month', position='Query'),
  publicIpAddressPoolId?: string(name='PublicIpAddressPoolId', example='pippool-2vc0kxcedhquybdsz****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazffggds****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityProtectionTypes?: [ string ](name='SecurityProtectionTypes', example='AntiDDoS_Enhanced', position='Query'),
}

model AllocateEipAddressResponseBody = {
  allocationId?: string(name='AllocationId', example='eip-25877c70gddh****'),
  eipAddress?: string(name='EipAddress', example='192.0.XX.XX'),
  orderId?: long(name='OrderId', example='10'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazfdgdg****'),
}

model AllocateEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateEipAddressResponseBody(name='body'),
}

async function allocateEipAddress(request: AllocateEipAddressRequest): AllocateEipAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateEipAddress', 'POST', '/', 'json', false, 'json', request);
}

model AllocateEipAddressProRequest {
  autoPay?: boolean(name='AutoPay', example='true', position='Query'),
  bandwidth?: string(name='Bandwidth', example='5', position='Query'),
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe6****', position='Query'),
  ISP?: string(name='ISP', example='BGP', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', example='PostPaid', position='Query'),
  instanceId?: string(name='InstanceId', example='eip-25877c70gddh****', position='Query'),
  internetChargeType?: string(name='InternetChargeType', example='PayByBandwidth', position='Query'),
  ipAddress?: string(name='IpAddress', example='192.0.XX.XX', position='Query'),
  netmode?: string(name='Netmode', example='public', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', example='1', position='Query'),
  pricingCycle?: string(name='PricingCycle', example='Month', position='Query'),
  publicIpAddressPoolId?: string(name='PublicIpAddressPoolId', example='pippool-2vc0kxcedhquybdsz****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-resourcegroup****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityProtectionTypes?: [ string ](name='SecurityProtectionTypes', position='Query'),
}

model AllocateEipAddressProResponseBody = {
  allocationId?: string(name='AllocationId', example='eip-25877c70gddh****'),
  eipAddress?: string(name='EipAddress', example='192.0.XX.XX'),
  orderId?: long(name='OrderId', example='20190000'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-resourcegroup****'),
}

model AllocateEipAddressProResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateEipAddressProResponseBody(name='body'),
}

async function allocateEipAddressPro(request: AllocateEipAddressProRequest): AllocateEipAddressProResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateEipAddressPro', 'POST', '/', 'json', false, 'json', request);
}

model AllocateEipSegmentAddressRequest {
  bandwidth?: string(name='Bandwidth', example='5', position='Query'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  eipMask: string(name='EipMask', example='28', position='Query'),
  internetChargeType?: string(name='InternetChargeType', example='PayByBandwidth', position='Query'),
  isp?: string(name='Isp', example='BGP', position='Query'),
  netmode?: string(name='Netmode', example='public', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AllocateEipSegmentAddressResponseBody = {
  eipSegmentInstanceId?: string(name='EipSegmentInstanceId', example='eipsg-2zett8ba055tbsxme****'),
  orderId?: long(name='OrderId', example='2022****'),
  requestId?: string(name='RequestId', example='F7A6301A-64BA-41EC-8284-8F4838C15D1F'),
}

model AllocateEipSegmentAddressResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateEipSegmentAddressResponseBody(name='body'),
}

async function allocateEipSegmentAddress(request: AllocateEipSegmentAddressRequest): AllocateEipSegmentAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateEipSegmentAddress', 'POST', '/', 'json', false, 'json', request);
}

model AllocateIpv6InternetBandwidthRequest {
  bandwidth: int32(name='Bandwidth', example='2', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  internetChargeType?: string(name='InternetChargeType', example='PayByBandwidth', position='Query'),
  ipv6AddressId: string(name='Ipv6AddressId', example='ipv6bw-uf6hcyzu65v98v3du****', position='Query'),
  ipv6GatewayId: string(name='Ipv6GatewayId', example='ipv6bw-uf6hcyzu65v98v3du****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-huhehaote', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AllocateIpv6InternetBandwidthResponseBody = {
  internetBandwidthId?: string(name='InternetBandwidthId', example='ipv6bw-uf6hcyzu65v98v3du****'),
  ipv6AddressId?: string(name='Ipv6AddressId', example='ipv6bw-uf6hcyzu65v98v3du****'),
  requestId?: string(name='RequestId', example='6972A26E-99B1-4367-9890-FBDEBB0F5E7D'),
}

model AllocateIpv6InternetBandwidthResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateIpv6InternetBandwidthResponseBody(name='body'),
}

async function allocateIpv6InternetBandwidth(request: AllocateIpv6InternetBandwidthRequest): AllocateIpv6InternetBandwidthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateIpv6InternetBandwidth', 'POST', '/', 'json', false, 'json', request);
}

model AllocateVpcIpv6CidrRequest {
  addressPoolType?: string(name='AddressPoolType', example='custom', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ipv6CidrBlock?: string(name='Ipv6CidrBlock', example='2408:XXXX:0:a600::/56', position='Query'),
  ipv6Isp?: string(name='Ipv6Isp', example='BGP', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AllocateVpcIpv6CidrResponseBody = {
  ipv6CidrBlock?: string(name='Ipv6CidrBlock', example='2408:XXXX:0:a600::/56'),
  requestId?: string(name='RequestId', example='D20C13EA-2584-53BC-8393-69DE6D98EFF1'),
}

model AllocateVpcIpv6CidrResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateVpcIpv6CidrResponseBody(name='body'),
}

async function allocateVpcIpv6Cidr(request: AllocateVpcIpv6CidrRequest): AllocateVpcIpv6CidrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateVpcIpv6Cidr', 'POST', '/', 'json', false, 'json', request);
}

model ApplyPhysicalConnectionLOARequest {
  bandwidth?: int32(name='Bandwidth', example='3', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  companyName: string(name='CompanyName', example='company', position='Query'),
  constructionTime: string(name='ConstructionTime', example='2022-02-28T16:00:00Z', position='Query'),
  instanceId: string(name='InstanceId', example='pc-bp1qrb3044eqi****', position='Query'),
  lineType: string(name='LineType', example='FIBRE', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  PMInfo?: [ 
    {
      PMCertificateNo?: string(name='PMCertificateNo', example='5****************9'),
      PMCertificateType?: string(name='PMCertificateType', example='IDCard'),
      PMContactInfo?: string(name='PMContactInfo', example='1390000****'),
      PMGender?: string(name='PMGender', example='Male'),
      PMName?: string(name='PMName'),
    }
  ](name='PMInfo', position='Query'),
  peerLocation?: string(name='PeerLocation', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  si: string(name='Si', position='Query'),
}

model ApplyPhysicalConnectionLOAResponseBody = {
  requestId?: string(name='RequestId', example='A47BD386-7FDE-42C4-8D22-C6223D18AA1C'),
}

model ApplyPhysicalConnectionLOAResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyPhysicalConnectionLOAResponseBody(name='body'),
}

async function applyPhysicalConnectionLOA(request: ApplyPhysicalConnectionLOARequest): ApplyPhysicalConnectionLOAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyPhysicalConnectionLOA', 'POST', '/', 'json', false, 'json', request);
}

model AssociateEipAddressRequest {
  allocationId: string(name='AllocationId', example='eip-2zeerraiwb7ujsxdc****', position='Query'),
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  instanceId: string(name='InstanceId', example='i-2zebb08phyczzawe****', position='Query'),
  instanceRegionId?: string(name='InstanceRegionId', example='cn-hangzhou', position='Query'),
  instanceType?: string(name='InstanceType', example='EcsInstance', position='Query'),
  mode?: string(name='Mode', example='NAT', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', example='192.168.XX.XX', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
}

model AssociateEipAddressResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model AssociateEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateEipAddressResponseBody(name='body'),
}

async function associateEipAddress(request: AssociateEipAddressRequest): AssociateEipAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateEipAddress', 'POST', '/', 'json', false, 'json', request);
}

model AssociateEipAddressBatchRequest {
  bindedInstanceId: string(name='BindedInstanceId', example='ngw-hp3akk9irtd69jad****', position='Query'),
  bindedInstanceType: string(name='BindedInstanceType', example='Nat', position='Query'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  instanceIds: [ string ](name='InstanceIds', position='Query'),
  mode?: string(name='Mode', example='MULTI_BINDED', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AssociateEipAddressBatchResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model AssociateEipAddressBatchResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateEipAddressBatchResponseBody(name='body'),
}

async function associateEipAddressBatch(request: AssociateEipAddressBatchRequest): AssociateEipAddressBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateEipAddressBatch', 'POST', '/', 'json', false, 'json', request);
}

model AssociateGlobalAccelerationInstanceRequest {
  backendServerId: string(name='BackendServerId', example='i-saf23****', position='Query'),
  backendServerRegionId: string(name='BackendServerRegionId', example='cn-shanghai', position='Query'),
  backendServerType?: string(name='BackendServerType', example='EcsInstance', position='Query'),
  globalAccelerationInstanceId: string(name='GlobalAccelerationInstanceId', example='ga-lsajj32****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AssociateGlobalAccelerationInstanceResponseBody = {
  requestId?: string(name='RequestId', example='DDF2CC38-76C7-4000-909D-B2088158AEDA'),
}

model AssociateGlobalAccelerationInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateGlobalAccelerationInstanceResponseBody(name='body'),
}

async function associateGlobalAccelerationInstance(request: AssociateGlobalAccelerationInstanceRequest): AssociateGlobalAccelerationInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateGlobalAccelerationInstance', 'POST', '/', 'json', false, 'json', request);
}

model AssociateHaVipRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  haVipId: string(name='HaVipId', example='havip-2zeo05qre24nhrqpy****', position='Query'),
  instanceId: string(name='InstanceId', example='i-faf344422ffsfad****', position='Query'),
  instanceType?: string(name='InstanceType', example='EcsInstance', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AssociateHaVipResponseBody = {
  requestId?: string(name='RequestId', example='C44F62BE-9CE7-4277-B117-69243F3988BF'),
}

model AssociateHaVipResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateHaVipResponseBody(name='body'),
}

async function associateHaVip(request: AssociateHaVipRequest): AssociateHaVipResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateHaVip', 'POST', '/', 'json', false, 'json', request);
}

model AssociateNetworkAclRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  networkAclId: string(name='NetworkAclId', example='nacl-a2do9e413e0sp****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resource?: [ 
    {
      resourceId?: string(name='ResourceId', example='vsw-bp1de348lntdw****'),
      resourceType?: string(name='ResourceType', example='VSwitch'),
    }
  ](name='Resource', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AssociateNetworkAclResponseBody = {
  requestId?: string(name='RequestId', example='4CF20CC7-D1FC-425B-A15B-DF7C8E2131A7'),
}

model AssociateNetworkAclResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateNetworkAclResponseBody(name='body'),
}

async function associateNetworkAcl(request: AssociateNetworkAclRequest): AssociateNetworkAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateNetworkAcl', 'POST', '/', 'json', false, 'json', request);
}

model AssociatePhysicalConnectionToVirtualBorderRouterRequest {
  circuitCode?: string(name='CircuitCode', example='longtel001', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  enableIpv6?: string(name='EnableIpv6', example='false', position='Query'),
  localGatewayIp?: string(name='LocalGatewayIp', example='192.168.XX.XX', position='Query'),
  localIpv6GatewayIp?: string(name='LocalIpv6GatewayIp', example='2001:XXXX:3c4d:0015:0000:0000:0000:1a2b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerGatewayIp?: string(name='PeerGatewayIp', example='192.168.XX.XX', position='Query'),
  peerIpv6GatewayIp?: string(name='PeerIpv6GatewayIp', example='2001:XXXX:4:4:4:4:4:4', position='Query'),
  peeringIpv6SubnetMask?: string(name='PeeringIpv6SubnetMask', example='2408:4004:cc:400::/56', position='Query'),
  peeringSubnetMask?: string(name='PeeringSubnetMask', example='255.255.255.0', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', example='pc-bp1qrb3044eqixog****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vbrId: string(name='VbrId', example='vbr-bp186tnz6rijyhj******', position='Query'),
  vlanId: string(name='VlanId', example='123', position='Query'),
}

model AssociatePhysicalConnectionToVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId', example='980960B0-2969-40BF-8542-EBB34FD358AB'),
}

model AssociatePhysicalConnectionToVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  body: AssociatePhysicalConnectionToVirtualBorderRouterResponseBody(name='body'),
}

async function associatePhysicalConnectionToVirtualBorderRouter(request: AssociatePhysicalConnectionToVirtualBorderRouterRequest): AssociatePhysicalConnectionToVirtualBorderRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociatePhysicalConnectionToVirtualBorderRouter', 'POST', '/', 'json', false, 'json', request);
}

model AssociateRouteTableRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId: string(name='RouteTableId', example='vtb-bp145q7glnuzdvzu2****', position='Query'),
  vSwitchId: string(name='VSwitchId', example='vsw-25ncdvfaue4****', position='Query'),
}

model AssociateRouteTableResponseBody = {
  requestId?: string(name='RequestId', example='DC668356-BCB4-42FD-9BC3-FA2B2E04B634'),
}

model AssociateRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateRouteTableResponseBody(name='body'),
}

async function associateRouteTable(request: AssociateRouteTableRequest): AssociateRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model AssociateRouteTableWithGatewayRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  gatewayId: string(name='GatewayId', example='ipv4gw-5tsnc6s4ogsedtp3k****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='ap-southeast-6', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId: string(name='RouteTableId', example='vtb-5ts0ohchwkp3dydt2****', position='Query'),
}

model AssociateRouteTableWithGatewayResponseBody = {
  requestId?: string(name='RequestId', example='F89C2176-8F10-55EF-90CF-CF99D1E3F816'),
}

model AssociateRouteTableWithGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateRouteTableWithGatewayResponseBody(name='body'),
}

async function associateRouteTableWithGateway(request: AssociateRouteTableWithGatewayRequest): AssociateRouteTableWithGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateRouteTableWithGateway', 'POST', '/', 'json', false, 'json', request);
}

model AssociateRouteTablesWithVpcGatewayEndpointRequest {
  clientToken?: string(name='ClientToken', description='幂等参数', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', description='是否只预检此次请求', example='false', position='Query'),
  endpointId: string(name='EndpointId', description='VPC网关实例ID', example='vpce-m5e371h5clm3uadih****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='地域', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableIds: [ string ](name='RouteTableIds', description='路由表列表', example='vtb-m5elgtm3aj586iitr****', position='Query'),
}

model AssociateRouteTablesWithVpcGatewayEndpointResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='59BDDA2D-FB52-59F9-9DC5-5EA7D6808B8E'),
}

model AssociateRouteTablesWithVpcGatewayEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateRouteTablesWithVpcGatewayEndpointResponseBody(name='body'),
}

async function associateRouteTablesWithVpcGatewayEndpoint(request: AssociateRouteTablesWithVpcGatewayEndpointRequest): AssociateRouteTablesWithVpcGatewayEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateRouteTablesWithVpcGatewayEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model AssociateVpcCidrBlockRequest {
  iPv6CidrBlock?: string(name='IPv6CidrBlock', example='2408:XXXX:0:6a::/56', position='Query'),
  ipVersion?: string(name='IpVersion', example='IPV4', position='Query'),
  ipv6Isp?: string(name='Ipv6Isp', example='BGP', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='ch-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secondaryCidrBlock?: string(name='SecondaryCidrBlock', example='192.168.0.0/16', position='Query'),
  vpcId: string(name='VpcId', example='vpc-o6wrloqsdqc9io3mg****', position='Query'),
}

model AssociateVpcCidrBlockResponseBody = {
  requestId?: string(name='RequestId', example='C1221A1F-2ACD-4592-8F27-474E02883159'),
}

model AssociateVpcCidrBlockResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateVpcCidrBlockResponseBody(name='body'),
}

async function associateVpcCidrBlock(request: AssociateVpcCidrBlockRequest): AssociateVpcCidrBlockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateVpcCidrBlock', 'POST', '/', 'json', false, 'json', request);
}

model AssociateVpnGatewayWithCertificateRequest {
  certificateId: string(name='CertificateId', example='6bfe4218-ea1d****', position='Query'),
  certificateType: string(name='CertificateType', example='Signature', position='Query'),
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea****', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm2ogj****', position='Query'),
}

model AssociateVpnGatewayWithCertificateResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model AssociateVpnGatewayWithCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateVpnGatewayWithCertificateResponseBody(name='body'),
}

async function associateVpnGatewayWithCertificate(request: AssociateVpnGatewayWithCertificateRequest): AssociateVpnGatewayWithCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateVpnGatewayWithCertificate', 'POST', '/', 'json', false, 'json', request);
}

model AttachDhcpOptionsSetToVpcRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  dhcpOptionsSetId: string(name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId: string(name='VpcId', example='vpc-sfdkfdjkdf****', position='Query'),
}

model AttachDhcpOptionsSetToVpcResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model AttachDhcpOptionsSetToVpcResponse = {
  headers: map[string]string(name='headers'),
  body: AttachDhcpOptionsSetToVpcResponseBody(name='body'),
}

async function attachDhcpOptionsSetToVpc(request: AttachDhcpOptionsSetToVpcRequest): AttachDhcpOptionsSetToVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachDhcpOptionsSetToVpc', 'POST', '/', 'json', false, 'json', request);
}

model AttachVbrToVpconnRequest {
  dryRun?: boolean(name='DryRun', description='DryRun', example='false', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  token?: string(name='Token', description='幂等Token', example='CBCE910E-D396-4944-8****', position='Query'),
  vbrId: string(name='VbrId', description='待迁移的vbr', example='vbr-bp133sn3nwjvu7twc****', position='Query'),
  vpconnId: string(name='VpconnId', description='迁移到目标vpconn', example='pc-bp1mrgfbtmc9brre7****', position='Query'),
}

model AttachVbrToVpconnResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='5356F028-0F5C-56FC-8574-897D24379041'),
  virtualPhysicalConnection?: string(name='VirtualPhysicalConnection', description='Vpconn的实例ID', example='pc-bp1mrgfbtmc9brre7****'),
}

model AttachVbrToVpconnResponse = {
  headers: map[string]string(name='headers'),
  body: AttachVbrToVpconnResponseBody(name='body'),
}

async function attachVbrToVpconn(request: AttachVbrToVpconnRequest): AttachVbrToVpconnResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachVbrToVpconn', 'POST', '/', 'json', false, 'json', request);
}

model CancelCommonBandwidthPackageIpBandwidthRequest {
  bandwidthPackageId: string(name='BandwidthPackageId', example='cbwp-bp13d0m4e2qv8xxxxxxxx', position='Query'),
  eipId: string(name='EipId', example='eip-2zewysoansu0sxxxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CancelCommonBandwidthPackageIpBandwidthResponseBody = {
  requestId?: string(name='RequestId', example='63D187BF-A30A-4DD6-B68D-FF182C96D8A2'),
}

model CancelCommonBandwidthPackageIpBandwidthResponse = {
  headers: map[string]string(name='headers'),
  body: CancelCommonBandwidthPackageIpBandwidthResponseBody(name='body'),
}

async function cancelCommonBandwidthPackageIpBandwidth(request: CancelCommonBandwidthPackageIpBandwidthRequest): CancelCommonBandwidthPackageIpBandwidthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelCommonBandwidthPackageIpBandwidth', 'POST', '/', 'json', false, 'json', request);
}

model CancelPhysicalConnectionRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', example='pc-119mfjzm7****', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CancelPhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model CancelPhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: CancelPhysicalConnectionResponseBody(name='body'),
}

async function cancelPhysicalConnection(request: CancelPhysicalConnectionRequest): CancelPhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelPhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model ChangeResourceGroupRequest {
  newResourceGroupId: string(name='NewResourceGroupId', example='rg-bp1drpcfz9srr393h****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId: string(name='ResourceId', example='pc-bp16qjewdsunr41m1****', position='Query'),
  resourceType: string(name='ResourceType', example='PHYSICALCONNECTION', position='Query'),
}

model ChangeResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model ChangeResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model CheckCanAllocateVpcPrivateIpAddressRequest {
  ipVersion?: string(name='IpVersion', description='IpVersion', example='ipv4', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  privateIpAddress: string(name='PrivateIpAddress', description='PrivateIpAddress', example='10.0.0.7', position='Query'),
  regionId: string(name='RegionId', description='RegionId', example='cn-qingdao', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchId: string(name='VSwitchId', description='VSwitchId', example='vsw-m5ew3t46z2drmifnt****', position='Query'),
}

model CheckCanAllocateVpcPrivateIpAddressResponseBody = {
  canAllocate?: boolean(name='CanAllocate', example='true'),
  requestId?: string(name='RequestId', example='93360B0-2969-40BF-8542-EBB34FD358AB'),
}

model CheckCanAllocateVpcPrivateIpAddressResponse = {
  headers: map[string]string(name='headers'),
  body: CheckCanAllocateVpcPrivateIpAddressResponseBody(name='body'),
}

async function checkCanAllocateVpcPrivateIpAddress(request: CheckCanAllocateVpcPrivateIpAddressRequest): CheckCanAllocateVpcPrivateIpAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckCanAllocateVpcPrivateIpAddress', 'POST', '/', 'json', false, 'json', request);
}

model CheckVpnBgpEnabledRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  regionId: string(name='RegionId', example='ap-southeast-2', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CheckVpnBgpEnabledResponseBody = {
  bgpEnabled?: boolean(name='BgpEnabled', example='true'),
  requestId?: string(name='RequestId', description='Id of the request', example='DF448D2E-215D-334F-B10D-7C3B087EF996'),
}

model CheckVpnBgpEnabledResponse = {
  headers: map[string]string(name='headers'),
  body: CheckVpnBgpEnabledResponseBody(name='body'),
}

async function checkVpnBgpEnabled(request: CheckVpnBgpEnabledRequest): CheckVpnBgpEnabledResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckVpnBgpEnabled', 'POST', '/', 'json', false, 'json', request);
}

model CompletePhysicalConnectionLOARequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-230e-11e9-8e44-0016e04115b', position='Query'),
  instanceId: string(name='InstanceId', example='pc-bp10tvlhnwkw****', position='Query'),
  lineCode?: string(name='LineCode', example='aaa111****', position='Query'),
  lineLabel?: string(name='LineLabel', example='bbb222****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CompletePhysicalConnectionLOAResponseBody = {
  requestId?: string(name='RequestId', example='F8983C74-E068-4509-B442-89BD82C8F43B'),
}

model CompletePhysicalConnectionLOAResponse = {
  headers: map[string]string(name='headers'),
  body: CompletePhysicalConnectionLOAResponseBody(name='body'),
}

async function completePhysicalConnectionLOA(request: CompletePhysicalConnectionLOARequest): CompletePhysicalConnectionLOAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CompletePhysicalConnectionLOA', 'POST', '/', 'json', false, 'json', request);
}

model ConfirmPhysicalConnectionRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e0****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', example='pc-119mf****', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ConfirmPhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId', example='API-20365164-5b0d-460a-83c2-2189972b****'),
}

model ConfirmPhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: ConfirmPhysicalConnectionResponseBody(name='body'),
}

async function confirmPhysicalConnection(request: ConfirmPhysicalConnectionRequest): ConfirmPhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfirmPhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model ConnectRouterInterfaceRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerInterfaceId: string(name='RouterInterfaceId', example='ri-2zeo3xzyf38r4urzd****', position='Query'),
}

model ConnectRouterInterfaceResponseBody = {
  requestId?: string(name='RequestId', example='DE77A7F3-3B74-41C0-A5BC-CAFD188C28B6'),
}

model ConnectRouterInterfaceResponse = {
  headers: map[string]string(name='headers'),
  body: ConnectRouterInterfaceResponseBody(name='body'),
}

async function connectRouterInterface(request: ConnectRouterInterfaceRequest): ConnectRouterInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConnectRouterInterface', 'POST', '/', 'json', false, 'json', request);
}

model ConvertBandwidthPackageRequest {
  bandwidthPackageId: string(name='BandwidthPackageId', example='bwp-bp1xea10o8qxw4f****', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ConvertBandwidthPackageResponseBody = {
  convertInstanceId?: string(name='ConvertInstanceId', example='bwp-s6lmotmkkf567b****'),
  requestId?: string(name='RequestId', example='455AC20C-7061-446A-BDBD-B3BEE0856304'),
}

model ConvertBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  body: ConvertBandwidthPackageResponseBody(name='body'),
}

async function convertBandwidthPackage(request: ConvertBandwidthPackageRequest): ConvertBandwidthPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConvertBandwidthPackage', 'POST', '/', 'json', false, 'json', request);
}

model CopyNetworkAclEntriesRequest {
  clientToken?: string(name='ClientToken', example='123', position='Query'),
  networkAclId: string(name='NetworkAclId', example='nacl-a2do9e413e0spxxxxxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sourceNetworkAclId: string(name='SourceNetworkAclId', example='nacl-ghuo9ehg3e0spxxxxxxxx', position='Query'),
}

model CopyNetworkAclEntriesResponseBody = {
  requestId?: string(name='RequestId', example='6608E72F-F276-440F-ABEF-419971CEC4D1'),
}

model CopyNetworkAclEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: CopyNetworkAclEntriesResponseBody(name='body'),
}

async function copyNetworkAclEntries(request: CopyNetworkAclEntriesRequest): CopyNetworkAclEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CopyNetworkAclEntries', 'POST', '/', 'json', false, 'json', request);
}

model CreateBgpGroupRequest {
  authKey?: string(name='AuthKey', example='!PWZ2****', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', example='BGP', position='Query'),
  ipVersion?: string(name='IpVersion', example='IPv4', position='Query'),
  isFakeAsn?: boolean(name='IsFakeAsn', example='true', position='Query'),
  localAsn?: long(name='LocalAsn', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerAsn: long(name='PeerAsn', example='1****', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeQuota?: int32(name='RouteQuota', position='Query'),
  routerId: string(name='RouterId', example='vbr-bp1ctxy813985gkuk****', position='Query'),
}

model CreateBgpGroupResponseBody = {
  bgpGroupId?: string(name='BgpGroupId', example='bgpg-bp1k25cyp26cllath****'),
  requestId?: string(name='RequestId', example='C1221A1F-2ACD-4592-8F27-474E02883159'),
}

model CreateBgpGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBgpGroupResponseBody(name='body'),
}

async function createBgpGroup(request: CreateBgpGroupRequest): CreateBgpGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBgpGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateBgpPeerRequest {
  bfdMultiHop?: int32(name='BfdMultiHop', example='3', position='Query'),
  bgpGroupId: string(name='BgpGroupId', example='bgpg-wz9f62v4fbg****', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  enableBfd?: boolean(name='EnableBfd', example='true', position='Query'),
  ipVersion?: string(name='IpVersion', example='ipv4', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerIpAddress?: string(name='PeerIpAddress', example='116.62.XX.XX', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateBgpPeerResponseBody = {
  bgpPeerId?: string(name='BgpPeerId', example='bgp-m5eoyp2mwegk8ce9v****'),
  requestId?: string(name='RequestId', example='D4B7649A-61BB-4C64-A586-1DFF1EDA6A42'),
}

model CreateBgpPeerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBgpPeerResponseBody(name='body'),
}

async function createBgpPeer(request: CreateBgpPeerRequest): CreateBgpPeerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBgpPeer', 'POST', '/', 'json', false, 'json', request);
}

model CreateCommonBandwidthPackageRequest {
  bandwidth: int32(name='Bandwidth', example='1000', position='Query'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  description?: string(name='Description', example='abc', position='Query'),
  ISP?: string(name='ISP', example='BGP', position='Query'),
  internetChargeType?: string(name='InternetChargeType', position='Query'),
  name?: string(name='Name', example='test123', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  ratio?: int32(name='Ratio', example='20', minimum=0, maximum=100, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazdjdhd****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityProtectionTypes?: [ string ](name='SecurityProtectionTypes', example='AntiDDoS_Enhanced', position='Query'),
  zone?: string(name='Zone', example='cn-hangzhou-a', position='Query'),
}

model CreateCommonBandwidthPackageResponseBody = {
  bandwidthPackageId?: string(name='BandwidthPackageId', example='cbwp-bp1vevu8h3ieh****'),
  requestId?: string(name='RequestId', example='FF39F653-033E-4CD9-9EDF-3CCA5A71FBC3'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazdjdhd****'),
}

model CreateCommonBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCommonBandwidthPackageResponseBody(name='body'),
}

async function createCommonBandwidthPackage(request: CreateCommonBandwidthPackageRequest): CreateCommonBandwidthPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCommonBandwidthPackage', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustomerGatewayRequest {
  asn?: string(name='Asn', example='65530', position='Query'),
  authKey?: string(name='AuthKey', example='AuthKey****', position='Query'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44****', position='Query'),
  description?: string(name='Description', example='desctest', position='Query'),
  ipAddress: string(name='IpAddress', example='101.12.XX.XX', position='Query'),
  name?: string(name='Name', example='nametest', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Query'),
}

model CreateCustomerGatewayResponseBody = {
  createTime?: long(name='CreateTime', example='1493363486000'),
  customerGatewayId?: string(name='CustomerGatewayId', example='cgw-bp1jrawp82av6bws9****'),
  description?: string(name='Description', example='desctest'),
  ipAddress?: string(name='IpAddress', example='101.12.XX.XX'),
  name?: string(name='Name', example='nametest'),
  requestId?: string(name='RequestId', example='D32B3C26-6C6C-4988-93E9-D2A6444CE6AE'),
}

model CreateCustomerGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCustomerGatewayResponseBody(name='body'),
}

async function createCustomerGateway(request: CreateCustomerGatewayRequest): CreateCustomerGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomerGateway', 'POST', '/', 'json', false, 'json', request);
}

model CreateDefaultVSwitchRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  ipv6CidrBlock?: int32(name='Ipv6CidrBlock', example='12', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  zoneId: string(name='ZoneId', example='cn-hangzhou-b', position='Query'),
}

model CreateDefaultVSwitchResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1a4b5qhmxftjimq****'),
}

model CreateDefaultVSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDefaultVSwitchResponseBody(name='body'),
}

async function createDefaultVSwitch(request: CreateDefaultVSwitchRequest): CreateDefaultVSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDefaultVSwitch', 'POST', '/', 'json', false, 'json', request);
}

model CreateDefaultVpcRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  enableIpv6?: boolean(name='EnableIpv6', example='false', position='Query'),
  ipv6CidrBlock?: string(name='Ipv6CidrBlock', example='2408:XXXX:346:b600::/56', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmystnjq4****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateDefaultVpcResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  routeTableId?: string(name='RouteTableId', example='vtb-bp1q1uirugzb1x32m****'),
  vRouterId?: string(name='VRouterId', example='vrt-bp1lhl0taikrteen8****'),
  vpcId?: string(name='VpcId', example='vpc-bp15zckdt37pq72zv****'),
}

model CreateDefaultVpcResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDefaultVpcResponseBody(name='body'),
}

async function createDefaultVpc(request: CreateDefaultVpcRequest): CreateDefaultVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDefaultVpc', 'POST', '/', 'json', false, 'json', request);
}

model CreateDhcpOptionsSetRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  dhcpOptionsSetDescription?: string(name='DhcpOptionsSetDescription', example='test', position='Query'),
  dhcpOptionsSetName?: string(name='DhcpOptionsSetName', example='test', position='Query'),
  domainName?: string(name='DomainName', example='example.com', position='Query'),
  domainNameServers?: string(name='DomainNameServers', example='192.xx.xx.123', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ipv6LeaseTime?: string(name='Ipv6LeaseTime', position='Query'),
  leaseTime?: string(name='LeaseTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateDhcpOptionsSetResponseBody = {
  dhcpOptionsSetId?: string(name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****'),
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model CreateDhcpOptionsSetResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDhcpOptionsSetResponseBody(name='body'),
}

async function createDhcpOptionsSet(request: CreateDhcpOptionsSetRequest): CreateDhcpOptionsSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDhcpOptionsSet', 'POST', '/', 'json', false, 'json', request);
}

model CreateExpressCloudConnectionRequest {
  bandwidth: int32(name='Bandwidth', example='2', position='Query'),
  contactMail?: string(name='ContactMail', example='XX@example.com', position='Query'),
  contactTel?: string(name='ContactTel', example='132*********', position='Query'),
  description?: string(name='Description', position='Query'),
  IDCardNo?: string(name='IDCardNo', example='32*****************', position='Query'),
  idcSP: string(name='IdcSP', example='CU', position='Query'),
  name?: string(name='Name', example='doctest', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerCity?: string(name='PeerCity', position='Query'),
  peerLocation: string(name='PeerLocation', position='Query'),
  portType?: string(name='PortType', example='100Base-T', position='Query'),
  redundantEccId?: string(name='RedundantEccId', example='ecc-d****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateExpressCloudConnectionResponseBody = {
  eccId?: string(name='EccId', example='ecc-jg************'),
  requestId?: string(name='RequestId', example='C004F022-1CC2-4958-9937-675513A2CD7E'),
}

model CreateExpressCloudConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateExpressCloudConnectionResponseBody(name='body'),
}

async function createExpressCloudConnection(request: CreateExpressCloudConnectionRequest): CreateExpressCloudConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateExpressCloudConnection', 'POST', '/', 'json', false, 'json', request);
}

model CreateFlowLogRequest {
  aggregationInterval?: int32(name='AggregationInterval', example='10', position='Query'),
  description?: string(name='Description', example='This is my Flowlog.', position='Query'),
  flowLogName?: string(name='FlowLogName', example='myFlowlog', position='Query'),
  logStoreName: string(name='LogStoreName', example='FlowLogStore', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  projectName: string(name='ProjectName', example='FlowLogProject', position='Query'),
  regionId: string(name='RegionId', example='cn-qingdao', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceId: string(name='ResourceId', example='eni-askldfas****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', example='NetworkInterface', position='Query'),
  trafficPath?: [ string ](name='TrafficPath', position='Query'),
  trafficType: string(name='TrafficType', example='All', position='Query'),
}

model CreateFlowLogResponseBody = {
  flowLogId?: string(name='FlowLogId', example='fl-m5e8vhz2t21sel1nq****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B457'),
  resourceGroupId?: string(name='ResourceGroupId'),
  success?: string(name='Success', example='true'),
}

model CreateFlowLogResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFlowLogResponseBody(name='body'),
}

async function createFlowLog(request: CreateFlowLogRequest): CreateFlowLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFlowLog', 'POST', '/', 'json', false, 'json', request);
}

model CreateForwardEntryRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe6****', position='Query'),
  externalIp: string(name='ExternalIp', example='116.28.XX.XX', position='Query'),
  externalPort: string(name='ExternalPort', example='8080', position='Query'),
  forwardEntryName?: string(name='ForwardEntryName', example='ForwardEntry-1', position='Query'),
  forwardTableId: string(name='ForwardTableId', example='ftb-bp1mbjubq34hlcqpa****', position='Query'),
  internalIp: string(name='InternalIp', example='192.168.XX.XX', position='Query'),
  internalPort: string(name='InternalPort', example='80', position='Query'),
  ipProtocol: string(name='IpProtocol', example='TCP', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  portBreak?: boolean(name='PortBreak', example='false', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateForwardEntryResponseBody = {
  forwardEntryId?: string(name='ForwardEntryId', example='fwd-119smw5tkasdf****'),
  requestId?: string(name='RequestId', example='A4AEE536-A97A-40EB-9EBE-53A6948A6928'),
}

model CreateForwardEntryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateForwardEntryResponseBody(name='body'),
}

async function createForwardEntry(request: CreateForwardEntryRequest): CreateForwardEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateForwardEntry', 'POST', '/', 'json', false, 'json', request);
}

model CreateFullNatEntryRequest {
  accessIp: string(name='AccessIp', description='需要进行转发的后端IP', example='192.168.XX.XX', position='Query'),
  accessPort: string(name='AccessPort', description='需要进行端口转发的内部端口，取值范围：1~65535。', example='80', position='Query'),
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  fullNatEntryDescription?: string(name='FullNatEntryDescription', example='abc', position='Query'),
  fullNatEntryName?: string(name='FullNatEntryName', description='FULLNAT规则的名称。 长度为2~128个字符，必须以大小写字母或中文开头，但不能以http://或https://开头。', example='test', position='Query'),
  fullNatTableId: string(name='FullNatTableId', description='FullNAT条目所属的FullNAT列表的ID。', example='fulltb-gw88z7hhlv43rmb26****', position='Query'),
  ipProtocol: string(name='IpProtocol', description='协议类型，取值： • TCP：转发TCP协议的报文。 • UDP：转发UDP协议的报文。', example='TCP', position='Query'),
  natIp: string(name='NatIp', description='提供入方向访问的IP地址，该公网IP需要是当前VpcNat下的NatIP', example='192.168.XX.XX', position='Query'),
  natIpPort: string(name='NatIpPort', description='需要进行端口转发的外部端口，取值范围：1~65535。', example='80', position='Query'),
  networkInterfaceId: string(name='NetworkInterfaceId', example='eni-gw8g131ef2dnbu3k****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='eu-central-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateFullNatEntryResponseBody = {
  fullNatEntryId?: string(name='FullNatEntryId', example='fullnat-gw8fz23jezpbblf1j****'),
  requestId?: string(name='RequestId', description='Id of the request', example='2315DEB7-5E92-423A-91F7-4C1EC9AD97C3'),
}

model CreateFullNatEntryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFullNatEntryResponseBody(name='body'),
}

async function createFullNatEntry(request: CreateFullNatEntryRequest): CreateFullNatEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFullNatEntry', 'POST', '/', 'json', false, 'json', request);
}

model CreateGlobalAccelerationInstanceRequest {
  bandwidth: string(name='Bandwidth', example='10', position='Query'),
  bandwidthType?: string(name='BandwidthType', example='Exclusive', position='Query'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  description?: string(name='Description', example='My GA', position='Query'),
  name?: string(name='Name', example='GA-1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  serviceLocation: string(name='ServiceLocation', example='china-mainland', position='Query'),
}

model CreateGlobalAccelerationInstanceResponseBody = {
  globalAccelerationInstanceId?: string(name='GlobalAccelerationInstanceId', example='ga-bp1fi6sq7npnicmjj****'),
  ipAddress?: string(name='IpAddress', example='12.xx.xx.78'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model CreateGlobalAccelerationInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGlobalAccelerationInstanceResponseBody(name='body'),
}

async function createGlobalAccelerationInstance(request: CreateGlobalAccelerationInstanceRequest): CreateGlobalAccelerationInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGlobalAccelerationInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateHaVipRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  description?: string(name='Description', example='This is my HaVip.', position='Query'),
  ipAddress?: string(name='IpAddress', example='192.xx.xx.10', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchId: string(name='VSwitchId', example='vsw-asdfjlnaue4g****', position='Query'),
}

model CreateHaVipResponseBody = {
  haVipId?: string(name='HaVipId', example='havip-2zeo05qre24nhrqpy****'),
  ipAddress?: string(name='IpAddress', example='192.xx.xx.xx'),
  requestId?: string(name='RequestId', example='C44F62BE-9CE7-4277-B117-69243F3988BF'),
}

model CreateHaVipResponse = {
  headers: map[string]string(name='headers'),
  body: CreateHaVipResponseBody(name='body'),
}

async function createHaVip(request: CreateHaVipRequest): CreateHaVipResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHaVip', 'POST', '/', 'json', false, 'json', request);
}

model CreateIPv6TranslatorRequest {
  autoPay?: boolean(name='AutoPay', example='false', position='Query'),
  bandwidth?: int32(name='Bandwidth', example='10', position='Query'),
  clientToken?: string(name='ClientToken', example='sha111', position='Query'),
  duration?: int32(name='Duration', example='1', position='Query'),
  name?: string(name='Name', example='ipv6_1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  payType?: string(name='PayType', example='PREPAY', position='Query'),
  pricingCycle?: string(name='PricingCycle', example='Month', position='Query'),
  regionId: string(name='RegionId', example='cm-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  spec?: string(name='Spec', example='small', position='Query'),
}

model CreateIPv6TranslatorResponseBody = {
  ipv6TranslatorId?: string(name='Ipv6TranslatorId', example='ipv6trans-bp1i8ahxut1xxxx'),
  name?: string(name='Name', example='test_nat64gw'),
  orderId?: long(name='OrderId', example='202303300940739'),
  requestId?: string(name='RequestId', example='1AE05898-06E5-4782-xxxxx'),
  spec?: string(name='Spec', example='small'),
}

model CreateIPv6TranslatorResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIPv6TranslatorResponseBody(name='body'),
}

async function createIPv6Translator(request: CreateIPv6TranslatorRequest): CreateIPv6TranslatorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIPv6Translator', 'POST', '/', 'json', false, 'json', request);
}

model CreateIPv6TranslatorAclListRequest {
  aclName: string(name='AclName', example='test', position='Query'),
  clientToken?: string(name='ClientToken', example='sha123456', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateIPv6TranslatorAclListResponseBody = {
  aclId?: string(name='AclId', example='ipv6transacl-bp1de2xxxx'),
  requestId?: string(name='RequestId', example='8B2F5262-6B57-43F2-xxxxx'),
}

model CreateIPv6TranslatorAclListResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIPv6TranslatorAclListResponseBody(name='body'),
}

async function createIPv6TranslatorAclList(request: CreateIPv6TranslatorAclListRequest): CreateIPv6TranslatorAclListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIPv6TranslatorAclList', 'POST', '/', 'json', false, 'json', request);
}

model CreateIPv6TranslatorEntryRequest {
  aclId?: string(name='AclId', example='ipv6transacl-bp1g8bhrdexnrxxxx', position='Query'),
  aclStatus?: string(name='AclStatus', example='on', position='Query'),
  aclType?: string(name='AclType', example='white', position='Query'),
  allocateIpv6Port: int32(name='AllocateIpv6Port', example='80', position='Query'),
  backendIpv4Addr: string(name='BackendIpv4Addr', example='46.22.xx.xx', position='Query'),
  backendIpv4Port: int32(name='BackendIpv4Port', example='80', position='Query'),
  entryBandwidth?: int32(name='EntryBandwidth', example='2', position='Query'),
  entryDescription?: string(name='EntryDescription', example='description', position='Query'),
  entryName?: string(name='EntryName', example='name1', position='Query'),
  ipv6TranslatorId: string(name='Ipv6TranslatorId', example='ipv6trans-bp1858ys57xxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transProtocol: string(name='TransProtocol', example='tcp', position='Query'),
}

model CreateIPv6TranslatorEntryResponseBody = {
  ipv6TranslatorEntryId?: string(name='Ipv6TranslatorEntryId', example='ipv6transentry-xxxxxxxx'),
  requestId?: string(name='RequestId', example='DCE5D25-FFC9-492A-8371-12A4E0EE2E05'),
}

model CreateIPv6TranslatorEntryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIPv6TranslatorEntryResponseBody(name='body'),
}

async function createIPv6TranslatorEntry(request: CreateIPv6TranslatorEntryRequest): CreateIPv6TranslatorEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIPv6TranslatorEntry', 'POST', '/', 'json', false, 'json', request);
}

model CreateIpsecServerRequest {
  clientIpPool: string(name='ClientIpPool', example='10.0.0.0/24', position='Query'),
  clientToken?: string(name='ClientToken', example='d7d24a21-f4ba-4454-9173-b38****', position='Query'),
  dryRun?: string(name='DryRun', example='false', position='Query'),
  effectImmediately?: boolean(name='EffectImmediately', example='true', position='Query'),
  ikeConfig?: string(name='IkeConfig', example='{"IkeVersion":"ikev2","IkeMode":"main","IkeEncAlg":"aes","IkeAuthAlg":"sha1","IkePfs":"group2","IkeLifetime":86400}', position='Query'),
  ipSecServerName?: string(name='IpSecServerName', example='test', maxLength=100, position='Query'),
  ipsecConfig?: string(name='IpsecConfig', example='{"IpsecEncAlg":"aes","IpsecAuthAlg":"sha1","IpsecPfs":"group2","IpsecLifetime":86400}', position='Query'),
  localSubnet: string(name='LocalSubnet', example='192.168.0.0/24', position='Query'),
  psk?: string(name='Psk', example='Cfd123****', position='Query'),
  pskEnabled?: boolean(name='PskEnabled', example='true', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', example='vpn-bp17lofy9fd0dnvzv****', position='Query'),
}

model CreateIpsecServerResponseBody = {
  creationTime?: string(name='CreationTime', example='2021-02-22T03:24:28Z'),
  ipsecServerId?: string(name='IpsecServerId', example='iss-bp1jougp8cfsbo8y9****'),
  ipsecServerName?: string(name='IpsecServerName', example='test'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='690A967E-D4CD-4B69-8C78-94FE828BA10B'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp17lofy9fd0dnvzv****'),
}

model CreateIpsecServerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIpsecServerResponseBody(name='body'),
}

async function createIpsecServer(request: CreateIpsecServerRequest): CreateIpsecServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIpsecServer', 'POST', '/', 'json', false, 'json', request);
}

model CreateIpv4GatewayRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ipv4GatewayDescription?: string(name='Ipv4GatewayDescription', example='test', position='Query'),
  ipv4GatewayName?: string(name='Ipv4GatewayName', example='ipv4', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='ap-southeast-6', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId: string(name='VpcId', example='vpc-5tss06uvoyps5xoya****', position='Query'),
}

model CreateIpv4GatewayResponseBody = {
  ipv4GatewayId?: string(name='Ipv4GatewayId', example='ipv4gw-5tsnc6s4ogsedtp3k****'),
  requestId?: string(name='RequestId', example='F282742B-1BBB-5F63-A3AF-E92EC575A1A6'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model CreateIpv4GatewayResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIpv4GatewayResponseBody(name='body'),
}

async function createIpv4Gateway(request: CreateIpv4GatewayRequest): CreateIpv4GatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIpv4Gateway', 'POST', '/', 'json', false, 'json', request);
}

model CreateIpv6EgressOnlyRuleRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  description?: string(name='Description', example='ruledescription', position='Query'),
  instanceId: string(name='InstanceId', example='ipv6-hp3nxjkfxn5pnhgl5****', position='Query'),
  instanceType?: string(name='InstanceType', example='Ipv6Address', position='Query'),
  ipv6GatewayId: string(name='Ipv6GatewayId', example='ipv6gw-hp3c2paq0ywauasza****', position='Query'),
  name?: string(name='Name', example='rulename', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-huhehaote', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateIpv6EgressOnlyRuleResponseBody = {
  ipv6EgressRuleId?: string(name='Ipv6EgressRuleId', example='ipv6py-hp3w98rmlbqp01245****'),
  requestId?: string(name='RequestId', example='9DFEDBEE-E5AB-49E8-A2DC-CC114C67AF75'),
}

model CreateIpv6EgressOnlyRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIpv6EgressOnlyRuleResponseBody(name='body'),
}

async function createIpv6EgressOnlyRule(request: CreateIpv6EgressOnlyRuleRequest): CreateIpv6EgressOnlyRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIpv6EgressOnlyRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateIpv6GatewayRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  description?: string(name='Description', example='ipv6gatewayforVPC1', position='Query'),
  name?: string(name='Name', example='ipv6GW', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-huhehaote', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId: string(name='VpcId', example='vpc-123sedrfswd23****', position='Query'),
}

model CreateIpv6GatewayResponseBody = {
  ipv6GatewayId?: string(name='Ipv6GatewayId', example='ipv6gw-hp3y0l3ln89j8cdvf****'),
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model CreateIpv6GatewayResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIpv6GatewayResponseBody(name='body'),
}

async function createIpv6Gateway(request: CreateIpv6GatewayRequest): CreateIpv6GatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIpv6Gateway', 'POST', '/', 'json', false, 'json', request);
}

model CreateNatGatewayRequest {
  autoPay?: boolean(name='AutoPay', position='Query'),
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  description?: string(name='Description', example='testnat', position='Query'),
  duration?: string(name='Duration', position='Query'),
  eipBindMode?: string(name='EipBindMode', description='NAT：NAT模式，支持SNAT/访问DANT，最多支持绑定50个EIP，支持ingress routing;
MULTI_BINDED：多EIP网卡可见模式。', example='MULTI_BINDED', position='Query'),
  icmpReplyEnabled?: boolean(name='IcmpReplyEnabled', example='false', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', example='PostPaid', position='Query'),
  internetChargeType?: string(name='InternetChargeType', example='PayByLcu', position='Query'),
  name?: string(name='Name', example='fortest', position='Query'),
  natType?: string(name='NatType', example='Enhanced', position='Query'),
  networkType?: string(name='NetworkType', example='internet', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pricingCycle?: string(name='PricingCycle', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityProtectionEnabled?: boolean(name='SecurityProtectionEnabled', example='false', position='Query'),
  spec?: string(name='Spec', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1e3se98n9fq8hle****', position='Query'),
  vpcId: string(name='VpcId', example='vpc-bp1di7uewzmtvfuq8****', position='Query'),
}

model CreateNatGatewayResponseBody = {
  forwardTableIds?: {
    forwardTableId?: [ string ](name='ForwardTableId')
  }(name='ForwardTableIds'),
  fullNatTableIds?: {
    fullNatTableId?: [ string ](name='FullNatTableId')
  }(name='FullNatTableIds'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-112za33e4****'),
  requestId?: string(name='RequestId', example='2315DEB7-5E92-423A-91F7-4C1EC9AD97C3'),
  snatTableIds?: {
    snatTableId?: [ string ](name='SnatTableId')
  }(name='SnatTableIds'),
}

model CreateNatGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNatGatewayResponseBody(name='body'),
}

async function createNatGateway(request: CreateNatGatewayRequest): CreateNatGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNatGateway', 'POST', '/', 'json', false, 'json', request);
}

model CreateNatIpRequest {
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  natGatewayId: string(name='NatGatewayId', example='ngw-gw8v16wgvtq26vh59****', position='Query'),
  natIp?: string(name='NatIp', example='192.168.0.34', position='Query'),
  natIpCidr?: string(name='NatIpCidr', example='192.168.0.0/24', position='Query'),
  natIpCidrId?: string(name='NatIpCidrId', example='vpcnatip-gw8y7q3cpk3fggs87****', position='Query'),
  natIpDescription?: string(name='NatIpDescription', example='test', position='Query'),
  natIpName?: string(name='NatIpName', example='newnatip', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='eu-central-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateNatIpResponseBody = {
  natIp?: string(name='NatIp', example='192.168.0.34'),
  natIpId?: string(name='NatIpId', example='vpcnatip-gw8y7q3cpk3fggs8****'),
  requestId?: string(name='RequestId', example='E9AD97A0-5338-43F8-8A80-5E274CCBA11B'),
}

model CreateNatIpResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNatIpResponseBody(name='body'),
}

async function createNatIp(request: CreateNatIpRequest): CreateNatIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNatIp', 'POST', '/', 'json', false, 'json', request);
}

model CreateNatIpCidrRequest {
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  natGatewayId: string(name='NatGatewayId', example='ngw-gw8v16wgvtq26vh59****', position='Query'),
  natIpCidr: string(name='NatIpCidr', example='172.16.0.0/24', position='Query'),
  natIpCidrDescription?: string(name='NatIpCidrDescription', example='mycidr', position='Query'),
  natIpCidrName?: string(name='NatIpCidrName', example='newcidr', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='eu-central-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateNatIpCidrResponseBody = {
  natIpCidrId?: string(name='NatIpCidrId', example='vpcnatcidr-gw8lhqtvdn4qnea****'),
  requestId?: string(name='RequestId', example='7021BEB1-210F-48A9-AB82-BE9A9110BB89'),
}

model CreateNatIpCidrResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNatIpCidrResponseBody(name='body'),
}

async function createNatIpCidr(request: CreateNatIpCidrRequest): CreateNatIpCidrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNatIpCidr', 'POST', '/', 'json', false, 'json', request);
}

model CreateNetworkAclRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  description?: string(name='Description', example='This is my NetworkAcl.', position='Query'),
  networkAclName?: string(name='NetworkAclName', example='acl-1', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId: string(name='VpcId', example='vpc-dsfd34356vdf****', position='Query'),
}

model CreateNetworkAclResponseBody = {
  networkAclAttribute?: {
    creationTime?: string(name='CreationTime', example='2021-12-25 11:33:27'),
    description?: string(name='Description', example='This is my NetworkAcl.'),
    egressAclEntries?: {
      egressAclEntry?: [ 
      {
        description?: string(name='Description', example='This is EgressAclEntries.'),
        destinationCidrIp?: string(name='DestinationCidrIp', example='10.0.0.0/24'),
        networkAclEntryId?: string(name='NetworkAclEntryId', example='nae-a2d447uw4tillxsdc****'),
        networkAclEntryName?: string(name='NetworkAclEntryName', example='acl-2'),
        policy?: string(name='Policy', example='accept'),
        port?: string(name='Port', example='-1/-1'),
        protocol?: string(name='Protocol', example='all'),
      }
    ](name='EgressAclEntry')
    }(name='EgressAclEntries'),
    ingressAclEntries?: {
      ingressAclEntry?: [ 
      {
        description?: string(name='Description', example='This is IngressAclEntries.'),
        networkAclEntryId?: string(name='NetworkAclEntryId', example='nae-a2dk86arlydmexscd****'),
        networkAclEntryName?: string(name='NetworkAclEntryName', example='acl-3'),
        policy?: string(name='Policy', example='accept'),
        port?: string(name='Port', example='-1/-1'),
        protocol?: string(name='Protocol', example='all'),
        sourceCidrIp?: string(name='SourceCidrIp', example='10.0.0.0/24'),
      }
    ](name='IngressAclEntry')
    }(name='IngressAclEntries'),
    networkAclId?: string(name='NetworkAclId', example='nacl-a2do9e413e0spdefr****'),
    networkAclName?: string(name='NetworkAclName', example='acl-1'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    resources?: {
      resource?: [ 
      {
        resourceId?: string(name='ResourceId', example='vsw-bp1de348lntdwgthy****'),
        resourceType?: string(name='ResourceType', example='VSwitch'),
        status?: string(name='Status', example='BINDED'),
      }
    ](name='Resource')
    }(name='Resources'),
    status?: string(name='Status', example='Modifying'),
    vpcId?: string(name='VpcId', example='vpc-a2d33rfpl72k5xsscd****'),
  }(name='NetworkAclAttribute'),
  networkAclId?: string(name='NetworkAclId', example='nacl-a2do9e413e0spzasx****'),
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model CreateNetworkAclResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNetworkAclResponseBody(name='body'),
}

async function createNetworkAcl(request: CreateNetworkAclRequest): CreateNetworkAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNetworkAcl', 'POST', '/', 'json', false, 'json', request);
}

model CreatePhysicalConnectionRequest {
  accessPointId: string(name='AccessPointId', example='ap-cn-beijing-ft-A', position='Query'),
  circuitCode?: string(name='CircuitCode', example='longtel001', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  description?: string(name='Description', example='description', position='Query'),
  lineOperator: string(name='LineOperator', example='CT', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerLocation?: string(name='PeerLocation', position='Query'),
  portType?: string(name='PortType', example='1000Base-T', position='Query'),
  redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId', example='pc-119mfjzm****', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  type?: string(name='Type', example='VPC', position='Query'),
  bandwidth?: int32(name='bandwidth', example='10', position='Query'),
}

model CreatePhysicalConnectionResponseBody = {
  physicalConnectionId?: string(name='PhysicalConnectionId', example='pc-bp1ciz7ekd2grn1as****'),
  requestId?: string(name='RequestId', example='8A6A5EC5-6F6C-4906-9689-56ACE58A13E0'),
}

model CreatePhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePhysicalConnectionResponseBody(name='body'),
}

async function createPhysicalConnection(request: CreatePhysicalConnectionRequest): CreatePhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model CreatePhysicalConnectionOccupancyOrderRequest {
  autoPay?: boolean(name='AutoPay', example='false', position='Query'),
  clientToken?: string(name='ClientToken', example='CBCE910E-D396-4944', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', example='PrePaid', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', example='1', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', example='pc-bp1hp0wr072f6****', position='Query'),
  pricingCycle?: string(name='PricingCycle', example='Month', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreatePhysicalConnectionOccupancyOrderResponseBody = {
  data?: {
    orderId?: string(name='OrderId', example='501870558950179'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='9B9300FE-11E2-4E3B-949C-BED3B44DD26D'),
}

model CreatePhysicalConnectionOccupancyOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePhysicalConnectionOccupancyOrderResponseBody(name='body'),
}

async function createPhysicalConnectionOccupancyOrder(request: CreatePhysicalConnectionOccupancyOrderRequest): CreatePhysicalConnectionOccupancyOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePhysicalConnectionOccupancyOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreatePhysicalConnectionSetupOrderRequest {
  accessPointId: string(name='AccessPointId', example='ap-cn-beijing-ft-A', position='Query'),
  autoPay?: boolean(name='AutoPay', example='false', position='Query'),
  clientToken?: string(name='ClientToken', example='318BB676-0A2B-43A0-9AD8-F1D34E93750F', position='Query'),
  lineOperator: string(name='LineOperator', example='CT', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  portType?: string(name='PortType', example='100Base-T', position='Query'),
  redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId', example='pc-bp10zsv5ntp****', position='Query'),
  regionId: string(name='RegionId', example='cn-beijing', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreatePhysicalConnectionSetupOrderResponseBody = {
  orderId?: string(name='OrderId', example='202844382740728'),
  physicalConnectionId?: string(name='PhysicalConnectionId', example='pc-2zegmc02v7ss4****'),
  requestId?: string(name='RequestId', example='F7A6301A-64BA-41EC-8284-8F4838C15D1F'),
}

model CreatePhysicalConnectionSetupOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePhysicalConnectionSetupOrderResponseBody(name='body'),
}

async function createPhysicalConnectionSetupOrder(request: CreatePhysicalConnectionSetupOrderRequest): CreatePhysicalConnectionSetupOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePhysicalConnectionSetupOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreatePublicIpAddressPoolRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11****', position='Query'),
  description?: string(name='Description', example='AddressPoolDescription', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  isp?: string(name='Isp', example='BGP', position='Query'),
  name?: string(name='Name', example='AddressPoolName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-chengdu', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreatePublicIpAddressPoolResponseBody = {
  pulbicIpAddressPoolId?: string(name='PulbicIpAddressPoolId', example='pippool-6wetvn6fumkgycssx****'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model CreatePublicIpAddressPoolResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePublicIpAddressPoolResponseBody(name='body'),
}

async function createPublicIpAddressPool(request: CreatePublicIpAddressPoolRequest): CreatePublicIpAddressPoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePublicIpAddressPool', 'POST', '/', 'json', false, 'json', request);
}

model CreateRouteEntriesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeEntries: [ 
    {
      describption?: string(name='Describption', example='test'),
      dstCidrBlock: string(name='DstCidrBlock', example='192.168.0.0/24'),
      ipVersion?: int32(name='IpVersion', example='IPv4'),
      name?: string(name='Name', example='test'),
      nextHop: string(name='NextHop', example='i-j6c2fp57q8rr4jlu****'),
      nextHopType: string(name='NextHopType', example='RouterInterface'),
      routeTableId: string(name='RouteTableId', example='vtb-bp145q7glnuzd****'),
    }
  ](name='RouteEntries', position='Query'),
}

model CreateRouteEntriesResponseBody = {
  failedCount?: int32(name='FailedCount', example='2'),
  failedRouteEntries?: [ 
    {
      dstCidrBlock?: string(name='DstCidrBlock', example='192.168.0.0/24'),
      failedCode?: string(name='FailedCode', example='VPC_ROUTE_ENTRY_CIDR_BLOCK_DUPLICATE'),
      failedMessage?: string(name='FailedMessage', example='Specified CIDR block is already exists, entry.cidrBlock=xxxx'),
      nextHop?: string(name='NextHop', example='i-j6c2fp57q8rr4jlu****'),
    }
  ](name='FailedRouteEntries'),
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  routeEntryIds?: [ string ](name='RouteEntryIds'),
  successCount?: int32(name='SuccessCount', example='2'),
}

model CreateRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRouteEntriesResponseBody(name='body'),
}

async function createRouteEntries(request: CreateRouteEntriesRequest): CreateRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRouteEntries', 'POST', '/', 'json', false, 'json', request);
}

model CreateRouteEntryRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  description?: string(name='Description', example='test', position='Query'),
  destinationCidrBlock: string(name='DestinationCidrBlock', example='192.168.0.0/24', position='Query'),
  nextHopId?: string(name='NextHopId', example='i-j6c2fp57q8rr4jlu****', position='Query'),
  nextHopList?: [ 
    {
      nextHopId?: string(name='NextHopId', example='ri-2zeo3xzyf3cd8r4****'),
      nextHopType?: string(name='NextHopType', example='RouterInterface'),
      weight?: int32(name='Weight', example='10'),
    }
  ](name='NextHopList', position='Query'),
  nextHopType?: string(name='NextHopType', example='RouterInterface', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeEntryName?: string(name='RouteEntryName', example='test', position='Query'),
  routeTableId: string(name='RouteTableId', example='vtb-bp145q7glnuzd****', position='Query'),
}

model CreateRouteEntryResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  routeEntryId?: string(name='RouteEntryId', example='rte-sn6vjkioxte1gz83z****'),
}

model CreateRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRouteEntryResponseBody(name='body'),
}

async function createRouteEntry(request: CreateRouteEntryRequest): CreateRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model CreateRouteTableRequest {
  associateType?: string(name='AssociateType', example='VSwitch', position='Query'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04', position='Query'),
  description?: string(name='Description', example='abc', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-zhangjiakou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableName?: string(name='RouteTableName', example='myRouteTable', position='Query'),
  vpcId: string(name='VpcId', example='vpc-bp1qpo0kug3a20qqe****', position='Query'),
}

model CreateRouteTableResponseBody = {
  associateType?: string(name='AssociateType', example='VSwitch'),
  requestId?: string(name='RequestId', example='62172DD5-6BAC-45DF-8D44-E11ED28DCAC0'),
  routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzdvzu2****'),
}

model CreateRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRouteTableResponseBody(name='body'),
}

async function createRouteTable(request: CreateRouteTableRequest): CreateRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model CreateRouterInterfaceRequest {
  accessPointId?: string(name='AccessPointId', example='ap-cn-hangzhou-yh-ts-A', position='Query'),
  autoPay?: boolean(name='AutoPay', example='false', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', example='abcabc', position='Query'),
  fastLinkMode?: boolean(name='FastLinkMode', position='Query'),
  healthCheckSourceIp?: string(name='HealthCheckSourceIp', example='192.168.0.6', position='Query'),
  healthCheckTargetIp?: string(name='HealthCheckTargetIp', example='192.168.0.8', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', example='PrePaid', position='Query'),
  name?: string(name='Name', example='abc', position='Query'),
  oppositeAccessPointId?: string(name='OppositeAccessPointId', example='ap-cn-shanghai-nt-aligroup-C', position='Query'),
  oppositeInterfaceId?: string(name='OppositeInterfaceId', example='ri-2zeo3xzyf38r4urzd****', position='Query'),
  oppositeInterfaceOwnerId?: string(name='OppositeInterfaceOwnerId', example='253460731706911258', position='Query'),
  oppositeRegionId: string(name='OppositeRegionId', example='cn-shanghai', position='Query'),
  oppositeRouterId?: string(name='OppositeRouterId', example='vrt-bp1lhl0taikrteen8****', position='Query'),
  oppositeRouterType?: string(name='OppositeRouterType', example='VRouter', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', example='3', position='Query'),
  pricingCycle?: string(name='PricingCycle', example='Month', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  role: string(name='Role', example='InitiatingSide', position='Query'),
  routerId: string(name='RouterId', example='vbr-m5ebm6g9ptc9mly1c****', position='Query'),
  routerType: string(name='RouterType', example='VRouter', position='Query'),
  spec: string(name='Spec', example='Mini.2', position='Query'),
}

model CreateRouterInterfaceResponseBody = {
  orderId?: long(name='OrderId', example='202008594930117'),
  requestId?: string(name='RequestId', example='079874CD-AEC1-43E6-AC03-ADD96B6E4907'),
  routerInterfaceId?: string(name='RouterInterfaceId', example='ri-2ze7fbuohm****'),
}

model CreateRouterInterfaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRouterInterfaceResponseBody(name='body'),
}

async function createRouterInterface(request: CreateRouterInterfaceRequest): CreateRouterInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRouterInterface', 'POST', '/', 'json', false, 'json', request);
}

model CreateSnatEntryRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44****', position='Query'),
  eipAffinity?: int32(name='EipAffinity', example='1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  snatEntryName?: string(name='SnatEntryName', example='SnatEntry-1', position='Query'),
  snatIp: string(name='SnatIp', example='47.98.XX.XX', position='Query'),
  snatTableId: string(name='SnatTableId', example='stb-bp190wu8io1vgev****', position='Query'),
  sourceCIDR?: string(name='SourceCIDR', example='10.1.1.0/24', position='Query'),
  sourceVSwitchId?: string(name='SourceVSwitchId', example='vsw-bp1nhx2s9ui5o****', position='Query'),
}

model CreateSnatEntryResponseBody = {
  requestId?: string(name='RequestId', example='2315DEB7-5E92-423A-91F7-4C1EC9AD97C3'),
  snatEntryId?: string(name='SnatEntryId', example='snat-kmd6nv8fy****'),
}

model CreateSnatEntryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSnatEntryResponseBody(name='body'),
}

async function createSnatEntry(request: CreateSnatEntryRequest): CreateSnatEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSnatEntry', 'POST', '/', 'json', false, 'json', request);
}

model CreateSslVpnClientCertRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  name?: string(name='Name', example='SslVpnClientCert1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sslVpnServerId: string(name='SslVpnServerId', example='vss-m5et0q3iy1qex328w****', position='Query'),
}

model CreateSslVpnClientCertResponseBody = {
  name?: string(name='Name', example='SslVpnClientCert'),
  requestId?: string(name='RequestId', example='079874CD-AEC1-43E6-AC03-ADD96B6E4907'),
  sslVpnClientCertId?: string(name='SslVpnClientCertId', example='vsc-m5euof6s5jy8vs5kd****'),
}

model CreateSslVpnClientCertResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSslVpnClientCertResponseBody(name='body'),
}

async function createSslVpnClientCert(request: CreateSslVpnClientCertRequest): CreateSslVpnClientCertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSslVpnClientCert', 'POST', '/', 'json', false, 'json', request);
}

model CreateSslVpnServerRequest {
  cipher?: string(name='Cipher', example='AES-128-CBC', position='Query'),
  clientIpPool: string(name='ClientIpPool', example='192.168.1.0/24', position='Query'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  compress?: boolean(name='Compress', example='false', position='Query'),
  enableMultiFactorAuth?: boolean(name='EnableMultiFactorAuth', example='false', position='Query'),
  iDaaSInstanceId?: string(name='IDaaSInstanceId', example='idaas-cn-hangzhou-p****', position='Query'),
  iDaaSRegionId?: string(name='IDaaSRegionId', example='cn-hangzhou', position='Query'),
  localSubnet: string(name='LocalSubnet', example='10.0.0.0/8', position='Query'),
  name?: string(name='Name', example='sslvpnname', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  port?: int32(name='Port', example='1194', position='Query'),
  proto?: string(name='Proto', example='UDP', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', example='vpn-bp1hgim8by0kc9nga****', position='Query'),
}

model CreateSslVpnServerResponseBody = {
  name?: string(name='Name', example='test'),
  requestId?: string(name='RequestId', example='E98A9651-7098-40C7-8F85-C818D1EBBA85'),
  sslVpnServerId?: string(name='SslVpnServerId', example='vss-bp18q7hzj6largv4v****'),
}

model CreateSslVpnServerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSslVpnServerResponseBody(name='body'),
}

async function createSslVpnServer(request: CreateSslVpnServerRequest): CreateSslVpnServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSslVpnServer', 'POST', '/', 'json', false, 'json', request);
}

model CreateTrafficMirrorFilterRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  egressRules?: [ 
    {
      action?: string(name='Action', example='accept'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', example='10.0.0.0/24'),
      destinationPortRange?: string(name='DestinationPortRange', example='22/40'),
      priority?: int32(name='Priority', example='1'),
      protocol?: string(name='Protocol', example='TCP'),
      sourceCidrBlock?: string(name='SourceCidrBlock', example='10.0.0.0/24'),
      sourcePortRange?: string(name='SourcePortRange', example='22/40'),
    }
  ](name='EgressRules', position='Query'),
  ingressRules?: [ 
    {
      action?: string(name='Action', example='accept'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', example='10.0.0.0/24'),
      destinationPortRange?: string(name='DestinationPortRange', example='80/120'),
      priority?: int32(name='Priority', example='1'),
      protocol?: string(name='Protocol', example='TCP'),
      sourceCidrBlock?: string(name='SourceCidrBlock', example='10.0.0.0/24'),
      sourcePortRange?: string(name='SourcePortRange', example='80/120'),
    }
  ](name='IngressRules', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hongkong', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMirrorFilterDescription?: string(name='TrafficMirrorFilterDescription', example='this is a filter.', position='Query'),
  trafficMirrorFilterName?: string(name='TrafficMirrorFilterName', example='abc', position='Query'),
}

model CreateTrafficMirrorFilterResponseBody = {
  requestId?: string(name='RequestId', example='28DB147D-217B-43E8-9E94-A3F6837DDC8A'),
  resourceGroupId?: string(name='ResourceGroupId'),
  trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', example='tmf-j6cmls82xnc86vtpe****'),
}

model CreateTrafficMirrorFilterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTrafficMirrorFilterResponseBody(name='body'),
}

async function createTrafficMirrorFilter(request: CreateTrafficMirrorFilterRequest): CreateTrafficMirrorFilterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTrafficMirrorFilter', 'POST', '/', 'json', false, 'json', request);
}

model CreateTrafficMirrorFilterRulesRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  egressRules?: [ 
    {
      action?: string(name='Action', example='accept'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', example='10.0.0.0/24'),
      destinationPortRange?: string(name='DestinationPortRange', example='22/40'),
      priority?: int32(name='Priority', example='1'),
      protocol?: string(name='Protocol', example='TCP'),
      sourceCidrBlock?: string(name='SourceCidrBlock', example='10.0.0.0/24'),
      sourcePortRange?: string(name='SourcePortRange', example='22/40'),
    }
  ](name='EgressRules', position='Query'),
  ingressRules?: [ 
    {
      action?: string(name='Action', example='accept'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', example='10.0.0.0/24'),
      destinationPortRange?: string(name='DestinationPortRange', example='80/120'),
      priority?: int32(name='Priority', example='1'),
      protocol?: string(name='Protocol', example='TCP'),
      sourceCidrBlock?: string(name='SourceCidrBlock', example='10.0.0.0/24'),
      sourcePortRange?: string(name='SourcePortRange', example='80/120'),
    }
  ](name='IngressRules', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hongkong', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMirrorFilterId: string(name='TrafficMirrorFilterId', example='tmf-j6cmls82xnc86vtpe****', position='Query'),
}

model CreateTrafficMirrorFilterRulesResponseBody = {
  egressRules?: [ 
    {
      instanceId?: string(name='InstanceId', example='tmr-j6cok23ugp53eeib5****'),
    }
  ](name='EgressRules'),
  ingressRules?: [ 
    {
      instanceId?: string(name='InstanceId', example='tmr-j6c6rtallo51ouzv3****'),
    }
  ](name='IngressRules'),
  requestId?: string(name='RequestId', example='07F272E2-6AD5-433A-8207-A607C76F1676'),
}

model CreateTrafficMirrorFilterRulesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTrafficMirrorFilterRulesResponseBody(name='body'),
}

async function createTrafficMirrorFilterRules(request: CreateTrafficMirrorFilterRulesRequest): CreateTrafficMirrorFilterRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTrafficMirrorFilterRules', 'POST', '/', 'json', false, 'json', request);
}

model CreateTrafficMirrorSessionRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  enabled?: boolean(name='Enabled', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  packetLength?: int32(name='PacketLength', example='1500', position='Query'),
  priority: int32(name='Priority', example='1', minimum=1, maximum=32766, position='Query'),
  regionId: string(name='RegionId', example='cn-hongkong', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMirrorFilterId: string(name='TrafficMirrorFilterId', example='tmf-j6cmls82xnc86vtpe****', position='Query'),
  trafficMirrorSessionDescription?: string(name='TrafficMirrorSessionDescription', example='This is a trafficmirrorsession.', position='Query'),
  trafficMirrorSessionName?: string(name='TrafficMirrorSessionName', example='test', position='Query'),
  trafficMirrorSourceIds: [ string ](name='TrafficMirrorSourceIds', example='eni-j6c2fp57q8rr47rp****', maxLength=128, position='Query'),
  trafficMirrorTargetId: string(name='TrafficMirrorTargetId', example='eni-j6c8znm5l1yt4sox****', position='Query'),
  trafficMirrorTargetType: string(name='TrafficMirrorTargetType', example='NetworkInterface', position='Query'),
  virtualNetworkId?: int32(name='VirtualNetworkId', example='1', position='Query'),
}

model CreateTrafficMirrorSessionResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  resourceGroupId?: string(name='ResourceGroupId'),
  trafficMirrorSessionId?: string(name='TrafficMirrorSessionId', example='tms-j6ce5di4w7nvigfjz****'),
}

model CreateTrafficMirrorSessionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTrafficMirrorSessionResponseBody(name='body'),
}

async function createTrafficMirrorSession(request: CreateTrafficMirrorSessionRequest): CreateTrafficMirrorSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTrafficMirrorSession', 'POST', '/', 'json', false, 'json', request);
}

model CreateVSwitchRequest {
  cidrBlock: string(name='CidrBlock', example='172.16.0.0/24', position='Query'),
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  description?: string(name='Description', example='vSwitch', position='Query'),
  ipv6CidrBlock?: int32(name='Ipv6CidrBlock', example='12', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchName?: string(name='VSwitchName', example='vSwitch-1', position='Query'),
  vpcId: string(name='VpcId', example='vpc-257gqcdfvx6n****', position='Query'),
  vpcIpv6CidrBlock?: string(name='VpcIpv6CidrBlock', example='2408:XXXX:0:6a::/56', position='Query'),
  zoneId: string(name='ZoneId', example='cn-hangzhou-b', position='Query'),
}

model CreateVSwitchResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  vSwitchId?: string(name='VSwitchId', example='vsw-25navfgbue4g****'),
}

model CreateVSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVSwitchResponseBody(name='body'),
}

async function createVSwitch(request: CreateVSwitchRequest): CreateVSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVSwitch', 'POST', '/', 'json', false, 'json', request);
}

model CreateVbrHaRequest {
  clientToken?: string(name='ClientToken', example='CBCE910E-D396-4944-8****', position='Query'),
  description?: string(name='Description', example='VBRHa', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  name?: string(name='Name', example='VBRHa', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerVbrId: string(name='PeerVbrId', example='vbr-bp12mw1f8k3jgygk9****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vbrId: string(name='VbrId', example='vbr-bp1jcg5cmxjbl9xgc****', position='Query'),
}

model CreateVbrHaResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  vbrHaId?: string(name='VbrHaId', example='vbrha-sa1sxheuxtd98****'),
}

model CreateVbrHaResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVbrHaResponseBody(name='body'),
}

async function createVbrHa(request: CreateVbrHaRequest): CreateVbrHaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVbrHa', 'POST', '/', 'json', false, 'json', request);
}

model CreateVcoRouteEntryRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  description?: string(name='Description', example='desctest', position='Query'),
  nextHop: string(name='NextHop', example='vco-p0w2jpkhi2eeop6q6****', position='Query'),
  overlayMode?: string(name='OverlayMode', example='Ipsec', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  regionId: string(name='RegionId', example='ap-southeast-2', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeDest: string(name='RouteDest', example='192.168.10.0/24', position='Query'),
  vpnConnectionId: string(name='VpnConnectionId', example='vco-p0w2jpkhi2eeop6q6****', position='Query'),
  weight: int32(name='Weight', example='100', position='Query'),
}

model CreateVcoRouteEntryResponseBody = {
  createTime?: long(name='CreateTime', example='1658387202664'),
  description?: string(name='Description', example='desctest'),
  nextHop?: string(name='NextHop', example='vco-p0w2jpkhi2eeop6q6****'),
  overlayMode?: string(name='OverlayMode', example='Ipsec'),
  requestId?: string(name='RequestId', example='CFC4D13B-E680-3985-95B1-87AA155481DF'),
  routeDest?: string(name='RouteDest', example='192.168.10.0/24'),
  state?: string(name='State', example='published'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-p0w2jpkhi2eeop6q6****'),
  weight?: int32(name='Weight', example='100'),
}

model CreateVcoRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVcoRouteEntryResponseBody(name='body'),
}

async function createVcoRouteEntry(request: CreateVcoRouteEntryRequest): CreateVcoRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVcoRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model CreateVirtualBorderRouterRequest {
  bandwidth?: long(name='Bandwidth', example='100', position='Query'),
  circuitCode?: string(name='CircuitCode', example='longtel001', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', example='desc', position='Query'),
  enableIpv6?: boolean(name='EnableIpv6', example='true', position='Query'),
  localGatewayIp?: string(name='LocalGatewayIp', example='192.168.XX.XX', position='Query'),
  localIpv6GatewayIp?: string(name='LocalIpv6GatewayIp', example='2001:XXXX:3c4d:0015:0000:0000:0000:1a2b', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerGatewayIp?: string(name='PeerGatewayIp', example='116.62.XX.XX', position='Query'),
  peerIpv6GatewayIp?: string(name='PeerIpv6GatewayIp', example='2001:XXXX:4:4:4:4:4:4', position='Query'),
  peeringIpv6SubnetMask?: string(name='PeeringIpv6SubnetMask', example='2408:4004:cc:400::/56', position='Query'),
  peeringSubnetMask?: string(name='PeeringSubnetMask', example='255.255.255.252', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', example='pc-2zextbehcx****', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vbrOwnerId?: long(name='VbrOwnerId', example='168811111****', position='Query'),
  vlanId: int32(name='VlanId', example='0', position='Query'),
}

model CreateVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  vbrId?: string(name='VbrId', example='vbr-bp1jcg5cmxjbl9xgc****'),
}

model CreateVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVirtualBorderRouterResponseBody(name='body'),
}

async function createVirtualBorderRouter(request: CreateVirtualBorderRouterRequest): CreateVirtualBorderRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVirtualBorderRouter', 'POST', '/', 'json', false, 'json', request);
}

model CreateVirtualPhysicalConnectionRequest {
  description?: string(name='Description', description='Vpconn的description', example='desctest', position='Query'),
  dryRun?: boolean(name='DryRun', description='DryRun', example='false', position='Query'),
  name?: string(name='Name', description='Vpconn的name', example='nametest', position='Query'),
  orderMode: string(name='OrderMode', description='vpconn的支付方', example='PayByVirtualPhysicalConnectionOwner', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', description='Vpconn的主Pconn', example='pc-bp1ciz7ekd2grn1as****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  spec: string(name='Spec', description='vpconn规格', example='50M', position='Query'),
  token?: string(name='Token', description='幂等Token', example='CBCE910E-D396-4944-8****', position='Query'),
  vlanId: long(name='VlanId', description='vpconn的VlanID', example='4', position='Query'),
  vpconnAliUid: long(name='VpconnAliUid', description='Vpconn拥有者', example='1210123456123456', position='Query'),
}

model CreateVirtualPhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='CD14EA74-E9C3-59A9-942A-DFEC7E12818D'),
  virtualPhysicalConnection?: string(name='VirtualPhysicalConnection', description='Vpconn的实例ID', example='pc-bp1mrgfbtmc9brre7****'),
}

model CreateVirtualPhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVirtualPhysicalConnectionResponseBody(name='body'),
}

async function createVirtualPhysicalConnection(request: CreateVirtualPhysicalConnectionRequest): CreateVirtualPhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVirtualPhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model CreateVpcRequest {
  cidrBlock?: string(name='CidrBlock', example='172.16.0.0/12', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', example='This is my first Vpc', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  enableIpv6?: boolean(name='EnableIpv6', example='false', position='Query'),
  ipv6CidrBlock?: string(name='Ipv6CidrBlock', example='2408:XXXX:0:6a::/56', position='Query'),
  ipv6Isp?: string(name='Ipv6Isp', example='BGP', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph6aiy****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  userCidr?: string(name='UserCidr', example='192.168.0.0/12', position='Query'),
  vpcName?: string(name='VpcName', example='abc', position='Query'),
}

model CreateVpcResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph6aiy****'),
  routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzdv****'),
  vRouterId?: string(name='VRouterId', example='vrt-bp1lhl0taikrteen8****'),
  vpcId?: string(name='VpcId', example='vpc-bp15zckdt37pq72zv****'),
}

model CreateVpcResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVpcResponseBody(name='body'),
}

async function createVpc(request: CreateVpcRequest): CreateVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpc', 'POST', '/', 'json', false, 'json', request);
}

model CreateVpcGatewayEndpointRequest {
  clientToken?: string(name='ClientToken', description='幂等参数', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', description='是否只预检此次请求', example='false', position='Query'),
  endpointDescription?: string(name='EndpointDescription', description='网关节点描述', example='test', position='Query'),
  endpointName?: string(name='EndpointName', description='网关节点名称', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  policyDocument?: string(name='PolicyDocument', description='访问云服务的权限控制策略', example='{   "Version" : "1",   "Statement" : [ {     "Effect" : "Allow",     "Resource" : [ "*" ],     "Action" : [ "*" ],     "Principal" : [ "*" ]   } ] }', position='Query'),
  regionId: string(name='RegionId', description='地域', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  serviceName: string(name='ServiceName', description='网关节点服务的名称', example='com.aliyun.cn-hangzhou.oss', position='Query'),
  vpcId: string(name='VpcId', description='专有网络实例ID', example='vpc-bp1gsk7h12ew7oegk****', position='Query'),
}

model CreateVpcGatewayEndpointResponseBody = {
  creationTime?: string(name='CreationTime', example='2021-08-27T01:58:37Z'),
  endpointId?: string(name='EndpointId', example='vpce-bp1w1dmdqjpwul0v3****'),
  endpointName?: string(name='EndpointName', example='test'),
  requestId?: string(name='RequestId', description='Id of the request', example='62CFC815-E08A-5CF4-92D1-54273EC9E406'),
  serviceName?: string(name='ServiceName', example='com.aliyun.cn-hangzhou.oss'),
}

model CreateVpcGatewayEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVpcGatewayEndpointResponseBody(name='body'),
}

async function createVpcGatewayEndpoint(request: CreateVpcGatewayEndpointRequest): CreateVpcGatewayEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpcGatewayEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model CreateVpcPrefixListRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ipVersion?: string(name='IpVersion', example='ipv4', position='Query'),
  maxEntries?: int32(name='MaxEntries', example='50', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prefixListDescription?: string(name='PrefixListDescription', example='description', position='Query'),
  prefixListEntries?: [ 
    {
      cidr?: string(name='Cidr'),
      description?: string(name='Description'),
    }
  ](name='PrefixListEntries', position='Query'),
  prefixListName?: string(name='PrefixListName', example='name', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateVpcPrefixListResponseBody = {
  prefixListId?: string(name='PrefixListId', example='pl-0b700s2ee3***'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model CreateVpcPrefixListResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVpcPrefixListResponseBody(name='body'),
}

async function createVpcPrefixList(request: CreateVpcPrefixListRequest): CreateVpcPrefixListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpcPrefixList', 'POST', '/', 'json', false, 'json', request);
}

model CreateVpconnFromVbrRequest {
  dryRun?: boolean(name='DryRun', description='DryRun', example='false', position='Query'),
  orderMode?: string(name='OrderMode', description='vpconn的支付方', example='PayByVirtualPhysicalConnectionOwner', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  token?: string(name='Token', description='幂等Token', example='CBCE910E-D396-4944-8****', position='Query'),
  vbrId: string(name='VbrId', description='跨帐号的VBR', example='vbr-bp136flp1mf8mlq6r****', position='Query'),
}

model CreateVpconnFromVbrResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='5356F028-0F5C-56FC-8574-897D24379041'),
  virtualPhysicalConnection?: string(name='VirtualPhysicalConnection', description='Vpconn的实例ID', example='pc-bp1mrgfbtmc9brre7****'),
}

model CreateVpconnFromVbrResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVpconnFromVbrResponseBody(name='body'),
}

async function createVpconnFromVbr(request: CreateVpconnFromVbrRequest): CreateVpconnFromVbrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpconnFromVbr', 'POST', '/', 'json', false, 'json', request);
}

model CreateVpnAttachmentRequest {
  autoConfigRoute?: boolean(name='AutoConfigRoute', example='true', position='Query'),
  bgpConfig?: string(name='BgpConfig', example='{"EnableBgp":"true","LocalAsn":"45104","TunnelCidr":"169.254.11.0/30","LocalBgpIp":"169.254.11.1"}', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  customerGatewayId: string(name='CustomerGatewayId', example='cgw-p0w2jemrcj5u61un8****', position='Query'),
  effectImmediately?: boolean(name='EffectImmediately', description='立即生效', example='false', position='Query'),
  enableDpd?: boolean(name='EnableDpd', example='true', position='Query'),
  enableNatTraversal?: boolean(name='EnableNatTraversal', example='true', position='Query'),
  healthCheckConfig?: string(name='HealthCheckConfig', example='{"enable":"true","dip":"192.168.1.1","sip":"10.1.1.1","interval":"3","retry":"3","Policy": "revoke_route"}', position='Query'),
  ikeConfig?: string(name='IkeConfig', example='{"Psk":"1234****","IkeVersion":"ikev1","IkeMode":"main","IkeEncAlg":"aes","IkeAuthAlg":"sha1","IkePfs":"group2","IkeLifetime":86400,"LocalIdIPsec":"47.XX.XX.1","RemoteId":"47.XX.XX.2"}', position='Query'),
  ipsecConfig?: string(name='IpsecConfig', example='{"IpsecEncAlg":"aes","IpsecAuthAlg":"sha1","IpsecPfs":"group2","IpsecLifetime":86400}', position='Query'),
  localSubnet: string(name='LocalSubnet', description='路由模式为感兴趣流模式时，设置本端ip和对端ip', example='10.1.1.0/24,10.1.2.0/24', position='Query'),
  name?: string(name='Name', example='nametest', position='Query'),
  networkType?: string(name='NetworkType', description='public/private', example='public', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  regionId: string(name='RegionId', example='ap-southeast-2', position='Query'),
  remoteCaCert?: string(name='RemoteCaCert', example='c20ycDI1NnYxIENBIChURVNUIFN****', position='Query'),
  remoteSubnet: string(name='RemoteSubnet', example='10.1.3.0/24,10.1.4.0/24', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Query'),
}

model CreateVpnAttachmentResponseBody = {
  code?: string(name='Code', example='200'),
  createTime?: long(name='CreateTime', example='1658201810000'),
  message?: string(name='Message', example='successful'),
  name?: string(name='Name', example='nametest'),
  requestId?: string(name='RequestId', example='88187252-0E26-3C4D-9D1D-32A04454EBBA'),
  success?: boolean(name='Success', example='true'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-p0wb09rama8qwwgfn****'),
}

model CreateVpnAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVpnAttachmentResponseBody(name='body'),
}

async function createVpnAttachment(request: CreateVpnAttachmentRequest): CreateVpnAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpnAttachment', 'POST', '/', 'json', false, 'json', request);
}

model CreateVpnConnectionRequest {
  autoConfigRoute?: boolean(name='AutoConfigRoute', example='true', position='Query'),
  bgpConfig?: string(name='BgpConfig', example='{"EnableBgp":"true","LocalAsn":"45104","TunnelCidr":"169.254.11.0/30","LocalBgpIp":"169.254.11.1"}', position='Query'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  customerGatewayId: string(name='CustomerGatewayId', example='cgw-p0w2jemrcj5u61un8****', position='Query'),
  effectImmediately?: boolean(name='EffectImmediately', example='false', position='Query'),
  enableDpd?: boolean(name='EnableDpd', example='true', position='Query'),
  enableNatTraversal?: boolean(name='EnableNatTraversal', example='true', position='Query'),
  healthCheckConfig?: string(name='HealthCheckConfig', example='{"enable":"true","dip":"192.168.10.1","sip":"10.10.1.1","interval":"3","retry":"3"}', position='Query'),
  ikeConfig?: string(name='IkeConfig', example='{"Psk":"1234****","IkeVersion":"ikev1","IkeMode":"main","IkeEncAlg":"aes","IkeAuthAlg":"sha1","IkePfs":"group2","IkeLifetime":86400,"LocalIdIPsec":"47.XX.XX.1","RemoteId":"47.XX.XX.2"}', position='Query'),
  ipsecConfig?: string(name='IpsecConfig', example='{"IpsecEncAlg":"aes","IpsecAuthAlg":"sha1","IpsecPfs":"group2","IpsecLifetime":86400}', position='Query'),
  localSubnet: string(name='LocalSubnet', example='10.10.1.0/24,10.10.2.0/24', position='Query'),
  name?: string(name='Name', example='IPsec', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  remoteCaCertificate?: string(name='RemoteCaCertificate', example='c20ycDI1NnYxIENBIChURVNUIFN****', position='Query'),
  remoteSubnet: string(name='RemoteSubnet', example='10.10.3.0/24,10.10.4.0/24', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm****', position='Query'),
}

model CreateVpnConnectionResponseBody = {
  createTime?: long(name='CreateTime', example='1544666102000'),
  name?: string(name='Name', example='test'),
  requestId?: string(name='RequestId', example='082AD562-B8DB-4BB2-861F-DA1FCA01FD76'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-bp15oes1py4i6****'),
}

model CreateVpnConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVpnConnectionResponseBody(name='body'),
}

async function createVpnConnection(request: CreateVpnConnectionRequest): CreateVpnConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpnConnection', 'POST', '/', 'json', false, 'json', request);
}

model CreateVpnGatewayRequest {
  autoPay?: boolean(name='AutoPay', example='false', position='Query'),
  bandwidth: int32(name='Bandwidth', example='5', position='Query'),
  clientToken?: string(name='ClientToken', example='02fb3da4****', position='Query'),
  enableIpsec?: boolean(name='EnableIpsec', example='true', position='Query'),
  enableSsl?: boolean(name='EnableSsl', example='false', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', position='Query'),
  name?: string(name='Name', example='MYVPN', position='Query'),
  networkType?: string(name='NetworkType', example='public', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', example='1', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sslConnections?: int32(name='SslConnections', example='5', position='Query'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1j5miw2bae9s2vt****', position='Query'),
  vpcId: string(name='VpcId', example='vpc-bp1ub1yt9cvakoelj****', position='Query'),
  vpnType?: string(name='VpnType', example='Normal', position='Query'),
}

model CreateVpnGatewayResponseBody = {
  name?: string(name='Name', example='MYVPN'),
  orderId?: long(name='OrderId', example='208240895400460'),
  requestId?: string(name='RequestId', example='EB2C156A-41F8-49CC-A756-D55AFC8BFD69'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-uf68lxhgr7ftbqr3p****'),
}

model CreateVpnGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVpnGatewayResponseBody(name='body'),
}

async function createVpnGateway(request: CreateVpnGatewayRequest): CreateVpnGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpnGateway', 'POST', '/', 'json', false, 'json', request);
}

model CreateVpnPbrRouteEntryRequest {
  clientToken?: string(name='ClientToken', example='d7d24a21-f4ba-4454-9173-b3828dae492b', position='Query'),
  description?: string(name='Description', example='111', position='Query'),
  nextHop: string(name='NextHop', example='vco-bp15oes1py4i66rmd****', position='Query'),
  overlayMode?: string(name='OverlayMode', example='Ipsec', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  priority?: int32(name='Priority', position='Query'),
  publishVpc: boolean(name='PublishVpc', example='true', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeDest: string(name='RouteDest', example='10.0.0.0/24', position='Query'),
  routeSource: string(name='RouteSource', example='192.168.1.0/24', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', example='vpn-bp1a3kqjiiq9legfx****', position='Query'),
  weight: int32(name='Weight', example='0', position='Query'),
}

model CreateVpnPbrRouteEntryResponseBody = {
  createTime?: long(name='CreateTime', example='1492747187000'),
  description?: string(name='Description', example='111'),
  nextHop?: string(name='NextHop', example='vco-bp15oes1py4i66rmd****'),
  overlayMode?: string(name='OverlayMode', example='Ipsec'),
  priority?: int32(name='Priority'),
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
  routeDest?: string(name='RouteDest', example='10.0.0.0/24'),
  routeSource?: string(name='RouteSource', example='192.168.1.0/24'),
  state?: string(name='State', example='normal'),
  vpnInstanceId?: string(name='VpnInstanceId', example='vpn-bp1cmw7jh1nfe43m9****'),
  weight?: int32(name='Weight', example='0'),
}

model CreateVpnPbrRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVpnPbrRouteEntryResponseBody(name='body'),
}

async function createVpnPbrRouteEntry(request: CreateVpnPbrRouteEntryRequest): CreateVpnPbrRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpnPbrRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model CreateVpnRouteEntryRequest {
  clientToken?: string(name='ClientToken', example='d7d24a21-f4ba-4454-9173-b3828dae****', position='Query'),
  description?: string(name='Description', example='mytest', position='Query'),
  nextHop: string(name='NextHop', example='vco-bp15oes1py4i66rmd****', position='Query'),
  overlayMode?: string(name='OverlayMode', example='Ipsec', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  publishVpc: boolean(name='PublishVpc', example='true', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeDest: string(name='RouteDest', example='10.0.0.0/24', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', example='vpn-bp1a3kqjiiq9legfx****', position='Query'),
  weight: int32(name='Weight', example='0', position='Query'),
}

model CreateVpnRouteEntryResponseBody = {
  createTime?: long(name='CreateTime', example='1492747187000'),
  description?: string(name='Description', example='mytest'),
  nextHop?: string(name='NextHop', example='vco-bp15oes1py4i66rmd****'),
  overlayMode?: string(name='OverlayMode', example='Ipsec'),
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
  routeDest?: string(name='RouteDest', example='10.0.0.0/24'),
  state?: string(name='State', example='published'),
  vpnInstanceId?: string(name='VpnInstanceId', example='vpn-bp1cmw7jh1nfe43m9****'),
  weight?: int32(name='Weight', example='0'),
}

model CreateVpnRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVpnRouteEntryResponseBody(name='body'),
}

async function createVpnRouteEntry(request: CreateVpnRouteEntryRequest): CreateVpnRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpnRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeactivateRouterInterfaceRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerInterfaceId: string(name='RouterInterfaceId', example='ri-2zeo3xzyf38r4urz****', position='Query'),
}

model DeactivateRouterInterfaceResponseBody = {
  requestId?: string(name='RequestId', example='BE7EB53A-99AB-4DA8-AEDE-75FA90D046A6'),
}

model DeactivateRouterInterfaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeactivateRouterInterfaceResponseBody(name='body'),
}

async function deactivateRouterInterface(request: DeactivateRouterInterfaceRequest): DeactivateRouterInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeactivateRouterInterface', 'POST', '/', 'json', false, 'json', request);
}

model DeactiveFlowLogRequest {
  flowLogId: string(name='FlowLogId', example='fl-m5e8vhz2t21sel1nq****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-qingdao', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeactiveFlowLogResponseBody = {
  requestId?: string(name='RequestId', example='F7DDDC17-FA06-4AC2-8F35-59D2470FCFC1'),
  success?: string(name='Success', example='true'),
}

model DeactiveFlowLogResponse = {
  headers: map[string]string(name='headers'),
  body: DeactiveFlowLogResponseBody(name='body'),
}

async function deactiveFlowLog(request: DeactiveFlowLogRequest): DeactiveFlowLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeactiveFlowLog', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBgpGroupRequest {
  bgpGroupId: string(name='BgpGroupId', example='bgpg-bp1k25cyp26cllath****', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteBgpGroupResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DeleteBgpGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBgpGroupResponseBody(name='body'),
}

async function deleteBgpGroup(request: DeleteBgpGroupRequest): DeleteBgpGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBgpGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBgpNetworkRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dstCidrBlock: string(name='DstCidrBlock', example='10.110.192.12/32', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerId: string(name='RouterId', example='vrt-bp1lhl0taikrteen8****', position='Query'),
}

model DeleteBgpNetworkResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DeleteBgpNetworkResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBgpNetworkResponseBody(name='body'),
}

async function deleteBgpNetwork(request: DeleteBgpNetworkRequest): DeleteBgpNetworkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBgpNetwork', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBgpPeerRequest {
  bgpPeerId: string(name='BgpPeerId', example='bgp-wz977wcrmb69a********', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteBgpPeerResponseBody = {
  requestId?: string(name='RequestId', example='611CB80C-B6A9-43DB-9E38-0B0AC3D9B58F'),
}

model DeleteBgpPeerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBgpPeerResponseBody(name='body'),
}

async function deleteBgpPeer(request: DeleteBgpPeerRequest): DeleteBgpPeerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBgpPeer', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCommonBandwidthPackageRequest {
  bandwidthPackageId: string(name='BandwidthPackageId', example='cbwp-2ze2ic1xd2qeqk145pn4u', position='Query'),
  force?: string(name='Force', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteCommonBandwidthPackageResponseBody = {
  requestId?: string(name='RequestId', example='B400EF57-60E3-4D61-B8FB-7FA8F72DF5A6'),
}

model DeleteCommonBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCommonBandwidthPackageResponseBody(name='body'),
}

async function deleteCommonBandwidthPackage(request: DeleteCommonBandwidthPackageRequest): DeleteCommonBandwidthPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCommonBandwidthPackage', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomerGatewayRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04****', position='Query'),
  customerGatewayId: string(name='CustomerGatewayId', example='cgw-bp1pvpl9r9adju6l5****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteCustomerGatewayResponseBody = {
  requestId?: string(name='RequestId', example='606998F0-B94D-48FE-8316-ACA81BB230DA'),
}

model DeleteCustomerGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCustomerGatewayResponseBody(name='body'),
}

async function deleteCustomerGateway(request: DeleteCustomerGatewayRequest): DeleteCustomerGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomerGateway', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDhcpOptionsSetRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  dhcpOptionsSetId: string(name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDhcpOptionsSetResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteDhcpOptionsSetResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDhcpOptionsSetResponseBody(name='body'),
}

async function deleteDhcpOptionsSet(request: DeleteDhcpOptionsSetRequest): DeleteDhcpOptionsSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDhcpOptionsSet', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFlowLogRequest {
  flowLogId: string(name='FlowLogId', example='fl-m5e8vhz2t21sel1nq****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-qingdao', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteFlowLogResponseBody = {
  requestId?: string(name='RequestId', example='F7DDDC17-FA06-4AC2-8F35-59D2470FCFC1'),
  success?: string(name='Success', example='true'),
}

model DeleteFlowLogResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFlowLogResponseBody(name='body'),
}

async function deleteFlowLog(request: DeleteFlowLogRequest): DeleteFlowLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFlowLog', 'POST', '/', 'json', false, 'json', request);
}

model DeleteForwardEntryRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  forwardEntryId: string(name='ForwardEntryId', example='fwd-8vbn3bc8roygjp0gy****', position='Query'),
  forwardTableId: string(name='ForwardTableId', example='ftb-8vbx8xu2lqj9qb334****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteForwardEntryResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteForwardEntryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteForwardEntryResponseBody(name='body'),
}

async function deleteForwardEntry(request: DeleteForwardEntryRequest): DeleteForwardEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteForwardEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFullNatEntryRequest {
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  fullNatEntryId: string(name='FullNatEntryId', description='要修改的DNAT条目的ID。', example='fullnat-gw8fz23jezpbblf1j****', position='Query'),
  fullNatTableId: string(name='FullNatTableId', description='FullNAT条目所属的FullNAT列表的ID。', example='fulltb-gw88z7hhlv43rmb26****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='eu-central-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteFullNatEntryResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='2BCC426F-A9F2-3F03-99D2-1E0D647236DB'),
}

model DeleteFullNatEntryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFullNatEntryResponseBody(name='body'),
}

async function deleteFullNatEntry(request: DeleteFullNatEntryRequest): DeleteFullNatEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFullNatEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGlobalAccelerationInstanceRequest {
  globalAccelerationInstanceId: string(name='GlobalAccelerationInstanceId', example='ga-asdfsl22s****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteGlobalAccelerationInstanceResponseBody = {
  requestId?: string(name='RequestId', example='E6E63B2A-9820-44A8-A359-9BB2DAEE6424'),
}

model DeleteGlobalAccelerationInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGlobalAccelerationInstanceResponseBody(name='body'),
}

async function deleteGlobalAccelerationInstance(request: DeleteGlobalAccelerationInstanceRequest): DeleteGlobalAccelerationInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGlobalAccelerationInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteHaVipRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  haVipId: string(name='HaVipId', example='havip-2zeo05qre24nhrqpy****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', example='123', position='Query'),
  ownerId?: long(name='OwnerId', example='123', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='123', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='123', position='Query'),
}

model DeleteHaVipResponseBody = {
  requestId?: string(name='RequestId', example='C44F62BE-9CE7-4277-B117-69243F3988BF'),
}

model DeleteHaVipResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHaVipResponseBody(name='body'),
}

async function deleteHaVip(request: DeleteHaVipRequest): DeleteHaVipResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHaVip', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIPv6TranslatorRequest {
  clientToken?: string(name='ClientToken', example='ClientToken', position='Query'),
  ipv6TranslatorId: string(name='Ipv6TranslatorId', example='ipv6trans-bp1i8ahxut1iexxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteIPv6TranslatorResponseBody = {
  requestId?: string(name='RequestId', example='8B2F5262-6B57-43F2-xxxxx'),
}

model DeleteIPv6TranslatorResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIPv6TranslatorResponseBody(name='body'),
}

async function deleteIPv6Translator(request: DeleteIPv6TranslatorRequest): DeleteIPv6TranslatorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIPv6Translator', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIPv6TranslatorAclListRequest {
  aclId: string(name='AclId', example='ipv6transacl-bp1de2xxxx', position='Query'),
  clientToken?: string(name='ClientToken', example='sha123456', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteIPv6TranslatorAclListResponseBody = {
  requestId?: string(name='RequestId', example='8B2F5262-6B57-43F2-xxxxx'),
}

model DeleteIPv6TranslatorAclListResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIPv6TranslatorAclListResponseBody(name='body'),
}

async function deleteIPv6TranslatorAclList(request: DeleteIPv6TranslatorAclListRequest): DeleteIPv6TranslatorAclListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIPv6TranslatorAclList', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIPv6TranslatorEntryRequest {
  clientToken?: string(name='ClientToken', example='sha11112222', position='Query'),
  ipv6TranslatorEntryId?: string(name='Ipv6TranslatorEntryId', example='ipv6transentry-bp1g8bhrdexxxxx', position='Query'),
  ipv6TranslatorId?: string(name='Ipv6TranslatorId', example='ipv6trans-bp1858ysxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteIPv6TranslatorEntryResponseBody = {
  requestId?: string(name='RequestId', example='8B2F5262-6B57-43F2-xxxxx'),
}

model DeleteIPv6TranslatorEntryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIPv6TranslatorEntryResponseBody(name='body'),
}

async function deleteIPv6TranslatorEntry(request: DeleteIPv6TranslatorEntryRequest): DeleteIPv6TranslatorEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIPv6TranslatorEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIpsecServerRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-00****', position='Query'),
  dryRun?: string(name='DryRun', example='false', position='Query'),
  ipsecServerId: string(name='IpsecServerId', example='iss-bp1jougp8cfsbo8y9****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model DeleteIpsecServerResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteIpsecServerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIpsecServerResponseBody(name='body'),
}

async function deleteIpsecServer(request: DeleteIpsecServerRequest): DeleteIpsecServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIpsecServer', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIpv4GatewayRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ipv4GatewayId: string(name='Ipv4GatewayId', example='ipv4gw-5tsnc6s4ogsedtp3k****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='ap-southeast-6', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteIpv4GatewayResponseBody = {
  requestId?: string(name='RequestId', example='21133AC0-0636-521B-A400-253818691A56'),
}

model DeleteIpv4GatewayResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIpv4GatewayResponseBody(name='body'),
}

async function deleteIpv4Gateway(request: DeleteIpv4GatewayRequest): DeleteIpv4GatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIpv4Gateway', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIpv6EgressOnlyRuleRequest {
  clientToken?: string(name='ClientToken', example='123456', position='Query'),
  ipv6EgressOnlyRuleId: string(name='Ipv6EgressOnlyRuleId', example='ipv6py-hp3w98rmlbqp0xxxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-huhehaote', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteIpv6EgressOnlyRuleResponseBody = {
  requestId?: string(name='RequestId', example='9DFEDBEE-E5AB-49E8-A2DC-CC114C67AF75'),
}

model DeleteIpv6EgressOnlyRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIpv6EgressOnlyRuleResponseBody(name='body'),
}

async function deleteIpv6EgressOnlyRule(request: DeleteIpv6EgressOnlyRuleRequest): DeleteIpv6EgressOnlyRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIpv6EgressOnlyRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIpv6GatewayRequest {
  ipv6GatewayId: string(name='Ipv6GatewayId', example='ipv6gw-hp3y0l3ln89j8****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-huhehaote', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteIpv6GatewayResponseBody = {
  requestId?: string(name='RequestId', example='E9A8AABE-A84B-4AF2-A68A-8E2EA190E7AE'),
}

model DeleteIpv6GatewayResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIpv6GatewayResponseBody(name='body'),
}

async function deleteIpv6Gateway(request: DeleteIpv6GatewayRequest): DeleteIpv6GatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIpv6Gateway', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIpv6InternetBandwidthRequest {
  ipv6AddressId?: string(name='Ipv6AddressId', example='ipv6bw-uf6hcyzu65v98v3du****', position='Query'),
  ipv6InternetBandwidthId?: string(name='Ipv6InternetBandwidthId', example='ipv6bw-uf6hcyzu65v98v3du****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-huhehaote', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteIpv6InternetBandwidthResponseBody = {
  requestId?: string(name='RequestId', example='E07E0FE6-5C21-405F-AF82-7613AA81EF92'),
}

model DeleteIpv6InternetBandwidthResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIpv6InternetBandwidthResponseBody(name='body'),
}

async function deleteIpv6InternetBandwidth(request: DeleteIpv6InternetBandwidthRequest): DeleteIpv6InternetBandwidthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIpv6InternetBandwidth', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNatGatewayRequest {
  force?: boolean(name='Force', example='false', position='Query'),
  natGatewayId: string(name='NatGatewayId', example='ngw-bp1uewa15k4iy5770****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteNatGatewayResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteNatGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNatGatewayResponseBody(name='body'),
}

async function deleteNatGateway(request: DeleteNatGatewayRequest): DeleteNatGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNatGateway', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNatIpRequest {
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  natIpId: string(name='NatIpId', example='vpcnatip-gw8y7q3cpk3fggs87****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-qingdao', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteNatIpResponseBody = {
  requestId?: string(name='RequestId', example='E9AD97A0-5338-43F8-8A80-5E274CCBA11B'),
}

model DeleteNatIpResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNatIpResponseBody(name='body'),
}

async function deleteNatIp(request: DeleteNatIpRequest): DeleteNatIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNatIp', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNatIpCidrRequest {
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  natGatewayId: string(name='NatGatewayId', example='ngw-gw8v16wgvtq26vh59****', position='Query'),
  natIpCidr: string(name='NatIpCidr', example='172.16.0.0/24', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='eu-central-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteNatIpCidrResponseBody = {
  requestId?: string(name='RequestId', example='7021BEB1-210F-48A9-AB82-BE9A9110BB89'),
}

model DeleteNatIpCidrResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNatIpCidrResponseBody(name='body'),
}

async function deleteNatIpCidr(request: DeleteNatIpCidrRequest): DeleteNatIpCidrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNatIpCidr', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNetworkAclRequest {
  clientToken?: string(name='ClientToken', example='223e4867-e89b-12d3-a456-426655440000', position='Query'),
  networkAclId: string(name='NetworkAclId', example='nacl-bp1lhl0taikrbgnh****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteNetworkAclResponseBody = {
  requestId?: string(name='RequestId', example='4B48E3D-DF70-471B-AA83-089E83A1B45'),
}

model DeleteNetworkAclResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNetworkAclResponseBody(name='body'),
}

async function deleteNetworkAcl(request: DeleteNetworkAclRequest): DeleteNetworkAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNetworkAcl', 'POST', '/', 'json', false, 'json', request);
}

model DeletePhysicalConnectionRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', example='pc-119mfjzm7*********', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeletePhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeletePhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePhysicalConnectionResponseBody(name='body'),
}

async function deletePhysicalConnection(request: DeletePhysicalConnectionRequest): DeletePhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model DeletePublicIpAddressPoolRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe60000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  publicIpAddressPoolId: string(name='PublicIpAddressPoolId', example='pippool-6wetvn6fumkgycssx****', position='Query'),
  regionId: string(name='RegionId', example='cn-chengdu', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeletePublicIpAddressPoolResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model DeletePublicIpAddressPoolResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePublicIpAddressPoolResponseBody(name='body'),
}

async function deletePublicIpAddressPool(request: DeletePublicIpAddressPoolRequest): DeletePublicIpAddressPoolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePublicIpAddressPool', 'POST', '/', 'json', false, 'json', request);
}

model DeletePublicIpAddressPoolCidrBlockRequest {
  cidrBlock: string(name='CidrBlock', example='47.0.XX.XX/24', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  publicIpAddressPoolId: string(name='PublicIpAddressPoolId', example='pippool-6wetvn6fumkgycssx****', position='Query'),
  regionId: string(name='RegionId', example='cn-chengdu', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeletePublicIpAddressPoolCidrBlockResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model DeletePublicIpAddressPoolCidrBlockResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePublicIpAddressPoolCidrBlockResponseBody(name='body'),
}

async function deletePublicIpAddressPoolCidrBlock(request: DeletePublicIpAddressPoolCidrBlockRequest): DeletePublicIpAddressPoolCidrBlockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePublicIpAddressPoolCidrBlock', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRouteEntriesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeEntries?: [ 
    {
      dstCidrBlock?: string(name='DstCidrBlock', example='47.100.XX.XX/24'),
      nextHop?: string(name='NextHop', example='i-j6c2fp57q8rr4jlu****'),
      routeEntryId?: string(name='RouteEntryId', example='rte-bp1mnnr2al0naomnpv****'),
      routeTableId: string(name='RouteTableId', example='vtb-2ze3jgygk9bmsj23s****'),
    }
  ](name='RouteEntries', position='Query'),
}

model DeleteRouteEntriesResponseBody = {
  failedCount?: int32(name='FailedCount', example='2'),
  failedRouteEntries?: [ 
    {
      dstCidrBlock?: string(name='DstCidrBlock', example='47.100.XX.XX/24'),
      failedCode?: string(name='FailedCode', example='VPC_ROUTER_ENTRY_NOT_EXIST'),
      failedMessage?: string(name='FailedMessage', example='vRouterEntry not exists'),
      nextHop?: string(name='NextHop', example='i-j6c2fp57q8rr4jlu****'),
      routeEntryId?: string(name='RouteEntryId', example='rte-bp1mnnr2al0naomnpv****'),
    }
  ](name='FailedRouteEntries'),
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  successCount?: int32(name='SuccessCount', example='2'),
}

model DeleteRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRouteEntriesResponseBody(name='body'),
}

async function deleteRouteEntries(request: DeleteRouteEntriesRequest): DeleteRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRouteEntries', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRouteEntryRequest {
  destinationCidrBlock?: string(name='DestinationCidrBlock', example='47.100.XX.XX/16', position='Query'),
  nextHopId?: string(name='NextHopId', example='ri-2zeo3xzyf38r4urzd****', position='Query'),
  nextHopList?: [ 
    {
      nextHopId?: string(name='NextHopId', example='ri-2zeo3xzyf38r43cd****'),
      nextHopType?: string(name='NextHopType', example='RouterInterface'),
    }
  ](name='NextHopList', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeEntryId?: string(name='RouteEntryId', example='rte-bp1mnnr2al0naomnpv****', position='Query'),
  routeTableId?: string(name='RouteTableId', example='vtb-2ze3jgygk9bmsj23s****', position='Query'),
}

model DeleteRouteEntryResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRouteEntryResponseBody(name='body'),
}

async function deleteRouteEntry(request: DeleteRouteEntryRequest): DeleteRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRouteTableRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId: string(name='RouteTableId', example='vtb-bp145q7glnuzdvzu2****', position='Query'),
}

model DeleteRouteTableResponseBody = {
  requestId?: string(name='RequestId', example='DC668356-BCB4-42FD-9BC3-FA2B2E04B634'),
}

model DeleteRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRouteTableResponseBody(name='body'),
}

async function deleteRouteTable(request: DeleteRouteTableRequest): DeleteRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRouterInterfaceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerInterfaceId: string(name='RouterInterfaceId', example='ri-2zeo3xzyf38r4urz****', position='Query'),
}

model DeleteRouterInterfaceResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DeleteRouterInterfaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRouterInterfaceResponseBody(name='body'),
}

async function deleteRouterInterface(request: DeleteRouterInterfaceRequest): DeleteRouterInterfaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRouterInterface', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSnatEntryRequest {
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  snatEntryId: string(name='SnatEntryId', example='snat-bp1vcgcf8tm0plqcg****', position='Query'),
  snatTableId: string(name='SnatTableId', example='stb-bp190wu8io1vgev80****', position='Query'),
}

model DeleteSnatEntryResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteSnatEntryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSnatEntryResponseBody(name='body'),
}

async function deleteSnatEntry(request: DeleteSnatEntryRequest): DeleteSnatEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSnatEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSslVpnClientCertRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sslVpnClientCertId: string(name='SslVpnClientCertId', example='vsc-bp1n8wcf134yl0osr****', position='Query'),
}

model DeleteSslVpnClientCertResponseBody = {
  requestId?: string(name='RequestId', example='606998F0-B94D-48FE-8316-ACA81BB230DA'),
}

model DeleteSslVpnClientCertResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSslVpnClientCertResponseBody(name='body'),
}

async function deleteSslVpnClientCert(request: DeleteSslVpnClientCertRequest): DeleteSslVpnClientCertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSslVpnClientCert', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSslVpnServerRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sslVpnServerId: string(name='SslVpnServerId', example='vss-bp18q7hzj6largv4v****', position='Query'),
}

model DeleteSslVpnServerResponseBody = {
  requestId?: string(name='RequestId', example='606998F0-B94D-48FE-8316-ACA81BB230DA'),
}

model DeleteSslVpnServerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSslVpnServerResponseBody(name='body'),
}

async function deleteSslVpnServer(request: DeleteSslVpnServerRequest): DeleteSslVpnServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSslVpnServer', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTrafficMirrorFilterRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hongkong', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMirrorFilterId: string(name='TrafficMirrorFilterId', example='tmf-j6cmls82xnc86vtpe****', position='Query'),
}

model DeleteTrafficMirrorFilterResponseBody = {
  requestId?: string(name='RequestId', example='07F272E2-6AD5-433A-8207-A607C76F1676'),
}

model DeleteTrafficMirrorFilterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTrafficMirrorFilterResponseBody(name='body'),
}

async function deleteTrafficMirrorFilter(request: DeleteTrafficMirrorFilterRequest): DeleteTrafficMirrorFilterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTrafficMirrorFilter', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTrafficMirrorFilterRulesRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hongkong', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMirrorFilterId: string(name='TrafficMirrorFilterId', example='tmf-j6cmls82xnc86vtpe****', position='Query'),
  trafficMirrorFilterRuleIds: [ string ](name='TrafficMirrorFilterRuleIds', example='tmr-j6cbmubn323k7jlq3****', maxLength=128, position='Query'),
}

model DeleteTrafficMirrorFilterRulesResponseBody = {
  requestId?: string(name='RequestId', example='BD8A3F71-00C5-4655-8F55-11F3976C3274'),
}

model DeleteTrafficMirrorFilterRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTrafficMirrorFilterRulesResponseBody(name='body'),
}

async function deleteTrafficMirrorFilterRules(request: DeleteTrafficMirrorFilterRulesRequest): DeleteTrafficMirrorFilterRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTrafficMirrorFilterRules', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTrafficMirrorSessionRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hongkong', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMirrorSessionId: string(name='TrafficMirrorSessionId', example='tms-j6cla50buc44ap8tu****', position='Query'),
}

model DeleteTrafficMirrorSessionResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteTrafficMirrorSessionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTrafficMirrorSessionResponseBody(name='body'),
}

async function deleteTrafficMirrorSession(request: DeleteTrafficMirrorSessionRequest): DeleteTrafficMirrorSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTrafficMirrorSession', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVSwitchRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchId: string(name='VSwitchId', example='vsw-asdfjlna****', position='Query'),
}

model DeleteVSwitchResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteVSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVSwitchResponseBody(name='body'),
}

async function deleteVSwitch(request: DeleteVSwitchRequest): DeleteVSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVSwitch', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVbrHaRequest {
  clientToken?: string(name='ClientToken', example='CBCE910E-D396-4944-8****', position='Query'),
  instanceId: string(name='InstanceId', example='vbrha-sa1******', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteVbrHaResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model DeleteVbrHaResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVbrHaResponseBody(name='body'),
}

async function deleteVbrHa(request: DeleteVbrHaRequest): DeleteVbrHaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVbrHa', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVcoRouteEntryRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  nextHop: string(name='NextHop', example='vco-p0w5112fgnl2ihlmf****', position='Query'),
  overlayMode?: string(name='OverlayMode', example='Ipsec', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  regionId: string(name='RegionId', example='ap-southeast-2', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeDest: string(name='RouteDest', example='192.168.10.0/24', position='Query'),
  vpnConnectionId: string(name='VpnConnectionId', example='vco-p0w5112fgnl2ihlmf****', position='Query'),
  weight: int32(name='Weight', example='100', position='Query'),
}

model DeleteVcoRouteEntryResponseBody = {
  requestId?: string(name='RequestId', example='9208DDD8-0930-3CE6-AF7F-732B4E67B3DD'),
}

model DeleteVcoRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVcoRouteEntryResponseBody(name='body'),
}

async function deleteVcoRouteEntry(request: DeleteVcoRouteEntryRequest): DeleteVcoRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVcoRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVirtualBorderRouterRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vbrId: string(name='VbrId', example='vbr-bp12mw1f8k3jgygk9****', position='Query'),
}

model DeleteVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVirtualBorderRouterResponseBody(name='body'),
}

async function deleteVirtualBorderRouter(request: DeleteVirtualBorderRouterRequest): DeleteVirtualBorderRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVirtualBorderRouter', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVpcRequest {
  dryRun?: boolean(name='DryRun', position='Query'),
  forceDelete?: boolean(name='ForceDelete', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId: string(name='VpcId', example='vpc-bp1m7v25emi1h5mtc****', position='Query'),
}

model DeleteVpcResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteVpcResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVpcResponseBody(name='body'),
}

async function deleteVpc(request: DeleteVpcRequest): DeleteVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpc', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVpcGatewayEndpointRequest {
  clientToken?: string(name='ClientToken', description='幂等参数', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  dryRun?: boolean(name='DryRun', description='是否只预检此次请求', example='false', position='Query'),
  endpointId: string(name='EndpointId', description='VPC网关实例ID', example='vpce-bp1w1dmdqjpwul0v3****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='地域', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteVpcGatewayEndpointResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='A1122D0F-7B3B-5445-BB19-17F27F97FE1C'),
}

model DeleteVpcGatewayEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVpcGatewayEndpointResponseBody(name='body'),
}

async function deleteVpcGatewayEndpoint(request: DeleteVpcGatewayEndpointRequest): DeleteVpcGatewayEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpcGatewayEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVpcPrefixListRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prefixListId: string(name='PrefixListId', example='pl-0b78hw45f****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteVpcPrefixListResponseBody = {
  requestId?: string(name='RequestId', example='64B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DeleteVpcPrefixListResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVpcPrefixListResponseBody(name='body'),
}

async function deleteVpcPrefixList(request: DeleteVpcPrefixListRequest): DeleteVpcPrefixListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpcPrefixList', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVpnAttachmentRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  regionId: string(name='RegionId', example='ap-southeast-2', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpnConnectionId: string(name='VpnConnectionId', example='vco-p0w7gtr14m09r9lkr****', position='Query'),
}

model DeleteVpnAttachmentResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='29440C49-398F-3D06-BA8B-E3CD13F3246D'),
  success?: boolean(name='Success', example='true'),
}

model DeleteVpnAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVpnAttachmentResponseBody(name='body'),
}

async function deleteVpnAttachment(request: DeleteVpnAttachmentRequest): DeleteVpnAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpnAttachment', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVpnConnectionRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpnConnectionId: string(name='VpnConnectionId', example='vco-bp1bbi27hojx80nck****', position='Query'),
}

model DeleteVpnConnectionResponseBody = {
  requestId?: string(name='RequestId', example='606998F0-B94D-48FE-8316-ACA81BB230DA'),
}

model DeleteVpnConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVpnConnectionResponseBody(name='body'),
}

async function deleteVpnConnection(request: DeleteVpnConnectionRequest): DeleteVpnConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpnConnection', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVpnGatewayRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm2ogj****', position='Query'),
}

model DeleteVpnGatewayResponseBody = {
  requestId?: string(name='RequestId', example='>0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DeleteVpnGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVpnGatewayResponseBody(name='body'),
}

async function deleteVpnGateway(request: DeleteVpnGatewayRequest): DeleteVpnGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpnGateway', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVpnPbrRouteEntryRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  nextHop: string(name='NextHop', example='vco-bp15oes1py4i66rmd****', position='Query'),
  overlayMode?: string(name='OverlayMode', example='Ipsec', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  priority?: int32(name='Priority', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeDest: string(name='RouteDest', example='10.0.0.0/24', position='Query'),
  routeSource: string(name='RouteSource', example='192.168.1.0/24', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', example='vpn-bp1a3kqjiiq9legfx****', position='Query'),
  weight: int32(name='Weight', example='0', position='Query'),
}

model DeleteVpnPbrRouteEntryResponseBody = {
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
}

model DeleteVpnPbrRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVpnPbrRouteEntryResponseBody(name='body'),
}

async function deleteVpnPbrRouteEntry(request: DeleteVpnPbrRouteEntryRequest): DeleteVpnPbrRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpnPbrRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVpnRouteEntryRequest {
  clientToken?: string(name='ClientToken', example='d7d24a21-f4ba-4454-9173-b3828dae492b', position='Query'),
  nextHop: string(name='NextHop', example='vco-bp15oes1py4i66rmd****', position='Query'),
  overlayMode?: string(name='OverlayMode', example='Ipsec', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeDest: string(name='RouteDest', example='10.0.0.0/24', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', example='vpn-bp1a3kqjiiq9legfx****', position='Query'),
  weight: int32(name='Weight', example='0', position='Query'),
}

model DeleteVpnRouteEntryResponseBody = {
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
}

model DeleteVpnRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVpnRouteEntryResponseBody(name='body'),
}

async function deleteVpnRouteEntry(request: DeleteVpnRouteEntryRequest): DeleteVpnRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpnRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeletionProtectionRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', example='eip-uf6id7gvguruxe41v****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  protectionEnable: boolean(name='ProtectionEnable', example='true', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  type: string(name='Type', example='EIP', position='Query'),
}

model DeletionProtectionResponseBody = {
  requestId?: string(name='RequestId', example='BAAEF103-96C4-4454-9210-066F2405F511'),
}

model DeletionProtectionResponse = {
  headers: map[string]string(name='headers'),
  body: DeletionProtectionResponseBody(name='body'),
}

async function deletionProtection(request: DeletionProtectionRequest): DeletionProtectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletionProtection', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccessPointsRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeAccessPointsResponseBody = {
  accessPointSet?: {
    accessPointType?: [ 
    {
      accessPointFeatureModels?: {
        accessPointFeatureModel?: [ 
        {
          featureKey?: string(name='FeatureKey', example='AP_Support_VbrBandwidthLimit'),
          featureValue?: string(name='FeatureValue', example='true'),
        }
      ](name='AccessPointFeatureModel')
      }(name='AccessPointFeatureModels'),
      accessPointId?: string(name='AccessPointId', example='ap-cn-hangzhou-****'),
      attachedRegionNo?: string(name='AttachedRegionNo', example='cn-hangzhou'),
      description?: string(name='Description'),
      hostOperator?: string(name='HostOperator'),
      location?: string(name='Location'),
      name?: string(name='Name'),
      status?: string(name='Status', example='recommended'),
      type?: string(name='Type', example='VPC'),
    }
  ](name='AccessPointType')
  }(name='AccessPointSet'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='3E85D803-C7CF-4BCD-9CFE-6DBA1DFFA027'),
  totalCount?: int32(name='TotalCount', example='5'),
}

model DescribeAccessPointsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccessPointsResponseBody(name='body'),
}

async function describeAccessPoints(request: DescribeAccessPointsRequest): DescribeAccessPointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccessPoints', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBgpGroupsRequest {
  bgpGroupId?: string(name='BgpGroupId', example='bgpg-bp1k25cyp26cllath****', position='Query'),
  isDefault?: boolean(name='IsDefault', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerId?: string(name='RouterId', example='vbr-bp1ctxy813985gkuk****', position='Query'),
}

model DescribeBgpGroupsResponseBody = {
  bgpGroups?: {
    bgpGroup?: [ 
    {
      authKey?: string(name='AuthKey', example='!PWZ****'),
      bgpGroupId?: string(name='BgpGroupId', example='bgpg-bp1k25cyp26cllath****'),
      description?: string(name='Description'),
      hold?: string(name='Hold', example='30'),
      ipVersion?: string(name='IpVersion', example='IPv4'),
      isFake?: string(name='IsFake', example='true'),
      keepalive?: string(name='Keepalive', example='10'),
      localAsn?: string(name='LocalAsn', example='45104'),
      name?: string(name='Name', example='name'),
      peerAsn?: string(name='PeerAsn', example='1****'),
      regionId?: string(name='RegionId', example='cn-shanghai'),
      routeLimit?: string(name='RouteLimit', example='99'),
      routerId?: string(name='RouterId', example='vbr-bp1ctxy813985gkuk****'),
      status?: string(name='Status', example='Available'),
    }
  ](name='BgpGroup')
  }(name='BgpGroups'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='1D0971B2-A35A-42C1-A44C-E91360C36C0B'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeBgpGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBgpGroupsResponseBody(name='body'),
}

async function describeBgpGroups(request: DescribeBgpGroupsRequest): DescribeBgpGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBgpGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBgpNetworksRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerId?: string(name='RouterId', example='vrt-bp1lhl0taikrteen8****', position='Query'),
}

model DescribeBgpNetworksResponseBody = {
  bgpNetworks?: {
    bgpNetwork?: [ 
    {
      dstCidrBlock?: string(name='DstCidrBlock', example='10.1.XX.XX/24'),
      routerId?: string(name='RouterId', example='vrt-bp1lhl0taikrteen8****'),
      status?: string(name='Status', example='Enabled'),
      vpcId?: string(name='VpcId', example='vpc-bp1qpo0kug3a2*****'),
    }
  ](name='BgpNetwork')
  }(name='BgpNetworks'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='6F513A15-669F-419D-B511-08A85292059B'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeBgpNetworksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBgpNetworksResponseBody(name='body'),
}

async function describeBgpNetworks(request: DescribeBgpNetworksRequest): DescribeBgpNetworksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBgpNetworks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBgpPeersRequest {
  bgpGroupId?: string(name='BgpGroupId', example='bgpg-2zev8h2wo414sfh****', position='Query'),
  bgpPeerId?: string(name='BgpPeerId', example='bgp-2ze3un0ft1jd1xd****', position='Query'),
  isDefault?: boolean(name='IsDefault', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerId?: string(name='RouterId', example='vbr-2zecmmvg5gvu8i4te****', position='Query'),
}

model DescribeBgpPeersResponseBody = {
  bgpPeers?: {
    bgpPeer?: [ 
    {
      advertisedRouteCount?: int32(name='AdvertisedRouteCount', example='0'),
      authKey?: string(name='AuthKey', example='!PWZ****'),
      bfdMultiHop?: int32(name='BfdMultiHop', example='3'),
      bgpGroupId?: string(name='BgpGroupId', example='bgpg-2zev8h2wo414sfh****'),
      bgpPeerId?: string(name='BgpPeerId', example='bgp-2ze3un0ft1jd1xd****'),
      bgpStatus?: string(name='BgpStatus', example='Connect'),
      description?: string(name='Description', example='test'),
      enableBfd?: boolean(name='EnableBfd', example='true'),
      gmtModified?: string(name='GmtModified', example='2022-05-20T07:29:08Z'),
      hold?: string(name='Hold', example='30'),
      ipVersion?: string(name='IpVersion', example='ipv4'),
      isFake?: boolean(name='IsFake', example='true'),
      keepalive?: string(name='Keepalive', example='10'),
      localAsn?: string(name='LocalAsn', example='45104'),
      name?: string(name='Name', example='test'),
      peerAsn?: string(name='PeerAsn', example='65515'),
      peerIpAddress?: string(name='PeerIpAddress', example='116.62.XX.XX'),
      receivedRouteCount?: int32(name='ReceivedRouteCount', example='0'),
      regionId?: string(name='RegionId', example='cn-shanghai'),
      routeLimit?: string(name='RouteLimit', example='110'),
      routerId?: string(name='RouterId', example='vbr-2zecmmvg5gvu8i4te****'),
      status?: string(name='Status', example='Available'),
    }
  ](name='BgpPeer')
  }(name='BgpPeers'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='DE77A7F3-3B74-41C0-A5BC-CAFD188C28B6'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model DescribeBgpPeersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBgpPeersResponseBody(name='body'),
}

async function describeBgpPeers(request: DescribeBgpPeersRequest): DescribeBgpPeersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBgpPeers', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCommonBandwidthPackagesRequest {
  bandwidthPackageId?: string(name='BandwidthPackageId', example='cbwp-2ze2ic1xd2qeqk145****', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  includeReservationData?: boolean(name='IncludeReservationData', example='false', position='Query'),
  name?: string(name='Name', example='test123', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityProtectionEnabled?: boolean(name='SecurityProtectionEnabled', description='是否开启安全防护', example='false', position='Query'),
}

model DescribeCommonBandwidthPackagesResponseBody = {
  commonBandwidthPackages?: {
    commonBandwidthPackage?: [ 
    {
      bandwidth?: string(name='Bandwidth', example='20'),
      bandwidthPackageId?: string(name='BandwidthPackageId', example='cbwp-bp1t3sm1ffzmshdki****'),
      businessStatus?: string(name='BusinessStatus', example='Normal'),
      creationTime?: string(name='CreationTime', example='2017-06-28T06:39:20Z'),
      deletionProtection?: boolean(name='DeletionProtection', example='true'),
      description?: string(name='Description', example='none'),
      expiredTime?: string(name='ExpiredTime', example='2019-01-15T03:08:37Z'),
      hasReservationData?: string(name='HasReservationData', example='false'),
      ISP?: string(name='ISP', example='BGP'),
      instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
      internetChargeType?: string(name='InternetChargeType', example='PayByBandwidth'),
      name?: string(name='Name', example='abc'),
      publicIpAddresses?: {
        publicIpAddresse?: [ 
        {
          allocationId?: string(name='AllocationId', example='eip-bp13e9i2qst4g6jzi****'),
          bandwidthPackageIpRelationStatus?: string(name='BandwidthPackageIpRelationStatus', example='BINDED'),
          ipAddress?: string(name='IpAddress', example='47.95.XX.XX'),
        }
      ](name='PublicIpAddresse')
      }(name='PublicIpAddresses'),
      ratio?: int32(name='Ratio', example='20'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      reservationActiveTime?: string(name='ReservationActiveTime', example='2018-08-30T16:00:00Z'),
      reservationBandwidth?: string(name='ReservationBandwidth', example='1000'),
      reservationInternetChargeType?: string(name='ReservationInternetChargeType', example='PayByBandwidth'),
      reservationOrderType?: string(name='ReservationOrderType', example='RENEWCHANGE'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph****'),
      securityProtectionTypes?: {
        securityProtectionType?: [ string ](name='SecurityProtectionType')
      }(name='SecurityProtectionTypes'),
      serviceManaged?: int32(name='ServiceManaged', example='1'),
      status?: string(name='Status', example='Available'),
    }
  ](name='CommonBandwidthPackage')
  }(name='CommonBandwidthPackages'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='20E6FD1C-7321-4DAD-BDFD-EC8769E4AA33'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeCommonBandwidthPackagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCommonBandwidthPackagesResponseBody(name='body'),
}

async function describeCommonBandwidthPackages(request: DescribeCommonBandwidthPackagesRequest): DescribeCommonBandwidthPackagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCommonBandwidthPackages', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustomerGatewayRequest {
  customerGatewayId: string(name='CustomerGatewayId', example='cgw-bp1pvpl9r9adju6l5****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeCustomerGatewayResponseBody = {
  asn?: long(name='Asn', example='65535'),
  authKey?: string(name='AuthKey', example='AuthKey****'),
  createTime?: long(name='CreateTime', example='1492747187000'),
  customerGatewayId?: string(name='CustomerGatewayId', example='cgw-bp1pvpl9r9adju6l5****'),
  description?: string(name='Description', example='desctest'),
  ipAddress?: string(name='IpAddress', example='139.32.XX.XX'),
  name?: string(name='Name', example='nametest'),
  requestId?: string(name='RequestId', example='A0457BC9-6C0F-4437-AB9D-FB2EABC1D6A2'),
  tags?: {
    tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag')
  }(name='Tags'),
}

model DescribeCustomerGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCustomerGatewayResponseBody(name='body'),
}

async function describeCustomerGateway(request: DescribeCustomerGatewayRequest): DescribeCustomerGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomerGateway', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustomerGatewaysRequest {
  customerGatewayId?: string(name='CustomerGatewayId', example='cgw-bp1pvpl9r9adju6l5****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeCustomerGatewaysResponseBody = {
  customerGateways?: {
    customerGateway?: [ 
    {
      asn?: long(name='Asn', example='65530'),
      authKey?: string(name='AuthKey', example='AuthKey****'),
      createTime?: long(name='CreateTime', example='1492747187000'),
      customerGatewayId?: string(name='CustomerGatewayId', example='cgw-bp1pvpl9r9adju6l5****'),
      description?: string(name='Description', example='desctest'),
      ipAddress?: string(name='IpAddress', example='139.32.XX.XX'),
      name?: string(name='Name', example='nametest'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
    }
  ](name='CustomerGateway')
  }(name='CustomerGateways'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E82612A9-CB90-4D7E-B394-1DB7F6509B29'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeCustomerGatewaysResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCustomerGatewaysResponseBody(name='body'),
}

async function describeCustomerGateways(request: DescribeCustomerGatewaysRequest): DescribeCustomerGatewaysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomerGateways', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEcGrantRelationRequest {
  instanceId: string(name='InstanceId', example='vbr-bp12mw1f8k3jgygk9****', position='Query'),
  instanceType: string(name='InstanceType', example='VBR', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  vbrRegionNo?: string(name='VbrRegionNo', example='cn-hangzhou', position='Query'),
}

model DescribeEcGrantRelationResponseBody = {
  count?: int32(name='Count', example='1'),
  ecGrantRelations?: [ 
    {
      aliUid?: long(name='AliUid', example='1250123456123456'),
      gmtCreate?: string(name='GmtCreate', example='2022-09-02T11:46Z'),
      grantType?: string(name='GrantType'),
      instanceId?: string(name='InstanceId', example='vpc-bp1brjuegjc88v3u9****'),
      instanceName?: string(name='InstanceName', example='VPCname'),
      instanceRouterId?: string(name='InstanceRouterId', example='vrt-bp1i0yzgjd8ra05ec****'),
      regionNo?: string(name='RegionNo', example='cn-hangzhou'),
      status?: string(name='Status', example='Created'),
      vbrInstanceId?: string(name='VbrInstanceId', example='vbr-m5ex0xf63xk8s5bob****'),
      vbrOwnerUid?: long(name='VbrOwnerUid', example='1210123456123456'),
      vbrRegionNo?: string(name='VbrRegionNo', example='cn-hangzhou'),
    }
  ](name='EcGrantRelations'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='E6E90F6B-2B41-5AAF-ABEB-236ADBAAD91D'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model DescribeEcGrantRelationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEcGrantRelationResponseBody(name='body'),
}

async function describeEcGrantRelation(request: DescribeEcGrantRelationRequest): DescribeEcGrantRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEcGrantRelation', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEipAddressesRequest {
  filter?: [
    {
      key?: string(name='Key', example='CreationStartTime'),
      value?: string(name='Value', example='2021-05-22T09:12:00Z'),
    }
  ](name='Filter', position='Query'),
  allocationId?: string(name='AllocationId', example='eip-2zeerraiwb7ujxscd****', position='Query'),
  associatedInstanceId?: string(name='AssociatedInstanceId', example='i-2zebb08phyccdvf****', position='Query'),
  associatedInstanceType?: string(name='AssociatedInstanceType', example='EcsInstance', position='Query'),
  chargeType?: string(name='ChargeType', example='PostPaid', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  eipAddress?: string(name='EipAddress', example='47.75.XX.XX', position='Query'),
  eipName?: string(name='EipName', example='EIP-01', position='Query'),
  ISP?: string(name='ISP', example='BGP', position='Query'),
  includeReservationData?: boolean(name='IncludeReservationData', example='false', position='Query'),
  lockReason?: string(name='LockReason', example='financial', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='10', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  publicIpAddressPoolId?: string(name='PublicIpAddressPoolId', example='pippool-2vc0kxcedhquybdsz****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4pcdvf****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityProtectionEnabled?: boolean(name='SecurityProtectionEnabled', description='是否开启安全防护', example='false', position='Query'),
  segmentInstanceId?: string(name='SegmentInstanceId', example='eipsg-t4nr90yik5oy38xdy****', position='Query'),
  status?: string(name='Status', example='Available', position='Query'),
}

model DescribeEipAddressesResponseBody = {
  eipAddresses?: {
    eipAddress?: [ 
    {
      allocationId?: string(name='AllocationId', example='eip-2zeerraiwb7ujcdvf****'),
      allocationTime?: string(name='AllocationTime', example='2021-04-23T01:37:38Z'),
      bandwidth?: string(name='Bandwidth', example='5'),
      bandwidthPackageBandwidth?: string(name='BandwidthPackageBandwidth', example='50'),
      bandwidthPackageId?: string(name='BandwidthPackageId', example='cbwp-bp1ego3i4j07ccdvf****'),
      bandwidthPackageType?: string(name='BandwidthPackageType', example='CommonBandwidthPackage'),
      businessStatus?: string(name='BusinessStatus', example='Normal'),
      chargeType?: string(name='ChargeType', example='PostPaid'),
      deletionProtection?: boolean(name='DeletionProtection', example='true'),
      description?: string(name='Description', example='abc'),
      eipBandwidth?: string(name='EipBandwidth', example='101'),
      expiredTime?: string(name='ExpiredTime', example='2021-05-23T02:00:00Z'),
      HDMonitorStatus?: string(name='HDMonitorStatus', example='false'),
      hasReservationData?: string(name='HasReservationData', example='false'),
      ISP?: string(name='ISP', example='BGP'),
      instanceId?: string(name='InstanceId', example='i-bp15zckdt37cdvf****'),
      instanceRegionId?: string(name='InstanceRegionId', example='cn-hangzhou'),
      instanceType?: string(name='InstanceType', example='EcsInstance'),
      internetChargeType?: string(name='InternetChargeType', example='PayByBandwidth'),
      ipAddress?: string(name='IpAddress', example='47.75.XX.XX'),
      name?: string(name='Name', example='EIP-01'),
      netmode?: string(name='Netmode', example='public'),
      operationLocks?: {
        lockReason?: [ 
        {
          lockReason?: string(name='LockReason', example='financial'),
        }
      ](name='LockReason')
      }(name='OperationLocks'),
      publicIpAddressPoolId?: string(name='PublicIpAddressPoolId', example='pippool-2vc0kxcedhquybdsz****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      reservationActiveTime?: string(name='ReservationActiveTime', example='2021-05-23T16:00:00Z'),
      reservationBandwidth?: string(name='ReservationBandwidth', example='12'),
      reservationInternetChargeType?: string(name='ReservationInternetChargeType', example='PayByBandwidth'),
      reservationOrderType?: string(name='ReservationOrderType', example='RENEWCHANGE'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazcdxs****'),
      secondLimited?: boolean(name='SecondLimited', example='false'),
      securityProtectionTypes?: {
        securityProtectionType?: [ string ](name='SecurityProtectionType')
      }(name='SecurityProtectionTypes'),
      segmentInstanceId?: string(name='SegmentInstanceId', example='eipsg-t4nr90yik5oy38xd****'),
      serviceManaged?: int32(name='ServiceManaged', example='0'),
      status?: string(name='Status', example='Available'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', example='KeyTest'),
          value?: string(name='Value', example='ValueTest'),
        }
      ](name='Tag')
      }(name='Tags'),
      vpcId?: string(name='VpcId'),
      zone?: string(name='Zone'),
    }
  ](name='EipAddress')
  }(name='EipAddresses'),
  pageNumber?: int32(name='PageNumber', example='10'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeEipAddressesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEipAddressesResponseBody(name='body'),
}

async function describeEipAddresses(request: DescribeEipAddressesRequest): DescribeEipAddressesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEipAddresses', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEipGatewayInfoRequest {
  instanceId: string(name='InstanceId', example='eni-bp1d66qjxb3qoin3****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', example='111', position='Query'),
  ownerId?: long(name='OwnerId', example='111', position='Query'),
  regionId: string(name='RegionId', example='cn-zhangjiakou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='111', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='111', position='Query'),
}

model DescribeEipGatewayInfoResponseBody = {
  code?: string(name='Code', example='200'),
  eipInfos?: {
    eipInfo?: [ 
    {
      ip?: string(name='Ip', example='47.xx.xx.236'),
      ipGw?: string(name='IpGw', example='47.xx.xx.1'),
      ipMask?: string(name='IpMask', example='255.255.255.0'),
    }
  ](name='EipInfo')
  }(name='EipInfos'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='C0FD0EED-F90D-4479-803D-DD62335357E5'),
}

model DescribeEipGatewayInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEipGatewayInfoResponseBody(name='body'),
}

async function describeEipGatewayInfo(request: DescribeEipGatewayInfoRequest): DescribeEipGatewayInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEipGatewayInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEipMonitorDataRequest {
  allocationId: string(name='AllocationId', example='eip-2zeerraiwb7uj6idcfv****', position='Query'),
  endTime: string(name='EndTime', example='2020-01-05T03:05:10Z', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', example='60', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime: string(name='StartTime', example='2020-01-05T01:05:05Z', position='Query'),
}

model DescribeEipMonitorDataResponseBody = {
  eipMonitorDatas?: {
    eipMonitorData?: [ 
    {
      eipBandwidth?: int32(name='EipBandwidth', example='10'),
      eipFlow?: long(name='EipFlow', example='465'),
      eipPackets?: int32(name='EipPackets', example='3434'),
      eipRX?: long(name='EipRX', example='122'),
      eipTX?: long(name='EipTX', example='343'),
      timeStamp?: string(name='TimeStamp', example='2020-01-21T09:50:23Z'),
    }
  ](name='EipMonitorData')
  }(name='EipMonitorDatas'),
  requestId?: string(name='RequestId', example='C8B26B44-0189-443E-9816-D951F59623A9'),
}

model DescribeEipMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEipMonitorDataResponseBody(name='body'),
}

async function describeEipMonitorData(request: DescribeEipMonitorDataRequest): DescribeEipMonitorDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEipMonitorData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEipSegmentRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001sdfg', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  segmentInstanceId?: string(name='SegmentInstanceId', example='eipsg-2zett8ba055tbsxme****', position='Query'),
}

model DescribeEipSegmentResponseBody = {
  eipSegments?: {
    eipSegment?: [ 
    {
      creationTime?: string(name='CreationTime', example='2020-03-06T12:30:07Z'),
      descritpion?: string(name='Descritpion', example='MyEipSegment'),
      instanceId?: string(name='InstanceId', example='eipsg-2zett8ba055tbsxme****'),
      ipCount?: string(name='IpCount', example='28'),
      name?: string(name='Name', example='MyEipSegment'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      segment?: string(name='Segment', example='161.xx.xx.32/28'),
      status?: string(name='Status', example='Allocated'),
    }
  ](name='EipSegment')
  }(name='EipSegments'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='F7A6301A-64BA-41EC-8284-8F4838C15D1F'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model DescribeEipSegmentResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEipSegmentResponseBody(name='body'),
}

async function describeEipSegment(request: DescribeEipSegmentRequest): DescribeEipSegmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEipSegment', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFlowLogsRequest {
  description?: string(name='Description', example='This is my Flowlog.', position='Query'),
  flowLogId?: string(name='FlowLogId', example='fl-bp1f6qqhsrc2c12ta****', position='Query'),
  flowLogName?: string(name='FlowLogName', example='myFlowlog', position='Query'),
  logStoreName?: string(name='LogStoreName', example='FlowLogStore', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  projectName?: string(name='ProjectName', example='FlowLogProject', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceId?: string(name='ResourceId', example='eni-askldfas****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', example='NetworkInterface', position='Query'),
  status?: string(name='Status', example='Active', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Query'),
  trafficType?: string(name='TrafficType', example='All', position='Query'),
  vpcId?: string(name='VpcId', example='vpc-bp1nwd16gvo1wgs****', position='Query'),
}

model DescribeFlowLogsResponseBody = {
  flowLogs?: {
    flowLog?: [ 
    {
      aggregationInterval?: int32(name='AggregationInterval', example='10'),
      businessStatus?: string(name='BusinessStatus', example='Normal'),
      creationTime?: string(name='CreationTime', example='2022-01-21T03:08:50Z'),
      description?: string(name='Description', example='Description'),
      flowLogId?: string(name='FlowLogId', example='fl-bp1f6qqhsrc2c12ta****'),
      flowLogName?: string(name='FlowLogName', example='myFlowlog'),
      logStoreName?: string(name='LogStoreName', example='FlowLogStore'),
      projectName?: string(name='ProjectName', example='FlowLogProject'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId'),
      resourceId?: string(name='ResourceId', example='eni-askldfas****'),
      resourceType?: string(name='ResourceType', example='NetworkInterface'),
      serviceType?: string(name='ServiceType', example='sls'),
      status?: string(name='Status', example='Active'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      trafficPath?: {
        trafficPathList?: [ string ](name='TrafficPathList')
      }(name='TrafficPath'),
      trafficType?: string(name='TrafficType', example='All'),
    }
  ](name='FlowLog')
  }(name='FlowLogs'),
  pageNumber?: string(name='PageNumber', example='1'),
  pageSize?: string(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='F7DDDC17-FA06-4AC2-8F35-59D2470FCFC1'),
  success?: string(name='Success', example='true'),
  totalCount?: string(name='TotalCount', example='1'),
}

model DescribeFlowLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFlowLogsResponseBody(name='body'),
}

async function describeFlowLogs(request: DescribeFlowLogsRequest): DescribeFlowLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFlowLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeForwardTableEntriesRequest {
  externalIp?: string(name='ExternalIp', example='116.28.XX.XX', position='Query'),
  externalPort?: string(name='ExternalPort', example='8080', position='Query'),
  forwardEntryId?: string(name='ForwardEntryId', example='fwd-8vbn3bc8roygjp0gy****', position='Query'),
  forwardEntryName?: string(name='ForwardEntryName', example='ForwardEntry-1', position='Query'),
  forwardTableId?: string(name='ForwardTableId', example='ftb-bp1mbjubq34hlcqpa****', position='Query'),
  internalIp?: string(name='InternalIp', example='192.168.XX.XX', position='Query'),
  internalPort?: string(name='InternalPort', example='80', position='Query'),
  ipProtocol?: string(name='IpProtocol', example='TCP', position='Query'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-bp1uewa15k4iy5770****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeForwardTableEntriesResponseBody = {
  forwardTableEntries?: {
    forwardTableEntry?: [ 
    {
      externalIp?: string(name='ExternalIp', example='139.79.XX.XX'),
      externalPort?: string(name='ExternalPort', example='80'),
      forwardEntryId?: string(name='ForwardEntryId', example='fwd-119smw5tk****'),
      forwardEntryName?: string(name='ForwardEntryName', example='ForwardEntry-1'),
      forwardTableId?: string(name='ForwardTableId', example='ftb-11tc6xgmv****'),
      internalIp?: string(name='InternalIp', example='192.168.XX.XX'),
      internalPort?: string(name='InternalPort', example='25'),
      ipProtocol?: string(name='IpProtocol', example='TCP'),
      status?: string(name='Status', example='Available'),
    }
  ](name='ForwardTableEntry')
  }(name='ForwardTableEntries'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='A6C4A8B1-7561-4509-949C-20DEB40D71E6'),
  totalCount?: int32(name='TotalCount', example='5'),
}

model DescribeForwardTableEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeForwardTableEntriesResponseBody(name='body'),
}

async function describeForwardTableEntries(request: DescribeForwardTableEntriesRequest): DescribeForwardTableEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeForwardTableEntries', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGlobalAccelerationInstancesRequest {
  bandwidthType?: string(name='BandwidthType', example='Exclusive', position='Query'),
  globalAccelerationInstanceId?: string(name='GlobalAccelerationInstanceId', example='ga-234sljmxaz****', position='Query'),
  includeReservationData?: boolean(name='IncludeReservationData', example='false', position='Query'),
  ipAddress?: string(name='IpAddress', example='12.xx.xx.78', position='Query'),
  name?: string(name='Name', example='GA-1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='10', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  serverId?: string(name='ServerId', example='i-sxjblddejj9x****', position='Query'),
  serviceLocation?: string(name='ServiceLocation', example='china-mainland', position='Query'),
  status?: string(name='Status', example='Available', position='Query'),
}

model DescribeGlobalAccelerationInstancesResponseBody = {
  globalAccelerationInstances?: {
    globalAccelerationInstance?: [ 
    {
      accelerationLocation?: string(name='AccelerationLocation', example='china-mainland'),
      backendServers?: {
        backendServer?: [ 
        {
          regionId?: string(name='RegionId', example='cn-beijing'),
          serverId?: string(name='ServerId', example='i-2zeg83zvn5d4ed4y****'),
          serverIpAddress?: string(name='ServerIpAddress', example='172.xx.xx.109'),
          serverType?: string(name='ServerType', example='EcsInstance'),
        }
      ](name='BackendServer')
      }(name='BackendServers'),
      bandwidth?: string(name='Bandwidth', example='10'),
      bandwidthType?: string(name='BandwidthType', example='Exclusive'),
      chargeType?: string(name='ChargeType', example='PrePaid'),
      creationTime?: string(name='CreationTime', example='2018-07-05T03:39:31Z'),
      description?: string(name='Description', example='apiDescription'),
      expiredTime?: string(name='ExpiredTime', example='2018-08-05T16:00Z'),
      globalAccelerationInstanceId?: string(name='GlobalAccelerationInstanceId', example='ga-bp1x99kj7kl1ziw5x****'),
      internetChargeType?: string(name='InternetChargeType', example='PayByBandwidth'),
      ipAddress?: string(name='IpAddress', example='47.xx.xx.99'),
      name?: string(name='Name', example='instanceName'),
      publicIpAddresses?: {
        publicIpAddress?: [ 
        {
          allocationId?: string(name='AllocationId', example='eip-bp19yqraac4w3y0jd****'),
          ipAddress?: string(name='IpAddress', example='12.xx.xx.78'),
        }
      ](name='PublicIpAddress')
      }(name='PublicIpAddresses'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      serviceLocation?: string(name='ServiceLocation', example='china-mainland'),
      status?: string(name='Status', example='InUse'),
    }
  ](name='GlobalAccelerationInstance')
  }(name='GlobalAccelerationInstances'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='6B4EE38D-C75B-4E1F-844E-863A94430676'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeGlobalAccelerationInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGlobalAccelerationInstancesResponseBody(name='body'),
}

async function describeGlobalAccelerationInstances(request: DescribeGlobalAccelerationInstancesRequest): DescribeGlobalAccelerationInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGlobalAccelerationInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGrantRulesToCenRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', example='vpc-bp18sth14qii3pnvc****', position='Query'),
  instanceType: string(name='InstanceType', example='VPC', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeGrantRulesToCenResponseBody = {
  cenGrantRules?: {
    cbnGrantRule?: [ 
    {
      cenInstanceId?: string(name='CenInstanceId', example='cen-9gsm1q2yh1prpt****'),
      cenOwnerId?: long(name='CenOwnerId', example='1000000000'),
      creationTime?: string(name='CreationTime', example='2019-11-15T09:26:36Z'),
    }
  ](name='CbnGrantRule')
  }(name='CenGrantRules'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='F5BB78C8-5F41-464F-B9FF-5E0A7198BA26'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeGrantRulesToCenResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGrantRulesToCenResponseBody(name='body'),
}

async function describeGrantRulesToCen(request: DescribeGrantRulesToCenRequest): DescribeGrantRulesToCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGrantRulesToCen', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHaVipsRequest {
  filter?: [ 
    {
      key?: string(name='Key', example='HaVipId'),
      value?: [ string ](name='Value', example='havip-bp19o63nequs01i8d****'),
    }
  ](name='Filter', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Query'),
}

model DescribeHaVipsResponseBody = {
  haVips?: {
    haVip?: [ 
    {
      associatedEipAddresses?: {
        associatedEipAddresse?: [ string ](name='associatedEipAddresse')
      }(name='AssociatedEipAddresses'),
      associatedInstanceType?: string(name='AssociatedInstanceType', example='EcsInstance'),
      associatedInstances?: {
        associatedInstance?: [ string ](name='associatedInstance')
      }(name='AssociatedInstances'),
      chargeType?: string(name='ChargeType', example='none'),
      createTime?: string(name='CreateTime', example='2021-07-03T14:25:26Z'),
      description?: string(name='Description', example='My HaVip'),
      haVipId?: string(name='HaVipId', example='havip-bp149uyvut73dpld****'),
      ipAddress?: string(name='IpAddress', example='192.168.24.5'),
      masterInstanceId?: string(name='MasterInstanceId', example='i-bp145q7glnuzdvz****'),
      name?: string(name='Name', example='test'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId'),
      status?: string(name='Status', example='Available'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      vSwitchId?: string(name='VSwitchId', example='vsw-bp1pkt1fba8e824ez****'),
      vpcId?: string(name='VpcId', example='vpc-bp1kcm36tevkpms97****'),
    }
  ](name='HaVip')
  }(name='HaVips'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='33E480C5-B46F-4CA5-B6FD-D77C746E86AB'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeHaVipsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHaVipsResponseBody(name='body'),
}

async function describeHaVips(request: DescribeHaVipsRequest): DescribeHaVipsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHaVips', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHighDefinitionMonitorLogAttributeRequest {
  instanceId: string(name='InstanceId', example='eip-wz9fi6qboho9fwgx7****', position='Query'),
  instanceType?: string(name='InstanceType', example='EIP', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeHighDefinitionMonitorLogAttributeResponseBody = {
  instanceId?: string(name='InstanceId', example='eip-wz9fi6qboho9fwgx7****'),
  instanceType?: string(name='InstanceType', example='EIP'),
  logProject?: string(name='LogProject', example='hdmonitor-cn-shenzhen-1658206966225390'),
  logStore?: string(name='LogStore', example='hdmonitor'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B457'),
  success?: string(name='Success', example='true'),
}

model DescribeHighDefinitionMonitorLogAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHighDefinitionMonitorLogAttributeResponseBody(name='body'),
}

async function describeHighDefinitionMonitorLogAttribute(request: DescribeHighDefinitionMonitorLogAttributeRequest): DescribeHighDefinitionMonitorLogAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHighDefinitionMonitorLogAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIPv6TranslatorAclListAttributesRequest {
  aclId: string(name='AclId', example='ipv6transacl-bp1de2xxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeIPv6TranslatorAclListAttributesResponseBody = {
  aclEntries?: {
    aclEntry?: [ 
    {
      aclEntryComment?: string(name='AclEntryComment', example='client IP'),
      aclEntryId?: string(name='AclEntryId', example='ipv6transaclentry-bp105jrsxxxx'),
      aclEntryIp?: string(name='AclEntryIp', example='12ab:0:0:dc30::0102/128'),
    }
  ](name='AclEntry')
  }(name='AclEntries'),
  aclId?: string(name='AclId', example='ipv6transacl-bp1de2xxxx'),
  aclName?: string(name='AclName', example='acl1'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='8B2F5262-6B57-43F2-xxxxx'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeIPv6TranslatorAclListAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIPv6TranslatorAclListAttributesResponseBody(name='body'),
}

async function describeIPv6TranslatorAclListAttributes(request: DescribeIPv6TranslatorAclListAttributesRequest): DescribeIPv6TranslatorAclListAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIPv6TranslatorAclListAttributes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIPv6TranslatorAclListsRequest {
  aclId?: string(name='AclId', example='ipv6transacl-bp1de2xxxx', position='Query'),
  aclName?: string(name='AclName', example='acl1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeIPv6TranslatorAclListsResponseBody = {
  ipv6TranslatorAcls?: {
    iPv6TranslatorAcl?: [ 
    {
      aclId?: string(name='AclId', example='ipv6transacl-bp1de2xxxx'),
      aclName?: string(name='AclName', example='acl1'),
    }
  ](name='IPv6TranslatorAcl')
  }(name='Ipv6TranslatorAcls'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='1'),
  requestId?: string(name='RequestId', example='8B2F5262-6B57-43F2-xxxxx'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeIPv6TranslatorAclListsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIPv6TranslatorAclListsResponseBody(name='body'),
}

async function describeIPv6TranslatorAclLists(request: DescribeIPv6TranslatorAclListsRequest): DescribeIPv6TranslatorAclListsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIPv6TranslatorAclLists', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIPv6TranslatorEntriesRequest {
  aclId?: string(name='AclId', example='ipv6transacl-bp1de2xxxx', position='Query'),
  aclStatus?: string(name='AclStatus', example='off', position='Query'),
  aclType?: string(name='AclType', example='white', position='Query'),
  allocateIpv6Addr?: string(name='AllocateIpv6Addr', example='2400:3200:1600::xx', position='Query'),
  allocateIpv6Port?: int32(name='AllocateIpv6Port', example='80', position='Query'),
  backendIpv4Addr?: string(name='BackendIpv4Addr', example='47.99.xx.xx', position='Query'),
  backendIpv4Port?: int32(name='BackendIpv4Port', example='80', position='Query'),
  clientToken?: string(name='ClientToken', example='sha1111', position='Query'),
  entryName?: string(name='EntryName', example='entryname', position='Query'),
  ipv6TranslatorEntryId?: string(name='Ipv6TranslatorEntryId', example='ipv6transentry-bp1g8bhrdexxxxx', position='Query'),
  ipv6TranslatorId?: string(name='Ipv6TranslatorId', example='ipv6trans-bp1858ysxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transProtocol?: string(name='TransProtocol', example='tcp', position='Query'),
}

model DescribeIPv6TranslatorEntriesResponseBody = {
  ipv6TranslatorEntries?: {
    ipv6TranslatorEntry?: [ 
    {
      aclId?: string(name='AclId', example='ipv6transacl-bp1de2xxxx'),
      aclStatus?: string(name='AclStatus', example='on'),
      aclType?: string(name='AclType', example='white'),
      allocateIpv6Addr?: string(name='AllocateIpv6Addr', example='2400:3200:1600::xxx'),
      allocateIpv6Port?: int32(name='AllocateIpv6Port', example='80'),
      backendIpv4Addr?: string(name='BackendIpv4Addr', example='47.99.xx.xx'),
      backendIpv4Port?: string(name='BackendIpv4Port', example='80'),
      entryBandwidth?: string(name='EntryBandwidth', example='1'),
      entryDescription?: string(name='EntryDescription', example='description'),
      entryName?: string(name='EntryName', example='name'),
      entryStatus?: string(name='EntryStatus', example='active'),
      ipv6TranslatorEntryId?: string(name='Ipv6TranslatorEntryId', example='ipv6transentry-bp1g8bhrdexxxxx'),
      ipv6TranslatorId?: string(name='Ipv6TranslatorId', example='ipv6trans-bp1858ysxxxxxx'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      transProtocol?: string(name='TransProtocol', example='tcp'),
    }
  ](name='Ipv6TranslatorEntry')
  }(name='Ipv6TranslatorEntries'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='3109D437-5D6D-4A28-B5F5-EF936DExxxx'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeIPv6TranslatorEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIPv6TranslatorEntriesResponseBody(name='body'),
}

async function describeIPv6TranslatorEntries(request: DescribeIPv6TranslatorEntriesRequest): DescribeIPv6TranslatorEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIPv6TranslatorEntries', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIPv6TranslatorsRequest {
  allocateIpv4Addr?: string(name='AllocateIpv4Addr', example='47.99.xx.xx', position='Query'),
  allocateIpv6Addr?: string(name='AllocateIpv6Addr', example='2400:3200:1600::xxx', position='Query'),
  businessStatus?: string(name='BusinessStatus', example='Normal', position='Query'),
  ipv6TranslatorId?: string(name='Ipv6TranslatorId', example='ipv6trans-bp1858ysxxxxxx', position='Query'),
  name?: string(name='Name', example='ipv6_1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='1', position='Query'),
  payType?: string(name='PayType', example='Prepay', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  spec?: string(name='Spec', example='small', position='Query'),
  status?: string(name='Status', example='active', position='Query'),
}

model DescribeIPv6TranslatorsResponseBody = {
  ipv6Translators?: {
    ipv6Translator?: [ 
    {
      allocateIpv4Addr?: string(name='AllocateIpv4Addr', example='47.99.xx.xx'),
      allocateIpv6Addr?: string(name='AllocateIpv6Addr', example='2400:3200:1600::xxx'),
      availableBandwidth?: string(name='AvailableBandwidth', example='1'),
      bandwidth?: int32(name='Bandwidth', example='1'),
      businessStatus?: string(name='BusinessStatus', example='Normal'),
      createTime?: long(name='CreateTime', example='1537151540000'),
      description?: string(name='Description', example='descriptionforinstance'),
      endTime?: long(name='EndTime', example='1539792000000'),
      ipv6TranslatorEntryIds?: {
        ipv6TranslatorEntryId?: [ string ](name='Ipv6TranslatorEntryId')
      }(name='Ipv6TranslatorEntryIds'),
      ipv6TranslatorId?: string(name='Ipv6TranslatorId', example='ipv6trans-bp1858ysxxxxxx'),
      name?: string(name='Name', example='test'),
      payType?: string(name='PayType', example='Prepay'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      spec?: string(name='Spec', example='small'),
      status?: string(name='Status', example='active'),
    }
  ](name='Ipv6Translator')
  }(name='Ipv6Translators'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='3109D437-5D6D-4A28-B5F5-EF936DExxxx'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeIPv6TranslatorsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIPv6TranslatorsResponseBody(name='body'),
}

async function describeIPv6Translators(request: DescribeIPv6TranslatorsRequest): DescribeIPv6TranslatorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIPv6Translators', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIpv6AddressesRequest {
  associatedInstanceId?: string(name='AssociatedInstanceId', example='i-2ze72wuqj4y3jl4f****', position='Query'),
  associatedInstanceType?: string(name='AssociatedInstanceType', example='EcsInstance', position='Query'),
  ipv6Address?: string(name='Ipv6Address', example='2408:XXXX:153:3921:851c:c435:7b12:1c5f', position='Query'),
  ipv6AddressId?: string(name='Ipv6AddressId', example='ipv6-2zen5j4axcp5l5qyy****', position='Query'),
  ipv6InternetBandwidthId?: string(name='Ipv6InternetBandwidthId', example='ipv6bw-uf6hcyzu65v98v3du****', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  networkType?: string(name='NetworkType', example='Private', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', example='cn-huhehaote', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchId?: string(name='VSwitchId', example='vsw-25navfgbue4g****', position='Query'),
  vpcId?: string(name='VpcId', example='vpc-bp15zckdt37pq72zv****', position='Query'),
}

model DescribeIpv6AddressesResponseBody = {
  ipv6Addresses?: {
    ipv6Address?: [ 
    {
      allocationTime?: string(name='AllocationTime', example='2020-12-20T14:56:09Z'),
      associatedInstanceId?: string(name='AssociatedInstanceId', example='i-2ze72wuqj4y3jl4f****'),
      associatedInstanceType?: string(name='AssociatedInstanceType', example='EcsInstance'),
      ipv6Address?: string(name='Ipv6Address', example='2408:XXXX:153:3921:851c:c435:7b12:1c5f'),
      ipv6AddressId?: string(name='Ipv6AddressId', example='ipv6-2zen5j4axcp5l5qyy****'),
      ipv6AddressName?: string(name='Ipv6AddressName', example='test'),
      ipv6GatewayId?: string(name='Ipv6GatewayId', example='ipv6gw-2zewg0l66s73b4k2q****'),
      ipv6InternetBandwidth?: {
        bandwidth?: int32(name='Bandwidth', example='5'),
        businessStatus?: string(name='BusinessStatus', example='Normal'),
        instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
        internetChargeType?: string(name='InternetChargeType', example='PayByTraffic'),
        ipv6InternetBandwidthId?: string(name='Ipv6InternetBandwidthId', example='ipv6bw-hp3b35oq1fj50kbv****'),
      }(name='Ipv6InternetBandwidth'),
      ipv6Isp?: string(name='Ipv6Isp', example='BGP'),
      networkType?: string(name='NetworkType', example='Private'),
      realBandwidth?: int32(name='RealBandwidth', example='5'),
      status?: string(name='Status', example='Available'),
      vSwitchId?: string(name='VSwitchId', example='vsw-25navfgbue4g****'),
      vpcId?: string(name='VpcId', example='vpc-bp15zckdt37pq72zv****'),
    }
  ](name='Ipv6Address')
  }(name='Ipv6Addresses'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='AA4486A8-B6AE-469E-AB09-820EF8ECFA2B'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeIpv6AddressesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIpv6AddressesResponseBody(name='body'),
}

async function describeIpv6Addresses(request: DescribeIpv6AddressesRequest): DescribeIpv6AddressesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIpv6Addresses', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIpv6EgressOnlyRulesRequest {
  instanceId?: string(name='InstanceId', example='i-123456xxxxxxxx', position='Query'),
  instanceType?: string(name='InstanceType', example='Ipv6Address', position='Query'),
  ipv6EgressOnlyRuleId?: string(name='Ipv6EgressOnlyRuleId', example='ipv6gwpy-123456xxxxxxxx', position='Query'),
  ipv6GatewayId: string(name='Ipv6GatewayId', example='ipv6gw-123456xxxxxxxx', position='Query'),
  name?: string(name='Name', example='rulename', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', example='cn-huhehaote', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeIpv6EgressOnlyRulesResponseBody = {
  ipv6EgressOnlyRules?: {
    ipv6EgressOnlyRule?: [ 
    {
      description?: string(name='Description', example='ruledescription'),
      instanceId?: string(name='InstanceId', example='i-123456xxxxxxxx'),
      instanceType?: string(name='InstanceType', example='Ipv6Address'),
      ipv6EgressOnlyRuleId?: string(name='Ipv6EgressOnlyRuleId', example='ipv6gwpy-123456xxxxxxxx'),
      name?: string(name='Name', example='rulename'),
      status?: string(name='Status', example='Available'),
    }
  ](name='Ipv6EgressOnlyRule')
  }(name='Ipv6EgressOnlyRules'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E16671B7-DEA6-48E0-8E9C-41913DAD44DD'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeIpv6EgressOnlyRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIpv6EgressOnlyRulesResponseBody(name='body'),
}

async function describeIpv6EgressOnlyRules(request: DescribeIpv6EgressOnlyRulesRequest): DescribeIpv6EgressOnlyRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIpv6EgressOnlyRules', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIpv6GatewayAttributeRequest {
  ipv6GatewayId: string(name='Ipv6GatewayId', example='ipv6gw-123456xxxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-huhehaote', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeIpv6GatewayAttributeResponseBody = {
  businessStatus?: string(name='BusinessStatus', example='Normal'),
  creationTime?: string(name='CreationTime', example='2018-12-05T09:21:35Z'),
  description?: string(name='Description', example='test'),
  expiredTime?: string(name='ExpiredTime', example='2018-12-05T09:21:35Z'),
  instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
  ipv6GatewayId?: string(name='Ipv6GatewayId', example='ipv6gw-123456xxxxxxxx'),
  name?: string(name='Name', example='test'),
  regionId?: string(name='RegionId', example='cn-huhehaote'),
  requestId?: string(name='RequestId', example='ipv6gw-hp33p10bdbt77xxxxxxxx'),
  resourceGroupId?: string(name='ResourceGroupId'),
  status?: string(name='Status', example='Available'),
  tags?: {
    tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag')
  }(name='Tags'),
  vpcId?: string(name='VpcId', example='vpc-123456xxxxxxxx'),
}

model DescribeIpv6GatewayAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIpv6GatewayAttributeResponseBody(name='body'),
}

async function describeIpv6GatewayAttribute(request: DescribeIpv6GatewayAttributeRequest): DescribeIpv6GatewayAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIpv6GatewayAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIpv6GatewaysRequest {
  ipv6GatewayId?: string(name='Ipv6GatewayId', example='ipv6gw-hp3rwmtmfhgis****', position='Query'),
  name?: string(name='Name', example='ipv6GW', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  regionId: string(name='RegionId', example='cn-huhehaote', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Query'),
  vpcId?: string(name='VpcId', example='vpc-123sedrfswd23****', position='Query'),
}

model DescribeIpv6GatewaysResponseBody = {
  ipv6Gateways?: {
    ipv6Gateway?: [ 
    {
      businessStatus?: string(name='BusinessStatus', example='Normal'),
      creationTime?: string(name='CreationTime', example='2020-12-20T14:51:23Z'),
      description?: string(name='Description', example='descriptionforIPv6GW'),
      expiredTime?: string(name='ExpiredTime', example='2021-12-20T14:51:23Z'),
      instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
      ipv6GatewayId?: string(name='Ipv6GatewayId', example='ipv6gw-hp3rwmtmfhgisipv6gw-hp3rwmtmfhgis****'),
      name?: string(name='Name', example='ipv6GW'),
      regionId?: string(name='RegionId', example='cn-huhehaote'),
      resourceGroupId?: string(name='ResourceGroupId'),
      status?: string(name='Status', example='Available'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      vpcId?: string(name='VpcId', example='vpc-123sedrfswd23****'),
    }
  ](name='Ipv6Gateway')
  }(name='Ipv6Gateways'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E3A06196-3E7C-490D-8F39-CB4B5A0CE8AD'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeIpv6GatewaysResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIpv6GatewaysResponseBody(name='body'),
}

async function describeIpv6Gateways(request: DescribeIpv6GatewaysRequest): DescribeIpv6GatewaysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIpv6Gateways', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNatGatewaysRequest {
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  instanceChargeType?: string(name='InstanceChargeType', example='PostPaid', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-bp1uewa15k4iy5770****', position='Query'),
  natType?: string(name='NatType', example='Enhanced', position='Query'),
  networkType?: string(name='NetworkType', example='internet', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='10', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='1', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  spec?: string(name='Spec', position='Query'),
  status?: string(name='Status', example='Available', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='KeyTest'),
      value?: string(name='Value', example='valueTest'),
    }
  ](name='Tag', position='Query'),
  vpcId?: string(name='VpcId', example='vpc-bp15zckdt37pq72z****', position='Query'),
  zoneId?: string(name='ZoneId', description='可用区', example='cn-hangzhou-b', position='Query'),
}

model DescribeNatGatewaysResponseBody = {
  natGateways?: {
    natGateway?: [ 
    {
      autoPay?: boolean(name='AutoPay', example='false'),
      businessStatus?: string(name='BusinessStatus', example='Normal'),
      creationTime?: string(name='CreationTime', example='2021-06-08T12:20:20Z'),
      deletionProtection?: boolean(name='DeletionProtection', example='true'),
      description?: string(name='Description', example='NAT'),
      ecsMetricEnabled?: boolean(name='EcsMetricEnabled', example='true'),
      eipBindMode?: string(name='EipBindMode', description='NAT网关的EIP绑定模式，取值：

MULTI_BINDED：多EIP网卡可见模式。
NAT：EIP普通模式，兼容IPv4网关。
说明 NAT网关的EIP绑定模式为EIP普通模式时，EIP将占用NAT网关所在交换机的一个私网IP，请确保NAT网关所在交换机内私网IP地址充足，如果NAT网关所在的交换机没有可用的空闲私网地址时，将无法绑定新的EIP。NAT网关的EIP绑定模式为EIP普通模式时，NAT网关支持绑定的EIP数量上限为50个。', example='MULTI_BINDED'),
      expiredTime?: string(name='ExpiredTime', example='2021-08-26T16:00Z'),
      forwardTableIds?: {
        forwardTableId?: [ string ](name='ForwardTableId')
      }(name='ForwardTableIds'),
      fullNatTableIds?: {
        fullNatTableId?: [ string ](name='FullNatTableId')
      }(name='FullNatTableIds'),
      icmpReplyEnabled?: boolean(name='IcmpReplyEnabled', example='false'),
      instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
      internetChargeType?: string(name='InternetChargeType', example='PayByLcu'),
      ipLists?: {
        ipList?: [ 
        {
          allocationId?: string(name='AllocationId', example='eip-m5egzuvp3dgixen6****'),
          ipAddress?: string(name='IpAddress', example='116.62.XX.XX'),
          privateIpAddress?: string(name='PrivateIpAddress', example='192.168.XX.XX'),
          snatEntryEnabled?: boolean(name='SnatEntryEnabled', example='false'),
          usingStatus?: string(name='UsingStatus', example='UsedByForwardTable'),
        }
      ](name='IpList')
      }(name='IpLists'),
      name?: string(name='Name', example='abc'),
      natGatewayId?: string(name='NatGatewayId', example='ngw-bp1047e2d4z7kf2ki****'),
      natGatewayPrivateInfo?: {
        eniInstanceId?: string(name='EniInstanceId', example='eni-m5eg4ozy5st8q3q4****'),
        eniType?: string(name='EniType', example='indirect'),
        izNo?: string(name='IzNo', example='cn-hangzhou-b'),
        maxBandwidth?: int32(name='MaxBandwidth', example='5120'),
        maxSessionEstablishRate?: int32(name='MaxSessionEstablishRate', example='100000'),
        maxSessionQuota?: int32(name='MaxSessionQuota', example='2000000'),
        privateIpAddress?: string(name='PrivateIpAddress', example='192.168.XX.XX'),
        vswitchId?: string(name='VswitchId', example='vsw-bp1s2laxhdf9ayjbo****'),
      }(name='NatGatewayPrivateInfo'),
      natType?: string(name='NatType', example='Enhanced'),
      networkType?: string(name='NetworkType', example='internet'),
      privateLinkEnabled?: boolean(name='PrivateLinkEnabled', description='默认不支持私网链接。设置为1则意味着支持私网链接', example='true'),
      privateLinkMode?: string(name='PrivateLinkMode', description='Fullnat：使用FullNat模式 Geneve：使用Geneve模式。 预估大部分场景都是非Geneve模式的。', example='FullNat'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4ph****'),
      securityProtectionEnabled?: boolean(name='SecurityProtectionEnabled', example='false'),
      snatTableIds?: {
        snatTableId?: [ string ](name='SnatTableId')
      }(name='SnatTableIds'),
      spec?: string(name='Spec', example='Small'),
      status?: string(name='Status', example='Creating'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', example='KeyTest'),
          tagValue?: string(name='TagValue', example='valueTest'),
        }
      ](name='Tag')
      }(name='Tags'),
      vpcId?: string(name='VpcId', example='vpc-bp15zckdt37pq72z****'),
    }
  ](name='NatGateway')
  }(name='NatGateways'),
  pageNumber?: int32(name='PageNumber', example='10'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeNatGatewaysResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNatGatewaysResponseBody(name='body'),
}

async function describeNatGateways(request: DescribeNatGatewaysRequest): DescribeNatGatewaysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNatGateways', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNetworkAclAttributesRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  networkAclId: string(name='NetworkAclId', example='nacl-a2do9e413e0spzasx****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeNetworkAclAttributesResponseBody = {
  networkAclAttribute?: {
    creationTime?: string(name='CreationTime', example='2021-12-25 11:33:27'),
    description?: string(name='Description', example='This is my NetworkAcl.'),
    egressAclEntries?: {
      egressAclEntry?: [ 
      {
        description?: string(name='Description', example='This is EgressAclEntries.'),
        destinationCidrIp?: string(name='DestinationCidrIp', example='10.0.0.0/24'),
        networkAclEntryId?: string(name='NetworkAclEntryId', example='nae-a2d447uw4tillxdcv****'),
        networkAclEntryName?: string(name='NetworkAclEntryName', example='acl-2'),
        policy?: string(name='Policy', example='accept'),
        port?: string(name='Port', example='-1/-1'),
        protocol?: string(name='Protocol', example='all'),
      }
    ](name='EgressAclEntry')
    }(name='EgressAclEntries'),
    ingressAclEntries?: {
      ingressAclEntry?: [ 
      {
        description?: string(name='Description', example='This is IngressAclEntries.'),
        networkAclEntryId?: string(name='NetworkAclEntryId', example='nae-a2dk86arlydmevfbg****'),
        networkAclEntryName?: string(name='NetworkAclEntryName', example='acl-3'),
        policy?: string(name='Policy', example='accept'),
        port?: string(name='Port', example='-1/-1'),
        protocol?: string(name='Protocol', example='all'),
        sourceCidrIp?: string(name='SourceCidrIp', example='10.0.0.0/24'),
      }
    ](name='IngressAclEntry')
    }(name='IngressAclEntries'),
    networkAclId?: string(name='NetworkAclId', example='nacl-a2do9e413e0spnhmj****'),
    networkAclName?: string(name='NetworkAclName', example='acl-1'),
    ownerId?: long(name='OwnerId', example='253460731706911258'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    resources?: {
      resource?: [ 
      {
        resourceId?: string(name='ResourceId', example='vsw-bp1de348lntdwxscd****'),
        resourceType?: string(name='ResourceType', example='VSwitch'),
        status?: string(name='Status', example='BINDED'),
      }
    ](name='Resource')
    }(name='Resources'),
    status?: string(name='Status', example='Available'),
    tags?: {
      tag?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Tag')
    }(name='Tags'),
    vpcId?: string(name='VpcId', example='vpc-a2d33rfpl72k5defr****'),
  }(name='NetworkAclAttribute'),
  requestId?: string(name='RequestId', example='F5905F9C-0161-4E72-9CB1-1F3F3CF6268A'),
}

model DescribeNetworkAclAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNetworkAclAttributesResponseBody(name='body'),
}

async function describeNetworkAclAttributes(request: DescribeNetworkAclAttributesRequest): DescribeNetworkAclAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNetworkAclAttributes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNetworkAclsRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  networkAclId?: string(name='NetworkAclId', example='nacl-bp1lhl0taikrbgnh****', position='Query'),
  networkAclName?: string(name='NetworkAclName', example='acl-1', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId?: string(name='ResourceId', example='vsw-bp1de348lntdwnhbg****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', example='VSwitch', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Query'),
  vpcId?: string(name='VpcId', example='vpc-m5ebpc2xh64mqm27e****', position='Query'),
}

model DescribeNetworkAclsResponseBody = {
  networkAcls?: {
    networkAcl?: [ 
    {
      creationTime?: string(name='CreationTime', example='2021-12-25 11:44:17'),
      description?: string(name='Description', example='This is my NetworkAcl.'),
      egressAclEntries?: {
        egressAclEntry?: [ 
        {
          description?: string(name='Description', example='This is EgressAclEntries.'),
          destinationCidrIp?: string(name='DestinationCidrIp', example='10.0.0.0/24'),
          networkAclEntryId?: string(name='NetworkAclEntryId', example='nae-a2d447uw4tillfvgb****'),
          networkAclEntryName?: string(name='NetworkAclEntryName', example='acl-2'),
          policy?: string(name='Policy', example='accept'),
          port?: string(name='Port', example='-1/-1'),
          protocol?: string(name='Protocol', example='all'),
        }
      ](name='EgressAclEntry')
      }(name='EgressAclEntries'),
      ingressAclEntries?: {
        ingressAclEntry?: [ 
        {
          description?: string(name='Description', example='This is IngressAclEntries.'),
          networkAclEntryId?: string(name='NetworkAclEntryId', example='nae-a2dk86arlydmezasw****'),
          networkAclEntryName?: string(name='NetworkAclEntryName', example='acl-3'),
          policy?: string(name='Policy', example='accept'),
          port?: string(name='Port', example='-1/-1'),
          protocol?: string(name='Protocol', example='all'),
          sourceCidrIp?: string(name='SourceCidrIp', example='10.0.0.0/24'),
        }
      ](name='IngressAclEntry')
      }(name='IngressAclEntries'),
      networkAclId?: string(name='NetworkAclId', example='nacl-a2do9e413e0spxscd****'),
      networkAclName?: string(name='NetworkAclName', example='acl-1'),
      ownerId?: long(name='OwnerId', example='253460731706911258'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resources?: {
        resource?: [ 
        {
          resourceId?: string(name='ResourceId', example='vsw-bp1de348lntdwcdf****'),
          resourceType?: string(name='ResourceType', example='VSwitch'),
          status?: string(name='Status', example='BINDED'),
        }
      ](name='Resource')
      }(name='Resources'),
      status?: string(name='Status', example='Available'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      vpcId?: string(name='VpcId', example='vpc-m5ebpc2xh64mqm27e****'),
    }
  ](name='NetworkAcl')
  }(name='NetworkAcls'),
  pageNumber?: string(name='PageNumber', example='1'),
  pageSize?: string(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='F7DDDC17-FA06-4AC2-8F35-59D2470FCFC1'),
  totalCount?: string(name='TotalCount', example='2'),
}

model DescribeNetworkAclsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNetworkAclsResponseBody(name='body'),
}

async function describeNetworkAcls(request: DescribeNetworkAclsRequest): DescribeNetworkAclsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNetworkAcls', 'POST', '/', 'json', false, 'json', request);
}

model DescribePhysicalConnectionLOARequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  instanceId: string(name='InstanceId', example='pc-bp1ca4wca27ex****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribePhysicalConnectionLOAResponseBody = {
  physicalConnectionLOAType?: {
    companyLocalizedName?: string(name='CompanyLocalizedName', example='company'),
    companyName?: string(name='CompanyName', example='test1234'),
    constructionTime?: string(name='ConstructionTime', example='2019-02-26T08:00:00Z'),
    instanceId?: string(name='InstanceId', example='pc-bp1ca4wca27****'),
    lineCode?: string(name='LineCode', example='aaa111'),
    lineLabel?: string(name='LineLabel', example='bbb222'),
    lineType?: string(name='LineType', example='FIBRE'),
    loaUrl?: string(name='LoaUrl', example='http://******'),
    PMInfo?: {
      PMInfo?: [ 
      {
        PMCertificateNo?: string(name='PMCertificateNo', example='12345671****'),
        PMCertificateType?: string(name='PMCertificateType', example='Other'),
        PMContactInfo?: string(name='PMContactInfo', example='18910010****'),
        PMGender?: string(name='PMGender', example='Male'),
        PMName?: string(name='PMName', example='name'),
      }
    ](name='PMInfo')
    }(name='PMInfo'),
    si?: string(name='SI', example='ctcu'),
    status?: string(name='Status', example='Available'),
  }(name='PhysicalConnectionLOAType'),
  requestId?: string(name='RequestId', example='318BB676-0A2B-43A0-9AD8-F1D34E93750F'),
}

model DescribePhysicalConnectionLOAResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePhysicalConnectionLOAResponseBody(name='body'),
}

async function describePhysicalConnectionLOA(request: DescribePhysicalConnectionLOARequest): DescribePhysicalConnectionLOAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePhysicalConnectionLOA', 'POST', '/', 'json', false, 'json', request);
}

model DescribePhysicalConnectionsRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001', position='Query'),
  filter?: [ 
    {
      key?: string(name='Key', example='Name'),
      value?: [ string ](name='Value', example='1'),
    }
  ](name='Filter', position='Query'),
  includeReservationData?: boolean(name='IncludeReservationData', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tags', position='Query'),
}

model DescribePhysicalConnectionsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  physicalConnectionSet?: {
    physicalConnectionType?: [ 
    {
      accessPointId?: string(name='AccessPointId', example='ap-cn-hangzhou-finance-yh-E'),
      accessPointType?: string(name='AccessPointType', example='VPC'),
      adLocation?: string(name='AdLocation'),
      bandwidth?: long(name='Bandwidth', example='10'),
      businessStatus?: string(name='BusinessStatus', example='Normal'),
      chargeType?: string(name='ChargeType', example='Prepaid'),
      circuitCode?: string(name='CircuitCode', example='longtel001'),
      creationTime?: string(name='CreationTime', example='2021-08-24T07:30:58Z'),
      description?: string(name='Description', example='desctest'),
      enabledTime?: string(name='EnabledTime', example='2021-08-24T07:33:18Z'),
      endTime?: string(name='EndTime', example='2022-04-24T16:00:00Z'),
      expectSpec?: string(name='ExpectSpec', example='50M'),
      hasReservationData?: string(name='HasReservationData', example='false'),
      lineOperator?: string(name='LineOperator', example='CT'),
      loaStatus?: string(name='LoaStatus', example='Available'),
      name?: string(name='Name', example='nametest'),
      orderMode?: string(name='OrderMode', example='PayByPhysicalConnectionOwner'),
      parentPhysicalConnectionAliUid?: long(name='ParentPhysicalConnectionAliUid', example='283117732402483989'),
      parentPhysicalConnectionId?: string(name='ParentPhysicalConnectionId', example='pc-bp1ciz7ekd2grn1as****'),
      peerLocation?: string(name='PeerLocation'),
      physicalConnectionId?: string(name='PhysicalConnectionId', example='pc-bp1ciz7ekd2grn1as****'),
      portNumber?: string(name='PortNumber', example='1/1/1'),
      portType?: string(name='PortType', example='10GBase-LR'),
      productType?: string(name='ProductType', example='PhysicalConnection'),
      redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId', example='pc-119mfjzm****'),
      reservationActiveTime?: string(name='ReservationActiveTime', example='2022-02-25T11:01:04Z'),
      reservationInternetChargeType?: string(name='ReservationInternetChargeType', example='PayByBandwidth'),
      reservationOrderType?: string(name='ReservationOrderType', example='RENEW'),
      resourceGroupId?: string(name='ResourceGroupId'),
      spec?: string(name='Spec', example='10G'),
      status?: string(name='Status', example='Enabled'),
      type?: string(name='Type', example='VPC'),
      virtualPhysicalConnectionCount?: int32(name='VirtualPhysicalConnectionCount', example='0'),
      vlanId?: string(name='VlanId', example='10'),
      vpconnStatus?: string(name='VpconnStatus', example='Confirmed'),
    }
  ](name='PhysicalConnectionType')
  }(name='PhysicalConnectionSet'),
  requestId?: string(name='RequestId', example='0E6D0EC4-7C91-53E2-9F65-64BF713114B0'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribePhysicalConnectionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePhysicalConnectionsResponseBody(name='body'),
}

async function describePhysicalConnections(request: DescribePhysicalConnectionsRequest): DescribePhysicalConnectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePhysicalConnections', 'POST', '/', 'json', false, 'json', request);
}

model DescribePublicIpAddressRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='100', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribePublicIpAddressResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='test'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='100'),
  publicIpAddress?: [ string ](name='PublicIpAddress', example='110.11.1.0/24'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribePublicIpAddressResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePublicIpAddressResponseBody(name='body'),
}

async function describePublicIpAddress(request: DescribePublicIpAddressRequest): DescribePublicIpAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePublicIpAddress', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint', example='vpc.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-qingdao'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId', example='611CB80C-B6A9-43DB-9E38-0B0AC3D9B58F'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRouteEntryListRequest {
  destCidrBlockList?: [ string ](name='DestCidrBlockList', position='Query'),
  destinationCidrBlock?: string(name='DestinationCidrBlock', example='192.168.2.0/24', position='Query'),
  ipVersion?: string(name='IpVersion', example='IPv4', position='Query'),
  maxResult?: int32(name='MaxResult', example='10', maximum=500, position='Query'),
  nextHopId?: string(name='NextHopId', example='vpn-bp10zyaph5cc8b7c7****', position='Query'),
  nextHopType?: string(name='NextHopType', example='Instance', position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeEntryId?: string(name='RouteEntryId', example='rte-bp1mnnr2al0naomnp****', position='Query'),
  routeEntryName?: string(name='RouteEntryName', example='abc', position='Query'),
  routeEntryType?: string(name='RouteEntryType', example='System', position='Query'),
  routeTableId: string(name='RouteTableId', example='vtb-bp1r9pvl4xen8s9ju****', position='Query'),
  serviceType?: string(name='ServiceType', example='TR', position='Query'),
}

model DescribeRouteEntryListResponseBody = {
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='14A07460-EBE7-47CA-9757-12CC4761D47A'),
  routeEntrys?: {
    routeEntry?: [ 
    {
      description?: string(name='Description', example='RouteEntryDescription'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', example='192.168.2.0/24'),
      gmtModified?: string(name='GmtModified', example='2022-05-09T03:00:07Z'),
      ipVersion?: string(name='IpVersion', example='IPv4'),
      nextHops?: {
        nextHop?: [ 
        {
          enabled?: int32(name='Enabled', example='1'),
          nextHopId?: string(name='NextHopId', example='vpn-bp10zyaph5cc8b7c7****'),
          nextHopRegionId?: string(name='NextHopRegionId', example='cn-hangzhou'),
          nextHopRelatedInfo?: {
            instanceId?: string(name='InstanceId', example='vpc-bp1t36rn9l53iwbsf****'),
            instanceType?: string(name='InstanceType', example='VPC'),
            regionId?: string(name='RegionId', example='ch-hangzhou'),
          }(name='NextHopRelatedInfo'),
          nextHopType?: string(name='NextHopType', example='Instance'),
          weight?: int32(name='Weight', example='100'),
        }
      ](name='NextHop')
      }(name='NextHops'),
      routeEntryId?: string(name='RouteEntryId', example='rte-bp1mnnr2al0naomnp****'),
      routeEntryName?: string(name='RouteEntryName', example='aaa'),
      routeTableId?: string(name='RouteTableId', example='vtb-bp15w5q90d2rk3bww****'),
      serviceType?: string(name='ServiceType', example='TR'),
      status?: string(name='Status', example='Available'),
      type?: string(name='Type', example='Custom'),
    }
  ](name='RouteEntry')
  }(name='RouteEntrys'),
}

model DescribeRouteEntryListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRouteEntryListResponseBody(name='body'),
}

async function describeRouteEntryList(request: DescribeRouteEntryListRequest): DescribeRouteEntryListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRouteEntryList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRouteTableListRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='ap-southeast-6', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzdvzu2****', position='Query'),
  routeTableName?: string(name='RouteTableName', example='doctest', position='Query'),
  routerId?: string(name='RouterId', example='vrt-bp1lhl0taikrteen8****', position='Query'),
  routerType?: string(name='RouterType', example='VRouter', position='Query'),
  vpcId?: string(name='VpcId', example='vpc-bp15zckdt37pq72****', position='Query'),
}

model DescribeRouteTableListResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='DC668356-BCB4-42FD-9BC3-FA2B2E04B634'),
  routerTableList?: {
    routerTableListType?: [ 
    {
      associateType?: string(name='AssociateType', example='VSwitch'),
      creationTime?: string(name='CreationTime', example='2021-08-22T10:40:25Z'),
      description?: string(name='Description', example='This is Route Table.'),
      gatewayIds?: {
        gatewayIds?: [ string ](name='GatewayIds')
      }(name='GatewayIds'),
      ownerId?: long(name='OwnerId', example='253460731706911258'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph****'),
      routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzdvzu2****'),
      routeTableName?: string(name='RouteTableName', example='doctest'),
      routeTableType?: string(name='RouteTableType', example='System'),
      routerId?: string(name='RouterId', example='vrt-bp1lhl0taikrteen8****'),
      routerType?: string(name='RouterType', example='VRouter'),
      status?: string(name='Status', example='Available'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', example='type'),
          value?: string(name='Value', example='ingress'),
        }
      ](name='Tag')
      }(name='Tags'),
      vSwitchIds?: {
        vSwitchId?: [ string ](name='VSwitchId')
      }(name='VSwitchIds'),
      vpcId?: string(name='VpcId', example='vpc-bp15zckdt37pq72****'),
    }
  ](name='RouterTableListType')
  }(name='RouterTableList'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeRouteTableListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRouteTableListResponseBody(name='body'),
}

async function describeRouteTableList(request: DescribeRouteTableListRequest): DescribeRouteTableListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRouteTableList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRouteTablesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazccb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId?: string(name='RouteTableId', example='rtb-bp12mw1f8k3jgygk9****', position='Query'),
  routeTableName?: string(name='RouteTableName', example='RouteTable-1', position='Query'),
  routerId?: string(name='RouterId', example='vtb-bp1krxxzp0c29fmon****', position='Query'),
  routerType?: string(name='RouterType', example='VRouter', position='Query'),
  type?: string(name='Type', example='custom', position='Query'),
  vRouterId?: string(name='VRouterId', example='vtb-bp1krxxzp0c29fmon****', position='Query'),
}

model DescribeRouteTablesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='DC668356-BCB4-42FD-9BC3-FA2B2E04B634'),
  routeTables?: {
    routeTable?: [ 
    {
      creationTime?: string(name='CreationTime', example='2017-08-22T10:40:25Z'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph****'),
      routeEntrys?: {
        routeEntry?: [ 
        {
          description?: string(name='Description', example='RouteEntryDescription'),
          destinationCidrBlock?: string(name='DestinationCidrBlock', example='192.168.0.1/24'),
          instanceId?: string(name='InstanceId', example='ri-2zeo3xzyf38r4urzd****'),
          nextHopType?: string(name='NextHopType', example='local'),
          nextHops?: {
            nextHop?: [ 
            {
              enabled?: int32(name='Enabled', example='0'),
              nextHopId?: string(name='NextHopId', example='ri-2zeo3xzyf38r4urzdpvqw'),
              nextHopType?: string(name='NextHopType', example='HaVip'),
              weight?: int32(name='Weight', example='80'),
            }
          ](name='NextHop')
          }(name='NextHops'),
          routeEntryId?: string(name='RouteEntryId', example='rte-bp1mnnr2al0naomnpxxx'),
          routeEntryName?: string(name='RouteEntryName', example='test'),
          routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzdvzu2****'),
          status?: string(name='Status', example='Pending'),
          type?: string(name='Type', example='System'),
        }
      ](name='RouteEntry')
      }(name='RouteEntrys'),
      routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzdvzu2****'),
      routeTableType?: string(name='RouteTableType', example='System'),
      status?: string(name='Status', example='Available'),
      vRouterId?: string(name='VRouterId', example='vrt-bp1lhl0taikrteen8****'),
      vSwitchIds?: {
        vSwitchId?: [ string ](name='VSwitchId')
      }(name='VSwitchIds'),
    }
  ](name='RouteTable')
  }(name='RouteTables'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeRouteTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRouteTablesResponseBody(name='body'),
}

async function describeRouteTables(request: DescribeRouteTablesRequest): DescribeRouteTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRouteTables', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRouterInterfaceAttributeRequest {
  instanceId: string(name='InstanceId', example='ri-m5egfc10sednwk2yt****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-qingdao', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRouterInterfaceAttributeResponseBody = {
  accessPointId?: string(name='AccessPointId', example='ap-cn-qingdao-ls-A'),
  bandwidth?: int32(name='Bandwidth', example='2'),
  businessStatus?: string(name='BusinessStatus', example='Normal'),
  chargeType?: string(name='ChargeType', example='AfterPay'),
  code?: string(name='Code', example='200'),
  connectedTime?: string(name='ConnectedTime', example='2022-04-14T08:58:04Z'),
  creationTime?: string(name='CreationTime', example='2022-04-14T08:57:24Z'),
  crossBorder?: boolean(name='CrossBorder', example='false'),
  description?: string(name='Description'),
  endTime?: string(name='EndTime', example='2999-09-08T16:00:00Z'),
  gmtModified?: string(name='GmtModified', example='2022-04-28T10:02:12Z'),
  hasReservationData?: string(name='HasReservationData', example='false'),
  hcRate?: int32(name='HcRate', example='2'),
  hcThreshold?: int32(name='HcThreshold', example='8'),
  healthCheckSourceIp?: string(name='HealthCheckSourceIp', example='1.1.XX.XX'),
  healthCheckStatus?: string(name='HealthCheckStatus', example='normal'),
  healthCheckTargetIp?: string(name='HealthCheckTargetIp', example='2.2.XX.XX'),
  message?: string(name='Message', example='successful'),
  name?: string(name='Name'),
  oppositeAccessPointId?: string(name='OppositeAccessPointId', example='ap-cn-qingdao-ls-B'),
  oppositeBandwidth?: int32(name='OppositeBandwidth', example='0'),
  oppositeInterfaceBusinessStatus?: string(name='OppositeInterfaceBusinessStatus', example='Normal'),
  oppositeInterfaceId?: string(name='OppositeInterfaceId', example='ri-bp1xkrzttximaoxbl****'),
  oppositeInterfaceOwnerId?: string(name='OppositeInterfaceOwnerId', example='1321932713****'),
  oppositeInterfaceSpec?: string(name='OppositeInterfaceSpec', example='Negative'),
  oppositeInterfaceStatus?: string(name='OppositeInterfaceStatus', example='Active'),
  oppositeRegionId?: string(name='OppositeRegionId', example='cn-hangzhou'),
  oppositeRouterId?: string(name='OppositeRouterId', example='vrt-bp11xvy6lb9photuu****'),
  oppositeRouterType?: string(name='OppositeRouterType', example='VRouter'),
  oppositeVpcInstanceId?: string(name='OppositeVpcInstanceId', example='vpc-bp1b49rqrybk45nio****'),
  requestId?: string(name='RequestId', example='01818199-04F6-47F4-9ADF-7CC824CF57A4'),
  reservationActiveTime?: string(name='ReservationActiveTime', example='2022-06-11T16:00:00Z'),
  reservationBandwidth?: string(name='ReservationBandwidth', example='100'),
  reservationInternetChargeType?: string(name='ReservationInternetChargeType', example='PayByBandwidth'),
  reservationOrderType?: string(name='ReservationOrderType', example='RENEW'),
  role?: string(name='Role', example='InitiatingSide'),
  routerId?: string(name='RouterId', example='vbr-m5ex0xf63xk8s5bob****'),
  routerInterfaceId?: string(name='RouterInterfaceId', example='ri-m5egfc10sednwk2yt****'),
  routerType?: string(name='RouterType', example='VRouter'),
  spec?: string(name='Spec', example='Mini.2'),
  status?: string(name='Status', example='Active'),
  success?: boolean(name='Success', example='true'),
  vpcInstanceId?: string(name='VpcInstanceId', example='vpc-bp1b49rqrybk45nio****'),
}

model DescribeRouterInterfaceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRouterInterfaceAttributeResponseBody(name='body'),
}

async function describeRouterInterfaceAttribute(request: DescribeRouterInterfaceAttributeRequest): DescribeRouterInterfaceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRouterInterfaceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRouterInterfacesRequest {
  filter?: [ 
    {
      key?: string(name='Key', example='Filter.1.Status'),
      value?: [ string ](name='Value', example='Filter.1.Active 1'),
    }
  ](name='Filter', position='Query'),
  includeReservationData?: boolean(name='IncludeReservationData', example='false', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRouterInterfacesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='C7F6FCBD-F9CC-4501-8EF3-CDC9577CAE45'),
  routerInterfaceSet?: {
    routerInterfaceType?: [ 
    {
      accessPointId?: string(name='AccessPointId', example='ap-cn-shanghaiSZ-****'),
      bandwidth?: int32(name='Bandwidth', example='10'),
      businessStatus?: string(name='BusinessStatus', example='Normal'),
      chargeType?: string(name='ChargeType', example='PayByTraffic'),
      connectedTime?: string(name='ConnectedTime', example='2021-06-08T12:20:55'),
      creationTime?: string(name='CreationTime', example='2021-06-08T12:20:55'),
      crossBorder?: boolean(name='CrossBorder', example='false'),
      description?: string(name='Description'),
      endTime?: string(name='EndTime', example='2021-06-08T12:20:55'),
      fastLinkMode?: boolean(name='FastLinkMode', example='false'),
      hasReservationData?: string(name='HasReservationData', example='false'),
      hcRate?: int32(name='HcRate', example='1'),
      hcThreshold?: int32(name='HcThreshold', example='2'),
      healthCheckSourceIp?: string(name='HealthCheckSourceIp', example='116.62.XX.XX'),
      healthCheckTargetIp?: string(name='HealthCheckTargetIp', example='116.62.XX.XX'),
      ipv6Status?: string(name='Ipv6Status', example='on'),
      name?: string(name='Name', example='test'),
      oppositeAccessPointId?: string(name='OppositeAccessPointId', example='ap-cn-shanghaiSZ-****'),
      oppositeBandwidth?: int32(name='OppositeBandwidth', example='12'),
      oppositeInterfaceBusinessStatus?: string(name='OppositeInterfaceBusinessStatus', example='Normal'),
      oppositeInterfaceId?: string(name='OppositeInterfaceId', example='ri-bp1itx13bwe6f2wfh****'),
      oppositeInterfaceOwnerId?: string(name='OppositeInterfaceOwnerId', example='271598332402530847'),
      oppositeInterfaceSpec?: string(name='OppositeInterfaceSpec', example='Large'),
      oppositeInterfaceStatus?: string(name='OppositeInterfaceStatus', example='Normal'),
      oppositeRegionId?: string(name='OppositeRegionId', example='cn-shanghai'),
      oppositeRouterId?: string(name='OppositeRouterId', example='vrt-bp1d3bxtdv68tfd7g****'),
      oppositeRouterType?: string(name='OppositeRouterType', example='VRouter'),
      oppositeVpcInstanceId?: string(name='OppositeVpcInstanceId', example='vpc-bp1qpo0kug3a20qqe****'),
      reservationActiveTime?: string(name='ReservationActiveTime', example='2021-03-11T16:00:00Z'),
      reservationBandwidth?: string(name='ReservationBandwidth', example='10'),
      reservationInternetChargeType?: string(name='ReservationInternetChargeType', example='PayByBandwidth'),
      reservationOrderType?: string(name='ReservationOrderType', example='RENEWCHANGE'),
      role?: string(name='Role', example='InitiatingSide'),
      routerId?: string(name='RouterId', example='vrt-bp1d3bxtdv68tfd7g****'),
      routerInterfaceId?: string(name='RouterInterfaceId', example='ri-2zenfgfpyu3v93koa****'),
      routerType?: string(name='RouterType', example='VRouter'),
      spec?: string(name='Spec', example='Large'),
      status?: string(name='Status', example='active'),
      vpcInstanceId?: string(name='VpcInstanceId', example='vpc-2ze3tq4uxhysg717x****'),
    }
  ](name='RouterInterfaceType')
  }(name='RouterInterfaceSet'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeRouterInterfacesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRouterInterfacesResponseBody(name='body'),
}

async function describeRouterInterfaces(request: DescribeRouterInterfacesRequest): DescribeRouterInterfacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRouterInterfaces', 'POST', '/', 'json', false, 'json', request);
}

model DescribeServerRelatedGlobalAccelerationInstancesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  serverId: string(name='ServerId', example='i-12s3sdf****', position='Query'),
  serverType?: string(name='ServerType', example='EcsInstance', position='Query'),
}

model DescribeServerRelatedGlobalAccelerationInstancesResponseBody = {
  globalAccelerationInstances?: {
    globalAccelerationInstance?: [ 
    {
      globalAccelerationInstanceId?: string(name='GlobalAccelerationInstanceId', example='ga-t4nku6vv9****'),
      ipAddress?: string(name='IpAddress', example='12.34.56.78'),
      regionId?: string(name='RegionId', example='ap-southeast-1'),
      serverIpAddress?: string(name='ServerIpAddress', example='172.24.52.234'),
    }
  ](name='GlobalAccelerationInstance')
  }(name='GlobalAccelerationInstances'),
  requestId?: string(name='RequestId', example='A8252014-D8DE-4D85-AF35-AFEXXXXXXX'),
}

model DescribeServerRelatedGlobalAccelerationInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServerRelatedGlobalAccelerationInstancesResponseBody(name='body'),
}

async function describeServerRelatedGlobalAccelerationInstances(request: DescribeServerRelatedGlobalAccelerationInstancesRequest): DescribeServerRelatedGlobalAccelerationInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeServerRelatedGlobalAccelerationInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSnatTableEntriesRequest {
  natGatewayId?: string(name='NatGatewayId', example='ngw-bp1uewa15k4iy5770****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  snatEntryId?: string(name='SnatEntryId', example='snat-8vbae8uqh7rjpk7d2****', position='Query'),
  snatEntryName?: string(name='SnatEntryName', example='SnatEntry-1', position='Query'),
  snatIp?: string(name='SnatIp', example='116.22.XX.XX', position='Query'),
  snatTableId?: string(name='SnatTableId', example='stb-8vbczigrhop8x5u3t****', position='Query'),
  sourceCIDR?: string(name='SourceCIDR', example='116.22.XX.XX/24', position='Query'),
  sourceVSwitchId?: string(name='SourceVSwitchId', example='vsw-3xbjkhjshjdf****', position='Query'),
}

model DescribeSnatTableEntriesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='5'),
  requestId?: string(name='RequestId', example='6D7E89B1-1C5B-412B-8585-4908E222EED5'),
  snatTableEntries?: {
    snatTableEntry?: [ 
    {
      snatEntryId?: string(name='SnatEntryId', example='snat-kmd6nv8fy****'),
      snatEntryName?: string(name='SnatEntryName', example='SnatEntry-1'),
      snatIp?: string(name='SnatIp', example='116.22.XX.XX'),
      snatTableId?: string(name='SnatTableId', example='stb-gz3r3odawdgffde****'),
      sourceCIDR?: string(name='SourceCIDR', example='116.22.XX.XX/24'),
      sourceVSwitchId?: string(name='SourceVSwitchId', example='vsw-3xbdsffvfgdfds****'),
      status?: string(name='Status', example='Pending'),
    }
  ](name='SnatTableEntry')
  }(name='SnatTableEntries'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeSnatTableEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSnatTableEntriesResponseBody(name='body'),
}

async function describeSnatTableEntries(request: DescribeSnatTableEntriesRequest): DescribeSnatTableEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSnatTableEntries', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSslVpnClientCertRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sslVpnClientCertId: string(name='SslVpnClientCertId', example='vsc-bp17r58rjf5r1gjyr****', position='Query'),
}

model DescribeSslVpnClientCertResponseBody = {
  caCert?: string(name='CaCert'),
  clientCert?: string(name='ClientCert'),
  clientConfig?: string(name='ClientConfig'),
  clientKey?: string(name='ClientKey'),
  createTime?: long(name='CreateTime', example='1552550980000'),
  endTime?: long(name='EndTime', example='1647158980000'),
  name?: string(name='Name', example='nametest'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
  sslVpnClientCertId?: string(name='SslVpnClientCertId', example='vsc-bp13k5mp4tg8v3z9b****'),
  sslVpnServerId?: string(name='SslVpnServerId', example='vss-bp155e9yclsg1xgq4****'),
  status?: string(name='Status', example='normal'),
}

model DescribeSslVpnClientCertResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSslVpnClientCertResponseBody(name='body'),
}

async function describeSslVpnClientCert(request: DescribeSslVpnClientCertRequest): DescribeSslVpnClientCertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSslVpnClientCert', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSslVpnClientCertsRequest {
  name?: string(name='Name', example='cert1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sslVpnClientCertId?: string(name='SslVpnClientCertId', example='vsc-bp1n8wcf134yl0osr****', position='Query'),
  sslVpnServerId?: string(name='SslVpnServerId', example='vss-bp18q7hzj6largv4v****', position='Query'),
}

model DescribeSslVpnClientCertsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
  sslVpnClientCertKeys?: {
    sslVpnClientCertKey?: [ 
    {
      createTime?: long(name='CreateTime', example='1492747187000'),
      endTime?: long(name='EndTime', example='1494966335000'),
      name?: string(name='Name', example='cert1'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      sslVpnClientCertId?: string(name='SslVpnClientCertId', example='vsc-bp1n8wcf134yl0osr****'),
      sslVpnServerId?: string(name='SslVpnServerId', example='vss-bp18q7hzj6largv4v****'),
      status?: string(name='Status', example='normal'),
    }
  ](name='SslVpnClientCertKey')
  }(name='SslVpnClientCertKeys'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeSslVpnClientCertsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSslVpnClientCertsResponseBody(name='body'),
}

async function describeSslVpnClientCerts(request: DescribeSslVpnClientCertsRequest): DescribeSslVpnClientCertsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSslVpnClientCerts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSslVpnServersRequest {
  name?: string(name='Name', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sslVpnServerId?: string(name='SslVpnServerId', example='vss-bp15j3du13gq1dgey****', position='Query'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1on0xae9d771ggi****', position='Query'),
}

model DescribeSslVpnServersResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='D350187B-EA41-4577-950B-95434C8302E1'),
  sslVpnServers?: {
    sslVpnServer?: [ 
    {
      cipher?: string(name='Cipher', example='AES-128-CBC'),
      clientIpPool?: string(name='ClientIpPool', example='10.10.1.0/24'),
      compress?: boolean(name='Compress', example='false'),
      connections?: int32(name='Connections', example='0'),
      createTime?: long(name='CreateTime', example='1613800884000'),
      enableMultiFactorAuth?: boolean(name='EnableMultiFactorAuth', example='true'),
      iDaaSInstanceId?: string(name='IDaaSInstanceId', example='idaas-cn-hangzhou-****'),
      iDaaSRegionId?: string(name='IDaaSRegionId', example='cn-hangzhou'),
      internetIp?: string(name='InternetIp', example='47.5.XX.XX'),
      localSubnet?: string(name='LocalSubnet', example='192.168.0.0/24'),
      maxConnections?: int32(name='MaxConnections', example='5'),
      name?: string(name='Name', example='test'),
      port?: int32(name='Port', example='1194'),
      proto?: string(name='Proto', example='UDP'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      sslVpnServerId?: string(name='SslVpnServerId', example='vss-bp15j3du13gq1dgey****'),
      vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1on0xae9d771ggi****'),
    }
  ](name='SslVpnServer')
  }(name='SslVpnServers'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeSslVpnServersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSslVpnServersResponseBody(name='body'),
}

async function describeSslVpnServers(request: DescribeSslVpnServersRequest): DescribeSslVpnServersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSslVpnServers', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagKeysRequest {
  keyword?: string(name='Keyword', example='keyword', position='Query'),
  maxResult?: int32(name='MaxResult', example='50', maximum=500, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', example='VPC', position='Query'),
}

model DescribeTagKeysResponseBody = {
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='DE65F6B7-7566-4802-9007-96F2494AC512'),
  tagKeys?: {
    tagKey?: [ 
    {
      tagKey?: string(name='TagKey', example='FinanceDept'),
      type?: string(name='Type', example='Custom'),
    }
  ](name='TagKey')
  }(name='TagKeys'),
}

model DescribeTagKeysResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagKeysResponseBody(name='body'),
}

async function describeTagKeys(request: DescribeTagKeysRequest): DescribeTagKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagKeys', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagKeysForExpressConnectRequest {
  keyword?: string(name='Keyword', example='keyword', position='Query'),
  maxResult?: int32(name='MaxResult', example='20', maximum=500, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', example='PHYSICALCONNECTION', position='Query'),
}

model DescribeTagKeysForExpressConnectResponseBody = {
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  tagKeys?: {
    tagKey?: [ 
    {
      tagKey?: string(name='TagKey', example='FinanceDept'),
      type?: string(name='Type', example='PHYSICALCONNECTION'),
    }
  ](name='TagKey')
  }(name='TagKeys'),
}

model DescribeTagKeysForExpressConnectResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagKeysForExpressConnectResponseBody(name='body'),
}

async function describeTagKeysForExpressConnect(request: DescribeTagKeysForExpressConnectRequest): DescribeTagKeysForExpressConnectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagKeysForExpressConnect', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagsRequest {
  maxResult?: int32(name='MaxResult', example='50', maximum=500, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', example='VPC', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tag', position='Query'),
}

model DescribeTagsResponseBody = {
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='C46FF5A8-C5F0-4024-8262-B16B639225A0'),
  tagResources?: {
    tagResource?: [ 
    {
      tagKey?: string(name='TagKey', example='FinanceDept'),
      tagValue?: string(name='TagValue', example='FinanceJoshua'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model DescribeTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagsResponseBody(name='body'),
}

async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTags', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVRoutersRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vRouterId?: string(name='VRouterId', example='vrt-bp1lhl0taikrteen****', position='Query'),
}

model DescribeVRoutersResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  totalCount?: int32(name='TotalCount', example='1'),
  vRouters?: {
    vRouter?: [ 
    {
      creationTime?: string(name='CreationTime', example='2018-03-22T07:46:20Z'),
      description?: string(name='Description', example='abc'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      routeTableIds?: {
        routeTableId?: [ string ](name='RouteTableId')
      }(name='RouteTableIds'),
      vRouterId?: string(name='VRouterId', example='vrt-rj98khsezfqpjrxmv****'),
      vRouterName?: string(name='VRouterName', example='doctest'),
      vpcId?: string(name='VpcId', example='vpc-rj905wotv6y030t1****'),
    }
  ](name='VRouter')
  }(name='VRouters'),
}

model DescribeVRoutersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVRoutersResponseBody(name='body'),
}

async function describeVRouters(request: DescribeVRoutersRequest): DescribeVRoutersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVRouters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVSwitchAttributesRequest {
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchId: string(name='VSwitchId', example='vsw-25naue4g****', position='Query'),
}

model DescribeVSwitchAttributesResponseBody = {
  availableIpAddressCount?: long(name='AvailableIpAddressCount', example='12'),
  cidrBlock?: string(name='CidrBlock', example='192.168.0.1/24'),
  creationTime?: string(name='CreationTime', example='2021-08-22T10:40:25Z'),
  description?: string(name='Description', example='abc'),
  ipv6CidrBlock?: string(name='Ipv6CidrBlock', example='2408:XXXX:3c5:44e::/64'),
  isDefault?: boolean(name='IsDefault', example='false'),
  networkAclId?: string(name='NetworkAclId', example='1'),
  ownerId?: long(name='OwnerId', example='287683832402436789'),
  requestId?: string(name='RequestId', example='7B48B4B9-1EAD-469F-B488-594DAB4B6A1A'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph****'),
  routeTable?: {
    routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzdv****'),
    routeTableType?: string(name='RouteTableType', example='System'),
  }(name='RouteTable'),
  status?: string(name='Status', example='Pending'),
  tags?: {
    tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag')
  }(name='Tags'),
  vSwitchId?: string(name='VSwitchId', example='vsw-25b7pv15t****'),
  vSwitchName?: string(name='VSwitchName', example='test'),
  vpcId?: string(name='VpcId', example='vpc-257gq642n****'),
  zoneId?: string(name='ZoneId', example='cn-beijing-a'),
}

model DescribeVSwitchAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVSwitchAttributesResponseBody(name='body'),
}

async function describeVSwitchAttributes(request: DescribeVSwitchAttributesRequest): DescribeVSwitchAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVSwitchAttributes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVSwitchesRequest {
  dryRun?: boolean(name='DryRun', example='true', position='Query'),
  isDefault?: boolean(name='IsDefault', example='true', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4ph****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzdvzu2****', position='Query'),
  vSwitchId?: string(name='VSwitchId', example='vsw-23dscddcffvf3****', position='Query'),
  vSwitchName?: string(name='VSwitchName', example='vSwitch', position='Query'),
  vSwitchOwnerId?: long(name='VSwitchOwnerId', example='2546073170691****', position='Query'),
  vpcId?: string(name='VpcId', example='vpc-25cdvfeq58pl****', position='Query'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-d', position='Query'),
}

model DescribeVSwitchesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='9A572171-4E27-40D1-BD36-D26C9E71E29E'),
  totalCount?: int32(name='TotalCount', example='1'),
  vSwitches?: {
    vSwitch?: [ 
    {
      availableIpAddressCount?: long(name='AvailableIpAddressCount', example='1'),
      cidrBlock?: string(name='CidrBlock', example='172.16.0.0/24'),
      creationTime?: string(name='CreationTime', example='2022-01-18T12:43:57Z'),
      description?: string(name='Description', example='VSwitchDescription'),
      ipv6CidrBlock?: string(name='Ipv6CidrBlock', example='2408:4002:10c4:4e03::/64'),
      isDefault?: boolean(name='IsDefault', example='true'),
      networkAclId?: string(name='NetworkAclId', example='nacl-a2do9e413e0spzasx****'),
      ownerId?: long(name='OwnerId', example='253460731706911258'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph6aiy****'),
      routeTable?: {
        routeTableId?: string(name='RouteTableId', example='vrt-bp145q7glnuzdv****'),
        routeTableType?: string(name='RouteTableType', example='System'),
      }(name='RouteTable'),
      status?: string(name='Status', example='Available'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', example='department'),
          value?: string(name='Value', example='dev'),
        }
      ](name='Tag')
      }(name='Tags'),
      vSwitchId?: string(name='VSwitchId', example='vsw-25bcdxs7pv1****'),
      vSwitchName?: string(name='VSwitchName', example='vSwitch'),
      vpcId?: string(name='VpcId', example='vpc-257gcdcdq64****'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-d'),
    }
  ](name='VSwitch')
  }(name='VSwitches'),
}

model DescribeVSwitchesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVSwitchesResponseBody(name='body'),
}

async function describeVSwitches(request: DescribeVSwitchesRequest): DescribeVSwitchesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVSwitches', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVbrHaRequest {
  clientToken?: string(name='ClientToken', example='CBCE910E-D396-4944-8****', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vbrHaId?: string(name='VbrHaId', example='vbrha-sa1sxheuxtd98****', position='Query'),
  vbrId?: string(name='VbrId', example='vbr-bp1jcg5cmxjbl9xgc****', position='Query'),
}

model DescribeVbrHaResponseBody = {
  creationTime?: string(name='CreationTime', example='2021-06-08T12:20:55'),
  description?: string(name='Description', example='desc'),
  name?: string(name='Name', example='VBRHa'),
  peerVbrId?: string(name='PeerVbrId', example='vbr-bp12mw1f8k3jgygk9****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  status?: string(name='Status', example='Active'),
  vbrHaId?: string(name='VbrHaId', example='vbrha-sa1sxheuxtd98****'),
  vbrId?: string(name='VbrId', example='vbr-bp1jcg5cmxjbl9xgc****'),
}

model DescribeVbrHaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVbrHaResponseBody(name='body'),
}

async function describeVbrHa(request: DescribeVbrHaRequest): DescribeVbrHaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVbrHa', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVcoRouteEntriesRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='ap-southeast-2', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeEntryType?: string(name='RouteEntryType', example='custom', position='Query'),
  vpnConnectionId: string(name='VpnConnectionId', example='vco-p0w2jpkhi2eeop6q6****', position='Query'),
}

model DescribeVcoRouteEntriesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E18980E8-C8C2-31BD-8156-AE2BBDEC87E1'),
  totalCount?: int32(name='TotalCount', example='1'),
  vcoRouteEntries?: [ 
    {
      asPath?: string(name='AsPath', example='[12000]'),
      community?: string(name='Community', example='65535:65510'),
      createTime?: long(name='CreateTime', example='1658217008000'),
      nextHop?: string(name='NextHop', example='vco-p0w2jpkhi2eeop6q6****'),
      routeDest?: string(name='RouteDest', example='192.168.10.0/24'),
      routeEntryType?: string(name='RouteEntryType', example='custom'),
      source?: string(name='Source', example='CLOUD'),
      state?: string(name='State', example='published'),
      vpnConnectionId?: string(name='VpnConnectionId', example='vco-p0w2jpkhi2eeop6q6****'),
      weight?: int32(name='Weight', example='100'),
    }
  ](name='VcoRouteEntries'),
}

model DescribeVcoRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVcoRouteEntriesResponseBody(name='body'),
}

async function describeVcoRouteEntries(request: DescribeVcoRouteEntriesRequest): DescribeVcoRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVcoRouteEntries', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVirtualBorderRoutersRequest {
  filter?: [ 
    {
      key?: string(name='Key', example='Status'),
      value?: [ string ](name='Value', example='Active'),
    }
  ](name='Filter', position='Query'),
  includeCrossAccountVbr?: boolean(name='IncludeCrossAccountVbr', example='false', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeVirtualBorderRoutersResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='DE77A7F3-3B74-41C0-A5BC-CAFD188C28B6'),
  totalCount?: int32(name='TotalCount', example='1'),
  virtualBorderRouterSet?: {
    virtualBorderRouterType?: [ 
    {
      accessPointId?: string(name='AccessPointId', example='ap-cn-kojok1x****'),
      activationTime?: string(name='ActivationTime', example='2021-06-08T12:20:55'),
      associatedCens?: {
        associatedCen?: [ 
        {
          cenId?: string(name='CenId', example='cen-kojok19xxx****'),
          cenOwnerId?: long(name='CenOwnerId', example='1688000000000****'),
          cenStatus?: string(name='CenStatus', example='Attached'),
        }
      ](name='AssociatedCen')
      }(name='AssociatedCens'),
      associatedPhysicalConnections?: {
        associatedPhysicalConnection?: [ 
        {
          circuitCode?: string(name='CircuitCode', example='longtel0**'),
          enableIpv6?: boolean(name='EnableIpv6', example='true'),
          localGatewayIp?: string(name='LocalGatewayIp', example='192.168.XX.XX'),
          localIpv6GatewayIp?: string(name='LocalIpv6GatewayIp', example='2001:XXXX:3c4d:0015:0000:0000:0000:1a2b'),
          peerGatewayIp?: string(name='PeerGatewayIp', example='116.62.XX.XX'),
          peerIpv6GatewayIp?: string(name='PeerIpv6GatewayIp', example='2001:XXXX:3c4d:0015:0000:0000:0000:1a2b'),
          peeringIpv6SubnetMask?: string(name='PeeringIpv6SubnetMask', example='2408:4004:cc:400::/56'),
          peeringSubnetMask?: string(name='PeeringSubnetMask', example='255.255.255.252'),
          physicalConnectionBusinessStatus?: string(name='PhysicalConnectionBusinessStatus', example='Normal'),
          physicalConnectionId?: string(name='PhysicalConnectionId', example='pc-119mfjzm7****'),
          physicalConnectionOwnerUid?: string(name='PhysicalConnectionOwnerUid', example='12345678****'),
          physicalConnectionStatus?: string(name='PhysicalConnectionStatus', example='Enabled'),
          status?: string(name='Status', example='active'),
          vlanId?: string(name='VlanId', example='0'),
          vlanInterfaceId?: string(name='VlanInterfaceId', example='ri-kojok19x3j0q6k****'),
        }
      ](name='AssociatedPhysicalConnection')
      }(name='AssociatedPhysicalConnections'),
      bandwidth?: int32(name='Bandwidth'),
      circuitCode?: string(name='CircuitCode', example='longtel0****'),
      cloudBoxInstanceId?: string(name='CloudBoxInstanceId', example='cb-****'),
      creationTime?: string(name='CreationTime', example='2020-06-08T12:20:55'),
      description?: string(name='Description', example='desc'),
      detectMultiplier?: long(name='DetectMultiplier', example='3'),
      eccId?: string(name='EccId', example='ecc-h****'),
      enableIpv6?: boolean(name='EnableIpv6', example='false'),
      localGatewayIp?: string(name='LocalGatewayIp', example='192.168.XX.XX'),
      localIpv6GatewayIp?: string(name='LocalIpv6GatewayIp', example='2001:XXXX:3c4d:0015:0000:0000:0000:1a2b'),
      minRxInterval?: long(name='MinRxInterval', example='300'),
      minTxInterval?: long(name='MinTxInterval', example='300'),
      name?: string(name='Name', example='test'),
      pConnVbrChargeType?: string(name='PConnVbrChargeType', example='PrePaid'),
      pConnVbrExpireTime?: string(name='PConnVbrExpireTime', example='2021-06-08T12:20:55'),
      peerGatewayIp?: string(name='PeerGatewayIp', example='192.168.XX.XX'),
      peerIpv6GatewayIp?: string(name='PeerIpv6GatewayIp', example='2001:XXXX:3c4d:0015:0000:0000:0000:1a2b'),
      peeringIpv6SubnetMask?: string(name='PeeringIpv6SubnetMask', example='2000:1234:0:a000::/55'),
      peeringSubnetMask?: string(name='PeeringSubnetMask', example='255.255.255.252'),
      physicalConnectionBusinessStatus?: string(name='PhysicalConnectionBusinessStatus', example='Normal'),
      physicalConnectionId?: string(name='PhysicalConnectionId', example='pc-119mfjzm7x****'),
      physicalConnectionOwnerUid?: string(name='PhysicalConnectionOwnerUid', example='1688000000000****'),
      physicalConnectionStatus?: string(name='PhysicalConnectionStatus', example='Normal'),
      recoveryTime?: string(name='RecoveryTime', example='2021-05-08T12:20:55'),
      routeTableId?: string(name='RouteTableId', example='rtb-bp1****'),
      status?: string(name='Status', example='active'),
      terminationTime?: string(name='TerminationTime', example='2021-06-08T12:20:55'),
      type?: string(name='Type', example='pconnVBR'),
      vbrId?: string(name='VbrId', example='vbr-bp1jcg5cmxjbl9xgc****'),
      vlanId?: int32(name='VlanId', example='10'),
      vlanInterfaceId?: string(name='VlanInterfaceId', example='ri-2zeo3xzyf38r4xx****'),
    }
  ](name='VirtualBorderRouterType')
  }(name='VirtualBorderRouterSet'),
}

model DescribeVirtualBorderRoutersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVirtualBorderRoutersResponseBody(name='body'),
}

async function describeVirtualBorderRouters(request: DescribeVirtualBorderRoutersRequest): DescribeVirtualBorderRoutersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVirtualBorderRouters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
  filter?: [ 
    {
      key?: string(name='Key', example='Status'),
      value?: [ string ](name='Value', example='Active'),
    }
  ](name='Filter', description='25425', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', example='pc-119mfj****', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='7C5AE8B3-A2D8-428D-A2FF-93A225C0821E'),
  totalCount?: int32(name='TotalCount', example='1'),
  virtualBorderRouterForPhysicalConnectionSet?: {
    virtualBorderRouterForPhysicalConnectionType?: [ 
    {
      activationTime?: string(name='ActivationTime', example='2021-06-08T12:20:55'),
      bandwidth?: string(name='Bandwidth', example='10'),
      bandwidthStatus?: string(name='BandwidthStatus', example='Active'),
      circuitCode?: string(name='CircuitCode', example='longtel0**'),
      creationTime?: string(name='CreationTime', example='2021-06-08T12:20:55'),
      eccId?: string(name='EccId', example='ecc-sjghe****'),
      enableIpv6?: boolean(name='EnableIpv6', example='true'),
      localGatewayIp?: string(name='LocalGatewayIp', example='192.168.XX.X'),
      localIpv6GatewayIp?: string(name='LocalIpv6GatewayIp', example='ipv6bw-uf6hcyzu65v98v3du****'),
      pConnVbrBussinessStatus?: string(name='PConnVbrBussinessStatus', example='Normal'),
      pConnVbrChargeType?: string(name='PConnVbrChargeType', example='PrePaid'),
      pConnVbrExpireTime?: string(name='PConnVbrExpireTime', example='2021-06-10T12:20:55'),
      peerGatewayIp?: string(name='PeerGatewayIp', example='162.62.XX.XX'),
      peerIpv6GatewayIp?: string(name='PeerIpv6GatewayIp', example='2001:XXXX:3c4d:0015:0000:0000:0000:1a2b'),
      peeringIpv6SubnetMask?: string(name='PeeringIpv6SubnetMask', example='2408:4004:cc:400::/56'),
      peeringSubnetMask?: string(name='PeeringSubnetMask', example='255.255.255.0'),
      recoveryTime?: string(name='RecoveryTime', example='2021-06-08T12:20:55'),
      status?: string(name='Status', example='Active'),
      terminationTime?: string(name='TerminationTime', example='2021-06-07T12:20:55'),
      type?: string(name='Type', example='pconnVBR'),
      vbrId?: string(name='VbrId', example='vbr-bp16ksp61j7e0tk****'),
      vbrOwnerUid?: long(name='VbrOwnerUid', example='253460731706911258'),
      vlanId?: int32(name='VlanId', example='1678'),
    }
  ](name='VirtualBorderRouterForPhysicalConnectionType')
  }(name='VirtualBorderRouterForPhysicalConnectionSet'),
}

model DescribeVirtualBorderRoutersForPhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody(name='body'),
}

async function describeVirtualBorderRoutersForPhysicalConnection(request: DescribeVirtualBorderRoutersForPhysicalConnectionRequest): DescribeVirtualBorderRoutersForPhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVirtualBorderRoutersForPhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpcAttributeRequest {
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  isDefault?: boolean(name='IsDefault', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId: string(name='VpcId', example='vpc-bp18sth14qii3pnv****', position='Query'),
}

model DescribeVpcAttributeResponseBody = {
  associatedCens?: {
    associatedCen?: [ 
    {
      cenId?: string(name='CenId', example='cen-7qthudw0ll6jmc****'),
      cenOwnerId?: long(name='CenOwnerId', example='283117732402483989'),
      cenStatus?: string(name='CenStatus', example='Attached'),
    }
  ](name='AssociatedCen')
  }(name='AssociatedCens'),
  cidrBlock?: string(name='CidrBlock', example='192.168.0.0/16'),
  classicLinkEnabled?: boolean(name='ClassicLinkEnabled', example='false'),
  cloudResources?: {
    cloudResourceSetType?: [ 
    {
      resourceCount?: int32(name='ResourceCount', example='1'),
      resourceType?: string(name='ResourceType', example='VSwitch'),
    }
  ](name='CloudResourceSetType')
  }(name='CloudResources'),
  creationTime?: string(name='CreationTime', example='2021-10-16T07:31:09Z'),
  description?: string(name='Description', example='VPC'),
  dhcpOptionsSetId?: string(name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****'),
  dhcpOptionsSetStatus?: string(name='DhcpOptionsSetStatus', example='Available'),
  ipv4GatewayId?: string(name='Ipv4GatewayId', example='ipv4gw-5tsnc6s4ogsedtp3k****'),
  ipv6CidrBlock?: string(name='Ipv6CidrBlock', example='2408:XXXX:0:a600::/56'),
  ipv6CidrBlocks?: {
    ipv6CidrBlock?: [ 
    {
      ipv6CidrBlock?: string(name='Ipv6CidrBlock', example='2408:XXXX:0:6a::/56'),
      ipv6Isp?: string(name='Ipv6Isp', example='BGP'),
    }
  ](name='Ipv6CidrBlock')
  }(name='Ipv6CidrBlocks'),
  isDefault?: boolean(name='IsDefault', example='false'),
  ownerId?: long(name='OwnerId', example='283117732402483989'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='7486AE4A-129D-43DB-A714-2432C074BA04'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazbvgb4ph****'),
  secondaryCidrBlocks?: {
    secondaryCidrBlock?: [ string ](name='SecondaryCidrBlock')
  }(name='SecondaryCidrBlocks'),
  status?: string(name='Status', example='Available'),
  supportIpv4Gateway?: boolean(name='SupportIpv4Gateway', example='true'),
  userCidrs?: {
    userCidr?: [ string ](name='UserCidr')
  }(name='UserCidrs'),
  vRouterId?: string(name='VRouterId', example='vrt-bp1jso6ng1at0ajsc****'),
  vSwitchIds?: {
    vSwitchId?: [ string ](name='VSwitchId')
  }(name='VSwitchIds'),
  vpcId?: string(name='VpcId', example='vpc-bp18sth14qii3pnvo****'),
  vpcName?: string(name='VpcName', example='doctest2'),
}

model DescribeVpcAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpcAttributeResponseBody(name='body'),
}

async function describeVpcAttribute(request: DescribeVpcAttributeRequest): DescribeVpcAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpcAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpcsRequest {
  dhcpOptionsSetId?: string(name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  isDefault?: boolean(name='IsDefault', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxvfvazb4p****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId?: string(name='VpcId', example='vpc-bp1b1xjllp3ve5yze****', position='Query'),
  vpcName?: string(name='VpcName', example='Vpc-1', position='Query'),
  vpcOwnerId?: long(name='VpcOwnerId', example='253460731706911258', position='Query'),
}

model DescribeVpcsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='C6532AA8-D0F7-497F-A8EE-094126D441F5'),
  totalCount?: int32(name='TotalCount', example='2'),
  vpcs?: {
    vpc?: [ 
    {
      cenStatus?: string(name='CenStatus', example='Attached'),
      cidrBlock?: string(name='CidrBlock', example='192.168.0.0/16'),
      creationTime?: string(name='CreationTime', example='2021-04-18T15:02:37Z'),
      description?: string(name='Description', example='This is my VPC.'),
      dhcpOptionsSetId?: string(name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****'),
      dhcpOptionsSetStatus?: string(name='DhcpOptionsSetStatus', example='Available'),
      ipv6CidrBlock?: string(name='Ipv6CidrBlock', example='2408:XXXX:0:a600::/56'),
      ipv6CidrBlocks?: {
        ipv6CidrBlock?: [ 
        {
          ipv6CidrBlock?: string(name='Ipv6CidrBlock', example='2408:XXXX:0:a600::/56'),
          ipv6Isp?: string(name='Ipv6Isp', example='BGP'),
        }
      ](name='Ipv6CidrBlock')
      }(name='Ipv6CidrBlocks'),
      isDefault?: boolean(name='IsDefault', example='false'),
      natGatewayIds?: {
        natGatewayIds?: [ string ](name='NatGatewayIds')
      }(name='NatGatewayIds'),
      ownerId?: long(name='OwnerId', example='253460731706911258'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph****'),
      routerTableIds?: {
        routerTableIds?: [ string ](name='RouterTableIds')
      }(name='RouterTableIds'),
      secondaryCidrBlocks?: {
        secondaryCidrBlock?: [ string ](name='SecondaryCidrBlock')
      }(name='SecondaryCidrBlocks'),
      status?: string(name='Status', example='Available'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', example='env'),
          value?: string(name='Value', example='internal'),
        }
      ](name='Tag')
      }(name='Tags'),
      userCidrs?: {
        userCidr?: [ string ](name='UserCidr')
      }(name='UserCidrs'),
      vRouterId?: string(name='VRouterId', example='vrt-bp1jcg5cmxjbl9xgc****'),
      vSwitchIds?: {
        vSwitchId?: [ string ](name='VSwitchId')
      }(name='VSwitchIds'),
      vpcId?: string(name='VpcId', example='vpc-bp1qpo0kug3a20qqe****'),
      vpcName?: string(name='VpcName', example='vpc1'),
    }
  ](name='Vpc')
  }(name='Vpcs'),
}

model DescribeVpcsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpcsResponseBody(name='body'),
}

async function describeVpcs(request: DescribeVpcsRequest): DescribeVpcsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpcs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpnAttachmentsRequest {
  attachType?: string(name='AttachType', example='CEN', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='ap-southeast-2', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-p0w2jpkhi2eeop6q6****', position='Query'),
}

model DescribeVpnAttachmentsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='9F0725BB-186A-3564-91C3-AAE48042F853'),
  totalCount?: int32(name='TotalCount', example='1'),
  vpnAttachments?: [ 
    {
      attachType?: string(name='AttachType', example='CEN'),
      crossAccountAuthorized?: boolean(name='CrossAccountAuthorized', example='false'),
      description?: string(name='Description', example='desctest'),
      instanceId?: string(name='InstanceId', example='vco-p0w2jpkhi2eeop6q6****'),
      name?: string(name='Name', example='nametest1'),
      transitRouterId?: string(name='TransitRouterId', example='tr-p0wkh4yryb1dnanqw****'),
      transitRouterName?: string(name='TransitRouterName', example='nametest2'),
    }
  ](name='VpnAttachments'),
}

model DescribeVpnAttachmentsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpnAttachmentsResponseBody(name='body'),
}

async function describeVpnAttachments(request: DescribeVpnAttachmentsRequest): DescribeVpnAttachmentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpnAttachments', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpnConnectionRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpnConnectionId: string(name='VpnConnectionId', example='vco-bp1bbi27hojx80nck****', position='Query'),
}

model DescribeVpnConnectionResponseBody = {
  attachInstanceId?: string(name='AttachInstanceId', example='cen-lxxpbpalc776qz****'),
  attachType?: string(name='AttachType', example='CEN'),
  createTime?: long(name='CreateTime', example='1492753817000'),
  crossAccountAuthorized?: boolean(name='CrossAccountAuthorized', example='false'),
  customerGatewayId?: string(name='CustomerGatewayId', example='cgw-bp1mvj4g9kogwwcxk****'),
  effectImmediately?: boolean(name='EffectImmediately', example='true'),
  enableDpd?: boolean(name='EnableDpd', example='true'),
  enableNatTraversal?: boolean(name='EnableNatTraversal', example='true'),
  ikeConfig?: {
    ikeAuthAlg?: string(name='IkeAuthAlg', example='sha1'),
    ikeEncAlg?: string(name='IkeEncAlg', example='aes'),
    ikeLifetime?: long(name='IkeLifetime', example='86400'),
    ikeMode?: string(name='IkeMode', example='main'),
    ikePfs?: string(name='IkePfs', example='group2'),
    ikeVersion?: string(name='IkeVersion', example='ikev1'),
    localId?: string(name='LocalId', example='116.28.XX.XX'),
    psk?: string(name='Psk', example='pgw6dy****'),
    remoteId?: string(name='RemoteId', example='139.34.XX.XX'),
  }(name='IkeConfig'),
  internetIp?: string(name='InternetIp', example='47.XX.XX.162'),
  ipsecConfig?: {
    ipsecAuthAlg?: string(name='IpsecAuthAlg', example='sha1'),
    ipsecEncAlg?: string(name='IpsecEncAlg', example='aes'),
    ipsecLifetime?: long(name='IpsecLifetime', example='86400'),
    ipsecPfs?: string(name='IpsecPfs', example='group2'),
  }(name='IpsecConfig'),
  localSubnet?: string(name='LocalSubnet', example='10.0.0.0/8'),
  name?: string(name='Name', example='ipsec1'),
  networkType?: string(name='NetworkType', example='public'),
  remoteCaCertificate?: string(name='RemoteCaCertificate', example='-----BEGIN CERTIFICATE----- MIIB7zCCAZW****'),
  remoteSubnet?: string(name='RemoteSubnet', example='192.168.0.0/16'),
  requestId?: string(name='RequestId', example='F2310D45-BCF6-4E2E-9082-B4503844BA4C'),
  spec?: string(name='Spec', example='1000M'),
  state?: string(name='State', example='attached'),
  status?: string(name='Status', example='ike_sa_not_established'),
  tags?: {
    tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag')
  }(name='Tags'),
  transitRouterId?: string(name='TransitRouterId', example='tr-p0we2edef9qr44a85****'),
  transitRouterName?: string(name='TransitRouterName', example='nametest'),
  vcoHealthCheck?: {
    dip?: string(name='Dip', example='10.0.0.1'),
    enable?: string(name='Enable', example='true'),
    interval?: int32(name='Interval', example='3'),
    policy?: string(name='Policy', example='revoke_route'),
    retry?: int32(name='Retry', example='3'),
    sip?: string(name='Sip', example='192.168.1.1'),
    status?: string(name='Status', example='failed'),
  }(name='VcoHealthCheck'),
  vpnBgpConfig?: {
    authKey?: string(name='AuthKey', example='AuthKey****'),
    enableBgp?: string(name='EnableBgp', example='true'),
    localAsn?: long(name='LocalAsn', example='65531'),
    localBgpIp?: string(name='LocalBgpIp', example='169.254.11.2'),
    peerAsn?: long(name='PeerAsn', example='65530'),
    peerBgpIp?: string(name='PeerBgpIp', example='169.254.11.1'),
    status?: string(name='Status', example='success'),
    tunnelCidr?: string(name='TunnelCidr', example='169.254.11.0/30'),
  }(name='VpnBgpConfig'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-bp1bbi27hojx80nck****'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm2ogj****'),
  zoneNo?: string(name='ZoneNo', example='ap-southeast-2b'),
}

model DescribeVpnConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpnConnectionResponseBody(name='body'),
}

async function describeVpnConnection(request: DescribeVpnConnectionRequest): DescribeVpnConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpnConnection', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpnConnectionLogsRequest {
  from?: int32(name='From', example='1671003744', position='Query'),
  minutePeriod?: int32(name='MinutePeriod', example='10', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  to?: int32(name='To', example='1671004344', position='Query'),
  vpnConnectionId: string(name='VpnConnectionId', example='vco-m5evqnds4y459flt3****', position='Query'),
}

model DescribeVpnConnectionLogsResponseBody = {
  count?: int32(name='Count', example='10'),
  data?: {
    logs?: [ string ](name='Logs')
  }(name='Data'),
  isCompleted?: boolean(name='IsCompleted', example='true'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='CF161502-4959-5C3B-B499-09B87BA931D9'),
}

model DescribeVpnConnectionLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpnConnectionLogsResponseBody(name='body'),
}

async function describeVpnConnectionLogs(request: DescribeVpnConnectionLogsRequest): DescribeVpnConnectionLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpnConnectionLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpnConnectionsRequest {
  customerGatewayId?: string(name='CustomerGatewayId', example='cgw-bp1mvj4g9kogw****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-bp10lz7aejumd****', position='Query'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkx****', position='Query'),
}

model DescribeVpnConnectionsResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='238752DC-0693-49BE-9C85-711D5691D3E5'),
  totalCount?: int32(name='TotalCount', example='2'),
  vpnConnections?: {
    vpnConnection?: [ 
    {
      attachInstanceId?: string(name='AttachInstanceId', example='cen-lxxpbpalc776qz****'),
      attachType?: string(name='AttachType', example='CEN'),
      createTime?: long(name='CreateTime', example='1492753817000'),
      crossAccountAuthorized?: boolean(name='CrossAccountAuthorized', example='false'),
      customerGatewayId?: string(name='CustomerGatewayId', example='cgw-bp1mvj4g9kogw****'),
      effectImmediately?: boolean(name='EffectImmediately', example='true'),
      enableDpd?: boolean(name='EnableDpd', example='true'),
      enableNatTraversal?: boolean(name='EnableNatTraversal', example='true'),
      ikeConfig?: {
        ikeAuthAlg?: string(name='IkeAuthAlg', example='sha1'),
        ikeEncAlg?: string(name='IkeEncAlg', example='aes'),
        ikeLifetime?: long(name='IkeLifetime', example='86400'),
        ikeMode?: string(name='IkeMode', example='main'),
        ikePfs?: string(name='IkePfs', example='group2'),
        ikeVersion?: string(name='IkeVersion', example='ikev1'),
        localId?: string(name='LocalId', example='116.64.XX.XX'),
        psk?: string(name='Psk', example='pgw6dy7****'),
        remoteId?: string(name='RemoteId', example='139.17.XX.XX'),
      }(name='IkeConfig'),
      internetIp?: string(name='InternetIp', example='10.XX.XX.10'),
      ipsecConfig?: {
        ipsecAuthAlg?: string(name='IpsecAuthAlg', example='sha1'),
        ipsecEncAlg?: string(name='IpsecEncAlg', example='aes'),
        ipsecLifetime?: long(name='IpsecLifetime', example='86400'),
        ipsecPfs?: string(name='IpsecPfs', example='group2'),
      }(name='IpsecConfig'),
      localSubnet?: string(name='LocalSubnet', example='192.168.0.0/16,172.17.0.0/16'),
      name?: string(name='Name', example='nametest'),
      networkType?: string(name='NetworkType', example='public'),
      remoteCaCertificate?: string(name='RemoteCaCertificate', example='-----BEGIN CERTIFICATE----- MIIB7zCCAZW**** -----END CERTIFICATE-----'),
      remoteSubnet?: string(name='RemoteSubnet', example='10.0.0.0/8,172.16.0.0/16'),
      spec?: string(name='Spec', example='1000M'),
      state?: string(name='State', example='attached'),
      status?: string(name='Status', example='ipsec_sa_established'),
      tag?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tag'),
      transitRouterId?: string(name='TransitRouterId', example='tr-p0we2edef9qr44a85****'),
      transitRouterName?: string(name='TransitRouterName', example='nametest'),
      vcoHealthCheck?: {
        dip?: string(name='Dip', example='192.168.0.1'),
        enable?: string(name='Enable', example='true'),
        interval?: int32(name='Interval', example='2'),
        policy?: string(name='Policy', example='revoke_route'),
        retry?: int32(name='Retry', example='3'),
        sip?: string(name='Sip', example='192.168.0.50'),
        status?: string(name='Status', example='success'),
      }(name='VcoHealthCheck'),
      vpnBgpConfig?: {
        authKey?: string(name='AuthKey', example='AuthKey****'),
        localAsn?: long(name='LocalAsn', example='65531'),
        localBgpIp?: string(name='LocalBgpIp', example='169.254.10.2'),
        peerAsn?: long(name='PeerAsn', example='65530'),
        peerBgpIp?: string(name='PeerBgpIp', example='169.254.10.1'),
        status?: string(name='Status', example='success'),
        tunnelCidr?: string(name='TunnelCidr', example='169.254.10.0/30'),
      }(name='VpnBgpConfig'),
      vpnConnectionId?: string(name='VpnConnectionId', example='vco-bp10lz7aejumd****'),
      vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm****'),
    }
  ](name='VpnConnection')
  }(name='VpnConnections'),
}

model DescribeVpnConnectionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpnConnectionsResponseBody(name='body'),
}

async function describeVpnConnections(request: DescribeVpnConnectionsRequest): DescribeVpnConnectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpnConnections', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpnCrossAccountAuthorizationsRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='ap-southeast-2', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpnConnectionId: string(name='VpnConnectionId', example='vco-p0w2jpkhi2eeop6q6****', position='Query'),
}

model DescribeVpnCrossAccountAuthorizationsResponseBody = {
  crossAccountAuthorizations?: [ 
    {
      aliUid?: long(name='AliUid', example='1250123456123456'),
      bindInstance?: string(name='BindInstance', example='cen-vv8h0t3klfpaae****'),
      bindProduct?: string(name='BindProduct', example='CEN'),
      bindUid?: long(name='BindUid', example='1210123456123456'),
      creationTime?: long(name='CreationTime', example='1658201810000'),
      vpnConnectionId?: string(name='VpnConnectionId', example='vco-p0w2jpkhi2eeop6q6****'),
    }
  ](name='CrossAccountAuthorizations'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='DB04E39A-6F0C-36AC-BCA0-B6D371B90062'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeVpnCrossAccountAuthorizationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpnCrossAccountAuthorizationsResponseBody(name='body'),
}

async function describeVpnCrossAccountAuthorizations(request: DescribeVpnCrossAccountAuthorizationsRequest): DescribeVpnCrossAccountAuthorizationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpnCrossAccountAuthorizations', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpnGatewayRequest {
  includeReservationData?: boolean(name='IncludeReservationData', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', example='vpn-bp1r3v1xqkl0w519g****', position='Query'),
}

model DescribeVpnGatewayResponseBody = {
  autoPropagate?: boolean(name='AutoPropagate', example='true'),
  businessStatus?: string(name='BusinessStatus', example='Normal'),
  chargeType?: string(name='ChargeType'),
  createTime?: long(name='CreateTime', example='1495382400000'),
  description?: string(name='Description', example='vpngatewaydescription'),
  enableBgp?: boolean(name='EnableBgp', example='true'),
  endTime?: long(name='EndTime', example='1544666102000'),
  internetIp?: string(name='InternetIp', example='47.22.XX.XX'),
  ipsecVpn?: string(name='IpsecVpn', example='enable'),
  name?: string(name='Name', example='vpngatewayname'),
  networkType?: string(name='NetworkType'),
  requestId?: string(name='RequestId', example='27E4E088-8DE0-4672-BF5C-0A412389DB9E'),
  reservationData?: {
    reservationEndTime?: string(name='ReservationEndTime', example='2020-07-20T16:00:00Z'),
    reservationIpsec?: string(name='ReservationIpsec', example='enable'),
    reservationMaxConnections?: int32(name='ReservationMaxConnections', example='5'),
    reservationOrderType?: string(name='ReservationOrderType', example='TEMP_UPGRADE'),
    reservationSpec?: string(name='ReservationSpec', example='5'),
    reservationSsl?: string(name='ReservationSsl', example='enable'),
    status?: string(name='Status', example='1'),
  }(name='ReservationData'),
  spec?: string(name='Spec', example='5'),
  sslMaxConnections?: long(name='SslMaxConnections', example='5'),
  sslVpn?: string(name='SslVpn', example='enable'),
  status?: string(name='Status', example='init'),
  tag?: string(name='Tag', example='{\\"VpnEnableBgp\\":\\"true\\",\\"VpnNewImage\\":\\"true\\",\\"VpnVersion\\":\\"v1.2.4\\"}'),
  tags?: {
    tag?: [ 
    {
      key?: string(name='Key', example='aaa'),
      value?: string(name='Value', example='bbb'),
    }
  ](name='Tag')
  }(name='Tags'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1dmzugdikc6hdgx****'),
  vpcId?: string(name='VpcId', example='vpc-bp19m2yx1m5q0avyq****'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1r3v1xqkl0w519g****'),
  vpnType?: string(name='VpnType', example='Normal'),
}

model DescribeVpnGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpnGatewayResponseBody(name='body'),
}

async function describeVpnGateway(request: DescribeVpnGatewayRequest): DescribeVpnGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpnGateway', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpnGatewaysRequest {
  businessStatus?: string(name='BusinessStatus', example='Normal', position='Query'),
  includeReservationData?: boolean(name='IncludeReservationData', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', example='init', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tag', position='Query'),
  vpcId?: string(name='VpcId', example='vpc-bp1m3i0kn1nd4wiw9****', position='Query'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp17lofy9fd0dnvzv****', position='Query'),
}

model DescribeVpnGatewaysResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='DF11D6F6-E35A-41C3-9B20-6FC8A901FE65'),
  totalCount?: int32(name='TotalCount', example='1'),
  vpnGateways?: {
    vpnGateway?: [ 
    {
      autoPropagate?: boolean(name='AutoPropagate', example='true'),
      businessStatus?: string(name='BusinessStatus', example='Normal'),
      chargeType?: string(name='ChargeType'),
      createTime?: long(name='CreateTime', example='1515383700000'),
      description?: string(name='Description', example='test'),
      enableBgp?: boolean(name='EnableBgp', example='true'),
      endTime?: long(name='EndTime', example='1518105600000'),
      internetIp?: string(name='InternetIp', example='47.12.XX.XX'),
      ipsecVpn?: string(name='IpsecVpn', example='enable'),
      name?: string(name='Name', example='test'),
      networkType?: string(name='NetworkType', example='public'),
      reservationData?: {
        reservationEndTime?: string(name='ReservationEndTime', example='2021-07-20T16:00:00Z'),
        reservationIpsec?: string(name='ReservationIpsec', example='enable'),
        reservationMaxConnections?: int32(name='ReservationMaxConnections', example='5'),
        reservationOrderType?: string(name='ReservationOrderType', example='TEMP_UPGRADE'),
        reservationSpec?: string(name='ReservationSpec', example='5'),
        reservationSsl?: string(name='ReservationSsl', example='enable'),
        status?: string(name='Status', example='1'),
      }(name='ReservationData'),
      spec?: string(name='Spec', example='5M'),
      sslMaxConnections?: long(name='SslMaxConnections', example='5'),
      sslVpn?: string(name='SslVpn', example='enable'),
      status?: string(name='Status', example='Active'),
      tag?: string(name='Tag', example='{\\"VpnNewImage\\":\\"true\\",\\"VpnVersion\\":\\"v1.2.2\\"}'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', example='FinanceDept'),
          value?: string(name='Value', example='FinanceJoshua'),
        }
      ](name='Tag')
      }(name='Tags'),
      vSwitchId?: string(name='VSwitchId', example='vsw-bp15lbk8sgtr6r5b0****'),
      vpcId?: string(name='VpcId', example='vpc-bp1m3i0kn1nd4wiw9****'),
      vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp17lofy9fd0dnvzv****'),
      vpnType?: string(name='VpnType', example='Normal'),
    }
  ](name='VpnGateway')
  }(name='VpnGateways'),
}

model DescribeVpnGatewaysResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpnGatewaysResponseBody(name='body'),
}

async function describeVpnGateways(request: DescribeVpnGatewaysRequest): DescribeVpnGatewaysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpnGateways', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpnPbrRouteEntriesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-zhangjiakou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', example='vpn-bp1a3kqjiiq9legfx****', position='Query'),
}

model DescribeVpnPbrRouteEntriesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
  totalCount?: int32(name='TotalCount', example='1'),
  vpnPbrRouteEntries?: {
    vpnPbrRouteEntry?: [ 
    {
      createTime?: long(name='CreateTime', example='1492747187000'),
      nextHop?: string(name='NextHop', example='vco-bp15oes1py4i66rmd****'),
      priority?: int32(name='Priority', example='10'),
      routeDest?: string(name='RouteDest', example='10.0.0.0/24'),
      routeSource?: string(name='RouteSource', example='192.168.0.0/24'),
      state?: string(name='State', example='published'),
      vpnInstanceId?: string(name='VpnInstanceId', example='vpn-bp1a3kqjiiq9legfx****'),
      weight?: int32(name='Weight', example='0'),
    }
  ](name='VpnPbrRouteEntry')
  }(name='VpnPbrRouteEntries'),
}

model DescribeVpnPbrRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpnPbrRouteEntriesResponseBody(name='body'),
}

async function describeVpnPbrRouteEntries(request: DescribeVpnPbrRouteEntriesRequest): DescribeVpnPbrRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpnPbrRouteEntries', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpnRouteEntriesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeEntryType?: string(name='RouteEntryType', example='System', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', example='vpn-bp1cmw7jh1nfe43m9****', position='Query'),
}

model DescribeVpnRouteEntriesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='BF3995A6-FA4F-4C74-B90F-89ECF4BFF4D5'),
  totalCount?: int32(name='TotalCount', example='1'),
  vpnRouteEntries?: {
    vpnRouteEntry?: [ 
    {
      asPath?: string(name='AsPath', example='65501,65001,60011'),
      community?: string(name='Community', example='65001:1000,65501:2000'),
      createTime?: long(name='CreateTime', example='1563874074000'),
      nextHop?: string(name='NextHop', example='vco-bp1tui07ob10fmuro****'),
      routeDest?: string(name='RouteDest', example='10.0.0.0/24'),
      routeEntryType?: string(name='RouteEntryType', example='System'),
      source?: string(name='Source', example='192.168.10.0/24'),
      state?: string(name='State', example='normal'),
      vpnInstanceId?: string(name='VpnInstanceId', example='vpn-bp1cmw7jh1nfe43m9****'),
      weight?: int32(name='Weight', example='100'),
    }
  ](name='VpnRouteEntry')
  }(name='VpnRouteEntries'),
}

model DescribeVpnRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpnRouteEntriesResponseBody(name='body'),
}

async function describeVpnRouteEntries(request: DescribeVpnRouteEntriesRequest): DescribeVpnRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpnRouteEntries', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpnSslServerLogsRequest {
  from?: int32(name='From', example='1600738962', position='Query'),
  minutePeriod?: int32(name='MinutePeriod', example='10', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sslVpnClientCertId?: string(name='SslVpnClientCertId', example='vsc-m5euof6s5jy8vs5kd****', position='Query'),
  to?: int32(name='To', example='1600738962', position='Query'),
  vpnSslServerId: string(name='VpnSslServerId', example='vss-bp155e9yclsg1xgq4****', position='Query'),
}

model DescribeVpnSslServerLogsResponseBody = {
  count?: int32(name='Count', example='10'),
  data?: {
    logs?: [ string ](name='Logs')
  }(name='Data'),
  isCompleted?: boolean(name='IsCompleted', example='true'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='DEDAC5B1-9292-5BF7-BDDF-61BA58CFB2FB'),
}

model DescribeVpnSslServerLogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpnSslServerLogsResponseBody(name='body'),
}

async function describeVpnSslServerLogs(request: DescribeVpnSslServerLogsRequest): DescribeVpnSslServerLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpnSslServerLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeZonesRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-cn', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  zoneType?: string(name='ZoneType', example='AvailabilityZone', position='Query'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId', example='6FEA0CF3-D3B9-43E5-A304-D217037876A8'),
  zones?: {
    zone?: [ 
    {
      localName?: string(name='LocalName'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-b'),
      zoneType?: string(name='ZoneType', example='AvailabilityZone'),
    }
  ](name='Zone')
  }(name='Zones'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeZones', 'POST', '/', 'json', false, 'json', request);
}

model DetachDhcpOptionsSetFromVpcRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  dhcpOptionsSetId: string(name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId: string(name='VpcId', example='vpc-dfdgrgthhy****', position='Query'),
}

model DetachDhcpOptionsSetFromVpcResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DetachDhcpOptionsSetFromVpcResponse = {
  headers: map[string]string(name='headers'),
  body: DetachDhcpOptionsSetFromVpcResponseBody(name='body'),
}

async function detachDhcpOptionsSetFromVpc(request: DetachDhcpOptionsSetFromVpcRequest): DetachDhcpOptionsSetFromVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachDhcpOptionsSetFromVpc', 'POST', '/', 'json', false, 'json', request);
}

model DiagnoseVpnGatewayRequest {
  clientToken?: string(name='ClientToken', description='system param', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  iPsecExtendInfo?: string(name='IPsecExtendInfo', description='IPsecExtendInfo', example='{"PrivateSourceIp":"192.168.1.1","PrivateDestinationIp":"192.168.0.1"}', position='Query'),
  regionId: string(name='RegionId', description='RegionId', example='cn-qingdao', position='Query'),
  resourceId: string(name='ResourceId', description='ResourceId', example='vco-uf66xniofskqtuoz1****', position='Query'),
  resourceType: string(name='ResourceType', description='ResourceType', example='IPsec', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', description='VpnGatewayId', example='vpn-m5efhj0k1p47ctuhl****', position='Query'),
}

model DiagnoseVpnGatewayResponseBody = {
  diagnoseId?: string(name='DiagnoseId', description='DiagnoseId', example='vpndgn-uf6kuxbe3iv028k3s****'),
  requestId?: string(name='RequestId', description='Id of the request', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DiagnoseVpnGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: DiagnoseVpnGatewayResponseBody(name='body'),
}

/**
  * VPN网关发起诊断
  *
 */
async function diagnoseVpnGateway(request: DiagnoseVpnGatewayRequest): DiagnoseVpnGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DiagnoseVpnGateway', 'POST', '/', 'json', false, 'json', request);
}

model DisableNatGatewayEcsMetricRequest {
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  natGatewayId: string(name='NatGatewayId', example='ngw-2vc53wynunp35lw1y****', position='Query'),
  regionId: string(name='RegionId', example='cn-chengdu', position='Query'),
}

model DisableNatGatewayEcsMetricResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model DisableNatGatewayEcsMetricResponse = {
  headers: map[string]string(name='headers'),
  body: DisableNatGatewayEcsMetricResponseBody(name='body'),
}

async function disableNatGatewayEcsMetric(request: DisableNatGatewayEcsMetricRequest): DisableNatGatewayEcsMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableNatGatewayEcsMetric', 'POST', '/', 'json', false, 'json', request);
}

model DisableVpcClassicLinkRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId: string(name='VpcId', example='vpc-bp1m7v25emi1h5mtc****', position='Query'),
}

model DisableVpcClassicLinkResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model DisableVpcClassicLinkResponse = {
  headers: map[string]string(name='headers'),
  body: DisableVpcClassicLinkResponseBody(name='body'),
}

async function disableVpcClassicLink(request: DisableVpcClassicLinkRequest): DisableVpcClassicLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableVpcClassicLink', 'POST', '/', 'json', false, 'json', request);
}

model DissociateRouteTableFromGatewayRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  gatewayId: string(name='GatewayId', example='ipv4gw-5tsnc6s4ogsedtp3k****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='ap-southeast-6', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId: string(name='RouteTableId', example='vtb-5ts0ohchwkp3dydt2****', position='Query'),
}

model DissociateRouteTableFromGatewayResponseBody = {
  requestId?: string(name='RequestId', example='C5644C9A-7480-13B6-AECB-30FF142E3724'),
}

model DissociateRouteTableFromGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: DissociateRouteTableFromGatewayResponseBody(name='body'),
}

async function dissociateRouteTableFromGateway(request: DissociateRouteTableFromGatewayRequest): DissociateRouteTableFromGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DissociateRouteTableFromGateway', 'POST', '/', 'json', false, 'json', request);
}

model DissociateRouteTablesFromVpcGatewayEndpointRequest {
  clientToken?: string(name='ClientToken', description='幂等参数', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', description='是否只预检此次请求', example='false', position='Query'),
  endpointId: string(name='EndpointId', description='VPC网关实例ID', example='vpce-m5e371h5clm3uadih****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='地域', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableIds: [ string ](name='RouteTableIds', description='路由表列表', example='vtb-m5elgtm3aj586iitr****', position='Query'),
}

model DissociateRouteTablesFromVpcGatewayEndpointResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='59BDDA2D-FB52-59F9-9DC5-5EA7D6808B8E'),
}

model DissociateRouteTablesFromVpcGatewayEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: DissociateRouteTablesFromVpcGatewayEndpointResponseBody(name='body'),
}

async function dissociateRouteTablesFromVpcGatewayEndpoint(request: DissociateRouteTablesFromVpcGatewayEndpointRequest): DissociateRouteTablesFromVpcGatewayEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DissociateRouteTablesFromVpcGatewayEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model DissociateVpnGatewayWithCertificateRequest {
  certificateId: string(name='CertificateId', example='6bfe4218-ea1d****', position='Query'),
  certificateType: string(name='CertificateType', example='Encryption', position='Query'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e*******', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm2ogj****', position='Query'),
}

model DissociateVpnGatewayWithCertificateResponseBody = {
  requestId?: string(name='RequestId', example='611CB80C-B6A9-43DB-9E38-0B0AC3D9B58F'),
}

model DissociateVpnGatewayWithCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: DissociateVpnGatewayWithCertificateResponseBody(name='body'),
}

async function dissociateVpnGatewayWithCertificate(request: DissociateVpnGatewayWithCertificateRequest): DissociateVpnGatewayWithCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DissociateVpnGatewayWithCertificate', 'POST', '/', 'json', false, 'json', request);
}

model DownloadVpnConnectionConfigRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpnConnectionId: string(name='VpnConnectionId', example='vco-bp1bbi27hojx80nck****', position='Query'),
}

model DownloadVpnConnectionConfigResponseBody = {
  requestId?: string(name='RequestId', example='0C68048B-0F70-40DA-B8AE-1B79B5CF62E3'),
  vpnConnectionConfig?: {
    ikeConfig?: {
      ikeAuthAlg?: string(name='IkeAuthAlg', example='sha1'),
      ikeEncAlg?: string(name='IkeEncAlg', example='aes'),
      ikeLifetime?: long(name='IkeLifetime', example='86400'),
      ikeMode?: string(name='IkeMode', example='main'),
      ikePfs?: string(name='IkePfs', example='group2'),
      ikeVersion?: string(name='IkeVersion', example='ikev1'),
      localId?: string(name='LocalId', example='116.62.XX.XX'),
      psk?: string(name='Psk', example='pgw6dy7d1i8i****'),
      remoteId?: string(name='RemoteId', example='139.196.XX.XX'),
    }(name='IkeConfig'),
    ipsecConfig?: {
      ipsecAuthAlg?: string(name='IpsecAuthAlg', example='sha1'),
      ipsecEncAlg?: string(name='IpsecEncAlg', example='aes'),
      ipsecLifetime?: long(name='IpsecLifetime', example='86400'),
      ipsecPfs?: string(name='IpsecPfs', example='group2'),
    }(name='IpsecConfig'),
    local?: string(name='Local', example='139.196.XX.XX'),
    localSubnet?: string(name='LocalSubnet', example='10.0.0.0/8'),
    remote?: string(name='Remote', example='116.62.XX.XX'),
    remoteSubnet?: string(name='RemoteSubnet', example='192.168.0.0/16'),
  }(name='VpnConnectionConfig'),
}

model DownloadVpnConnectionConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DownloadVpnConnectionConfigResponseBody(name='body'),
}

async function downloadVpnConnectionConfig(request: DownloadVpnConnectionConfigRequest): DownloadVpnConnectionConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadVpnConnectionConfig', 'POST', '/', 'json', false, 'json', request);
}

model EnableNatGatewayEcsMetricRequest {
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  natGatewayId: string(name='NatGatewayId', example='ngw-2vc53wynunp35lw1y****', position='Query'),
  regionId: string(name='RegionId', example='cn-chengdu', position='Query'),
}

model EnableNatGatewayEcsMetricResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model EnableNatGatewayEcsMetricResponse = {
  headers: map[string]string(name='headers'),
  body: EnableNatGatewayEcsMetricResponseBody(name='body'),
}

async function enableNatGatewayEcsMetric(request: EnableNatGatewayEcsMetricRequest): EnableNatGatewayEcsMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableNatGatewayEcsMetric', 'POST', '/', 'json', false, 'json', request);
}

model EnablePhysicalConnectionRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', example='pc-119mfjz****', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model EnablePhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model EnablePhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: EnablePhysicalConnectionResponseBody(name='body'),
}

async function enablePhysicalConnection(request: EnablePhysicalConnectionRequest): EnablePhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnablePhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model EnableVpcClassicLinkRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId: string(name='VpcId', example='vpc-bp1m7v25emi1h5mtc****', position='Query'),
}

model EnableVpcClassicLinkResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model EnableVpcClassicLinkResponse = {
  headers: map[string]string(name='headers'),
  body: EnableVpcClassicLinkResponseBody(name='body'),
}

async function enableVpcClassicLink(request: EnableVpcClassicLinkRequest): EnableVpcClassicLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableVpcClassicLink', 'POST', '/', 'json', false, 'json', request);
}

model EnableVpcIpv4GatewayRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ipv4GatewayId: string(name='Ipv4GatewayId', example='ipv4gw-5tsp9lumsxoqizvq2****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='ap-southeast-6', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableList?: [ string ](name='RouteTableList', position='Query'),
}

model EnableVpcIpv4GatewayResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model EnableVpcIpv4GatewayResponse = {
  headers: map[string]string(name='headers'),
  body: EnableVpcIpv4GatewayResponseBody(name='body'),
}

async function enableVpcIpv4Gateway(request: EnableVpcIpv4GatewayRequest): EnableVpcIpv4GatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableVpcIpv4Gateway', 'POST', '/', 'json', false, 'json', request);
}

model GetDhcpOptionsSetRequest {
  dhcpOptionsSetId: string(name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetDhcpOptionsSetResponseBody = {
  associateVpcs?: [ 
    {
      associateStatus?: string(name='AssociateStatus', example='InUse'),
      vpcId?: string(name='VpcId', example='vpc-eb3b54r6otues4tjj****'),
    }
  ](name='AssociateVpcs'),
  dhcpOptions?: {
    domainName?: string(name='DomainName', example='example.com'),
    domainNameServers?: string(name='DomainNameServers', example='192.xx.xx.123'),
    ipv6LeaseTime?: string(name='Ipv6LeaseTime'),
    leaseTime?: string(name='LeaseTime'),
  }(name='DhcpOptions'),
  dhcpOptionsSetDescription?: string(name='DhcpOptionsSetDescription', example='test'),
  dhcpOptionsSetId?: string(name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****'),
  dhcpOptionsSetName?: string(name='DhcpOptionsSetName', example='test'),
  ownerId?: long(name='OwnerId', example='12345678'),
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  status?: string(name='Status', example='Available'),
}

model GetDhcpOptionsSetResponse = {
  headers: map[string]string(name='headers'),
  body: GetDhcpOptionsSetResponseBody(name='body'),
}

async function getDhcpOptionsSet(request: GetDhcpOptionsSetRequest): GetDhcpOptionsSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDhcpOptionsSet', 'POST', '/', 'json', false, 'json', request);
}

model GetFlowLogServiceStatusRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetFlowLogServiceStatusResponseBody = {
  enabled?: boolean(name='Enabled', example='true'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-06F83A1B457'),
}

model GetFlowLogServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetFlowLogServiceStatusResponseBody(name='body'),
}

async function getFlowLogServiceStatus(request: GetFlowLogServiceStatusRequest): GetFlowLogServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFlowLogServiceStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetIpv4GatewayAttributeRequest {
  ipv4GatewayId: string(name='Ipv4GatewayId', example='ipv4gw-5tsnc6s4ogsedtp3k****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='ap-southeast-6', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetIpv4GatewayAttributeResponseBody = {
  createTime?: string(name='CreateTime', example='2022-02-24T09:02:36Z'),
  enabled?: boolean(name='Enabled', example='true'),
  ipv4GatewayDescription?: string(name='Ipv4GatewayDescription', example='new'),
  ipv4GatewayId?: string(name='Ipv4GatewayId', example='ipv4gw-5tsnc6s4ogsedtp3k****'),
  ipv4GatewayName?: string(name='Ipv4GatewayName', example='name'),
  ipv4GatewayRouteTableId?: string(name='Ipv4GatewayRouteTableId', example='vtb-5ts0ohchwkp3dydt2****'),
  requestId?: string(name='RequestId', example='7F79A919-6FE9-50C4-967B-45705E1F9C38'),
  resourceGroupId?: string(name='ResourceGroupId'),
  status?: string(name='Status', example='Created'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
  vpcId?: string(name='VpcId', example='vpc-5tsrxlw7dv074gci4****'),
}

model GetIpv4GatewayAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: GetIpv4GatewayAttributeResponseBody(name='body'),
}

async function getIpv4GatewayAttribute(request: GetIpv4GatewayAttributeRequest): GetIpv4GatewayAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIpv4GatewayAttribute', 'POST', '/', 'json', false, 'json', request);
}

model GetNatGatewayAttributeRequest {
  natGatewayId: string(name='NatGatewayId', example='ngw-bp1b0lic8uz4r6vf2****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-qingdao', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetNatGatewayAttributeResponseBody = {
  billingConfig?: {
    autoPay?: string(name='AutoPay', example='false'),
    instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
    internetChargeType?: string(name='InternetChargeType', example='PayBySpec'),
    spec?: string(name='Spec', example='Small'),
  }(name='BillingConfig'),
  businessStatus?: string(name='BusinessStatus', example='Normal'),
  creationTime?: string(name='CreationTime', example='2021-12-08T12:20:20Z'),
  deletionProtectionInfo?: {
    enabled?: boolean(name='Enabled', example='true'),
  }(name='DeletionProtectionInfo'),
  description?: string(name='Description', example='NAT'),
  ecsMetricEnabled?: boolean(name='EcsMetricEnabled', example='true'),
  expiredTime?: string(name='ExpiredTime', example='2021-12-26T12:20:20Z'),
  forwardTable?: {
    forwardEntryCount?: int32(name='ForwardEntryCount', example='1'),
    forwardTableId?: string(name='ForwardTableId', example='ftb-uf6gj3mhsg94qsqst****'),
  }(name='ForwardTable'),
  fullNatTable?: {
    fullNatEntryCount?: long(name='FullNatEntryCount', example='1'),
    fullNatTableId?: string(name='FullNatTableId', example='fulltb-gw88z7hhlv43rmb26****'),
  }(name='FullNatTable'),
  ipList?: [ 
    {
      allocationId?: string(name='AllocationId', example='eip-bp13e9i2qst4g6jzi****'),
      ipAddress?: string(name='IpAddress', example='116.33.XX.XX'),
      usingStatus?: string(name='UsingStatus', example='idle'),
    }
  ](name='IpList'),
  name?: string(name='Name', example='abc'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-bp1047e2d4z7kf2ki****'),
  natType?: string(name='NatType', example='Enhanced'),
  networkType?: string(name='NetworkType', example='internet'),
  privateInfo?: {
    eniInstanceId?: string(name='EniInstanceId', example='eni-bp1cmgtoaka8vfyg****'),
    izNo?: string(name='IzNo', example='cn-qingdao-b'),
    maxBandwidth?: int32(name='MaxBandwidth', example='5120'),
    privateIpAddress?: string(name='PrivateIpAddress', example='192.168.XX.XX'),
    vswitchId?: string(name='VswitchId', example='vsw-bp1s2laxhdf9ayjbo***'),
  }(name='PrivateInfo'),
  privateLinkEnabled?: boolean(name='PrivateLinkEnabled', description='默认不支持私网链接。设置为1则意味着支持私网链接', example='true'),
  privateLinkMode?: string(name='PrivateLinkMode', description='Fullnat：使用FullNat模式 Geneve：使用Geneve模式。 预估大部分场景都是非Geneve模式的。', example='FullNat'),
  regionId?: string(name='RegionId', example='cn-qingdao'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4ph****'),
  snatTable?: {
    snatEntryCount?: int32(name='SnatEntryCount', example='1'),
    snatTableId?: string(name='SnatTableId', example='stb-SnatTableIds****'),
  }(name='SnatTable'),
  status?: string(name='Status', example='Available'),
  vpcId?: string(name='VpcId', example='vpc-bp15zckdt37pq72z****'),
}

model GetNatGatewayAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: GetNatGatewayAttributeResponseBody(name='body'),
}

async function getNatGatewayAttribute(request: GetNatGatewayAttributeRequest): GetNatGatewayAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNatGatewayAttribute', 'POST', '/', 'json', false, 'json', request);
}

model GetNatGatewayConvertStatusRequest {
  natGatewayId: string(name='NatGatewayId', example='ngw-bp1b0lic8uz4r6vf2****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-qingdao', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetNatGatewayConvertStatusResponseBody = {
  convertSteps?: [ 
    {
      stepName?: string(name='StepName', example='init'),
      stepStartTime?: string(name='StepStartTime', example='2020-08-26T08:27:19Z'),
      stepStatus?: string(name='StepStatus', example='successful'),
    }
  ](name='ConvertSteps'),
  dstNatType?: string(name='DstNatType', example='Enhanced'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-bp1b0lic8uz4r6vf2****'),
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model GetNatGatewayConvertStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetNatGatewayConvertStatusResponseBody(name='body'),
}

async function getNatGatewayConvertStatus(request: GetNatGatewayConvertStatusRequest): GetNatGatewayConvertStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNatGatewayConvertStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetPhysicalConnectionServiceStatusRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='地域', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetPhysicalConnectionServiceStatusResponseBody = {
  enabled?: boolean(name='Enabled', description='是否开通出云流量服务', example='true'),
  requestId?: string(name='RequestId', description='Id of the request', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model GetPhysicalConnectionServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetPhysicalConnectionServiceStatusResponseBody(name='body'),
}

async function getPhysicalConnectionServiceStatus(request: GetPhysicalConnectionServiceStatusRequest): GetPhysicalConnectionServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPhysicalConnectionServiceStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetTrafficMirrorServiceStatusRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model GetTrafficMirrorServiceStatusResponseBody = {
  enabled?: boolean(name='Enabled', example='true'),
  requestId?: string(name='RequestId', example='37626066-2C6C-4B62-ADD3-498920C409C5'),
}

model GetTrafficMirrorServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrafficMirrorServiceStatusResponseBody(name='body'),
}

async function getTrafficMirrorServiceStatus(request: GetTrafficMirrorServiceStatusRequest): GetTrafficMirrorServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTrafficMirrorServiceStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetVpcGatewayEndpointAttributeRequest {
  endpointId: string(name='EndpointId', description='VPC网关实例ID', example='vpce-bp1w1dmdqjpwul0v3****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='地域', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetVpcGatewayEndpointAttributeResponseBody = {
  creationTime?: string(name='CreationTime', example='2021-08-27T01:58:37Z'),
  endpointDescription?: string(name='EndpointDescription', example='test'),
  endpointId?: string(name='EndpointId', example='vpce-bp1w1dmdqjpwul0v3****'),
  endpointName?: string(name='EndpointName', example='test'),
  endpointStatus?: string(name='EndpointStatus', example='Created'),
  policyDocument?: string(name='PolicyDocument', example='{"Version" : "1",   "Statement" : [ {     "Effect" : "Allow",     "Resource" : [ "*" ],     "Action" : [ "*" ],     "Principal" : [ "*" ]   } ] }'),
  requestId?: string(name='RequestId', description='Id of the request', example='A1122D0F-7B3B-5445-BB19-17F27F97FE1C'),
  routeTables?: [ string ](name='RouteTables'),
  serviceName?: string(name='ServiceName', example='com.aliyun.cn-hangzhou.oss'),
  vpcId?: string(name='VpcId', example='vpc-bp1nh86rugg01zol0****'),
}

model GetVpcGatewayEndpointAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: GetVpcGatewayEndpointAttributeResponseBody(name='body'),
}

async function getVpcGatewayEndpointAttribute(request: GetVpcGatewayEndpointAttributeRequest): GetVpcGatewayEndpointAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVpcGatewayEndpointAttribute', 'POST', '/', 'json', false, 'json', request);
}

model GetVpcPrefixListAssociationsRequest {
  maxResults?: long(name='MaxResults', example='20', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prefixListId: string(name='PrefixListId', example='pl-0b7hwu67****', position='Query'),
  regionId: string(name='RegionId', description='地域', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetVpcPrefixListAssociationsResponseBody = {
  count?: long(name='Count', example='1'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  prefixListAssociation?: [ 
    {
      ownerId?: string(name='OwnerId', example='153460731706****'),
      prefixListId?: string(name='PrefixListId', description='前缀列表的实例ID', example='pl-0b7hwu67****'),
      reason?: string(name='Reason', example='failed'),
      regionId?: string(name='RegionId'),
      resourceId?: string(name='ResourceId', description='状态', example='vtb-bp1drpcfz9srr393h****'),
      resourceType?: string(name='ResourceType', description='名称', example='vpcRouteTable'),
      resourceUid?: string(name='ResourceUid'),
      status?: string(name='Status', description='IpVersion', example='Success'),
    }
  ](name='PrefixListAssociation'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  totalCount?: long(name='TotalCount', example='1'),
}

model GetVpcPrefixListAssociationsResponse = {
  headers: map[string]string(name='headers'),
  body: GetVpcPrefixListAssociationsResponseBody(name='body'),
}

async function getVpcPrefixListAssociations(request: GetVpcPrefixListAssociationsRequest): GetVpcPrefixListAssociationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVpcPrefixListAssociations', 'POST', '/', 'json', false, 'json', request);
}

model GetVpcPrefixListEntriesRequest {
  maxResults?: long(name='MaxResults', example='20', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prefixListId: string(name='PrefixListId', example='pl-0b7hwu67****', position='Query'),
  regionId: string(name='RegionId', description='地域', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetVpcPrefixListEntriesResponseBody = {
  count?: long(name='Count', example='1'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  prefixListEntry?: [ 
    {
      cidr?: string(name='Cidr', description='状态', example='192.168.0.0/16'),
      description?: string(name='Description', description='名称', example='description'),
      prefixListId?: string(name='PrefixListId', description='前缀列表的实例ID', example='pl-0b7hwu67****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='PrefixListEntry'),
  requestId?: string(name='RequestId', description='Id of the request', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  totalCount?: long(name='TotalCount', example='1'),
}

model GetVpcPrefixListEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: GetVpcPrefixListEntriesResponseBody(name='body'),
}

async function getVpcPrefixListEntries(request: GetVpcPrefixListEntriesRequest): GetVpcPrefixListEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVpcPrefixListEntries', 'POST', '/', 'json', false, 'json', request);
}

model GetVpcRouteEntrySummaryRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeEntryType: string(name='RouteEntryType', example='Custom', position='Query'),
  routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzdvzu2****', position='Query'),
  vpcId: string(name='VpcId', example='vpc-bp15zckdt37pq72****', position='Query'),
}

model GetVpcRouteEntrySummaryResponseBody = {
  requestId?: string(name='RequestId', example='DC668356-BCB4-42FD-9BC3-FA2B2E04B634'),
  routeEntrySummarys?: [ 
    {
      entrySummarys?: [ 
        {
          count?: int32(name='Count', example='10'),
          routeEntryType?: string(name='RouteEntryType', example='Custom'),
        }
      ](name='EntrySummarys'),
      routeTableId?: string(name='RouteTableId', example='vtb-bp145q7glnuzdvzu2****'),
    }
  ](name='RouteEntrySummarys'),
}

model GetVpcRouteEntrySummaryResponse = {
  headers: map[string]string(name='headers'),
  body: GetVpcRouteEntrySummaryResponseBody(name='body'),
}

async function getVpcRouteEntrySummary(request: GetVpcRouteEntrySummaryRequest): GetVpcRouteEntrySummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVpcRouteEntrySummary', 'POST', '/', 'json', false, 'json', request);
}

model GetVpnGatewayDiagnoseResultRequest {
  clientToken?: string(name='ClientToken', description='system param', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  diagnoseId?: string(name='DiagnoseId', description='DiagnoseId', example='vpndgn-uf6kuxbe3iv028k3s****', position='Query'),
  regionId: string(name='RegionId', description='RegionId', example='cn-qingdao', position='Query'),
  vpnGatewayId?: string(name='VpnGatewayId', description='VpnGatewayId', example='vpn-uf6fzwp0ck3frwtbk****', position='Query'),
}

model GetVpnGatewayDiagnoseResultResponseBody = {
  beginTime?: string(name='BeginTime', description='FinishTime', example='2022-12-15T05:28:57Z'),
  diagnoseId?: string(name='DiagnoseId', description='DiagnoseId', example='vpndgn-uf6sgneym02lxyuv4****'),
  diagnoseResult?: [ 
    {
      diagnoseName?: string(name='DiagnoseName', description='diagnoseName', example='RouteEntryConflict'),
      diagnoseResultDescription?: string(name='DiagnoseResultDescription', description='DiagnoseResultDescription', example='{\\"targetIp\\":\\"192.168.0.1\\",\\"srcIp\\":\\"192.168.1.1\\",\\"rtt\\":-1.0,\\"lossRate\\":100.0}'),
      diagnoseResultLevel?: string(name='DiagnoseResultLevel', description='DiagnoseResultLevel', example='normal'),
    }
  ](name='DiagnoseResult', description='DiagnoseResult'),
  finishTime?: string(name='FinishTime', description='FinishTime', example='2022-12-15T05:29:08Z'),
  finishedCount?: int32(name='FinishedCount', description='FinishedCount', example='7'),
  requestId?: string(name='RequestId', description='RequestId', example='312C4D5A-6563-5FC6-8C6E-A43A5A316FEB'),
  resourceInstanceId?: string(name='ResourceInstanceId', description='ResourceInstanceId', example='vco-uf6huqsu63azl7mdp****'),
  resourceType?: string(name='ResourceType', description='ResourceType', example='IPsec'),
  totalCount?: int32(name='TotalCount', description='TotalCount', example='7'),
  vpnGatewayId?: string(name='VpnGatewayId', description='VpnGatewayId', example='vpn-uf6fzwp0ck3frwtbk****'),
}

model GetVpnGatewayDiagnoseResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetVpnGatewayDiagnoseResultResponseBody(name='body'),
}

/**
  * 查询VPN网关一键诊断结果
  *
 */
async function getVpnGatewayDiagnoseResult(request: GetVpnGatewayDiagnoseResultRequest): GetVpnGatewayDiagnoseResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVpnGatewayDiagnoseResult', 'POST', '/', 'json', false, 'json', request);
}

model GrantInstanceToCenRequest {
  cenId: string(name='CenId', example='cen-7qthudw0ll6jmc****', position='Query'),
  cenOwnerId: long(name='CenOwnerId', example='123456789', position='Query'),
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  instanceId: string(name='InstanceId', example='vpc-uf6o8d1dj8sjwxi6o****', position='Query'),
  instanceType: string(name='InstanceType', example='VPC', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GrantInstanceToCenResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model GrantInstanceToCenResponse = {
  headers: map[string]string(name='headers'),
  body: GrantInstanceToCenResponseBody(name='body'),
}

async function grantInstanceToCen(request: GrantInstanceToCenRequest): GrantInstanceToCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantInstanceToCen', 'POST', '/', 'json', false, 'json', request);
}

model GrantInstanceToVbrRequest {
  grantType: string(name='GrantType', example='ALL', position='Query'),
  instanceId: string(name='InstanceId', example='vpc-bp1lqhq93q8evjpky****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  vbrInstanceIds?: [ string ](name='VbrInstanceIds', shrink='simple', position='Query'),
  vbrOwnerUid: long(name='VbrOwnerUid', example='1210123456123456', position='Query'),
  vbrRegionNo: string(name='VbrRegionNo', example='cn-hangzhou', position='Query'),
}

model GrantInstanceToVbrResponseBody = {
  requestId?: string(name='RequestId', example='F99F13AE-D733-5856-AB97-80CC88B1D5A8'),
}

model GrantInstanceToVbrResponse = {
  headers: map[string]string(name='headers'),
  body: GrantInstanceToVbrResponseBody(name='body'),
}

async function grantInstanceToVbr(request: GrantInstanceToVbrRequest): GrantInstanceToVbrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantInstanceToVbr', 'POST', '/', 'json', false, 'json', request);
}

model ListBusinessAccessPointsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
}

model ListBusinessAccessPointsResponseBody = {
  businessAccessPoints?: [ 
    {
      accessPointId?: string(name='AccessPointId', example='ap-cn-hangzhou-xs-B'),
      accessPointName?: string(name='AccessPointName'),
      cloudBoxInstanceIds?: string(name='CloudBoxInstanceIds', example='cb-****'),
      latitude?: double(name='Latitude', example='30.198416'),
      longitude?: double(name='Longitude', example='120.247514'),
      supportLineOperator?: string(name='SupportLineOperator', example='CT'),
      supportPortTypes?: string(name='SupportPortTypes', example='1000Base-T'),
    }
  ](name='BusinessAccessPoints'),
  requestId?: string(name='RequestId', description='Id of the request', example='611CB80C-B6A9-43DB-9E38-0B0AC3D9B58F'),
}

model ListBusinessAccessPointsResponse = {
  headers: map[string]string(name='headers'),
  body: ListBusinessAccessPointsResponseBody(name='body'),
}

async function listBusinessAccessPoints(request: ListBusinessAccessPointsRequest): ListBusinessAccessPointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBusinessAccessPoints', 'POST', '/', 'json', false, 'json', request);
}

model ListDhcpOptionsSetsRequest {
  dhcpOptionsSetId?: [ string ](name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****', position='Query'),
  dhcpOptionsSetName?: string(name='DhcpOptionsSetName', example='test', position='Query'),
  domainName?: string(name='DomainName', example='example.com', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListDhcpOptionsSetsResponseBody = {
  dhcpOptionsSets?: [ 
    {
      associateVpcCount?: int32(name='AssociateVpcCount', example='2'),
      dhcpOptions?: {
        domainName?: string(name='DomainName', example='example.com'),
        domainNameServers?: string(name='DomainNameServers', example='192.168.XX.XX'),
        ipv6LeaseTime?: string(name='Ipv6LeaseTime'),
        leaseTime?: string(name='LeaseTime'),
      }(name='DhcpOptions'),
      dhcpOptionsSetDescription?: string(name='DhcpOptionsSetDescription', example='test'),
      dhcpOptionsSetId?: string(name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****'),
      dhcpOptionsSetName?: string(name='DhcpOptionsSetName', example='test'),
      ownerId?: long(name='OwnerId', example='253460731706911258'),
      status?: string(name='Status', example='Available'),
    }
  ](name='DhcpOptionsSets'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd********'),
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model ListDhcpOptionsSetsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDhcpOptionsSetsResponseBody(name='body'),
}

async function listDhcpOptionsSets(request: ListDhcpOptionsSetsRequest): ListDhcpOptionsSetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDhcpOptionsSets', 'POST', '/', 'json', false, 'json', request);
}

model ListEnhanhcedNatGatewayAvailableZonesRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='me-east-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListEnhanhcedNatGatewayAvailableZonesResponseBody = {
  requestId?: string(name='RequestId', example='8AE6F367-52EA-535D-9A3D-EF23D70527C8'),
  zones?: [ 
    {
      localName?: string(name='LocalName'),
      zoneId?: string(name='ZoneId', example='me-east-1a'),
    }
  ](name='Zones'),
}

model ListEnhanhcedNatGatewayAvailableZonesResponse = {
  headers: map[string]string(name='headers'),
  body: ListEnhanhcedNatGatewayAvailableZonesResponseBody(name='body'),
}

async function listEnhanhcedNatGatewayAvailableZones(request: ListEnhanhcedNatGatewayAvailableZonesRequest): ListEnhanhcedNatGatewayAvailableZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEnhanhcedNatGatewayAvailableZones', 'POST', '/', 'json', false, 'json', request);
}

model ListFullNatEntriesRequest {
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  fullNatEntryId?: string(name='FullNatEntryId', example='fullnat-gw8fz23jezpbblf1j****', position='Query'),
  fullNatEntryNames?: [ string ](name='FullNatEntryNames', position='Query'),
  fullNatTableId?: string(name='FullNatTableId', example='fulltb-gw88z7hhlv43rmb26****', position='Query'),
  ipProtocol?: string(name='IpProtocol', example='TCP', position='Query'),
  maxResults?: long(name='MaxResults', example='20', position='Query'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-bp1uewa15k4iy5770****', position='Query'),
  networkInterfaceIds?: [ string ](name='NetworkInterfaceIds', position='Query'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='eu-central-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListFullNatEntriesResponseBody = {
  fullNatEntries?: [ 
    {
      accessIp?: string(name='AccessIp', description='通过DNAT条目进行公网通信的ECS实例的私网IP地址。', example='192.168.XX.XX'),
      accessPort?: string(name='AccessPort', description='DNAT条目中进行端口转发的内部端口，取值范围：1-65535。', example='80'),
      creationTime?: string(name='CreationTime', example='2021-10-27T02:44:40Z'),
      fullNatEntryDescription?: string(name='FullNatEntryDescription', example='abc'),
      fullNatEntryId?: string(name='FullNatEntryId', example='fullnat-gw8fz23jezpbblf1j****'),
      fullNatEntryName?: string(name='FullNatEntryName', description='FULLNAT规则的名称。 长度为2~128个字符，必须以大小写字母或中文开头，但不能以http://或https://开头。', example='test'),
      fullNatEntryStatus?: string(name='FullNatEntryStatus', example='Available'),
      fullNatTableId?: string(name='FullNatTableId', example='fulltb-gw88z7hhlv43rmb26****'),
      ipProtocol?: string(name='IpProtocol', description='协议类型，取值： • TCP：转发TCP协议的报文。 • UDP：转发UDP协议的报文。', example='TCP'),
      natIp?: string(name='NatIp', description='DNAT条目中提供公网访问的公网IP地址。', example='192.168.XX.XX'),
      natIpPort?: string(name='NatIpPort', description='DNAT条目中进行端口转发的外部端口，取值范围：1~65535。', example='80'),
      networkInterfaceId?: string(name='NetworkInterfaceId', description='当前VpcNat作为服务资源所加入的eni', example='eni-gw80wedm8pq0tpr2****'),
      networkInterfaceType?: string(name='NetworkInterfaceType', description='ENI类型，目前仅支持Endpoint', example='Endpoint'),
    }
  ](name='FullNatEntries'),
  fullNatTableId?: string(name='FullNatTableId', example='fullnat-gw8fz23jezpbblf1j****'),
  maxResults?: long(name='MaxResults', example='1'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-gw8054kn57y3hq3bv****'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='Id of the request', example='F03E41F6-1A74-311F-8D98-124EEE9F37B8'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListFullNatEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListFullNatEntriesResponseBody(name='body'),
}

async function listFullNatEntries(request: ListFullNatEntriesRequest): ListFullNatEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFullNatEntries', 'POST', '/', 'json', false, 'json', request);
}

model ListGatewayRouteTableEntriesRequest {
  destinationCidrBlock?: string(name='DestinationCidrBlock', example='192.168.0.5', position='Query'),
  gatewayRouteTableId: string(name='GatewayRouteTableId', example='vtb-5ts0ohchwkp3dydt2****', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='ap-southeast-6', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListGatewayRouteTableEntriesResponseBody = {
  gatewayRouteEntryModels?: [ 
    {
      description?: string(name='Description', example='test'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', example='192.168.0.5'),
      name?: string(name='Name', example='name'),
      nextHopId?: string(name='NextHopId', example='i-bp11gcl0sm85t9bi****'),
      nextHopType?: string(name='NextHopType', example='EcsInstance'),
      nextHops?: [ 
        {
          enabled?: string(name='Enabled'),
          nextHopId?: string(name='NextHopId'),
          nextHopType?: string(name='NextHopType'),
          weight?: string(name='Weight'),
        }
      ](name='NextHops'),
      status?: string(name='Status', example='Available'),
    }
  ](name='GatewayRouteEntryModels'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
  totalCount?: string(name='TotalCount', example='1'),
}

model ListGatewayRouteTableEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListGatewayRouteTableEntriesResponseBody(name='body'),
}

async function listGatewayRouteTableEntries(request: ListGatewayRouteTableEntriesRequest): ListGatewayRouteTableEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGatewayRouteTableEntries', 'POST', '/', 'json', false, 'json', request);
}

model ListGeographicSubRegionsRequest {
}

model ListGeographicSubRegionsResponseBody = {
  count?: long(name='Count', example='10'),
  geographicSubRegions?: [ string ](name='GeographicSubRegions'),
  requestId?: string(name='RequestId', description='Id of the request', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model ListGeographicSubRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListGeographicSubRegionsResponseBody(name='body'),
}

async function listGeographicSubRegions(request: ListGeographicSubRegionsRequest): ListGeographicSubRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGeographicSubRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListIpsecServerLogsRequest {
  from?: int32(name='From', example='1671003744', position='Query'),
  ipsecServerId: string(name='IpsecServerId', example='iss-2zei2n5q5zhirfh73****', position='Query'),
  minutePeriod?: int32(name='MinutePeriod', example='10', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  to?: int32(name='To', example='1671004344', position='Query'),
}

model ListIpsecServerLogsResponseBody = {
  count?: int32(name='Count', example='10'),
  data?: [ string ](name='Data'),
  isCompleted?: boolean(name='IsCompleted', example='true'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='DEDAC5B1-9292-5BF7-BDDF-61BA58CFB2FB'),
}

model ListIpsecServerLogsResponse = {
  headers: map[string]string(name='headers'),
  body: ListIpsecServerLogsResponseBody(name='body'),
}

async function listIpsecServerLogs(request: ListIpsecServerLogsRequest): ListIpsecServerLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIpsecServerLogs', 'POST', '/', 'json', false, 'json', request);
}

model ListIpsecServersRequest {
  ipsecServerId?: [ string ](name='IpsecServerId', example='iss-bp1bo3xuvcxo7ixll****', maxLength=128, position='Query'),
  ipsecServerName?: string(name='IpsecServerName', example='test', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm2ogj****', position='Query'),
}

model ListIpsecServersResponseBody = {
  ipsecServers?: [ 
    {
      clientIpPool?: string(name='ClientIpPool', example='10.0.0.0/24'),
      creationTime?: string(name='CreationTime', example='2018-12-03T10:11:55Z'),
      effectImmediately?: boolean(name='EffectImmediately', example='false'),
      iDaaSInstanceId?: string(name='IDaaSInstanceId', example='idaas-cn-hangzhou-****'),
      ikeConfig?: {
        ikeAuthAlg?: string(name='IkeAuthAlg', example='sha1'),
        ikeEncAlg?: string(name='IkeEncAlg', example='aes'),
        ikeLifetime?: long(name='IkeLifetime', example='86400'),
        ikeMode?: string(name='IkeMode', example='main'),
        ikePfs?: string(name='IkePfs', example='group2'),
        ikeVersion?: string(name='IkeVersion', example='ikev2'),
        localId?: string(name='LocalId', example='116.64.XX.XX'),
        remoteId?: string(name='RemoteId', example='139.67.XX.XX'),
      }(name='IkeConfig'),
      internetIp?: string(name='InternetIp', example='47.22.XX.XX'),
      ipsecConfig?: {
        ipsecAuthAlg?: string(name='IpsecAuthAlg', example='sha1'),
        ipsecEncAlg?: string(name='IpsecEncAlg', example='aes'),
        ipsecLifetime?: long(name='IpsecLifetime', example='86400'),
        ipsecPfs?: string(name='IpsecPfs', example='group2'),
      }(name='IpsecConfig'),
      ipsecServerId?: string(name='IpsecServerId', example='iss-bp1bo3xuvcxo7ixll****'),
      ipsecServerName?: string(name='IpsecServerName', example='test'),
      localSubnet?: string(name='LocalSubnet', example='192.168.0.0/16,172.17.0.0/16'),
      maxConnections?: int32(name='MaxConnections', example='5'),
      multiFactorAuthEnabled?: boolean(name='MultiFactorAuthEnabled', example='true'),
      onlineClientCount?: int32(name='OnlineClientCount', example='1'),
      psk?: string(name='Psk', example='pgw6dy7d****'),
      pskEnabled?: boolean(name='PskEnabled', example='true'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm2ogj****'),
    }
  ](name='IpsecServers'),
  maxResults?: int32(name='MaxResults', example='1'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B457'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListIpsecServersResponse = {
  headers: map[string]string(name='headers'),
  body: ListIpsecServersResponseBody(name='body'),
}

async function listIpsecServers(request: ListIpsecServersRequest): ListIpsecServersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIpsecServers', 'POST', '/', 'json', false, 'json', request);
}

model ListIpv4GatewaysRequest {
  ipv4GatewayId?: string(name='Ipv4GatewayId', example='ipv4gw-5tsnc6s4ogsedtp3k****', position='Query'),
  ipv4GatewayName?: string(name='Ipv4GatewayName', example='name', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='ap-southeast-6', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Query'),
  vpcId?: string(name='VpcId', example='vpc-5tsrxlw7dv074gci4****', position='Query'),
}

model ListIpv4GatewaysResponseBody = {
  ipv4GatewayModels?: [ 
    {
      enabled?: boolean(name='Enabled', example='true'),
      gmtCreate?: string(name='GmtCreate', example='2021-12-02T07:07:35Z'),
      ipv4GatewayDescription?: string(name='Ipv4GatewayDescription', example='test'),
      ipv4GatewayId?: string(name='Ipv4GatewayId', example='ipv4gw-5tsnc6s4ogsedtp3k****'),
      ipv4GatewayName?: string(name='Ipv4GatewayName', example='name'),
      ipv4GatewayRouteTableId?: string(name='Ipv4GatewayRouteTableId', example='vtb-5ts0ohchwkp3dydt2****'),
      resourceGroupId?: string(name='ResourceGroupId'),
      status?: string(name='Status', example='Created'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      vpcId?: string(name='VpcId', example='vpc-5tsrxlw7dv074gci4****'),
    }
  ](name='Ipv4GatewayModels'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='2D265800-E306-529C-8418-84B0A1D201DB'),
  totalCount?: string(name='TotalCount', example='1'),
}

model ListIpv4GatewaysResponse = {
  headers: map[string]string(name='headers'),
  body: ListIpv4GatewaysResponseBody(name='body'),
}

async function listIpv4Gateways(request: ListIpv4GatewaysRequest): ListIpv4GatewaysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIpv4Gateways', 'POST', '/', 'json', false, 'json', request);
}

model ListNatIpCidrsRequest {
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  maxResults?: string(name='MaxResults', example='20', position='Query'),
  natGatewayId: string(name='NatGatewayId', example='ngw-gw8v16wgvtq26vh59****', position='Query'),
  natIpCidr?: string(name='NatIpCidr', example='172.16.0.0/24', position='Query'),
  natIpCidrName?: [ string ](name='NatIpCidrName', example='test', position='Query'),
  natIpCidrStatus?: string(name='NatIpCidrStatus', example='Available', position='Query'),
  natIpCidrs?: [ string ](name='NatIpCidrs', example='172.16.0.0/24', position='Query'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='eu-central-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListNatIpCidrsResponseBody = {
  natIpCidrs?: [ 
    {
      creationTime?: string(name='CreationTime', example='2021-06-28T20:50Z'),
      isDefault?: boolean(name='IsDefault', example='true'),
      natGatewayId?: string(name='NatGatewayId', example='ngw-gw8v16wgvtq26vh59****'),
      natIpCidr?: string(name='NatIpCidr', example='172.16.0.0/24'),
      natIpCidrDescription?: string(name='NatIpCidrDescription', example='test'),
      natIpCidrId?: string(name='NatIpCidrId', example='vpcnatcidr-gw8ov42ei6xh1jys2****'),
      natIpCidrName?: string(name='NatIpCidrName', example='Name'),
      natIpCidrStatus?: string(name='NatIpCidrStatus', example='Available'),
    }
  ](name='NatIpCidrs'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', example='7479A224-4A28-4895-9604-11F48BCE6A88'),
  totalCount?: string(name='TotalCount', example='1'),
}

model ListNatIpCidrsResponse = {
  headers: map[string]string(name='headers'),
  body: ListNatIpCidrsResponseBody(name='body'),
}

async function listNatIpCidrs(request: ListNatIpCidrsRequest): ListNatIpCidrsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNatIpCidrs', 'POST', '/', 'json', false, 'json', request);
}

model ListNatIpsRequest {
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  maxResults?: string(name='MaxResults', example='20', position='Query'),
  natGatewayId: string(name='NatGatewayId', example='ngw-gw8v16wgvtq26vh59****', position='Query'),
  natIpCidr?: string(name='NatIpCidr', example='192.168.0.0/24', position='Query'),
  natIpIds?: [ string ](name='NatIpIds', example='vpcnatip-gw8a863sut1zijxh0****', position='Query'),
  natIpName?: [ string ](name='NatIpName', example='test', position='Query'),
  natIpStatus?: string(name='NatIpStatus', example='Available', position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****f84eb48b699f0a4883', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='eu-central-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListNatIpsResponseBody = {
  natIps?: [ 
    {
      isDefault?: boolean(name='IsDefault', example='true'),
      natGatewayId?: string(name='NatGatewayId', example='ngw-gw8v16wgvtq26vh59****'),
      natIp?: string(name='NatIp', example='192.168.0.126'),
      natIpCidr?: string(name='NatIpCidr', example='192.168.0.0/24'),
      natIpDescription?: string(name='NatIpDescription', example='default'),
      natIpId?: string(name='NatIpId', example='vpcnatip-gw8a863sut1zijxh0****'),
      natIpName?: string(name='NatIpName', example='default'),
      natIpStatus?: string(name='NatIpStatus', example='Available'),
    }
  ](name='NatIps'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='7E78CEEA-BF8F-44D1-9DCD-D9141135B71E'),
  totalCount?: string(name='TotalCount', example='1'),
}

model ListNatIpsResponse = {
  headers: map[string]string(name='headers'),
  body: ListNatIpsResponseBody(name='body'),
}

async function listNatIps(request: ListNatIpsRequest): ListNatIpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNatIps', 'POST', '/', 'json', false, 'json', request);
}

model ListPrefixListsRequest {
  maxResults?: long(name='MaxResults', example='20', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prefixListIds?: [ string ](name='PrefixListIds', description='前缀列表的实例ID', example='pl-m5estsqsdqwg88hjf****', position='Query'),
  prefixListName?: string(name='PrefixListName', example='name', position='Query'),
  regionId: string(name='RegionId', description='地域', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Query'),
}

model ListPrefixListsResponseBody = {
  maxResults?: long(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  prefixLists?: [ 
    {
      cidrBlocks?: [ string ](name='CidrBlocks', description='前缀列表包含的网段'),
      creationTime?: string(name='CreationTime', description='创建时间', example='2022-07-12T14:22:32Z'),
      ipVersion?: string(name='IpVersion', description='IpVersion', example='ipv4'),
      maxEntries?: int32(name='MaxEntries', example='10'),
      ownerId?: string(name='OwnerId', example='1210123456123456'),
      prefixListDescription?: string(name='PrefixListDescription', description='描述', example='Created with oss service by system.'),
      prefixListId?: string(name='PrefixListId', description='前缀列表的实例ID', example='pl-m5estsqsdqwg88hjf****'),
      prefixListName?: string(name='PrefixListName', description='名称', example='test'),
      prefixListStatus?: string(name='PrefixListStatus', example='Created'),
      regionId?: string(name='RegionId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      shareType?: string(name='ShareType', example='Shared'),
      status?: string(name='Status', example='Created'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
    }
  ](name='PrefixLists'),
  requestId?: string(name='RequestId', description='Id of the request', example='DF72F7BB-5DFA-529C-887E-B0BB70D89C4F'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListPrefixListsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPrefixListsResponseBody(name='body'),
}

/**
  * **
  *
 */
async function listPrefixLists(request: ListPrefixListsRequest): ListPrefixListsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrefixLists', 'POST', '/', 'json', false, 'json', request);
}

model ListPublicIpAddressPoolCidrBlocksRequest {
  cidrBlock?: string(name='CidrBlock', example='47.0.XX.XX/24', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  publicIpAddressPoolId: string(name='PublicIpAddressPoolId', example='pippool-6wetvn6fumkgycssx****', position='Query'),
  regionId: string(name='RegionId', example='cn-chengdu', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListPublicIpAddressPoolCidrBlocksResponseBody = {
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  publicIpPoolCidrBlockList?: [ 
    {
      cidrBlock?: string(name='CidrBlock', example='47.0.XX.XX/24'),
      creationTime?: string(name='CreationTime', example='2022-05-10T01:37:38Z'),
      publicIpAddressPoolId?: string(name='PublicIpAddressPoolId', example='pippool-6wetvn6fumkgycssx****'),
      status?: string(name='Status', example='Created'),
      totalIpNum?: int32(name='TotalIpNum', example='20'),
      usedIpNum?: int32(name='UsedIpNum', example='20'),
    }
  ](name='PublicIpPoolCidrBlockList'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListPublicIpAddressPoolCidrBlocksResponse = {
  headers: map[string]string(name='headers'),
  body: ListPublicIpAddressPoolCidrBlocksResponseBody(name='body'),
}

async function listPublicIpAddressPoolCidrBlocks(request: ListPublicIpAddressPoolCidrBlocksRequest): ListPublicIpAddressPoolCidrBlocksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPublicIpAddressPoolCidrBlocks', 'POST', '/', 'json', false, 'json', request);
}

model ListPublicIpAddressPoolsRequest {
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  isp?: string(name='Isp', example='BGP', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  name?: string(name='Name', example='AddressPoolName', position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  publicIpAddressPoolIds?: [ string ](name='PublicIpAddressPoolIds', position='Query'),
  regionId: string(name='RegionId', example='cn-chengdu', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', example='Created', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Query'),
}

model ListPublicIpAddressPoolsResponseBody = {
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  publicIpAddressPoolList?: [ 
    {
      creationTime?: string(name='CreationTime', example='2022-05-10T01:37:38Z'),
      description?: string(name='Description', example='AddressPoolDescription'),
      ipAddressRemaining?: boolean(name='IpAddressRemaining', example='true'),
      isp?: string(name='Isp', example='BGP'),
      name?: string(name='Name', example='AddressPoolName'),
      ownerId?: long(name='OwnerId'),
      publicIpAddressPoolId?: string(name='PublicIpAddressPoolId', example='pippool-6wetvn6fumkgycssx****'),
      regionId?: string(name='RegionId', example='cn-chengdu'),
      resourceGroupId?: string(name='ResourceGroupId'),
      shareType?: string(name='ShareType'),
      status?: string(name='Status', example='Created'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      totalIpNum?: int32(name='TotalIpNum', example='100'),
      usedIpNum?: int32(name='UsedIpNum', example='20'),
    }
  ](name='PublicIpAddressPoolList'),
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListPublicIpAddressPoolsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPublicIpAddressPoolsResponseBody(name='body'),
}

async function listPublicIpAddressPools(request: ListPublicIpAddressPoolsRequest): ListPublicIpAddressPoolsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPublicIpAddressPools', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  maxResults?: int32(name='MaxResults', example='50', maximum=50, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', example='vpc-bp16qjewdsunr41m1****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', example='VPC', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='DE65F6B7-7566-4802-9007-96F2494AC512'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', example='vpc-bp16qjewdsunr41m1****'),
      resourceType?: string(name='ResourceType', example='VPC'),
      tagKey?: string(name='TagKey', example='FinanceDept'),
      tagValue?: string(name='TagValue', example='FinanceJoshua'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesForExpressConnectRequest {
  maxResults?: int32(name='MaxResults', example='20', maximum=50, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', example='PHYSICALCONNECTION', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesForExpressConnectResponseBody = {
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', example='pc-bp16qjewdsunr41m1****'),
      resourceType?: string(name='ResourceType', example='PHYSICALCONNECTION'),
      tagKey?: string(name='TagKey', example='FinanceDept'),
      tagValue?: string(name='TagValue', example='FinanceJoshua'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesForExpressConnectResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesForExpressConnectResponseBody(name='body'),
}

async function listTagResourcesForExpressConnect(request: ListTagResourcesForExpressConnectRequest): ListTagResourcesForExpressConnectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResourcesForExpressConnect', 'POST', '/', 'json', false, 'json', request);
}

model ListTrafficMirrorFiltersRequest {
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hongkong', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Query'),
  trafficMirrorFilterIds?: [ string ](name='TrafficMirrorFilterIds', example='tmf-j6cmls82xnc86vtpe****', maxLength=128, position='Query'),
  trafficMirrorFilterName?: string(name='TrafficMirrorFilterName', example='abc', position='Query'),
}

model ListTrafficMirrorFiltersResponseBody = {
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='739CA01C-92EB-4C69-BCC0-280149C6F41E'),
  totalCount?: string(name='TotalCount', example='1'),
  trafficMirrorFilters?: [ 
    {
      egressRules?: [ 
        {
          action?: string(name='Action', example='accept'),
          destinationCidrBlock?: string(name='DestinationCidrBlock', example='10.0.0.0/24'),
          destinationPortRange?: string(name='DestinationPortRange', example='22/40'),
          priority?: int32(name='Priority', example='1'),
          protocol?: string(name='Protocol', example='TCP'),
          sourceCidrBlock?: string(name='SourceCidrBlock', example='10.0.0.0/24'),
          sourcePortRange?: string(name='SourcePortRange', example='22/40'),
          trafficDirection?: string(name='TrafficDirection', example='egress'),
          trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', example='tmf-j6cmls82xnc86vtpe****'),
          trafficMirrorFilterRuleId?: string(name='TrafficMirrorFilterRuleId', example='tmr-j6c89rzmtd3hhdugq****'),
          trafficMirrorFilterRuleStatus?: string(name='TrafficMirrorFilterRuleStatus', example='Created'),
        }
      ](name='EgressRules'),
      ingressRules?: [ 
        {
          action?: string(name='Action', example='accept'),
          destinationCidrBlock?: string(name='DestinationCidrBlock', example='0.0.0.0/0'),
          destinationPortRange?: string(name='DestinationPortRange', example='-1/-1'),
          priority?: int32(name='Priority', example='1'),
          protocol?: string(name='Protocol', example='ALL'),
          sourceCidrBlock?: string(name='SourceCidrBlock', example='0.0.0.0/0'),
          sourcePortRange?: string(name='SourcePortRange', example='-1/-1'),
          trafficDirection?: string(name='TrafficDirection', example='ingress'),
          trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', example='tmf-j6cmls82xnc86vtpe****'),
          trafficMirrorFilterRuleId?: string(name='TrafficMirrorFilterRuleId', example='tmr-j6cezu8e68rnpepet****'),
          trafficMirrorFilterRuleStatus?: string(name='TrafficMirrorFilterRuleStatus', example='Created'),
        }
      ](name='IngressRules'),
      resourceGroupId?: string(name='ResourceGroupId'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      trafficMirrorFilterDescription?: string(name='TrafficMirrorFilterDescription', example='This is a filter.'),
      trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', example='tmf-j6cmls82xnc86vtpe****'),
      trafficMirrorFilterName?: string(name='TrafficMirrorFilterName', example='abc'),
      trafficMirrorFilterStatus?: string(name='TrafficMirrorFilterStatus', example='Created'),
    }
  ](name='TrafficMirrorFilters'),
}

model ListTrafficMirrorFiltersResponse = {
  headers: map[string]string(name='headers'),
  body: ListTrafficMirrorFiltersResponseBody(name='body'),
}

async function listTrafficMirrorFilters(request: ListTrafficMirrorFiltersRequest): ListTrafficMirrorFiltersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTrafficMirrorFilters', 'POST', '/', 'json', false, 'json', request);
}

model ListTrafficMirrorSessionsRequest {
  enabled?: boolean(name='Enabled', example='false', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  priority?: int32(name='Priority', example='1', position='Query'),
  regionId: string(name='RegionId', example='cn-hongkong', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Query'),
  trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', example='tmf-j6cmls82xnc86vtpe****', position='Query'),
  trafficMirrorSessionIds?: [ string ](name='TrafficMirrorSessionIds', example='tms-j6cla50buc44ap8tu****', maxLength=128, position='Query'),
  trafficMirrorSessionName?: string(name='TrafficMirrorSessionName', example='abc', position='Query'),
  trafficMirrorSourceId?: string(name='TrafficMirrorSourceId', example='eni-j6c8znm5l1yt4sox*****', position='Query'),
  trafficMirrorTargetId?: string(name='TrafficMirrorTargetId', example='eni-j6c2fp57q8rr47rp****', position='Query'),
  virtualNetworkId?: int32(name='VirtualNetworkId', example='10', position='Query'),
}

model ListTrafficMirrorSessionsResponseBody = {
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='739CA01C-92EB-4C69-BCC0-280149C6F41E'),
  totalCount?: string(name='TotalCount', example='1'),
  trafficMirrorSessions?: [ 
    {
      enabled?: boolean(name='Enabled', example='false'),
      packetLength?: int32(name='PacketLength', example='1500'),
      priority?: int32(name='Priority', example='1'),
      resourceGroupId?: string(name='ResourceGroupId'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', example='tmf-j6cmls82xnc86vtpe****'),
      trafficMirrorSessionBusinessStatus?: string(name='TrafficMirrorSessionBusinessStatus', example='Normal'),
      trafficMirrorSessionDescription?: string(name='TrafficMirrorSessionDescription', example='This is a session.'),
      trafficMirrorSessionId?: string(name='TrafficMirrorSessionId', example='tms-j6cla50buc44ap8tu****'),
      trafficMirrorSessionName?: string(name='TrafficMirrorSessionName', example='abc'),
      trafficMirrorSessionStatus?: string(name='TrafficMirrorSessionStatus', example='Created'),
      trafficMirrorSourceIds?: [ string ](name='TrafficMirrorSourceIds'),
      trafficMirrorTargetId?: string(name='TrafficMirrorTargetId', example='eni-j6c2fp57q8rr47rp****'),
      trafficMirrorTargetType?: string(name='TrafficMirrorTargetType', example='NetworkInterface'),
      virtualNetworkId?: int32(name='VirtualNetworkId', example='10'),
    }
  ](name='TrafficMirrorSessions'),
}

model ListTrafficMirrorSessionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTrafficMirrorSessionsResponseBody(name='body'),
}

async function listTrafficMirrorSessions(request: ListTrafficMirrorSessionsRequest): ListTrafficMirrorSessionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTrafficMirrorSessions', 'POST', '/', 'json', false, 'json', request);
}

model ListVirtualPhysicalConnectionsRequest {
  isConfirmed?: boolean(name='IsConfirmed', description='Vpconn是否被确认', example='true', position='Query'),
  maxResults?: int32(name='MaxResults', description='单次查询最大量', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='单次查询最大量', example='dd20****', position='Query'),
  physicalConnectionId?: string(name='PhysicalConnectionId', description='Vpconn的主Pconn', example='pc-bp1ciz7ekd2grn1as****', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tags', position='Query'),
  virtualPhysicalConnectionAliUids?: [ string ](name='VirtualPhysicalConnectionAliUids', description='Vpconn的OwnerUid', example='189xxx', position='Query'),
  virtualPhysicalConnectionBusinessStatus?: string(name='VirtualPhysicalConnectionBusinessStatus', description='Vpconn的商业状态', example='Normal', position='Query'),
  virtualPhysicalConnectionIds?: [ string ](name='VirtualPhysicalConnectionIds', description='根据Vpconn的ID列表过滤', example='pc-xxx', position='Query'),
  virtualPhysicalConnectionStatuses?: [ string ](name='VirtualPhysicalConnectionStatuses', description='Vpconn的状态', example='pc-xxx', position='Query'),
  vlanIds?: [ string ](name='VlanIds', description='Vpconn的vlanId', example='pc-xxx', position='Query'),
}

model ListVirtualPhysicalConnectionsResponseBody = {
  count?: int32(name='Count', description='本次查询数量', example='1'),
  nextToken?: string(name='NextToken', example='dd20****'),
  requestId?: string(name='RequestId', description='Id of the request', example='2A55F69E-EE3D-5CBE-8805-734F7D5B46B9'),
  totalCount?: int32(name='TotalCount', description='总数', example='1'),
  virtualPhysicalConnections?: [ 
    {
      accessPointId?: string(name='AccessPointId', example='ap-cn-hangzhou-finance-yh-E'),
      adLocation?: string(name='AdLocation'),
      aliUid?: string(name='AliUid', example='253460731706911258'),
      bandwidth?: long(name='Bandwidth', example='50'),
      businessStatus?: string(name='BusinessStatus', example='Normal'),
      chargeType?: string(name='ChargeType', example='Prepaid'),
      circuitCode?: string(name='CircuitCode', example='longtel001'),
      creationTime?: string(name='CreationTime', example='2021-06-08T12:20:55'),
      description?: string(name='Description', example='desctest'),
      enabledTime?: string(name='EnabledTime', example='2021-10-08T10:44Z'),
      endTime?: string(name='EndTime', example='2021-11-08T16:00:00Z'),
      expectSpec?: string(name='ExpectSpec', example='50M'),
      lineOperator?: string(name='LineOperator', example='CU'),
      loaStatus?: string(name='LoaStatus', example='Available'),
      name?: string(name='Name', example='nametest'),
      orderMode?: string(name='OrderMode', example='PayByPhysicalConnectionOwner'),
      parentPhysicalConnectionAliUid?: string(name='ParentPhysicalConnectionAliUid', example='283117732402483989'),
      parentPhysicalConnectionId?: string(name='ParentPhysicalConnectionId', example='pc-bp1ciz7ekd2grn1as****'),
      peerLocation?: string(name='PeerLocation'),
      physicalConnectionId?: string(name='PhysicalConnectionId', example='pc-bp1mrgfbtmc9brre7****'),
      portNumber?: string(name='PortNumber', example='80'),
      portType?: string(name='PortType', example='10GBase-LR'),
      productType?: string(name='ProductType', example='VirtualPhysicalConnection'),
      redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId', example='pc-119mfjzm****'),
      resourceGroupId?: string(name='ResourceGroupId'),
      spec?: string(name='Spec', example='50M'),
      status?: string(name='Status', example='Enabled'),
      type?: string(name='Type', example='VPC'),
      virtualPhysicalConnectionStatus?: string(name='VirtualPhysicalConnectionStatus', example='Confirmed'),
      vlanId?: string(name='VlanId', example='10'),
    }
  ](name='VirtualPhysicalConnections', description='Vpconn'),
}

model ListVirtualPhysicalConnectionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListVirtualPhysicalConnectionsResponseBody(name='body'),
}

async function listVirtualPhysicalConnections(request: ListVirtualPhysicalConnectionsRequest): ListVirtualPhysicalConnectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVirtualPhysicalConnections', 'POST', '/', 'json', false, 'json', request);
}

model ListVpcEndpointServicesByEndUserRequest {
  maxResults?: long(name='MaxResults', example='20', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='地域', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  serviceName?: string(name='ServiceName', example='com.aliyun.cn-hangzhou.oss', position='Query'),
}

model ListVpcEndpointServicesByEndUserResponseBody = {
  maxResults?: long(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='Id of the request', example='0AB1129F-32C1-5E4D-9E22-E4A859CA46EB'),
  services?: [ 
    {
      defaultPolicyDocument?: string(name='DefaultPolicyDocument', example='{   \\"Version\\" : \\"1\\",   \\"Statement\\" : [ {     \\"Effect\\" : \\"Allow\\",     \\"Action\\" : \\"*\\",     \\"Principal\\" : \\"*\\",     \\"Resource\\" : \\"*\\"   } ] }'),
      serviceDomain?: string(name='ServiceDomain', example='oss-admin.aliyuncs.com'),
      serviceId?: string(name='ServiceId', example='vpces-m5enwdmilo210aibo9****'),
      serviceName?: string(name='ServiceName', example='com.aliyun.cn-hangzhou.oss'),
      supportPolicy?: boolean(name='SupportPolicy', example='true'),
    }
  ](name='Services'),
}

model ListVpcEndpointServicesByEndUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListVpcEndpointServicesByEndUserResponseBody(name='body'),
}

async function listVpcEndpointServicesByEndUser(request: ListVpcEndpointServicesByEndUserRequest): ListVpcEndpointServicesByEndUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVpcEndpointServicesByEndUser', 'POST', '/', 'json', false, 'json', request);
}

model ListVpcGatewayEndpointsRequest {
  endpointId?: string(name='EndpointId', description='VPC网关实例ID', example='vpce-bp1i1212ss2whuwyw****', position='Query'),
  endpointName?: string(name='EndpointName', description='VPC网关实例名称', example='test', position='Query'),
  maxResults?: long(name='MaxResults', example='20', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='地域', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  serviceName?: string(name='ServiceName', description='后端的服务名称', example='com.aliyun.cn-hangzhou.oss', position='Query'),
}

model ListVpcGatewayEndpointsResponseBody = {
  endpoints?: [ 
    {
      associatedRouteTables?: [ string ](name='AssociatedRouteTables'),
      creationTime?: string(name='CreationTime', example='2021-09-08T08:43:04Z'),
      endpointDescription?: string(name='EndpointDescription', example='test_description'),
      endpointId?: string(name='EndpointId', example='vpce-bp1i1212ss2whuwyw****'),
      endpointName?: string(name='EndpointName', example='test'),
      endpointStatus?: string(name='EndpointStatus', example='Created'),
      policyDocument?: string(name='PolicyDocument', example='{\\n  \\"Version\\": \\"1\\",\\n  \\"Statement\\": [\\n    {\\n      \\"Effect\\": \\"Allow\\",\\n      \\"Action\\": \\"*\\",\\n      \\"Principal\\": \\"*\\",\\n      \\"Resource\\": \\"*\\"\\n    }\\n  ]\\n}'),
      serviceName?: string(name='ServiceName', example='com.aliyun.cn-hangzhou.oss'),
      vpcId?: string(name='VpcId', example='vpc-bp1gsk7h12ew7oegk****'),
    }
  ](name='Endpoints'),
  maxResults?: long(name='MaxResults', description='本次请求最大数量', example='20'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='Id of the request', example='0AB1129F-32C1-5E4D-9E22-E4A859CA46EB'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListVpcGatewayEndpointsResponse = {
  headers: map[string]string(name='headers'),
  body: ListVpcGatewayEndpointsResponseBody(name='body'),
}

async function listVpcGatewayEndpoints(request: ListVpcGatewayEndpointsRequest): ListVpcGatewayEndpointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVpcGatewayEndpoints', 'POST', '/', 'json', false, 'json', request);
}

model ListVpnCertificateAssociationsRequest {
  certificateId?: [ string ](name='CertificateId', example='6bfe4218-ea1d****', maxLength=128, position='Query'),
  certificateType?: string(name='CertificateType', example='Signature', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', position='Query'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be0****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  vpnGatewayId?: [ string ](name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm****', maxLength=128, position='Query'),
}

model ListVpnCertificateAssociationsResponseBody = {
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='caeba0bbb2be****'),
  requestId?: string(name='RequestId', example='197AF2BD-547F-470C-B29A-8400400233EB'),
  totalCount?: int32(name='TotalCount', example='4'),
  vpnCertificateRelations?: [ 
    {
      associationTime?: string(name='AssociationTime', example='2020-12-29T09:30:29Z'),
      certificateId?: string(name='CertificateId', example='6bfe4218-ea1d****'),
      certificateType?: string(name='CertificateType', example='Signature'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1usbiorilk51760****'),
    }
  ](name='VpnCertificateRelations'),
}

model ListVpnCertificateAssociationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListVpnCertificateAssociationsResponseBody(name='body'),
}

async function listVpnCertificateAssociations(request: ListVpnCertificateAssociationsRequest): ListVpnCertificateAssociationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVpnCertificateAssociations', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBgpGroupAttributeRequest {
  authKey?: string(name='AuthKey', example='!PWZ2****', position='Query'),
  bgpGroupId: string(name='BgpGroupId', example='bgpg-wz9f62v4fbg2g****', position='Query'),
  clearAuthKey?: boolean(name='ClearAuthKey', example='false', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', example='BGP', position='Query'),
  isFakeAsn?: boolean(name='IsFakeAsn', example='false', position='Query'),
  localAsn?: long(name='LocalAsn', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerAsn?: long(name='PeerAsn', example='1****', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeQuota?: int32(name='RouteQuota', position='Query'),
}

model ModifyBgpGroupAttributeResponseBody = {
  requestId?: string(name='RequestId', example='8C3C6D7C-A1CE-4FD8-BC57-DC493A55F76F'),
}

model ModifyBgpGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBgpGroupAttributeResponseBody(name='body'),
}

async function modifyBgpGroupAttribute(request: ModifyBgpGroupAttributeRequest): ModifyBgpGroupAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBgpGroupAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBgpPeerAttributeRequest {
  bfdMultiHop?: int32(name='BfdMultiHop', example='3', position='Query'),
  bgpGroupId?: string(name='BgpGroupId', example='bgpg-m5eo12jxuw2hc0uqq****', position='Query'),
  bgpPeerId: string(name='BgpPeerId', example='bgp-m5eoyp2mwegk8ce9v****', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  enableBfd?: boolean(name='EnableBfd', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerIpAddress?: string(name='PeerIpAddress', example='116.62.XX.XX', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyBgpPeerAttributeResponseBody = {
  requestId?: string(name='RequestId', example='D4B7649A-61BB-4C64-A586-1DFF1EDA6A42'),
}

model ModifyBgpPeerAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBgpPeerAttributeResponseBody(name='body'),
}

async function modifyBgpPeerAttribute(request: ModifyBgpPeerAttributeRequest): ModifyBgpPeerAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBgpPeerAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCommonBandwidthPackageAttributeRequest {
  bandwidthPackageId: string(name='BandwidthPackageId', example='cbwp-2ze2ic1xd2qeqk145****', position='Query'),
  description?: string(name='Description', position='Query'),
  name?: string(name='Name', example='test123', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyCommonBandwidthPackageAttributeResponseBody = {
  requestId?: string(name='RequestId', example='B450CAD8-50BC-4506-ADA7-35C6CE63E96B'),
}

model ModifyCommonBandwidthPackageAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCommonBandwidthPackageAttributeResponseBody(name='body'),
}

async function modifyCommonBandwidthPackageAttribute(request: ModifyCommonBandwidthPackageAttributeRequest): ModifyCommonBandwidthPackageAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCommonBandwidthPackageAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCommonBandwidthPackageIpBandwidthRequest {
  bandwidth: string(name='Bandwidth', example='500', position='Query'),
  bandwidthPackageId: string(name='BandwidthPackageId', example='cbwp-2zep6hw5d6y8exscd****', position='Query'),
  eipId: string(name='EipId', example='eip-2zewysoansu0svfbg****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyCommonBandwidthPackageIpBandwidthResponseBody = {
  requestId?: string(name='RequestId', example='63D187BF-A30A-4DD6-B68D-FF182C96D8A2'),
}

model ModifyCommonBandwidthPackageIpBandwidthResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCommonBandwidthPackageIpBandwidthResponseBody(name='body'),
}

async function modifyCommonBandwidthPackageIpBandwidth(request: ModifyCommonBandwidthPackageIpBandwidthRequest): ModifyCommonBandwidthPackageIpBandwidthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCommonBandwidthPackageIpBandwidth', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCommonBandwidthPackageSpecRequest {
  bandwidth: string(name='Bandwidth', example='1000', position='Query'),
  bandwidthPackageId: string(name='BandwidthPackageId', example='cbwp-2ze2ic1xd2qeqk145****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyCommonBandwidthPackageSpecResponseBody = {
  requestId?: string(name='RequestId', example='7F129000-F929-4AF5-BE8D-BAE434C795306'),
}

model ModifyCommonBandwidthPackageSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCommonBandwidthPackageSpecResponseBody(name='body'),
}

async function modifyCommonBandwidthPackageSpec(request: ModifyCommonBandwidthPackageSpecRequest): ModifyCommonBandwidthPackageSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCommonBandwidthPackageSpec', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCustomerGatewayAttributeRequest {
  authKey?: string(name='AuthKey', example='AuthKey****', position='Query'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44****', position='Query'),
  customerGatewayId: string(name='CustomerGatewayId', example='cgw-bp1pvpl9r9adju6l5****', position='Query'),
  description?: string(name='Description', example='desctest', position='Query'),
  name?: string(name='Name', example='nametest', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyCustomerGatewayAttributeResponseBody = {
  createTime?: long(name='CreateTime', example='1492747187000'),
  customerGatewayId?: string(name='CustomerGatewayId', example='cgw-bp1pvpl9r9adju6l5****'),
  description?: string(name='Description', example='desctest'),
  ipAddress?: string(name='IpAddress', example='139.32.XX.XX'),
  name?: string(name='Name', example='nametest'),
  requestId?: string(name='RequestId', example='8AA5CE21-2E6A-4530-BDF5-F055849476E6'),
}

model ModifyCustomerGatewayAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCustomerGatewayAttributeResponseBody(name='body'),
}

async function modifyCustomerGatewayAttribute(request: ModifyCustomerGatewayAttributeRequest): ModifyCustomerGatewayAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCustomerGatewayAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyEipAddressAttributeRequest {
  allocationId: string(name='AllocationId', example='eip-2zeerraiwb7uj6i0d****', position='Query'),
  bandwidth?: string(name='Bandwidth', example='100', position='Query'),
  description?: string(name='Description', example='abc', position='Query'),
  name?: string(name='Name', example='Test123', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyEipAddressAttributeResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model ModifyEipAddressAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyEipAddressAttributeResponseBody(name='body'),
}

async function modifyEipAddressAttribute(request: ModifyEipAddressAttributeRequest): ModifyEipAddressAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyEipAddressAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyExpressCloudConnectionAttributeRequest {
  bgpAs?: string(name='BgpAs', example='sag-ejfge***', position='Query'),
  ceIp?: string(name='CeIp', example='172.16.**.**', position='Query'),
  description?: string(name='Description', example='ECC', position='Query'),
  eccId: string(name='EccId', example='ecc-bp1t9osmuln*******', position='Query'),
  name?: string(name='Name', example='doctest', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peIp?: string(name='PeIp', example='10.10.**.**', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyExpressCloudConnectionAttributeResponseBody = {
  requestId?: string(name='RequestId', example='E6385514-B0CC-48E3-B9F9-F7BFF64460A2'),
}

model ModifyExpressCloudConnectionAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyExpressCloudConnectionAttributeResponseBody(name='body'),
}

async function modifyExpressCloudConnectionAttribute(request: ModifyExpressCloudConnectionAttributeRequest): ModifyExpressCloudConnectionAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyExpressCloudConnectionAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyExpressCloudConnectionBandwidthRequest {
  bandwidth?: string(name='Bandwidth', example='2', position='Query'),
  eccId: string(name='EccId', example='ecc-xxxxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyExpressCloudConnectionBandwidthResponseBody = {
  requestId?: string(name='RequestId', example='E6385514-B0CC-48E3-B9F9-F7BFF64460A2'),
}

model ModifyExpressCloudConnectionBandwidthResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyExpressCloudConnectionBandwidthResponseBody(name='body'),
}

async function modifyExpressCloudConnectionBandwidth(request: ModifyExpressCloudConnectionBandwidthRequest): ModifyExpressCloudConnectionBandwidthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyExpressCloudConnectionBandwidth', 'POST', '/', 'json', false, 'json', request);
}

model ModifyFlowLogAttributeRequest {
  aggregationInterval?: int32(name='AggregationInterval', example='1', position='Query'),
  description?: string(name='Description', example='This is my Flowlog.', position='Query'),
  flowLogId: string(name='FlowLogId', example='fl-m5e8vhz2t21sel1nq****', position='Query'),
  flowLogName?: string(name='FlowLogName', example='myFlowlog', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-qingdao', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyFlowLogAttributeResponseBody = {
  requestId?: string(name='RequestId', example='F7DDDC17-FA06-4AC2-8F35-59D2470FCFC1'),
  success?: string(name='Success', example='true'),
}

model ModifyFlowLogAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyFlowLogAttributeResponseBody(name='body'),
}

async function modifyFlowLogAttribute(request: ModifyFlowLogAttributeRequest): ModifyFlowLogAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyFlowLogAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyForwardEntryRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  externalIp?: string(name='ExternalIp', example='116.85.XX.XX', position='Query'),
  externalPort?: string(name='ExternalPort', example='80', position='Query'),
  forwardEntryId: string(name='ForwardEntryId', example='fwd-8vbn3bc8roygjp0gy****', position='Query'),
  forwardEntryName?: string(name='ForwardEntryName', example='test', position='Query'),
  forwardTableId: string(name='ForwardTableId', example='ftb-8vbx8xu2lqj9qb334****', position='Query'),
  internalIp?: string(name='InternalIp', example='10.0.0.78', position='Query'),
  internalPort?: string(name='InternalPort', example='80', position='Query'),
  ipProtocol?: string(name='IpProtocol', example='TCP', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  portBreak?: boolean(name='PortBreak', example='false', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyForwardEntryResponseBody = {
  requestId?: string(name='RequestId', example='2315DEB7-5E92-423A-91F7-4C1EC9AD97C3'),
}

model ModifyForwardEntryResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyForwardEntryResponseBody(name='body'),
}

async function modifyForwardEntry(request: ModifyForwardEntryRequest): ModifyForwardEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyForwardEntry', 'POST', '/', 'json', false, 'json', request);
}

model ModifyFullNatEntryAttributeRequest {
  accessIp?: string(name='AccessIp', example='192.168.XX.XX', position='Query'),
  accessPort?: string(name='AccessPort', example='80', position='Query'),
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  fullNatEntryDescription?: string(name='FullNatEntryDescription', example='abcd', position='Query'),
  fullNatEntryId: string(name='FullNatEntryId', example='fullnat-gw8fz23jezpbblf1j****', position='Query'),
  fullNatEntryName?: string(name='FullNatEntryName', example='modify', position='Query'),
  fullNatTableId: string(name='FullNatTableId', example='fulltb-gw88z7hhlv43rmb26****', position='Query'),
  ipProtocol?: string(name='IpProtocol', example='TCP', position='Query'),
  natIp?: string(name='NatIp', example='192.168.XX.XX', position='Query'),
  natIpPort?: string(name='NatIpPort', example='80', position='Query'),
  networkInterfaceId?: string(name='NetworkInterfaceId', example='eni-gw8g131ef2dnbu3k****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='eu-central-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyFullNatEntryAttributeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='2315DEB7-5E92-423A-91F7-4C1EC9AD97C3'),
}

model ModifyFullNatEntryAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyFullNatEntryAttributeResponseBody(name='body'),
}

async function modifyFullNatEntryAttribute(request: ModifyFullNatEntryAttributeRequest): ModifyFullNatEntryAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyFullNatEntryAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyGlobalAccelerationInstanceAttributesRequest {
  description?: string(name='Description', example='My GA', position='Query'),
  globalAccelerationInstanceId: string(name='GlobalAccelerationInstanceId', example='ga-14fdsf3****', position='Query'),
  name?: string(name='Name', example='GA-1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyGlobalAccelerationInstanceAttributesResponseBody = {
  requestId?: string(name='RequestId', example='BD5BCEE8-F62C-40C2-9AC3-89XXXXXXXXX'),
}

model ModifyGlobalAccelerationInstanceAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyGlobalAccelerationInstanceAttributesResponseBody(name='body'),
}

async function modifyGlobalAccelerationInstanceAttributes(request: ModifyGlobalAccelerationInstanceAttributesRequest): ModifyGlobalAccelerationInstanceAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyGlobalAccelerationInstanceAttributes', 'POST', '/', 'json', false, 'json', request);
}

model ModifyGlobalAccelerationInstanceSpecRequest {
  bandwidth: string(name='Bandwidth', example='10', position='Query'),
  globalAccelerationInstanceId: string(name='GlobalAccelerationInstanceId', example='ga-32s33s****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyGlobalAccelerationInstanceSpecResponseBody = {
  requestId?: string(name='RequestId', example='BD5BCEE8-F62C-40C2-9AC3-89XXXXXXXXX'),
}

model ModifyGlobalAccelerationInstanceSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyGlobalAccelerationInstanceSpecResponseBody(name='body'),
}

async function modifyGlobalAccelerationInstanceSpec(request: ModifyGlobalAccelerationInstanceSpecRequest): ModifyGlobalAccelerationInstanceSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyGlobalAccelerationInstanceSpec', 'POST', '/', 'json', false, 'json', request);
}

model ModifyHaVipAttributeRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e0****', position='Query'),
  description?: string(name='Description', example='This is my HaVip.', position='Query'),
  haVipId: string(name='HaVipId', example='havip-2zeo05qre24nhrqp****', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyHaVipAttributeResponseBody = {
  requestId?: string(name='RequestId', example='C44F62BE-9CE7-4277-B117-69243F3988BF'),
}

model ModifyHaVipAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHaVipAttributeResponseBody(name='body'),
}

async function modifyHaVipAttribute(request: ModifyHaVipAttributeRequest): ModifyHaVipAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyHaVipAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIPv6TranslatorAclAttributeRequest {
  aclId: string(name='AclId', example='ipv6transacl-bp1de2xxxx', position='Query'),
  aclName: string(name='AclName', example='acl1', position='Query'),
  clientToken?: string(name='ClientToken', example='sha223ndd2333', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyIPv6TranslatorAclAttributeResponseBody = {
  requestId?: string(name='RequestId', example='8B2F5262-6B57-43F2-xxxxx'),
}

model ModifyIPv6TranslatorAclAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyIPv6TranslatorAclAttributeResponseBody(name='body'),
}

async function modifyIPv6TranslatorAclAttribute(request: ModifyIPv6TranslatorAclAttributeRequest): ModifyIPv6TranslatorAclAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIPv6TranslatorAclAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIPv6TranslatorAclListEntryRequest {
  aclEntryComment: string(name='AclEntryComment', example='client IP', position='Query'),
  aclEntryId: string(name='AclEntryId', example='ipv6transaclentry-bp1jzyn7ra8pyxehd****', position='Query'),
  aclId: string(name='AclId', example='ipv6transacl-bp1b4z3tleyhq1s50****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyIPv6TranslatorAclListEntryResponseBody = {
  requestId?: string(name='RequestId', example='8B2F5262-6B57-43F2-xxxxx'),
}

model ModifyIPv6TranslatorAclListEntryResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyIPv6TranslatorAclListEntryResponseBody(name='body'),
}

async function modifyIPv6TranslatorAclListEntry(request: ModifyIPv6TranslatorAclListEntryRequest): ModifyIPv6TranslatorAclListEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIPv6TranslatorAclListEntry', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIPv6TranslatorAttributeRequest {
  clientToken?: string(name='ClientToken', example='sha1111', position='Query'),
  description?: string(name='Description', example='instancedescription', position='Query'),
  ipv6TranslatorId: string(name='Ipv6TranslatorId', example='ipv6trans-bp1858ysxxxxxx', position='Query'),
  name?: string(name='Name', example='instancename', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyIPv6TranslatorAttributeResponseBody = {
  requestId?: string(name='RequestId', example='8B2F5262-6B57-43F2-xxxxx'),
}

model ModifyIPv6TranslatorAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyIPv6TranslatorAttributeResponseBody(name='body'),
}

async function modifyIPv6TranslatorAttribute(request: ModifyIPv6TranslatorAttributeRequest): ModifyIPv6TranslatorAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIPv6TranslatorAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIPv6TranslatorBandwidthRequest {
  autoPay?: boolean(name='AutoPay', example='false', position='Query'),
  bandwidth: int32(name='Bandwidth', example='2', position='Query'),
  clientToken?: string(name='ClientToken', example='sha1111', position='Query'),
  ipv6TranslatorId: string(name='Ipv6TranslatorId', example='ipv6trans-bp1858ysxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyIPv6TranslatorBandwidthResponseBody = {
  orderId?: string(name='OrderId', example='202304500950739'),
  requestId?: string(name='RequestId', example='EF8198EE-8FC9-49C2-A22E-xxxx'),
}

model ModifyIPv6TranslatorBandwidthResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyIPv6TranslatorBandwidthResponseBody(name='body'),
}

async function modifyIPv6TranslatorBandwidth(request: ModifyIPv6TranslatorBandwidthRequest): ModifyIPv6TranslatorBandwidthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIPv6TranslatorBandwidth', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIPv6TranslatorEntryRequest {
  aclId?: string(name='AclId', example='ipv6transacl-bp1de27sou71g0lfxxxx', position='Query'),
  aclStatus?: string(name='AclStatus', example='off', position='Query'),
  aclType?: string(name='AclType', example='white', position='Query'),
  allocateIpv6Port?: int32(name='AllocateIpv6Port', example='80', position='Query'),
  backendIpv4Addr?: string(name='BackendIpv4Addr', example='47.11.xx.xxx', position='Query'),
  backendIpv4Port?: int32(name='BackendIpv4Port', example='80', position='Query'),
  entryBandwidth?: int32(name='EntryBandwidth', example='10', position='Query'),
  entryDescription?: string(name='EntryDescription', example='entrydescription', position='Query'),
  entryName?: string(name='EntryName', example='entry1', position='Query'),
  ipv6TranslatorEntryId: string(name='Ipv6TranslatorEntryId', example='ipv6trans-bp1858ysxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transProtocol?: string(name='TransProtocol', example='tcp', position='Query'),
}

model ModifyIPv6TranslatorEntryResponseBody = {
  requestId?: string(name='RequestId', example='8B2F5262-6B57-43F2-xxxxx'),
}

model ModifyIPv6TranslatorEntryResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyIPv6TranslatorEntryResponseBody(name='body'),
}

async function modifyIPv6TranslatorEntry(request: ModifyIPv6TranslatorEntryRequest): ModifyIPv6TranslatorEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIPv6TranslatorEntry', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIpv6AddressAttributeRequest {
  description?: string(name='Description', example='test', position='Query'),
  ipv6AddressId: string(name='Ipv6AddressId', example='ipv6-hp32vv2klzw4yerdf****', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-huhehaote', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyIpv6AddressAttributeResponseBody = {
  requestId?: string(name='RequestId', example='D560AF68-4CE8-4A5C-B3FE-469F558094D0'),
}

model ModifyIpv6AddressAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyIpv6AddressAttributeResponseBody(name='body'),
}

async function modifyIpv6AddressAttribute(request: ModifyIpv6AddressAttributeRequest): ModifyIpv6AddressAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIpv6AddressAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIpv6GatewayAttributeRequest {
  description?: string(name='Description', example='ipv6description', position='Query'),
  ipv6GatewayId: string(name='Ipv6GatewayId', example='ipv6gw-hp39kh1ya51yzp2lu****', position='Query'),
  name?: string(name='Name', example='ipv6name', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-huhehaote', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyIpv6GatewayAttributeResponseBody = {
  requestId?: string(name='RequestId', example='9DFEDBEE-E5AB-49E8-A2DC-CC114C67AF75'),
}

model ModifyIpv6GatewayAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyIpv6GatewayAttributeResponseBody(name='body'),
}

async function modifyIpv6GatewayAttribute(request: ModifyIpv6GatewayAttributeRequest): ModifyIpv6GatewayAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIpv6GatewayAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIpv6GatewaySpecRequest {
  clientToken?: string(name='ClientToken', example='123456', position='Query'),
  ipv6GatewayId: string(name='Ipv6GatewayId', example='ipv6gw-123456xxxxxxxx', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-huhehaote', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  spec: string(name='Spec', position='Query'),
}

model ModifyIpv6GatewaySpecResponseBody = {
  requestId?: string(name='RequestId', example='9DFEDBEE-E5AB-49E8-A2DC-CC114C67AF75'),
}

model ModifyIpv6GatewaySpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyIpv6GatewaySpecResponseBody(name='body'),
}

async function modifyIpv6GatewaySpec(request: ModifyIpv6GatewaySpecRequest): ModifyIpv6GatewaySpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIpv6GatewaySpec', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIpv6InternetBandwidthRequest {
  bandwidth: long(name='Bandwidth', example='4', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ipv6AddressId?: string(name='Ipv6AddressId', example='ipv6bw-uf6hcyzu65v98v3du****', position='Query'),
  ipv6InternetBandwidthId?: string(name='Ipv6InternetBandwidthId', example='ipv6bw-uf6hcyzu65v98v3du****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-huhehaote', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyIpv6InternetBandwidthResponseBody = {
  requestId?: string(name='RequestId', example='D560AF68-4CE8-4A5C-B3FE-469F558094D0'),
}

model ModifyIpv6InternetBandwidthResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyIpv6InternetBandwidthResponseBody(name='body'),
}

async function modifyIpv6InternetBandwidth(request: ModifyIpv6InternetBandwidthRequest): ModifyIpv6InternetBandwidthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIpv6InternetBandwidth', 'POST', '/', 'json', false, 'json', request);
}

model ModifyNatGatewayAttributeRequest {
  description?: string(name='Description', example='Description', position='Query'),
  eipBindMode?: string(name='EipBindMode', example='NAT', position='Query'),
  icmpReplyEnabled?: boolean(name='IcmpReplyEnabled', example='false', position='Query'),
  name?: string(name='Name', example='nat123', position='Query'),
  natGatewayId: string(name='NatGatewayId', example='ngw-2ze0dcn4mq31qx2jc****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyNatGatewayAttributeResponseBody = {
  requestId?: string(name='RequestId', example='AB5F62CF-2B60-4458-A756-42C9DFE108D1'),
}

model ModifyNatGatewayAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyNatGatewayAttributeResponseBody(name='body'),
}

async function modifyNatGatewayAttribute(request: ModifyNatGatewayAttributeRequest): ModifyNatGatewayAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNatGatewayAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyNatGatewaySpecRequest {
  autoPay?: boolean(name='AutoPay', example='false', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655****', position='Query'),
  natGatewayId: string(name='NatGatewayId', example='ngw-bp1uewa15k4iy5770****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  spec: string(name='Spec', example='Middle', position='Query'),
}

model ModifyNatGatewaySpecResponseBody = {
  requestId?: string(name='RequestId', example='DBD4E4A2-786E-4BD2-8EB6-107FFC2B5B7D'),
}

model ModifyNatGatewaySpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyNatGatewaySpecResponseBody(name='body'),
}

async function modifyNatGatewaySpec(request: ModifyNatGatewaySpecRequest): ModifyNatGatewaySpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNatGatewaySpec', 'POST', '/', 'json', false, 'json', request);
}

model ModifyNatIpAttributeRequest {
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  natIpDescription?: string(name='NatIpDescription', example='test', position='Query'),
  natIpId: string(name='NatIpId', example='vpcnatip-gw8e1n11f44wpg****', position='Query'),
  natIpName?: string(name='NatIpName', example='newname', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='eu-central-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyNatIpAttributeResponseBody = {
  requestId?: string(name='RequestId', example='6CC9456C-2E29-452A-9180-B6926E51B5CA'),
}

model ModifyNatIpAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyNatIpAttributeResponseBody(name='body'),
}

async function modifyNatIpAttribute(request: ModifyNatIpAttributeRequest): ModifyNatIpAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNatIpAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyNatIpCidrAttributeRequest {
  clientToken?: string(name='ClientToken', example='5A2CFF0E-5718-45B5-9D4D-70B3FF3898', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  natGatewayId: string(name='NatGatewayId', example='ngw-gw8v16wgvtq26vh59****', position='Query'),
  natIpCidr: string(name='NatIpCidr', example='172.16.0.0/24', position='Query'),
  natIpCidrDescription?: string(name='NatIpCidrDescription', example='newtest', position='Query'),
  natIpCidrName?: string(name='NatIpCidrName', example='newname', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='eu-central-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyNatIpCidrAttributeResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model ModifyNatIpCidrAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyNatIpCidrAttributeResponseBody(name='body'),
}

async function modifyNatIpCidrAttribute(request: ModifyNatIpCidrAttributeRequest): ModifyNatIpCidrAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNatIpCidrAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyNetworkAclAttributesRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', example='This is my NetworkAcl.', position='Query'),
  networkAclId: string(name='NetworkAclId', example='acl-bp1lhl0taikrxxxxxxxx', position='Query'),
  networkAclName?: string(name='NetworkAclName', example='acl-1', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyNetworkAclAttributesResponseBody = {
  requestId?: string(name='RequestId', example='8F76C3E4-B39F-465D-B8B3-50BAF03CA833'),
}

model ModifyNetworkAclAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyNetworkAclAttributesResponseBody(name='body'),
}

async function modifyNetworkAclAttributes(request: ModifyNetworkAclAttributesRequest): ModifyNetworkAclAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNetworkAclAttributes', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPhysicalConnectionAttributeRequest {
  circuitCode?: string(name='CircuitCode', example='longtel001', position='Query'),
  clientToken?: string(name='ClientToken', example='efefe566754h', position='Query'),
  description?: string(name='Description', position='Query'),
  lineOperator?: string(name='LineOperator', example='CT', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerLocation?: string(name='PeerLocation', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', example='pc-119mfjzm******', position='Query'),
  portType?: string(name='PortType', example='1000Base-LX', position='Query'),
  redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId', example='pc-119mfjzm7', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  bandwidth?: int32(name='bandwidth', example='5', position='Query'),
}

model ModifyPhysicalConnectionAttributeResponseBody = {
  requestId?: string(name='RequestId', example='013EE132-A109-4247-91B0-099A8FF49AD7'),
}

model ModifyPhysicalConnectionAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPhysicalConnectionAttributeResponseBody(name='body'),
}

async function modifyPhysicalConnectionAttribute(request: ModifyPhysicalConnectionAttributeRequest): ModifyPhysicalConnectionAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPhysicalConnectionAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRouteEntryRequest {
  description?: string(name='Description', example='EntryDescription', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeEntryId: string(name='RouteEntryId', example='rte-acfvgfsghfdd****', position='Query'),
  routeEntryName?: string(name='RouteEntryName', example='EntryName', position='Query'),
}

model ModifyRouteEntryResponseBody = {
  requestId?: string(name='RequestId', example='861E6630-AEC0-4B2D-B214-6CB5E44B7F04'),
}

model ModifyRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRouteEntryResponseBody(name='body'),
}

async function modifyRouteEntry(request: ModifyRouteEntryRequest): ModifyRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRouteTableAttributesRequest {
  description?: string(name='Description', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId: string(name='RouteTableId', example='vtb-bp145q7glnuzdvzu2****', position='Query'),
  routeTableName?: string(name='RouteTableName', example='doctest', position='Query'),
}

model ModifyRouteTableAttributesResponseBody = {
  requestId?: string(name='RequestId', example='62172DD5-6BAC-45DF-8D44'),
}

model ModifyRouteTableAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRouteTableAttributesResponseBody(name='body'),
}

async function modifyRouteTableAttributes(request: ModifyRouteTableAttributesRequest): ModifyRouteTableAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRouteTableAttributes', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRouterInterfaceAttributeRequest {
  deleteHealthCheckIp?: boolean(name='DeleteHealthCheckIp', example='false', position='Query'),
  description?: string(name='Description', position='Query'),
  hcRate?: int32(name='HcRate', example='2', position='Query'),
  hcThreshold?: int32(name='HcThreshold', example='8', position='Query'),
  healthCheckSourceIp?: string(name='HealthCheckSourceIp', example='116.62.XX.XX', position='Query'),
  healthCheckTargetIp?: string(name='HealthCheckTargetIp', example='116.62.XX.XX', position='Query'),
  name?: string(name='Name', example='TEST', position='Query'),
  oppositeInterfaceId?: string(name='OppositeInterfaceId', example='ri-2zeo3xzyf38r4urz****', position='Query'),
  oppositeInterfaceOwnerId?: long(name='OppositeInterfaceOwnerId', example='28768383240243****', position='Query'),
  oppositeRouterId?: string(name='OppositeRouterId', example='vrt-bp1jcg5cmxjbl9xgc****', position='Query'),
  oppositeRouterType?: string(name='OppositeRouterType', example='VBR', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerInterfaceId: string(name='RouterInterfaceId', example='ri-2zeo3xzyf38r4urz****', position='Query'),
}

model ModifyRouterInterfaceAttributeResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model ModifyRouterInterfaceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRouterInterfaceAttributeResponseBody(name='body'),
}

async function modifyRouterInterfaceAttribute(request: ModifyRouterInterfaceAttributeRequest): ModifyRouterInterfaceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRouterInterfaceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyRouterInterfaceSpecRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routerInterfaceId: string(name='RouterInterfaceId', example='ri-2zeo3xzyf38r4urzd****', position='Query'),
  spec: string(name='Spec', example='Small.1', position='Query'),
}

model ModifyRouterInterfaceSpecResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
  spec?: string(name='Spec', example='Small.1'),
}

model ModifyRouterInterfaceSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRouterInterfaceSpecResponseBody(name='body'),
}

async function modifyRouterInterfaceSpec(request: ModifyRouterInterfaceSpecRequest): ModifyRouterInterfaceSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyRouterInterfaceSpec', 'POST', '/', 'json', false, 'json', request);
}

model ModifySnatEntryRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  snatEntryId: string(name='SnatEntryId', example='snat-bp1vcgcf8tm0plqcg****', position='Query'),
  snatEntryName?: string(name='SnatEntryName', example='SnatEntry-1', position='Query'),
  snatIp?: string(name='SnatIp', example='47.98.XX.XX', position='Query'),
  snatTableId: string(name='SnatTableId', example='stb-8vbczigrhop8x5u3t****', position='Query'),
}

model ModifySnatEntryResponseBody = {
  requestId?: string(name='RequestId', example='2315DEB7-5E92-423A-91F7-4C1EC9AD97C3'),
}

model ModifySnatEntryResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySnatEntryResponseBody(name='body'),
}

async function modifySnatEntry(request: ModifySnatEntryRequest): ModifySnatEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySnatEntry', 'POST', '/', 'json', false, 'json', request);
}

model ModifySslVpnClientCertRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  name?: string(name='Name', example='cert2', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sslVpnClientCertId: string(name='SslVpnClientCertId', example='vsc-bp1n8wcf134yl0osrc****', position='Query'),
}

model ModifySslVpnClientCertResponseBody = {
  name?: string(name='Name', example='cert2'),
  requestId?: string(name='RequestId', example='606998F0-B94D-48FE-8316-ACA81BB230DA'),
  sslVpnClientCertId?: string(name='SslVpnClientCertId', example='vsc-bp1n8wcf134yl0osr****'),
}

model ModifySslVpnClientCertResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySslVpnClientCertResponseBody(name='body'),
}

async function modifySslVpnClientCert(request: ModifySslVpnClientCertRequest): ModifySslVpnClientCertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySslVpnClientCert', 'POST', '/', 'json', false, 'json', request);
}

model ModifySslVpnServerRequest {
  cipher?: string(name='Cipher', example='AES-128-CBC', position='Query'),
  clientIpPool?: string(name='ClientIpPool', example='10.30.30.0/24', position='Query'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  compress?: boolean(name='Compress', example='true', position='Query'),
  enableMultiFactorAuth?: boolean(name='EnableMultiFactorAuth', example='false', position='Query'),
  iDaaSInstanceId?: string(name='IDaaSInstanceId', example='idaas-cn-hangzhou-****', position='Query'),
  iDaaSRegionId?: string(name='IDaaSRegionId', example='cn-hangzhou', position='Query'),
  localSubnet?: string(name='LocalSubnet', example='10.20.20.0/24', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  port?: int32(name='Port', example='1194', position='Query'),
  proto?: string(name='Proto', example='UDP', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  sslVpnServerId: string(name='SslVpnServerId', example='vss-bp18q7hzj6largv4v****', position='Query'),
}

model ModifySslVpnServerResponseBody = {
  cipher?: string(name='Cipher', example='AES-128-CBC'),
  clientIpPool?: string(name='ClientIpPool', example='10.30.30.0/24'),
  compress?: boolean(name='Compress', example='false'),
  connections?: int32(name='Connections', example='0'),
  createTime?: long(name='CreateTime', example='1492753580000'),
  enableMultiFactorAuth?: boolean(name='EnableMultiFactorAuth', example='false'),
  iDaaSInstanceId?: string(name='IDaaSInstanceId', example='idaas-cn-hangzhou-****'),
  internetIp?: string(name='InternetIp', example='47.98.XX.XX'),
  localSubnet?: string(name='LocalSubnet', example='10.20.20.0/24'),
  maxConnections?: int32(name='MaxConnections', example='5'),
  name?: string(name='Name', example='test'),
  port?: int32(name='Port', example='1194'),
  proto?: string(name='Proto', example='UDP'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='DF11D6F6-E35A-41C3-9B20-6FC8A901FE65'),
  sslVpnServerId?: string(name='SslVpnServerId', example='vss-bp18q7hzj6largv4v****'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm2ogj****'),
}

model ModifySslVpnServerResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySslVpnServerResponseBody(name='body'),
}

async function modifySslVpnServer(request: ModifySslVpnServerRequest): ModifySslVpnServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySslVpnServer', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVRouterAttributeRequest {
  description?: string(name='Description', example='My VRouter', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vRouterId: string(name='VRouterId', example='vrt-gw0p7zigake75znix****', position='Query'),
  vRouterName?: string(name='VRouterName', example='VRouter-1', position='Query'),
}

model ModifyVRouterAttributeResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model ModifyVRouterAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVRouterAttributeResponseBody(name='body'),
}

async function modifyVRouterAttribute(request: ModifyVRouterAttributeRequest): ModifyVRouterAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVRouterAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVSwitchAttributeRequest {
  description?: string(name='Description', example='This is my vswitch.', position='Query'),
  enableIPv6?: boolean(name='EnableIPv6', example='false', position='Query'),
  ipv6CidrBlock?: int32(name='Ipv6CidrBlock', example='10', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchId: string(name='VSwitchId', example='vsw-25nacdfvue4****', position='Query'),
  vSwitchName?: string(name='VSwitchName', example='VSwitch-1', position='Query'),
  vpcIpv6CidrBlock?: string(name='VpcIpv6CidrBlock', example='2408:XXXX:312:3e00::/56', position='Query'),
}

model ModifyVSwitchAttributeResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model ModifyVSwitchAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVSwitchAttributeResponseBody(name='body'),
}

async function modifyVSwitchAttribute(request: ModifyVSwitchAttributeRequest): ModifyVSwitchAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVSwitchAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVcoRouteEntryWeightRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  newWeight: int32(name='NewWeight', example='0', position='Query'),
  nextHop: string(name='NextHop', example='vco-p0w2jpkhi2eeop6q6****', position='Query'),
  overlayMode?: string(name='OverlayMode', example='Ipsec', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  regionId: string(name='RegionId', example='ap-southeast-2', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeDest: string(name='RouteDest', example='192.168.10.0/24', position='Query'),
  vpnConnectionId: string(name='VpnConnectionId', example='vco-p0w2jpkhi2eeop6q6****', position='Query'),
  weight: int32(name='Weight', example='100', position='Query'),
}

model ModifyVcoRouteEntryWeightResponseBody = {
  requestId?: string(name='RequestId', example='9496F8A-82F4-3130-A51A-2266ACC799B4'),
}

model ModifyVcoRouteEntryWeightResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVcoRouteEntryWeightResponseBody(name='body'),
}

async function modifyVcoRouteEntryWeight(request: ModifyVcoRouteEntryWeightRequest): ModifyVcoRouteEntryWeightResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVcoRouteEntryWeight', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVirtualBorderRouterAttributeRequest {
  associatedPhysicalConnections?: string(name='AssociatedPhysicalConnections', example='[   {     "CircuitCode ": "longtel001",     " LocalGatewayIp ": "192.168.XX.XX",     "PeerGatewayIp" : "192.168.XX.XX",     " PeeringSubnetMask ": "255.255.255.252",     " PhysicalConnectionId ": "pc-kojok19****"   } ]', position='Query'),
  bandwidth?: int32(name='Bandwidth', example='100', position='Query'),
  circuitCode?: string(name='CircuitCode', example='longtel001', position='Query'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-00****', position='Query'),
  description?: string(name='Description', example='desc', position='Query'),
  detectMultiplier?: long(name='DetectMultiplier', example='3', position='Query'),
  enableIpv6?: boolean(name='EnableIpv6', example='false', position='Query'),
  localGatewayIp?: string(name='LocalGatewayIp', example='192.168.XX.XX', position='Query'),
  localIpv6GatewayIp?: string(name='LocalIpv6GatewayIp', example='2001:XXXX:3c4d:0015:0000:0000:0000:1a2b', position='Query'),
  minRxInterval?: long(name='MinRxInterval', example='300', position='Query'),
  minTxInterval?: long(name='MinTxInterval', example='300', position='Query'),
  name?: string(name='Name', example='VBR', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerGatewayIp?: string(name='PeerGatewayIp', example='192.168.XX.X', position='Query'),
  peerIpv6GatewayIp?: string(name='PeerIpv6GatewayIp', example='2001:XXXX:3c4d:0015:0000:0000:0000:2a2b', position='Query'),
  peeringIpv6SubnetMask?: string(name='PeeringIpv6SubnetMask', example='2408:4004:cc:400::/56', position='Query'),
  peeringSubnetMask?: string(name='PeeringSubnetMask', example='255.255.255.252', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vbrId: string(name='VbrId', example='vbr-bp1lhl0taikrte****', position='Query'),
  vlanId?: int32(name='VlanId', example='0', position='Query'),
}

model ModifyVirtualBorderRouterAttributeResponseBody = {
  requestId?: string(name='RequestId', example='980960B0-2969-40BF-8542-EBB34FD358AB'),
}

model ModifyVirtualBorderRouterAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVirtualBorderRouterAttributeResponseBody(name='body'),
}

async function modifyVirtualBorderRouterAttribute(request: ModifyVirtualBorderRouterAttributeRequest): ModifyVirtualBorderRouterAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVirtualBorderRouterAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpcAttributeRequest {
  cidrBlock?: string(name='CidrBlock', example='192.168.0.0/24', position='Query'),
  description?: string(name='Description', example='This is my VPC.', position='Query'),
  enableIPv6?: boolean(name='EnableIPv6', example='false', position='Query'),
  ipv6CidrBlock?: string(name='Ipv6CidrBlock', example='2408:XXXX:0:6a::/56', position='Query'),
  ipv6Isp?: string(name='Ipv6Isp', example='BGP', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId: string(name='VpcId', example='vpc-bp1qtbach57ywecf****', position='Query'),
  vpcName?: string(name='VpcName', example='Vpc-1', position='Query'),
}

model ModifyVpcAttributeResponseBody = {
  requestId?: string(name='RequestId', example='43B72D30-25E1-4FA3-96A8-89374A521D1A'),
}

model ModifyVpcAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVpcAttributeResponseBody(name='body'),
}

async function modifyVpcAttribute(request: ModifyVpcAttributeRequest): ModifyVpcAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpcAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpcPrefixListRequest {
  addPrefixListEntry?: [ 
    {
      cidr?: string(name='Cidr', example='172.16.0.0/12'),
      description?: string(name='Description', example='newcidr'),
    }
  ](name='AddPrefixListEntry', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  maxEntries?: int32(name='MaxEntries', example='20', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prefixListDescription?: string(name='PrefixListDescription', example='newdescription', position='Query'),
  prefixListId: string(name='PrefixListId', example='pl-0b7hwu67****', position='Query'),
  prefixListName?: string(name='PrefixListName', example='newname', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  removePrefixListEntry?: [ 
    {
      cidr?: string(name='Cidr', example='192.168.0.0/16'),
      description?: string(name='Description', example='cidr'),
    }
  ](name='RemovePrefixListEntry', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyVpcPrefixListResponseBody = {
  prefixListId?: string(name='PrefixListId', example='pl-0b7hwu67****'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model ModifyVpcPrefixListResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVpcPrefixListResponseBody(name='body'),
}

async function modifyVpcPrefixList(request: ModifyVpcPrefixListRequest): ModifyVpcPrefixListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpcPrefixList', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpnAttachmentAttributeRequest {
  autoConfigRoute?: boolean(name='AutoConfigRoute', example='true', position='Query'),
  bgpConfig?: string(name='BgpConfig', example='{"EnableBgp":"true","LocalAsn":"45104","TunnelCidr":"169.254.11.0/30","LocalBgpIp":"169.254.11.1"}', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  customerGatewayId?: string(name='CustomerGatewayId', position='Query'),
  effectImmediately?: boolean(name='EffectImmediately', example='false', position='Query'),
  enableDpd?: boolean(name='EnableDpd', example='true', position='Query'),
  enableNatTraversal?: boolean(name='EnableNatTraversal', example='true', position='Query'),
  healthCheckConfig?: string(name='HealthCheckConfig', example='{"enable":"true","dip":"192.168.1.1","sip":"10.1.1.1","interval":"3","retry":"3","Policy": "revoke_route"}', position='Query'),
  ikeConfig?: string(name='IkeConfig', example='{"Psk":"1234****","IkeVersion":"ikev1","IkeMode":"main","IkeEncAlg":"aes","IkeAuthAlg":"sha1","IkePfs":"group2","IkeLifetime":86400,"LocalIdIPsec":"47.XX.XX.1","RemoteId":"47.XX.XX.2"}', position='Query'),
  ipsecConfig?: string(name='IpsecConfig', example='{"IpsecEncAlg":"aes","IpsecAuthAlg":"sha1","IpsecPfs":"group2","IpsecLifetime":86400}', position='Query'),
  localSubnet?: string(name='LocalSubnet', example='10.1.1.0/24,10.1.2.0/24', position='Query'),
  name?: string(name='Name', example='nametest', position='Query'),
  networkType?: string(name='NetworkType', example='public', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  regionId: string(name='RegionId', example='ap-southeast-2', position='Query'),
  remoteCaCert?: string(name='RemoteCaCert', example='c20ycDI1NnYxIENBIChURVNUIFN****', position='Query'),
  remoteSubnet?: string(name='RemoteSubnet', example='10.1.3.0/24,10.1.4.0/24', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpnConnectionId: string(name='VpnConnectionId', example='vco-p0w5112fgnl2ihlmf****', position='Query'),
}

model ModifyVpnAttachmentAttributeResponseBody = {
  attachInstanceId?: string(name='AttachInstanceId', example='cen-c2r3m3zxkumoqz****'),
  attachType?: string(name='AttachType', example='CEN'),
  createTime?: long(name='CreateTime', example='1658201810000'),
  customerGatewayId?: string(name='CustomerGatewayId', example='cgw-p0w2jemrcj5u61un8****'),
  description?: string(name='Description', example='desctest'),
  effectImmediately?: boolean(name='EffectImmediately', example='false'),
  enableDpd?: boolean(name='EnableDpd', example='true'),
  enableNatTraversal?: boolean(name='EnableNatTraversal', example='true'),
  ikeConfig?: {
    ikeAuthAlg?: string(name='IkeAuthAlg', example='sha1'),
    ikeEncAlg?: string(name='IkeEncAlg', example='aes'),
    ikeLifetime?: long(name='IkeLifetime', example='86400'),
    ikeMode?: string(name='IkeMode', example='main'),
    ikePfs?: string(name='IkePfs', example='group2'),
    ikeVersion?: string(name='IkeVersion', example='ikev1'),
    localId?: string(name='LocalId', example='47.XX.XX.1'),
    psk?: string(name='Psk', example='1234***'),
    remoteId?: string(name='RemoteId', example='47.XX.XX.2'),
  }(name='IkeConfig'),
  ipsecConfig?: {
    ipsecAuthAlg?: string(name='IpsecAuthAlg', example='md5'),
    ipsecEncAlg?: string(name='IpsecEncAlg', example='aes'),
    ipsecLifetime?: long(name='IpsecLifetime', example='86400'),
    ipsecPfs?: string(name='IpsecPfs', example='group2'),
  }(name='IpsecConfig'),
  localSubnet?: string(name='LocalSubnet', example='10.1.1.0/24,10.1.2.0/24'),
  name?: string(name='Name', example='nametest'),
  networkType?: string(name='NetworkType', example='public'),
  remoteSubnet?: string(name='RemoteSubnet', example='10.1.3.0/24,10.1.4.0/24'),
  requestId?: string(name='RequestId', example='35822A84-867F-3936-A2E6-A4C4E3ED11C0'),
  spec?: string(name='Spec', example='1000M'),
  status?: string(name='Status', example='ike_sa_not_established'),
  vcoHealthCheck?: {
    dip?: string(name='Dip', example='192.168.1.1'),
    enable?: string(name='Enable', example='true'),
    interval?: int32(name='Interval', example='3'),
    policy?: string(name='Policy', example='revoke_route'),
    retry?: int32(name='Retry', example='3'),
    sip?: string(name='Sip', example='10.1.1.1'),
  }(name='VcoHealthCheck'),
  vpnBgpConfig?: {
    enableBgp?: string(name='EnableBgp', example='true'),
    localAsn?: long(name='LocalAsn', example='45104'),
    localBgpIp?: string(name='LocalBgpIp', example='169.254.11.1'),
    peerAsn?: long(name='PeerAsn', example='65535'),
    peerBgpIp?: string(name='PeerBgpIp', example='169.254.11.2'),
    status?: string(name='Status', example='false'),
    tunnelCidr?: string(name='TunnelCidr', example='169.254.11.0/30'),
  }(name='VpnBgpConfig'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-p0w5112fgnl2ihlmf****'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-p0wa1c1018pmeb6cu****'),
}

model ModifyVpnAttachmentAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVpnAttachmentAttributeResponseBody(name='body'),
}

async function modifyVpnAttachmentAttribute(request: ModifyVpnAttachmentAttributeRequest): ModifyVpnAttachmentAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpnAttachmentAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpnConnectionAttributeRequest {
  autoConfigRoute?: boolean(name='AutoConfigRoute', example='true', position='Query'),
  bgpConfig?: string(name='BgpConfig', example='{"EnableBgp":"true","LocalAsn":"65530","TunnelCidr":"169.254.11.0/30","LocalBgpIp":"169.254.11.1"}', position='Query'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  effectImmediately?: boolean(name='EffectImmediately', example='false', position='Query'),
  enableDpd?: boolean(name='EnableDpd', example='true', position='Query'),
  enableNatTraversal?: boolean(name='EnableNatTraversal', example='true', position='Query'),
  healthCheckConfig?: string(name='HealthCheckConfig', example='{"enable":"true","dip":"192.168.1.1","sip":"10.1.1.1","interval":"3","retry":"3"}', position='Query'),
  ikeConfig?: string(name='IkeConfig', example='{"Psk":"pgw6dy7d1i8i****","IkeVersion":"ikev1","IkeMode":"main","IkeEncAlg":"aes","IkeAuthAlg":"sha1","IkePfs":"group2","IkeLifetime":86400,"LocalIdIPsec":"116.64.XX.XX","RemoteId":"139.18.XX.XX"}', position='Query'),
  ipsecConfig?: string(name='IpsecConfig', example='{"IpsecEncAlg":"aes","IpsecAuthAlg":"sha1","IpsecPfs":"group2","IpsecLifetime":86400}', position='Query'),
  localSubnet?: string(name='LocalSubnet', example='10.1.1.0/24,10.1.2.0/24', position='Query'),
  name?: string(name='Name', example='nametest', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  remoteCaCertificate?: string(name='RemoteCaCertificate', example='c20ycDI1NnYxIENBIChURVNUIFN****', position='Query'),
  remoteSubnet?: string(name='RemoteSubnet', example='10.2.1.0/24,10.2.2.0/24', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpnConnectionId: string(name='VpnConnectionId', example='vco-bp1bbi27hojx80nck****', position='Query'),
}

model ModifyVpnConnectionAttributeResponseBody = {
  createTime?: long(name='CreateTime', example='1492753817000'),
  customerGatewayId?: string(name='CustomerGatewayId', example='cgw-p0w2jemrcj5u61un8****'),
  description?: string(name='Description', example='description'),
  effectImmediately?: boolean(name='EffectImmediately', example='false'),
  enableDpd?: boolean(name='EnableDpd', example='true'),
  enableNatTraversal?: boolean(name='EnableNatTraversal', example='true'),
  ikeConfig?: {
    ikeAuthAlg?: string(name='IkeAuthAlg', example='sha1'),
    ikeEncAlg?: string(name='IkeEncAlg', example='aes'),
    ikeLifetime?: long(name='IkeLifetime', example='86400'),
    ikeMode?: string(name='IkeMode', example='main'),
    ikePfs?: string(name='IkePfs', example='group2'),
    ikeVersion?: string(name='IkeVersion', example='ikev1'),
    localId?: string(name='LocalId', example='116.64.XX.XX'),
    psk?: string(name='Psk', example='pgw6dy7d1i8i****'),
    remoteId?: string(name='RemoteId', example='139.18.XX.XX'),
  }(name='IkeConfig'),
  ipsecConfig?: {
    ipsecAuthAlg?: string(name='IpsecAuthAlg', example='sha1'),
    ipsecEncAlg?: string(name='IpsecEncAlg', example='aes'),
    ipsecLifetime?: long(name='IpsecLifetime', example='86400'),
    ipsecPfs?: string(name='IpsecPfs', example='group2'),
  }(name='IpsecConfig'),
  localSubnet?: string(name='LocalSubnet', example='10.1.1.0/24,10.1.2.0/24'),
  name?: string(name='Name', example='nametest'),
  remoteSubnet?: string(name='RemoteSubnet', example='10.2.1.0/24,10.2.2.0/24'),
  requestId?: string(name='RequestId', example='7DB79D0C-5F27-4AB5-995B-79BE55102F90'),
  vcoHealthCheck?: {
    dip?: string(name='Dip', example='192.168.1.1'),
    enable?: string(name='Enable', example='true'),
    interval?: int32(name='Interval', example='3'),
    retry?: int32(name='Retry', example='3'),
    sip?: string(name='Sip', example='10.1.1.1'),
  }(name='VcoHealthCheck'),
  vpnBgpConfig?: {
    enableBgp?: string(name='EnableBgp', example='true'),
    localAsn?: int32(name='LocalAsn', example='65530'),
    localBgpIp?: string(name='LocalBgpIp', example='169.254.11.1'),
    peerAsn?: int32(name='PeerAsn', example='65531'),
    peerBgpIp?: string(name='PeerBgpIp', example='169.254.11.2'),
    status?: string(name='Status', example='success'),
    tunnelCidr?: string(name='TunnelCidr', example='169.254.11.0/30'),
  }(name='VpnBgpConfig'),
  vpnConnectionId?: string(name='VpnConnectionId', example='vco-bp1bbi27hojx80nck****'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm2ogj****'),
}

model ModifyVpnConnectionAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVpnConnectionAttributeResponseBody(name='body'),
}

async function modifyVpnConnectionAttribute(request: ModifyVpnConnectionAttributeRequest): ModifyVpnConnectionAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpnConnectionAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpnGatewayAttributeRequest {
  autoPropagate?: boolean(name='AutoPropagate', example='true', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  description?: string(name='Description', example='test', position='Query'),
  name?: string(name='Name', example='myvpn', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm2ogj****', position='Query'),
}

model ModifyVpnGatewayAttributeResponseBody = {
  autoPropagate?: boolean(name='AutoPropagate', example='true'),
  businessStatus?: string(name='BusinessStatus', example='Normal'),
  createTime?: long(name='CreateTime', example='1492753580000'),
  description?: string(name='Description', example='test'),
  enableBgp?: boolean(name='EnableBgp', example='true'),
  endTime?: long(name='EndTime', example='1495382400000'),
  internetIp?: string(name='InternetIp', example='116.62.XX.XX'),
  intranetIp?: string(name='IntranetIp', example='172.27.30.24'),
  name?: string(name='Name', example='test'),
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B457'),
  spec?: string(name='Spec', example='5M'),
  status?: string(name='Status', example='active'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1y9ovl1cu9ou4tv****'),
  vpcId?: string(name='VpcId', example='vpc-bp1ub1yt9cvakoel****'),
  vpnGatewayId?: string(name='VpnGatewayId', example='vpn-bp1q8bgx4xnkm2ogj****'),
}

model ModifyVpnGatewayAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVpnGatewayAttributeResponseBody(name='body'),
}

async function modifyVpnGatewayAttribute(request: ModifyVpnGatewayAttributeRequest): ModifyVpnGatewayAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpnGatewayAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpnPbrRouteEntryAttributeRequest {
  clientToken?: string(name='ClientToken', example='d7d24a21-f4ba-4454-9173-b3****', position='Query'),
  newPriority?: int32(name='NewPriority', example='10', position='Query'),
  newWeight?: int32(name='NewWeight', example='0', position='Query'),
  nextHop: string(name='NextHop', example='vco-bp15oes1py4i66rmd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  priority: int32(name='Priority', example='5', position='Query'),
  regionId: string(name='RegionId', example='cn-heyuan', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeDest: string(name='RouteDest', example='10.0.0.0/24', position='Query'),
  routeSource: string(name='RouteSource', example='192.168.1.0/24', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', example='vpn-bp1a3kqjiiq9legfx****', position='Query'),
  weight: int32(name='Weight', example='100', position='Query'),
}

model ModifyVpnPbrRouteEntryAttributeResponseBody = {
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
}

model ModifyVpnPbrRouteEntryAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVpnPbrRouteEntryAttributeResponseBody(name='body'),
}

async function modifyVpnPbrRouteEntryAttribute(request: ModifyVpnPbrRouteEntryAttributeRequest): ModifyVpnPbrRouteEntryAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpnPbrRouteEntryAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpnPbrRouteEntryPriorityRequest {
  clientToken?: string(name='ClientToken', example='d7d24a21-f4ba-4454-9173-b3****', position='Query'),
  newPriority: int32(name='NewPriority', example='10', position='Query'),
  nextHop: string(name='NextHop', example='vco-bp15oes1py4i66rmd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  priority?: int32(name='Priority', example='5', position='Query'),
  regionId: string(name='RegionId', example='cn-henyuan', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeDest: string(name='RouteDest', example='10.0.0.0/24', position='Query'),
  routeSource: string(name='RouteSource', example='192.168.1.0/24', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', example='vpn-bp1a3kqjiiq9legfx****', position='Query'),
  weight: int32(name='Weight', example='100', position='Query'),
}

model ModifyVpnPbrRouteEntryPriorityResponseBody = {
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
}

model ModifyVpnPbrRouteEntryPriorityResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVpnPbrRouteEntryPriorityResponseBody(name='body'),
}

async function modifyVpnPbrRouteEntryPriority(request: ModifyVpnPbrRouteEntryPriorityRequest): ModifyVpnPbrRouteEntryPriorityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpnPbrRouteEntryPriority', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpnPbrRouteEntryWeightRequest {
  clientToken?: string(name='ClientToken', example='d7d24a21-f4ba-4454-9173-b3828dae492b', position='Query'),
  newWeight: int32(name='NewWeight', example='100', position='Query'),
  nextHop: string(name='NextHop', example='vco-bp15oes1py4i66rmd****', position='Query'),
  overlayMode?: string(name='OverlayMode', example='Ipsec', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  priority?: int32(name='Priority', example='10', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeDest: string(name='RouteDest', example='10.0.0.0/24', position='Query'),
  routeSource: string(name='RouteSource', example='192.168.1.0/24', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', example='vpn-bp1a3kqjiiq9legfx****', position='Query'),
  weight: int32(name='Weight', example='0', position='Query'),
}

model ModifyVpnPbrRouteEntryWeightResponseBody = {
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
}

model ModifyVpnPbrRouteEntryWeightResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVpnPbrRouteEntryWeightResponseBody(name='body'),
}

async function modifyVpnPbrRouteEntryWeight(request: ModifyVpnPbrRouteEntryWeightRequest): ModifyVpnPbrRouteEntryWeightResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpnPbrRouteEntryWeight', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpnRouteEntryWeightRequest {
  clientToken?: string(name='ClientToken', example='d7d24a21-f4ba-4454-9173-b3828dae492b', position='Query'),
  newWeight: int32(name='NewWeight', example='100', position='Query'),
  nextHop: string(name='NextHop', example='vco-bp15oes1py4i66rmd****', position='Query'),
  overlayMode?: string(name='OverlayMode', example='Ipsec', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeDest: string(name='RouteDest', example='10.0.0.0/24', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', example='vpn-bp1a3kqjiiq9legfx****', position='Query'),
  weight: int32(name='Weight', example='0', position='Query'),
}

model ModifyVpnRouteEntryWeightResponseBody = {
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
}

model ModifyVpnRouteEntryWeightResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVpnRouteEntryWeightResponseBody(name='body'),
}

async function modifyVpnRouteEntryWeight(request: ModifyVpnRouteEntryWeightRequest): ModifyVpnRouteEntryWeightResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpnRouteEntryWeight', 'POST', '/', 'json', false, 'json', request);
}

model MoveResourceGroupRequest {
  newResourceGroupId: string(name='NewResourceGroupId', example='rg-acfm3peow3k****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId: string(name='ResourceId', example='vpc-hp31psbg8ec3023s6****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', example='vpc', position='Query'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='611CB80C-B6A9-43DB-9E38-0B0AC3D9B58F'),
}

model MoveResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: MoveResourceGroupResponseBody(name='body'),
}

async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model OpenFlowLogServiceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model OpenFlowLogServiceResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='28CF47AB-B6C0-5FA2-80C7-2B28826A92CB'),
}

model OpenFlowLogServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenFlowLogServiceResponseBody(name='body'),
}

async function openFlowLogService(request: OpenFlowLogServiceRequest): OpenFlowLogServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenFlowLogService', 'POST', '/', 'json', false, 'json', request);
}

model OpenPhysicalConnectionServiceRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='地域', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model OpenPhysicalConnectionServiceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model OpenPhysicalConnectionServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenPhysicalConnectionServiceResponseBody(name='body'),
}

async function openPhysicalConnectionService(request: OpenPhysicalConnectionServiceRequest): OpenPhysicalConnectionServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenPhysicalConnectionService', 'POST', '/', 'json', false, 'json', request);
}

model OpenTrafficMirrorServiceRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model OpenTrafficMirrorServiceResponseBody = {
  orderId?: string(name='OrderId', example='123412341234****'),
  requestId?: string(name='RequestId', example='4FCCF008-4C13-4231-BE77-D5203801A9E2'),
}

model OpenTrafficMirrorServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenTrafficMirrorServiceResponseBody(name='body'),
}

async function openTrafficMirrorService(request: OpenTrafficMirrorServiceRequest): OpenTrafficMirrorServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenTrafficMirrorService', 'POST', '/', 'json', false, 'json', request);
}

model PublishVpnRouteEntryRequest {
  clientToken?: string(name='ClientToken', example='d7d24a21-f4ba-4454-9173-b3828dae492b', position='Query'),
  nextHop: string(name='NextHop', example='vco-bp15oes1py4i66rmd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  publishVpc: boolean(name='PublishVpc', example='true', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeDest: string(name='RouteDest', example='10.0.0.0/24', position='Query'),
  routeType: string(name='RouteType', example='pbr', position='Query'),
  vpnGatewayId: string(name='VpnGatewayId', example='vpn-bp1a3kqjiiq9legfx****', position='Query'),
}

model PublishVpnRouteEntryResponseBody = {
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
}

model PublishVpnRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  body: PublishVpnRouteEntryResponseBody(name='body'),
}

async function publishVpnRouteEntry(request: PublishVpnRouteEntryRequest): PublishVpnRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishVpnRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model RecoverPhysicalConnectionRequest {
  dryRun?: boolean(name='DryRun', description='DryRun', example='false', position='Query'),
  instanceId: string(name='InstanceId', description='恢复的Pconn', example='pc-bp1mrgfbtmc9brre7****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  token?: string(name='Token', description='幂等Token', example='CBCE910E-D396-4944-8****', position='Query'),
}

model RecoverPhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='CD14EA74-E9C3-59A9-942A-DFEC7E12818D'),
}

model RecoverPhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: RecoverPhysicalConnectionResponseBody(name='body'),
}

async function recoverPhysicalConnection(request: RecoverPhysicalConnectionRequest): RecoverPhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecoverPhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model RecoverVirtualBorderRouterRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vbrId: string(name='VbrId', example='vbr-bp1lhl0taikrte****', position='Query'),
}

model RecoverVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model RecoverVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  body: RecoverVirtualBorderRouterResponseBody(name='body'),
}

async function recoverVirtualBorderRouter(request: RecoverVirtualBorderRouterRequest): RecoverVirtualBorderRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecoverVirtualBorderRouter', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseEipAddressRequest {
  allocationId: string(name='AllocationId', example='eip-2zeerraiwb7uj6i0d****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ReleaseEipAddressResponseBody = {
  requestId?: string(name='RequestId', example='748C38F6-9A3D-482E-83FB-DB6C39C68AEA'),
}

model ReleaseEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseEipAddressResponseBody(name='body'),
}

async function releaseEipAddress(request: ReleaseEipAddressRequest): ReleaseEipAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseEipAddress', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseEipSegmentAddressRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001sdfg', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  segmentInstanceId: string(name='SegmentInstanceId', example='eipsg-2zett8ba055tbsxme****', position='Query'),
}

model ReleaseEipSegmentAddressResponseBody = {
  requestId?: string(name='RequestId', example='F7A6301A-64BA-41EC-8284-8F4838C15D1F'),
}

model ReleaseEipSegmentAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseEipSegmentAddressResponseBody(name='body'),
}

async function releaseEipSegmentAddress(request: ReleaseEipSegmentAddressRequest): ReleaseEipSegmentAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseEipSegmentAddress', 'POST', '/', 'json', false, 'json', request);
}

model RemoveCommonBandwidthPackageIpRequest {
  bandwidthPackageId: string(name='BandwidthPackageId', example='cbwp-2ze2ic1xd2qeqk145****', position='Query'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ipInstanceId: string(name='IpInstanceId', example='eip-2zeerraiwb7uj6i0d****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RemoveCommonBandwidthPackageIpResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model RemoveCommonBandwidthPackageIpResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveCommonBandwidthPackageIpResponseBody(name='body'),
}

async function removeCommonBandwidthPackageIp(request: RemoveCommonBandwidthPackageIpRequest): RemoveCommonBandwidthPackageIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveCommonBandwidthPackageIp', 'POST', '/', 'json', false, 'json', request);
}

model RemoveGlobalAccelerationInstanceIpRequest {
  globalAccelerationInstanceId: string(name='GlobalAccelerationInstanceId', example='ga-m5ex47zwya1sejyni****', position='Query'),
  ipInstanceId: string(name='IpInstanceId', example='eip-bp13e9i2qst4g6jzi****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RemoveGlobalAccelerationInstanceIpResponseBody = {
  requestId?: string(name='RequestId', example='5BE01CD7-5A50-472D-AC14-CA181C5C03BE'),
}

model RemoveGlobalAccelerationInstanceIpResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveGlobalAccelerationInstanceIpResponseBody(name='body'),
}

async function removeGlobalAccelerationInstanceIp(request: RemoveGlobalAccelerationInstanceIpRequest): RemoveGlobalAccelerationInstanceIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveGlobalAccelerationInstanceIp', 'POST', '/', 'json', false, 'json', request);
}

model RemoveIPv6TranslatorAclListEntryRequest {
  aclEntryId: string(name='AclEntryId', example='ipv6transaclentry-bp105jrsxxxx', position='Query'),
  aclId: string(name='AclId', example='ipv6transacl-bp1de2xxxx', position='Query'),
  clientToken?: string(name='ClientToken', example='sha123456', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RemoveIPv6TranslatorAclListEntryResponseBody = {
  requestId?: string(name='RequestId', example='8B2F5262-6B57-43F2-xxxxx'),
}

model RemoveIPv6TranslatorAclListEntryResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveIPv6TranslatorAclListEntryResponseBody(name='body'),
}

async function removeIPv6TranslatorAclListEntry(request: RemoveIPv6TranslatorAclListEntryRequest): RemoveIPv6TranslatorAclListEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveIPv6TranslatorAclListEntry', 'POST', '/', 'json', false, 'json', request);
}

model RemoveSourcesFromTrafficMirrorSessionRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hongkong', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMirrorSessionId: string(name='TrafficMirrorSessionId', example='tms-j6cla50buc44ap8tu****', position='Query'),
  trafficMirrorSourceIds: [ string ](name='TrafficMirrorSourceIds', example='eni-j6c8znm5l1yt4sox****', maxLength=128, position='Query'),
}

model RemoveSourcesFromTrafficMirrorSessionResponseBody = {
  requestId?: string(name='RequestId', example='A33B2C6A-89D1-4DEA-A807-A6E8CC552484'),
}

model RemoveSourcesFromTrafficMirrorSessionResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveSourcesFromTrafficMirrorSessionResponseBody(name='body'),
}

async function removeSourcesFromTrafficMirrorSession(request: RemoveSourcesFromTrafficMirrorSessionRequest): RemoveSourcesFromTrafficMirrorSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveSourcesFromTrafficMirrorSession', 'POST', '/', 'json', false, 'json', request);
}

model ReplaceVpcDhcpOptionsSetRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  dhcpOptionsSetId: string(name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId: string(name='VpcId', example='vpc-dsferghthth****', position='Query'),
}

model ReplaceVpcDhcpOptionsSetResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model ReplaceVpcDhcpOptionsSetResponse = {
  headers: map[string]string(name='headers'),
  body: ReplaceVpcDhcpOptionsSetResponseBody(name='body'),
}

async function replaceVpcDhcpOptionsSet(request: ReplaceVpcDhcpOptionsSetRequest): ReplaceVpcDhcpOptionsSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReplaceVpcDhcpOptionsSet', 'POST', '/', 'json', false, 'json', request);
}

model RetryVpcPrefixListAssociationRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prefixListId: string(name='PrefixListId', example='pl-0b7hwu67****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId: string(name='ResourceId', example='vtb-bp1drpcfz9srr393h****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', example='vpcRouteTable', position='Query'),
}

model RetryVpcPrefixListAssociationResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model RetryVpcPrefixListAssociationResponse = {
  headers: map[string]string(name='headers'),
  body: RetryVpcPrefixListAssociationResponseBody(name='body'),
}

async function retryVpcPrefixListAssociation(request: RetryVpcPrefixListAssociationRequest): RetryVpcPrefixListAssociationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RetryVpcPrefixListAssociation', 'POST', '/', 'json', false, 'json', request);
}

model RevokeInstanceFromCenRequest {
  cenId: string(name='CenId', example='cen-7qthudw0ll6jmc****', position='Query'),
  cenOwnerId: long(name='CenOwnerId', example='123456789', position='Query'),
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  instanceId: string(name='InstanceId', example='vpc-uf6o8d1dj8sjwxi6o****', position='Query'),
  instanceType: string(name='InstanceType', example='VPC', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RevokeInstanceFromCenResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model RevokeInstanceFromCenResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeInstanceFromCenResponseBody(name='body'),
}

async function revokeInstanceFromCen(request: RevokeInstanceFromCenRequest): RevokeInstanceFromCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeInstanceFromCen', 'POST', '/', 'json', false, 'json', request);
}

model RevokeInstanceFromVbrRequest {
  grantType: string(name='GrantType', example='ALL', position='Query'),
  instanceId: string(name='InstanceId', example='vpc-bp1brjuegjc88v3u9****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  vbrInstanceIds?: [ string ](name='VbrInstanceIds', shrink='simple', position='Query'),
  vbrOwnerUid: string(name='VbrOwnerUid', example='1210123456123456', position='Query'),
  vbrRegionNo: string(name='VbrRegionNo', example='cn-hangzhou', position='Query'),
}

model RevokeInstanceFromVbrResponseBody = {
  requestId?: string(name='RequestId', example='45B7AA4A-4658-5FFC-90DD-9B8729F301BB'),
}

model RevokeInstanceFromVbrResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeInstanceFromVbrResponseBody(name='body'),
}

async function revokeInstanceFromVbr(request: RevokeInstanceFromVbrRequest): RevokeInstanceFromVbrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeInstanceFromVbr', 'POST', '/', 'json', false, 'json', request);
}

model SetHighDefinitionMonitorLogStatusRequest {
  instanceId: string(name='InstanceId', example='eip-wz9fi6qboho9fwgx7****', position='Query'),
  instanceType?: string(name='InstanceType', example='EIP', position='Query'),
  logProject: string(name='LogProject', example='hdmonitor-cn-shenzhen', position='Query'),
  logStore: string(name='LogStore', example='hdmonitor', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status: string(name='Status', example='ON', position='Query'),
}

model SetHighDefinitionMonitorLogStatusResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B457'),
  success?: string(name='Success', example='true'),
}

model SetHighDefinitionMonitorLogStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SetHighDefinitionMonitorLogStatusResponseBody(name='body'),
}

async function setHighDefinitionMonitorLogStatus(request: SetHighDefinitionMonitorLogStatusRequest): SetHighDefinitionMonitorLogStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetHighDefinitionMonitorLogStatus', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', example='vpc-bp16qjewdsunr41m1****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', example='VPC', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='C46FF5A8-C5F0-4024-8262-B16B639225A0'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesForExpressConnectRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', example='PHYSICALCONNECTION', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', example='FinanceDept'),
      value?: string(name='Value', example='FinanceJoshua'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesForExpressConnectResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model TagResourcesForExpressConnectResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesForExpressConnectResponseBody(name='body'),
}

async function tagResourcesForExpressConnect(request: TagResourcesForExpressConnectRequest): TagResourcesForExpressConnectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResourcesForExpressConnect', 'POST', '/', 'json', false, 'json', request);
}

model TerminatePhysicalConnectionRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', example='pc-119mfjzm****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model TerminatePhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model TerminatePhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: TerminatePhysicalConnectionResponseBody(name='body'),
}

async function terminatePhysicalConnection(request: TerminatePhysicalConnectionRequest): TerminatePhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TerminatePhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model TerminateVirtualBorderRouterRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vbrId: string(name='VbrId', example='vbr-bp15zckdt37pq72****', position='Query'),
}

model TerminateVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model TerminateVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  body: TerminateVirtualBorderRouterResponseBody(name='body'),
}

async function terminateVirtualBorderRouter(request: TerminateVirtualBorderRouterRequest): TerminateVirtualBorderRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TerminateVirtualBorderRouter', 'POST', '/', 'json', false, 'json', request);
}

model UnTagResourcesRequest {
  all?: boolean(name='All', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', example='vpc-bp16qjewdsunr41m1****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', example='VPC', position='Query'),
  tagKey?: [ string ](name='TagKey', example='FinanceDept', position='Query'),
}

model UnTagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='C46FF5A8-C5F0-4024-8262-B16B639225A0'),
}

model UnTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UnTagResourcesResponseBody(name='body'),
}

async function unTagResources(request: UnTagResourcesRequest): UnTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnTagResources', 'POST', '/', 'json', false, 'json', request);
}

model UnassociateEipAddressRequest {
  allocationId: string(name='AllocationId', example='eip-2zeerraiwb7uj6i0d****', position='Query'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11****', position='Query'),
  force?: boolean(name='Force', example='false', position='Query'),
  instanceId?: string(name='InstanceId', example='i-hp3akk9irtd69jad****', position='Query'),
  instanceType?: string(name='InstanceType', example='EcsInstance', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', example='192.XX.XX.2', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UnassociateEipAddressResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model UnassociateEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: UnassociateEipAddressResponseBody(name='body'),
}

async function unassociateEipAddress(request: UnassociateEipAddressRequest): UnassociateEipAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassociateEipAddress', 'POST', '/', 'json', false, 'json', request);
}

model UnassociateGlobalAccelerationInstanceRequest {
  globalAccelerationInstanceId: string(name='GlobalAccelerationInstanceId', example='ga-1sxeedefrr33****', position='Query'),
  instanceType?: string(name='InstanceType', example='RemoteEcsInstance', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UnassociateGlobalAccelerationInstanceResponseBody = {
  requestId?: string(name='RequestId', example='BD5BCEE8-F62C-40C2-9AC3-89XXXXXXXXX'),
}

model UnassociateGlobalAccelerationInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UnassociateGlobalAccelerationInstanceResponseBody(name='body'),
}

async function unassociateGlobalAccelerationInstance(request: UnassociateGlobalAccelerationInstanceRequest): UnassociateGlobalAccelerationInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassociateGlobalAccelerationInstance', 'POST', '/', 'json', false, 'json', request);
}

model UnassociateHaVipRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  force?: string(name='Force', example='True', position='Query'),
  haVipId: string(name='HaVipId', example='havip-2zeo05qre24nhrqpy****', position='Query'),
  instanceId: string(name='InstanceId', example='i-faf344422ffsfad****', position='Query'),
  instanceType?: string(name='InstanceType', example='EcsInstance', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UnassociateHaVipResponseBody = {
  requestId?: string(name='RequestId', example='C44F62BE-9CE7-4277-B117-69243F3988BF'),
}

model UnassociateHaVipResponse = {
  headers: map[string]string(name='headers'),
  body: UnassociateHaVipResponseBody(name='body'),
}

async function unassociateHaVip(request: UnassociateHaVipRequest): UnassociateHaVipResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassociateHaVip', 'POST', '/', 'json', false, 'json', request);
}

model UnassociateNetworkAclRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  networkAclId: string(name='NetworkAclId', example='nacl-a2do9e413e0sp****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resource?: [ 
    {
      resourceId?: string(name='ResourceId', example='vsw-bp1de348lntdw****'),
      resourceType?: string(name='ResourceType', example='VSwitch'),
    }
  ](name='Resource', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UnassociateNetworkAclResponseBody = {
  requestId?: string(name='RequestId', example='AD024BAA-2D91-48FD-810B-8FB7489B6EE6'),
}

model UnassociateNetworkAclResponse = {
  headers: map[string]string(name='headers'),
  body: UnassociateNetworkAclResponseBody(name='body'),
}

async function unassociateNetworkAcl(request: UnassociateNetworkAclRequest): UnassociateNetworkAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassociateNetworkAcl', 'POST', '/', 'json', false, 'json', request);
}

model UnassociatePhysicalConnectionFromVirtualBorderRouterRequest {
  clientToken?: string(name='ClientToken', example='longtel001', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  physicalConnectionId: string(name='PhysicalConnectionId', example='pc-bp1qrb3044eqixog****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vbrId: string(name='VbrId', example='vbr-bp16ksp61j7e0tkn*****', position='Query'),
}

model UnassociatePhysicalConnectionFromVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId', example='980960B0-2969-40BF-8542-EBB34FD358AB'),
}

model UnassociatePhysicalConnectionFromVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  body: UnassociatePhysicalConnectionFromVirtualBorderRouterResponseBody(name='body'),
}

async function unassociatePhysicalConnectionFromVirtualBorderRouter(request: UnassociatePhysicalConnectionFromVirtualBorderRouterRequest): UnassociatePhysicalConnectionFromVirtualBorderRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassociatePhysicalConnectionFromVirtualBorderRouter', 'POST', '/', 'json', false, 'json', request);
}

model UnassociateRouteTableRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016e04115b', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId: string(name='RouteTableId', example='vtb-bp145q7glnuzdvzu2****', position='Query'),
  vSwitchId: string(name='VSwitchId', example='vsw-25naue4****', position='Query'),
}

model UnassociateRouteTableResponseBody = {
  requestId?: string(name='RequestId', example='62172DD5-6BAC-45DF-8D44-xxxxxxx'),
}

model UnassociateRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: UnassociateRouteTableResponseBody(name='body'),
}

async function unassociateRouteTable(request: UnassociateRouteTableRequest): UnassociateRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassociateRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model UnassociateVpcCidrBlockRequest {
  iPv6CidrBlock?: string(name='IPv6CidrBlock', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='ch-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  secondaryCidrBlock?: string(name='SecondaryCidrBlock', example='192.168.0.0/16', position='Query'),
  vpcId: string(name='VpcId', example='vpc-o6wrloqsdqc9io3mg****', position='Query'),
}

model UnassociateVpcCidrBlockResponseBody = {
  requestId?: string(name='RequestId', example='C1221A1F-2ACD-4592-8F27-474E02883159'),
}

model UnassociateVpcCidrBlockResponse = {
  headers: map[string]string(name='headers'),
  body: UnassociateVpcCidrBlockResponseBody(name='body'),
}

async function unassociateVpcCidrBlock(request: UnassociateVpcCidrBlockRequest): UnassociateVpcCidrBlockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassociateVpcCidrBlock', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesForExpressConnectRequest {
  all?: boolean(name='All', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', example='PHYSICALCONNECTION', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesForExpressConnectResponseBody = {
  requestId?: string(name='RequestId', example='DE65F6B7-7566-4802-9007-96F2494AC512'),
}

model UntagResourcesForExpressConnectResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesForExpressConnectResponseBody(name='body'),
}

async function untagResourcesForExpressConnect(request: UntagResourcesForExpressConnectRequest): UntagResourcesForExpressConnectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResourcesForExpressConnect', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDhcpOptionsSetAttributeRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  dhcpOptionsSetDescription?: string(name='DhcpOptionsSetDescription', example='test', position='Query'),
  dhcpOptionsSetId: string(name='DhcpOptionsSetId', example='dopt-o6w0df4epg9zo8isy****', position='Query'),
  dhcpOptionsSetName?: string(name='DhcpOptionsSetName', example='test', position='Query'),
  domainName?: string(name='DomainName', example='example.com', position='Query'),
  domainNameServers?: string(name='DomainNameServers', example='192.xx.xx.123', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ipv6LeaseTime?: string(name='Ipv6LeaseTime', position='Query'),
  leaseTime?: string(name='LeaseTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdateDhcpOptionsSetAttributeResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model UpdateDhcpOptionsSetAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDhcpOptionsSetAttributeResponseBody(name='body'),
}

async function updateDhcpOptionsSetAttribute(request: UpdateDhcpOptionsSetAttributeRequest): UpdateDhcpOptionsSetAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDhcpOptionsSetAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGatewayRouteTableEntryAttributeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', example='new', position='Query'),
  destinationCidrBlock: string(name='DestinationCidrBlock', example='192.168.0.5', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  iPv4GatewayRouteTableId: string(name='IPv4GatewayRouteTableId', example='vtb-5ts0ohchwkp3dydt2****', position='Query'),
  name?: string(name='Name', example='test', position='Query'),
  nextHopId?: string(name='NextHopId', example='i-bp18xq9yguxoxe7m****', position='Query'),
  nextHopType: string(name='NextHopType', example='EcsInstance', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='ap-southeast-6', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdateGatewayRouteTableEntryAttributeResponseBody = {
  requestId?: string(name='RequestId', example='54B48E3D-DF70-471B-AA93-08E683A1B45'),
}

model UpdateGatewayRouteTableEntryAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGatewayRouteTableEntryAttributeResponseBody(name='body'),
}

async function updateGatewayRouteTableEntryAttribute(request: UpdateGatewayRouteTableEntryAttributeRequest): UpdateGatewayRouteTableEntryAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGatewayRouteTableEntryAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateIpsecServerRequest {
  clientIpPool?: string(name='ClientIpPool', example='10.0.0.0/24', position='Query'),
  clientToken?: string(name='ClientToken', example='e4567-e89b-12d3-a456-42665544****', position='Query'),
  dryRun?: string(name='DryRun', example='false', position='Query'),
  effectImmediately?: boolean(name='EffectImmediately', example='false', position='Query'),
  ikeConfig?: string(name='IkeConfig', example='{"IkeVersion":"ikev2","IkeMode":"main","IkeEncAlg":"aes","IkeAuthAlg":"sha1","IkePfs":"group2","IkeLifetime":86400}', position='Query'),
  ipsecConfig?: string(name='IpsecConfig', example='{"IpsecEncAlg":"aes","IpsecAuthAlg":"sha1","IpsecPfs":"group2","IpsecLifetime":86400}', position='Query'),
  ipsecServerId: string(name='IpsecServerId', example='iss-bp1bo3xuvcxo7ixll****', position='Query'),
  ipsecServerName?: string(name='IpsecServerName', example='test', maxLength=100, position='Query'),
  localSubnet?: string(name='LocalSubnet', example='192.168.0.0/24,172.17.0.0/16', position='Query'),
  psk?: string(name='Psk', example='Cfd123****', position='Query'),
  pskEnabled?: boolean(name='PskEnabled', example='true', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model UpdateIpsecServerResponseBody = {
  requestId?: string(name='RequestId', example='B61C08E5-403A-46A2-96C1-F7B1216DB10C'),
}

model UpdateIpsecServerResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateIpsecServerResponseBody(name='body'),
}

async function updateIpsecServer(request: UpdateIpsecServerRequest): UpdateIpsecServerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIpsecServer', 'POST', '/', 'json', false, 'json', request);
}

model UpdateIpv4GatewayAttributeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ipv4GatewayDescription?: string(name='Ipv4GatewayDescription', example='new', position='Query'),
  ipv4GatewayId: string(name='Ipv4GatewayId', example='ipv4gw-5tsnc6s4ogsedtp3k****', position='Query'),
  ipv4GatewayName?: string(name='Ipv4GatewayName', example='newname', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='ap-southeast-6', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdateIpv4GatewayAttributeResponseBody = {
  requestId?: string(name='RequestId', example='671CEB03-C98D-5916-950C-C55B0BD06621'),
}

model UpdateIpv4GatewayAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateIpv4GatewayAttributeResponseBody(name='body'),
}

async function updateIpv4GatewayAttribute(request: UpdateIpv4GatewayAttributeRequest): UpdateIpv4GatewayAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIpv4GatewayAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateNatGatewayNatTypeRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  natGatewayId: string(name='NatGatewayId', example='ngw-bp1b0lic8uz4r6vf2****', position='Query'),
  natType: string(name='NatType', example='Enhanced', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-qingdao', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchId: string(name='VSwitchId', example='vsw-bp17nszybg8epodke****', position='Query'),
}

model UpdateNatGatewayNatTypeResponseBody = {
  requestId?: string(name='RequestId', example='0ED8D006-F706-4D23-88ED-E11ED28DCAC0'),
}

model UpdateNatGatewayNatTypeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateNatGatewayNatTypeResponseBody(name='body'),
}

async function updateNatGatewayNatType(request: UpdateNatGatewayNatTypeRequest): UpdateNatGatewayNatTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateNatGatewayNatType', 'POST', '/', 'json', false, 'json', request);
}

model UpdateNetworkAclEntriesRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  egressAclEntries?: [ 
    {
      description?: string(name='Description', example='This is EgressAclEntries.'),
      destinationCidrIp?: string(name='DestinationCidrIp', example='10.0.0.0/24'),
      entryType?: string(name='EntryType', example='custom'),
      networkAclEntryId?: string(name='NetworkAclEntryId', example='nae-2zecs97e0brcge46****'),
      networkAclEntryName?: string(name='NetworkAclEntryName', example='acl-2'),
      policy?: string(name='Policy', example='accept'),
      port?: string(name='Port', example='-1/-1'),
      protocol?: string(name='Protocol', example='all'),
    }
  ](name='EgressAclEntries', position='Query'),
  ingressAclEntries?: [ 
    {
      description?: string(name='Description', example='This is IngressAclEntries.'),
      entryType?: string(name='EntryType', example='custom'),
      networkAclEntryId?: string(name='NetworkAclEntryId', example='nae-2zepn32de59j8m4****'),
      networkAclEntryName?: string(name='NetworkAclEntryName', example='acl-3'),
      policy?: string(name='Policy', example='accept'),
      port?: string(name='Port', example='-1/-1'),
      protocol?: string(name='Protocol', example='all'),
      sourceCidrIp?: string(name='SourceCidrIp', example='10.0.0.0/24'),
    }
  ](name='IngressAclEntries', position='Query'),
  networkAclId: string(name='NetworkAclId', example='nacl-bp1lhl0taikrzxsc****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  updateEgressAclEntries?: boolean(name='UpdateEgressAclEntries', example='false', position='Query'),
  updateIngressAclEntries?: boolean(name='UpdateIngressAclEntries', example='false', position='Query'),
}

model UpdateNetworkAclEntriesResponseBody = {
  requestId?: string(name='RequestId', example='1170A5A0-E760-4331-9133-A7D38D973215'),
}

model UpdateNetworkAclEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateNetworkAclEntriesResponseBody(name='body'),
}

async function updateNetworkAclEntries(request: UpdateNetworkAclEntriesRequest): UpdateNetworkAclEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateNetworkAclEntries', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePublicIpAddressPoolAttributeRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', example='AddressPoolDescription', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  name?: string(name='Name', example='AddressPoolName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  publicIpAddressPoolId: string(name='PublicIpAddressPoolId', example='pippool-6wetvn6fumkgycssx****', position='Query'),
  regionId: string(name='RegionId', example='cn-chengdu', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdatePublicIpAddressPoolAttributeResponseBody = {
  requestId?: string(name='RequestId', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model UpdatePublicIpAddressPoolAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePublicIpAddressPoolAttributeResponseBody(name='body'),
}

async function updatePublicIpAddressPoolAttribute(request: UpdatePublicIpAddressPoolAttributeRequest): UpdatePublicIpAddressPoolAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePublicIpAddressPoolAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTrafficMirrorFilterAttributeRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hongkong', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMirrorFilterDescription?: string(name='TrafficMirrorFilterDescription', example='This is a new filter.', position='Query'),
  trafficMirrorFilterId: string(name='TrafficMirrorFilterId', example='tmf-j6cmls82xnc86vtpe****', position='Query'),
  trafficMirrorFilterName?: string(name='TrafficMirrorFilterName', example='test', position='Query'),
}

model UpdateTrafficMirrorFilterAttributeResponseBody = {
  requestId?: string(name='RequestId', example='5816D35F-94D5-48CE-838F-2327C8EE8D49'),
}

model UpdateTrafficMirrorFilterAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTrafficMirrorFilterAttributeResponseBody(name='body'),
}

async function updateTrafficMirrorFilterAttribute(request: UpdateTrafficMirrorFilterAttributeRequest): UpdateTrafficMirrorFilterAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTrafficMirrorFilterAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTrafficMirrorFilterRuleAttributeRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  destinationCidrBlock?: string(name='DestinationCidrBlock', example='10.0.0.0/24', position='Query'),
  destinationPortRange?: string(name='DestinationPortRange', example='-1/-1', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  priority?: int32(name='Priority', example='1', position='Query'),
  protocol?: string(name='Protocol', example='ICMP', position='Query'),
  regionId: string(name='RegionId', example='cn-hongkong', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  ruleAction?: string(name='RuleAction', example='accept', position='Query'),
  sourceCidrBlock?: string(name='SourceCidrBlock', example='0.0.0.0/0', position='Query'),
  sourcePortRange?: string(name='SourcePortRange', example='22/40', position='Query'),
  trafficMirrorFilterRuleId: string(name='TrafficMirrorFilterRuleId', example='tmr-j6c89rzmtd3hhdugq****', position='Query'),
}

model UpdateTrafficMirrorFilterRuleAttributeResponseBody = {
  requestId?: string(name='RequestId', example='02EB8585-D4DC-4E29-A0F4-7C588C82863C'),
}

model UpdateTrafficMirrorFilterRuleAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTrafficMirrorFilterRuleAttributeResponseBody(name='body'),
}

async function updateTrafficMirrorFilterRuleAttribute(request: UpdateTrafficMirrorFilterRuleAttributeRequest): UpdateTrafficMirrorFilterRuleAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTrafficMirrorFilterRuleAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTrafficMirrorSessionAttributeRequest {
  clientToken?: string(name='ClientToken', example='0c593ea1-3bea-11e9-b96b-88e9fe63****', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  enabled?: boolean(name='Enabled', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  priority?: int32(name='Priority', example='2', position='Query'),
  regionId: string(name='RegionId', example='cn-hongkong', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMirrorFilterId?: string(name='TrafficMirrorFilterId', example='tmf-j6cmls82xnc86vtpe****', position='Query'),
  trafficMirrorSessionDescription?: string(name='TrafficMirrorSessionDescription', example='This is a new session.', position='Query'),
  trafficMirrorSessionId: string(name='TrafficMirrorSessionId', example='tms-j6cla50buc44ap8tu****', position='Query'),
  trafficMirrorSessionName?: string(name='TrafficMirrorSessionName', example='abc', position='Query'),
  trafficMirrorTargetId?: string(name='TrafficMirrorTargetId', example='eni-j6c2fp57q8rr47rp*****', position='Query'),
  trafficMirrorTargetType?: string(name='TrafficMirrorTargetType', example='NetworkInterface', position='Query'),
  virtualNetworkId?: int32(name='VirtualNetworkId', example='10', position='Query'),
}

model UpdateTrafficMirrorSessionAttributeResponseBody = {
  requestId?: string(name='RequestId', example='64DCAF03-E2C7-479A-ACEA-38B79876B006'),
}

model UpdateTrafficMirrorSessionAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTrafficMirrorSessionAttributeResponseBody(name='body'),
}

async function updateTrafficMirrorSessionAttribute(request: UpdateTrafficMirrorSessionAttributeRequest): UpdateTrafficMirrorSessionAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTrafficMirrorSessionAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateVirtualBorderBandwidthRequest {
  bandwidth: int32(name='Bandwidth', example='2', position='Query'),
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-0016****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  virtualBorderRouterId: string(name='VirtualBorderRouterId', example='vbr-bp15zckdt37pq72****', position='Query'),
}

model UpdateVirtualBorderBandwidthResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='none'),
  requestId?: string(name='RequestId', example='AA4486A8-B6AE-469E-AB09-820EF8ECFA2B'),
  success?: boolean(name='Success', example='true'),
}

model UpdateVirtualBorderBandwidthResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVirtualBorderBandwidthResponseBody(name='body'),
}

async function updateVirtualBorderBandwidth(request: UpdateVirtualBorderBandwidthRequest): UpdateVirtualBorderBandwidthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateVirtualBorderBandwidth', 'POST', '/', 'json', false, 'json', request);
}

model UpdateVirtualPhysicalConnectionRequest {
  dryRun?: boolean(name='DryRun', description='DryRun', example='false', position='Query'),
  expectSpec?: string(name='ExpectSpec', description='ExpectSpec', example='50M', position='Query'),
  instanceId: string(name='InstanceId', description='Vpconn的实例ID', example='pc-bp1mrgfbtmc9brre7****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  token?: string(name='Token', description='幂等Token', example='CBCE910E-D396-4944-8****', position='Query'),
  vlanId: long(name='VlanId', description='vpconn的VlanID', example='1', position='Query'),
}

model UpdateVirtualPhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='7035627E-1C1D-5BC7-A830-F897A35912D1'),
  success?: string(name='Success', description='是否修改成功', example='true'),
}

model UpdateVirtualPhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVirtualPhysicalConnectionResponseBody(name='body'),
}

async function updateVirtualPhysicalConnection(request: UpdateVirtualPhysicalConnectionRequest): UpdateVirtualPhysicalConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateVirtualPhysicalConnection', 'POST', '/', 'json', false, 'json', request);
}

model UpdateVpcGatewayEndpointAttributeRequest {
  clientToken?: string(name='ClientToken', description='幂等参数', example='0c593ea1-3bea-11e9-b96b-88e9fe637760', position='Query'),
  dryRun?: boolean(name='DryRun', description='是否只预检此次请求', example='false', position='Query'),
  endpointDescription?: string(name='EndpointDescription', description='网关节点描述', example='updateendpoint', position='Query'),
  endpointId: string(name='EndpointId', description='VPC网关实例ID', example='vpce-bp1w1dmdqjpwul0v3****', position='Query'),
  endpointName?: string(name='EndpointName', description='网关节点名称', example='update', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  policyDocument?: string(name='PolicyDocument', description='访问云服务的权限控制策略', example='{   "Version" : "1",   "Statement" : [ {     "Effect" : "Allow",     "Resource" : [ "*" ],     "Action" : [ "*" ],     "Principal" : [ "*" ]   } ] }', position='Query'),
  regionId: string(name='RegionId', description='地域', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdateVpcGatewayEndpointAttributeResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='E9654534-5A38-5545-813F-0403D49042FB'),
}

model UpdateVpcGatewayEndpointAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVpcGatewayEndpointAttributeResponseBody(name='body'),
}

async function updateVpcGatewayEndpointAttribute(request: UpdateVpcGatewayEndpointAttributeRequest): UpdateVpcGatewayEndpointAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateVpcGatewayEndpointAttribute', 'POST', '/', 'json', false, 'json', request);
}

model VpcDescribeVpcNatGatewayNetworkInterfaceQuotaRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  natGatewayId?: string(name='NatGatewayId', description='查询NAT网关关联的ENI实例信息', example='ngw-bp1uewa15k4iy5770****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceUid?: long(name='ResourceUid', example='132193271328****', position='Query'),
}

model VpcDescribeVpcNatGatewayNetworkInterfaceQuotaResponseBody = {
  quota?: long(name='Quota', description='分页大小', example='2'),
  requestId?: string(name='RequestId', description='Id of the request', example='611CB80C-B6A9-43DB-9E38-0B0AC3D9B58F'),
}

model VpcDescribeVpcNatGatewayNetworkInterfaceQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: VpcDescribeVpcNatGatewayNetworkInterfaceQuotaResponseBody(name='body'),
}

async function vpcDescribeVpcNatGatewayNetworkInterfaceQuota(request: VpcDescribeVpcNatGatewayNetworkInterfaceQuotaRequest): VpcDescribeVpcNatGatewayNetworkInterfaceQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VpcDescribeVpcNatGatewayNetworkInterfaceQuota', 'POST', '/', 'json', false, 'json', request);
}

